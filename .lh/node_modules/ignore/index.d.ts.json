{
    "sourceFile": "node_modules/ignore/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892325222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "type Pathname = string\n\ninterface TestResult {\n  ignored: boolean\n  unignored: boolean\n}\n\nexport interface Ignore {\n  /**\n   * Adds one or several rules to the current manager.\n   * @param  {string[]} patterns\n   * @returns IgnoreBase\n   */\n  add(patterns: string | Ignore | readonly (string | Ignore)[]): this\n\n  /**\n   * Filters the given array of pathnames, and returns the filtered array.\n   * NOTICE that each path here should be a relative path to the root of your repository.\n   * @param paths the array of paths to be filtered.\n   * @returns The filtered array of paths\n   */\n  filter(pathnames: readonly Pathname[]): Pathname[]\n\n  /**\n   * Creates a filter function which could filter\n   * an array of paths with Array.prototype.filter.\n   */\n  createFilter(): (pathname: Pathname) => boolean\n\n  /**\n   * Returns Boolean whether pathname should be ignored.\n   * @param  {string} pathname a path to check\n   * @returns boolean\n   */\n  ignores(pathname: Pathname): boolean\n\n  /**\n   * Returns whether pathname should be ignored or unignored\n   * @param  {string} pathname a path to check\n   * @returns TestResult\n   */\n  test(pathname: Pathname): TestResult\n}\n\nexport interface Options {\n  ignorecase?: boolean\n  // For compatibility\n  ignoreCase?: boolean\n  allowRelativePaths?: boolean\n}\n\n/**\n * Creates new ignore manager.\n */\ndeclare function ignore(options?: Options): Ignore\n\ndeclare namespace ignore {\n  export function isPathValid (pathname: string): boolean\n}\n\nexport default ignore\n"
        }
    ]
}