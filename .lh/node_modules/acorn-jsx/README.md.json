{
    "sourceFile": "node_modules/acorn-jsx/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892013072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# Acorn-JSX\n\n[![Build Status](https://travis-ci.org/acornjs/acorn-jsx.svg?branch=master)](https://travis-ci.org/acornjs/acorn-jsx)\n[![NPM version](https://img.shields.io/npm/v/acorn-jsx.svg)](https://www.npmjs.org/package/acorn-jsx)\n\nThis is plugin for [Acorn](http://marijnhaverbeke.nl/acorn/) - a tiny, fast JavaScript parser, written completely in JavaScript.\n\nIt was created as an experimental alternative, faster [React.js JSX](http://facebook.github.io/react/docs/jsx-in-depth.html) parser. Later, it replaced the [official parser](https://github.com/facebookarchive/esprima) and these days is used by many prominent development tools.\n\n## Transpiler\n\nPlease note that this tool only parses source code to JSX AST, which is useful for various language tools and services. If you want to transpile your code to regular ES5-compliant JavaScript with source map, check out [Babel](https://babeljs.io/) and [Buble](https://buble.surge.sh/) transpilers which use `acorn-jsx` under the hood.\n\n## Usage\n\nRequiring this module provides you with an Acorn plugin that you can use like this:\n\n```javascript\nvar acorn = require(\"acorn\");\nvar jsx = require(\"acorn-jsx\");\nacorn.Parser.extend(jsx()).parse(\"my(<jsx/>, 'code');\");\n```\n\nNote that official spec doesn't support mix of XML namespaces and object-style access in tag names (#27) like in `<namespace:Object.Property />`, so it was deprecated in `acorn-jsx@3.0`. If you still want to opt-in to support of such constructions, you can pass the following option:\n\n```javascript\nacorn.Parser.extend(jsx({ allowNamespacedObjects: true }))\n```\n\nAlso, since most apps use pure React transformer, a new option was introduced that allows to prohibit namespaces completely:\n\n```javascript\nacorn.Parser.extend(jsx({ allowNamespaces: false }))\n```\n\nNote that by default `allowNamespaces` is enabled for spec compliancy.\n\n## License\n\nThis plugin is issued under the [MIT license](./LICENSE).\n"
        }
    ]
}