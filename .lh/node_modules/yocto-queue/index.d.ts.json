{
    "sourceFile": "node_modules/yocto-queue/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893115461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare class Queue<ValueType> implements Iterable<ValueType> {\n\t/**\n\tThe size of the queue.\n\t*/\n\treadonly size: number;\n\n\t/**\n\tTiny queue data structure.\n\n\tThe instance is an [`Iterable`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols), which means you can iterate over the queue front to back with a “for…of” loop, or use spreading to convert the queue to an array. Don't do this unless you really need to though, since it's slow.\n\n\t@example\n\t```\n\timport Queue = require('yocto-queue');\n\n\tconst queue = new Queue();\n\n\tqueue.enqueue('🦄');\n\tqueue.enqueue('🌈');\n\n\tconsole.log(queue.size);\n\t//=> 2\n\n\tconsole.log(...queue);\n\t//=> '🦄 🌈'\n\n\tconsole.log(queue.dequeue());\n\t//=> '🦄'\n\n\tconsole.log(queue.dequeue());\n\t//=> '🌈'\n\t```\n\t*/\n\tconstructor();\n\n\t[Symbol.iterator](): IterableIterator<ValueType>;\n\n\t/**\n\tAdd a value to the queue.\n\t*/\n\tenqueue(value: ValueType): void;\n\n\t/**\n\tRemove the next value in the queue.\n\n\t@returns The removed value or `undefined` if the queue is empty.\n\t*/\n\tdequeue(): ValueType | undefined;\n\n\t/**\n\tClear the queue.\n\t*/\n\tclear(): void;\n}\n\nexport = Queue;\n"
        }
    ]
}