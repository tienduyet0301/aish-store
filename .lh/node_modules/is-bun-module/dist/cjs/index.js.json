{
    "sourceFile": "node_modules/is-bun-module/dist/cjs/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892328428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  MINIMUM_BUN_VERSION: () => MINIMUM_BUN_VERSION,\n  isBunModule: () => isBunModule,\n  isSupportedNodeModule: () => isSupportedNodeModule\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_semver = __toESM(require(\"semver\"));\n\n// src/assets/bun-modules.json\nvar bun_modules_default = {\n  bun: true,\n  \"bun:ffi\": true,\n  \"bun:jsc\": true,\n  \"bun:sqlite\": true,\n  \"bun:test\": true,\n  \"bun:wrap\": true\n};\n\n// src/assets/node-modules.json\nvar node_modules_default = {\n  assert: true,\n  async_hooks: true,\n  buffer: true,\n  child_process: true,\n  cluster: \">= 1.1.25\",\n  console: true,\n  crypto: true,\n  dgram: \">= 1.1.6\",\n  dns: true,\n  domain: true,\n  events: true,\n  fs: true,\n  http: true,\n  http2: \">= 1.0.13\",\n  https: true,\n  module: true,\n  net: true,\n  os: true,\n  path: true,\n  perf_hooks: true,\n  process: true,\n  punycode: true,\n  querystring: true,\n  readline: true,\n  stream: true,\n  string_decoder: true,\n  sys: true,\n  timers: true,\n  tls: true,\n  tty: true,\n  url: true,\n  util: true,\n  vm: true,\n  wasi: true,\n  worker_threads: true,\n  zlib: true\n};\n\n// src/index.ts\nvar MINIMUM_BUN_VERSION = \"1.0.0\";\nfunction isBunModule(moduleName, bunVersion) {\n  return checkModule(moduleName, bun_modules_default, bunVersion);\n}\nfunction isSupportedNodeModule(moduleName, bunVersion) {\n  return checkModule(moduleName.replace(/^node:/, \"\"), node_modules_default, bunVersion);\n}\nfunction checkModule(moduleName, modules, bunVersion) {\n  var _a;\n  if (typeof moduleName !== \"string\") throw new TypeError(\"Module name must be a string\");\n  if (!(moduleName in modules)) return false;\n  let targetBunVersion;\n  if (bunVersion) {\n    targetBunVersion = toSemVerStringified(bunVersion);\n    if (!targetBunVersion) {\n      throw new TypeError(\"Bun version must be a string like 1.0.0 or 'latest'\");\n    }\n  } else {\n    if (typeof process === \"undefined\" || !((_a = process.versions) == null ? void 0 : _a.bun)) {\n      throw new Error(\"Bun version is not provided and cannot be detected\");\n    }\n    targetBunVersion = process.versions.bun;\n  }\n  if (import_semver.default.lt(targetBunVersion, MINIMUM_BUN_VERSION)) {\n    throw new RangeError(`Bun version must be at least ${MINIMUM_BUN_VERSION}`);\n  }\n  const versionRange = modules[moduleName];\n  if (typeof versionRange === \"boolean\") return versionRange;\n  return import_semver.default.satisfies(targetBunVersion, versionRange);\n}\nfunction toSemVerStringified(input) {\n  if (typeof input !== \"string\") return;\n  if (input === \"latest\") return \"999.999.999\";\n  if (import_semver.default.valid(input)) return input;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  MINIMUM_BUN_VERSION,\n  isBunModule,\n  isSupportedNodeModule\n});\n"
        }
    ]
}