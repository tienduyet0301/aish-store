{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__mocks__/JSXAttributeMock.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @flow\n */\n\nimport toAST from 'to-ast'; // eslint-disable-line import/no-extraneous-dependencies\nimport JSXExpressionContainerMock from './JSXExpressionContainerMock';\n\nexport type JSXAttributeMockType = {\n  type: 'JSXAttribute',\n  name: {\n    type: 'JSXIdentifier',\n    name: string,\n  },\n  value: mixed,\n};\n\nexport default function JSXAttributeMock(prop: string, value: mixed, isExpressionContainer?: boolean = false): JSXAttributeMockType {\n  let astValue;\n  if (value && value.type !== undefined) {\n    astValue = value;\n  } else {\n    astValue = toAST(value);\n  }\n  let attributeValue = astValue;\n  if (isExpressionContainer || astValue.type !== 'Literal') {\n    attributeValue = JSXExpressionContainerMock(astValue);\n  } else if (attributeValue.type === 'Literal' && !('raw' in (attributeValue: any))) {\n    (attributeValue: any).raw = JSON.stringify((attributeValue: any).value);\n  }\n\n  return {\n    type: 'JSXAttribute',\n    name: {\n      type: 'JSXIdentifier',\n      name: prop,\n    },\n    value: attributeValue,\n  };\n}\n"
        }
    ]
}