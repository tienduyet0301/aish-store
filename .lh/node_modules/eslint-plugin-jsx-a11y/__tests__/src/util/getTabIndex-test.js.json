{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/getTabIndex-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\n\nimport getTabIndex from '../../../src/util/getTabIndex';\nimport IdentifierMock from '../../../__mocks__/IdentifierMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\ntest('getTabIndex', (t) => {\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', 0)),\n    0,\n    'tabIndex is defined as zero -> zero',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', 1)),\n    1,\n    'tabIndex is defined as a positive integer -> returns it',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', -1)),\n    -1,\n    'tabIndex is defined as a negative integer -> returns it',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', '')),\n    undefined,\n    'tabIndex is defined as an empty string -> undefined',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', 9.1)),\n    undefined,\n    'tabIndex is defined as a float -> undefined',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', '0')),\n    0,\n    'tabIndex is defined as a string which converts to a number -> returns the integer',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', '0a')),\n    undefined,\n    'tabIndex is defined as a string which is NaN -> returns undefined',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', true)),\n    undefined,\n    'tabIndex is defined as true -> returns undefined',\n  );\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', false)),\n    undefined,\n    'tabIndex is defined as false -> returns undefined',\n  );\n\n  t.equal(\n    typeof getTabIndex(JSXAttributeMock('tabIndex', () => 0)),\n    'function',\n    'tabIndex is defined as a function expression -> returns the correct type',\n  );\n\n  const name = 'identName';\n  t.equal(\n    getTabIndex(JSXAttributeMock(\n      'tabIndex',\n      IdentifierMock(name),\n      true,\n    )),\n    name,\n    'tabIndex is defined as a variable expression -> returns the Identifier name',\n  );\n\n  t.equal(\n    getTabIndex(JSXAttributeMock('tabIndex', undefined)),\n    undefined,\n    'tabIndex is not defined -> returns undefined',\n  );\n\n  t.end();\n});\n"
        }
    ]
}