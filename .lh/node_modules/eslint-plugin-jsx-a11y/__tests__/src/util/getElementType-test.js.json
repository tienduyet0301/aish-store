{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/getElementType-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\n\nimport getElementType from '../../../src/util/getElementType';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\ntest('getElementType', (t) => {\n  t.test('no settings in context', (st) => {\n    const elementType = getElementType({ settings: {} });\n\n    st.equal(\n      elementType(JSXElementMock('input').openingElement),\n      'input',\n      'returns the exact tag name for a DOM element',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('CustomInput').openingElement),\n      'CustomInput',\n      'returns the exact tag name for a custom element',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('toString').openingElement),\n      'toString',\n      'returns the exact tag name for names that are in Object.prototype',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('span', [JSXAttributeMock('as', 'h1')]).openingElement),\n      'span',\n      'returns the default tag name provided',\n    );\n\n    st.end();\n  });\n\n  t.test('components settings in context', (st) => {\n    const elementType = getElementType({\n      settings: {\n        'jsx-a11y': {\n          components: {\n            CustomInput: 'input',\n          },\n        },\n      },\n    });\n\n    st.equal(\n      elementType(JSXElementMock('input').openingElement),\n      'input',\n      'returns the exact tag name for a DOM element',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('CustomInput').openingElement),\n      'input',\n      'returns the mapped tag name for a custom element',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('CityInput').openingElement),\n      'CityInput',\n      'returns the exact tag name for a custom element not in the components map',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('span', [JSXAttributeMock('as', 'h1')]).openingElement),\n      'span',\n      'return the default tag name since not polymorphicPropName was provided',\n    );\n\n    st.end();\n  });\n\n  t.test('polymorphicPropName settings in context', (st) => {\n    const elementType = getElementType({\n      settings: {\n        'jsx-a11y': {\n          polymorphicPropName: 'asChild',\n          components: {\n            CustomButton: 'button',\n          },\n        },\n      },\n    });\n\n    st.equal(\n      elementType(JSXElementMock('span', [JSXAttributeMock('asChild', 'h1')]).openingElement),\n      'h1',\n      'returns the tag name provided by the polymorphic prop, \"asChild\", defined in the settings',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('CustomButton', [JSXAttributeMock('asChild', 'a')]).openingElement),\n      'a',\n      'returns the tag name provided by the polymorphic prop, \"asChild\", defined in the settings instead of the component mapping tag',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('CustomButton', [JSXAttributeMock('as', 'a')]).openingElement),\n      'button',\n      'returns the tag name provided by the componnet mapping if the polymorphic prop, \"asChild\", defined in the settings is not set',\n    );\n\n    st.end();\n  });\n\n  t.test('polymorphicPropName settings and explicitly defined polymorphicAllowList in context', (st) => {\n    const elementType = getElementType({\n      settings: {\n        'jsx-a11y': {\n          polymorphicPropName: 'asChild',\n          polymorphicAllowList: [\n            'Box',\n            'Icon',\n          ],\n          components: {\n            Box: 'div',\n            Icon: 'svg',\n          },\n        },\n      },\n    });\n\n    st.equal(\n      elementType(JSXElementMock('Spinner', [JSXAttributeMock('asChild', 'img')]).openingElement),\n      'Spinner',\n      'does not use the polymorphic prop if polymorphicAllowList is defined, but element is not part of polymorphicAllowList',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('Icon', [JSXAttributeMock('asChild', 'img')]).openingElement),\n      'img',\n      'uses the polymorphic prop if it is in explicitly defined polymorphicAllowList',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('Box', [JSXAttributeMock('asChild', 'span')]).openingElement),\n      'span',\n      'returns the tag name provided by the polymorphic prop, \"asChild\", defined in the settings instead of the component mapping tag',\n    );\n\n    st.equal(\n      elementType(JSXElementMock('Box', [JSXAttributeMock('as', 'a')]).openingElement),\n      'div',\n      'returns the tag name provided by the component mapping if the polymorphic prop, \"asChild\", defined in the settings is not set',\n    );\n\n    st.end();\n  });\n\n  t.end();\n});\n"
        }
    ]
}