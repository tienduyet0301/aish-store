{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isInteractiveElement-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\nimport { elementType } from 'jsx-ast-utils';\n\nimport isInteractiveElement from '../../../src/util/isInteractiveElement';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport {\n  genElementSymbol,\n  genIndeterminantInteractiveElements,\n  genInteractiveElements,\n  genInteractiveRoleElements,\n  genNonInteractiveElements,\n  genNonInteractiveRoleElements,\n} from '../../../__mocks__/genInteractives';\n\ntest('isInteractiveElement', (t) => {\n  t.equal(\n    isInteractiveElement(undefined, []),\n    false,\n    'identifies them as interactive elements',\n  );\n\n  t.test('interactive elements', (st) => {\n    genInteractiveElements().forEach(({ openingElement }) => {\n      st.equal(\n        isInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        true,\n        `identifies \\`${genElementSymbol(openingElement)}\\` as an interactive element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.test('interactive role elements', (st) => {\n    genInteractiveRoleElements().forEach(({ openingElement }) => {\n      st.equal(\n        isInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        false,\n        `identifies \\`${genElementSymbol(openingElement)}\\` as an interactive element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.test('non-interactive elements', (st) => {\n    genNonInteractiveElements().forEach(({ openingElement }) => {\n      st.equal(\n        isInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        false,\n        `identifies \\`${genElementSymbol(openingElement)}\\` as an interactive element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.test('non-interactive role elements', (st) => {\n    genNonInteractiveRoleElements().forEach(({ openingElement }) => {\n      st.equal(\n        isInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        false,\n        `identifies \\`${genElementSymbol(openingElement)}\\` as an interactive element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.test('indeterminate elements', (st) => {\n    genIndeterminantInteractiveElements().forEach(({ openingElement }) => {\n      st.equal(\n        isInteractiveElement(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        false,\n        `identifies \\`${genElementSymbol(openingElement)}\\` as an interactive element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.equal(\n    isInteractiveElement('CustomComponent', JSXElementMock()),\n    false,\n    'JSX elements are not interactive',\n  );\n\n  t.end();\n});\n"
        }
    ]
}