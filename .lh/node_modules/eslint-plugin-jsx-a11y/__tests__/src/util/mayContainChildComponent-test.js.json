{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/mayContainChildComponent-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\n\nimport mayContainChildComponent from '../../../src/util/mayContainChildComponent';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\n\ntest('mayContainChildComponent', (t) => {\n  t.equal(\n    mayContainChildComponent(\n      JSXElementMock('div', [], [\n        JSXElementMock('div', [], [\n          JSXElementMock('span', [], []),\n          JSXElementMock('span', [], [\n            JSXElementMock('span', [], []),\n            JSXElementMock('span', [], [\n              JSXElementMock('span', [], []),\n            ]),\n          ]),\n        ]),\n        JSXElementMock('span', [], []),\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n        ]),\n      ]),\n      'FancyComponent',\n      5,\n    ),\n    false,\n    'no FancyComponent returns false',\n  );\n\n  t.test('contains an indicated component', (st) => {\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('input'),\n        ]),\n        'input',\n      ),\n      true,\n      'returns true',\n    );\n\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('FancyComponent'),\n        ]),\n        'FancyComponent',\n      ),\n      true,\n      'returns true',\n    );\n\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXElementMock('FancyComponent'),\n          ]),\n        ]),\n        'FancyComponent',\n      ),\n      false,\n      'FancyComponent is outside of default depth, should return false',\n    );\n\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXElementMock('FancyComponent'),\n          ]),\n        ]),\n        'FancyComponent',\n        2,\n      ),\n      true,\n      'FancyComponent is inside of custom depth, should return true',\n    );\n\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXElementMock('span', [], []),\n            JSXElementMock('span', [], [\n              JSXElementMock('span', [], []),\n              JSXElementMock('span', [], [\n                JSXElementMock('span', [], [\n                  JSXElementMock('span', [], [\n                    JSXElementMock('FancyComponent'),\n                  ]),\n                ]),\n              ]),\n            ]),\n          ]),\n          JSXElementMock('span', [], []),\n          JSXElementMock('img', [\n            JSXAttributeMock('src', 'some/path'),\n          ]),\n        ]),\n        'FancyComponent',\n        6,\n      ),\n      true,\n      'deep nesting, returns true',\n    );\n\n    st.end();\n  });\n\n  t.equal(\n    mayContainChildComponent(\n      JSXElementMock('div', [], [\n        JSXExpressionContainerMock('mysteryBox'),\n      ]),\n      'FancyComponent',\n    ),\n    true,\n    'Intederminate situations + expression container children - returns true',\n  );\n\n  t.test('Glob name matching - component name contains question mark ? - match any single character', (st) => {\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('FancyComponent'),\n        ]),\n        'Fanc?Co??onent',\n      ),\n      true,\n      'returns true',\n    );\n\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('FancyComponent'),\n        ]),\n        'FancyComponent?',\n      ),\n      false,\n      'returns false',\n    );\n\n    st.test('component name contains asterisk * - match zero or more characters', (s2t) => {\n      s2t.equal(\n        mayContainChildComponent(\n          JSXElementMock('div', [], [\n            JSXElementMock('FancyComponent'),\n          ]),\n          'Fancy*',\n        ),\n        true,\n        'returns true',\n      );\n\n      s2t.equal(\n        mayContainChildComponent(\n          JSXElementMock('div', [], [\n            JSXElementMock('FancyComponent'),\n          ]),\n          '*Component',\n        ),\n        true,\n        'returns true',\n      );\n\n      s2t.equal(\n        mayContainChildComponent(\n          JSXElementMock('div', [], [\n            JSXElementMock('FancyComponent'),\n          ]),\n          'Fancy*C*t',\n        ),\n        true,\n        'returns true',\n      );\n\n      s2t.end();\n    });\n\n    st.end();\n  });\n\n  t.test('using a custom elementType function', (st) => {\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('CustomInput'),\n        ]),\n        'input',\n        2,\n        () => 'input',\n      ),\n      true,\n      'returns true when the custom elementType returns the proper name',\n    );\n\n    st.equal(\n      mayContainChildComponent(\n        JSXElementMock('div', [], [\n          JSXElementMock('CustomInput'),\n        ]),\n        'input',\n        2,\n        () => 'button',\n      ),\n      false,\n      'returns false when the custom elementType returns a wrong name',\n    );\n\n    st.end();\n  });\n\n  t.end();\n});\n"
        }
    ]
}