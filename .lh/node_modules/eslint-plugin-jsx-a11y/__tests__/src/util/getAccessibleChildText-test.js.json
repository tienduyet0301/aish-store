{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/getAccessibleChildText-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\nimport { elementType } from 'jsx-ast-utils';\n\nimport getAccessibleChildText from '../../../src/util/getAccessibleChildText';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\n\ntest('getAccessibleChildText', (t) => {\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [JSXAttributeMock('aria-label', 'foo')],\n    ), elementType),\n    'foo',\n    'returns the aria-label when present',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [JSXAttributeMock('aria-label', 'foo')],\n      [{ type: 'JSXText', value: 'bar' }],\n    ), elementType),\n    'foo',\n    'returns the aria-label instead of children',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [JSXAttributeMock('aria-hidden', 'true')],\n    ), elementType),\n    '',\n    'skips elements with aria-hidden=true',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'JSXText', value: 'bar' }],\n    ), elementType),\n    'bar',\n    'returns literal value for JSXText child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [JSXElementMock('img', [\n        JSXAttributeMock('src', 'some/path'),\n        JSXAttributeMock('alt', 'a sensible label'),\n      ])],\n    ), elementType),\n    'a sensible label',\n    'returns alt text for img child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [JSXElementMock('span', [\n        JSXAttributeMock('alt', 'a sensible label'),\n      ])],\n    ), elementType),\n    '',\n    'returns blank when alt tag is used on arbitrary element',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: 'bar' }],\n    ), elementType),\n    'bar',\n    'returns literal value for JSXText child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: ' bar   ' }],\n    ), elementType),\n    'bar',\n    'returns trimmed literal value for JSXText child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: 'foo         bar' }],\n    ), elementType),\n    'foo bar',\n    'returns space-collapsed literal value for JSXText child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: 'foo, bar. baz? foo; bar:' }],\n    ), elementType),\n    'foo bar baz foo bar',\n    'returns punctuation-stripped literal value for JSXText child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [JSXElementMock(\n        'span',\n        [],\n        [{ type: 'Literal', value: 'bar' }],\n      )],\n    ), elementType),\n    'bar',\n    'returns recursive value for JSXElement child',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [JSXElementMock(\n        'span',\n        [],\n        [JSXElementMock(\n          'span',\n          [JSXAttributeMock('aria-hidden', 'true')],\n        )],\n      )],\n    ), elementType),\n    '',\n    'skips children with aria-hidden-true',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: 'foo' }, { type: 'Literal', value: 'bar' }],\n    ), elementType),\n    'foo bar',\n    'joins multiple children properly - no spacing',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: ' foo ' }, { type: 'Literal', value: ' bar ' }],\n    ), elementType),\n    'foo bar',\n    'joins multiple children properly - with spacing',\n  );\n\n  t.equal(\n    getAccessibleChildText(JSXElementMock(\n      'a',\n      [],\n      [{ type: 'Literal', value: 'foo' }, { type: 'Unknown' }, { type: 'Literal', value: 'bar' }],\n    ), elementType),\n    'foo bar',\n    'skips unknown elements',\n  );\n\n  t.end();\n});\n"
        }
    ]
}