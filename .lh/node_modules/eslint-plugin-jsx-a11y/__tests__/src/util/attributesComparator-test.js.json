{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/attributesComparator-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\n\nimport attributesComparator from '../../../src/util/attributesComparator';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\n\ntest('attributesComparator', (t) => {\n  t.equal(\n    attributesComparator(),\n    true,\n    'baseAttributes are undefined and attributes are undefined -> true',\n  );\n\n  t.equal(\n    attributesComparator([], []),\n    true,\n    'baseAttributes are empty and attributes are empty -> true',\n  );\n\n  t.equal(\n    attributesComparator([], [\n      JSXAttributeMock('foo', 0),\n      JSXAttributeMock('bar', 'baz'),\n    ]),\n    true,\n    'baseAttributes are empty and attributes have values -> true',\n  );\n\n  const baseAttributes = [\n    {\n      name: 'biz',\n      value: 1,\n    }, {\n      name: 'fizz',\n      value: 'pop',\n    }, {\n      name: 'fuzz',\n      value: 'lolz',\n    },\n  ];\n\n  t.equal(\n    attributesComparator(baseAttributes, []),\n    false,\n    'baseAttributes have values and attributes are empty -> false',\n  );\n\n  t.equal(\n    attributesComparator(baseAttributes, [\n      JSXElementMock(),\n      JSXAttributeMock('biz', 2),\n      JSXAttributeMock('ziff', 'opo'),\n      JSXAttributeMock('far', 'lolz'),\n    ]),\n    false,\n    'baseAttributes have values and attributes have values, and the values are different -> false',\n  );\n\n  t.equal(\n    attributesComparator(baseAttributes, [\n      JSXAttributeMock('biz', 1),\n      JSXAttributeMock('fizz', 'pop'),\n      JSXAttributeMock('goo', 'gazz'),\n    ]),\n    false,\n    'baseAttributes have values and attributes have values, and the values are a subset -> false',\n  );\n\n  t.equal(\n    attributesComparator(baseAttributes, [\n      JSXAttributeMock('biz', 1),\n      JSXAttributeMock('fizz', 'pop'),\n      JSXAttributeMock('fuzz', 'lolz'),\n    ]),\n    true,\n    'baseAttributes have values and attributes have values, and the values are the same -> true',\n  );\n\n  t.equal(\n    attributesComparator(baseAttributes, [\n      JSXAttributeMock('biz', 1),\n      JSXAttributeMock('fizz', 'pop'),\n      JSXAttributeMock('fuzz', 'lolz'),\n      JSXAttributeMock('dar', 'tee'),\n    ]),\n    true,\n    'baseAttributes have values and attributes have values, and the values are a superset -> true',\n  );\n\n  t.end();\n});\n"
        }
    ]
}