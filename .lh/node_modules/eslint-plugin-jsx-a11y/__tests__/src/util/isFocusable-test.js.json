{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/isFocusable-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\nimport { elementType } from 'jsx-ast-utils';\n\nimport isFocusable from '../../../src/util/isFocusable';\nimport {\n  genElementSymbol,\n  genInteractiveElements,\n  genNonInteractiveElements,\n} from '../../../__mocks__/genInteractives';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\n\nfunction mergeTabIndex(index, attributes) {\n  return [].concat(attributes, JSXAttributeMock('tabIndex', index));\n}\n\ntest('isFocusable', (t) => {\n  t.test('interactive elements', (st) => {\n    genInteractiveElements().forEach(({ openingElement }) => {\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        true,\n        `identifies \\`${genElementSymbol(openingElement)}\\` as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex(-1, openingElement.attributes),\n        ),\n        false,\n        `does NOT identify \\`${genElementSymbol(openingElement)}\\` with tabIndex of -1 as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex(0, openingElement.attributes),\n        ),\n        true,\n        `identifies \\`${genElementSymbol(openingElement)}\\` with tabIndex of 0 as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex(1, openingElement.attributes),\n        ),\n        true,\n        `identifies \\`${genElementSymbol(openingElement)}\\` with tabIndex of 1 as a focusable element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.test('non-interactive elements', (st) => {\n    genNonInteractiveElements().forEach(({ openingElement }) => {\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          openingElement.attributes,\n        ),\n        false,\n        `does NOT identify \\`${genElementSymbol(openingElement)}\\` as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex(-1, openingElement.attributes),\n        ),\n        false,\n        `does NOT identify \\`${genElementSymbol(openingElement)}\\` with tabIndex of -1 as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex(0, openingElement.attributes),\n        ),\n        true,\n        `identifies \\`${genElementSymbol(openingElement)}\\` with tabIndex of 0 as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex(1, openingElement.attributes),\n        ),\n        true,\n        `identifies \\`${genElementSymbol(openingElement)}\\` with tabIndex of 1 as a focusable element`,\n      );\n\n      st.equal(\n        isFocusable(\n          elementType(openingElement),\n          mergeTabIndex('bogus', openingElement.attributes),\n        ),\n        false,\n        `does NOT identify \\`${genElementSymbol(openingElement)}\\` with tabIndex of 'bogus' as a focusable element`,\n      );\n    });\n\n    st.end();\n  });\n\n  t.end();\n});\n"
        }
    ]
}