{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/hasAccessibleChild-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\nimport { elementType } from 'jsx-ast-utils';\n\nimport hasAccessibleChild from '../../../src/util/hasAccessibleChild';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\n\ntest('hasAccessibleChild', (t) => {\n  t.equal(\n    hasAccessibleChild(JSXElementMock('div', []), elementType),\n    false,\n    'has no children and does not set dangerouslySetInnerHTML -> false',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [JSXAttributeMock('dangerouslySetInnerHTML', true)], []),\n      elementType,\n    ),\n    true,\n    'has no children and sets dangerouslySetInnerHTML -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock(\n        'div',\n        [],\n        [{\n          type: 'Literal',\n          value: 'foo',\n        }],\n      ),\n      elementType,\n    ),\n    true,\n    'has children + Literal child -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [JSXElementMock('div', [])]),\n      elementType,\n    ),\n    true,\n    'has children + visible JSXElement child -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [{\n        type: 'JSXText',\n        value: 'foo',\n      }]),\n      elementType,\n    ),\n    true,\n    'has children + JSText element -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [\n        JSXElementMock('div', [\n          JSXAttributeMock('aria-hidden', true),\n        ]),\n      ]),\n      elementType,\n    ),\n    false,\n    'has children + hidden child JSXElement -> false',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [\n        JSXExpressionContainerMock({\n          type: 'Identifier',\n          name: 'foo',\n        }),\n      ]),\n      elementType,\n    ),\n    true,\n    'defined JSXExpressionContainer -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [\n        JSXExpressionContainerMock({\n          type: 'Identifier',\n          name: 'undefined',\n        }),\n      ]),\n      elementType,\n    ),\n    false,\n    'has children + undefined JSXExpressionContainer -> false',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [{\n        type: 'Unknown',\n      }]),\n      elementType,\n    ),\n    false,\n    'unknown child type -> false',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [JSXAttributeMock('children', true)], []),\n      elementType,\n    ),\n    true,\n    'children passed as a prop -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [\n        JSXElementMock('input', [JSXAttributeMock('type', 'hidden')]),\n      ]),\n      elementType,\n    ),\n    false,\n    'has chidren -> hidden child input JSXElement -> false',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [\n        JSXElementMock('CustomInput', [JSXAttributeMock('type', 'hidden')]),\n      ]),\n      elementType,\n    ),\n    true,\n    'has children + custom JSXElement of type hidden -> true',\n  );\n\n  t.equal(\n    hasAccessibleChild(\n      JSXElementMock('div', [], [\n        JSXElementMock('CustomInput', [JSXAttributeMock('type', 'hidden')]),\n      ]),\n      () => 'input',\n    ),\n    false,\n    'custom JSXElement mapped to input if type is hidden -> false',\n  );\n\n  t.end();\n});\n"
        }
    ]
}