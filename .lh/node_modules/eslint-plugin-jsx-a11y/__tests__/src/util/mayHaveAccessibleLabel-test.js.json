{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/util/mayHaveAccessibleLabel-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import test from 'tape';\n\nimport mayHaveAccessibleLabel from '../../../src/util/mayHaveAccessibleLabel';\nimport JSXAttributeMock from '../../../__mocks__/JSXAttributeMock';\nimport JSXElementMock from '../../../__mocks__/JSXElementMock';\nimport JSXExpressionContainerMock from '../../../__mocks__/JSXExpressionContainerMock';\nimport JSXSpreadAttributeMock from '../../../__mocks__/JSXSpreadAttributeMock';\nimport JSXTextMock from '../../../__mocks__/JSXTextMock';\nimport LiteralMock from '../../../__mocks__/LiteralMock';\n\ntest('mayHaveAccessibleLabel', (t) => {\n  t.equal(\n    mayHaveAccessibleLabel(\n      JSXElementMock('div', [], [\n        JSXElementMock('div', [], [\n          JSXElementMock('span', [], []),\n          JSXElementMock('span', [], [\n            JSXElementMock('span', [], []),\n            JSXElementMock('span', [], [\n              JSXElementMock('span', [], []),\n            ]),\n          ]),\n        ]),\n        JSXElementMock('span', [], []),\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n        ]),\n      ]),\n      5,\n    ),\n    false,\n    'no label returns false',\n  );\n\n  t.test('label via attributes', (st) => {\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-label', 'A delicate label'),\n      ], [])),\n      true,\n      'aria-label returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-label', ''),\n      ], [])),\n      false,\n      'aria-label without content returns false',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-label', ' '),\n      ], [])),\n      false,\n      'aria-label with only spaces whitespace, should return false',\n    );\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-label', '\\n'),\n      ], [])),\n      false,\n      'aria-label with only newline whitespace, should return false',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-labelledby', 'elementId'),\n      ], [])),\n      true,\n      'aria-labelledby returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-labelledby', ''),\n      ], [])),\n      false,\n      'aria-labelledby without content returns false',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('aria-labelledby', 'elementId', true),\n      ], [])),\n      true,\n      'aria-labelledby with an expression container, should return true',\n    );\n\n    st.end();\n  });\n\n  t.test('label via custom label attribute', (st) => {\n    const customLabelProp = 'cowbell';\n\n    st.equal(\n      mayHaveAccessibleLabel(\n        JSXElementMock('div', [\n          JSXAttributeMock(customLabelProp, 'A delicate label'),\n        ], []),\n        1,\n        [customLabelProp],\n      ),\n      true,\n      'aria-label returns true',\n    );\n\n    st.end();\n  });\n\n  t.test('text label', (st) => {\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        LiteralMock('A fancy label'),\n      ])),\n      true,\n      'Literal text, returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        LiteralMock(' '),\n      ])),\n      false,\n      'Literal spaces whitespace, returns false',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        LiteralMock('\\n'),\n      ])),\n      false,\n      'Literal newline whitespace, returns false',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXTextMock('A fancy label'),\n      ])),\n      true,\n      'JSXText, returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('div', [], [\n          JSXTextMock('A fancy label'),\n        ]),\n      ])),\n      false,\n      'label is outside of default depth, returns false',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXTextMock('A fancy label'),\n          ]),\n        ]),\n        2,\n      ),\n      true,\n      'label is inside of custom depth, returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(\n        JSXElementMock('div', [], [\n          JSXElementMock('div', [], [\n            JSXElementMock('span', [], []),\n            JSXElementMock('span', [], [\n              JSXElementMock('span', [], []),\n              JSXElementMock('span', [], [\n                JSXElementMock('span', [], [\n                  JSXElementMock('span', [], [\n                    JSXTextMock('A fancy label'),\n                  ]),\n                ]),\n              ]),\n            ]),\n          ]),\n          JSXElementMock('span', [], []),\n          JSXElementMock('img', [\n            JSXAttributeMock('src', 'some/path'),\n          ]),\n        ]),\n        6,\n      ),\n      true,\n      'deep nesting, returns true',\n    );\n\n    st.end();\n  });\n\n  t.test('image content', (st) => {\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n        ]),\n      ])),\n      false,\n      'without alt, returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n          JSXAttributeMock('alt', 'A sensible label'),\n        ]),\n      ])),\n      true,\n      'with alt, returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXElementMock('img', [\n          JSXAttributeMock('src', 'some/path'),\n          JSXAttributeMock('aria-label', 'A sensible label'),\n        ]),\n      ])),\n      true,\n      'with aria-label, returns true',\n    );\n\n    st.end();\n  });\n\n  t.test('Intederminate situations', (st) => {\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [], [\n        JSXExpressionContainerMock('mysteryBox'),\n      ])),\n      true,\n      'expression container children, returns true',\n    );\n\n    st.equal(\n      mayHaveAccessibleLabel(JSXElementMock('div', [\n        JSXAttributeMock('style', 'some-junk'),\n        JSXSpreadAttributeMock('props'),\n      ], [])),\n      true,\n      'spread operator in attributes, returns true',\n    );\n\n    st.end();\n  });\n\n  t.end();\n});\n"
        }
    ]
}