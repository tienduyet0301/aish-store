{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/mouse-events-have-key-events-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce onmouseover/onmouseout are accompanied\n *  by onfocus/onblur.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/mouse-events-have-key-events';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst mouseOverError = {\n  message: 'onMouseOver must be accompanied by onFocus for accessibility.',\n  type: 'JSXAttribute',\n};\nconst pointerEnterError = {\n  message: 'onPointerEnter must be accompanied by onFocus for accessibility.',\n  type: 'JSXAttribute',\n};\nconst mouseOutError = {\n  message: 'onMouseOut must be accompanied by onBlur for accessibility.',\n  type: 'JSXAttribute',\n};\nconst pointerLeaveError = {\n  message: 'onPointerLeave must be accompanied by onBlur for accessibility.',\n  type: 'JSXAttribute',\n};\n\nruleTester.run('mouse-events-have-key-events', rule, {\n  valid: parsers.all([].concat(\n    { code: '<div onMouseOver={() => void 0} onFocus={() => void 0} />;' },\n    {\n      code: '<div onMouseOver={() => void 0} onFocus={() => void 0} {...props} />;',\n    },\n    { code: '<div onMouseOver={handleMouseOver} onFocus={handleFocus} />;' },\n    {\n      code: '<div onMouseOver={handleMouseOver} onFocus={handleFocus} {...props} />;',\n    },\n    { code: '<div />;' },\n    { code: '<div onBlur={() => {}} />' },\n    { code: '<div onFocus={() => {}} />' },\n    { code: '<div onMouseOut={() => void 0} onBlur={() => void 0} />' },\n    { code: '<div onMouseOut={() => void 0} onBlur={() => void 0} {...props} />' },\n    { code: '<div onMouseOut={handleMouseOut} onBlur={handleOnBlur} />' },\n    { code: '<div onMouseOut={handleMouseOut} onBlur={handleOnBlur} {...props} />' },\n    { code: '<MyElement />' },\n    { code: '<MyElement onMouseOver={() => {}} />' },\n    { code: '<MyElement onMouseOut={() => {}} />' },\n    { code: '<MyElement onBlur={() => {}} />' },\n    { code: '<MyElement onFocus={() => {}} />' },\n    { code: '<MyElement onMouseOver={() => {}} {...props} />' },\n    { code: '<MyElement onMouseOut={() => {}} {...props} />' },\n    { code: '<MyElement onBlur={() => {}} {...props} />' },\n    { code: '<MyElement onFocus={() => {}} {...props} />' },\n    /* Passing in empty options doesn't check any event handlers */\n    {\n      code: '<div onMouseOver={() => {}} onMouseOut={() => {}} />',\n      options: [{ hoverInHandlers: [], hoverOutHandlers: [] }],\n    },\n    /* Passing in custom handlers */\n    {\n      code: '<div onMouseOver={() => {}} onFocus={() => {}} />',\n      options: [{ hoverInHandlers: ['onMouseOver'] }],\n    },\n    {\n      code: '<div onMouseEnter={() => {}} onFocus={() => {}} />',\n      options: [{ hoverInHandlers: ['onMouseEnter'] }],\n    },\n    {\n      code: '<div onMouseOut={() => {}} onBlur={() => {}} />',\n      options: [{ hoverOutHandlers: ['onMouseOut'] }],\n    },\n    {\n      code: '<div onMouseLeave={() => {}} onBlur={() => {}} />',\n      options: [{ hoverOutHandlers: ['onMouseLeave'] }],\n    },\n    {\n      code: '<div onMouseOver={() => {}} onMouseOut={() => {}} />',\n      options: [\n        { hoverInHandlers: ['onPointerEnter'], hoverOutHandlers: ['onPointerLeave'] },\n      ],\n    },\n    /* Custom options only checks the handlers passed in */\n    {\n      code: '<div onMouseLeave={() => {}} />',\n      options: [{ hoverOutHandlers: ['onPointerLeave'] }],\n    },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<div onMouseOver={() => void 0} />;', errors: [mouseOverError] },\n    { code: '<div onMouseOut={() => void 0} />', errors: [mouseOutError] },\n    {\n      code: '<div onMouseOver={() => void 0} onFocus={undefined} />;',\n      errors: [mouseOverError],\n    },\n    {\n      code: '<div onMouseOut={() => void 0} onBlur={undefined} />',\n      errors: [mouseOutError],\n    },\n    {\n      code: '<div onMouseOver={() => void 0} {...props} />',\n      errors: [mouseOverError],\n    },\n    {\n      code: '<div onMouseOut={() => void 0} {...props} />',\n      errors: [mouseOutError],\n    },\n    /* Custom options */\n    {\n      code: '<div onMouseOver={() => {}} onMouseOut={() => {}} />',\n      options: [\n        { hoverInHandlers: ['onMouseOver'], hoverOutHandlers: ['onMouseOut'] },\n      ],\n      errors: [mouseOverError, mouseOutError],\n    },\n    {\n      code: '<div onPointerEnter={() => {}} onPointerLeave={() => {}} />',\n      options: [\n        { hoverInHandlers: ['onPointerEnter'], hoverOutHandlers: ['onPointerLeave'] },\n      ],\n      errors: [pointerEnterError, pointerLeaveError],\n    },\n    {\n      code: '<div onMouseOver={() => {}} />',\n      options: [{ hoverInHandlers: ['onMouseOver'] }],\n      errors: [mouseOverError],\n    },\n    {\n      code: '<div onPointerEnter={() => {}} />',\n      options: [{ hoverInHandlers: ['onPointerEnter'] }],\n      errors: [pointerEnterError],\n    },\n    {\n      code: '<div onMouseOut={() => {}} />',\n      options: [{ hoverOutHandlers: ['onMouseOut'] }],\n      errors: [mouseOutError],\n    },\n    {\n      code: '<div onPointerLeave={() => {}} />',\n      options: [{ hoverOutHandlers: ['onPointerLeave'] }],\n      errors: [pointerLeaveError],\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}