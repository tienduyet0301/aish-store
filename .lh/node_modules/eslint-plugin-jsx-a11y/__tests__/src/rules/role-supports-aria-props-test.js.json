{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/role-supports-aria-props-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce that an element does not have an unsupported ARIA attribute.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport {\n  aria,\n  roles,\n} from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport { version as eslintVersion } from 'eslint/package.json';\nimport semver from 'semver';\n\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/role-supports-aria-props';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst generateErrorMessage = (attr, role, tag, isImplicit) => {\n  if (isImplicit) {\n    return `The attribute ${attr} is not supported by the role ${role}. This role is implicit on the element ${tag}.`;\n  }\n\n  return `The attribute ${attr} is not supported by the role ${role}.`;\n};\n\nconst errorMessage = (attr, role, tag, isImplicit) => ({\n  message: generateErrorMessage(attr, role, tag, isImplicit),\n  type: 'JSXOpeningElement',\n});\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Link: 'a',\n    },\n  },\n};\n\nconst nonAbstractRoles = roles.keys().filter((role) => roles.get(role).abstract === false);\n\nconst createTests = (rolesNames) => rolesNames.reduce((tests, role) => {\n  const {\n    props: propKeyValues,\n  } = roles.get(role);\n  const validPropsForRole = Object.keys(propKeyValues);\n  const invalidPropsForRole = aria.keys()\n    .map((attribute) => attribute.toLowerCase())\n    .filter((attribute) => validPropsForRole.indexOf(attribute) === -1);\n  const normalRole = role.toLowerCase();\n\n  return [\n    tests[0].concat(validPropsForRole.map((prop) => ({\n      code: `<div role=\"${normalRole}\" ${prop.toLowerCase()} />`,\n    }))),\n    tests[1].concat(invalidPropsForRole.map((prop) => ({\n      code: `<div role=\"${normalRole}\" ${prop.toLowerCase()} />`,\n      errors: [errorMessage(prop.toLowerCase(), normalRole, 'div', false)],\n    }))),\n  ];\n}, [[], []]);\n\nconst [validTests, invalidTests] = createTests(nonAbstractRoles);\n\nruleTester.run('role-supports-aria-props', rule, {\n  valid: parsers.all([].concat(\n    { code: '<Foo bar />' },\n    { code: '<div />' },\n    { code: '<div id=\"main\" />' },\n    { code: '<div role />' },\n    { code: '<div role=\"presentation\" {...props} />' },\n    { code: '<Foo.Bar baz={true} />' },\n    { code: '<Link href=\"#\" aria-checked />' },\n\n    // IMPLICIT ROLE TESTS\n    // A TESTS - implicit role is `link`\n    { code: '<a href=\"#\" aria-expanded />' },\n    { code: '<a href=\"#\" aria-atomic />' },\n    { code: '<a href=\"#\" aria-busy />' },\n    { code: '<a href=\"#\" aria-controls />' },\n    { code: '<a href=\"#\" aria-current />' },\n    { code: '<a href=\"#\" aria-describedby />' },\n    { code: '<a href=\"#\" aria-disabled />' },\n    { code: '<a href=\"#\" aria-dropeffect />' },\n    { code: '<a href=\"#\" aria-flowto />' },\n    { code: '<a href=\"#\" aria-haspopup />' },\n    { code: '<a href=\"#\" aria-grabbed />' },\n    { code: '<a href=\"#\" aria-hidden />' },\n    { code: '<a href=\"#\" aria-label />' },\n    { code: '<a href=\"#\" aria-labelledby />' },\n    { code: '<a href=\"#\" aria-live />' },\n    { code: '<a href=\"#\" aria-owns />' },\n    { code: '<a href=\"#\" aria-relevant />' },\n\n    // this will have global\n    { code: '<a aria-checked />' },\n\n    // AREA TESTS - implicit role is `link`\n    { code: '<area href=\"#\" aria-expanded />' },\n    { code: '<area href=\"#\" aria-atomic />' },\n    { code: '<area href=\"#\" aria-busy />' },\n    { code: '<area href=\"#\" aria-controls />' },\n    { code: '<area href=\"#\" aria-describedby />' },\n    { code: '<area href=\"#\" aria-disabled />' },\n    { code: '<area href=\"#\" aria-dropeffect />' },\n    { code: '<area href=\"#\" aria-flowto />' },\n    { code: '<area href=\"#\" aria-grabbed />' },\n    { code: '<area href=\"#\" aria-haspopup />' },\n    { code: '<area href=\"#\" aria-hidden />' },\n    { code: '<area href=\"#\" aria-label />' },\n    { code: '<area href=\"#\" aria-labelledby />' },\n    { code: '<area href=\"#\" aria-live />' },\n    { code: '<area href=\"#\" aria-owns />' },\n    { code: '<area href=\"#\" aria-relevant />' },\n\n    // this will have global\n    { code: '<area aria-checked />' },\n\n    // LINK TESTS - implicit role is `link`\n    { code: '<link href=\"#\" aria-expanded />' },\n    { code: '<link href=\"#\" aria-atomic />' },\n    { code: '<link href=\"#\" aria-busy />' },\n    { code: '<link href=\"#\" aria-controls />' },\n    { code: '<link href=\"#\" aria-describedby />' },\n    { code: '<link href=\"#\" aria-disabled />' },\n    { code: '<link href=\"#\" aria-dropeffect />' },\n    { code: '<link href=\"#\" aria-flowto />' },\n    { code: '<link href=\"#\" aria-grabbed />' },\n    { code: '<link href=\"#\" aria-hidden />' },\n    { code: '<link href=\"#\" aria-haspopup />' },\n    { code: '<link href=\"#\" aria-label />' },\n    { code: '<link href=\"#\" aria-labelledby />' },\n    { code: '<link href=\"#\" aria-live />' },\n    { code: '<link href=\"#\" aria-owns />' },\n    { code: '<link href=\"#\" aria-relevant />' },\n\n    // this will have global\n    { code: '<link aria-checked />' },\n\n    // IMG TESTS - no implicit role\n    { code: '<img alt=\"\" aria-checked />' },\n\n    // this will have role of `img`\n    { code: '<img alt=\"foobar\" aria-busy />' },\n\n    // MENU TESTS - implicit role is `toolbar` when `type=\"toolbar\"`\n    { code: '<menu type=\"toolbar\" aria-activedescendant />' },\n    { code: '<menu type=\"toolbar\" aria-atomic />' },\n    { code: '<menu type=\"toolbar\" aria-busy />' },\n    { code: '<menu type=\"toolbar\" aria-controls />' },\n    { code: '<menu type=\"toolbar\" aria-describedby />' },\n    { code: '<menu type=\"toolbar\" aria-disabled />' },\n    { code: '<menu type=\"toolbar\" aria-dropeffect />' },\n    { code: '<menu type=\"toolbar\" aria-flowto />' },\n    { code: '<menu type=\"toolbar\" aria-grabbed />' },\n    { code: '<menu type=\"toolbar\" aria-hidden />' },\n    { code: '<menu type=\"toolbar\" aria-label />' },\n    { code: '<menu type=\"toolbar\" aria-labelledby />' },\n    { code: '<menu type=\"toolbar\" aria-live />' },\n    { code: '<menu type=\"toolbar\" aria-owns />' },\n    { code: '<menu type=\"toolbar\" aria-relevant />' },\n\n    // this will have global\n    { code: '<menu aria-checked />' },\n\n    // MENUITEM TESTS\n    // when `type=\"command`, the implicit role is `menuitem`\n    { code: '<menuitem type=\"command\" aria-atomic />' },\n    { code: '<menuitem type=\"command\" aria-busy />' },\n    { code: '<menuitem type=\"command\" aria-controls />' },\n    { code: '<menuitem type=\"command\" aria-describedby />' },\n    { code: '<menuitem type=\"command\" aria-disabled />' },\n    { code: '<menuitem type=\"command\" aria-dropeffect />' },\n    { code: '<menuitem type=\"command\" aria-flowto />' },\n    { code: '<menuitem type=\"command\" aria-grabbed />' },\n    { code: '<menuitem type=\"command\" aria-haspopup />' },\n    { code: '<menuitem type=\"command\" aria-hidden />' },\n    { code: '<menuitem type=\"command\" aria-label />' },\n    { code: '<menuitem type=\"command\" aria-labelledby />' },\n    { code: '<menuitem type=\"command\" aria-live />' },\n    { code: '<menuitem type=\"command\" aria-owns />' },\n    { code: '<menuitem type=\"command\" aria-relevant />' },\n    // when `type=\"checkbox`, the implicit role is `menuitemcheckbox`\n    { code: '<menuitem type=\"checkbox\" aria-checked />' },\n    { code: '<menuitem type=\"checkbox\" aria-atomic />' },\n    { code: '<menuitem type=\"checkbox\" aria-busy />' },\n    { code: '<menuitem type=\"checkbox\" aria-controls />' },\n    { code: '<menuitem type=\"checkbox\" aria-describedby />' },\n    { code: '<menuitem type=\"checkbox\" aria-disabled />' },\n    { code: '<menuitem type=\"checkbox\" aria-dropeffect />' },\n    { code: '<menuitem type=\"checkbox\" aria-flowto />' },\n    { code: '<menuitem type=\"checkbox\" aria-grabbed />' },\n    { code: '<menuitem type=\"checkbox\" aria-haspopup />' },\n    { code: '<menuitem type=\"checkbox\" aria-hidden />' },\n    { code: '<menuitem type=\"checkbox\" aria-invalid />' },\n    { code: '<menuitem type=\"checkbox\" aria-label />' },\n    { code: '<menuitem type=\"checkbox\" aria-labelledby />' },\n    { code: '<menuitem type=\"checkbox\" aria-live />' },\n    { code: '<menuitem type=\"checkbox\" aria-owns />' },\n    { code: '<menuitem type=\"checkbox\" aria-relevant />' },\n    // when `type=\"radio`, the implicit role is `menuitemradio`\n    { code: '<menuitem type=\"radio\" aria-checked />' },\n    { code: '<menuitem type=\"radio\" aria-atomic />' },\n    { code: '<menuitem type=\"radio\" aria-busy />' },\n    { code: '<menuitem type=\"radio\" aria-controls />' },\n    { code: '<menuitem type=\"radio\" aria-describedby />' },\n    { code: '<menuitem type=\"radio\" aria-disabled />' },\n    { code: '<menuitem type=\"radio\" aria-dropeffect />' },\n    { code: '<menuitem type=\"radio\" aria-flowto />' },\n    { code: '<menuitem type=\"radio\" aria-grabbed />' },\n    { code: '<menuitem type=\"radio\" aria-haspopup />' },\n    { code: '<menuitem type=\"radio\" aria-hidden />' },\n    { code: '<menuitem type=\"radio\" aria-invalid />' },\n    { code: '<menuitem type=\"radio\" aria-label />' },\n    { code: '<menuitem type=\"radio\" aria-labelledby />' },\n    { code: '<menuitem type=\"radio\" aria-live />' },\n    { code: '<menuitem type=\"radio\" aria-owns />' },\n    { code: '<menuitem type=\"radio\" aria-relevant />' },\n    { code: '<menuitem type=\"radio\" aria-posinset />' },\n    { code: '<menuitem type=\"radio\" aria-setsize />' },\n\n    // these will have global\n    { code: '<menuitem aria-checked />' },\n    { code: '<menuitem type=\"foo\" aria-checked />' },\n\n    // INPUT TESTS\n    // when `type=\"button\"`, the implicit role is `button`\n    { code: '<input type=\"button\" aria-expanded />' },\n    { code: '<input type=\"button\" aria-pressed />' },\n    { code: '<input type=\"button\" aria-atomic />' },\n    { code: '<input type=\"button\" aria-busy />' },\n    { code: '<input type=\"button\" aria-controls />' },\n    { code: '<input type=\"button\" aria-describedby />' },\n    { code: '<input type=\"button\" aria-disabled />' },\n    { code: '<input type=\"button\" aria-dropeffect />' },\n    { code: '<input type=\"button\" aria-flowto />' },\n    { code: '<input type=\"button\" aria-grabbed />' },\n    { code: '<input type=\"button\" aria-haspopup />' },\n    { code: '<input type=\"button\" aria-hidden />' },\n    { code: '<input type=\"button\" aria-label />' },\n    { code: '<input type=\"button\" aria-labelledby />' },\n    { code: '<input type=\"button\" aria-live />' },\n    { code: '<input type=\"button\" aria-owns />' },\n    { code: '<input type=\"button\" aria-relevant />' },\n    // when `type=\"image\"`, the implicit role is `button`\n    { code: '<input type=\"image\" aria-expanded />' },\n    { code: '<input type=\"image\" aria-pressed />' },\n    { code: '<input type=\"image\" aria-atomic />' },\n    { code: '<input type=\"image\" aria-busy />' },\n    { code: '<input type=\"image\" aria-controls />' },\n    { code: '<input type=\"image\" aria-describedby />' },\n    { code: '<input type=\"image\" aria-disabled />' },\n    { code: '<input type=\"image\" aria-dropeffect />' },\n    { code: '<input type=\"image\" aria-flowto />' },\n    { code: '<input type=\"image\" aria-grabbed />' },\n    { code: '<input type=\"image\" aria-haspopup />' },\n    { code: '<input type=\"image\" aria-hidden />' },\n    { code: '<input type=\"image\" aria-label />' },\n    { code: '<input type=\"image\" aria-labelledby />' },\n    { code: '<input type=\"image\" aria-live />' },\n    { code: '<input type=\"image\" aria-owns />' },\n    { code: '<input type=\"image\" aria-relevant />' },\n    // when `type=\"reset\"`, the implicit role is `button`\n    { code: '<input type=\"reset\" aria-expanded />' },\n    { code: '<input type=\"reset\" aria-pressed />' },\n    { code: '<input type=\"reset\" aria-atomic />' },\n    { code: '<input type=\"reset\" aria-busy />' },\n    { code: '<input type=\"reset\" aria-controls />' },\n    { code: '<input type=\"reset\" aria-describedby />' },\n    { code: '<input type=\"reset\" aria-disabled />' },\n    { code: '<input type=\"reset\" aria-dropeffect />' },\n    { code: '<input type=\"reset\" aria-flowto />' },\n    { code: '<input type=\"reset\" aria-grabbed />' },\n    { code: '<input type=\"reset\" aria-haspopup />' },\n    { code: '<input type=\"reset\" aria-hidden />' },\n    { code: '<input type=\"reset\" aria-label />' },\n    { code: '<input type=\"reset\" aria-labelledby />' },\n    { code: '<input type=\"reset\" aria-live />' },\n    { code: '<input type=\"reset\" aria-owns />' },\n    { code: '<input type=\"reset\" aria-relevant />' },\n    // when `type=\"submit\"`, the implicit role is `button`\n    { code: '<input type=\"submit\" aria-expanded />' },\n    { code: '<input type=\"submit\" aria-pressed />' },\n    { code: '<input type=\"submit\" aria-atomic />' },\n    { code: '<input type=\"submit\" aria-busy />' },\n    { code: '<input type=\"submit\" aria-controls />' },\n    { code: '<input type=\"submit\" aria-describedby />' },\n    { code: '<input type=\"submit\" aria-disabled />' },\n    { code: '<input type=\"submit\" aria-dropeffect />' },\n    { code: '<input type=\"submit\" aria-flowto />' },\n    { code: '<input type=\"submit\" aria-grabbed />' },\n    { code: '<input type=\"submit\" aria-haspopup />' },\n    { code: '<input type=\"submit\" aria-hidden />' },\n    { code: '<input type=\"submit\" aria-label />' },\n    { code: '<input type=\"submit\" aria-labelledby />' },\n    { code: '<input type=\"submit\" aria-live />' },\n    { code: '<input type=\"submit\" aria-owns />' },\n    { code: '<input type=\"submit\" aria-relevant />' },\n    // when `type=\"checkbox\"`, the implicit role is `checkbox`\n    { code: '<input type=\"checkbox\" aria-atomic />' },\n    { code: '<input type=\"checkbox\" aria-busy />' },\n    { code: '<input type=\"checkbox\" aria-checked />' },\n    { code: '<input type=\"checkbox\" aria-controls />' },\n    { code: '<input type=\"checkbox\" aria-describedby />' },\n    { code: '<input type=\"checkbox\" aria-disabled />' },\n    { code: '<input type=\"checkbox\" aria-dropeffect />' },\n    { code: '<input type=\"checkbox\" aria-flowto />' },\n    { code: '<input type=\"checkbox\" aria-grabbed />' },\n    { code: '<input type=\"checkbox\" aria-hidden />' },\n    { code: '<input type=\"checkbox\" aria-invalid />' },\n    { code: '<input type=\"checkbox\" aria-label />' },\n    { code: '<input type=\"checkbox\" aria-labelledby />' },\n    { code: '<input type=\"checkbox\" aria-live />' },\n    { code: '<input type=\"checkbox\" aria-owns />' },\n    { code: '<input type=\"checkbox\" aria-relevant />' },\n    // when `type=\"radio\"`, the implicit role is `radio`\n    { code: '<input type=\"radio\" aria-atomic />' },\n    { code: '<input type=\"radio\" aria-busy />' },\n    { code: '<input type=\"radio\" aria-checked />' },\n    { code: '<input type=\"radio\" aria-controls />' },\n    { code: '<input type=\"radio\" aria-describedby />' },\n    { code: '<input type=\"radio\" aria-disabled />' },\n    { code: '<input type=\"radio\" aria-dropeffect />' },\n    { code: '<input type=\"radio\" aria-flowto />' },\n    { code: '<input type=\"radio\" aria-grabbed />' },\n    { code: '<input type=\"radio\" aria-hidden />' },\n    { code: '<input type=\"radio\" aria-label />' },\n    { code: '<input type=\"radio\" aria-labelledby />' },\n    { code: '<input type=\"radio\" aria-live />' },\n    { code: '<input type=\"radio\" aria-owns />' },\n    { code: '<input type=\"radio\" aria-relevant />' },\n    { code: '<input type=\"radio\" aria-posinset />' },\n    { code: '<input type=\"radio\" aria-setsize />' },\n    // when `type=\"range\"`, the implicit role is `slider`\n    { code: '<input type=\"range\" aria-valuemax />' },\n    { code: '<input type=\"range\" aria-valuemin />' },\n    { code: '<input type=\"range\" aria-valuenow />' },\n    { code: '<input type=\"range\" aria-orientation />' },\n    { code: '<input type=\"range\" aria-atomic />' },\n    { code: '<input type=\"range\" aria-busy />' },\n    { code: '<input type=\"range\" aria-controls />' },\n    { code: '<input type=\"range\" aria-describedby />' },\n    { code: '<input type=\"range\" aria-disabled />' },\n    { code: '<input type=\"range\" aria-dropeffect />' },\n    { code: '<input type=\"range\" aria-flowto />' },\n    { code: '<input type=\"range\" aria-grabbed />' },\n    { code: '<input type=\"range\" aria-haspopup />' },\n    { code: '<input type=\"range\" aria-hidden />' },\n    { code: '<input type=\"range\" aria-invalid />' },\n    { code: '<input type=\"range\" aria-label />' },\n    { code: '<input type=\"range\" aria-labelledby />' },\n    { code: '<input type=\"range\" aria-live />' },\n    { code: '<input type=\"range\" aria-owns />' },\n    { code: '<input type=\"range\" aria-relevant />' },\n    { code: '<input type=\"range\" aria-valuetext />' },\n\n    // these will have role of `textbox`,\n    { code: '<input type=\"email\" aria-disabled />' },\n    { code: '<input type=\"password\" aria-disabled />' },\n    { code: '<input type=\"search\" aria-disabled />' },\n    { code: '<input type=\"tel\" aria-disabled />' },\n    { code: '<input type=\"url\" aria-disabled />' },\n    { code: '<input aria-disabled />' },\n\n    // Allow null/undefined values regardless of role\n    { code: '<h2 role=\"presentation\" aria-level={null} />' },\n    { code: '<h2 role=\"presentation\" aria-level={undefined} />' },\n\n    // OTHER TESTS\n    { code: '<button aria-pressed />' },\n    { code: '<form aria-hidden />' },\n    { code: '<h1 aria-hidden />' },\n    { code: '<h2 aria-hidden />' },\n    { code: '<h3 aria-hidden />' },\n    { code: '<h4 aria-hidden />' },\n    { code: '<h5 aria-hidden />' },\n    { code: '<h6 aria-hidden />' },\n    { code: '<hr aria-hidden />' },\n    { code: '<li aria-current />' },\n    { code: '<meter aria-atomic />' },\n    { code: '<option aria-atomic />' },\n    { code: '<progress aria-atomic />' },\n    { code: '<textarea aria-hidden />' },\n    { code: '<select aria-expanded />' },\n    { code: '<datalist aria-expanded />' },\n    { code: '<div role=\"heading\" aria-level />' },\n    { code: '<div role=\"heading\" aria-level=\"1\" />' },\n\n    semver.satisfies(eslintVersion, '>= 6') ? {\n      code: `\n        const HelloThere = () => (\n            <Hello\n                role=\"searchbox\"\n                frag={\n                    <>\n                        <div>Hello</div>\n                        <div>There</div>\n                    </>\n                }\n            />\n        );\n\n        const Hello = (props) => <div>{props.frag}</div>;\n      `,\n    } : [],\n    validTests,\n  )).map(parserOptionsMapper),\n\n  invalid: parsers.all([].concat(\n    // implicit basic checks\n    {\n      code: '<a href=\"#\" aria-checked />',\n      errors: [errorMessage('aria-checked', 'link', 'a', true)],\n    },\n    {\n      code: '<area href=\"#\" aria-checked />',\n      errors: [errorMessage('aria-checked', 'link', 'area', true)],\n    },\n    {\n      code: '<link href=\"#\" aria-checked />',\n      errors: [errorMessage('aria-checked', 'link', 'link', true)],\n    },\n    {\n      code: '<img alt=\"foobar\" aria-checked />',\n      errors: [errorMessage('aria-checked', 'img', 'img', true)],\n    },\n    {\n      code: '<menu type=\"toolbar\" aria-checked />',\n      errors: [errorMessage('aria-checked', 'toolbar', 'menu', true)],\n    },\n    {\n      code: '<aside aria-checked />',\n      errors: [errorMessage('aria-checked', 'complementary', 'aside', true)],\n    },\n    {\n      code: '<ul aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'list', 'ul', true)],\n    },\n    {\n      code: '<details aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'group', 'details', true)],\n    },\n    {\n      code: '<dialog aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'dialog', 'dialog', true)],\n    },\n    {\n      code: '<aside aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'complementary', 'aside', true)],\n    },\n    {\n      code: '<article aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'article', 'article', true)],\n    },\n    {\n      code: '<body aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'document', 'body', true)],\n    },\n    {\n      code: '<li aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'listitem', 'li', true)],\n    },\n    {\n      code: '<nav aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'navigation', 'nav', true)],\n    },\n    {\n      code: '<ol aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'list', 'ol', true)],\n    },\n    {\n      code: '<output aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'status', 'output', true)],\n    },\n    {\n      code: '<section aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'region', 'section', true)],\n    },\n    {\n      code: '<tbody aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'rowgroup', 'tbody', true)],\n    },\n    {\n      code: '<tfoot aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'rowgroup', 'tfoot', true)],\n    },\n    {\n      code: '<thead aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'rowgroup', 'thead', true)],\n    },\n    {\n      code: '<input type=\"radio\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'radio', 'input', true)],\n    },\n    {\n      code: '<input type=\"radio\" aria-selected />',\n      errors: [errorMessage('aria-selected', 'radio', 'input', true)],\n    },\n    {\n      code: '<input type=\"radio\" aria-haspopup />',\n      errors: [errorMessage('aria-haspopup', 'radio', 'input', true)],\n    },\n    {\n      code: '<input type=\"checkbox\" aria-haspopup />',\n      errors: [errorMessage('aria-haspopup', 'checkbox', 'input', true)],\n    },\n    {\n      code: '<input type=\"reset\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'button', 'input', true)],\n    },\n    {\n      code: '<input type=\"submit\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'button', 'input', true)],\n    },\n    {\n      code: '<input type=\"image\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'button', 'input', true)],\n    },\n    {\n      code: '<input type=\"button\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'button', 'input', true)],\n    },\n    {\n      code: '<menuitem type=\"command\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'menuitem', 'menuitem', true)],\n    },\n    {\n      code: '<menuitem type=\"radio\" aria-selected />',\n      errors: [errorMessage('aria-selected', 'menuitemradio', 'menuitem', true)],\n    },\n    {\n      code: '<menu type=\"toolbar\" aria-haspopup />',\n      errors: [errorMessage('aria-haspopup', 'toolbar', 'menu', true)],\n    },\n    {\n      code: '<menu type=\"toolbar\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'toolbar', 'menu', true)],\n    },\n    {\n      code: '<menu type=\"toolbar\" aria-expanded />',\n      errors: [errorMessage('aria-expanded', 'toolbar', 'menu', true)],\n    },\n    {\n      code: '<link href=\"#\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'link', 'link', true)],\n    },\n    {\n      code: '<area href=\"#\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'link', 'area', true)],\n    },\n    {\n      code: '<a href=\"#\" aria-invalid />',\n      errors: [errorMessage('aria-invalid', 'link', 'a', true)],\n    },\n    {\n      code: '<Link href=\"#\" aria-checked />',\n      errors: [errorMessage('aria-checked', 'link', 'a', true)],\n      settings: componentsSettings,\n    },\n  )).concat(invalidTests).map(parserOptionsMapper),\n});\n"
        }
    ]
}