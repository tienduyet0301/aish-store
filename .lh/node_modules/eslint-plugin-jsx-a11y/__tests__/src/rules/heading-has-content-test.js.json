{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/heading-has-content-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce heading (h1, h2, etc) elements contain accessible content.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/heading-has-content';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'Headings must have content and the content must be accessible by a screen reader.',\n  type: 'JSXOpeningElement',\n};\n\nconst components = [{\n  components: ['Heading', 'Title'],\n}];\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      CustomInput: 'input',\n      Title: 'h1',\n      Heading: 'h2',\n    },\n  },\n};\n\nruleTester.run('heading-has-content', rule, {\n  valid: parsers.all([].concat(\n    // DEFAULT ELEMENT TESTS\n    { code: '<div />;' },\n    { code: '<h1>Foo</h1>' },\n    { code: '<h2>Foo</h2>' },\n    { code: '<h3>Foo</h3>' },\n    { code: '<h4>Foo</h4>' },\n    { code: '<h5>Foo</h5>' },\n    { code: '<h6>Foo</h6>' },\n    { code: '<h6>123</h6>' },\n    { code: '<h1><Bar /></h1>' },\n    { code: '<h1>{foo}</h1>' },\n    { code: '<h1>{foo.bar}</h1>' },\n    { code: '<h1 dangerouslySetInnerHTML={{ __html: \"foo\" }} />' },\n    { code: '<h1 children={children} />' },\n    // CUSTOM ELEMENT TESTS FOR COMPONENTS OPTION\n    { code: '<Heading>Foo</Heading>', options: components },\n    { code: '<Title>Foo</Title>', options: components },\n    { code: '<Heading><Bar /></Heading>', options: components },\n    { code: '<Heading>{foo}</Heading>', options: components },\n    { code: '<Heading>{foo.bar}</Heading>', options: components },\n    { code: '<Heading dangerouslySetInnerHTML={{ __html: \"foo\" }} />', options: components },\n    { code: '<Heading children={children} />', options: components },\n    { code: '<h1 aria-hidden />' },\n    // CUSTOM ELEMENT TESTS FOR COMPONENTS SETTINGS\n    { code: '<Heading>Foo</Heading>', settings: componentsSettings },\n    { code: '<h1><CustomInput type=\"hidden\" /></h1>' },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    // DEFAULT ELEMENT TESTS\n    { code: '<h1 />', errors: [expectedError] },\n    { code: '<h1><Bar aria-hidden /></h1>', errors: [expectedError] },\n    { code: '<h1>{undefined}</h1>', errors: [expectedError] },\n    { code: '<h1><input type=\"hidden\" /></h1>', errors: [expectedError] },\n\n    // CUSTOM ELEMENT TESTS FOR COMPONENTS OPTION\n    { code: '<Heading />', errors: [expectedError], options: components },\n    { code: '<Heading><Bar aria-hidden /></Heading>', errors: [expectedError], options: components },\n    { code: '<Heading>{undefined}</Heading>', errors: [expectedError], options: components },\n\n    // CUSTOM ELEMENT TESTS FOR COMPONENTS SETTINGS\n    { code: '<Heading />', errors: [expectedError], settings: componentsSettings },\n    { code: '<h1><CustomInput type=\"hidden\" /></h1>', errors: [expectedError], settings: componentsSettings },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}