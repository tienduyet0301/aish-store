{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/interactive-supports-focus-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce that elements with onClick handlers must be focusable.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport includes from 'array-includes';\nimport { RuleTester } from 'eslint';\nimport {\n  eventHandlers,\n  eventHandlersByType,\n} from 'jsx-ast-utils';\nimport { configs } from '../../../src/index';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/interactive-supports-focus';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nfunction template(strings, ...keys) {\n  return (...values) => keys.reduce(\n    (acc, k, i) => acc + (values[k] || '') + strings[i + 1],\n    strings[0],\n  );\n}\n\nconst ruleName = 'interactive-supports-focus';\nconst type = 'JSXOpeningElement';\nconst codeTemplate = template`<${0} role=\"${1}\" ${2}={() => void 0} />`;\nconst tabindexTemplate = template`<${0} role=\"${1}\" ${2}={() => void 0} tabIndex=\"0\" />`;\nconst tabbableTemplate = template`Elements with the '${0}' interactive role must be tabbable.`;\nconst focusableTemplate = template`Elements with the '${0}' interactive role must be focusable.`;\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Div: 'div',\n    },\n  },\n};\n\nconst buttonError = { message: tabbableTemplate('button'), type };\n\nconst recommendedOptions = configs.recommended.rules[`jsx-a11y/${ruleName}`][1] || {};\n\nconst strictOptions = configs.strict.rules[`jsx-a11y/${ruleName}`][1] || {};\n\nconst alwaysValid = [\n  { code: '<div />' },\n  { code: '<div aria-hidden onClick={() => void 0} />' },\n  { code: '<div aria-hidden={true == true} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={true === true} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={hidden !== false} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={hidden != false} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={1 < 2} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={1 <= 2} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={2 > 1} onClick={() => void 0} />' },\n  { code: '<div aria-hidden={2 >= 1} onClick={() => void 0} />' },\n  { code: '<div onClick={() => void 0} />;' },\n  { code: '<div onClick={() => void 0} tabIndex={undefined} />;' },\n  { code: '<div onClick={() => void 0} tabIndex=\"bad\" />;' },\n  { code: '<div onClick={() => void 0} role={undefined} />;' },\n  { code: '<div role=\"section\" onClick={() => void 0} />' },\n  { code: '<div onClick={() => void 0} aria-hidden={false} />;' },\n  { code: '<div onClick={() => void 0} {...props} />;' },\n  { code: '<input type=\"text\" onClick={() => void 0} />' },\n  { code: '<input type=\"hidden\" onClick={() => void 0} tabIndex=\"-1\" />' },\n  { code: '<input type=\"hidden\" onClick={() => void 0} tabIndex={-1} />' },\n  { code: '<input onClick={() => void 0} />' },\n  { code: '<input onClick={() => void 0} role=\"combobox\" />' },\n  { code: '<button onClick={() => void 0} className=\"foo\" />' },\n  { code: '<option onClick={() => void 0} className=\"foo\" />' },\n  { code: '<select onClick={() => void 0} className=\"foo\" />' },\n  { code: '<area href=\"#\" onClick={() => void 0} className=\"foo\" />' },\n  { code: '<area onClick={() => void 0} className=\"foo\" />' },\n  { code: '<summary onClick={() => void 0} />' },\n  { code: '<textarea onClick={() => void 0} className=\"foo\" />' },\n  { code: '<a onClick=\"showNextPage();\">Next page</a>' },\n  { code: '<a onClick=\"showNextPage();\" tabIndex={undefined}>Next page</a>' },\n  { code: '<a onClick=\"showNextPage();\" tabIndex=\"bad\">Next page</a>' },\n  { code: '<a onClick={() => void 0} />' },\n  { code: '<a tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<a tabIndex={dynamicTabIndex} onClick={() => void 0} />' },\n  { code: '<a tabIndex={0} onClick={() => void 0} />' },\n  { code: '<a role=\"button\" href=\"#\" onClick={() => void 0} />' },\n  { code: '<a onClick={() => void 0} href=\"http://x.y.z\" />' },\n  { code: '<a onClick={() => void 0} href=\"http://x.y.z\" tabIndex=\"0\" />' },\n  { code: '<a onClick={() => void 0} href=\"http://x.y.z\" tabIndex={0} />' },\n  { code: '<a onClick={() => void 0} href=\"http://x.y.z\" role=\"button\" />' },\n  { code: '<TestComponent onClick={doFoo} />' },\n  { code: '<input onClick={() => void 0} type=\"hidden\" />;' },\n  { code: '<span onClick=\"submitForm();\">Submit</span>' },\n  { code: '<span onClick=\"submitForm();\" tabIndex={undefined}>Submit</span>' },\n  { code: '<span onClick=\"submitForm();\" tabIndex=\"bad\">Submit</span>' },\n  { code: '<span onClick=\"doSomething();\" tabIndex=\"0\">Click me!</span>' },\n  { code: '<span onClick=\"doSomething();\" tabIndex={0}>Click me!</span>' },\n  { code: '<span onClick=\"doSomething();\" tabIndex=\"-1\">Click me too!</span>' },\n  {\n    code: '<a href=\"javascript:void(0);\" onClick=\"doSomething();\">Click ALL the things!</a>',\n  },\n  { code: '<section onClick={() => void 0} />;' },\n  { code: '<main onClick={() => void 0} />;' },\n  { code: '<article onClick={() => void 0} />;' },\n  { code: '<header onClick={() => void 0} />;' },\n  { code: '<footer onClick={() => void 0} />;' },\n  { code: '<div role=\"button\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"checkbox\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"link\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"menuitem\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"menuitemcheckbox\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"menuitemradio\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"option\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"radio\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"spinbutton\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"switch\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"tablist\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"tab\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"textbox\" tabIndex=\"0\" onClick={() => void 0} />' },\n  { code: '<div role=\"textbox\" aria-disabled=\"true\" onClick={() => void 0} />' },\n  { code: '<Foo.Bar onClick={() => void 0} aria-hidden={false} />;' },\n  { code: '<Input onClick={() => void 0} type=\"hidden\" />;' },\n  { code: '<Div onClick={() => void 0} role=\"button\" tabIndex=\"0\" />', settings: componentsSettings },\n];\n\nconst neverValid = [\n  { code: '<Div onClick={() => void 0} role=\"button\" />', errors: [buttonError], settings: componentsSettings },\n];\n\nconst interactiveRoles = [\n  'button',\n  'checkbox',\n  'link',\n  'gridcell',\n  'menuitem',\n  'menuitemcheckbox',\n  'menuitemradio',\n  'option',\n  'radio',\n  'searchbox',\n  'slider',\n  'spinbutton',\n  'switch',\n  'tab',\n  'textbox',\n  'treeitem',\n];\n\nconst recommendedRoles = [\n  'button',\n  'checkbox',\n  'link',\n  'searchbox',\n  'spinbutton',\n  'switch',\n  'textbox',\n];\n\nconst strictRoles = [\n  'button',\n  'checkbox',\n  'link',\n  'progressbar',\n  'searchbox',\n  'slider',\n  'spinbutton',\n  'switch',\n  'textbox',\n];\n\nconst staticElements = [\n  'div',\n];\n\nconst triggeringHandlers = [\n  ...eventHandlersByType.mouse,\n  ...eventHandlersByType.keyboard,\n];\n\nconst passReducer = (roles, handlers, messageTemplate) => (\n  staticElements.reduce((elementAcc, element) => (\n    elementAcc.concat(roles.reduce((roleAcc, role) => (\n      roleAcc.concat(handlers.map((handler) => ({\n        code: messageTemplate(element, role, handler),\n      })))\n    ), []))\n  ), [])\n);\n\nconst failReducer = (roles, handlers, messageTemplate) => (\n  staticElements.reduce((elementAcc, element) => (\n    elementAcc.concat(roles.reduce((roleAcc, role) => (\n      roleAcc.concat(handlers.map((handler) => ({\n        code: codeTemplate(element, role, handler),\n        errors: [{\n          type,\n          message: messageTemplate(role),\n        }],\n      })))\n    ), []))\n  ), [])\n);\n\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    ...passReducer(\n      interactiveRoles,\n      eventHandlers.filter((handler) => !includes(triggeringHandlers, handler)),\n      codeTemplate,\n    ),\n    ...passReducer(\n      interactiveRoles.filter((role) => !includes(recommendedRoles, role)),\n      eventHandlers.filter((handler) => includes(triggeringHandlers, handler)),\n      tabindexTemplate,\n    ),\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n    ...failReducer(recommendedRoles, triggeringHandlers, tabbableTemplate),\n    ...failReducer(\n      interactiveRoles.filter((role) => !includes(recommendedRoles, role)),\n      triggeringHandlers,\n      focusableTemplate,\n    ),\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n});\n\nruleTester.run(`${ruleName}:strict`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    ...passReducer(\n      interactiveRoles,\n      eventHandlers.filter((handler) => !includes(triggeringHandlers, handler)),\n      codeTemplate,\n    ),\n    ...passReducer(\n      interactiveRoles.filter((role) => !includes(strictRoles, role)),\n      eventHandlers.filter((handler) => includes(triggeringHandlers, handler)),\n      tabindexTemplate,\n    ),\n  ))\n    .map(ruleOptionsMapperFactory(strictOptions))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n    ...failReducer(strictRoles, triggeringHandlers, tabbableTemplate),\n    ...failReducer(\n      interactiveRoles.filter((role) => !includes(strictRoles, role)),\n      triggeringHandlers,\n      focusableTemplate,\n    ),\n  ))\n    .map(ruleOptionsMapperFactory(strictOptions))\n    .map(parserOptionsMapper),\n});\n"
        }
    ]
}