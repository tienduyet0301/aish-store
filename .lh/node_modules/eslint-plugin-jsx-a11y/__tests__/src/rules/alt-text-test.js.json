{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/alt-text-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce all elements that require alternative text have it.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/alt-text';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst missingPropError = (type) => ({\n  message: `${type} elements must have an alt prop, either with meaningful text, or an empty string for decorative images.`,\n  type: 'JSXOpeningElement',\n});\n\nconst altValueError = (type) => ({\n  message: `Invalid alt value for ${type}. \\\nUse alt=\"\" for presentational images.`,\n  type: 'JSXOpeningElement',\n});\n\nconst ariaLabelValueError = {\n  message: 'The aria-label attribute must have a value. The alt attribute is preferred over aria-label for images.',\n};\nconst ariaLabelledbyValueError = {\n  message: 'The aria-labelledby attribute must have a value. The alt attribute is preferred over aria-labelledby for images.',\n};\n\nconst preferAltError = () => ({\n  message: 'Prefer alt=\"\" over a presentational role. First rule of aria is to not use aria if it can be achieved via native HTML.',\n  type: 'JSXOpeningElement',\n});\n\nconst objectError = {\n  message: 'Embedded <object> elements must have alternative text by providing inner text, aria-label or aria-labelledby props.',\n};\n\nconst areaError = {\n  message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.',\n};\n\nconst inputImageError = {\n  message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.',\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    polymorphicPropName: 'as',\n    components: {\n      Input: 'input',\n    },\n  },\n};\n\nconst array = [{\n  img: ['Thumbnail', 'Image'],\n  object: ['Object'],\n  area: ['Area'],\n  'input[type=\"image\"]': ['InputImage'],\n}];\n\nruleTester.run('alt-text', rule, {\n  valid: parsers.all([].concat(\n    // DEFAULT ELEMENT 'img' TESTS\n    { code: '<img alt=\"foo\" />;' },\n    { code: '<img alt={\"foo\"} />;' },\n    { code: '<img alt={alt} />;' },\n    { code: '<img ALT=\"foo\" />;' },\n    { code: '<img ALT={`This is the ${alt} text`} />;' },\n    { code: '<img ALt=\"foo\" />;' },\n    { code: '<img alt=\"foo\" salt={undefined} />;' },\n    { code: '<img {...this.props} alt=\"foo\" />' },\n    { code: '<a />' },\n    { code: '<div />' },\n    { code: '<img alt={function(e) {} } />' },\n    { code: '<div alt={function(e) {} } />' },\n    { code: '<img alt={() => void 0} />' },\n    { code: '<IMG />' },\n    { code: '<UX.Layout>test</UX.Layout>' },\n    { code: '<img alt={alt || \"Alt text\" } />' },\n    { code: '<img alt={photo.caption} />;' },\n    { code: '<img alt={bar()} />;' },\n    { code: '<img alt={foo.bar || \"\"} />' },\n    { code: '<img alt={bar() || \"\"} />' },\n    { code: '<img alt={foo.bar() || \"\"} />' },\n    { code: '<img alt=\"\" />' },\n    { code: '<img alt={`${undefined}`} />' },\n    { code: '<img alt=\" \" />' },\n    { code: '<img alt=\"\" role=\"presentation\" />' },\n    { code: '<img alt=\"\" role=\"none\" />' },\n    { code: '<img alt=\"\" role={`presentation`} />' },\n    { code: '<img alt=\"\" role={\"presentation\"} />' },\n    { code: '<img alt=\"this is lit...\" role=\"presentation\" />' },\n    { code: '<img alt={error ? \"not working\": \"working\"} />' },\n    { code: '<img alt={undefined ? \"working\": \"not working\"} />' },\n    { code: '<img alt={plugin.name + \" Logo\"} />' },\n    { code: '<img aria-label=\"foo\" />' },\n    { code: '<img aria-labelledby=\"id1\" />' },\n\n    // DEFAULT <object> TESTS\n    { code: '<object aria-label=\"foo\" />' },\n    { code: '<object aria-labelledby=\"id1\" />' },\n    { code: '<object>Foo</object>' },\n    { code: '<object><p>This is descriptive!</p></object>' },\n    { code: '<Object />' },\n    { code: '<object title=\"An object\" />' },\n\n    // DEFAULT <area> TESTS\n    { code: '<area aria-label=\"foo\" />' },\n    { code: '<area aria-labelledby=\"id1\" />' },\n    { code: '<area alt=\"\" />' },\n    { code: '<area alt=\"This is descriptive!\" />' },\n    { code: '<area alt={altText} />' },\n    { code: '<Area />' },\n\n    // DEFAULT <input type=\"image\"> TESTS\n    { code: '<input />' },\n    { code: '<input type=\"foo\" />' },\n    { code: '<input type=\"image\" aria-label=\"foo\" />' },\n    { code: '<input type=\"image\" aria-labelledby=\"id1\" />' },\n    { code: '<input type=\"image\" alt=\"\" />' },\n    { code: '<input type=\"image\" alt=\"This is descriptive!\" />' },\n    { code: '<input type=\"image\" alt={altText} />' },\n    { code: '<InputImage />' },\n    { code: '<Input type=\"image\" alt=\"\" />', settings: componentsSettings },\n    { code: '<SomeComponent as=\"input\" type=\"image\" alt=\"\" />', settings: componentsSettings },\n\n    // CUSTOM ELEMENT TESTS FOR ARRAY OPTION TESTS\n    { code: '<Thumbnail alt=\"foo\" />;', options: array },\n    { code: '<Thumbnail alt={\"foo\"} />;', options: array },\n    { code: '<Thumbnail alt={alt} />;', options: array },\n    { code: '<Thumbnail ALT=\"foo\" />;', options: array },\n    { code: '<Thumbnail ALT={`This is the ${alt} text`} />;', options: array },\n    { code: '<Thumbnail ALt=\"foo\" />;', options: array },\n    { code: '<Thumbnail alt=\"foo\" salt={undefined} />;', options: array },\n    { code: '<Thumbnail {...this.props} alt=\"foo\" />', options: array },\n    { code: '<thumbnail />', options: array },\n    { code: '<Thumbnail alt={function(e) {} } />', options: array },\n    { code: '<div alt={function(e) {} } />', options: array },\n    { code: '<Thumbnail alt={() => void 0} />', options: array },\n    { code: '<THUMBNAIL />', options: array },\n    { code: '<Thumbnail alt={alt || \"foo\" } />', options: array },\n    { code: '<Image alt=\"foo\" />;', options: array },\n    { code: '<Image alt={\"foo\"} />;', options: array },\n    { code: '<Image alt={alt} />;', options: array },\n    { code: '<Image ALT=\"foo\" />;', options: array },\n    { code: '<Image ALT={`This is the ${alt} text`} />;', options: array },\n    { code: '<Image ALt=\"foo\" />;', options: array },\n    { code: '<Image alt=\"foo\" salt={undefined} />;', options: array },\n    { code: '<Image {...this.props} alt=\"foo\" />', options: array },\n    { code: '<image />', options: array },\n    { code: '<Image alt={function(e) {} } />', options: array },\n    { code: '<div alt={function(e) {} } />', options: array },\n    { code: '<Image alt={() => void 0} />', options: array },\n    { code: '<IMAGE />', options: array },\n    { code: '<Image alt={alt || \"foo\" } />', options: array },\n    { code: '<Object aria-label=\"foo\" />', options: array },\n    { code: '<Object aria-labelledby=\"id1\" />', options: array },\n    { code: '<Object>Foo</Object>', options: array },\n    { code: '<Object><p>This is descriptive!</p></Object>', options: array },\n    { code: '<Object title=\"An object\" />', options: array },\n    { code: '<Area aria-label=\"foo\" />', options: array },\n    { code: '<Area aria-labelledby=\"id1\" />', options: array },\n    { code: '<Area alt=\"\" />', options: array },\n    { code: '<Area alt=\"This is descriptive!\" />', options: array },\n    { code: '<Area alt={altText} />', options: array },\n    { code: '<InputImage aria-label=\"foo\" />', options: array },\n    { code: '<InputImage aria-labelledby=\"id1\" />', options: array },\n    { code: '<InputImage alt=\"\" />', options: array },\n    { code: '<InputImage alt=\"This is descriptive!\" />', options: array },\n    { code: '<InputImage alt={altText} />', options: array },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    // DEFAULT ELEMENT 'img' TESTS\n    { code: '<img />;', errors: [missingPropError('img')] },\n    { code: '<img alt />;', errors: [altValueError('img')] },\n    { code: '<img alt={undefined} />;', errors: [altValueError('img')] },\n    { code: '<img src=\"xyz\" />', errors: [missingPropError('img')] },\n    { code: '<img role />', errors: [missingPropError('img')] },\n    { code: '<img {...this.props} />', errors: [missingPropError('img')] },\n    { code: '<img alt={false || false} />', errors: [altValueError('img')] },\n    { code: '<img alt={undefined} role=\"presentation\" />;', errors: [altValueError('img')] },\n    { code: '<img alt role=\"presentation\" />;', errors: [altValueError('img')] },\n    { code: '<img role=\"presentation\" />;', errors: [preferAltError()] },\n    { code: '<img role=\"none\" />;', errors: [preferAltError()] },\n    { code: '<img aria-label={undefined} />', errors: [ariaLabelValueError] },\n    { code: '<img aria-labelledby={undefined} />', errors: [ariaLabelledbyValueError] },\n    { code: '<img aria-label=\"\" />', errors: [ariaLabelValueError] },\n    { code: '<img aria-labelledby=\"\" />', errors: [ariaLabelledbyValueError] },\n    { code: '<SomeComponent as=\"img\" aria-label=\"\" />', settings: componentsSettings, errors: [ariaLabelValueError] },\n\n    // DEFAULT ELEMENT 'object' TESTS\n    { code: '<object />', errors: [objectError] },\n    { code: '<object><div aria-hidden /></object>', errors: [objectError] },\n    { code: '<object title={undefined} />', errors: [objectError] },\n    { code: '<object aria-label=\"\" />', errors: [objectError] },\n    { code: '<object aria-labelledby=\"\" />', errors: [objectError] },\n    { code: '<object aria-label={undefined} />', errors: [objectError] },\n    { code: '<object aria-labelledby={undefined} />', errors: [objectError] },\n\n    // DEFAULT ELEMENT 'area' TESTS\n    { code: '<area />', errors: [areaError] },\n    { code: '<area alt />', errors: [areaError] },\n    { code: '<area alt={undefined} />', errors: [areaError] },\n    { code: '<area src=\"xyz\" />', errors: [areaError] },\n    { code: '<area {...this.props} />', errors: [areaError] },\n    { code: '<area aria-label=\"\" />', errors: [areaError] },\n    { code: '<area aria-label={undefined} />', errors: [areaError] },\n    { code: '<area aria-labelledby=\"\" />', errors: [areaError] },\n    { code: '<area aria-labelledby={undefined} />', errors: [areaError] },\n\n    // DEFAULT ELEMENT 'input type=\"image\"' TESTS\n    { code: '<input type=\"image\" />', errors: [inputImageError] },\n    { code: '<input type=\"image\" alt />', errors: [inputImageError] },\n    { code: '<input type=\"image\" alt={undefined} />', errors: [inputImageError] },\n    { code: '<input type=\"image\">Foo</input>', errors: [inputImageError] },\n    { code: '<input type=\"image\" {...this.props} />', errors: [inputImageError] },\n    { code: '<input type=\"image\" aria-label=\"\" />', errors: [inputImageError] },\n    { code: '<input type=\"image\" aria-label={undefined} />', errors: [inputImageError] },\n    { code: '<input type=\"image\" aria-labelledby=\"\" />', errors: [inputImageError] },\n    { code: '<input type=\"image\" aria-labelledby={undefined} />', errors: [inputImageError] },\n\n    // CUSTOM ELEMENT TESTS FOR ARRAY OPTION TESTS\n    {\n      code: '<Thumbnail />;',\n      errors: [missingPropError('Thumbnail')],\n      options: array,\n    },\n    {\n      code: '<Thumbnail alt />;',\n      errors: [altValueError('Thumbnail')],\n      options: array,\n    },\n    {\n      code: '<Thumbnail alt={undefined} />;',\n      errors: [altValueError('Thumbnail')],\n      options: array,\n    },\n    {\n      code: '<Thumbnail src=\"xyz\" />',\n      errors: [missingPropError('Thumbnail')],\n      options: array,\n    },\n    {\n      code: '<Thumbnail {...this.props} />',\n      errors: [missingPropError('Thumbnail')],\n      options: array,\n    },\n    { code: '<Image />;', errors: [missingPropError('Image')], options: array },\n    { code: '<Image alt />;', errors: [altValueError('Image')], options: array },\n    {\n      code: '<Image alt={undefined} />;',\n      errors: [altValueError('Image')],\n      options: array,\n    },\n    {\n      code: '<Image src=\"xyz\" />',\n      errors: [missingPropError('Image')],\n      options: array,\n    },\n    {\n      code: '<Image {...this.props} />',\n      errors: [missingPropError('Image')],\n      options: array,\n    },\n    { code: '<Object />', errors: [objectError], options: array },\n    { code: '<Object><div aria-hidden /></Object>', errors: [objectError], options: array },\n    { code: '<Object title={undefined} />', errors: [objectError], options: array },\n    { code: '<Area />', errors: [areaError], options: array },\n    { code: '<Area alt />', errors: [areaError], options: array },\n    { code: '<Area alt={undefined} />', errors: [areaError], options: array },\n    { code: '<Area src=\"xyz\" />', errors: [areaError], options: array },\n    { code: '<Area {...this.props} />', errors: [areaError], options: array },\n    { code: '<InputImage />', errors: [inputImageError], options: array },\n    { code: '<InputImage alt />', errors: [inputImageError], options: array },\n    { code: '<InputImage alt={undefined} />', errors: [inputImageError], options: array },\n    { code: '<InputImage>Foo</InputImage>', errors: [inputImageError], options: array },\n    { code: '<InputImage {...this.props} />', errors: [inputImageError], options: array },\n    { code: '<Input type=\"image\" />', errors: [inputImageError], settings: componentsSettings },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}