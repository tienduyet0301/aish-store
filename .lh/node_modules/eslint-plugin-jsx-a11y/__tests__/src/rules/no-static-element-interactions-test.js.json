{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/no-static-element-interactions-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce static elements have no interactive handlers.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport { configs } from '../../../src/index';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/no-static-element-interactions';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = 'Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.';\n\nconst expectedError = {\n  message: errorMessage,\n  type: 'JSXOpeningElement',\n};\n\nconst ruleName = 'no-static-element-interactions';\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Button: 'button',\n      TestComponent: 'div',\n    },\n  },\n};\n\nconst alwaysValid = [\n  { code: '<TestComponent onClick={doFoo} />' },\n  { code: '<Button onClick={doFoo} />' },\n  { code: '<Button onClick={doFoo} />', settings: componentsSettings },\n  { code: '<div />;' },\n  { code: '<div className=\"foo\" />;' },\n  { code: '<div className=\"foo\" {...props} />;' },\n  { code: '<div onClick={() => void 0} aria-hidden />;' },\n  { code: '<div onClick={() => void 0} aria-hidden={true} />;' },\n  { code: '<div onClick={null} />;' },\n  /* All flavors of input */\n  { code: '<input onClick={() => void 0} />' },\n  { code: '<input type=\"button\" onClick={() => void 0} />' },\n  { code: '<input type=\"checkbox\" onClick={() => void 0} />' },\n  { code: '<input type=\"color\" onClick={() => void 0} />' },\n  { code: '<input type=\"date\" onClick={() => void 0} />' },\n  { code: '<input type=\"datetime\" onClick={() => void 0} />' },\n  { code: '<input type=\"datetime-local\" onClick={() => void 0} />' },\n  { code: '<input type=\"email\" onClick={() => void 0} />' },\n  { code: '<input type=\"file\" onClick={() => void 0} />' },\n  { code: '<input type=\"hidden\" onClick={() => void 0} />' },\n  { code: '<input type=\"image\" onClick={() => void 0} />' },\n  { code: '<input type=\"month\" onClick={() => void 0} />' },\n  { code: '<input type=\"number\" onClick={() => void 0} />' },\n  { code: '<input type=\"password\" onClick={() => void 0} />' },\n  { code: '<input type=\"radio\" onClick={() => void 0} />' },\n  { code: '<input type=\"range\" onClick={() => void 0} />' },\n  { code: '<input type=\"reset\" onClick={() => void 0} />' },\n  { code: '<input type=\"search\" onClick={() => void 0} />' },\n  { code: '<input type=\"submit\" onClick={() => void 0} />' },\n  { code: '<input type=\"tel\" onClick={() => void 0} />' },\n  { code: '<input type=\"text\" onClick={() => void 0} />' },\n  { code: '<input type=\"time\" onClick={() => void 0} />' },\n  { code: '<input type=\"url\" onClick={() => void 0} />' },\n  { code: '<input type=\"week\" onClick={() => void 0} />' },\n  /* End all flavors of input */\n  { code: '<button onClick={() => void 0} className=\"foo\" />' },\n  { code: '<datalist onClick={() => {}} />;' },\n  { code: '<menuitem onClick={() => {}} />;' },\n  { code: '<option onClick={() => void 0} className=\"foo\" />' },\n  { code: '<select onClick={() => void 0} className=\"foo\" />' },\n  { code: '<textarea onClick={() => void 0} className=\"foo\" />' },\n  { code: '<a onClick={() => void 0} href=\"http://x.y.z\" />' },\n  { code: '<a onClick={() => void 0} href=\"http://x.y.z\" tabIndex=\"0\" />' },\n  { code: '<audio onClick={() => {}} />;' },\n  { code: '<form onClick={() => {}} />;' },\n  { code: '<form onSubmit={() => {}} />;' },\n  // { code: '<link onClick={() => {}} href=\"#\" />;' },\n  /* HTML elements attributed with an interactive role */\n  { code: '<div role=\"button\" onClick={() => {}} />;' },\n  { code: '<div role=\"checkbox\" onClick={() => {}} />;' },\n  { code: '<div role=\"columnheader\" onClick={() => {}} />;' },\n  { code: '<div role=\"combobox\" onClick={() => {}} />;' },\n  { code: '<div role=\"form\" onClick={() => {}} />;' },\n  { code: '<div role=\"gridcell\" onClick={() => {}} />;' },\n  { code: '<div role=\"link\" onClick={() => {}} />;' },\n  { code: '<div role=\"menuitem\" onClick={() => {}} />;' },\n  { code: '<div role=\"menuitemcheckbox\" onClick={() => {}} />;' },\n  { code: '<div role=\"menuitemradio\" onClick={() => {}} />;' },\n  { code: '<div role=\"option\" onClick={() => {}} />;' },\n  { code: '<div role=\"radio\" onClick={() => {}} />;' },\n  { code: '<div role=\"rowheader\" onClick={() => {}} />;' },\n  { code: '<div role=\"searchbox\" onClick={() => {}} />;' },\n  { code: '<div role=\"slider\" onClick={() => {}} />;' },\n  { code: '<div role=\"spinbutton\" onClick={() => {}} />;' },\n  { code: '<div role=\"switch\" onClick={() => {}} />;' },\n  { code: '<div role=\"tab\" onClick={() => {}} />;' },\n  { code: '<div role=\"textbox\" onClick={() => {}} />;' },\n  { code: '<div role=\"treeitem\" onClick={() => {}} />;' },\n  /* Presentation is a special case role that indicates intentional static semantics */\n  { code: '<div role=\"presentation\" onClick={() => {}} />;' },\n  { code: '<div role=\"presentation\" onKeyDown={() => {}} />;' },\n  /* HTML elements with an inherent, non-interactive role */\n  { code: '<address onClick={() => {}} />;' },\n  { code: '<article onClick={() => {}} />;' },\n  { code: '<article onDblClick={() => void 0} />;' },\n  { code: '<aside onClick={() => {}} />;' },\n  { code: '<blockquote onClick={() => {}} />;' },\n  { code: '<br onClick={() => {}} />;' },\n  { code: '<canvas onClick={() => {}} />;' },\n  { code: '<caption onClick={() => {}} />;' },\n  { code: '<code onClick={() => {}} />;' },\n  { code: '<dd onClick={() => {}} />;' },\n  { code: '<del onClick={() => {}} />;' },\n  { code: '<details onClick={() => {}} />;' },\n  { code: '<dfn onClick={() => {}} />;' },\n  { code: '<dir onClick={() => {}} />;' },\n  { code: '<dl onClick={() => {}} />;' },\n  { code: '<dt onClick={() => {}} />;' },\n  { code: '<em onClick={() => {}} />;' },\n  { code: '<embed onClick={() => {}} />;' },\n  { code: '<fieldset onClick={() => {}} />;' },\n  { code: '<figcaption onClick={() => {}} />;' },\n  { code: '<figure onClick={() => {}} />;' },\n  { code: '<footer onClick={() => {}} />;' },\n  { code: '<h1 onClick={() => {}} />;' },\n  { code: '<h2 onClick={() => {}} />;' },\n  { code: '<h3 onClick={() => {}} />;' },\n  { code: '<h4 onClick={() => {}} />;' },\n  { code: '<h5 onClick={() => {}} />;' },\n  { code: '<h6 onClick={() => {}} />;' },\n  { code: '<hr onClick={() => {}} />;' },\n  { code: '<html onClick={() => {}} />;' },\n  { code: '<iframe onClick={() => {}} />;' },\n  { code: '<img onClick={() => {}} />;' },\n  { code: '<ins onClick={() => {}} />;' },\n  { code: '<label onClick={() => {}} />;' },\n  { code: '<legend onClick={() => {}} />;' },\n  { code: '<li onClick={() => {}} />;' },\n  { code: '<main onClick={() => void 0} />;' },\n  { code: '<mark onClick={() => {}} />;' },\n  { code: '<marquee onClick={() => {}} />;' },\n  { code: '<menu onClick={() => {}} />;' },\n  { code: '<meter onClick={() => {}} />;' },\n  { code: '<nav onClick={() => {}} />;' },\n  { code: '<ol onClick={() => {}} />;' },\n  { code: '<optgroup onClick={() => {}} />;' },\n  { code: '<output onClick={() => {}} />;' },\n  { code: '<p onClick={() => {}} />;' },\n  { code: '<pre onClick={() => {}} />;' },\n  { code: '<progress onClick={() => {}} />;' },\n  { code: '<ruby onClick={() => {}} />;' },\n  { code: '<section onClick={() => {}} aria-label=\"Aa\" />;' },\n  { code: '<section onClick={() => {}} aria-labelledby=\"js_1\" />;' },\n  { code: '<strong onClick={() => {}} />;' },\n  { code: '<sub onClick={() => {}} />;' },\n  { code: '<summary onClick={() => {}} />;' },\n  { code: '<sup onClick={() => {}} />;' },\n  { code: '<table onClick={() => {}} />;' },\n  { code: '<tbody onClick={() => {}} />;' },\n  { code: '<tfoot onClick={() => {}} />;' },\n  { code: '<th onClick={() => {}} />;' },\n  { code: '<thead onClick={() => {}} />;' },\n  { code: '<time onClick={() => {}} />;' },\n  { code: '<tr onClick={() => {}} />;' },\n  { code: '<video onClick={() => {}} />;' },\n  { code: '<ul onClick={() => {}} />;' },\n  /* HTML elements attributed with an abstract role */\n  { code: '<div role=\"command\" onClick={() => {}} />;' },\n  { code: '<div role=\"composite\" onClick={() => {}} />;' },\n  { code: '<div role=\"input\" onClick={() => {}} />;' },\n  { code: '<div role=\"landmark\" onClick={() => {}} />;' },\n  { code: '<div role=\"range\" onClick={() => {}} />;' },\n  { code: '<div role=\"roletype\" onClick={() => {}} />;' },\n  { code: '<div role=\"sectionhead\" onClick={() => {}} />;' },\n  { code: '<div role=\"select\" onClick={() => {}} />;' },\n  { code: '<div role=\"structure\" onClick={() => {}} />;' },\n  { code: '<div role=\"widget\" onClick={() => {}} />;' },\n  { code: '<div role=\"window\" onClick={() => {}} />;' },\n  /* HTML elements attributed with a non-interactive role */\n  { code: '<div role=\"alert\" onClick={() => {}} />;' },\n  { code: '<div role=\"alertdialog\" onClick={() => {}} />;' },\n  { code: '<div role=\"application\" onClick={() => {}} />;' },\n  { code: '<div role=\"article\" onClick={() => {}} />;' },\n  { code: '<div role=\"banner\" onClick={() => {}} />;' },\n  { code: '<div role=\"cell\" onClick={() => {}} />;' },\n  { code: '<div role=\"complementary\" onClick={() => {}} />;' },\n  { code: '<div role=\"contentinfo\" onClick={() => {}} />;' },\n  { code: '<div role=\"definition\" onClick={() => {}} />;' },\n  { code: '<div role=\"dialog\" onClick={() => {}} />;' },\n  { code: '<div role=\"directory\" onClick={() => {}} />;' },\n  { code: '<div role=\"document\" onClick={() => {}} />;' },\n  { code: '<div role=\"feed\" onClick={() => {}} />;' },\n  { code: '<div role=\"figure\" onClick={() => {}} />;' },\n  { code: '<div role=\"grid\" onClick={() => {}} />;' },\n  { code: '<div role=\"group\" onClick={() => {}} />;' },\n  { code: '<div role=\"heading\" onClick={() => {}} />;' },\n  { code: '<div role=\"img\" onClick={() => {}} />;' },\n  { code: '<div role=\"list\" onClick={() => {}} />;' },\n  { code: '<div role=\"listbox\" onClick={() => {}} />;' },\n  { code: '<div role=\"listitem\" onClick={() => {}} />;' },\n  { code: '<div role=\"log\" onClick={() => {}} />;' },\n  { code: '<div role=\"main\" onClick={() => {}} />;' },\n  { code: '<div role=\"marquee\" onClick={() => {}} />;' },\n  { code: '<div role=\"math\" onClick={() => {}} />;' },\n  { code: '<div role=\"menu\" onClick={() => {}} />;' },\n  { code: '<div role=\"menubar\" onClick={() => {}} />;' },\n  { code: '<div role=\"navigation\" onClick={() => {}} />;' },\n  { code: '<div role=\"note\" onClick={() => {}} />;' },\n  { code: '<div role=\"progressbar\" onClick={() => {}} />;' },\n  { code: '<div role=\"radiogroup\" onClick={() => {}} />;' },\n  { code: '<div role=\"region\" onClick={() => {}} />;' },\n  { code: '<div role=\"row\" onClick={() => {}} />;' },\n  { code: '<div role=\"rowgroup\" onClick={() => {}} />;' },\n  { code: '<div role=\"section\" onClick={() => {}} />;' },\n  { code: '<div role=\"search\" onClick={() => {}} />;' },\n  { code: '<div role=\"separator\" onClick={() => {}} />;' },\n  { code: '<div role=\"scrollbar\" onClick={() => {}} />;' },\n  { code: '<div role=\"status\" onClick={() => {}} />;' },\n  { code: '<div role=\"table\" onClick={() => {}} />;' },\n  { code: '<div role=\"tablist\" onClick={() => {}} />;' },\n  { code: '<div role=\"tabpanel\" onClick={() => {}} />;' },\n  // { code: '<td onClick={() => {}} />;' },\n  { code: '<div role=\"term\" onClick={() => {}} />;' },\n  { code: '<div role=\"timer\" onClick={() => {}} />;' },\n  { code: '<div role=\"toolbar\" onClick={() => {}} />;' },\n  { code: '<div role=\"tooltip\" onClick={() => {}} />;' },\n  { code: '<div role=\"tree\" onClick={() => {}} />;' },\n  { code: '<div role=\"treegrid\" onClick={() => {}} />;' },\n  // All the possible handlers\n  { code: '<div onCopy={() => {}} />;' },\n  { code: '<div onCut={() => {}} />;' },\n  { code: '<div onPaste={() => {}} />;' },\n  { code: '<div onCompositionEnd={() => {}} />;' },\n  { code: '<div onCompositionStart={() => {}} />;' },\n  { code: '<div onCompositionUpdate={() => {}} />;' },\n  { code: '<div onChange={() => {}} />;' },\n  { code: '<div onInput={() => {}} />;' },\n  { code: '<div onSubmit={() => {}} />;' },\n  { code: '<div onSelect={() => {}} />;' },\n  { code: '<div onTouchCancel={() => {}} />;' },\n  { code: '<div onTouchEnd={() => {}} />;' },\n  { code: '<div onTouchMove={() => {}} />;' },\n  { code: '<div onTouchStart={() => {}} />;' },\n  { code: '<div onScroll={() => {}} />;' },\n  { code: '<div onWheel={() => {}} />;' },\n  { code: '<div onAbort={() => {}} />;' },\n  { code: '<div onCanPlay={() => {}} />;' },\n  { code: '<div onCanPlayThrough={() => {}} />;' },\n  { code: '<div onDurationChange={() => {}} />;' },\n  { code: '<div onEmptied={() => {}} />;' },\n  { code: '<div onEncrypted={() => {}} />;' },\n  { code: '<div onEnded={() => {}} />;' },\n  { code: '<div onError={() => {}} />;' },\n  { code: '<div onLoadedData={() => {}} />;' },\n  { code: '<div onLoadedMetadata={() => {}} />;' },\n  { code: '<div onLoadStart={() => {}} />;' },\n  { code: '<div onPause={() => {}} />;' },\n  { code: '<div onPlay={() => {}} />;' },\n  { code: '<div onPlaying={() => {}} />;' },\n  { code: '<div onProgress={() => {}} />;' },\n  { code: '<div onRateChange={() => {}} />;' },\n  { code: '<div onSeeked={() => {}} />;' },\n  { code: '<div onSeeking={() => {}} />;' },\n  { code: '<div onStalled={() => {}} />;' },\n  { code: '<div onSuspend={() => {}} />;' },\n  { code: '<div onTimeUpdate={() => {}} />;' },\n  { code: '<div onVolumeChange={() => {}} />;' },\n  { code: '<div onWaiting={() => {}} />;' },\n  { code: '<div onLoad={() => {}} />;' },\n  { code: '<div onError={() => {}} />;' },\n  { code: '<div onAnimationStart={() => {}} />;' },\n  { code: '<div onAnimationEnd={() => {}} />;' },\n  { code: '<div onAnimationIteration={() => {}} />;' },\n  { code: '<div onTransitionEnd={() => {}} />;' },\n];\n\nconst neverValid = [\n  { code: '<div onClick={() => void 0} />;', errors: [expectedError] },\n  { code: '<div onClick={() => void 0} role={undefined} />;', errors: [expectedError] },\n  { code: '<div onClick={() => void 0} {...props} />;', errors: [expectedError] },\n  { code: '<div onKeyUp={() => void 0} aria-hidden={false} />;', errors: [expectedError] },\n  /* Static elements; no inherent role */\n  { code: '<a onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<a onClick={() => void 0} />', errors: [expectedError] },\n  { code: '<a tabIndex=\"0\" onClick={() => void 0} />', errors: [expectedError] },\n  { code: '<acronym onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<applet onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<area onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<b onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<base onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<bdi onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<bdo onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<big onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<blink onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<body onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<center onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<cite onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<col onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<colgroup onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<content onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<data onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<font onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<frame onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<frameset onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<head onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<header onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<hgroup onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<i onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<kbd onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<keygen onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<map onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<meta onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<noembed onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<noscript onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<object onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<param onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<picture onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<q onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<rp onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<rt onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<rtc onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<s onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<samp onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<script onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<section onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<small onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<source onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<spacer onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<span onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<strike onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<style onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<title onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<track onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<tt onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<u onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<var onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<wbr onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<xmp onClick={() => {}} />;', errors: [expectedError] },\n  // Handlers\n  { code: '<div onKeyDown={() => {}} />;', errors: [expectedError] },\n  { code: '<div onKeyPress={() => {}} />;', errors: [expectedError] },\n  { code: '<div onKeyUp={() => {}} />;', errors: [expectedError] },\n  { code: '<div onClick={() => {}} />;', errors: [expectedError] },\n  { code: '<div onMouseDown={() => {}} />;', errors: [expectedError] },\n  { code: '<div onMouseUp={() => {}} />;', errors: [expectedError] },\n  // Custom components\n  { code: '<TestComponent onClick={doFoo} />', settings: componentsSettings, errors: [expectedError] },\n];\n\nconst recommendedOptions = configs.recommended.rules[`jsx-a11y/${ruleName}`][1] || {};\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: parsers.all([].concat(\n    alwaysValid,\n    // All the possible handlers\n    { code: '<div onCopy={() => {}} />;' },\n    { code: '<div onCut={() => {}} />;' },\n    { code: '<div onPaste={() => {}} />;' },\n    { code: '<div onCompositionEnd={() => {}} />;' },\n    { code: '<div onCompositionStart={() => {}} />;' },\n    { code: '<div onCompositionUpdate={() => {}} />;' },\n    { code: '<div onFocus={() => {}} />;' },\n    { code: '<div onBlur={() => {}} />;' },\n    { code: '<div onChange={() => {}} />;' },\n    { code: '<div onInput={() => {}} />;' },\n    { code: '<div onSubmit={() => {}} />;' },\n    { code: '<div onContextMenu={() => {}} />;' },\n    { code: '<div onDblClick={() => {}} />;' },\n    { code: '<div onDoubleClick={() => {}} />;' },\n    { code: '<div onDrag={() => {}} />;' },\n    { code: '<div onDragEnd={() => {}} />;' },\n    { code: '<div onDragEnter={() => {}} />;' },\n    { code: '<div onDragExit={() => {}} />;' },\n    { code: '<div onDragLeave={() => {}} />;' },\n    { code: '<div onDragOver={() => {}} />;' },\n    { code: '<div onDragStart={() => {}} />;' },\n    { code: '<div onDrop={() => {}} />;' },\n    { code: '<div onMouseEnter={() => {}} />;' },\n    { code: '<div onMouseLeave={() => {}} />;' },\n    { code: '<div onMouseMove={() => {}} />;' },\n    { code: '<div onMouseOut={() => {}} />;' },\n    { code: '<div onMouseOver={() => {}} />;' },\n    { code: '<div onSelect={() => {}} />;' },\n    { code: '<div onTouchCancel={() => {}} />;' },\n    { code: '<div onTouchEnd={() => {}} />;' },\n    { code: '<div onTouchMove={() => {}} />;' },\n    { code: '<div onTouchStart={() => {}} />;' },\n    { code: '<div onScroll={() => {}} />;' },\n    { code: '<div onWheel={() => {}} />;' },\n    { code: '<div onAbort={() => {}} />;' },\n    { code: '<div onCanPlay={() => {}} />;' },\n    { code: '<div onCanPlayThrough={() => {}} />;' },\n    { code: '<div onDurationChange={() => {}} />;' },\n    { code: '<div onEmptied={() => {}} />;' },\n    { code: '<div onEncrypted={() => {}} />;' },\n    { code: '<div onEnded={() => {}} />;' },\n    { code: '<div onError={() => {}} />;' },\n    { code: '<div onLoadedData={() => {}} />;' },\n    { code: '<div onLoadedMetadata={() => {}} />;' },\n    { code: '<div onLoadStart={() => {}} />;' },\n    { code: '<div onPause={() => {}} />;' },\n    { code: '<div onPlay={() => {}} />;' },\n    { code: '<div onPlaying={() => {}} />;' },\n    { code: '<div onProgress={() => {}} />;' },\n    { code: '<div onRateChange={() => {}} />;' },\n    { code: '<div onSeeked={() => {}} />;' },\n    { code: '<div onSeeking={() => {}} />;' },\n    { code: '<div onStalled={() => {}} />;' },\n    { code: '<div onSuspend={() => {}} />;' },\n    { code: '<div onTimeUpdate={() => {}} />;' },\n    { code: '<div onVolumeChange={() => {}} />;' },\n    { code: '<div onWaiting={() => {}} />;' },\n    { code: '<div onLoad={() => {}} />;' },\n    { code: '<div onError={() => {}} />;' },\n    { code: '<div onAnimationStart={() => {}} />;' },\n    { code: '<div onAnimationEnd={() => {}} />;' },\n    { code: '<div onAnimationIteration={() => {}} />;' },\n    { code: '<div onTransitionEnd={() => {}} />;' },\n    // Expressions should pass in recommended mode\n    { code: '<div role={ROLE_BUTTON} onClick={() => {}} />;' },\n    { code: '<div  {...this.props} role={this.props.role} onKeyPress={e => this.handleKeyPress(e)}>{this.props.children}</div>' },\n    // Cases for allowExpressionValues set to true\n    {\n      code: '<div role={BUTTON} onClick={() => {}} />;',\n      options: [{ allowExpressionValues: true }],\n    },\n    // Specific case for ternary operator with literals on both side\n    {\n      code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} />;',\n      options: [{ allowExpressionValues: true }],\n    },\n    {\n      code: '<div role={isButton ? \"button\" : LINK} onClick={() => {}} />;',\n      options: [{ allowExpressionValues: true }],\n      errors: [expectedError],\n    },\n    {\n      code: '<div role={isButton ? BUTTON : LINK} onClick={() => {}} />;',\n      options: [{ allowExpressionValues: true }],\n      errors: [expectedError],\n    },\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    neverValid,\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n});\n\nruleTester.run(`${ruleName}:strict`, rule, {\n  valid: parsers.all([].concat(\n    alwaysValid,\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    neverValid,\n    // All the possible handlers\n    { code: '<div onContextMenu={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDblClick={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDoubleClick={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDrag={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDragEnd={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDragEnter={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDragExit={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDragLeave={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDragOver={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDragStart={() => {}} />;', errors: [expectedError] },\n    { code: '<div onDrop={() => {}} />;', errors: [expectedError] },\n    { code: '<div onMouseEnter={() => {}} />;', errors: [expectedError] },\n    { code: '<div onMouseLeave={() => {}} />;', errors: [expectedError] },\n    { code: '<div onMouseMove={() => {}} />;', errors: [expectedError] },\n    { code: '<div onMouseOut={() => {}} />;', errors: [expectedError] },\n    { code: '<div onMouseOver={() => {}} />;', errors: [expectedError] },\n    // Expressions should fail in strict mode\n    { code: '<div role={ROLE_BUTTON} onClick={() => {}} />;', errors: [expectedError] },\n    { code: '<div  {...this.props} role={this.props.role} onKeyPress={e => this.handleKeyPress(e)}>{this.props.children}</div>', errors: [expectedError] },\n    // Cases for allowExpressionValues set to false\n    {\n      code: '<div role={BUTTON} onClick={() => {}} />;',\n      options: [{ allowExpressionValues: false }],\n      errors: [expectedError],\n    },\n    // Specific case for ternary operator with literals on both side\n    {\n      code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} />;',\n      options: [{ allowExpressionValues: false }],\n      errors: [expectedError],\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}