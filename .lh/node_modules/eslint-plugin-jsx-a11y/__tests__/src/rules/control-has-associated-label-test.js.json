{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/control-has-associated-label-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Control elements must be associated with a text label\n * @author jessebeach\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport { configs } from '../../../src/index';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\nimport rule from '../../../src/rules/control-has-associated-label';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst ruleName = 'jsx-a11y/control-has-associated-label';\n\nconst expectedError = {\n  message: 'A control must be associated with a text label.',\n  type: 'JSXOpeningElement',\n};\n\nconst alwaysValid = [\n  // Custom Control Components\n  { code: '<CustomControl><span><span>Save</span></span></CustomControl>', options: [{ depth: 3, controlComponents: ['CustomControl'] }] },\n  { code: '<CustomControl><span><span label=\"Save\"></span></span></CustomControl>', options: [{ depth: 3, controlComponents: ['CustomControl'], labelAttributes: ['label'] }] },\n  { code: '<CustomControl>Save</CustomControl>', settings: { 'jsx-a11y': { components: { CustomControl: 'button' } } } },\n  // Interactive Elements\n  { code: '<button>Save</button>' },\n  { code: '<button><span>Save</span></button>' },\n  { code: '<button><span><span>Save</span></span></button>', options: [{ depth: 3 }] },\n  { code: '<button><span><span><span><span><span><span><span><span>Save</span></span></span></span></span></span></span></span></button>', options: [{ depth: 9 }] },\n  { code: '<button><img alt=\"Save\" /></button>' },\n  { code: '<button aria-label=\"Save\" />' },\n  { code: '<button><span aria-label=\"Save\" /></button>' },\n  { code: '<button aria-labelledby=\"js_1\" />' },\n  { code: '<button><span aria-labelledby=\"js_1\" /></button>' },\n  { code: '<button>{sureWhyNot}</button>' },\n  { code: '<button><span><span label=\"Save\"></span></span></button>', options: [{ depth: 3, labelAttributes: ['label'] }] },\n  { code: '<a href=\"#\">Save</a>' },\n  { code: '<area href=\"#\">Save</area>' },\n  { code: '<link>Save</link>' },\n  { code: '<menuitem>Save</menuitem>' },\n  { code: '<option>Save</option>' },\n  { code: '<th>Save</th>' },\n  // Interactive Roles\n  { code: '<div role=\"button\">Save</div>' },\n  { code: '<div role=\"checkbox\">Save</div>' },\n  { code: '<div role=\"columnheader\">Save</div>' },\n  { code: '<div role=\"combobox\">Save</div>' },\n  { code: '<div role=\"gridcell\">Save</div>' },\n  { code: '<div role=\"link\">Save</div>' },\n  { code: '<div role=\"menuitem\">Save</div>' },\n  { code: '<div role=\"menuitemcheckbox\">Save</div>' },\n  { code: '<div role=\"menuitemradio\">Save</div>' },\n  { code: '<div role=\"option\">Save</div>' },\n  { code: '<div role=\"progressbar\">Save</div>' },\n  { code: '<div role=\"radio\">Save</div>' },\n  { code: '<div role=\"rowheader\">Save</div>' },\n  { code: '<div role=\"searchbox\">Save</div>' },\n  { code: '<div role=\"slider\">Save</div>' },\n  { code: '<div role=\"spinbutton\">Save</div>' },\n  { code: '<div role=\"switch\">Save</div>' },\n  { code: '<div role=\"tab\">Save</div>' },\n  { code: '<div role=\"textbox\">Save</div>' },\n  { code: '<div role=\"treeitem\">Save</div>' },\n  { code: '<div role=\"button\" aria-label=\"Save\" />' },\n  { code: '<div role=\"checkbox\" aria-label=\"Save\" />' },\n  { code: '<div role=\"columnheader\" aria-label=\"Save\" />' },\n  { code: '<div role=\"combobox\" aria-label=\"Save\" />' },\n  { code: '<div role=\"gridcell\" aria-label=\"Save\" />' },\n  { code: '<div role=\"link\" aria-label=\"Save\" />' },\n  { code: '<div role=\"menuitem\" aria-label=\"Save\" />' },\n  { code: '<div role=\"menuitemcheckbox\" aria-label=\"Save\" />' },\n  { code: '<div role=\"menuitemradio\" aria-label=\"Save\" />' },\n  { code: '<div role=\"option\" aria-label=\"Save\" />' },\n  { code: '<div role=\"progressbar\" aria-label=\"Save\" />' },\n  { code: '<div role=\"radio\" aria-label=\"Save\" />' },\n  { code: '<div role=\"rowheader\" aria-label=\"Save\" />' },\n  { code: '<div role=\"searchbox\" aria-label=\"Save\" />' },\n  { code: '<div role=\"slider\" aria-label=\"Save\" />' },\n  { code: '<div role=\"spinbutton\" aria-label=\"Save\" />' },\n  { code: '<div role=\"switch\" aria-label=\"Save\" />' },\n  { code: '<div role=\"tab\" aria-label=\"Save\" />' },\n  { code: '<div role=\"textbox\" aria-label=\"Save\" />' },\n  { code: '<div role=\"treeitem\" aria-label=\"Save\" />' },\n  { code: '<div role=\"button\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"checkbox\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"columnheader\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"combobox\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"gridcell\" aria-labelledby=\"Save\" />' },\n  { code: '<div role=\"link\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"menuitem\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"menuitemcheckbox\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"menuitemradio\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"option\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"progressbar\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"radio\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"rowheader\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"searchbox\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"slider\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"spinbutton\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"switch\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"tab\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"textbox\" aria-labelledby=\"js_1\" />' },\n  { code: '<div role=\"treeitem\" aria-labelledby=\"js_1\" />' },\n  // Non-interactive Elements\n  { code: '<abbr />' },\n  { code: '<article />' },\n  { code: '<blockquote />' },\n  { code: '<br />' },\n  { code: '<caption />' },\n  { code: '<dd />' },\n  { code: '<details />' },\n  { code: '<dfn />' },\n  { code: '<dialog />' },\n  { code: '<dir />' },\n  { code: '<dl />' },\n  { code: '<dt />' },\n  { code: '<fieldset />' },\n  { code: '<figcaption />' },\n  { code: '<figure />' },\n  { code: '<footer />' },\n  { code: '<form />' },\n  { code: '<frame />' },\n  { code: '<h1 />' },\n  { code: '<h2 />' },\n  { code: '<h3 />' },\n  { code: '<h4 />' },\n  { code: '<h5 />' },\n  { code: '<h6 />' },\n  { code: '<hr />' },\n  { code: '<iframe />' },\n  { code: '<img />' },\n  { code: '<label />' },\n  { code: '<legend />' },\n  { code: '<li />' },\n  { code: '<link />' },\n  { code: '<main />' },\n  { code: '<mark />' },\n  { code: '<marquee />' },\n  { code: '<menu />' },\n  { code: '<meter />' },\n  { code: '<nav />' },\n  { code: '<ol />' },\n  { code: '<p />' },\n  { code: '<pre />' },\n  { code: '<progress />' },\n  { code: '<ruby />' },\n  { code: '<section />' },\n  { code: '<table />' },\n  { code: '<tbody />' },\n  { code: '<tfoot />' },\n  { code: '<thead />' },\n  { code: '<time />' },\n  { code: '<ul />' },\n  // Non-interactive Roles\n  { code: '<div role=\"alert\" />' },\n  { code: '<div role=\"alertdialog\" />' },\n  { code: '<div role=\"application\" />' },\n  { code: '<div role=\"article\" />' },\n  { code: '<div role=\"banner\" />' },\n  { code: '<div role=\"cell\" />' },\n  { code: '<div role=\"complementary\" />' },\n  { code: '<div role=\"contentinfo\" />' },\n  { code: '<div role=\"definition\" />' },\n  { code: '<div role=\"dialog\" />' },\n  { code: '<div role=\"directory\" />' },\n  { code: '<div role=\"document\" />' },\n  { code: '<div role=\"feed\" />' },\n  { code: '<div role=\"figure\" />' },\n  { code: '<div role=\"form\" />' },\n  { code: '<div role=\"group\" />' },\n  { code: '<div role=\"heading\" />' },\n  { code: '<div role=\"img\" />' },\n  { code: '<div role=\"list\" />' },\n  { code: '<div role=\"listitem\" />' },\n  { code: '<div role=\"log\" />' },\n  { code: '<div role=\"main\" />' },\n  { code: '<div role=\"marquee\" />' },\n  { code: '<div role=\"math\" />' },\n  { code: '<div role=\"navigation\" />' },\n  { code: '<div role=\"none\" />' },\n  { code: '<div role=\"note\" />' },\n  { code: '<div role=\"presentation\" />' },\n  { code: '<div role=\"region\" />' },\n  { code: '<div role=\"rowgroup\" />' },\n  { code: '<div role=\"search\" />' },\n  { code: '<div role=\"separator\" />' },\n  { code: '<div role=\"status\" />' },\n  { code: '<div role=\"table\" />' },\n  { code: '<div role=\"tabpanel\" />' },\n  { code: '<div role=\"term\" />' },\n  { code: '<div role=\"timer\" />' },\n  { code: '<div role=\"tooltip\" />' },\n  // Via config\n  // Inputs. Ignore them because they might get a label from a wrapping label element.\n  { code: '<input />' },\n  { code: '<input type=\"button\" />' },\n  { code: '<input type=\"checkbox\" />' },\n  { code: '<input type=\"color\" />' },\n  { code: '<input type=\"date\" />' },\n  { code: '<input type=\"datetime\" />' },\n  { code: '<input type=\"email\" />' },\n  { code: '<input type=\"file\" />' },\n  { code: '<input type=\"hidden\" />' },\n  { code: '<input type=\"hidden\" name=\"bot-field\"/>' },\n  { code: '<input type=\"hidden\" name=\"form-name\" value=\"Contact Form\"/>' },\n  { code: '<input type=\"image\" />' },\n  { code: '<input type=\"month\" />' },\n  { code: '<input type=\"number\" />' },\n  { code: '<input type=\"password\" />' },\n  { code: '<input type=\"radio\" />' },\n  { code: '<input type=\"range\" />' },\n  { code: '<input type=\"reset\" />' },\n  { code: '<input type=\"search\" />' },\n  { code: '<input type=\"submit\" />' },\n  { code: '<input type=\"tel\" />' },\n  { code: '<input type=\"text\" />' },\n  { code: '<label>Foo <input type=\"text\" /></label>' },\n  { code: '<input name={field.name} id=\"foo\" type=\"text\" value={field.value} disabled={isDisabled} onChange={changeText(field.onChange, field.name)} onBlur={field.onBlur} />' },\n  { code: '<input type=\"time\" />' },\n  { code: '<input type=\"url\" />' },\n  { code: '<input type=\"week\" />' },\n  // Marginal interactive elements. It is difficult to insist that these\n  // elements contain a text label.\n  { code: '<audio />' },\n  { code: '<canvas />' },\n  { code: '<embed />' },\n  { code: '<textarea />' },\n  { code: '<tr />' },\n  { code: '<video />' },\n  // Interactive roles to ignore\n  { code: '<div role=\"grid\" />' },\n  { code: '<div role=\"listbox\" />' },\n  { code: '<div role=\"menu\" />' },\n  { code: '<div role=\"menubar\" />' },\n  { code: '<div role=\"radiogroup\" />' },\n  { code: '<div role=\"row\" />' },\n  { code: '<div role=\"tablist\" />' },\n  { code: '<div role=\"toolbar\" />' },\n  { code: '<div role=\"tree\" />' },\n  { code: '<div role=\"treegrid\" />' },\n];\nconst neverValid = [\n  { code: '<button />', errors: [expectedError] },\n  { code: '<button><span /></button>', errors: [expectedError] },\n  { code: '<button><img /></button>', errors: [expectedError] },\n  { code: '<button><span title=\"This is not a real label\" /></button>', errors: [expectedError] },\n  { code: '<button><span><span><span>Save</span></span></span></button>', options: [{ depth: 3 }], errors: [expectedError] },\n  { code: '<CustomControl><span><span></span></span></CustomControl>', options: [{ depth: 3, controlComponents: ['CustomControl'] }], errors: [expectedError] },\n  { code: '<CustomControl></CustomControl>', errors: [expectedError], settings: { 'jsx-a11y': { components: { CustomControl: 'button' } } } },\n  { code: '<a href=\"#\" />', errors: [expectedError] },\n  { code: '<area href=\"#\" />', errors: [expectedError] },\n  { code: '<menuitem />', errors: [expectedError] },\n  { code: '<option />', errors: [expectedError] },\n  { code: '<th />', errors: [expectedError] },\n  { code: '<td />', errors: [expectedError] },\n  // Interactive Roles\n  { code: '<div role=\"button\" />', errors: [expectedError] },\n  { code: '<div role=\"checkbox\" />', errors: [expectedError] },\n  { code: '<div role=\"columnheader\" />', errors: [expectedError] },\n  { code: '<div role=\"combobox\" />', errors: [expectedError] },\n  { code: '<div role=\"link\" />', errors: [expectedError] },\n  { code: '<div role=\"gridcell\" />', errors: [expectedError] },\n  { code: '<div role=\"menuitem\" />', errors: [expectedError] },\n  { code: '<div role=\"menuitemcheckbox\" />', errors: [expectedError] },\n  { code: '<div role=\"menuitemradio\" />', errors: [expectedError] },\n  { code: '<div role=\"option\" />', errors: [expectedError] },\n  { code: '<div role=\"progressbar\" />', errors: [expectedError] },\n  { code: '<div role=\"radio\" />', errors: [expectedError] },\n  { code: '<div role=\"rowheader\" />', errors: [expectedError] },\n  { code: '<div role=\"scrollbar\" />', errors: [expectedError] },\n  { code: '<div role=\"searchbox\" />', errors: [expectedError] },\n  { code: '<div role=\"slider\" />', errors: [expectedError] },\n  { code: '<div role=\"spinbutton\" />', errors: [expectedError] },\n  { code: '<div role=\"switch\" />', errors: [expectedError] },\n  { code: '<div role=\"tab\" />', errors: [expectedError] },\n  { code: '<div role=\"textbox\" />', errors: [expectedError] },\n];\n\nconst recommendedOptions = (configs.recommended.rules[ruleName][1] || {});\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n});\n\nconst strictOptions = (configs.strict.rules[ruleName][1] || {});\nruleTester.run(`${ruleName}:strict`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n  ))\n    .map(ruleOptionsMapperFactory(strictOptions))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n  ))\n    .map(ruleOptionsMapperFactory(strictOptions))\n    .map(parserOptionsMapper),\n});\n\nruleTester.run(`${ruleName}:no-config`, rule, {\n  valid: parsers.all([].concat(\n    { code: '<input type=\"hidden\" />' },\n    { code: '<input type=\"text\" aria-hidden=\"true\" />' },\n  ))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<input type=\"text\" />', errors: [expectedError] },\n  ))\n    .map(parserOptionsMapper),\n});\n"
        }
    ]
}