{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-role-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce aria role attribute is valid.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { roles } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/aria-role';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = {\n  message: 'Elements with ARIA roles must use a valid, non-abstract ARIA role.',\n  type: 'JSXAttribute',\n};\n\nconst roleKeys = roles.keys();\n\nconst validRoles = roleKeys.filter((role) => roles.get(role).abstract === false);\nconst invalidRoles = roleKeys.filter((role) => roles.get(role).abstract === true);\n\nconst createTests = (roleNames) => roleNames.map((role) => ({\n  code: `<div role=\"${role.toLowerCase()}\" />`,\n}));\n\nconst validTests = createTests(validRoles);\nconst invalidTests = createTests(invalidRoles).map((test) => {\n  const invalidTest = { ...test };\n  invalidTest.errors = [errorMessage];\n  return invalidTest;\n});\n\nconst allowedInvalidRoles = [{\n  allowedInvalidRoles: ['invalid-role', 'other-invalid-role'],\n}];\n\nconst ignoreNonDOMSchema = [{\n  ignoreNonDOM: true,\n}];\n\nconst customDivSettings = {\n  'jsx-a11y': {\n    polymorphicPropName: 'asChild',\n    components: {\n      Div: 'div',\n    },\n  },\n};\n\nruleTester.run('aria-role', rule, {\n  valid: parsers.all([].concat(\n    // Variables should pass, as we are only testing literals.\n    { code: '<div />' },\n    { code: '<div></div>' },\n    { code: '<div role={role} />' },\n    { code: '<div role={role || \"button\"} />' },\n    { code: '<div role={role || \"foobar\"} />' },\n    { code: '<div role=\"tabpanel row\" />' },\n    { code: '<div role=\"switch\" />' },\n    { code: '<div role=\"doc-abstract\" />' },\n    { code: '<div role=\"doc-appendix doc-bibliography\" />' },\n    { code: '<Bar baz />' },\n    { code: '<img role=\"invalid-role\" />', options: allowedInvalidRoles },\n    { code: '<img role=\"invalid-role tabpanel\" />', options: allowedInvalidRoles },\n    { code: '<img role=\"invalid-role other-invalid-role\" />', options: allowedInvalidRoles },\n    { code: '<Foo role=\"bar\" />', options: ignoreNonDOMSchema },\n    { code: '<fakeDOM role=\"bar\" />', options: ignoreNonDOMSchema },\n    { code: '<img role=\"presentation\" />', options: ignoreNonDOMSchema },\n    {\n      code: '<Div role=\"button\" />',\n      settings: customDivSettings,\n    },\n    {\n      code: '<Box asChild=\"div\" role=\"button\" />',\n      settings: customDivSettings,\n    },\n    { code: '<svg role=\"graphics-document document\" />' },\n    { code: '<svg role=\"img\" />' },\n  )).concat(validTests).map(parserOptionsMapper),\n\n  invalid: parsers.all([].concat(\n    { code: '<div role=\"foobar\" />', errors: [errorMessage] },\n    { code: '<div role=\"datepicker\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"range\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"Button\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"tabpanel row foobar\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"tabpanel row range\"></div>', errors: [errorMessage] },\n    { code: '<div role=\"doc-endnotes range\"></div>', errors: [errorMessage] },\n    { code: '<div role />', errors: [errorMessage] },\n    { code: '<div role=\"unknown-invalid-role\" />', errors: [errorMessage], options: allowedInvalidRoles },\n    { code: '<div role={null}></div>', errors: [errorMessage] },\n    { code: '<Foo role=\"datepicker\" />', errors: [errorMessage] },\n    { code: '<Foo role=\"Button\" />', errors: [errorMessage] },\n    { code: '<Div role=\"Button\" />', errors: [errorMessage], settings: customDivSettings },\n    {\n      code: '<Div role=\"Button\" />',\n      errors: [errorMessage],\n      options: ignoreNonDOMSchema,\n      settings: customDivSettings,\n    },\n    {\n      code: '<Box asChild=\"div\" role=\"Button\" />',\n      settings: customDivSettings,\n      errors: [errorMessage],\n    },\n  )).concat(invalidTests).map(parserOptionsMapper),\n});\n"
        }
    ]
}