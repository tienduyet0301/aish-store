{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-proptypes-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce ARIA state and property values are valid.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { aria } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport test from 'tape';\n\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/aria-proptypes';\n\nconst { validityCheck } = rule;\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = (name) => {\n  const {\n    type,\n    values: permittedValues,\n  } = aria.get(name.toLowerCase());\n\n  switch (type) {\n    case 'tristate':\n      return { message: `The value for ${name} must be a boolean or the string \"mixed\".` };\n    case 'token':\n      return { message: `The value for ${name} must be a single token from the following: ${permittedValues}.` };\n    case 'tokenlist':\n      return {\n        message: `The value for ${name} must be a list of one or more \\\ntokens from the following: ${permittedValues}.`,\n      };\n    case 'idlist':\n      return { message: `The value for ${name} must be a list of strings that represent DOM element IDs (idlist)` };\n    case 'id':\n      return { message: `The value for ${name} must be a string that represents a DOM element ID` };\n    case 'boolean':\n    case 'string':\n    case 'integer':\n    case 'number':\n    default:\n      return { message: `The value for ${name} must be a ${type}.` };\n  }\n};\n\ntest('validityCheck', (t) => {\n  t.equal(\n    validityCheck(null, null),\n    false,\n    'is false for an unknown expected type',\n  );\n\n  t.end();\n});\n\nruleTester.run('aria-proptypes', rule, {\n  valid: parsers.all([].concat(\n    // DON'T TEST INVALID ARIA-* PROPS\n    { code: '<div aria-foo=\"true\" />' },\n    { code: '<div abcaria-foo=\"true\" />' },\n\n    // BOOLEAN\n    { code: '<div aria-hidden={true} />' },\n    { code: '<div aria-hidden=\"true\" />' },\n    { code: '<div aria-hidden={\"false\"} />' },\n    { code: '<div aria-hidden={!false} />' },\n    { code: '<div aria-hidden />' },\n    { code: '<div aria-hidden={false} />' },\n    { code: '<div aria-hidden={!true} />' },\n    { code: '<div aria-hidden={!\"yes\"} />' },\n    { code: '<div aria-hidden={foo} />' },\n    { code: '<div aria-hidden={foo.bar} />' },\n    { code: '<div aria-hidden={null} />' },\n    { code: '<div aria-hidden={undefined} />' },\n    { code: '<div aria-hidden={<div />} />' },\n\n    // STRING\n    { code: '<div aria-label=\"Close\" />' },\n    { code: '<div aria-label={`Close`} />' },\n    { code: '<div aria-label={foo} />' },\n    { code: '<div aria-label={foo.bar} />' },\n    { code: '<div aria-label={null} />' },\n    { code: '<div aria-label={undefined} />' },\n    { code: '<input aria-invalid={error ? \"true\" : \"false\"} />' },\n    { code: '<input aria-invalid={undefined ? \"true\" : \"false\"} />' },\n\n    // TRISTATE\n    { code: '<div aria-checked={true} />' },\n    { code: '<div aria-checked=\"true\" />' },\n    { code: '<div aria-checked={\"false\"} />' },\n    { code: '<div aria-checked={!false} />' },\n    { code: '<div aria-checked />' },\n    { code: '<div aria-checked={false} />' },\n    { code: '<div aria-checked={!true} />' },\n    { code: '<div aria-checked={!\"yes\"} />' },\n    { code: '<div aria-checked={foo} />' },\n    { code: '<div aria-checked={foo.bar} />' },\n    { code: '<div aria-checked=\"mixed\" />' },\n    { code: '<div aria-checked={`mixed`} />' },\n    { code: '<div aria-checked={null} />' },\n    { code: '<div aria-checked={undefined} />' },\n\n    // INTEGER\n    { code: '<div aria-level={123} />' },\n    { code: '<div aria-level={-123} />' },\n    { code: '<div aria-level={+123} />' },\n    { code: '<div aria-level={~123} />' },\n    { code: '<div aria-level={\"123\"} />' },\n    { code: '<div aria-level={`123`} />' },\n    { code: '<div aria-level=\"123\" />' },\n    { code: '<div aria-level={foo} />' },\n    { code: '<div aria-level={foo.bar} />' },\n    { code: '<div aria-level={null} />' },\n    { code: '<div aria-level={undefined} />' },\n\n    // NUMBER\n    { code: '<div aria-valuemax={123} />' },\n    { code: '<div aria-valuemax={-123} />' },\n    { code: '<div aria-valuemax={+123} />' },\n    { code: '<div aria-valuemax={~123} />' },\n    { code: '<div aria-valuemax={\"123\"} />' },\n    { code: '<div aria-valuemax={`123`} />' },\n    { code: '<div aria-valuemax=\"123\" />' },\n    { code: '<div aria-valuemax={foo} />' },\n    { code: '<div aria-valuemax={foo.bar} />' },\n    { code: '<div aria-valuemax={null} />' },\n    { code: '<div aria-valuemax={undefined} />' },\n\n    // TOKEN\n    { code: '<div aria-sort=\"ascending\" />' },\n    { code: '<div aria-sort=\"ASCENDING\" />' },\n    { code: '<div aria-sort={\"ascending\"} />' },\n    { code: '<div aria-sort={`ascending`} />' },\n    { code: '<div aria-sort=\"descending\" />' },\n    { code: '<div aria-sort={\"descending\"} />' },\n    { code: '<div aria-sort={`descending`} />' },\n    { code: '<div aria-sort=\"none\" />' },\n    { code: '<div aria-sort={\"none\"} />' },\n    { code: '<div aria-sort={`none`} />' },\n    { code: '<div aria-sort=\"other\" />' },\n    { code: '<div aria-sort={\"other\"} />' },\n    { code: '<div aria-sort={`other`} />' },\n    { code: '<div aria-sort={foo} />' },\n    { code: '<div aria-sort={foo.bar} />' },\n    { code: '<div aria-invalid={true} />' },\n    { code: '<div aria-invalid=\"true\" />' },\n    { code: '<div aria-invalid={false} />' },\n    { code: '<div aria-invalid=\"false\" />' },\n    { code: '<div aria-invalid=\"grammar\" />' },\n    { code: '<div aria-invalid=\"spelling\" />' },\n    { code: '<div aria-invalid={null} />' },\n    { code: '<div aria-invalid={undefined} />' },\n\n    // TOKENLIST\n    { code: '<div aria-relevant=\"additions\" />' },\n    { code: '<div aria-relevant={\"additions\"} />' },\n    { code: '<div aria-relevant={`additions`} />' },\n    { code: '<div aria-relevant=\"additions removals\" />' },\n    { code: '<div aria-relevant=\"additions additions\" />' },\n    { code: '<div aria-relevant={\"additions removals\"} />' },\n    { code: '<div aria-relevant={`additions removals`} />' },\n    { code: '<div aria-relevant=\"additions removals text\" />' },\n    { code: '<div aria-relevant={\"additions removals text\"} />' },\n    { code: '<div aria-relevant={`additions removals text`} />' },\n    { code: '<div aria-relevant=\"additions removals text all\" />' },\n    { code: '<div aria-relevant={\"additions removals text all\"} />' },\n    { code: '<div aria-relevant={`removals additions text all`} />' },\n    { code: '<div aria-relevant={foo} />' },\n    { code: '<div aria-relevant={foo.bar} />' },\n    { code: '<div aria-relevant={null} />' },\n    { code: '<div aria-relevant={undefined} />' },\n\n    // ID\n    { code: '<div aria-activedescendant=\"ascending\" />' },\n    { code: '<div aria-activedescendant=\"ASCENDING\" />' },\n    { code: '<div aria-activedescendant={\"ascending\"} />' },\n    { code: '<div aria-activedescendant={`ascending`} />' },\n    { code: '<div aria-activedescendant=\"descending\" />' },\n    { code: '<div aria-activedescendant={\"descending\"} />' },\n    { code: '<div aria-activedescendant={`descending`} />' },\n    { code: '<div aria-activedescendant=\"none\" />' },\n    { code: '<div aria-activedescendant={\"none\"} />' },\n    { code: '<div aria-activedescendant={`none`} />' },\n    { code: '<div aria-activedescendant=\"other\" />' },\n    { code: '<div aria-activedescendant={\"other\"} />' },\n    { code: '<div aria-activedescendant={`other`} />' },\n    { code: '<div aria-activedescendant={foo} />' },\n    { code: '<div aria-activedescendant={foo.bar} />' },\n    { code: '<div aria-activedescendant={null} />' },\n    { code: '<div aria-activedescendant={undefined} />' },\n\n    // IDLIST\n    { code: '<div aria-labelledby=\"additions\" />' },\n    { code: '<div aria-labelledby={\"additions\"} />' },\n    { code: '<div aria-labelledby={`additions`} />' },\n    { code: '<div aria-labelledby=\"additions removals\" />' },\n    { code: '<div aria-labelledby=\"additions additions\" />' },\n    { code: '<div aria-labelledby={\"additions removals\"} />' },\n    { code: '<div aria-labelledby={`additions removals`} />' },\n    { code: '<div aria-labelledby=\"additions removals text\" />' },\n    { code: '<div aria-labelledby={\"additions removals text\"} />' },\n    { code: '<div aria-labelledby={`additions removals text`} />' },\n    { code: '<div aria-labelledby=\"additions removals text all\" />' },\n    { code: '<div aria-labelledby={\"additions removals text all\"} />' },\n    { code: '<div aria-labelledby={`removals additions text all`} />' },\n    { code: '<div aria-labelledby={foo} />' },\n    { code: '<div aria-labelledby={foo.bar} />' },\n    { code: '<div aria-labelledby={null} />' },\n    { code: '<div aria-labelledby={undefined} />' },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    // BOOLEAN\n    { code: '<div aria-hidden=\"yes\" />', errors: [errorMessage('aria-hidden')] },\n    { code: '<div aria-hidden=\"no\" />', errors: [errorMessage('aria-hidden')] },\n    { code: '<div aria-hidden={1234} />', errors: [errorMessage('aria-hidden')] },\n    {\n      code: '<div aria-hidden={`${abc}`} />',\n      errors: [errorMessage('aria-hidden')],\n    },\n\n    // STRING\n    { code: '<div aria-label />', errors: [errorMessage('aria-label')] },\n    { code: '<div aria-label={true} />', errors: [errorMessage('aria-label')] },\n    { code: '<div aria-label={false} />', errors: [errorMessage('aria-label')] },\n    { code: '<div aria-label={1234} />', errors: [errorMessage('aria-label')] },\n    { code: '<div aria-label={!true} />', errors: [errorMessage('aria-label')] },\n\n    // TRISTATE\n    { code: '<div aria-checked=\"yes\" />', errors: [errorMessage('aria-checked')] },\n    { code: '<div aria-checked=\"no\" />', errors: [errorMessage('aria-checked')] },\n    { code: '<div aria-checked={1234} />', errors: [errorMessage('aria-checked')] },\n    {\n      code: '<div aria-checked={`${abc}`} />',\n      errors: [errorMessage('aria-checked')],\n    },\n\n    // INTEGER\n    { code: '<div aria-level=\"yes\" />', errors: [errorMessage('aria-level')] },\n    { code: '<div aria-level=\"no\" />', errors: [errorMessage('aria-level')] },\n    { code: '<div aria-level={`abc`} />', errors: [errorMessage('aria-level')] },\n    { code: '<div aria-level={true} />', errors: [errorMessage('aria-level')] },\n    { code: '<div aria-level />', errors: [errorMessage('aria-level')] },\n    { code: '<div aria-level={\"false\"} />', errors: [errorMessage('aria-level')] },\n    { code: '<div aria-level={!\"false\"} />', errors: [errorMessage('aria-level')] },\n\n    // NUMBER\n    { code: '<div aria-valuemax=\"yes\" />', errors: [errorMessage('aria-valuemax')] },\n    { code: '<div aria-valuemax=\"no\" />', errors: [errorMessage('aria-valuemax')] },\n    {\n      code: '<div aria-valuemax={`abc`} />',\n      errors: [errorMessage('aria-valuemax')],\n    },\n    {\n      code: '<div aria-valuemax={true} />',\n      errors: [errorMessage('aria-valuemax')],\n    },\n    { code: '<div aria-valuemax />', errors: [errorMessage('aria-valuemax')] },\n    {\n      code: '<div aria-valuemax={\"false\"} />',\n      errors: [errorMessage('aria-valuemax')],\n    },\n    {\n      code: '<div aria-valuemax={!\"false\"} />',\n      errors: [errorMessage('aria-valuemax')],\n    },\n\n    // TOKEN\n    { code: '<div aria-sort=\"\" />', errors: [errorMessage('aria-sort')] },\n    { code: '<div aria-sort=\"descnding\" />', errors: [errorMessage('aria-sort')] },\n    { code: '<div aria-sort />', errors: [errorMessage('aria-sort')] },\n    { code: '<div aria-sort={true} />', errors: [errorMessage('aria-sort')] },\n    { code: '<div aria-sort={\"false\"} />', errors: [errorMessage('aria-sort')] },\n    {\n      code: '<div aria-sort=\"ascending descending\" />',\n      errors: [errorMessage('aria-sort')],\n    },\n\n    // TOKENLIST\n    { code: '<div aria-relevant=\"\" />', errors: [errorMessage('aria-relevant')] },\n    {\n      code: '<div aria-relevant=\"foobar\" />',\n      errors: [errorMessage('aria-relevant')],\n    },\n    { code: '<div aria-relevant />', errors: [errorMessage('aria-relevant')] },\n    {\n      code: '<div aria-relevant={true} />',\n      errors: [errorMessage('aria-relevant')],\n    },\n    {\n      code: '<div aria-relevant={\"false\"} />',\n      errors: [errorMessage('aria-relevant')],\n    },\n    {\n      code: '<div aria-relevant=\"additions removalss\" />',\n      errors: [errorMessage('aria-relevant')],\n    },\n    {\n      code: '<div aria-relevant=\"additions removalss \" />',\n      errors: [errorMessage('aria-relevant')],\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}