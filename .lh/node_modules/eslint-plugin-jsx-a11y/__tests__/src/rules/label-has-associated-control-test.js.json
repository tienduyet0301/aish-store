{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/label-has-associated-control-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce label tags have an associated control.\n * @author Jesse Beach\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/label-has-associated-control';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst ruleName = 'label-has-associated-control';\n\nconst expectedError = {\n  message: 'A form label must be associated with a control.',\n  type: 'JSXOpeningElement',\n};\n\nconst expectedErrorNoLabel = {\n  message: 'A form label must have accessible text.',\n  type: 'JSXOpeningElement',\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      CustomInput: 'input',\n      CustomLabel: 'label',\n    },\n  },\n};\n\nconst attributesSettings = {\n  'jsx-a11y': {\n    attributes: {\n      for: ['htmlFor', 'for'],\n    },\n  },\n};\n\nconst htmlForValid = [\n  { code: '<label htmlFor=\"js_id\"><span><span><span>A label</span></span></span></label>', options: [{ depth: 4 }] },\n  { code: '<label htmlFor=\"js_id\" aria-label=\"A label\" />' },\n  { code: '<label htmlFor=\"js_id\" aria-labelledby=\"A label\" />' },\n  { code: '<div><label htmlFor=\"js_id\">A label</label><input id=\"js_id\" /></div>' },\n  { code: '<label for=\"js_id\"><span><span><span>A label</span></span></span></label>', options: [{ depth: 4 }], settings: attributesSettings },\n  { code: '<label for=\"js_id\" aria-label=\"A label\" />', settings: attributesSettings },\n  { code: '<label for=\"js_id\" aria-labelledby=\"A label\" />', settings: attributesSettings },\n  { code: '<div><label for=\"js_id\">A label</label><input id=\"js_id\" /></div>', settings: attributesSettings },\n  // Custom label component.\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\" />', options: [{ labelComponents: ['CustomLabel'] }] },\n  { code: '<CustomLabel htmlFor=\"js_id\" label=\"A label\" />', options: [{ labelAttributes: ['label'], labelComponents: ['CustomLabel'] }] },\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\" />', settings: componentsSettings },\n  // Custom label attributes.\n  { code: '<label htmlFor=\"js_id\" label=\"A label\" />', options: [{ labelAttributes: ['label'] }] },\n  // Glob support for controlComponents option.\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\" />', options: [{ controlComponents: ['Custom*'] }] },\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\" />', options: [{ controlComponents: ['*Label'] }] },\n  // Rule does not error if presence of accessible label cannot be determined\n  { code: '<div><label htmlFor=\"js_id\"><CustomText /></label><input id=\"js_id\" /></div>' },\n];\nconst nestingValid = [\n  { code: '<label>A label<input /></label>' },\n  { code: '<label>A label<textarea /></label>' },\n  { code: '<label><img alt=\"A label\" /><input /></label>' },\n  { code: '<label><img aria-label=\"A label\" /><input /></label>' },\n  { code: '<label><span>A label<input /></span></label>' },\n  { code: '<label><span><span>A label<input /></span></span></label>', options: [{ depth: 3 }] },\n  { code: '<label><span><span><span>A label<input /></span></span></span></label>', options: [{ depth: 4 }] },\n  { code: '<label><span><span><span><span>A label</span><input /></span></span></span></label>', options: [{ depth: 5 }] },\n  { code: '<label><span><span><span><span aria-label=\"A label\" /><input /></span></span></span></label>', options: [{ depth: 5 }] },\n  { code: '<label><span><span><span><input aria-label=\"A label\" /></span></span></span></label>', options: [{ depth: 5 }] },\n  // Other controls\n  { code: '<label>foo<meter /></label>' },\n  { code: '<label>foo<output /></label>' },\n  { code: '<label>foo<progress /></label>' },\n  { code: '<label>foo<textarea /></label>' },\n  // Custom controlComponents.\n  { code: '<label>A label<CustomInput /></label>', options: [{ controlComponents: ['CustomInput'] }] },\n  { code: '<label><span>A label<CustomInput /></span></label>', options: [{ controlComponents: ['CustomInput'] }] },\n  { code: '<label><span>A label<CustomInput /></span></label>', settings: componentsSettings },\n  { code: '<CustomLabel><span>A label<CustomInput /></span></CustomLabel>', options: [{ controlComponents: ['CustomInput'], labelComponents: ['CustomLabel'] }] },\n  { code: '<CustomLabel><span label=\"A label\"><CustomInput /></span></CustomLabel>', options: [{ controlComponents: ['CustomInput'], labelComponents: ['CustomLabel'], labelAttributes: ['label'] }] },\n  // Glob support for controlComponents option.\n  { code: '<label><span>A label<CustomInput /></span></label>', options: [{ controlComponents: ['Custom*'] }] },\n  { code: '<label><span>A label<CustomInput /></span></label>', options: [{ controlComponents: ['*Input'] }] },\n  // Rule does not error if presence of accessible label cannot be determined\n  { code: '<label><CustomText /><input /></label>' },\n];\n\nconst bothValid = [\n  { code: '<label htmlFor=\"js_id\"><span><span><span>A label<input /></span></span></span></label>', options: [{ depth: 4 }] },\n  { code: '<label htmlFor=\"js_id\" aria-label=\"A label\"><input /></label>' },\n  { code: '<label htmlFor=\"js_id\" aria-labelledby=\"A label\"><input /></label>' },\n  { code: '<label htmlFor=\"js_id\" aria-labelledby=\"A label\"><textarea /></label>' },\n  // Custom label component.\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\"><input /></CustomLabel>', options: [{ labelComponents: ['CustomLabel'] }] },\n  { code: '<CustomLabel htmlFor=\"js_id\" label=\"A label\"><input /></CustomLabel>', options: [{ labelAttributes: ['label'], labelComponents: ['CustomLabel'] }] },\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\"><input /></CustomLabel>', settings: componentsSettings },\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\"><CustomInput /></CustomLabel>', settings: componentsSettings },\n  // Custom label attributes.\n  { code: '<label htmlFor=\"js_id\" label=\"A label\"><input /></label>', options: [{ labelAttributes: ['label'] }] },\n  { code: '<label htmlFor=\"selectInput\">Some text<select id=\"selectInput\" /></label>' },\n];\n\nconst alwaysValid = [\n  { code: '<div />' },\n  { code: '<CustomElement />' },\n  { code: '<input type=\"hidden\" />' },\n];\n\nconst htmlForInvalid = [\n  { code: '<label htmlFor=\"js_id\"><span><span><span>A label</span></span></span></label>', options: [{ depth: 4 }], errors: [expectedError] },\n  { code: '<label htmlFor=\"js_id\" aria-label=\"A label\" />', errors: [expectedError] },\n  { code: '<label htmlFor=\"js_id\" aria-labelledby=\"A label\" />', errors: [expectedError] },\n  // Custom label component.\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\" />', options: [{ labelComponents: ['CustomLabel'] }], errors: [expectedError] },\n  { code: '<CustomLabel htmlFor=\"js_id\" label=\"A label\" />', options: [{ labelAttributes: ['label'], labelComponents: ['CustomLabel'] }], errors: [expectedError] },\n  { code: '<CustomLabel htmlFor=\"js_id\" aria-label=\"A label\" />', settings: componentsSettings, errors: [expectedError] },\n  // Custom label attributes.\n  { code: '<label htmlFor=\"js_id\" label=\"A label\" />', options: [{ labelAttributes: ['label'] }], errors: [expectedError] },\n];\nconst nestingInvalid = [\n  { code: '<label>A label<input /></label>', errors: [expectedError] },\n  { code: '<label>A label<textarea /></label>', errors: [expectedError] },\n  { code: '<label><img alt=\"A label\" /><input /></label>', errors: [expectedError] },\n  { code: '<label><img aria-label=\"A label\" /><input /></label>', errors: [expectedError] },\n  { code: '<label><span>A label<input /></span></label>', errors: [expectedError] },\n  { code: '<label><span><span>A label<input /></span></span></label>', options: [{ depth: 3 }], errors: [expectedError] },\n  { code: '<label><span><span><span>A label<input /></span></span></span></label>', options: [{ depth: 4 }], errors: [expectedError] },\n  { code: '<label><span><span><span><span>A label</span><input /></span></span></span></label>', options: [{ depth: 5 }], errors: [expectedError] },\n  { code: '<label><span><span><span><span aria-label=\"A label\" /><input /></span></span></span></label>', options: [{ depth: 5 }], errors: [expectedError] },\n  { code: '<label><span><span><span><input aria-label=\"A label\" /></span></span></span></label>', options: [{ depth: 5 }], errors: [expectedError] },\n  // Custom controlComponents.\n  { code: '<label>A label<OtherCustomInput /></label>', options: [{ controlComponents: ['CustomInput'] }], errors: [expectedError] },\n  { code: '<label><span>A label<CustomInput /></span></label>', options: [{ controlComponents: ['CustomInput'] }], errors: [expectedError] },\n  { code: '<CustomLabel><span>A label<CustomInput /></span></CustomLabel>', options: [{ controlComponents: ['CustomInput'], labelComponents: ['CustomLabel'] }], errors: [expectedError] },\n  { code: '<CustomLabel><span label=\"A label\"><CustomInput /></span></CustomLabel>', options: [{ controlComponents: ['CustomInput'], labelComponents: ['CustomLabel'], labelAttributes: ['label'] }], errors: [expectedError] },\n  { code: '<label><span>A label<CustomInput /></span></label>', settings: componentsSettings, errors: [expectedError] },\n  { code: '<CustomLabel><span>A label<CustomInput /></span></CustomLabel>', settings: componentsSettings, errors: [expectedError] },\n];\n\nconst neverValid = [\n  { code: '<label htmlFor=\"js_id\" />', errors: [expectedErrorNoLabel] },\n  { code: '<label htmlFor=\"js_id\"><input /></label>', errors: [expectedErrorNoLabel] },\n  { code: '<label htmlFor=\"js_id\"><textarea /></label>', errors: [expectedErrorNoLabel] },\n  { code: '<label></label>', errors: [expectedErrorNoLabel] },\n  { code: '<label>A label</label>', errors: [expectedError] },\n  { code: '<div><label /><input /></div>', errors: [expectedErrorNoLabel] },\n  { code: '<div><label>A label</label><input /></div>', errors: [expectedError] },\n  // Custom label component.\n  { code: '<CustomLabel aria-label=\"A label\" />', options: [{ labelComponents: ['CustomLabel'] }], errors: [expectedError] },\n  { code: '<CustomLabel label=\"A label\" />', options: [{ labelAttributes: ['label'], labelComponents: ['CustomLabel'] }], errors: [expectedError] },\n  { code: '<CustomLabel aria-label=\"A label\" />', settings: componentsSettings, errors: [expectedError] },\n  // Custom label attributes.\n  { code: '<label label=\"A label\" />', options: [{ labelAttributes: ['label'] }], errors: [expectedError] },\n  // Custom controlComponents.\n  { code: '<label><span><CustomInput /></span></label>', options: [{ controlComponents: ['CustomInput'] }], errors: [expectedErrorNoLabel] },\n  { code: '<CustomLabel><span><CustomInput /></span></CustomLabel>', options: [{ controlComponents: ['CustomInput'], labelComponents: ['CustomLabel'] }], errors: [expectedErrorNoLabel] },\n  { code: '<CustomLabel><span><CustomInput /></span></CustomLabel>', options: [{ controlComponents: ['CustomInput'], labelComponents: ['CustomLabel'], labelAttributes: ['label'] }], errors: [expectedErrorNoLabel] },\n  { code: '<label><span><CustomInput /></span></label>', settings: componentsSettings, errors: [expectedErrorNoLabel] },\n  { code: '<CustomLabel><span><CustomInput /></span></CustomLabel>', settings: componentsSettings, errors: [expectedErrorNoLabel] },\n];\n// htmlFor valid\nruleTester.run(ruleName, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    ...htmlForValid,\n  ))\n    .map(ruleOptionsMapperFactory({\n      assert: 'htmlFor',\n    }))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n    ...nestingInvalid,\n  ))\n    .map(ruleOptionsMapperFactory({\n      assert: 'htmlFor',\n    }))\n    .map(parserOptionsMapper),\n});\n\n// nesting valid\nruleTester.run(ruleName, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    ...nestingValid,\n  ))\n    .map(ruleOptionsMapperFactory({\n      assert: 'nesting',\n    }))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n    ...htmlForInvalid,\n  ))\n    .map(ruleOptionsMapperFactory({\n      assert: 'nesting',\n    }))\n    .map(parserOptionsMapper),\n});\n\n// either valid\nruleTester.run(ruleName, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    ...htmlForValid,\n    ...nestingValid,\n  ))\n    .map(ruleOptionsMapperFactory({\n      assert: 'either',\n    }))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n  )).map(parserOptionsMapper),\n});\n\n// both valid\nruleTester.run(ruleName, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    ...bothValid,\n  ))\n    .map(ruleOptionsMapperFactory({\n      assert: 'both',\n    }))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}