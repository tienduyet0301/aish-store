{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/no-onchange-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce usage of onBlur over onChange on select menus for accessibility.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/no-onchange';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'onBlur must be used instead of onchange, unless absolutely necessary and it causes no negative consequences for keyboard only or screen reader users.',\n  type: 'JSXOpeningElement',\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      CustomOption: 'option',\n      Input: 'input',\n    },\n  },\n};\n\nruleTester.run('no-onchange', rule, {\n  valid: parsers.all([].concat(\n    { code: '<select onBlur={() => {}} />;' },\n    { code: '<select onBlur={handleOnBlur} />;' },\n    { code: '<option />;' },\n    { code: '<option onBlur={() => {}} onChange={() => {}} />;' },\n    { code: '<option {...props} />' },\n    { code: '<input onChange={() => {}} />;' },\n    { code: '<input onChange={handleOnChange} />;' },\n    { code: '<input />;' },\n    { code: '<input onChange={() => {}} onChange={() => {}} />;' },\n    { code: '<input {...props} />' },\n    { code: '<Input onChange={() => {}} />;', settings: componentsSettings },\n    { code: '<CustomOption onChange={() => {}} />' },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<select onChange={() => {}} />;', errors: [expectedError] },\n    { code: '<select onChange={handleOnChange} />;', errors: [expectedError] },\n    { code: '<option onChange={() => {}} />', errors: [expectedError] },\n    { code: '<option onChange={() => {}} {...props} />', errors: [expectedError] },\n    { code: '<CustomOption onChange={() => {}} />;', errors: [expectedError], settings: componentsSettings },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}