{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/anchor-has-content-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce anchor elements to contain accessible content.\n * @author Lisa Ring & Niklas Holmberg\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/anchor-has-content';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'Anchors must have content and the content must be accessible by a screen reader.',\n  type: 'JSXOpeningElement',\n};\n\nruleTester.run('anchor-has-content', rule, {\n  valid: parsers.all([].concat(\n    { code: '<div />;' },\n    { code: '<a>Foo</a>' },\n    { code: '<a><Bar /></a>' },\n    { code: '<a>{foo}</a>' },\n    { code: '<a>{foo.bar}</a>' },\n    { code: '<a dangerouslySetInnerHTML={{ __html: \"foo\" }} />' },\n    { code: '<a children={children} />' },\n    { code: '<Link />' },\n    {\n      code: '<Link>foo</Link>',\n      settings: { 'jsx-a11y': { components: { Link: 'a' } } },\n    },\n    { code: '<a title={title} />' },\n    { code: '<a aria-label={ariaLabel} />' },\n    { code: '<a title={title} aria-label={ariaLabel} />' },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<a />', errors: [expectedError] },\n    { code: '<a><Bar aria-hidden /></a>', errors: [expectedError] },\n    { code: '<a>{undefined}</a>', errors: [expectedError] },\n    {\n      code: '<Link />',\n      errors: [expectedError],\n      settings: { 'jsx-a11y': { components: { Link: 'a' } } },\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}