{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/autocomplete-valid-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Ensure autocomplete attribute is correct.\n * @author Wilco Fiers\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport { axeFailMessage } from '../../__util__/axeMapping';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/autocomplete-valid';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst invalidAutocomplete = [{\n  message: axeFailMessage('autocomplete-valid'),\n  type: 'JSXOpeningElement',\n}];\n\nconst inappropriateAutocomplete = [{\n  message: axeFailMessage('autocomplete-appropriate'),\n  type: 'JSXOpeningElement',\n}];\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Input: 'input',\n    },\n  },\n};\n\nruleTester.run('autocomplete-valid', rule, {\n  valid: parsers.all([].concat(\n    // INAPPLICABLE\n    { code: '<input type=\"text\" />;' },\n    // // PASSED AUTOCOMPLETE\n    { code: '<input type=\"text\" autocomplete=\"name\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"off\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"on\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"billing family-name\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"section-blue shipping street-address\" />;' },\n    { code: '<input type=\"text\" autocomplete=\"section-somewhere shipping work email\" />;' },\n    { code: '<input type=\"text\" autocomplete />;' },\n    { code: '<input type=\"text\" autocomplete={autocompl} />;' },\n    { code: '<input type=\"text\" autocomplete={autocompl || \"name\"} />;' },\n    { code: '<input type=\"text\" autocomplete={autocompl || \"foo\"} />;' },\n    { code: '<Foo autocomplete=\"bar\"></Foo>;' },\n    { code: '<input type={isEmail ? \"email\" : \"text\"} autocomplete=\"none\" />;' },\n    { code: '<Input type=\"text\" autocomplete=\"name\" />', settings: componentsSettings },\n    { code: '<Input type=\"text\" autocomplete=\"baz\" />' },\n\n    // PASSED \"autocomplete-appropriate\"\n    // see also: https://github.com/dequelabs/axe-core/issues/2912\n    { code: '<input type=\"date\" autocomplete=\"email\" />;', errors: inappropriateAutocomplete },\n    { code: '<input type=\"number\" autocomplete=\"url\" />;', errors: inappropriateAutocomplete },\n    { code: '<input type=\"month\" autocomplete=\"tel\" />;', errors: inappropriateAutocomplete },\n    { code: '<Foo type=\"month\" autocomplete=\"tel\"></Foo>;', errors: inappropriateAutocomplete, options: [{ inputComponents: ['Foo'] }] },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    // FAILED \"autocomplete-valid\"\n    { code: '<input type=\"text\" autocomplete=\"foo\" />;', errors: invalidAutocomplete },\n    { code: '<input type=\"text\" autocomplete=\"name invalid\" />;', errors: invalidAutocomplete },\n    { code: '<input type=\"text\" autocomplete=\"invalid name\" />;', errors: invalidAutocomplete },\n    { code: '<input type=\"text\" autocomplete=\"home url\" />;', errors: invalidAutocomplete },\n    { code: '<Bar autocomplete=\"baz\"></Bar>;', errors: invalidAutocomplete, options: [{ inputComponents: ['Bar'] }] },\n    { code: '<Input type=\"text\" autocomplete=\"baz\" />', errors: invalidAutocomplete, settings: componentsSettings },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}