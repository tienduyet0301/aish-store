{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/label-has-for-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce label tags have htmlFor attribute.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport assign from 'object.assign';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/label-has-for';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedNestingError = {\n  message: 'Form label must have the following type of associated control: nesting',\n  type: 'JSXOpeningElement',\n};\n\nconst expectedSomeError = {\n  message: 'Form label must have ANY of the following types of associated control: nesting, id',\n  type: 'JSXOpeningElement',\n};\n\nconst expectedEveryError = {\n  message: 'Form label must have ALL of the following types of associated control: nesting, id',\n  type: 'JSXOpeningElement',\n};\n\nconst optionsComponents = [{\n  components: ['Label', 'Descriptor'],\n}];\nconst optionsRequiredNesting = [{\n  required: 'nesting',\n}];\nconst optionsRequiredSome = [{\n  required: { some: ['nesting', 'id'] },\n}];\nconst optionsRequiredEvery = [{\n  required: { every: ['nesting', 'id'] },\n}];\nconst optionsChildrenAllowed = [{\n  allowChildren: true,\n}];\n\nconst attributesSettings = {\n  'jsx-a11y': {\n    attributes: {\n      for: ['htmlFor', 'for'],\n    },\n  },\n};\n\nruleTester.run('label-has-for', rule, {\n  valid: parsers.all([].concat(\n    // DEFAULT ELEMENT 'label' TESTS\n    { code: '<div />' },\n    { code: '<label htmlFor=\"foo\"><input /></label>' },\n    { code: '<label htmlFor=\"foo\"><textarea /></label>' },\n    { code: '<label for=\"foo\"><input /></label>', settings: attributesSettings },\n    { code: '<label for=\"foo\"><textarea /></label>', settings: attributesSettings },\n    { code: '<Label />' }, // lower-case convention refers to real HTML elements.\n    { code: '<Label htmlFor=\"foo\" />' },\n    { code: '<Label for=\"foo\" />', settings: attributesSettings },\n    { code: '<Descriptor />' },\n    { code: '<Descriptor htmlFor=\"foo\">Test!</Descriptor>' },\n    { code: '<Descriptor for=\"foo\">Test!</Descriptor>', settings: attributesSettings },\n    { code: '<UX.Layout>test</UX.Layout>' },\n\n    // CUSTOM ELEMENT ARRAY OPTION TESTS\n    { code: '<Label htmlFor=\"foo\" />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Label htmlFor={\"foo\"} />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Label htmlFor={foo} />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Label htmlFor={`${id}`} />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<div />', options: optionsComponents },\n    { code: '<Label htmlFor=\"something\"><input /></Label>', options: optionsComponents },\n    { code: '<Label htmlFor=\"foo\">Test!</Label>', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Descriptor htmlFor=\"foo\" />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Descriptor htmlFor={\"foo\"} />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Descriptor htmlFor={foo} />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Descriptor htmlFor={`${id}`} />', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<Descriptor htmlFor=\"foo\">Test!</Descriptor>', options: [assign({}, optionsComponents[0], optionsRequiredSome[0])] },\n    { code: '<label htmlFor=\"foo\" />', options: optionsRequiredSome },\n    { code: '<label htmlFor={\"foo\"} />', options: optionsRequiredSome },\n    { code: '<label htmlFor={foo} />', options: optionsRequiredSome },\n    { code: '<label htmlFor={`${id}`} />', options: optionsRequiredSome },\n    { code: '<label htmlFor=\"foo\">Test!</label>', options: optionsRequiredSome },\n    { code: '<label><input /></label>', options: optionsRequiredSome },\n    { code: '<label><input /></label>', options: optionsRequiredNesting },\n    { code: '<label htmlFor=\"input\"><input /></label>', options: optionsRequiredEvery },\n    { code: '<label><input /></label>', options: optionsChildrenAllowed },\n    { code: '<Descriptor htmlFor=\"foo\">Test!</Descriptor>', options: [assign({}, optionsComponents, optionsChildrenAllowed)] },\n    { code: '<label>Test!</label>', options: optionsChildrenAllowed },\n    { code: '<label htmlFor=\"foo\">Test!</label>', options: optionsChildrenAllowed },\n    { code: '<label>{children}</label>', options: optionsChildrenAllowed },\n    { code: '<label htmlFor=\"children\">{children}</label>', options: optionsChildrenAllowed },\n    { code: '<label htmlFor={id}>{ labelText }<div><input id={id} type=\"checkbox\" name={id} value={value} /></div></label>', options: optionsRequiredEvery },\n    { code: '<label htmlFor={id}>{ labelText }<div><div><div><div><input id={id} type=\"checkbox\" name={id} value={value} /></div></div></div></div></label>', options: optionsRequiredEvery },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    // DEFAULT ELEMENT 'label' TESTS\n    { code: '<label id=\"foo\" />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor={undefined} />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor={`${undefined}`} />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label>First Name</label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label {...props}>Foo</label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label><input /></label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label><textarea /></label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label>{children}</label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor=\"foo\" />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor={\"foo\"} />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor={foo} />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor={`${id}`} />', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor=\"foo\">Test!</label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    { code: '<label htmlFor={id}>{ labelText }<div><div><div><div><div id={id} type=\"checkbox\" name={id} value={value} /></div></div></div></div></label>', errors: [expectedEveryError], options: optionsRequiredEvery },\n    //\n    // // CUSTOM ELEMENT ARRAY OPTION TESTS\n    {\n      code: '<Label></Label>',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    {\n      code: '<Label htmlFor=\"foo\" />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Label htmlFor={\"foo\"} />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Label htmlFor={foo} />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Label htmlFor={`${id}`} />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Label htmlFor=\"foo\">Test!</Label>',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Descriptor htmlFor=\"foo\" />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Descriptor htmlFor={\"foo\"} />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Descriptor htmlFor={foo} />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Descriptor htmlFor={`${id}`} />',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    {\n      code: '<Descriptor htmlFor=\"foo\">Test!</Descriptor>',\n      errors: [expectedEveryError],\n      options: [{ ...optionsComponents[0], ...optionsRequiredEvery[0] }],\n    },\n    { code: '<Label id=\"foo\" />', errors: [expectedEveryError], options: optionsComponents },\n    {\n      code: '<Label htmlFor={undefined} />',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    {\n      code: '<Label htmlFor={`${undefined}`} />',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    { code: '<Label>First Name</Label>', errors: [expectedEveryError], options: optionsComponents },\n    {\n      code: '<Label {...props}>Foo</Label>',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    { code: '<Descriptor id=\"foo\" />', errors: [expectedEveryError], options: optionsComponents },\n    {\n      code: '<Descriptor htmlFor={undefined} />',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    {\n      code: '<Descriptor htmlFor={`${undefined}`} />',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    {\n      code: '<Descriptor>First Name</Descriptor>',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    {\n      code: '<Descriptor {...props}>Foo</Descriptor>',\n      errors: [expectedEveryError],\n      options: optionsComponents,\n    },\n    { code: '<label>{children}</label>', errors: [expectedEveryError], options: optionsComponents },\n    { code: '<label htmlFor=\"foo\" />', errors: [expectedNestingError], options: optionsRequiredNesting },\n    { code: '<label>First Name</label>', errors: [expectedNestingError], options: optionsRequiredNesting },\n    { code: '<label>First Name</label>', errors: [expectedSomeError], options: optionsRequiredSome },\n    { code: '<label>{children}</label>', errors: [expectedSomeError], options: optionsRequiredSome },\n    { code: '<label>{children}</label>', errors: [expectedNestingError], options: optionsRequiredNesting },\n    {\n      code: '<form><input type=\"text\" id=\"howmuch\" value=\"1\" /><label htmlFor=\"howmuch\">How much ?</label></form>',\n      errors: [expectedEveryError],\n      options: optionsRequiredEvery,\n    },\n    {\n      code: '<form><input type=\"text\" id=\"howmuch\" value=\"1\" /><label htmlFor=\"howmuch\">How much ?<span /></label></form>',\n      errors: [expectedEveryError],\n      options: optionsRequiredEvery,\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}