{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/role-has-required-aria-props-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce that elements with ARIA roles must\n *  have all required attributes for that role.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { roles } from 'aria-query';\nimport { RuleTester } from 'eslint';\n\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/role-has-required-aria-props';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = (role) => {\n  const requiredProps = Object.keys(roles.get(role).requiredProps);\n\n  return {\n    message: `Elements with the ARIA role \"${role}\" must have the following attributes defined: ${requiredProps}`,\n    type: 'JSXAttribute',\n  };\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      MyComponent: 'div',\n    },\n  },\n};\n\n// Create basic test cases using all valid role types.\nconst basicValidityTests = roles.keys().map((role) => {\n  const {\n    requiredProps: requiredPropKeyValues,\n  } = roles.get(role);\n  const requiredProps = Object.keys(requiredPropKeyValues);\n  const propChain = requiredProps.join(' ');\n\n  return {\n    code: `<div role=\"${role.toLowerCase()}\" ${propChain} />`,\n  };\n});\n\nruleTester.run('role-has-required-aria-props', rule, {\n  valid: parsers.all([].concat(\n    { code: '<Bar baz />' },\n    { code: '<MyComponent role=\"combobox\" />' },\n    // Variables should pass, as we are only testing literals.\n    { code: '<div />' },\n    { code: '<div></div>' },\n    { code: '<div role={role} />' },\n    { code: '<div role={role || \"button\"} />' },\n    { code: '<div role={role || \"foobar\"} />' },\n    { code: '<div role=\"row\" />' },\n    { code: '<span role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\"></span>' },\n    { code: '<input role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\" {...props} type=\"checkbox\" />' },\n    { code: '<input type=\"checkbox\" role=\"switch\" />' },\n    { code: '<MyComponent role=\"checkbox\" aria-checked=\"false\" aria-labelledby=\"foo\" tabindex=\"0\" />', settings: componentsSettings },\n    { code: '<div role=\"heading\" aria-level={2} />' },\n    { code: '<div role=\"heading\" aria-level=\"3\" />' },\n  )).concat(basicValidityTests).map(parserOptionsMapper),\n\n  invalid: parsers.all([].concat(\n    // SLIDER\n    { code: '<div role=\"slider\" />', errors: [errorMessage('slider')] },\n    {\n      code: '<div role=\"slider\" aria-valuemax />',\n      errors: [errorMessage('slider')],\n    },\n    {\n      code: '<div role=\"slider\" aria-valuemax aria-valuemin />',\n      errors: [errorMessage('slider')],\n    },\n\n    // CHECKBOX\n    { code: '<div role=\"checkbox\" />', errors: [errorMessage('checkbox')] },\n    { code: '<div role=\"checkbox\" checked />', errors: [errorMessage('checkbox')] },\n    {\n      code: '<div role=\"checkbox\" aria-chcked />',\n      errors: [errorMessage('checkbox')],\n    },\n    {\n      code: '<span role=\"checkbox\" aria-labelledby=\"foo\" tabindex=\"0\"></span>',\n      errors: [errorMessage('checkbox')],\n    },\n\n    // COMBOBOX\n    { code: '<div role=\"combobox\" />', errors: [errorMessage('combobox')] },\n    { code: '<div role=\"combobox\" expanded />', errors: [errorMessage('combobox')] },\n    {\n      code: '<div role=\"combobox\" aria-expandd />',\n      errors: [errorMessage('combobox')],\n    },\n\n    // SCROLLBAR\n    { code: '<div role=\"scrollbar\" />', errors: [errorMessage('scrollbar')] },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemax />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemax aria-valuemin />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemax aria-valuenow />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"scrollbar\" aria-valuemin aria-valuenow />',\n      errors: [errorMessage('scrollbar')],\n    },\n    {\n      code: '<div role=\"heading\" />',\n      errors: [errorMessage('heading')],\n    },\n    {\n      code: '<div role=\"option\" />',\n      errors: [errorMessage('option')],\n    },\n    // Custom element\n    { code: '<MyComponent role=\"combobox\" />', settings: componentsSettings, errors: [errorMessage('combobox')] },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}