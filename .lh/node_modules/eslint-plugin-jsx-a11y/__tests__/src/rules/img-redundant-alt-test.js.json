{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/img-redundant-alt-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport semver from 'semver';\nimport { version as eslintVersion } from 'eslint/package.json';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/img-redundant-alt';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst array = [{\n  components: ['Image'],\n  words: ['Word1', 'Word2'],\n}];\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Image: 'img',\n    },\n  },\n};\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = {\n  message: 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.',\n  type: 'JSXOpeningElement',\n};\n\nruleTester.run('img-redundant-alt', rule, {\n  valid: parsers.all([].concat(\n    { code: '<img alt=\"foo\" />;' },\n    { code: '<img alt=\"picture of me taking a photo of an image\" aria-hidden />' },\n    { code: '<img aria-hidden alt=\"photo of image\" />' },\n    { code: '<img ALt=\"foo\" />;' },\n    { code: '<img {...this.props} alt=\"foo\" />' },\n    { code: '<img {...this.props} alt={\"foo\"} />' },\n    { code: '<img {...this.props} alt={alt} />' },\n    { code: '<a />' },\n    { code: '<img />' },\n    { code: '<IMG />' },\n    { code: '<img alt={undefined} />' },\n    { code: '<img alt={`this should pass for ${now}`} />' },\n    { code: '<img alt={`this should pass for ${photo}`} />' },\n    { code: '<img alt={`this should pass for ${image}`} />' },\n    { code: '<img alt={`this should pass for ${picture}`} />' },\n    { code: '<img alt={`${photo}`} />' },\n    { code: '<img alt={`${image}`} />' },\n    { code: '<img alt={`${picture}`} />' },\n    { code: '<img alt={\"undefined\"} />' },\n    { code: '<img alt={() => {}} />' },\n    { code: '<img alt={function(e){}} />' },\n    { code: '<img aria-hidden={false} alt=\"Doing cool things.\" />' },\n    { code: '<UX.Layout>test</UX.Layout>' },\n    { code: '<img alt />' },\n    { code: '<img alt={imageAlt} />' },\n    { code: '<img alt={imageAlt.name} />' },\n    semver.satisfies(eslintVersion, '>= 6') ? [\n      { code: '<img alt={imageAlt?.name} />', languageOptions: { ecmaVersion: 2020 } },\n      { code: '<img alt=\"Doing cool things\" aria-hidden={foo?.bar}/>', languageOptions: { ecmaVersion: 2020 } },\n    ] : [],\n    { code: '<img alt=\"Photography\" />;' },\n    { code: '<img alt=\"ImageMagick\" />;' },\n    { code: '<Image alt=\"Photo of a friend\" />' },\n    { code: '<Image alt=\"Foo\" />', settings: componentsSettings },\n    { code: '<img alt=\"画像\" />', options: [{ words: ['イメージ'] }] },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<img alt=\"Photo of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"Picture of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"Image of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"PhOtO of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt={\"photo\"} />;', errors: [expectedError] },\n    { code: '<img alt=\"piCTUre of friend.\" />;', errors: [expectedError] },\n    { code: '<img alt=\"imAGE of friend.\" />;', errors: [expectedError] },\n    {\n      code: '<img alt=\"photo of cool person\" aria-hidden={false} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt=\"picture of cool person\" aria-hidden={false} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt=\"image of cool person\" aria-hidden={false} />',\n      errors: [expectedError],\n    },\n    { code: '<img alt=\"photo\" {...this.props} />', errors: [expectedError] },\n    { code: '<img alt=\"image\" {...this.props} />', errors: [expectedError] },\n    { code: '<img alt=\"picture\" {...this.props} />', errors: [expectedError] },\n    {\n      code: '<img alt={`picture doing ${things}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`photo doing ${things}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`image doing ${things}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`picture doing ${picture}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`photo doing ${photo}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    {\n      code: '<img alt={`image doing ${image}`} {...this.props} />',\n      errors: [expectedError],\n    },\n    { code: '<Image alt=\"Photo of a friend\" />', errors: [expectedError], settings: componentsSettings },\n\n    // TESTS FOR ARRAY OPTION TESTS\n    { code: '<img alt=\"Word1\" />;', options: array, errors: [expectedError] },\n    { code: '<img alt=\"Word2\" />;', options: array, errors: [expectedError] },\n    { code: '<Image alt=\"Word1\" />;', options: array, errors: [expectedError] },\n    { code: '<Image alt=\"Word2\" />;', options: array, errors: [expectedError] },\n\n    { code: '<img alt=\"イメージ\" />', options: [{ words: ['イメージ'] }], errors: [expectedError] },\n    { code: '<img alt=\"イメージです\" />', options: [{ words: ['イメージ'] }], errors: [expectedError] },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}