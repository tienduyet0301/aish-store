{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/no-redundant-roles-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce explicit role property is not the\n * same as implicit default role property on element.\n * @author Ethan Cohen <@evcohen>\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/no-redundant-roles';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst expectedError = (element, implicitRole) => ({\n  message: `The element ${element} has an implicit role of ${implicitRole}. Defining this explicitly is redundant and should be avoided.`,\n  type: 'JSXOpeningElement',\n});\n\nconst ruleName = 'jsx-a11y/no-redundant-roles';\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Button: 'button',\n    },\n  },\n};\n\nconst alwaysValid = [\n  { code: '<div />;' },\n  { code: '<button role=\"main\" />' },\n  { code: '<MyComponent role=\"button\" />' },\n  { code: '<button role={`${foo}button`} />' },\n  { code: '<Button role={`${foo}button`} />', settings: componentsSettings },\n];\n\nconst neverValid = [\n  { code: '<button role=\"button\" />', errors: [expectedError('button', 'button')] },\n  { code: '<body role=\"DOCUMENT\" />', errors: [expectedError('body', 'document')] },\n  { code: '<Button role=\"button\" />', settings: componentsSettings, errors: [expectedError('button', 'button')] },\n];\n\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    { code: '<nav role=\"navigation\" />' },\n  ))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    neverValid,\n  ))\n    .map(parserOptionsMapper),\n});\n\nconst noNavExceptionsOptions = { nav: [] };\nconst listException = { ul: ['list'], ol: ['list'] };\n\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: parsers.all([].concat(\n    alwaysValid\n      .map(ruleOptionsMapperFactory(noNavExceptionsOptions)),\n  ))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n    { code: '<nav role=\"navigation\" />', errors: [expectedError('nav', 'navigation')] },\n  ))\n    .map(ruleOptionsMapperFactory(noNavExceptionsOptions))\n    .map(parserOptionsMapper),\n});\n\nruleTester.run(`${ruleName}:recommended (valid list role override)`, rule, {\n  valid: parsers.all([].concat(\n    { code: '<ul role=\"list\" />' },\n    { code: '<ol role=\"list\" />' },\n    { code: '<dl role=\"list\" />' },\n    { code: '<img src=\"example.svg\" role=\"img\" />' },\n    { code: '<svg role=\"img\" />' },\n  ))\n    .map(ruleOptionsMapperFactory(listException))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<ul role=\"list\" />', errors: [expectedError('ul', 'list')] },\n    { code: '<ol role=\"list\" />', errors: [expectedError('ol', 'list')] },\n    { code: '<img role=\"img\" />', errors: [expectedError('img', 'img')] },\n    { code: '<img src={someVariable} role=\"img\" />', errors: [expectedError('img', 'img')] },\n  ))\n    .map(parserOptionsMapper),\n});\n"
        }
    ]
}