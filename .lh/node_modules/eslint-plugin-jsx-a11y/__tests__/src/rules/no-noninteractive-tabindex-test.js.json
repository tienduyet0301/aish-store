{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/no-noninteractive-tabindex-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892264443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Disallow tabindex on static and noninteractive elements\n * @author jessebeach\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport { configs } from '../../../src/index';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/no-noninteractive-tabindex';\nimport ruleOptionsMapperFactory from '../../__util__/ruleOptionsMapperFactory';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst ruleName = 'no-noninteractive-tabindex';\n\nconst expectedError = {\n  message: '`tabIndex` should only be declared on interactive elements.',\n  type: 'JSXAttribute',\n};\n\nconst componentsSettings = {\n  'jsx-a11y': {\n    components: {\n      Article: 'article',\n      MyButton: 'button',\n    },\n  },\n};\n\nconst alwaysValid = [\n  { code: '<MyButton tabIndex={0} />' },\n  { code: '<button />' },\n  { code: '<button tabIndex=\"0\" />' },\n  { code: '<button tabIndex={0} />' },\n  { code: '<div />' },\n  { code: '<div tabIndex=\"-1\" />' },\n  { code: '<div role=\"button\" tabIndex=\"0\" />' },\n  { code: '<div role=\"article\" tabIndex=\"-1\" />' },\n  { code: '<article tabIndex=\"-1\" />' },\n  { code: '<Article tabIndex=\"-1\" />', settings: componentsSettings },\n  { code: '<MyButton tabIndex={0} />', settings: componentsSettings },\n];\n\nconst neverValid = [\n  { code: '<div tabIndex=\"0\" />', errors: [expectedError] },\n  { code: '<div role=\"article\" tabIndex=\"0\" />', errors: [expectedError] },\n  { code: '<article tabIndex=\"0\" />', errors: [expectedError] },\n  { code: '<article tabIndex={0} />', errors: [expectedError] },\n  { code: '<Article tabIndex={0} />', errors: [expectedError], settings: componentsSettings },\n];\n\nconst recommendedOptions = (\n  configs.recommended.rules[`jsx-a11y/${ruleName}`][1] || {}\n);\n\nruleTester.run(`${ruleName}:recommended`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n    { code: '<div role=\"tabpanel\" tabIndex=\"0\" />' },\n    // Expressions should pass in recommended mode\n    { code: '<div role={ROLE_BUTTON} onClick={() => {}} tabIndex=\"0\" />;' },\n    // Cases for allowExpressionValues set to true\n    {\n      code: '<div role={BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: true }],\n    },\n    // Specific case for ternary operator with literals on both side\n    {\n      code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: true }],\n    },\n    {\n      code: '<div role={isButton ? \"button\" : LINK} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: true }],\n      errors: [expectedError],\n    },\n    {\n      code: '<div role={isButton ? BUTTON : LINK} onClick={() => {}} tabIndex=\"0\"/>;',\n      options: [{ allowExpressionValues: true }],\n      errors: [expectedError],\n    },\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n  ))\n    .map(ruleOptionsMapperFactory(recommendedOptions))\n    .map(parserOptionsMapper),\n});\n\nruleTester.run(`${ruleName}:strict`, rule, {\n  valid: parsers.all([].concat(\n    ...alwaysValid,\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    ...neverValid,\n    { code: '<div role=\"tabpanel\" tabIndex=\"0\" />', errors: [expectedError] },\n    // Expressions should fail in strict mode\n    { code: '<div role={ROLE_BUTTON} onClick={() => {}} tabIndex=\"0\" />;', errors: [expectedError] },\n    // Cases for allowExpressionValues set to false\n    {\n      code: '<div role={BUTTON} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: false }],\n      errors: [expectedError],\n    },\n    // Specific case for ternary operator with literals on both side\n    {\n      code: '<div role={isButton ? \"button\" : \"link\"} onClick={() => {}} tabIndex=\"0\" />;',\n      options: [{ allowExpressionValues: false }],\n      errors: [expectedError],\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}