{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-props-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce all aria-* properties are valid.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { aria } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/aria-props';\nimport getSuggestion from '../../../src/util/getSuggestion';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\nconst ariaAttributes = aria.keys();\n\nconst errorMessage = (name) => {\n  const suggestions = getSuggestion(name, ariaAttributes);\n  const message = `${name}: This attribute is an invalid ARIA attribute.`;\n\n  if (suggestions.length > 0) {\n    return {\n      type: 'JSXAttribute',\n      message: `${message} Did you mean to use ${suggestions}?`,\n    };\n  }\n\n  return {\n    type: 'JSXAttribute',\n    message,\n  };\n};\n\n// Create basic test cases using all valid role types.\nconst basicValidityTests = ariaAttributes.map((prop) => ({\n  code: `<div ${prop.toLowerCase()}=\"foobar\" />`,\n}));\n\nruleTester.run('aria-props', rule, {\n  valid: parsers.all([].concat(\n    // Variables should pass, as we are only testing literals.\n    { code: '<div />' },\n    { code: '<div></div>' },\n    { code: '<div aria=\"wee\"></div>' }, // Needs aria-*\n    { code: '<div abcARIAdef=\"true\"></div>' },\n    { code: '<div fooaria-foobar=\"true\"></div>' },\n    { code: '<div fooaria-hidden=\"true\"></div>' },\n    { code: '<Bar baz />' },\n    { code: '<input type=\"text\" aria-errormessage=\"foobar\" />' },\n  )).concat(basicValidityTests).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<div aria-=\"foobar\" />', errors: [errorMessage('aria-')] },\n    {\n      code: '<div aria-labeledby=\"foobar\" />',\n      errors: [errorMessage('aria-labeledby')],\n    },\n    {\n      code: '<div aria-skldjfaria-klajsd=\"foobar\" />',\n      errors: [errorMessage('aria-skldjfaria-klajsd')],\n    },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}