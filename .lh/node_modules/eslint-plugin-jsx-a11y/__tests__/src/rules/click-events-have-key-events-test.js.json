{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/click-events-have-key-events-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce a clickable non-interactive element has at least 1 keyboard event listener.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/click-events-have-key-events';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = 'Visible, non-interactive elements with click handlers must have at least one keyboard listener.';\n\nconst expectedError = {\n  message: errorMessage,\n  type: 'JSXOpeningElement',\n};\n\nruleTester.run('click-events-have-key-events', rule, {\n  valid: parsers.all([].concat(\n    { code: '<div onClick={() => void 0} onKeyDown={foo}/>;' },\n    { code: '<div onClick={() => void 0} onKeyUp={foo} />;' },\n    { code: '<div onClick={() => void 0} onKeyPress={foo}/>;' },\n    { code: '<div onClick={() => void 0} onKeyDown={foo} onKeyUp={bar} />;' },\n    { code: '<div onClick={() => void 0} onKeyDown={foo} {...props} />;' },\n    { code: '<div className=\"foo\" />;' },\n    { code: '<div onClick={() => void 0} aria-hidden />;' },\n    { code: '<div onClick={() => void 0} aria-hidden={true} />;' },\n    { code: '<div onClick={() => void 0} aria-hidden={false} onKeyDown={foo} />;' },\n    {\n      code: '<div onClick={() => void 0} onKeyDown={foo} aria-hidden={undefined} />;',\n    },\n    { code: '<input type=\"text\" onClick={() => void 0} />' },\n    { code: '<input onClick={() => void 0} />' },\n    { code: '<button onClick={() => void 0} className=\"foo\" />' },\n    { code: '<option onClick={() => void 0} className=\"foo\" />' },\n    { code: '<select onClick={() => void 0} className=\"foo\" />' },\n    { code: '<textarea onClick={() => void 0} className=\"foo\" />' },\n    { code: '<a onClick={() => void 0} href=\"http://x.y.z\" />' },\n    { code: '<a onClick={() => void 0} href=\"http://x.y.z\" tabIndex=\"0\" />' },\n    { code: '<input onClick={() => void 0} type=\"hidden\" />;' },\n    { code: '<div onClick={() => void 0} role=\"presentation\" />;' },\n    { code: '<div onClick={() => void 0} role=\"none\" />;' },\n    { code: '<TestComponent onClick={doFoo} />' },\n    { code: '<Button onClick={doFoo} />' },\n    { code: '<Footer onClick={doFoo} />' },\n  )).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(\n    { code: '<div onClick={() => void 0} />;', errors: [expectedError] },\n    {\n      code: '<div onClick={() => void 0} role={undefined} />;',\n      errors: [expectedError],\n    },\n    { code: '<div onClick={() => void 0} {...props} />;', errors: [expectedError] },\n    { code: '<section onClick={() => void 0} />;', errors: [expectedError] },\n    { code: '<main onClick={() => void 0} />;', errors: [expectedError] },\n    { code: '<article onClick={() => void 0} />;', errors: [expectedError] },\n    { code: '<header onClick={() => void 0} />;', errors: [expectedError] },\n    { code: '<footer onClick={() => void 0} />;', errors: [expectedError] },\n    {\n      code: '<div onClick={() => void 0} aria-hidden={false} />;',\n      errors: [expectedError],\n    },\n    { code: '<a onClick={() => void 0} />', errors: [expectedError] },\n    { code: '<a tabIndex=\"0\" onClick={() => void 0} />', errors: [expectedError] },\n    { code: '<Footer onClick={doFoo} />', errors: [expectedError], settings: { 'jsx-a11y': { components: { Footer: 'footer' } } } },\n  )).map(parserOptionsMapper),\n});\n"
        }
    ]
}