{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/src/rules/aria-unsupported-elements-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce that elements that do not support ARIA roles,\n *  states and properties do not have those attributes.\n * @author Ethan Cohen\n */\n\n// -----------------------------------------------------------------------------\n// Requirements\n// -----------------------------------------------------------------------------\n\nimport { dom } from 'aria-query';\nimport { RuleTester } from 'eslint';\nimport parserOptionsMapper from '../../__util__/parserOptionsMapper';\nimport parsers from '../../__util__/helpers/parsers';\nimport rule from '../../../src/rules/aria-unsupported-elements';\n\n// -----------------------------------------------------------------------------\n// Tests\n// -----------------------------------------------------------------------------\n\nconst ruleTester = new RuleTester();\n\nconst errorMessage = (invalidProp) => ({\n  message: `This element does not support ARIA roles, states and properties. \\\nTry removing the prop '${invalidProp}'.`,\n  type: 'JSXOpeningElement',\n});\n\nconst domElements = dom.keys();\n// Generate valid test cases\nconst roleValidityTests = domElements.map((element) => {\n  const isReserved = dom.get(element).reserved || false;\n  const role = isReserved ? '' : 'role';\n\n  return {\n    code: `<${element} ${role} />`,\n  };\n});\n\nconst ariaValidityTests = domElements.map((element) => {\n  const isReserved = dom.get(element).reserved || false;\n  const aria = isReserved ? '' : 'aria-hidden';\n\n  return {\n    code: `<${element} ${aria} />`,\n  };\n}).concat({\n  code: '<fake aria-hidden />',\n  errors: [errorMessage('aria-hidden')],\n});\n\n// Generate invalid test cases.\nconst invalidRoleValidityTests = domElements\n  .filter((element) => dom.get(element).reserved)\n  .map((reservedElem) => ({\n    code: `<${reservedElem} role {...props} />`,\n    errors: [errorMessage('role')],\n  })).concat({\n    code: '<Meta aria-hidden />',\n    errors: [errorMessage('aria-hidden')],\n    settings: { 'jsx-a11y': { components: { Meta: 'meta' } } },\n  });\n\nconst invalidAriaValidityTests = domElements\n  .filter((element) => dom.get(element).reserved)\n  .map((reservedElem) => ({\n    code: `<${reservedElem} aria-hidden aria-role=\"none\" {...props} />`,\n    errors: [errorMessage('aria-hidden')],\n  }));\n\nruleTester.run('aria-unsupported-elements', rule, {\n  valid: parsers.all([].concat(roleValidityTests, ariaValidityTests)).map(parserOptionsMapper),\n  invalid: parsers.all([].concat(invalidRoleValidityTests, invalidAriaValidityTests))\n    .map(parserOptionsMapper),\n});\n"
        }
    ]
}