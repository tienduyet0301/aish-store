{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/__tests__/__util__/helpers/parsers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport semver from 'semver';\nimport entries from 'object.entries';\nimport { version } from 'eslint/package.json';\nimport flatMap from 'array.prototype.flatmap';\n\nlet tsParserVersion;\ntry {\n  // eslint-disable-next-line import/no-unresolved, global-require\n  tsParserVersion = require('@typescript-eslint/parser/package.json').version;\n} catch (e) { /**/ }\n\nconst disableNewTS = semver.satisfies(tsParserVersion, '>= 4.1') // this rule is not useful on v4.1+ of the TS parser\n  ? (x) => ({ ...x, features: [].concat(x.features, 'no-ts-new') })\n  : (x) => x;\n\nfunction minEcmaVersion(features, parserOptions) {\n  const minEcmaVersionForFeatures = {\n    'class fields': 2022,\n    'optional chaining': 2020,\n    'nullish coalescing': 2020,\n  };\n  const result = Math.max(\n    ...[].concat(\n      (parserOptions && parserOptions.ecmaVersion) || [],\n      flatMap(entries(minEcmaVersionForFeatures), (entry) => {\n        const f = entry[0];\n        const y = entry[1];\n        return features.has(f) ? y : [];\n      }),\n    ).map((y) => (y > 5 && y < 2015 ? y + 2009 : y)), // normalize editions to years\n  );\n  return Number.isFinite(result) ? result : undefined;\n}\n\nconst NODE_MODULES = '../../node_modules';\n\nconst parsers = {\n  BABEL_ESLINT: path.join(__dirname, NODE_MODULES, 'babel-eslint'),\n  '@BABEL_ESLINT': path.join(__dirname, NODE_MODULES, '@babel/eslint-parser'),\n  TYPESCRIPT_ESLINT: path.join(__dirname, NODE_MODULES, 'typescript-eslint-parser'),\n  '@TYPESCRIPT_ESLINT': path.join(__dirname, NODE_MODULES, '@typescript-eslint/parser'),\n  disableNewTS,\n  babelParserOptions: function parserOptions(test, features) {\n    return {\n      ...test.parserOptions,\n      requireConfigFile: false,\n      babelOptions: {\n        presets: [\n          '@babel/preset-react',\n        ],\n        plugins: [\n          '@babel/plugin-syntax-do-expressions',\n          '@babel/plugin-syntax-function-bind',\n          ['@babel/plugin-syntax-decorators', { legacy: true }],\n        ],\n        parserOpts: {\n          allowSuperOutsideMethod: false,\n          allowReturnOutsideFunction: false,\n        },\n      },\n      ecmaFeatures: {\n\n        ...test.parserOptions && test.parserOptions.ecmaFeatures,\n        jsx: true,\n        modules: true,\n        legacyDecorators: features.has('decorators'),\n      },\n    };\n  },\n  all: function all(tests) {\n    const t = flatMap(tests, (test) => {\n      /* eslint no-param-reassign: 0 */\n      if (typeof test === 'string') {\n        test = { code: test };\n      }\n      if ('parser' in test) {\n        delete test.features;\n        return test;\n      }\n      const features = new Set([].concat(test.features || []));\n      delete test.features;\n\n      const es = minEcmaVersion(features, test.parserOptions);\n\n      function addComment(testObject, parser) {\n        const extras = [].concat(\n          `features: [${Array.from(features).join(',')}]`,\n          `parser: ${parser}`,\n          testObject.parserOptions ? `parserOptions: ${JSON.stringify(testObject.parserOptions)}` : [],\n          testObject.options ? `options: ${JSON.stringify(testObject.options)}` : [],\n          testObject.settings ? `settings: ${JSON.stringify(testObject.settings)}` : [],\n        );\n\n        const extraComment = `\\n// ${extras.join(', ')}`;\n\n        // Augment expected fix code output with extraComment\n        const nextCode = { code: testObject.code + extraComment };\n        const nextOutput = testObject.output && { output: testObject.output + extraComment };\n\n        // Augment expected suggestion outputs with extraComment\n        // `errors` may be a number (expected number of errors) or an array of\n        // error objects.\n        const nextErrors = testObject.errors\n          && typeof testObject.errors !== 'number'\n          && {\n            errors: testObject.errors.map(\n              (errorObject) => {\n                const nextSuggestions = errorObject.suggestions && {\n                  suggestions: errorObject.suggestions.map((suggestion) => ({ ...suggestion, output: suggestion.output + extraComment })),\n                };\n\n                return { ...errorObject, ...nextSuggestions };\n              },\n            ),\n          };\n\n        return {\n\n          ...testObject,\n          ...nextCode,\n          ...nextOutput,\n          ...nextErrors,\n        };\n      }\n\n      const skipBase = (features.has('class fields') && semver.satisfies(version, '< 8'))\n        || (es >= 2020 && semver.satisfies(version, '< 6'))\n        || features.has('no-default')\n        || features.has('bind operator')\n        || features.has('do expressions')\n        || features.has('decorators')\n        || features.has('flow')\n        || features.has('ts')\n        || features.has('types')\n        || (features.has('fragment') && semver.satisfies(version, '< 5'));\n\n      const skipBabel = features.has('no-babel');\n      const skipOldBabel = skipBabel\n        || features.has('no-babel-old')\n        || features.has('optional chaining')\n        || semver.satisfies(version, '>= 8');\n      const skipNewBabel = skipBabel\n        || features.has('no-babel-new')\n        || !semver.satisfies(version, '^7.5.0') // require('@babel/eslint-parser/package.json').peerDependencies.eslint\n        || features.has('flow')\n        || features.has('types')\n        || features.has('ts');\n      const skipTS = semver.satisfies(version, '<= 5') // TODO: make these pass on eslint 5\n        || features.has('no-ts')\n        || features.has('flow')\n        || features.has('jsx namespace')\n        || features.has('bind operator')\n        || features.has('do expressions');\n      const tsOld = !skipTS && !features.has('no-ts-old');\n      const tsNew = !skipTS && !features.has('no-ts-new');\n\n      return [].concat(\n        skipBase ? [] : addComment(\n          {\n            ...test,\n            ...typeof es === 'number' && {\n              parserOptions: { ...test.parserOptions, ecmaVersion: es },\n            },\n          },\n          'default',\n        ),\n        skipOldBabel ? [] : addComment({\n          ...test,\n          parser: parsers.BABEL_ESLINT,\n          parserOptions: parsers.babelParserOptions(test, features),\n        }, 'babel-eslint'),\n        skipNewBabel ? [] : addComment({\n          ...test,\n          parser: parsers['@BABEL_ESLINT'],\n          parserOptions: parsers.babelParserOptions(test, features),\n        }, '@babel/eslint-parser'),\n        tsOld ? addComment({ ...test, parser: parsers.TYPESCRIPT_ESLINT }, 'typescript-eslint') : [],\n        tsNew ? addComment({ ...test, parser: parsers['@TYPESCRIPT_ESLINT'] }, '@typescript-eslint/parser') : [],\n      );\n    });\n    return t;\n  },\n};\n\nexport default parsers;\n"
        }
    ]
}