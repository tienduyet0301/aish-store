{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/docs/rules/label-has-for.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892258071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# jsx-a11y/label-has-for\n\n‚ùå This rule is deprecated. It was replaced by [`jsx-a11y/label-has-associated-control`](label-has-associated-control.md).\n\nüö´ This rule is _disabled_ in the following configs: ‚òëÔ∏è `recommended`, üîí `strict`.\n\n<!-- end auto-generated rule header -->\n\n_This rule was deprecated in v6.1.0. It will no longer be maintained._\n\nEnforce label tags have associated control.\n\nThere are two supported ways to associate a label with a control:\n\n- nesting: by wrapping a control in a label tag\n- id: by using the prop `htmlFor` (or any configured attribute) as in `htmlFor=[ID of control]`\n\nTo fully cover 100% of assistive devices, you're encouraged to validate for both nesting and id.\n\n## Rule options\n\nThis rule takes one optional object argument of type object:\n\n```json\n{\n    \"rules\": {\n        \"jsx-a11y/label-has-for\": [ 2, {\n            \"components\": [ \"Label\" ],\n            \"required\": {\n                \"every\": [ \"nesting\", \"id\" ]\n            },\n            \"allowChildren\": false\n        }]\n    }\n}\n```\n\nFor the `components` option, these strings determine which JSX elements (**always including** `<label>`) should be checked for having `htmlFor` prop. This is a good use case when you have a wrapper component that simply renders a `label` element (like in React):\n\n```js\n// Label.js\nconst Label = props => {\n  const {\n    htmlFor,\n    ...otherProps\n  } = props;\n\n  return (\n    <label htmlFor={htmlFor} {...otherProps} />\n  );\n}\n\n...\n\n// CreateAccount.js (for example)\n...\nreturn (\n  <form>\n    <input id=\"firstName\" type=\"text\" />\n    <Label htmlFor=\"firstName\">First Name</Label>\n  </form>\n);\n```\n\nThe `required` option (defaults to `\"required\": { \"every\": [\"nesting\", \"id\"] }`) determines which checks are activated. You're allowed to pass in one of the following types:\n\n- string: must be one of the acceptable strings (`\"nesting\"` or `\"id\"`)\n- object, must have one of the following properties:\n\n  - some: an array of acceptable strings, will pass if ANY of the requested checks passed\n  - every: an array of acceptable strings, will pass if ALL of the requested checks passed\n\nThe `allowChildren` option (defaults to `false`) determines whether `{children}` content is allowed to be passed into a `label` element. For example, the following pattern, by default, is not allowed:\n\n```js\n<label>{children}</label>\n```\n\nHowever, if `allowChildren` is set to `true`, no error will be raised. If you want to pass in `{children}` content without raising an error, because you cannot be sure what `{children}` will render, then set `allowChildren` to `true`.\n\nNote that passing props as spread attribute without `htmlFor` explicitly defined will cause this rule to fail. Explicitly pass down `htmlFor` prop for rule to pass. The prop must have an actual value to pass. Use `Label` component above as a reference. **It is a good thing to explicitly pass props that you expect to be passed for self-documentation.** For example:\n\n#### Bad\n\n```jsx\nfunction Foo(props) {\n  return <label {...props} />\n}\n```\n\n#### Good\n\n```jsx\nfunction Foo({ htmlFor, ...props}) {\n    return <label htmlFor={htmlFor} {...props} />\n}\n\n// OR\n\nfunction Foo(props) {\n    const {\n        htmlFor,\n        ...otherProps\n    } = props;\n\n   return <label htmlFor={htmlFor} {...otherProps} />\n}\n```\n\n### Succeed\n\n```jsx\n<label htmlFor=\"firstName\">\n  <input type=\"text\" id=\"firstName\" />\n  First Name\n</label>\n```\n\n### Fail\n\n```jsx\n<input type=\"text\" id=\"firstName\" />\n<label>First Name</label>\n```\n\n## Accessibility guidelines\n\n- [WCAG 1.3.1](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships)\n- [WCAG 3.3.2](https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions)\n- [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n"
        }
    ]
}