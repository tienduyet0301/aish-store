{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/docs/rules/no-noninteractive-element-to-interactive-role.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892258506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# jsx-a11y/no-noninteractive-element-to-interactive-role\n\nüíº This rule is enabled in the following configs: ‚òëÔ∏è `recommended`, üîí `strict`.\n\n<!-- end auto-generated rule header -->\n\nNon-interactive HTML elements indicate _content_ and _containers_ in the user interface. Non-interactive elements include `<main>`, `<area>`, `<h1>` (,`<h2>`, etc), `<img>`, `<li>`, `<ul>` and `<ol>`.\n\nInteractive HTML elements indicate _controls_ in the user interface. Interactive elements include `<a href>`, `<button>`, `<input>`, `<select>`, `<textarea>`.\n\n[WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) should not be used to convert a non-interactive element to an interactive element. Interactive ARIA roles include `button`, `link`, `checkbox`, `menuitem`, `menuitemcheckbox`, `menuitemradio`, `option`, `radio`, `searchbox`, `switch` and `textbox`.\n\n## How do I resolve this error?\n\n### Case: This element should be a control, like a button\n\nPut the control inside the non-interactive container element.\n\n```jsx\n<li>\n  <div\n    role=\"button\"\n    onClick={() => {}}\n    onKeyPress={() => {}}>\n    Save\n  </div>\n</li>\n```\n\nOr wrap the content inside your interactive element.\n\n```jsx\n<div\n  role=\"button\"\n  onClick={() => {}}\n  onKeyPress={() => {}}\n  tabIndex=\"0\">\n  <img src=\"some/file.png\" alt=\"Save\" />\n</div>\n```\n\n## Rule options\n\nThe recommended options for this rule allow several common interactive roles to be applied to a non-interactive element. The options are provided as an object keyed by HTML element name; the value is an array of interactive roles that are allowed on the specified element.\n\n```js\n{\n  'no-noninteractive-element-to-interactive-role': [\n    'error',\n    {\n      ul: ['listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid'],\n      ol: ['listbox', 'menu', 'menubar', 'radiogroup', 'tablist', 'tree', 'treegrid'],\n      li: ['menuitem', 'option', 'row', 'tab', 'treeitem'],\n      table: ['grid'],\n      td: ['gridcell'],\n    },\n  ]\n}\n```\n\nUnder the recommended options, the following code is valid. It would be invalid under the strict rules.\n\n```jsx\n<ul role=\"menu\" />\n```\n\n## Accessibility guidelines\n\n- [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n### Resources\n\n- [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro)\n- [WAI-ARIA Authoring Practices Guide - Design Patterns and Widgets](https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex)\n- [Fundamental Keyboard Navigation Conventions](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav)\n- [Mozilla Developer Network - ARIA Techniques](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role#Keyboard_and_focus)\n"
        }
    ]
}