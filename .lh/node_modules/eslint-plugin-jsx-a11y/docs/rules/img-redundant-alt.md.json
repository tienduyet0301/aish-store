{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/docs/rules/img-redundant-alt.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892257971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# jsx-a11y/img-redundant-alt\n\nüíº This rule is enabled in the following configs: ‚òëÔ∏è `recommended`, üîí `strict`.\n\n<!-- end auto-generated rule header -->\n\nEnforce img alt attribute does not contain the word image, picture, or photo. Screen readers already announce `img` elements as an image. There is no need to use words such as *image*, *photo*, and/or *picture*.\n\n## Rule options\n\nThis rule takes one optional object argument of type object:\n\n```json\n{\n    \"rules\": {\n        \"jsx-a11y/img-redundant-alt\": [ 2, {\n            \"components\": [ \"Image\" ],\n            \"words\": [ \"Bild\", \"Foto\" ],\n          }],\n    }\n}\n```\n\nFor the `components` option, these strings determine which JSX elements (**always including** `<img>`) should be checked for having redundant words in the `alt` prop value . This is a good use case when you have a wrapper component that simply renders an `img` element (like in React).\n\nFor the `words` option, these strings can be used to specify custom words that should be checked for in the alt prop, including `image`, `photo`, and `picture`. Useful for specifying words in other languages.\n\nThe rule will first check if `aria-hidden` is true to determine whether to enforce the rule. If the image is hidden, then rule will always succeed.\n\n### Succeed\n```jsx\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n<img src=\"bar\" aria-hidden alt=\"Picture of me taking a photo of an image\" /> // Will pass because it is hidden.\n<img src=\"baz\" alt={`Baz taking a ${photo}`} /> // This is valid since photo is a variable name.\n```\n\n### Fail\n```jsx\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n<img src=\"baz\" alt=\"Picture of baz fixing a bug.\" />\n```\n\n## Accessibility guidelines\nGeneral best practice (reference resources)\n\n### Resources\n- [WebAIM, Alternative Text](https://webaim.org/techniques/alttext/)\n"
        }
    ]
}