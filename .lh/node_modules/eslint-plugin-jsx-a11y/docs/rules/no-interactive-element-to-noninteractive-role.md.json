{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/docs/rules/no-interactive-element-to-noninteractive-role.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892258395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# jsx-a11y/no-interactive-element-to-noninteractive-role\n\nüíº This rule is enabled in the following configs: ‚òëÔ∏è `recommended`, üîí `strict`.\n\n<!-- end auto-generated rule header -->\n\nInteractive HTML elements indicate _controls_ in the user interface. Interactive elements include `<a href>`, `<button>`, `<input>`, `<select>`, `<textarea>`.\n\nNon-interactive HTML elements and non-interactive ARIA roles indicate _content_ and _containers_ in the user interface. Non-interactive elements include `<main>`, `<area>`, `<h1>` (,`<h2>`, etc), `<img>`, `<li>`, `<ul>` and `<ol>`.\n\n[WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro) should not be used to convert an interactive element to a non-interactive element. Non-interactive ARIA roles include `article`, `banner`, `complementary`, `img`, `listitem`, `main`, `region` and `tooltip`.\n\n## How do I resolve this error?\n\n### Case: The element should be a container, like an article\n\nWrap your interactive element in a `<div>` with the desired role.\n\n```jsx\n<div role=\"article\">\n  <button>Save</button>\n</div>\n```\n\n### Case: The element should be content, like an image\n\nPut the content inside your interactive element.\n\n```jsx\n<div\n  role=\"button\"\n  onClick={() => {}}\n  onKeyPress={() => {}}\n  tabIndex=\"0\">\n  <div role=\"img\" aria-label=\"Save\" />\n</div>\n```\n\n## Rule options\n\nThe recommended options for this rule allow the `tr` element to be given a role of `presentation` (or its semantic equivalent `none`). Under normal circumstances, an element with an interactive role should not be semantically neutralized with `presentation` (or `none`).\n\nOptions are provided as an object keyed by HTML element name; the value is an array of interactive roles that are allowed on the specified element.\n\n```js\n{\n  'no-interactive-element-to-noninteractive-role': [\n    'error',\n    {\n      tr: ['none', 'presentation'],\n    },\n  ]\n}\n```\n\nUnder the recommended options, the following code is valid. It would be invalid under the strict rules.\n\n```jsx\n<tr role=\"presentation\" />\n```\n\n## Accessibility guidelines\n\n- [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n\n### Resources\n\n- [ARIA Spec, States and Properties](https://www.w3.org/TR/wai-aria/#states_and_properties)\n- [Chrome Audit Rules, AX_ARIA_04](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_04)\n- [WAI-ARIA roles](https://www.w3.org/TR/wai-aria-1.1/#usage_intro)\n- [WAI-ARIA Authoring Practices Guide - Design Patterns and Widgets](https://www.w3.org/TR/wai-aria-practices-1.1/#aria_ex)\n- [Fundamental Keyboard Navigation Conventions](https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_generalnav)\n- [Mozilla Developer Network - ARIA Techniques](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role#Keyboard_and_focus)\n"
        }
    ]
}