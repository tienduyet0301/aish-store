{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/docs/rules/label-has-associated-control.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892258042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# jsx-a11y/label-has-associated-control\n\nüíº This rule is enabled in the following configs: ‚òëÔ∏è `recommended`, üîí `strict`.\n\n<!-- end auto-generated rule header -->\n\nEnforce that a label tag has a text label and an associated control.\n\nThere are two supported ways to associate a label with a control:\n\n- Wrapping a control in a label tag.\n- Adding `htmlFor` to a label and assigning it a DOM ID string that indicates an input on the page.\n\nThis rule checks that any `label` tag (or an indicated custom component that will output a `label` tag) either (1) wraps an `input` element (or an indicated custom component that will output an `input` tag) or (2) has an `htmlFor` attribute and that the `label` tag has text content.\n\n## How do I resolve this error?\n\n### Case: I just want a text label associated with an input.\n\nThe simplest way to achieve an association between a label and an input is to wrap the input in the label.\n\n```jsx\n<label>\n  Surname\n  <input type=\"text\" />\n</label>\n```\n\nAll modern browsers and assistive technology will associate the label with the control.\n\n### Case: The label is a sibling of the control.\n\nIn this case, use `htmlFor` and an ID to associate the controls.\n\n```jsx\n<label htmlFor={domId}>Surname</label>\n<input type=\"text\" id={domId} />\n```\n\n### Case: My label and input components are custom components.\n\nYou can configure the rule to be aware of your custom components.\n\n```jsx\n<CustomInputLabel label=\"Surname\">\n  <CustomInput type=\"text\" value={value} />\n</CustomInputLabel>\n```\n\nAnd the configuration:\n\n```json\n{\n  \"rules\": {\n    \"jsx-a11y/label-has-associated-control\": [ 2, {\n      \"labelComponents\": [\"CustomInputLabel\"],\n      \"labelAttributes\": [\"label\"],\n      \"controlComponents\": [\"CustomInput\"],\n      \"depth\": 3,\n    }],\n  }\n}\n```\n\n### Case: I have two labels for the same input\n\nIf the second `label` is in a different part of the HTML, then the second one can only contain `htmlFor` but not nesting. You will probably need eslint override comment on the second label.\n\n```jsx\n{/* eslint jsx-a11y/label-has-associated-control: [\"error\", { assert: \"either\" } ] */}\n<label htmlFor=\"a\">\n  Username:\n</label>\n...\n<label htmlFor=\"a\">\n  <input id=\"a\" />\n</label>\n```\n\n## How to manage IDs of `input`\n\nA common way to think of `id` with libraries like React is, `id`s should be avoided since it must be unique on the page, and components need to be reusable. Hence it is tempted to generate `id` during render-time if `id` is required. *However:*\n\nIDs shouldn't be generated in the browser, so that server and client rendering are deterministic. Render-time uuids aren't just a hack, they're actually broken and should never be used.\n\nTo restate, **every ID needs to be deterministic**, on the server and the client, and guaranteed to be unique on the page. EG: For each input, a required ID prop can be passed down from as far up the tree as possible to guarantee uniqueness.\n\n## Rule options\n\nThis rule takes one optional object argument of type object:\n\n```json\n{\n  \"rules\": {\n    \"jsx-a11y/label-has-associated-control\": [ 2, {\n      \"labelComponents\": [\"CustomLabel\"],\n      \"labelAttributes\": [\"inputLabel\"],\n      \"controlComponents\": [\"CustomInput\"],\n      \"assert\": \"both\",\n      \"depth\": 3,\n    }],\n  }\n}\n```\n\n`labelComponents` is a list of custom React Component names that should be checked for an associated control.\n\n`labelAttributes` is a list of attributes to check on the label component and its children for a label. Use this if you have a custom component that uses a string passed on a prop to render an HTML `label`, for example.\n\n`controlComponents` is a list of custom React Components names that will output an input element. [Glob format](https://linuxhint.com/bash_globbing_tutorial/) is also supported for specifying names (e.g., `Label*` matches `LabelComponent` but not `CustomLabel`, `????Label` matches `LinkLabel` but not `CustomLabel`).\n\n`assert` asserts that the label has htmlFor, a nested label, both or either. Available options: `'htmlFor', 'nesting', 'both', 'either'`.\n\n`depth` (default 2, max 25) is an integer that determines how deep within a `JSXElement` label the rule should look for text content or an element with a label to determine if the `label` element will have an accessible label.\n\n### Fail\n```jsx\nfunction Foo(props) {\n  return <label {...props} />\n}\n```\n\n### Succeed\n```jsx\nfunction Foo(props) {\n    const {\n        htmlFor,\n        ...otherProps\n    } = props;\n\n   return <label htmlFor={htmlFor} {...otherProps} />\n}\n```\n\n### Fail\n```jsx\n<input type=\"text\" />\n<label>Surname</label>\n```\n\n### Succeed\n```jsx\n<label>\n  <input type=\"text\" />\n  Surname\n</label>\n```\n\n## Accessibility guidelines\n- [WCAG 1.3.1](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships)\n- [WCAG 3.3.2](https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions)\n- [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n"
        }
    ]
}