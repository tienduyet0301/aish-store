{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/docs/rules/control-has-associated-label.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892257756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# jsx-a11y/control-has-associated-label\n\nüö´ This rule is _disabled_ in the following configs: ‚òëÔ∏è `recommended`, üîí `strict`.\n\n<!-- end auto-generated rule header -->\n\nEnforce that a control (an interactive element) has a text label.\n\nThere are two supported ways to supply a control with a text label:\n\n- Provide text content inside the element.\n- Use the `aria-label` attribute on the element, with a text value.\n- Use the `aria-labelledby` attribute on the element, and point the IDREF value to an element with an accessible label.\n- Alternatively, with an `img` tag, you may use the `alt` attribute to supply a text description of the image.\n\nThe rule is permissive in the sense that it will assume that expressions will eventually provide a label. So an element like this will pass.\n\n```jsx\n<button type=\"button\">{maybeSomethingThatContainsALabel}</button>\n```\n\n## How do I resolve this error?\n\n### Case: I have a simple button that requires a label.\n\nProvide text content in the `button` element.\n\n```jsx\n<button type=\"button\">Save</button>\n```\n\n### Case: I have an icon button and I don't want visible text.\n\nUse the `aria-label` attribute and provide the text label as the value.\n\n```jsx\n<button type=\"button\" aria-label=\"Save\" class=\"icon-save\" />\n```\n\n### Case: The label for my element is already located on the page and I don't want to repeat the text in my source code.\n\nUse the `aria-labelledby` attribute and point the IDREF value to an element with an accessible label.\n\n```jsx\n<div id=\"js_1\">Comment</div>\n<textarea aria-labelledby=\"js_1\"></textarea>\n```\n\n### Case: My label and input components are custom components, but I still want to require that they have an accessible text label.\n\nYou can configure the rule to be aware of your custom components. Refer to the Rule Details below.\n\n```jsx\n<CustomInput label=\"Surname\" type=\"text\" value={value} />\n```\n\n## Rule options\n\nThis rule takes one optional object argument of type object:\n\n```json\n{\n  \"rules\": {\n    \"jsx-a11y/control-has-associated-label\": [ 2, {\n      \"labelAttributes\": [\"label\"],\n      \"controlComponents\": [\"CustomComponent\"],\n      \"ignoreElements\": [\n        \"audio\",\n        \"canvas\",\n        \"embed\",\n        \"input\",\n        \"textarea\",\n        \"tr\",\n        \"video\",\n      ],\n      \"ignoreRoles\": [\n        \"grid\",\n        \"listbox\",\n        \"menu\",\n        \"menubar\",\n        \"radiogroup\",\n        \"row\",\n        \"tablist\",\n        \"toolbar\",\n        \"tree\",\n        \"treegrid\",\n      ],\n      \"depth\": 3,\n    }],\n  }\n}\n```\n\n- `labelAttributes` is a list of attributes to check on the control component and its children for a label. Use this if you have a custom component that uses a string passed on a prop to render an HTML `label`, for example.\n- `controlComponents` is a list of custom React Components names that will render down to an interactive element.\n- `ignoreElements` is an array of elements that should not be considered control (interactive) elements and therefore they do not require a text label.\n- `ignoreRoles` is an array of ARIA roles that should not be considered control (interactive) roles and therefore they do not require a text label.\n- `depth` (default 2, max 25) is an integer that determines how deep within a `JSXElement` the rule should look for text content or an element with a label to determine if the interactive element will have an accessible label.\n\n### Succeed\n```jsx\n<button type=\"button\" aria-label=\"Save\" class=\"icon-save\" />\n```\n\n### Fail\n```jsx\n<button type=\"button\" class=\"icon-save\" />\n```\n\n## Accessibility guidelines\n- [WCAG 1.3.1](https://www.w3.org/WAI/WCAG21/Understanding/info-and-relationships)\n- [WCAG 3.3.2](https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions)\n- [WCAG 4.1.2](https://www.w3.org/WAI/WCAG21/Understanding/name-role-value)\n"
        }
    ]
}