{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/role-supports-aria-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892261069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _getImplicitRole = _interopRequireDefault(require(\"../util/getImplicitRole\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce that elements with explicit or implicit roles defined contain only\n * `aria-*` properties supported by that `role`.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(attr, role, tag, isImplicit) {\n  if (isImplicit) {\n    return \"The attribute \".concat(attr, \" is not supported by the role \").concat(role, \". This role is implicit on the element \").concat(tag, \".\");\n  }\n  return \"The attribute \".concat(attr, \" is not supported by the role \").concat(role, \".\");\n};\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-supports-aria-props.md',\n      description: 'Enforce that elements with explicit or implicit roles defined contain only `aria-*` properties supported by that `role`.'\n    },\n    schema: [schema]\n  },\n  create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement(node) {\n        // If role is not explicitly defined, then try and get its implicit role.\n        var type = elementType(node);\n        var role = (0, _jsxAstUtils.getProp)(node.attributes, 'role');\n        var roleValue = role ? (0, _jsxAstUtils.getLiteralPropValue)(role) : (0, _getImplicitRole[\"default\"])(type, node.attributes);\n        var isImplicit = roleValue && role === undefined;\n\n        // If there is no explicit or implicit role, then assume that the element\n        // can handle the global set of aria-* properties.\n        // This actually isn't true - should fix in future release.\n        if (typeof roleValue !== 'string' || _ariaQuery.roles.get(roleValue) === undefined) {\n          return;\n        }\n\n        // Make sure it has no aria-* properties defined outside its property set.\n        var _roles$get = _ariaQuery.roles.get(roleValue),\n          propKeyValues = _roles$get.props;\n        var invalidAriaPropsForRole = new Set(_ariaQuery.aria.keys().filter(function (attribute) {\n          return !(attribute in propKeyValues);\n        }));\n        node.attributes.filter(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)(prop) != null // Ignore the attribute if its value is null or undefined.\n          && prop.type !== 'JSXSpreadAttribute' // Ignore the attribute if it's a spread.\n          ;\n        }).forEach(function (prop) {\n          var name = (0, _jsxAstUtils.propName)(prop);\n          if (invalidAriaPropsForRole.has(name)) {\n            context.report({\n              node,\n              message: errorMessage(name, roleValue, type, isImplicit)\n            });\n          }\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}