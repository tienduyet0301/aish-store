{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/anchor-is-valid.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _safeRegexTest = _interopRequireDefault(require(\"safe-regex-test\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Performs validity check on anchor hrefs. Warns when anchors are used as buttons.\n * @author Almero Steyn\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar allAspects = ['noHref', 'invalidHref', 'preferButton'];\nvar preferButtonErrorMessage = 'Anchor used as a button. Anchors are primarily expected to navigate. Use the button element instead. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar noHrefErrorMessage = 'The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar invalidHrefErrorMessage = 'The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  specialLink: _schemas.arraySchema,\n  aspects: (0, _schemas.enumArraySchema)(allAspects, 1)\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-is-valid.md',\n      description: 'Enforce all anchors are valid, navigable elements.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    var testJShref = (0, _safeRegexTest[\"default\"])(/^\\W*?javascript:/);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = elementType(node);\n\n        // Only check anchor elements and custom types.\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        }\n\n        // Set up the rule aspects to check.\n        var aspects = options.aspects || allAspects;\n\n        // Create active aspect flag object. Failing checks will only report\n        // if the related flag is set to true.\n        var activeAspects = {};\n        allAspects.forEach(function (aspect) {\n          activeAspects[aspect] = aspects.indexOf(aspect) !== -1;\n        });\n        var propOptions = options.specialLink || [];\n        var propsToValidate = ['href'].concat(propOptions);\n        var values = propsToValidate.map(function (prop) {\n          return (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(node.attributes, prop));\n        });\n        // Checks if any actual or custom href prop is provided.\n        var hasAnyHref = values.some(function (value) {\n          return value != null;\n        });\n        // Need to check for spread operator as props can be spread onto the element\n        // leading to an incorrect validation error.\n        var hasSpreadOperator = attributes.some(function (prop) {\n          return prop.type === 'JSXSpreadAttribute';\n        });\n        var onClick = (0, _jsxAstUtils.getProp)(attributes, 'onClick');\n\n        // When there is no href at all, specific scenarios apply:\n        if (!hasAnyHref) {\n          // If no spread operator is found and no onClick event is present\n          // it is a link without href.\n          if (!hasSpreadOperator && activeAspects.noHref && (!onClick || onClick && !activeAspects.preferButton)) {\n            context.report({\n              node,\n              message: noHrefErrorMessage\n            });\n          }\n          // If no spread operator is found but an onClick is preset it should be a button.\n          if (!hasSpreadOperator && onClick && activeAspects.preferButton) {\n            context.report({\n              node,\n              message: preferButtonErrorMessage\n            });\n          }\n          return;\n        }\n\n        // Hrefs have been found, now check for validity.\n        var invalidHrefValues = values.filter(function (value) {\n          return value != null && typeof value === 'string' && (!value.length || value === '#' || testJShref(value));\n        });\n        if (invalidHrefValues.length !== 0) {\n          // If an onClick is found it should be a button, otherwise it is an invalid link.\n          if (onClick && activeAspects.preferButton) {\n            context.report({\n              node,\n              message: preferButtonErrorMessage\n            });\n          } else if (activeAspects.invalidHref) {\n            context.report({\n              node,\n              message: invalidHrefErrorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}