{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/role-has-required-aria-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892261021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isSemanticRoleElement = _interopRequireDefault(require(\"../util/isSemanticRoleElement\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce that elements with ARIA roles must\n *  have all required attributes for that role.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(role, requiredProps) {\n  return \"Elements with the ARIA role \\\"\".concat(role, \"\\\" must have the following attributes defined: \").concat(String(requiredProps).toLowerCase());\n};\nvar schema = (0, _schemas.generateObjSchema)();\nvar roleKeys = _ariaQuery.roles.keys();\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/role-has-required-aria-props.md',\n      description: 'Enforce that elements with ARIA roles must have all required attributes for that role.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute).toLowerCase();\n        if (name !== 'role') {\n          return;\n        }\n        var type = elementType(attribute.parent);\n        if (!_ariaQuery.dom.get(type)) {\n          return;\n        }\n        var roleAttrValue = (0, _jsxAstUtils.getLiteralPropValue)(attribute);\n        var attributes = attribute.parent.attributes;\n\n        // If value is undefined, then the role attribute will be dropped in the DOM.\n        // If value is null, then getLiteralAttributeValue is telling us\n        // that the value isn't in the form of a literal.\n        if (roleAttrValue === undefined || roleAttrValue === null) {\n          return;\n        }\n        var normalizedValues = String(roleAttrValue).toLowerCase().split(' ');\n        var validRoles = normalizedValues.filter(function (val) {\n          return roleKeys.indexOf(val) > -1;\n        });\n\n        // Check semantic DOM elements\n        // For example, <input type=\"checkbox\" role=\"switch\" />\n        if ((0, _isSemanticRoleElement[\"default\"])(type, attributes)) {\n          return;\n        }\n        // Check arbitrary DOM elements\n        validRoles.forEach(function (role) {\n          var _roles$get = _ariaQuery.roles.get(role),\n            requiredPropKeyValues = _roles$get.requiredProps;\n          var requiredProps = Object.keys(requiredPropKeyValues);\n          if (requiredProps.length > 0) {\n            var hasRequiredProps = requiredProps.every(function (prop) {\n              return (0, _jsxAstUtils.getProp)(attributes, prop);\n            });\n            if (hasRequiredProps === false) {\n              context.report({\n                node: attribute,\n                message: errorMessage(role.toLowerCase(), requiredProps)\n              });\n            }\n          }\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}