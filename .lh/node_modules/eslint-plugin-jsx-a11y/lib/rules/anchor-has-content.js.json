{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/anchor-has-content.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _schemas = require(\"../util/schemas\");\nvar _hasAccessibleChild = _interopRequireDefault(require(\"../util/hasAccessibleChild\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce anchor elements to contain accessible content.\n * @author Lisa Ring & Niklas Holmberg\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Anchors must have content and the content must be accessible by a screen reader.';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/anchor-has-content.md',\n      description: 'Enforce all anchors to contain accessible content.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typeCheck = ['a'].concat(componentOptions);\n        var nodeType = elementType(node);\n\n        // Only check anchor elements and custom types.\n        if (typeCheck.indexOf(nodeType) === -1) {\n          return;\n        }\n        if ((0, _hasAccessibleChild[\"default\"])(node.parent, elementType)) {\n          return;\n        }\n        if ((0, _jsxAstUtils.hasAnyProp)(node.attributes, ['title', 'aria-label'])) {\n          return;\n        }\n        context.report({\n          node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}