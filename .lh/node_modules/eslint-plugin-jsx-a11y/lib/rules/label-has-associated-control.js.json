{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/label-has-associated-control.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _mayContainChildComponent = _interopRequireDefault(require(\"../util/mayContainChildComponent\"));\nvar _mayHaveAccessibleLabel = _interopRequireDefault(require(\"../util/mayHaveAccessibleLabel\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce label tags have an associated control.\n * @author Jesse Beach\n *\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'A form label must be associated with a control.';\nvar errorMessageNoLabel = 'A form label must have accessible text.';\nvar schema = (0, _schemas.generateObjSchema)({\n  labelComponents: _schemas.arraySchema,\n  labelAttributes: _schemas.arraySchema,\n  controlComponents: _schemas.arraySchema,\n  assert: {\n    description: 'Assert that the label has htmlFor, a nested label, both or either',\n    type: 'string',\n    \"enum\": ['htmlFor', 'nesting', 'both', 'either']\n  },\n  depth: {\n    description: 'JSX tree depth limit to check for accessible label',\n    type: 'integer',\n    minimum: 0\n  }\n});\nfunction validateID(node, context) {\n  var _settings$jsxA11y$at, _settings$jsxA11y, _settings$jsxA11y$att;\n  var settings = context.settings;\n  var htmlForAttributes = (_settings$jsxA11y$at = (_settings$jsxA11y = settings['jsx-a11y']) === null || _settings$jsxA11y === void 0 ? void 0 : (_settings$jsxA11y$att = _settings$jsxA11y.attributes) === null || _settings$jsxA11y$att === void 0 ? void 0 : _settings$jsxA11y$att[\"for\"]) !== null && _settings$jsxA11y$at !== void 0 ? _settings$jsxA11y$at : ['htmlFor'];\n  for (var i = 0; i < htmlForAttributes.length; i += 1) {\n    var attribute = htmlForAttributes[i];\n    if ((0, _jsxAstUtils.hasProp)(node.attributes, attribute)) {\n      var htmlForAttr = (0, _jsxAstUtils.getProp)(node.attributes, attribute);\n      var htmlForValue = (0, _jsxAstUtils.getPropValue)(htmlForAttr);\n      return htmlForAttr !== false && !!htmlForValue;\n    }\n  }\n  return false;\n}\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      description: 'Enforce that a `label` tag has a text label and an associated control.',\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/label-has-associated-control.md'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options[0] || {};\n    var labelComponents = options.labelComponents || [];\n    var assertType = options.assert || 'either';\n    var componentNames = ['label'].concat(labelComponents);\n    var elementType = (0, _getElementType[\"default\"])(context);\n    var rule = function rule(node) {\n      if (componentNames.indexOf(elementType(node.openingElement)) === -1) {\n        return;\n      }\n      var controlComponents = ['input', 'meter', 'output', 'progress', 'select', 'textarea'].concat(options.controlComponents || []);\n      // Prevent crazy recursion.\n      var recursionDepth = Math.min(options.depth === undefined ? 2 : options.depth, 25);\n      var hasLabelId = validateID(node.openingElement, context);\n      // Check for multiple control components.\n      var hasNestedControl = controlComponents.some(function (name) {\n        return (0, _mayContainChildComponent[\"default\"])(node, name, recursionDepth, elementType);\n      });\n      var hasAccessibleLabel = (0, _mayHaveAccessibleLabel[\"default\"])(node, recursionDepth, options.labelAttributes, elementType, controlComponents);\n      if (!hasAccessibleLabel) {\n        context.report({\n          node: node.openingElement,\n          message: errorMessageNoLabel\n        });\n        return;\n      }\n      switch (assertType) {\n        case 'htmlFor':\n          if (hasLabelId) {\n            return;\n          }\n          break;\n        case 'nesting':\n          if (hasNestedControl) {\n            return;\n          }\n          break;\n        case 'both':\n          if (hasLabelId && hasNestedControl) {\n            return;\n          }\n          break;\n        case 'either':\n          if (hasLabelId || hasNestedControl) {\n            return;\n          }\n          break;\n        default:\n          break;\n      }\n\n      // htmlFor case\n      context.report({\n        node: node.openingElement,\n        message: errorMessage\n      });\n    };\n\n    // Create visitor selectors.\n    return {\n      JSXElement: rule\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}