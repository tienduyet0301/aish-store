{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-activedescendant-has-tabindex.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _getTabIndex = _interopRequireDefault(require(\"../util/getTabIndex\"));\nvar _isInteractiveElement = _interopRequireDefault(require(\"../util/isInteractiveElement\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce elements with aria-activedescendant are tabbable.\n * @author Jesse Beach <@jessebeach>\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'An element that manages focus with `aria-activedescendant` must have a tabindex';\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-activedescendant-has-tabindex.md',\n      description: 'Enforce elements with aria-activedescendant are tabbable.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var attributes = node.attributes;\n        if ((0, _jsxAstUtils.getProp)(attributes, 'aria-activedescendant') === undefined) {\n          return;\n        }\n        var type = elementType(node);\n        // Do not test higher level JSX components, as we do not know what\n        // low-level DOM element this maps to.\n        if (!_ariaQuery.dom.has(type)) {\n          return;\n        }\n        var tabIndex = (0, _getTabIndex[\"default\"])((0, _jsxAstUtils.getProp)(attributes, 'tabIndex'));\n\n        // If this is an interactive element and the tabindex attribute is not specified,\n        // or the tabIndex property was not mutated, then the tabIndex\n        // property will be undefined.\n        if ((0, _isInteractiveElement[\"default\"])(type, attributes) && tabIndex === undefined) {\n          return;\n        }\n        if (tabIndex >= -1) {\n          return;\n        }\n        context.report({\n          node,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}