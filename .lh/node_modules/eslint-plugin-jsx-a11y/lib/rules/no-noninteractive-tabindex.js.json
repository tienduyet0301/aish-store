{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/no-noninteractive-tabindex.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isInteractiveElement = _interopRequireDefault(require(\"../util/isInteractiveElement\"));\nvar _isInteractiveRole = _interopRequireDefault(require(\"../util/isInteractiveRole\"));\nvar _isNonLiteralProperty = _interopRequireDefault(require(\"../util/isNonLiteralProperty\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getTabIndex = _interopRequireDefault(require(\"../util/getTabIndex\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); } /**\n * @fileoverview Disallow tabindex on static and noninteractive elements\n * @author jessebeach\n * \n */ // ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\nvar errorMessage = '`tabIndex` should only be declared on interactive elements.';\nvar schema = (0, _schemas.generateObjSchema)({\n  roles: _objectSpread(_objectSpread({}, _schemas.arraySchema), {}, {\n    description: 'An array of ARIA roles'\n  }),\n  tags: _objectSpread(_objectSpread({}, _schemas.arraySchema), {}, {\n    description: 'An array of HTML tag names'\n  })\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-tabindex.md',\n      description: '`tabIndex` should only be declared on interactive elements.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options;\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function (_JSXOpeningElement) {\n        function JSXOpeningElement(_x) {\n          return _JSXOpeningElement.apply(this, arguments);\n        }\n        JSXOpeningElement.toString = function () {\n          return _JSXOpeningElement.toString();\n        };\n        return JSXOpeningElement;\n      }(function (node) {\n        var type = elementType(node);\n        var attributes = node.attributes;\n        var tabIndexProp = (0, _jsxAstUtils.getProp)(attributes, 'tabIndex');\n        var tabIndex = (0, _getTabIndex[\"default\"])(tabIndexProp);\n        // Early return;\n        if (typeof tabIndex === 'undefined') {\n          return;\n        }\n        var role = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'role'));\n        if (!_ariaQuery.dom.has(type)) {\n          // Do not test higher level JSX components, as we do not know what\n          // low-level DOM element this maps to.\n          return;\n        }\n        // Allow for configuration overrides.\n        var _ref = options[0] || {},\n          tags = _ref.tags,\n          roles = _ref.roles,\n          allowExpressionValues = _ref.allowExpressionValues;\n        if (tags && (0, _arrayIncludes[\"default\"])(tags, type)) {\n          return;\n        }\n        if (roles && (0, _arrayIncludes[\"default\"])(roles, role)) {\n          return;\n        }\n        if (allowExpressionValues === true && (0, _isNonLiteralProperty[\"default\"])(attributes, 'role')) {\n          // Special case if role is assigned using ternary with literals on both side\n          var roleProp = (0, _jsxAstUtils.getProp)(attributes, 'role');\n          if (roleProp && roleProp.type === 'JSXAttribute' && roleProp.value.type === 'JSXExpressionContainer') {\n            if (roleProp.value.expression.type === 'ConditionalExpression') {\n              if (roleProp.value.expression.consequent.type === 'Literal' && roleProp.value.expression.alternate.type === 'Literal') {\n                return;\n              }\n            }\n          }\n          return;\n        }\n        if ((0, _isInteractiveElement[\"default\"])(type, attributes) || (0, _isInteractiveRole[\"default\"])(type, attributes)) {\n          return;\n        }\n        if (tabIndex >= 0) {\n          context.report({\n            node: tabIndexProp,\n            message: errorMessage\n          });\n        }\n      })\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}