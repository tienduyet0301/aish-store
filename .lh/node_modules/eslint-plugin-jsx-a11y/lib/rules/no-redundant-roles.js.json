{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/no-redundant-roles.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _hasown = _interopRequireDefault(require(\"hasown\"));\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _getExplicitRole = _interopRequireDefault(require(\"../util/getExplicitRole\"));\nvar _getImplicitRole = _interopRequireDefault(require(\"../util/getImplicitRole\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce explicit role property is not the\n * same as implicit/default role property on element.\n * @author Ethan Cohen <@evcohen>\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(element, implicitRole) {\n  return \"The element \".concat(element, \" has an implicit role of \").concat(implicitRole, \". Defining this explicitly is redundant and should be avoided.\");\n};\nvar DEFAULT_ROLE_EXCEPTIONS = {\n  nav: ['navigation']\n};\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-redundant-roles.md',\n      description: 'Enforce explicit role property is not the same as implicit/default role property on element.'\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string'\n        },\n        uniqueItems: true\n      }\n    }]\n  },\n  create: function create(context) {\n    var options = context.options;\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function (_JSXOpeningElement) {\n        function JSXOpeningElement(_x) {\n          return _JSXOpeningElement.apply(this, arguments);\n        }\n        JSXOpeningElement.toString = function () {\n          return _JSXOpeningElement.toString();\n        };\n        return JSXOpeningElement;\n      }(function (node) {\n        var type = elementType(node);\n        var implicitRole = (0, _getImplicitRole[\"default\"])(type, node.attributes);\n        var explicitRole = (0, _getExplicitRole[\"default\"])(type, node.attributes);\n        if (!implicitRole || !explicitRole) {\n          return;\n        }\n        if (implicitRole === explicitRole) {\n          var allowedRedundantRoles = options[0] || {};\n          var redundantRolesForElement;\n          if ((0, _hasown[\"default\"])(allowedRedundantRoles, type)) {\n            redundantRolesForElement = allowedRedundantRoles[type];\n          } else {\n            redundantRolesForElement = DEFAULT_ROLE_EXCEPTIONS[type] || [];\n          }\n          if ((0, _arrayIncludes[\"default\"])(redundantRolesForElement, implicitRole)) {\n            return;\n          }\n          context.report({\n            node,\n            message: errorMessage(type, implicitRole.toLowerCase())\n          });\n        }\n      })\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}