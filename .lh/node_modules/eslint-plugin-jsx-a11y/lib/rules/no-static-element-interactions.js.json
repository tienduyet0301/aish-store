{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/no-static-element-interactions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isAbstractRole = _interopRequireDefault(require(\"../util/isAbstractRole\"));\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\nvar _isInteractiveElement = _interopRequireDefault(require(\"../util/isInteractiveElement\"));\nvar _isInteractiveRole = _interopRequireDefault(require(\"../util/isInteractiveRole\"));\nvar _isNonInteractiveElement = _interopRequireDefault(require(\"../util/isNonInteractiveElement\"));\nvar _isNonInteractiveRole = _interopRequireDefault(require(\"../util/isNonInteractiveRole\"));\nvar _isNonLiteralProperty = _interopRequireDefault(require(\"../util/isNonLiteralProperty\"));\nvar _isPresentationRole = _interopRequireDefault(require(\"../util/isPresentationRole\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce static elements have no interactive handlers.\n * @author Ethan Cohen\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.';\nvar defaultInteractiveProps = [].concat(_jsxAstUtils.eventHandlersByType.focus, _jsxAstUtils.eventHandlersByType.keyboard, _jsxAstUtils.eventHandlersByType.mouse);\nvar schema = (0, _schemas.generateObjSchema)({\n  handlers: _schemas.arraySchema\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-static-element-interactions.md',\n      description: 'Enforce that non-interactive, visible elements (such as `<div>`) that have click handlers use the role attribute.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options;\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function (_JSXOpeningElement) {\n        function JSXOpeningElement(_x) {\n          return _JSXOpeningElement.apply(this, arguments);\n        }\n        JSXOpeningElement.toString = function () {\n          return _JSXOpeningElement.toString();\n        };\n        return JSXOpeningElement;\n      }(function (node) {\n        var attributes = node.attributes;\n        var type = elementType(node);\n        var _ref = options[0] || {},\n          allowExpressionValues = _ref.allowExpressionValues,\n          _ref$handlers = _ref.handlers,\n          handlers = _ref$handlers === void 0 ? defaultInteractiveProps : _ref$handlers;\n        var hasInteractiveProps = handlers.some(function (prop) {\n          return (0, _jsxAstUtils.hasProp)(attributes, prop) && (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(attributes, prop)) != null;\n        });\n        if (!_ariaQuery.dom.has(type)) {\n          // Do not test higher level JSX components, as we do not know what\n          // low-level DOM element this maps to.\n          return;\n        }\n        if (!hasInteractiveProps || (0, _isHiddenFromScreenReader[\"default\"])(type, attributes) || (0, _isPresentationRole[\"default\"])(type, attributes)) {\n          // Presentation is an intentional signal from the author that this\n          // element is not meant to be perceivable. For example, a click screen\n          // to close a dialog .\n          return;\n        }\n        if ((0, _isInteractiveElement[\"default\"])(type, attributes) || (0, _isInteractiveRole[\"default\"])(type, attributes) || (0, _isNonInteractiveElement[\"default\"])(type, attributes) || (0, _isNonInteractiveRole[\"default\"])(type, attributes) || (0, _isAbstractRole[\"default\"])(type, attributes)) {\n          // This rule has no opinion about abstract roles.\n          return;\n        }\n        if (allowExpressionValues === true && (0, _isNonLiteralProperty[\"default\"])(attributes, 'role')) {\n          // Special case if role is assigned using ternary with literals on both side\n          var roleProp = (0, _jsxAstUtils.getProp)(attributes, 'role');\n          if (roleProp && roleProp.type === 'JSXAttribute' && roleProp.value.type === 'JSXExpressionContainer') {\n            if (roleProp.value.expression.type === 'ConditionalExpression') {\n              if (roleProp.value.expression.consequent.type === 'Literal' && roleProp.value.expression.alternate.type === 'Literal') {\n                return;\n              }\n            }\n          }\n          return;\n        }\n\n        // Visible, non-interactive elements should not have an interactive handler.\n        context.report({\n          node,\n          message: errorMessage\n        });\n      })\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}