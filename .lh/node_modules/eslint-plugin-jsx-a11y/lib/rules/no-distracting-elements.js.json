{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/no-distracting-elements.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce distracting elements are not used.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(element) {\n  return \"Do not use <\".concat(element, \"> elements as they can create visual accessibility issues and are deprecated.\");\n};\nvar DEFAULT_ELEMENTS = ['marquee', 'blink'];\nvar schema = (0, _schemas.generateObjSchema)({\n  elements: (0, _schemas.enumArraySchema)(DEFAULT_ELEMENTS)\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-distracting-elements.md',\n      description: 'Enforce distracting elements are not used.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var elementOptions = options.elements || DEFAULT_ELEMENTS;\n        var type = elementType(node);\n        var distractingElement = elementOptions.find(function (element) {\n          return type === element;\n        });\n        if (distractingElement) {\n          context.report({\n            node,\n            message: errorMessage(distractingElement)\n          });\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}