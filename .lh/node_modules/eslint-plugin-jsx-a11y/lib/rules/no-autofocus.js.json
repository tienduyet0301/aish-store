{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/no-autofocus.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _ariaQuery = require(\"aria-query\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce autoFocus prop is not used.\n * @author Ethan Cohen <@evcohen>\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'The autoFocus prop should not be used, as it can reduce usability and accessibility for users.';\nvar schema = (0, _schemas.generateObjSchema)({\n  ignoreNonDOM: {\n    type: 'boolean',\n    \"default\": false\n  }\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-autofocus.md',\n      description: 'Enforce autoFocus prop is not used.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        // Determine if ignoreNonDOM is set to true\n        // If true, then do not run rule.\n        var options = context.options[0] || {};\n        var ignoreNonDOM = !!options.ignoreNonDOM;\n        if (ignoreNonDOM) {\n          var type = elementType(attribute.parent);\n          if (!_ariaQuery.dom.get(type)) {\n            return;\n          }\n        }\n\n        // Don't normalize, since React only recognizes autoFocus on low-level DOM elements.\n        if ((0, _jsxAstUtils.propName)(attribute) === 'autoFocus') {\n          context.report({\n            node: attribute,\n            message: errorMessage\n          });\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}