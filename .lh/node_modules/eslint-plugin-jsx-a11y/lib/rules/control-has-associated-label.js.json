{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/control-has-associated-label.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isDOMElement = _interopRequireDefault(require(\"../util/isDOMElement\"));\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\nvar _isInteractiveElement = _interopRequireDefault(require(\"../util/isInteractiveElement\"));\nvar _isInteractiveRole = _interopRequireDefault(require(\"../util/isInteractiveRole\"));\nvar _mayHaveAccessibleLabel = _interopRequireDefault(require(\"../util/mayHaveAccessibleLabel\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce controls are associated with a text label.\n * @author Jesse Beach\n *\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'A control must be associated with a text label.';\nvar ignoreList = ['link'];\nvar schema = (0, _schemas.generateObjSchema)({\n  labelAttributes: _schemas.arraySchema,\n  controlComponents: _schemas.arraySchema,\n  ignoreElements: _schemas.arraySchema,\n  ignoreRoles: _schemas.arraySchema,\n  depth: {\n    description: 'JSX tree depth limit to check for accessible label',\n    type: 'integer',\n    minimum: 0\n  }\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      description: 'Enforce that a control (an interactive element) has a text label.',\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/main/docs/rules/control-has-associated-label.md'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    var options = context.options[0] || {};\n    var _options$labelAttribu = options.labelAttributes,\n      labelAttributes = _options$labelAttribu === void 0 ? [] : _options$labelAttribu,\n      _options$controlCompo = options.controlComponents,\n      controlComponents = _options$controlCompo === void 0 ? [] : _options$controlCompo,\n      _options$ignoreElemen = options.ignoreElements,\n      ignoreElements = _options$ignoreElemen === void 0 ? [] : _options$ignoreElemen,\n      _options$ignoreRoles = options.ignoreRoles,\n      ignoreRoles = _options$ignoreRoles === void 0 ? [] : _options$ignoreRoles;\n    var newIgnoreElements = new Set([].concat(ignoreElements, ignoreList));\n    var rule = function rule(node) {\n      var tag = elementType(node.openingElement);\n      var role = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.openingElement.attributes, 'role'));\n      // Ignore interactive elements that might get their label from a source\n      // that cannot be discerned from static analysis, like\n      // <label><input />Save</label>\n      if (newIgnoreElements.has(tag)) {\n        return;\n      }\n      // Ignore roles that are \"interactive\" but should not require a label.\n      if ((0, _arrayIncludes[\"default\"])(ignoreRoles, role)) {\n        return;\n      }\n      var props = node.openingElement.attributes;\n      var nodeIsDOMElement = (0, _isDOMElement[\"default\"])(tag);\n      var nodeIsHiddenFromScreenReader = (0, _isHiddenFromScreenReader[\"default\"])(tag, props);\n      var nodeIsInteractiveElement = (0, _isInteractiveElement[\"default\"])(tag, props);\n      var nodeIsInteractiveRole = (0, _isInteractiveRole[\"default\"])(tag, props);\n      var nodeIsControlComponent = controlComponents.indexOf(tag) > -1;\n      if (nodeIsHiddenFromScreenReader) {\n        return;\n      }\n      var hasAccessibleLabel = true;\n      if (nodeIsInteractiveElement || nodeIsDOMElement && nodeIsInteractiveRole || nodeIsControlComponent) {\n        // Prevent crazy recursion.\n        var recursionDepth = Math.min(options.depth === undefined ? 2 : options.depth, 25);\n        hasAccessibleLabel = (0, _mayHaveAccessibleLabel[\"default\"])(node, recursionDepth, labelAttributes, elementType, controlComponents);\n      }\n      if (!hasAccessibleLabel) {\n        context.report({\n          node: node.openingElement,\n          message: errorMessage\n        });\n      }\n    };\n\n    // Create visitor selectors.\n    return {\n      JSXElement: rule\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}