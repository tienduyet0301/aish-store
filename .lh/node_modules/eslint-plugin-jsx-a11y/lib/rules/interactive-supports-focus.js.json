{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/interactive-supports-focus.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isDisabledElement = _interopRequireDefault(require(\"../util/isDisabledElement\"));\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\nvar _isInteractiveElement = _interopRequireDefault(require(\"../util/isInteractiveElement\"));\nvar _isInteractiveRole = _interopRequireDefault(require(\"../util/isInteractiveRole\"));\nvar _isNonInteractiveElement = _interopRequireDefault(require(\"../util/isNonInteractiveElement\"));\nvar _isNonInteractiveRole = _interopRequireDefault(require(\"../util/isNonInteractiveRole\"));\nvar _isPresentationRole = _interopRequireDefault(require(\"../util/isPresentationRole\"));\nvar _getTabIndex = _interopRequireDefault(require(\"../util/getTabIndex\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce that elements with onClick handlers must be tabbable.\n * @author Ethan Cohen\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)({\n  tabbable: (0, _schemas.enumArraySchema)(_ariaQuery.roles.keys().filter(function (name) {\n    return !_ariaQuery.roles.get(name)[\"abstract\"] && _ariaQuery.roles.get(name).superClass.some(function (klasses) {\n      return (0, _arrayIncludes[\"default\"])(klasses, 'widget');\n    });\n  }))\n});\nvar interactiveProps = [].concat(_jsxAstUtils.eventHandlersByType.mouse, _jsxAstUtils.eventHandlersByType.keyboard);\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/interactive-supports-focus.md',\n      description: 'Enforce that elements with interactive handlers like `onClick` must be focusable.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var tabbable = context.options && context.options[0] && context.options[0].tabbable || [];\n        var attributes = node.attributes;\n        var type = elementType(node);\n        var hasInteractiveProps = (0, _jsxAstUtils.hasAnyProp)(attributes, interactiveProps);\n        var hasTabindex = (0, _getTabIndex[\"default\"])((0, _jsxAstUtils.getProp)(attributes, 'tabIndex')) !== undefined;\n        if (!_ariaQuery.dom.has(type)) {\n          // Do not test higher level JSX components, as we do not know what\n          // low-level DOM element this maps to.\n          return;\n        }\n        if (!hasInteractiveProps || (0, _isDisabledElement[\"default\"])(attributes) || (0, _isHiddenFromScreenReader[\"default\"])(type, attributes) || (0, _isPresentationRole[\"default\"])(type, attributes)) {\n          // Presentation is an intentional signal from the author that this\n          // element is not meant to be perceivable. For example, a click screen\n          // to close a dialog .\n          return;\n        }\n        if (hasInteractiveProps && (0, _isInteractiveRole[\"default\"])(type, attributes) && !(0, _isInteractiveElement[\"default\"])(type, attributes) && !(0, _isNonInteractiveElement[\"default\"])(type, attributes) && !(0, _isNonInteractiveRole[\"default\"])(type, attributes) && !hasTabindex) {\n          var role = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(attributes, 'role'));\n          if ((0, _arrayIncludes[\"default\"])(tabbable, role)) {\n            // Always tabbable, tabIndex = 0\n            context.report({\n              node,\n              message: \"Elements with the '\".concat(role, \"' interactive role must be tabbable.\")\n            });\n          } else {\n            // Focusable, tabIndex = -1 or 0\n            context.report({\n              node,\n              message: \"Elements with the '\".concat(role, \"' interactive role must be focusable.\")\n            });\n          }\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}