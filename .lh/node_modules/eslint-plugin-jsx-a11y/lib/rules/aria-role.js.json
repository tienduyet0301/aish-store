{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-role.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _schemas = require(\"../util/schemas\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce aria role attribute is valid.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Elements with ARIA roles must use a valid, non-abstract ARIA role.';\nvar schema = (0, _schemas.generateObjSchema)({\n  allowedInvalidRoles: {\n    items: {\n      type: 'string'\n    },\n    type: 'array',\n    uniqueItems: true\n  },\n  ignoreNonDOM: {\n    type: 'boolean',\n    \"default\": false\n  }\n});\nvar validRoles = new Set(_ariaQuery.roles.keys().filter(function (role) {\n  return _ariaQuery.roles.get(role)[\"abstract\"] === false;\n}));\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-role.md',\n      description: 'Enforce that elements with ARIA roles must use a valid, non-abstract ARIA role.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options[0] || {};\n    var ignoreNonDOM = !!options.ignoreNonDOM;\n    var allowedInvalidRoles = new Set(options.allowedInvalidRoles || []);\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        // If ignoreNonDOM and the parent isn't DOM, don't run rule.\n        if (ignoreNonDOM) {\n          var type = elementType(attribute.parent);\n          if (!_ariaQuery.dom.get(type)) {\n            return;\n          }\n        }\n\n        // Get prop name\n        var name = (0, _jsxAstUtils.propName)(attribute).toUpperCase();\n        if (name !== 'ROLE') {\n          return;\n        }\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute);\n\n        // If value is undefined, then the role attribute will be dropped in the DOM.\n        // If value is null, then getLiteralAttributeValue is telling us that the\n        // value isn't in the form of a literal.\n        if (value === undefined || value === null) {\n          return;\n        }\n        var values = String(value).split(' ');\n        var isValid = values.every(function (val) {\n          return allowedInvalidRoles.has(val) || validRoles.has(val);\n        });\n        if (isValid === true) {\n          return;\n        }\n        context.report({\n          node: attribute,\n          message: errorMessage\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}