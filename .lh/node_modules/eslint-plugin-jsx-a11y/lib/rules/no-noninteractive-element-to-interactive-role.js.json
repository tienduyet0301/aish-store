{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/no-noninteractive-element-to-interactive-role.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _hasown = _interopRequireDefault(require(\"hasown\"));\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _getExplicitRole = _interopRequireDefault(require(\"../util/getExplicitRole\"));\nvar _isNonInteractiveElement = _interopRequireDefault(require(\"../util/isNonInteractiveElement\"));\nvar _isInteractiveRole = _interopRequireDefault(require(\"../util/isInteractiveRole\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Disallow inherently non-interactive elements to be assigned\n * interactive roles.\n * @author Jesse Beach\n * \n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Non-interactive elements should not be assigned interactive roles.';\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/no-noninteractive-element-to-interactive-role.md',\n      description: 'Non-interactive elements should not be assigned interactive roles.'\n    },\n    schema: [{\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'string'\n        },\n        uniqueItems: true\n      }\n    }]\n  },\n  create: function create(context) {\n    var options = context.options;\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var attributeName = (0, _jsxAstUtils.propName)(attribute);\n        // $FlowFixMe: [TODO] Mark propName as a JSXIdentifier, not a string.\n        if (attributeName !== 'role') {\n          return;\n        }\n        var node = attribute.parent;\n        var attributes = node.attributes;\n        var type = elementType(node);\n        var role = (0, _getExplicitRole[\"default\"])(type, node.attributes);\n        if (!_ariaQuery.dom.has(type)) {\n          // Do not test higher level JSX components, as we do not know what\n          // low-level DOM element this maps to.\n          return;\n        }\n        // Allow overrides from rule configuration for specific elements and\n        // roles.\n        var allowedRoles = options[0] || {};\n        if ((0, _hasown[\"default\"])(allowedRoles, type) && (0, _arrayIncludes[\"default\"])(allowedRoles[type], role)) {\n          return;\n        }\n        if ((0, _isNonInteractiveElement[\"default\"])(type, attributes) && (0, _isInteractiveRole[\"default\"])(type, attributes)) {\n          context.report({\n            node: attribute,\n            message: errorMessage\n          });\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}