{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getSuggestion = _interopRequireDefault(require(\"../util/getSuggestion\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce all aria-* properties are valid.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar ariaAttributes = _ariaQuery.aria.keys();\nvar errorMessage = function errorMessage(name) {\n  var suggestions = (0, _getSuggestion[\"default\"])(name, ariaAttributes);\n  var message = \"\".concat(name, \": This attribute is an invalid ARIA attribute.\");\n  if (suggestions.length > 0) {\n    return \"\".concat(message, \" Did you mean to use \").concat(suggestions, \"?\");\n  }\n  return message;\n};\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-props.md',\n      description: 'Enforce all `aria-*` props are valid.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n\n        // `aria` needs to be prefix of property.\n        if (name.indexOf('aria-') !== 0) {\n          return;\n        }\n        var isValid = _ariaQuery.aria.has(name);\n        if (isValid === false) {\n          context.report({\n            node: attribute,\n            message: errorMessage(name)\n          });\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}