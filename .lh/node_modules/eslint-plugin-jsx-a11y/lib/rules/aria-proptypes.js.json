{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-proptypes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\n/**\n * @fileoverview Enforce ARIA state and property values are valid.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(name, type, permittedValues) {\n  switch (type) {\n    case 'tristate':\n      return \"The value for \".concat(name, \" must be a boolean or the string \\\"mixed\\\".\");\n    case 'token':\n      return \"The value for \".concat(name, \" must be a single token from the following: \").concat(permittedValues, \".\");\n    case 'tokenlist':\n      return \"The value for \".concat(name, \" must be a list of one or more tokens from the following: \").concat(permittedValues, \".\");\n    case 'idlist':\n      return \"The value for \".concat(name, \" must be a list of strings that represent DOM element IDs (idlist)\");\n    case 'id':\n      return \"The value for \".concat(name, \" must be a string that represents a DOM element ID\");\n    case 'boolean':\n    case 'string':\n    case 'integer':\n    case 'number':\n    default:\n      return \"The value for \".concat(name, \" must be a \").concat(type, \".\");\n  }\n};\nvar _validityCheck = function validityCheck(value, expectedType, permittedValues) {\n  switch (expectedType) {\n    case 'boolean':\n      return typeof value === 'boolean';\n    case 'string':\n    case 'id':\n      return typeof value === 'string';\n    case 'tristate':\n      return typeof value === 'boolean' || value === 'mixed';\n    case 'integer':\n    case 'number':\n      // Booleans resolve to 0/1 values so hard check that it's not first.\n      // eslint-disable-next-line no-restricted-globals\n      return typeof value !== 'boolean' && isNaN(Number(value)) === false;\n    case 'token':\n      return permittedValues.indexOf(typeof value === 'string' ? value.toLowerCase() : value) > -1;\n    case 'idlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return _validityCheck(token, 'id', []);\n      });\n    case 'tokenlist':\n      return typeof value === 'string' && value.split(' ').every(function (token) {\n        return permittedValues.indexOf(token.toLowerCase()) > -1;\n      });\n    default:\n      return false;\n  }\n};\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = exports[\"default\"] = {\n  validityCheck: _validityCheck,\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-proptypes.md',\n      description: 'Enforce ARIA state and property values are valid.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    return {\n      JSXAttribute: function JSXAttribute(attribute) {\n        var name = (0, _jsxAstUtils.propName)(attribute);\n        var normalizedName = name.toLowerCase();\n\n        // Not a valid aria-* state or property.\n        if (normalizedName.indexOf('aria-') !== 0 || _ariaQuery.aria.get(normalizedName) === undefined) {\n          return;\n        }\n\n        // Ignore the attribute if its value is null or undefined.\n        if ((0, _jsxAstUtils.getPropValue)(attribute) == null) return;\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(attribute);\n\n        // Ignore the attribute if its value is not a literal.\n        if (value === null) {\n          return;\n        }\n\n        // These are the attributes of the property/state to check against.\n        var attributes = _ariaQuery.aria.get(normalizedName);\n        var permittedType = attributes.type;\n        var allowUndefined = attributes.allowUndefined || false;\n        var permittedValues = attributes.values || [];\n        var isValid = _validityCheck(value, permittedType, permittedValues) || allowUndefined && value === undefined;\n        if (isValid) {\n          return;\n        }\n        context.report({\n          node: attribute,\n          message: errorMessage(name, permittedType, permittedValues)\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}