{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/accessible-emoji.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _emojiRegex = _interopRequireDefault(require(\"emoji-regex\"));\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _safeRegexTest = _interopRequireDefault(require(\"safe-regex-test\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce emojis are wrapped in <span> and provide screen reader access.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = 'Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.';\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      description: 'Enforce emojis are wrapped in `<span>` and provide screen reader access.',\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/accessible-emoji.md'\n    },\n    deprecated: true,\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    var testEmoji = (0, _safeRegexTest[\"default\"])((0, _emojiRegex[\"default\"])());\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var literalChildValue = node.parent.children.find(function (child) {\n          return child.type === 'Literal' || child.type === 'JSXText';\n        });\n        if (literalChildValue && testEmoji(literalChildValue.value)) {\n          var elementIsHidden = (0, _isHiddenFromScreenReader[\"default\"])(elementType(node), node.attributes);\n          if (elementIsHidden) {\n            return; // emoji is decorative\n          }\n          var rolePropValue = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'role'));\n          var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n          var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n          var hasLabel = ariaLabelProp !== undefined || arialLabelledByProp !== undefined;\n          var isSpan = elementType(node) === 'span';\n          if (hasLabel === false || rolePropValue !== 'img' || isSpan === false) {\n            context.report({\n              node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}