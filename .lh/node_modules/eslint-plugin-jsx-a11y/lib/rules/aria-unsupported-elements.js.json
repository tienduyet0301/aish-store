{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/aria-unsupported-elements.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce that elements that do not support ARIA roles,\n *  states and properties do not have those attributes.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar errorMessage = function errorMessage(invalidProp) {\n  return \"This element does not support ARIA roles, states and properties. Try removing the prop '\".concat(invalidProp, \"'.\");\n};\nvar invalidAttributes = new Set(_ariaQuery.aria.keys().concat('role'));\nvar schema = (0, _schemas.generateObjSchema)();\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/aria-unsupported-elements.md',\n      description: 'Enforce that elements that do not support ARIA roles, states, and properties do not have those attributes.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var nodeType = elementType(node);\n        var nodeAttrs = _ariaQuery.dom.get(nodeType) || {};\n        var _nodeAttrs$reserved = nodeAttrs.reserved,\n          isReservedNodeType = _nodeAttrs$reserved === void 0 ? false : _nodeAttrs$reserved;\n\n        // If it's not reserved, then it can have aria-* roles, states, and properties\n        if (isReservedNodeType === false) {\n          return;\n        }\n        node.attributes.forEach(function (prop) {\n          if (prop.type === 'JSXSpreadAttribute') {\n            return;\n          }\n          var name = (0, _jsxAstUtils.propName)(prop).toLowerCase();\n          if (invalidAttributes.has(name)) {\n            context.report({\n              node,\n              message: errorMessage(name)\n            });\n          }\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}