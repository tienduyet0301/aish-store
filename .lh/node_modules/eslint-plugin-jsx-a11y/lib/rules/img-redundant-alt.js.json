{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/img-redundant-alt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892260280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _stringPrototype = _interopRequireDefault(require(\"string.prototype.includes\"));\nvar _safeRegexTest = _interopRequireDefault(require(\"safe-regex-test\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"../util/isHiddenFromScreenReader\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce img alt attribute does not have the word image, picture, or photo.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar REDUNDANT_WORDS = ['image', 'photo', 'picture'];\nvar errorMessage = 'Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.';\nvar schema = (0, _schemas.generateObjSchema)({\n  components: _schemas.arraySchema,\n  words: _schemas.arraySchema\n});\nvar isASCII = (0, _safeRegexTest[\"default\"])(/[\\x20-\\x7F]+/);\nfunction containsRedundantWord(value, redundantWords) {\n  var lowercaseRedundantWords = redundantWords.map(function (redundantWord) {\n    return redundantWord.toLowerCase();\n  });\n  if (isASCII(value)) {\n    return value.split(/\\s+/).some(function (valueWord) {\n      return (0, _arrayIncludes[\"default\"])(lowercaseRedundantWords, valueWord.toLowerCase());\n    });\n  }\n  return lowercaseRedundantWords.some(function (redundantWord) {\n    return (0, _stringPrototype[\"default\"])(value.toLowerCase(), redundantWord);\n  });\n}\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/img-redundant-alt.md',\n      description: 'Enforce `<img>` alt prop does not contain the word \"image\", \"picture\", or \"photo\".'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var componentOptions = options.components || [];\n        var typesToValidate = ['img'].concat(componentOptions);\n        var nodeType = elementType(node);\n\n        // Only check 'label' elements and custom types.\n        if (typesToValidate.indexOf(nodeType) === -1) {\n          return;\n        }\n        var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n        // Return if alt prop is not present.\n        if (altProp === undefined) {\n          return;\n        }\n        var value = (0, _jsxAstUtils.getLiteralPropValue)(altProp);\n        var isVisible = (0, _isHiddenFromScreenReader[\"default\"])(nodeType, node.attributes) === false;\n        var _options$words = options.words,\n          words = _options$words === void 0 ? [] : _options$words;\n        var redundantWords = REDUNDANT_WORDS.concat(words);\n        if (typeof value === 'string' && isVisible) {\n          var hasRedundancy = containsRedundantWord(value, redundantWords);\n          if (hasRedundancy === true) {\n            context.report({\n              node,\n              message: errorMessage\n            });\n          }\n        }\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}