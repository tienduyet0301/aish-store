{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/alt-text.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayPrototype = _interopRequireDefault(require(\"array.prototype.flatmap\"));\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nvar _hasAccessibleChild = _interopRequireDefault(require(\"../util/hasAccessibleChild\"));\nvar _isPresentationRole = _interopRequireDefault(require(\"../util/isPresentationRole\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Enforce all elements that require alternative text have it.\n * @author Ethan Cohen\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar DEFAULT_ELEMENTS = ['img', 'object', 'area', 'input[type=\"image\"]'];\nvar schema = (0, _schemas.generateObjSchema)({\n  elements: _schemas.arraySchema,\n  img: _schemas.arraySchema,\n  object: _schemas.arraySchema,\n  area: _schemas.arraySchema,\n  'input[type=\"image\"]': _schemas.arraySchema\n});\nvar ariaLabelHasValue = function ariaLabelHasValue(prop) {\n  var value = (0, _jsxAstUtils.getPropValue)(prop);\n  if (value === undefined) {\n    return false;\n  }\n  if (typeof value === 'string' && value.length === 0) {\n    return false;\n  }\n  return true;\n};\nvar ruleByElement = {\n  img(context, node, nodeType) {\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n\n    // Missing alt prop error.\n    if (altProp === undefined) {\n      if ((0, _isPresentationRole[\"default\"])(nodeType, node.attributes)) {\n        context.report({\n          node,\n          message: 'Prefer alt=\"\" over a presentational role. First rule of aria is to not use aria if it can be achieved via native HTML.'\n        });\n        return;\n      }\n      // Check for `aria-label` to provide text alternative\n      // Don't create an error if the attribute is used correctly. But if it\n      // isn't, suggest that the developer use `alt` instead.\n      var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n      if (ariaLabelProp !== undefined) {\n        if (!ariaLabelHasValue(ariaLabelProp)) {\n          context.report({\n            node,\n            message: 'The aria-label attribute must have a value. The alt attribute is preferred over aria-label for images.'\n          });\n        }\n        return;\n      }\n      // Check for `aria-labelledby` to provide text alternative\n      // Don't create an error if the attribute is used correctly. But if it\n      // isn't, suggest that the developer use `alt` instead.\n      var ariaLabelledbyProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n      if (ariaLabelledbyProp !== undefined) {\n        if (!ariaLabelHasValue(ariaLabelledbyProp)) {\n          context.report({\n            node,\n            message: 'The aria-labelledby attribute must have a value. The alt attribute is preferred over aria-labelledby for images.'\n          });\n        }\n        return;\n      }\n      context.report({\n        node,\n        message: \"\".concat(nodeType, \" elements must have an alt prop, either with meaningful text, or an empty string for decorative images.\")\n      });\n      return;\n    }\n\n    // Check if alt prop is undefined.\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <img alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n\n    // Undefined alt prop error.\n    context.report({\n      node,\n      message: \"Invalid alt value for \".concat(nodeType, \". Use alt=\\\"\\\" for presentational images.\")\n    });\n  },\n  object(context, node, unusedNodeType, elementType) {\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n    var titleProp = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'title'));\n    var hasTitleAttr = !!titleProp;\n    if (hasLabel || hasTitleAttr || (0, _hasAccessibleChild[\"default\"])(node.parent, elementType)) {\n      return;\n    }\n    context.report({\n      node,\n      message: 'Embedded <object> elements must have alternative text by providing inner text, aria-label or aria-labelledby props.'\n    });\n  },\n  area(context, node) {\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n    if (hasLabel) {\n      return;\n    }\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n    if (altProp === undefined) {\n      context.report({\n        node,\n        message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n      });\n      return;\n    }\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <area alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n    context.report({\n      node,\n      message: 'Each area of an image map must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n    });\n  },\n  'input[type=\"image\"]': function inputImage(context, node, nodeType) {\n    // Only test input[type=\"image\"]\n    if (nodeType === 'input') {\n      var typePropValue = (0, _jsxAstUtils.getPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'type'));\n      if (typePropValue !== 'image') {\n        return;\n      }\n    }\n    var ariaLabelProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-label');\n    var arialLabelledByProp = (0, _jsxAstUtils.getProp)(node.attributes, 'aria-labelledby');\n    var hasLabel = ariaLabelHasValue(ariaLabelProp) || ariaLabelHasValue(arialLabelledByProp);\n    if (hasLabel) {\n      return;\n    }\n    var altProp = (0, _jsxAstUtils.getProp)(node.attributes, 'alt');\n    if (altProp === undefined) {\n      context.report({\n        node,\n        message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n      });\n      return;\n    }\n    var altValue = (0, _jsxAstUtils.getPropValue)(altProp);\n    var isNullValued = altProp.value === null; // <area alt />\n\n    if (altValue && !isNullValued || altValue === '') {\n      return;\n    }\n    context.report({\n      node,\n      message: '<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.'\n    });\n  }\n};\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/alt-text.md',\n      description: 'Enforce all elements that require alternative text have meaningful information to relay back to end user.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var options = context.options[0] || {};\n    // Elements to validate for alt text.\n    var elementOptions = options.elements || DEFAULT_ELEMENTS;\n    // Get custom components for just the elements that will be tested.\n    var customComponents = (0, _arrayPrototype[\"default\"])(elementOptions, function (element) {\n      return options[element];\n    });\n    var typesToValidate = new Set([].concat(customComponents, elementOptions).map(function (type) {\n      return type === 'input[type=\"image\"]' ? 'input' : type;\n    }));\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement(node) {\n        var nodeType = elementType(node);\n        if (!typesToValidate.has(nodeType)) {\n          return;\n        }\n        var DOMElement = nodeType;\n        if (DOMElement === 'input') {\n          DOMElement = 'input[type=\"image\"]';\n        }\n\n        // Map nodeType to the DOM element if we are running this on a custom component.\n        if (elementOptions.indexOf(DOMElement) === -1) {\n          DOMElement = elementOptions.find(function (element) {\n            var customComponentsForElement = options[element] || [];\n            return customComponentsForElement.indexOf(nodeType) > -1;\n          });\n        }\n        ruleByElement[DOMElement](context, node, nodeType, elementType);\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}