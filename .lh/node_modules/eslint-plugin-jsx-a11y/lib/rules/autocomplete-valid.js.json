{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/rules/autocomplete-valid.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892259974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _axeCore = require(\"axe-core\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _schemas = require(\"../util/schemas\");\nvar _getElementType = _interopRequireDefault(require(\"../util/getElementType\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * @fileoverview Ensure autocomplete attribute is correct.\n * @author Wilco Fiers\n */\n\n// ----------------------------------------------------------------------------\n// Rule Definition\n// ----------------------------------------------------------------------------\n\nvar schema = (0, _schemas.generateObjSchema)({\n  inputComponents: _schemas.arraySchema\n});\nvar _default = exports[\"default\"] = {\n  meta: {\n    docs: {\n      url: 'https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/tree/HEAD/docs/rules/autocomplete-valid.md',\n      description: 'Enforce that autocomplete attributes are used correctly.'\n    },\n    schema: [schema]\n  },\n  create: function create(context) {\n    var elementType = (0, _getElementType[\"default\"])(context);\n    return {\n      JSXOpeningElement: function JSXOpeningElement(node) {\n        var options = context.options[0] || {};\n        var _options$inputCompone = options.inputComponents,\n          inputComponents = _options$inputCompone === void 0 ? [] : _options$inputCompone;\n        var inputTypes = ['input'].concat(inputComponents);\n        var elType = elementType(node);\n        var autocomplete = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'autocomplete'));\n        if (typeof autocomplete !== 'string' || !inputTypes.includes(elType)) {\n          return;\n        }\n        var type = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.attributes, 'type'));\n        var _runVirtualRule = (0, _axeCore.runVirtualRule)('autocomplete-valid', {\n            nodeName: 'input',\n            attributes: {\n              autocomplete,\n              // Which autocomplete is valid depends on the input type\n              type: type === null ? undefined : type\n            }\n          }),\n          violations = _runVirtualRule.violations;\n        if (violations.length === 0) {\n          return;\n        }\n        // Since we only test one rule, with one node, return the message from first (and only) instance of each\n        context.report({\n          node,\n          message: violations[0].nodes[0].all[0].message\n        });\n      }\n    };\n  }\n};\nmodule.exports = exports.default;"
        }
    ]
}