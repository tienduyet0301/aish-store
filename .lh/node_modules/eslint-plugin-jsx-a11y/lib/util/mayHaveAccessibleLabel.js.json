{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/util/mayHaveAccessibleLabel.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = mayHaveAccessibleLabel;\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _minimatch = _interopRequireDefault(require(\"minimatch\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns true if a labelling element is found or if it cannot determine if\n * a label is present because of expression containers or spread attributes.\n * A false return value means that the node definitely does not have a label,\n * but a true return return value means that the node may or may not have a\n * label.\n *\n * \n */\n\nfunction tryTrim(value) {\n  return typeof value === 'string' ? value.trim() : value;\n}\nfunction hasLabellingProp(openingElement) {\n  var additionalLabellingProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var labellingProps = [].concat('alt',\n  // Assume alt is used correctly on an image\n  'aria-label', 'aria-labelledby', additionalLabellingProps);\n  return openingElement.attributes.some(function (attribute) {\n    // We must assume that a spread value contains a labelling prop.\n    if (attribute.type !== 'JSXAttribute') {\n      return true;\n    }\n    // Attribute matches.\n    if ((0, _arrayIncludes[\"default\"])(labellingProps, (0, _jsxAstUtils.propName)(attribute)) && !!tryTrim((0, _jsxAstUtils.getPropValue)(attribute))) {\n      return true;\n    }\n    return false;\n  });\n}\nfunction mayHaveAccessibleLabel(root) {\n  var maxDepth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var additionalLabellingProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var getElementType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _jsxAstUtils.elementType;\n  var controlComponents = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  function checkElement(node, depth) {\n    // Bail when maxDepth is exceeded.\n    if (depth > maxDepth) {\n      return false;\n    }\n    // Check for literal text.\n    if (node.type === 'Literal' && !!tryTrim(node.value)) {\n      return true;\n    }\n    // Assume an expression container renders a label. It is the best we can\n    // do in this case.\n    if (node.type === 'JSXExpressionContainer') {\n      return true;\n    }\n    // Check for JSXText.\n    // $FlowFixMe Remove after updating ast-types-flow\n    if (node.type === 'JSXText' && !!tryTrim(node.value)) {\n      return true;\n    }\n    // Check for labelling props.\n    if (node.openingElement\n    /* $FlowFixMe */ && hasLabellingProp(node.openingElement, additionalLabellingProps)) {\n      return true;\n    }\n    if (node.type === 'JSXElement' && node.children.length === 0 && node.openingElement) {\n      // $FlowFixMe `node.openingElement` has `unknown` type\n      var name = getElementType(node.openingElement);\n      var isReactComponent = name.length > 0 && name[0] === name[0].toUpperCase();\n      if (isReactComponent && !controlComponents.some(function (control) {\n        return (0, _minimatch[\"default\"])(name, control);\n      })) {\n        return true;\n      }\n    }\n\n    // Recurse into the child element nodes.\n    if (node.children) {\n      /* $FlowFixMe */\n      for (var i = 0; i < node.children.length; i += 1) {\n        /* $FlowFixMe */\n        if (checkElement(node.children[i], depth + 1)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  return checkElement(root, 0);\n}\nmodule.exports = exports.default;"
        }
    ]
}