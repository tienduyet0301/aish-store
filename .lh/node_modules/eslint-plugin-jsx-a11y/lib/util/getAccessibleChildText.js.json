{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/util/getAccessibleChildText.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892261232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getAccessibleChildText;\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _isHiddenFromScreenReader = _interopRequireDefault(require(\"./isHiddenFromScreenReader\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n/**\n * Returns a new \"standardized\" string: all whitespace is collapsed to one space,\n * and the string is lowercase\n * @param {string} input\n * @returns lowercase, single-spaced, punctuation-stripped, trimmed string\n */\nfunction standardizeSpaceAndCase(input) {\n  return input.trim().replace(/[,.?¿!‽¡;:]/g, '') // strip punctuation\n  .replace(/\\s\\s+/g, ' ') // collapse spaces\n  .toLowerCase();\n}\n\n/**\n * Returns the (recursively-defined) accessible child text of a node, which (in-order) is:\n * 1. The element's aria-label\n * 2. If the element is a direct literal, the literal value\n * 3. Otherwise, merge all of its children\n * @param {JSXElement} node - node to traverse\n * @returns child text as a string\n */\nfunction getAccessibleChildText(node, elementType) {\n  var ariaLabel = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.openingElement.attributes, 'aria-label'));\n  // early escape-hatch when aria-label is applied\n  if (ariaLabel) return standardizeSpaceAndCase(ariaLabel);\n\n  // early-return if alt prop exists and is an image\n  var altTag = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(node.openingElement.attributes, 'alt'));\n  if (elementType(node.openingElement) === 'img' && altTag) return standardizeSpaceAndCase(altTag);\n\n  // skip if aria-hidden is true\n  if ((0, _isHiddenFromScreenReader[\"default\"])(elementType(node.openingElement), node.openingElement.attributes)) {\n    return '';\n  }\n  var rawChildText = node.children.map(function (currentNode) {\n    // $FlowFixMe JSXText is missing in ast-types-flow\n    if (currentNode.type === 'Literal' || currentNode.type === 'JSXText') {\n      return String(currentNode.value);\n    }\n    if (currentNode.type === 'JSXElement') {\n      return getAccessibleChildText(currentNode, elementType);\n    }\n    return '';\n  }).join(' ');\n  return standardizeSpaceAndCase(rawChildText);\n}\nmodule.exports = exports.default;"
        }
    ]
}