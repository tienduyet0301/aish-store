{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/util/isNonInteractiveRole.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892262881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _arrayPrototype = _interopRequireDefault(require(\"array.prototype.flatmap\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar nonInteractiveRoles = _ariaQuery.roles.keys().filter(function (name) {\n  return !_ariaQuery.roles.get(name)[\"abstract\"] && !_ariaQuery.roles.get(name).superClass.some(function (klasses) {\n    return (0, _arrayIncludes[\"default\"])(klasses, 'widget');\n  });\n});\n\n/**\n * Returns boolean indicating whether the given element has a role\n * that is associated with a non-interactive component. Non-interactive roles\n * include `listitem`, `article`, or `dialog`. These are roles that indicate\n * for the most part containers.\n *\n * Elements with these roles should not respond or handle user interactions.\n * For example, an `onClick` handler should not be assigned to an element with\n * the role `listitem`. An element inside the `listitem`, like a button or a\n * link, should handle the click.\n *\n * This utility returns true for elements that are assigned a non-interactive\n * role. It will return false for elements that do not have a role. So whereas\n * a `div` might be considered non-interactive, for the purpose of this utility,\n * it is considered neither interactive nor non-interactive -- a determination\n * cannot be made in this case and false is returned.\n */\n\nvar isNonInteractiveRole = function isNonInteractiveRole(tagName, attributes) {\n  // Do not test higher level JSX components, as we do not know what\n  // low-level DOM element this maps to.\n  if (!_ariaQuery.dom.has(tagName)) {\n    return false;\n  }\n  var role = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(attributes, 'role'));\n  var isNonInteractive = false;\n  var normalizedValues = String(role).toLowerCase().split(' ');\n  var validRoles = (0, _arrayPrototype[\"default\"])(normalizedValues, function (name) {\n    return _ariaQuery.roles.has(name) ? [name] : [];\n  });\n  if (validRoles.length > 0) {\n    // The first role value is a series takes precedence.\n    isNonInteractive = (0, _arrayIncludes[\"default\"])(nonInteractiveRoles, validRoles[0]);\n  }\n  return isNonInteractive;\n};\nvar _default = exports[\"default\"] = isNonInteractiveRole;\nmodule.exports = exports.default;"
        }
    ]
}