{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/util/isInteractiveRole.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892262824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _ariaQuery = require(\"aria-query\");\nvar _jsxAstUtils = require(\"jsx-ast-utils\");\nvar _arrayIncludes = _interopRequireDefault(require(\"array-includes\"));\nvar _arrayPrototype = _interopRequireDefault(require(\"array.prototype.flatmap\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\nvar roles = _ariaQuery.roles.keys();\nvar interactiveRoles = roles.filter(function (name) {\n  return !_ariaQuery.roles.get(name)[\"abstract\"] && _ariaQuery.roles.get(name).superClass.some(function (klasses) {\n    return (0, _arrayIncludes[\"default\"])(klasses, 'widget');\n  });\n});\n\n// 'toolbar' does not descend from widget, but it does support\n// aria-activedescendant, thus in practice we treat it as a widget.\ninteractiveRoles.push('toolbar');\n/**\n * Returns boolean indicating whether the given element has a role\n * that is associated with an interactive component. Used when an element\n * has a dynamic handler on it and we need to discern whether or not\n * its intention is to be interacted with in the DOM.\n *\n * isInteractiveRole is a Logical Disjunction:\n * https://en.wikipedia.org/wiki/Logical_disjunction\n * The JSX element does not have a tagName or it has a tagName and a role\n * attribute with a value in the set of non-interactive roles.\n */\nvar isInteractiveRole = function isInteractiveRole(tagName, attributes) {\n  var value = (0, _jsxAstUtils.getLiteralPropValue)((0, _jsxAstUtils.getProp)(attributes, 'role'));\n\n  // If value is undefined, then the role attribute will be dropped in the DOM.\n  // If value is null, then getLiteralAttributeValue is telling us that the\n  // value isn't in the form of a literal\n  if (value === undefined || value === null) {\n    return false;\n  }\n  var isInteractive = false;\n  var normalizedValues = String(value).toLowerCase().split(' ');\n  var validRoles = (0, _arrayPrototype[\"default\"])(normalizedValues, function (name) {\n    return (0, _arrayIncludes[\"default\"])(roles, name) ? [name] : [];\n  });\n  if (validRoles.length > 0) {\n    // The first role value is a series takes precedence.\n    isInteractive = (0, _arrayIncludes[\"default\"])(interactiveRoles, validRoles[0]);\n  }\n  return isInteractive;\n};\nvar _default = exports[\"default\"] = isInteractiveRole;\nmodule.exports = exports.default;"
        }
    ]
}