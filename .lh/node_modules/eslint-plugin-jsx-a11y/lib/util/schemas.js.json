{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/util/schemas.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892263151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateObjSchema = exports.enumArraySchema = exports.arraySchema = void 0;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/**\n * JSON schema to accept an array of unique strings\n */\nvar arraySchema = exports.arraySchema = {\n  type: 'array',\n  items: {\n    type: 'string'\n  },\n  uniqueItems: true,\n  additionalItems: false\n};\n\n/**\n * JSON schema to accept an array of unique strings from an enumerated list.\n */\nvar enumArraySchema = exports.enumArraySchema = function enumArraySchema() {\n  var enumeratedList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return _objectSpread(_objectSpread({}, arraySchema), {}, {\n    items: {\n      type: 'string',\n      \"enum\": enumeratedList\n    },\n    minItems\n  });\n};\n\n/**\n * Factory function to generate an object schema\n * with specified properties object\n */\nvar generateObjSchema = exports.generateObjSchema = function generateObjSchema() {\n  var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var required = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  return {\n    type: 'object',\n    properties,\n    required\n  };\n};"
        }
    ]
}