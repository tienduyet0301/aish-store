{
    "sourceFile": "node_modules/eslint-plugin-jsx-a11y/lib/util/getSuggestion.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892261401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getSuggestion;\nvar _damerauLevenshtein = _interopRequireDefault(require(\"damerau-levenshtein\"));\nvar _object = _interopRequireDefault(require(\"object.fromentries\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { \"default\": e }; }\n// Minimum edit distance to be considered a good suggestion.\nvar THRESHOLD = 2;\n\n/**\n * Returns an array of suggestions given a word and a dictionary and limit of suggestions\n * to return.\n */\nfunction getSuggestion(word) {\n  var dictionary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  var distances = (0, _object[\"default\"])(dictionary.map(function (dictionaryWord) {\n    var distance = (0, _damerauLevenshtein[\"default\"])(word.toUpperCase(), dictionaryWord.toUpperCase());\n    var steps = distance.steps;\n    return [dictionaryWord, steps];\n  }));\n  return Object.keys(distances).filter(function (suggestion) {\n    return distances[suggestion] <= THRESHOLD;\n  }).sort(function (a, b) {\n    return distances[a] - distances[b];\n  }) // Sort by distance\n  .slice(0, limit);\n}\nmodule.exports = exports.default;"
        }
    ]
}