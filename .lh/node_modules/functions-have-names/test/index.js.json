{
    "sourceFile": "node_modules/functions-have-names/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892314232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\n\nvar hasNames = require('../');\n\ntest('named functions', function (t) {\n\tfunction f() {} // eslint-disable-line func-style\n\tvar g = function h() {};\n\n\tt.equal(typeof hasNames, 'function', 'is a function');\n\tt.equal(hasNames(), f.name === 'f' && g.name === 'h', 'functions have names or not as expected');\n\n\tt.end();\n});\n\nvar oDP = Object.defineProperty;\nif (oDP) {\n\ttry {\n\t\toDP({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\toDP = null;\n\t}\n}\n\ntest('functionsHaveConfigurableNames', function (t) {\n\tt.equal(typeof hasNames.functionsHaveConfigurableNames, 'function', 'is a function');\n\n\tif (hasNames()) {\n\t\tvar fn = function f() {};\n\t\tif (oDP) {\n\t\t\ttry {\n\t\t\t\toDP(fn, 'name', { configurable: true, value: 'foo' });\n\t\t\t} catch (e) {}\n\t\t\tif (fn.name === 'f') {\n\t\t\t\tt.equal(hasNames.functionsHaveConfigurableNames(), false, 'function names are not configurable');\n\t\t\t} else if (fn.name === 'foo') {\n\t\t\t\tt.equal(hasNames.functionsHaveConfigurableNames(), true, 'function names are not configurable');\n\t\t\t} else {\n\t\t\t\tt.fail('functions have names, but something surprising has happened. Please report this!');\n\t\t\t}\n\t\t} else {\n\t\t\tt.equal(hasNames.functionsHaveConfigurableNames(), false, 'function names are not configurable');\n\t\t}\n\t} else {\n\t\tt.equal(hasNames.functionsHaveConfigurableNames(), false, 'functions do not have names');\n\t}\n\n\tt.end();\n});\n\ntest('boundFunctionsHaveNames', function (t) {\n\tt.equal(typeof hasNames.boundFunctionsHaveNames, 'function', 'is a function');\n\n\tvar fn = function f() {};\n\tif (typeof fn.bind !== 'function') {\n\t\tt.equal(hasNames.boundFunctionsHaveNames(), false, 'bound functions do not have names, because .bind does not exist');\n\t} else if (hasNames()) {\n\t\tt.equal(hasNames.boundFunctionsHaveNames(), fn.bind().name !== '', 'bound functions have names');\n\t} else {\n\t\tt.equal(hasNames.boundFunctionsHaveNames(), false, 'bound functions do not have names, because none do');\n\t}\n\n\tt.end();\n});\n"
        }
    ]
}