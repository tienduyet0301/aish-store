{
    "sourceFile": "node_modules/array.prototype.flat/test/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892031477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar testArray = function testArray(t, actual, expected, msg) {\n\tt.deepEqual(actual, expected, msg);\n\tt.equal(actual.length, expected.length, 'expected ' + expected.length + ', got ' + actual.length);\n};\n\nmodule.exports = function (flat, t) {\n\tt.test('flattens', function (st) {\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]]), [1, 2, [3], [['four']]], 'missing depth only flattens 1 deep');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, [3], [['four']]], 'depth of 1 only flattens 1 deep');\n\t\tst.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 1), [1, 2, 3, ['four']], 'depth of 1 only flattens 1 deep: sanity check');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, ['four']], 'depth of 2 only flattens 2 deep');\n\t\tst.notDeepEqual(flat([1, [2], [[3]], [[['four']]]], 2), [1, 2, 3, 'four'], 'depth of 2 only flattens 2 deep: sanity check');\n\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], 3), [1, 2, 3, 'four'], 'depth of 3 only flattens 3 deep');\n\t\ttestArray(st, flat([1, [2], [[3]], [[['four']]]], Infinity), [1, 2, 3, 'four'], 'depth of Infinity flattens all the way');\n\n\t\tst.end();\n\t});\n\n\tt.test('sparse arrays', function (st) {\n\t\t// eslint-disable-next-line no-sparse-arrays\n\t\tst.deepEqual(flat([, [1]]), flat([[], [1]]), 'an array hole is treated the same as an empty array');\n\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}