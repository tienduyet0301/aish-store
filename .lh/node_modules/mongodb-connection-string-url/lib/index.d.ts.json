{
    "sourceFile": "node_modules/mongodb-connection-string-url/lib/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892637374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { URL } from 'whatwg-url';\nimport { redactConnectionString, ConnectionStringRedactionOptions } from './redact';\nexport { redactConnectionString, ConnectionStringRedactionOptions };\ndeclare class CaseInsensitiveMap<K extends string = string> extends Map<K, string> {\n    delete(name: K): boolean;\n    get(name: K): string | undefined;\n    has(name: K): boolean;\n    set(name: K, value: any): this;\n    _normalizeKey(name: any): K;\n}\ndeclare abstract class URLWithoutHost extends URL {\n    abstract get host(): never;\n    abstract set host(value: never);\n    abstract get hostname(): never;\n    abstract set hostname(value: never);\n    abstract get port(): never;\n    abstract set port(value: never);\n    abstract get href(): string;\n    abstract set href(value: string);\n}\nexport interface ConnectionStringParsingOptions {\n    looseValidation?: boolean;\n}\nexport declare class ConnectionString extends URLWithoutHost {\n    _hosts: string[];\n    constructor(uri: string, options?: ConnectionStringParsingOptions);\n    get host(): never;\n    set host(_ignored: never);\n    get hostname(): never;\n    set hostname(_ignored: never);\n    get port(): never;\n    set port(_ignored: never);\n    get href(): string;\n    set href(_ignored: string);\n    get isSRV(): boolean;\n    get hosts(): string[];\n    set hosts(list: string[]);\n    toString(): string;\n    clone(): ConnectionString;\n    redact(options?: ConnectionStringRedactionOptions): ConnectionString;\n    typedSearchParams<T extends {}>(): {\n        append(name: keyof T & string, value: any): void;\n        delete(name: keyof T & string): void;\n        get(name: keyof T & string): string | null;\n        getAll(name: keyof T & string): string[];\n        has(name: keyof T & string): boolean;\n        set(name: keyof T & string, value: any): void;\n        keys(): IterableIterator<keyof T & string>;\n        values(): IterableIterator<string>;\n        entries(): IterableIterator<[keyof T & string, string]>;\n        _normalizeKey(name: keyof T & string): string;\n        [Symbol.iterator](): IterableIterator<[keyof T & string, string]>;\n        sort(): void;\n        forEach<THIS_ARG = void>(callback: (this: THIS_ARG, value: string, name: string, searchParams: any) => void, thisArg?: THIS_ARG | undefined): void;\n        readonly [Symbol.toStringTag]: \"URLSearchParams\";\n    };\n}\nexport declare class CommaAndColonSeparatedRecord<K extends {} = Record<string, unknown>> extends CaseInsensitiveMap<keyof K & string> {\n    constructor(from?: string | null);\n    toString(): string;\n}\nexport default ConnectionString;\n"
        }
    ]
}