{
    "sourceFile": "node_modules/pretty-format/plugins/ReactTestComponent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892973899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst printString = require('../printString');\n\nconst reactTestInstance = Symbol.for('react.test.json');\n\nfunction printChildren(children, print, indent, opts) {\n  return children.map(child => printInstance(child, print, indent, opts)).join(opts.edgeSpacing);\n}\n\nfunction printProps(props, print, indent, opts) {\n  return Object.keys(props).sort().map(name => {\n    const prop = props[name];\n    let printed = print(prop);\n\n    if (typeof prop !== 'string') {\n      if (printed.indexOf('\\n') !== -1) {\n        printed = '{' + opts.edgeSpacing + indent(indent(printed) + opts.edgeSpacing + '}');\n      } else {\n        printed = '{' + printed + '}';\n      }\n    }\n\n    return opts.spacing + indent(name + '=') + printed;\n  }).join('');\n}\n\nfunction printInstance(instance, print, indent, opts) {\n  if (typeof instance == 'number') {\n    return print(instance);\n  } else if (typeof instance === 'string') {\n    return printString(instance);\n  }\n\n  let result = '<' + instance.type;\n\n  if (instance.props) {\n    result += printProps(instance.props, print, indent, opts);\n  }\n\n  if (instance.children) {\n    const children = printChildren(instance.children, print, indent, opts);\n    result += '>' + opts.edgeSpacing + indent(children) + opts.edgeSpacing + '</' + instance.type + '>';\n  } else {\n    result += ' />';\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  test(object) {\n    return object && object.$$typeof === reactTestInstance;\n  },\n  print(val, print, indent, opts) {\n    return printInstance(val, print, indent, opts);\n  }\n};\n"
        }
    ]
}