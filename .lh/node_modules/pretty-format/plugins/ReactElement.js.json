{
    "sourceFile": "node_modules/pretty-format/plugins/ReactElement.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892973831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst printString = require('../printString');\n\nconst reactElement = Symbol.for('react.element');\n\nfunction traverseChildren(opaqueChildren, cb) {\n  if (Array.isArray(opaqueChildren)) {\n    opaqueChildren.forEach(child => traverseChildren(child, cb));\n  } else if (opaqueChildren != null && opaqueChildren !== false) {\n    cb(opaqueChildren);\n  }\n}\n\nfunction printChildren(flatChildren, print, indent, opts) {\n  return flatChildren.map(node => {\n    if (typeof node === 'object') {\n      return printElement(node, print, indent, opts);\n    } else if (typeof node === 'string') {\n      return printString(node);\n    } else {\n      return print(node);\n    }\n  }).join(opts.edgeSpacing);\n}\n\nfunction printProps(props, print, indent, opts) {\n  return Object.keys(props).sort().map(name => {\n    if (name === 'children') {\n      return '';\n    }\n\n    const prop = props[name];\n    let printed = print(prop);\n\n    if (typeof prop !== 'string') {\n      if (printed.indexOf('\\n') !== -1) {\n        printed = '{' + opts.edgeSpacing + indent(indent(printed) + opts.edgeSpacing + '}');\n      } else {\n        printed = '{' + printed + '}';\n      }\n    }\n\n    return opts.spacing + indent(name + '=') + printed;\n  }).join('');\n}\n\nfunction printElement(element, print, indent, opts) {\n  let result = '<' + element.type;\n  result += printProps(element.props, print, indent, opts);\n\n  const opaqueChildren = element.props.children;\n  if (opaqueChildren) {\n    let flatChildren = [];\n    traverseChildren(opaqueChildren, child => {\n      flatChildren.push(child);\n    });\n    const children = printChildren(flatChildren, print, indent, opts);\n    result += '>' + opts.edgeSpacing + indent(children) + opts.edgeSpacing + '</' + element.type + '>';\n  } else {\n    result += ' />';\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  test(object) {\n    return object && object.$$typeof === reactElement;\n  },\n  print(val, print, indent, opts) {\n    return printElement(val, print, indent, opts);\n  }\n};\n"
        }
    ]
}