{
    "sourceFile": "node_modules/pretty-format/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892974043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# pretty-format [![Travis build status](http://img.shields.io/travis/thejameskyle/pretty-format.svg?style=flat)](https://travis-ci.org/thejameskyle/pretty-format)\n\n> Stringify any JavaScript value.\n\n- Supports [all built-in JavaScript types](#type-support)\n- [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd) (similar performance to v8's `JSON.stringify` and significantly faster than Node's `util.format`)\n- Plugin system for extending with custom types (i.e. [`ReactTestComponent`](#reacttestcomponent-plugin))\n\n\n## Installation\n\n```sh\n$ npm install pretty-format\n```\n\n## Usage\n\n```js\nvar prettyFormat = require('pretty-format');\n\nvar obj = { property: {} };\nobj.circularReference = obj;\nobj[Symbol('foo')] = 'foo';\nobj.map = new Map();\nobj.map.set('prop', 'value');\nobj.array = [1, NaN, Infinity];\n\nconsole.log(prettyFormat(obj));\n```\n\n**Result:**\n\n```js\nObject {\n  \"property\": Object {},\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\"\n  },\n  \"array\": Array [\n    1,\n    NaN,\n    Infinity\n  ],\n  Symbol(foo): \"foo\"\n}\n```\n\n#### Type Support\n\n`Object`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`, `arguments`, `Boolean`, `Date`, `Error`, `Function`, `Infinity`, `Map`, `NaN`, `null`, `Number`, `RegExp`, `Set`, `String`, `Symbol`, `undefined`, `WeakMap`, `WeakSet`\n\n### Plugins\n\nPretty format also supports adding plugins:\n\n```js\nvar fooPlugin = {\n  test: function(val) {\n    return val && val.hasOwnProperty('foo');\n  },\n  print: function(val, print, indent) {\n    return 'Foo: ' + print(val.foo);\n  }\n};\n\nvar obj = { foo: { bar: {} } };\n\nprettyFormat(obj, {\n  plugins: [fooPlugin]\n});\n// Foo: Object {\n//   \"bar\": Object {}\n// }\n```\n\n#### `ReactTestComponent` plugin\n\n```js\nvar prettyFormat = require('pretty-format');\nvar reactPlugin = require('pretty-format/plugins/ReactTestComponent');\n\nvar React = require('react');\nvar renderer = require('react/lib/ReactTestRenderer');\n\nvar jsx = React.createElement('h1', null, 'Hello World');\n\nprettyFormat(renderer.create(jsx).toJSON(), {\n  plugins: [reactPlugin]\n});\n// <h1>\n//   Hello World\n// </h1>\n```\n"
        }
    ]
}