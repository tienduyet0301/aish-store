{
    "sourceFile": "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/is-recursive-symlink.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893054261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isRecursive = exports.isRecursiveAsync = void 0;\nconst path_1 = require(\"path\");\nconst fs_1 = require(\"fs\");\nconst isRecursiveAsync = (state, path, resolved, callback) => {\n    if (state.options.useRealPaths)\n        return callback(state.visited.has(resolved + state.options.pathSeparator));\n    let parent = (0, path_1.dirname)(path);\n    if (parent + state.options.pathSeparator === state.root || parent === path)\n        return callback(false);\n    if (state.symlinks.get(parent) === resolved)\n        return callback(true);\n    (0, fs_1.readlink)(parent, (error, resolvedParent) => {\n        if (error)\n            return (0, exports.isRecursiveAsync)(state, parent, resolved, callback);\n        callback(resolvedParent === resolved);\n    });\n};\nexports.isRecursiveAsync = isRecursiveAsync;\nfunction isRecursive(state, path, resolved) {\n    if (state.options.useRealPaths)\n        return state.visited.has(resolved + state.options.pathSeparator);\n    let parent = (0, path_1.dirname)(path);\n    if (parent + state.options.pathSeparator === state.root || parent === path)\n        return false;\n    try {\n        const resolvedParent = state.symlinks.get(parent) || (0, fs_1.readlinkSync)(parent);\n        return resolvedParent === resolved;\n    }\n    catch (e) {\n        return isRecursive(state, parent, resolved);\n    }\n}\nexports.isRecursive = isRecursive;\n"
        }
    ]
}