{
    "sourceFile": "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/resolve-symlink.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893055156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.build = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = require(\"path\");\nconst resolveSymlinksAsync = function (path, state, callback) {\n    const { queue, options: { suppressErrors }, } = state;\n    queue.enqueue();\n    fs_1.default.realpath(path, (error, resolvedPath) => {\n        if (error)\n            return queue.dequeue(suppressErrors ? null : error, state);\n        fs_1.default.stat(resolvedPath, (error, stat) => {\n            if (error)\n                return queue.dequeue(suppressErrors ? null : error, state);\n            if (stat.isDirectory() && isRecursive(path, resolvedPath, state))\n                return queue.dequeue(null, state);\n            callback(stat, resolvedPath);\n            queue.dequeue(null, state);\n        });\n    });\n};\nconst resolveSymlinks = function (path, state, callback) {\n    const { queue, options: { suppressErrors }, } = state;\n    queue.enqueue();\n    try {\n        const resolvedPath = fs_1.default.realpathSync(path);\n        const stat = fs_1.default.statSync(resolvedPath);\n        if (stat.isDirectory() && isRecursive(path, resolvedPath, state))\n            return;\n        callback(stat, resolvedPath);\n    }\n    catch (e) {\n        if (!suppressErrors)\n            throw e;\n    }\n};\nfunction build(options, isSynchronous) {\n    if (!options.resolveSymlinks || options.excludeSymlinks)\n        return null;\n    return isSynchronous ? resolveSymlinks : resolveSymlinksAsync;\n}\nexports.build = build;\nfunction isRecursive(path, resolved, state) {\n    if (state.options.useRealPaths)\n        return isRecursiveUsingRealPaths(resolved, state);\n    let parent = (0, path_1.dirname)(path);\n    let depth = 1;\n    while (parent !== state.root && depth < 2) {\n        const resolvedPath = state.symlinks.get(parent);\n        const isSameRoot = !!resolvedPath &&\n            (resolvedPath === resolved ||\n                resolvedPath.startsWith(resolved) ||\n                resolved.startsWith(resolvedPath));\n        if (isSameRoot)\n            depth++;\n        else\n            parent = (0, path_1.dirname)(parent);\n    }\n    state.symlinks.set(path, resolved);\n    return depth > 1;\n}\nfunction isRecursiveUsingRealPaths(resolved, state) {\n    return state.visited.includes(resolved + state.options.pathSeparator);\n}\n"
        }
    ]
}