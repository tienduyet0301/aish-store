{
    "sourceFile": "node_modules/tinyglobby/node_modules/fdir/dist/api/functions/walk-directory.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893055385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.build = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst readdirOpts = { withFileTypes: true };\nconst walkAsync = (state, crawlPath, directoryPath, currentDepth, callback) => {\n    if (currentDepth < 0)\n        return state.queue.dequeue(null, state);\n    state.visited.push(crawlPath);\n    state.counts.directories++;\n    state.queue.enqueue();\n    // Perf: Node >= 10 introduced withFileTypes that helps us\n    // skip an extra fs.stat call.\n    fs_1.default.readdir(crawlPath || \".\", readdirOpts, (error, entries = []) => {\n        callback(entries, directoryPath, currentDepth);\n        state.queue.dequeue(state.options.suppressErrors ? null : error, state);\n    });\n};\nconst walkSync = (state, crawlPath, directoryPath, currentDepth, callback) => {\n    if (currentDepth < 0)\n        return;\n    state.visited.push(crawlPath);\n    state.counts.directories++;\n    let entries = [];\n    try {\n        entries = fs_1.default.readdirSync(crawlPath || \".\", readdirOpts);\n    }\n    catch (e) {\n        if (!state.options.suppressErrors)\n            throw e;\n    }\n    callback(entries, directoryPath, currentDepth);\n};\nfunction build(isSynchronous) {\n    return isSynchronous ? walkSync : walkAsync;\n}\nexports.build = build;\n"
        }
    ]
}