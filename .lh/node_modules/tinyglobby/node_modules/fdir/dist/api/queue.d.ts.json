{
    "sourceFile": "node_modules/tinyglobby/node_modules/fdir/dist/api/queue.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893055506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { WalkerState } from \"../types\";\ntype OnQueueEmptyCallback = (error: Error | null, output: WalkerState) => void;\n/**\n * This is a custom stateless queue to track concurrent async fs calls.\n * It increments a counter whenever a call is queued and decrements it\n * as soon as it completes. When the counter hits 0, it calls onQueueEmpty.\n */\nexport declare class Queue {\n    private readonly onQueueEmpty;\n    private count;\n    constructor(onQueueEmpty: OnQueueEmptyCallback);\n    enqueue(): void;\n    dequeue(error: Error | null, output: WalkerState): void;\n}\nexport {};\n"
        }
    ]
}