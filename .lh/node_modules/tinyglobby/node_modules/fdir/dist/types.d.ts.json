{
    "sourceFile": "node_modules/tinyglobby/node_modules/fdir/dist/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893057069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"node\" />\nimport { Queue } from \"./api/queue\";\nexport type Counts = {\n    files: number;\n    directories: number;\n    /**\n     * @deprecated use `directories` instead. Will be removed in v7.0.\n     */\n    dirs: number;\n};\nexport type Group = {\n    directory: string;\n    files: string[];\n    /**\n     * @deprecated use `directory` instead. Will be removed in v7.0.\n     */\n    dir: string;\n};\nexport type GroupOutput = Group[];\nexport type OnlyCountsOutput = Counts;\nexport type PathsOutput = string[];\nexport type Output = OnlyCountsOutput | PathsOutput | GroupOutput;\nexport type WalkerState = {\n    root: string;\n    paths: string[];\n    groups: Group[];\n    counts: Counts;\n    options: Options;\n    queue: Queue;\n    symlinks: Map<string, string>;\n    visited: string[];\n};\nexport type ResultCallback<TOutput extends Output> = (error: Error | null, output: TOutput) => void;\nexport type FilterPredicate = (path: string, isDirectory: boolean) => boolean;\nexport type ExcludePredicate = (dirName: string, dirPath: string) => boolean;\nexport type PathSeparator = \"/\" | \"\\\\\";\nexport type Options<TGlobFunction = unknown> = {\n    includeBasePath?: boolean;\n    includeDirs?: boolean;\n    normalizePath?: boolean;\n    maxDepth: number;\n    maxFiles?: number;\n    resolvePaths?: boolean;\n    suppressErrors: boolean;\n    group?: boolean;\n    onlyCounts?: boolean;\n    filters: FilterPredicate[];\n    resolveSymlinks?: boolean;\n    useRealPaths?: boolean;\n    excludeFiles?: boolean;\n    excludeSymlinks?: boolean;\n    exclude?: ExcludePredicate;\n    relativePaths?: boolean;\n    pathSeparator: PathSeparator;\n    signal?: AbortSignal;\n    globFunction?: TGlobFunction;\n};\nexport type GlobMatcher = (test: string) => boolean;\nexport type GlobFunction = (glob: string | string[], ...params: unknown[]) => GlobMatcher;\nexport type GlobParams<T> = T extends (globs: string | string[], ...params: infer TParams extends unknown[]) => GlobMatcher ? TParams : [];\n"
        }
    ]
}