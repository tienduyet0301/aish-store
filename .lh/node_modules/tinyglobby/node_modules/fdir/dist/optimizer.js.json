{
    "sourceFile": "node_modules/tinyglobby/node_modules/fdir/dist/optimizer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893056949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findMaxDepth = exports.findDirectoryPatterns = exports.findCommonRoots = void 0;\n// Glob Optimizations:\n// 1. Find common roots and only iterate on them\n//    For example:\n//      1. \"node_modules/**/*.ts\" only requires us to search in node_modules\n//          folder.\n//      2. Similarly, multiple glob patterns can have common deterministic roots\n//         The optimizer's job is to find these roots and only crawl them.\n//      3. If any of the glob patterns have a globstar i.e. **/ in them, we\n//         should bail out.\n// 2. Find out if glob is requesting only directories\n// 3. Find maximum depth requested\n// 4. If glob contains a root that doesn't exist, bail out\nconst braces_1 = require(\"braces\");\nconst glob_parent_1 = __importDefault(require(\"glob-parent\"));\nfunction findCommonRoots(patterns) {\n    const allRoots = new Set();\n    patterns = patterns.map((p) => (p.includes(\"{\") ? (0, braces_1.expand)(p) : p)).flat();\n    for (const pattern of patterns) {\n        const parent = (0, glob_parent_1.default)(pattern);\n        if (parent === \".\")\n            return [];\n        allRoots.add(parent);\n    }\n    return Array.from(allRoots.values()).filter((root) => {\n        for (const r of allRoots) {\n            if (r === root)\n                continue;\n            if (root.startsWith(r))\n                return false;\n        }\n        return true;\n    });\n}\nexports.findCommonRoots = findCommonRoots;\nfunction findDirectoryPatterns(patterns) {\n    return patterns.filter((p) => p.endsWith(\"/\"));\n}\nexports.findDirectoryPatterns = findDirectoryPatterns;\nfunction findMaxDepth(patterns) {\n    const isGlobstar = patterns.some((p) => p.includes(\"**/\") || p.includes(\"/**\") || p === \"**\");\n    if (isGlobstar)\n        return false;\n    const maxDepth = patterns.reduce((depth, p) => {\n        return Math.max(depth, p.split(\"/\").filter(Boolean).length);\n    }, 0);\n    return maxDepth;\n}\nexports.findMaxDepth = findMaxDepth;\n"
        }
    ]
}