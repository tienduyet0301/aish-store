{
    "sourceFile": "node_modules/postcss/lib/result.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892960012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {\n  Document,\n  Node,\n  Plugin,\n  ProcessOptions,\n  Root,\n  SourceMap,\n  TransformCallback,\n  Warning,\n  WarningOptions\n} from './postcss.js'\nimport Processor from './processor.js'\n\ndeclare namespace Result {\n  export interface Message {\n    [others: string]: any\n\n    /**\n     * Source PostCSS plugin name.\n     */\n    plugin?: string\n\n    /**\n     * Message type.\n     */\n    type: string\n  }\n\n  export interface ResultOptions extends ProcessOptions {\n    /**\n     * The CSS node that was the source of the warning.\n     */\n    node?: Node\n\n    /**\n     * Name of plugin that created this warning. `Result#warn` will fill it\n     * automatically with `Plugin#postcssPlugin` value.\n     */\n    plugin?: string\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Result_ as default }\n}\n\n/**\n * Provides the result of the PostCSS transformations.\n *\n * A Result instance is returned by `LazyResult#then`\n * or `Root#toResult` methods.\n *\n * ```js\n * postcss([autoprefixer]).process(css).then(result => {\n *  console.log(result.css)\n * })\n * ```\n *\n * ```js\n * const result2 = postcss.parse(css).toResult()\n * ```\n */\ndeclare class Result_<RootNode = Document | Root> {\n  /**\n   * A CSS string representing of `Result#root`.\n   *\n   * ```js\n   * postcss.parse('a{}').toResult().css //=> \"a{}\"\n   * ```\n   */\n  css: string\n\n  /**\n   * Last runned PostCSS plugin.\n   */\n  lastPlugin: Plugin | TransformCallback\n\n  /**\n   * An instance of `SourceMapGenerator` class from the `source-map` library,\n   * representing changes to the `Result#root` instance.\n   *\n   * ```js\n   * result.map.toJSON() //=> { version: 3, file: 'a.css', â€¦ }\n   * ```\n   *\n   * ```js\n   * if (result.map) {\n   *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())\n   * }\n   * ```\n   */\n  map: SourceMap\n\n  /**\n   * Contains messages from plugins (e.g., warnings or custom messages).\n   * Each message should have type and plugin properties.\n   *\n   * ```js\n   * AtRule: {\n   *   import: (atRule, { result }) {\n   *     const importedFile = parseImport(atRule)\n   *     result.messages.push({\n   *       type: 'dependency',\n   *       plugin: 'postcss-import',\n   *       file: importedFile,\n   *       parent: result.opts.from\n   *     })\n   *   }\n   * }\n   * ```\n   */\n  messages: Result.Message[]\n\n  /**\n   * Options from the `Processor#process` or `Root#toResult` call\n   * that produced this Result instance.]\n   *\n   * ```js\n   * root.toResult(opts).opts === opts\n   * ```\n   */\n  opts: Result.ResultOptions\n\n  /**\n   * The Processor instance used for this transformation.\n   *\n   * ```js\n   * for (const plugin of result.processor.plugins) {\n   *   if (plugin.postcssPlugin === 'postcss-bad') {\n   *     throw 'postcss-good is incompatible with postcss-bad'\n   *   }\n   * })\n   * ```\n   */\n  processor: Processor\n\n  /**\n   * Root node after all transformations.\n   *\n   * ```js\n   * root.toResult().root === root\n   * ```\n   */\n  root: RootNode\n\n  /**\n   * An alias for the `Result#css` property.\n   * Use it with syntaxes that generate non-CSS output.\n   *\n   * ```js\n   * result.css === result.content\n   * ```\n   */\n  get content(): string\n\n  /**\n   * @param processor Processor used for this transformation.\n   * @param root      Root node after all transformations.\n   * @param opts      Options from the `Processor#process` or `Root#toResult`.\n   */\n  constructor(processor: Processor, root: RootNode, opts: Result.ResultOptions)\n\n  /**\n   * Returns for `Result#css` content.\n   *\n   * ```js\n   * result + '' === result.css\n   * ```\n   *\n   * @return String representing of `Result#root`.\n   */\n  toString(): string\n\n  /**\n   * Creates an instance of `Warning` and adds it to `Result#messages`.\n   *\n   * ```js\n   * if (decl.important) {\n   *   result.warn('Avoid !important', { node: decl, word: '!important' })\n   * }\n   * ```\n   *\n   * @param text Warning message.\n   * @param opts Warning options.\n   * @return Created warning.\n   */\n  warn(message: string, options?: WarningOptions): Warning\n\n  /**\n   * Returns warnings from plugins. Filters `Warning` instances\n   * from `Result#messages`.\n   *\n   * ```js\n   * result.warnings().forEach(warn => {\n   *   console.warn(warn.toString())\n   * })\n   * ```\n   *\n   * @return Warnings from plugins.\n   */\n  warnings(): Warning[]\n}\n\ndeclare class Result<RootNode = Document | Root> extends Result_<RootNode> {}\n\nexport = Result\n"
        }
    ]
}