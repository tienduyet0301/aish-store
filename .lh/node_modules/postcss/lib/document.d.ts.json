{
    "sourceFile": "node_modules/postcss/lib/document.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892958012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Container, { ContainerProps } from './container.js'\nimport { ProcessOptions } from './postcss.js'\nimport Result from './result.js'\nimport Root from './root.js'\n\ndeclare namespace Document {\n  export interface DocumentProps extends ContainerProps {\n    nodes?: readonly Root[]\n\n    /**\n     * Information to generate byte-to-byte equal node string as it was\n     * in the origin input.\n     *\n     * Every parser saves its own properties.\n     */\n    raws?: Record<string, any>\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Document_ as default }\n}\n\n/**\n * Represents a file and contains all its parsed nodes.\n *\n * **Experimental:** some aspects of this node could change within minor\n * or patch version releases.\n *\n * ```js\n * const document = htmlParser(\n *   '<html><style>a{color:black}</style><style>b{z-index:2}</style>'\n * )\n * document.type         //=> 'document'\n * document.nodes.length //=> 2\n * ```\n */\ndeclare class Document_ extends Container<Root> {\n  nodes: Root[]\n  parent: undefined\n  type: 'document'\n\n  constructor(defaults?: Document.DocumentProps)\n\n  assign(overrides: Document.DocumentProps | object): this\n  clone(overrides?: Partial<Document.DocumentProps>): this\n  cloneAfter(overrides?: Partial<Document.DocumentProps>): this\n  cloneBefore(overrides?: Partial<Document.DocumentProps>): this\n\n  /**\n   * Returns a `Result` instance representing the document’s CSS roots.\n   *\n   * ```js\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * const document = postcss.document()\n   * document.append(root1)\n   * document.append(root2)\n   * const result = document.toResult({ to: 'all.css', map: true })\n   * ```\n   *\n   * @param opts Options.\n   * @return Result with current document’s CSS.\n   */\n  toResult(options?: ProcessOptions): Result\n}\n\ndeclare class Document extends Document_ {}\n\nexport = Document\n"
        }
    ]
}