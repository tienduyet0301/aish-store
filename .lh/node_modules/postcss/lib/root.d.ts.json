{
    "sourceFile": "node_modules/postcss/lib/root.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892960122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Container, { ContainerProps } from './container.js'\nimport Document from './document.js'\nimport { ProcessOptions } from './postcss.js'\nimport Result from './result.js'\n\ndeclare namespace Root {\n  export interface RootRaws extends Record<string, any> {\n    /**\n     * The space symbols after the last child to the end of file.\n     */\n    after?: string\n\n    /**\n     * Non-CSS code after `Root`, when `Root` is inside `Document`.\n     *\n     * **Experimental:** some aspects of this node could change within minor\n     * or patch version releases.\n     */\n    codeAfter?: string\n\n    /**\n     * Non-CSS code before `Root`, when `Root` is inside `Document`.\n     *\n     * **Experimental:** some aspects of this node could change within minor\n     * or patch version releases.\n     */\n    codeBefore?: string\n\n    /**\n     * Is the last child has an (optional) semicolon.\n     */\n    semicolon?: boolean\n  }\n\n  export interface RootProps extends ContainerProps {\n    /**\n     * Information used to generate byte-to-byte equal node string\n     * as it was in the origin input.\n     * */\n    raws?: RootRaws\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Root_ as default }\n}\n\n/**\n * Represents a CSS file and contains all its parsed nodes.\n *\n * ```js\n * const root = postcss.parse('a{color:black} b{z-index:2}')\n * root.type         //=> 'root'\n * root.nodes.length //=> 2\n * ```\n */\ndeclare class Root_ extends Container {\n  nodes: NonNullable<Container['nodes']>\n  parent: Document | undefined\n  raws: Root.RootRaws\n  type: 'root'\n\n  constructor(defaults?: Root.RootProps)\n\n  assign(overrides: object | Root.RootProps): this\n  clone(overrides?: Partial<Root.RootProps>): this\n  cloneAfter(overrides?: Partial<Root.RootProps>): this\n  cloneBefore(overrides?: Partial<Root.RootProps>): this\n\n  /**\n   * Returns a `Result` instance representing the root’s CSS.\n   *\n   * ```js\n   * const root1 = postcss.parse(css1, { from: 'a.css' })\n   * const root2 = postcss.parse(css2, { from: 'b.css' })\n   * root1.append(root2)\n   * const result = root1.toResult({ to: 'all.css', map: true })\n   * ```\n   *\n   * @param options Options.\n   * @return Result with current root’s CSS.\n   */\n  toResult(options?: ProcessOptions): Result\n}\n\ndeclare class Root extends Root_ {}\n\nexport = Root\n"
        }
    ]
}