{
    "sourceFile": "node_modules/postcss/lib/rule.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892960199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Container, {\n  ContainerProps,\n  ContainerWithChildren\n} from './container.js'\n\ndeclare namespace Rule {\n  export interface RuleRaws extends Record<string, unknown> {\n    /**\n     * The space symbols after the last child of the node to the end of the node.\n     */\n    after?: string\n\n    /**\n     * The space symbols before the node. It also stores `*`\n     * and `_` symbols before the declaration (IE hack).\n     */\n    before?: string\n\n    /**\n     * The symbols between the selector and `{` for rules.\n     */\n    between?: string\n\n    /**\n     * Contains the text of the semicolon after this rule.\n     */\n    ownSemicolon?: string\n\n    /**\n     * The rule’s selector with comments.\n     */\n    selector?: {\n      raw: string\n      value: string\n    }\n\n    /**\n     * Contains `true` if the last child has an (optional) semicolon.\n     */\n    semicolon?: boolean\n  }\n\n  export type RuleProps = {\n    /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n    raws?: RuleRaws\n  } & (\n      | {\n          /** Selector or selectors of the rule. */\n          selector: string\n          selectors?: never\n        }\n      | {\n          selector?: never\n          /** Selectors of the rule represented as an array of strings. */\n          selectors: readonly string[]\n        }\n    ) & ContainerProps\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Rule_ as default }\n}\n\n/**\n * Represents a CSS rule: a selector followed by a declaration block.\n *\n * ```js\n * Once (root, { Rule }) {\n *   let a = new Rule({ selector: 'a' })\n *   a.append(…)\n *   root.append(a)\n * }\n * ```\n *\n * ```js\n * const root = postcss.parse('a{}')\n * const rule = root.first\n * rule.type       //=> 'rule'\n * rule.toString() //=> 'a{}'\n * ```\n */\ndeclare class Rule_ extends Container {\n  nodes: NonNullable<Container['nodes']>\n  parent: ContainerWithChildren | undefined\n  raws: Rule.RuleRaws\n  type: 'rule'\n  /**\n   * The rule’s full selector represented as a string.\n   *\n   * ```js\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   * rule.selector //=> 'a, b'\n   * ```\n   */\n  get selector(): string\n\n  set selector(value: string)\n  /**\n   * An array containing the rule’s individual selectors.\n   * Groups of selectors are split at commas.\n   *\n   * ```js\n   * const root = postcss.parse('a, b { }')\n   * const rule = root.first\n   *\n   * rule.selector  //=> 'a, b'\n   * rule.selectors //=> ['a', 'b']\n   *\n   * rule.selectors = ['a', 'strong']\n   * rule.selector //=> 'a, strong'\n   * ```\n   */\n  get selectors(): string[]\n\n  set selectors(values: string[])\n\n  constructor(defaults?: Rule.RuleProps)\n  assign(overrides: object | Rule.RuleProps): this\n  clone(overrides?: Partial<Rule.RuleProps>): this\n  cloneAfter(overrides?: Partial<Rule.RuleProps>): this\n  cloneBefore(overrides?: Partial<Rule.RuleProps>): this\n}\n\ndeclare class Rule extends Rule_ {}\n\nexport = Rule\n"
        }
    ]
}