{
    "sourceFile": "node_modules/postcss/lib/at-rule.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892956928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Container, {\n  ContainerProps,\n  ContainerWithChildren\n} from './container.js'\n\ndeclare namespace AtRule {\n  export interface AtRuleRaws extends Record<string, unknown> {\n    /**\n     * The space symbols after the last child of the node to the end of the node.\n     */\n    after?: string\n\n    /**\n     * The space between the at-rule name and its parameters.\n     */\n    afterName?: string\n\n    /**\n     * The space symbols before the node. It also stores `*`\n     * and `_` symbols before the declaration (IE hack).\n     */\n    before?: string\n\n    /**\n     * The symbols between the last parameter and `{` for rules.\n     */\n    between?: string\n\n    /**\n     * The rule’s selector with comments.\n     */\n    params?: {\n      raw: string\n      value: string\n    }\n\n    /**\n     * Contains `true` if the last child has an (optional) semicolon.\n     */\n    semicolon?: boolean\n  }\n\n  export interface AtRuleProps extends ContainerProps {\n    /** Name of the at-rule. */\n    name: string\n    /** Parameters following the name of the at-rule. */\n    params?: number | string\n    /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n    raws?: AtRuleRaws\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { AtRule_ as default }\n}\n\n/**\n * Represents an at-rule.\n *\n * ```js\n * Once (root, { AtRule }) {\n *   let media = new AtRule({ name: 'media', params: 'print' })\n *   media.append(…)\n *   root.append(media)\n * }\n * ```\n *\n * If it’s followed in the CSS by a `{}` block, this node will have\n * a nodes property representing its children.\n *\n * ```js\n * const root = postcss.parse('@charset \"UTF-8\"; @media print {}')\n *\n * const charset = root.first\n * charset.type  //=> 'atrule'\n * charset.nodes //=> undefined\n *\n * const media = root.last\n * media.nodes   //=> []\n * ```\n */\ndeclare class AtRule_ extends Container {\n  /**\n   * An array containing the layer’s children.\n   *\n   * ```js\n   * const root = postcss.parse('@layer example { a { color: black } }')\n   * const layer = root.first\n   * layer.nodes.length           //=> 1\n   * layer.nodes[0].selector      //=> 'a'\n   * ```\n   *\n   * Can be `undefinded` if the at-rule has no body.\n   *\n   * ```js\n   * const root = postcss.parse('@layer a, b, c;')\n   * const layer = root.first\n   * layer.nodes //=> undefined\n   * ```\n   */\n  nodes: Container['nodes'] | undefined\n  parent: ContainerWithChildren | undefined\n\n  raws: AtRule.AtRuleRaws\n  type: 'atrule'\n  /**\n   * The at-rule’s name immediately follows the `@`.\n   *\n   * ```js\n   * const root  = postcss.parse('@media print {}')\n   * const media = root.first\n   * media.name //=> 'media'\n   * ```\n   */\n  get name(): string\n  set name(value: string)\n\n  /**\n   * The at-rule’s parameters, the values that follow the at-rule’s name\n   * but precede any `{}` block.\n   *\n   * ```js\n   * const root  = postcss.parse('@media print, screen {}')\n   * const media = root.first\n   * media.params //=> 'print, screen'\n   * ```\n   */\n  get params(): string\n\n  set params(value: string)\n\n  constructor(defaults?: AtRule.AtRuleProps)\n  assign(overrides: AtRule.AtRuleProps | object): this\n  clone(overrides?: Partial<AtRule.AtRuleProps>): this\n  cloneAfter(overrides?: Partial<AtRule.AtRuleProps>): this\n  cloneBefore(overrides?: Partial<AtRule.AtRuleProps>): this\n}\n\ndeclare class AtRule extends AtRule_ {}\n\nexport = AtRule\n"
        }
    ]
}