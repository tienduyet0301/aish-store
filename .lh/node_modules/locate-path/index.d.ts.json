{
    "sourceFile": "node_modules/locate-path/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892385939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare namespace locatePath {\n\tinterface Options {\n\t\t/**\n\t\tCurrent working directory.\n\n\t\t@default process.cwd()\n\t\t*/\n\t\treadonly cwd?: string;\n\n\t\t/**\n\t\tType of path to match.\n\n\t\t@default 'file'\n\t\t*/\n\t\treadonly type?: 'file' | 'directory';\n\n\t\t/**\n\t\tAllow symbolic links to match if they point to the requested path type.\n\n\t\t@default true\n\t\t*/\n\t\treadonly allowSymlinks?: boolean;\n\t}\n\n\tinterface AsyncOptions extends Options {\n\t\t/**\n\t\tNumber of concurrently pending promises. Minimum: `1`.\n\n\t\t@default Infinity\n\t\t*/\n\t\treadonly concurrency?: number;\n\n\t\t/**\n\t\tPreserve `paths` order when searching.\n\n\t\tDisable this to improve performance if you don't care about the order.\n\n\t\t@default true\n\t\t*/\n\t\treadonly preserveOrder?: boolean;\n\t}\n}\n\ndeclare const locatePath: {\n\t/**\n\tSynchronously get the first path that exists on disk of multiple paths.\n\n\t@param paths - Paths to check.\n\t@returns The first path that exists or `undefined` if none exists.\n\t*/\n\tsync: (\n\t\tpaths: Iterable<string>,\n\t\toptions?: locatePath.Options\n\t) => string | undefined;\n\n\t/**\n\tGet the first path that exists on disk of multiple paths.\n\n\t@param paths - Paths to check.\n\t@returns The first path that exists or `undefined` if none exists.\n\n\t@example\n\t```\n\timport locatePath = require('locate-path');\n\n\tconst files = [\n\t\t'unicorn.png',\n\t\t'rainbow.png', // Only this one actually exists on disk\n\t\t'pony.png'\n\t];\n\n\t(async () => {\n\t\tconsole(await locatePath(files));\n\t\t//=> 'rainbow'\n\t})();\n\t```\n\t*/\n\t(paths: Iterable<string>, options?: locatePath.AsyncOptions): Promise<\n\tstring | undefined\n\t>;\n};\n\nexport = locatePath;\n"
        }
    ]
}