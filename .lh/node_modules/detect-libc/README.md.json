{
    "sourceFile": "node_modules/detect-libc/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892112712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# detect-libc\n\nNode.js module to detect details of the C standard library (libc)\nimplementation provided by a given Linux system.\n\nCurrently supports detection of GNU glibc and MUSL libc.\n\nProvides asychronous and synchronous functions for the\nfamily (e.g. `glibc`, `musl`) and version (e.g. `1.23`, `1.2.3`).\n\nThe version numbers of libc implementations\nare not guaranteed to be semver-compliant.\n\nFor previous v1.x releases, please see the\n[v1](https://github.com/lovell/detect-libc/tree/v1) branch.\n\n## Install\n\n```sh\nnpm install detect-libc\n```\n\n## API\n\n### GLIBC\n\n```ts\nconst GLIBC: string = 'glibc';\n```\n\nA String constant containing the value `glibc`.\n\n### MUSL\n\n```ts\nconst MUSL: string = 'musl';\n```\n\nA String constant containing the value `musl`.\n\n### family\n\n```ts\nfunction family(): Promise<string | null>;\n```\n\nResolves asychronously with:\n\n* `glibc` or `musl` when the libc family can be determined\n* `null` when the libc family cannot be determined\n* `null` when run on a non-Linux platform\n\n```js\nconst { family, GLIBC, MUSL } = require('detect-libc');\n\nswitch (await family()) {\n  case GLIBC: ...\n  case MUSL: ...\n  case null: ...\n}\n```\n\n### familySync\n\n```ts\nfunction familySync(): string | null;\n```\n\nSynchronous version of `family()`.\n\n```js\nconst { familySync, GLIBC, MUSL } = require('detect-libc');\n\nswitch (familySync()) {\n  case GLIBC: ...\n  case MUSL: ...\n  case null: ...\n}\n```\n\n### version\n\n```ts\nfunction version(): Promise<string | null>;\n```\n\nResolves asychronously with:\n\n* The version when it can be determined\n* `null` when the libc family cannot be determined\n* `null` when run on a non-Linux platform\n\n```js\nconst { version } = require('detect-libc');\n\nconst v = await version();\nif (v) {\n  const [major, minor, patch] = v.split('.');\n}\n```\n\n### versionSync\n\n```ts\nfunction versionSync(): string | null;\n```\n\nSynchronous version of `version()`.\n\n```js\nconst { versionSync } = require('detect-libc');\n\nconst v = versionSync();\nif (v) {\n  const [major, minor, patch] = v.split('.');\n}\n```\n\n### isNonGlibcLinux\n\n```ts\nfunction isNonGlibcLinux(): Promise<boolean>;\n```\n\nResolves asychronously with:\n\n* `false` when the libc family is `glibc`\n* `true` when the libc family is not `glibc`\n* `false` when run on a non-Linux platform\n\n```js\nconst { isNonGlibcLinux } = require('detect-libc');\n\nif (await isNonGlibcLinux()) { ... }\n```\n\n### isNonGlibcLinuxSync\n\n```ts\nfunction isNonGlibcLinuxSync(): boolean;\n```\n\nSynchronous version of `isNonGlibcLinux()`.\n\n```js\nconst { isNonGlibcLinuxSync } = require('detect-libc');\n\nif (isNonGlibcLinuxSync()) { ... }\n```\n\n## Licensing\n\nCopyright 2017 Lovell Fuller and others.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0.html)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        }
    ]
}