{
    "sourceFile": "node_modules/eslint-import-resolver-node/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892244198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst resolve = require('resolve/sync');\nconst isCoreModule = require('is-core-module');\nconst path = require('path');\n\nconst log = require('debug')('eslint-plugin-import:resolver:node');\n\nexports.interfaceVersion = 2;\n\nexports.resolve = function (source, file, config) {\n  log('Resolving:', source, 'from:', file);\n  let resolvedPath;\n\n  if (isCoreModule(source)) {\n    log('resolved to core');\n    return { found: true, path: null };\n  }\n\n  try {\n    const cachedFilter = function (pkg, dir) { return packageFilter(pkg, dir, config); };\n    resolvedPath = resolve(source, opts(file, config, cachedFilter));\n    log('Resolved to:', resolvedPath);\n    return { found: true, path: resolvedPath };\n  } catch (err) {\n    log('resolve threw error:', err);\n    return { found: false };\n  }\n};\n\nfunction opts(file, config, packageFilter) {\n  return Object.assign({ // more closely matches Node (#333)\n    // plus 'mjs' for native modules! (#939)\n    extensions: ['.mjs', '.js', '.json', '.node'],\n  }, config, {\n    // path.resolve will handle paths relative to CWD\n    basedir: path.dirname(path.resolve(file)),\n    packageFilter,\n  });\n}\n\nfunction identity(x) { return x; }\n\nfunction packageFilter(pkg, dir, config) {\n  let found = false;\n  const file = path.join(dir, 'dummy.js');\n  if (pkg.module) {\n    try {\n      resolve(String(pkg.module).replace(/^(?:\\.\\/)?/, './'), opts(file, config, identity));\n      pkg.main = pkg.module;\n      found = true;\n    } catch (err) {\n      log('resolve threw error trying to find pkg.module:', err);\n    }\n  }\n  if (!found && pkg['jsnext:main']) {\n    try {\n      resolve(String(pkg['jsnext:main']).replace(/^(?:\\.\\/)?/, './'), opts(file, config, identity));\n      pkg.main = pkg['jsnext:main'];\n      found = true;\n    } catch (err) {\n      log('resolve threw error trying to find pkg[\\'jsnext:main\\']:', err);\n    }\n  }\n  return pkg;\n}\n"
        }
    ]
}