{
    "sourceFile": "node_modules/define-data-property/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892111773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\nvar hasOwn = require('hasown');\nvar hasPropertyDescriptors = require('has-property-descriptors')();\nvar getOwnPropertyDescriptors = require('object.getownpropertydescriptors');\nvar ownKeys = require('reflect.ownkeys');\n\nvar defineDataProperty = require('../');\n\ntest('defineDataProperty', function (t) {\n\tt.test('argument validation', function (st) {\n\t\tforEach(v.primitives, function (nonObject) {\n\t\t\tst['throws'](\n\t\t\t\t// @ts-expect-error\n\t\t\t\tfunction () { defineDataProperty(nonObject, 'key', 'value'); },\n\t\t\t\tTypeError,\n\t\t\t\t'throws on non-object input: ' + inspect(nonObject)\n\t\t\t);\n\t\t});\n\n\t\tforEach(v.nonPropertyKeys, function (nonPropertyKey) {\n\t\t\tst['throws'](\n\t\t\t\t// @ts-expect-error\n\t\t\t\tfunction () { defineDataProperty({}, nonPropertyKey, 'value'); },\n\t\t\t\tTypeError,\n\t\t\t\t'throws on non-PropertyKey input: ' + inspect(nonPropertyKey)\n\t\t\t);\n\t\t});\n\n\t\tforEach(v.nonBooleans, function (nonBoolean) {\n\t\t\tif (nonBoolean !== null) {\n\t\t\t\tst['throws'](\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\tfunction () { defineDataProperty({}, 'key', 'value', nonBoolean); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'throws on non-boolean nonEnumerable: ' + inspect(nonBoolean)\n\t\t\t\t);\n\n\t\t\t\tst['throws'](\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\tfunction () { defineDataProperty({}, 'key', 'value', false, nonBoolean); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'throws on non-boolean nonWritable: ' + inspect(nonBoolean)\n\t\t\t\t);\n\n\t\t\t\tst['throws'](\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\tfunction () { defineDataProperty({}, 'key', 'value', false, false, nonBoolean); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'throws on non-boolean nonConfigurable: ' + inspect(nonBoolean)\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('normal data property', function (st) {\n\t\t/** @type {Record<PropertyKey, string>} */\n\t\tvar obj = { existing: 'existing property' };\n\t\tst.ok(hasOwn(obj, 'existing'), 'has initial own property');\n\t\tst.equal(obj.existing, 'existing property', 'has expected initial value');\n\n\t\tvar res = defineDataProperty(obj, 'added', 'added property');\n\t\tst.equal(res, void undefined, 'returns `undefined`');\n\t\tst.ok(hasOwn(obj, 'added'), 'has expected own property');\n\t\tst.equal(obj.added, 'added property', 'has expected value');\n\n\t\tdefineDataProperty(obj, 'existing', 'new value');\n\t\tst.ok(hasOwn(obj, 'existing'), 'still has expected own property');\n\t\tst.equal(obj.existing, 'new value', 'has new expected value');\n\n\t\tdefineDataProperty(obj, 'explicit1', 'new value', false);\n\t\tst.ok(hasOwn(obj, 'explicit1'), 'has expected own property (explicit enumerable)');\n\t\tst.equal(obj.explicit1, 'new value', 'has new expected value (explicit enumerable)');\n\n\t\tdefineDataProperty(obj, 'explicit2', 'new value', false, false);\n\t\tst.ok(hasOwn(obj, 'explicit2'), 'has expected own property (explicit writable)');\n\t\tst.equal(obj.explicit2, 'new value', 'has new expected value (explicit writable)');\n\n\t\tdefineDataProperty(obj, 'explicit3', 'new value', false, false, false);\n\t\tst.ok(hasOwn(obj, 'explicit3'), 'has expected own property (explicit configurable)');\n\t\tst.equal(obj.explicit3, 'new value', 'has new expected value (explicit configurable)');\n\n\t\tst.end();\n\t});\n\n\tt.test('loose mode', { skip: !hasPropertyDescriptors }, function (st) {\n\t\tvar obj = { existing: 'existing property' };\n\n\t\tdefineDataProperty(obj, 'added', 'added value 1', true, null, null, true);\n\t\tst.deepEqual(\n\t\t\tgetOwnPropertyDescriptors(obj),\n\t\t\t{\n\t\t\t\texisting: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'existing property',\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tadded: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: !hasPropertyDescriptors,\n\t\t\t\t\tvalue: 'added value 1',\n\t\t\t\t\twritable: true\n\t\t\t\t}\n\t\t\t},\n\t\t\t'in loose mode, obj still adds property 1'\n\t\t);\n\n\t\tdefineDataProperty(obj, 'added', 'added value 2', false, true, null, true);\n\t\tst.deepEqual(\n\t\t\tgetOwnPropertyDescriptors(obj),\n\t\t\t{\n\t\t\t\texisting: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'existing property',\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tadded: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'added value 2',\n\t\t\t\t\twritable: !hasPropertyDescriptors\n\t\t\t\t}\n\t\t\t},\n\t\t\t'in loose mode, obj still adds property 2'\n\t\t);\n\n\t\tdefineDataProperty(obj, 'added', 'added value 3', false, false, true, true);\n\t\tst.deepEqual(\n\t\t\tgetOwnPropertyDescriptors(obj),\n\t\t\t{\n\t\t\t\texisting: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'existing property',\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tadded: {\n\t\t\t\t\tconfigurable: !hasPropertyDescriptors,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'added value 3',\n\t\t\t\t\twritable: true\n\t\t\t\t}\n\t\t\t},\n\t\t\t'in loose mode, obj still adds property 3'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('non-normal data property, ES3', { skip: hasPropertyDescriptors }, function (st) {\n\t\t/** @type {Record<PropertyKey, string>} */\n\t\tvar obj = { existing: 'existing property' };\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(obj, 'added', 'added value', true); },\n\t\t\tSyntaxError,\n\t\t\t'nonEnumerable throws a Syntax Error'\n\t\t);\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(obj, 'added', 'added value', false, true); },\n\t\t\tSyntaxError,\n\t\t\t'nonWritable throws a Syntax Error'\n\t\t);\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(obj, 'added', 'added value', false, false, true); },\n\t\t\tSyntaxError,\n\t\t\t'nonWritable throws a Syntax Error'\n\t\t);\n\n\t\tst.deepEqual(\n\t\t\townKeys(obj),\n\t\t\t['existing'],\n\t\t\t'obj still has expected keys'\n\t\t);\n\t\tst.equal(obj.existing, 'existing property', 'obj still has expected values');\n\n\t\tst.end();\n\t});\n\n\tt.test('new non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t/** @type {Record<PropertyKey, string>} */\n\t\tvar obj = { existing: 'existing property' };\n\n\t\tdefineDataProperty(obj, 'nonEnum', null, true);\n\t\tdefineDataProperty(obj, 'nonWrit', null, false, true);\n\t\tdefineDataProperty(obj, 'nonConf', null, false, false, true);\n\n\t\tst.deepEqual(\n\t\t\tgetOwnPropertyDescriptors(obj),\n\t\t\t{\n\t\t\t\texisting: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'existing property',\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tnonEnum: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tnonWrit: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: false\n\t\t\t\t},\n\t\t\t\tnonConf: {\n\t\t\t\t\tconfigurable: false,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: true\n\t\t\t\t}\n\t\t\t},\n\t\t\t'obj has expected property descriptors'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('existing non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t// test case changing an existing non-normal property\n\n\t\t/** @type {Record<string, null | string>} */\n\t\tvar obj = {};\n\t\tObject.defineProperty(obj, 'nonEnum', { configurable: true, enumerable: false, value: null, writable: true });\n\t\tObject.defineProperty(obj, 'nonWrit', { configurable: true, enumerable: true, value: null, writable: false });\n\t\tObject.defineProperty(obj, 'nonConf', { configurable: false, enumerable: true, value: null, writable: true });\n\n\t\tst.deepEqual(\n\t\t\tgetOwnPropertyDescriptors(obj),\n\t\t\t{\n\t\t\t\tnonEnum: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: false,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tnonWrit: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: false\n\t\t\t\t},\n\t\t\t\tnonConf: {\n\t\t\t\t\tconfigurable: false,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: true\n\t\t\t\t}\n\t\t\t},\n\t\t\t'obj initially has expected property descriptors'\n\t\t);\n\n\t\tdefineDataProperty(obj, 'nonEnum', 'new value', false);\n\t\tdefineDataProperty(obj, 'nonWrit', 'new value', false, false);\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(obj, 'nonConf', 'new value', false, false, false); },\n\t\t\tTypeError,\n\t\t\t'can not alter a nonconfigurable property'\n\t\t);\n\n\t\tst.deepEqual(\n\t\t\tgetOwnPropertyDescriptors(obj),\n\t\t\t{\n\t\t\t\tnonEnum: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'new value',\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tnonWrit: {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: 'new value',\n\t\t\t\t\twritable: true\n\t\t\t\t},\n\t\t\t\tnonConf: {\n\t\t\t\t\tconfigurable: false,\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: null,\n\t\t\t\t\twritable: true\n\t\t\t\t}\n\t\t\t},\n\t\t\t'obj ends up with expected property descriptors'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('frozen object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {\n\t\tvar frozen = Object.freeze({ existing: true });\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(frozen, 'existing', 'new value'); },\n\t\t\tTypeError,\n\t\t\t'frozen object can not modify an existing property'\n\t\t);\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(frozen, 'new', 'new property'); },\n\t\t\tTypeError,\n\t\t\t'frozen object can not add a new property'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('sealed object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {\n\t\tvar sealed = Object.seal({ existing: true });\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertyDescriptor(sealed, 'existing'),\n\t\t\t{\n\t\t\t\tconfigurable: false,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: true,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t'existing value on sealed object has expected descriptor'\n\t\t);\n\n\t\tdefineDataProperty(sealed, 'existing', 'new value');\n\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertyDescriptor(sealed, 'existing'),\n\t\t\t{\n\t\t\t\tconfigurable: false,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: 'new value',\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t'existing value on sealed object has changed descriptor'\n\t\t);\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(sealed, 'new', 'new property'); },\n\t\t\tTypeError,\n\t\t\t'sealed object can not add a new property'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('nonextensible object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {\n\t\tvar nonExt = Object.preventExtensions({ existing: true });\n\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertyDescriptor(nonExt, 'existing'),\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: true,\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t'existing value on non-extensible object has expected descriptor'\n\t\t);\n\n\t\tdefineDataProperty(nonExt, 'existing', 'new value', true);\n\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertyDescriptor(nonExt, 'existing'),\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: 'new value',\n\t\t\t\twritable: true\n\t\t\t},\n\t\t\t'existing value on non-extensible object has changed descriptor'\n\t\t);\n\n\t\tst['throws'](\n\t\t\tfunction () { defineDataProperty(nonExt, 'new', 'new property'); },\n\t\t\tTypeError,\n\t\t\t'non-extensible object can not add a new property'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}