{
    "sourceFile": "node_modules/array.prototype.flatmap/test/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892033316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar inspect = require('object-inspect');\nvar forEach = require('for-each');\n\nmodule.exports = function (flatMap, t) {\n\tt.test('callback function', function (st) {\n\t\tforEach([[], {}, true, false, 42, 'foo', /a/g, null], function (nonFunction) {\n\t\t\tst['throws'](\n\t\t\t\tfunction () { flatMap([], nonFunction); },\n\t\t\t\tTypeError,\n\t\t\t\tinspect(nonFunction) + ' is not a function'\n\t\t\t);\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('flatMaps', function (st) {\n\t\tvar mapped = flatMap([1, [2], [3, 4]], function (x, i) {\n\t\t\treturn [x, i];\n\t\t});\n\n\t\tvar expected = [1, 0, [2], 1, [3, 4], 2];\n\t\tst.deepEqual(mapped, expected, 'array is flattened and mapped to tuples of item/index');\n\t\tst.equal(mapped.length, expected.length, 'array has expected length');\n\n\t\tvar context = {};\n\t\tvar actual;\n\t\tflatMap([1], function () { actual = this; }, context);\n\t\tst.equal(actual, context, 'thisArg works as expected');\n\n\t\tst.end();\n\t});\n\n\tt.test('sparse arrays', function (st) {\n\t\tvar identity = function (x) { return x; };\n\t\t// eslint-disable-next-line no-sparse-arrays\n\t\tst.deepEqual(flatMap([, [1]], identity), flatMap([[], [1]], identity), 'an array hole is treated the same as an empty array');\n\n\t\tst.end();\n\t});\n\n\tt.test('test262: staging test from v8', function (st) {\n\t\tvar arr1 = [0, 1, 2, 3];\n\t\tvar f = function (e) {\n\t\t\tarr1[4] = 42;\n\t\t\treturn e;\n\t\t};\n\t\tst.deepEqual(flatMap(arr1, f), [0, 1, 2, 3]);\n\n\t\tvar arr2 = [0, 1, 2, 3];\n\t\tvar g = function (e) {\n\t\t\tarr2.length = 3;\n\t\t\treturn e;\n\t\t};\n\t\tst.deepEqual(flatMap(arr2, g), [0, 1, 2]);\n\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}