{
    "sourceFile": "node_modules/scheduler/cjs/scheduler-unstable_post_task.production.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893018421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @license React\n * scheduler-unstable_post_task.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nvar perf = window.performance,\n  setTimeout = window.setTimeout,\n  scheduler = global.scheduler,\n  getCurrentTime = perf.now.bind(perf),\n  deadline = 0,\n  currentPriorityLevel_DEPRECATED = 3;\nfunction runTask(priorityLevel, postTaskPriority, node, callback) {\n  deadline = getCurrentTime() + 5;\n  try {\n    currentPriorityLevel_DEPRECATED = priorityLevel;\n    var result = callback(!1);\n    if (\"function\" === typeof result) {\n      var continuationOptions = { signal: node._controller.signal },\n        nextTask = runTask.bind(\n          null,\n          priorityLevel,\n          postTaskPriority,\n          node,\n          result\n        );\n      void 0 !== scheduler.yield\n        ? scheduler\n            .yield(continuationOptions)\n            .then(nextTask)\n            .catch(handleAbortError)\n        : scheduler\n            .postTask(nextTask, continuationOptions)\n            .catch(handleAbortError);\n    }\n  } catch (error) {\n    setTimeout(function () {\n      throw error;\n    });\n  } finally {\n    currentPriorityLevel_DEPRECATED = 3;\n  }\n}\nfunction handleAbortError() {}\nexports.unstable_IdlePriority = 5;\nexports.unstable_ImmediatePriority = 1;\nexports.unstable_LowPriority = 4;\nexports.unstable_NormalPriority = 3;\nexports.unstable_Profiling = null;\nexports.unstable_UserBlockingPriority = 2;\nexports.unstable_cancelCallback = function (node) {\n  node._controller.abort();\n};\nexports.unstable_continueExecution = function () {};\nexports.unstable_forceFrameRate = function () {};\nexports.unstable_getCurrentPriorityLevel = function () {\n  return currentPriorityLevel_DEPRECATED;\n};\nexports.unstable_getFirstCallbackNode = function () {\n  return null;\n};\nexports.unstable_next = function (callback) {\n  switch (currentPriorityLevel_DEPRECATED) {\n    case 1:\n    case 2:\n    case 3:\n      var priorityLevel = 3;\n      break;\n    default:\n      priorityLevel = currentPriorityLevel_DEPRECATED;\n  }\n  var previousPriorityLevel = currentPriorityLevel_DEPRECATED;\n  currentPriorityLevel_DEPRECATED = priorityLevel;\n  try {\n    return callback();\n  } finally {\n    currentPriorityLevel_DEPRECATED = previousPriorityLevel;\n  }\n};\nexports.unstable_now = getCurrentTime;\nexports.unstable_pauseExecution = function () {};\nexports.unstable_requestPaint = function () {};\nexports.unstable_runWithPriority = function (priorityLevel, callback) {\n  var previousPriorityLevel = currentPriorityLevel_DEPRECATED;\n  currentPriorityLevel_DEPRECATED = priorityLevel;\n  try {\n    return callback();\n  } finally {\n    currentPriorityLevel_DEPRECATED = previousPriorityLevel;\n  }\n};\nexports.unstable_scheduleCallback = function (\n  priorityLevel,\n  callback,\n  options\n) {\n  switch (priorityLevel) {\n    case 1:\n    case 2:\n      var postTaskPriority = \"user-blocking\";\n      break;\n    case 4:\n    case 3:\n      postTaskPriority = \"user-visible\";\n      break;\n    case 5:\n      postTaskPriority = \"background\";\n      break;\n    default:\n      postTaskPriority = \"user-visible\";\n  }\n  var controller = new TaskController({ priority: postTaskPriority });\n  options = {\n    delay: \"object\" === typeof options && null !== options ? options.delay : 0,\n    signal: controller.signal\n  };\n  controller = { _controller: controller };\n  scheduler\n    .postTask(\n      runTask.bind(null, priorityLevel, postTaskPriority, controller, callback),\n      options\n    )\n    .catch(handleAbortError);\n  return controller;\n};\nexports.unstable_shouldYield = function () {\n  return getCurrentTime() >= deadline;\n};\nexports.unstable_wrapCallback = function (callback) {\n  var parentPriorityLevel = currentPriorityLevel_DEPRECATED;\n  return function () {\n    var previousPriorityLevel = currentPriorityLevel_DEPRECATED;\n    currentPriorityLevel_DEPRECATED = parentPriorityLevel;\n    try {\n      return callback();\n    } finally {\n      currentPriorityLevel_DEPRECATED = previousPriorityLevel;\n    }\n  };\n};\n"
        }
    ]
}