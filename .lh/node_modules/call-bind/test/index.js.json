{
    "sourceFile": "node_modules/call-bind/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892066869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar callBind = require('../');\nvar hasStrictMode = require('has-strict-mode')();\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\nvar v = require('es-value-fixtures');\n\nvar test = require('tape');\n\n/*\n * older engines have length nonconfigurable\n * in io.js v3, it is configurable except on bound functions, hence the .bind()\n */\nvar boundFnsHaveConfigurableLengths = require('set-function-length/env').boundFnsHaveConfigurableLengths;\n\ntest('callBind', function (t) {\n\tforEach(v.nonFunctions, function (nonFunction) {\n\t\tt['throws'](\n\t\t\tfunction () { callBind(nonFunction); },\n\t\t\tTypeError,\n\t\t\tinspect(nonFunction) + ' is not a function'\n\t\t);\n\t});\n\n\tvar sentinel = { sentinel: true };\n\tvar func = function (a, b) {\n\t\t// eslint-disable-next-line no-invalid-this\n\t\treturn [!hasStrictMode && this === global ? undefined : this, a, b];\n\t};\n\tt.equal(func.length, 2, 'original function length is 2');\n\tt.deepEqual(func(), [undefined, undefined, undefined], 'unbound func with too few args');\n\tt.deepEqual(func(1, 2), [undefined, 1, 2], 'unbound func with right args');\n\tt.deepEqual(func(1, 2, 3), [undefined, 1, 2], 'unbound func with too many args');\n\n\tvar bound = callBind(func);\n\tt.equal(bound.length, func.length + 1, 'function length is preserved', { skip: !boundFnsHaveConfigurableLengths });\n\tt.deepEqual(bound(), [undefined, undefined, undefined], 'bound func with too few args');\n\tt.deepEqual(bound(1, 2), [hasStrictMode ? 1 : Object(1), 2, undefined], 'bound func with right args');\n\tt.deepEqual(bound(1, 2, 3), [hasStrictMode ? 1 : Object(1), 2, 3], 'bound func with too many args');\n\n\tvar boundR = callBind(func, sentinel);\n\tt.equal(boundR.length, func.length, 'function length is preserved', { skip: !boundFnsHaveConfigurableLengths });\n\tt.deepEqual(boundR(), [sentinel, undefined, undefined], 'bound func with receiver, with too few args');\n\tt.deepEqual(boundR(1, 2), [sentinel, 1, 2], 'bound func with receiver, with right args');\n\tt.deepEqual(boundR(1, 2, 3), [sentinel, 1, 2], 'bound func with receiver, with too many args');\n\n\tvar boundArg = callBind(func, sentinel, 1);\n\tt.equal(boundArg.length, func.length - 1, 'function length is preserved', { skip: !boundFnsHaveConfigurableLengths });\n\tt.deepEqual(boundArg(), [sentinel, 1, undefined], 'bound func with receiver and arg, with too few args');\n\tt.deepEqual(boundArg(2), [sentinel, 1, 2], 'bound func with receiver and arg, with right arg');\n\tt.deepEqual(boundArg(2, 3), [sentinel, 1, 2], 'bound func with receiver and arg, with too many args');\n\n\tt.test('callBind.apply', function (st) {\n\t\tvar aBound = callBind.apply(func);\n\t\tst.deepEqual(aBound(sentinel), [sentinel, undefined, undefined], 'apply-bound func with no args');\n\t\tst.deepEqual(aBound(sentinel, [1], 4), [sentinel, 1, undefined], 'apply-bound func with too few args');\n\t\tst.deepEqual(aBound(sentinel, [1, 2], 4), [sentinel, 1, 2], 'apply-bound func with right args');\n\n\t\tvar aBoundArg = callBind.apply(func);\n\t\tst.deepEqual(aBoundArg(sentinel, [1, 2, 3], 4), [sentinel, 1, 2], 'apply-bound func with too many args');\n\t\tst.deepEqual(aBoundArg(sentinel, [1, 2], 4), [sentinel, 1, 2], 'apply-bound func with right args');\n\t\tst.deepEqual(aBoundArg(sentinel, [1], 4), [sentinel, 1, undefined], 'apply-bound func with too few args');\n\n\t\tvar aBoundR = callBind.apply(func, sentinel);\n\t\tst.deepEqual(aBoundR([1, 2, 3], 4), [sentinel, 1, 2], 'apply-bound func with receiver and too many args');\n\t\tst.deepEqual(aBoundR([1, 2], 4), [sentinel, 1, 2], 'apply-bound func with receiver and right args');\n\t\tst.deepEqual(aBoundR([1], 4), [sentinel, 1, undefined], 'apply-bound func with receiver and too few args');\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}