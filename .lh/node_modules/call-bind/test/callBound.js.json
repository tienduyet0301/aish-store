{
    "sourceFile": "node_modules/call-bind/test/callBound.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892066741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\n\nvar callBound = require('../callBound');\n\ntest('callBound', function (t) {\n\t// static primitive\n\tt.equal(callBound('Array.length'), Array.length, 'Array.length yields itself');\n\tt.equal(callBound('%Array.length%'), Array.length, '%Array.length% yields itself');\n\n\t// static non-function object\n\tt.equal(callBound('Array.prototype'), Array.prototype, 'Array.prototype yields itself');\n\tt.equal(callBound('%Array.prototype%'), Array.prototype, '%Array.prototype% yields itself');\n\tt.equal(callBound('Array.constructor'), Array.constructor, 'Array.constructor yields itself');\n\tt.equal(callBound('%Array.constructor%'), Array.constructor, '%Array.constructor% yields itself');\n\n\t// static function\n\tt.equal(callBound('Date.parse'), Date.parse, 'Date.parse yields itself');\n\tt.equal(callBound('%Date.parse%'), Date.parse, '%Date.parse% yields itself');\n\n\t// prototype primitive\n\tt.equal(callBound('Error.prototype.message'), Error.prototype.message, 'Error.prototype.message yields itself');\n\tt.equal(callBound('%Error.prototype.message%'), Error.prototype.message, '%Error.prototype.message% yields itself');\n\n\t// prototype function\n\tt.notEqual(callBound('Object.prototype.toString'), Object.prototype.toString, 'Object.prototype.toString does not yield itself');\n\tt.notEqual(callBound('%Object.prototype.toString%'), Object.prototype.toString, '%Object.prototype.toString% does not yield itself');\n\tt.equal(callBound('Object.prototype.toString')(true), Object.prototype.toString.call(true), 'call-bound Object.prototype.toString calls into the original');\n\tt.equal(callBound('%Object.prototype.toString%')(true), Object.prototype.toString.call(true), 'call-bound %Object.prototype.toString% calls into the original');\n\n\tt['throws'](\n\t\tfunction () { callBound('does not exist'); },\n\t\tSyntaxError,\n\t\t'nonexistent intrinsic throws'\n\t);\n\tt['throws'](\n\t\tfunction () { callBound('does not exist', true); },\n\t\tSyntaxError,\n\t\t'allowMissing arg still throws for unknown intrinsic'\n\t);\n\n\tt.test('real but absent intrinsic', { skip: typeof WeakRef !== 'undefined' }, function (st) {\n\t\tst['throws'](\n\t\t\tfunction () { callBound('WeakRef'); },\n\t\t\tTypeError,\n\t\t\t'real but absent intrinsic throws'\n\t\t);\n\t\tst.equal(callBound('WeakRef', true), undefined, 'allowMissing arg avoids exception');\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}