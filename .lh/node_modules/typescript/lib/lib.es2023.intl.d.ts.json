{
    "sourceFile": "node_modules/typescript/lib/lib.es2023.intl.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893076128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\ndeclare namespace Intl {\n    interface NumberFormatOptionsUseGroupingRegistry {\n        min2: never;\n        auto: never;\n        always: never;\n    }\n\n    interface NumberFormatOptionsSignDisplayRegistry {\n        negative: never;\n    }\n\n    interface NumberFormatOptions {\n        roundingPriority?: \"auto\" | \"morePrecision\" | \"lessPrecision\" | undefined;\n        roundingIncrement?: 1 | 2 | 5 | 10 | 20 | 25 | 50 | 100 | 200 | 250 | 500 | 1000 | 2000 | 2500 | 5000 | undefined;\n        roundingMode?: \"ceil\" | \"floor\" | \"expand\" | \"trunc\" | \"halfCeil\" | \"halfFloor\" | \"halfExpand\" | \"halfTrunc\" | \"halfEven\" | undefined;\n        trailingZeroDisplay?: \"auto\" | \"stripIfInteger\" | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        roundingPriority: \"auto\" | \"morePrecision\" | \"lessPrecision\";\n        roundingMode: \"ceil\" | \"floor\" | \"expand\" | \"trunc\" | \"halfCeil\" | \"halfFloor\" | \"halfExpand\" | \"halfTrunc\" | \"halfEven\";\n        roundingIncrement: 1 | 2 | 5 | 10 | 20 | 25 | 50 | 100 | 200 | 250 | 500 | 1000 | 2000 | 2500 | 5000;\n        trailingZeroDisplay: \"auto\" | \"stripIfInteger\";\n    }\n\n    interface NumberRangeFormatPart extends NumberFormatPart {\n        source: \"startRange\" | \"endRange\" | \"shared\";\n    }\n\n    type StringNumericLiteral = `${number}` | \"Infinity\" | \"-Infinity\" | \"+Infinity\";\n\n    interface NumberFormat {\n        format(value: number | bigint | StringNumericLiteral): string;\n        formatToParts(value: number | bigint | StringNumericLiteral): NumberFormatPart[];\n        formatRange(start: number | bigint | StringNumericLiteral, end: number | bigint | StringNumericLiteral): string;\n        formatRangeToParts(start: number | bigint | StringNumericLiteral, end: number | bigint | StringNumericLiteral): NumberRangeFormatPart[];\n    }\n}\n"
        }
    ]
}