{
    "sourceFile": "node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893076568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\n/// <reference lib=\"es2020.bigint\" />\n\ninterface Atomics {\n    /**\n     * A non-blocking, asynchronous version of wait which is usable on the main thread.\n     * Waits asynchronously on a shared memory location and returns a Promise\n     * @param typedArray A shared Int32Array or BigInt64Array.\n     * @param index The position in the typedArray to wait on.\n     * @param value The expected value to test.\n     * @param [timeout] The expected value to test.\n     */\n    waitAsync(typedArray: Int32Array, index: number, value: number, timeout?: number): { async: false; value: \"not-equal\" | \"timed-out\"; } | { async: true; value: Promise<\"ok\" | \"timed-out\">; };\n\n    /**\n     * A non-blocking, asynchronous version of wait which is usable on the main thread.\n     * Waits asynchronously on a shared memory location and returns a Promise\n     * @param typedArray A shared Int32Array or BigInt64Array.\n     * @param index The position in the typedArray to wait on.\n     * @param value The expected value to test.\n     * @param [timeout] The expected value to test.\n     */\n    waitAsync(typedArray: BigInt64Array, index: number, value: bigint, timeout?: number): { async: false; value: \"not-equal\" | \"timed-out\"; } | { async: true; value: Promise<\"ok\" | \"timed-out\">; };\n}\n\ninterface SharedArrayBuffer {\n    /**\n     * Returns true if this SharedArrayBuffer can be grown.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/growable)\n     */\n    get growable(): boolean;\n\n    /**\n     * If this SharedArrayBuffer is growable, returns the maximum byte length given during construction; returns the byte length if not.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/maxByteLength)\n     */\n    get maxByteLength(): number;\n\n    /**\n     * Grows the SharedArrayBuffer to the specified size (in bytes).\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/grow)\n     */\n    grow(newByteLength?: number): void;\n}\n\ninterface SharedArrayBufferConstructor {\n    new (byteLength: number, options?: { maxByteLength?: number; }): SharedArrayBuffer;\n}\n"
        }
    ]
}