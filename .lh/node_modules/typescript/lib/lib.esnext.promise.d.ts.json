{
    "sourceFile": "node_modules/typescript/lib/lib.esnext.promise.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893077035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\ninterface PromiseConstructor {\n    /**\n     * Takes a callback of any kind (returns or throws, synchronously or asynchronously) and wraps its result\n     * in a Promise.\n     *\n     * @param callbackFn A function that is called synchronously. It can do anything: either return\n     * a value, throw an error, or return a promise.\n     * @param args Additional arguments, that will be passed to the callback.\n     *\n     * @returns A Promise that is:\n     * - Already fulfilled, if the callback synchronously returns a value.\n     * - Already rejected, if the callback synchronously throws an error.\n     * - Asynchronously fulfilled or rejected, if the callback returns a promise.\n     */\n    try<T, U extends unknown[]>(callbackFn: (...args: U) => T | PromiseLike<T>, ...args: U): Promise<Awaited<T>>;\n}\n"
        }
    ]
}