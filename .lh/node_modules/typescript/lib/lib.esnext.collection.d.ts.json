{
    "sourceFile": "node_modules/typescript/lib/lib.esnext.collection.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893076804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\n/// <reference lib=\"es2024.collection\" />\n\ninterface ReadonlySetLike<T> {\n    /**\n     * Despite its name, returns an iterator of the values in the set-like.\n     */\n    keys(): Iterator<T>;\n    /**\n     * @returns a boolean indicating whether an element with the specified value exists in the set-like or not.\n     */\n    has(value: T): boolean;\n    /**\n     * @returns the number of (unique) elements in the set-like.\n     */\n    readonly size: number;\n}\n\ninterface Set<T> {\n    /**\n     * @returns a new Set containing all the elements in this Set and also all the elements in the argument.\n     */\n    union<U>(other: ReadonlySetLike<U>): Set<T | U>;\n    /**\n     * @returns a new Set containing all the elements which are both in this Set and in the argument.\n     */\n    intersection<U>(other: ReadonlySetLike<U>): Set<T & U>;\n    /**\n     * @returns a new Set containing all the elements in this Set which are not also in the argument.\n     */\n    difference<U>(other: ReadonlySetLike<U>): Set<T>;\n    /**\n     * @returns a new Set containing all the elements which are in either this Set or in the argument, but not in both.\n     */\n    symmetricDifference<U>(other: ReadonlySetLike<U>): Set<T | U>;\n    /**\n     * @returns a boolean indicating whether all the elements in this Set are also in the argument.\n     */\n    isSubsetOf(other: ReadonlySetLike<unknown>): boolean;\n    /**\n     * @returns a boolean indicating whether all the elements in the argument are also in this Set.\n     */\n    isSupersetOf(other: ReadonlySetLike<unknown>): boolean;\n    /**\n     * @returns a boolean indicating whether this Set has no elements in common with the argument.\n     */\n    isDisjointFrom(other: ReadonlySetLike<unknown>): boolean;\n}\n\ninterface ReadonlySet<T> {\n    /**\n     * @returns a new Set containing all the elements in this Set and also all the elements in the argument.\n     */\n    union<U>(other: ReadonlySetLike<U>): Set<T | U>;\n    /**\n     * @returns a new Set containing all the elements which are both in this Set and in the argument.\n     */\n    intersection<U>(other: ReadonlySetLike<U>): Set<T & U>;\n    /**\n     * @returns a new Set containing all the elements in this Set which are not also in the argument.\n     */\n    difference<U>(other: ReadonlySetLike<U>): Set<T>;\n    /**\n     * @returns a new Set containing all the elements which are in either this Set or in the argument, but not in both.\n     */\n    symmetricDifference<U>(other: ReadonlySetLike<U>): Set<T | U>;\n    /**\n     * @returns a boolean indicating whether all the elements in this Set are also in the argument.\n     */\n    isSubsetOf(other: ReadonlySetLike<unknown>): boolean;\n    /**\n     * @returns a boolean indicating whether all the elements in the argument are also in this Set.\n     */\n    isSupersetOf(other: ReadonlySetLike<unknown>): boolean;\n    /**\n     * @returns a boolean indicating whether this Set has no elements in common with the argument.\n     */\n    isDisjointFrom(other: ReadonlySetLike<unknown>): boolean;\n}\n"
        }
    ]
}