{
    "sourceFile": "node_modules/get-symbol-description/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892316585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar debug = require('object-inspect');\nvar forEach = require('for-each');\nvar hasOwn = require('hasown');\nvar v = require('es-value-fixtures');\n\nvar getSymbolDescription = require('../');\nvar getInferredName = require('../getInferredName');\n\ntest('getSymbolDescription', function (t) {\n\tt.test('no symbols', { skip: v.hasSymbols }, function (st) {\n\t\tst['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tgetSymbolDescription,\n\t\t\tSyntaxError,\n\t\t\t'requires Symbol support'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tforEach([].concat(\n\t\t// @ts-expect-error TS sucks with concat\n\t\tv.nonSymbolPrimitives,\n\t\tv.objects\n\t), function (nonSymbol) {\n\t\tt['throws'](\n\t\t\tfunction () { getSymbolDescription(nonSymbol); },\n\t\t\tv.hasSymbols ? TypeError : SyntaxError,\n\t\t\tdebug(nonSymbol) + ' is not a Symbol'\n\t\t);\n\t});\n\n\tt.test('with symbols', { skip: !v.hasSymbols }, function (st) {\n\t\tforEach(\n\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t/** @type {[symbol, undefined | string][]} */ ([\n\t\t\t\t[Symbol(), undefined],\n\t\t\t\t[Symbol(undefined), undefined],\n\t\t\t\t// @ts-expect-error\n\t\t\t\t[Symbol(null), 'null'],\n\t\t\t\t[Symbol.iterator, 'Symbol.iterator'],\n\t\t\t\t[Symbol('foo'), 'foo']\n\t\t\t]),\n\t\t\tfunction (pair) {\n\t\t\t\tvar sym = pair[0];\n\t\t\t\tvar desc = pair[1];\n\t\t\t\tst.equal(getSymbolDescription(sym), desc, debug(sym) + ' description is ' + debug(desc));\n\t\t\t}\n\t\t);\n\n\t\tst.test('only possible when inference or native `Symbol.prototype.description` is supported', {\n\t\t\tskip: !getInferredName && !hasOwn(Symbol.prototype, 'description')\n\t\t}, function (s2t) {\n\t\t\ts2t.equal(getSymbolDescription(Symbol('')), '', 'Symbol(\"\") description is \"\"');\n\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('only possible when global symbols are supported', {\n\t\t\tskip: !hasOwn(Symbol, 'for') || !hasOwn(Symbol, 'keyFor')\n\t\t}, function (s2t) {\n\t\t\t// eslint-disable-next-line no-restricted-properties\n\t\t\ts2t.equal(getSymbolDescription(Symbol['for']('')), '', 'Symbol.for(\"\") description is \"\"');\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}