{
    "sourceFile": "node_modules/get-symbol-description/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892316424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bound');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar getGlobalSymbolDescription = GetIntrinsic('%Symbol.keyFor%', true);\n/** @type {undefined | ((thisArg: symbol | Symbol) => symbol)} */\nvar thisSymbolValue = callBound('%Symbol.prototype.valueOf%', true);\n/** @type {undefined | ((thisArg: symbol | Symbol) => string)} */\nvar symToStr = callBound('Symbol.prototype.toString', true);\n/** @type {(thisArg: string, start?: number, end?: number) => string} */\nvar $strSlice = callBound('String.prototype.slice');\n\nvar getInferredName = require('./getInferredName');\n\n/** @type {import('.')} */\n/* eslint-disable consistent-return */\nmodule.exports = callBound('%Symbol.prototype.description%', true) || function getSymbolDescription(symbol) {\n\tif (!thisSymbolValue) {\n\t\tthrow new $SyntaxError('Symbols are not supported in this environment');\n\t}\n\n\t// will throw if not a symbol primitive or wrapper object\n\tvar sym = thisSymbolValue(symbol);\n\n\tif (getInferredName) {\n\t\tvar name = getInferredName(sym);\n\t\tif (name === '') {\n\t\t\treturn;\n\t\t}\n\t\treturn name.slice(1, -1); // name.slice('['.length, -']'.length);\n\t}\n\n\tvar desc;\n\tif (getGlobalSymbolDescription) {\n\t\tdesc = getGlobalSymbolDescription(sym);\n\t\tif (typeof desc === 'string') {\n\t\t\treturn desc;\n\t\t}\n\t}\n\n\t// eslint-disable-next-line no-extra-parens\n\tdesc = $strSlice(/** @type {NonNullable<typeof symToStr>} */ (symToStr)(sym), 7, -1); // str.slice('Symbol('.length, -')'.length);\n\tif (desc) {\n\t\treturn desc;\n\t}\n};\n"
        }
    ]
}