{
    "sourceFile": "node_modules/oauth/tests/oauth2tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892939123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var vows = require('vows'),\n    assert = require('assert'),\n    DummyResponse= require('./shared').DummyResponse,\n    DummyRequest= require('./shared').DummyRequest,\n    https = require('https'),\n    OAuth2= require('../lib/oauth2').OAuth2,\n    url = require('url');\n\nvows.describe('OAuth2').addBatch({\n    'Given an OAuth2 instance with clientId and clientSecret, ': {\n      topic: new OAuth2(\"clientId\", \"clientSecret\"),\n      'When dealing with the response from the OP': {\n        'we should treat a 201 response as a success': function(oa) {\n          var callbackCalled= false;\n          var http_library= {\n            request: function() {\n              return new DummyRequest(new DummyResponse(201));\n            }\n          };\n          oa._executeRequest( http_library, {}, null, function(err, result, response) {\n            callbackCalled= true;\n            assert.equal(err, null);\n          });\n          assert.ok(callbackCalled);\n        },\n        'we should treat a 200 response as a success': function(oa) {\n          var callbackCalled= false;\n          var http_library= {\n            request: function() {\n              return new DummyRequest(new DummyResponse(200));\n            }\n          };\n          oa._executeRequest( http_library, {}, null, function(err, result, response) {\n            callbackCalled= true;\n            assert.equal(err, null);\n          });\n          assert.ok(callbackCalled);\n        }\n      },\n      'When handling the access token response': {\n        'we should correctly extract the token if received as form-data': function (oa) {\n            oa._request= function( method, url, fo, bar, bleh, callback) {\n              callback(null, \"access_token=access&refresh_token=refresh\");\n            };\n            oa.getOAuthAccessToken(\"\", {}, function(error, access_token, refresh_token) {\n              assert.equal( access_token, \"access\");\n              assert.equal( refresh_token, \"refresh\");\n            });\n        },\n        'we should not include access token in both querystring and headers (favours headers if specified)': function (oa) {\n            oa._request = new OAuth2(\"clientId\", \"clientSecret\")._request.bind(oa);\n            oa._executeRequest= function( http_library, options, post_body, callback) {\n              callback(null, url.parse(options.path, true).query, options.headers);\n            };\n\n            oa._request(\"GET\", \"http://foo/\", {\"Authorization\":\"Bearer BadNews\"}, null, \"accessx\",  function(error, query, headers) {\n              assert.ok( !('access_token' in query), \"access_token also in query\");\n              assert.ok( 'Authorization' in headers, \"Authorization not in headers\");\n            });\n        },\n        'we should include access token in the querystring if no Authorization header present to override it': function (oa) {\n           oa._request = new OAuth2(\"clientId\", \"clientSecret\")._request.bind(oa);\n           oa._executeRequest= function( http_library, options, post_body, callback) {\n             callback(null, url.parse(options.path, true).query, options.headers);\n           };\n           oa._request(\"GET\", \"http://foo/\", {}, null, \"access\",  function(error, query, headers) {\n             assert.ok( 'access_token' in query, \"access_token not present in query\");\n              assert.ok( !('Authorization' in headers), \"Authorization in headers\");\n            });\n        },\n        'we should correctly extract the token if received as a JSON literal': function (oa) {\n          oa._request= function(method, url, headers, post_body, access_token, callback) {\n            callback(null, '{\"access_token\":\"access\",\"refresh_token\":\"refresh\"}');\n          };\n          oa.getOAuthAccessToken(\"\", {}, function(error, access_token, refresh_token) {\n            assert.equal( access_token, \"access\");\n            assert.equal( refresh_token, \"refresh\");\n          });\n        },\n        'we should return the received data to the calling method': function (oa) {\n          oa._request= function(method, url, headers, post_body, access_token, callback) {\n            callback(null, '{\"access_token\":\"access\",\"refresh_token\":\"refresh\",\"extra_1\":1, \"extra_2\":\"foo\"}');\n          };\n          oa.getOAuthAccessToken(\"\", {}, function(error, access_token, refresh_token, results) {\n            assert.equal( access_token, \"access\");\n            assert.equal( refresh_token, \"refresh\");\n            assert.isNotNull( results );\n            assert.equal( results.extra_1, 1);\n            assert.equal( results.extra_2, \"foo\");\n          });\n        }\n      },\n      'When no grant_type parameter is specified': {\n        'we should pass the value of the code argument as the code parameter': function(oa) {\n          oa._request= function(method, url, headers, post_body, access_token, callback) {\n            assert.isTrue( post_body.indexOf(\"code=xsds23\") != -1 );\n          };\n          oa.getOAuthAccessToken(\"xsds23\", {} );\n        }\n      },\n      'When an invalid grant_type parameter is specified': {\n        'we should pass the value of the code argument as the code parameter': function(oa) {\n          oa._request= function(method, url, headers, post_body, access_token, callback) {\n            assert.isTrue( post_body.indexOf(\"code=xsds23\") != -1 );\n          };\n          oa.getOAuthAccessToken(\"xsds23\", {grant_type:\"refresh_toucan\"} );\n        }\n      },\n      'When a grant_type parameter of value \"refresh_token\" is specified': {\n        'we should pass the value of the code argument as the refresh_token parameter, should pass a grant_type parameter, but shouldn\\'t pass a code parameter' : function(oa) {\n          oa._request= function(method, url, headers, post_body, access_token, callback) {\n            assert.isTrue( post_body.indexOf(\"refresh_token=sdsds2\") != -1 );\n            assert.isTrue( post_body.indexOf(\"grant_type=refresh_token\") != -1 );\n            assert.isTrue( post_body.indexOf(\"code=\") == -1 );\n          };\n          oa.getOAuthAccessToken(\"sdsds2\", {grant_type:\"refresh_token\"} );\n        }\n      },\n      'When we use the authorization header': {\n        'and call get with the default authorization method': {\n          'we should pass the authorization header with Bearer method and value of the access_token, _request should be passed a null access_token' : function(oa) {\n            oa._request= function(method, url, headers, post_body, access_token, callback) {\n              assert.equal(headers[\"Authorization\"], \"Bearer abcd5\");\n              assert.isNull( access_token );\n            };\n            oa.useAuthorizationHeaderforGET(true);\n            oa.get(\"\", \"abcd5\");\n          }\n        },\n        'and call get with the authorization method set to Basic': {\n          'we should pass the authorization header with Basic method and value of the access_token, _request should be passed a null access_token' : function(oa) {\n            oa._request= function(method, url, headers, post_body, access_token, callback) {\n              assert.equal(headers[\"Authorization\"], \"Basic cdg2\");\n              assert.isNull( access_token );\n            };\n            oa.useAuthorizationHeaderforGET(true);\n            oa.setAuthMethod(\"Basic\");\n            oa.get(\"\", \"cdg2\");\n          }\n        }\n      },\n      'When we do not use the authorization header': {\n        'and call get': {\n          'we should pass NOT provide an authorization header and the access_token should be being passed to _request' : function(oa) {\n            oa._request= function(method, url, headers, post_body, access_token, callback) {\n              assert.isUndefined(headers[\"Authorization\"]);\n              assert.equal( access_token, \"abcd5\" );\n            };\n            oa.useAuthorizationHeaderforGET(false);\n            oa.get(\"\", \"abcd5\");\n          }\n        }\n      }\n    },\n    'Given an OAuth2 instance with clientId, clientSecret and customHeaders': {\n      topic: new OAuth2(\"clientId\", \"clientSecret\", undefined, undefined, undefined,\n          { 'SomeHeader': '123' }),\n      'When GETing': {\n        'we should see the custom headers mixed into headers property in options passed to http-library' : function(oa) {\n          oa._executeRequest= function( http_library, options, callback ) {\n            assert.equal(options.headers[\"SomeHeader\"], \"123\");\n          };\n          oa.get(\"\", {});\n        },\n      }\n    },\n    'Given an OAuth2 instance with a clientId and clientSecret': {\n      topic: new OAuth2(\"clientId\", \"clientSecret\"),\n        'When POSTing': {\n          'we should see a given string being sent to the request' : function(oa) {\n            var bodyWritten= false;\n            oa._chooseHttpLibrary= function() {\n              return {\n                request: function(options) {\n                  assert.equal(options.headers[\"Content-Type\"], \"text/plain\");\n                  assert.equal(options.headers[\"Content-Length\"], 26);\n                  assert.equal(options.method, \"POST\");\n                  return  {\n                    end: function() {},\n                    on: function() {},\n                    write: function(body) {\n                      bodyWritten= true;\n                      assert.isNotNull(body);\n                      assert.equal(body, \"THIS_IS_A_POST_BODY_STRING\")\n                    }\n                  }\n                }\n              };\n            }\n            oa._request(\"POST\", \"\", {\"Content-Type\":\"text/plain\"}, \"THIS_IS_A_POST_BODY_STRING\");\n            assert.ok( bodyWritten );\n          },\n          'we should see a given buffer being sent to the request' : function(oa) {\n            var bodyWritten= false;\n            oa._chooseHttpLibrary= function() {\n              return {\n                request: function(options) {\n                  assert.equal(options.headers[\"Content-Type\"], \"application/octet-stream\");\n                  assert.equal(options.headers[\"Content-Length\"], 4);\n                  assert.equal(options.method, \"POST\");\n                  return  {\n                    end: function() {},\n                    on: function() {},\n                    write: function(body) {\n                      bodyWritten= true;\n                      assert.isNotNull(body);\n                      assert.equal(4, body.length)\n                    }\n                  }\n                }\n              };\n            }\n            oa._request(\"POST\", \"\", {\"Content-Type\":\"application/octet-stream\"}, new Buffer([1,2,3,4]));\n            assert.ok( bodyWritten );\n          }\n        },\n        'When PUTing': {\n          'we should see a given string being sent to the request' : function(oa) {\n            var bodyWritten= false;\n            oa._chooseHttpLibrary= function() {\n              return {\n                request: function(options) {\n                  assert.equal(options.headers[\"Content-Type\"], \"text/plain\");\n                  assert.equal(options.headers[\"Content-Length\"], 25);\n                  assert.equal(options.method, \"PUT\");\n                  return  {\n                    end: function() {},\n                    on: function() {},\n                    write: function(body) {\n                      bodyWritten= true;\n                      assert.isNotNull(body);\n                      assert.equal(body, \"THIS_IS_A_PUT_BODY_STRING\")\n                    }\n                  }\n                }\n              };\n            }\n            oa._request(\"PUT\", \"\", {\"Content-Type\":\"text/plain\"}, \"THIS_IS_A_PUT_BODY_STRING\");\n            assert.ok( bodyWritten );\n          },\n          'we should see a given buffer being sent to the request' : function(oa) {\n            var bodyWritten= false;\n            oa._chooseHttpLibrary= function() {\n              return {\n                request: function(options) {\n                  assert.equal(options.headers[\"Content-Type\"], \"application/octet-stream\");\n                  assert.equal(options.headers[\"Content-Length\"], 4);\n                  assert.equal(options.method, \"PUT\");\n                  return  {\n                    end: function() {},\n                    on: function() {},\n                    write: function(body) {\n                      bodyWritten= true;\n                      assert.isNotNull(body);\n                      assert.equal(4, body.length)\n                    }\n                  }\n                }\n              };\n            }\n            oa._request(\"PUT\", \"\", {\"Content-Type\":\"application/octet-stream\"}, new Buffer([1,2,3,4]));\n            assert.ok( bodyWritten );\n          }\n        }\n    },\n    'When the user passes in the User-Agent in customHeaders': {\n      topic: new OAuth2(\"clientId\", \"clientSecret\", undefined, undefined, undefined,\n          { 'User-Agent': '123Agent' }),\n      'When calling get': {\n        'we should see the User-Agent mixed into headers property in options passed to http-library' : function(oa) {\n          oa._executeRequest= function( http_library, options, callback ) {\n            assert.equal(options.headers[\"User-Agent\"], \"123Agent\");\n          };\n          oa.get(\"\", {});\n        }\n      }\n    },\n    'When the user does not pass in a User-Agent in customHeaders': {\n      topic: new OAuth2(\"clientId\", \"clientSecret\", undefined, undefined, undefined,\n        undefined),\n      'When calling get': {\n        'we should see the default User-Agent mixed into headers property in options passed to http-library' : function(oa) {\n          oa._executeRequest= function( http_library, options, callback ) {\n            assert.equal(options.headers[\"User-Agent\"], \"Node-oauth\");\n            };\n          oa.get(\"\", {});\n        }\n      }\n    },\n    'When specifying an agent, that agent is passed to the HTTP request method' : {\n      topic : new OAuth2('clientId', 'clientSecret', undefined, undefined, undefined, undefined),\n      'When calling _executeRequest': {\n        'we whould see the agent being put into the options' : function(oa) {\n          oa.setAgent('awesome agent');\n          oa._executeRequest({\n            request : function(options, cb) {\n              assert.equal(options.agent, 'awesome agent');\n              return new DummyRequest(new DummyResponse(200));\n            }\n          }, {}, null, function() {});\n        }\n      }\n    }\n}).export(module);\n"
        }
    ]
}