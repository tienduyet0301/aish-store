{
    "sourceFile": "node_modules/oauth/tests/oauthtests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892939286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var vows = require('vows'),\n    assert = require('assert'),\n    DummyResponse= require('./shared').DummyResponse,\n    DummyRequest= require('./shared').DummyRequest,\n    events = require('events'),\n    OAuth= require('../lib/oauth').OAuth,\n    OAuthEcho= require('../lib/oauth').OAuthEcho,\n    crypto = require('crypto');\n\n//Valid RSA keypair used to test RSA-SHA1 signature method\nvar RsaPrivateKey = \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n\"MIICXQIBAAKBgQDizE4gQP5nPQhzof/Vp2U2DDY3UY/Gxha2CwKW0URe7McxtnmE\\n\" +\n\"CrZnT1n/YtfrrCNxY5KMP4o8hMrxsYEe05+1ZGFT68ztms3puUxilU5E3BQMhz1t\\n\" +\n\"JMJEGcTt8nZUlM4utli7fHgDtWbhvqvYjRMGn3AjyLOfY8XZvnFkGjipvQIDAQAB\\n\" +\n\"AoGAKgk6FcpWHOZ4EY6eL4iGPt1Gkzw/zNTcUsN5qGCDLqDuTq2Gmk2t/zn68VXt\\n\" +\n\"tVXDf/m3qN0CDzOBtghzaTZKLGhnSewQ98obMWgPcvAsb4adEEeW1/xigbMiaW2X\\n\" +\n\"cu6GhZxY16edbuQ40LRrPoVK94nXQpj8p7w4IQ301Sm8PSECQQD1ZlOj4ugvfhEt\\n\" +\n\"exi4WyAaM45fylmN290UXYqZ8SYPI/VliDytIlMfyq5Rv+l+dud1XDPrWOQ0ImgV\\n\" +\n\"HJn7uvoZAkEA7JhHNmHF9dbdF9Koj86K2Cl6c8KUu7U7d2BAuB6pPkt8+D8+y4St\\n\" +\n\"PaCmN4oP4X+sf5rqBYoXywHlqEei2BdpRQJBAMYgR4cZu7wcXGIL8HlnmROObHSK\\n\" +\n\"OqN9z5CRtUV0nPW8YnQG+nYOMG6KhRMbjri750OpnYF100kEPmRNI0VKQIECQE8R\\n\" +\n\"fQsRleTYz768ahTVQ9WF1ySErMwmfx8gDcD6jjkBZVxZVpURXAwyehopi7Eix/VF\\n\" +\n\"QlxjkBwKIEQi3Ks297kCQQCL9by1bueKDMJO2YX1Brm767pkDKkWtGfPS+d3xMtC\\n\" +\n\"KJHHCqrS1V+D5Q89x5wIRHKxE5UMTc0JNa554OxwFORX\\n\" +\n\"-----END RSA PRIVATE KEY-----\";\n\nvar RsaPublicKey = \"-----BEGIN PUBLIC KEY-----\\n\" +\n\"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDizE4gQP5nPQhzof/Vp2U2DDY3\\n\" +\n\"UY/Gxha2CwKW0URe7McxtnmECrZnT1n/YtfrrCNxY5KMP4o8hMrxsYEe05+1ZGFT\\n\" +\n\"68ztms3puUxilU5E3BQMhz1tJMJEGcTt8nZUlM4utli7fHgDtWbhvqvYjRMGn3Aj\\n\" +\n\"yLOfY8XZvnFkGjipvQIDAQAB\\n\" +\n\"-----END PUBLIC KEY-----\";\n\nvows.describe('OAuth').addBatch({\n    'When newing OAuth': {\n      topic: new OAuth(null, null, null, null, null, null, \"PLAINTEXT\"),\n      'followRedirects is enabled by default': function (oa) {\n        assert.equal(oa._clientOptions.followRedirects, true)\n      }\n    },\n    'When generating the signature base string described in http://oauth.net/core/1.0/#sig_base_example': {\n        topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n        'we get the expected result string': function (oa) {\n          var result= oa._createSignatureBase(\"GET\", \"http://photos.example.net/photos\",\n                                              \"file=vacation.jpg&oauth_consumer_key=dpf43f3p2l4k3l03&oauth_nonce=kllo9940pd9333jh&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1191242096&oauth_token=nnch734d00sl2jdk&oauth_version=1.0&size=original\")\n          assert.equal( result, \"GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal\");\n        }\n    },\n    'When generating the signature with RSA-SHA1': {\n        topic: new OAuth(null, null, null, RsaPrivateKey, null, null, \"RSA-SHA1\"),\n        'we get a valid oauth signature': function (oa) {\n            var signatureBase = \"GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DRSA-SHA1%26oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal\";\n            var oauthSignature = oa._createSignature(signatureBase, \"xyz4992k83j47x0b\");\n            \n            assert.equal( oauthSignature, \"qS4rhWog7GPgo4ZCJvUdC/1ZAax/Q4Ab9yOBvgxSopvmKUKp5rso+Zda46GbyN2hnYDTiA/g3P/d/YiPWa454BEBb/KWFV83HpLDIoqUUhJnlXX9MqRQQac0oeope4fWbGlfTdL2PXjSFJmvfrzybERD/ZufsFtVrQKS3QBpYiw=\");\n            \n            //now check that given the public key we can verify this signature\n            var verifier = crypto.createVerify(\"RSA-SHA1\").update(signatureBase);\n            var valid = verifier.verify(RsaPublicKey, oauthSignature, 'base64');\n            assert.ok( valid, \"Signature could not be verified with RSA public key\");\n        }\n    },\n    'When generating the signature base string with PLAINTEXT': {\n        topic: new OAuth(null, null, null, null, null, null, \"PLAINTEXT\"),\n        'we get the expected result string': function (oa) {\n          var result= oa._getSignature(\"GET\", \"http://photos.example.net/photos\",\n                                              \"file=vacation.jpg&oauth_consumer_key=dpf43f3p2l4k3l03&oauth_nonce=kllo9940pd9333jh&oauth_signature_method=PLAINTEXT&oauth_timestamp=1191242096&oauth_token=nnch734d00sl2jdk&oauth_version=1.0&size=original\",\n                                              \"test\");\n          assert.equal( result, \"&test\");\n        }\n    },\n    'When normalising a url': {\n      topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n      'default ports should be stripped': function(oa) {\n        assert.equal( oa._normalizeUrl(\"https://somehost.com:443/foo/bar\"), \"https://somehost.com/foo/bar\" );\n      },\n      'should leave in non-default ports from urls for use in signature generation': function(oa) {\n        assert.equal( oa._normalizeUrl(\"https://somehost.com:446/foo/bar\"), \"https://somehost.com:446/foo/bar\" );\n        assert.equal( oa._normalizeUrl(\"http://somehost.com:81/foo/bar\"), \"http://somehost.com:81/foo/bar\" );\n      },\n      'should add a trailing slash when no path at all is present': function(oa) {\n        assert.equal( oa._normalizeUrl(\"http://somehost.com\"),  \"http://somehost.com/\")\n      }\n    },\n    'When making an array out of the arguments hash' : {\n      topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n      'flatten out arguments that are arrays' : function(oa) {\n        var parameters= {\"z\": \"a\",\n                      \"a\": [\"1\", \"2\"],\n                      \"1\": \"c\" };\n        var parameterResults= oa._makeArrayOfArgumentsHash(parameters);\n        assert.equal(parameterResults.length, 4);\n        assert.equal(parameterResults[0][0], \"1\");\n        assert.equal(parameterResults[1][0], \"z\");\n        assert.equal(parameterResults[2][0], \"a\");\n        assert.equal(parameterResults[3][0], \"a\");\n      }\n    },\n    'When ordering the request parameters'  : {\n      topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n      'Order them by name' : function(oa) {\n        var parameters= {\"z\": \"a\",\n                      \"a\": \"b\",\n                      \"1\": \"c\" };\n        var parameterResults= oa._sortRequestParams(oa._makeArrayOfArgumentsHash(parameters))\n        assert.equal(parameterResults[0][0], \"1\");\n        assert.equal(parameterResults[1][0], \"a\");\n        assert.equal(parameterResults[2][0], \"z\");\n      },\n      'If two parameter names are the same then order by the value': function(oa) {\n        var parameters= {\"z\": \"a\",\n                      \"a\": [\"z\", \"b\", \"b\", \"a\", \"y\"],\n                      \"1\": \"c\" };\n        var parameterResults= oa._sortRequestParams(oa._makeArrayOfArgumentsHash(parameters))\n        assert.equal(parameterResults[0][0], \"1\");\n        assert.equal(parameterResults[1][0], \"a\");\n        assert.equal(parameterResults[1][1], \"a\");\n        assert.equal(parameterResults[2][0], \"a\");\n        assert.equal(parameterResults[2][1], \"b\");\n        assert.equal(parameterResults[3][0], \"a\");\n        assert.equal(parameterResults[3][1], \"b\");\n        assert.equal(parameterResults[4][0], \"a\");\n        assert.equal(parameterResults[4][1], \"y\");\n        assert.equal(parameterResults[5][0], \"a\");\n        assert.equal(parameterResults[5][1], \"z\");\n        assert.equal(parameterResults[6][0], \"z\");\n      }\n    },\n    'When normalising the request parameters': {\n      topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n      'the resulting parameters should be encoded and ordered as per http://tools.ietf.org/html/rfc5849#section-3.1 (3.4.1.3.2)' : function(oa) {\n        var parameters= {\"b5\" : \"=%3D\",\n          \"a3\": [\"a\", \"2 q\"],\n          \"c@\": \"\",\n          \"a2\": \"r b\",\n          \"oauth_consumer_key\": \"9djdj82h48djs9d2\",\n          \"oauth_token\":\"kkk9d7dh3k39sjv7\",\n          \"oauth_signature_method\": \"HMAC-SHA1\",\n          \"oauth_timestamp\": \"137131201\",\n          \"oauth_nonce\": \"7d8f3e4a\",\n          \"c2\" :  \"\"};\n        var normalisedParameterString= oa._normaliseRequestParams(parameters);\n        assert.equal(normalisedParameterString, \"a2=r%20b&a3=2%20q&a3=a&b5=%3D%253D&c%40=&c2=&oauth_consumer_key=9djdj82h48djs9d2&oauth_nonce=7d8f3e4a&oauth_signature_method=HMAC-SHA1&oauth_timestamp=137131201&oauth_token=kkk9d7dh3k39sjv7\");\n      }\n    },\n    'When preparing the parameters for use in signing': {\n      topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n      'We need to be wary of node\\'s auto object creation from foo[bar] style url parameters' : function(oa) {\n        var result= oa._prepareParameters( \"\", \"\", \"\", \"http://foo.com?foo[bar]=xxx&bar[foo]=yyy\", {} );\n        assert.equal( result[0][0], \"bar[foo]\")\n        assert.equal( result[0][1], \"yyy\")\n        assert.equal( result[1][0], \"foo[bar]\")\n        assert.equal( result[1][1], \"xxx\")\n      }\n    },\n    'When signing a url': {\n      topic: function() {\n        var oa= new OAuth(null, null, \"consumerkey\", \"consumersecret\", \"1.0\", null, \"HMAC-SHA1\");\n        oa._getTimestamp= function(){ return \"1272399856\"; }\n        oa._getNonce= function(){ return \"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\"; }\n        return oa;\n      },\n      'Provide a valid signature when no token present': function(oa) {\n        assert.equal( oa.signUrl(\"http://somehost.com:3323/foo/poop?bar=foo\"), \"http://somehost.com:3323/foo/poop?bar=foo&oauth_consumer_key=consumerkey&oauth_nonce=ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1272399856&oauth_version=1.0&oauth_signature=7ytO8vPSLut2GzHjU9pn1SV9xjc%3D\");\n      },\n      'Provide a valid signature when a token is present': function(oa) {\n        assert.equal( oa.signUrl(\"http://somehost.com:3323/foo/poop?bar=foo\", \"token\"), \"http://somehost.com:3323/foo/poop?bar=foo&oauth_consumer_key=consumerkey&oauth_nonce=ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1272399856&oauth_token=token&oauth_version=1.0&oauth_signature=9LwCuCWw5sURtpMroIolU3YwsdI%3D\");\n      },\n      'Provide a valid signature when a token and a token secret is present': function(oa) {\n        assert.equal( oa.signUrl(\"http://somehost.com:3323/foo/poop?bar=foo\", \"token\", \"tokensecret\"), \"http://somehost.com:3323/foo/poop?bar=foo&oauth_consumer_key=consumerkey&oauth_nonce=ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1272399856&oauth_token=token&oauth_version=1.0&oauth_signature=zeOR0Wsm6EG6XSg0Vw%2FsbpoSib8%3D\");\n      }\n    },\n    'When getting a request token': {\n        topic: function() {\n          var oa= new OAuth(null, null, \"consumerkey\", \"consumersecret\", \"1.0\", null, \"HMAC-SHA1\");\n          oa._getTimestamp= function(){ return \"1272399856\"; }\n          oa._getNonce= function(){ return \"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\"; }\n          oa._performSecureRequest= function(){ return this.requestArguments = arguments; }\n          return oa;\n        },\n        'Use the HTTP method in the client options': function(oa) {\n          oa.setClientOptions({ requestTokenHttpMethod: \"GET\" });\n          oa.getOAuthRequestToken(function() {});\n          assert.equal(oa.requestArguments[2], \"GET\");\n        },\n        'Use a POST by default': function(oa) {\n          oa.setClientOptions({});\n          oa.getOAuthRequestToken(function() {});\n          assert.equal(oa.requestArguments[2], \"POST\");\n        }\n    },\n    'When getting an access token': {\n        topic: function() {\n          var oa= new OAuth(null, null, \"consumerkey\", \"consumersecret\", \"1.0\", null, \"HMAC-SHA1\");\n          oa._getTimestamp= function(){ return \"1272399856\"; }\n          oa._getNonce= function(){ return \"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\"; }\n          oa._performSecureRequest= function(){ return this.requestArguments = arguments; }\n          return oa;\n        },\n        'Use the HTTP method in the client options': function(oa) {\n          oa.setClientOptions({ accessTokenHttpMethod: \"GET\" });\n          oa.getOAuthAccessToken(function() {});\n          assert.equal(oa.requestArguments[2], \"GET\");\n        },\n        'Use a POST by default': function(oa) {\n          oa.setClientOptions({});\n          oa.getOAuthAccessToken(function() {});\n          assert.equal(oa.requestArguments[2], \"POST\");\n        }\n    },\n    'When get authorization header' : {\n        topic: function() {\n          var oa= new OAuth(null, null, \"consumerkey\", \"consumersecret\", \"1.0\", null, \"HMAC-SHA1\");\n          oa._getTimestamp= function(){ return \"1272399856\"; }\n          oa._getNonce= function(){ return \"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\"; }\n          return oa;\n        },\n        'Provide a valid signature when a token and a token secret is present': function(oa) {\n          assert.equal( oa.authHeader(\"http://somehost.com:3323/foo/poop?bar=foo\", \"token\", \"tokensecret\"), 'OAuth oauth_consumer_key=\"consumerkey\",oauth_nonce=\"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1272399856\",oauth_token=\"token\",oauth_version=\"1.0\",oauth_signature=\"zeOR0Wsm6EG6XSg0Vw%2FsbpoSib8%3D\"');\n        },\n        'Support variable whitespace separating the arguments': function(oa) {\n            oa._oauthParameterSeperator= \", \";\n            assert.equal( oa.authHeader(\"http://somehost.com:3323/foo/poop?bar=foo\", \"token\", \"tokensecret\"), 'OAuth oauth_consumer_key=\"consumerkey\", oauth_nonce=\"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\", oauth_signature_method=\"HMAC-SHA1\", oauth_timestamp=\"1272399856\", oauth_token=\"token\", oauth_version=\"1.0\", oauth_signature=\"zeOR0Wsm6EG6XSg0Vw%2FsbpoSib8%3D\"');\n        }\n    },\n    'When get the OAuth Echo authorization header': {\n      topic: function () {\n        var realm = \"http://foobar.com/\";\n        var verifyCredentials = \"http://api.foobar.com/verify.json\";\n        var oa = new OAuthEcho(realm, verifyCredentials, \"consumerkey\", \"consumersecret\", \"1.0A\", \"HMAC-SHA1\");\n        oa._getTimestamp= function(){ return \"1272399856\"; }\n        oa._getNonce= function(){ return \"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\"; }\n        return oa;\n      },\n      'Provide a valid signature when a token and token secret is present': function (oa) {\n        assert.equal( oa.authHeader(\"http://somehost.com:3323/foo/poop?bar=foo\", \"token\", \"tokensecret\"), 'OAuth realm=\"http://foobar.com/\",oauth_consumer_key=\"consumerkey\",oauth_nonce=\"ybHPeOEkAUJ3k2wJT9Xb43MjtSgTvKqp\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1272399856\",oauth_token=\"token\",oauth_version=\"1.0A\",oauth_signature=\"0rr1LhSxACX2IEWRq3uCb4IwtOs%3D\"');\n      }\n    },\n    'When non standard ports are used': {\n        topic: function() {\n          var oa= new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n          mockProvider= {};\n\n          oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n            assert.equal(headers.Host, \"somehost.com:8080\");\n            assert.equal(hostname, \"somehost.com\");\n            assert.equal(port, \"8080\");\n            return {\n              on: function() {},\n              end: function() {}\n            };\n          }\n          return oa;\n        },\n        'getProtectedResource should correctly define the host headers': function(oa) {\n          oa.getProtectedResource(\"http://somehost.com:8080\", \"GET\", \"oauth_token\", null, function(){})\n        }\n    },\n    'When building the OAuth Authorization header': {\n      topic: new OAuth(null, null, null, null, null, null, \"HMAC-SHA1\"),\n      'All provided oauth arguments should be concatentated correctly' : function(oa) {\n       var parameters= [\n          [\"oauth_timestamp\",         \"1234567\"],\n          [\"oauth_nonce\",             \"ABCDEF\"],\n          [\"oauth_version\",           \"1.0\"],\n          [\"oauth_signature_method\",  \"HMAC-SHA1\"],\n          [\"oauth_consumer_key\",      \"asdasdnm2321b3\"]];\n        assert.equal(oa._buildAuthorizationHeaders(parameters), 'OAuth oauth_timestamp=\"1234567\",oauth_nonce=\"ABCDEF\",oauth_version=\"1.0\",oauth_signature_method=\"HMAC-SHA1\",oauth_consumer_key=\"asdasdnm2321b3\"');\n      },\n      '*Only* Oauth arguments should be concatentated, others should be disregarded' : function(oa) {\n       var parameters= [\n          [\"foo\",         \"2343\"],\n          [\"oauth_timestamp\",         \"1234567\"],\n          [\"oauth_nonce\",             \"ABCDEF\"],\n          [\"bar\",             \"dfsdfd\"],\n          [\"oauth_version\",           \"1.0\"],\n          [\"oauth_signature_method\",  \"HMAC-SHA1\"],\n          [\"oauth_consumer_key\",      \"asdasdnm2321b3\"],\n          [\"foobar\",      \"asdasdnm2321b3\"]];\n        assert.equal(oa._buildAuthorizationHeaders(parameters), 'OAuth oauth_timestamp=\"1234567\",oauth_nonce=\"ABCDEF\",oauth_version=\"1.0\",oauth_signature_method=\"HMAC-SHA1\",oauth_consumer_key=\"asdasdnm2321b3\"');\n      },\n      '_buildAuthorizationHeaders should not depends on Array.prototype.toString' : function(oa) {\n       var _toString = Array.prototype.toString;\n       Array.prototype.toString = function(){ return '[Array] ' + this.length; }; // toString overwrite example used in jsdom.\n       var parameters= [\n          [\"foo\",         \"2343\"],\n          [\"oauth_timestamp\",         \"1234567\"],\n          [\"oauth_nonce\",             \"ABCDEF\"],\n          [\"bar\",             \"dfsdfd\"],\n          [\"oauth_version\",           \"1.0\"],\n          [\"oauth_signature_method\",  \"HMAC-SHA1\"],\n          [\"oauth_consumer_key\",      \"asdasdnm2321b3\"],\n          [\"foobar\",      \"asdasdnm2321b3\"]];\n        assert.equal(oa._buildAuthorizationHeaders(parameters), 'OAuth oauth_timestamp=\"1234567\",oauth_nonce=\"ABCDEF\",oauth_version=\"1.0\",oauth_signature_method=\"HMAC-SHA1\",oauth_consumer_key=\"asdasdnm2321b3\"');\n       Array.prototype.toString = _toString;\n      }\n    },\n    'When performing the Secure Request' : {\n      topic: new OAuth(\"http://foo.com/RequestToken\",\n                       \"http://foo.com/AccessToken\",\n                       \"anonymous\",  \"anonymous\",\n                       \"1.0A\", \"http://foo.com/callback\", \"HMAC-SHA1\"),\n      'using the POST method' : {\n        'Any passed extra_params should form part of the POST body': function(oa) {\n          var post_body_written= false;\n          var op= oa._createClient;\n          try {\n            oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n              return {\n                write: function(post_body){\n                  post_body_written= true;\n                  assert.equal(post_body,\"scope=foobar%2C1%2C2\");\n                }\n              };\n            }\n            oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://foo.com/protected_resource', {\"scope\": \"foobar,1,2\"});\n            assert.equal(post_body_written, true);\n          }\n          finally {\n            oa._createClient= op;\n          }\n        }\n      }\n    },\n    'When performing a secure' : {\n      topic: new OAuth(\"http://foo.com/RequestToken\",\n                       \"http://foo.com/AccessToken\",\n                       \"anonymous\",  \"anonymous\",\n                       \"1.0A\", \"http://foo.com/callback\", \"HMAC-SHA1\"),\n      'POST' : {\n        'if no callback is passed' : {\n          'it should return a request object': function(oa) {\n            var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", \"BLAH\", \"text/plain\")\n            assert.isObject(request);\n            assert.equal(request.method, \"POST\");\n            request.end();\n          }\n        },\n        'if a callback is passed' : {\n          \"it should call the internal request's end method and return nothing\": function(oa) {\n            var callbackCalled= false;\n            var op= oa._createClient;\n            try {\n              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                return {\n                  write: function(){},\n                  on: function() {},\n                  end: function() {\n                    callbackCalled= true;\n                  }\n                };\n              }\n              var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", \"BLAH\", \"text/plain\", function(e,d){})\n              assert.equal(callbackCalled, true);\n              assert.isUndefined(request);\n            }\n            finally {\n              oa._createClient= op;\n            }\n          }\n        },\n        'if the post_body is a buffer' : {\n          \"It should be passed through as is, and the original content-type (if specified) should be passed through\": function(oa) {\n            var op= oa._createClient;\n            try {\n              var callbackCalled= false;\n              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                assert.equal(headers[\"Content-Type\"], \"image/jpeg\")\n                return {\n                  write: function(data){\n                    callbackCalled= true;\n                    assert.equal(data.length, 4);\n                  },\n                  on: function() {},\n                  end: function() {\n                  }\n                };\n              }\n              var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", new Buffer([10,20,30,40]), \"image/jpeg\")\n              assert.equal(callbackCalled, true);\n            }\n            finally {\n              oa._createClient= op;\n            }\n          },\n          \"It should be passed through as is, and no content-type is specified.\": function(oa) {\n            //Should probably actually set application/octet-stream, but to avoid a change in behaviour\n            // will just document (here) that the library will set it to application/x-www-form-urlencoded\n            var op= oa._createClient;\n            try {\n              var callbackCalled= false;\n              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                assert.equal(headers[\"Content-Type\"], \"application/x-www-form-urlencoded\")\n                return {\n                  write: function(data){\n                    callbackCalled= true;\n                    assert.equal(data.length, 4);\n                  },\n                  on: function() {},\n                  end: function() {\n                  }\n                };\n              }\n              var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", new Buffer([10,20,30,40]))\n              assert.equal(callbackCalled, true);\n            }\n            finally {\n              oa._createClient= op;\n            }\n          }\n        },\n        'if the post_body is not a string or a buffer' : {\n          \"It should be url encoded and the content type set to be x-www-form-urlencoded\" : function(oa) {\n            var op= oa._createClient;\n            try {\n              var callbackCalled= false;\n              oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                assert.equal(headers[\"Content-Type\"], \"application/x-www-form-urlencoded\")\n                return {\n                  write: function(data){\n                    callbackCalled= true;\n                    assert.equal(data, \"foo=1%2C2%2C3&bar=1%2B2\");\n                  },\n                  on: function() {},\n                  end: function() {\n                  }\n                };\n              }\n              var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", {\"foo\":\"1,2,3\", \"bar\":\"1+2\"})\n              assert.equal(callbackCalled, true);\n            }\n            finally {\n              oa._createClient= op;\n            }\n          }\n        },\n        'if the post_body is a string' : {\n          \"and it contains non ascii (7/8bit) characters\" : {\n           \"the content length should be the byte count, and not the string length\"  : function(oa) {\n             var testString= \"Tôi yêu node\";\n             var testStringLength= testString.length;\n             var testStringBytesLength= Buffer.byteLength(testString);\n             assert.notEqual(testStringLength, testStringBytesLength); // Make sure we're testing a string that differs between byte-length and char-length!\n\n             var op= oa._createClient;\n             try {\n               var callbackCalled= false;\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 assert.equal(headers[\"Content-length\"], testStringBytesLength);\n                 return {\n                   write: function(data){\n                     callbackCalled= true;\n                     assert.equal(data, testString);\n                   },\n                   on: function() {},\n                   end: function() {\n                   }\n                 };\n                }\n                var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", \"Tôi yêu node\")\n                assert.equal(callbackCalled, true);\n              }\n              finally {\n                oa._createClient= op;\n              }\n           }\n          },\n          \"and no post_content_type is specified\" : {\n            \"It should be written as is, with a content length specified, and the encoding should be set to be x-www-form-urlencoded\" : function(oa) {\n              var op= oa._createClient;\n              try {\n                var callbackCalled= false;\n                oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                  assert.equal(headers[\"Content-Type\"], \"application/x-www-form-urlencoded\");\n                  assert.equal(headers[\"Content-length\"], 23);\n                  return {\n                    write: function(data){\n                      callbackCalled= true;\n                      assert.equal(data, \"foo=1%2C2%2C3&bar=1%2B2\");\n                    },\n                    on: function() {},\n                    end: function() {\n                    }\n                  };\n                 }\n                 var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", \"foo=1%2C2%2C3&bar=1%2B2\")\n                 assert.equal(callbackCalled, true);\n               }\n               finally {\n                 oa._createClient= op;\n               }\n             }\n           },\n           \"and a post_content_type is specified\" : {\n             \"It should be written as is, with a content length specified, and the encoding should be set to be as specified\" : function(oa) {\n               var op= oa._createClient;\n               try {\n                 var callbackCalled= false;\n                 oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                   assert.equal(headers[\"Content-Type\"], \"unicorn/encoded\");\n                   assert.equal(headers[\"Content-length\"], 23);\n                   return {\n                     write: function(data){\n                       callbackCalled= true;\n                       assert.equal(data, \"foo=1%2C2%2C3&bar=1%2B2\");\n                     },\n                     on: function() {},\n                     end: function() {\n                     }\n                   };\n                  }\n                 var request= oa.post(\"http://foo.com/blah\", \"token\", \"token_secret\", \"foo=1%2C2%2C3&bar=1%2B2\", \"unicorn/encoded\")\n                 assert.equal(callbackCalled, true);\n               }\n               finally {\n                 oa._createClient= op;\n               }\n             }\n           }\n         }\n       },\n       'GET' : {\n         'if no callback is passed' : {\n           'it should return a request object': function(oa) {\n             var request= oa.get(\"http://foo.com/blah\", \"token\", \"token_secret\")\n             assert.isObject(request);\n             assert.equal(request.method, \"GET\");\n             request.end();\n           }\n         },\n         'if a callback is passed' : {\n           \"it should call the internal request's end method and return nothing\": function(oa) {\n             var callbackCalled= false;\n             var op= oa._createClient;\n             try {\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 return {\n                   on: function() {},\n                   end: function() {\n                     callbackCalled= true;\n                   }\n                 };\n               }\n               var request= oa.get(\"http://foo.com/blah\", \"token\", \"token_secret\", function(e,d) {})\n               assert.equal(callbackCalled, true);\n               assert.isUndefined(request);\n             }\n             finally {\n               oa._createClient= op;\n             }\n           }\n         },\n       },\n       'PUT' : {\n         'if no callback is passed' : {\n           'it should return a request object': function(oa) {\n             var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", \"BLAH\", \"text/plain\")\n             assert.isObject(request);\n             assert.equal(request.method, \"PUT\");\n             request.end();\n           }\n         },\n         'if a callback is passed' : {\n           \"it should call the internal request's end method and return nothing\": function(oa) {\n             var callbackCalled= 0;\n             var op= oa._createClient;\n             try {\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 return {\n                   on: function() {},\n                   write: function(data) {\n                     callbackCalled++;\n                   },\n                   end: function() {\n                     callbackCalled++;\n                   }\n                 };\n               }\n               var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", \"BLAH\", \"text/plain\", function(e,d){})\n               assert.equal(callbackCalled, 2);\n               assert.isUndefined(request);\n             }\n             finally {\n               oa._createClient= op;\n             }\n           }\n         },\n         'if the post_body is a buffer' : {\n           \"It should be passed through as is, and the original content-type (if specified) should be passed through\": function(oa) {\n             var op= oa._createClient;\n             try {\n               var callbackCalled= false;\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 assert.equal(headers[\"Content-Type\"], \"image/jpeg\")\n                 return {\n                   write: function(data){\n                     callbackCalled= true;\n                     assert.equal(data.length, 4);\n                   },\n                   on: function() {},\n                   end: function() {\n                   }\n                 };\n               }\n               var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", new Buffer([10,20,30,40]), \"image/jpeg\")\n               assert.equal(callbackCalled, true);\n             }\n             finally {\n               oa._createClient= op;\n             }\n           },\n           \"It should be passed through as is, and no content-type is specified.\": function(oa) {\n             //Should probably actually set application/octet-stream, but to avoid a change in behaviour\n             // will just document (here) that the library will set it to application/x-www-form-urlencoded\n             var op= oa._createClient;\n             try {\n               var callbackCalled= false;\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 assert.equal(headers[\"Content-Type\"], \"application/x-www-form-urlencoded\")\n                 return {\n                   write: function(data){\n                     callbackCalled= true;\n                     assert.equal(data.length, 4);\n                   },\n                   on: function() {},\n                   end: function() {\n                   }\n                 };\n               }\n               var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", new Buffer([10,20,30,40]))\n               assert.equal(callbackCalled, true);\n             }\n             finally {\n               oa._createClient= op;\n             }\n           }\n         },\n         'if the post_body is not a string' : {\n           \"It should be url encoded and the content type set to be x-www-form-urlencoded\" : function(oa) {\n             var op= oa._createClient;\n             try {\n               var callbackCalled= false;\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 assert.equal(headers[\"Content-Type\"], \"application/x-www-form-urlencoded\")\n                 return {\n                   write: function(data) {\n                     callbackCalled= true;\n                     assert.equal(data, \"foo=1%2C2%2C3&bar=1%2B2\");\n                   }\n                 };\n               }\n               var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", {\"foo\":\"1,2,3\", \"bar\":\"1+2\"})\n               assert.equal(callbackCalled, true);\n             }\n             finally {\n               oa._createClient= op;\n             }\n           }\n         },\n         'if the post_body is a string' : {\n           \"and no post_content_type is specified\" : {\n             \"It should be written as is, with a content length specified, and the encoding should be set to be x-www-form-urlencoded\" : function(oa) {\n                var op= oa._createClient;\n                try {\n                  var callbackCalled= false;\n                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                    assert.equal(headers[\"Content-Type\"], \"application/x-www-form-urlencoded\");\n                    assert.equal(headers[\"Content-length\"], 23);\n                    return {\n                      write: function(data) {\n                        callbackCalled= true;\n                        assert.equal(data, \"foo=1%2C2%2C3&bar=1%2B2\");\n                      }\n                    };\n                  }\n                  var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", \"foo=1%2C2%2C3&bar=1%2B2\")\n                  assert.equal(callbackCalled, true);\n                }\n                finally {\n                  oa._createClient= op;\n                }\n              }\n            },\n            \"and a post_content_type is specified\" : {\n              \"It should be written as is, with a content length specified, and the encoding should be set to be as specified\" : function(oa) {\n                var op= oa._createClient;\n                try {\n                  var callbackCalled= false;\n                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                    assert.equal(headers[\"Content-Type\"], \"unicorn/encoded\");\n                    assert.equal(headers[\"Content-length\"], 23);\n                    return {\n                      write: function(data) {\n                         callbackCalled= true;\n                         assert.equal(data, \"foo=1%2C2%2C3&bar=1%2B2\");\n                       }\n                    };\n                  }\n                  var request= oa.put(\"http://foo.com/blah\", \"token\", \"token_secret\", \"foo=1%2C2%2C3&bar=1%2B2\", \"unicorn/encoded\")\n                  assert.equal(callbackCalled, true);\n                }\n                finally {\n                  oa._createClient= op;\n                }\n              }\n            }\n          }\n        },\n       'DELETE' : {\n         'if no callback is passed' : {\n           'it should return a request object': function(oa) {\n             var request= oa.delete(\"http://foo.com/blah\", \"token\", \"token_secret\")\n             assert.isObject(request);\n             assert.equal(request.method, \"DELETE\");\n             request.end();\n           }\n         },\n         'if a callback is passed' : {\n           \"it should call the internal request's end method and return nothing\": function(oa) {\n             var callbackCalled= false;\n             var op= oa._createClient;\n             try {\n               oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                 return {\n                   on: function() {},\n                   end: function() {\n                     callbackCalled= true;\n                   }\n                 };\n               }\n               var request= oa.delete(\"http://foo.com/blah\", \"token\", \"token_secret\", function(e,d) {})\n               assert.equal(callbackCalled, true);\n               assert.isUndefined(request);\n             }\n             finally {\n               oa._createClient= op;\n             }\n           }\n         }\n       },\n       'Request With a Callback' : {\n          'and a 200 response code is received' : {\n            'it should callback successfully' : function(oa) {\n              var op= oa._createClient;\n              var callbackCalled = false;\n              try {\n                oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                  return new DummyRequest( new DummyResponse(200) );\n                }\n                oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function(error) {\n                  // callback\n                  callbackCalled= true;\n                  assert.equal(error, undefined);\n                });\n                assert.equal(callbackCalled, true)\n              }\n              finally {\n                oa._createClient= op;\n              }\n            }\n          },\n          'and a 210 response code is received' : {\n            'it should callback successfully' : function(oa) {\n              var op= oa._createClient;\n              var callbackCalled = false;\n              try {\n                oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                  return new DummyRequest( new DummyResponse(210) );\n                }\n                oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function(error) {\n                  // callback\n                  callbackCalled= true;\n                  assert.equal(error, undefined);\n                });\n                assert.equal(callbackCalled, true)\n              }\n              finally {\n                oa._createClient= op;\n              }\n            }\n          },\n          'And A 301 redirect is received' : {\n              'and there is a location header' : {\n                'it should (re)perform the secure request but with the new location' : function(oa) {\n                  var op= oa._createClient;\n                  var psr= oa._performSecureRequest;\n                  var responseCounter = 1;\n                  var callbackCalled = false;\n                  var DummyResponse =function() {\n                    if( responseCounter == 1 ){\n                      this.statusCode= 301;\n                      this.headers= {location:\"http://redirectto.com\"};\n                      responseCounter++;\n                    }\n                    else {\n                      this.statusCode= 200;\n                    }\n                  }\n                  DummyResponse.prototype= events.EventEmitter.prototype;\n                  DummyResponse.prototype.setEncoding= function() {}\n\n                  try {\n                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                      return new DummyRequest( new DummyResponse() );\n                    }\n                    oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {\n                      if( responseCounter == 1 ) {\n                        assert.equal(url, \"http://originalurl.com\");\n                      }\n                      else {\n                        assert.equal(url, \"http://redirectto.com\");\n                      }\n                      return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )\n                    }\n\n                    oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function() {\n                      // callback\n                      assert.equal(responseCounter, 2);\n                      callbackCalled= true;\n                    });\n                    assert.equal(callbackCalled, true)\n                  }\n                  finally {\n                    oa._createClient= op;\n                    oa._performSecureRequest= psr;\n                  }\n                }\n              },\n              'but there is no location header' : {\n                'it should execute the callback, passing the HTTP Response code' : function(oa) {\n                  var op= oa._createClient;\n                  var callbackCalled = false;\n                  try {\n                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                      return new DummyRequest( new DummyResponse(301) );\n                    }\n                    oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function(error) {\n                      // callback\n                      assert.equal(error.statusCode, 301);\n                      callbackCalled= true;\n                    });\n                    assert.equal(callbackCalled, true)\n                  }\n                  finally {\n                    oa._createClient= op;\n                  }\n                }\n              },\n              'and followRedirect is true' : {\n                'it should (re)perform the secure request but with the new location' : function(oa) {\n                  var op= oa._createClient;\n                  var psr= oa._performSecureRequest;\n                  var responseCounter = 1;\n                  var callbackCalled = false;\n                  var DummyResponse =function() {\n                    if( responseCounter == 1 ){\n                      this.statusCode= 301;\n                      this.headers= {location:\"http://redirectto.com\"};\n                      responseCounter++;\n                    }\n                    else {\n                      this.statusCode= 200;\n                    }\n                  }\n                  DummyResponse.prototype= events.EventEmitter.prototype;\n                  DummyResponse.prototype.setEncoding= function() {}\n\n                  try {\n                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                      return new DummyRequest( new DummyResponse() );\n                    }\n                    oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {\n                      if( responseCounter == 1 ) {\n                        assert.equal(url, \"http://originalurl.com\");\n                      }\n                      else {\n                        assert.equal(url, \"http://redirectto.com\");\n                      }\n                      return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )\n                    }\n\n                    oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function() {\n                      // callback\n                      assert.equal(responseCounter, 2);\n                      callbackCalled= true;\n                    });\n                    assert.equal(callbackCalled, true)\n                  }\n                  finally {\n                    oa._createClient= op;\n                    oa._performSecureRequest= psr;\n                  }\n                }\n              },\n              'and followRedirect is false' : {\n                'it should not perform the secure request with the new location' : function(oa) {\n                  var op= oa._createClient;\n                  oa.setClientOptions({ followRedirects: false });\n                  var DummyResponse =function() {\n                      this.statusCode= 301;\n                      this.headers= {location:\"http://redirectto.com\"};\n                  }\n                  DummyResponse.prototype= events.EventEmitter.prototype;\n                  DummyResponse.prototype.setEncoding= function() {}\n\n                  try {\n                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                      return new DummyRequest( new DummyResponse() );\n                    }\n                    oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function(res, data, response) {\n                      // callback\n                      assert.equal(res.statusCode, 301);\n                    });\n                  }\n                  finally {\n                    oa._createClient= op;\n                    oa.setClientOptions({followRedirects:true});\n                  }\n                }\n              }\n            },\n          'And A 302 redirect is received' : {\n            'and there is a location header' : {\n              'it should (re)perform the secure request but with the new location' : function(oa) {\n                var op= oa._createClient;\n                var psr= oa._performSecureRequest;\n                var responseCounter = 1;\n                var callbackCalled = false;\n                var DummyResponse =function() {\n                  if( responseCounter == 1 ){\n                    this.statusCode= 302;\n                    this.headers= {location:\"http://redirectto.com\"};\n                    responseCounter++;\n                  }\n                  else {\n                    this.statusCode= 200;\n                  }\n                }\n                DummyResponse.prototype= events.EventEmitter.prototype;\n                DummyResponse.prototype.setEncoding= function() {}\n\n                try {\n                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                    return new DummyRequest( new DummyResponse() );\n                  }\n                  oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {\n                    if( responseCounter == 1 ) {\n                      assert.equal(url, \"http://originalurl.com\");\n                    }\n                    else {\n                      assert.equal(url, \"http://redirectto.com\");\n                    }\n                    return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )\n                  }\n\n                  oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function() {\n                    // callback\n                    assert.equal(responseCounter, 2);\n                    callbackCalled= true;\n                  });\n                  assert.equal(callbackCalled, true)\n                }\n                finally {\n                  oa._createClient= op;\n                  oa._performSecureRequest= psr;\n                }\n              }\n            },\n            'but there is no location header' : {\n              'it should execute the callback, passing the HTTP Response code' : function(oa) {\n                var op= oa._createClient;\n                var callbackCalled = false;\n                try {\n                  oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                    return new DummyRequest( new DummyResponse(302) );\n                  }\n                  oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function(error) {\n                    // callback\n                    assert.equal(error.statusCode, 302);\n                    callbackCalled= true;\n                  });\n                  assert.equal(callbackCalled, true)\n                }\n                finally {\n                  oa._createClient= op;\n                }\n              }\n            },\n            'and followRedirect is true' : {\n                'it should (re)perform the secure request but with the new location' : function(oa) {\n                  var op= oa._createClient;\n                  var psr= oa._performSecureRequest;\n                  var responseCounter = 1;\n                  var callbackCalled = false;\n                  var DummyResponse =function() {\n                    if( responseCounter == 1 ){\n                      this.statusCode= 302;\n                      this.headers= {location:\"http://redirectto.com\"};\n                      responseCounter++;\n                    }\n                    else {\n                      this.statusCode= 200;\n                    }\n                  }\n                  DummyResponse.prototype= events.EventEmitter.prototype;\n                  DummyResponse.prototype.setEncoding= function() {}\n\n                  try {\n                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                      return new DummyRequest( new DummyResponse() );\n                    }\n                    oa._performSecureRequest= function( oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback ) {\n                      if( responseCounter == 1 ) {\n                        assert.equal(url, \"http://originalurl.com\");\n                      }\n                      else {\n                        assert.equal(url, \"http://redirectto.com\");\n                      }\n                      return psr.call(oa, oauth_token, oauth_token_secret, method, url, extra_params, post_body, post_content_type,  callback )\n                    }\n\n                    oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function() {\n                      // callback\n                      assert.equal(responseCounter, 2);\n                      callbackCalled= true;\n                    });\n                    assert.equal(callbackCalled, true)\n                  }\n                  finally {\n                    oa._createClient= op;\n                    oa._performSecureRequest= psr;\n                  }\n                }\n              },\n              'and followRedirect is false' : {\n                'it should not perform the secure request with the new location' : function(oa) {\n                  var op= oa._createClient;\n                  oa.setClientOptions({ followRedirects: false });\n                  var DummyResponse =function() {\n                      this.statusCode= 302;\n                      this.headers= {location:\"http://redirectto.com\"};\n                  }\n                  DummyResponse.prototype= events.EventEmitter.prototype;\n                  DummyResponse.prototype.setEncoding= function() {}\n\n                  try {\n                    oa._createClient= function( port, hostname, method, path, headers, sshEnabled ) {\n                      return new DummyRequest( new DummyResponse() );\n                    }\n                    oa._performSecureRequest(\"token\", \"token_secret\", 'POST', 'http://originalurl.com', {\"scope\": \"foobar,1,2\"}, null, null, function(res, data, response) {\n                      // callback\n                      assert.equal(res.statusCode, 302);\n                    });\n                  }\n                  finally {\n                    oa._createClient= op;\n                    oa.setClientOptions({followRedirects:true});\n                  }\n                }\n              }\n          }\n       }\n     }\n}).export(module);\n"
        }
    ]
}