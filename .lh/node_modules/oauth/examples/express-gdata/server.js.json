{
    "sourceFile": "node_modules/oauth/examples/express-gdata/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892937881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var express = require('express'),\n\t OAuth = require('oauth').OAuth,\n\t querystring = require('querystring');\n\n// Setup the Express.js server\nvar app = express.createServer();\napp.use(express.logger());\napp.use(express.bodyParser());\napp.use(express.cookieParser());\napp.use(express.session({\n\tsecret: \"skjghskdjfhbqigohqdiouk\"\n}));\n\n// Home Page\napp.get('/', function(req, res){\n\tif(!req.session.oauth_access_token) {\n\t\tres.redirect(\"/google_login\");\n\t}\n\telse {\n\t\tres.redirect(\"/google_contacts\");\n\t}\n});\n\n// Request an OAuth Request Token, and redirects the user to authorize it\napp.get('/google_login', function(req, res) {\n\t\n\tvar getRequestTokenUrl = \"https://www.google.com/accounts/OAuthGetRequestToken\";\n\t\n\t// GData specifid: scopes that wa want access to\n\tvar gdataScopes = [\n\t\tquerystring.escape(\"https://www.google.com/m8/feeds/\"),\n\t\tquerystring.escape(\"https://www.google.com/calendar/feeds/\")\n\t];\n\t\n\tvar oa = new OAuth(getRequestTokenUrl+\"?scope=\"+gdataScopes.join('+'),\n\t                  \"https://www.google.com/accounts/OAuthGetAccessToken\",\n\t                  \"anonymous\",\n\t                  \"anonymous\",\n\t                  \"1.0\",\n\t                  \"http://localhost:3000/google_cb\"+( req.param('action') && req.param('action') != \"\" ? \"?action=\"+querystring.escape(req.param('action')) : \"\" ),\n\t                  \"HMAC-SHA1\");\n\n\toa.getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results){\n\t  if(error) {\n\t\t\tconsole.log('error');\n\t \t\tconsole.log(error);\n\t\t}\n\t  else { \n\t\t\t// store the tokens in the session\n\t\t\treq.session.oa = oa;\n\t\t\treq.session.oauth_token = oauth_token;\n\t\t\treq.session.oauth_token_secret = oauth_token_secret;\n\t\t\n\t\t\t// redirect the user to authorize the token\n\t   \tres.redirect(\"https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=\"+oauth_token);\n\t  }\n\t})\n\n});\n\n// Callback for the authorization page\napp.get('/google_cb', function(req, res) {\n\t\t\n\t// get the OAuth access token with the 'oauth_verifier' that we received\n\t\n\tvar oa = new OAuth(req.session.oa._requestUrl,\n\t                  req.session.oa._accessUrl,\n\t                  req.session.oa._consumerKey,\n\t                  req.session.oa._consumerSecret,\n\t                  req.session.oa._version,\n\t                  req.session.oa._authorize_callback,\n\t                  req.session.oa._signatureMethod);\n\t\n    console.log(oa);\n\t\n\toa.getOAuthAccessToken(\n\t\treq.session.oauth_token, \n\t\treq.session.oauth_token_secret, \n\t\treq.param('oauth_verifier'), \n\t\tfunction(error, oauth_access_token, oauth_access_token_secret, results2) {\n\t\t\t\n\t\t\tif(error) {\n\t\t\t\tconsole.log('error');\n\t\t\t\tconsole.log(error);\n\t \t\t}\n\t \t\telse {\n\t\t\n\t\t\t\t// store the access token in the session\n\t\t\t\treq.session.oauth_access_token = oauth_access_token;\n\t\t\t\treq.session.oauth_access_token_secret = oauth_access_token_secret;\n\n\t    \t\tres.redirect((req.param('action') && req.param('action') != \"\") ? req.param('action') : \"/google_contacts\");\n\t \t\t}\n\n\t});\n\t\n});\n\n\nfunction require_google_login(req, res, next) {\n\tif(!req.session.oauth_access_token) {\n\t\tres.redirect(\"/google_login?action=\"+querystring.escape(req.originalUrl));\n\t\treturn;\n\t}\n\tnext();\n};\n\napp.get('/google_contacts', require_google_login, function(req, res) {\n\tvar oa = new OAuth(req.session.oa._requestUrl,\n\t                  req.session.oa._accessUrl,\n\t                  req.session.oa._consumerKey,\n\t                  req.session.oa._consumerSecret,\n\t                  req.session.oa._version,\n\t                  req.session.oa._authorize_callback,\n\t                  req.session.oa._signatureMethod);\n\t\n    console.log(oa);\n\n\t// Example using GData API v3\n\t// GData Specific Header\n\toa._headers['GData-Version'] = '3.0'; \n\t\n\toa.getProtectedResource(\n\t\t\"https://www.google.com/m8/feeds/contacts/default/full?alt=json\", \n\t\t\"GET\", \n\t\treq.session.oauth_access_token, \n\t\treq.session.oauth_access_token_secret,\n\t\tfunction (error, data, response) {\n\t\t\t\n\t\t\tvar feed = JSON.parse(data);\n\t\t\t\n\t\t\tres.render('google_contacts.ejs', {\n\t\t\t\tlocals: { feed: feed }\n\t\t\t});\n\t});\n\t\n});\n\napp.get('/google_calendars', require_google_login, function(req, res) {\n\t\tvar oa = new OAuth(req.session.oa._requestUrl,\n\t                  req.session.oa._accessUrl,\n\t                  req.session.oa._consumerKey,\n\t                  req.session.oa._consumerSecret,\n\t                  req.session.oa._version,\n\t                  req.session.oa._authorize_callback,\n\t                  req.session.oa._signatureMethod);\n\t// Example using GData API v2\n\t// GData Specific Header\n\toa._headers['GData-Version'] = '2'; \n\t\n\toa.getProtectedResource(\n\t\t\"https://www.google.com/calendar/feeds/default/allcalendars/full?alt=jsonc\", \n\t\t\"GET\", \n\t\treq.session.oauth_access_token, \n\t\treq.session.oauth_access_token_secret,\n\t\tfunction (error, data, response) {\n\t\t\t\n\t\t\tvar feed = JSON.parse(data);\n\t\t\t\n\t\t\tres.render('google_calendars.ejs', {\n\t\t\t\tlocals: { feed: feed }\n\t\t\t});\n\t});\n\t\n});\n\napp.listen(3000);\nconsole.log(\"listening on http://localhost:3000\");\n"
        }
    ]
}