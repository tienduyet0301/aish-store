{
    "sourceFile": "node_modules/react-hot-toast/headless/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892983485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { CSSProperties } from 'react';\n\ntype ToastType = 'success' | 'error' | 'loading' | 'blank' | 'custom';\ntype ToastPosition = 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';\ntype Renderable = React.ReactElement | string | null;\ninterface IconTheme {\n    primary: string;\n    secondary: string;\n}\ntype ValueFunction<TValue, TArg> = (arg: TArg) => TValue;\ntype ValueOrFunction<TValue, TArg> = TValue | ValueFunction<TValue, TArg>;\ndeclare const resolveValue: <TValue, TArg>(valOrFunction: ValueOrFunction<TValue, TArg>, arg: TArg) => TValue;\ninterface Toast {\n    type: ToastType;\n    id: string;\n    message: ValueOrFunction<Renderable, Toast>;\n    icon?: Renderable;\n    duration?: number;\n    pauseDuration: number;\n    position?: ToastPosition;\n    removeDelay?: number;\n    ariaProps: {\n        role: 'status' | 'alert';\n        'aria-live': 'assertive' | 'off' | 'polite';\n    };\n    style?: CSSProperties;\n    className?: string;\n    iconTheme?: IconTheme;\n    createdAt: number;\n    visible: boolean;\n    dismissed: boolean;\n    height?: number;\n}\ntype ToastOptions = Partial<Pick<Toast, 'id' | 'icon' | 'duration' | 'ariaProps' | 'className' | 'style' | 'position' | 'iconTheme' | 'removeDelay'>>;\ntype DefaultToastOptions = ToastOptions & {\n    [key in ToastType]?: ToastOptions;\n};\ninterface ToasterProps {\n    position?: ToastPosition;\n    toastOptions?: DefaultToastOptions;\n    reverseOrder?: boolean;\n    gutter?: number;\n    containerStyle?: React.CSSProperties;\n    containerClassName?: string;\n    children?: (toast: Toast) => React.ReactElement;\n}\n\ntype Message = ValueOrFunction<Renderable, Toast>;\ntype ToastHandler = (message: Message, options?: ToastOptions) => string;\ndeclare const toast: {\n    (message: Message, opts?: ToastOptions): string;\n    error: ToastHandler;\n    success: ToastHandler;\n    loading: ToastHandler;\n    custom: ToastHandler;\n    dismiss(toastId?: string): void;\n    remove(toastId?: string): void;\n    promise<T>(promise: Promise<T> | (() => Promise<T>), msgs: {\n        loading: Renderable;\n        success?: ValueOrFunction<Renderable, T>;\n        error?: ValueOrFunction<Renderable, any>;\n    }, opts?: DefaultToastOptions): Promise<T>;\n};\n\ndeclare const useToaster: (toastOptions?: DefaultToastOptions) => {\n    toasts: Toast[];\n    handlers: {\n        updateHeight: (toastId: string, height: number) => void;\n        startPause: () => void;\n        endPause: () => void;\n        calculateOffset: (toast: Toast, opts?: {\n            reverseOrder?: boolean;\n            gutter?: number;\n            defaultPosition?: ToastPosition;\n        }) => number;\n    };\n};\n\ninterface State {\n    toasts: Toast[];\n    pausedAt: number | undefined;\n}\ndeclare const useStore: (toastOptions?: DefaultToastOptions) => State;\n\nexport { DefaultToastOptions, IconTheme, Renderable, Toast, ToastOptions, ToastPosition, ToastType, ToasterProps, ValueFunction, ValueOrFunction, toast as default, resolveValue, toast, useToaster, useStore as useToasterStore };\n"
        }
    ]
}