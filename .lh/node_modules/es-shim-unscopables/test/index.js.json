{
    "sourceFile": "node_modules/es-shim-unscopables/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892204663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar inspect = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\nvar hasOwn = require('hasown');\n\nvar shimUnscopables = require('../');\n\n/** @type {(a: symbol, b: symbol) => number} */\nvar sortSymbols = function (a, b) {\n\treturn inspect(a).localeCompare(inspect(b));\n};\n\ntest('shimUnscopables', function (t) {\n\tt.equal(typeof shimUnscopables, 'function', 'is a function');\n\n\tforEach(v.nonStrings, function (notNonEmptyString) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { shimUnscopables(notNonEmptyString); },\n\t\t\tTypeError,\n\t\t\tinspect(notNonEmptyString) + ' is not a non-empty String'\n\t\t);\n\t});\n\n\tt['throws'](\n\t\t// @ts-expect-error\n\t\tfunction () { shimUnscopables('x'); },\n\t\tTypeError,\n\t\tinspect('x') + ' is not on Array.prototype'\n\t);\n\n\tt.test('no symbols', { skip: typeof Symbol === 'function' }, function (st) {\n\t\tst.doesNotThrow(function () { shimUnscopables('forEach'); });\n\n\t\tst.end();\n\t});\n\n\tt.test('symbols, no unscopables', { skip: typeof Symbol !== 'function' || !!Symbol.unscopables }, function (st) {\n\t\tst.deepEqual(Object.getOwnPropertySymbols(Array.prototype), [Symbol.iterator]);\n\n\t\tshimUnscopables('forEach');\n\n\t\tst.deepEqual(Object.getOwnPropertySymbols(Array.prototype), [Symbol.iterator]);\n\n\t\tst.end();\n\t});\n\n\tt.test('Symbol.unscopables', { skip: typeof Symbol !== 'function' || !Symbol.unscopables }, function (st) {\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertySymbols(Array.prototype).sort(sortSymbols),\n\t\t\t[Symbol.iterator, Symbol.unscopables]\n\t\t);\n\t\tst.notOk(hasOwn(Array.prototype[Symbol.unscopables], 'forEach'), 'unscopables map lacks forEach');\n\n\t\tshimUnscopables('forEach');\n\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertySymbols(Array.prototype).sort(sortSymbols),\n\t\t\t[Symbol.iterator, Symbol.unscopables]\n\t\t);\n\t\tst.equal(Array.prototype[Symbol.unscopables].forEach, true, 'unscopables map has forEach');\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}