{
    "sourceFile": "node_modules/es-shim-unscopables/test/with.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892204917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint no-restricted-syntax: 0, no-with: 0, strict: 0 */\n\nvar test = require('tape');\n\nvar shimUnscopables = require('../');\n\ntest('`with` statement', { skip: typeof Symbol !== 'function' || !Symbol.unscopables }, function (t) {\n\t// @ts-expect-error this variable is declared in case unscopables doesn't work\n\tvar entries;\n\t// @ts-expect-error this variable is declared in case unscopables doesn't work\n\tvar concat;\n\t// @ts-expect-error `with` unsupported\n\twith ([]) {\n\t\tt.equal(concat, Array.prototype.concat, 'concat is dynamically bound');\n\t\tt.notEqual(entries, Array.prototype.entries, 'entries is not dynamically bound');\n\t}\n\n\t/** @type {Record<PropertyKey, unknown>} */\n\tvar obj = {\n\t\tfoo: 1,\n\t\tbar: 2\n\t};\n\t// @ts-expect-error this variable is declared in case unscopables doesn't work\n\tvar foo;\n\t// @ts-expect-error this variable is declared in case unscopables doesn't work\n\tvar bar;\n\tobj[Symbol.unscopables] = { foo: true };\n\t// @ts-expect-error `with` unsupported\n\twith (obj) {\n\t\tt.equal(foo, undefined);\n\t\tt.equal(bar, obj.bar);\n\t}\n\n\tshimUnscopables('concat');\n\n\t// @ts-expect-error `with` unsupported\n\twith ([]) {\n\t\tt.notEqual(concat, Array.prototype.concat, 'concat is no longer dynamically bound');\n\t\tt.notEqual(entries, Array.prototype.entries, 'entries is still not dynamically bound');\n\t}\n\n\tt.end();\n});\n"
        }
    ]
}