{
    "sourceFile": "node_modules/eslint-module-utils/ModuleCache.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892247904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nexports.__esModule = true;\n\nconst log = require('debug')('eslint-module-utils:ModuleCache');\n\n/** @type {import('./ModuleCache').ModuleCache} */\nclass ModuleCache {\n  /** @param {typeof import('./ModuleCache').ModuleCache.prototype.map} map */\n  constructor(map) {\n    this.map = map || /** @type {{typeof import('./ModuleCache').ModuleCache.prototype.map} */ new Map();\n  }\n\n  /** @type {typeof import('./ModuleCache').ModuleCache.prototype.set} */\n  set(cacheKey, result) {\n    this.map.set(cacheKey, { result, lastSeen: process.hrtime() });\n    log('setting entry for', cacheKey);\n    return result;\n  }\n\n  /** @type {typeof import('./ModuleCache').ModuleCache.prototype.get} */\n  get(cacheKey, settings) {\n    if (this.map.has(cacheKey)) {\n      const f = this.map.get(cacheKey);\n      // check freshness\n      // @ts-expect-error TS can't narrow properly from `has` and `get`\n      if (process.hrtime(f.lastSeen)[0] < settings.lifetime) { return f.result; }\n    } else {\n      log('cache miss for', cacheKey);\n    }\n    // cache miss\n    return undefined;\n  }\n\n  /** @type {typeof import('./ModuleCache').ModuleCache.getSettings} */\n  static getSettings(settings) {\n    /** @type {ReturnType<typeof ModuleCache.getSettings>} */\n    const cacheSettings = Object.assign({\n      lifetime: 30,  // seconds\n    }, settings['import/cache']);\n\n    // parse infinity\n    // @ts-expect-error the lack of type overlap is because we're abusing `cacheSettings` as a temporary object\n    if (cacheSettings.lifetime === 'âˆž' || cacheSettings.lifetime === 'Infinity') {\n      cacheSettings.lifetime = Infinity;\n    }\n\n    return cacheSettings;\n  }\n}\n\nexports.default = ModuleCache;\n"
        }
    ]
}