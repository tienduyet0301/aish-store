{
    "sourceFile": "node_modules/eslint-module-utils/unambiguous.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892249168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nexports.__esModule = true;\n\nconst pattern = /(^|;)\\s*(export|import)((\\s+\\w)|(\\s*[{*=]))|import\\(/m;\n/**\n * detect possible imports/exports without a full parse.\n *\n * A negative test means that a file is definitely _not_ a module.\n * A positive test means it _could_ be.\n *\n * Not perfect, just a fast way to disqualify large non-ES6 modules and\n * avoid a parse.\n * @type {import('./unambiguous').test}\n */\nexports.test = function isMaybeUnambiguousModule(content) {\n  return pattern.test(content);\n};\n\n// future-/Babel-proof at the expense of being a little loose\nconst unambiguousNodeType = /^(?:(?:Exp|Imp)ort.*Declaration|TSExportAssignment)$/;\n\n/**\n * Given an AST, return true if the AST unambiguously represents a module.\n * @type {import('./unambiguous').isModule}\n */\nexports.isModule = function isUnambiguousModule(ast) {\n  return ast.body && ast.body.some((node) => unambiguousNodeType.test(node.type));\n};\n"
        }
    ]
}