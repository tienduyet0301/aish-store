{
    "sourceFile": "node_modules/eslint-module-utils/ignore.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892247629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nexports.__esModule = true;\n\nconst extname = require('path').extname;\n\nconst log = require('debug')('eslint-plugin-import:utils:ignore');\n\n// one-shot memoized\n/** @type {Set<import('./types').Extension>} */ let cachedSet;\n/** @type {import('./types').ESLintSettings} */ let lastSettings;\n\n/** @type {import('./ignore').getFileExtensions} */\nfunction makeValidExtensionSet(settings) {\n  // start with explicit JS-parsed extensions\n  /** @type {Set<import('./types').Extension>} */\n  const exts = new Set(settings['import/extensions'] || ['.js', '.mjs', '.cjs']);\n\n  // all alternate parser extensions are also valid\n  if ('import/parsers' in settings) {\n    for (const parser in settings['import/parsers']) {\n      const parserSettings = settings['import/parsers'][parser];\n      if (!Array.isArray(parserSettings)) {\n        throw new TypeError('\"settings\" for ' + parser + ' must be an array');\n      }\n      parserSettings.forEach((ext) => exts.add(ext));\n    }\n  }\n\n  return exts;\n}\nexports.getFileExtensions = makeValidExtensionSet;\n\n/** @type {(context: import('eslint').Rule.RuleContext) => Set<import('./types').Extension>} */\nfunction validExtensions(context) {\n  if (cachedSet && context.settings === lastSettings) {\n    return cachedSet;\n  }\n\n  lastSettings = context.settings;\n  cachedSet = makeValidExtensionSet(context.settings);\n  return cachedSet;\n}\n\n/** @type {import('./ignore').hasValidExtension} */\nfunction hasValidExtension(path, context) {\n  // eslint-disable-next-line no-extra-parens\n  return validExtensions(context).has(/** @type {import('./types').Extension} */ (extname(path)));\n}\nexports.hasValidExtension = hasValidExtension;\n\n/** @type {import('./ignore').default} */\nexports.default = function ignore(path, context) {\n  // check extension whitelist first (cheap)\n  if (!hasValidExtension(path, context)) {\n    return true;\n  }\n\n  if (!('import/ignore' in context.settings)) {\n    return false;\n  }\n  const ignoreStrings = context.settings['import/ignore'];\n\n  for (let i = 0; i < ignoreStrings.length; i++) {\n    const regex = new RegExp(ignoreStrings[i]);\n    if (regex.test(path)) {\n      log(`ignoring ${path}, matched pattern /${ignoreStrings[i]}/`);\n      return true;\n    }\n  }\n\n  return false;\n};\n"
        }
    ]
}