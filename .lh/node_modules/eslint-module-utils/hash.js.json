{
    "sourceFile": "node_modules/eslint-module-utils/hash.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892247504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * utilities for hashing config objects.\n * basically iteratively updates hash with a JSON-like format\n */\n\n'use strict';\n\nexports.__esModule = true;\n\nconst createHash = require('crypto').createHash;\n\nconst stringify = JSON.stringify;\n\n/** @type {import('./hash').default} */\nfunction hashify(value, hash) {\n  if (!hash) { hash = createHash('sha256'); }\n\n  if (Array.isArray(value)) {\n    hashArray(value, hash);\n  } else if (typeof value === 'function') {\n    hash.update(String(value));\n  } else if (value instanceof Object) {\n    hashObject(value, hash);\n  } else {\n    hash.update(stringify(value) || 'undefined');\n  }\n\n  return hash;\n}\nexports.default = hashify;\n\n/** @type {import('./hash').hashArray} */\nfunction hashArray(array, hash) {\n  if (!hash) { hash = createHash('sha256'); }\n\n  hash.update('[');\n  for (let i = 0; i < array.length; i++) {\n    hashify(array[i], hash);\n    hash.update(',');\n  }\n  hash.update(']');\n\n  return hash;\n}\nhashify.array = hashArray;\nexports.hashArray = hashArray;\n\n/** @type {import('./hash').hashObject} */\nfunction hashObject(object, optionalHash) {\n  const hash = optionalHash || createHash('sha256');\n\n  hash.update('{');\n  Object.keys(object).sort().forEach((key) => {\n    hash.update(stringify(key));\n    hash.update(':');\n    // @ts-expect-error the key is guaranteed to exist on the object here\n    hashify(object[key], hash);\n    hash.update(',');\n  });\n  hash.update('}');\n\n  return hash;\n}\nhashify.object = hashObject;\nexports.hashObject = hashObject;\n\n"
        }
    ]
}