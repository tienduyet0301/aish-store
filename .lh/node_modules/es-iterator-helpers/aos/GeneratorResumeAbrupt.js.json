{
    "sourceFile": "node_modules/es-iterator-helpers/aos/GeneratorResumeAbrupt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892191235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar CompletionRecord = require('es-abstract/2024/CompletionRecord');\nvar CreateIterResultObject = require('es-abstract/2024/CreateIterResultObject');\nvar GeneratorValidate = require('./GeneratorValidate');\nvar NormalCompletion = require('es-abstract/2024/NormalCompletion');\n\nvar SLOT = require('internal-slot');\n\nmodule.exports = function GeneratorResumeAbrupt(generator, abruptCompletion, generatorBrand) {\n\tif (!(abruptCompletion instanceof CompletionRecord)) {\n\t\tthrow new $TypeError('Assertion failed: abruptCompletion must be a Completion Record');\n\t}\n\n\tvar state = GeneratorValidate(generator, generatorBrand); // step 1\n\n\tif (state === 'suspendedStart') { // step 2\n\t\tSLOT.set(generator, '[[GeneratorState]]', 'completed'); // step 3.a\n\t\tSLOT.set(generator, '[[GeneratorContext]]', null); // step 3.b\n\t\tstate = 'completed'; // step 3.c\n\t}\n\n\tvar value = abruptCompletion.value();\n\n\tif (state === 'completed') { // step 3\n\t\treturn CreateIterResultObject(value, true); // steps 3.a-b\n\t}\n\n\tif (state !== 'suspendedYield') {\n\t\tthrow new $TypeError('Assertion failed: generator state is unexpected: ' + state); // step 4\n\t}\n\tif (abruptCompletion.type() === 'return') {\n\t\t// due to representing `GeneratorContext` as a function, we can't safely re-invoke it, so we can't support sending it a return completion\n\t\treturn CreateIterResultObject(SLOT.get(generator, '[[CloseIfAbrupt]]')(NormalCompletion(abruptCompletion.value())), true);\n\t}\n\n\tvar genContext = SLOT.get(generator, '[[GeneratorContext]]'); // step 5\n\n\tSLOT.set(generator, '[[GeneratorState]]', 'executing'); // step 8\n\n\tvar result = genContext(value); // steps 6-7, 8-11\n\n\treturn result; // step 12\n};\n"
        }
    ]
}