{
    "sourceFile": "node_modules/es-iterator-helpers/aos/CreateIteratorFromClosure.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892191024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar GeneratorStart = require('./GeneratorStart');\nvar IsArray = require('es-abstract/2024/IsArray');\nvar IsCallable = require('es-abstract/2024/IsCallable');\nvar OrdinaryObjectCreate = require('es-abstract/2024/OrdinaryObjectCreate');\n\nvar every = require('es-abstract/helpers/every');\n\nvar SLOT = require('internal-slot');\n\nvar safeConcat = require('safe-array-concat');\n\nvar isString = function isString(slot) {\n\treturn typeof slot === 'string';\n};\n\nmodule.exports = function CreateIteratorFromClosure(closure, generatorBrand, proto) {\n\tif (!IsCallable(closure)) {\n\t\tthrow new $TypeError('`closure` must be a function');\n\t}\n\tif (typeof generatorBrand !== 'string') {\n\t\tthrow new $TypeError('`generatorBrand` must be a string');\n\t}\n\tvar extraSlots = arguments.length > 3 ? arguments[3] : [];\n\tif (arguments.length > 3) {\n\t\tif (!IsArray(extraSlots) || !every(extraSlots, isString)) {\n\t\t\tthrow new $TypeError('`extraSlots` must be a List of String internal slot names');\n\t\t}\n\t}\n\tvar internalSlotsList = safeConcat(extraSlots, ['[[GeneratorContext]]', '[[GeneratorBrand]]', '[[GeneratorState]]']); // step 3\n\tvar generator = OrdinaryObjectCreate(proto, internalSlotsList); // steps 4, 6\n\tSLOT.set(generator, '[[GeneratorBrand]]', generatorBrand); // step 5\n\n\tSLOT.assert(closure, '[[Sentinel]]'); // our userland slot\n\tSLOT.set(generator, '[[Sentinel]]', SLOT.get(closure, '[[Sentinel]]')); // our userland slot\n\tSLOT.assert(closure, '[[CloseIfAbrupt]]'); // our second userland slot\n\tSLOT.set(generator, '[[CloseIfAbrupt]]', SLOT.get(closure, '[[CloseIfAbrupt]]')); // our second userland slot\n\n\tGeneratorStart(generator, closure); // step 13\n\n\treturn generator; // step 15\n};\n"
        }
    ]
}