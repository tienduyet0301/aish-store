{
    "sourceFile": "node_modules/es-iterator-helpers/aos/IteratorZip.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892192824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar CreateIteratorFromClosure = require('./CreateIteratorFromClosure');\nvar IteratorCloseAll = require('./IteratorCloseAll');\nvar IteratorStep = require('es-abstract/2024/IteratorStep');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar NormalCompletion = require('es-abstract/2024/NormalCompletion');\nvar ThrowCompletion = require('es-abstract/2024/ThrowCompletion');\n\nvar isAbstractClosure = require('es-abstract/helpers/isAbstractClosure');\nvar IsArray = require('es-abstract/helpers/IsArray');\nvar isIteratorRecord = require('es-abstract/helpers/records/iterator-record');\nvar every = require('es-abstract/helpers/every');\n\nvar callBound = require('call-bound');\n\nvar $indexOf = callBound('Array.prototype.indexOf');\nvar $slice = callBound('Array.prototype.slice');\nvar $splice = callBound('Array.prototype.splice');\n\nvar iterHelperProto = require('../IteratorHelperPrototype');\n\nvar SLOT = require('internal-slot');\n\n// https://tc39.es/proposal-joint-iteration/#sec-IteratorZip\n\nmodule.exports = function IteratorZip(iters, mode, padding, finishResults) {\n\tif (!IsArray(iters) || !every(iters, isIteratorRecord)) {\n\t\tthrow new $TypeError('`iters` must be a List of IteratorRecords');\n\t}\n\n\tif (mode !== 'shortest' && mode !== 'longest' && mode !== 'strict') {\n\t\tthrow new $TypeError('`mode` must be one of \"shortest\", \"longest\", or \"strict\"');\n\t}\n\n\tif (!IsArray(padding)) {\n\t\tthrow new $TypeError('`padding` must be a List');\n\t}\n\n\tif (!isAbstractClosure(finishResults)) {\n\t\tthrow new $TypeError('`finishResults` must be an Abstract Closure');\n\t}\n\n\tvar iterCount = iters.length; // step 1\n\n\tvar openIters = $slice(iters); // step 2\n\n\tvar sentinel = {};\n\tvar closure = function () {\n\t\tif (iterCount === 0) {\n\t\t\t// 1. If iterCount = 0, return ReturnCompletion(undefined).\n\t\t\treturn sentinel; // step 1\n\t\t}\n\t\t// while (true) {\n\t\t{ // eslint-disable-line no-lone-blocks\n\t\t\tvar results = []; // step 3.b.i\n\t\t\tif (openIters.length === 0) {\n\t\t\t\tthrow new $TypeError('Assertion failed: `openIters` is empty'); // step 3.b.ii\n\t\t\t}\n\t\t\tfor (var i = 0; i < iterCount; ++i) { // step 3.b.iii\n\t\t\t\t// for (var i = 0; i < iterCount; i += 1) { // step 3.b.iii\n\t\t\t\tvar result;\n\n\t\t\t\tvar iter = iters[i];\n\t\t\t\tif (iter === null) { // step 3.b.iii.1\n\t\t\t\t\tif (mode !== 'longest') {\n\t\t\t\t\t\tthrow new $TypeError('Assertion failed: `mode` is not \"longest\"'); // step 3.b.iii.1.a\n\t\t\t\t\t}\n\t\t\t\t\tresult = padding[i]; // step 3.b.iii.1.b\n\t\t\t\t} else { // step 2\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresult = IteratorStepValue(iter); // step 3.b.iii.2.a, 3.b.iii.2.c\n\t\t\t\t\t} catch (e) { // step 3.b.iii.2.b\n\t\t\t\t\t\t$splice(openIters, $indexOf(openIters, iter), 1); // step 3.b.iii.2.b.i\n\t\t\t\t\t\treturn IteratorCloseAll(openIters, ThrowCompletion(e)); // step 3.b.iii.2.b.ii\n\t\t\t\t\t}\n\t\t\t\t\tif (iter['[[Done]]']) { // step 3.b.iii.2.d\n\t\t\t\t\t\t$splice(openIters, $indexOf(openIters, iter), 1); // step 3.b.iii.2.d.i\n\t\t\t\t\t\tif (mode === 'shortest') { // step 3.b.iii.2.d.ii\n\t\t\t\t\t\t\tIteratorCloseAll(openIters, NormalCompletion(undefined)); // step 3.b.iii.2.d.ii.i\n\t\t\t\t\t\t\treturn sentinel;\n\t\t\t\t\t\t} else if (mode === 'strict') { // step 3.b.iii.2.d.iii\n\t\t\t\t\t\t\tif (i !== 0) { // step 3.b.iii.2.d.iii.i\n\t\t\t\t\t\t\t\treturn IteratorCloseAll(\n\t\t\t\t\t\t\t\t\topenIters,\n\t\t\t\t\t\t\t\t\tThrowCompletion(new $TypeError('Assertion failed: `i` is not 0'))\n\t\t\t\t\t\t\t\t); // step 3.b.iii.2.d.iii.i.i\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (var k = 1; k < iterCount; k += 1) { // step 3.b.iii.2.d.iii.ii\n\t\t\t\t\t\t\t\tif (iters[k] === null) {\n\t\t\t\t\t\t\t\t\tthrow new $TypeError('Assertion failed: `iters[k]` is `null`'); // step 3.b.iii.2.d.iii.ii.i\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresult = IteratorStep(iters[k]); // step 3.b.iii.2.d.iii.ii.ii, 3.b.iii.2.d.iii.ii.iii.ii.iv\n\t\t\t\t\t\t\t\t} catch (e) { // step 3.b.iii.2.d.iii.ii.iii\n\t\t\t\t\t\t\t\t\treturn IteratorCloseAll(openIters, ThrowCompletion(e)); // step 3.b.iii.2.d.iii.ii.iii.ii\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// if (open === false) { // step 3.b.iii.2.d.iii.ii.v\n\t\t\t\t\t\t\t\tif (iters[k]['[[Done]]']) { // step 3.b.iii.2.d.iii.ii.v\n\t\t\t\t\t\t\t\t\t$splice(openIters, $indexOf(openIters, iters[k]), 1); // step 3.b.iii.2.d.iii.ii.v.i\n\t\t\t\t\t\t\t\t} else { // step 3.b.iii.2.d.iii.ii.vi\n\t\t\t\t\t\t\t\t\treturn IteratorCloseAll(\n\t\t\t\t\t\t\t\t\t\topenIters,\n\t\t\t\t\t\t\t\t\t\tThrowCompletion(new $TypeError('Assertion failed: `open` is not `false`'))\n\t\t\t\t\t\t\t\t\t); // step 3.b.iii.2.d.iii.ii.vi.i\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else { // step 3.b.iii.2.d.iv\n\t\t\t\t\t\t\tif (mode !== 'longest') {\n\t\t\t\t\t\t\t\tthrow new $TypeError('Assertion failed: `mode` is not \"longest\"'); // step 3.b.iii.2.d.iv.i\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (openIters.length === 0) {\n\t\t\t\t\t\t\t\treturn sentinel; // ReturnCompletion(undefined); // step 3.b.iii.2.d.iv.ii\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\t\t\titers[i] = null; // step 3.b.iii.2.d.iv.iii\n\t\t\t\t\t\t\t// i += 1;\n\n\t\t\t\t\t\t\tresult = padding[i]; // step 3.b.iii.2.d.iv.iv\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tresults[results.length] = result; // step 3.b.iii.3\n\n\t\t\t\t//    5. Let completion be Completion(Yield(results)).\n\t\t\t\t//    6. If completion is an abrupt completion, then\n\t\t\t\t//   1. Return ? IteratorCloseAll(openIters, completion).\n\t\t\t}\n\t\t}\n\n\t\treturn finishResults(results); // step 3.b.iv\n\t};\n\tSLOT.set(closure, '[[Sentinel]]', sentinel); // for the userland implementation\n\tSLOT.set(closure, '[[CloseIfAbrupt]]', finishResults); // for the userland implementation\n\n\tvar gen = CreateIteratorFromClosure(closure, 'Iterator Helper', iterHelperProto, ['[[UnderlyingIterators]]']); // step 4\n\n\tSLOT.set(gen, '[[UnderlyingIterators]]', openIters); // step 5\n\n\treturn gen; // step 6\n};\n"
        }
    ]
}