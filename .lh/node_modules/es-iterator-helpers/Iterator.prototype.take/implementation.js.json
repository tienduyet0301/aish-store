{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.prototype.take/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892196232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\n\nvar CompletionRecord = require('es-abstract/2024/CompletionRecord');\nvar CreateIteratorFromClosure = require('../aos/CreateIteratorFromClosure');\nvar GetIteratorDirect = require('../aos/GetIteratorDirect');\nvar IteratorClose = require('es-abstract/2024/IteratorClose');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar NormalCompletion = require('es-abstract/2024/NormalCompletion');\nvar ToIntegerOrInfinity = require('es-abstract/2024/ToIntegerOrInfinity');\nvar ToNumber = require('es-abstract/2024/ToNumber');\nvar Type = require('es-abstract/2024/Type');\n\nvar iterHelperProto = require('../IteratorHelperPrototype');\n\nvar isNaN = require('es-abstract/helpers/isNaN');\n\nvar SLOT = require('internal-slot');\n\nmodule.exports = function take(limit) {\n\tif (this instanceof take) {\n\t\tthrow new $TypeError('`take` is not a constructor');\n\t}\n\n\tvar O = this; // step 1\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('`this` value must be an Object'); // step 2\n\t}\n\n\tvar numLimit = ToNumber(limit); // step 2\n\tif (isNaN(numLimit)) {\n\t\tthrow new $RangeError('`limit` must be a non-NaN number'); // step 3\n\t}\n\n\tvar iterated = GetIteratorDirect(O); // step 4\n\n\tvar integerLimit = ToIntegerOrInfinity(numLimit); // step 7\n\tif (integerLimit < 0) {\n\t\tthrow new $RangeError('`limit` must be a >= 0'); // step 8\n\t}\n\n\tvar closeIfAbrupt = function (abruptCompletion) {\n\t\tif (!(abruptCompletion instanceof CompletionRecord)) {\n\t\t\tthrow new $TypeError('`abruptCompletion` must be a Completion Record');\n\t\t}\n\t\tIteratorClose(\n\t\t\titerated,\n\t\t\tabruptCompletion\n\t\t);\n\t};\n\n\tvar sentinel = {};\n\tvar remaining = integerLimit; // step 9.a\n\tvar closure = function () { // step 9\n\t\t// while (true) { // step 9.b\n\t\tif (remaining === 0) { // step 9.b.i\n\t\t\treturn IteratorClose( // step 9.b.i.1\n\t\t\t\titerated,\n\t\t\t\tNormalCompletion(sentinel)\n\t\t\t);\n\t\t}\n\t\tif (remaining !== Infinity) { // step 9.b.ii\n\t\t\tremaining -= 1; // step 9.b.ii.1\n\t\t}\n\n\t\tvar value = IteratorStepValue(iterated); // step 6.b.i\n\t\tif (iterated['[[Done]]']) {\n\t\t\treturn sentinel; // step 6.b.ii\n\t\t}\n\n\t\treturn value; // step 9.b.iv\n\t\t// }\n\t};\n\tSLOT.set(closure, '[[Sentinel]]', sentinel); // for the userland implementation\n\tSLOT.set(closure, '[[CloseIfAbrupt]]', closeIfAbrupt); // for the userland implementation\n\n\tvar result = CreateIteratorFromClosure(closure, 'Iterator Helper', iterHelperProto, ['[[UnderlyingIterators]]']); // step 7\n\n\tSLOT.set(result, '[[UnderlyingIterators]]', [iterated]); // step 8\n\n\treturn result; // step 9\n};\n"
        }
    ]
}