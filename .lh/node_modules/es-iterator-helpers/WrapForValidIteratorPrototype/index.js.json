{
    "sourceFile": "node_modules/es-iterator-helpers/WrapForValidIteratorPrototype/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892199333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('es-abstract/2024/Call');\nvar CreateIterResultObject = require('es-abstract/2024/CreateIterResultObject');\nvar GetMethod = require('es-abstract/2024/GetMethod');\nvar Type = require('es-abstract/2024/Type');\n\nvar SLOT = require('internal-slot');\nvar iterProto = require('../Iterator.prototype/implementation');\n\n// https://tc39.es/proposal-iterator-helpers/#sec-wrapforvaliditeratorprototype-object\n\nmodule.exports = /* GetIntrinsic('%WrapForValidIteratorPrototype%', true) || */ {\n\t__proto__: iterProto,\n\tnext: function next() {\n\t\tvar O = this; // step 1\n\n\t\t// RequireInternalSlot(O, [[Iterated]]); // step 2\n\t\tSLOT.assert(O, '[[Iterated]]');\n\n\t\tvar iteratorRecord = SLOT.get(O, '[[Iterated]]'); // step 3\n\n\t\treturn Call(iteratorRecord['[[NextMethod]]'], iteratorRecord['[[Iterator]]']); // step 4\n\t},\n\t'return': function () {\n\t\tvar O = this; // step 1\n\n\t\t// RequireInternalSlot(O, [[Iterated]]); // step 2\n\t\tSLOT.assert(O, '[[Iterated]]');\n\n\t\tvar iterator = SLOT.get(O, '[[Iterated]]')['[[Iterator]]']; // step 3\n\n\t\tif (Type(iterator) !== 'Object') {\n\t\t\tthrow new $TypeError('iterator must be an Object'); // step 4\n\t\t}\n\n\t\tvar returnMethod = GetMethod(iterator, 'return'); // step 5\n\n\t\tif (typeof returnMethod === 'undefined') { // step 6\n\t\t\treturn CreateIterResultObject(undefined, true); // step 6.a\n\t\t}\n\t\treturn Call(returnMethod, iterator); // step 7\n\t}\n};\n"
        }
    ]
}