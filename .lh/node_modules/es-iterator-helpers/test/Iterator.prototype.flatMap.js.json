{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.prototype.flatMap.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar callBind = require('call-bind');\nvar functionsHaveNames = require('functions-have-names')();\nvar hasStrictMode = require('has-strict-mode')();\nvar forEach = require('for-each');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar hasSymbols = require('has-symbols/shams')();\nvar iterate = require('iterate-iterator');\n\nvar StringToCodePoints = require('es-abstract/2024/StringToCodePoints');\n\nvar index = require('../Iterator.prototype.flatMap');\nvar impl = require('../Iterator.prototype.flatMap/implementation');\n\nvar fnName = 'flatMap';\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar testIterator = require('./helpers/testIterator');\n\nmodule.exports = {\n\ttests: function (flatMap, name, t) {\n\t\tt['throws'](\n\t\t\tfunction () { return new flatMap(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` is not a constructor'\n\t\t);\n\n\t\tforEach(v.primitives.concat(v.objects), function (nonIterator) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(flatMap(nonIterator, function () {})); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonIterator) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\n\t\t\tvar badNext = { next: nonIterator };\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(flatMap(badNext, function () {})); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(badNext) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\t\t});\n\n\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { flatMap({ next: function () {} }, nonFunction); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonFunction) + ' is not a function'\n\t\t\t);\n\t\t});\n\n\t\tt.test('actual iteration', { skip: !hasSymbols }, function (st) {\n\t\t\tvar arr = [1, 2, 3];\n\t\t\tvar iterator = callBind(arr[Symbol.iterator], arr);\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new flatMap(iterator()); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new flatMap(iterator(), function () {}); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\n\t\t\ttestIterator(iterator(), [1, 2, 3], st, 'original');\n\n\t\t\tvar nonIterableFlatMap = flatMap(iterator(), function (x) { return x; });\n\t\t\tst['throws'](\n\t\t\t\tfunction () { nonIterableFlatMap.next(); },\n\t\t\t\tTypeError,\n\t\t\t\t'non-iterable return value throws'\n\t\t\t);\n\n\t\t\tforEach(v.strings, function (string) {\n\t\t\t\tst['throws'](\n\t\t\t\t\tfunction () { flatMap(iterator(), function () { return string; }).next(); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'non-object return value throws even if iterable (' + debug(string) + ')'\n\t\t\t\t);\n\n\t\t\t\ttestIterator(\n\t\t\t\t\tflatMap(iterator(), function () { return Object(string); }),\n\t\t\t\t\t[].concat(StringToCodePoints(string), StringToCodePoints(string), StringToCodePoints(string)),\n\t\t\t\t\tst,\n\t\t\t\t\t'boxed string (' + debug(string) + ')'\n\t\t\t\t);\n\t\t\t});\n\n\t\t\ttestIterator(flatMap(iterator(), function (x) { return [x][Symbol.iterator](); }), [1, 2, 3], st, 'identity mapper in array iterator');\n\t\t\ttestIterator(flatMap(iterator(), function (x) { return [2 * x][Symbol.iterator](); }), [2, 4, 6], st, 'doubler mapper in array iterator');\n\n\t\t\ttestIterator(flatMap(iterator(), function () { return []; }), [], st, 'empty mapper in nested array iterator');\n\t\t\ttestIterator(flatMap(iterator(), function (x) { return [[x, x + 1]][Symbol.iterator](); }), [[1, 2], [2, 3], [3, 4]], st, 'identity mapper in nested array iterator');\n\t\t\ttestIterator(flatMap(iterator(), function (x) { return [[2 * x, 2 * (x + 1)]][Symbol.iterator](); }), [[2, 4], [4, 6], [6, 8]], st, 'doubler mapper in nested array iterator');\n\n\t\t\ttestIterator(flatMap([0, 1, 2, 3][Symbol.iterator](), function (value) {\n\t\t\t\tvar result = [];\n\t\t\t\tfor (var i = 0; i < value; ++i) {\n\t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}), [1, 2, 2, 3, 3, 3], st, 'test262: test/built-ins/Iterator/prototype/flatMap/flattens-iteratable');\n\n\t\t\ttestIterator(flatMap([0, 1, 2, 3][Symbol.iterator](), function (value) {\n\t\t\t\tvar i = 0;\n\t\t\t\treturn {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tif (i < value) {\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\t\t\tdone: false\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: undefined,\n\t\t\t\t\t\t\tdone: true\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}), [1, 2, 2, 3, 3, 3], st, 'test262: test/built-ins/Iterator/prototype/flatMap/flattens-iterator');\n\n\t\t\ttestIterator(flatMap([0][Symbol.iterator](), function () {\n\t\t\t\tvar n = [0, 1, 2][Symbol.iterator]();\n\n\t\t\t\tvar ret = {\n\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\treturn n.next();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tret[Symbol.iterator] = null;\n\t\t\t\treturn ret;\n\t\t\t}), [0, 1, 2], st, 'test262: test/built-ins/Iterator/prototype/flatMap/iterable-to-iterator-fallback');\n\n\t\t\tvar counts = [];\n\t\t\ttestIterator(flatMap(['a', 'b', 'c', 'd', 'e'][Symbol.iterator](), function (value, count) {\n\t\t\t\tcounts.push(count);\n\n\t\t\t\tif (value === 'a' || value === 'b') {\n\t\t\t\t\treturn [0];\n\t\t\t\t}\n\t\t\t\tif (value === 'c') {\n\t\t\t\t\treturn [1, 2];\n\t\t\t\t}\n\t\t\t\tif (value === 'd') {\n\t\t\t\t\treturn [3, 4, 5];\n\t\t\t\t}\n\t\t\t\tif (value === 'e') {\n\t\t\t\t\treturn [6, 7, 8, 9];\n\t\t\t\t}\n\n\t\t\t\treturn st.fail('got unexpected value: ' + debug(v));\n\t\t\t}), [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], st, 'test262: test/built-ins/Iterator/prototype/flatMap/mapper-args');\n\t\t\tst.deepEqual(counts, [0, 1, 2, 3, 4], 'count values are as expected');\n\n\t\t\tst.test('return protocol', function (s2t) {\n\t\t\t\tvar returnCount = 0;\n\n\t\t\t\tvar iter = flatMap([0][Symbol.iterator](), function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'return': function () {\n\t\t\t\t\t\t\treturnCount += 1;\n\t\t\t\t\t\t\treturn {};\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\ts2t.equal(returnCount, 0, '`return` is not called yet');\n\n\t\t\t\ts2t.deepEqual(iter.next(), {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: 1\n\t\t\t\t});\n\n\t\t\t\ts2t.equal(returnCount, 0, '`return` is not called after first yield');\n\n\t\t\t\titer['return']();\n\t\t\t\ts2t.equal(returnCount, 1, '`return` is called when iterator return is called');\n\n\t\t\t\titer['return']();\n\t\t\t\ts2t.equal(returnCount, 1, '`return` is not called again when iterator return is called again');\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': implementation', function (t) {\n\t\t\tmodule.exports.tests(callBind(impl), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.prototype[fnName].name, fnName, 'Iterator#' + fnName + ' has name \"' + fnName + '\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator.prototype, fnName), 'Iterator#' + fnName + ' is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.test('bad string/this value', { skip: !hasStrictMode }, function (st) {\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(undefined, 'a'); }, TypeError, 'undefined is not an object');\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(null, 'a'); }, TypeError, 'null is not an object');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tmodule.exports.tests(callBind(Iterator.prototype[fnName]), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}