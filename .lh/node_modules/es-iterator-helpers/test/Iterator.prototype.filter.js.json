{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.prototype.filter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar callBind = require('call-bind');\nvar functionsHaveNames = require('functions-have-names')();\nvar hasStrictMode = require('has-strict-mode')();\nvar forEach = require('for-each');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar hasSymbols = require('has-symbols/shams')();\nvar hasPropertyDescriptors = require('has-property-descriptors')();\nvar iterate = require('iterate-iterator');\n\nvar index = require('../Iterator.prototype.filter');\nvar impl = require('../Iterator.prototype.filter/implementation');\n\nvar fnName = 'filter';\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar testIterator = require('./helpers/testIterator');\n\nmodule.exports = {\n\ttests: function (filter, name, t) {\n\t\tt['throws'](\n\t\t\tfunction () { return new filter(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` is not a constructor'\n\t\t);\n\n\t\tforEach(v.primitives.concat(v.objects), function (nonIterator) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(filter(nonIterator, function () {})); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonIterator) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\n\t\t\tvar badNext = { next: nonIterator };\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(filter(badNext, function () {})); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(badNext) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\t\t});\n\n\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { filter({ next: function () {} }, nonFunction); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonFunction) + ' is not a function'\n\t\t\t);\n\t\t});\n\n\t\tt.test('observable lookups', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t\tvar effects = [];\n\n\t\t\tvar obj = {};\n\t\t\tObject.defineProperty(obj, 'next', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function next() {\n\t\t\t\t\teffects.push('get next');\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\treturn { done: true, value: undefined };\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { filter(obj, null); },\n\t\t\t\tTypeError\n\t\t\t);\n\n\t\t\tst.deepEqual(effects, []);\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('actual iteration', { skip: !hasSymbols }, function (st) {\n\t\t\tvar arr = [1, 2, 3];\n\t\t\tvar iterator = callBind(arr[Symbol.iterator], arr);\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new filter(iterator()); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new filter(iterator(), function () {}); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\n\t\t\ttestIterator(iterator(), [1, 2, 3], st, 'original');\n\t\t\ttestIterator(filter(iterator(), function () { return false; }), [], st, 'filter for always-false');\n\t\t\ttestIterator(filter(iterator(), function () { return true; }), [1, 2, 3], st, 'filter for always-true');\n\t\t\ttestIterator(filter(iterator(), function (x, i) { return x === 2 && i === 1; }), [2], st, 'filter returns value for matching value/index');\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/filter/predicate-args', function (st) {\n\t\t\tvar g = function g() {\n\t\t\t\tvar arr = ['a', 'b', 'c'];\n\t\t\t\tvar i = 0;\n\t\t\t\treturn {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tvalue: arr[i],\n\t\t\t\t\t\t\t\tdone: i >= arr.length\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\ti += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t\tvar assertionCount = 0;\n\t\t\tvar iter = filter(\n\t\t\t\tg(),\n\t\t\t\tfunction (value, count) {\n\t\t\t\t\tif (value === 'a') {\n\t\t\t\t\t\tst.equal(count, 0, 'first iteration');\n\t\t\t\t\t} else if (value === 'b') {\n\t\t\t\t\t\tst.equal(count, 1, 'second iteration');\n\t\t\t\t\t} else if (value === 'c') {\n\t\t\t\t\t\tst.equal(count, 2, 'third iteration');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tst.fail('unexpected iteration');\n\t\t\t\t\t}\n\t\t\t\t\tassertionCount += 1;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tst.equal(assertionCount, 0, 'prior to iteration');\n\n\t\t\ttestIterator(iter, ['a', 'b', 'c'], st, 'iteration');\n\n\t\t\tst.equal(assertionCount, 3);\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/filter/predicate-throws', function (st) {\n\t\t\tvar returnCalls = 0;\n\n\t\t\tvar iter = {\n\t\t\t\tnext: function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t'return': function () {\n\t\t\t\t\treturnCalls += 1;\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar callbackCalls = 0;\n\t\t\tvar iterator = filter(iter, function () {\n\t\t\t\tcallbackCalls += 1;\n\t\t\t\tthrow new SyntaxError();\n\t\t\t});\n\n\t\t\tst['throws'](function () { iterator.next(); }, SyntaxError, 'next() throws');\n\n\t\t\tst.equal(callbackCalls, 1);\n\t\t\tst.equal(returnCalls, 1);\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/filter/predicate-throws-then-closing-iterator-also-throws', function (st) {\n\t\t\tvar iter = {\n\t\t\t\tnext: function next() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t'return': function () {\n\t\t\t\t\tthrow new EvalError();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar iterator = filter(iter, function () {\n\t\t\t\tthrow new SyntaxError();\n\t\t\t});\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iterator.next(); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'when the predicate and return() both throw, the predicateâ€™s exception wins'\n\t\t\t);\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/filter/get-return-method-throws', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t\tvar badIterator = {\n\t\t\t\tnext: function next() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tObject.defineProperty(badIterator, 'return', { get: function () { throw new SyntaxError(); } });\n\n\t\t\tvar iter = filter(badIterator, function () { return true; });\n\t\t\titer.next();\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'gets the `return` method, whose getter throws'\n\t\t\t);\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/drop/return-is-forwarded', function (st) {\n\t\t\tvar returnCount = 0;\n\n\t\t\tvar badIterator = {\n\t\t\t\tnext: function next() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t'return': function () {\n\t\t\t\t\treturnCount += 1;\n\t\t\t\t\treturn {};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar iter1 = filter(badIterator, function () { return false; });\n\t\t\tst.equal(returnCount, 0, 'iter1, before return()');\n\t\t\titer1['return']();\n\t\t\tst.equal(returnCount, 1, 'iter1, after return()');\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/drop/return-is-not-forwarded-after-exhaustion', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t\tvar makeBadIterator = function makeBadIterator() {\n\t\t\t\treturn {\n\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: true,\n\t\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new SyntaxError();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tvar iter1 = filter(makeBadIterator(), function () { return true; });\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter1['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'iter1, return() throws'\n\t\t\t);\n\t\t\titer1.next();\n\t\t\titer1['return']();\n\n\t\t\t// 3 filters (i wish i had pipeline)\n\t\t\tvar iter2 = filter(\n\t\t\t\tfilter(\n\t\t\t\t\tfilter(\n\t\t\t\t\t\tmakeBadIterator(),\n\t\t\t\t\t\tfunction () { return true; }\n\t\t\t\t\t),\n\t\t\t\t\tfunction () { return true; }\n\t\t\t\t),\n\t\t\t\tfunction () { return true; }\n\t\t\t);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter2['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'iter2, return() throws'\n\t\t\t);\n\t\t\titer2.next();\n\t\t\titer2['return']();\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': implementation', function (t) {\n\t\t\tmodule.exports.tests(callBind(impl), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.prototype[fnName].name, fnName, 'Iterator#' + fnName + ' has name \"' + fnName + '\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator.prototype, fnName), 'Iterator#' + fnName + ' is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.test('bad string/this value', { skip: !hasStrictMode }, function (st) {\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(undefined, 'a'); }, TypeError, 'undefined is not an object');\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(null, 'a'); }, TypeError, 'null is not an object');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tmodule.exports.tests(callBind(Iterator.prototype[fnName]), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}