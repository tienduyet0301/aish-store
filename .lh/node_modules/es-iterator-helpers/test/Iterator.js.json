{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar functionsHaveNames = require('functions-have-names')();\n\nvar index = require('../Iterator');\nvar impl = require('../Iterator/implementation');\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = {\n\ttests: function (Iter, name, t) {\n\t\tt.equal(typeof Iter, 'function', name + ' is a function');\n\n\t\tt['throws'](\n\t\t\tfunction () { Iter(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\tname + ' throws when Call-ed'\n\t\t);\n\n\t\tt['throws'](\n\t\t\tfunction () { return new Iter(); },\n\t\t\tTypeError,\n\t\t\tname + ' throws when Construct-ed'\n\t\t);\n\n\t\tvar SubIter;\n\t\tvar SubSubIter;\n\t\ttry {\n\t\t\t/* eslint no-new-func: 0 */\n\t\t\tSubIter = Function('Iter', 'return class SubIter extends Iter {};')(Iter);\n\t\t\tSubSubIter = Function('SubIter', 'return class SubSubIter extends SubIter {};')(SubIter);\n\t\t} catch (e) { /**/ }\n\n\t\tt.test('class inheritance', { skip: !SubIter }, function (st) {\n\t\t\tst.doesNotThrow(\n\t\t\t\tfunction () { return new SubIter(); },\n\t\t\t\t'Extending ' + name + ' does not throw when Construct-ed'\n\t\t\t);\n\t\t\tst.doesNotThrow(\n\t\t\t\tfunction () { return new SubSubIter(); },\n\t\t\t\t'Extending ' + name + ' twice does not throw when Construct-ed'\n\t\t\t);\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator: index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator', t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator: implementation', function (t) {\n\t\t\tmodule.exports.tests(impl, 'Iterator', t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator: shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.name, 'Iterator', 'Iterator has name \"Iterator\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(global, Iterator), 'Iterator is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.test('prototype descriptor', { skip: !defineProperties.supportsDescriptors }, function (pt) {\n\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(Iterator, 'prototype');\n\t\t\t\tpt.deepEqual(\n\t\t\t\t\tdesc,\n\t\t\t\t\t{\n\t\t\t\t\t\tconfigurable: false,\n\t\t\t\t\t\tenumerable: false,\n\t\t\t\t\t\tvalue: Iterator.prototype,\n\t\t\t\t\t\twritable: false\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tpt.end();\n\t\t\t});\n\n\t\t\tmodule.exports.tests(Iterator, 'Iterator', t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}