{
    "sourceFile": "node_modules/es-iterator-helpers/test/shimmed.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892199091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nrequire('../auto');\n\nvar test = require('tape');\nvar forEach = require('for-each');\n\nvar shims = require('../');\n\nforEach(shims, function (shim) {\n\tvar shimTests;\n\ttry {\n\t\tshimTests = require('./' + shim); // eslint-disable-line global-require\n\t} catch (e) {\n\t\ttest(shim + ': shimmed', { todo: true });\n\t}\n\tif (shimTests) {\n\t\tshimTests.shimmed();\n\t}\n});\n\ntest('integration', function (t) {\n\tvar seenMapEveryMap = [];\n\tvar seenMapEveryEvery = [];\n\tvar mapEveryResult = Iterator.from([1, 2, 3, 4, 5]).map(function (x) {\n\t\tseenMapEveryMap.push(x);\n\t\treturn x * x;\n\t}).every(function (x) {\n\t\tseenMapEveryEvery.push(x);\n\t\treturn x < 10;\n\t});\n\tt.equal(mapEveryResult, false, 'map + every: every predicate returned false nonzero times');\n\tt.deepEqual(seenMapEveryMap, [1, 2, 3, 4], 'map + every, map: all values are seen until after the first one that is > 10 when squared');\n\tt.deepEqual(seenMapEveryEvery, [1, 4, 9, 16], 'map + every, every: all values are seen until after the first one that is > 10 when squared');\n\n\tvar seenMapSomeMap = [];\n\tvar seenMapSomeSome = [];\n\tvar mapSomeResult = Iterator.from([1, 2, 3, 4, 5]).map(function (x) {\n\t\tseenMapSomeMap.push(x);\n\t\treturn x * x;\n\t}).some(function (x) {\n\t\tseenMapSomeSome.push(x);\n\t\treturn x > 10;\n\t});\n\tt.equal(mapSomeResult, true, 'map + some: some predicate returned true nonzero times');\n\tt.deepEqual(seenMapSomeMap, [1, 2, 3, 4], 'map + some, map: all values are seen until after the first one that is > 10 when squared');\n\tt.deepEqual(seenMapSomeSome, [1, 4, 9, 16], 'map + some, some: all values are seen until after the first one that is > 10 when squared');\n\n\tvar seenMapFind = [];\n\tvar mapFindResult = Iterator.from([1, 2, 3, 4, 5]).map(function (x) {\n\t\tseenMapFind.push(x);\n\t\treturn x * x;\n\t}).find(function (x) {\n\t\treturn x > 10;\n\t});\n\tt.equal(mapFindResult, 16, 'map + find: find found the first mapped value over 10');\n\tt.deepEqual(seenMapFind, [1, 2, 3, 4], 'map + find: all values are seen until after the first one that is > 10 when squared');\n\n\tvar seenFilterEvery = [];\n\tvar filterEveryResult = Iterator.from([1, 2, 3, 4, 5]).filter(function (x) {\n\t\tseenFilterEvery.push(x);\n\t\treturn x;\n\t}).every(function (x) {\n\t\treturn x <= 3;\n\t});\n\tt.equal(filterEveryResult, false, 'filter + every: every predicate returned false nonzero times');\n\tt.deepEqual(seenMapFind, [1, 2, 3, 4], 'filter + every: all values are seen until after the first one that is > 10 when squared');\n\n\tt.end();\n});\n"
        }
    ]
}