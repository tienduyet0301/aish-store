{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.concat.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar callBind = require('call-bind');\nvar functionsHaveNames = require('functions-have-names')();\nvar forEach = require('for-each');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar hasSymbols = require('has-symbols/shams')();\nvar mockProperty = require('mock-property');\nvar hasPropertyDescriptors = require('has-property-descriptors')();\n\nvar index = require('../Iterator.concat');\nvar impl = require('../Iterator.concat/implementation');\nvar from = require('../Iterator.from/polyfill')();\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar testIterator = require('./helpers/testIterator');\n\nmodule.exports = {\n\ttests: function (concat, name, t) {\n\t\tt['throws'](\n\t\t\tfunction () { return new concat(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` itself is not a constructor'\n\t\t);\n\t\tt['throws'](\n\t\t\tfunction () { return new concat({}); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` itself is not a constructor, with an argument'\n\t\t);\n\n\t\tforEach(v.primitives.concat(v.objects), function (nonIterator) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { concat(nonIterator); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonIterator) + ' is not an iterable Object'\n\t\t\t);\n\t\t});\n\n\t\tt.deepEqual(concat().next(), { value: undefined, done: true }, 'no arguments -> empty iterator');\n\n\t\tt.test('actual iteration', { skip: !hasSymbols }, function (st) {\n\t\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\t\tvar badIterable = {};\n\t\t\t\tbadIterable[Symbol.iterator] = nonFunction;\n\t\t\t\tst['throws'](\n\t\t\t\t\tfunction () { concat([], badIterable, []); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\tdebug(badIterable) + '[Symbol.iterator] is not a function'\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tforEach(v.primitives, function (nonObject) {\n\t\t\t\tvar badIterable = {};\n\t\t\t\tbadIterable[Symbol.iterator] = function () { return nonObject; };\n\t\t\t\tst['throws'](\n\t\t\t\t\tfunction () { concat([], badIterable, []).next(); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\tdebug(badIterable) + '[Symbol.iterator] does not return an object'\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tforEach(v.strings, function (string) {\n\t\t\t\tst['throws'](\n\t\t\t\t\tfunction () { concat(string); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\t'non-objects are not considered iterable'\n\t\t\t\t);\n\t\t\t\tvar stringIt = concat(['a'], [string], ['c']);\n\t\t\t\ttestIterator(stringIt, ['a', string, 'c'], st, 'string iterator: ' + debug(string));\n\t\t\t});\n\n\t\t\tvar arrayIt = concat([1, 2, 3]);\n\t\t\tst.equal(typeof arrayIt.next, 'function', 'has a `next` function');\n\n\t\t\tst.test('real iterators', { skip: !hasSymbols }, function (s2t) {\n\t\t\t\tvar iter = [1, 2][Symbol.iterator]();\n\t\t\t\ttestIterator(concat(iter, [3]), [1, 2, 3], s2t, 'array iterator + array yields combined results');\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('observability in a replaced String iterator', function (s2t) {\n\t\t\t\tvar originalStringIterator = String.prototype[Symbol.iterator];\n\t\t\t\tvar observedType;\n\t\t\t\ts2t.teardown(mockProperty(String.prototype, Symbol.iterator, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\t'use strict'; // eslint-disable-line strict, lines-around-directive\n\n\t\t\t\t\t\tobservedType = typeof this;\n\t\t\t\t\t\treturn originalStringIterator;\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\tconcat(from(''));\n\t\t\t\ts2t.equal(observedType, 'string', 'string primitive -> primitive receiver in Symbol.iterator getter');\n\t\t\t\tconcat(from(Object('')));\n\t\t\t\ts2t.equal(observedType, 'object', 'boxed string -> boxed string in Symbol.iterator getter');\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/arguments-checked-in-order', { skip: !hasPropertyDescriptors }, function (s2t) {\n\t\t\t\tvar getIterator = 0;\n\n\t\t\t\tvar iterable1 = {};\n\t\t\t\tObject.defineProperty(iterable1, Symbol.iterator, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tgetIterator += 1;\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tvar iterable2 = {};\n\t\t\t\tObject.defineProperty(iterable2, Symbol.iterator, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\ts2t.equal(getIterator, 0);\n\n\t\t\t\ts2t['throws'](function () { concat(iterable1, null, iterable2); }, TypeError);\n\n\t\t\t\ts2t.equal(getIterator, 1);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/fresh-iterator-result', function (s2t) {\n\t\t\t\tvar oldIterResult = {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: 123\n\t\t\t\t};\n\n\t\t\t\tvar testIterator1 = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\treturn oldIterResult;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn testIterator1;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\n\t\t\t\tvar iterResult = iterator.next();\n\n\t\t\t\ts2t.equal(iterResult.done, false);\n\t\t\t\ts2t.equal(iterResult.value, 123);\n\n\t\t\t\ts2t.notEqual(iterResult, oldIterResult);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/get-iterator-method-only-once', { skip: !hasPropertyDescriptors }, function (s2t) {\n\t\t\t\tvar iteratorGets = 0;\n\t\t\t\tvar iteratorCalls = 0;\n\t\t\t\tvar array = [1, 2, 3];\n\n\t\t\t\tfunction CountingIterable() {}\n\t\t\t\tObject.defineProperty(\n\t\t\t\t\tCountingIterable.prototype,\n\t\t\t\t\tSymbol.iterator,\n\t\t\t\t\t{\n\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\titeratorGets += 1;\n\n\t\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\t\titeratorCalls += 1;\n\t\t\t\t\t\t\t\treturn array[Symbol.iterator]();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tvar iterable = new CountingIterable();\n\n\t\t\t\ts2t.equal(iteratorGets, 0);\n\t\t\t\ts2t.equal(iteratorCalls, 0);\n\n\t\t\t\tvar iter = concat(iterable);\n\n\t\t\t\ts2t.equal(iteratorGets, 1);\n\t\t\t\ts2t.equal(iteratorCalls, 0);\n\n\t\t\t\ttestIterator(iter, array, s2t, 'iterating over the iterator calls the iterator function once');\n\n\t\t\t\ts2t.equal(iteratorGets, 1);\n\t\t\t\ts2t.equal(iteratorCalls, 1);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/get-iterator-method-throws', { skip: !hasPropertyDescriptors }, function (s2t) {\n\t\t\t\tvar iterable = {};\n\t\t\t\tObject.defineProperty(iterable, Symbol.iterator, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\ts2t['throws'](function () { concat(iterable); }, EvalError);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/inner-iterator-created-in-order', function (s2t) {\n\t\t\t\tvar calledIterator = [];\n\n\t\t\t\tvar iterable1 = {};\n\t\t\t\titerable1[Symbol.iterator] = function () {\n\t\t\t\t\tcalledIterator.push('iterable1');\n\t\t\t\t\treturn [1][Symbol.iterator]();\n\t\t\t\t};\n\n\t\t\t\tvar iterable2 = {};\n\t\t\t\titerable2[Symbol.iterator] = function () {\n\t\t\t\t\tcalledIterator.push('iterable2');\n\t\t\t\t\treturn [2][Symbol.iterator]();\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable1, iterable2);\n\n\t\t\t\ts2t.deepEqual(calledIterator, []);\n\n\t\t\t\ts2t.deepEqual(iterator.next(), { done: false, value: 1 });\n\n\t\t\t\ts2t.deepEqual(calledIterator, ['iterable1']);\n\n\t\t\t\ts2t.deepEqual(iterator.next(), { done: false, value: 2 });\n\n\t\t\t\ts2t.deepEqual(calledIterator, ['iterable1', 'iterable2']);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/next-method-called-with-zero-arguments', function (s2t) {\n\t\t\t\tvar nextCalled = 0;\n\n\t\t\t\tvar testIterator1 = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tnextCalled += 1;\n\t\t\t\t\t\ts2t.equal(arguments.length, 0);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\tvalue: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn testIterator1;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\t\t\t\ts2t.equal(nextCalled, 0);\n\n\t\t\t\titerator.next();\n\t\t\t\ts2t.equal(nextCalled, 1);\n\n\t\t\t\titerator.next(1);\n\t\t\t\ts2t.equal(nextCalled, 2);\n\n\t\t\t\titerator.next(1, 2);\n\t\t\t\ts2t.equal(nextCalled, 3);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/next-method-returns-non-object', function (s2t) {\n\t\t\t\tvar nonObjectIterator = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn nonObjectIterator;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\n\t\t\t\ts2t['throws'](function () { iterator.next(); }, TypeError);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/next-method-returns-throwing-done', { skip: !hasPropertyDescriptors }, function (s2t) {\n\t\t\t\tvar throwingIterator = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tvar result = { done: null, value: 1 };\n\t\t\t\t\t\tObject.defineProperty(result, 'done', {\n\t\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new Error();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn throwingIterator;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\n\t\t\t\ts2t['throws'](function () { iterator.next(); }, EvalError);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/next-method-returns-throwing-value-done', { skip: !hasPropertyDescriptors }, function (s2t) {\n\t\t\t\tfunction ReturnCalledError() {}\n\t\t\t\tfunction ValueGetterError() {}\n\n\t\t\t\tvar throwingIterator = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tvar result = { value: null, done: true };\n\t\t\t\t\t\tObject.defineProperty(result, 'value', {\n\t\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\t\tthrow new ValueGetterError();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new ReturnCalledError();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn throwingIterator;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\n\t\t\t\tvar iterResult = iterator.next();\n\n\t\t\t\ts2t.equal(iterResult.done, true);\n\t\t\t\ts2t.equal(iterResult.value, undefined);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/next-method-returns-throwing-value', { skip: !hasPropertyDescriptors }, function (s2t) {\n\t\t\t\tvar throwingIterator = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tvar result = { value: null, done: false };\n\t\t\t\t\t\tObject.defineProperty(result, 'value', {\n\t\t\t\t\t\t\tget: function () {\n\t\t\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new Error();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn throwingIterator;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\n\t\t\t\ts2t['throws'](function () { iterator.next(); }, EvalError);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/next-method-throws', function (s2t) {\n\t\t\t\tvar throwingIterator = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn throwingIterator;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\n\t\t\t\ts2t['throws'](function () { iterator.next(); }, EvalError);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/return-is-not-forwarded-after-exhaustion', function (s2t) {\n\t\t\t\tvar testIterator1 = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: true,\n\t\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn testIterator1;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\t\t\t\titerator.next();\n\t\t\t\titerator['return']();\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tt.test('test262: test/built-ins/Iterator/concat/return-is-not-forwarded-before-initial-start', function (s2t) {\n\t\t\t\tvar testIterator1 = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new EvalError();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn testIterator1;\n\t\t\t\t};\n\n\t\t\t\tvar iterator = concat(iterable);\n\t\t\t\titerator['return']();\n\t\t\t\titerator.next();\n\t\t\t\titerator['return']();\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/return-method-called-with-zero-arguments', function (s2t) {\n\t\t\t\tvar returnCalled = 0;\n\n\t\t\t\tvar testIterator1 = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\treturn { done: false };\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\treturnCalled += 1;\n\t\t\t\t\t\ts2t.equal(arguments.length, 0);\n\t\t\t\t\t\treturn { done: true };\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn testIterator1;\n\t\t\t\t};\n\n\t\t\t\tvar iterator;\n\n\t\t\t\t// Call with zero arguments.\n\t\t\t\titerator = concat(iterable);\n\t\t\t\titerator.next();\n\t\t\t\ts2t.equal(returnCalled, 0);\n\n\t\t\t\titerator['return']();\n\t\t\t\ts2t.equal(returnCalled, 1);\n\n\t\t\t\t// Call with one argument.\n\t\t\t\titerator = concat(iterable);\n\t\t\t\titerator.next();\n\t\t\t\ts2t.equal(returnCalled, 1);\n\n\t\t\t\titerator['return'](1);\n\t\t\t\ts2t.equal(returnCalled, 2);\n\n\t\t\t\t// Call with two arguments.\n\t\t\t\titerator = concat(iterable);\n\t\t\t\titerator.next();\n\t\t\t\ts2t.equal(returnCalled, 2);\n\n\t\t\t\titerator['return'](1, 2);\n\t\t\t\ts2t.equal(returnCalled, 3);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('test262: test/built-ins/Iterator/concat/throws-typeerror-when-generator-is-running-next', function (s2t) {\n\t\t\t\tvar enterCount = 0;\n\n\t\t\t\tvar iterator;\n\n\t\t\t\tvar testIterator1 = {\n\t\t\t\t\tnext: function () {\n\t\t\t\t\t\tenterCount += 1;\n\t\t\t\t\t\titerator.next();\n\t\t\t\t\t\treturn { done: false };\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar iterable = {};\n\t\t\t\titerable[Symbol.iterator] = function () {\n\t\t\t\t\treturn testIterator1;\n\t\t\t\t};\n\n\t\t\t\titerator = concat(iterable);\n\n\t\t\t\ts2t.equal(enterCount, 0);\n\n\t\t\t\ts2t['throws'](function () { iterator.next(); }, TypeError);\n\n\t\t\t\ts2t.equal(enterCount, 1);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator.concat: index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator.concat', t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.concat: implementation', function (t) {\n\t\t\tmodule.exports.tests(impl, 'Iterator.concat', t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.concat: shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.concat.name, 'concat', 'Iterator.concat has name \"concat\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator, 'concat'), 'Iterator.concat is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.equal(Iterator.concat.length, 0, 'Iterator.concat has length 0');\n\n\t\t\tmodule.exports.tests(callBind(Iterator.concat, Iterator), 'Iterator.concat', t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}