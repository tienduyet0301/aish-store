{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.prototype.constructor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\n\nvar Index = require('../Iterator.prototype.constructor');\nvar Impl = require('../Iterator.prototype.constructor/implementation');\n\nvar $Iterator = require('../Iterator/polyfill')();\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = {\n\ttests: function (t, constructor, name) {\n\t\tt.equal(constructor, $Iterator, name + ' is Iterator');\n\t},\n\tindex: function () {\n\t\ttest('Iterator.prototype.constructor: index', function (t) {\n\t\t\tt.notEqual(Index, $Iterator, 'index is not Iterator itself');\n\t\t\tt.equal(typeof Index, 'function', 'index is a function');\n\n\t\t\tt['throws'](\n\t\t\t\tfunction () { Index(); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'index throws when Call-ed'\n\t\t\t);\n\n\t\t\tt['throws'](\n\t\t\t\tfunction () { return new Index(); },\n\t\t\t\tTypeError,\n\t\t\t\t'index throws when Construct-ed'\n\t\t\t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.prototype.constructor: implementation', function (t) {\n\t\t\tt.equal(Impl, $Iterator, 'implementation is Iterator itself');\n\t\t\tmodule.exports.tests(t, Impl, 'Iterator.prototype.constructor');\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.prototype.constructor: shimmed', function (t) {\n\t\t\tmodule.exports.tests(t, Iterator.prototype.constructor, 'Iterator.prototype.constructor');\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator.prototype, 'constructor'), 'Iterator#constructor is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}