{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.prototype.drop.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar callBind = require('call-bind');\nvar functionsHaveNames = require('functions-have-names')();\nvar hasStrictMode = require('has-strict-mode')();\nvar forEach = require('for-each');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar hasSymbols = require('has-symbols/shams')();\nvar hasPropertyDescriptors = require('has-property-descriptors')();\nvar iterate = require('iterate-iterator');\n\nvar index = require('../Iterator.prototype.drop');\nvar impl = require('../Iterator.prototype.drop/implementation');\n\nvar fnName = 'drop';\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar testIterator = require('./helpers/testIterator');\n\nmodule.exports = {\n\ttests: function (drop, name, t) {\n\t\tt['throws'](\n\t\t\tfunction () { return new drop(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` itself is not a constructor'\n\t\t);\n\n\t\tforEach(v.primitives.concat(v.objects), function (nonIterator) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(drop(nonIterator, 0)); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonIterator) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\n\t\t\tvar badNext = { next: nonIterator };\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(drop(badNext, 0)); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(badNext) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\t\t});\n\n\t\tt.test('observable lookups', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t\tvar effects = [];\n\n\t\t\tvar obj = {};\n\t\t\tObject.defineProperty(obj, 'next', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function next() {\n\t\t\t\t\teffects.push('get next');\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\treturn { done: true, value: undefined };\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t\tdrop(obj, {\n\t\t\t\tvalueOf: function valueOf() {\n\t\t\t\t\teffects.push('ToNumber limit');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tst.deepEqual(effects, [\n\t\t\t\t'ToNumber limit',\n\t\t\t\t'get next'\n\t\t\t]);\n\t\t\tst.end();\n\t\t});\n\n\t\tvar arr = [1, 2, 3];\n\n\t\tt.test('actual iteration', { skip: !hasSymbols }, function (st) {\n\t\t\tvar iterator = callBind(arr[Symbol.iterator], arr);\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { drop(iterator(), -3); },\n\t\t\t\tRangeError,\n\t\t\t\t'-3 is not >= 0'\n\t\t\t);\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new drop(iterator()); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new drop(iterator(), 0); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\n\t\t\ttestIterator(iterator(), [1, 2, 3], st, 'original');\n\t\t\ttestIterator(drop(iterator(), 0), [1, 2, 3], st, 'drop 0');\n\t\t\ttestIterator(drop(iterator(), 1), [2, 3], st, 'drop 1');\n\t\t\ttestIterator(drop(iterator(), 2), [3], st, 'drop 2');\n\t\t\ttestIterator(drop(iterator(), 3), [], st, 'drop 3');\n\t\t\ttestIterator(drop(iterator(), Infinity), [], st, 'drop âˆž');\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/drop/get-return-method-throws', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t\tvar badIterator = {\n\t\t\t\tnext: function next() {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tObject.defineProperty(badIterator, 'return', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () { throw new SyntaxError(); }\n\t\t\t});\n\n\t\t\tvar iter = drop(badIterator, 1);\n\t\t\titer.next();\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'gets the `return` method, whose getter throws'\n\t\t\t);\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/drop/return-is-forwarded', function (st) {\n\t\t\tvar returnCount = 0;\n\n\t\t\tvar makeBadIterator = function makeBadIterator() {\n\t\t\t\treturn {\n\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\t\tvalue: 1\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\treturnCount += 1;\n\t\t\t\t\t\treturn {};\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tvar iter1 = drop(makeBadIterator(), 0);\n\t\t\tst.equal(returnCount, 0, 'iter1, before return()');\n\t\t\titer1['return']();\n\t\t\tst.equal(returnCount, 1, 'iter1, after return()');\n\n\t\t\tvar iter2 = drop(makeBadIterator(), 1);\n\t\t\tst.equal(returnCount, 1, 'iter2, before return()');\n\t\t\titer2['return']();\n\t\t\tst.equal(returnCount, 2, 'iter2, after return()');\n\n\t\t\t// 5 drops (i wish i had pipeline)\n\t\t\tvar iter3 = drop(\n\t\t\t\tdrop(\n\t\t\t\t\tdrop(\n\t\t\t\t\t\tdrop(\n\t\t\t\t\t\t\tdrop(\n\t\t\t\t\t\t\t\tmakeBadIterator(),\n\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t),\n\t\t\t\t\t\t1\n\t\t\t\t\t),\n\t\t\t\t\t1\n\t\t\t\t),\n\t\t\t\t1\n\t\t\t);\n\t\t\tst.equal(returnCount, 2, 'iter3, before return()');\n\t\t\titer3['return']();\n\t\t\tst.equal(returnCount, 3, 'iter3, after return()');\n\n\t\t\tst.end();\n\t\t});\n\n\t\tt.test('262: test/built-ins/Iterator/prototype/drop/return-is-not-forwarded-after-exhaustion', { skip: !hasPropertyDescriptors }, function (st) {\n\t\t\tvar makeBadIterator = function makeBadIterator() {\n\t\t\t\treturn {\n\t\t\t\t\tnext: function next() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdone: true,\n\t\t\t\t\t\t\tvalue: undefined\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t\t'return': function () {\n\t\t\t\t\t\tthrow new SyntaxError();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t\tvar iter1 = drop(makeBadIterator(), 0);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter1['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'iter1, return() throws'\n\t\t\t);\n\t\t\titer1.next();\n\t\t\titer1['return']();\n\n\t\t\tvar iter2 = drop(makeBadIterator(), 1);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter2['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'iter2, return() throws'\n\t\t\t);\n\t\t\titer2.next();\n\t\t\titer2['return']();\n\n\t\t\t// 5 drops (i wish i had pipeline)\n\t\t\tvar iter3 = drop(\n\t\t\t\tdrop(\n\t\t\t\t\tdrop(\n\t\t\t\t\t\tdrop(\n\t\t\t\t\t\t\tdrop(\n\t\t\t\t\t\t\t\tmakeBadIterator(),\n\t\t\t\t\t\t\t\t1\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t1\n\t\t\t\t\t\t),\n\t\t\t\t\t\t1\n\t\t\t\t\t),\n\t\t\t\t\t1\n\t\t\t\t),\n\t\t\t\t1\n\t\t\t);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter3['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'iter3, return() throws'\n\t\t\t);\n\t\t\titer3.next();\n\t\t\titer3['return']();\n\n\t\t\tvar iter4 = drop(makeBadIterator(), 10);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { iter4['return'](); },\n\t\t\t\tSyntaxError,\n\t\t\t\t'iter4, return() throws'\n\t\t\t);\n\t\t\titer4.next();\n\t\t\titer4['return']();\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': implementation', function (t) {\n\t\t\tmodule.exports.tests(callBind(impl), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.prototype[fnName].name, fnName, 'Iterator#' + fnName + ' has name \"' + fnName + '\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator.prototype, fnName), 'Iterator#' + fnName + ' is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.test('bad string/this value', { skip: !hasStrictMode }, function (st) {\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(undefined, 'a'); }, TypeError, 'undefined is not an object');\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(null, 'a'); }, TypeError, 'null is not an object');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tmodule.exports.tests(callBind(Iterator.prototype[fnName]), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}