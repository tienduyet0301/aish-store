{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.from.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892197491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar callBind = require('call-bind');\nvar functionsHaveNames = require('functions-have-names')();\nvar hasProto = require('has-proto')();\nvar forEach = require('for-each');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar hasSymbols = require('has-symbols/shams')();\nvar mockProperty = require('mock-property');\n\nvar index = require('../Iterator.from');\nvar impl = require('../Iterator.from/implementation');\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar testIterator = require('./helpers/testIterator');\n\nvar $Iterator = require('../Iterator/implementation');\nvar iterProto = require('iterator.prototype');\n\nvar getCodePoints = function getCodePoints(str) {\n\tvar chars = [];\n\tfor (var i = 0; i < str.length; i++) {\n\t\tvar c1 = str.charCodeAt(i);\n\t\tif (c1 >= 0xD800 && c1 < 0xDC00 && i + 1 < str.length) {\n\t\t\tvar c2 = str.charCodeAt(i + 1);\n\t\t\tif (c2 >= 0xDC00 && c2 < 0xE000) {\n\t\t\t\tchars.push(str.charAt(i) + str.charAt(i + 1));\n\t\t\t\ti += 1;\n\t\t\t\tcontinue; // eslint-disable-line no-continue, no-restricted-syntax\n\t\t\t}\n\t\t}\n\t\tchars.push(str.charAt(i));\n\t}\n\treturn chars;\n};\n\nmodule.exports = {\n\ttests: function (from, name, t) {\n\t\tt['throws'](\n\t\t\tfunction () { return new from(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` itself is not a constructor'\n\t\t);\n\t\tt['throws'](\n\t\t\tfunction () { return new from({}); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` itself is not a constructor, with an argument'\n\t\t);\n\n\t\tforEach(v.primitives.concat(v.objects), function (nonIterator) {\n\t\t\tif (typeof nonIterator !== 'string') {\n\t\t\t\tt['throws'](\n\t\t\t\t\tfunction () { from(nonIterator).next(); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\tdebug(nonIterator) + ' is not an iterable Object'\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tt.test('actual iteration', { skip: !hasSymbols }, function (st) {\n\t\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\t\tvar badIterable = {};\n\t\t\t\tbadIterable[Symbol.iterator] = nonFunction;\n\t\t\t\tst['throws'](\n\t\t\t\t\tfunction () { from(badIterable).next(); },\n\t\t\t\t\tTypeError,\n\t\t\t\t\tdebug(badIterable) + ' is not a function'\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// st['throws'](\n\t\t\t// \tfunction () { return new from([]); }, // eslint-disable-line new-cap\n\t\t\t// \tRangeError,\n\t\t\t// \t'`' + name + '` iterator is not a constructor'\n\t\t\t// );\n\n\t\t\tforEach(v.strings, function (string) {\n\t\t\t\tvar stringIt = from(string);\n\t\t\t\ttestIterator(stringIt, getCodePoints(string), st, 'string iterator: ' + debug(string));\n\t\t\t});\n\n\t\t\tvar arrayIt = from([1, 2, 3]);\n\t\t\tst.equal(typeof arrayIt.next, 'function', 'has a `next` function');\n\n\t\t\tst.test('__proto__ is Iterator.prototype', { skip: !hasProto }, function (s2t) {\n\t\t\t\tvar fakeIterator = {\n\t\t\t\t\t__proto__: iterProto,\n\t\t\t\t\tnext: function () {}\n\t\t\t\t};\n\t\t\t\ts2t.ok(fakeIterator instanceof $Iterator, 'is an instanceof Iterator');\n\t\t\t\ts2t.equal(typeof fakeIterator.next, 'function', 'fake iterator `.next` is a function');\n\t\t\t\ts2t.equal(from(fakeIterator), fakeIterator, 'returns input when it is an instanceof Iterator');\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('real iterators', { skip: !hasSymbols }, function (s2t) {\n\t\t\t\tvar iter = [][Symbol.iterator]();\n\t\t\t\t// eslint-disable-next-line no-proto\n\t\t\t\tvar arrayIterHasIterProto = hasProto && iter.__proto__.__proto__ !== Object.prototype;\n\t\t\t\ts2t.equal(\n\t\t\t\t\tfrom(iter),\n\t\t\t\t\titer,\n\t\t\t\t\t'array iterator becomes itself',\n\t\t\t\t\t{ skip: !arrayIterHasIterProto && 'node 0.12 - 3 do not have Iterator.prototype in the proto chains' }\n\t\t\t\t);\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.test('observability in a replaced String iterator', function (s2t) {\n\t\t\t\tvar originalStringIterator = String.prototype[Symbol.iterator];\n\t\t\t\tvar observedType;\n\t\t\t\ts2t.teardown(mockProperty(String.prototype, Symbol.iterator, {\n\t\t\t\t\tget: function () {\n\t\t\t\t\t\t'use strict'; // eslint-disable-line strict, lines-around-directive\n\n\t\t\t\t\t\tobservedType = typeof this;\n\t\t\t\t\t\treturn originalStringIterator;\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\tfrom('');\n\t\t\t\ts2t.equal(observedType, 'string', 'string primitive -> primitive receiver in Symbol.iterator getter');\n\t\t\t\tfrom(Object(''));\n\t\t\t\ts2t.equal(observedType, 'object', 'boxed string -> boxed string in Symbol.iterator getter');\n\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator.from: index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator.from', t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.from: implementation', function (t) {\n\t\t\tmodule.exports.tests(impl, 'Iterator.from', t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.from: shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.from.name, 'from', 'Iterator.from has name \"from\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator, 'from'), 'Iterator.from is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tmodule.exports.tests(callBind(Iterator.from, Iterator), 'Iterator.from', t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}