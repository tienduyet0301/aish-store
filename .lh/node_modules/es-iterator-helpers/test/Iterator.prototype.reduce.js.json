{
    "sourceFile": "node_modules/es-iterator-helpers/test/Iterator.prototype.reduce.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892198412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar defineProperties = require('define-properties');\nvar test = require('tape');\nvar callBind = require('call-bind');\nvar functionsHaveNames = require('functions-have-names')();\nvar hasStrictMode = require('has-strict-mode')();\nvar forEach = require('for-each');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\nvar hasSymbols = require('has-symbols/shams')();\nvar iterate = require('iterate-iterator');\n\nvar index = require('../Iterator.prototype.reduce');\nvar impl = require('../Iterator.prototype.reduce/implementation');\n\nvar fnName = 'reduce';\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\n\nvar testIterator = require('./helpers/testIterator');\n\nmodule.exports = {\n\ttests: function (reduce, name, t) {\n\t\tt['throws'](\n\t\t\tfunction () { return new reduce(); }, // eslint-disable-line new-cap\n\t\t\tTypeError,\n\t\t\t'`' + name + '` is not a constructor'\n\t\t);\n\n\t\tforEach(v.primitives.concat(v.objects), function (nonIterator) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(reduce(nonIterator, function () {})); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonIterator) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\n\t\t\tvar badNext = { next: nonIterator };\n\t\t\tt['throws'](\n\t\t\t\tfunction () { iterate(reduce(badNext, function () {})); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(badNext) + ' is not an Object with a callable `next` method'\n\t\t\t);\n\t\t});\n\n\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\tt['throws'](\n\t\t\t\tfunction () { reduce({ next: function () {} }, nonFunction); },\n\t\t\t\tTypeError,\n\t\t\t\tdebug(nonFunction) + ' is not a function'\n\t\t\t);\n\t\t});\n\n\t\tt.test('actual iteration', { skip: !hasSymbols }, function (st) {\n\t\t\tvar arr = [1, 2, 3];\n\t\t\tvar iterator = callBind(arr[Symbol.iterator], arr);\n\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new reduce(iterator()); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\t\t\tst['throws'](\n\t\t\t\tfunction () { return new reduce(iterator(), function () {}); }, // eslint-disable-line new-cap\n\t\t\t\tTypeError,\n\t\t\t\t'`' + name + '` iterator is not a constructor'\n\t\t\t);\n\n\t\t\ttestIterator(iterator(), [1, 2, 3], st, 'original');\n\n\t\t\tvar results = [];\n\t\t\tvar ret = reduce(\n\t\t\t\titerator(),\n\t\t\t\tfunction (acc, x, i) {\n\t\t\t\t\t// eslint-disable-next-line no-invalid-this\n\t\t\t\t\tresults.push({ acc: acc, value: x, count: i, 'this': this, args: arguments.length });\n\t\t\t\t\treturn acc + x;\n\t\t\t\t}\n\t\t\t);\n\t\t\tst.equal(ret, 6, 'returns sum of all numbers');\n\t\t\tst.deepEqual(\n\t\t\t\tresults,\n\t\t\t\t[\n\t\t\t\t\t{ acc: 1, value: 2, count: 1, 'this': undefined, args: 3 },\n\t\t\t\t\t{ acc: 3, value: 3, count: 2, 'this': undefined, args: 3 }\n\t\t\t\t],\n\t\t\t\t'reduce callback receives the expected values without initialValue'\n\t\t\t);\n\n\t\t\tvar results2 = [];\n\t\t\tvar ret2 = reduce(\n\t\t\t\titerator(),\n\t\t\t\tfunction (acc, x, i) {\n\t\t\t\t\t// eslint-disable-next-line no-invalid-this\n\t\t\t\t\tresults2.push({ acc: acc, value: x, count: i, 'this': this, args: arguments.length });\n\t\t\t\t\treturn acc + x;\n\t\t\t\t},\n\t\t\t\t10\n\t\t\t);\n\t\t\tst.equal(ret2, 16, 'returns sum of all numbers plus initialValue');\n\t\t\tst.deepEqual(\n\t\t\t\tresults2,\n\t\t\t\t[\n\t\t\t\t\t{ acc: 10, value: 1, count: 0, 'this': undefined, args: 3 },\n\t\t\t\t\t{ acc: 11, value: 2, count: 1, 'this': undefined, args: 3 },\n\t\t\t\t\t{ acc: 13, value: 3, count: 2, 'this': undefined, args: 3 }\n\t\t\t\t],\n\t\t\t\t'reduce callback receives the expected values with initialValue'\n\t\t\t);\n\n\t\t\tst.end();\n\t\t});\n\t},\n\tindex: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': index', function (t) {\n\t\t\tmodule.exports.tests(index, 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\timplementation: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': implementation', function (t) {\n\t\t\tmodule.exports.tests(callBind(impl), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t},\n\tshimmed: function () {\n\t\ttest('Iterator.prototype.' + fnName + ': shimmed', function (t) {\n\t\t\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\t\t\tst.equal(Iterator.prototype[fnName].name, fnName, 'Iterator#' + fnName + ' has name \"' + fnName + '\"');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\t\tet.equal(false, isEnumerable.call(Iterator.prototype, fnName), 'Iterator#' + fnName + ' is not enumerable');\n\t\t\t\tet.end();\n\t\t\t});\n\n\t\t\tt.test('bad string/this value', { skip: !hasStrictMode }, function (st) {\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(undefined, 'a'); }, TypeError, 'undefined is not an object');\n\t\t\t\tst['throws'](function () { return Iterator.prototype[fnName].call(null, 'a'); }, TypeError, 'null is not an object');\n\t\t\t\tst.end();\n\t\t\t});\n\n\t\t\tmodule.exports.tests(callBind(Iterator.prototype[fnName]), 'Iterator.prototype.' + fnName, t);\n\n\t\t\tt.end();\n\t\t});\n\t}\n};\n"
        }
    ]
}