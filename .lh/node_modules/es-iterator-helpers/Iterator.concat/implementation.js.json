{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.concat/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892193456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar AdvanceStringIndex = require('es-abstract/2024/AdvanceStringIndex');\nvar Call = require('es-abstract/2024/Call');\nvar CompletionRecord = require('es-abstract/2024/CompletionRecord');\nvar CreateIteratorFromClosure = require('../aos/CreateIteratorFromClosure');\nvar GetIteratorDirect = require('../aos/GetIteratorDirect');\nvar GetMethod = require('es-abstract/2024/GetMethod');\nvar IsArray = require('es-abstract/2024/IsArray');\nvar IteratorCloseAll = require('../aos/IteratorCloseAll');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar Type = require('es-abstract/2024/Type');\n\nvar forEach = require('es-abstract/helpers/forEach');\nvar getIteratorMethod = require('es-abstract/helpers/getIteratorMethod');\n\nvar iterHelperProto = require('../IteratorHelperPrototype');\n\nvar SLOT = require('internal-slot');\n\nmodule.exports = function concat() {\n\tif (this instanceof concat) {\n\t\tthrow new $TypeError('`Iterator.concat` is not a constructor');\n\t}\n\n\tvar iterables = []; // step 1\n\n\tforEach(arguments, function (item) { // step 2\n\t\tif (Type(item) !== 'Object') {\n\t\t\tthrow new $TypeError('`Iterator.concat` requires all arguments to be objects'); // step 2.1\n\t\t}\n\t\t// var method = GetMethod(item, Symbol.iterator); // step 2.2\n\t\tvar method = getIteratorMethod(\n\t\t\t{\n\t\t\t\tAdvanceStringIndex: AdvanceStringIndex,\n\t\t\t\tGetMethod: GetMethod,\n\t\t\t\tIsArray: IsArray\n\t\t\t},\n\t\t\titem\n\t\t);\n\t\tif (typeof method === 'undefined') {\n\t\t\tthrow new $TypeError('`Iterator.concat` requires all arguments to be iterable'); // step 2.3\n\t\t}\n\t\titerables[iterables.length] = { '[[OpenMethod]]': method, '[[Iterable]]': item }; // step 2.4\n\t});\n\n\tvar sentinel = {};\n\tvar iterablesIndex = 0;\n\tvar iteratorRecord;\n\tvar innerAlive = false;\n\tvar closure = function () { // step 3\n\t\tif (iterablesIndex >= iterables.length) {\n\t\t\treturn sentinel;\n\t\t}\n\t\tvar iterable = iterables[iterablesIndex]; // step 3.a\n\t\tif (!innerAlive) {\n\t\t\tvar iter = Call(iterable['[[OpenMethod]]'], iterable['[[Iterable]]']); // step 3.a.i\n\t\t\tif (Type(iter) !== 'Object') {\n\t\t\t\tthrow new $TypeError('`Iterator.concat` iterator method did not return an object'); // step 3.a.ii\n\t\t\t}\n\t\t\titeratorRecord = GetIteratorDirect(iter); // step 3.a.iii\n\t\t\tinnerAlive = true; // step 3.a.iv\n\t\t}\n\n\t\tif (innerAlive) { // step 3.a.v\n\t\t\tvar innerValue = IteratorStepValue(iteratorRecord); // step 3.a.v.1\n\t\t\tif (iteratorRecord['[[Done]]']) { // step 3.a.v.2\n\t\t\t\tinnerAlive = false; // step 3.a.v.2.a\n\t\t\t} else { // step 3.a.v.3\n\t\t\t\t// 1. Let completion be Completion(Yield(innerValue)).\n\t\t\t\treturn innerValue; // step 3.a.v.3.a\n\t\t\t}\n\t\t}\n\n\t\titerablesIndex += 1;\n\t\treturn closure();\n\t};\n\n\tvar closeIfAbrupt = function (abruptCompletion) {\n\t\tif (!(abruptCompletion instanceof CompletionRecord)) {\n\t\t\tthrow new $TypeError('`abruptCompletion` must be a Completion Record');\n\t\t}\n\t\titerablesIndex = iterables.length;\n\t\tinnerAlive = false;\n\t\tif (iteratorRecord) {\n\t\t\tIteratorCloseAll(\n\t\t\t\t[iteratorRecord],\n\t\t\t\tabruptCompletion\n\t\t\t);\n\t\t}\n\t};\n\n\tSLOT.set(closure, '[[Sentinel]]', sentinel); // for the userland implementation\n\tSLOT.set(closure, '[[CloseIfAbrupt]]', closeIfAbrupt); // for the userland implementation\n\n\tvar gen = CreateIteratorFromClosure(closure, 'Iterator Helper', iterHelperProto, ['[[UnderlyingIterators]]']); // step 5\n\tSLOT.set(gen, '[[UnderlyingIterators]]', []); // step 6\n\treturn gen; // step 7\n};\n"
        }
    ]
}