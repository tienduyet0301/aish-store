{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.prototype.filter/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892194710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('es-abstract/2024/Call');\nvar CompletionRecord = require('es-abstract/2024/CompletionRecord');\nvar CreateIteratorFromClosure = require('../aos/CreateIteratorFromClosure');\nvar GetIteratorDirect = require('../aos/GetIteratorDirect');\nvar IsCallable = require('es-abstract/2024/IsCallable');\nvar IteratorClose = require('es-abstract/2024/IteratorClose');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar ThrowCompletion = require('es-abstract/2024/ThrowCompletion');\nvar ToBoolean = require('es-abstract/2024/ToBoolean');\nvar Type = require('es-abstract/2024/Type');\n\nvar iterHelperProto = require('../IteratorHelperPrototype');\n\nvar SLOT = require('internal-slot');\n\nmodule.exports = function filter(predicate) {\n\tif (this instanceof filter) {\n\t\tthrow new $TypeError('`filter` is not a constructor');\n\t}\n\n\tvar O = this; // step 1\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('`this` value must be an Object'); // step 2\n\t}\n\n\tif (!IsCallable(predicate)) {\n\t\tthrow new $TypeError('`predicate` must be a function'); // step 3\n\t}\n\n\tvar iterated = GetIteratorDirect(O); // step 4\n\n\tvar closeIfAbrupt = function (abruptCompletion) {\n\t\tif (!(abruptCompletion instanceof CompletionRecord)) {\n\t\t\tthrow new $TypeError('`abruptCompletion` must be a Completion Record');\n\t\t}\n\t\tIteratorClose(\n\t\t\titerated,\n\t\t\tabruptCompletion\n\t\t);\n\t};\n\n\tvar sentinel = {};\n\tvar counter = 0; // step 6.a\n\tvar closure = function () {\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) { // step 6.b\n\t\t\tvar value = IteratorStepValue(iterated); // step 6.b.i\n\t\t\tif (iterated['[[Done]]']) {\n\t\t\t\treturn sentinel; // step 6.b.ii\n\t\t\t}\n\n\t\t\tvar selected;\n\t\t\ttry {\n\t\t\t\tselected = Call(predicate, void undefined, [value, counter]); // step 6.b.iv\n\t\t\t\t// yield mapped // step 6.b.vi\n\t\t\t\tif (ToBoolean(selected)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// close iterator // step 6.b.v, 6.b.vii\n\t\t\t\tcloseIfAbrupt(ThrowCompletion(e));\n\t\t\t\tthrow e;\n\t\t\t} finally {\n\t\t\t\tcounter += 1; // step 6.b.viii\n\t\t\t}\n\t\t}\n\t};\n\tSLOT.set(closure, '[[Sentinel]]', sentinel); // for the userland implementation\n\tSLOT.set(closure, '[[CloseIfAbrupt]]', closeIfAbrupt); // for the userland implementation\n\n\tvar result = CreateIteratorFromClosure(closure, 'Iterator Helper', iterHelperProto, ['[[UnderlyingIterators]]']); // step 7\n\n\tSLOT.set(result, '[[UnderlyingIterators]]', [iterated]); // step 8\n\n\treturn result; // step 9\n};\n"
        }
    ]
}