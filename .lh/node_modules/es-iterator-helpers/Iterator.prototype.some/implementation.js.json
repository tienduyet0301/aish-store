{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.prototype.some/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892196019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('es-abstract/2024/Call');\nvar GetIteratorDirect = require('../aos/GetIteratorDirect');\nvar IsCallable = require('es-abstract/2024/IsCallable');\nvar IteratorClose = require('es-abstract/2024/IteratorClose');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar NormalCompletion = require('es-abstract/2024/NormalCompletion');\nvar ThrowCompletion = require('es-abstract/2024/ThrowCompletion');\nvar ToBoolean = require('es-abstract/2024/ToBoolean');\nvar Type = require('es-abstract/2024/Type');\n\nmodule.exports = function some(predicate) {\n\tif (this instanceof some) {\n\t\tthrow new $TypeError('`some` is not a constructor');\n\t}\n\n\tvar O = this; // step 1\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('`this` value must be an Object'); // step 2\n\t}\n\n\tif (!IsCallable(predicate)) {\n\t\tthrow new $TypeError('`predicate` must be a function'); // step 3\n\t}\n\n\tvar iterated = GetIteratorDirect(O); // step 4\n\n\tvar counter = 0; // step 5\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) { // step 6\n\t\tvar value = IteratorStepValue(iterated); // step 6.a\n\t\tif (iterated['[[Done]]']) {\n\t\t\treturn false; // step 6.b\n\t\t}\n\t\tvar result;\n\t\ttry {\n\t\t\tresult = Call(predicate, void undefined, [value, counter]); // step 6.c\n\t\t} catch (e) {\n\t\t\t// close iterator // step 6.d\n\t\t\tIteratorClose(\n\t\t\t\titerated,\n\t\t\t\tThrowCompletion(e)\n\t\t\t);\n\t\t} finally {\n\t\t\tcounter += 1; // step 6.f\n\t\t}\n\t\tif (ToBoolean(result)) {\n\t\t\treturn IteratorClose(\n\t\t\t\titerated,\n\t\t\t\tNormalCompletion(true)\n\t\t\t); // step 6.e\n\t\t}\n\t}\n};\n"
        }
    ]
}