{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.zipKeyed/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892196789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('es-abstract/2024/Call');\nvar CreateDataPropertyOrThrow = require('es-abstract/2024/CreateDataPropertyOrThrow');\nvar Get = require('es-abstract/2024/Get');\nvar GetIteratorFlattenable = require('../aos/GetIteratorFlattenable');\nvar GetOptionsObject = require('../aos/GetOptionsObject');\nvar IfAbruptCloseIterators = require('../aos/IfAbruptCloseIterators');\nvar IsAccessorDescriptor = require('es-abstract/2024/IsAccessorDescriptor');\nvar IsDataDescriptor = require('es-abstract/2024/IsDataDescriptor');\nvar IteratorZip = require('../aos/IteratorZip');\nvar OrdinaryObjectCreate = require('es-abstract/2024/OrdinaryObjectCreate');\nvar ThrowCompletion = require('es-abstract/2024/ThrowCompletion');\nvar ToPropertyDescriptor = require('es-abstract/2024/ToPropertyDescriptor');\nvar Type = require('es-abstract/2024/Type');\n\nvar forEach = require('es-abstract/helpers/forEach');\nvar ownKeys = require('es-abstract/helpers/OwnPropertyKeys');\n\nvar gOPD = require('gopd');\n\nmodule.exports = function zipKeyed(iterables) {\n\tif (this instanceof zipKeyed) {\n\t\tthrow new $TypeError('`Iterator.zip` is not a constructor');\n\t}\n\n\tif (Type(iterables) !== 'Object') {\n\t\tthrow new $TypeError('`iterables` must be an Object'); // step 1\n\t}\n\n\tvar options = GetOptionsObject(arguments.length > 1 ? arguments[1] : undefined); // step 2\n\n\tvar mode = Get(options, 'mode'); // step 3\n\n\tif (typeof mode === 'undefined') {\n\t\tmode = 'shortest'; // step 4\n\t}\n\n\tif (mode !== 'shortest' && mode !== 'longest' && mode !== 'strict') {\n\t\tthrow new $TypeError('`mode` must be one of \"shortest\", \"longest\", or \"strict\"'); // step 5\n\t}\n\n\tvar paddingOption; // step 6\n\n\tif (mode === 'longest') { // step 7\n\t\tpaddingOption = Get(options, 'padding'); // step 7.a\n\t\tif (typeof paddingOption !== 'undefined' && Type(paddingOption) !== 'Object') {\n\t\t\tthrow new $TypeError('`padding` option must be an Object'); // step 7.b\n\t\t}\n\t}\n\n\tvar iters = []; // step 8\n\n\tvar padding = []; // step 9\n\n\tvar allKeys = ownKeys(iterables); // step 10\n\n\tvar keys = []; // step 11\n\n\tforEach(allKeys, function (key) { // step 12\n\t\tvar desc;\n\t\ttry {\n\t\t\tdesc = ToPropertyDescriptor(gOPD(iterables, key)); // step 12.a\n\t\t} catch (e) {\n\t\t\tIfAbruptCloseIterators(ThrowCompletion(e), iters); // step 12.b\n\t\t}\n\n\t\tif (typeof desc !== 'undefined' && desc['[[Enumerable]]'] === true) { // step 12.c\n\t\t\tvar value; // step 12.c.i\n\t\t\tif (IsDataDescriptor(desc)) { // step 12.c.ii\n\t\t\t\tvalue = desc['[[Value]]']; // step 12.c.ii.1\n\t\t\t} else {\n\t\t\t\tif (!IsAccessorDescriptor(desc)) {\n\t\t\t\t\tthrow new $TypeError('Assertion failed: IsAccessorDescriptor(desc) is not true'); // step 12.c.ii.1\n\t\t\t\t}\n\t\t\t\tvar getter = desc['[[Get]]']; // step 12.c.iii.2\n\t\t\t\tif (typeof getter !== 'undefined') { // step 12.c.iii.3\n\t\t\t\t\tvar getterResult;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tgetterResult = Call(getter, iterables); // step 12.c.iii.3.a\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// step 12.c.iii.3.b\n\t\t\t\t\t\t// 2. IfAbruptCloseIterators(e, iters).\n\t\t\t\t\t}\n\t\t\t\t\tvalue = getterResult; // step 12.c.iii.3.c\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (typeof value !== 'undefined') { // step 12.c.iv\n\t\t\t\tkeys[keys.length] = key; // step 12.c.iv.1\n\t\t\t\tvar iter;\n\t\t\t\ttry {\n\t\t\t\t\titer = GetIteratorFlattenable(value, 'REJECT-STRINGS'); // step 12.c.iv.2\n\t\t\t\t} catch (e) {\n\t\t\t\t\tIfAbruptCloseIterators(ThrowCompletion(e), iters); // step 12.c.iv.3\n\t\t\t\t}\n\t\t\t\titers[iters.length] = iter; // step 12.c.iv.4\n\t\t\t}\n\t\t}\n\t});\n\n\tvar iterCount = iters.length; // step 13\n\n\tif (mode === 'longest') { // step 14\n\t\tif (typeof paddingOption === 'undefined') { // step 14.a\n\t\t\tfor (var j = 0; j < iterCount; j += 1) { // step 14.a.i\n\t\t\t\tpadding[padding.length] = void undefined; // step 14.a.i.1\n\t\t\t}\n\t\t} else { // step 14.b\n\t\t\tforEach(keys, function (key) { // step 14.b.i\n\t\t\t\tvar value;\n\t\t\t\ttry {\n\t\t\t\t\tvalue = Get(paddingOption, key); // step 14.b.i.1\n\t\t\t\t} catch (e) {\n\t\t\t\t\tIfAbruptCloseIterators(ThrowCompletion(e), iters); // step 14.b.i.2\n\t\t\t\t}\n\t\t\t\tpadding[padding.length] = value; // step 14.b.i.3\n\t\t\t});\n\t\t}\n\t}\n\n\t// eslint-disable-next-line no-sequences\n\tvar finishResults = (0, function (results) { // step 15\n\t\tvar obj = OrdinaryObjectCreate(null); // step 15.a\n\t\tfor (var i = 0; i < iterCount; i += 1) { // step 15.b\n\t\t\tCreateDataPropertyOrThrow(obj, keys[i], results[i]); // step 15.b.i\n\t\t}\n\t\treturn obj; // step 15.c\n\t});\n\n\treturn IteratorZip(iters, mode, padding, finishResults); // step 16\n};\n"
        }
    ]
}