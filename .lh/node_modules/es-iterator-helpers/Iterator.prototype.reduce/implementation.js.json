{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.prototype.reduce/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892195744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('es-abstract/2024/Call');\nvar GetIteratorDirect = require('../aos/GetIteratorDirect');\nvar IsCallable = require('es-abstract/2024/IsCallable');\nvar IteratorClose = require('es-abstract/2024/IteratorClose');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar ThrowCompletion = require('es-abstract/2024/ThrowCompletion');\nvar Type = require('es-abstract/2024/Type');\n\nmodule.exports = function reduce(reducer) {\n\tif (this instanceof reduce) {\n\t\tthrow new $TypeError('`reduce` is not a constructor');\n\t}\n\n\tvar O = this; // step 1\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('`this` value must be an Object'); // step 2\n\t}\n\n\tif (!IsCallable(reducer)) {\n\t\tthrow new $TypeError('`reducer` must be a function'); // step 3\n\t}\n\n\tvar iterated = GetIteratorDirect(O); // step 4\n\n\tvar accumulator;\n\tvar counter;\n\tif (arguments.length < 2) { // step 6\n\t\taccumulator = IteratorStepValue(iterated); // step 6.a\n\t\tif (iterated['[[Done]]']) {\n\t\t\tthrow new $TypeError('Reduce of empty iterator with no initial value');\n\t\t}\n\t\tcounter = 1;\n\t} else { // step 7\n\t\taccumulator = arguments[1]; // step 7.a\n\t\tcounter = 0;\n\t}\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) { // step 8\n\t\tvar value = IteratorStepValue(iterated); // step 8.a\n\t\tif (iterated['[[Done]]']) {\n\t\t\treturn accumulator; // step 8.b\n\t\t}\n\t\ttry {\n\t\t\tvar result = Call(reducer, void undefined, [accumulator, value, counter]); // step 8.d\n\t\t\taccumulator = result; // step 8.f\n\t\t} catch (e) {\n\t\t\t// close iterator // step 8.e\n\t\t\tIteratorClose(\n\t\t\t\titerated,\n\t\t\t\tThrowCompletion(e)\n\t\t\t);\n\t\t}\n\t\tcounter += 1; // step 8.g\n\t}\n};\n"
        }
    ]
}