{
    "sourceFile": "node_modules/es-iterator-helpers/Iterator.prototype.drop/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892194326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\n\nvar CompletionRecord = require('es-abstract/2024/CompletionRecord');\nvar CreateIteratorFromClosure = require('../aos/CreateIteratorFromClosure');\nvar GetIteratorDirect = require('../aos/GetIteratorDirect');\nvar IteratorClose = require('es-abstract/2024/IteratorClose');\nvar IteratorStep = require('es-abstract/2024/IteratorStep');\nvar IteratorStepValue = require('es-abstract/2024/IteratorStepValue');\nvar ThrowCompletion = require('es-abstract/2024/ThrowCompletion');\nvar ToIntegerOrInfinity = require('es-abstract/2024/ToIntegerOrInfinity');\nvar ToNumber = require('es-abstract/2024/ToNumber');\nvar Type = require('es-abstract/2024/Type');\n\nvar iterHelperProto = require('../IteratorHelperPrototype');\n\nvar isNaN = require('es-abstract/helpers/isNaN');\n\nvar SLOT = require('internal-slot');\n\nmodule.exports = function drop(limit) {\n\tif (this instanceof drop) {\n\t\tthrow new $TypeError('`drop` is not a constructor');\n\t}\n\n\tvar O = this; // step 1\n\tif (Type(O) !== 'Object') {\n\t\tthrow new $TypeError('`this` value must be an Object'); // step 2\n\t}\n\n\tvar numLimit = ToNumber(limit); // step 2\n\tif (isNaN(numLimit)) {\n\t\tthrow new $RangeError('`limit` must be a non-NaN number'); // step 3\n\t}\n\n\tvar iterated = GetIteratorDirect(O); // step 4\n\n\tvar integerLimit = ToIntegerOrInfinity(numLimit); // step 4\n\tif (integerLimit < 0) {\n\t\tthrow new $RangeError('`limit` must be a >= 0'); // step 5\n\t}\n\n\tvar closeIfAbrupt = function (abruptCompletion) {\n\t\tif (!(abruptCompletion instanceof CompletionRecord)) {\n\t\t\tthrow new $TypeError('`abruptCompletion` must be a Completion Record');\n\t\t}\n\t\tIteratorClose(\n\t\t\titerated,\n\t\t\tabruptCompletion\n\t\t);\n\t};\n\n\tvar sentinel = {};\n\tvar remaining = integerLimit; // step 6.a\n\tvar closure = function () { // step 6\n\t\tvar next;\n\t\twhile (remaining > 0) { // step 6.b\n\t\t\tif (remaining !== Infinity) { // step 6.b.i\n\t\t\t\tremaining -= 1; // step 6.b.i.1\n\t\t\t}\n\n\t\t\tnext = IteratorStep(iterated); // step 6.b.ii\n\t\t\tif (!next) {\n\t\t\t\t// return void undefined; // step 6.b.iii\n\t\t\t\treturn sentinel;\n\t\t\t}\n\t\t}\n\t\t// while (true) { // step 6.c\n\t\ttry {\n\t\t\tvar value = IteratorStepValue(iterated); // step 6.b.i\n\t\t\tif (iterated['[[Done]]']) {\n\t\t\t\treturn sentinel; // step 6.b.ii\n\t\t\t}\n\t\t\treturn value;\n\t\t} catch (e) {\n\t\t\t// close iterator // step 6.c.icv\n\t\t\tcloseIfAbrupt(ThrowCompletion(e));\n\t\t\tthrow e;\n\t\t}\n\t\t// }\n\t\t// return void undefined;\n\t};\n\tSLOT.set(closure, '[[Sentinel]]', sentinel); // for the userland implementation\n\tSLOT.set(closure, '[[CloseIfAbrupt]]', closeIfAbrupt); // for the userland implementation\n\n\tvar result = CreateIteratorFromClosure(closure, 'Iterator Helper', iterHelperProto, ['[[UnderlyingIterators]]']); // step 4\n\n\tSLOT.set(result, '[[UnderlyingIterators]]', [iterated]); // step 5\n\n\treturn result; // step 6\n};\n"
        }
    ]
}