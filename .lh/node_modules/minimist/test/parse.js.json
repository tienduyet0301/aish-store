{
    "sourceFile": "node_modules/minimist/test/parse.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892612472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar parse = require('../');\nvar test = require('tape');\n\ntest('parse args', function (t) {\n\tt.deepEqual(\n\t\tparse(['--no-moo']),\n\t\t{ moo: false, _: [] },\n\t\t'no'\n\t);\n\tt.deepEqual(\n\t\tparse(['-v', 'a', '-v', 'b', '-v', 'c']),\n\t\t{ v: ['a', 'b', 'c'], _: [] },\n\t\t'multi'\n\t);\n\tt.end();\n});\n\ntest('comprehensive', function (t) {\n\tt.deepEqual(\n\t\tparse([\n\t\t\t'--name=meowmers', 'bare', '-cats', 'woo',\n\t\t\t'-h', 'awesome', '--multi=quux',\n\t\t\t'--key', 'value',\n\t\t\t'-b', '--bool', '--no-meep', '--multi=baz',\n\t\t\t'--', '--not-a-flag', 'eek',\n\t\t]),\n\t\t{\n\t\t\tc: true,\n\t\t\ta: true,\n\t\t\tt: true,\n\t\t\ts: 'woo',\n\t\t\th: 'awesome',\n\t\t\tb: true,\n\t\t\tbool: true,\n\t\t\tkey: 'value',\n\t\t\tmulti: ['quux', 'baz'],\n\t\t\tmeep: false,\n\t\t\tname: 'meowmers',\n\t\t\t_: ['bare', '--not-a-flag', 'eek'],\n\t\t}\n\t);\n\tt.end();\n});\n\ntest('flag boolean', function (t) {\n\tvar argv = parse(['-t', 'moo'], { boolean: 't' });\n\tt.deepEqual(argv, { t: true, _: ['moo'] });\n\tt.deepEqual(typeof argv.t, 'boolean');\n\tt.end();\n});\n\ntest('flag boolean value', function (t) {\n\tvar argv = parse(['--verbose', 'false', 'moo', '-t', 'true'], {\n\t\tboolean: ['t', 'verbose'],\n\t\tdefault: { verbose: true },\n\t});\n\n\tt.deepEqual(argv, {\n\t\tverbose: false,\n\t\tt: true,\n\t\t_: ['moo'],\n\t});\n\n\tt.deepEqual(typeof argv.verbose, 'boolean');\n\tt.deepEqual(typeof argv.t, 'boolean');\n\tt.end();\n});\n\ntest('newlines in params', function (t) {\n\tvar args = parse(['-s', 'X\\nX']);\n\tt.deepEqual(args, { _: [], s: 'X\\nX' });\n\n\t// reproduce in bash:\n\t// VALUE=\"new\n\t// line\"\n\t// node program.js --s=\"$VALUE\"\n\targs = parse(['--s=X\\nX']);\n\tt.deepEqual(args, { _: [], s: 'X\\nX' });\n\tt.end();\n});\n\ntest('strings', function (t) {\n\tvar s = parse(['-s', '0001234'], { string: 's' }).s;\n\tt.equal(s, '0001234');\n\tt.equal(typeof s, 'string');\n\n\tvar x = parse(['-x', '56'], { string: 'x' }).x;\n\tt.equal(x, '56');\n\tt.equal(typeof x, 'string');\n\tt.end();\n});\n\ntest('stringArgs', function (t) {\n\tvar s = parse(['  ', '  '], { string: '_' })._;\n\tt.same(s.length, 2);\n\tt.same(typeof s[0], 'string');\n\tt.same(s[0], '  ');\n\tt.same(typeof s[1], 'string');\n\tt.same(s[1], '  ');\n\tt.end();\n});\n\ntest('empty strings', function (t) {\n\tvar s = parse(['-s'], { string: 's' }).s;\n\tt.equal(s, '');\n\tt.equal(typeof s, 'string');\n\n\tvar str = parse(['--str'], { string: 'str' }).str;\n\tt.equal(str, '');\n\tt.equal(typeof str, 'string');\n\n\tvar letters = parse(['-art'], {\n\t\tstring: ['a', 't'],\n\t});\n\n\tt.equal(letters.a, '');\n\tt.equal(letters.r, true);\n\tt.equal(letters.t, '');\n\n\tt.end();\n});\n\ntest('string and alias', function (t) {\n\tvar x = parse(['--str', '000123'], {\n\t\tstring: 's',\n\t\talias: { s: 'str' },\n\t});\n\n\tt.equal(x.str, '000123');\n\tt.equal(typeof x.str, 'string');\n\tt.equal(x.s, '000123');\n\tt.equal(typeof x.s, 'string');\n\n\tvar y = parse(['-s', '000123'], {\n\t\tstring: 'str',\n\t\talias: { str: 's' },\n\t});\n\n\tt.equal(y.str, '000123');\n\tt.equal(typeof y.str, 'string');\n\tt.equal(y.s, '000123');\n\tt.equal(typeof y.s, 'string');\n\n\tvar z = parse(['-s123'], {\n\t\talias: { str: ['s', 'S'] },\n\t\tstring: ['str'],\n\t});\n\n\tt.deepEqual(\n\t\tz,\n\t\t{ _: [], s: '123', S: '123', str: '123' },\n\t\t'opt.string works with multiple aliases'\n\t);\n\tt.end();\n});\n\ntest('slashBreak', function (t) {\n\tt.same(\n\t\tparse(['-I/foo/bar/baz']),\n\t\t{ I: '/foo/bar/baz', _: [] }\n\t);\n\tt.same(\n\t\tparse(['-xyz/foo/bar/baz']),\n\t\t{ x: true, y: true, z: '/foo/bar/baz', _: [] }\n\t);\n\tt.end();\n});\n\ntest('alias', function (t) {\n\tvar argv = parse(['-f', '11', '--zoom', '55'], {\n\t\talias: { z: 'zoom' },\n\t});\n\tt.equal(argv.zoom, 55);\n\tt.equal(argv.z, argv.zoom);\n\tt.equal(argv.f, 11);\n\tt.end();\n});\n\ntest('multiAlias', function (t) {\n\tvar argv = parse(['-f', '11', '--zoom', '55'], {\n\t\talias: { z: ['zm', 'zoom'] },\n\t});\n\tt.equal(argv.zoom, 55);\n\tt.equal(argv.z, argv.zoom);\n\tt.equal(argv.z, argv.zm);\n\tt.equal(argv.f, 11);\n\tt.end();\n});\n\ntest('nested dotted objects', function (t) {\n\tvar argv = parse([\n\t\t'--foo.bar', '3', '--foo.baz', '4',\n\t\t'--foo.quux.quibble', '5', '--foo.quux.o_O',\n\t\t'--beep.boop',\n\t]);\n\n\tt.same(argv.foo, {\n\t\tbar: 3,\n\t\tbaz: 4,\n\t\tquux: {\n\t\t\tquibble: 5,\n\t\t\to_O: true,\n\t\t},\n\t});\n\tt.same(argv.beep, { boop: true });\n\tt.end();\n});\n"
        }
    ]
}