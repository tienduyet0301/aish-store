{
    "sourceFile": "node_modules/minimist/test/bool.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892611999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar parse = require('../');\nvar test = require('tape');\n\ntest('flag boolean default false', function (t) {\n\tvar argv = parse(['moo'], {\n\t\tboolean: ['t', 'verbose'],\n\t\tdefault: { verbose: false, t: false },\n\t});\n\n\tt.deepEqual(argv, {\n\t\tverbose: false,\n\t\tt: false,\n\t\t_: ['moo'],\n\t});\n\n\tt.deepEqual(typeof argv.verbose, 'boolean');\n\tt.deepEqual(typeof argv.t, 'boolean');\n\tt.end();\n\n});\n\ntest('boolean groups', function (t) {\n\tvar argv = parse(['-x', '-z', 'one', 'two', 'three'], {\n\t\tboolean: ['x', 'y', 'z'],\n\t});\n\n\tt.deepEqual(argv, {\n\t\tx: true,\n\t\ty: false,\n\t\tz: true,\n\t\t_: ['one', 'two', 'three'],\n\t});\n\n\tt.deepEqual(typeof argv.x, 'boolean');\n\tt.deepEqual(typeof argv.y, 'boolean');\n\tt.deepEqual(typeof argv.z, 'boolean');\n\tt.end();\n});\ntest('boolean and alias with chainable api', function (t) {\n\tvar aliased = ['-h', 'derp'];\n\tvar regular = ['--herp', 'derp'];\n\tvar aliasedArgv = parse(aliased, {\n\t\tboolean: 'herp',\n\t\talias: { h: 'herp' },\n\t});\n\tvar propertyArgv = parse(regular, {\n\t\tboolean: 'herp',\n\t\talias: { h: 'herp' },\n\t});\n\tvar expected = {\n\t\therp: true,\n\t\th: true,\n\t\t_: ['derp'],\n\t};\n\n\tt.same(aliasedArgv, expected);\n\tt.same(propertyArgv, expected);\n\tt.end();\n});\n\ntest('boolean and alias with options hash', function (t) {\n\tvar aliased = ['-h', 'derp'];\n\tvar regular = ['--herp', 'derp'];\n\tvar opts = {\n\t\talias: { h: 'herp' },\n\t\tboolean: 'herp',\n\t};\n\tvar aliasedArgv = parse(aliased, opts);\n\tvar propertyArgv = parse(regular, opts);\n\tvar expected = {\n\t\therp: true,\n\t\th: true,\n\t\t_: ['derp'],\n\t};\n\tt.same(aliasedArgv, expected);\n\tt.same(propertyArgv, expected);\n\tt.end();\n});\n\ntest('boolean and alias array with options hash', function (t) {\n\tvar aliased = ['-h', 'derp'];\n\tvar regular = ['--herp', 'derp'];\n\tvar alt = ['--harp', 'derp'];\n\tvar opts = {\n\t\talias: { h: ['herp', 'harp'] },\n\t\tboolean: 'h',\n\t};\n\tvar aliasedArgv = parse(aliased, opts);\n\tvar propertyArgv = parse(regular, opts);\n\tvar altPropertyArgv = parse(alt, opts);\n\tvar expected = {\n\t\tharp: true,\n\t\therp: true,\n\t\th: true,\n\t\t_: ['derp'],\n\t};\n\tt.same(aliasedArgv, expected);\n\tt.same(propertyArgv, expected);\n\tt.same(altPropertyArgv, expected);\n\tt.end();\n});\n\ntest('boolean and alias using explicit true', function (t) {\n\tvar aliased = ['-h', 'true'];\n\tvar regular = ['--herp', 'true'];\n\tvar opts = {\n\t\talias: { h: 'herp' },\n\t\tboolean: 'h',\n\t};\n\tvar aliasedArgv = parse(aliased, opts);\n\tvar propertyArgv = parse(regular, opts);\n\tvar expected = {\n\t\therp: true,\n\t\th: true,\n\t\t_: [],\n\t};\n\n\tt.same(aliasedArgv, expected);\n\tt.same(propertyArgv, expected);\n\tt.end();\n});\n\n// regression, see https://github.com/substack/node-optimist/issues/71\ntest('boolean and --x=true', function (t) {\n\tvar parsed = parse(['--boool', '--other=true'], {\n\t\tboolean: 'boool',\n\t});\n\n\tt.same(parsed.boool, true);\n\tt.same(parsed.other, 'true');\n\n\tparsed = parse(['--boool', '--other=false'], {\n\t\tboolean: 'boool',\n\t});\n\n\tt.same(parsed.boool, true);\n\tt.same(parsed.other, 'false');\n\tt.end();\n});\n\ntest('boolean --boool=true', function (t) {\n\tvar parsed = parse(['--boool=true'], {\n\t\tdefault: {\n\t\t\tboool: false,\n\t\t},\n\t\tboolean: ['boool'],\n\t});\n\n\tt.same(parsed.boool, true);\n\tt.end();\n});\n\ntest('boolean --boool=false', function (t) {\n\tvar parsed = parse(['--boool=false'], {\n\t\tdefault: {\n\t\t\tboool: true,\n\t\t},\n\t\tboolean: ['boool'],\n\t});\n\n\tt.same(parsed.boool, false);\n\tt.end();\n});\n\ntest('boolean using something similar to true', function (t) {\n\tvar opts = { boolean: 'h' };\n\tvar result = parse(['-h', 'true.txt'], opts);\n\tvar expected = {\n\t\th: true,\n\t\t_: ['true.txt'],\n\t};\n\n\tt.same(result, expected);\n\tt.end();\n});\n"
        }
    ]
}