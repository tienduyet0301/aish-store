{
    "sourceFile": "node_modules/@panva/hkdf/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891904935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# hkdf\n\n> HKDF with no dependencies using runtime's native crypto\n\nHKDF is a simple key derivation function defined in [RFC 5869][].\n\n## Documentation\n\nâ–¸ **hkdf**(`digest`, `ikm`, `salt`, `info`, `keylen`): `Promise`<`Uint8Array`\\>\n\nThe given `ikm`, `salt` and `info` are used with the `digest` to derive a key of `keylen` bytes.\n\n### Parameters\n\n| Name | Type | Description |\n| :------ | :------ | :------ |\n| `digest` | ``\"sha256\"`` \\| ``\"sha384\"`` \\| ``\"sha512\"`` \\| ``\"sha1\"`` | The digest algorithm to use. |\n| `ikm` | `Uint8Array` \\| `string` | The input keying material. It must be at least one byte in length. |\n| `salt` | `Uint8Array` \\| `string` | The salt value. Must be provided but can be zero-length. |\n| `info` | `Uint8Array` \\| `string` | Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes. |\n| `keylen` | `number` | The length in bytes of the key to generate. Must be greater than 0 and no more than 255 times the digest size. |\n\n### Returns\n\n`Promise`<`Uint8Array`\\>\n\n### Example\n\n**`example`** ESM import\n```js\nimport hkdf from '@panva/hkdf'\n```\n\n**`example`** CJS import\n```js\nconst { hkdf } = require('@panva/hkdf')\n```\n\n**`example`** Deno import\n```js\nimport hkdf from 'https://deno.land/x/hkdf/index.ts'\n```\n\n**`example`** Usage\n```js\nconst derivedKey = await hkdf(\n  'sha256',\n  'key',\n  'salt',\n  'info',\n  64\n)\n```\n\n## Supported Runtimes\n\nThe supported JavaScript runtimes include ones that\n\n- are reasonably up to date ECMAScript\n- support the utilized Web API globals and standard built-in objects\n- These are\n  - _(This is not an exhaustive list)_\n  - Browsers\n  - Cloudflare Workers\n  - Deno\n  - Electron\n  - Netlify Edge Functions\n  - Next.js Middlewares\n  - Node.js\n  - Vercel Edge Functions\n\n[RFC 5869]: https://www.rfc-editor.org/rfc/rfc5869.html\n"
        }
    ]
}