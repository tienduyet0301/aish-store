{
    "sourceFile": "node_modules/@headlessui/react/dist/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891769179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { JSXElementConstructor, ReactElement, ReactNode } from 'react';\nexport type ReactTag = keyof React.JSX.IntrinsicElements | JSXElementConstructor<any>;\nexport type Expand<T> = T extends infer O ? {\n    [K in keyof O]: O[K];\n} : never;\nexport type PropsOf<TTag extends ReactTag> = TTag extends React.ElementType ? Omit<React.ComponentProps<TTag>, 'ref'> : never;\ntype PropsWeControl = 'as' | 'children' | 'refName' | 'className';\ntype CleanProps<TTag extends ReactTag, TOmittableProps extends PropertyKey = never> = Omit<PropsOf<TTag>, TOmittableProps | PropsWeControl>;\ntype OurProps<TTag extends ReactTag, TSlot> = {\n    as?: TTag;\n    children?: ReactNode | ((bag: TSlot) => ReactElement);\n    refName?: string;\n};\ntype HasProperty<T extends object, K extends PropertyKey> = T extends never ? never : K extends keyof T ? true : never;\ntype ClassNameOverride<TTag extends ReactTag, TSlot = {}> = true extends HasProperty<PropsOf<TTag>, 'className'> ? {\n    className?: PropsOf<TTag>['className'] | ((bag: TSlot) => string);\n} : {};\nexport type Props<TTag extends ReactTag, TSlot = {}, TOmittableProps extends PropertyKey = never, Overrides = {}> = CleanProps<TTag, TOmittableProps | keyof Overrides> & OurProps<TTag, TSlot> & ClassNameOverride<TTag, TSlot> & Overrides;\nexport type EnsureArray<T> = T extends any[] ? T : Expand<T>[];\nexport {};\n"
        }
    ]
}