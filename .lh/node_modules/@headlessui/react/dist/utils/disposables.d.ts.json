{
    "sourceFile": "node_modules/@headlessui/react/dist/utils/disposables.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891769428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export type Disposables = ReturnType<typeof disposables>;\n/**\n * Disposables are a way to manage event handlers and functions like\n * `setTimeout` and `requestAnimationFrame` that need to be cleaned up when they\n * are no longer needed.\n *\n *\n * When you register a disposable function, it is added to a collection of\n * disposables. Each disposable in the collection provides a `dispose` clean up\n * function that can be called when it's no longer needed. There is also a\n * `dispose` function on the collection itself that can be used to clean up all\n * pending disposables in that collection.\n */\nexport declare function disposables(): {\n    addEventListener<TEventName extends keyof WindowEventMap>(element: HTMLElement | Window | Document, name: TEventName, listener: (event: WindowEventMap[TEventName]) => any, options?: boolean | AddEventListenerOptions): () => void;\n    requestAnimationFrame(callback: FrameRequestCallback): () => void;\n    nextFrame(callback: FrameRequestCallback): () => void;\n    setTimeout(callback: (...args: any[]) => void, ms?: number | undefined, ...args: any[]): () => void;\n    microTask(cb: () => void): () => void;\n    style(node: HTMLElement, property: string, value: string): () => void;\n    group(cb: (d: typeof this) => void): () => void;\n    add(cb: () => void): () => void;\n    dispose(): void;\n};\n"
        }
    ]
}