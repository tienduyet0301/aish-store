{
    "sourceFile": "node_modules/@headlessui/react/dist/components/label/label.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891763744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type ElementType, type ReactNode, type Ref } from 'react';\nimport type { Props } from '../../types.js';\nimport { type HasDisplayName, type RefProp } from '../../utils/render.js';\ninterface SharedData {\n    slot?: {};\n    name?: string;\n    props?: Record<string, any>;\n}\nexport declare function useLabelContext(): {\n    value: string | undefined;\n    register(value: string): () => void;\n} & SharedData;\nexport declare function useLabelledBy(alwaysAvailableIds?: (string | undefined | null)[]): string | undefined;\ninterface LabelProviderProps extends SharedData {\n    children: ReactNode;\n    value?: string | undefined;\n}\nexport declare function useLabels({ inherit }?: {\n    inherit?: boolean | undefined;\n}): [\n    string | undefined,\n    (props: LabelProviderProps & {\n        inherit?: boolean;\n    }) => React.JSX.Element\n];\ndeclare let DEFAULT_LABEL_TAG: \"label\";\nexport type LabelProps<TTag extends ElementType = typeof DEFAULT_LABEL_TAG> = Props<TTag> & {\n    passive?: boolean;\n    htmlFor?: string;\n};\ndeclare function LabelFn<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(props: LabelProps<TTag>, ref: Ref<HTMLLabelElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\nexport interface _internal_ComponentLabel extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(props: LabelProps<TTag> & RefProp<typeof LabelFn>): React.JSX.Element;\n}\nexport declare let Label: _internal_ComponentLabel;\nexport {};\n"
        }
    ]
}