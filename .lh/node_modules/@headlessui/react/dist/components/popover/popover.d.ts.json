{
    "sourceFile": "node_modules/@headlessui/react/dist/components/popover/popover.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891764676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type ElementType, type MouseEventHandler, type MutableRefObject, type Ref } from 'react';\nimport { type AnchorProps } from '../../internal/floating.js';\nimport type { Props } from '../../types.js';\nimport { type HasDisplayName, type PropsForFeatures, type RefProp } from '../../utils/render.js';\ntype MouseEvent<T> = Parameters<MouseEventHandler<T>>[0];\ndeclare let DEFAULT_POPOVER_TAG: \"div\";\ntype PopoverRenderPropArg = {\n    open: boolean;\n    close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null> | MouseEvent<HTMLElement>) => void;\n};\ntype PopoverPropsWeControl = never;\nexport type PopoverProps<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG> = Props<TTag, PopoverRenderPropArg, PopoverPropsWeControl, {\n    __demoMode?: boolean;\n}>;\ndeclare function PopoverFn<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(props: PopoverProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_BUTTON_TAG: \"button\";\ntype ButtonRenderPropArg = {\n    open: boolean;\n    active: boolean;\n    hover: boolean;\n    focus: boolean;\n    disabled: boolean;\n    autofocus: boolean;\n};\ntype ButtonPropsWeControl = 'aria-controls' | 'aria-expanded';\nexport type PopoverButtonProps<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG> = Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl, {\n    disabled?: boolean;\n    autoFocus?: boolean;\n}>;\ndeclare function ButtonFn<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: PopoverButtonProps<TTag>, ref: Ref<HTMLButtonElement>): React.JSX.Element;\ndeclare let DEFAULT_BACKDROP_TAG: \"div\";\ntype BackdropRenderPropArg = {\n    open: boolean;\n};\ntype BackdropPropsWeControl = 'aria-hidden';\ndeclare let BackdropRenderFeatures: number;\nexport type PopoverBackdropProps<TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG> = Props<TTag, BackdropRenderPropArg, BackdropPropsWeControl, {\n    transition?: boolean;\n} & PropsForFeatures<typeof BackdropRenderFeatures>>;\nexport type PopoverOverlayProps<TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG> = PopoverBackdropProps<TTag>;\ndeclare function BackdropFn<TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG>(props: PopoverBackdropProps<TTag>, ref: Ref<HTMLElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare let DEFAULT_PANEL_TAG: \"div\";\ntype PanelRenderPropArg = {\n    open: boolean;\n    close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void;\n};\ntype PanelPropsWeControl = 'tabIndex';\nexport type PopoverPanelProps<TTag extends ElementType = typeof DEFAULT_PANEL_TAG> = Props<TTag, PanelRenderPropArg, PanelPropsWeControl, {\n    focus?: boolean;\n    anchor?: AnchorProps;\n    portal?: boolean;\n    modal?: boolean;\n    transition?: boolean;\n    static?: boolean;\n    unmount?: boolean;\n}>;\ndeclare function PanelFn<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(props: PopoverPanelProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_GROUP_TAG: \"div\";\ntype GroupRenderPropArg = {};\ntype GroupPropsWeControl = never;\nexport type PopoverGroupProps<TTag extends ElementType = typeof DEFAULT_GROUP_TAG> = Props<TTag, GroupRenderPropArg, GroupPropsWeControl>;\ndeclare function GroupFn<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: PopoverGroupProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\nexport interface _internal_ComponentPopover extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(props: PopoverProps<TTag> & RefProp<typeof PopoverFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentPopoverButton extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: PopoverButtonProps<TTag> & RefProp<typeof ButtonFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentPopoverBackdrop extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_BACKDROP_TAG>(props: PopoverBackdropProps<TTag> & RefProp<typeof BackdropFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentPopoverPanel extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(props: PopoverPanelProps<TTag> & RefProp<typeof PanelFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentPopoverGroup extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: PopoverGroupProps<TTag> & RefProp<typeof GroupFn>): React.JSX.Element;\n}\nexport declare let PopoverButton: _internal_ComponentPopoverButton;\n/** @deprecated use `<PopoverBackdrop>` instead of `<PopoverOverlay>` */\nexport declare let PopoverOverlay: _internal_ComponentPopoverBackdrop;\nexport declare let PopoverBackdrop: _internal_ComponentPopoverBackdrop;\nexport declare let PopoverPanel: _internal_ComponentPopoverPanel;\nexport declare let PopoverGroup: _internal_ComponentPopoverGroup;\nexport declare let Popover: _internal_ComponentPopover & {\n    /** @deprecated use `<PopoverButton>` instead of `<Popover.Button>` */\n    Button: _internal_ComponentPopoverButton;\n    /** @deprecated use `<PopoverBackdrop>` instead of `<Popover.Backdrop>` */\n    Backdrop: _internal_ComponentPopoverBackdrop;\n    /** @deprecated use `<PopoverOverlay>` instead of `<Popover.Overlay>` */\n    Overlay: _internal_ComponentPopoverBackdrop;\n    /** @deprecated use `<PopoverPanel>` instead of `<Popover.Panel>` */\n    Panel: _internal_ComponentPopoverPanel;\n    /** @deprecated use `<PopoverGroup>` instead of `<Popover.Group>` */\n    Group: _internal_ComponentPopoverGroup;\n};\nexport {};\n"
        }
    ]
}