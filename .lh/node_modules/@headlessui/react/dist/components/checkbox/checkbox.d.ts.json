{
    "sourceFile": "node_modules/@headlessui/react/dist/components/checkbox/checkbox.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891762472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type ElementType, type Ref } from 'react';\nimport type { Props } from '../../types.js';\nimport { type HasDisplayName, type RefProp } from '../../utils/render.js';\ndeclare let DEFAULT_CHECKBOX_TAG: \"span\";\ntype CheckboxRenderPropArg = {\n    checked: boolean;\n    changing: boolean;\n    focus: boolean;\n    active: boolean;\n    hover: boolean;\n    autofocus: boolean;\n    disabled: boolean;\n    indeterminate: boolean;\n};\ntype CheckboxPropsWeControl = 'aria-checked' | 'aria-describedby' | 'aria-disabled' | 'aria-labelledby' | 'role';\nexport type CheckboxProps<TTag extends ElementType = typeof DEFAULT_CHECKBOX_TAG, TType = string> = Props<TTag, CheckboxRenderPropArg, CheckboxPropsWeControl, {\n    value?: TType;\n    disabled?: boolean;\n    indeterminate?: boolean;\n    checked?: boolean;\n    defaultChecked?: boolean;\n    autoFocus?: boolean;\n    form?: string;\n    name?: string;\n    onChange?: (checked: boolean) => void;\n    tabIndex?: number;\n}>;\ndeclare function CheckboxFn<TTag extends ElementType = typeof DEFAULT_CHECKBOX_TAG, TType = any>(props: CheckboxProps<TTag, TType>, ref: Ref<HTMLElement>): React.JSX.Element;\nexport interface _internal_ComponentCheckbox extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_CHECKBOX_TAG, TType = string>(props: CheckboxProps<TTag, TType> & RefProp<typeof CheckboxFn>): React.JSX.Element;\n}\nexport declare let Checkbox: _internal_ComponentCheckbox;\nexport {};\n"
        }
    ]
}