{
    "sourceFile": "node_modules/@headlessui/react/dist/components/menu/menu-machine.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891764266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Machine } from '../../machine.js';\nimport { Focus } from '../../utils/calculate-active-index.js';\nexport declare enum MenuState {\n    Open = 0,\n    Closed = 1\n}\nexport declare enum ActivationTrigger {\n    Pointer = 0,\n    Other = 1\n}\nexport type MenuItemDataRef = {\n    current: {\n        textValue?: string;\n        disabled: boolean;\n        domRef: {\n            current: HTMLElement | null;\n        };\n    };\n};\nexport interface State {\n    __demoMode: boolean;\n    menuState: MenuState;\n    buttonElement: HTMLButtonElement | null;\n    itemsElement: HTMLElement | null;\n    items: {\n        id: string;\n        dataRef: MenuItemDataRef;\n    }[];\n    searchQuery: string;\n    activeItemIndex: number | null;\n    activationTrigger: ActivationTrigger;\n    pendingShouldSort: boolean;\n    pendingFocus: {\n        focus: Exclude<Focus, Focus.Specific>;\n    } | {\n        focus: Focus.Specific;\n        id: string;\n    };\n}\nexport declare enum ActionTypes {\n    OpenMenu = 0,\n    CloseMenu = 1,\n    GoToItem = 2,\n    Search = 3,\n    ClearSearch = 4,\n    RegisterItems = 5,\n    UnregisterItems = 6,\n    SetButtonElement = 7,\n    SetItemsElement = 8,\n    SortItems = 9\n}\nexport type Actions = {\n    type: ActionTypes.CloseMenu;\n} | {\n    type: ActionTypes.OpenMenu;\n    focus: {\n        focus: Exclude<Focus, Focus.Specific>;\n    } | {\n        focus: Focus.Specific;\n        id: string;\n    };\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.GoToItem;\n    focus: Focus.Specific;\n    id: string;\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.GoToItem;\n    focus: Exclude<Focus, Focus.Specific>;\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.Search;\n    value: string;\n} | {\n    type: ActionTypes.ClearSearch;\n} | {\n    type: ActionTypes.RegisterItems;\n    items: {\n        id: string;\n        dataRef: MenuItemDataRef;\n    }[];\n} | {\n    type: ActionTypes.UnregisterItems;\n    items: string[];\n} | {\n    type: ActionTypes.SetButtonElement;\n    element: HTMLButtonElement | null;\n} | {\n    type: ActionTypes.SetItemsElement;\n    element: HTMLElement | null;\n} | {\n    type: ActionTypes.SortItems;\n};\nexport declare class MenuMachine extends Machine<State, Actions> {\n    static new({ __demoMode }?: {\n        __demoMode?: boolean | undefined;\n    }): MenuMachine;\n    constructor(initialState: State);\n    reduce(state: Readonly<State>, action: Actions): State;\n    actions: {\n        registerItem: (id: string, dataRef: MenuItemDataRef) => void;\n        unregisterItem: (id: string) => void;\n    };\n    selectors: {\n        activeDescendantId(state: State): string | undefined;\n        isActive(state: State, id: string): boolean;\n        shouldScrollIntoView(state: State, id: string): boolean;\n    };\n}\n"
        }
    ]
}