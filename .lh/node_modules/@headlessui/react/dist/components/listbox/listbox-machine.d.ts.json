{
    "sourceFile": "node_modules/@headlessui/react/dist/components/listbox/listbox-machine.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891763903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Machine } from '../../machine.js';\nimport { Focus } from '../../utils/calculate-active-index.js';\ninterface MutableRefObject<T> {\n    current: T;\n}\nexport declare enum ListboxStates {\n    Open = 0,\n    Closed = 1\n}\nexport declare enum ValueMode {\n    Single = 0,\n    Multi = 1\n}\nexport declare enum ActivationTrigger {\n    Pointer = 0,\n    Other = 1\n}\ntype ListboxOptionDataRef<T> = MutableRefObject<{\n    textValue?: string;\n    disabled: boolean;\n    value: T;\n    domRef: MutableRefObject<HTMLElement | null>;\n}>;\ninterface State<T> {\n    __demoMode: boolean;\n    dataRef: MutableRefObject<{\n        value: unknown;\n        disabled: boolean;\n        invalid: boolean;\n        mode: ValueMode;\n        orientation: 'horizontal' | 'vertical';\n        onChange: (value: T) => void;\n        compare(a: unknown, z: unknown): boolean;\n        isSelected(value: unknown): boolean;\n        optionsPropsRef: MutableRefObject<{\n            static: boolean;\n            hold: boolean;\n        }>;\n        listRef: MutableRefObject<Map<string, HTMLElement | null>>;\n    }>;\n    listboxState: ListboxStates;\n    options: {\n        id: string;\n        dataRef: ListboxOptionDataRef<T>;\n    }[];\n    searchQuery: string;\n    activeOptionIndex: number | null;\n    activationTrigger: ActivationTrigger;\n    buttonElement: HTMLButtonElement | null;\n    optionsElement: HTMLElement | null;\n    pendingShouldSort: boolean;\n}\nexport declare enum ActionTypes {\n    OpenListbox = 0,\n    CloseListbox = 1,\n    GoToOption = 2,\n    Search = 3,\n    ClearSearch = 4,\n    RegisterOptions = 5,\n    UnregisterOptions = 6,\n    SetButtonElement = 7,\n    SetOptionsElement = 8,\n    SortOptions = 9\n}\ntype Actions<T> = {\n    type: ActionTypes.CloseListbox;\n} | {\n    type: ActionTypes.OpenListbox;\n} | {\n    type: ActionTypes.GoToOption;\n    focus: Focus.Specific;\n    id: string;\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.GoToOption;\n    focus: Exclude<Focus, Focus.Specific>;\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.Search;\n    value: string;\n} | {\n    type: ActionTypes.ClearSearch;\n} | {\n    type: ActionTypes.RegisterOptions;\n    options: {\n        id: string;\n        dataRef: ListboxOptionDataRef<T>;\n    }[];\n} | {\n    type: ActionTypes.UnregisterOptions;\n    options: string[];\n} | {\n    type: ActionTypes.SetButtonElement;\n    element: HTMLButtonElement | null;\n} | {\n    type: ActionTypes.SetOptionsElement;\n    element: HTMLElement | null;\n} | {\n    type: ActionTypes.SortOptions;\n};\nexport declare class ListboxMachine<T> extends Machine<State<T>, Actions<T>> {\n    static new({ __demoMode }?: {\n        __demoMode?: boolean | undefined;\n    }): ListboxMachine<unknown>;\n    constructor(initialState: State<T>);\n    actions: {\n        onChange: (newValue: T) => void;\n        registerOption: (id: string, dataRef: ListboxOptionDataRef<T>) => void;\n        unregisterOption: (id: string) => void;\n        goToOption: (focus: {\n            focus: Focus.Specific;\n            id: string;\n        } | {\n            focus: Exclude<Focus, Focus.Specific>;\n        }, trigger?: ActivationTrigger | undefined) => void;\n        closeListbox: () => void;\n        openListbox: () => void;\n        selectActiveOption: () => void;\n        selectOption: (id: string) => void;\n        search: (value: string) => void;\n        clearSearch: () => void;\n        setButtonElement: (element: HTMLButtonElement | null) => void;\n        setOptionsElement: (element: HTMLElement | null) => void;\n    };\n    selectors: {\n        activeDescendantId(state: State<T>): string | undefined;\n        isActive(state: State<T>, id: string): boolean;\n        shouldScrollIntoView(state: State<T>, id: string): boolean;\n    };\n    reduce(state: Readonly<State<T>>, action: Actions<T>): State<T>;\n}\nexport {};\n"
        }
    ]
}