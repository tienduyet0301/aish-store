{
    "sourceFile": "node_modules/@headlessui/react/dist/components/listbox/listbox.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891763941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type ElementType, type Ref } from 'react';\nimport { type ByComparator } from '../../hooks/use-by-comparator.js';\nimport { type AnchorPropsWithSelection } from '../../internal/floating.js';\nimport type { Props } from '../../types.js';\nimport { type HasDisplayName, type PropsForFeatures, type RefProp } from '../../utils/render.js';\nimport { type _internal_ComponentLabel } from '../label/label.js';\ndeclare let DEFAULT_LISTBOX_TAG: React.ExoticComponent<{\n    children?: React.ReactNode;\n}>;\ntype ListboxRenderPropArg<T> = {\n    open: boolean;\n    disabled: boolean;\n    invalid: boolean;\n    value: T;\n};\nexport type ListboxProps<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string, TActualType = TType> = Props<TTag, ListboxRenderPropArg<TType>, 'value' | 'defaultValue' | 'onChange' | 'by' | 'disabled' | 'horizontal' | 'name' | 'multiple', {\n    value?: TType;\n    defaultValue?: TType;\n    onChange?(value: TType): void;\n    by?: ByComparator<TActualType>;\n    disabled?: boolean;\n    invalid?: boolean;\n    horizontal?: boolean;\n    form?: string;\n    name?: string;\n    multiple?: boolean;\n    __demoMode?: boolean;\n}>;\ndeclare function ListboxFn<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string, TActualType = TType extends (infer U)[] ? U : TType>(props: ListboxProps<TTag, TType, TActualType>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_BUTTON_TAG: \"button\";\ntype ButtonRenderPropArg = {\n    disabled: boolean;\n    invalid: boolean;\n    hover: boolean;\n    focus: boolean;\n    autofocus: boolean;\n    open: boolean;\n    active: boolean;\n    value: any;\n};\ntype ButtonPropsWeControl = 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'aria-labelledby' | 'disabled';\nexport type ListboxButtonProps<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG> = Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl, {\n    autoFocus?: boolean;\n    disabled?: boolean;\n}>;\ndeclare function ButtonFn<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: ListboxButtonProps<TTag>, ref: Ref<HTMLButtonElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare let DEFAULT_OPTIONS_TAG: \"div\";\ntype OptionsRenderPropArg = {\n    open: boolean;\n};\ntype OptionsPropsWeControl = 'aria-activedescendant' | 'aria-labelledby' | 'aria-multiselectable' | 'aria-orientation' | 'role' | 'tabIndex';\ndeclare let OptionsRenderFeatures: number;\nexport type ListboxOptionsProps<TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG> = Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl, {\n    anchor?: AnchorPropsWithSelection;\n    portal?: boolean;\n    modal?: boolean;\n    transition?: boolean;\n} & PropsForFeatures<typeof OptionsRenderFeatures>>;\ndeclare function OptionsFn<TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG>(props: ListboxOptionsProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_OPTION_TAG: \"div\";\ntype OptionRenderPropArg = {\n    /** @deprecated use `focus` instead */\n    active: boolean;\n    focus: boolean;\n    selected: boolean;\n    disabled: boolean;\n    selectedOption: boolean;\n};\ntype OptionPropsWeControl = 'aria-disabled' | 'aria-selected' | 'role' | 'tabIndex';\nexport type ListboxOptionProps<TTag extends ElementType = typeof DEFAULT_OPTION_TAG, TType = string> = Props<TTag, OptionRenderPropArg, OptionPropsWeControl, {\n    disabled?: boolean;\n    value: TType;\n}>;\ndeclare function OptionFn<TTag extends ElementType = typeof DEFAULT_OPTION_TAG, TType = Parameters<typeof ListboxRoot>[0]['value']>(props: ListboxOptionProps<TTag, TType>, ref: Ref<HTMLElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare let DEFAULT_SELECTED_OPTION_TAG: React.ExoticComponent<{\n    children?: React.ReactNode;\n}>;\ntype SelectedOptionRenderPropArg = {};\ntype SelectedOptionPropsWeControl = never;\nexport type ListboxSelectedOptionProps<TTag extends ElementType = typeof DEFAULT_SELECTED_OPTION_TAG> = Props<TTag, SelectedOptionRenderPropArg, SelectedOptionPropsWeControl, {\n    options: React.ReactNode;\n    placeholder?: React.ReactNode;\n}>;\ndeclare function SelectedFn<TTag extends ElementType = typeof DEFAULT_SELECTED_OPTION_TAG>(props: ListboxSelectedOptionProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\nexport interface _internal_ComponentListbox extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string, TActualType = TType extends (infer U)[] ? U : TType>(props: ListboxProps<TTag, TType, TActualType> & RefProp<typeof ListboxFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentListboxButton extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: ListboxButtonProps<TTag> & RefProp<typeof ButtonFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentListboxLabel extends _internal_ComponentLabel {\n}\nexport interface _internal_ComponentListboxOptions extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG>(props: ListboxOptionsProps<TTag> & RefProp<typeof OptionsFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentListboxOption extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_OPTION_TAG, TType = Parameters<typeof ListboxRoot>[0]['value']>(props: ListboxOptionProps<TTag, TType> & RefProp<typeof OptionFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentListboxSelectedOption extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_SELECTED_OPTION_TAG>(props: ListboxSelectedOptionProps<TTag> & RefProp<typeof SelectedFn>): React.JSX.Element;\n}\ndeclare let ListboxRoot: _internal_ComponentListbox;\nexport declare let ListboxButton: _internal_ComponentListboxButton;\n/** @deprecated use `<Label>` instead of `<ListboxLabel>` */\nexport declare let ListboxLabel: _internal_ComponentListboxLabel;\nexport declare let ListboxOptions: _internal_ComponentListboxOptions;\nexport declare let ListboxOption: _internal_ComponentListboxOption;\nexport declare let ListboxSelectedOption: _internal_ComponentListboxSelectedOption;\nexport declare let Listbox: _internal_ComponentListbox & {\n    /** @deprecated use `<ListboxButton>` instead of `<Listbox.Button>` */\n    Button: _internal_ComponentListboxButton;\n    /** @deprecated use `<Label>` instead of `<Listbox.Label>` */\n    Label: _internal_ComponentListboxLabel;\n    /** @deprecated use `<ListboxOptions>` instead of `<Listbox.Options>` */\n    Options: _internal_ComponentListboxOptions;\n    /** @deprecated use `<ListboxOption>` instead of `<Listbox.Option>` */\n    Option: _internal_ComponentListboxOption;\n    /** @deprecated use `<ListboxSelectedOption>` instead of `<Listbox.SelectedOption>` */\n    SelectedOption: _internal_ComponentListboxSelectedOption;\n};\nexport {};\n"
        }
    ]
}