{
    "sourceFile": "node_modules/@headlessui/react/dist/components/disclosure/disclosure.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891763341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type ElementType, type MutableRefObject, type Ref } from 'react';\nimport type { Props } from '../../types.js';\nimport { type HasDisplayName, type PropsForFeatures, type RefProp } from '../../utils/render.js';\ndeclare let DEFAULT_DISCLOSURE_TAG: React.ExoticComponent<{\n    children?: React.ReactNode;\n}>;\ntype DisclosureRenderPropArg = {\n    open: boolean;\n    close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void;\n};\ntype DisclosurePropsWeControl = never;\nexport type DisclosureProps<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG> = Props<TTag, DisclosureRenderPropArg, DisclosurePropsWeControl, {\n    defaultOpen?: boolean;\n}>;\ndeclare function DisclosureFn<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(props: DisclosureProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_BUTTON_TAG: \"button\";\ntype ButtonRenderPropArg = {\n    open: boolean;\n    hover: boolean;\n    active: boolean;\n    disabled: boolean;\n    focus: boolean;\n    autofocus: boolean;\n};\ntype ButtonPropsWeControl = 'aria-controls' | 'aria-expanded';\nexport type DisclosureButtonProps<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG> = Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl, {\n    disabled?: boolean;\n    autoFocus?: boolean;\n}>;\ndeclare function ButtonFn<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: DisclosureButtonProps<TTag>, ref: Ref<HTMLButtonElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare let DEFAULT_PANEL_TAG: \"div\";\ntype PanelRenderPropArg = {\n    open: boolean;\n    close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void;\n};\ntype DisclosurePanelPropsWeControl = never;\ndeclare let PanelRenderFeatures: number;\nexport type DisclosurePanelProps<TTag extends ElementType = typeof DEFAULT_PANEL_TAG> = Props<TTag, PanelRenderPropArg, DisclosurePanelPropsWeControl, {\n    transition?: boolean;\n} & PropsForFeatures<typeof PanelRenderFeatures>>;\ndeclare function PanelFn<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(props: DisclosurePanelProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\nexport interface _internal_ComponentDisclosure extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(props: DisclosureProps<TTag> & RefProp<typeof DisclosureFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentDisclosureButton extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: DisclosureButtonProps<TTag> & RefProp<typeof ButtonFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentDisclosurePanel extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(props: DisclosurePanelProps<TTag> & RefProp<typeof PanelFn>): React.JSX.Element;\n}\nexport declare let DisclosureButton: _internal_ComponentDisclosureButton;\nexport declare let DisclosurePanel: _internal_ComponentDisclosurePanel;\nexport declare let Disclosure: _internal_ComponentDisclosure & {\n    /** @deprecated use `<DisclosureButton>` instead of `<Disclosure.Button>` */\n    Button: _internal_ComponentDisclosureButton;\n    /** @deprecated use `<DisclosurePanel>` instead of `<Disclosure.Panel>` */\n    Panel: _internal_ComponentDisclosurePanel;\n};\nexport {};\n"
        }
    ]
}