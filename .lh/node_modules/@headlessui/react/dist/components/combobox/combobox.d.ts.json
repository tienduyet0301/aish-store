{
    "sourceFile": "node_modules/@headlessui/react/dist/components/combobox/combobox.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891762692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type ElementType, type Ref } from 'react';\nimport { type ByComparator } from '../../hooks/use-by-comparator.js';\nimport { type AnchorProps } from '../../internal/floating.js';\nimport type { EnsureArray, Props } from '../../types.js';\nimport { type HasDisplayName, type PropsForFeatures, type RefProp } from '../../utils/render.js';\nimport { type _internal_ComponentLabel } from '../label/label.js';\ndeclare let DEFAULT_COMBOBOX_TAG: React.ExoticComponent<{\n    children?: React.ReactNode;\n}>;\ntype ComboboxRenderPropArg<TValue, TActive = TValue> = {\n    open: boolean;\n    disabled: boolean;\n    invalid: boolean;\n    activeIndex: number | null;\n    activeOption: TActive | null;\n    value: TValue;\n};\nexport type ComboboxProps<TValue, TMultiple extends boolean | undefined, TTag extends ElementType = typeof DEFAULT_COMBOBOX_TAG> = Props<TTag, ComboboxRenderPropArg<NoInfer<TValue>>, 'value' | 'defaultValue' | 'multiple' | 'onChange' | 'by', {\n    value?: TMultiple extends true ? EnsureArray<TValue> : TValue;\n    defaultValue?: TMultiple extends true ? EnsureArray<NoInfer<TValue>> : NoInfer<TValue>;\n    onChange?(value: TMultiple extends true ? EnsureArray<NoInfer<TValue>> : NoInfer<TValue> | null): void;\n    by?: ByComparator<TMultiple extends true ? EnsureArray<NoInfer<TValue>>[number] : NoInfer<TValue>>;\n    /** @deprecated The `<Combobox />` is now nullable default */\n    nullable?: boolean;\n    multiple?: TMultiple;\n    disabled?: boolean;\n    invalid?: boolean;\n    form?: string;\n    name?: string;\n    immediate?: boolean;\n    virtual?: {\n        options: TMultiple extends true ? EnsureArray<NoInfer<TValue>> : NoInfer<TValue>[];\n        disabled?: (value: TMultiple extends true ? EnsureArray<NoInfer<TValue>>[number] : NoInfer<TValue>) => boolean;\n    } | null;\n    onClose?(): void;\n    __demoMode?: boolean;\n}>;\ndeclare function ComboboxFn<TValue, TTag extends ElementType = typeof DEFAULT_COMBOBOX_TAG>(props: ComboboxProps<TValue, boolean | undefined, TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_INPUT_TAG: \"input\";\ntype InputRenderPropArg = {\n    open: boolean;\n    disabled: boolean;\n    invalid: boolean;\n    hover: boolean;\n    focus: boolean;\n    autofocus: boolean;\n};\ntype InputPropsWeControl = 'aria-activedescendant' | 'aria-autocomplete' | 'aria-controls' | 'aria-expanded' | 'aria-labelledby' | 'disabled' | 'role';\nexport type ComboboxInputProps<TTag extends ElementType = typeof DEFAULT_INPUT_TAG, TType = string> = Props<TTag, InputRenderPropArg, InputPropsWeControl, {\n    defaultValue?: TType;\n    disabled?: boolean;\n    displayValue?(item: TType): string;\n    onChange?(event: React.ChangeEvent<HTMLInputElement>): void;\n    autoFocus?: boolean;\n}>;\ndeclare function InputFn<TTag extends ElementType = typeof DEFAULT_INPUT_TAG, TType = Parameters<typeof ComboboxRoot>[0]['value']>(props: ComboboxInputProps<TTag, TType>, ref: Ref<HTMLInputElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare let DEFAULT_BUTTON_TAG: \"button\";\ntype ButtonRenderPropArg = {\n    open: boolean;\n    active: boolean;\n    disabled: boolean;\n    invalid: boolean;\n    value: any;\n    focus: boolean;\n    hover: boolean;\n};\ntype ButtonPropsWeControl = 'aria-controls' | 'aria-expanded' | 'aria-haspopup' | 'aria-labelledby' | 'disabled' | 'tabIndex';\nexport type ComboboxButtonProps<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG> = Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl, {\n    autoFocus?: boolean;\n    disabled?: boolean;\n}>;\ndeclare function ButtonFn<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: ComboboxButtonProps<TTag>, ref: Ref<HTMLButtonElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare let DEFAULT_OPTIONS_TAG: \"div\";\ntype OptionsRenderPropArg = {\n    open: boolean;\n    option: any;\n};\ntype OptionsPropsWeControl = 'aria-labelledby' | 'aria-multiselectable' | 'role' | 'tabIndex';\ndeclare let OptionsRenderFeatures: number;\nexport type ComboboxOptionsProps<TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG> = Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl, PropsForFeatures<typeof OptionsRenderFeatures> & {\n    hold?: boolean;\n    anchor?: AnchorProps;\n    portal?: boolean;\n    modal?: boolean;\n    transition?: boolean;\n}>;\ndeclare function OptionsFn<TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG>(props: ComboboxOptionsProps<TTag>, ref: Ref<HTMLElement>): React.JSX.Element;\ndeclare let DEFAULT_OPTION_TAG: \"div\";\ntype OptionRenderPropArg = {\n    focus: boolean;\n    /** @deprecated use `focus` instead */\n    active: boolean;\n    selected: boolean;\n    disabled: boolean;\n};\ntype OptionPropsWeControl = 'role' | 'tabIndex' | 'aria-disabled' | 'aria-selected';\nexport type ComboboxOptionProps<TTag extends ElementType = typeof DEFAULT_OPTION_TAG, TType = string> = Props<TTag, OptionRenderPropArg, OptionPropsWeControl, {\n    disabled?: boolean;\n    value: TType;\n    order?: number;\n}>;\ndeclare function OptionFn<TTag extends ElementType = typeof DEFAULT_OPTION_TAG, TType = Parameters<typeof ComboboxRoot>[0]['value']>(props: ComboboxOptionProps<TTag, TType>, ref: Ref<HTMLElement>): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\nexport interface _internal_ComponentCombobox extends HasDisplayName {\n    <TValue, TMultiple extends boolean | undefined = false, TTag extends ElementType = typeof DEFAULT_COMBOBOX_TAG>(props: ComboboxProps<TValue, TMultiple, TTag> & RefProp<typeof ComboboxFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentComboboxButton extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(props: ComboboxButtonProps<TTag> & RefProp<typeof ButtonFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentComboboxInput extends HasDisplayName {\n    <TType, TTag extends ElementType = typeof DEFAULT_INPUT_TAG>(props: ComboboxInputProps<TTag, TType> & RefProp<typeof InputFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentComboboxLabel extends _internal_ComponentLabel {\n}\nexport interface _internal_ComponentComboboxOptions extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG>(props: ComboboxOptionsProps<TTag> & RefProp<typeof OptionsFn>): React.JSX.Element;\n}\nexport interface _internal_ComponentComboboxOption extends HasDisplayName {\n    <TTag extends ElementType = typeof DEFAULT_OPTION_TAG, TType = Parameters<typeof ComboboxRoot>[0]['value']>(props: ComboboxOptionProps<TTag, TType> & RefProp<typeof OptionFn>): React.JSX.Element;\n}\ndeclare let ComboboxRoot: _internal_ComponentCombobox;\nexport declare let ComboboxButton: _internal_ComponentComboboxButton;\nexport declare let ComboboxInput: _internal_ComponentComboboxInput;\n/** @deprecated use `<Label>` instead of `<ComboboxLabel>` */\nexport declare let ComboboxLabel: _internal_ComponentComboboxLabel;\nexport declare let ComboboxOptions: _internal_ComponentComboboxOptions;\nexport declare let ComboboxOption: _internal_ComponentComboboxOption;\nexport declare let Combobox: _internal_ComponentCombobox & {\n    /** @deprecated use `<ComboboxInput>` instead of `<Combobox.Input>` */\n    Input: _internal_ComponentComboboxInput;\n    /** @deprecated use `<ComboboxButton>` instead of `<Combobox.Button>` */\n    Button: _internal_ComponentComboboxButton;\n    /** @deprecated use `<Label>` instead of `<Combobox.Label>` */\n    Label: _internal_ComponentComboboxLabel;\n    /** @deprecated use `<ComboboxOptions>` instead of `<Combobox.Options>` */\n    Options: _internal_ComponentComboboxOptions;\n    /** @deprecated use `<ComboboxOption>` instead of `<Combobox.Option>` */\n    Option: _internal_ComponentComboboxOption;\n};\nexport {};\n"
        }
    ]
}