{
    "sourceFile": "node_modules/@headlessui/react/dist/components/combobox/combobox-machine.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891762650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Machine } from '../../machine.js';\nimport type { EnsureArray } from '../../types.js';\nimport { Focus } from '../../utils/calculate-active-index.js';\ninterface MutableRefObject<T> {\n    current: T;\n}\nexport declare enum ComboboxState {\n    Open = 0,\n    Closed = 1\n}\nexport declare enum ValueMode {\n    Single = 0,\n    Multi = 1\n}\nexport declare enum ActivationTrigger {\n    Pointer = 0,\n    Focus = 1,\n    Other = 2\n}\nexport type ComboboxOptionDataRef<T> = MutableRefObject<{\n    disabled: boolean;\n    value: T;\n    domRef: MutableRefObject<HTMLElement | null>;\n    order: number | null;\n}>;\nexport interface State<T> {\n    dataRef: MutableRefObject<{\n        value: unknown;\n        defaultValue: unknown;\n        disabled: boolean;\n        invalid: boolean;\n        mode: ValueMode;\n        immediate: boolean;\n        onChange: (value: T) => void;\n        onClose?: () => void;\n        compare(a: unknown, z: unknown): boolean;\n        isSelected(value: unknown): boolean;\n        virtual: {\n            options: T[];\n            disabled: (value: T) => boolean;\n        } | null;\n        calculateIndex(value: unknown): number;\n        __demoMode: boolean;\n        optionsPropsRef: MutableRefObject<{\n            static: boolean;\n            hold: boolean;\n        }>;\n    }>;\n    virtual: {\n        options: T[];\n        disabled: (value: unknown) => boolean;\n    } | null;\n    comboboxState: ComboboxState;\n    defaultToFirstOption: boolean;\n    options: {\n        id: string;\n        dataRef: ComboboxOptionDataRef<T>;\n    }[];\n    activeOptionIndex: number | null;\n    activationTrigger: ActivationTrigger;\n    isTyping: boolean;\n    inputElement: HTMLInputElement | null;\n    buttonElement: HTMLButtonElement | null;\n    optionsElement: HTMLElement | null;\n    __demoMode: boolean;\n}\nexport declare enum ActionTypes {\n    OpenCombobox = 0,\n    CloseCombobox = 1,\n    GoToOption = 2,\n    SetTyping = 3,\n    RegisterOption = 4,\n    UnregisterOption = 5,\n    DefaultToFirstOption = 6,\n    SetActivationTrigger = 7,\n    UpdateVirtualConfiguration = 8,\n    SetInputElement = 9,\n    SetButtonElement = 10,\n    SetOptionsElement = 11\n}\ntype Actions<T> = {\n    type: ActionTypes.CloseCombobox;\n} | {\n    type: ActionTypes.OpenCombobox;\n} | {\n    type: ActionTypes.GoToOption;\n    focus: Focus.Specific;\n    idx: number;\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.SetTyping;\n    isTyping: boolean;\n} | {\n    type: ActionTypes.GoToOption;\n    focus: Exclude<Focus, Focus.Specific>;\n    trigger?: ActivationTrigger;\n} | {\n    type: ActionTypes.RegisterOption;\n    payload: {\n        id: string;\n        dataRef: ComboboxOptionDataRef<T>;\n    };\n} | {\n    type: ActionTypes.UnregisterOption;\n    id: string;\n} | {\n    type: ActionTypes.DefaultToFirstOption;\n    value: boolean;\n} | {\n    type: ActionTypes.SetActivationTrigger;\n    trigger: ActivationTrigger;\n} | {\n    type: ActionTypes.UpdateVirtualConfiguration;\n    options: T[];\n    disabled: ((value: any) => boolean) | null;\n} | {\n    type: ActionTypes.SetInputElement;\n    element: HTMLInputElement | null;\n} | {\n    type: ActionTypes.SetButtonElement;\n    element: HTMLButtonElement | null;\n} | {\n    type: ActionTypes.SetOptionsElement;\n    element: HTMLElement | null;\n};\nexport declare class ComboboxMachine<T> extends Machine<State<T>, Actions<T>> {\n    static new<T, TMultiple extends boolean | undefined>({ virtual, __demoMode, }?: {\n        virtual?: {\n            options: TMultiple extends true ? EnsureArray<NoInfer<T>> : NoInfer<T>[];\n            disabled?: (value: TMultiple extends true ? EnsureArray<NoInfer<T>>[number] : NoInfer<T>) => boolean;\n        } | null;\n        __demoMode?: boolean;\n    }): ComboboxMachine<any>;\n    actions: {\n        onChange: (newValue: T) => void;\n        registerOption: (id: string, dataRef: ComboboxOptionDataRef<T>) => () => void;\n        goToOption: (focus: {\n            focus: Focus.Specific;\n            idx: number;\n        } | {\n            focus: Exclude<Focus, Focus.Specific>;\n        }, trigger?: ActivationTrigger) => void;\n        setIsTyping: (isTyping: boolean) => void;\n        closeCombobox: () => void;\n        openCombobox: () => void;\n        setActivationTrigger: (trigger: ActivationTrigger) => void;\n        selectActiveOption: () => void;\n        setInputElement: (element: HTMLInputElement | null) => void;\n        setButtonElement: (element: HTMLButtonElement | null) => void;\n        setOptionsElement: (element: HTMLElement | null) => void;\n    };\n    selectors: {\n        activeDescendantId: (state: State<T>) => string | undefined;\n        activeOptionIndex: (state: State<T>) => number | null;\n        activeOption: (state: State<T>) => T | null;\n        isActive: (state: State<T>, value: T, id: string) => boolean;\n        shouldScrollIntoView: (state: State<T>, value: T, id: string) => boolean;\n    };\n    reduce(state: Readonly<State<T>>, action: Actions<T>): State<T>;\n}\nexport {};\n"
        }
    ]
}