{
    "sourceFile": "node_modules/@headlessui/react/dist/hooks/use-disposables.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891766713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `useDisposables` hook returns a `disposables` object that is disposed\n * when the component is unmounted.\n */\nexport declare function useDisposables(): {\n    addEventListener<TEventName extends keyof WindowEventMap>(element: Window | Document | HTMLElement, name: TEventName, listener: (event: WindowEventMap[TEventName]) => any, options?: boolean | AddEventListenerOptions | undefined): () => void;\n    requestAnimationFrame(callback: FrameRequestCallback): () => void;\n    nextFrame(callback: FrameRequestCallback): () => void;\n    setTimeout(callback: (...args: any[]) => void, ms?: number | undefined, ...args: any[]): () => void;\n    microTask(cb: () => void): () => void;\n    style(node: HTMLElement, property: string, value: string): () => void;\n    group(cb: (d: {\n        addEventListener<TEventName extends keyof WindowEventMap>(element: Window | Document | HTMLElement, name: TEventName, listener: (event: WindowEventMap[TEventName]) => any, options?: boolean | AddEventListenerOptions | undefined): () => void;\n        requestAnimationFrame(callback: FrameRequestCallback): () => void;\n        nextFrame(callback: FrameRequestCallback): () => void;\n        setTimeout(callback: (...args: any[]) => void, ms?: number | undefined, ...args: any[]): () => void;\n        microTask(cb: () => void): () => void;\n        style(node: HTMLElement, property: string, value: string): () => void;\n        group(cb: any): () => void;\n        add(cb: () => void): () => void;\n        dispose(): void;\n    }) => void): () => void;\n    add(cb: () => void): () => void;\n    dispose(): void;\n};\n"
        }
    ]
}