{
    "sourceFile": "node_modules/@headlessui/react/dist/hooks/use-root-containers.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891767882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type MutableRefObject } from 'react';\nexport declare function useRootContainers({ defaultContainers, portals, mainTreeNode, }?: {\n    defaultContainers?: (HTMLElement | null | MutableRefObject<HTMLElement | null>)[];\n    portals?: MutableRefObject<HTMLElement[]>;\n    mainTreeNode?: HTMLElement | null;\n}): {\n    resolveContainers: () => HTMLElement[];\n    contains: (element: HTMLElement) => boolean;\n};\n/**\n * A provider for the main tree node.\n *\n * When a component is rendered in a `Portal`, it is no longer part of the main\n * tree. This provider helps to find the main tree node and pass it along to the\n * components that need it.\n *\n * The main tree node is used for features such as outside click behavior, where\n * we allow clicks in 3rd party containers, but not in the parent of the \"main\n * tree\".\n *\n * In case of a `Popover`, we can use the `PopoverButton` as a marker in the\n * \"main tree\", the `PopoverPanel` can't be used because it could be rendered in\n * a `Portal` (e.g. when using the `anchor` props).\n *\n * However, we can't use the `PopoverButton` when it's nested inside of another\n * `Popover`'s `PopoverPanel` component if the parent `PopoverPanel` is\n * rendered in a `Portal`.\n *\n * This is where the `MainTreeProvider` comes in. It will find the \"main tree\"\n * node and pass it on. The top-level `PopoverButton` will be used as a marker\n * in the \"main tree\" and nested `Popover` will use this button as well.\n */\nexport declare function MainTreeProvider({ children, node, }: {\n    children: React.ReactNode;\n    node?: HTMLElement | null;\n}): React.JSX.Element;\n/**\n * Get the main tree node from context or fallback to the optionally provided node.\n */\nexport declare function useMainTreeNode(fallbackMainTreeNode?: HTMLElement | null): HTMLElement | null;\n"
        }
    ]
}