{
    "sourceFile": "node_modules/jsx-ast-utils/lib/elementType.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892377067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = elementType;\nfunction resolveMemberExpressions() {\n  var object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (object.type === 'JSXMemberExpression') {\n    return resolveMemberExpressions(object.object, object.property) + '.' + property.name;\n  }\n\n  return object.name + '.' + property.name;\n}\n\n/**\n * Returns the tagName associated with a JSXElement.\n */\nfunction elementType() {\n  var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var name = node.name;\n\n\n  if (node.type === 'JSXOpeningFragment') {\n    return '<>';\n  }\n\n  if (!name) {\n    throw new Error('The argument provided is not a JSXElement node.');\n  }\n\n  if (name.type === 'JSXMemberExpression') {\n    var _name$object = name.object,\n        object = _name$object === undefined ? {} : _name$object,\n        _name$property = name.property,\n        property = _name$property === undefined ? {} : _name$property;\n\n    return resolveMemberExpressions(object, property);\n  }\n\n  if (name.type === 'JSXNamespacedName') {\n    return name.namespace.name + ':' + name.name.name;\n  }\n\n  return node.name.name;\n}"
        }
    ]
}