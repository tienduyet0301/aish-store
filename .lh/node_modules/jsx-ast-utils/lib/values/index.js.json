{
    "sourceFile": "node_modules/jsx-ast-utils/lib/values/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892379326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = getValue;\nexports.getLiteralValue = getLiteralValue;\n\nvar _Literal = require('./Literal');\n\nvar _Literal2 = _interopRequireDefault(_Literal);\n\nvar _JSXElement = require('./JSXElement');\n\nvar _JSXElement2 = _interopRequireDefault(_JSXElement);\n\nvar _JSXText = require('./JSXText');\n\nvar _JSXText2 = _interopRequireDefault(_JSXText);\n\nvar _JSXFragment = require('./JSXFragment');\n\nvar _JSXFragment2 = _interopRequireDefault(_JSXFragment);\n\nvar _expressions = require('./expressions');\n\nvar _expressions2 = _interopRequireDefault(_expressions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Composition map of types to their extractor functions.\nvar TYPES = {\n  Literal: _Literal2.default,\n  JSXElement: _JSXElement2.default,\n  JSXExpressionContainer: _expressions2.default,\n  JSXText: _JSXText2.default,\n  JSXFragment: _JSXFragment2.default\n};\n\n// Composition map of types to their extractor functions to handle literals.\nvar LITERAL_TYPES = _extends({}, TYPES, {\n  JSXElement: function JSXElement() {\n    return null;\n  },\n  JSXExpressionContainer: _expressions.extractLiteral\n});\n\n/**\n * This function maps an AST value node\n * to its correct extractor function for its\n * given type.\n *\n * This will map correctly for *all* possible types.\n *\n * @param value - AST Value object on a JSX Attribute.\n */\nfunction getValue(value) {\n  if (!TYPES[value.type]) console.log(value.type);\n  return TYPES[value.type](value);\n}\n\n/**\n * This function maps an AST value node\n * to its correct extractor function for its\n * given type.\n *\n * This will map correctly for *some* possible types that map to literals.\n *\n * @param value - AST Value object on a JSX Attribute.\n */\nfunction getLiteralValue(value) {\n  return LITERAL_TYPES[value.type](value);\n}"
        }
    ]
}