{
    "sourceFile": "node_modules/jsx-ast-utils/lib/values/expressions/TemplateLiteral.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892378851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromTemplateLiteral;\nfunction sortStarts(a, b) {\n  return (a.range ? a.range[0] : a.start) - (b.range ? b.range[0] : b.start);\n}\n\n/**\n * Returns the string value of a template literal object.\n * Tries to build it as best as it can based on the passed\n * prop. For instance `This is a ${prop}` will return 'This is a {prop}'.\n *\n * If the template literal builds to undefined (`${undefined}`), then\n * this should return \"undefined\".\n */\nfunction extractValueFromTemplateLiteral(value) {\n  var quasis = value.quasis,\n      expressions = value.expressions;\n\n  var partitions = quasis.concat(expressions);\n\n  return partitions.sort(sortStarts).map(function (_ref) {\n    var type = _ref.type,\n        _ref$value = _ref.value;\n    _ref$value = _ref$value === undefined ? {} : _ref$value;\n    var raw = _ref$value.raw,\n        name = _ref.name;\n\n    if (type === 'TemplateElement') {\n      return raw;\n    }\n\n    if (type === 'Identifier') {\n      return name === 'undefined' ? name : '{' + name + '}';\n    }\n\n    if (type.indexOf('Expression') > -1) {\n      return '{' + type + '}';\n    }\n\n    return '';\n  }).join('');\n}"
        }
    ]
}