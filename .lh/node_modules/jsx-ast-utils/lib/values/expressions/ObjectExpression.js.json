{
    "sourceFile": "node_modules/jsx-ast-utils/lib/values/expressions/ObjectExpression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892378162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromObjectExpression;\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Extractor function for an ObjectExpression type value node.\n * An object expression is using {}.\n *\n * @returns - a representation of the object\n */\nfunction extractValueFromObjectExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  return value.properties.reduce(function (obj, property) {\n    // Support types: SpreadProperty and ExperimentalSpreadProperty\n    if (/^(?:Experimental)?Spread(?:Property|Element)$/.test(property.type)) {\n      if (property.argument.type === 'ObjectExpression') {\n        return (0, _object2.default)({}, obj, extractValueFromObjectExpression(property.argument));\n      }\n    } else {\n      return (0, _object2.default)({}, obj, _defineProperty({}, getValue(property.key), getValue(property.value)));\n    }\n    return obj;\n  }, {});\n}"
        }
    ]
}