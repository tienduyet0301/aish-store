{
    "sourceFile": "node_modules/jsx-ast-utils/lib/values/expressions/LogicalExpression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892377978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromLogicalExpression;\n/**\n * Extractor function for a LogicalExpression type value node.\n * A logical expression is `a && b` or `a || b`, so we evaluate both sides\n * and return the extracted value of the expression.\n *\n * @param - value - AST Value object with type `LogicalExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromLogicalExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  if (operator === '&&') {\n    return leftVal && rightVal;\n  }\n  if (operator === '??') {\n    // return leftVal ?? rightVal; // TODO: update to babel 7\n    return leftVal === null || typeof leftVal === 'undefined' ? rightVal : leftVal;\n  }\n  return leftVal || rightVal;\n}"
        }
    ]
}