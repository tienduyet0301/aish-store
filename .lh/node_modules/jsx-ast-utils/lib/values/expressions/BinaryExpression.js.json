{
    "sourceFile": "node_modules/jsx-ast-utils/lib/values/expressions/BinaryExpression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892377453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractValueFromBinaryExpression;\n/**\n * Extractor function for a BinaryExpression type value node.\n * A binary expression has a left and right side separated by an operator\n * such as `a + b`.\n *\n * @param - value - AST Value object with type `BinaryExpression`\n * @returns - The extracted value converted to correct type.\n */\nfunction extractValueFromBinaryExpression(value) {\n  // eslint-disable-next-line global-require\n  var getValue = require('.').default;\n  var operator = value.operator,\n      left = value.left,\n      right = value.right;\n\n  var leftVal = getValue(left);\n  var rightVal = getValue(right);\n\n  switch (operator) {\n    case '==':\n      return leftVal == rightVal; // eslint-disable-line\n    case '!=':\n      return leftVal != rightVal; // eslint-disable-line\n    case '===':\n      return leftVal === rightVal;\n    case '!==':\n      return leftVal !== rightVal;\n    case '<':\n      return leftVal < rightVal;\n    case '<=':\n      return leftVal <= rightVal;\n    case '>':\n      return leftVal > rightVal;\n    case '>=':\n      return leftVal >= rightVal;\n    case '<<':\n      return leftVal << rightVal; // eslint-disable-line no-bitwise\n    case '>>':\n      return leftVal >> rightVal; // eslint-disable-line no-bitwise\n    case '>>>':\n      return leftVal >>> rightVal; // eslint-disable-line no-bitwise\n    case '+':\n      return leftVal + rightVal;\n    case '-':\n      return leftVal - rightVal;\n    case '*':\n      return leftVal * rightVal;\n    case '/':\n      return leftVal / rightVal;\n    case '%':\n      return leftVal % rightVal;\n    case '|':\n      return leftVal | rightVal; // eslint-disable-line no-bitwise\n    case '^':\n      return leftVal ^ rightVal; // eslint-disable-line no-bitwise\n    case '&':\n      return leftVal & rightVal; // eslint-disable-line no-bitwise\n    case 'in':\n      try {\n        return leftVal in rightVal;\n      } catch (err) {\n        return false;\n      }\n    case 'instanceof':\n      if (typeof rightVal !== 'function') {\n        return false;\n      }\n      return leftVal instanceof rightVal;\n    default:\n      return undefined;\n  }\n}"
        }
    ]
}