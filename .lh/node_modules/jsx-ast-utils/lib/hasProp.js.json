{
    "sourceFile": "node_modules/jsx-ast-utils/lib/hasProp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892377238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hasProp;\nexports.hasAnyProp = hasAnyProp;\nexports.hasEveryProp = hasEveryProp;\n\nvar _propName = require('./propName');\n\nvar _propName2 = _interopRequireDefault(_propName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEFAULT_OPTIONS = {\n  spreadStrict: true,\n  ignoreCase: true\n};\n\n/**\n * Returns boolean indicating whether an prop exists on the props\n * property of a JSX element node.\n */\nfunction hasProp() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;\n\n  var propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;\n\n  return props.some(function (attribute) {\n    // If the props contain a spread prop, then refer to strict param.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return !options.spreadStrict;\n    }\n\n    var currentProp = options.ignoreCase ? (0, _propName2.default)(attribute).toUpperCase() : (0, _propName2.default)(attribute);\n\n    return propToCheck === currentProp;\n  });\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if any of them exist on the node.\n */\nfunction hasAnyProp() {\n  var nodeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;\n\n  var propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.some(function (prop) {\n    return hasProp(nodeProps, prop, options);\n  });\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if all of them exist on the node\n */\nfunction hasEveryProp() {\n  var nodeProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_OPTIONS;\n\n  var propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.every(function (prop) {\n    return hasProp(nodeProps, prop, options);\n  });\n}"
        }
    ]
}