{
    "sourceFile": "node_modules/jsx-ast-utils/src/hasProp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892380170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import propName from './propName';\n\nconst DEFAULT_OPTIONS = {\n  spreadStrict: true,\n  ignoreCase: true,\n};\n\n/**\n * Returns boolean indicating whether an prop exists on the props\n * property of a JSX element node.\n */\nexport default function hasProp(props = [], prop = '', options = DEFAULT_OPTIONS) {\n  const propToCheck = options.ignoreCase ? prop.toUpperCase() : prop;\n\n  return props.some((attribute) => {\n    // If the props contain a spread prop, then refer to strict param.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return !options.spreadStrict;\n    }\n\n    const currentProp = options.ignoreCase\n      ? propName(attribute).toUpperCase()\n      : propName(attribute);\n\n    return propToCheck === currentProp;\n  });\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if any of them exist on the node.\n */\nexport function hasAnyProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.some((prop) => hasProp(nodeProps, prop, options));\n}\n\n/**\n * Given the props on a node and a list of props to check, this returns a boolean\n * indicating if all of them exist on the node\n */\nexport function hasEveryProp(nodeProps = [], props = [], options = DEFAULT_OPTIONS) {\n  const propsToCheck = typeof props === 'string' ? props.split(' ') : props;\n\n  return propsToCheck.every((prop) => hasProp(nodeProps, prop, options));\n}\n"
        }
    ]
}