{
    "sourceFile": "node_modules/jsx-ast-utils/src/values/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892381714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Literal from './Literal';\nimport JSXElement from './JSXElement';\nimport JSXText from './JSXText';\nimport JSXFragment from './JSXFragment';\nimport JSXExpressionContainer, { extractLiteral } from './expressions';\n\n// Composition map of types to their extractor functions.\nconst TYPES = {\n  Literal,\n  JSXElement,\n  JSXExpressionContainer,\n  JSXText,\n  JSXFragment,\n};\n\n// Composition map of types to their extractor functions to handle literals.\nconst LITERAL_TYPES = {\n  ...TYPES,\n  JSXElement: () => null,\n  JSXExpressionContainer: extractLiteral,\n};\n\n/**\n * This function maps an AST value node\n * to its correct extractor function for its\n * given type.\n *\n * This will map correctly for *all* possible types.\n *\n * @param value - AST Value object on a JSX Attribute.\n */\nexport default function getValue(value) {\n  if (!TYPES[value.type]) console.log(value.type);\n  return TYPES[value.type](value);\n}\n\n/**\n * This function maps an AST value node\n * to its correct extractor function for its\n * given type.\n *\n * This will map correctly for *some* possible types that map to literals.\n *\n * @param value - AST Value object on a JSX Attribute.\n */\nexport function getLiteralValue(value) {\n  return LITERAL_TYPES[value.type](value);\n}\n"
        }
    ]
}