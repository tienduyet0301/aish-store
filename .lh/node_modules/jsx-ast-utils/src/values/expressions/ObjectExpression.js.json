{
    "sourceFile": "node_modules/jsx-ast-utils/src/values/expressions/ObjectExpression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892381156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import assign from 'object.assign';\n\n/**\n * Extractor function for an ObjectExpression type value node.\n * An object expression is using {}.\n *\n * @returns - a representation of the object\n */\nexport default function extractValueFromObjectExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  return value.properties.reduce((obj, property) => {\n    // Support types: SpreadProperty and ExperimentalSpreadProperty\n    if (/^(?:Experimental)?Spread(?:Property|Element)$/.test(property.type)) {\n      if (property.argument.type === 'ObjectExpression') {\n        return assign({}, obj, extractValueFromObjectExpression(property.argument));\n      }\n    } else {\n      return assign({}, obj, { [getValue(property.key)]: getValue(property.value) });\n    }\n    return obj;\n  }, {});\n}\n"
        }
    ]
}