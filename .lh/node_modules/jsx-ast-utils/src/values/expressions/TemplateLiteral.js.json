{
    "sourceFile": "node_modules/jsx-ast-utils/src/values/expressions/TemplateLiteral.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892381419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "function sortStarts(a, b) {\n  return (a.range ? a.range[0] : a.start) - (b.range ? b.range[0] : b.start);\n}\n\n/**\n * Returns the string value of a template literal object.\n * Tries to build it as best as it can based on the passed\n * prop. For instance `This is a ${prop}` will return 'This is a {prop}'.\n *\n * If the template literal builds to undefined (`${undefined}`), then\n * this should return \"undefined\".\n */\nexport default function extractValueFromTemplateLiteral(value) {\n  const {\n    quasis,\n    expressions,\n  } = value;\n  const partitions = quasis.concat(expressions);\n\n  return partitions.sort(sortStarts).map(({ type, value: { raw } = {}, name }) => {\n    if (type === 'TemplateElement') {\n      return raw;\n    }\n\n    if (type === 'Identifier') {\n      return name === 'undefined' ? name : `{${name}}`;\n    }\n\n    if (type.indexOf('Expression') > -1) {\n      return `{${type}}`;\n    }\n\n    return '';\n  }).join('');\n}\n"
        }
    ]
}