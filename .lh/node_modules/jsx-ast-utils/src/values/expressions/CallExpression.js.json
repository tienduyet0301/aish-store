{
    "sourceFile": "node_modules/jsx-ast-utils/src/values/expressions/CallExpression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892380667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Extractor function for a CallExpression type value node.\n * A call expression looks like `bar()`\n * This will return `bar` as the value to indicate its existence,\n * since we can not execute the function bar in a static environment.\n *\n * @param - value - AST Value object with type `CallExpression`\n * @returns - The extracted value converted to correct type.\n */\nexport default function extractValueFromCallExpression(value) {\n  // eslint-disable-next-line global-require\n  const getValue = require('.').default;\n  const args = Array.isArray(value.arguments) ? value.arguments.map((x) => getValue(x)).join(', ') : '';\n  return `${getValue(value.callee)}${value.optional ? '?.' : ''}(${args})`;\n}\n"
        }
    ]
}