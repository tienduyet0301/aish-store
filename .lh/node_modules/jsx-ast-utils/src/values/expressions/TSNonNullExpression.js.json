{
    "sourceFile": "node_modules/jsx-ast-utils/src/values/expressions/TSNonNullExpression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892381530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "const extractValueFromThisExpression = require('./ThisExpression').default;\nconst extractValueFromCallExpression = require('./CallExpression').default;\n\nfunction navigate(obj, prop, value) {\n  if (value.computed) {\n    return value.optional ? `${obj}?.[${prop}]` : `${obj}[${prop}]`;\n  }\n  return value.optional ? `${obj}?.${prop}` : `${obj}.${prop}`;\n}\n\n/**\n * Extractor function for a TSNonNullExpression type value node.\n * A TSNonNullExpression is accessing a TypeScript Non-Null Assertion\n * Operator !\n *\n * @param - value - AST Value object with type `TSNonNullExpression`\n * @returns - The extracted value converted to correct type\n *  and maintaing `obj.property` convention.\n */\nexport default function extractValueFromTSNonNullExpression(value) {\n  // eslint-disable-next-line global-require\n  // const getValue = require('.').default;\n  const errorMessage = 'The prop value with an expression type of TSNonNullExpression could not be resolved. Please file an issue ( https://github.com/jsx-eslint/jsx-ast-utils/issues/new ) to get this fixed immediately.';\n\n  // it's just the name\n  if (value.type === 'Identifier') {\n    const { name } = value;\n    return name;\n  }\n\n  if (value.type === 'Literal') {\n    return value.value;\n  }\n\n  if (value.type === 'TSAsExpression') {\n    return extractValueFromTSNonNullExpression(value.expression);\n  }\n\n  if (value.type === 'CallExpression') {\n    return extractValueFromCallExpression(value);\n  }\n\n  if (value.type === 'ThisExpression') {\n    return extractValueFromThisExpression();\n  }\n\n  // does not contains properties & is not parenthesized\n  if (value.type === 'TSNonNullExpression' && (!value.extra || value.extra.parenthesized === false)) {\n    const { expression } = value;\n    return `${extractValueFromTSNonNullExpression(expression)}${'!'}`;\n  }\n\n  // does not contains properties & is parenthesized\n  if (value.type === 'TSNonNullExpression' && value.extra && value.extra.parenthesized === true) {\n    const { expression } = value;\n    return `${'('}${extractValueFromTSNonNullExpression(expression)}${'!'}${')'}`;\n  }\n\n  if (value.type === 'MemberExpression') {\n    // contains a property & is not parenthesized\n    if ((!value.extra || value.extra.parenthesized === false)) {\n      return navigate(\n        extractValueFromTSNonNullExpression(value.object),\n        extractValueFromTSNonNullExpression(value.property),\n        value,\n      );\n    }\n\n    // contains a property & is parenthesized\n    if (value.extra && value.extra.parenthesized === true) {\n      const result = navigate(\n        extractValueFromTSNonNullExpression(value.object),\n        extractValueFromTSNonNullExpression(value.property),\n        value,\n      );\n      return `(${result})`;\n    }\n  }\n\n  // try to fail silently, if specs for TSNonNullExpression change\n  // not throw, only log error. Similar to how it was done previously\n  if (value.expression) {\n    let { expression } = value;\n    while (expression) {\n      if (expression.type === 'Identifier') {\n        // eslint-disable-next-line no-console\n        console.error(errorMessage);\n        return expression.name;\n      }\n      ({ expression } = expression);\n    }\n  }\n\n  // eslint-disable-next-line no-console\n  console.error(errorMessage);\n  return '';\n}\n"
        }
    ]
}