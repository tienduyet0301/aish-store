{
    "sourceFile": "node_modules/jsx-ast-utils/src/getProp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892380036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import propName from './propName';\n\nconst DEFAULT_OPTIONS = {\n  ignoreCase: true,\n};\n\n/**\n * Returns the JSXAttribute itself or undefined, indicating the prop\n * is not present on the JSXOpeningElement.\n *\n */\nexport default function getProp(props = [], prop = '', options = DEFAULT_OPTIONS) {\n  function getName(name) { return options.ignoreCase ? name.toUpperCase() : name; }\n  const propToFind = getName(prop);\n  function isPropToFind(property) {\n    return property.type === 'Property'\n      && property.key.type === 'Identifier'\n      && propToFind === getName(property.key.name);\n  }\n\n  const foundAttribute = props.find((attribute) => {\n    // If the props contain a spread prop, try to find the property in the object expression.\n    if (attribute.type === 'JSXSpreadAttribute') {\n      return attribute.argument.type === 'ObjectExpression'\n        && propToFind !== getName('key') // https://github.com/reactjs/rfcs/pull/107\n        && attribute.argument.properties.some(isPropToFind);\n    }\n\n    return propToFind === getName(propName(attribute));\n  });\n\n  if (foundAttribute && foundAttribute.type === 'JSXSpreadAttribute') {\n    return propertyToJSXAttribute(foundAttribute.argument.properties.find(isPropToFind));\n  }\n\n  return foundAttribute;\n}\n\nfunction propertyToJSXAttribute(node) {\n  const { key, value } = node;\n  return {\n    type: 'JSXAttribute',\n    name: { type: 'JSXIdentifier', name: key.name, ...getBaseProps(key) },\n    value: value.type === 'Literal'\n      ? adjustRangeOfNode(value)\n      : { type: 'JSXExpressionContainer', expression: adjustExpressionRange(value), ...getBaseProps(value) },\n    ...getBaseProps(node),\n  };\n}\n\nfunction adjustRangeOfNode(node) {\n  const [start, end] = node.range || [node.start, node.end];\n\n  return {\n    ...node,\n    end: undefined,\n    range: [start, end],\n    start: undefined,\n  };\n}\n\nfunction adjustExpressionRange({ expressions, quasis, ...expression }) {\n  return {\n    ...adjustRangeOfNode(expression),\n    ...(expressions ? { expressions: expressions.map(adjustRangeOfNode) } : {}),\n    ...(quasis ? { quasis: quasis.map(adjustRangeOfNode) } : {}),\n  };\n}\n\nfunction getBaseProps({ loc, ...node }) {\n  const { range } = adjustRangeOfNode(node);\n\n  return {\n    loc: getBaseLocation(loc),\n    range,\n  };\n}\n\nfunction getBaseLocation({\n  start,\n  end,\n  source,\n  filename,\n}) {\n  return {\n    start,\n    end,\n    ...(source !== undefined ? { source } : {}),\n    ...(filename !== undefined ? { filename } : {}),\n  };\n}\n"
        }
    ]
}