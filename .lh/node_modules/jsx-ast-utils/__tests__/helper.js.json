{
    "sourceFile": "node_modules/jsx-ast-utils/__tests__/helper.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892381958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint-env jest */\nimport getProp from '../src/getProp';\n\nconst nodeVersion = parseInt(process.version.match(/^v(\\d+)\\./)[1], 10);\n\nexport const fallbackToBabylon = nodeVersion < 6;\n\nlet parserName;\nconst babelParser = fallbackToBabylon ? require('babylon') : require('@babel/parser');\nconst flowParser = require('flow-parser');\n\nconst defaultPlugins = [\n  'jsx',\n  'functionBind',\n  'estree',\n  'objectRestSpread',\n  'optionalChaining',\n  // 'nullishCoalescing', // TODO: update to babel 7\n];\nlet plugins = [...defaultPlugins];\nlet isESM = false;\n\nexport function setParserName(name) {\n  parserName = name;\n}\n\nexport function changePlugins(pluginOrFn) {\n  if (Array.isArray(pluginOrFn)) {\n    plugins = pluginOrFn;\n  } else if (typeof pluginOrFn === 'function') {\n    plugins = pluginOrFn(plugins);\n  } else {\n    throw new Error('changePlugins argument should be either an array or a function');\n  }\n}\n\nexport function setIsESM() {\n  isESM = true;\n}\n\nbeforeEach(() => {\n  plugins = [...defaultPlugins];\n  isESM = false;\n});\n\nfunction parse(code) {\n  if (parserName === undefined) {\n    throw new Error('No parser specified');\n  }\n  if (parserName === 'babel') {\n    try {\n      return babelParser.parse(code, { plugins, sourceFilename: 'test.js', ...(isESM && { sourceType: 'module' }) });\n    } catch (_) {\n      // eslint-disable-next-line no-console\n      console.warn(`Failed to parse with ${fallbackToBabylon ? 'babylon' : 'Babel'} parser.`);\n    }\n  }\n  if (parserName === 'flow') {\n    try {\n      return flowParser.parse(code, { plugins });\n    } catch (_) {\n      // eslint-disable-next-line no-console\n      console.warn('Failed to parse with the Flow parser');\n    }\n  }\n  throw new Error(`The parser ${parserName} is not yet supported for testing.`);\n}\n\nexport function getOpeningElement(code) {\n  const parsedCode = parse(code);\n  let body;\n  if (parsedCode.program) {\n    // eslint-disable-next-line prefer-destructuring\n    body = parsedCode.program.body;\n  } else {\n    // eslint-disable-next-line prefer-destructuring\n    body = parsedCode.body;\n  }\n  if (Array.isArray(body) && body[0] != null) {\n    const [{ expression }] = body;\n    return expression.type === 'JSXFragment' ? expression.openingFragment : expression.openingElement;\n  }\n\n  return null;\n}\n\nexport function extractProp(code, prop = 'foo') {\n  const node = getOpeningElement(code);\n  const { attributes: props } = node;\n  return getProp(props, prop);\n}\n\nexport const describeIfNotBabylon = fallbackToBabylon ? describe.skip : describe;\n"
        }
    ]
}