{
    "sourceFile": "node_modules/jsx-ast-utils/__tests__/src/getProp-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892382118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport getProp from '../../src/getProp';\n\ndescribe('getProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getProp;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if no arguments are provided', () => {\n    const expected = undefined;\n    const actual = getProp();\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if the attribute is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'ID';\n\n    const expected = 'id';\n    const actual = getProp(props, prop).name.name;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread as an expression', () => {\n    const code = '<div {...{ id }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = 'id';\n    const actual = getProp(props, prop);\n    const actualName = actual.name.name;\n    const actualValue = actual.value.expression.name;\n\n    assert.equal(actualName, expected);\n    assert.equal(actualValue, expected);\n  });\n\n  it('should return the correct attribute if the attribute exists in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = { ignoreCase: false };\n\n    const expected = 'id';\n    const actual = getProp(props, prop, options).name.name;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if the attribute does not exist in spread (case sensitive)', () => {\n    const code = '<div {...{ id: \"foo\" }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'ID';\n    const options = { ignoreCase: false };\n\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined for key in spread', () => {\n    // https://github.com/reactjs/rfcs/pull/107\n    const code = '<div {...{ key }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'key';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined if the attribute may exist in spread', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = undefined;\n    const actual = getProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should not crash if the spread contains a spread', () => {\n    const code = '<div {...{ ...props }} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    getProp(props, prop);\n  });\n\n  it('should return undefined if the attribute is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = undefined;\n    const actual = getProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n});\n"
        }
    ]
}