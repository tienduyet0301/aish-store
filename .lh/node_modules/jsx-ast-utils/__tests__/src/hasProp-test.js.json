{
    "sourceFile": "node_modules/jsx-ast-utils/__tests__/src/hasProp-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892382341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint-env mocha */\nimport assert from 'assert';\nimport { getOpeningElement, setParserName } from '../helper';\nimport hasProp, { hasAnyProp, hasEveryProp } from '../../src/hasProp';\n\ndescribe('hasProp', () => {\n  beforeEach(() => {\n    setParserName('babel');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasProp;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if no arguments are provided', () => {\n    const expected = false;\n    const actual = hasProp();\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = false;\n    const actual = hasProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = true;\n    const actual = hasProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if the prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n});\n\ndescribe('hasAnyProp tests', () => {\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasAnyProp;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if no arguments are provided', () => {\n    const expected = false;\n    const actual = hasAnyProp();\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = false;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if all props are absent in array', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = ['id', 'className'];\n\n    const expected = false;\n    const actual = hasAnyProp(props, propsToCheck);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if all props are absent in space delimited string', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = 'id className';\n\n    const expected = false;\n    const actual = hasAnyProp(props, propsToCheck);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if any prop exists in array', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['className', 'id'];\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if any prop exists in space delimited string', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'className id';\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if the prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if any prop may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'className'];\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if all props are considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'iD', 'className'];\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasAnyProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n});\n\ndescribe('hasEveryProp tests', () => {\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof hasEveryProp;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if no arguments are provided', () => {\n    const expected = true;\n    const actual = hasEveryProp();\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if the prop is absent', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = false;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if any props are absent in array', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = ['id', 'className'];\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if all props are absent in array', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = ['id', 'className'];\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if any props are absent in space delimited string', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = 'id className';\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if all props are absent in space delimited string', () => {\n    const code = '<div />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const propsToCheck = 'id className';\n\n    const expected = false;\n    const actual = hasEveryProp(props, propsToCheck);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if the prop exists', () => {\n    const code = '<div id=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if all props exist in array', () => {\n    const code = '<div id=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['className', 'id'];\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if all props exist in space delimited string', () => {\n    const code = '<div id=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'className id';\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if the props may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if all props may exist in spread loose mode', () => {\n    const code = '<div {...props} />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'className'];\n    const options = {\n      spreadStrict: false,\n    };\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if the prop is considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = 'id';\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return false if all props are considered absent in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['id', 'iD', 'className'];\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = false;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return true if all props are considered present in case-sensitive mode', () => {\n    const code = '<div ID=\"foo\" className=\"box\" />';\n    const node = getOpeningElement(code);\n    const { attributes: props } = node;\n    const prop = ['ID', 'className'];\n    const options = {\n      ignoreCase: false,\n    };\n\n    const expected = true;\n    const actual = hasEveryProp(props, prop, options);\n\n    assert.equal(actual, expected);\n  });\n});\n"
        }
    ]
}