{
    "sourceFile": "node_modules/jsx-ast-utils/__tests__/src/getPropLiteralValue-flowparser-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892382203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint-env mocha */\n/* eslint no-template-curly-in-string: 0 */\nimport assert from 'assert';\nimport {\n  extractProp,\n  describeIfNotBabylon,\n  changePlugins,\n  setParserName,\n} from '../helper';\nimport { getLiteralPropValue } from '../../src/getPropValue';\n\ndescribe('getLiteralPropValue', () => {\n  beforeEach(() => {\n    setParserName('flow');\n  });\n  it('should export a function', () => {\n    const expected = 'function';\n    const actual = typeof getLiteralPropValue;\n\n    assert.equal(actual, expected);\n  });\n\n  it('should return undefined when not provided with a JSXAttribute', () => {\n    const expected = undefined;\n    const actual = getLiteralPropValue(1);\n\n    assert.equal(actual, expected);\n  });\n\n  it('should not throw error when trying to get value from unknown node type', () => {\n    const prop = {\n      type: 'JSXAttribute',\n      value: {\n        type: 'JSXExpressionContainer',\n      },\n    };\n    let counter = 0;\n    // eslint-disable-next-line no-console\n    const errorOrig = console.error;\n    // eslint-disable-next-line no-console\n    console.error = () => {\n      counter += 1;\n    };\n    let value;\n    assert.doesNotThrow(() => {\n      value = getLiteralPropValue(prop);\n    }, Error);\n\n    assert.equal(null, value);\n    assert.equal(counter, 1);\n    // eslint-disable-next-line no-console\n    console.error = errorOrig;\n  });\n\n  describe('Null', () => {\n    it('should return true when no value is given', () => {\n      const prop = extractProp('<div foo />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Literal', () => {\n    it('should return correct string if value is a string', () => {\n      const prop = extractProp('<div foo=\"bar\" />');\n\n      const expected = 'bar';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return correct string if value is a string expression', () => {\n      const prop = extractProp('<div foo={\"bar\"} />');\n\n      const expected = 'bar';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return correct integer if value is a integer expression', () => {\n      const prop = extractProp('<div foo={1} />');\n\n      const expected = 1;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should convert \"true\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"true\" />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should convert \"TrUE\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"TrUE\" />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should convert \"false\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"false\" />');\n\n      const expected = false;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should convert \"FaLsE\" to boolean type', () => {\n      const prop = extractProp('<div foo=\"FaLsE\" />');\n\n      const expected = false;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return String null when value is null', () => {\n      const prop = extractProp('<div foo={null} />');\n\n      const expected = 'null';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('JSXElement', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={<bar />} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Identifier', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return undefined when identifier is literally `undefined`', () => {\n      const prop = extractProp('<div foo={undefined} />');\n\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={`bar ${baz}`} />');\n\n      const expected = 'bar {baz}';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={`bar ${undefined}`} />');\n\n      const expected = 'bar undefined';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Tagged Template literal', () => {\n    it('should return template literal with vars wrapped in curly braces', () => {\n      const prop = extractProp('<div foo={noop`bar ${baz}`} />');\n\n      const expected = 'bar {baz}';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string \"undefined\" for expressions that evaluate to undefined', () => {\n      const prop = extractProp('<div foo={noop`bar ${undefined}`} />');\n\n      const expected = 'bar undefined';\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Arrow function expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ () => { return \"bar\"; }} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Function expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ function() { return \"bar\"; } } />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Logical expression', () => {\n    it('should return null for && operator', () => {\n      const prop = extractProp('<div foo={bar && baz} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return null for || operator', () => {\n      const prop = extractProp('<div foo={bar || baz} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Member expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar.baz} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Call expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar()} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Unary expression', () => {\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-bar} />');\n\n      // -\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with -', () => {\n      const prop = extractProp('<div foo={-42} />');\n\n      const expected = -42;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+bar} />');\n\n      // +\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with +', () => {\n      const prop = extractProp('<div foo={+42} />');\n\n      const expected = 42;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with !', () => {\n      const prop = extractProp('<div foo={!bar} />');\n\n      const expected = false; // !\"bar\" === false\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with ~', () => {\n      const prop = extractProp('<div foo={~bar} />');\n\n      const expected = -1; // ~\"bar\" === -1\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return true when evaluating `delete foo`', () => {\n      const prop = extractProp('<div foo={delete x} />');\n\n      const expected = true;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return undefined when evaluating `void foo`', () => {\n      const prop = extractProp('<div foo={void x} />');\n\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    // TODO: We should fix this to check to see if we can evaluate it.\n    it('should return undefined when evaluating `typeof foo`', () => {\n      const prop = extractProp('<div foo={typeof x} />');\n\n      const expected = undefined;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Update expression', () => {\n    it('should correctly evaluate an expression that prefixes with ++', () => {\n      const prop = extractProp('<div foo={++bar} />');\n\n      // ++\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that prefixes with --', () => {\n      const prop = extractProp('<div foo={--bar} />');\n\n      // --\"bar\" => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that suffixes with ++', () => {\n      const prop = extractProp('<div foo={bar++} />');\n\n      // \"bar\"++ => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n\n    it('should correctly evaluate an expression that suffixes with --', () => {\n      const prop = extractProp('<div foo={bar--} />');\n\n      // \"bar\"-- => NaN\n      const expected = true;\n      const actual = Number.isNaN(getLiteralPropValue(prop));\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('This expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={this} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Conditional expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={bar ? baz : bam} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Binary expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={1 == \"1\"} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n\n  describe('Object expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={ { bar: \"baz\" } } />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describe('New expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={new Bar()} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describe('Array expression', () => {\n    it('should evaluate to correct representation of the the array in props', () => {\n      const prop = extractProp('<div foo={[\"bar\", 42, null]} />');\n\n      const expected = ['bar', 42];\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  it('should return an empty array provided an empty array in props', () => {\n    const prop = extractProp('<div foo={[]} />');\n\n    const expected = [];\n    const actual = getLiteralPropValue(prop);\n\n    assert.deepEqual(actual, expected);\n  });\n\n  describe('Bind expression', () => {\n    it('should return null', () => {\n      const prop = extractProp('<div foo={::this.handleClick} />');\n\n      const expected = 'null';\n      const actual = getLiteralPropValue(prop);\n\n      assert.deepEqual(actual, expected);\n    });\n  });\n\n  describeIfNotBabylon('Typescript', () => {\n    beforeEach(() => {\n      changePlugins((pls) => [...pls, 'typescript']);\n    });\n\n    it('should return string representation of variable identifier wrapped in a Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={bar!} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string representation of variable identifier wrapped in a deep Typescript non-null assertion', () => {\n      const prop = extractProp('<div foo={(bar!)!} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n\n    it('should return string representation of variable identifier wrapped in a Typescript type coercion', () => {\n      changePlugins((pls) => [...pls, 'typescript']);\n      const prop = extractProp('<div foo={bar as any} />');\n\n      const expected = null;\n      const actual = getLiteralPropValue(prop);\n\n      assert.equal(actual, expected);\n    });\n  });\n});\n"
        }
    ]
}