{
    "sourceFile": "node_modules/reusify/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893016601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict'\n\nvar test = require('tape')\nvar reusify = require('./')\n\ntest('reuse objects', function (t) {\n  t.plan(6)\n\n  function MyObject () {\n    t.pass('constructor called')\n    this.next = null\n  }\n\n  var instance = reusify(MyObject)\n  var obj = instance.get()\n\n  t.notEqual(obj, instance.get(), 'two instance created')\n  t.notOk(obj.next, 'next must be null')\n\n  instance.release(obj)\n\n  // the internals keeps a hot copy ready for reuse\n  // putting this one back in the queue\n  instance.release(instance.get())\n\n  // comparing the old one with the one we got\n  // never do this in real code, after release you\n  // should never reuse that instance\n  t.equal(obj, instance.get(), 'instance must be reused')\n})\n\ntest('reuse more than 2 objects', function (t) {\n  function MyObject () {\n    t.pass('constructor called')\n    this.next = null\n  }\n\n  var instance = reusify(MyObject)\n  var obj = instance.get()\n  var obj2 = instance.get()\n  var obj3 = instance.get()\n\n  t.notOk(obj.next, 'next must be null')\n  t.notOk(obj2.next, 'next must be null')\n  t.notOk(obj3.next, 'next must be null')\n\n  t.notEqual(obj, obj2)\n  t.notEqual(obj, obj3)\n  t.notEqual(obj3, obj2)\n\n  instance.release(obj)\n  instance.release(obj2)\n  instance.release(obj3)\n\n  // skip one\n  instance.get()\n\n  var obj4 = instance.get()\n  var obj5 = instance.get()\n  var obj6 = instance.get()\n\n  t.equal(obj4, obj)\n  t.equal(obj5, obj2)\n  t.equal(obj6, obj3)\n  t.end()\n})\n"
        }
    ]
}