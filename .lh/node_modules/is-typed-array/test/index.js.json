{
    "sourceFile": "node_modules/is-typed-array/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892343551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar isTypedArray = require('../');\nvar isCallable = require('is-callable');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar generators = require('make-generator-function')();\nvar arrowFn = require('make-arrow-function')();\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\n\nvar typedArrayNames = [\n\t'Int8Array',\n\t'Uint8Array',\n\t'Uint8ClampedArray',\n\t'Int16Array',\n\t'Uint16Array',\n\t'Int32Array',\n\t'Uint32Array',\n\t'Float32Array',\n\t'Float64Array',\n\t'BigInt64Array',\n\t'BigUint64Array'\n];\n\ntest('not arrays', function (t) {\n\tt.test('non-number/string primitives', function (st) {\n\t\t// @ts-expect-error Expected 1 arguments, but got 0.ts(2554)\n\t\tst.notOk(isTypedArray(), 'undefined is not typed array');\n\t\tst.notOk(isTypedArray(null), 'null is not typed array');\n\t\tst.notOk(isTypedArray(false), 'false is not typed array');\n\t\tst.notOk(isTypedArray(true), 'true is not typed array');\n\t\tst.end();\n\t});\n\n\tt.notOk(isTypedArray({}), 'object is not typed array');\n\tt.notOk(isTypedArray(/a/g), 'regex literal is not typed array');\n\tt.notOk(isTypedArray(new RegExp('a', 'g')), 'regex object is not typed array');\n\tt.notOk(isTypedArray(new Date()), 'new Date() is not typed array');\n\n\tt.test('numbers', function (st) {\n\t\tst.notOk(isTypedArray(42), 'number is not typed array');\n\t\tst.notOk(isTypedArray(Object(42)), 'number object is not typed array');\n\t\tst.notOk(isTypedArray(NaN), 'NaN is not typed array');\n\t\tst.notOk(isTypedArray(Infinity), 'Infinity is not typed array');\n\t\tst.end();\n\t});\n\n\tt.test('strings', function (st) {\n\t\tst.notOk(isTypedArray('foo'), 'string primitive is not typed array');\n\t\tst.notOk(isTypedArray(Object('foo')), 'string object is not typed array');\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n\ntest('Functions', function (t) {\n\tt.notOk(isTypedArray(function () {}), 'function is not typed array');\n\tt.end();\n});\n\ntest('Generators', { skip: generators.length === 0 }, function (t) {\n\tforEach(generators, function (genFn) {\n\t\tt.notOk(isTypedArray(genFn), 'generator function ' + inspect(genFn) + ' is not typed array');\n\t});\n\tt.end();\n});\n\ntest('Arrow functions', { skip: !arrowFn }, function (t) {\n\tt.notOk(isTypedArray(arrowFn), 'arrow function is not typed array');\n\tt.end();\n});\n\ntest('@@toStringTag', { skip: !hasToStringTag }, function (t) {\n\tforEach(typedArrayNames, function (typedArray) {\n\t\t// @ts-expect-error\n\t\tif (typeof global[typedArray] === 'function') {\n\t\t\t// @ts-expect-error\n\t\t\tvar fakeTypedArray = [];\n\t\t\t// @ts-expect-error\n\t\t\tfakeTypedArray[Symbol.toStringTag] = typedArray;\n\t\t\t// @ts-expect-error\n\t\t\tt.notOk(isTypedArray(fakeTypedArray), 'faked ' + typedArray + ' is not typed array');\n\t\t} else {\n\t\t\tt.comment('# SKIP ' + typedArray + ' is not supported');\n\t\t}\n\t});\n\tt.end();\n});\n\ntest('non-Typed Arrays', function (t) {\n\tt.notOk(isTypedArray([]), '[] is not typed array');\n\tt.end();\n});\n\n/** @typedef {Int8ArrayConstructor | Uint8ArrayConstructor | Uint8ClampedArrayConstructor | Int16ArrayConstructor | Uint16ArrayConstructor | Int32ArrayConstructor | Uint32ArrayConstructor | Float32ArrayConstructor | Float64ArrayConstructor | BigInt64ArrayConstructor | BigUint64ArrayConstructor} TypedArrayConstructor */\n\ntest('Typed Arrays', function (t) {\n\tforEach(typedArrayNames, function (typedArray) {\n\t\t// @ts-expect-error\n\t\t/** @type {TypedArrayConstructor} */ var TypedArray = global[typedArray];\n\t\tif (isCallable(TypedArray)) {\n\t\t\tvar arr = new TypedArray(10);\n\t\t\tt.ok(isTypedArray(arr), 'new ' + typedArray + '(10) is typed array');\n\t\t} else {\n\t\t\tt.comment('# SKIP ' + typedArray + ' is not supported');\n\t\t}\n\t});\n\tt.end();\n});\n"
        }
    ]
}