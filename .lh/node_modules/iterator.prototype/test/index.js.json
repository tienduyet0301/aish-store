{
    "sourceFile": "node_modules/iterator.prototype/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892355051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar hasSymbols = require('has-symbols')();\nvar getProto = require('get-proto');\n\nvar iterProto = require('../');\n\ntest('Iterator.prototype', function (t) {\n\tt.ok(iterProto, 'is truthy');\n\tt.equal(typeof iterProto, 'object', 'is an object');\n\tt.notEqual(iterProto, Object.prototype, 'is not Object.prototype');\n\n\tt.test('Symbol.iterator', { skip: !hasSymbols }, function (st) {\n\t\tvar fn = iterProto[Symbol.iterator];\n\n\t\tst.equal(typeof fn, 'function', 'Symbol.iterator is a function');\n\n\t\tvar sentinel = {};\n\t\tst.equal(\n\t\t\tfn.call(sentinel),\n\t\t\tsentinel,\n\t\t\t'Symbol.iterator returns receiver'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('Array keys', { skip: typeof [].keys !== 'function' }, function (st) {\n\t\tvar grandProto = getProto(getProto([].keys()));\n\t\tst.equal(\n\t\t\tgrandProto,\n\t\t\titerProto,\n\t\t\t'ArrayIterator [[Prototype]] is Iterator.prototype',\n\t\t\t{ skip: grandProto === Object.prototype && 'this environment lacks Iterator.prototype' }\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('Set keys', { skip: typeof Set !== 'function' || typeof Set.prototype.keys !== 'function' }, function (st) {\n\t\tvar grandProto = getProto(getProto(new Set().keys()));\n\t\tst.equal(\n\t\t\tgrandProto,\n\t\t\titerProto,\n\t\t\t'SetIterator [[Prototype]] is Iterator.prototype',\n\t\t\t{ skip: grandProto === Object.prototype && 'this environment lacks Iterator.prototype' }\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}