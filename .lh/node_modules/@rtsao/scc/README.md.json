{
    "sourceFile": "node_modules/@rtsao/scc/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891923403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# `@rtsao/scc`\n\nFind strongly connected components of a directed graph using [Tarjan's algorithm](https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm).\n\nThis algorithm efficiently yields both a topological order and list of any cycles.\n\n## Installation\n\n```\nyarn add @rtsao/scc\n```\n\n```\nnpm install @rtsao/scc\n```\n\n## Usage\n\n```js\nconst scc = require(\"@rtsao/scc\");\n\nconst digraph = new Map([\n  [\"a\", new Set([\"c\", \"d\"])],\n  [\"b\", new Set([\"a\"])],\n  [\"c\", new Set([\"b\"])],\n  [\"d\", new Set([\"e\"])],\n  [\"e\", new Set()]\n]);\n\nconst components = scc(digraph);\n// [ Set { 'e' }, Set { 'd' }, Set { 'b', 'c', 'a' } ]\n```\n\n#### Illustration of example input digraph\n```\n┌───┐     ┌───┐\n│ d │ ◀── │ a │ ◀┐\n└───┘     └───┘  │\n  │         │    │\n  ▼         ▼    │\n┌───┐     ┌───┐  │\n│ e │     │ c │  │\n└───┘     └───┘  │\n            │    │\n            ▼    │\n          ┌───┐  │\n          │ b │ ─┘\n          └───┘\n```\n"
        }
    ]
}