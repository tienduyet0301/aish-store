{
    "sourceFile": "node_modules/@types/estree/flow.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891953868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare namespace ESTree {\n    interface FlowTypeAnnotation extends Node {}\n\n    interface FlowBaseTypeAnnotation extends FlowTypeAnnotation {}\n\n    interface FlowLiteralTypeAnnotation extends FlowTypeAnnotation, Literal {}\n\n    interface FlowDeclaration extends Declaration {}\n\n    interface AnyTypeAnnotation extends FlowBaseTypeAnnotation {}\n\n    interface ArrayTypeAnnotation extends FlowTypeAnnotation {\n        elementType: FlowTypeAnnotation;\n    }\n\n    interface BooleanLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}\n\n    interface BooleanTypeAnnotation extends FlowBaseTypeAnnotation {}\n\n    interface ClassImplements extends Node {\n        id: Identifier;\n        typeParameters?: TypeParameterInstantiation | null;\n    }\n\n    interface ClassProperty {\n        key: Expression;\n        value?: Expression | null;\n        typeAnnotation?: TypeAnnotation | null;\n        computed: boolean;\n        static: boolean;\n    }\n\n    interface DeclareClass extends FlowDeclaration {\n        id: Identifier;\n        typeParameters?: TypeParameterDeclaration | null;\n        body: ObjectTypeAnnotation;\n        extends: InterfaceExtends[];\n    }\n\n    interface DeclareFunction extends FlowDeclaration {\n        id: Identifier;\n    }\n\n    interface DeclareModule extends FlowDeclaration {\n        id: Literal | Identifier;\n        body: BlockStatement;\n    }\n\n    interface DeclareVariable extends FlowDeclaration {\n        id: Identifier;\n    }\n\n    interface FunctionTypeAnnotation extends FlowTypeAnnotation {\n        params: FunctionTypeParam[];\n        returnType: FlowTypeAnnotation;\n        rest?: FunctionTypeParam | null;\n        typeParameters?: TypeParameterDeclaration | null;\n    }\n\n    interface FunctionTypeParam {\n        name: Identifier;\n        typeAnnotation: FlowTypeAnnotation;\n        optional: boolean;\n    }\n\n    interface GenericTypeAnnotation extends FlowTypeAnnotation {\n        id: Identifier | QualifiedTypeIdentifier;\n        typeParameters?: TypeParameterInstantiation | null;\n    }\n\n    interface InterfaceExtends extends Node {\n        id: Identifier | QualifiedTypeIdentifier;\n        typeParameters?: TypeParameterInstantiation | null;\n    }\n\n    interface InterfaceDeclaration extends FlowDeclaration {\n        id: Identifier;\n        typeParameters?: TypeParameterDeclaration | null;\n        extends: InterfaceExtends[];\n        body: ObjectTypeAnnotation;\n    }\n\n    interface IntersectionTypeAnnotation extends FlowTypeAnnotation {\n        types: FlowTypeAnnotation[];\n    }\n\n    interface MixedTypeAnnotation extends FlowBaseTypeAnnotation {}\n\n    interface NullableTypeAnnotation extends FlowTypeAnnotation {\n        typeAnnotation: TypeAnnotation;\n    }\n\n    interface NumberLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}\n\n    interface NumberTypeAnnotation extends FlowBaseTypeAnnotation {}\n\n    interface StringLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}\n\n    interface StringTypeAnnotation extends FlowBaseTypeAnnotation {}\n\n    interface TupleTypeAnnotation extends FlowTypeAnnotation {\n        types: FlowTypeAnnotation[];\n    }\n\n    interface TypeofTypeAnnotation extends FlowTypeAnnotation {\n        argument: FlowTypeAnnotation;\n    }\n\n    interface TypeAlias extends FlowDeclaration {\n        id: Identifier;\n        typeParameters?: TypeParameterDeclaration | null;\n        right: FlowTypeAnnotation;\n    }\n\n    interface TypeAnnotation extends Node {\n        typeAnnotation: FlowTypeAnnotation;\n    }\n\n    interface TypeCastExpression extends Expression {\n        expression: Expression;\n        typeAnnotation: TypeAnnotation;\n    }\n\n    interface TypeParameterDeclaration extends Node {\n        params: Identifier[];\n    }\n\n    interface TypeParameterInstantiation extends Node {\n        params: FlowTypeAnnotation[];\n    }\n\n    interface ObjectTypeAnnotation extends FlowTypeAnnotation {\n        properties: ObjectTypeProperty[];\n        indexers: ObjectTypeIndexer[];\n        callProperties: ObjectTypeCallProperty[];\n    }\n\n    interface ObjectTypeCallProperty extends Node {\n        value: FunctionTypeAnnotation;\n        static: boolean;\n    }\n\n    interface ObjectTypeIndexer extends Node {\n        id: Identifier;\n        key: FlowTypeAnnotation;\n        value: FlowTypeAnnotation;\n        static: boolean;\n    }\n\n    interface ObjectTypeProperty extends Node {\n        key: Expression;\n        value: FlowTypeAnnotation;\n        optional: boolean;\n        static: boolean;\n    }\n\n    interface QualifiedTypeIdentifier extends Node {\n        qualification: Identifier | QualifiedTypeIdentifier;\n        id: Identifier;\n    }\n\n    interface UnionTypeAnnotation extends FlowTypeAnnotation {\n        types: FlowTypeAnnotation[];\n    }\n\n    interface VoidTypeAnnotation extends FlowBaseTypeAnnotation {}\n}\n"
        }
    ]
}