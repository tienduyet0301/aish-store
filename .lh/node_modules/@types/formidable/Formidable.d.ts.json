{
    "sourceFile": "node_modules/@types/formidable/Formidable.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891954042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Docs: https://github.com/node-formidable/formidable/blob/master/src/Formidable.js#L45\n */\n\nimport { IncomingMessage } from \"http\";\nimport { EventEmitter } from \"stream\";\nimport { DefaultOptions, EmitData, EventData, Fields, File, Files, Options, Part, PluginFunction } from \"./\";\n\ndeclare class IncomingForm extends EventEmitter {\n    static readonly DEFAULT_OPTIONS: DefaultOptions;\n    constructor(options?: Partial<Options>);\n\n    /**\n     * Parses an incoming Node.js request containing form data. If callback is provided, all fields\n     * and files are collected and passed to the callback.\n     *\n     * @link https://github.com/node-formidable/formidable#parserequest-callback\n     */\n    parse<FieldKey extends string, FileKey extends string>(\n        request: IncomingMessage,\n    ): Promise<[Fields<FieldKey>, Files<FileKey>]>;\n    parse<FieldKey extends string, FileKey extends string>(\n        request: IncomingMessage,\n        callback?: (err: any, fields: Fields<FieldKey>, files: Files<FileKey>) => void,\n    ): void;\n\n    once(eventName: \"end\", listener: () => void): this;\n    once(eventName: \"error\", listener: (err: any) => void): this;\n\n    on(eventName: \"data\", listener: (data: EventData) => void): this;\n    on(eventName: \"error\", listener: (err: any) => void): this;\n    on(eventName: \"field\", listener: (name: string, value: string) => void): this;\n    on(eventName: \"fileBegin\" | \"file\", listener: (formName: string, file: File) => void): this;\n    on(eventName: \"progress\", listener: (bytesReceived: number, bytesExpected: number) => void): this;\n    on(eventName: string, listener: () => void): this;\n\n    emit(eventName: \"data\", data: EmitData): boolean;\n\n    /**\n     * A method that allows you to extend the Formidable library. By default we include 4 plugins,\n     * which essentially are adapters to plug the different built-in parsers.\n     *\n     * @link https://github.com/node-formidable/formidable#useplugin-plugin\n     */\n    use(plugin: PluginFunction): void;\n\n    /**\n     * If you want to use Formidable to only handle certain parts for you, you can do something\n     * similar. Or see #387 for inspiration, you can for example validate the mime-type.\n     *\n     * @link https://github.com/node-formidable/formidable#formonpart\n     */\n    onPart(part: Part): void;\n\n    _handlePart(part: Part): void;\n}\n\nexport = IncomingForm;\n"
        }
    ]
}