{
    "sourceFile": "node_modules/@types/formidable/parsers/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891954145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { PassThrough, Transform } from \"stream\";\nimport { IncomingForm, Options } from \"../\";\n\nexport class MultipartParser extends Transform {\n    constructor(options?: Partial<Options>);\n    _final(callback: () => void): void;\n    _handleCallback(name: string, buffer: Buffer, start?: number, end?: number): void;\n    _transform(buffer: Buffer, _: any, callback: () => void): number;\n    explain(): string;\n    initWithBoundary(str: string): void;\n\n    static stateToString: (stateNumber: number) => string;\n\n    static STATES: Record<\n        | \"PARSER_UNINITIALIZED\"\n        | \"START\"\n        | \"START_BOUNDARY\"\n        | \"HEADER_FIELD_START\"\n        | \"HEADER_FIELD\"\n        | \"HEADER_VALUE_START\"\n        | \"HEADER_VALUE\"\n        | \"HEADER_VALUE_ALMOST_DONE\"\n        | \"HEADERS_ALMOST_DONE\"\n        | \"PART_DATA_START\"\n        | \"PART_DATA\"\n        | \"PART_END\"\n        | \"END\",\n        number\n    >;\n}\n\nexport class OctetStreamParser extends PassThrough {\n    constructor(options?: Partial<Options>);\n}\n\nexport class QuerystringParser extends Transform {\n    constructor(options?: Partial<Options>);\n    _flush(callback: () => void): void;\n    _transform(buffer: Buffer, encoding: BufferEncoding, callback: () => void): void;\n}\n\nexport class StreamingQuerystring extends QuerystringParser {\n    emitField(key: string, val?: string): void;\n    getSection(buffer: Buffer, i: number): string;\n}\n\nexport class DummyParser extends Transform {\n    constructor(incomingForm: typeof IncomingForm, options?: Partial<Options>);\n    _flush(callback: () => void): void;\n}\n\nexport class JSONParser extends Transform {\n    constructor(options?: Partial<Options>);\n    _flush(callback: () => void): void;\n    _transform(chunk: any, encoding: BufferEncoding, callback: () => void): void;\n}\n"
        }
    ]
}