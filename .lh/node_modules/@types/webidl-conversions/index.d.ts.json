{
    "sourceFile": "node_modules/@types/webidl-conversions/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891957097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare namespace WebIDLConversions {\n    interface Globals {\n        [key: string]: unknown;\n\n        Number: (value?: unknown) => number;\n        String: (value?: unknown) => string;\n        TypeError: new(message?: string) => TypeError;\n    }\n\n    interface Options {\n        context?: string | undefined;\n        globals?: Globals | undefined;\n    }\n\n    interface IntegerOptions extends Options {\n        enforceRange?: boolean | undefined;\n        clamp?: boolean | undefined;\n    }\n\n    interface StringOptions extends Options {\n        treatNullAsEmptyString?: boolean | undefined;\n    }\n\n    interface BufferSourceOptions extends Options {\n        allowShared?: boolean | undefined;\n    }\n\n    type IntegerConversion = (V: unknown, opts?: IntegerOptions) => number;\n    type StringConversion = (V: unknown, opts?: StringOptions) => string;\n    type NumberConversion = (V: unknown, opts?: Options) => number;\n}\n\ndeclare const WebIDLConversions: {\n    any<V>(V: V, opts?: WebIDLConversions.Options): V;\n    undefined(V?: unknown, opts?: WebIDLConversions.Options): void;\n    boolean(V: unknown, opts?: WebIDLConversions.Options): boolean;\n\n    byte(V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n    octet(V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n\n    short(V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n    [\"unsigned short\"](V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n\n    long(V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n    [\"unsigned long\"](V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n\n    [\"long long\"](V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n    [\"unsigned long long\"](V: unknown, opts?: WebIDLConversions.IntegerOptions): number;\n\n    double(V: unknown, opts?: WebIDLConversions.Options): number;\n    [\"unrestricted double\"](V: unknown, opts?: WebIDLConversions.Options): number;\n\n    float(V: unknown, opts?: WebIDLConversions.Options): number;\n    [\"unrestricted float\"](V: unknown, opts?: WebIDLConversions.Options): number;\n\n    DOMString(V: unknown, opts?: WebIDLConversions.StringOptions): string;\n    ByteString(V: unknown, opts?: WebIDLConversions.StringOptions): string;\n    USVString(V: unknown, opts?: WebIDLConversions.StringOptions): string;\n\n    object<V>(V: V, opts?: WebIDLConversions.Options): V extends object ? V : V & object;\n    ArrayBuffer(\n        V: unknown,\n        opts?: WebIDLConversions.BufferSourceOptions & { allowShared?: false | undefined },\n    ): ArrayBuffer;\n    ArrayBuffer(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): ArrayBufferLike;\n    DataView(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): DataView;\n\n    Int8Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Int8Array;\n    Int16Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Int16Array;\n    Int32Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Int32Array;\n\n    Uint8Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Uint8Array;\n    Uint16Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Uint16Array;\n    Uint32Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Uint32Array;\n    Uint8ClampedArray(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Uint8ClampedArray;\n\n    Float32Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Float32Array;\n    Float64Array(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): Float64Array;\n\n    ArrayBufferView(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): ArrayBufferView;\n    BufferSource(\n        V: unknown,\n        opts?: WebIDLConversions.BufferSourceOptions & { allowShared?: false | undefined },\n    ): ArrayBuffer | ArrayBufferView;\n    BufferSource(V: unknown, opts?: WebIDLConversions.BufferSourceOptions): ArrayBufferLike | ArrayBufferView;\n\n    DOMTimeStamp(V: unknown, opts?: WebIDLConversions.Options): number;\n};\n\n// This can't use ES6 style exports, as those can't have spaces in export names.\nexport = WebIDLConversions;\n"
        }
    ]
}