{
    "sourceFile": "node_modules/@types/node/repl.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:repl` module provides a Read-Eval-Print-Loop (REPL) implementation\n * that is available both as a standalone program or includible in other\n * applications. It can be accessed using:\n *\n * ```js\n * import repl from 'node:repl';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/repl.js)\n */\ndeclare module \"repl\" {\n    import { AsyncCompleter, Completer, Interface } from \"node:readline\";\n    import { Context } from \"node:vm\";\n    import { InspectOptions } from \"node:util\";\n    interface ReplOptions {\n        /**\n         * The input prompt to display.\n         * @default \"> \"\n         */\n        prompt?: string | undefined;\n        /**\n         * The `Readable` stream from which REPL input will be read.\n         * @default process.stdin\n         */\n        input?: NodeJS.ReadableStream | undefined;\n        /**\n         * The `Writable` stream to which REPL output will be written.\n         * @default process.stdout\n         */\n        output?: NodeJS.WritableStream | undefined;\n        /**\n         * If `true`, specifies that the output should be treated as a TTY terminal, and have\n         * ANSI/VT100 escape codes written to it.\n         * Default: checking the value of the `isTTY` property on the output stream upon\n         * instantiation.\n         */\n        terminal?: boolean | undefined;\n        /**\n         * The function to be used when evaluating each given line of input.\n         * Default: an async wrapper for the JavaScript `eval()` function. An `eval` function can\n         * error with `repl.Recoverable` to indicate the input was incomplete and prompt for\n         * additional lines.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_default_evaluation\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_custom_evaluation_functions\n         */\n        eval?: REPLEval | undefined;\n        /**\n         * Defines if the repl prints output previews or not.\n         * @default `true` Always `false` in case `terminal` is falsy.\n         */\n        preview?: boolean | undefined;\n        /**\n         * If `true`, specifies that the default `writer` function should include ANSI color\n         * styling to REPL output. If a custom `writer` function is provided then this has no\n         * effect.\n         * @default the REPL instance's `terminal` value\n         */\n        useColors?: boolean | undefined;\n        /**\n         * If `true`, specifies that the default evaluation function will use the JavaScript\n         * `global` as the context as opposed to creating a new separate context for the REPL\n         * instance. The node CLI REPL sets this value to `true`.\n         * @default false\n         */\n        useGlobal?: boolean | undefined;\n        /**\n         * If `true`, specifies that the default writer will not output the return value of a\n         * command if it evaluates to `undefined`.\n         * @default false\n         */\n        ignoreUndefined?: boolean | undefined;\n        /**\n         * The function to invoke to format the output of each command before writing to `output`.\n         * @default a wrapper for `util.inspect`\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_customizing_repl_output\n         */\n        writer?: REPLWriter | undefined;\n        /**\n         * An optional function used for custom Tab auto completion.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/readline.html#readline_use_of_the_completer_function\n         */\n        completer?: Completer | AsyncCompleter | undefined;\n        /**\n         * A flag that specifies whether the default evaluator executes all JavaScript commands in\n         * strict mode or default (sloppy) mode.\n         * Accepted values are:\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\n         *   prefacing every repl statement with `'use strict'`.\n         */\n        replMode?: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT | undefined;\n        /**\n         * Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is\n         * pressed. This cannot be used together with a custom `eval` function.\n         * @default false\n         */\n        breakEvalOnSigint?: boolean | undefined;\n    }\n    type REPLEval = (\n        this: REPLServer,\n        evalCmd: string,\n        context: Context,\n        file: string,\n        cb: (err: Error | null, result: any) => void,\n    ) => void;\n    type REPLWriter = (this: REPLServer, obj: any) => string;\n    /**\n     * This is the default \"writer\" value, if none is passed in the REPL options,\n     * and it can be overridden by custom print functions.\n     */\n    const writer: REPLWriter & {\n        options: InspectOptions;\n    };\n    type REPLCommandAction = (this: REPLServer, text: string) => void;\n    interface REPLCommand {\n        /**\n         * Help text to be displayed when `.help` is entered.\n         */\n        help?: string | undefined;\n        /**\n         * The function to execute, optionally accepting a single string argument.\n         */\n        action: REPLCommandAction;\n    }\n    /**\n     * Instances of `repl.REPLServer` are created using the {@link start} method\n     * or directly using the JavaScript `new` keyword.\n     *\n     * ```js\n     * import repl from 'node:repl';\n     *\n     * const options = { useColors: true };\n     *\n     * const firstInstance = repl.start(options);\n     * const secondInstance = new repl.REPLServer(options);\n     * ```\n     * @since v0.1.91\n     */\n    class REPLServer extends Interface {\n        /**\n         * The `vm.Context` provided to the `eval` function to be used for JavaScript\n         * evaluation.\n         */\n        readonly context: Context;\n        /**\n         * @deprecated since v14.3.0 - Use `input` instead.\n         */\n        readonly inputStream: NodeJS.ReadableStream;\n        /**\n         * @deprecated since v14.3.0 - Use `output` instead.\n         */\n        readonly outputStream: NodeJS.WritableStream;\n        /**\n         * The `Readable` stream from which REPL input will be read.\n         */\n        readonly input: NodeJS.ReadableStream;\n        /**\n         * The `Writable` stream to which REPL output will be written.\n         */\n        readonly output: NodeJS.WritableStream;\n        /**\n         * The commands registered via `replServer.defineCommand()`.\n         */\n        readonly commands: NodeJS.ReadOnlyDict<REPLCommand>;\n        /**\n         * A value indicating whether the REPL is currently in \"editor mode\".\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_commands_and_special_keys\n         */\n        readonly editorMode: boolean;\n        /**\n         * A value indicating whether the `_` variable has been assigned.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly underscoreAssigned: boolean;\n        /**\n         * The last evaluation result from the REPL (assigned to the `_` variable inside of the REPL).\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly last: any;\n        /**\n         * A value indicating whether the `_error` variable has been assigned.\n         *\n         * @since v9.8.0\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly underscoreErrAssigned: boolean;\n        /**\n         * The last error raised inside the REPL (assigned to the `_error` variable inside of the REPL).\n         *\n         * @since v9.8.0\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly lastError: any;\n        /**\n         * Specified in the REPL options, this is the function to be used when evaluating each\n         * given line of input. If not specified in the REPL options, this is an async wrapper\n         * for the JavaScript `eval()` function.\n         */\n        readonly eval: REPLEval;\n        /**\n         * Specified in the REPL options, this is a value indicating whether the default\n         * `writer` function should include ANSI color styling to REPL output.\n         */\n        readonly useColors: boolean;\n        /**\n         * Specified in the REPL options, this is a value indicating whether the default `eval`\n         * function will use the JavaScript `global` as the context as opposed to creating a new\n         * separate context for the REPL instance.\n         */\n        readonly useGlobal: boolean;\n        /**\n         * Specified in the REPL options, this is a value indicating whether the default `writer`\n         * function should output the result of a command if it evaluates to `undefined`.\n         */\n        readonly ignoreUndefined: boolean;\n        /**\n         * Specified in the REPL options, this is the function to invoke to format the output of\n         * each command before writing to `outputStream`. If not specified in the REPL options,\n         * this will be a wrapper for `util.inspect`.\n         */\n        readonly writer: REPLWriter;\n        /**\n         * Specified in the REPL options, this is the function to use for custom Tab auto-completion.\n         */\n        readonly completer: Completer | AsyncCompleter;\n        /**\n         * Specified in the REPL options, this is a flag that specifies whether the default `eval`\n         * function should execute all JavaScript commands in strict mode or default (sloppy) mode.\n         * Possible values are:\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\n         *    prefacing every repl statement with `'use strict'`.\n         */\n        readonly replMode: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT;\n        /**\n         * NOTE: According to the documentation:\n         *\n         * > Instances of `repl.REPLServer` are created using the `repl.start()` method and\n         * > _should not_ be created directly using the JavaScript `new` keyword.\n         *\n         * `REPLServer` cannot be subclassed due to implementation specifics in NodeJS.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_class_replserver\n         */\n        private constructor();\n        /**\n         * The `replServer.defineCommand()` method is used to add new `.`\\-prefixed commands\n         * to the REPL instance. Such commands are invoked by typing a `.` followed by the `keyword`. The `cmd` is either a `Function` or an `Object` with the following\n         * properties:\n         *\n         * The following example shows two new commands added to the REPL instance:\n         *\n         * ```js\n         * import repl from 'node:repl';\n         *\n         * const replServer = repl.start({ prompt: '> ' });\n         * replServer.defineCommand('sayhello', {\n         *   help: 'Say hello',\n         *   action(name) {\n         *     this.clearBufferedCommand();\n         *     console.log(`Hello, ${name}!`);\n         *     this.displayPrompt();\n         *   },\n         * });\n         * replServer.defineCommand('saybye', function saybye() {\n         *   console.log('Goodbye!');\n         *   this.close();\n         * });\n         * ```\n         *\n         * The new commands can then be used from within the REPL instance:\n         *\n         * ```console\n         * > .sayhello Node.js User\n         * Hello, Node.js User!\n         * > .saybye\n         * Goodbye!\n         * ```\n         * @since v0.3.0\n         * @param keyword The command keyword (_without_ a leading `.` character).\n         * @param cmd The function to invoke when the command is processed.\n         */\n        defineCommand(keyword: string, cmd: REPLCommandAction | REPLCommand): void;\n        /**\n         * The `replServer.displayPrompt()` method readies the REPL instance for input\n         * from the user, printing the configured `prompt` to a new line in the `output` and resuming the `input` to accept new input.\n         *\n         * When multi-line input is being entered, an ellipsis is printed rather than the\n         * 'prompt'.\n         *\n         * When `preserveCursor` is `true`, the cursor placement will not be reset to `0`.\n         *\n         * The `replServer.displayPrompt` method is primarily intended to be called from\n         * within the action function for commands registered using the `replServer.defineCommand()` method.\n         * @since v0.1.91\n         */\n        displayPrompt(preserveCursor?: boolean): void;\n        /**\n         * The `replServer.clearBufferedCommand()` method clears any command that has been\n         * buffered but not yet executed. This method is primarily intended to be\n         * called from within the action function for commands registered using the `replServer.defineCommand()` method.\n         * @since v9.0.0\n         */\n        clearBufferedCommand(): void;\n        /**\n         * Initializes a history log file for the REPL instance. When executing the\n         * Node.js binary and using the command-line REPL, a history file is initialized\n         * by default. However, this is not the case when creating a REPL\n         * programmatically. Use this method to initialize a history log file when working\n         * with REPL instances programmatically.\n         * @since v11.10.0\n         * @param historyPath the path to the history file\n         * @param callback called when history writes are ready or upon error\n         */\n        setupHistory(path: string, callback: (err: Error | null, repl: this) => void): void;\n        /**\n         * events.EventEmitter\n         * 1. close - inherited from `readline.Interface`\n         * 2. line - inherited from `readline.Interface`\n         * 3. pause - inherited from `readline.Interface`\n         * 4. resume - inherited from `readline.Interface`\n         * 5. SIGCONT - inherited from `readline.Interface`\n         * 6. SIGINT - inherited from `readline.Interface`\n         * 7. SIGTSTP - inherited from `readline.Interface`\n         * 8. exit\n         * 9. reset\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"close\", listener: () => void): this;\n        addListener(event: \"line\", listener: (input: string) => void): this;\n        addListener(event: \"pause\", listener: () => void): this;\n        addListener(event: \"resume\", listener: () => void): this;\n        addListener(event: \"SIGCONT\", listener: () => void): this;\n        addListener(event: \"SIGINT\", listener: () => void): this;\n        addListener(event: \"SIGTSTP\", listener: () => void): this;\n        addListener(event: \"exit\", listener: () => void): this;\n        addListener(event: \"reset\", listener: (context: Context) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: \"close\"): boolean;\n        emit(event: \"line\", input: string): boolean;\n        emit(event: \"pause\"): boolean;\n        emit(event: \"resume\"): boolean;\n        emit(event: \"SIGCONT\"): boolean;\n        emit(event: \"SIGINT\"): boolean;\n        emit(event: \"SIGTSTP\"): boolean;\n        emit(event: \"exit\"): boolean;\n        emit(event: \"reset\", context: Context): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"close\", listener: () => void): this;\n        on(event: \"line\", listener: (input: string) => void): this;\n        on(event: \"pause\", listener: () => void): this;\n        on(event: \"resume\", listener: () => void): this;\n        on(event: \"SIGCONT\", listener: () => void): this;\n        on(event: \"SIGINT\", listener: () => void): this;\n        on(event: \"SIGTSTP\", listener: () => void): this;\n        on(event: \"exit\", listener: () => void): this;\n        on(event: \"reset\", listener: (context: Context) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"close\", listener: () => void): this;\n        once(event: \"line\", listener: (input: string) => void): this;\n        once(event: \"pause\", listener: () => void): this;\n        once(event: \"resume\", listener: () => void): this;\n        once(event: \"SIGCONT\", listener: () => void): this;\n        once(event: \"SIGINT\", listener: () => void): this;\n        once(event: \"SIGTSTP\", listener: () => void): this;\n        once(event: \"exit\", listener: () => void): this;\n        once(event: \"reset\", listener: (context: Context) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"close\", listener: () => void): this;\n        prependListener(event: \"line\", listener: (input: string) => void): this;\n        prependListener(event: \"pause\", listener: () => void): this;\n        prependListener(event: \"resume\", listener: () => void): this;\n        prependListener(event: \"SIGCONT\", listener: () => void): this;\n        prependListener(event: \"SIGINT\", listener: () => void): this;\n        prependListener(event: \"SIGTSTP\", listener: () => void): this;\n        prependListener(event: \"exit\", listener: () => void): this;\n        prependListener(event: \"reset\", listener: (context: Context) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"close\", listener: () => void): this;\n        prependOnceListener(event: \"line\", listener: (input: string) => void): this;\n        prependOnceListener(event: \"pause\", listener: () => void): this;\n        prependOnceListener(event: \"resume\", listener: () => void): this;\n        prependOnceListener(event: \"SIGCONT\", listener: () => void): this;\n        prependOnceListener(event: \"SIGINT\", listener: () => void): this;\n        prependOnceListener(event: \"SIGTSTP\", listener: () => void): this;\n        prependOnceListener(event: \"exit\", listener: () => void): this;\n        prependOnceListener(event: \"reset\", listener: (context: Context) => void): this;\n    }\n    /**\n     * A flag passed in the REPL options. Evaluates expressions in sloppy mode.\n     */\n    const REPL_MODE_SLOPPY: unique symbol;\n    /**\n     * A flag passed in the REPL options. Evaluates expressions in strict mode.\n     * This is equivalent to prefacing every repl statement with `'use strict'`.\n     */\n    const REPL_MODE_STRICT: unique symbol;\n    /**\n     * The `repl.start()` method creates and starts a {@link REPLServer} instance.\n     *\n     * If `options` is a string, then it specifies the input prompt:\n     *\n     * ```js\n     * import repl from 'node:repl';\n     *\n     * // a Unix style prompt\n     * repl.start('$ ');\n     * ```\n     * @since v0.1.91\n     */\n    function start(options?: string | ReplOptions): REPLServer;\n    /**\n     * Indicates a recoverable error that a `REPLServer` can use to support multi-line input.\n     *\n     * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_recoverable_errors\n     */\n    class Recoverable extends SyntaxError {\n        err: Error;\n        constructor(err: Error);\n    }\n}\ndeclare module \"node:repl\" {\n    export * from \"repl\";\n}\n"
        }
    ]
}