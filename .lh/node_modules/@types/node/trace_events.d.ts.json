{
    "sourceFile": "node_modules/@types/node/trace_events.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:trace_events` module provides a mechanism to centralize tracing information\n * generated by V8, Node.js core, and userspace code.\n *\n * Tracing can be enabled with the `--trace-event-categories` command-line flag\n * or by using the `trace_events` module. The `--trace-event-categories` flag\n * accepts a list of comma-separated category names.\n *\n * The available categories are:\n *\n * * `node`: An empty placeholder.\n * * `node.async_hooks`: Enables capture of detailed [`async_hooks`](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html) trace data.\n * The [`async_hooks`](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html) events have a unique `asyncId` and a special `triggerId` `triggerAsyncId` property.\n * * `node.bootstrap`: Enables capture of Node.js bootstrap milestones.\n * * `node.console`: Enables capture of `console.time()` and `console.count()` output.\n * * `node.threadpoolwork.sync`: Enables capture of trace data for threadpool synchronous operations, such as `blob`, `zlib`, `crypto` and `node_api`.\n * * `node.threadpoolwork.async`: Enables capture of trace data for threadpool asynchronous operations, such as `blob`, `zlib`, `crypto` and `node_api`.\n * * `node.dns.native`: Enables capture of trace data for DNS queries.\n * * `node.net.native`: Enables capture of trace data for network.\n * * `node.environment`: Enables capture of Node.js Environment milestones.\n * * `node.fs.sync`: Enables capture of trace data for file system sync methods.\n * * `node.fs_dir.sync`: Enables capture of trace data for file system sync directory methods.\n * * `node.fs.async`: Enables capture of trace data for file system async methods.\n * * `node.fs_dir.async`: Enables capture of trace data for file system async directory methods.\n * * `node.perf`: Enables capture of [Performance API](https://nodejs.org/docs/latest-v22.x/api/perf_hooks.html) measurements.\n *    * `node.perf.usertiming`: Enables capture of only Performance API User Timing\n *    measures and marks.\n *    * `node.perf.timerify`: Enables capture of only Performance API timerify\n *    measurements.\n * * `node.promises.rejections`: Enables capture of trace data tracking the number\n * of unhandled Promise rejections and handled-after-rejections.\n * * `node.vm.script`: Enables capture of trace data for the `node:vm` module's `runInNewContext()`, `runInContext()`, and `runInThisContext()` methods.\n * * `v8`: The [V8](https://nodejs.org/docs/latest-v22.x/api/v8.html) events are GC, compiling, and execution related.\n * * `node.http`: Enables capture of trace data for http request / response.\n *\n * By default the `node`, `node.async_hooks`, and `v8` categories are enabled.\n *\n * ```bash\n * node --trace-event-categories v8,node,node.async_hooks server.js\n * ```\n *\n * Prior versions of Node.js required the use of the `--trace-events-enabled` flag to enable trace events. This requirement has been removed. However, the `--trace-events-enabled` flag _may_ still be\n * used and will enable the `node`, `node.async_hooks`, and `v8` trace event categories by default.\n *\n * ```bash\n * node --trace-events-enabled\n *\n * # is equivalent to\n *\n * node --trace-event-categories v8,node,node.async_hooks\n * ```\n *\n * Alternatively, trace events may be enabled using the `node:trace_events` module:\n *\n * ```js\n * import trace_events from 'node:trace_events';\n * const tracing = trace_events.createTracing({ categories: ['node.perf'] });\n * tracing.enable();  // Enable trace event capture for the 'node.perf' category\n *\n * // do work\n *\n * tracing.disable();  // Disable trace event capture for the 'node.perf' category\n * ```\n *\n * Running Node.js with tracing enabled will produce log files that can be opened\n * in the [`chrome://tracing`](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) tab of Chrome.\n *\n * The logging file is by default called `node_trace.${rotation}.log`, where `${rotation}` is an incrementing log-rotation id. The filepath pattern can\n * be specified with `--trace-event-file-pattern` that accepts a template\n * string that supports `${rotation}` and `${pid}`:\n *\n * ```bash\n * node --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\n * ```\n *\n * To guarantee that the log file is properly generated after signal events like `SIGINT`, `SIGTERM`, or `SIGBREAK`, make sure to have the appropriate handlers\n * in your code, such as:\n *\n * ```js\n * process.on('SIGINT', function onSigint() {\n *   console.info('Received SIGINT.');\n *   process.exit(130);  // Or applicable exit code depending on OS and signal\n * });\n * ```\n *\n * The tracing system uses the same time source\n * as the one used by `process.hrtime()`.\n * However the trace-event timestamps are expressed in microseconds,\n * unlike `process.hrtime()` which returns nanoseconds.\n *\n * The features from this module are not available in [`Worker`](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html#class-worker) threads.\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/trace_events.js)\n */\ndeclare module \"trace_events\" {\n    /**\n     * The `Tracing` object is used to enable or disable tracing for sets of\n     * categories. Instances are created using the\n     * `trace_events.createTracing()` method.\n     *\n     * When created, the `Tracing` object is disabled. Calling the\n     * `tracing.enable()` method adds the categories to the set of enabled trace\n     * event categories. Calling `tracing.disable()` will remove the categories\n     * from the set of enabled trace event categories.\n     */\n    interface Tracing {\n        /**\n         * A comma-separated list of the trace event categories covered by this\n         * `Tracing` object.\n         * @since v10.0.0\n         */\n        readonly categories: string;\n        /**\n         * Disables this `Tracing` object.\n         *\n         * Only trace event categories _not_ covered by other enabled `Tracing`\n         * objects and _not_ specified by the `--trace-event-categories` flag\n         * will be disabled.\n         *\n         * ```js\n         * import trace_events from 'node:trace_events';\n         * const t1 = trace_events.createTracing({ categories: ['node', 'v8'] });\n         * const t2 = trace_events.createTracing({ categories: ['node.perf', 'node'] });\n         * t1.enable();\n         * t2.enable();\n         *\n         * // Prints 'node,node.perf,v8'\n         * console.log(trace_events.getEnabledCategories());\n         *\n         * t2.disable(); // Will only disable emission of the 'node.perf' category\n         *\n         * // Prints 'node,v8'\n         * console.log(trace_events.getEnabledCategories());\n         * ```\n         * @since v10.0.0\n         */\n        disable(): void;\n        /**\n         * Enables this `Tracing` object for the set of categories covered by\n         * the `Tracing` object.\n         * @since v10.0.0\n         */\n        enable(): void;\n        /**\n         * `true` only if the `Tracing` object has been enabled.\n         * @since v10.0.0\n         */\n        readonly enabled: boolean;\n    }\n    interface CreateTracingOptions {\n        /**\n         * An array of trace category names. Values included in the array are\n         * coerced to a string when possible. An error will be thrown if the\n         * value cannot be coerced.\n         */\n        categories: string[];\n    }\n    /**\n     * Creates and returns a `Tracing` object for the given set of `categories`.\n     *\n     * ```js\n     * import trace_events from 'node:trace_events';\n     * const categories = ['node.perf', 'node.async_hooks'];\n     * const tracing = trace_events.createTracing({ categories });\n     * tracing.enable();\n     * // do stuff\n     * tracing.disable();\n     * ```\n     * @since v10.0.0\n     */\n    function createTracing(options: CreateTracingOptions): Tracing;\n    /**\n     * Returns a comma-separated list of all currently-enabled trace event\n     * categories. The current set of enabled trace event categories is determined\n     * by the _union_ of all currently-enabled `Tracing` objects and any categories\n     * enabled using the `--trace-event-categories` flag.\n     *\n     * Given the file `test.js` below, the command `node --trace-event-categories node.perf test.js` will print `'node.async_hooks,node.perf'` to the console.\n     *\n     * ```js\n     * import trace_events from 'node:trace_events';\n     * const t1 = trace_events.createTracing({ categories: ['node.async_hooks'] });\n     * const t2 = trace_events.createTracing({ categories: ['node.perf'] });\n     * const t3 = trace_events.createTracing({ categories: ['v8'] });\n     *\n     * t1.enable();\n     * t2.enable();\n     *\n     * console.log(trace_events.getEnabledCategories());\n     * ```\n     * @since v10.0.0\n     */\n    function getEnabledCategories(): string | undefined;\n}\ndeclare module \"node:trace_events\" {\n    export * from \"trace_events\";\n}\n"
        }
    ]
}