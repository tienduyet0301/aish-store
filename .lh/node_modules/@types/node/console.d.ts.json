{
    "sourceFile": "node_modules/@types/node/console.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:console` module provides a simple debugging console that is similar to\n * the JavaScript console mechanism provided by web browsers.\n *\n * The module exports two specific components:\n *\n * * A `Console` class with methods such as `console.log()`, `console.error()`, and `console.warn()` that can be used to write to any Node.js stream.\n * * A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\n * [`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n *\n * _**Warning**_: The global console object's methods are neither consistently\n * synchronous like the browser APIs they resemble, nor are they consistently\n * asynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\n * more information.\n *\n * Example using the global `console`:\n *\n * ```js\n * console.log('hello world');\n * // Prints: hello world, to stdout\n * console.log('hello %s', 'world');\n * // Prints: hello world, to stdout\n * console.error(new Error('Whoops, something bad happened'));\n * // Prints error message and stack trace to stderr:\n * //   Error: Whoops, something bad happened\n * //     at [eval]:5:15\n * //     at Script.runInThisContext (node:vm:132:18)\n * //     at Object.runInThisContext (node:vm:309:38)\n * //     at node:internal/process/execution:77:19\n * //     at [eval]-wrapper:6:22\n * //     at evalScript (node:internal/process/execution:76:60)\n * //     at node:internal/main/eval_string:23:3\n *\n * const name = 'Will Robinson';\n * console.warn(`Danger ${name}! Danger!`);\n * // Prints: Danger Will Robinson! Danger!, to stderr\n * ```\n *\n * Example using the `Console` class:\n *\n * ```js\n * const out = getStreamSomehow();\n * const err = getStreamSomehow();\n * const myConsole = new console.Console(out, err);\n *\n * myConsole.log('hello world');\n * // Prints: hello world, to out\n * myConsole.log('hello %s', 'world');\n * // Prints: hello world, to out\n * myConsole.error(new Error('Whoops, something bad happened'));\n * // Prints: [Error: Whoops, something bad happened], to err\n *\n * const name = 'Will Robinson';\n * myConsole.warn(`Danger ${name}! Danger!`);\n * // Prints: Danger Will Robinson! Danger!, to err\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)\n */\ndeclare module \"console\" {\n    import console = require(\"node:console\");\n    export = console;\n}\ndeclare module \"node:console\" {\n    import { InspectOptions } from \"node:util\";\n    global {\n        // This needs to be global to avoid TS2403 in case lib.dom.d.ts is present in the same build\n        interface Console {\n            Console: console.ConsoleConstructor;\n            /**\n             * `console.assert()` writes a message if `value` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) or omitted. It only\n             * writes a message and does not otherwise affect execution. The output always\n             * starts with `\"Assertion failed\"`. If provided, `message` is formatted using\n             * [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args).\n             *\n             * If `value` is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), nothing happens.\n             *\n             * ```js\n             * console.assert(true, 'does nothing');\n             *\n             * console.assert(false, 'Whoops %s work', 'didn\\'t');\n             * // Assertion failed: Whoops didn't work\n             *\n             * console.assert();\n             * // Assertion failed\n             * ```\n             * @since v0.1.101\n             * @param value The value tested for being truthy.\n             * @param message All arguments besides `value` are used as error message.\n             */\n            assert(value: any, message?: string, ...optionalParams: any[]): void;\n            /**\n             * When `stdout` is a TTY, calling `console.clear()` will attempt to clear the\n             * TTY. When `stdout` is not a TTY, this method does nothing.\n             *\n             * The specific operation of `console.clear()` can vary across operating systems\n             * and terminal types. For most Linux operating systems, `console.clear()` operates similarly to the `clear` shell command. On Windows, `console.clear()` will clear only the output in the\n             * current terminal viewport for the Node.js\n             * binary.\n             * @since v8.3.0\n             */\n            clear(): void;\n            /**\n             * Maintains an internal counter specific to `label` and outputs to `stdout` the\n             * number of times `console.count()` has been called with the given `label`.\n             *\n             * ```js\n             * > console.count()\n             * default: 1\n             * undefined\n             * > console.count('default')\n             * default: 2\n             * undefined\n             * > console.count('abc')\n             * abc: 1\n             * undefined\n             * > console.count('xyz')\n             * xyz: 1\n             * undefined\n             * > console.count('abc')\n             * abc: 2\n             * undefined\n             * > console.count()\n             * default: 3\n             * undefined\n             * >\n             * ```\n             * @since v8.3.0\n             * @param [label='default'] The display label for the counter.\n             */\n            count(label?: string): void;\n            /**\n             * Resets the internal counter specific to `label`.\n             *\n             * ```js\n             * > console.count('abc');\n             * abc: 1\n             * undefined\n             * > console.countReset('abc');\n             * undefined\n             * > console.count('abc');\n             * abc: 1\n             * undefined\n             * >\n             * ```\n             * @since v8.3.0\n             * @param [label='default'] The display label for the counter.\n             */\n            countReset(label?: string): void;\n            /**\n             * The `console.debug()` function is an alias for {@link log}.\n             * @since v8.0.0\n             */\n            debug(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Uses [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options) on `obj` and prints the resulting string to `stdout`.\n             * This function bypasses any custom `inspect()` function defined on `obj`.\n             * @since v0.1.101\n             */\n            dir(obj: any, options?: InspectOptions): void;\n            /**\n             * This method calls `console.log()` passing it the arguments received.\n             * This method does not produce any XML formatting.\n             * @since v8.0.0\n             */\n            dirxml(...data: any[]): void;\n            /**\n             * Prints to `stderr` with newline. Multiple arguments can be passed, with the\n             * first used as the primary message and all additional used as substitution\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n             * (the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).\n             *\n             * ```js\n             * const code = 5;\n             * console.error('error #%d', code);\n             * // Prints: error #5, to stderr\n             * console.error('error', code);\n             * // Prints: error 5, to stderr\n             * ```\n             *\n             * If formatting elements (e.g. `%d`) are not found in the first string then\n             * [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options) is called on each argument and the\n             * resulting string values are concatenated. See [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)\n             * for more information.\n             * @since v0.1.100\n             */\n            error(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Increases indentation of subsequent lines by spaces for `groupIndentation` length.\n             *\n             * If one or more `label`s are provided, those are printed first without the\n             * additional indentation.\n             * @since v8.5.0\n             */\n            group(...label: any[]): void;\n            /**\n             * An alias for {@link group}.\n             * @since v8.5.0\n             */\n            groupCollapsed(...label: any[]): void;\n            /**\n             * Decreases indentation of subsequent lines by spaces for `groupIndentation` length.\n             * @since v8.5.0\n             */\n            groupEnd(): void;\n            /**\n             * The `console.info()` function is an alias for {@link log}.\n             * @since v0.1.100\n             */\n            info(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Prints to `stdout` with newline. Multiple arguments can be passed, with the\n             * first used as the primary message and all additional used as substitution\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n             * (the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).\n             *\n             * ```js\n             * const count = 5;\n             * console.log('count: %d', count);\n             * // Prints: count: 5, to stdout\n             * console.log('count:', count);\n             * // Prints: count: 5, to stdout\n             * ```\n             *\n             * See [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args) for more information.\n             * @since v0.1.100\n             */\n            log(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Try to construct a table with the columns of the properties of `tabularData` (or use `properties`) and rows of `tabularData` and log it. Falls back to just\n             * logging the argument if it can't be parsed as tabular.\n             *\n             * ```js\n             * // These can't be parsed as tabular data\n             * console.table(Symbol());\n             * // Symbol()\n             *\n             * console.table(undefined);\n             * // undefined\n             *\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);\n             * // ┌─────────┬─────┬─────┐\n             * // │ (index) │  a  │  b  │\n             * // ├─────────┼─────┼─────┤\n             * // │    0    │  1  │ 'Y' │\n             * // │    1    │ 'Z' │  2  │\n             * // └─────────┴─────┴─────┘\n             *\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);\n             * // ┌─────────┬─────┐\n             * // │ (index) │  a  │\n             * // ├─────────┼─────┤\n             * // │    0    │  1  │\n             * // │    1    │ 'Z' │\n             * // └─────────┴─────┘\n             * ```\n             * @since v10.0.0\n             * @param properties Alternate properties for constructing the table.\n             */\n            table(tabularData: any, properties?: readonly string[]): void;\n            /**\n             * Starts a timer that can be used to compute the duration of an operation. Timers\n             * are identified by a unique `label`. Use the same `label` when calling {@link timeEnd} to stop the timer and output the elapsed time in\n             * suitable time units to `stdout`. For example, if the elapsed\n             * time is 3869ms, `console.timeEnd()` displays \"3.869s\".\n             * @since v0.1.104\n             * @param [label='default']\n             */\n            time(label?: string): void;\n            /**\n             * Stops a timer that was previously started by calling {@link time} and\n             * prints the result to `stdout`:\n             *\n             * ```js\n             * console.time('bunch-of-stuff');\n             * // Do a bunch of stuff.\n             * console.timeEnd('bunch-of-stuff');\n             * // Prints: bunch-of-stuff: 225.438ms\n             * ```\n             * @since v0.1.104\n             * @param [label='default']\n             */\n            timeEnd(label?: string): void;\n            /**\n             * For a timer that was previously started by calling {@link time}, prints\n             * the elapsed time and other `data` arguments to `stdout`:\n             *\n             * ```js\n             * console.time('process');\n             * const value = expensiveProcess1(); // Returns 42\n             * console.timeLog('process', value);\n             * // Prints \"process: 365.227ms 42\".\n             * doExpensiveProcess2(value);\n             * console.timeEnd('process');\n             * ```\n             * @since v10.7.0\n             * @param [label='default']\n             */\n            timeLog(label?: string, ...data: any[]): void;\n            /**\n             * Prints to `stderr` the string `'Trace: '`, followed by the [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)\n             * formatted message and stack trace to the current position in the code.\n             *\n             * ```js\n             * console.trace('Show me');\n             * // Prints: (stack trace will vary based on where trace is called)\n             * //  Trace: Show me\n             * //    at repl:2:9\n             * //    at REPLServer.defaultEval (repl.js:248:27)\n             * //    at bound (domain.js:287:14)\n             * //    at REPLServer.runBound [as eval] (domain.js:300:12)\n             * //    at REPLServer.<anonymous> (repl.js:412:12)\n             * //    at emitOne (events.js:82:20)\n             * //    at REPLServer.emit (events.js:169:7)\n             * //    at REPLServer.Interface._onLine (readline.js:210:10)\n             * //    at REPLServer.Interface._line (readline.js:549:8)\n             * //    at REPLServer.Interface._ttyWrite (readline.js:826:14)\n             * ```\n             * @since v0.1.104\n             */\n            trace(message?: any, ...optionalParams: any[]): void;\n            /**\n             * The `console.warn()` function is an alias for {@link error}.\n             * @since v0.1.100\n             */\n            warn(message?: any, ...optionalParams: any[]): void;\n            // --- Inspector mode only ---\n            /**\n             * This method does not display anything unless used in the inspector. The `console.profile()`\n             * method starts a JavaScript CPU profile with an optional label until {@link profileEnd}\n             * is called. The profile is then added to the Profile panel of the inspector.\n             *\n             * ```js\n             * console.profile('MyLabel');\n             * // Some code\n             * console.profileEnd('MyLabel');\n             * // Adds the profile 'MyLabel' to the Profiles panel of the inspector.\n             * ```\n             * @since v8.0.0\n             */\n            profile(label?: string): void;\n            /**\n             * This method does not display anything unless used in the inspector. Stops the current\n             * JavaScript CPU profiling session if one has been started and prints the report to the\n             * Profiles panel of the inspector. See {@link profile} for an example.\n             *\n             * If this method is called without a label, the most recently started profile is stopped.\n             * @since v8.0.0\n             */\n            profileEnd(label?: string): void;\n            /**\n             * This method does not display anything unless used in the inspector. The `console.timeStamp()`\n             * method adds an event with the label `'label'` to the Timeline panel of the inspector.\n             * @since v8.0.0\n             */\n            timeStamp(label?: string): void;\n        }\n        /**\n         * The `console` module provides a simple debugging console that is similar to the\n         * JavaScript console mechanism provided by web browsers.\n         *\n         * The module exports two specific components:\n         *\n         * * A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n         * * A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\n         * [`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n         *\n         * _**Warning**_: The global console object's methods are neither consistently\n         * synchronous like the browser APIs they resemble, nor are they consistently\n         * asynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\n         * more information.\n         *\n         * Example using the global `console`:\n         *\n         * ```js\n         * console.log('hello world');\n         * // Prints: hello world, to stdout\n         * console.log('hello %s', 'world');\n         * // Prints: hello world, to stdout\n         * console.error(new Error('Whoops, something bad happened'));\n         * // Prints error message and stack trace to stderr:\n         * //   Error: Whoops, something bad happened\n         * //     at [eval]:5:15\n         * //     at Script.runInThisContext (node:vm:132:18)\n         * //     at Object.runInThisContext (node:vm:309:38)\n         * //     at node:internal/process/execution:77:19\n         * //     at [eval]-wrapper:6:22\n         * //     at evalScript (node:internal/process/execution:76:60)\n         * //     at node:internal/main/eval_string:23:3\n         *\n         * const name = 'Will Robinson';\n         * console.warn(`Danger ${name}! Danger!`);\n         * // Prints: Danger Will Robinson! Danger!, to stderr\n         * ```\n         *\n         * Example using the `Console` class:\n         *\n         * ```js\n         * const out = getStreamSomehow();\n         * const err = getStreamSomehow();\n         * const myConsole = new console.Console(out, err);\n         *\n         * myConsole.log('hello world');\n         * // Prints: hello world, to out\n         * myConsole.log('hello %s', 'world');\n         * // Prints: hello world, to out\n         * myConsole.error(new Error('Whoops, something bad happened'));\n         * // Prints: [Error: Whoops, something bad happened], to err\n         *\n         * const name = 'Will Robinson';\n         * myConsole.warn(`Danger ${name}! Danger!`);\n         * // Prints: Danger Will Robinson! Danger!, to err\n         * ```\n         * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)\n         */\n        namespace console {\n            interface ConsoleConstructorOptions {\n                stdout: NodeJS.WritableStream;\n                stderr?: NodeJS.WritableStream | undefined;\n                /**\n                 * Ignore errors when writing to the underlying streams.\n                 * @default true\n                 */\n                ignoreErrors?: boolean | undefined;\n                /**\n                 * Set color support for this `Console` instance. Setting to true enables coloring while inspecting\n                 * values. Setting to `false` disables coloring while inspecting values. Setting to `'auto'` makes color\n                 * support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the\n                 * respective stream. This option can not be used, if `inspectOptions.colors` is set as well.\n                 * @default auto\n                 */\n                colorMode?: boolean | \"auto\" | undefined;\n                /**\n                 * Specifies options that are passed along to\n                 * [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options).\n                 */\n                inspectOptions?: InspectOptions | undefined;\n                /**\n                 * Set group indentation.\n                 * @default 2\n                 */\n                groupIndentation?: number | undefined;\n            }\n            interface ConsoleConstructor {\n                prototype: Console;\n                new(stdout: NodeJS.WritableStream, stderr?: NodeJS.WritableStream, ignoreErrors?: boolean): Console;\n                new(options: ConsoleConstructorOptions): Console;\n            }\n        }\n        var console: Console;\n    }\n    export = globalThis.console;\n}\n"
        }
    ]
}