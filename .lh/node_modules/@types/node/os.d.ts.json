{
    "sourceFile": "node_modules/@types/node/os.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:os` module provides operating system-related utility methods and\n * properties. It can be accessed using:\n *\n * ```js\n * import os from 'node:os';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/os.js)\n */\ndeclare module \"os\" {\n    interface CpuInfo {\n        model: string;\n        speed: number;\n        times: {\n            /** The number of milliseconds the CPU has spent in user mode. */\n            user: number;\n            /** The number of milliseconds the CPU has spent in nice mode. */\n            nice: number;\n            /** The number of milliseconds the CPU has spent in sys mode. */\n            sys: number;\n            /** The number of milliseconds the CPU has spent in idle mode. */\n            idle: number;\n            /** The number of milliseconds the CPU has spent in irq mode. */\n            irq: number;\n        };\n    }\n    interface NetworkInterfaceBase {\n        address: string;\n        netmask: string;\n        mac: string;\n        internal: boolean;\n        cidr: string | null;\n    }\n    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {\n        family: \"IPv4\";\n        scopeid?: undefined;\n    }\n    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {\n        family: \"IPv6\";\n        scopeid: number;\n    }\n    interface UserInfo<T> {\n        username: T;\n        uid: number;\n        gid: number;\n        shell: T | null;\n        homedir: T;\n    }\n    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;\n    /**\n     * Returns the host name of the operating system as a string.\n     * @since v0.3.3\n     */\n    function hostname(): string;\n    /**\n     * Returns an array containing the 1, 5, and 15 minute load averages.\n     *\n     * The load average is a measure of system activity calculated by the operating\n     * system and expressed as a fractional number.\n     *\n     * The load average is a Unix-specific concept. On Windows, the return value is\n     * always `[0, 0, 0]`.\n     * @since v0.3.3\n     */\n    function loadavg(): number[];\n    /**\n     * Returns the system uptime in number of seconds.\n     * @since v0.3.3\n     */\n    function uptime(): number;\n    /**\n     * Returns the amount of free system memory in bytes as an integer.\n     * @since v0.3.3\n     */\n    function freemem(): number;\n    /**\n     * Returns the total amount of system memory in bytes as an integer.\n     * @since v0.3.3\n     */\n    function totalmem(): number;\n    /**\n     * Returns an array of objects containing information about each logical CPU core.\n     * The array will be empty if no CPU information is available, such as if the `/proc` file system is unavailable.\n     *\n     * The properties included on each object include:\n     *\n     * ```js\n     * [\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 252020,\n     *       nice: 0,\n     *       sys: 30340,\n     *       idle: 1070356870,\n     *       irq: 0,\n     *     },\n     *   },\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 306960,\n     *       nice: 0,\n     *       sys: 26980,\n     *       idle: 1071569080,\n     *       irq: 0,\n     *     },\n     *   },\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 248450,\n     *       nice: 0,\n     *       sys: 21750,\n     *       idle: 1070919370,\n     *       irq: 0,\n     *     },\n     *   },\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 256880,\n     *       nice: 0,\n     *       sys: 19430,\n     *       idle: 1070905480,\n     *       irq: 20,\n     *     },\n     *   },\n     * ]\n     * ```\n     *\n     * `nice` values are POSIX-only. On Windows, the `nice` values of all processors\n     * are always 0.\n     *\n     * `os.cpus().length` should not be used to calculate the amount of parallelism\n     * available to an application. Use {@link availableParallelism} for this purpose.\n     * @since v0.3.3\n     */\n    function cpus(): CpuInfo[];\n    /**\n     * Returns an estimate of the default amount of parallelism a program should use.\n     * Always returns a value greater than zero.\n     *\n     * This function is a small wrapper about libuv's [`uv_available_parallelism()`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_available_parallelism).\n     * @since v19.4.0, v18.14.0\n     */\n    function availableParallelism(): number;\n    /**\n     * Returns the operating system name as returned by [`uname(3)`](https://linux.die.net/man/3/uname). For example, it\n     * returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.\n     *\n     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for additional information\n     * about the output of running [`uname(3)`](https://linux.die.net/man/3/uname) on various operating systems.\n     * @since v0.3.3\n     */\n    function type(): string;\n    /**\n     * Returns the operating system as a string.\n     *\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `GetVersionExW()` is used. See\n     * [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\n     * @since v0.3.3\n     */\n    function release(): string;\n    /**\n     * Returns an object containing network interfaces that have been assigned a\n     * network address.\n     *\n     * Each key on the returned object identifies a network interface. The associated\n     * value is an array of objects that each describe an assigned network address.\n     *\n     * The properties available on the assigned network address object include:\n     *\n     * ```js\n     * {\n     *   lo: [\n     *     {\n     *       address: '127.0.0.1',\n     *       netmask: '255.0.0.0',\n     *       family: 'IPv4',\n     *       mac: '00:00:00:00:00:00',\n     *       internal: true,\n     *       cidr: '127.0.0.1/8'\n     *     },\n     *     {\n     *       address: '::1',\n     *       netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n     *       family: 'IPv6',\n     *       mac: '00:00:00:00:00:00',\n     *       scopeid: 0,\n     *       internal: true,\n     *       cidr: '::1/128'\n     *     }\n     *   ],\n     *   eth0: [\n     *     {\n     *       address: '192.168.1.108',\n     *       netmask: '255.255.255.0',\n     *       family: 'IPv4',\n     *       mac: '01:02:03:0a:0b:0c',\n     *       internal: false,\n     *       cidr: '192.168.1.108/24'\n     *     },\n     *     {\n     *       address: 'fe80::a00:27ff:fe4e:66a1',\n     *       netmask: 'ffff:ffff:ffff:ffff::',\n     *       family: 'IPv6',\n     *       mac: '01:02:03:0a:0b:0c',\n     *       scopeid: 1,\n     *       internal: false,\n     *       cidr: 'fe80::a00:27ff:fe4e:66a1/64'\n     *     }\n     *   ]\n     * }\n     * ```\n     * @since v0.6.0\n     */\n    function networkInterfaces(): NodeJS.Dict<NetworkInterfaceInfo[]>;\n    /**\n     * Returns the string path of the current user's home directory.\n     *\n     * On POSIX, it uses the `$HOME` environment variable if defined. Otherwise it\n     * uses the [effective UID](https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID) to look up the user's home directory.\n     *\n     * On Windows, it uses the `USERPROFILE` environment variable if defined.\n     * Otherwise it uses the path to the profile directory of the current user.\n     * @since v2.3.0\n     */\n    function homedir(): string;\n    /**\n     * Returns information about the currently effective user. On POSIX platforms,\n     * this is typically a subset of the password file. The returned object includes\n     * the `username`, `uid`, `gid`, `shell`, and `homedir`. On Windows, the `uid` and `gid` fields are `-1`, and `shell` is `null`.\n     *\n     * The value of `homedir` returned by `os.userInfo()` is provided by the operating\n     * system. This differs from the result of `os.homedir()`, which queries\n     * environment variables for the home directory before falling back to the\n     * operating system response.\n     *\n     * Throws a [`SystemError`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-systemerror) if a user has no `username` or `homedir`.\n     * @since v6.0.0\n     */\n    function userInfo(options: { encoding: \"buffer\" }): UserInfo<Buffer>;\n    function userInfo(options?: { encoding: BufferEncoding }): UserInfo<string>;\n    type SignalConstants = {\n        [key in NodeJS.Signals]: number;\n    };\n    namespace constants {\n        const UV_UDP_REUSEADDR: number;\n        namespace signals {}\n        const signals: SignalConstants;\n        namespace errno {\n            const E2BIG: number;\n            const EACCES: number;\n            const EADDRINUSE: number;\n            const EADDRNOTAVAIL: number;\n            const EAFNOSUPPORT: number;\n            const EAGAIN: number;\n            const EALREADY: number;\n            const EBADF: number;\n            const EBADMSG: number;\n            const EBUSY: number;\n            const ECANCELED: number;\n            const ECHILD: number;\n            const ECONNABORTED: number;\n            const ECONNREFUSED: number;\n            const ECONNRESET: number;\n            const EDEADLK: number;\n            const EDESTADDRREQ: number;\n            const EDOM: number;\n            const EDQUOT: number;\n            const EEXIST: number;\n            const EFAULT: number;\n            const EFBIG: number;\n            const EHOSTUNREACH: number;\n            const EIDRM: number;\n            const EILSEQ: number;\n            const EINPROGRESS: number;\n            const EINTR: number;\n            const EINVAL: number;\n            const EIO: number;\n            const EISCONN: number;\n            const EISDIR: number;\n            const ELOOP: number;\n            const EMFILE: number;\n            const EMLINK: number;\n            const EMSGSIZE: number;\n            const EMULTIHOP: number;\n            const ENAMETOOLONG: number;\n            const ENETDOWN: number;\n            const ENETRESET: number;\n            const ENETUNREACH: number;\n            const ENFILE: number;\n            const ENOBUFS: number;\n            const ENODATA: number;\n            const ENODEV: number;\n            const ENOENT: number;\n            const ENOEXEC: number;\n            const ENOLCK: number;\n            const ENOLINK: number;\n            const ENOMEM: number;\n            const ENOMSG: number;\n            const ENOPROTOOPT: number;\n            const ENOSPC: number;\n            const ENOSR: number;\n            const ENOSTR: number;\n            const ENOSYS: number;\n            const ENOTCONN: number;\n            const ENOTDIR: number;\n            const ENOTEMPTY: number;\n            const ENOTSOCK: number;\n            const ENOTSUP: number;\n            const ENOTTY: number;\n            const ENXIO: number;\n            const EOPNOTSUPP: number;\n            const EOVERFLOW: number;\n            const EPERM: number;\n            const EPIPE: number;\n            const EPROTO: number;\n            const EPROTONOSUPPORT: number;\n            const EPROTOTYPE: number;\n            const ERANGE: number;\n            const EROFS: number;\n            const ESPIPE: number;\n            const ESRCH: number;\n            const ESTALE: number;\n            const ETIME: number;\n            const ETIMEDOUT: number;\n            const ETXTBSY: number;\n            const EWOULDBLOCK: number;\n            const EXDEV: number;\n            const WSAEINTR: number;\n            const WSAEBADF: number;\n            const WSAEACCES: number;\n            const WSAEFAULT: number;\n            const WSAEINVAL: number;\n            const WSAEMFILE: number;\n            const WSAEWOULDBLOCK: number;\n            const WSAEINPROGRESS: number;\n            const WSAEALREADY: number;\n            const WSAENOTSOCK: number;\n            const WSAEDESTADDRREQ: number;\n            const WSAEMSGSIZE: number;\n            const WSAEPROTOTYPE: number;\n            const WSAENOPROTOOPT: number;\n            const WSAEPROTONOSUPPORT: number;\n            const WSAESOCKTNOSUPPORT: number;\n            const WSAEOPNOTSUPP: number;\n            const WSAEPFNOSUPPORT: number;\n            const WSAEAFNOSUPPORT: number;\n            const WSAEADDRINUSE: number;\n            const WSAEADDRNOTAVAIL: number;\n            const WSAENETDOWN: number;\n            const WSAENETUNREACH: number;\n            const WSAENETRESET: number;\n            const WSAECONNABORTED: number;\n            const WSAECONNRESET: number;\n            const WSAENOBUFS: number;\n            const WSAEISCONN: number;\n            const WSAENOTCONN: number;\n            const WSAESHUTDOWN: number;\n            const WSAETOOMANYREFS: number;\n            const WSAETIMEDOUT: number;\n            const WSAECONNREFUSED: number;\n            const WSAELOOP: number;\n            const WSAENAMETOOLONG: number;\n            const WSAEHOSTDOWN: number;\n            const WSAEHOSTUNREACH: number;\n            const WSAENOTEMPTY: number;\n            const WSAEPROCLIM: number;\n            const WSAEUSERS: number;\n            const WSAEDQUOT: number;\n            const WSAESTALE: number;\n            const WSAEREMOTE: number;\n            const WSASYSNOTREADY: number;\n            const WSAVERNOTSUPPORTED: number;\n            const WSANOTINITIALISED: number;\n            const WSAEDISCON: number;\n            const WSAENOMORE: number;\n            const WSAECANCELLED: number;\n            const WSAEINVALIDPROCTABLE: number;\n            const WSAEINVALIDPROVIDER: number;\n            const WSAEPROVIDERFAILEDINIT: number;\n            const WSASYSCALLFAILURE: number;\n            const WSASERVICE_NOT_FOUND: number;\n            const WSATYPE_NOT_FOUND: number;\n            const WSA_E_NO_MORE: number;\n            const WSA_E_CANCELLED: number;\n            const WSAEREFUSED: number;\n        }\n        namespace dlopen {\n            const RTLD_LAZY: number;\n            const RTLD_NOW: number;\n            const RTLD_GLOBAL: number;\n            const RTLD_LOCAL: number;\n            const RTLD_DEEPBIND: number;\n        }\n        namespace priority {\n            const PRIORITY_LOW: number;\n            const PRIORITY_BELOW_NORMAL: number;\n            const PRIORITY_NORMAL: number;\n            const PRIORITY_ABOVE_NORMAL: number;\n            const PRIORITY_HIGH: number;\n            const PRIORITY_HIGHEST: number;\n        }\n    }\n    const devNull: string;\n    /**\n     * The operating system-specific end-of-line marker.\n     * * `\\n` on POSIX\n     * * `\\r\\n` on Windows\n     */\n    const EOL: string;\n    /**\n     * Returns the operating system CPU architecture for which the Node.js binary was\n     * compiled. Possible values are `'arm'`, `'arm64'`, `'ia32'`, `'loong64'`, `'mips'`, `'mipsel'`, `'ppc'`, `'ppc64'`, `'riscv64'`, `'s390'`, `'s390x'`,\n     * and `'x64'`.\n     *\n     * The return value is equivalent to [process.arch](https://nodejs.org/docs/latest-v22.x/api/process.html#processarch).\n     * @since v0.5.0\n     */\n    function arch(): string;\n    /**\n     * Returns a string identifying the kernel version.\n     *\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `RtlGetVersion()` is used, and if it is not\n     * available, `GetVersionExW()` will be used. See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\n     * @since v13.11.0, v12.17.0\n     */\n    function version(): string;\n    /**\n     * Returns a string identifying the operating system platform for which\n     * the Node.js binary was compiled. The value is set at compile time.\n     * Possible values are `'aix'`, `'darwin'`, `'freebsd'`, `'linux'`, `'openbsd'`, `'sunos'`, and `'win32'`.\n     *\n     * The return value is equivalent to `process.platform`.\n     *\n     * The value `'android'` may also be returned if Node.js is built on the Android\n     * operating system. [Android support is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\n     * @since v0.5.0\n     */\n    function platform(): NodeJS.Platform;\n    /**\n     * Returns the machine type as a string, such as `arm`, `arm64`, `aarch64`, `mips`, `mips64`, `ppc64`, `ppc64le`, `s390`, `s390x`, `i386`, `i686`, `x86_64`.\n     *\n     * On POSIX systems, the machine type is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `RtlGetVersion()` is used, and if it is not\n     * available, `GetVersionExW()` will be used. See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\n     * @since v18.9.0, v16.18.0\n     */\n    function machine(): string;\n    /**\n     * Returns the operating system's default directory for temporary files as a\n     * string.\n     * @since v0.9.9\n     */\n    function tmpdir(): string;\n    /**\n     * Returns a string identifying the endianness of the CPU for which the Node.js\n     * binary was compiled.\n     *\n     * Possible values are `'BE'` for big endian and `'LE'` for little endian.\n     * @since v0.9.4\n     */\n    function endianness(): \"BE\" | \"LE\";\n    /**\n     * Returns the scheduling priority for the process specified by `pid`. If `pid` is\n     * not provided or is `0`, the priority of the current process is returned.\n     * @since v10.10.0\n     * @param [pid=0] The process ID to retrieve scheduling priority for.\n     */\n    function getPriority(pid?: number): number;\n    /**\n     * Attempts to set the scheduling priority for the process specified by `pid`. If `pid` is not provided or is `0`, the process ID of the current process is used.\n     *\n     * The `priority` input must be an integer between `-20` (high priority) and `19` (low priority). Due to differences between Unix priority levels and Windows\n     * priority classes, `priority` is mapped to one of six priority constants in `os.constants.priority`. When retrieving a process priority level, this range\n     * mapping may cause the return value to be slightly different on Windows. To avoid\n     * confusion, set `priority` to one of the priority constants.\n     *\n     * On Windows, setting priority to `PRIORITY_HIGHEST` requires elevated user\n     * privileges. Otherwise the set priority will be silently reduced to `PRIORITY_HIGH`.\n     * @since v10.10.0\n     * @param [pid=0] The process ID to set scheduling priority for.\n     * @param priority The scheduling priority to assign to the process.\n     */\n    function setPriority(priority: number): void;\n    function setPriority(pid: number, priority: number): void;\n}\ndeclare module \"node:os\" {\n    export * from \"os\";\n}\n"
        }
    ]
}