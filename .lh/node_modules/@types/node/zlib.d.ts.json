{
    "sourceFile": "node_modules/@types/node/zlib.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:zlib` module provides compression functionality implemented using\n * Gzip, Deflate/Inflate, and Brotli.\n *\n * To access it:\n *\n * ```js\n * import zlib from 'node:zlib';\n * ```\n *\n * Compression and decompression are built around the Node.js\n * [Streams API](https://nodejs.org/docs/latest-v22.x/api/stream.html).\n *\n * Compressing or decompressing a stream (such as a file) can be accomplished by\n * piping the source stream through a `zlib` `Transform` stream into a destination\n * stream:\n *\n * ```js\n * import { createGzip } from 'node:zlib';\n * import { pipeline } from 'node:stream';\n * import {\n *   createReadStream,\n *   createWriteStream,\n * } from 'node:fs';\n *\n * const gzip = createGzip();\n * const source = createReadStream('input.txt');\n * const destination = createWriteStream('input.txt.gz');\n *\n * pipeline(source, gzip, destination, (err) => {\n *   if (err) {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   }\n * });\n *\n * // Or, Promisified\n *\n * import { promisify } from 'node:util';\n * const pipe = promisify(pipeline);\n *\n * async function do_gzip(input, output) {\n *   const gzip = createGzip();\n *   const source = createReadStream(input);\n *   const destination = createWriteStream(output);\n *   await pipe(source, gzip, destination);\n * }\n *\n * do_gzip('input.txt', 'input.txt.gz')\n *   .catch((err) => {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   });\n * ```\n *\n * It is also possible to compress or decompress data in a single step:\n *\n * ```js\n * import { deflate, unzip } from 'node:zlib';\n *\n * const input = '.................................';\n * deflate(input, (err, buffer) => {\n *   if (err) {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   }\n *   console.log(buffer.toString('base64'));\n * });\n *\n * const buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\n * unzip(buffer, (err, buffer) => {\n *   if (err) {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   }\n *   console.log(buffer.toString());\n * });\n *\n * // Or, Promisified\n *\n * import { promisify } from 'node:util';\n * const do_unzip = promisify(unzip);\n *\n * do_unzip(buffer)\n *   .then((buf) => console.log(buf.toString()))\n *   .catch((err) => {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   });\n * ```\n * @since v0.5.8\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/zlib.js)\n */\ndeclare module \"zlib\" {\n    import * as stream from \"node:stream\";\n    interface ZlibOptions {\n        /**\n         * @default constants.Z_NO_FLUSH\n         */\n        flush?: number | undefined;\n        /**\n         * @default constants.Z_FINISH\n         */\n        finishFlush?: number | undefined;\n        /**\n         * @default 16*1024\n         */\n        chunkSize?: number | undefined;\n        windowBits?: number | undefined;\n        level?: number | undefined; // compression only\n        memLevel?: number | undefined; // compression only\n        strategy?: number | undefined; // compression only\n        dictionary?: NodeJS.ArrayBufferView | ArrayBuffer | undefined; // deflate/inflate only, empty dictionary by default\n        /**\n         * If `true`, returns an object with `buffer` and `engine`.\n         */\n        info?: boolean | undefined;\n        /**\n         * Limits output size when using convenience methods.\n         * @default buffer.kMaxLength\n         */\n        maxOutputLength?: number | undefined;\n    }\n    interface BrotliOptions {\n        /**\n         * @default constants.BROTLI_OPERATION_PROCESS\n         */\n        flush?: number | undefined;\n        /**\n         * @default constants.BROTLI_OPERATION_FINISH\n         */\n        finishFlush?: number | undefined;\n        /**\n         * @default 16*1024\n         */\n        chunkSize?: number | undefined;\n        params?:\n            | {\n                /**\n                 * Each key is a `constants.BROTLI_*` constant.\n                 */\n                [key: number]: boolean | number;\n            }\n            | undefined;\n        /**\n         * Limits output size when using [convenience methods](https://nodejs.org/docs/latest-v22.x/api/zlib.html#convenience-methods).\n         * @default buffer.kMaxLength\n         */\n        maxOutputLength?: number | undefined;\n    }\n    interface ZstdOptions {\n        /**\n         * @default constants.ZSTD_e_continue\n         */\n        flush?: number | undefined;\n        /**\n         * @default constants.ZSTD_e_end\n         */\n        finishFlush?: number | undefined;\n        /**\n         * @default 16 * 1024\n         */\n        chunkSize?: number | undefined;\n        /**\n         * Key-value object containing indexed\n         * [Zstd parameters](https://nodejs.org/docs/latest-v22.x/api/zlib.html#zstd-constants).\n         */\n        params?: { [key: number]: number | boolean } | undefined;\n        /**\n         * Limits output size when using\n         * [convenience methods](https://nodejs.org/docs/latest-v22.x/api/zlib.html#convenience-methods).\n         * @default buffer.kMaxLength\n         */\n        maxOutputLength?: number | undefined;\n    }\n    interface Zlib {\n        /** @deprecated Use bytesWritten instead. */\n        readonly bytesRead: number;\n        readonly bytesWritten: number;\n        shell?: boolean | string | undefined;\n        close(callback?: () => void): void;\n        flush(kind?: number, callback?: () => void): void;\n        flush(callback?: () => void): void;\n    }\n    interface ZlibParams {\n        params(level: number, strategy: number, callback: () => void): void;\n    }\n    interface ZlibReset {\n        reset(): void;\n    }\n    interface BrotliCompress extends stream.Transform, Zlib {}\n    interface BrotliDecompress extends stream.Transform, Zlib {}\n    interface Gzip extends stream.Transform, Zlib {}\n    interface Gunzip extends stream.Transform, Zlib {}\n    interface Deflate extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\n    interface Inflate extends stream.Transform, Zlib, ZlibReset {}\n    interface DeflateRaw extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\n    interface InflateRaw extends stream.Transform, Zlib, ZlibReset {}\n    interface Unzip extends stream.Transform, Zlib {}\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    interface ZstdCompress extends stream.Transform, Zlib {}\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    interface ZstdDecompress extends stream.Transform, Zlib {}\n    /**\n     * Computes a 32-bit [Cyclic Redundancy Check](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) checksum of `data`.\n     * If `value` is specified, it is used as the starting value of the checksum, otherwise, 0 is used as the starting value.\n     * @param data When `data` is a string, it will be encoded as UTF-8 before being used for computation.\n     * @param value An optional starting value. It must be a 32-bit unsigned integer. @default 0\n     * @returns A 32-bit unsigned integer containing the checksum.\n     * @since v22.2.0\n     */\n    function crc32(data: string | Buffer | NodeJS.ArrayBufferView, value?: number): number;\n    /**\n     * Creates and returns a new `BrotliCompress` object.\n     * @since v11.7.0, v10.16.0\n     */\n    function createBrotliCompress(options?: BrotliOptions): BrotliCompress;\n    /**\n     * Creates and returns a new `BrotliDecompress` object.\n     * @since v11.7.0, v10.16.0\n     */\n    function createBrotliDecompress(options?: BrotliOptions): BrotliDecompress;\n    /**\n     * Creates and returns a new `Gzip` object.\n     * See `example`.\n     * @since v0.5.8\n     */\n    function createGzip(options?: ZlibOptions): Gzip;\n    /**\n     * Creates and returns a new `Gunzip` object.\n     * @since v0.5.8\n     */\n    function createGunzip(options?: ZlibOptions): Gunzip;\n    /**\n     * Creates and returns a new `Deflate` object.\n     * @since v0.5.8\n     */\n    function createDeflate(options?: ZlibOptions): Deflate;\n    /**\n     * Creates and returns a new `Inflate` object.\n     * @since v0.5.8\n     */\n    function createInflate(options?: ZlibOptions): Inflate;\n    /**\n     * Creates and returns a new `DeflateRaw` object.\n     *\n     * An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when `windowBits` is set to 8 for raw deflate streams. zlib would automatically set `windowBits` to 9 if was initially set to 8. Newer\n     * versions of zlib will throw an exception,\n     * so Node.js restored the original behavior of upgrading a value of 8 to 9,\n     * since passing `windowBits = 9` to zlib actually results in a compressed stream\n     * that effectively uses an 8-bit window only.\n     * @since v0.5.8\n     */\n    function createDeflateRaw(options?: ZlibOptions): DeflateRaw;\n    /**\n     * Creates and returns a new `InflateRaw` object.\n     * @since v0.5.8\n     */\n    function createInflateRaw(options?: ZlibOptions): InflateRaw;\n    /**\n     * Creates and returns a new `Unzip` object.\n     * @since v0.5.8\n     */\n    function createUnzip(options?: ZlibOptions): Unzip;\n    /**\n     * Creates and returns a new `ZstdCompress` object.\n     * @since v22.15.0\n     */\n    function createZstdCompress(options?: ZstdOptions): ZstdCompress;\n    /**\n     * Creates and returns a new `ZstdDecompress` object.\n     * @since v22.15.0\n     */\n    function createZstdDecompress(options?: ZstdOptions): ZstdDecompress;\n    type InputType = string | ArrayBuffer | NodeJS.ArrayBufferView;\n    type CompressCallback = (error: Error | null, result: Buffer) => void;\n    /**\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliCompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\n    function brotliCompress(buf: InputType, callback: CompressCallback): void;\n    namespace brotliCompress {\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `BrotliCompress`.\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliCompressSync(buf: InputType, options?: BrotliOptions): Buffer;\n    /**\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliDecompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\n    function brotliDecompress(buf: InputType, callback: CompressCallback): void;\n    namespace brotliDecompress {\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `BrotliDecompress`.\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliDecompressSync(buf: InputType, options?: BrotliOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function deflate(buf: InputType, callback: CompressCallback): void;\n    function deflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace deflate {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `Deflate`.\n     * @since v0.11.12\n     */\n    function deflateSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function deflateRaw(buf: InputType, callback: CompressCallback): void;\n    function deflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace deflateRaw {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `DeflateRaw`.\n     * @since v0.11.12\n     */\n    function deflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function gzip(buf: InputType, callback: CompressCallback): void;\n    function gzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace gzip {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `Gzip`.\n     * @since v0.11.12\n     */\n    function gzipSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function gunzip(buf: InputType, callback: CompressCallback): void;\n    function gunzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace gunzip {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `Gunzip`.\n     * @since v0.11.12\n     */\n    function gunzipSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function inflate(buf: InputType, callback: CompressCallback): void;\n    function inflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace inflate {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `Inflate`.\n     * @since v0.11.12\n     */\n    function inflateSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function inflateRaw(buf: InputType, callback: CompressCallback): void;\n    function inflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace inflateRaw {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `InflateRaw`.\n     * @since v0.11.12\n     */\n    function inflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function unzip(buf: InputType, callback: CompressCallback): void;\n    function unzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace unzip {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `Unzip`.\n     * @since v0.11.12\n     */\n    function unzipSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdCompress(buf: InputType, callback: CompressCallback): void;\n    function zstdCompress(buf: InputType, options: ZstdOptions, callback: CompressCallback): void;\n    namespace zstdCompress {\n        function __promisify__(buffer: InputType, options?: ZstdOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `ZstdCompress`.\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdCompressSync(buf: InputType, options?: ZstdOptions): Buffer;\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdDecompress(buf: InputType, callback: CompressCallback): void;\n    function zstdDecompress(buf: InputType, options: ZstdOptions, callback: CompressCallback): void;\n    namespace zstdDecompress {\n        function __promisify__(buffer: InputType, options?: ZstdOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `ZstdDecompress`.\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdDecompressSync(buf: InputType, options?: ZstdOptions): Buffer;\n    namespace constants {\n        const BROTLI_DECODE: number;\n        const BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: number;\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: number;\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: number;\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: number;\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: number;\n        const BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: number;\n        const BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: number;\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: number;\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: number;\n        const BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: number;\n        const BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: number;\n        const BROTLI_DECODER_ERROR_FORMAT_DISTANCE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_1: number;\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_2: number;\n        const BROTLI_DECODER_ERROR_FORMAT_RESERVED: number;\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: number;\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: number;\n        const BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: number;\n        const BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: number;\n        const BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: number;\n        const BROTLI_DECODER_ERROR_UNREACHABLE: number;\n        const BROTLI_DECODER_NEEDS_MORE_INPUT: number;\n        const BROTLI_DECODER_NEEDS_MORE_OUTPUT: number;\n        const BROTLI_DECODER_NO_ERROR: number;\n        const BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: number;\n        const BROTLI_DECODER_PARAM_LARGE_WINDOW: number;\n        const BROTLI_DECODER_RESULT_ERROR: number;\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: number;\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: number;\n        const BROTLI_DECODER_RESULT_SUCCESS: number;\n        const BROTLI_DECODER_SUCCESS: number;\n        const BROTLI_DEFAULT_MODE: number;\n        const BROTLI_DEFAULT_QUALITY: number;\n        const BROTLI_DEFAULT_WINDOW: number;\n        const BROTLI_ENCODE: number;\n        const BROTLI_LARGE_MAX_WINDOW_BITS: number;\n        const BROTLI_MAX_INPUT_BLOCK_BITS: number;\n        const BROTLI_MAX_QUALITY: number;\n        const BROTLI_MAX_WINDOW_BITS: number;\n        const BROTLI_MIN_INPUT_BLOCK_BITS: number;\n        const BROTLI_MIN_QUALITY: number;\n        const BROTLI_MIN_WINDOW_BITS: number;\n        const BROTLI_MODE_FONT: number;\n        const BROTLI_MODE_GENERIC: number;\n        const BROTLI_MODE_TEXT: number;\n        const BROTLI_OPERATION_EMIT_METADATA: number;\n        const BROTLI_OPERATION_FINISH: number;\n        const BROTLI_OPERATION_FLUSH: number;\n        const BROTLI_OPERATION_PROCESS: number;\n        const BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: number;\n        const BROTLI_PARAM_LARGE_WINDOW: number;\n        const BROTLI_PARAM_LGBLOCK: number;\n        const BROTLI_PARAM_LGWIN: number;\n        const BROTLI_PARAM_MODE: number;\n        const BROTLI_PARAM_NDIRECT: number;\n        const BROTLI_PARAM_NPOSTFIX: number;\n        const BROTLI_PARAM_QUALITY: number;\n        const BROTLI_PARAM_SIZE_HINT: number;\n        const DEFLATE: number;\n        const DEFLATERAW: number;\n        const GUNZIP: number;\n        const GZIP: number;\n        const INFLATE: number;\n        const INFLATERAW: number;\n        const UNZIP: number;\n        const ZLIB_VERNUM: number;\n        const ZSTD_CLEVEL_DEFAULT: number;\n        const ZSTD_COMPRESS: number;\n        const ZSTD_DECOMPRESS: number;\n        const ZSTD_btlazy2: number;\n        const ZSTD_btopt: number;\n        const ZSTD_btultra: number;\n        const ZSTD_btultra2: number;\n        const ZSTD_c_chainLog: number;\n        const ZSTD_c_checksumFlag: number;\n        const ZSTD_c_compressionLevel: number;\n        const ZSTD_c_contentSizeFlag: number;\n        const ZSTD_c_dictIDFlag: number;\n        const ZSTD_c_enableLongDistanceMatching: number;\n        const ZSTD_c_hashLog: number;\n        const ZSTD_c_jobSize: number;\n        const ZSTD_c_ldmBucketSizeLog: number;\n        const ZSTD_c_ldmHashLog: number;\n        const ZSTD_c_ldmHashRateLog: number;\n        const ZSTD_c_ldmMinMatch: number;\n        const ZSTD_c_minMatch: number;\n        const ZSTD_c_nbWorkers: number;\n        const ZSTD_c_overlapLog: number;\n        const ZSTD_c_searchLog: number;\n        const ZSTD_c_strategy: number;\n        const ZSTD_c_targetLength: number;\n        const ZSTD_c_windowLog: number;\n        const ZSTD_d_windowLogMax: number;\n        const ZSTD_dfast: number;\n        const ZSTD_e_continue: number;\n        const ZSTD_e_end: number;\n        const ZSTD_e_flush: number;\n        const ZSTD_error_GENERIC: number;\n        const ZSTD_error_checksum_wrong: number;\n        const ZSTD_error_corruption_detected: number;\n        const ZSTD_error_dictionaryCreation_failed: number;\n        const ZSTD_error_dictionary_corrupted: number;\n        const ZSTD_error_dictionary_wrong: number;\n        const ZSTD_error_dstBuffer_null: number;\n        const ZSTD_error_dstSize_tooSmall: number;\n        const ZSTD_error_frameParameter_unsupported: number;\n        const ZSTD_error_frameParameter_windowTooLarge: number;\n        const ZSTD_error_init_missing: number;\n        const ZSTD_error_literals_headerWrong: number;\n        const ZSTD_error_maxSymbolValue_tooLarge: number;\n        const ZSTD_error_maxSymbolValue_tooSmall: number;\n        const ZSTD_error_memory_allocation: number;\n        const ZSTD_error_noForwardProgress_destFull: number;\n        const ZSTD_error_noForwardProgress_inputEmpty: number;\n        const ZSTD_error_no_error: number;\n        const ZSTD_error_parameter_combination_unsupported: number;\n        const ZSTD_error_parameter_outOfBound: number;\n        const ZSTD_error_parameter_unsupported: number;\n        const ZSTD_error_prefix_unknown: number;\n        const ZSTD_error_srcSize_wrong: number;\n        const ZSTD_error_stabilityCondition_notRespected: number;\n        const ZSTD_error_stage_wrong: number;\n        const ZSTD_error_tableLog_tooLarge: number;\n        const ZSTD_error_version_unsupported: number;\n        const ZSTD_error_workSpace_tooSmall: number;\n        const ZSTD_fast: number;\n        const ZSTD_greedy: number;\n        const ZSTD_lazy: number;\n        const ZSTD_lazy2: number;\n        const Z_BEST_COMPRESSION: number;\n        const Z_BEST_SPEED: number;\n        const Z_BLOCK: number;\n        const Z_BUF_ERROR: number;\n        const Z_DATA_ERROR: number;\n        const Z_DEFAULT_CHUNK: number;\n        const Z_DEFAULT_COMPRESSION: number;\n        const Z_DEFAULT_LEVEL: number;\n        const Z_DEFAULT_MEMLEVEL: number;\n        const Z_DEFAULT_STRATEGY: number;\n        const Z_DEFAULT_WINDOWBITS: number;\n        const Z_ERRNO: number;\n        const Z_FILTERED: number;\n        const Z_FINISH: number;\n        const Z_FIXED: number;\n        const Z_FULL_FLUSH: number;\n        const Z_HUFFMAN_ONLY: number;\n        const Z_MAX_CHUNK: number;\n        const Z_MAX_LEVEL: number;\n        const Z_MAX_MEMLEVEL: number;\n        const Z_MAX_WINDOWBITS: number;\n        const Z_MEM_ERROR: number;\n        const Z_MIN_CHUNK: number;\n        const Z_MIN_LEVEL: number;\n        const Z_MIN_MEMLEVEL: number;\n        const Z_MIN_WINDOWBITS: number;\n        const Z_NEED_DICT: number;\n        const Z_NO_COMPRESSION: number;\n        const Z_NO_FLUSH: number;\n        const Z_OK: number;\n        const Z_PARTIAL_FLUSH: number;\n        const Z_RLE: number;\n        const Z_STREAM_END: number;\n        const Z_STREAM_ERROR: number;\n        const Z_SYNC_FLUSH: number;\n        const Z_VERSION_ERROR: number;\n    }\n    // Allowed flush values.\n    /** @deprecated Use `constants.Z_NO_FLUSH` */\n    const Z_NO_FLUSH: number;\n    /** @deprecated Use `constants.Z_PARTIAL_FLUSH` */\n    const Z_PARTIAL_FLUSH: number;\n    /** @deprecated Use `constants.Z_SYNC_FLUSH` */\n    const Z_SYNC_FLUSH: number;\n    /** @deprecated Use `constants.Z_FULL_FLUSH` */\n    const Z_FULL_FLUSH: number;\n    /** @deprecated Use `constants.Z_FINISH` */\n    const Z_FINISH: number;\n    /** @deprecated Use `constants.Z_BLOCK` */\n    const Z_BLOCK: number;\n    /** @deprecated Use `constants.Z_TREES` */\n    const Z_TREES: number;\n    // Return codes for the compression/decompression functions.\n    // Negative values are errors, positive values are used for special but normal events.\n    /** @deprecated Use `constants.Z_OK` */\n    const Z_OK: number;\n    /** @deprecated Use `constants.Z_STREAM_END` */\n    const Z_STREAM_END: number;\n    /** @deprecated Use `constants.Z_NEED_DICT` */\n    const Z_NEED_DICT: number;\n    /** @deprecated Use `constants.Z_ERRNO` */\n    const Z_ERRNO: number;\n    /** @deprecated Use `constants.Z_STREAM_ERROR` */\n    const Z_STREAM_ERROR: number;\n    /** @deprecated Use `constants.Z_DATA_ERROR` */\n    const Z_DATA_ERROR: number;\n    /** @deprecated Use `constants.Z_MEM_ERROR` */\n    const Z_MEM_ERROR: number;\n    /** @deprecated Use `constants.Z_BUF_ERROR` */\n    const Z_BUF_ERROR: number;\n    /** @deprecated Use `constants.Z_VERSION_ERROR` */\n    const Z_VERSION_ERROR: number;\n    // Compression levels.\n    /** @deprecated Use `constants.Z_NO_COMPRESSION` */\n    const Z_NO_COMPRESSION: number;\n    /** @deprecated Use `constants.Z_BEST_SPEED` */\n    const Z_BEST_SPEED: number;\n    /** @deprecated Use `constants.Z_BEST_COMPRESSION` */\n    const Z_BEST_COMPRESSION: number;\n    /** @deprecated Use `constants.Z_DEFAULT_COMPRESSION` */\n    const Z_DEFAULT_COMPRESSION: number;\n    // Compression strategy.\n    /** @deprecated Use `constants.Z_FILTERED` */\n    const Z_FILTERED: number;\n    /** @deprecated Use `constants.Z_HUFFMAN_ONLY` */\n    const Z_HUFFMAN_ONLY: number;\n    /** @deprecated Use `constants.Z_RLE` */\n    const Z_RLE: number;\n    /** @deprecated Use `constants.Z_FIXED` */\n    const Z_FIXED: number;\n    /** @deprecated Use `constants.Z_DEFAULT_STRATEGY` */\n    const Z_DEFAULT_STRATEGY: number;\n    /** @deprecated */\n    const Z_BINARY: number;\n    /** @deprecated */\n    const Z_TEXT: number;\n    /** @deprecated */\n    const Z_ASCII: number;\n    /** @deprecated  */\n    const Z_UNKNOWN: number;\n    /** @deprecated */\n    const Z_DEFLATED: number;\n}\ndeclare module \"node:zlib\" {\n    export * from \"zlib\";\n}\n"
        }
    ]
}