{
    "sourceFile": "node_modules/@types/node/inspector.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// These definitions are automatically generated by the generate-inspector script.\n// Do not edit this file directly.\n// See scripts/generate-inspector/README.md for information on how to update the protocol definitions.\n// Changes to the module itself should be added to the generator template (scripts/generate-inspector/inspector.d.ts.template).\n\n/**\n * The `node:inspector` module provides an API for interacting with the V8\n * inspector.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/inspector.js)\n */\ndeclare module 'inspector' {\n    import EventEmitter = require('node:events');\n\n    interface InspectorNotification<T> {\n        method: string;\n        params: T;\n    }\n\n    namespace Schema {\n        /**\n         * Description of the protocol domain.\n         */\n        interface Domain {\n            /**\n             * Domain name.\n             */\n            name: string;\n            /**\n             * Domain version.\n             */\n            version: string;\n        }\n        interface GetDomainsReturnType {\n            /**\n             * List of supported domains.\n             */\n            domains: Domain[];\n        }\n    }\n    namespace Runtime {\n        /**\n         * Unique script identifier.\n         */\n        type ScriptId = string;\n        /**\n         * Unique object identifier.\n         */\n        type RemoteObjectId = string;\n        /**\n         * Primitive value which cannot be JSON-stringified.\n         */\n        type UnserializableValue = string;\n        /**\n         * Mirror object referencing original JavaScript object.\n         */\n        interface RemoteObject {\n            /**\n             * Object type.\n             */\n            type: string;\n            /**\n             * Object subtype hint. Specified for <code>object</code> type values only.\n             */\n            subtype?: string | undefined;\n            /**\n             * Object class (constructor) name. Specified for <code>object</code> type values only.\n             */\n            className?: string | undefined;\n            /**\n             * Remote object value in case of primitive values or JSON values (if it was requested).\n             */\n            value?: any;\n            /**\n             * Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.\n             */\n            unserializableValue?: UnserializableValue | undefined;\n            /**\n             * String representation of the object.\n             */\n            description?: string | undefined;\n            /**\n             * Unique object identifier (for non-primitive values).\n             */\n            objectId?: RemoteObjectId | undefined;\n            /**\n             * Preview containing abbreviated property values. Specified for <code>object</code> type values only.\n             * @experimental\n             */\n            preview?: ObjectPreview | undefined;\n            /**\n             * @experimental\n             */\n            customPreview?: CustomPreview | undefined;\n        }\n        /**\n         * @experimental\n         */\n        interface CustomPreview {\n            header: string;\n            hasBody: boolean;\n            formatterObjectId: RemoteObjectId;\n            bindRemoteObjectFunctionId: RemoteObjectId;\n            configObjectId?: RemoteObjectId | undefined;\n        }\n        /**\n         * Object containing abbreviated remote object value.\n         * @experimental\n         */\n        interface ObjectPreview {\n            /**\n             * Object type.\n             */\n            type: string;\n            /**\n             * Object subtype hint. Specified for <code>object</code> type values only.\n             */\n            subtype?: string | undefined;\n            /**\n             * String representation of the object.\n             */\n            description?: string | undefined;\n            /**\n             * True iff some of the properties or entries of the original object did not fit.\n             */\n            overflow: boolean;\n            /**\n             * List of the properties.\n             */\n            properties: PropertyPreview[];\n            /**\n             * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.\n             */\n            entries?: EntryPreview[] | undefined;\n        }\n        /**\n         * @experimental\n         */\n        interface PropertyPreview {\n            /**\n             * Property name.\n             */\n            name: string;\n            /**\n             * Object type. Accessor means that the property itself is an accessor property.\n             */\n            type: string;\n            /**\n             * User-friendly property value string.\n             */\n            value?: string | undefined;\n            /**\n             * Nested value preview.\n             */\n            valuePreview?: ObjectPreview | undefined;\n            /**\n             * Object subtype hint. Specified for <code>object</code> type values only.\n             */\n            subtype?: string | undefined;\n        }\n        /**\n         * @experimental\n         */\n        interface EntryPreview {\n            /**\n             * Preview of the key. Specified for map-like collection entries.\n             */\n            key?: ObjectPreview | undefined;\n            /**\n             * Preview of the value.\n             */\n            value: ObjectPreview;\n        }\n        /**\n         * Object property descriptor.\n         */\n        interface PropertyDescriptor {\n            /**\n             * Property name or symbol description.\n             */\n            name: string;\n            /**\n             * The value associated with the property.\n             */\n            value?: RemoteObject | undefined;\n            /**\n             * True if the value associated with the property may be changed (data descriptors only).\n             */\n            writable?: boolean | undefined;\n            /**\n             * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).\n             */\n            get?: RemoteObject | undefined;\n            /**\n             * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).\n             */\n            set?: RemoteObject | undefined;\n            /**\n             * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n             */\n            configurable: boolean;\n            /**\n             * True if this property shows up during enumeration of the properties on the corresponding object.\n             */\n            enumerable: boolean;\n            /**\n             * True if the result was thrown during the evaluation.\n             */\n            wasThrown?: boolean | undefined;\n            /**\n             * True if the property is owned for the object.\n             */\n            isOwn?: boolean | undefined;\n            /**\n             * Property symbol object, if the property is of the <code>symbol</code> type.\n             */\n            symbol?: RemoteObject | undefined;\n        }\n        /**\n         * Object internal property descriptor. This property isn't normally visible in JavaScript code.\n         */\n        interface InternalPropertyDescriptor {\n            /**\n             * Conventional property name.\n             */\n            name: string;\n            /**\n             * The value associated with the property.\n             */\n            value?: RemoteObject | undefined;\n        }\n        /**\n         * Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.\n         */\n        interface CallArgument {\n            /**\n             * Primitive value or serializable javascript object.\n             */\n            value?: any;\n            /**\n             * Primitive value which can not be JSON-stringified.\n             */\n            unserializableValue?: UnserializableValue | undefined;\n            /**\n             * Remote object handle.\n             */\n            objectId?: RemoteObjectId | undefined;\n        }\n        /**\n         * Id of an execution context.\n         */\n        type ExecutionContextId = number;\n        /**\n         * Description of an isolated world.\n         */\n        interface ExecutionContextDescription {\n            /**\n             * Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.\n             */\n            id: ExecutionContextId;\n            /**\n             * Execution context origin.\n             */\n            origin: string;\n            /**\n             * Human readable name describing given context.\n             */\n            name: string;\n            /**\n             * Embedder-specific auxiliary data.\n             */\n            auxData?: {} | undefined;\n        }\n        /**\n         * Detailed information about exception (or error) that was thrown during script compilation or execution.\n         */\n        interface ExceptionDetails {\n            /**\n             * Exception id.\n             */\n            exceptionId: number;\n            /**\n             * Exception text, which should be used together with exception object when available.\n             */\n            text: string;\n            /**\n             * Line number of the exception location (0-based).\n             */\n            lineNumber: number;\n            /**\n             * Column number of the exception location (0-based).\n             */\n            columnNumber: number;\n            /**\n             * Script ID of the exception location.\n             */\n            scriptId?: ScriptId | undefined;\n            /**\n             * URL of the exception location, to be used when the script was not reported.\n             */\n            url?: string | undefined;\n            /**\n             * JavaScript stack trace if available.\n             */\n            stackTrace?: StackTrace | undefined;\n            /**\n             * Exception object if available.\n             */\n            exception?: RemoteObject | undefined;\n            /**\n             * Identifier of the context where exception happened.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n        }\n        /**\n         * Number of milliseconds since epoch.\n         */\n        type Timestamp = number;\n        /**\n         * Stack entry for runtime errors and assertions.\n         */\n        interface CallFrame {\n            /**\n             * JavaScript function name.\n             */\n            functionName: string;\n            /**\n             * JavaScript script id.\n             */\n            scriptId: ScriptId;\n            /**\n             * JavaScript script name or url.\n             */\n            url: string;\n            /**\n             * JavaScript script line number (0-based).\n             */\n            lineNumber: number;\n            /**\n             * JavaScript script column number (0-based).\n             */\n            columnNumber: number;\n        }\n        /**\n         * Call frames for assertions or error messages.\n         */\n        interface StackTrace {\n            /**\n             * String label of this stack trace. For async traces this may be a name of the function that initiated the async call.\n             */\n            description?: string | undefined;\n            /**\n             * JavaScript function name.\n             */\n            callFrames: CallFrame[];\n            /**\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\n             */\n            parent?: StackTrace | undefined;\n            /**\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\n             * @experimental\n             */\n            parentId?: StackTraceId | undefined;\n        }\n        /**\n         * Unique identifier of current debugger.\n         * @experimental\n         */\n        type UniqueDebuggerId = string;\n        /**\n         * If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages.\n         * @experimental\n         */\n        interface StackTraceId {\n            id: string;\n            debuggerId?: UniqueDebuggerId | undefined;\n        }\n        interface EvaluateParameterType {\n            /**\n             * Expression to evaluate.\n             */\n            expression: string;\n            /**\n             * Symbolic group name that can be used to release multiple objects.\n             */\n            objectGroup?: string | undefined;\n            /**\n             * Determines whether Command Line API should be available during the evaluation.\n             */\n            includeCommandLineAPI?: boolean | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n             */\n            contextId?: ExecutionContextId | undefined;\n            /**\n             * Whether the result is expected to be a JSON object that should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether execution should be treated as initiated by user in the UI.\n             */\n            userGesture?: boolean | undefined;\n            /**\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\n             */\n            awaitPromise?: boolean | undefined;\n        }\n        interface AwaitPromiseParameterType {\n            /**\n             * Identifier of the promise.\n             */\n            promiseObjectId: RemoteObjectId;\n            /**\n             * Whether the result is expected to be a JSON object that should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             */\n            generatePreview?: boolean | undefined;\n        }\n        interface CallFunctionOnParameterType {\n            /**\n             * Declaration of the function to call.\n             */\n            functionDeclaration: string;\n            /**\n             * Identifier of the object to call function on. Either objectId or executionContextId should be specified.\n             */\n            objectId?: RemoteObjectId | undefined;\n            /**\n             * Call arguments. All call arguments must belong to the same JavaScript world as the target object.\n             */\n            arguments?: CallArgument[] | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Whether the result is expected to be a JSON object which should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether execution should be treated as initiated by user in the UI.\n             */\n            userGesture?: boolean | undefined;\n            /**\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\n             */\n            awaitPromise?: boolean | undefined;\n            /**\n             * Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n            /**\n             * Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.\n             */\n            objectGroup?: string | undefined;\n        }\n        interface GetPropertiesParameterType {\n            /**\n             * Identifier of the object to return properties for.\n             */\n            objectId: RemoteObjectId;\n            /**\n             * If true, returns properties belonging only to the element itself, not to its prototype chain.\n             */\n            ownProperties?: boolean | undefined;\n            /**\n             * If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.\n             * @experimental\n             */\n            accessorPropertiesOnly?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the results.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n        }\n        interface ReleaseObjectParameterType {\n            /**\n             * Identifier of the object to release.\n             */\n            objectId: RemoteObjectId;\n        }\n        interface ReleaseObjectGroupParameterType {\n            /**\n             * Symbolic object group name.\n             */\n            objectGroup: string;\n        }\n        interface SetCustomObjectFormatterEnabledParameterType {\n            enabled: boolean;\n        }\n        interface CompileScriptParameterType {\n            /**\n             * Expression to compile.\n             */\n            expression: string;\n            /**\n             * Source url to be set for the script.\n             */\n            sourceURL: string;\n            /**\n             * Specifies whether the compiled script should be persisted.\n             */\n            persistScript: boolean;\n            /**\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n        }\n        interface RunScriptParameterType {\n            /**\n             * Id of the script to run.\n             */\n            scriptId: ScriptId;\n            /**\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n            /**\n             * Symbolic group name that can be used to release multiple objects.\n             */\n            objectGroup?: string | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Determines whether Command Line API should be available during the evaluation.\n             */\n            includeCommandLineAPI?: boolean | undefined;\n            /**\n             * Whether the result is expected to be a JSON object which should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\n             */\n            awaitPromise?: boolean | undefined;\n        }\n        interface QueryObjectsParameterType {\n            /**\n             * Identifier of the prototype to return objects for.\n             */\n            prototypeObjectId: RemoteObjectId;\n        }\n        interface GlobalLexicalScopeNamesParameterType {\n            /**\n             * Specifies in which execution context to lookup global scope variables.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n        }\n        interface EvaluateReturnType {\n            /**\n             * Evaluation result.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface AwaitPromiseReturnType {\n            /**\n             * Promise result. Will contain rejected value if promise was rejected.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details if stack strace is available.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface CallFunctionOnReturnType {\n            /**\n             * Call result.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface GetPropertiesReturnType {\n            /**\n             * Object properties.\n             */\n            result: PropertyDescriptor[];\n            /**\n             * Internal object properties (only of the element itself).\n             */\n            internalProperties?: InternalPropertyDescriptor[] | undefined;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface CompileScriptReturnType {\n            /**\n             * Id of the script.\n             */\n            scriptId?: ScriptId | undefined;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface RunScriptReturnType {\n            /**\n             * Run result.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface QueryObjectsReturnType {\n            /**\n             * Array with objects.\n             */\n            objects: RemoteObject;\n        }\n        interface GlobalLexicalScopeNamesReturnType {\n            names: string[];\n        }\n        interface ExecutionContextCreatedEventDataType {\n            /**\n             * A newly created execution context.\n             */\n            context: ExecutionContextDescription;\n        }\n        interface ExecutionContextDestroyedEventDataType {\n            /**\n             * Id of the destroyed context\n             */\n            executionContextId: ExecutionContextId;\n        }\n        interface ExceptionThrownEventDataType {\n            /**\n             * Timestamp of the exception.\n             */\n            timestamp: Timestamp;\n            exceptionDetails: ExceptionDetails;\n        }\n        interface ExceptionRevokedEventDataType {\n            /**\n             * Reason describing why exception was revoked.\n             */\n            reason: string;\n            /**\n             * The id of revoked exception, as reported in <code>exceptionThrown</code>.\n             */\n            exceptionId: number;\n        }\n        interface ConsoleAPICalledEventDataType {\n            /**\n             * Type of the call.\n             */\n            type: string;\n            /**\n             * Call arguments.\n             */\n            args: RemoteObject[];\n            /**\n             * Identifier of the context where the call was made.\n             */\n            executionContextId: ExecutionContextId;\n            /**\n             * Call timestamp.\n             */\n            timestamp: Timestamp;\n            /**\n             * Stack trace captured when the call was made.\n             */\n            stackTrace?: StackTrace | undefined;\n            /**\n             * Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.\n             * @experimental\n             */\n            context?: string | undefined;\n        }\n        interface InspectRequestedEventDataType {\n            object: RemoteObject;\n            hints: {};\n        }\n    }\n    namespace Debugger {\n        /**\n         * Breakpoint identifier.\n         */\n        type BreakpointId = string;\n        /**\n         * Call frame identifier.\n         */\n        type CallFrameId = string;\n        /**\n         * Location in the source code.\n         */\n        interface Location {\n            /**\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * Line number in the script (0-based).\n             */\n            lineNumber: number;\n            /**\n             * Column number in the script (0-based).\n             */\n            columnNumber?: number | undefined;\n        }\n        /**\n         * Location in the source code.\n         * @experimental\n         */\n        interface ScriptPosition {\n            lineNumber: number;\n            columnNumber: number;\n        }\n        /**\n         * JavaScript call frame. Array of call frames form the call stack.\n         */\n        interface CallFrame {\n            /**\n             * Call frame identifier. This identifier is only valid while the virtual machine is paused.\n             */\n            callFrameId: CallFrameId;\n            /**\n             * Name of the JavaScript function called on this call frame.\n             */\n            functionName: string;\n            /**\n             * Location in the source code.\n             */\n            functionLocation?: Location | undefined;\n            /**\n             * Location in the source code.\n             */\n            location: Location;\n            /**\n             * JavaScript script name or url.\n             */\n            url: string;\n            /**\n             * Scope chain for this call frame.\n             */\n            scopeChain: Scope[];\n            /**\n             * <code>this</code> object for this call frame.\n             */\n            this: Runtime.RemoteObject;\n            /**\n             * The value being returned, if the function is at return point.\n             */\n            returnValue?: Runtime.RemoteObject | undefined;\n        }\n        /**\n         * Scope description.\n         */\n        interface Scope {\n            /**\n             * Scope type.\n             */\n            type: string;\n            /**\n             * Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.\n             */\n            object: Runtime.RemoteObject;\n            name?: string | undefined;\n            /**\n             * Location in the source code where scope starts\n             */\n            startLocation?: Location | undefined;\n            /**\n             * Location in the source code where scope ends\n             */\n            endLocation?: Location | undefined;\n        }\n        /**\n         * Search match for resource.\n         */\n        interface SearchMatch {\n            /**\n             * Line number in resource content.\n             */\n            lineNumber: number;\n            /**\n             * Line with match content.\n             */\n            lineContent: string;\n        }\n        interface BreakLocation {\n            /**\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * Line number in the script (0-based).\n             */\n            lineNumber: number;\n            /**\n             * Column number in the script (0-based).\n             */\n            columnNumber?: number | undefined;\n            type?: string | undefined;\n        }\n        interface SetBreakpointsActiveParameterType {\n            /**\n             * New value for breakpoints active state.\n             */\n            active: boolean;\n        }\n        interface SetSkipAllPausesParameterType {\n            /**\n             * New value for skip pauses state.\n             */\n            skip: boolean;\n        }\n        interface SetBreakpointByUrlParameterType {\n            /**\n             * Line number to set breakpoint at.\n             */\n            lineNumber: number;\n            /**\n             * URL of the resources to set breakpoint on.\n             */\n            url?: string | undefined;\n            /**\n             * Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.\n             */\n            urlRegex?: string | undefined;\n            /**\n             * Script hash of the resources to set breakpoint on.\n             */\n            scriptHash?: string | undefined;\n            /**\n             * Offset in the line to set breakpoint at.\n             */\n            columnNumber?: number | undefined;\n            /**\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\n             */\n            condition?: string | undefined;\n        }\n        interface SetBreakpointParameterType {\n            /**\n             * Location to set breakpoint in.\n             */\n            location: Location;\n            /**\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\n             */\n            condition?: string | undefined;\n        }\n        interface RemoveBreakpointParameterType {\n            breakpointId: BreakpointId;\n        }\n        interface GetPossibleBreakpointsParameterType {\n            /**\n             * Start of range to search possible breakpoint locations in.\n             */\n            start: Location;\n            /**\n             * End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.\n             */\n            end?: Location | undefined;\n            /**\n             * Only consider locations which are in the same (non-nested) function as start.\n             */\n            restrictToFunction?: boolean | undefined;\n        }\n        interface ContinueToLocationParameterType {\n            /**\n             * Location to continue to.\n             */\n            location: Location;\n            targetCallFrames?: string | undefined;\n        }\n        interface PauseOnAsyncCallParameterType {\n            /**\n             * Debugger will pause when async call with given stack trace is started.\n             */\n            parentStackTraceId: Runtime.StackTraceId;\n        }\n        interface StepIntoParameterType {\n            /**\n             * Debugger will issue additional Debugger.paused notification if any async task is scheduled before next pause.\n             * @experimental\n             */\n            breakOnAsyncCall?: boolean | undefined;\n        }\n        interface GetStackTraceParameterType {\n            stackTraceId: Runtime.StackTraceId;\n        }\n        interface SearchInContentParameterType {\n            /**\n             * Id of the script to search in.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * String to search for.\n             */\n            query: string;\n            /**\n             * If true, search is case sensitive.\n             */\n            caseSensitive?: boolean | undefined;\n            /**\n             * If true, treats string parameter as regex.\n             */\n            isRegex?: boolean | undefined;\n        }\n        interface SetScriptSourceParameterType {\n            /**\n             * Id of the script to edit.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * New content of the script.\n             */\n            scriptSource: string;\n            /**\n             *  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.\n             */\n            dryRun?: boolean | undefined;\n        }\n        interface RestartFrameParameterType {\n            /**\n             * Call frame identifier to evaluate on.\n             */\n            callFrameId: CallFrameId;\n        }\n        interface GetScriptSourceParameterType {\n            /**\n             * Id of the script to get source for.\n             */\n            scriptId: Runtime.ScriptId;\n        }\n        interface SetPauseOnExceptionsParameterType {\n            /**\n             * Pause on exceptions mode.\n             */\n            state: string;\n        }\n        interface EvaluateOnCallFrameParameterType {\n            /**\n             * Call frame identifier to evaluate on.\n             */\n            callFrameId: CallFrameId;\n            /**\n             * Expression to evaluate.\n             */\n            expression: string;\n            /**\n             * String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).\n             */\n            objectGroup?: string | undefined;\n            /**\n             * Specifies whether command line API should be available to the evaluated expression, defaults to false.\n             */\n            includeCommandLineAPI?: boolean | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Whether the result is expected to be a JSON object that should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether to throw an exception if side effect cannot be ruled out during evaluation.\n             */\n            throwOnSideEffect?: boolean | undefined;\n        }\n        interface SetVariableValueParameterType {\n            /**\n             * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.\n             */\n            scopeNumber: number;\n            /**\n             * Variable name.\n             */\n            variableName: string;\n            /**\n             * New variable value.\n             */\n            newValue: Runtime.CallArgument;\n            /**\n             * Id of callframe that holds variable.\n             */\n            callFrameId: CallFrameId;\n        }\n        interface SetReturnValueParameterType {\n            /**\n             * New return value.\n             */\n            newValue: Runtime.CallArgument;\n        }\n        interface SetAsyncCallStackDepthParameterType {\n            /**\n             * Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).\n             */\n            maxDepth: number;\n        }\n        interface SetBlackboxPatternsParameterType {\n            /**\n             * Array of regexps that will be used to check script url for blackbox state.\n             */\n            patterns: string[];\n        }\n        interface SetBlackboxedRangesParameterType {\n            /**\n             * Id of the script.\n             */\n            scriptId: Runtime.ScriptId;\n            positions: ScriptPosition[];\n        }\n        interface EnableReturnType {\n            /**\n             * Unique identifier of the debugger.\n             * @experimental\n             */\n            debuggerId: Runtime.UniqueDebuggerId;\n        }\n        interface SetBreakpointByUrlReturnType {\n            /**\n             * Id of the created breakpoint for further reference.\n             */\n            breakpointId: BreakpointId;\n            /**\n             * List of the locations this breakpoint resolved into upon addition.\n             */\n            locations: Location[];\n        }\n        interface SetBreakpointReturnType {\n            /**\n             * Id of the created breakpoint for further reference.\n             */\n            breakpointId: BreakpointId;\n            /**\n             * Location this breakpoint resolved into.\n             */\n            actualLocation: Location;\n        }\n        interface GetPossibleBreakpointsReturnType {\n            /**\n             * List of the possible breakpoint locations.\n             */\n            locations: BreakLocation[];\n        }\n        interface GetStackTraceReturnType {\n            stackTrace: Runtime.StackTrace;\n        }\n        interface SearchInContentReturnType {\n            /**\n             * List of search matches.\n             */\n            result: SearchMatch[];\n        }\n        interface SetScriptSourceReturnType {\n            /**\n             * New stack trace in case editing has happened while VM was stopped.\n             */\n            callFrames?: CallFrame[] | undefined;\n            /**\n             * Whether current call stack  was modified after applying the changes.\n             */\n            stackChanged?: boolean | undefined;\n            /**\n             * Async stack trace, if any.\n             */\n            asyncStackTrace?: Runtime.StackTrace | undefined;\n            /**\n             * Async stack trace, if any.\n             * @experimental\n             */\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\n            /**\n             * Exception details if any.\n             */\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\n        }\n        interface RestartFrameReturnType {\n            /**\n             * New stack trace.\n             */\n            callFrames: CallFrame[];\n            /**\n             * Async stack trace, if any.\n             */\n            asyncStackTrace?: Runtime.StackTrace | undefined;\n            /**\n             * Async stack trace, if any.\n             * @experimental\n             */\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\n        }\n        interface GetScriptSourceReturnType {\n            /**\n             * Script source.\n             */\n            scriptSource: string;\n        }\n        interface EvaluateOnCallFrameReturnType {\n            /**\n             * Object wrapper for the evaluation result.\n             */\n            result: Runtime.RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\n        }\n        interface ScriptParsedEventDataType {\n            /**\n             * Identifier of the script parsed.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * URL or name of the script parsed (if any).\n             */\n            url: string;\n            /**\n             * Line offset of the script within the resource with given URL (for script tags).\n             */\n            startLine: number;\n            /**\n             * Column offset of the script within the resource with given URL.\n             */\n            startColumn: number;\n            /**\n             * Last line of the script.\n             */\n            endLine: number;\n            /**\n             * Length of the last line of the script.\n             */\n            endColumn: number;\n            /**\n             * Specifies script creation context.\n             */\n            executionContextId: Runtime.ExecutionContextId;\n            /**\n             * Content hash of the script.\n             */\n            hash: string;\n            /**\n             * Embedder-specific auxiliary data.\n             */\n            executionContextAuxData?: {} | undefined;\n            /**\n             * True, if this script is generated as a result of the live edit operation.\n             * @experimental\n             */\n            isLiveEdit?: boolean | undefined;\n            /**\n             * URL of source map associated with script (if any).\n             */\n            sourceMapURL?: string | undefined;\n            /**\n             * True, if this script has sourceURL.\n             */\n            hasSourceURL?: boolean | undefined;\n            /**\n             * True, if this script is ES6 module.\n             */\n            isModule?: boolean | undefined;\n            /**\n             * This script length.\n             */\n            length?: number | undefined;\n            /**\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\n             * @experimental\n             */\n            stackTrace?: Runtime.StackTrace | undefined;\n        }\n        interface ScriptFailedToParseEventDataType {\n            /**\n             * Identifier of the script parsed.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * URL or name of the script parsed (if any).\n             */\n            url: string;\n            /**\n             * Line offset of the script within the resource with given URL (for script tags).\n             */\n            startLine: number;\n            /**\n             * Column offset of the script within the resource with given URL.\n             */\n            startColumn: number;\n            /**\n             * Last line of the script.\n             */\n            endLine: number;\n            /**\n             * Length of the last line of the script.\n             */\n            endColumn: number;\n            /**\n             * Specifies script creation context.\n             */\n            executionContextId: Runtime.ExecutionContextId;\n            /**\n             * Content hash of the script.\n             */\n            hash: string;\n            /**\n             * Embedder-specific auxiliary data.\n             */\n            executionContextAuxData?: {} | undefined;\n            /**\n             * URL of source map associated with script (if any).\n             */\n            sourceMapURL?: string | undefined;\n            /**\n             * True, if this script has sourceURL.\n             */\n            hasSourceURL?: boolean | undefined;\n            /**\n             * True, if this script is ES6 module.\n             */\n            isModule?: boolean | undefined;\n            /**\n             * This script length.\n             */\n            length?: number | undefined;\n            /**\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\n             * @experimental\n             */\n            stackTrace?: Runtime.StackTrace | undefined;\n        }\n        interface BreakpointResolvedEventDataType {\n            /**\n             * Breakpoint unique identifier.\n             */\n            breakpointId: BreakpointId;\n            /**\n             * Actual breakpoint location.\n             */\n            location: Location;\n        }\n        interface PausedEventDataType {\n            /**\n             * Call stack the virtual machine stopped on.\n             */\n            callFrames: CallFrame[];\n            /**\n             * Pause reason.\n             */\n            reason: string;\n            /**\n             * Object containing break-specific auxiliary properties.\n             */\n            data?: {} | undefined;\n            /**\n             * Hit breakpoints IDs\n             */\n            hitBreakpoints?: string[] | undefined;\n            /**\n             * Async stack trace, if any.\n             */\n            asyncStackTrace?: Runtime.StackTrace | undefined;\n            /**\n             * Async stack trace, if any.\n             * @experimental\n             */\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\n            /**\n             * Just scheduled async call will have this stack trace as parent stack during async execution. This field is available only after <code>Debugger.stepInto</code> call with <code>breakOnAsynCall</code> flag.\n             * @experimental\n             */\n            asyncCallStackTraceId?: Runtime.StackTraceId | undefined;\n        }\n    }\n    namespace Console {\n        /**\n         * Console message.\n         */\n        interface ConsoleMessage {\n            /**\n             * Message source.\n             */\n            source: string;\n            /**\n             * Message severity.\n             */\n            level: string;\n            /**\n             * Message text.\n             */\n            text: string;\n            /**\n             * URL of the message origin.\n             */\n            url?: string | undefined;\n            /**\n             * Line number in the resource that generated this message (1-based).\n             */\n            line?: number | undefined;\n            /**\n             * Column number in the resource that generated this message (1-based).\n             */\n            column?: number | undefined;\n        }\n        interface MessageAddedEventDataType {\n            /**\n             * Console message that has been added.\n             */\n            message: ConsoleMessage;\n        }\n    }\n    namespace Profiler {\n        /**\n         * Profile node. Holds callsite information, execution statistics and child nodes.\n         */\n        interface ProfileNode {\n            /**\n             * Unique id of the node.\n             */\n            id: number;\n            /**\n             * Function location.\n             */\n            callFrame: Runtime.CallFrame;\n            /**\n             * Number of samples where this node was on top of the call stack.\n             */\n            hitCount?: number | undefined;\n            /**\n             * Child node ids.\n             */\n            children?: number[] | undefined;\n            /**\n             * The reason of being not optimized. The function may be deoptimized or marked as don't optimize.\n             */\n            deoptReason?: string | undefined;\n            /**\n             * An array of source position ticks.\n             */\n            positionTicks?: PositionTickInfo[] | undefined;\n        }\n        /**\n         * Profile.\n         */\n        interface Profile {\n            /**\n             * The list of profile nodes. First item is the root node.\n             */\n            nodes: ProfileNode[];\n            /**\n             * Profiling start timestamp in microseconds.\n             */\n            startTime: number;\n            /**\n             * Profiling end timestamp in microseconds.\n             */\n            endTime: number;\n            /**\n             * Ids of samples top nodes.\n             */\n            samples?: number[] | undefined;\n            /**\n             * Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.\n             */\n            timeDeltas?: number[] | undefined;\n        }\n        /**\n         * Specifies a number of samples attributed to a certain source position.\n         */\n        interface PositionTickInfo {\n            /**\n             * Source line number (1-based).\n             */\n            line: number;\n            /**\n             * Number of samples attributed to the source line.\n             */\n            ticks: number;\n        }\n        /**\n         * Coverage data for a source range.\n         */\n        interface CoverageRange {\n            /**\n             * JavaScript script source offset for the range start.\n             */\n            startOffset: number;\n            /**\n             * JavaScript script source offset for the range end.\n             */\n            endOffset: number;\n            /**\n             * Collected execution count of the source range.\n             */\n            count: number;\n        }\n        /**\n         * Coverage data for a JavaScript function.\n         */\n        interface FunctionCoverage {\n            /**\n             * JavaScript function name.\n             */\n            functionName: string;\n            /**\n             * Source ranges inside the function with coverage data.\n             */\n            ranges: CoverageRange[];\n            /**\n             * Whether coverage data for this function has block granularity.\n             */\n            isBlockCoverage: boolean;\n        }\n        /**\n         * Coverage data for a JavaScript script.\n         */\n        interface ScriptCoverage {\n            /**\n             * JavaScript script id.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * JavaScript script name or url.\n             */\n            url: string;\n            /**\n             * Functions contained in the script that has coverage data.\n             */\n            functions: FunctionCoverage[];\n        }\n        interface SetSamplingIntervalParameterType {\n            /**\n             * New sampling interval in microseconds.\n             */\n            interval: number;\n        }\n        interface StartPreciseCoverageParameterType {\n            /**\n             * Collect accurate call counts beyond simple 'covered' or 'not covered'.\n             */\n            callCount?: boolean | undefined;\n            /**\n             * Collect block-based coverage.\n             */\n            detailed?: boolean | undefined;\n        }\n        interface StopReturnType {\n            /**\n             * Recorded profile.\n             */\n            profile: Profile;\n        }\n        interface TakePreciseCoverageReturnType {\n            /**\n             * Coverage data for the current isolate.\n             */\n            result: ScriptCoverage[];\n        }\n        interface GetBestEffortCoverageReturnType {\n            /**\n             * Coverage data for the current isolate.\n             */\n            result: ScriptCoverage[];\n        }\n        interface ConsoleProfileStartedEventDataType {\n            id: string;\n            /**\n             * Location of console.profile().\n             */\n            location: Debugger.Location;\n            /**\n             * Profile title passed as an argument to console.profile().\n             */\n            title?: string | undefined;\n        }\n        interface ConsoleProfileFinishedEventDataType {\n            id: string;\n            /**\n             * Location of console.profileEnd().\n             */\n            location: Debugger.Location;\n            profile: Profile;\n            /**\n             * Profile title passed as an argument to console.profile().\n             */\n            title?: string | undefined;\n        }\n    }\n    namespace HeapProfiler {\n        /**\n         * Heap snapshot object id.\n         */\n        type HeapSnapshotObjectId = string;\n        /**\n         * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\n         */\n        interface SamplingHeapProfileNode {\n            /**\n             * Function location.\n             */\n            callFrame: Runtime.CallFrame;\n            /**\n             * Allocations size in bytes for the node excluding children.\n             */\n            selfSize: number;\n            /**\n             * Child nodes.\n             */\n            children: SamplingHeapProfileNode[];\n        }\n        /**\n         * Profile.\n         */\n        interface SamplingHeapProfile {\n            head: SamplingHeapProfileNode;\n        }\n        interface StartTrackingHeapObjectsParameterType {\n            trackAllocations?: boolean | undefined;\n        }\n        interface StopTrackingHeapObjectsParameterType {\n            /**\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.\n             */\n            reportProgress?: boolean | undefined;\n        }\n        interface TakeHeapSnapshotParameterType {\n            /**\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\n             */\n            reportProgress?: boolean | undefined;\n        }\n        interface GetObjectByHeapObjectIdParameterType {\n            objectId: HeapSnapshotObjectId;\n            /**\n             * Symbolic group name that can be used to release multiple objects.\n             */\n            objectGroup?: string | undefined;\n        }\n        interface AddInspectedHeapObjectParameterType {\n            /**\n             * Heap snapshot object id to be accessible by means of $x command line API.\n             */\n            heapObjectId: HeapSnapshotObjectId;\n        }\n        interface GetHeapObjectIdParameterType {\n            /**\n             * Identifier of the object to get heap object id for.\n             */\n            objectId: Runtime.RemoteObjectId;\n        }\n        interface StartSamplingParameterType {\n            /**\n             * Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.\n             */\n            samplingInterval?: number | undefined;\n        }\n        interface GetObjectByHeapObjectIdReturnType {\n            /**\n             * Evaluation result.\n             */\n            result: Runtime.RemoteObject;\n        }\n        interface GetHeapObjectIdReturnType {\n            /**\n             * Id of the heap snapshot object corresponding to the passed remote object id.\n             */\n            heapSnapshotObjectId: HeapSnapshotObjectId;\n        }\n        interface StopSamplingReturnType {\n            /**\n             * Recorded sampling heap profile.\n             */\n            profile: SamplingHeapProfile;\n        }\n        interface GetSamplingProfileReturnType {\n            /**\n             * Return the sampling profile being collected.\n             */\n            profile: SamplingHeapProfile;\n        }\n        interface AddHeapSnapshotChunkEventDataType {\n            chunk: string;\n        }\n        interface ReportHeapSnapshotProgressEventDataType {\n            done: number;\n            total: number;\n            finished?: boolean | undefined;\n        }\n        interface LastSeenObjectIdEventDataType {\n            lastSeenObjectId: number;\n            timestamp: number;\n        }\n        interface HeapStatsUpdateEventDataType {\n            /**\n             * An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.\n             */\n            statsUpdate: number[];\n        }\n    }\n    namespace NodeTracing {\n        interface TraceConfig {\n            /**\n             * Controls how the trace buffer stores data.\n             */\n            recordMode?: string | undefined;\n            /**\n             * Included category filters.\n             */\n            includedCategories: string[];\n        }\n        interface StartParameterType {\n            traceConfig: TraceConfig;\n        }\n        interface GetCategoriesReturnType {\n            /**\n             * A list of supported tracing categories.\n             */\n            categories: string[];\n        }\n        interface DataCollectedEventDataType {\n            value: Array<{}>;\n        }\n    }\n    namespace NodeWorker {\n        type WorkerID = string;\n        /**\n         * Unique identifier of attached debugging session.\n         */\n        type SessionID = string;\n        interface WorkerInfo {\n            workerId: WorkerID;\n            type: string;\n            title: string;\n            url: string;\n        }\n        interface SendMessageToWorkerParameterType {\n            message: string;\n            /**\n             * Identifier of the session.\n             */\n            sessionId: SessionID;\n        }\n        interface EnableParameterType {\n            /**\n             * Whether to new workers should be paused until the frontend sends `Runtime.runIfWaitingForDebugger`\n             * message to run them.\n             */\n            waitForDebuggerOnStart: boolean;\n        }\n        interface DetachParameterType {\n            sessionId: SessionID;\n        }\n        interface AttachedToWorkerEventDataType {\n            /**\n             * Identifier assigned to the session used to send/receive messages.\n             */\n            sessionId: SessionID;\n            workerInfo: WorkerInfo;\n            waitingForDebugger: boolean;\n        }\n        interface DetachedFromWorkerEventDataType {\n            /**\n             * Detached session identifier.\n             */\n            sessionId: SessionID;\n        }\n        interface ReceivedMessageFromWorkerEventDataType {\n            /**\n             * Identifier of a session which sends a message.\n             */\n            sessionId: SessionID;\n            message: string;\n        }\n    }\n    namespace Network {\n        /**\n         * Resource type as it was perceived by the rendering engine.\n         */\n        type ResourceType = string;\n        /**\n         * Unique request identifier.\n         */\n        type RequestId = string;\n        /**\n         * UTC time in seconds, counted from January 1, 1970.\n         */\n        type TimeSinceEpoch = number;\n        /**\n         * Monotonically increasing time in seconds since an arbitrary point in the past.\n         */\n        type MonotonicTime = number;\n        /**\n         * Information about the request initiator.\n         */\n        interface Initiator {\n            /**\n             * Type of this initiator.\n             */\n            type: string;\n            /**\n             * Initiator JavaScript stack trace, set for Script only.\n             * Requires the Debugger domain to be enabled.\n             */\n            stack?: Runtime.StackTrace | undefined;\n            /**\n             * Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.\n             */\n            url?: string | undefined;\n            /**\n             * Initiator line number, set for Parser type or for Script type (when script is importing\n             * module) (0-based).\n             */\n            lineNumber?: number | undefined;\n            /**\n             * Initiator column number, set for Parser type or for Script type (when script is importing\n             * module) (0-based).\n             */\n            columnNumber?: number | undefined;\n            /**\n             * Set if another request triggered this request (e.g. preflight).\n             */\n            requestId?: RequestId | undefined;\n        }\n        /**\n         * HTTP request data.\n         */\n        interface Request {\n            url: string;\n            method: string;\n            headers: Headers;\n        }\n        /**\n         * HTTP response data.\n         */\n        interface Response {\n            url: string;\n            status: number;\n            statusText: string;\n            headers: Headers;\n        }\n        /**\n         * Request / response headers as keys / values of JSON object.\n         */\n        interface Headers {\n        }\n        interface RequestWillBeSentEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Request data.\n             */\n            request: Request;\n            /**\n             * Request initiator.\n             */\n            initiator: Initiator;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n            /**\n             * Timestamp.\n             */\n            wallTime: TimeSinceEpoch;\n        }\n        interface ResponseReceivedEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n            /**\n             * Resource type.\n             */\n            type: ResourceType;\n            /**\n             * Response data.\n             */\n            response: Response;\n        }\n        interface LoadingFailedEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n            /**\n             * Resource type.\n             */\n            type: ResourceType;\n            /**\n             * Error message.\n             */\n            errorText: string;\n        }\n        interface LoadingFinishedEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n        }\n    }\n    namespace NodeRuntime {\n        interface NotifyWhenWaitingForDisconnectParameterType {\n            enabled: boolean;\n        }\n    }\n\n    /**\n     * The `inspector.Session` is used for dispatching messages to the V8 inspector\n     * back-end and receiving message responses and notifications.\n     */\n    class Session extends EventEmitter {\n        /**\n         * Create a new instance of the inspector.Session class.\n         * The inspector session needs to be connected through `session.connect()` before the messages can be dispatched to the inspector backend.\n         */\n        constructor();\n\n        /**\n         * Connects a session to the inspector back-end.\n         */\n        connect(): void;\n\n        /**\n         * Connects a session to the inspector back-end.\n         * An exception will be thrown if this API was not called on a Worker thread.\n         * @since v12.11.0\n         */\n        connectToMainThread(): void;\n\n        /**\n         * Immediately close the session. All pending message callbacks will be called with an error.\n         * `session.connect()` will need to be called to be able to send messages again.\n         * Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.\n         */\n        disconnect(): void;\n\n        /**\n         * Posts a message to the inspector back-end. `callback` will be notified when\n         * a response is received. `callback` is a function that accepts two optional\n         * arguments: error and message-specific result.\n         *\n         * ```js\n         * session.post('Runtime.evaluate', { expression: '2 + 2' },\n         *              (error, { result }) => console.log(result));\n         * // Output: { type: 'number', value: 4, description: '4' }\n         * ```\n         *\n         * The latest version of the V8 inspector protocol is published on the\n         * [Chrome DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/v8/).\n         *\n         * Node.js inspector supports all the Chrome DevTools Protocol domains declared\n         * by V8. Chrome DevTools Protocol domain provides an interface for interacting\n         * with one of the runtime agents used to inspect the application state and listen\n         * to the run-time events.\n         */\n        post(method: string, callback?: (err: Error | null, params?: object) => void): void;\n        post(method: string, params?: object, callback?: (err: Error | null, params?: object) => void): void;\n        /**\n         * Returns supported domains.\n         */\n        post(method: 'Schema.getDomains', callback?: (err: Error | null, params: Schema.GetDomainsReturnType) => void): void;\n        /**\n         * Evaluates expression on global object.\n         */\n        post(method: 'Runtime.evaluate', params?: Runtime.EvaluateParameterType, callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\n        post(method: 'Runtime.evaluate', callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\n        /**\n         * Add handler to promise with given promise object id.\n         */\n        post(method: 'Runtime.awaitPromise', params?: Runtime.AwaitPromiseParameterType, callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\n        post(method: 'Runtime.awaitPromise', callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\n        /**\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.callFunctionOn', params?: Runtime.CallFunctionOnParameterType, callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\n        post(method: 'Runtime.callFunctionOn', callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\n        /**\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.getProperties', params?: Runtime.GetPropertiesParameterType, callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\n        post(method: 'Runtime.getProperties', callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\n        /**\n         * Releases remote object with given id.\n         */\n        post(method: 'Runtime.releaseObject', params?: Runtime.ReleaseObjectParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Runtime.releaseObject', callback?: (err: Error | null) => void): void;\n        /**\n         * Releases all remote objects that belong to a given group.\n         */\n        post(method: 'Runtime.releaseObjectGroup', params?: Runtime.ReleaseObjectGroupParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Runtime.releaseObjectGroup', callback?: (err: Error | null) => void): void;\n        /**\n         * Tells inspected instance to run if it was waiting for debugger to attach.\n         */\n        post(method: 'Runtime.runIfWaitingForDebugger', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\n         */\n        post(method: 'Runtime.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Disables reporting of execution contexts creation.\n         */\n        post(method: 'Runtime.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Discards collected exceptions and console API calls.\n         */\n        post(method: 'Runtime.discardConsoleEntries', callback?: (err: Error | null) => void): void;\n        /**\n         * @experimental\n         */\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', params?: Runtime.SetCustomObjectFormatterEnabledParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', callback?: (err: Error | null) => void): void;\n        /**\n         * Compiles expression.\n         */\n        post(method: 'Runtime.compileScript', params?: Runtime.CompileScriptParameterType, callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\n        post(method: 'Runtime.compileScript', callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\n        /**\n         * Runs script with given id in a given context.\n         */\n        post(method: 'Runtime.runScript', params?: Runtime.RunScriptParameterType, callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\n        post(method: 'Runtime.runScript', callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\n        post(method: 'Runtime.queryObjects', params?: Runtime.QueryObjectsParameterType, callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\n        post(method: 'Runtime.queryObjects', callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\n        /**\n         * Returns all let, const and class variables from global scope.\n         */\n        post(\n            method: 'Runtime.globalLexicalScopeNames',\n            params?: Runtime.GlobalLexicalScopeNamesParameterType,\n            callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void\n        ): void;\n        post(method: 'Runtime.globalLexicalScopeNames', callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void): void;\n        /**\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\n         */\n        post(method: 'Debugger.enable', callback?: (err: Error | null, params: Debugger.EnableReturnType) => void): void;\n        /**\n         * Disables debugger for given page.\n         */\n        post(method: 'Debugger.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Activates / deactivates all breakpoints on the page.\n         */\n        post(method: 'Debugger.setBreakpointsActive', params?: Debugger.SetBreakpointsActiveParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setBreakpointsActive', callback?: (err: Error | null) => void): void;\n        /**\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\n         */\n        post(method: 'Debugger.setSkipAllPauses', params?: Debugger.SetSkipAllPausesParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setSkipAllPauses', callback?: (err: Error | null) => void): void;\n        /**\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\n         */\n        post(method: 'Debugger.setBreakpointByUrl', params?: Debugger.SetBreakpointByUrlParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\n        post(method: 'Debugger.setBreakpointByUrl', callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\n        /**\n         * Sets JavaScript breakpoint at a given location.\n         */\n        post(method: 'Debugger.setBreakpoint', params?: Debugger.SetBreakpointParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\n        post(method: 'Debugger.setBreakpoint', callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\n        /**\n         * Removes JavaScript breakpoint.\n         */\n        post(method: 'Debugger.removeBreakpoint', params?: Debugger.RemoveBreakpointParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.removeBreakpoint', callback?: (err: Error | null) => void): void;\n        /**\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\n         */\n        post(\n            method: 'Debugger.getPossibleBreakpoints',\n            params?: Debugger.GetPossibleBreakpointsParameterType,\n            callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void\n        ): void;\n        post(method: 'Debugger.getPossibleBreakpoints', callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void): void;\n        /**\n         * Continues execution until specific location is reached.\n         */\n        post(method: 'Debugger.continueToLocation', params?: Debugger.ContinueToLocationParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.continueToLocation', callback?: (err: Error | null) => void): void;\n        /**\n         * @experimental\n         */\n        post(method: 'Debugger.pauseOnAsyncCall', params?: Debugger.PauseOnAsyncCallParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.pauseOnAsyncCall', callback?: (err: Error | null) => void): void;\n        /**\n         * Steps over the statement.\n         */\n        post(method: 'Debugger.stepOver', callback?: (err: Error | null) => void): void;\n        /**\n         * Steps into the function call.\n         */\n        post(method: 'Debugger.stepInto', params?: Debugger.StepIntoParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.stepInto', callback?: (err: Error | null) => void): void;\n        /**\n         * Steps out of the function call.\n         */\n        post(method: 'Debugger.stepOut', callback?: (err: Error | null) => void): void;\n        /**\n         * Stops on the next JavaScript statement.\n         */\n        post(method: 'Debugger.pause', callback?: (err: Error | null) => void): void;\n        /**\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\n         * @experimental\n         */\n        post(method: 'Debugger.scheduleStepIntoAsync', callback?: (err: Error | null) => void): void;\n        /**\n         * Resumes JavaScript execution.\n         */\n        post(method: 'Debugger.resume', callback?: (err: Error | null) => void): void;\n        /**\n         * Returns stack trace with given <code>stackTraceId</code>.\n         * @experimental\n         */\n        post(method: 'Debugger.getStackTrace', params?: Debugger.GetStackTraceParameterType, callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\n        post(method: 'Debugger.getStackTrace', callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\n        /**\n         * Searches for given string in script content.\n         */\n        post(method: 'Debugger.searchInContent', params?: Debugger.SearchInContentParameterType, callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\n        post(method: 'Debugger.searchInContent', callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\n        /**\n         * Edits JavaScript source live.\n         */\n        post(method: 'Debugger.setScriptSource', params?: Debugger.SetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\n        post(method: 'Debugger.setScriptSource', callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\n        /**\n         * Restarts particular call frame from the beginning.\n         */\n        post(method: 'Debugger.restartFrame', params?: Debugger.RestartFrameParameterType, callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\n        post(method: 'Debugger.restartFrame', callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\n        /**\n         * Returns source for the script with given id.\n         */\n        post(method: 'Debugger.getScriptSource', params?: Debugger.GetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\n        post(method: 'Debugger.getScriptSource', callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\n        /**\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\n         */\n        post(method: 'Debugger.setPauseOnExceptions', params?: Debugger.SetPauseOnExceptionsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setPauseOnExceptions', callback?: (err: Error | null) => void): void;\n        /**\n         * Evaluates expression on a given call frame.\n         */\n        post(method: 'Debugger.evaluateOnCallFrame', params?: Debugger.EvaluateOnCallFrameParameterType, callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\n        post(method: 'Debugger.evaluateOnCallFrame', callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\n        /**\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\n         */\n        post(method: 'Debugger.setVariableValue', params?: Debugger.SetVariableValueParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setVariableValue', callback?: (err: Error | null) => void): void;\n        /**\n         * Changes return value in top frame. Available only at return break position.\n         * @experimental\n         */\n        post(method: 'Debugger.setReturnValue', params?: Debugger.SetReturnValueParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setReturnValue', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables or disables async call stacks tracking.\n         */\n        post(method: 'Debugger.setAsyncCallStackDepth', params?: Debugger.SetAsyncCallStackDepthParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setAsyncCallStackDepth', callback?: (err: Error | null) => void): void;\n        /**\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxPatterns', params?: Debugger.SetBlackboxPatternsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setBlackboxPatterns', callback?: (err: Error | null) => void): void;\n        /**\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxedRanges', params?: Debugger.SetBlackboxedRangesParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setBlackboxedRanges', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\n         */\n        post(method: 'Console.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Disables console domain, prevents further console messages from being reported to the client.\n         */\n        post(method: 'Console.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Does nothing.\n         */\n        post(method: 'Console.clearMessages', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.enable', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\n         */\n        post(method: 'Profiler.setSamplingInterval', params?: Profiler.SetSamplingIntervalParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.setSamplingInterval', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.start', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.stop', callback?: (err: Error | null, params: Profiler.StopReturnType) => void): void;\n        /**\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\n         */\n        post(method: 'Profiler.startPreciseCoverage', params?: Profiler.StartPreciseCoverageParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.startPreciseCoverage', callback?: (err: Error | null) => void): void;\n        /**\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\n         */\n        post(method: 'Profiler.stopPreciseCoverage', callback?: (err: Error | null) => void): void;\n        /**\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\n         */\n        post(method: 'Profiler.takePreciseCoverage', callback?: (err: Error | null, params: Profiler.TakePreciseCoverageReturnType) => void): void;\n        /**\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\n         */\n        post(method: 'Profiler.getBestEffortCoverage', callback?: (err: Error | null, params: Profiler.GetBestEffortCoverageReturnType) => void): void;\n        post(method: 'HeapProfiler.enable', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.disable', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.startTrackingHeapObjects', params?: HeapProfiler.StartTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.startTrackingHeapObjects', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', params?: HeapProfiler.StopTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.takeHeapSnapshot', params?: HeapProfiler.TakeHeapSnapshotParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.takeHeapSnapshot', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.collectGarbage', callback?: (err: Error | null) => void): void;\n        post(\n            method: 'HeapProfiler.getObjectByHeapObjectId',\n            params?: HeapProfiler.GetObjectByHeapObjectIdParameterType,\n            callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void\n        ): void;\n        post(method: 'HeapProfiler.getObjectByHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void): void;\n        /**\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\n         */\n        post(method: 'HeapProfiler.addInspectedHeapObject', params?: HeapProfiler.AddInspectedHeapObjectParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.addInspectedHeapObject', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.getHeapObjectId', params?: HeapProfiler.GetHeapObjectIdParameterType, callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\n        post(method: 'HeapProfiler.getHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\n        post(method: 'HeapProfiler.startSampling', params?: HeapProfiler.StartSamplingParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.startSampling', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.stopSampling', callback?: (err: Error | null, params: HeapProfiler.StopSamplingReturnType) => void): void;\n        post(method: 'HeapProfiler.getSamplingProfile', callback?: (err: Error | null, params: HeapProfiler.GetSamplingProfileReturnType) => void): void;\n        /**\n         * Gets supported tracing categories.\n         */\n        post(method: 'NodeTracing.getCategories', callback?: (err: Error | null, params: NodeTracing.GetCategoriesReturnType) => void): void;\n        /**\n         * Start trace events collection.\n         */\n        post(method: 'NodeTracing.start', params?: NodeTracing.StartParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeTracing.start', callback?: (err: Error | null) => void): void;\n        /**\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\n         * dataCollected events followed by tracingComplete event.\n         */\n        post(method: 'NodeTracing.stop', callback?: (err: Error | null) => void): void;\n        /**\n         * Sends protocol message over session with given id.\n         */\n        post(method: 'NodeWorker.sendMessageToWorker', params?: NodeWorker.SendMessageToWorkerParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeWorker.sendMessageToWorker', callback?: (err: Error | null) => void): void;\n        /**\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\n         * as they start\n         */\n        post(method: 'NodeWorker.enable', params?: NodeWorker.EnableParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeWorker.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Detaches from all running workers and disables attaching to new workers as they are started.\n         */\n        post(method: 'NodeWorker.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Detached from the worker with given sessionId.\n         */\n        post(method: 'NodeWorker.detach', params?: NodeWorker.DetachParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeWorker.detach', callback?: (err: Error | null) => void): void;\n        /**\n         * Disables network tracking, prevents network events from being sent to the client.\n         */\n        post(method: 'Network.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables network tracking, network events will now be delivered to the client.\n         */\n        post(method: 'Network.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Enable the NodeRuntime events except by `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Disable NodeRuntime events\n         */\n        post(method: 'NodeRuntime.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Enable the `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', callback?: (err: Error | null) => void): void;\n\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        addListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        addListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        addListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        addListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        addListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        addListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        addListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        addListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        addListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        addListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        addListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        addListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        addListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        addListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        addListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        addListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        addListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        addListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        addListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        addListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        addListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        addListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        addListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        addListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        addListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        addListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        addListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        addListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: 'inspectorNotification', message: InspectorNotification<object>): boolean;\n        emit(event: 'Runtime.executionContextCreated', message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextDestroyed', message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextsCleared'): boolean;\n        emit(event: 'Runtime.exceptionThrown', message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\n        emit(event: 'Runtime.exceptionRevoked', message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\n        emit(event: 'Runtime.consoleAPICalled', message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\n        emit(event: 'Runtime.inspectRequested', message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptParsed', message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptFailedToParse', message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\n        emit(event: 'Debugger.breakpointResolved', message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\n        emit(event: 'Debugger.paused', message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\n        emit(event: 'Debugger.resumed'): boolean;\n        emit(event: 'Console.messageAdded', message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileStarted', message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileFinished', message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\n        emit(event: 'HeapProfiler.addHeapSnapshotChunk', message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\n        emit(event: 'HeapProfiler.resetProfiles'): boolean;\n        emit(event: 'HeapProfiler.reportHeapSnapshotProgress', message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\n        emit(event: 'HeapProfiler.lastSeenObjectId', message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\n        emit(event: 'HeapProfiler.heapStatsUpdate', message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\n        emit(event: 'NodeTracing.dataCollected', message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\n        emit(event: 'NodeTracing.tracingComplete'): boolean;\n        emit(event: 'NodeWorker.attachedToWorker', message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.detachedFromWorker', message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.receivedMessageFromWorker', message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\n        emit(event: 'Network.requestWillBeSent', message: InspectorNotification<Network.RequestWillBeSentEventDataType>): boolean;\n        emit(event: 'Network.responseReceived', message: InspectorNotification<Network.ResponseReceivedEventDataType>): boolean;\n        emit(event: 'Network.loadingFailed', message: InspectorNotification<Network.LoadingFailedEventDataType>): boolean;\n        emit(event: 'Network.loadingFinished', message: InspectorNotification<Network.LoadingFinishedEventDataType>): boolean;\n        emit(event: 'NodeRuntime.waitingForDisconnect'): boolean;\n        emit(event: 'NodeRuntime.waitingForDebugger'): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        on(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        on(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        on(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        on(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        on(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        on(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        on(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        on(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        on(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        on(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        on(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        on(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        on(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        on(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        on(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        on(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        on(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        on(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        on(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        on(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        on(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        on(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        on(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        on(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        on(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        on(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        on(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        on(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        on(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        on(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        on(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        on(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        once(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        once(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        once(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        once(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        once(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        once(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        once(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        once(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        once(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        once(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        once(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        once(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        once(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        once(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        once(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        once(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        once(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        once(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        once(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        once(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        once(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        once(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        once(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        once(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        once(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        once(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        once(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        once(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        once(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        once(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        once(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        once(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependOnceListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependOnceListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependOnceListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependOnceListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependOnceListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependOnceListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependOnceListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependOnceListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependOnceListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependOnceListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependOnceListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependOnceListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependOnceListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependOnceListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependOnceListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependOnceListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependOnceListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependOnceListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependOnceListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependOnceListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependOnceListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependOnceListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependOnceListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependOnceListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependOnceListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependOnceListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n    }\n\n    /**\n     * Activate inspector on host and port. Equivalent to `node --inspect=[[host:]port]`, but can be done programmatically after node has\n     * started.\n     *\n     * If wait is `true`, will block until a client has connected to the inspect port\n     * and flow control has been passed to the debugger client.\n     *\n     * See the [security warning](https://nodejs.org/docs/latest-v22.x/api/cli.html#warning-binding-inspector-to-a-public-ipport-combination-is-insecure)\n     * regarding the `host` parameter usage.\n     * @param port Port to listen on for inspector connections. Defaults to what was specified on the CLI.\n     * @param host Host to listen on for inspector connections. Defaults to what was specified on the CLI.\n     * @param wait Block until a client has connected. Defaults to what was specified on the CLI.\n     * @returns Disposable that calls `inspector.close()`.\n     */\n    function open(port?: number, host?: string, wait?: boolean): Disposable;\n\n    /**\n     * Deactivate the inspector. Blocks until there are no active connections.\n     */\n    function close(): void;\n\n    /**\n     * Return the URL of the active inspector, or `undefined` if there is none.\n     *\n     * ```console\n     * $ node --inspect -p 'inspector.url()'\n     * Debugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\n     * For help, see: https://nodejs.org/en/docs/inspector\n     * ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\n     *\n     * $ node --inspect=localhost:3000 -p 'inspector.url()'\n     * Debugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\n     * For help, see: https://nodejs.org/en/docs/inspector\n     * ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\n     *\n     * $ node -p 'inspector.url()'\n     * undefined\n     * ```\n     */\n    function url(): string | undefined;\n\n    /**\n     * Blocks until a client (existing or connected later) has sent `Runtime.runIfWaitingForDebugger` command.\n     *\n     * An exception will be thrown if there is no active inspector.\n     * @since v12.7.0\n     */\n    function waitForDebugger(): void;\n\n    // These methods are exposed by the V8 inspector console API (inspector/v8-console.h).\n    // The method signatures differ from those of the Node.js console, and are deliberately\n    // typed permissively.\n    interface InspectorConsole {\n        debug(...data: any[]): void;\n        error(...data: any[]): void;\n        info(...data: any[]): void;\n        log(...data: any[]): void;\n        warn(...data: any[]): void;\n        dir(...data: any[]): void;\n        dirxml(...data: any[]): void;\n        table(...data: any[]): void;\n        trace(...data: any[]): void;\n        group(...data: any[]): void;\n        groupCollapsed(...data: any[]): void;\n        groupEnd(...data: any[]): void;\n        clear(...data: any[]): void;\n        count(label?: any): void;\n        countReset(label?: any): void;\n        assert(value?: any, ...data: any[]): void;\n        profile(label?: any): void;\n        profileEnd(label?: any): void;\n        time(label?: any): void;\n        timeLog(label?: any): void;\n        timeStamp(label?: any): void;\n    }\n\n    /**\n     * An object to send messages to the remote inspector console.\n     * @since v11.0.0\n     */\n    const console: InspectorConsole;\n\n    // DevTools protocol event broadcast methods\n    namespace Network {\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.requestWillBeSent` event to connected frontends. This event indicates that\n         * the application is about to send an HTTP request.\n         * @since v22.6.0\n         * @experimental\n         */\n        function requestWillBeSent(params: RequestWillBeSentEventDataType): void;\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.responseReceived` event to connected frontends. This event indicates that\n         * HTTP response is available.\n         * @since v22.6.0\n         * @experimental\n         */\n        function responseReceived(params: ResponseReceivedEventDataType): void;\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.loadingFinished` event to connected frontends. This event indicates that\n         * HTTP request has finished loading.\n         * @since v22.6.0\n         * @experimental\n         */\n        function loadingFinished(params: LoadingFinishedEventDataType): void;\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.loadingFailed` event to connected frontends. This event indicates that\n         * HTTP request has failed to load.\n         * @since v22.7.0\n         * @experimental\n         */\n        function loadingFailed(params: LoadingFailedEventDataType): void;\n    }\n}\n\n/**\n * The `node:inspector` module provides an API for interacting with the V8\n * inspector.\n */\ndeclare module 'node:inspector' {\n    export * from 'inspector';\n}\n\n/**\n * The `node:inspector/promises` module provides an API for interacting with the V8\n * inspector.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/inspector/promises.js)\n * @since v19.0.0\n */\ndeclare module 'inspector/promises' {\n    import EventEmitter = require('node:events');\n    import {\n        open,\n        close,\n        url,\n        waitForDebugger,\n        console,\n        InspectorNotification,\n        Schema,\n        Runtime,\n        Debugger,\n        Console,\n        Profiler,\n        HeapProfiler,\n        NodeTracing,\n        NodeWorker,\n        Network,\n        NodeRuntime,\n    } from 'inspector';\n\n    /**\n     * The `inspector.Session` is used for dispatching messages to the V8 inspector\n     * back-end and receiving message responses and notifications.\n     * @since v19.0.0\n     */\n    class Session extends EventEmitter {\n        /**\n         * Create a new instance of the `inspector.Session` class.\n         * The inspector session needs to be connected through `session.connect()` before the messages can be dispatched to the inspector backend.\n         */\n        constructor();\n\n        /**\n         * Connects a session to the inspector back-end.\n         */\n        connect(): void;\n\n        /**\n         * Connects a session to the inspector back-end.\n         * An exception will be thrown if this API was not called on a Worker thread.\n         */\n        connectToMainThread(): void;\n\n        /**\n         * Immediately close the session. All pending message callbacks will be called with an error.\n         * `session.connect()` will need to be called to be able to send messages again.\n         * Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.\n         */\n        disconnect(): void;\n\n        /**\n         * Posts a message to the inspector back-end.\n         *\n         * ```js\n         * import { Session } from 'node:inspector/promises';\n         * try {\n         *   const session = new Session();\n         *   session.connect();\n         *   const result = await session.post('Runtime.evaluate', { expression: '2 + 2' });\n         *   console.log(result);\n         * } catch (error) {\n         *   console.error(error);\n         * }\n         * // Output: { result: { type: 'number', value: 4, description: '4' } }\n         * ```\n         *\n         * The latest version of the V8 inspector protocol is published on the\n         * [Chrome DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/v8/).\n         *\n         * Node.js inspector supports all the Chrome DevTools Protocol domains declared\n         * by V8. Chrome DevTools Protocol domain provides an interface for interacting\n         * with one of the runtime agents used to inspect the application state and listen\n         * to the run-time events.\n         */\n        post(method: string, params?: object): Promise<void>;\n        /**\n         * Returns supported domains.\n         */\n        post(method: 'Schema.getDomains'): Promise<Schema.GetDomainsReturnType>;\n        /**\n         * Evaluates expression on global object.\n         */\n        post(method: 'Runtime.evaluate', params?: Runtime.EvaluateParameterType): Promise<Runtime.EvaluateReturnType>;\n        /**\n         * Add handler to promise with given promise object id.\n         */\n        post(method: 'Runtime.awaitPromise', params?: Runtime.AwaitPromiseParameterType): Promise<Runtime.AwaitPromiseReturnType>;\n        /**\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.callFunctionOn', params?: Runtime.CallFunctionOnParameterType): Promise<Runtime.CallFunctionOnReturnType>;\n        /**\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.getProperties', params?: Runtime.GetPropertiesParameterType): Promise<Runtime.GetPropertiesReturnType>;\n        /**\n         * Releases remote object with given id.\n         */\n        post(method: 'Runtime.releaseObject', params?: Runtime.ReleaseObjectParameterType): Promise<void>;\n        /**\n         * Releases all remote objects that belong to a given group.\n         */\n        post(method: 'Runtime.releaseObjectGroup', params?: Runtime.ReleaseObjectGroupParameterType): Promise<void>;\n        /**\n         * Tells inspected instance to run if it was waiting for debugger to attach.\n         */\n        post(method: 'Runtime.runIfWaitingForDebugger'): Promise<void>;\n        /**\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\n         */\n        post(method: 'Runtime.enable'): Promise<void>;\n        /**\n         * Disables reporting of execution contexts creation.\n         */\n        post(method: 'Runtime.disable'): Promise<void>;\n        /**\n         * Discards collected exceptions and console API calls.\n         */\n        post(method: 'Runtime.discardConsoleEntries'): Promise<void>;\n        /**\n         * @experimental\n         */\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', params?: Runtime.SetCustomObjectFormatterEnabledParameterType): Promise<void>;\n        /**\n         * Compiles expression.\n         */\n        post(method: 'Runtime.compileScript', params?: Runtime.CompileScriptParameterType): Promise<Runtime.CompileScriptReturnType>;\n        /**\n         * Runs script with given id in a given context.\n         */\n        post(method: 'Runtime.runScript', params?: Runtime.RunScriptParameterType): Promise<Runtime.RunScriptReturnType>;\n        post(method: 'Runtime.queryObjects', params?: Runtime.QueryObjectsParameterType): Promise<Runtime.QueryObjectsReturnType>;\n        /**\n         * Returns all let, const and class variables from global scope.\n         */\n        post(method: 'Runtime.globalLexicalScopeNames', params?: Runtime.GlobalLexicalScopeNamesParameterType): Promise<Runtime.GlobalLexicalScopeNamesReturnType>;\n        /**\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\n         */\n        post(method: 'Debugger.enable'): Promise<Debugger.EnableReturnType>;\n        /**\n         * Disables debugger for given page.\n         */\n        post(method: 'Debugger.disable'): Promise<void>;\n        /**\n         * Activates / deactivates all breakpoints on the page.\n         */\n        post(method: 'Debugger.setBreakpointsActive', params?: Debugger.SetBreakpointsActiveParameterType): Promise<void>;\n        /**\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\n         */\n        post(method: 'Debugger.setSkipAllPauses', params?: Debugger.SetSkipAllPausesParameterType): Promise<void>;\n        /**\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\n         */\n        post(method: 'Debugger.setBreakpointByUrl', params?: Debugger.SetBreakpointByUrlParameterType): Promise<Debugger.SetBreakpointByUrlReturnType>;\n        /**\n         * Sets JavaScript breakpoint at a given location.\n         */\n        post(method: 'Debugger.setBreakpoint', params?: Debugger.SetBreakpointParameterType): Promise<Debugger.SetBreakpointReturnType>;\n        /**\n         * Removes JavaScript breakpoint.\n         */\n        post(method: 'Debugger.removeBreakpoint', params?: Debugger.RemoveBreakpointParameterType): Promise<void>;\n        /**\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\n         */\n        post(method: 'Debugger.getPossibleBreakpoints', params?: Debugger.GetPossibleBreakpointsParameterType): Promise<Debugger.GetPossibleBreakpointsReturnType>;\n        /**\n         * Continues execution until specific location is reached.\n         */\n        post(method: 'Debugger.continueToLocation', params?: Debugger.ContinueToLocationParameterType): Promise<void>;\n        /**\n         * @experimental\n         */\n        post(method: 'Debugger.pauseOnAsyncCall', params?: Debugger.PauseOnAsyncCallParameterType): Promise<void>;\n        /**\n         * Steps over the statement.\n         */\n        post(method: 'Debugger.stepOver'): Promise<void>;\n        /**\n         * Steps into the function call.\n         */\n        post(method: 'Debugger.stepInto', params?: Debugger.StepIntoParameterType): Promise<void>;\n        /**\n         * Steps out of the function call.\n         */\n        post(method: 'Debugger.stepOut'): Promise<void>;\n        /**\n         * Stops on the next JavaScript statement.\n         */\n        post(method: 'Debugger.pause'): Promise<void>;\n        /**\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\n         * @experimental\n         */\n        post(method: 'Debugger.scheduleStepIntoAsync'): Promise<void>;\n        /**\n         * Resumes JavaScript execution.\n         */\n        post(method: 'Debugger.resume'): Promise<void>;\n        /**\n         * Returns stack trace with given <code>stackTraceId</code>.\n         * @experimental\n         */\n        post(method: 'Debugger.getStackTrace', params?: Debugger.GetStackTraceParameterType): Promise<Debugger.GetStackTraceReturnType>;\n        /**\n         * Searches for given string in script content.\n         */\n        post(method: 'Debugger.searchInContent', params?: Debugger.SearchInContentParameterType): Promise<Debugger.SearchInContentReturnType>;\n        /**\n         * Edits JavaScript source live.\n         */\n        post(method: 'Debugger.setScriptSource', params?: Debugger.SetScriptSourceParameterType): Promise<Debugger.SetScriptSourceReturnType>;\n        /**\n         * Restarts particular call frame from the beginning.\n         */\n        post(method: 'Debugger.restartFrame', params?: Debugger.RestartFrameParameterType): Promise<Debugger.RestartFrameReturnType>;\n        /**\n         * Returns source for the script with given id.\n         */\n        post(method: 'Debugger.getScriptSource', params?: Debugger.GetScriptSourceParameterType): Promise<Debugger.GetScriptSourceReturnType>;\n        /**\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\n         */\n        post(method: 'Debugger.setPauseOnExceptions', params?: Debugger.SetPauseOnExceptionsParameterType): Promise<void>;\n        /**\n         * Evaluates expression on a given call frame.\n         */\n        post(method: 'Debugger.evaluateOnCallFrame', params?: Debugger.EvaluateOnCallFrameParameterType): Promise<Debugger.EvaluateOnCallFrameReturnType>;\n        /**\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\n         */\n        post(method: 'Debugger.setVariableValue', params?: Debugger.SetVariableValueParameterType): Promise<void>;\n        /**\n         * Changes return value in top frame. Available only at return break position.\n         * @experimental\n         */\n        post(method: 'Debugger.setReturnValue', params?: Debugger.SetReturnValueParameterType): Promise<void>;\n        /**\n         * Enables or disables async call stacks tracking.\n         */\n        post(method: 'Debugger.setAsyncCallStackDepth', params?: Debugger.SetAsyncCallStackDepthParameterType): Promise<void>;\n        /**\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxPatterns', params?: Debugger.SetBlackboxPatternsParameterType): Promise<void>;\n        /**\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxedRanges', params?: Debugger.SetBlackboxedRangesParameterType): Promise<void>;\n        /**\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\n         */\n        post(method: 'Console.enable'): Promise<void>;\n        /**\n         * Disables console domain, prevents further console messages from being reported to the client.\n         */\n        post(method: 'Console.disable'): Promise<void>;\n        /**\n         * Does nothing.\n         */\n        post(method: 'Console.clearMessages'): Promise<void>;\n        post(method: 'Profiler.enable'): Promise<void>;\n        post(method: 'Profiler.disable'): Promise<void>;\n        /**\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\n         */\n        post(method: 'Profiler.setSamplingInterval', params?: Profiler.SetSamplingIntervalParameterType): Promise<void>;\n        post(method: 'Profiler.start'): Promise<void>;\n        post(method: 'Profiler.stop'): Promise<Profiler.StopReturnType>;\n        /**\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\n         */\n        post(method: 'Profiler.startPreciseCoverage', params?: Profiler.StartPreciseCoverageParameterType): Promise<void>;\n        /**\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\n         */\n        post(method: 'Profiler.stopPreciseCoverage'): Promise<void>;\n        /**\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\n         */\n        post(method: 'Profiler.takePreciseCoverage'): Promise<Profiler.TakePreciseCoverageReturnType>;\n        /**\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\n         */\n        post(method: 'Profiler.getBestEffortCoverage'): Promise<Profiler.GetBestEffortCoverageReturnType>;\n        post(method: 'HeapProfiler.enable'): Promise<void>;\n        post(method: 'HeapProfiler.disable'): Promise<void>;\n        post(method: 'HeapProfiler.startTrackingHeapObjects', params?: HeapProfiler.StartTrackingHeapObjectsParameterType): Promise<void>;\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', params?: HeapProfiler.StopTrackingHeapObjectsParameterType): Promise<void>;\n        post(method: 'HeapProfiler.takeHeapSnapshot', params?: HeapProfiler.TakeHeapSnapshotParameterType): Promise<void>;\n        post(method: 'HeapProfiler.collectGarbage'): Promise<void>;\n        post(method: 'HeapProfiler.getObjectByHeapObjectId', params?: HeapProfiler.GetObjectByHeapObjectIdParameterType): Promise<HeapProfiler.GetObjectByHeapObjectIdReturnType>;\n        /**\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\n         */\n        post(method: 'HeapProfiler.addInspectedHeapObject', params?: HeapProfiler.AddInspectedHeapObjectParameterType): Promise<void>;\n        post(method: 'HeapProfiler.getHeapObjectId', params?: HeapProfiler.GetHeapObjectIdParameterType): Promise<HeapProfiler.GetHeapObjectIdReturnType>;\n        post(method: 'HeapProfiler.startSampling', params?: HeapProfiler.StartSamplingParameterType): Promise<void>;\n        post(method: 'HeapProfiler.stopSampling'): Promise<HeapProfiler.StopSamplingReturnType>;\n        post(method: 'HeapProfiler.getSamplingProfile'): Promise<HeapProfiler.GetSamplingProfileReturnType>;\n        /**\n         * Gets supported tracing categories.\n         */\n        post(method: 'NodeTracing.getCategories'): Promise<NodeTracing.GetCategoriesReturnType>;\n        /**\n         * Start trace events collection.\n         */\n        post(method: 'NodeTracing.start', params?: NodeTracing.StartParameterType): Promise<void>;\n        /**\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\n         * dataCollected events followed by tracingComplete event.\n         */\n        post(method: 'NodeTracing.stop'): Promise<void>;\n        /**\n         * Sends protocol message over session with given id.\n         */\n        post(method: 'NodeWorker.sendMessageToWorker', params?: NodeWorker.SendMessageToWorkerParameterType): Promise<void>;\n        /**\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\n         * as they start\n         */\n        post(method: 'NodeWorker.enable', params?: NodeWorker.EnableParameterType): Promise<void>;\n        /**\n         * Detaches from all running workers and disables attaching to new workers as they are started.\n         */\n        post(method: 'NodeWorker.disable'): Promise<void>;\n        /**\n         * Detached from the worker with given sessionId.\n         */\n        post(method: 'NodeWorker.detach', params?: NodeWorker.DetachParameterType): Promise<void>;\n        /**\n         * Disables network tracking, prevents network events from being sent to the client.\n         */\n        post(method: 'Network.disable'): Promise<void>;\n        /**\n         * Enables network tracking, network events will now be delivered to the client.\n         */\n        post(method: 'Network.enable'): Promise<void>;\n        /**\n         * Enable the NodeRuntime events except by `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.enable'): Promise<void>;\n        /**\n         * Disable NodeRuntime events\n         */\n        post(method: 'NodeRuntime.disable'): Promise<void>;\n        /**\n         * Enable the `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType): Promise<void>;\n\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        addListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        addListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        addListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        addListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        addListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        addListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        addListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        addListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        addListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        addListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        addListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        addListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        addListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        addListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        addListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        addListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        addListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        addListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        addListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        addListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        addListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        addListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        addListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        addListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        addListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        addListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        addListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        addListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: 'inspectorNotification', message: InspectorNotification<object>): boolean;\n        emit(event: 'Runtime.executionContextCreated', message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextDestroyed', message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextsCleared'): boolean;\n        emit(event: 'Runtime.exceptionThrown', message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\n        emit(event: 'Runtime.exceptionRevoked', message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\n        emit(event: 'Runtime.consoleAPICalled', message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\n        emit(event: 'Runtime.inspectRequested', message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptParsed', message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptFailedToParse', message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\n        emit(event: 'Debugger.breakpointResolved', message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\n        emit(event: 'Debugger.paused', message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\n        emit(event: 'Debugger.resumed'): boolean;\n        emit(event: 'Console.messageAdded', message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileStarted', message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileFinished', message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\n        emit(event: 'HeapProfiler.addHeapSnapshotChunk', message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\n        emit(event: 'HeapProfiler.resetProfiles'): boolean;\n        emit(event: 'HeapProfiler.reportHeapSnapshotProgress', message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\n        emit(event: 'HeapProfiler.lastSeenObjectId', message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\n        emit(event: 'HeapProfiler.heapStatsUpdate', message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\n        emit(event: 'NodeTracing.dataCollected', message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\n        emit(event: 'NodeTracing.tracingComplete'): boolean;\n        emit(event: 'NodeWorker.attachedToWorker', message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.detachedFromWorker', message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.receivedMessageFromWorker', message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\n        emit(event: 'Network.requestWillBeSent', message: InspectorNotification<Network.RequestWillBeSentEventDataType>): boolean;\n        emit(event: 'Network.responseReceived', message: InspectorNotification<Network.ResponseReceivedEventDataType>): boolean;\n        emit(event: 'Network.loadingFailed', message: InspectorNotification<Network.LoadingFailedEventDataType>): boolean;\n        emit(event: 'Network.loadingFinished', message: InspectorNotification<Network.LoadingFinishedEventDataType>): boolean;\n        emit(event: 'NodeRuntime.waitingForDisconnect'): boolean;\n        emit(event: 'NodeRuntime.waitingForDebugger'): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        on(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        on(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        on(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        on(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        on(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        on(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        on(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        on(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        on(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        on(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        on(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        on(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        on(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        on(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        on(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        on(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        on(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        on(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        on(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        on(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        on(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        on(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        on(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        on(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        on(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        on(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        on(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        on(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        on(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        on(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        on(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        on(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        once(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        once(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        once(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        once(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        once(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        once(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        once(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        once(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        once(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        once(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        once(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        once(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        once(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        once(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        once(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        once(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        once(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        once(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        once(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        once(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        once(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        once(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        once(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        once(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        once(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        once(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        once(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        once(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        once(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        once(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        once(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        once(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependOnceListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependOnceListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependOnceListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependOnceListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependOnceListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependOnceListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependOnceListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependOnceListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependOnceListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependOnceListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependOnceListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependOnceListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependOnceListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependOnceListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependOnceListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependOnceListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependOnceListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependOnceListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependOnceListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependOnceListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependOnceListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependOnceListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependOnceListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependOnceListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependOnceListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependOnceListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n    }\n\n    export {\n        Session,\n        open,\n        close,\n        url,\n        waitForDebugger,\n        console,\n        InspectorNotification,\n        Schema,\n        Runtime,\n        Debugger,\n        Console,\n        Profiler,\n        HeapProfiler,\n        NodeTracing,\n        NodeWorker,\n        Network,\n        NodeRuntime,\n    };\n}\n\n/**\n * The `node:inspector/promises` module provides an API for interacting with the V8\n * inspector.\n * @since v19.0.0\n */\ndeclare module 'node:inspector/promises' {\n    export * from 'inspector/promises';\n}\n"
        }
    ]
}