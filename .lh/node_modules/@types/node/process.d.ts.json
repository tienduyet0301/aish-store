{
    "sourceFile": "node_modules/@types/node/process.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare module \"process\" {\n    import * as tty from \"node:tty\";\n    import { Worker } from \"node:worker_threads\";\n\n    interface BuiltInModule {\n        \"assert\": typeof import(\"assert\");\n        \"node:assert\": typeof import(\"node:assert\");\n        \"assert/strict\": typeof import(\"assert/strict\");\n        \"node:assert/strict\": typeof import(\"node:assert/strict\");\n        \"async_hooks\": typeof import(\"async_hooks\");\n        \"node:async_hooks\": typeof import(\"node:async_hooks\");\n        \"buffer\": typeof import(\"buffer\");\n        \"node:buffer\": typeof import(\"node:buffer\");\n        \"child_process\": typeof import(\"child_process\");\n        \"node:child_process\": typeof import(\"node:child_process\");\n        \"cluster\": typeof import(\"cluster\");\n        \"node:cluster\": typeof import(\"node:cluster\");\n        \"console\": typeof import(\"console\");\n        \"node:console\": typeof import(\"node:console\");\n        \"constants\": typeof import(\"constants\");\n        \"node:constants\": typeof import(\"node:constants\");\n        \"crypto\": typeof import(\"crypto\");\n        \"node:crypto\": typeof import(\"node:crypto\");\n        \"dgram\": typeof import(\"dgram\");\n        \"node:dgram\": typeof import(\"node:dgram\");\n        \"diagnostics_channel\": typeof import(\"diagnostics_channel\");\n        \"node:diagnostics_channel\": typeof import(\"node:diagnostics_channel\");\n        \"dns\": typeof import(\"dns\");\n        \"node:dns\": typeof import(\"node:dns\");\n        \"dns/promises\": typeof import(\"dns/promises\");\n        \"node:dns/promises\": typeof import(\"node:dns/promises\");\n        \"domain\": typeof import(\"domain\");\n        \"node:domain\": typeof import(\"node:domain\");\n        \"events\": typeof import(\"events\");\n        \"node:events\": typeof import(\"node:events\");\n        \"fs\": typeof import(\"fs\");\n        \"node:fs\": typeof import(\"node:fs\");\n        \"fs/promises\": typeof import(\"fs/promises\");\n        \"node:fs/promises\": typeof import(\"node:fs/promises\");\n        \"http\": typeof import(\"http\");\n        \"node:http\": typeof import(\"node:http\");\n        \"http2\": typeof import(\"http2\");\n        \"node:http2\": typeof import(\"node:http2\");\n        \"https\": typeof import(\"https\");\n        \"node:https\": typeof import(\"node:https\");\n        \"inspector\": typeof import(\"inspector\");\n        \"node:inspector\": typeof import(\"node:inspector\");\n        \"inspector/promises\": typeof import(\"inspector/promises\");\n        \"node:inspector/promises\": typeof import(\"node:inspector/promises\");\n        \"module\": typeof import(\"module\");\n        \"node:module\": typeof import(\"node:module\");\n        \"net\": typeof import(\"net\");\n        \"node:net\": typeof import(\"node:net\");\n        \"os\": typeof import(\"os\");\n        \"node:os\": typeof import(\"node:os\");\n        \"path\": typeof import(\"path\");\n        \"node:path\": typeof import(\"node:path\");\n        \"path/posix\": typeof import(\"path/posix\");\n        \"node:path/posix\": typeof import(\"node:path/posix\");\n        \"path/win32\": typeof import(\"path/win32\");\n        \"node:path/win32\": typeof import(\"node:path/win32\");\n        \"perf_hooks\": typeof import(\"perf_hooks\");\n        \"node:perf_hooks\": typeof import(\"node:perf_hooks\");\n        \"process\": typeof import(\"process\");\n        \"node:process\": typeof import(\"node:process\");\n        \"punycode\": typeof import(\"punycode\");\n        \"node:punycode\": typeof import(\"node:punycode\");\n        \"querystring\": typeof import(\"querystring\");\n        \"node:querystring\": typeof import(\"node:querystring\");\n        \"readline\": typeof import(\"readline\");\n        \"node:readline\": typeof import(\"node:readline\");\n        \"readline/promises\": typeof import(\"readline/promises\");\n        \"node:readline/promises\": typeof import(\"node:readline/promises\");\n        \"repl\": typeof import(\"repl\");\n        \"node:repl\": typeof import(\"node:repl\");\n        \"node:sea\": typeof import(\"node:sea\");\n        \"node:sqlite\": typeof import(\"node:sqlite\");\n        \"stream\": typeof import(\"stream\");\n        \"node:stream\": typeof import(\"node:stream\");\n        \"stream/consumers\": typeof import(\"stream/consumers\");\n        \"node:stream/consumers\": typeof import(\"node:stream/consumers\");\n        \"stream/promises\": typeof import(\"stream/promises\");\n        \"node:stream/promises\": typeof import(\"node:stream/promises\");\n        \"stream/web\": typeof import(\"stream/web\");\n        \"node:stream/web\": typeof import(\"node:stream/web\");\n        \"string_decoder\": typeof import(\"string_decoder\");\n        \"node:string_decoder\": typeof import(\"node:string_decoder\");\n        \"node:test\": typeof import(\"node:test\");\n        \"node:test/reporters\": typeof import(\"node:test/reporters\");\n        \"timers\": typeof import(\"timers\");\n        \"node:timers\": typeof import(\"node:timers\");\n        \"timers/promises\": typeof import(\"timers/promises\");\n        \"node:timers/promises\": typeof import(\"node:timers/promises\");\n        \"tls\": typeof import(\"tls\");\n        \"node:tls\": typeof import(\"node:tls\");\n        \"trace_events\": typeof import(\"trace_events\");\n        \"node:trace_events\": typeof import(\"node:trace_events\");\n        \"tty\": typeof import(\"tty\");\n        \"node:tty\": typeof import(\"node:tty\");\n        \"url\": typeof import(\"url\");\n        \"node:url\": typeof import(\"node:url\");\n        \"util\": typeof import(\"util\");\n        \"node:util\": typeof import(\"node:util\");\n        \"sys\": typeof import(\"util\");\n        \"node:sys\": typeof import(\"node:util\");\n        \"util/types\": typeof import(\"util/types\");\n        \"node:util/types\": typeof import(\"node:util/types\");\n        \"v8\": typeof import(\"v8\");\n        \"node:v8\": typeof import(\"node:v8\");\n        \"vm\": typeof import(\"vm\");\n        \"node:vm\": typeof import(\"node:vm\");\n        \"wasi\": typeof import(\"wasi\");\n        \"node:wasi\": typeof import(\"node:wasi\");\n        \"worker_threads\": typeof import(\"worker_threads\");\n        \"node:worker_threads\": typeof import(\"node:worker_threads\");\n        \"zlib\": typeof import(\"zlib\");\n        \"node:zlib\": typeof import(\"node:zlib\");\n    }\n    global {\n        var process: NodeJS.Process;\n        namespace NodeJS {\n            // this namespace merge is here because these are specifically used\n            // as the type for process.stdin, process.stdout, and process.stderr.\n            // they can't live in tty.d.ts because we need to disambiguate the imported name.\n            interface ReadStream extends tty.ReadStream {}\n            interface WriteStream extends tty.WriteStream {}\n            interface MemoryUsageFn {\n                /**\n                 * The `process.memoryUsage()` method iterate over each page to gather informations about memory\n                 * usage which can be slow depending on the program memory allocations.\n                 */\n                (): MemoryUsage;\n                /**\n                 * method returns an integer representing the Resident Set Size (RSS) in bytes.\n                 */\n                rss(): number;\n            }\n            interface MemoryUsage {\n                /**\n                 * Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the\n                 * process, including all C++ and JavaScript objects and code.\n                 */\n                rss: number;\n                /**\n                 * Refers to V8's memory usage.\n                 */\n                heapTotal: number;\n                /**\n                 * Refers to V8's memory usage.\n                 */\n                heapUsed: number;\n                external: number;\n                /**\n                 * Refers to memory allocated for `ArrayBuffer`s and `SharedArrayBuffer`s, including all Node.js Buffers. This is also included\n                 * in the external value. When Node.js is used as an embedded library, this value may be `0` because allocations for `ArrayBuffer`s\n                 * may not be tracked in that case.\n                 */\n                arrayBuffers: number;\n            }\n            interface CpuUsage {\n                user: number;\n                system: number;\n            }\n            interface ProcessRelease {\n                name: string;\n                sourceUrl?: string | undefined;\n                headersUrl?: string | undefined;\n                libUrl?: string | undefined;\n                lts?: string | undefined;\n            }\n            interface ProcessFeatures {\n                /**\n                 * A boolean value that is `true` if the current Node.js build is caching builtin modules.\n                 * @since v12.0.0\n                 */\n                readonly cached_builtins: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build is a debug build.\n                 * @since v0.5.5\n                 */\n                readonly debug: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes the inspector.\n                 * @since v11.10.0\n                 */\n                readonly inspector: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for IPv6.\n                 *\n                 * Since all Node.js builds have IPv6 support, this value is always `true`.\n                 * @since v0.5.3\n                 * @deprecated This property is always true, and any checks based on it are redundant.\n                 */\n                readonly ipv6: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build supports\n                 * [loading ECMAScript modules using `require()`](https://nodejs.org/docs/latest-v22.x/api/modules.md#loading-ecmascript-modules-using-require).\n                 * @since v22.10.0\n                 */\n                readonly require_module: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for TLS.\n                 * @since v0.5.3\n                 */\n                readonly tls: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for ALPN in TLS.\n                 *\n                 * In Node.js 11.0.0 and later versions, the OpenSSL dependencies feature unconditional ALPN support.\n                 * This value is therefore identical to that of `process.features.tls`.\n                 * @since v4.8.0\n                 * @deprecated Use `process.features.tls` instead.\n                 */\n                readonly tls_alpn: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for OCSP in TLS.\n                 *\n                 * In Node.js 11.0.0 and later versions, the OpenSSL dependencies feature unconditional OCSP support.\n                 * This value is therefore identical to that of `process.features.tls`.\n                 * @since v0.11.13\n                 * @deprecated Use `process.features.tls` instead.\n                 */\n                readonly tls_ocsp: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for SNI in TLS.\n                 *\n                 * In Node.js 11.0.0 and later versions, the OpenSSL dependencies feature unconditional SNI support.\n                 * This value is therefore identical to that of `process.features.tls`.\n                 * @since v0.5.3\n                 * @deprecated Use `process.features.tls` instead.\n                 */\n                readonly tls_sni: boolean;\n                /**\n                 * A value that is `\"strip\"` if Node.js is run with `--experimental-strip-types`,\n                 * `\"transform\"` if Node.js is run with `--experimental-transform-types`, and `false` otherwise.\n                 * @since v22.10.0\n                 */\n                readonly typescript: \"strip\" | \"transform\" | false;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for libuv.\n                 *\n                 * Since it's not possible to build Node.js without libuv, this value is always `true`.\n                 * @since v0.5.3\n                 * @deprecated This property is always true, and any checks based on it are redundant.\n                 */\n                readonly uv: boolean;\n            }\n            interface ProcessVersions extends Dict<string> {\n                http_parser: string;\n                node: string;\n                v8: string;\n                ares: string;\n                uv: string;\n                zlib: string;\n                modules: string;\n                openssl: string;\n            }\n            type Platform =\n                | \"aix\"\n                | \"android\"\n                | \"darwin\"\n                | \"freebsd\"\n                | \"haiku\"\n                | \"linux\"\n                | \"openbsd\"\n                | \"sunos\"\n                | \"win32\"\n                | \"cygwin\"\n                | \"netbsd\";\n            type Architecture =\n                | \"arm\"\n                | \"arm64\"\n                | \"ia32\"\n                | \"loong64\"\n                | \"mips\"\n                | \"mipsel\"\n                | \"ppc\"\n                | \"ppc64\"\n                | \"riscv64\"\n                | \"s390\"\n                | \"s390x\"\n                | \"x64\";\n            type Signals =\n                | \"SIGABRT\"\n                | \"SIGALRM\"\n                | \"SIGBUS\"\n                | \"SIGCHLD\"\n                | \"SIGCONT\"\n                | \"SIGFPE\"\n                | \"SIGHUP\"\n                | \"SIGILL\"\n                | \"SIGINT\"\n                | \"SIGIO\"\n                | \"SIGIOT\"\n                | \"SIGKILL\"\n                | \"SIGPIPE\"\n                | \"SIGPOLL\"\n                | \"SIGPROF\"\n                | \"SIGPWR\"\n                | \"SIGQUIT\"\n                | \"SIGSEGV\"\n                | \"SIGSTKFLT\"\n                | \"SIGSTOP\"\n                | \"SIGSYS\"\n                | \"SIGTERM\"\n                | \"SIGTRAP\"\n                | \"SIGTSTP\"\n                | \"SIGTTIN\"\n                | \"SIGTTOU\"\n                | \"SIGUNUSED\"\n                | \"SIGURG\"\n                | \"SIGUSR1\"\n                | \"SIGUSR2\"\n                | \"SIGVTALRM\"\n                | \"SIGWINCH\"\n                | \"SIGXCPU\"\n                | \"SIGXFSZ\"\n                | \"SIGBREAK\"\n                | \"SIGLOST\"\n                | \"SIGINFO\";\n            type UncaughtExceptionOrigin = \"uncaughtException\" | \"unhandledRejection\";\n            type MultipleResolveType = \"resolve\" | \"reject\";\n            type BeforeExitListener = (code: number) => void;\n            type DisconnectListener = () => void;\n            type ExitListener = (code: number) => void;\n            type RejectionHandledListener = (promise: Promise<unknown>) => void;\n            type UncaughtExceptionListener = (error: Error, origin: UncaughtExceptionOrigin) => void;\n            /**\n             * Most of the time the unhandledRejection will be an Error, but this should not be relied upon\n             * as *anything* can be thrown/rejected, it is therefore unsafe to assume that the value is an Error.\n             */\n            type UnhandledRejectionListener = (reason: unknown, promise: Promise<unknown>) => void;\n            type WarningListener = (warning: Error) => void;\n            type MessageListener = (message: unknown, sendHandle: unknown) => void;\n            type SignalsListener = (signal: Signals) => void;\n            type MultipleResolveListener = (\n                type: MultipleResolveType,\n                promise: Promise<unknown>,\n                value: unknown,\n            ) => void;\n            type WorkerListener = (worker: Worker) => void;\n            interface Socket extends ReadWriteStream {\n                isTTY?: true | undefined;\n            }\n            // Alias for compatibility\n            interface ProcessEnv extends Dict<string> {\n                /**\n                 * Can be used to change the default timezone at runtime\n                 */\n                TZ?: string;\n            }\n            interface HRTime {\n                /**\n                 * This is the legacy version of {@link process.hrtime.bigint()}\n                 * before bigint was introduced in JavaScript.\n                 *\n                 * The `process.hrtime()` method returns the current high-resolution real time in a `[seconds, nanoseconds]` tuple `Array`,\n                 * where `nanoseconds` is the remaining part of the real time that can't be represented in second precision.\n                 *\n                 * `time` is an optional parameter that must be the result of a previous `process.hrtime()` call to diff with the current time.\n                 * If the parameter passed in is not a tuple `Array`, a TypeError will be thrown.\n                 * Passing in a user-defined array instead of the result of a previous call to `process.hrtime()` will lead to undefined behavior.\n                 *\n                 * These times are relative to an arbitrary time in the past,\n                 * and not related to the time of day and therefore not subject to clock drift.\n                 * The primary use is for measuring performance between intervals:\n                 * ```js\n                 * const { hrtime } = require('node:process');\n                 * const NS_PER_SEC = 1e9;\n                 * const time = hrtime();\n                 * // [ 1800216, 25 ]\n                 *\n                 * setTimeout(() => {\n                 *   const diff = hrtime(time);\n                 *   // [ 1, 552 ]\n                 *\n                 *   console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);\n                 *   // Benchmark took 1000000552 nanoseconds\n                 * }, 1000);\n                 * ```\n                 * @since 0.7.6\n                 * @legacy Use {@link process.hrtime.bigint()} instead.\n                 * @param time The result of a previous call to `process.hrtime()`\n                 */\n                (time?: [number, number]): [number, number];\n                /**\n                 * The `bigint` version of the {@link process.hrtime()} method returning the current high-resolution real time in nanoseconds as a `bigint`.\n                 *\n                 * Unlike {@link process.hrtime()}, it does not support an additional time argument since the difference can just be computed directly by subtraction of the two `bigint`s.\n                 * ```js\n                 * import { hrtime } from 'node:process';\n                 *\n                 * const start = hrtime.bigint();\n                 * // 191051479007711n\n                 *\n                 * setTimeout(() => {\n                 *   const end = hrtime.bigint();\n                 *   // 191052633396993n\n                 *\n                 *   console.log(`Benchmark took ${end - start} nanoseconds`);\n                 *   // Benchmark took 1154389282 nanoseconds\n                 * }, 1000);\n                 * ```\n                 * @since v10.7.0\n                 */\n                bigint(): bigint;\n            }\n            interface ProcessPermission {\n                /**\n                 * Verifies that the process is able to access the given scope and reference.\n                 * If no reference is provided, a global scope is assumed, for instance, `process.permission.has('fs.read')`\n                 * will check if the process has ALL file system read permissions.\n                 *\n                 * The reference has a meaning based on the provided scope. For example, the reference when the scope is File System means files and folders.\n                 *\n                 * The available scopes are:\n                 *\n                 * * `fs` - All File System\n                 * * `fs.read` - File System read operations\n                 * * `fs.write` - File System write operations\n                 * * `child` - Child process spawning operations\n                 * * `worker` - Worker thread spawning operation\n                 *\n                 * ```js\n                 * // Check if the process has permission to read the README file\n                 * process.permission.has('fs.read', './README.md');\n                 * // Check if the process has read permission operations\n                 * process.permission.has('fs.read');\n                 * ```\n                 * @since v20.0.0\n                 */\n                has(scope: string, reference?: string): boolean;\n            }\n            interface ProcessReport {\n                /**\n                 * Write reports in a compact format, single-line JSON, more easily consumable by log processing systems\n                 * than the default multi-line format designed for human consumption.\n                 * @since v13.12.0, v12.17.0\n                 */\n                compact: boolean;\n                /**\n                 * Directory where the report is written.\n                 * The default value is the empty string, indicating that reports are written to the current\n                 * working directory of the Node.js process.\n                 */\n                directory: string;\n                /**\n                 * Filename where the report is written. If set to the empty string, the output filename will be comprised\n                 * of a timestamp, PID, and sequence number. The default value is the empty string.\n                 */\n                filename: string;\n                /**\n                 * Returns a JavaScript Object representation of a diagnostic report for the running process.\n                 * The report's JavaScript stack trace is taken from `err`, if present.\n                 */\n                getReport(err?: Error): object;\n                /**\n                 * If true, a diagnostic report is generated on fatal errors,\n                 * such as out of memory errors or failed C++ assertions.\n                 * @default false\n                 */\n                reportOnFatalError: boolean;\n                /**\n                 * If true, a diagnostic report is generated when the process\n                 * receives the signal specified by process.report.signal.\n                 * @default false\n                 */\n                reportOnSignal: boolean;\n                /**\n                 * If true, a diagnostic report is generated on uncaught exception.\n                 * @default false\n                 */\n                reportOnUncaughtException: boolean;\n                /**\n                 * The signal used to trigger the creation of a diagnostic report.\n                 * @default 'SIGUSR2'\n                 */\n                signal: Signals;\n                /**\n                 * Writes a diagnostic report to a file. If filename is not provided, the default filename\n                 * includes the date, time, PID, and a sequence number.\n                 * The report's JavaScript stack trace is taken from `err`, if present.\n                 *\n                 * If the value of filename is set to `'stdout'` or `'stderr'`, the report is written\n                 * to the stdout or stderr of the process respectively.\n                 * @param fileName Name of the file where the report is written.\n                 * This should be a relative path, that will be appended to the directory specified in\n                 * `process.report.directory`, or the current working directory of the Node.js process,\n                 * if unspecified.\n                 * @param err A custom error used for reporting the JavaScript stack.\n                 * @return Filename of the generated report.\n                 */\n                writeReport(fileName?: string, err?: Error): string;\n                writeReport(err?: Error): string;\n            }\n            interface ResourceUsage {\n                fsRead: number;\n                fsWrite: number;\n                involuntaryContextSwitches: number;\n                ipcReceived: number;\n                ipcSent: number;\n                majorPageFault: number;\n                maxRSS: number;\n                minorPageFault: number;\n                sharedMemorySize: number;\n                signalsCount: number;\n                swappedOut: number;\n                systemCPUTime: number;\n                unsharedDataSize: number;\n                unsharedStackSize: number;\n                userCPUTime: number;\n                voluntaryContextSwitches: number;\n            }\n            interface EmitWarningOptions {\n                /**\n                 * When `warning` is a `string`, `type` is the name to use for the _type_ of warning being emitted.\n                 *\n                 * @default 'Warning'\n                 */\n                type?: string | undefined;\n                /**\n                 * A unique identifier for the warning instance being emitted.\n                 */\n                code?: string | undefined;\n                /**\n                 * When `warning` is a `string`, `ctor` is an optional function used to limit the generated stack trace.\n                 *\n                 * @default process.emitWarning\n                 */\n                ctor?: Function | undefined;\n                /**\n                 * Additional text to include with the error.\n                 */\n                detail?: string | undefined;\n            }\n            interface ProcessConfig {\n                readonly target_defaults: {\n                    readonly cflags: any[];\n                    readonly default_configuration: string;\n                    readonly defines: string[];\n                    readonly include_dirs: string[];\n                    readonly libraries: string[];\n                };\n                readonly variables: {\n                    readonly clang: number;\n                    readonly host_arch: string;\n                    readonly node_install_npm: boolean;\n                    readonly node_install_waf: boolean;\n                    readonly node_prefix: string;\n                    readonly node_shared_openssl: boolean;\n                    readonly node_shared_v8: boolean;\n                    readonly node_shared_zlib: boolean;\n                    readonly node_use_dtrace: boolean;\n                    readonly node_use_etw: boolean;\n                    readonly node_use_openssl: boolean;\n                    readonly target_arch: string;\n                    readonly v8_no_strict_aliasing: number;\n                    readonly v8_use_snapshot: boolean;\n                    readonly visibility: string;\n                };\n            }\n            interface Process extends EventEmitter {\n                /**\n                 * The `process.stdout` property returns a stream connected to`stdout` (fd `1`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `1` refers to a file, in which case it is\n                 * a `Writable` stream.\n                 *\n                 * For example, to copy `process.stdin` to `process.stdout`:\n                 *\n                 * ```js\n                 * import { stdin, stdout } from 'node:process';\n                 *\n                 * stdin.pipe(stdout);\n                 * ```\n                 *\n                 * `process.stdout` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\n                 */\n                stdout: WriteStream & {\n                    fd: 1;\n                };\n                /**\n                 * The `process.stderr` property returns a stream connected to`stderr` (fd `2`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `2` refers to a file, in which case it is\n                 * a `Writable` stream.\n                 *\n                 * `process.stderr` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\n                 */\n                stderr: WriteStream & {\n                    fd: 2;\n                };\n                /**\n                 * The `process.stdin` property returns a stream connected to`stdin` (fd `0`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `0` refers to a file, in which case it is\n                 * a `Readable` stream.\n                 *\n                 * For details of how to read from `stdin` see `readable.read()`.\n                 *\n                 * As a `Duplex` stream, `process.stdin` can also be used in \"old\" mode that\n                 * is compatible with scripts written for Node.js prior to v0.10\\.\n                 * For more information see `Stream compatibility`.\n                 *\n                 * In \"old\" streams mode the `stdin` stream is paused by default, so one\n                 * must call `process.stdin.resume()` to read from it. Note also that calling `process.stdin.resume()` itself would switch stream to \"old\" mode.\n                 */\n                stdin: ReadStream & {\n                    fd: 0;\n                };\n                /**\n                 * The `process.argv` property returns an array containing the command-line\n                 * arguments passed when the Node.js process was launched. The first element will\n                 * be {@link execPath}. See `process.argv0` if access to the original value\n                 * of `argv[0]` is needed. The second element will be the path to the JavaScript\n                 * file being executed. The remaining elements will be any additional command-line\n                 * arguments.\n                 *\n                 * For example, assuming the following script for `process-args.js`:\n                 *\n                 * ```js\n                 * import { argv } from 'node:process';\n                 *\n                 * // print process.argv\n                 * argv.forEach((val, index) => {\n                 *   console.log(`${index}: ${val}`);\n                 * });\n                 * ```\n                 *\n                 * Launching the Node.js process as:\n                 *\n                 * ```bash\n                 * node process-args.js one two=three four\n                 * ```\n                 *\n                 * Would generate the output:\n                 *\n                 * ```text\n                 * 0: /usr/local/bin/node\n                 * 1: /Users/mjr/work/node/process-args.js\n                 * 2: one\n                 * 3: two=three\n                 * 4: four\n                 * ```\n                 * @since v0.1.27\n                 */\n                argv: string[];\n                /**\n                 * The `process.argv0` property stores a read-only copy of the original value of`argv[0]` passed when Node.js starts.\n                 *\n                 * ```console\n                 * $ bash -c 'exec -a customArgv0 ./node'\n                 * > process.argv[0]\n                 * '/Volumes/code/external/node/out/Release/node'\n                 * > process.argv0\n                 * 'customArgv0'\n                 * ```\n                 * @since v6.4.0\n                 */\n                argv0: string;\n                /**\n                 * The `process.execArgv` property returns the set of Node.js-specific command-line\n                 * options passed when the Node.js process was launched. These options do not\n                 * appear in the array returned by the {@link argv} property, and do not\n                 * include the Node.js executable, the name of the script, or any options following\n                 * the script name. These options are useful in order to spawn child processes with\n                 * the same execution environment as the parent.\n                 *\n                 * ```bash\n                 * node --icu-data-dir=./foo --require ./bar.js script.js --version\n                 * ```\n                 *\n                 * Results in `process.execArgv`:\n                 *\n                 * ```js\n                 * [\"--icu-data-dir=./foo\", \"--require\", \"./bar.js\"]\n                 * ```\n                 *\n                 * And `process.argv`:\n                 *\n                 * ```js\n                 * ['/usr/local/bin/node', 'script.js', '--version']\n                 * ```\n                 *\n                 * Refer to `Worker constructor` for the detailed behavior of worker\n                 * threads with this property.\n                 * @since v0.7.7\n                 */\n                execArgv: string[];\n                /**\n                 * The `process.execPath` property returns the absolute pathname of the executable\n                 * that started the Node.js process. Symbolic links, if any, are resolved.\n                 *\n                 * ```js\n                 * '/usr/local/bin/node'\n                 * ```\n                 * @since v0.1.100\n                 */\n                execPath: string;\n                /**\n                 * The `process.abort()` method causes the Node.js process to exit immediately and\n                 * generate a core file.\n                 *\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.7.0\n                 */\n                abort(): never;\n                /**\n                 * The `process.chdir()` method changes the current working directory of the\n                 * Node.js process or throws an exception if doing so fails (for instance, if\n                 * the specified `directory` does not exist).\n                 *\n                 * ```js\n                 * import { chdir, cwd } from 'node:process';\n                 *\n                 * console.log(`Starting directory: ${cwd()}`);\n                 * try {\n                 *   chdir('/tmp');\n                 *   console.log(`New directory: ${cwd()}`);\n                 * } catch (err) {\n                 *   console.error(`chdir: ${err}`);\n                 * }\n                 * ```\n                 *\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.1.17\n                 */\n                chdir(directory: string): void;\n                /**\n                 * The `process.cwd()` method returns the current working directory of the Node.js\n                 * process.\n                 *\n                 * ```js\n                 * import { cwd } from 'node:process';\n                 *\n                 * console.log(`Current directory: ${cwd()}`);\n                 * ```\n                 * @since v0.1.8\n                 */\n                cwd(): string;\n                /**\n                 * The port used by the Node.js debugger when enabled.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * process.debugPort = 5858;\n                 * ```\n                 * @since v0.7.2\n                 */\n                debugPort: number;\n                /**\n                 * The `process.dlopen()` method allows dynamically loading shared objects. It is primarily used by `require()` to load C++ Addons, and\n                 * should not be used directly, except in special cases. In other words, `require()` should be preferred over `process.dlopen()`\n                 * unless there are specific reasons such as custom dlopen flags or loading from ES modules.\n                 *\n                 * The `flags` argument is an integer that allows to specify dlopen behavior. See the `[os.constants.dlopen](https://nodejs.org/docs/latest-v22.x/api/os.html#dlopen-constants)`\n                 * documentation for details.\n                 *\n                 * An important requirement when calling `process.dlopen()` is that the `module` instance must be passed. Functions exported by the C++ Addon\n                 * are then accessible via `module.exports`.\n                 *\n                 * The example below shows how to load a C++ Addon, named `local.node`, that exports a `foo` function. All the symbols are loaded before the call returns, by passing the `RTLD_NOW` constant.\n                 * In this example the constant is assumed to be available.\n                 *\n                 * ```js\n                 * import { dlopen } from 'node:process';\n                 * import { constants } from 'node:os';\n                 * import { fileURLToPath } from 'node:url';\n                 *\n                 * const module = { exports: {} };\n                 * dlopen(module, fileURLToPath(new URL('local.node', import.meta.url)),\n                 *        constants.dlopen.RTLD_NOW);\n                 * module.exports.foo();\n                 * ```\n                 */\n                dlopen(module: object, filename: string, flags?: number): void;\n                /**\n                 * The `process.emitWarning()` method can be used to emit custom or application\n                 * specific process warnings. These can be listened for by adding a handler to the `'warning'` event.\n                 *\n                 * ```js\n                 * import { emitWarning } from 'node:process';\n                 *\n                 * // Emit a warning using a string.\n                 * emitWarning('Something happened!');\n                 * // Emits: (node: 56338) Warning: Something happened!\n                 * ```\n                 *\n                 * ```js\n                 * import { emitWarning } from 'node:process';\n                 *\n                 * // Emit a warning using a string and a type.\n                 * emitWarning('Something Happened!', 'CustomWarning');\n                 * // Emits: (node:56338) CustomWarning: Something Happened!\n                 * ```\n                 *\n                 * ```js\n                 * import { emitWarning } from 'node:process';\n                 *\n                 * emitWarning('Something happened!', 'CustomWarning', 'WARN001');\n                 * // Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n                 * ```js\n                 *\n                 * In each of the previous examples, an `Error` object is generated internally by `process.emitWarning()` and passed through to the `'warning'` handler.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * process.on('warning', (warning) => {\n                 *   console.warn(warning.name);    // 'Warning'\n                 *   console.warn(warning.message); // 'Something happened!'\n                 *   console.warn(warning.code);    // 'MY_WARNING'\n                 *   console.warn(warning.stack);   // Stack trace\n                 *   console.warn(warning.detail);  // 'This is some additional information'\n                 * });\n                 * ```\n                 *\n                 * If `warning` is passed as an `Error` object, it will be passed through to the `'warning'` event handler\n                 * unmodified (and the optional `type`, `code` and `ctor` arguments will be ignored):\n                 *\n                 * ```js\n                 * import { emitWarning } from 'node:process';\n                 *\n                 * // Emit a warning using an Error object.\n                 * const myWarning = new Error('Something happened!');\n                 * // Use the Error name property to specify the type name\n                 * myWarning.name = 'CustomWarning';\n                 * myWarning.code = 'WARN001';\n                 *\n                 * emitWarning(myWarning);\n                 * // Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n                 * ```\n                 *\n                 * A `TypeError` is thrown if `warning` is anything other than a string or `Error` object.\n                 *\n                 * While process warnings use `Error` objects, the process warning mechanism is not a replacement for normal error handling mechanisms.\n                 *\n                 * The following additional handling is implemented if the warning `type` is `'DeprecationWarning'`:\n                 * * If the `--throw-deprecation` command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event.\n                 * * If the `--no-deprecation` command-line flag is used, the deprecation warning is suppressed.\n                 * * If the `--trace-deprecation` command-line flag is used, the deprecation warning is printed to `stderr` along with the full stack trace.\n                 * @since v8.0.0\n                 * @param warning The warning to emit.\n                 */\n                emitWarning(warning: string | Error, ctor?: Function): void;\n                emitWarning(warning: string | Error, type?: string, ctor?: Function): void;\n                emitWarning(warning: string | Error, type?: string, code?: string, ctor?: Function): void;\n                emitWarning(warning: string | Error, options?: EmitWarningOptions): void;\n                /**\n                 * The `process.env` property returns an object containing the user environment.\n                 * See [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).\n                 *\n                 * An example of this object looks like:\n                 *\n                 * ```js\n                 * {\n                 *   TERM: 'xterm-256color',\n                 *   SHELL: '/usr/local/bin/bash',\n                 *   USER: 'maciej',\n                 *   PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin',\n                 *   PWD: '/Users/maciej',\n                 *   EDITOR: 'vim',\n                 *   SHLVL: '1',\n                 *   HOME: '/Users/maciej',\n                 *   LOGNAME: 'maciej',\n                 *   _: '/usr/local/bin/node'\n                 * }\n                 * ```\n                 *\n                 * It is possible to modify this object, but such modifications will not be\n                 * reflected outside the Node.js process, or (unless explicitly requested)\n                 * to other `Worker` threads.\n                 * In other words, the following example would not work:\n                 *\n                 * ```bash\n                 * node -e 'process.env.foo = \"bar\"' &#x26;&#x26; echo $foo\n                 * ```\n                 *\n                 * While the following will:\n                 *\n                 * ```js\n                 * import { env } from 'node:process';\n                 *\n                 * env.foo = 'bar';\n                 * console.log(env.foo);\n                 * ```\n                 *\n                 * Assigning a property on `process.env` will implicitly convert the value\n                 * to a string. **This behavior is deprecated.** Future versions of Node.js may\n                 * throw an error when the value is not a string, number, or boolean.\n                 *\n                 * ```js\n                 * import { env } from 'node:process';\n                 *\n                 * env.test = null;\n                 * console.log(env.test);\n                 * // => 'null'\n                 * env.test = undefined;\n                 * console.log(env.test);\n                 * // => 'undefined'\n                 * ```\n                 *\n                 * Use `delete` to delete a property from `process.env`.\n                 *\n                 * ```js\n                 * import { env } from 'node:process';\n                 *\n                 * env.TEST = 1;\n                 * delete env.TEST;\n                 * console.log(env.TEST);\n                 * // => undefined\n                 * ```\n                 *\n                 * On Windows operating systems, environment variables are case-insensitive.\n                 *\n                 * ```js\n                 * import { env } from 'node:process';\n                 *\n                 * env.TEST = 1;\n                 * console.log(env.test);\n                 * // => 1\n                 * ```\n                 *\n                 * Unless explicitly specified when creating a `Worker` instance,\n                 * each `Worker` thread has its own copy of `process.env`, based on its\n                 * parent thread's `process.env`, or whatever was specified as the `env` option\n                 * to the `Worker` constructor. Changes to `process.env` will not be visible\n                 * across `Worker` threads, and only the main thread can make changes that\n                 * are visible to the operating system or to native add-ons. On Windows, a copy of `process.env` on a `Worker` instance operates in a case-sensitive manner\n                 * unlike the main thread.\n                 * @since v0.1.27\n                 */\n                env: ProcessEnv;\n                /**\n                 * The `process.exit()` method instructs Node.js to terminate the process\n                 * synchronously with an exit status of `code`. If `code` is omitted, exit uses\n                 * either the 'success' code `0` or the value of `process.exitCode` if it has been\n                 * set. Node.js will not terminate until all the `'exit'` event listeners are\n                 * called.\n                 *\n                 * To exit with a 'failure' code:\n                 *\n                 * ```js\n                 * import { exit } from 'node:process';\n                 *\n                 * exit(1);\n                 * ```\n                 *\n                 * The shell that executed Node.js should see the exit code as `1`.\n                 *\n                 * Calling `process.exit()` will force the process to exit as quickly as possible\n                 * even if there are still asynchronous operations pending that have not yet\n                 * completed fully, including I/O operations to `process.stdout` and `process.stderr`.\n                 *\n                 * In most situations, it is not actually necessary to call `process.exit()` explicitly. The Node.js process will exit on its own _if there is no additional_\n                 * _work pending_ in the event loop. The `process.exitCode` property can be set to\n                 * tell the process which exit code to use when the process exits gracefully.\n                 *\n                 * For instance, the following example illustrates a _misuse_ of the `process.exit()` method that could lead to data printed to stdout being\n                 * truncated and lost:\n                 *\n                 * ```js\n                 * import { exit } from 'node:process';\n                 *\n                 * // This is an example of what *not* to do:\n                 * if (someConditionNotMet()) {\n                 *   printUsageToStdout();\n                 *   exit(1);\n                 * }\n                 * ```\n                 *\n                 * The reason this is problematic is because writes to `process.stdout` in Node.js\n                 * are sometimes _asynchronous_ and may occur over multiple ticks of the Node.js\n                 * event loop. Calling `process.exit()`, however, forces the process to exit _before_ those additional writes to `stdout` can be performed.\n                 *\n                 * Rather than calling `process.exit()` directly, the code _should_ set the `process.exitCode` and allow the process to exit naturally by avoiding\n                 * scheduling any additional work for the event loop:\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * // How to properly set the exit code while letting\n                 * // the process exit gracefully.\n                 * if (someConditionNotMet()) {\n                 *   printUsageToStdout();\n                 *   process.exitCode = 1;\n                 * }\n                 * ```\n                 *\n                 * If it is necessary to terminate the Node.js process due to an error condition,\n                 * throwing an _uncaught_ error and allowing the process to terminate accordingly\n                 * is safer than calling `process.exit()`.\n                 *\n                 * In `Worker` threads, this function stops the current thread rather\n                 * than the current process.\n                 * @since v0.1.13\n                 * @param [code=0] The exit code. For string type, only integer strings (e.g.,'1') are allowed.\n                 */\n                exit(code?: number | string | null | undefined): never;\n                /**\n                 * A number which will be the process exit code, when the process either\n                 * exits gracefully, or is exited via {@link exit} without specifying\n                 * a code.\n                 *\n                 * Specifying a code to {@link exit} will override any\n                 * previous setting of `process.exitCode`.\n                 * @default undefined\n                 * @since v0.11.8\n                 */\n                exitCode?: number | string | number | undefined;\n                finalization: {\n                    /**\n                     * This function registers a callback to be called when the process emits the `exit` event if the `ref` object was not garbage collected.\n                     * If the object `ref` was garbage collected before the `exit` event is emitted, the callback will be removed from the finalization registry, and it will not be called on process exit.\n                     *\n                     * Inside the callback you can release the resources allocated by the `ref` object.\n                     * Be aware that all limitations applied to the `beforeExit` event are also applied to the callback function,\n                     * this means that there is a possibility that the callback will not be called under special circumstances.\n                     *\n                     * The idea of ​​this function is to help you free up resources when the starts process exiting, but also let the object be garbage collected if it is no longer being used.\n                     * @param ref The reference to the resource that is being tracked.\n                     * @param callback The callback function to be called when the resource is finalized.\n                     * @since v22.5.0\n                     * @experimental\n                     */\n                    register<T extends object>(ref: T, callback: (ref: T, event: \"exit\") => void): void;\n                    /**\n                     * This function behaves exactly like the `register`, except that the callback will be called when the process emits the `beforeExit` event if `ref` object was not garbage collected.\n                     *\n                     * Be aware that all limitations applied to the `beforeExit` event are also applied to the callback function, this means that there is a possibility that the callback will not be called under special circumstances.\n                     * @param ref The reference to the resource that is being tracked.\n                     * @param callback The callback function to be called when the resource is finalized.\n                     * @since v22.5.0\n                     * @experimental\n                     */\n                    registerBeforeExit<T extends object>(ref: T, callback: (ref: T, event: \"beforeExit\") => void): void;\n                    /**\n                     * This function remove the register of the object from the finalization registry, so the callback will not be called anymore.\n                     * @param ref The reference to the resource that was registered previously.\n                     * @since v22.5.0\n                     * @experimental\n                     */\n                    unregister(ref: object): void;\n                };\n                /**\n                 * The `process.getActiveResourcesInfo()` method returns an array of strings containing\n                 * the types of the active resources that are currently keeping the event loop alive.\n                 *\n                 * ```js\n                 * import { getActiveResourcesInfo } from 'node:process';\n                 * import { setTimeout } from 'node:timers';\n\n                 * console.log('Before:', getActiveResourcesInfo());\n                 * setTimeout(() => {}, 1000);\n                 * console.log('After:', getActiveResourcesInfo());\n                 * // Prints:\n                 * //   Before: [ 'TTYWrap', 'TTYWrap', 'TTYWrap' ]\n                 * //   After: [ 'TTYWrap', 'TTYWrap', 'TTYWrap', 'Timeout' ]\n                 * ```\n                 * @since v17.3.0, v16.14.0\n                 */\n                getActiveResourcesInfo(): string[];\n                /**\n                 * Provides a way to load built-in modules in a globally available function.\n                 * @param id ID of the built-in module being requested.\n                 */\n                getBuiltinModule<ID extends keyof BuiltInModule>(id: ID): BuiltInModule[ID];\n                getBuiltinModule(id: string): object | undefined;\n                /**\n                 * The `process.getgid()` method returns the numerical group identity of the\n                 * process. (See [`getgid(2)`](http://man7.org/linux/man-pages/man2/getgid.2.html).)\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getgid) {\n                 *   console.log(`Current gid: ${process.getgid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v0.1.31\n                 */\n                getgid?: () => number;\n                /**\n                 * The `process.setgid()` method sets the group identity of the process. (See [`setgid(2)`](http://man7.org/linux/man-pages/man2/setgid.2.html).) The `id` can be passed as either a\n                 * numeric ID or a group name\n                 * string. If a group name is specified, this method blocks while resolving the\n                 * associated numeric ID.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getgid &#x26;&#x26; process.setgid) {\n                 *   console.log(`Current gid: ${process.getgid()}`);\n                 *   try {\n                 *     process.setgid(501);\n                 *     console.log(`New gid: ${process.getgid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set gid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.1.31\n                 * @param id The group name or ID\n                 */\n                setgid?: (id: number | string) => void;\n                /**\n                 * The `process.getuid()` method returns the numeric user identity of the process.\n                 * (See [`getuid(2)`](http://man7.org/linux/man-pages/man2/getuid.2.html).)\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getuid) {\n                 *   console.log(`Current uid: ${process.getuid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v0.1.28\n                 */\n                getuid?: () => number;\n                /**\n                 * The `process.setuid(id)` method sets the user identity of the process. (See [`setuid(2)`](http://man7.org/linux/man-pages/man2/setuid.2.html).) The `id` can be passed as either a\n                 * numeric ID or a username string.\n                 * If a username is specified, the method blocks while resolving the associated\n                 * numeric ID.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getuid &#x26;&#x26; process.setuid) {\n                 *   console.log(`Current uid: ${process.getuid()}`);\n                 *   try {\n                 *     process.setuid(501);\n                 *     console.log(`New uid: ${process.getuid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set uid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.1.28\n                 */\n                setuid?: (id: number | string) => void;\n                /**\n                 * The `process.geteuid()` method returns the numerical effective user identity of\n                 * the process. (See [`geteuid(2)`](http://man7.org/linux/man-pages/man2/geteuid.2.html).)\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.geteuid) {\n                 *   console.log(`Current uid: ${process.geteuid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v2.0.0\n                 */\n                geteuid?: () => number;\n                /**\n                 * The `process.seteuid()` method sets the effective user identity of the process.\n                 * (See [`seteuid(2)`](http://man7.org/linux/man-pages/man2/seteuid.2.html).) The `id` can be passed as either a numeric ID or a username\n                 * string. If a username is specified, the method blocks while resolving the\n                 * associated numeric ID.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.geteuid &#x26;&#x26; process.seteuid) {\n                 *   console.log(`Current uid: ${process.geteuid()}`);\n                 *   try {\n                 *     process.seteuid(501);\n                 *     console.log(`New uid: ${process.geteuid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set uid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v2.0.0\n                 * @param id A user name or ID\n                 */\n                seteuid?: (id: number | string) => void;\n                /**\n                 * The `process.getegid()` method returns the numerical effective group identity\n                 * of the Node.js process. (See [`getegid(2)`](http://man7.org/linux/man-pages/man2/getegid.2.html).)\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getegid) {\n                 *   console.log(`Current gid: ${process.getegid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v2.0.0\n                 */\n                getegid?: () => number;\n                /**\n                 * The `process.setegid()` method sets the effective group identity of the process.\n                 * (See [`setegid(2)`](http://man7.org/linux/man-pages/man2/setegid.2.html).) The `id` can be passed as either a numeric ID or a group\n                 * name string. If a group name is specified, this method blocks while resolving\n                 * the associated a numeric ID.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getegid &#x26;&#x26; process.setegid) {\n                 *   console.log(`Current gid: ${process.getegid()}`);\n                 *   try {\n                 *     process.setegid(501);\n                 *     console.log(`New gid: ${process.getegid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set gid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v2.0.0\n                 * @param id A group name or ID\n                 */\n                setegid?: (id: number | string) => void;\n                /**\n                 * The `process.getgroups()` method returns an array with the supplementary group\n                 * IDs. POSIX leaves it unspecified if the effective group ID is included but\n                 * Node.js ensures it always is.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getgroups) {\n                 *   console.log(process.getgroups()); // [ 16, 21, 297 ]\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v0.9.4\n                 */\n                getgroups?: () => number[];\n                /**\n                 * The `process.setgroups()` method sets the supplementary group IDs for the\n                 * Node.js process. This is a privileged operation that requires the Node.js\n                 * process to have `root` or the `CAP_SETGID` capability.\n                 *\n                 * The `groups` array can contain numeric group IDs, group names, or both.\n                 *\n                 * ```js\n                 * import process from 'node:process';\n                 *\n                 * if (process.getgroups &#x26;&#x26; process.setgroups) {\n                 *   try {\n                 *     process.setgroups([501]);\n                 *     console.log(process.getgroups()); // new groups\n                 *   } catch (err) {\n                 *     console.log(`Failed to set groups: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.9.4\n                 */\n                setgroups?: (groups: ReadonlyArray<string | number>) => void;\n                /**\n                 * The `process.setUncaughtExceptionCaptureCallback()` function sets a function\n                 * that will be invoked when an uncaught exception occurs, which will receive the\n                 * exception value itself as its first argument.\n                 *\n                 * If such a function is set, the `'uncaughtException'` event will\n                 * not be emitted. If `--abort-on-uncaught-exception` was passed from the\n                 * command line or set through `v8.setFlagsFromString()`, the process will\n                 * not abort. Actions configured to take place on exceptions such as report\n                 * generations will be affected too\n                 *\n                 * To unset the capture function, `process.setUncaughtExceptionCaptureCallback(null)` may be used. Calling this\n                 * method with a non-`null` argument while another capture function is set will\n                 * throw an error.\n                 *\n                 * Using this function is mutually exclusive with using the deprecated `domain` built-in module.\n                 * @since v9.3.0\n                 */\n                setUncaughtExceptionCaptureCallback(cb: ((err: Error) => void) | null): void;\n                /**\n                 * Indicates whether a callback has been set using {@link setUncaughtExceptionCaptureCallback}.\n                 * @since v9.3.0\n                 */\n                hasUncaughtExceptionCaptureCallback(): boolean;\n                /**\n                 * The `process.sourceMapsEnabled` property returns whether the [Source Map v3](https://sourcemaps.info/spec.html) support for stack traces is enabled.\n                 * @since v20.7.0\n                 * @experimental\n                 */\n                readonly sourceMapsEnabled: boolean;\n                /**\n                 * This function enables or disables the [Source Map v3](https://sourcemaps.info/spec.html) support for\n                 * stack traces.\n                 *\n                 * It provides same features as launching Node.js process with commandline options `--enable-source-maps`.\n                 *\n                 * Only source maps in JavaScript files that are loaded after source maps has been\n                 * enabled will be parsed and loaded.\n                 * @since v16.6.0, v14.18.0\n                 * @experimental\n                 */\n                setSourceMapsEnabled(value: boolean): void;\n                /**\n                 * The `process.version` property contains the Node.js version string.\n                 *\n                 * ```js\n                 * import { version } from 'node:process';\n                 *\n                 * console.log(`Version: ${version}`);\n                 * // Version: v14.8.0\n                 * ```\n                 *\n                 * To get the version string without the prepended _v_, use`process.versions.node`.\n                 * @since v0.1.3\n                 */\n                readonly version: string;\n                /**\n                 * The `process.versions` property returns an object listing the version strings of\n                 * Node.js and its dependencies. `process.versions.modules` indicates the current\n                 * ABI version, which is increased whenever a C++ API changes. Node.js will refuse\n                 * to load modules that were compiled against a different module ABI version.\n                 *\n                 * ```js\n                 * import { versions } from 'node:process';\n                 *\n                 * console.log(versions);\n                 * ```\n                 *\n                 * Will generate an object similar to:\n                 *\n                 * ```console\n                 * { node: '20.2.0',\n                 *   acorn: '8.8.2',\n                 *   ada: '2.4.0',\n                 *   ares: '1.19.0',\n                 *   base64: '0.5.0',\n                 *   brotli: '1.0.9',\n                 *   cjs_module_lexer: '1.2.2',\n                 *   cldr: '43.0',\n                 *   icu: '73.1',\n                 *   llhttp: '8.1.0',\n                 *   modules: '115',\n                 *   napi: '8',\n                 *   nghttp2: '1.52.0',\n                 *   nghttp3: '0.7.0',\n                 *   ngtcp2: '0.8.1',\n                 *   openssl: '3.0.8+quic',\n                 *   simdutf: '3.2.9',\n                 *   tz: '2023c',\n                 *   undici: '5.22.0',\n                 *   unicode: '15.0',\n                 *   uv: '1.44.2',\n                 *   uvwasi: '0.0.16',\n                 *   v8: '11.3.244.8-node.9',\n                 *   zlib: '1.2.13' }\n                 * ```\n                 * @since v0.2.0\n                 */\n                readonly versions: ProcessVersions;\n                /**\n                 * The `process.config` property returns a frozen `Object` containing the\n                 * JavaScript representation of the configure options used to compile the current\n                 * Node.js executable. This is the same as the `config.gypi` file that was produced\n                 * when running the `./configure` script.\n                 *\n                 * An example of the possible output looks like:\n                 *\n                 * ```js\n                 * {\n                 *   target_defaults:\n                 *    { cflags: [],\n                 *      default_configuration: 'Release',\n                 *      defines: [],\n                 *      include_dirs: [],\n                 *      libraries: [] },\n                 *   variables:\n                 *    {\n                 *      host_arch: 'x64',\n                 *      napi_build_version: 5,\n                 *      node_install_npm: 'true',\n                 *      node_prefix: '',\n                 *      node_shared_cares: 'false',\n                 *      node_shared_http_parser: 'false',\n                 *      node_shared_libuv: 'false',\n                 *      node_shared_zlib: 'false',\n                 *      node_use_openssl: 'true',\n                 *      node_shared_openssl: 'false',\n                 *      strict_aliasing: 'true',\n                 *      target_arch: 'x64',\n                 *      v8_use_snapshot: 1\n                 *    }\n                 * }\n                 * ```\n                 * @since v0.7.7\n                 */\n                readonly config: ProcessConfig;\n                /**\n                 * The `process.kill()` method sends the `signal` to the process identified by`pid`.\n                 *\n                 * Signal names are strings such as `'SIGINT'` or `'SIGHUP'`. See `Signal Events` and [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for more information.\n                 *\n                 * This method will throw an error if the target `pid` does not exist. As a special\n                 * case, a signal of `0` can be used to test for the existence of a process.\n                 * Windows platforms will throw an error if the `pid` is used to kill a process\n                 * group.\n                 *\n                 * Even though the name of this function is `process.kill()`, it is really just a\n                 * signal sender, like the `kill` system call. The signal sent may do something\n                 * other than kill the target process.\n                 *\n                 * ```js\n                 * import process, { kill } from 'node:process';\n                 *\n                 * process.on('SIGHUP', () => {\n                 *   console.log('Got SIGHUP signal.');\n                 * });\n                 *\n                 * setTimeout(() => {\n                 *   console.log('Exiting.');\n                 *   process.exit(0);\n                 * }, 100);\n                 *\n                 * kill(process.pid, 'SIGHUP');\n                 * ```\n                 *\n                 * When `SIGUSR1` is received by a Node.js process, Node.js will start the\n                 * debugger. See `Signal Events`.\n                 * @since v0.0.6\n                 * @param pid A process ID\n                 * @param [signal='SIGTERM'] The signal to send, either as a string or number.\n                 */\n                kill(pid: number, signal?: string | number): true;\n                /**\n                 * Loads the environment configuration from a `.env` file into `process.env`. If\n                 * the file is not found, error will be thrown.\n                 *\n                 * To load a specific .env file by specifying its path, use the following code:\n                 *\n                 * ```js\n                 * import { loadEnvFile } from 'node:process';\n                 *\n                 * loadEnvFile('./development.env')\n                 * ```\n                 * @since v20.12.0\n                 * @param path The path to the .env file\n                 */\n                loadEnvFile(path?: string | URL | Buffer): void;\n                /**\n                 * The `process.pid` property returns the PID of the process.\n                 *\n                 * ```js\n                 * import { pid } from 'node:process';\n                 *\n                 * console.log(`This process is pid ${pid}`);\n                 * ```\n                 * @since v0.1.15\n                 */\n                readonly pid: number;\n                /**\n                 * The `process.ppid` property returns the PID of the parent of the\n                 * current process.\n                 *\n                 * ```js\n                 * import { ppid } from 'node:process';\n                 *\n                 * console.log(`The parent process is pid ${ppid}`);\n                 * ```\n                 * @since v9.2.0, v8.10.0, v6.13.0\n                 */\n                readonly ppid: number;\n                /**\n                 * The `process.title` property returns the current process title (i.e. returns\n                 * the current value of `ps`). Assigning a new value to `process.title` modifies\n                 * the current value of `ps`.\n                 *\n                 * When a new value is assigned, different platforms will impose different maximum\n                 * length restrictions on the title. Usually such restrictions are quite limited.\n                 * For instance, on Linux and macOS, `process.title` is limited to the size of the\n                 * binary name plus the length of the command-line arguments because setting the `process.title` overwrites the `argv` memory of the process. Node.js v0.8\n                 * allowed for longer process title strings by also overwriting the `environ` memory but that was potentially insecure and confusing in some (rather obscure)\n                 * cases.\n                 *\n                 * Assigning a value to `process.title` might not result in an accurate label\n                 * within process manager applications such as macOS Activity Monitor or Windows\n                 * Services Manager.\n                 * @since v0.1.104\n                 */\n                title: string;\n                /**\n                 * The operating system CPU architecture for which the Node.js binary was compiled.\n                 * Possible values are: `'arm'`, `'arm64'`, `'ia32'`, `'loong64'`, `'mips'`, `'mipsel'`, `'ppc'`, `'ppc64'`, `'riscv64'`, `'s390'`, `'s390x'`, and `'x64'`.\n                 *\n                 * ```js\n                 * import { arch } from 'node:process';\n                 *\n                 * console.log(`This processor architecture is ${arch}`);\n                 * ```\n                 * @since v0.5.0\n                 */\n                readonly arch: Architecture;\n                /**\n                 * The `process.platform` property returns a string identifying the operating\n                 * system platform for which the Node.js binary was compiled.\n                 *\n                 * Currently possible values are:\n                 *\n                 * * `'aix'`\n                 * * `'darwin'`\n                 * * `'freebsd'`\n                 * * `'linux'`\n                 * * `'openbsd'`\n                 * * `'sunos'`\n                 * * `'win32'`\n                 *\n                 * ```js\n                 * import { platform } from 'node:process';\n                 *\n                 * console.log(`This platform is ${platform}`);\n                 * ```\n                 *\n                 * The value `'android'` may also be returned if the Node.js is built on the\n                 * Android operating system. However, Android support in Node.js [is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\n                 * @since v0.1.16\n                 */\n                readonly platform: Platform;\n                /**\n                 * The `process.mainModule` property provides an alternative way of retrieving `require.main`. The difference is that if the main module changes at\n                 * runtime, `require.main` may still refer to the original main module in\n                 * modules that were required before the change occurred. Generally, it's\n                 * safe to assume that the two refer to the same module.\n                 *\n                 * As with `require.main`, `process.mainModule` will be `undefined` if there\n                 * is no entry script.\n                 * @since v0.1.17\n                 * @deprecated Since v14.0.0 - Use `main` instead.\n                 */\n                mainModule?: Module | undefined;\n                memoryUsage: MemoryUsageFn;\n                /**\n                 * Gets the amount of memory available to the process (in bytes) based on\n                 * limits imposed by the OS. If there is no such constraint, or the constraint\n                 * is unknown, `0` is returned.\n                 *\n                 * See [`uv_get_constrained_memory`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_get_constrained_memory) for more\n                 * information.\n                 * @since v19.6.0, v18.15.0\n                 * @experimental\n                 */\n                constrainedMemory(): number;\n                /**\n                 * Gets the amount of free memory that is still available to the process (in bytes).\n                 * See [`uv_get_available_memory`](https://nodejs.org/docs/latest-v22.x/api/process.html#processavailablememory) for more information.\n                 * @experimental\n                 * @since v20.13.0\n                 */\n                availableMemory(): number;\n                /**\n                 * The `process.cpuUsage()` method returns the user and system CPU time usage of\n                 * the current process, in an object with properties `user` and `system`, whose\n                 * values are microsecond values (millionth of a second). These values measure time\n                 * spent in user and system code respectively, and may end up being greater than\n                 * actual elapsed time if multiple CPU cores are performing work for this process.\n                 *\n                 * The result of a previous call to `process.cpuUsage()` can be passed as the\n                 * argument to the function, to get a diff reading.\n                 *\n                 * ```js\n                 * import { cpuUsage } from 'node:process';\n                 *\n                 * const startUsage = cpuUsage();\n                 * // { user: 38579, system: 6986 }\n                 *\n                 * // spin the CPU for 500 milliseconds\n                 * const now = Date.now();\n                 * while (Date.now() - now < 500);\n                 *\n                 * console.log(cpuUsage(startUsage));\n                 * // { user: 514883, system: 11226 }\n                 * ```\n                 * @since v6.1.0\n                 * @param previousValue A previous return value from calling `process.cpuUsage()`\n                 */\n                cpuUsage(previousValue?: CpuUsage): CpuUsage;\n                /**\n                 * `process.nextTick()` adds `callback` to the \"next tick queue\". This queue is\n                 * fully drained after the current operation on the JavaScript stack runs to\n                 * completion and before the event loop is allowed to continue. It's possible to\n                 * create an infinite loop if one were to recursively call `process.nextTick()`.\n                 * See the [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick) guide for more background.\n                 *\n                 * ```js\n                 * import { nextTick } from 'node:process';\n                 *\n                 * console.log('start');\n                 * nextTick(() => {\n                 *   console.log('nextTick callback');\n                 * });\n                 * console.log('scheduled');\n                 * // Output:\n                 * // start\n                 * // scheduled\n                 * // nextTick callback\n                 * ```\n                 *\n                 * This is important when developing APIs in order to give users the opportunity\n                 * to assign event handlers _after_ an object has been constructed but before any\n                 * I/O has occurred:\n                 *\n                 * ```js\n                 * import { nextTick } from 'node:process';\n                 *\n                 * function MyThing(options) {\n                 *   this.setupOptions(options);\n                 *\n                 *   nextTick(() => {\n                 *     this.startDoingStuff();\n                 *   });\n                 * }\n                 *\n                 * const thing = new MyThing();\n                 * thing.getReadyForStuff();\n                 *\n                 * // thing.startDoingStuff() gets called now, not before.\n                 * ```\n                 *\n                 * It is very important for APIs to be either 100% synchronous or 100%\n                 * asynchronous. Consider this example:\n                 *\n                 * ```js\n                 * // WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\n                 * function maybeSync(arg, cb) {\n                 *   if (arg) {\n                 *     cb();\n                 *     return;\n                 *   }\n                 *\n                 *   fs.stat('file', cb);\n                 * }\n                 * ```\n                 *\n                 * This API is hazardous because in the following case:\n                 *\n                 * ```js\n                 * const maybeTrue = Math.random() > 0.5;\n                 *\n                 * maybeSync(maybeTrue, () => {\n                 *   foo();\n                 * });\n                 *\n                 * bar();\n                 * ```\n                 *\n                 * It is not clear whether `foo()` or `bar()` will be called first.\n                 *\n                 * The following approach is much better:\n                 *\n                 * ```js\n                 * import { nextTick } from 'node:process';\n                 *\n                 * function definitelyAsync(arg, cb) {\n                 *   if (arg) {\n                 *     nextTick(cb);\n                 *     return;\n                 *   }\n                 *\n                 *   fs.stat('file', cb);\n                 * }\n                 * ```\n                 * @since v0.1.26\n                 * @param args Additional arguments to pass when invoking the `callback`\n                 */\n                nextTick(callback: Function, ...args: any[]): void;\n                /**\n                 * This API is available through the [--permission](https://nodejs.org/api/cli.html#--permission) flag.\n                 *\n                 * `process.permission` is an object whose methods are used to manage permissions for the current process.\n                 * Additional documentation is available in the [Permission Model](https://nodejs.org/api/permissions.html#permission-model).\n                 * @since v20.0.0\n                 */\n                permission: ProcessPermission;\n                /**\n                 * The `process.release` property returns an `Object` containing metadata related\n                 * to the current release, including URLs for the source tarball and headers-only\n                 * tarball.\n                 *\n                 * `process.release` contains the following properties:\n                 *\n                 * ```js\n                 * {\n                 *   name: 'node',\n                 *   lts: 'Hydrogen',\n                 *   sourceUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0.tar.gz',\n                 *   headersUrl: 'https://nodejs.org/download/release/v18.12.0/node-v18.12.0-headers.tar.gz',\n                 *   libUrl: 'https://nodejs.org/download/release/v18.12.0/win-x64/node.lib'\n                 * }\n                 * ```\n                 *\n                 * In custom builds from non-release versions of the source tree, only the `name` property may be present. The additional properties should not be\n                 * relied upon to exist.\n                 * @since v3.0.0\n                 */\n                readonly release: ProcessRelease;\n                readonly features: ProcessFeatures;\n                /**\n                 * `process.umask()` returns the Node.js process's file mode creation mask. Child\n                 * processes inherit the mask from the parent process.\n                 * @since v0.1.19\n                 * @deprecated Calling `process.umask()` with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential\n                 * security vulnerability. There is no safe, cross-platform alternative API.\n                 */\n                umask(): number;\n                /**\n                 * Can only be set if not in worker thread.\n                 */\n                umask(mask: string | number): number;\n                /**\n                 * The `process.uptime()` method returns the number of seconds the current Node.js\n                 * process has been running.\n                 *\n                 * The return value includes fractions of a second. Use `Math.floor()` to get whole\n                 * seconds.\n                 * @since v0.5.0\n                 */\n                uptime(): number;\n                hrtime: HRTime;\n                /**\n                 * If the Node.js process was spawned with an IPC channel, the process.channel property is a reference to the IPC channel.\n                 * If no IPC channel exists, this property is undefined.\n                 * @since v7.1.0\n                 */\n                channel?: {\n                    /**\n                     * This method makes the IPC channel keep the event loop of the process running if .unref() has been called before.\n                     * @since v7.1.0\n                     */\n                    ref(): void;\n                    /**\n                     * This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.\n                     * @since v7.1.0\n                     */\n                    unref(): void;\n                };\n                /**\n                 * If Node.js is spawned with an IPC channel, the `process.send()` method can be\n                 * used to send messages to the parent process. Messages will be received as a `'message'` event on the parent's `ChildProcess` object.\n                 *\n                 * If Node.js was not spawned with an IPC channel, `process.send` will be `undefined`.\n                 *\n                 * The message goes through serialization and parsing. The resulting message might\n                 * not be the same as what is originally sent.\n                 * @since v0.5.9\n                 * @param options used to parameterize the sending of certain types of handles. `options` supports the following properties:\n                 */\n                send?(\n                    message: any,\n                    sendHandle?: any,\n                    options?: {\n                        keepOpen?: boolean | undefined;\n                    },\n                    callback?: (error: Error | null) => void,\n                ): boolean;\n                /**\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.disconnect()` method will close the\n                 * IPC channel to the parent process, allowing the child process to exit gracefully\n                 * once there are no other connections keeping it alive.\n                 *\n                 * The effect of calling `process.disconnect()` is the same as calling `ChildProcess.disconnect()` from the parent process.\n                 *\n                 * If the Node.js process was not spawned with an IPC channel, `process.disconnect()` will be `undefined`.\n                 * @since v0.7.2\n                 */\n                disconnect(): void;\n                /**\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.connected` property will return `true` so long as the IPC\n                 * channel is connected and will return `false` after `process.disconnect()` is called.\n                 *\n                 * Once `process.connected` is `false`, it is no longer possible to send messages\n                 * over the IPC channel using `process.send()`.\n                 * @since v0.7.2\n                 */\n                connected: boolean;\n                /**\n                 * The `process.allowedNodeEnvironmentFlags` property is a special,\n                 * read-only `Set` of flags allowable within the `NODE_OPTIONS` environment variable.\n                 *\n                 * `process.allowedNodeEnvironmentFlags` extends `Set`, but overrides `Set.prototype.has` to recognize several different possible flag\n                 * representations. `process.allowedNodeEnvironmentFlags.has()` will\n                 * return `true` in the following cases:\n                 *\n                 * * Flags may omit leading single (`-`) or double (`--`) dashes; e.g., `inspect-brk` for `--inspect-brk`, or `r` for `-r`.\n                 * * Flags passed through to V8 (as listed in `--v8-options`) may replace\n                 * one or more _non-leading_ dashes for an underscore, or vice-versa;\n                 * e.g., `--perf_basic_prof`, `--perf-basic-prof`, `--perf_basic-prof`,\n                 * etc.\n                 * * Flags may contain one or more equals (`=`) characters; all\n                 * characters after and including the first equals will be ignored;\n                 * e.g., `--stack-trace-limit=100`.\n                 * * Flags _must_ be allowable within `NODE_OPTIONS`.\n                 *\n                 * When iterating over `process.allowedNodeEnvironmentFlags`, flags will\n                 * appear only _once_; each will begin with one or more dashes. Flags\n                 * passed through to V8 will contain underscores instead of non-leading\n                 * dashes:\n                 *\n                 * ```js\n                 * import { allowedNodeEnvironmentFlags } from 'node:process';\n                 *\n                 * allowedNodeEnvironmentFlags.forEach((flag) => {\n                 *   // -r\n                 *   // --inspect-brk\n                 *   // --abort_on_uncaught_exception\n                 *   // ...\n                 * });\n                 * ```\n                 *\n                 * The methods `add()`, `clear()`, and `delete()` of`process.allowedNodeEnvironmentFlags` do nothing, and will fail\n                 * silently.\n                 *\n                 * If Node.js was compiled _without_ `NODE_OPTIONS` support (shown in {@link config}), `process.allowedNodeEnvironmentFlags` will\n                 * contain what _would have_ been allowable.\n                 * @since v10.10.0\n                 */\n                allowedNodeEnvironmentFlags: ReadonlySet<string>;\n                /**\n                 * `process.report` is an object whose methods are used to generate diagnostic reports for the current process.\n                 * Additional documentation is available in the [report documentation](https://nodejs.org/docs/latest-v22.x/api/report.html).\n                 * @since v11.8.0\n                 */\n                report: ProcessReport;\n                /**\n                 * ```js\n                 * import { resourceUsage } from 'node:process';\n                 *\n                 * console.log(resourceUsage());\n                 * /*\n                 *   Will output:\n                 *   {\n                 *     userCPUTime: 82872,\n                 *     systemCPUTime: 4143,\n                 *     maxRSS: 33164,\n                 *     sharedMemorySize: 0,\n                 *     unsharedDataSize: 0,\n                 *     unsharedStackSize: 0,\n                 *     minorPageFault: 2469,\n                 *     majorPageFault: 0,\n                 *     swappedOut: 0,\n                 *     fsRead: 0,\n                 *     fsWrite: 8,\n                 *     ipcSent: 0,\n                 *     ipcReceived: 0,\n                 *     signalsCount: 0,\n                 *     voluntaryContextSwitches: 79,\n                 *     involuntaryContextSwitches: 1\n                 *   }\n                 *\n                 * ```\n                 * @since v12.6.0\n                 * @return the resource usage for the current process. All of these values come from the `uv_getrusage` call which returns a [`uv_rusage_t` struct][uv_rusage_t].\n                 */\n                resourceUsage(): ResourceUsage;\n                /**\n                 * The initial value of `process.throwDeprecation` indicates whether the `--throw-deprecation` flag is set on the current Node.js process. `process.throwDeprecation`\n                 * is mutable, so whether or not deprecation warnings result in errors may be altered at runtime. See the documentation for the 'warning' event and the emitWarning()\n                 * method for more information.\n                 *\n                 * ```bash\n                 * $ node --throw-deprecation -p \"process.throwDeprecation\"\n                 * true\n                 * $ node -p \"process.throwDeprecation\"\n                 * undefined\n                 * $ node\n                 * > process.emitWarning('test', 'DeprecationWarning');\n                 * undefined\n                 * > (node:26598) DeprecationWarning: test\n                 * > process.throwDeprecation = true;\n                 * true\n                 * > process.emitWarning('test', 'DeprecationWarning');\n                 * Thrown:\n                 * [DeprecationWarning: test] { name: 'DeprecationWarning' }\n                 * ```\n                 * @since v0.9.12\n                 */\n                throwDeprecation: boolean;\n                /**\n                 * The `process.traceDeprecation` property indicates whether the `--trace-deprecation` flag is set on the current Node.js process. See the\n                 * documentation for the `'warning' event` and the `emitWarning() method` for more information about this\n                 * flag's behavior.\n                 * @since v0.8.0\n                 */\n                traceDeprecation: boolean;\n                /**\n                 * An object is \"refable\" if it implements the Node.js \"Refable protocol\".\n                 * Specifically, this means that the object implements the `Symbol.for('nodejs.ref')`\n                 * and `Symbol.for('nodejs.unref')` methods. \"Ref'd\" objects will keep the Node.js\n                 * event loop alive, while \"unref'd\" objects will not. Historically, this was\n                 * implemented by using `ref()` and `unref()` methods directly on the objects.\n                 * This pattern, however, is being deprecated in favor of the \"Refable protocol\"\n                 * in order to better support Web Platform API types whose APIs cannot be modified\n                 * to add `ref()` and `unref()` methods but still need to support that behavior.\n                 * @since v22.14.0\n                 * @experimental\n                 * @param maybeRefable An object that may be \"refable\".\n                 */\n                ref(maybeRefable: any): void;\n                /**\n                 * An object is \"unrefable\" if it implements the Node.js \"Refable protocol\".\n                 * Specifically, this means that the object implements the `Symbol.for('nodejs.ref')`\n                 * and `Symbol.for('nodejs.unref')` methods. \"Ref'd\" objects will keep the Node.js\n                 * event loop alive, while \"unref'd\" objects will not. Historically, this was\n                 * implemented by using `ref()` and `unref()` methods directly on the objects.\n                 * This pattern, however, is being deprecated in favor of the \"Refable protocol\"\n                 * in order to better support Web Platform API types whose APIs cannot be modified\n                 * to add `ref()` and `unref()` methods but still need to support that behavior.\n                 * @since v22.14.0\n                 * @experimental\n                 * @param maybeRefable An object that may be \"unref'd\".\n                 */\n                unref(maybeRefable: any): void;\n                /**\n                 * Replaces the current process with a new process.\n                 *\n                 * This is achieved by using the `execve` POSIX function and therefore no memory or other\n                 * resources from the current process are preserved, except for the standard input,\n                 * standard output and standard error file descriptor.\n                 *\n                 * All other resources are discarded by the system when the processes are swapped, without triggering\n                 * any exit or close events and without running any cleanup handler.\n                 *\n                 * This function will never return, unless an error occurred.\n                 *\n                 * This function is not available on Windows or IBM i.\n                 * @since v22.15.0\n                 * @experimental\n                 * @param file The name or path of the executable file to run.\n                 * @param args List of string arguments. No argument can contain a null-byte (`\\u0000`).\n                 * @param env Environment key-value pairs.\n                 * No key or value can contain a null-byte (`\\u0000`).\n                 * **Default:** `process.env`.\n                 */\n                execve?(file: string, args?: readonly string[], env?: ProcessEnv): never;\n                /* EventEmitter */\n                addListener(event: \"beforeExit\", listener: BeforeExitListener): this;\n                addListener(event: \"disconnect\", listener: DisconnectListener): this;\n                addListener(event: \"exit\", listener: ExitListener): this;\n                addListener(event: \"rejectionHandled\", listener: RejectionHandledListener): this;\n                addListener(event: \"uncaughtException\", listener: UncaughtExceptionListener): this;\n                addListener(event: \"uncaughtExceptionMonitor\", listener: UncaughtExceptionListener): this;\n                addListener(event: \"unhandledRejection\", listener: UnhandledRejectionListener): this;\n                addListener(event: \"warning\", listener: WarningListener): this;\n                addListener(event: \"message\", listener: MessageListener): this;\n                addListener(event: Signals, listener: SignalsListener): this;\n                addListener(event: \"multipleResolves\", listener: MultipleResolveListener): this;\n                addListener(event: \"worker\", listener: WorkerListener): this;\n                emit(event: \"beforeExit\", code: number): boolean;\n                emit(event: \"disconnect\"): boolean;\n                emit(event: \"exit\", code: number): boolean;\n                emit(event: \"rejectionHandled\", promise: Promise<unknown>): boolean;\n                emit(event: \"uncaughtException\", error: Error): boolean;\n                emit(event: \"uncaughtExceptionMonitor\", error: Error): boolean;\n                emit(event: \"unhandledRejection\", reason: unknown, promise: Promise<unknown>): boolean;\n                emit(event: \"warning\", warning: Error): boolean;\n                emit(event: \"message\", message: unknown, sendHandle: unknown): this;\n                emit(event: Signals, signal?: Signals): boolean;\n                emit(\n                    event: \"multipleResolves\",\n                    type: MultipleResolveType,\n                    promise: Promise<unknown>,\n                    value: unknown,\n                ): this;\n                emit(event: \"worker\", listener: WorkerListener): this;\n                on(event: \"beforeExit\", listener: BeforeExitListener): this;\n                on(event: \"disconnect\", listener: DisconnectListener): this;\n                on(event: \"exit\", listener: ExitListener): this;\n                on(event: \"rejectionHandled\", listener: RejectionHandledListener): this;\n                on(event: \"uncaughtException\", listener: UncaughtExceptionListener): this;\n                on(event: \"uncaughtExceptionMonitor\", listener: UncaughtExceptionListener): this;\n                on(event: \"unhandledRejection\", listener: UnhandledRejectionListener): this;\n                on(event: \"warning\", listener: WarningListener): this;\n                on(event: \"message\", listener: MessageListener): this;\n                on(event: Signals, listener: SignalsListener): this;\n                on(event: \"multipleResolves\", listener: MultipleResolveListener): this;\n                on(event: \"worker\", listener: WorkerListener): this;\n                on(event: string | symbol, listener: (...args: any[]) => void): this;\n                once(event: \"beforeExit\", listener: BeforeExitListener): this;\n                once(event: \"disconnect\", listener: DisconnectListener): this;\n                once(event: \"exit\", listener: ExitListener): this;\n                once(event: \"rejectionHandled\", listener: RejectionHandledListener): this;\n                once(event: \"uncaughtException\", listener: UncaughtExceptionListener): this;\n                once(event: \"uncaughtExceptionMonitor\", listener: UncaughtExceptionListener): this;\n                once(event: \"unhandledRejection\", listener: UnhandledRejectionListener): this;\n                once(event: \"warning\", listener: WarningListener): this;\n                once(event: \"message\", listener: MessageListener): this;\n                once(event: Signals, listener: SignalsListener): this;\n                once(event: \"multipleResolves\", listener: MultipleResolveListener): this;\n                once(event: \"worker\", listener: WorkerListener): this;\n                once(event: string | symbol, listener: (...args: any[]) => void): this;\n                prependListener(event: \"beforeExit\", listener: BeforeExitListener): this;\n                prependListener(event: \"disconnect\", listener: DisconnectListener): this;\n                prependListener(event: \"exit\", listener: ExitListener): this;\n                prependListener(event: \"rejectionHandled\", listener: RejectionHandledListener): this;\n                prependListener(event: \"uncaughtException\", listener: UncaughtExceptionListener): this;\n                prependListener(event: \"uncaughtExceptionMonitor\", listener: UncaughtExceptionListener): this;\n                prependListener(event: \"unhandledRejection\", listener: UnhandledRejectionListener): this;\n                prependListener(event: \"warning\", listener: WarningListener): this;\n                prependListener(event: \"message\", listener: MessageListener): this;\n                prependListener(event: Signals, listener: SignalsListener): this;\n                prependListener(event: \"multipleResolves\", listener: MultipleResolveListener): this;\n                prependListener(event: \"worker\", listener: WorkerListener): this;\n                prependOnceListener(event: \"beforeExit\", listener: BeforeExitListener): this;\n                prependOnceListener(event: \"disconnect\", listener: DisconnectListener): this;\n                prependOnceListener(event: \"exit\", listener: ExitListener): this;\n                prependOnceListener(event: \"rejectionHandled\", listener: RejectionHandledListener): this;\n                prependOnceListener(event: \"uncaughtException\", listener: UncaughtExceptionListener): this;\n                prependOnceListener(event: \"uncaughtExceptionMonitor\", listener: UncaughtExceptionListener): this;\n                prependOnceListener(event: \"unhandledRejection\", listener: UnhandledRejectionListener): this;\n                prependOnceListener(event: \"warning\", listener: WarningListener): this;\n                prependOnceListener(event: \"message\", listener: MessageListener): this;\n                prependOnceListener(event: Signals, listener: SignalsListener): this;\n                prependOnceListener(event: \"multipleResolves\", listener: MultipleResolveListener): this;\n                prependOnceListener(event: \"worker\", listener: WorkerListener): this;\n                listeners(event: \"beforeExit\"): BeforeExitListener[];\n                listeners(event: \"disconnect\"): DisconnectListener[];\n                listeners(event: \"exit\"): ExitListener[];\n                listeners(event: \"rejectionHandled\"): RejectionHandledListener[];\n                listeners(event: \"uncaughtException\"): UncaughtExceptionListener[];\n                listeners(event: \"uncaughtExceptionMonitor\"): UncaughtExceptionListener[];\n                listeners(event: \"unhandledRejection\"): UnhandledRejectionListener[];\n                listeners(event: \"warning\"): WarningListener[];\n                listeners(event: \"message\"): MessageListener[];\n                listeners(event: Signals): SignalsListener[];\n                listeners(event: \"multipleResolves\"): MultipleResolveListener[];\n                listeners(event: \"worker\"): WorkerListener[];\n            }\n        }\n    }\n    export = process;\n}\ndeclare module \"node:process\" {\n    import process = require(\"process\");\n    export = process;\n}\n"
        }
    ]
}