{
    "sourceFile": "node_modules/@types/node/module.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @since v0.3.7\n */\ndeclare module \"module\" {\n    import { URL } from \"node:url\";\n    class Module {\n        constructor(id: string, parent?: Module);\n    }\n    interface Module extends NodeJS.Module {}\n    namespace Module {\n        export { Module };\n    }\n    namespace Module {\n        /**\n         * A list of the names of all modules provided by Node.js. Can be used to verify\n         * if a module is maintained by a third party or not.\n         *\n         * Note: the list doesn't contain prefix-only modules like `node:test`.\n         * @since v9.3.0, v8.10.0, v6.13.0\n         */\n        const builtinModules: readonly string[];\n        /**\n         * @since v12.2.0\n         * @param path Filename to be used to construct the require\n         * function. Must be a file URL object, file URL string, or absolute path\n         * string.\n         */\n        function createRequire(path: string | URL): NodeJS.Require;\n        namespace constants {\n            /**\n             * The following constants are returned as the `status` field in the object returned by\n             * {@link enableCompileCache} to indicate the result of the attempt to enable the\n             * [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache).\n             * @since v22.8.0\n             */\n            namespace compileCacheStatus {\n                /**\n                 * Node.js has enabled the compile cache successfully. The directory used to store the\n                 * compile cache will be returned in the `directory` field in the\n                 * returned object.\n                 */\n                const ENABLED: number;\n                /**\n                 * The compile cache has already been enabled before, either by a previous call to\n                 * {@link enableCompileCache}, or by the `NODE_COMPILE_CACHE=dir`\n                 * environment variable. The directory used to store the\n                 * compile cache will be returned in the `directory` field in the\n                 * returned object.\n                 */\n                const ALREADY_ENABLED: number;\n                /**\n                 * Node.js fails to enable the compile cache. This can be caused by the lack of\n                 * permission to use the specified directory, or various kinds of file system errors.\n                 * The detail of the failure will be returned in the `message` field in the\n                 * returned object.\n                 */\n                const FAILED: number;\n                /**\n                 * Node.js cannot enable the compile cache because the environment variable\n                 * `NODE_DISABLE_COMPILE_CACHE=1` has been set.\n                 */\n                const DISABLED: number;\n            }\n        }\n        interface EnableCompileCacheResult {\n            /**\n             * One of the {@link constants.compileCacheStatus}\n             */\n            status: number;\n            /**\n             * If Node.js cannot enable the compile cache, this contains\n             * the error message. Only set if `status` is `module.constants.compileCacheStatus.FAILED`.\n             */\n            message?: string;\n            /**\n             * If the compile cache is enabled, this contains the directory\n             * where the compile cache is stored. Only set if  `status` is\n             * `module.constants.compileCacheStatus.ENABLED` or\n             * `module.constants.compileCacheStatus.ALREADY_ENABLED`.\n             */\n            directory?: string;\n        }\n        /**\n         * Enable [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache)\n         * in the current Node.js instance.\n         *\n         * If `cacheDir` is not specified, Node.js will either use the directory specified by the\n         * `NODE_COMPILE_CACHE=dir` environment variable if it's set, or use\n         * `path.join(os.tmpdir(), 'node-compile-cache')` otherwise. For general use cases, it's\n         * recommended to call `module.enableCompileCache()` without specifying the `cacheDir`,\n         * so that the directory can be overridden by the `NODE_COMPILE_CACHE` environment\n         * variable when necessary.\n         *\n         * Since compile cache is supposed to be a quiet optimization that is not required for the\n         * application to be functional, this method is designed to not throw any exception when the\n         * compile cache cannot be enabled. Instead, it will return an object containing an error\n         * message in the `message` field to aid debugging.\n         * If compile cache is enabled successfully, the `directory` field in the returned object\n         * contains the path to the directory where the compile cache is stored. The `status`\n         * field in the returned object would be one of the `module.constants.compileCacheStatus`\n         * values to indicate the result of the attempt to enable the\n         * [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache).\n         *\n         * This method only affects the current Node.js instance. To enable it in child worker threads,\n         * either call this method in child worker threads too, or set the\n         * `process.env.NODE_COMPILE_CACHE` value to compile cache directory so the behavior can\n         * be inherited into the child workers. The directory can be obtained either from the\n         * `directory` field returned by this method, or with {@link getCompileCacheDir}.\n         * @since v22.8.0\n         * @param cacheDir Optional path to specify the directory where the compile cache\n         * will be stored/retrieved.\n         */\n        function enableCompileCache(cacheDir?: string): EnableCompileCacheResult;\n        /**\n         * Flush the [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache)\n         * accumulated from modules already loaded\n         * in the current Node.js instance to disk. This returns after all the flushing\n         * file system operations come to an end, no matter they succeed or not. If there\n         * are any errors, this will fail silently, since compile cache misses should not\n         * interfere with the actual operation of the application.\n         * @since v22.10.0\n         */\n        function flushCompileCache(): void;\n        /**\n         * @since v22.8.0\n         * @return Path to the [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache)\n         * directory if it is enabled, or `undefined` otherwise.\n         */\n        function getCompileCacheDir(): string | undefined;\n        /**\n         * ```text\n         * /path/to/project\n         *   ├ packages/\n         *     ├ bar/\n         *       ├ bar.js\n         *       └ package.json // name = '@foo/bar'\n         *     └ qux/\n         *       ├ node_modules/\n         *         └ some-package/\n         *           └ package.json // name = 'some-package'\n         *       ├ qux.js\n         *       └ package.json // name = '@foo/qux'\n         *   ├ main.js\n         *   └ package.json // name = '@foo'\n         * ```\n         * ```js\n         * // /path/to/project/packages/bar/bar.js\n         * import { findPackageJSON } from 'node:module';\n         *\n         * findPackageJSON('..', import.meta.url);\n         * // '/path/to/project/package.json'\n         * // Same result when passing an absolute specifier instead:\n         * findPackageJSON(new URL('../', import.meta.url));\n         * findPackageJSON(import.meta.resolve('../'));\n         *\n         * findPackageJSON('some-package', import.meta.url);\n         * // '/path/to/project/packages/bar/node_modules/some-package/package.json'\n         * // When passing an absolute specifier, you might get a different result if the\n         * // resolved module is inside a subfolder that has nested `package.json`.\n         * findPackageJSON(import.meta.resolve('some-package'));\n         * // '/path/to/project/packages/bar/node_modules/some-package/some-subfolder/package.json'\n         *\n         * findPackageJSON('@foo/qux', import.meta.url);\n         * // '/path/to/project/packages/qux/package.json'\n         * ```\n         * @since v22.14.0\n         * @param specifier The specifier for the module whose `package.json` to\n         * retrieve. When passing a _bare specifier_, the `package.json` at the root of\n         * the package is returned. When passing a _relative specifier_ or an _absolute specifier_,\n         * the closest parent `package.json` is returned.\n         * @param base The absolute location (`file:` URL string or FS path) of the\n         * containing  module. For CJS, use `__filename` (not `__dirname`!); for ESM, use\n         * `import.meta.url`. You do not need to pass it if `specifier` is an _absolute specifier_.\n         * @returns A path if the `package.json` is found. When `startLocation`\n         * is a package, the package's root `package.json`; when a relative or unresolved, the closest\n         * `package.json` to the `startLocation`.\n         */\n        function findPackageJSON(specifier: string | URL, base?: string | URL): string | undefined;\n        /**\n         * @since v18.6.0, v16.17.0\n         */\n        function isBuiltin(moduleName: string): boolean;\n        interface RegisterOptions<Data> {\n            /**\n             * If you want to resolve `specifier` relative to a\n             * base URL, such as `import.meta.url`, you can pass that URL here. This\n             * property is ignored if the `parentURL` is supplied as the second argument.\n             * @default 'data:'\n             */\n            parentURL?: string | URL | undefined;\n            /**\n             * Any arbitrary, cloneable JavaScript value to pass into the\n             * {@link initialize} hook.\n             */\n            data?: Data | undefined;\n            /**\n             * [Transferable objects](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html#portpostmessagevalue-transferlist)\n             * to be passed into the `initialize` hook.\n             */\n            transferList?: any[] | undefined;\n        }\n        /* eslint-disable @definitelytyped/no-unnecessary-generics */\n        /**\n         * Register a module that exports hooks that customize Node.js module\n         * resolution and loading behavior. See\n         * [Customization hooks](https://nodejs.org/docs/latest-v22.x/api/module.html#customization-hooks).\n         *\n         * This feature requires `--allow-worker` if used with the\n         * [Permission Model](https://nodejs.org/docs/latest-v22.x/api/permissions.html#permission-model).\n         * @since v20.6.0, v18.19.0\n         * @param specifier Customization hooks to be registered; this should be\n         * the same string that would be passed to `import()`, except that if it is\n         * relative, it is resolved relative to `parentURL`.\n         * @param parentURL f you want to resolve `specifier` relative to a base\n         * URL, such as `import.meta.url`, you can pass that URL here.\n         */\n        function register<Data = any>(\n            specifier: string | URL,\n            parentURL?: string | URL,\n            options?: RegisterOptions<Data>,\n        ): void;\n        function register<Data = any>(specifier: string | URL, options?: RegisterOptions<Data>): void;\n        interface RegisterHooksOptions {\n            /**\n             * See [load hook](https://nodejs.org/docs/latest-v22.x/api/module.html#loadurl-context-nextload).\n             * @default undefined\n             */\n            load?: LoadHook | undefined;\n            /**\n             * See [resolve hook](https://nodejs.org/docs/latest-v22.x/api/module.html#resolvespecifier-context-nextresolve).\n             * @default undefined\n             */\n            resolve?: ResolveHook | undefined;\n        }\n        interface ModuleHooks {\n            /**\n             * Deregister the hook instance.\n             */\n            deregister(): void;\n        }\n        /**\n         * Register [hooks](https://nodejs.org/docs/latest-v22.x/api/module.html#customization-hooks)\n         * that customize Node.js module resolution and loading behavior.\n         * @since v22.15.0\n         * @experimental\n         */\n        function registerHooks(options: RegisterHooksOptions): ModuleHooks;\n        interface StripTypeScriptTypesOptions {\n            /**\n             * Possible values are:\n             * * `'strip'` Only strip type annotations without performing the transformation of TypeScript features.\n             * * `'transform'` Strip type annotations and transform TypeScript features to JavaScript.\n             * @default 'strip'\n             */\n            mode?: \"strip\" | \"transform\" | undefined;\n            /**\n             * Only when `mode` is `'transform'`, if `true`, a source map\n             * will be generated for the transformed code.\n             * @default false\n             */\n            sourceMap?: boolean | undefined;\n            /**\n             * Specifies the source url used in the source map.\n             */\n            sourceUrl?: string | undefined;\n        }\n        /**\n         * `module.stripTypeScriptTypes()` removes type annotations from TypeScript code. It\n         * can be used to strip type annotations from TypeScript code before running it\n         * with `vm.runInContext()` or `vm.compileFunction()`.\n         * By default, it will throw an error if the code contains TypeScript features\n         * that require transformation such as `Enums`,\n         * see [type-stripping](https://nodejs.org/docs/latest-v22.x/api/typescript.md#type-stripping) for more information.\n         * When mode is `'transform'`, it also transforms TypeScript features to JavaScript,\n         * see [transform TypeScript features](https://nodejs.org/docs/latest-v22.x/api/typescript.md#typescript-features) for more information.\n         * When mode is `'strip'`, source maps are not generated, because locations are preserved.\n         * If `sourceMap` is provided, when mode is `'strip'`, an error will be thrown.\n         *\n         * _WARNING_: The output of this function should not be considered stable across Node.js versions,\n         * due to changes in the TypeScript parser.\n         *\n         * ```js\n         * import { stripTypeScriptTypes } from 'node:module';\n         * const code = 'const a: number = 1;';\n         * const strippedCode = stripTypeScriptTypes(code);\n         * console.log(strippedCode);\n         * // Prints: const a         = 1;\n         * ```\n         *\n         * If `sourceUrl` is provided, it will be used appended as a comment at the end of the output:\n         *\n         * ```js\n         * import { stripTypeScriptTypes } from 'node:module';\n         * const code = 'const a: number = 1;';\n         * const strippedCode = stripTypeScriptTypes(code, { mode: 'strip', sourceUrl: 'source.ts' });\n         * console.log(strippedCode);\n         * // Prints: const a         = 1\\n\\n//# sourceURL=source.ts;\n         * ```\n         *\n         * When `mode` is `'transform'`, the code is transformed to JavaScript:\n         *\n         * ```js\n         * import { stripTypeScriptTypes } from 'node:module';\n         * const code = `\n         *   namespace MathUtil {\n         *     export const add = (a: number, b: number) => a + b;\n         *   }`;\n         * const strippedCode = stripTypeScriptTypes(code, { mode: 'transform', sourceMap: true });\n         * console.log(strippedCode);\n         * // Prints:\n         * // var MathUtil;\n         * // (function(MathUtil) {\n         * //     MathUtil.add = (a, b)=>a + b;\n         * // })(MathUtil || (MathUtil = {}));\n         * // # sourceMappingURL=data:application/json;base64, ...\n         * ```\n         * @since v22.13.0\n         * @param code The code to strip type annotations from.\n         * @returns The code with type annotations stripped.\n         */\n        function stripTypeScriptTypes(code: string, options?: StripTypeScriptTypesOptions): string;\n        /* eslint-enable @definitelytyped/no-unnecessary-generics */\n        /**\n         * The `module.syncBuiltinESMExports()` method updates all the live bindings for\n         * builtin `ES Modules` to match the properties of the `CommonJS` exports. It\n         * does not add or remove exported names from the `ES Modules`.\n         *\n         * ```js\n         * import fs from 'node:fs';\n         * import assert from 'node:assert';\n         * import { syncBuiltinESMExports } from 'node:module';\n         *\n         * fs.readFile = newAPI;\n         *\n         * delete fs.readFileSync;\n         *\n         * function newAPI() {\n         *   // ...\n         * }\n         *\n         * fs.newAPI = newAPI;\n         *\n         * syncBuiltinESMExports();\n         *\n         * import('node:fs').then((esmFS) => {\n         *   // It syncs the existing readFile property with the new value\n         *   assert.strictEqual(esmFS.readFile, newAPI);\n         *   // readFileSync has been deleted from the required fs\n         *   assert.strictEqual('readFileSync' in fs, false);\n         *   // syncBuiltinESMExports() does not remove readFileSync from esmFS\n         *   assert.strictEqual('readFileSync' in esmFS, true);\n         *   // syncBuiltinESMExports() does not add names\n         *   assert.strictEqual(esmFS.newAPI, undefined);\n         * });\n         * ```\n         * @since v12.12.0\n         */\n        function syncBuiltinESMExports(): void;\n        interface ImportAttributes extends NodeJS.Dict<string> {\n            type?: string | undefined;\n        }\n        type ModuleFormat =\n            | \"builtin\"\n            | \"commonjs\"\n            | \"commonjs-typescript\"\n            | \"json\"\n            | \"module\"\n            | \"module-typescript\"\n            | \"wasm\";\n        type ModuleSource = string | ArrayBuffer | NodeJS.TypedArray;\n        /**\n         * The `initialize` hook provides a way to define a custom function that runs in\n         * the hooks thread when the hooks module is initialized. Initialization happens\n         * when the hooks module is registered via {@link register}.\n         *\n         * This hook can receive data from a {@link register} invocation, including\n         * ports and other transferable objects. The return value of `initialize` can be a\n         * `Promise`, in which case it will be awaited before the main application thread\n         * execution resumes.\n         */\n        type InitializeHook<Data = any> = (data: Data) => void | Promise<void>;\n        interface ResolveHookContext {\n            /**\n             * Export conditions of the relevant `package.json`\n             */\n            conditions: string[];\n            /**\n             *  An object whose key-value pairs represent the assertions for the module to import\n             */\n            importAttributes: ImportAttributes;\n            /**\n             * The module importing this one, or undefined if this is the Node.js entry point\n             */\n            parentURL: string | undefined;\n        }\n        interface ResolveFnOutput {\n            /**\n             * A hint to the load hook (it might be ignored); can be an intermediary value.\n             */\n            format?: string | null | undefined;\n            /**\n             * The import attributes to use when caching the module (optional; if excluded the input will be used)\n             */\n            importAttributes?: ImportAttributes | undefined;\n            /**\n             * A signal that this hook intends to terminate the chain of `resolve` hooks.\n             * @default false\n             */\n            shortCircuit?: boolean | undefined;\n            /**\n             * The absolute URL to which this input resolves\n             */\n            url: string;\n        }\n        /**\n         * The `resolve` hook chain is responsible for telling Node.js where to find and\n         * how to cache a given `import` statement or expression, or `require` call. It can\n         * optionally return a format (such as `'module'`) as a hint to the `load` hook. If\n         * a format is specified, the `load` hook is ultimately responsible for providing\n         * the final `format` value (and it is free to ignore the hint provided by\n         * `resolve`); if `resolve` provides a `format`, a custom `load` hook is required\n         * even if only to pass the value to the Node.js default `load` hook.\n         */\n        type ResolveHook = (\n            specifier: string,\n            context: ResolveHookContext,\n            nextResolve: (\n                specifier: string,\n                context?: Partial<ResolveHookContext>,\n            ) => ResolveFnOutput | Promise<ResolveFnOutput>,\n        ) => ResolveFnOutput | Promise<ResolveFnOutput>;\n        interface LoadHookContext {\n            /**\n             * Export conditions of the relevant `package.json`\n             */\n            conditions: string[];\n            /**\n             * The format optionally supplied by the `resolve` hook chain (can be an intermediary value).\n             */\n            format: string | null | undefined;\n            /**\n             *  An object whose key-value pairs represent the assertions for the module to import\n             */\n            importAttributes: ImportAttributes;\n        }\n        interface LoadFnOutput {\n            format: ModuleFormat;\n            /**\n             * A signal that this hook intends to terminate the chain of `resolve` hooks.\n             * @default false\n             */\n            shortCircuit?: boolean | undefined;\n            /**\n             * The source for Node.js to evaluate\n             */\n            source?: ModuleSource | undefined;\n        }\n        /**\n         * The `load` hook provides a way to define a custom method of determining how a\n         * URL should be interpreted, retrieved, and parsed. It is also in charge of\n         * validating the import attributes.\n         */\n        type LoadHook = (\n            url: string,\n            context: LoadHookContext,\n            nextLoad: (\n                url: string,\n                context?: Partial<LoadHookContext>,\n            ) => LoadFnOutput | Promise<LoadFnOutput>,\n        ) => LoadFnOutput | Promise<LoadFnOutput>;\n        /**\n         * `path` is the resolved path for the file for which a corresponding source map\n         * should be fetched.\n         * @since v13.7.0, v12.17.0\n         * @return Returns `module.SourceMap` if a source map is found, `undefined` otherwise.\n         */\n        function findSourceMap(path: string): SourceMap | undefined;\n        interface SourceMapConstructorOptions {\n            /**\n             * @since v21.0.0, v20.5.0\n             */\n            lineLengths?: readonly number[] | undefined;\n        }\n        interface SourceMapPayload {\n            file: string;\n            version: number;\n            sources: string[];\n            sourcesContent: string[];\n            names: string[];\n            mappings: string;\n            sourceRoot: string;\n        }\n        interface SourceMapping {\n            generatedLine: number;\n            generatedColumn: number;\n            originalSource: string;\n            originalLine: number;\n            originalColumn: number;\n        }\n        interface SourceOrigin {\n            /**\n             * The name of the range in the source map, if one was provided\n             */\n            name: string | undefined;\n            /**\n             * The file name of the original source, as reported in the SourceMap\n             */\n            fileName: string;\n            /**\n             * The 1-indexed lineNumber of the corresponding call site in the original source\n             */\n            lineNumber: number;\n            /**\n             * The 1-indexed columnNumber of the corresponding call site in the original source\n             */\n            columnNumber: number;\n        }\n        /**\n         * @since v13.7.0, v12.17.0\n         */\n        class SourceMap {\n            constructor(payload: SourceMapPayload, options?: SourceMapConstructorOptions);\n            /**\n             * Getter for the payload used to construct the `SourceMap` instance.\n             */\n            readonly payload: SourceMapPayload;\n            /**\n             * Given a line offset and column offset in the generated source\n             * file, returns an object representing the SourceMap range in the\n             * original file if found, or an empty object if not.\n             *\n             * The object returned contains the following keys:\n             *\n             * The returned value represents the raw range as it appears in the\n             * SourceMap, based on zero-indexed offsets, _not_ 1-indexed line and\n             * column numbers as they appear in Error messages and CallSite\n             * objects.\n             *\n             * To get the corresponding 1-indexed line and column numbers from a\n             * lineNumber and columnNumber as they are reported by Error stacks\n             * and CallSite objects, use `sourceMap.findOrigin(lineNumber, columnNumber)`\n             * @param lineOffset The zero-indexed line number offset in the generated source\n             * @param columnOffset The zero-indexed column number offset in the generated source\n             */\n            findEntry(lineOffset: number, columnOffset: number): SourceMapping | {};\n            /**\n             * Given a 1-indexed `lineNumber` and `columnNumber` from a call site in the generated source,\n             * find the corresponding call site location in the original source.\n             *\n             * If the `lineNumber` and `columnNumber` provided are not found in any source map,\n             * then an empty object is returned.\n             * @param lineNumber The 1-indexed line number of the call site in the generated source\n             * @param columnNumber The 1-indexed column number of the call site in the generated source\n             */\n            findOrigin(lineNumber: number, columnNumber: number): SourceOrigin | {};\n        }\n        function runMain(main?: string): void;\n        function wrap(script: string): string;\n    }\n    global {\n        interface ImportMeta {\n            /**\n             * The directory name of the current module. This is the same as the `path.dirname()` of the `import.meta.filename`.\n             * **Caveat:** only present on `file:` modules.\n             */\n            dirname: string;\n            /**\n             * The full absolute path and filename of the current module, with symlinks resolved.\n             * This is the same as the `url.fileURLToPath()` of the `import.meta.url`.\n             * **Caveat:** only local modules support this property. Modules not using the `file:` protocol will not provide it.\n             */\n            filename: string;\n            /**\n             * The absolute `file:` URL of the module.\n             */\n            url: string;\n            /**\n             * Provides a module-relative resolution function scoped to each module, returning\n             * the URL string.\n             *\n             * Second `parent` parameter is only used when the `--experimental-import-meta-resolve`\n             * command flag enabled.\n             *\n             * @since v20.6.0\n             *\n             * @param specifier The module specifier to resolve relative to `parent`.\n             * @param parent The absolute parent module URL to resolve from.\n             * @returns The absolute (`file:`) URL string for the resolved module.\n             */\n            resolve(specifier: string, parent?: string | URL | undefined): string;\n        }\n        namespace NodeJS {\n            interface Module {\n                /**\n                 * The module objects required for the first time by this one.\n                 * @since v0.1.16\n                 */\n                children: Module[];\n                /**\n                 * The `module.exports` object is created by the `Module` system. Sometimes this is\n                 * not acceptable; many want their module to be an instance of some class. To do\n                 * this, assign the desired export object to `module.exports`.\n                 * @since v0.1.16\n                 */\n                exports: any;\n                /**\n                 * The fully resolved filename of the module.\n                 * @since v0.1.16\n                 */\n                filename: string;\n                /**\n                 * The identifier for the module. Typically this is the fully resolved\n                 * filename.\n                 * @since v0.1.16\n                 */\n                id: string;\n                /**\n                 * `true` if the module is running during the Node.js preload\n                 * phase.\n                 * @since v15.4.0, v14.17.0\n                 */\n                isPreloading: boolean;\n                /**\n                 * Whether or not the module is done loading, or is in the process of\n                 * loading.\n                 * @since v0.1.16\n                 */\n                loaded: boolean;\n                /**\n                 * The module that first required this one, or `null` if the current module is the\n                 * entry point of the current process, or `undefined` if the module was loaded by\n                 * something that is not a CommonJS module (e.g. REPL or `import`).\n                 * @since v0.1.16\n                 * @deprecated Please use `require.main` and `module.children` instead.\n                 */\n                parent: Module | null | undefined;\n                /**\n                 * The directory name of the module. This is usually the same as the\n                 * `path.dirname()` of the `module.id`.\n                 * @since v11.14.0\n                 */\n                path: string;\n                /**\n                 * The search paths for the module.\n                 * @since v0.4.0\n                 */\n                paths: string[];\n                /**\n                 * The `module.require()` method provides a way to load a module as if\n                 * `require()` was called from the original module.\n                 * @since v0.5.1\n                 */\n                require(id: string): any;\n            }\n            interface Require {\n                /**\n                 * Used to import modules, `JSON`, and local files.\n                 * @since v0.1.13\n                 */\n                (id: string): any;\n                /**\n                 * Modules are cached in this object when they are required. By deleting a key\n                 * value from this object, the next `require` will reload the module.\n                 * This does not apply to\n                 * [native addons](https://nodejs.org/docs/latest-v22.x/api/addons.html),\n                 * for which reloading will result in an error.\n                 * @since v0.3.0\n                 */\n                cache: Dict<Module>;\n                /**\n                 * Instruct `require` on how to handle certain file extensions.\n                 * @since v0.3.0\n                 * @deprecated\n                 */\n                extensions: RequireExtensions;\n                /**\n                 * The `Module` object representing the entry script loaded when the Node.js\n                 * process launched, or `undefined` if the entry point of the program is not a\n                 * CommonJS module.\n                 * @since v0.1.17\n                 */\n                main: Module | undefined;\n                /**\n                 * @since v0.3.0\n                 */\n                resolve: RequireResolve;\n            }\n            /** @deprecated */\n            interface RequireExtensions extends Dict<(module: Module, filename: string) => any> {\n                \".js\": (module: Module, filename: string) => any;\n                \".json\": (module: Module, filename: string) => any;\n                \".node\": (module: Module, filename: string) => any;\n            }\n            interface RequireResolveOptions {\n                /**\n                 * Paths to resolve module location from. If present, these\n                 * paths are used instead of the default resolution paths, with the exception\n                 * of\n                 * [GLOBAL\\_FOLDERS](https://nodejs.org/docs/latest-v22.x/api/modules.html#loading-from-the-global-folders)\n                 * like `$HOME/.node_modules`, which are\n                 * always included. Each of these paths is used as a starting point for\n                 * the module resolution algorithm, meaning that the `node_modules` hierarchy\n                 * is checked from this location.\n                 * @since v8.9.0\n                 */\n                paths?: string[] | undefined;\n            }\n            interface RequireResolve {\n                /**\n                 * Use the internal `require()` machinery to look up the location of a module,\n                 * but rather than loading the module, just return the resolved filename.\n                 *\n                 * If the module can not be found, a `MODULE_NOT_FOUND` error is thrown.\n                 * @since v0.3.0\n                 * @param request The module path to resolve.\n                 */\n                (request: string, options?: RequireResolveOptions): string;\n                /**\n                 * Returns an array containing the paths searched during resolution of `request` or\n                 * `null` if the `request` string references a core module, for example `http` or\n                 * `fs`.\n                 * @since v8.9.0\n                 * @param request The module path whose lookup paths are being retrieved.\n                 */\n                paths(request: string): string[] | null;\n            }\n        }\n        /**\n         * The directory name of the current module. This is the same as the\n         * `path.dirname()` of the `__filename`.\n         * @since v0.1.27\n         */\n        var __dirname: string;\n        /**\n         * The file name of the current module. This is the current module file's absolute\n         * path with symlinks resolved.\n         *\n         * For a main program this is not necessarily the same as the file name used in the\n         * command line.\n         * @since v0.0.1\n         */\n        var __filename: string;\n        /**\n         * The `exports` variable is available within a module's file-level scope, and is\n         * assigned the value of `module.exports` before the module is evaluated.\n         * @since v0.1.16\n         */\n        var exports: NodeJS.Module[\"exports\"];\n        /**\n         * A reference to the current module.\n         * @since v0.1.16\n         */\n        var module: NodeJS.Module;\n        /**\n         * @since v0.1.13\n         */\n        var require: NodeJS.Require;\n        // Global-scope aliases for backwards compatibility with @types/node <13.0.x\n        // TODO: consider removing in a future major version update\n        /** @deprecated Use `NodeJS.Module` instead. */\n        interface NodeModule extends NodeJS.Module {}\n        /** @deprecated Use `NodeJS.Require` instead. */\n        interface NodeRequire extends NodeJS.Require {}\n        /** @deprecated Use `NodeJS.RequireResolve` instead. */\n        interface RequireResolve extends NodeJS.RequireResolve {}\n    }\n    export = Module;\n}\ndeclare module \"node:module\" {\n    import module = require(\"module\");\n    export = module;\n}\n"
        }
    ]
}