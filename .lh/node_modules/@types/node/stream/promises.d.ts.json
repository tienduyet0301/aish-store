{
    "sourceFile": "node_modules/@types/node/stream/promises.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare module \"stream/promises\" {\n    import {\n        FinishedOptions as _FinishedOptions,\n        PipelineDestination,\n        PipelineOptions,\n        PipelinePromise,\n        PipelineSource,\n        PipelineTransform,\n    } from \"node:stream\";\n    interface FinishedOptions extends _FinishedOptions {\n        /**\n         * If true, removes the listeners registered by this function before the promise is fulfilled.\n         * @default false\n         */\n        cleanup?: boolean | undefined;\n    }\n    function finished(\n        stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream,\n        options?: FinishedOptions,\n    ): Promise<void>;\n    function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\n        source: A,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        B extends PipelineDestination<T1, any>,\n    >(\n        source: A,\n        transform1: T1,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        T2 extends PipelineTransform<T1, any>,\n        B extends PipelineDestination<T2, any>,\n    >(\n        source: A,\n        transform1: T1,\n        transform2: T2,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        T2 extends PipelineTransform<T1, any>,\n        T3 extends PipelineTransform<T2, any>,\n        B extends PipelineDestination<T3, any>,\n    >(\n        source: A,\n        transform1: T1,\n        transform2: T2,\n        transform3: T3,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        T2 extends PipelineTransform<T1, any>,\n        T3 extends PipelineTransform<T2, any>,\n        T4 extends PipelineTransform<T3, any>,\n        B extends PipelineDestination<T4, any>,\n    >(\n        source: A,\n        transform1: T1,\n        transform2: T2,\n        transform3: T3,\n        transform4: T4,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline(\n        streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\n        options?: PipelineOptions,\n    ): Promise<void>;\n    function pipeline(\n        stream1: NodeJS.ReadableStream,\n        stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\n        ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\n    ): Promise<void>;\n}\ndeclare module \"node:stream/promises\" {\n    export * from \"stream/promises\";\n}\n"
        }
    ]
}