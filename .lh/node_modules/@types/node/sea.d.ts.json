{
    "sourceFile": "node_modules/@types/node/sea.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * This feature allows the distribution of a Node.js application conveniently to a\n * system that does not have Node.js installed.\n *\n * Node.js supports the creation of [single executable applications](https://github.com/nodejs/single-executable) by allowing\n * the injection of a blob prepared by Node.js, which can contain a bundled script,\n * into the `node` binary. During start up, the program checks if anything has been\n * injected. If the blob is found, it executes the script in the blob. Otherwise\n * Node.js operates as it normally does.\n *\n * The single executable application feature currently only supports running a\n * single embedded script using the `CommonJS` module system.\n *\n * Users can create a single executable application from their bundled script\n * with the `node` binary itself and any tool which can inject resources into the\n * binary.\n *\n * Here are the steps for creating a single executable application using one such\n * tool, [postject](https://github.com/nodejs/postject):\n *\n * 1. Create a JavaScript file:\n * ```bash\n * echo 'console.log(`Hello, ${process.argv[2]}!`);' > hello.js\n * ```\n * 2. Create a configuration file building a blob that can be injected into the\n * single executable application (see `Generating single executable preparation blobs` for details):\n * ```bash\n * echo '{ \"main\": \"hello.js\", \"output\": \"sea-prep.blob\" }' > sea-config.json\n * ```\n * 3. Generate the blob to be injected:\n * ```bash\n * node --experimental-sea-config sea-config.json\n * ```\n * 4. Create a copy of the `node` executable and name it according to your needs:\n *    * On systems other than Windows:\n * ```bash\n * cp $(command -v node) hello\n * ```\n *    * On Windows:\n * ```text\n * node -e \"require('fs').copyFileSync(process.execPath, 'hello.exe')\"\n * ```\n * The `.exe` extension is necessary.\n * 5. Remove the signature of the binary (macOS and Windows only):\n *    * On macOS:\n * ```bash\n * codesign --remove-signature hello\n * ```\n *    * On Windows (optional):\n * [signtool](https://learn.microsoft.com/en-us/windows/win32/seccrypto/signtool) can be used from the installed [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/).\n * If this step is\n * skipped, ignore any signature-related warning from postject.\n * ```powershell\n * signtool remove /s hello.exe\n * ```\n * 6. Inject the blob into the copied binary by running `postject` with\n * the following options:\n *    * `hello` / `hello.exe` \\- The name of the copy of the `node` executable\n *    created in step 4.\n *    * `NODE_SEA_BLOB` \\- The name of the resource / note / section in the binary\n *    where the contents of the blob will be stored.\n *    * `sea-prep.blob` \\- The name of the blob created in step 1.\n *    * `--sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2` \\- The [fuse](https://www.electronjs.org/docs/latest/tutorial/fuses) used by the Node.js project to detect if a file has been\n * injected.\n *    * `--macho-segment-name NODE_SEA` (only needed on macOS) - The name of the\n *    segment in the binary where the contents of the blob will be\n *    stored.\n * To summarize, here is the required command for each platform:\n *    * On Linux:\n *    ```bash\n *    npx postject hello NODE_SEA_BLOB sea-prep.blob \\\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2\n *    ```\n *    * On Windows - PowerShell:\n *    ```powershell\n *    npx postject hello.exe NODE_SEA_BLOB sea-prep.blob `\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2\n *    ```\n *    * On Windows - Command Prompt:\n *    ```text\n *    npx postject hello.exe NODE_SEA_BLOB sea-prep.blob ^\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2\n *    ```\n *    * On macOS:\n *    ```bash\n *    npx postject hello NODE_SEA_BLOB sea-prep.blob \\\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\\n *        --macho-segment-name NODE_SEA\n *    ```\n * 7. Sign the binary (macOS and Windows only):\n *    * On macOS:\n * ```bash\n * codesign --sign - hello\n * ```\n *    * On Windows (optional):\n * A certificate needs to be present for this to work. However, the unsigned\n * binary would still be runnable.\n * ```powershell\n * signtool sign /fd SHA256 hello.exe\n * ```\n * 8. Run the binary:\n *    * On systems other than Windows\n * ```console\n * $ ./hello world\n * Hello, world!\n * ```\n *    * On Windows\n * ```console\n * $ .\\hello.exe world\n * Hello, world!\n * ```\n * @since v19.7.0, v18.16.0\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/src/node_sea.cc)\n */\ndeclare module \"node:sea\" {\n    type AssetKey = string;\n    /**\n     * @since v20.12.0\n     * @return Whether this script is running inside a single-executable application.\n     */\n    function isSea(): boolean;\n    /**\n     * This method can be used to retrieve the assets configured to be bundled into the\n     * single-executable application at build time.\n     * An error is thrown when no matching asset can be found.\n     * @since v20.12.0\n     */\n    function getAsset(key: AssetKey): ArrayBuffer;\n    function getAsset(key: AssetKey, encoding: string): string;\n    /**\n     * Similar to `sea.getAsset()`, but returns the result in a [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n     * An error is thrown when no matching asset can be found.\n     * @since v20.12.0\n     */\n    function getAssetAsBlob(key: AssetKey, options?: {\n        type: string;\n    }): Blob;\n    /**\n     * This method can be used to retrieve the assets configured to be bundled into the\n     * single-executable application at build time.\n     * An error is thrown when no matching asset can be found.\n     *\n     * Unlike `sea.getRawAsset()` or `sea.getAssetAsBlob()`, this method does not\n     * return a copy. Instead, it returns the raw asset bundled inside the executable.\n     *\n     * For now, users should avoid writing to the returned array buffer. If the\n     * injected section is not marked as writable or not aligned properly,\n     * writes to the returned array buffer is likely to result in a crash.\n     * @since v20.12.0\n     */\n    function getRawAsset(key: AssetKey): ArrayBuffer;\n}\n"
        }
    ]
}