{
    "sourceFile": "node_modules/@types/node/timers/promises.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `timers/promises` API provides an alternative set of timer functions\n * that return `Promise` objects. The API is accessible via\n * `require('node:timers/promises')`.\n *\n * ```js\n * import {\n *   setTimeout,\n *   setImmediate,\n *   setInterval,\n * } from 'node:timers/promises';\n * ```\n * @since v15.0.0\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/timers/promises.js)\n */\ndeclare module \"timers/promises\" {\n    import { TimerOptions } from \"node:timers\";\n    /**\n     * ```js\n     * import {\n     *   setTimeout,\n     * } from 'node:timers/promises';\n     *\n     * const res = await setTimeout(100, 'result');\n     *\n     * console.log(res);  // Prints 'result'\n     * ```\n     * @since v15.0.0\n     * @param delay The number of milliseconds to wait before fulfilling the\n     * promise. **Default:** `1`.\n     * @param value A value with which the promise is fulfilled.\n     */\n    function setTimeout<T = void>(delay?: number, value?: T, options?: TimerOptions): Promise<T>;\n    /**\n     * ```js\n     * import {\n     *   setImmediate,\n     * } from 'node:timers/promises';\n     *\n     * const res = await setImmediate('result');\n     *\n     * console.log(res);  // Prints 'result'\n     * ```\n     * @since v15.0.0\n     * @param value A value with which the promise is fulfilled.\n     */\n    function setImmediate<T = void>(value?: T, options?: TimerOptions): Promise<T>;\n    /**\n     * Returns an async iterator that generates values in an interval of `delay` ms.\n     * If `ref` is `true`, you need to call `next()` of async iterator explicitly\n     * or implicitly to keep the event loop alive.\n     *\n     * ```js\n     * import {\n     *   setInterval,\n     * } from 'node:timers/promises';\n     *\n     * const interval = 100;\n     * for await (const startTime of setInterval(interval, Date.now())) {\n     *   const now = Date.now();\n     *   console.log(now);\n     *   if ((now - startTime) > 1000)\n     *     break;\n     * }\n     * console.log(Date.now());\n     * ```\n     * @since v15.9.0\n     * @param delay The number of milliseconds to wait between iterations.\n     * **Default:** `1`.\n     * @param value A value with which the iterator returns.\n     */\n    function setInterval<T = void>(delay?: number, value?: T, options?: TimerOptions): NodeJS.AsyncIterator<T>;\n    interface Scheduler {\n        /**\n         * An experimental API defined by the [Scheduling APIs](https://github.com/WICG/scheduling-apis) draft specification\n         * being developed as a standard Web Platform API.\n         *\n         * Calling `timersPromises.scheduler.wait(delay, options)` is roughly equivalent\n         * to calling `timersPromises.setTimeout(delay, undefined, options)` except that\n         * the `ref` option is not supported.\n         *\n         * ```js\n         * import { scheduler } from 'node:timers/promises';\n         *\n         * await scheduler.wait(1000); // Wait one second before continuing\n         * ```\n         * @since v17.3.0, v16.14.0\n         * @experimental\n         * @param delay The number of milliseconds to wait before resolving the\n         * promise.\n         */\n        wait(delay: number, options?: { signal?: AbortSignal }): Promise<void>;\n        /**\n         * An experimental API defined by the [Scheduling APIs](https://github.com/WICG/scheduling-apis) draft specification\n         * being developed as a standard Web Platform API.\n         *\n         * Calling `timersPromises.scheduler.yield()` is equivalent to calling\n         * `timersPromises.setImmediate()` with no arguments.\n         * @since v17.3.0, v16.14.0\n         * @experimental\n         */\n        yield(): Promise<void>;\n    }\n    const scheduler: Scheduler;\n}\ndeclare module \"node:timers/promises\" {\n    export * from \"timers/promises\";\n}\n"
        }
    ]
}