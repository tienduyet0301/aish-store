{
    "sourceFile": "node_modules/@types/node/dns.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:dns` module enables name resolution. For example, use it to look up IP\n * addresses of host names.\n *\n * Although named for the [Domain Name System (DNS)](https://en.wikipedia.org/wiki/Domain_Name_System), it does not always use the\n * DNS protocol for lookups. {@link lookup} uses the operating system\n * facilities to perform name resolution. It may not need to perform any network\n * communication. To perform name resolution the way other applications on the same\n * system do, use {@link lookup}.\n *\n * ```js\n * import dns from 'node:dns';\n *\n * dns.lookup('example.org', (err, address, family) => {\n *   console.log('address: %j family: IPv%s', address, family);\n * });\n * // address: \"93.184.216.34\" family: IPv4\n * ```\n *\n * All other functions in the `node:dns` module connect to an actual DNS server to\n * perform name resolution. They will always use the network to perform DNS\n * queries. These functions do not use the same set of configuration files used by {@link lookup} (e.g. `/etc/hosts`). Use these functions to always perform\n * DNS queries, bypassing other name-resolution facilities.\n *\n * ```js\n * import dns from 'node:dns';\n *\n * dns.resolve4('archive.org', (err, addresses) => {\n *   if (err) throw err;\n *\n *   console.log(`addresses: ${JSON.stringify(addresses)}`);\n *\n *   addresses.forEach((a) => {\n *     dns.reverse(a, (err, hostnames) => {\n *       if (err) {\n *         throw err;\n *       }\n *       console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n *     });\n *   });\n * });\n * ```\n *\n * See the [Implementation considerations section](https://nodejs.org/docs/latest-v22.x/api/dns.html#implementation-considerations) for more information.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/dns.js)\n */\ndeclare module \"dns\" {\n    import * as dnsPromises from \"node:dns/promises\";\n    // Supported getaddrinfo flags.\n    /**\n     * Limits returned address types to the types of non-loopback addresses configured on the system. For example, IPv4 addresses are\n     * only returned if the current system has at least one IPv4 address configured.\n     */\n    export const ADDRCONFIG: number;\n    /**\n     * If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses. It is not supported\n     * on some operating systems (e.g. FreeBSD 10.1).\n     */\n    export const V4MAPPED: number;\n    /**\n     * If `dns.V4MAPPED` is specified, return resolved IPv6 addresses as\n     * well as IPv4 mapped IPv6 addresses.\n     */\n    export const ALL: number;\n    export interface LookupOptions {\n        /**\n         * The record family. Must be `4`, `6`, or `0`. For backward compatibility reasons, `'IPv4'` and `'IPv6'` are interpreted\n         * as `4` and `6` respectively. The value 0 indicates that either an IPv4 or IPv6 address is returned. If the value `0` is used\n         * with `{ all: true } (see below)`, both IPv4 and IPv6 addresses are returned.\n         * @default 0\n         */\n        family?: number | \"IPv4\" | \"IPv6\" | undefined;\n        /**\n         * One or more [supported `getaddrinfo`](https://nodejs.org/docs/latest-v22.x/api/dns.html#supported-getaddrinfo-flags) flags. Multiple flags may be\n         * passed by bitwise `OR`ing their values.\n         */\n        hints?: number | undefined;\n        /**\n         * When `true`, the callback returns all resolved addresses in an array. Otherwise, returns a single address.\n         * @default false\n         */\n        all?: boolean | undefined;\n        /**\n         * When `verbatim`, the resolved addresses are return unsorted. When `ipv4first`, the resolved addresses are sorted\n         * by placing IPv4 addresses before IPv6 addresses. When `ipv6first`, the resolved addresses are sorted by placing IPv6\n         * addresses before IPv4 addresses. Default value is configurable using\n         * {@link setDefaultResultOrder} or [`--dns-result-order`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--dns-result-orderorder).\n         * @default `verbatim` (addresses are not reordered)\n         * @since v22.1.0\n         */\n        order?: \"ipv4first\" | \"ipv6first\" | \"verbatim\" | undefined;\n        /**\n         * When `true`, the callback receives IPv4 and IPv6 addresses in the order the DNS resolver returned them. When `false`, IPv4\n         * addresses are placed before IPv6 addresses. This option will be deprecated in favor of `order`. When both are specified,\n         * `order` has higher precedence. New code should only use `order`. Default value is configurable using {@link setDefaultResultOrder}\n         * @default true (addresses are not reordered)\n         * @deprecated Please use `order` option\n         */\n        verbatim?: boolean | undefined;\n    }\n    export interface LookupOneOptions extends LookupOptions {\n        all?: false | undefined;\n    }\n    export interface LookupAllOptions extends LookupOptions {\n        all: true;\n    }\n    export interface LookupAddress {\n        /**\n         * A string representation of an IPv4 or IPv6 address.\n         */\n        address: string;\n        /**\n         * `4` or `6`, denoting the family of `address`, or `0` if the address is not an IPv4 or IPv6 address. `0` is a likely indicator of a\n         * bug in the name resolution service used by the operating system.\n         */\n        family: number;\n    }\n    /**\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\n     * integer, then it must be `4` or `6` â€“ if `options` is `0` or not provided, then\n     * IPv4 and IPv6 addresses are both returned if found.\n     *\n     * With the `all` option set to `true`, the arguments for `callback` change to `(err, addresses)`, with `addresses` being an array of objects with the\n     * properties `address` and `family`.\n     *\n     * On error, `err` is an `Error` object, where `err.code` is the error code.\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\n     * the host name does not exist but also when the lookup fails in other ways\n     * such as no available file descriptors.\n     *\n     * `dns.lookup()` does not necessarily have anything to do with the DNS protocol.\n     * The implementation uses an operating system facility that can associate names\n     * with addresses and vice versa. This implementation can have subtle but\n     * important consequences on the behavior of any Node.js program. Please take some\n     * time to consult the [Implementation considerations section](https://nodejs.org/docs/latest-v22.x/api/dns.html#implementation-considerations)\n     * before using `dns.lookup()`.\n     *\n     * Example usage:\n     *\n     * ```js\n     * import dns from 'node:dns';\n     * const options = {\n     *   family: 6,\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\n     * };\n     * dns.lookup('example.com', options, (err, address, family) =>\n     *   console.log('address: %j family: IPv%s', address, family));\n     * // address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n     *\n     * // When options.all is true, the result will be an Array.\n     * options.all = true;\n     * dns.lookup('example.com', options, (err, addresses) =>\n     *   console.log('addresses: %j', addresses));\n     * // addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]\n     * ```\n     *\n     * If this method is invoked as its [util.promisify()](https://nodejs.org/docs/latest-v22.x/api/util.html#utilpromisifyoriginal) ed\n     * version, and `all` is not set to `true`, it returns a `Promise` for an `Object` with `address` and `family` properties.\n     * @since v0.1.90\n     */\n    export function lookup(\n        hostname: string,\n        family: number,\n        callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        options: LookupOneOptions,\n        callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        options: LookupAllOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: LookupAddress[]) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        options: LookupOptions,\n        callback: (err: NodeJS.ErrnoException | null, address: string | LookupAddress[], family: number) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n    ): void;\n    export namespace lookup {\n        function __promisify__(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\n        function __promisify__(hostname: string, options?: LookupOneOptions | number): Promise<LookupAddress>;\n        function __promisify__(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\n    }\n    /**\n     * Resolves the given `address` and `port` into a host name and service using\n     * the operating system's underlying `getnameinfo` implementation.\n     *\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError` will be thrown.\n     *\n     * On an error, `err` is an [`Error`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) object,\n     * where `err.code` is the error code.\n     *\n     * ```js\n     * import dns from 'node:dns';\n     * dns.lookupService('127.0.0.1', 22, (err, hostname, service) => {\n     *   console.log(hostname, service);\n     *   // Prints: localhost ssh\n     * });\n     * ```\n     *\n     * If this method is invoked as its [util.promisify()](https://nodejs.org/docs/latest-v22.x/api/util.html#utilpromisifyoriginal) ed\n     * version, it returns a `Promise` for an `Object` with `hostname` and `service` properties.\n     * @since v0.11.14\n     */\n    export function lookupService(\n        address: string,\n        port: number,\n        callback: (err: NodeJS.ErrnoException | null, hostname: string, service: string) => void,\n    ): void;\n    export namespace lookupService {\n        function __promisify__(\n            address: string,\n            port: number,\n        ): Promise<{\n            hostname: string;\n            service: string;\n        }>;\n    }\n    export interface ResolveOptions {\n        ttl: boolean;\n    }\n    export interface ResolveWithTtlOptions extends ResolveOptions {\n        ttl: true;\n    }\n    export interface RecordWithTtl {\n        address: string;\n        ttl: number;\n    }\n    /** @deprecated Use `AnyARecord` or `AnyAaaaRecord` instead. */\n    export type AnyRecordWithTtl = AnyARecord | AnyAaaaRecord;\n    export interface AnyARecord extends RecordWithTtl {\n        type: \"A\";\n    }\n    export interface AnyAaaaRecord extends RecordWithTtl {\n        type: \"AAAA\";\n    }\n    export interface CaaRecord {\n        critical: number;\n        issue?: string | undefined;\n        issuewild?: string | undefined;\n        iodef?: string | undefined;\n        contactemail?: string | undefined;\n        contactphone?: string | undefined;\n    }\n    export interface MxRecord {\n        priority: number;\n        exchange: string;\n    }\n    export interface AnyMxRecord extends MxRecord {\n        type: \"MX\";\n    }\n    export interface NaptrRecord {\n        flags: string;\n        service: string;\n        regexp: string;\n        replacement: string;\n        order: number;\n        preference: number;\n    }\n    export interface AnyNaptrRecord extends NaptrRecord {\n        type: \"NAPTR\";\n    }\n    export interface SoaRecord {\n        nsname: string;\n        hostmaster: string;\n        serial: number;\n        refresh: number;\n        retry: number;\n        expire: number;\n        minttl: number;\n    }\n    export interface AnySoaRecord extends SoaRecord {\n        type: \"SOA\";\n    }\n    export interface SrvRecord {\n        priority: number;\n        weight: number;\n        port: number;\n        name: string;\n    }\n    export interface AnySrvRecord extends SrvRecord {\n        type: \"SRV\";\n    }\n    export interface AnyTxtRecord {\n        type: \"TXT\";\n        entries: string[];\n    }\n    export interface AnyNsRecord {\n        type: \"NS\";\n        value: string;\n    }\n    export interface AnyPtrRecord {\n        type: \"PTR\";\n        value: string;\n    }\n    export interface AnyCnameRecord {\n        type: \"CNAME\";\n        value: string;\n    }\n    export type AnyRecord =\n        | AnyARecord\n        | AnyAaaaRecord\n        | AnyCnameRecord\n        | AnyMxRecord\n        | AnyNaptrRecord\n        | AnyNsRecord\n        | AnyPtrRecord\n        | AnySoaRecord\n        | AnySrvRecord\n        | AnyTxtRecord;\n    /**\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\n     * of the resource records. The `callback` function has arguments `(err, records)`. When successful, `records` will be an array of resource\n     * records. The type and structure of individual results varies based on `rrtype`:\n     *\n     * <omitted>\n     *\n     * On error, `err` is an [`Error`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) object,\n     * where `err.code` is one of the `DNS error codes`.\n     * @since v0.1.27\n     * @param hostname Host name to resolve.\n     * @param [rrtype='A'] Resource record type.\n     */\n    export function resolve(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"A\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"AAAA\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"ANY\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"CNAME\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"MX\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"NAPTR\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"NS\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"PTR\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"SOA\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: SoaRecord) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"SRV\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: \"TXT\",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: string,\n        callback: (\n            err: NodeJS.ErrnoException | null,\n            addresses: string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[],\n        ) => void,\n    ): void;\n    export namespace resolve {\n        function __promisify__(hostname: string, rrtype?: \"A\" | \"AAAA\" | \"CNAME\" | \"NS\" | \"PTR\"): Promise<string[]>;\n        function __promisify__(hostname: string, rrtype: \"ANY\"): Promise<AnyRecord[]>;\n        function __promisify__(hostname: string, rrtype: \"MX\"): Promise<MxRecord[]>;\n        function __promisify__(hostname: string, rrtype: \"NAPTR\"): Promise<NaptrRecord[]>;\n        function __promisify__(hostname: string, rrtype: \"SOA\"): Promise<SoaRecord>;\n        function __promisify__(hostname: string, rrtype: \"SRV\"): Promise<SrvRecord[]>;\n        function __promisify__(hostname: string, rrtype: \"TXT\"): Promise<string[][]>;\n        function __promisify__(\n            hostname: string,\n            rrtype: string,\n        ): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve a IPv4 addresses (`A` records) for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of IPv4 addresses (e.g.`['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\n     * @since v0.1.16\n     * @param hostname Host name to resolve.\n     */\n    export function resolve4(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve4(\n        hostname: string,\n        options: ResolveWithTtlOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void,\n    ): void;\n    export function resolve4(\n        hostname: string,\n        options: ResolveOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void,\n    ): void;\n    export namespace resolve4 {\n        function __promisify__(hostname: string): Promise<string[]>;\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve IPv6 addresses (`AAAA` records) for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of IPv6 addresses.\n     * @since v0.1.16\n     * @param hostname Host name to resolve.\n     */\n    export function resolve6(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve6(\n        hostname: string,\n        options: ResolveWithTtlOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void,\n    ): void;\n    export function resolve6(\n        hostname: string,\n        options: ResolveOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void,\n    ): void;\n    export namespace resolve6 {\n        function __promisify__(hostname: string): Promise<string[]>;\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of canonical name records available for the `hostname` (e.g. `['bar.example.com']`).\n     * @since v0.3.2\n     */\n    export function resolveCname(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export namespace resolveCname {\n        function __promisify__(hostname: string): Promise<string[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of certification authority authorization records\n     * available for the `hostname` (e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'}, {critical: 128, issue: 'pki.example.com'}]`).\n     * @since v15.0.0, v14.17.0\n     */\n    export function resolveCaa(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, records: CaaRecord[]) => void,\n    ): void;\n    export namespace resolveCaa {\n        function __promisify__(hostname: string): Promise<CaaRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * contain an array of objects containing both a `priority` and `exchange` property (e.g. `[{priority: 10, exchange: 'mx.example.com'}, ...]`).\n     * @since v0.1.27\n     */\n    export function resolveMx(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void,\n    ): void;\n    export namespace resolveMx {\n        function __promisify__(hostname: string): Promise<MxRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve regular expression-based records (`NAPTR` records) for the `hostname`. The `addresses` argument passed to the `callback` function will contain an array of\n     * objects with the following properties:\n     *\n     * * `flags`\n     * * `service`\n     * * `regexp`\n     * * `replacement`\n     * * `order`\n     * * `preference`\n     *\n     * ```js\n     * {\n     *   flags: 's',\n     *   service: 'SIP+D2U',\n     *   regexp: '',\n     *   replacement: '_sip._udp.example.com',\n     *   order: 30,\n     *   preference: 100\n     * }\n     * ```\n     * @since v0.9.12\n     */\n    export function resolveNaptr(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void,\n    ): void;\n    export namespace resolveNaptr {\n        function __promisify__(hostname: string): Promise<NaptrRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * contain an array of name server records available for `hostname` (e.g. `['ns1.example.com', 'ns2.example.com']`).\n     * @since v0.1.90\n     */\n    export function resolveNs(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export namespace resolveNs {\n        function __promisify__(hostname: string): Promise<string[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * be an array of strings containing the reply records.\n     * @since v6.0.0\n     */\n    export function resolvePtr(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export namespace resolvePtr {\n        function __promisify__(hostname: string): Promise<string[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\n     * the `hostname`. The `address` argument passed to the `callback` function will\n     * be an object with the following properties:\n     *\n     * * `nsname`\n     * * `hostmaster`\n     * * `serial`\n     * * `refresh`\n     * * `retry`\n     * * `expire`\n     * * `minttl`\n     *\n     * ```js\n     * {\n     *   nsname: 'ns.example.com',\n     *   hostmaster: 'root.example.com',\n     *   serial: 2013101809,\n     *   refresh: 10000,\n     *   retry: 2400,\n     *   expire: 604800,\n     *   minttl: 3600\n     * }\n     * ```\n     * @since v0.11.10\n     */\n    export function resolveSoa(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, address: SoaRecord) => void,\n    ): void;\n    export namespace resolveSoa {\n        function __promisify__(hostname: string): Promise<SoaRecord>;\n    }\n    /**\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * be an array of objects with the following properties:\n     *\n     * * `priority`\n     * * `weight`\n     * * `port`\n     * * `name`\n     *\n     * ```js\n     * {\n     *   priority: 10,\n     *   weight: 5,\n     *   port: 21223,\n     *   name: 'service.example.com'\n     * }\n     * ```\n     * @since v0.1.27\n     */\n    export function resolveSrv(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void,\n    ): void;\n    export namespace resolveSrv {\n        function __promisify__(hostname: string): Promise<SrvRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the `hostname`. The `records` argument passed to the `callback` function is a\n     * two-dimensional array of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\n     * one record. Depending on the use case, these could be either joined together or\n     * treated separately.\n     * @since v0.1.27\n     */\n    export function resolveTxt(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void,\n    ): void;\n    export namespace resolveTxt {\n        function __promisify__(hostname: string): Promise<string[][]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\n     * The `ret` argument passed to the `callback` function will be an array containing\n     * various types of records. Each object has a property `type` that indicates the\n     * type of the current record. And depending on the `type`, additional properties\n     * will be present on the object:\n     *\n     * <omitted>\n     *\n     * Here is an example of the `ret` object passed to the callback:\n     *\n     * ```js\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\n     *   { type: 'CNAME', value: 'example.com' },\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\n     *   { type: 'NS', value: 'ns1.example.com' },\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\n     *   { type: 'SOA',\n     *     nsname: 'ns1.example.com',\n     *     hostmaster: 'admin.example.com',\n     *     serial: 156696742,\n     *     refresh: 900,\n     *     retry: 900,\n     *     expire: 1800,\n     *     minttl: 60 } ]\n     * ```\n     *\n     * DNS server operators may choose not to respond to `ANY` queries. It may be better to call individual methods like {@link resolve4}, {@link resolveMx}, and so on. For more details, see\n     * [RFC 8482](https://tools.ietf.org/html/rfc8482).\n     */\n    export function resolveAny(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void,\n    ): void;\n    export namespace resolveAny {\n        function __promisify__(hostname: string): Promise<AnyRecord[]>;\n    }\n    /**\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\n     * array of host names.\n     *\n     * On error, `err` is an [`Error`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) object, where `err.code` is\n     * one of the [DNS error codes](https://nodejs.org/docs/latest-v22.x/api/dns.html#error-codes).\n     * @since v0.1.16\n     */\n    export function reverse(\n        ip: string,\n        callback: (err: NodeJS.ErrnoException | null, hostnames: string[]) => void,\n    ): void;\n    /**\n     * Get the default value for `order` in {@link lookup} and [`dnsPromises.lookup()`](https://nodejs.org/docs/latest-v22.x/api/dns.html#dnspromiseslookuphostname-options).\n     * The value could be:\n     *\n     * * `ipv4first`: for `order` defaulting to `ipv4first`.\n     * * `ipv6first`: for `order` defaulting to `ipv6first`.\n     * * `verbatim`: for `order` defaulting to `verbatim`.\n     * @since v18.17.0\n     */\n    export function getDefaultResultOrder(): \"ipv4first\" | \"ipv6first\" | \"verbatim\";\n    /**\n     * Sets the IP address and port of servers to be used when performing DNS\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\n     *\n     * ```js\n     * dns.setServers([\n     *   '4.4.4.4',\n     *   '[2001:4860:4860::8888]',\n     *   '4.4.4.4:1053',\n     *   '[2001:4860:4860::8888]:1053',\n     * ]);\n     * ```\n     *\n     * An error will be thrown if an invalid address is provided.\n     *\n     * The `dns.setServers()` method must not be called while a DNS query is in\n     * progress.\n     *\n     * The {@link setServers} method affects only {@link resolve}, `dns.resolve*()` and {@link reverse} (and specifically _not_ {@link lookup}).\n     *\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\n     * That is, if attempting to resolve with the first server provided results in a `NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\n     * subsequent servers provided. Fallback DNS servers will only be used if the\n     * earlier ones time out or result in some other error.\n     * @since v0.11.3\n     * @param servers array of [RFC 5952](https://datatracker.ietf.org/doc/html/rfc5952#section-6) formatted addresses\n     */\n    export function setServers(servers: readonly string[]): void;\n    /**\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\n     * that are currently configured for DNS resolution. A string will include a port\n     * section if a custom port is used.\n     *\n     * ```js\n     * [\n     *   '4.4.4.4',\n     *   '2001:4860:4860::8888',\n     *   '4.4.4.4:1053',\n     *   '[2001:4860:4860::8888]:1053',\n     * ]\n     * ```\n     * @since v0.11.3\n     */\n    export function getServers(): string[];\n    /**\n     * Set the default value of `order` in {@link lookup} and [`dnsPromises.lookup()`](https://nodejs.org/docs/latest-v22.x/api/dns.html#dnspromiseslookuphostname-options).\n     * The value could be:\n     *\n     * * `ipv4first`: sets default `order` to `ipv4first`.\n     * * `ipv6first`: sets default `order` to `ipv6first`.\n     * * `verbatim`: sets default `order` to `verbatim`.\n     *\n     * The default is `verbatim` and {@link setDefaultResultOrder} have higher\n     * priority than [`--dns-result-order`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--dns-result-orderorder). When using\n     * [worker threads](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html), {@link setDefaultResultOrder} from the main\n     * thread won't affect the default dns orders in workers.\n     * @since v16.4.0, v14.18.0\n     * @param order must be `'ipv4first'`, `'ipv6first'` or `'verbatim'`.\n     */\n    export function setDefaultResultOrder(order: \"ipv4first\" | \"ipv6first\" | \"verbatim\"): void;\n    // Error codes\n    export const NODATA: \"ENODATA\";\n    export const FORMERR: \"EFORMERR\";\n    export const SERVFAIL: \"ESERVFAIL\";\n    export const NOTFOUND: \"ENOTFOUND\";\n    export const NOTIMP: \"ENOTIMP\";\n    export const REFUSED: \"EREFUSED\";\n    export const BADQUERY: \"EBADQUERY\";\n    export const BADNAME: \"EBADNAME\";\n    export const BADFAMILY: \"EBADFAMILY\";\n    export const BADRESP: \"EBADRESP\";\n    export const CONNREFUSED: \"ECONNREFUSED\";\n    export const TIMEOUT: \"ETIMEOUT\";\n    export const EOF: \"EOF\";\n    export const FILE: \"EFILE\";\n    export const NOMEM: \"ENOMEM\";\n    export const DESTRUCTION: \"EDESTRUCTION\";\n    export const BADSTR: \"EBADSTR\";\n    export const BADFLAGS: \"EBADFLAGS\";\n    export const NONAME: \"ENONAME\";\n    export const BADHINTS: \"EBADHINTS\";\n    export const NOTINITIALIZED: \"ENOTINITIALIZED\";\n    export const LOADIPHLPAPI: \"ELOADIPHLPAPI\";\n    export const ADDRGETNETWORKPARAMS: \"EADDRGETNETWORKPARAMS\";\n    export const CANCELLED: \"ECANCELLED\";\n    export interface ResolverOptions {\n        /**\n         * Query timeout in milliseconds, or `-1` to use the default timeout.\n         */\n        timeout?: number | undefined;\n        /**\n         * The number of tries the resolver will try contacting each name server before giving up.\n         * @default 4\n         */\n        tries?: number;\n    }\n    /**\n     * An independent resolver for DNS requests.\n     *\n     * Creating a new resolver uses the default server settings. Setting\n     * the servers used for a resolver using [`resolver.setServers()`](https://nodejs.org/docs/latest-v22.x/api/dns.html#dnssetserversservers) does not affect\n     * other resolvers:\n     *\n     * ```js\n     * import { Resolver } from 'node:dns';\n     * const resolver = new Resolver();\n     * resolver.setServers(['4.4.4.4']);\n     *\n     * // This request will use the server at 4.4.4.4, independent of global settings.\n     * resolver.resolve4('example.org', (err, addresses) => {\n     *   // ...\n     * });\n     * ```\n     *\n     * The following methods from the `node:dns` module are available:\n     *\n     * * `resolver.getServers()`\n     * * `resolver.resolve()`\n     * * `resolver.resolve4()`\n     * * `resolver.resolve6()`\n     * * `resolver.resolveAny()`\n     * * `resolver.resolveCaa()`\n     * * `resolver.resolveCname()`\n     * * `resolver.resolveMx()`\n     * * `resolver.resolveNaptr()`\n     * * `resolver.resolveNs()`\n     * * `resolver.resolvePtr()`\n     * * `resolver.resolveSoa()`\n     * * `resolver.resolveSrv()`\n     * * `resolver.resolveTxt()`\n     * * `resolver.reverse()`\n     * * `resolver.setServers()`\n     * @since v8.3.0\n     */\n    export class Resolver {\n        constructor(options?: ResolverOptions);\n        /**\n         * Cancel all outstanding DNS queries made by this resolver. The corresponding\n         * callbacks will be called with an error with code `ECANCELLED`.\n         * @since v8.3.0\n         */\n        cancel(): void;\n        getServers: typeof getServers;\n        resolve: typeof resolve;\n        resolve4: typeof resolve4;\n        resolve6: typeof resolve6;\n        resolveAny: typeof resolveAny;\n        resolveCaa: typeof resolveCaa;\n        resolveCname: typeof resolveCname;\n        resolveMx: typeof resolveMx;\n        resolveNaptr: typeof resolveNaptr;\n        resolveNs: typeof resolveNs;\n        resolvePtr: typeof resolvePtr;\n        resolveSoa: typeof resolveSoa;\n        resolveSrv: typeof resolveSrv;\n        resolveTxt: typeof resolveTxt;\n        reverse: typeof reverse;\n        /**\n         * The resolver instance will send its requests from the specified IP address.\n         * This allows programs to specify outbound interfaces when used on multi-homed\n         * systems.\n         *\n         * If a v4 or v6 address is not specified, it is set to the default and the\n         * operating system will choose a local address automatically.\n         *\n         * The resolver will use the v4 local address when making requests to IPv4 DNS\n         * servers, and the v6 local address when making requests to IPv6 DNS servers.\n         * The `rrtype` of resolution requests has no impact on the local address used.\n         * @since v15.1.0, v14.17.0\n         * @param [ipv4='0.0.0.0'] A string representation of an IPv4 address.\n         * @param [ipv6='::0'] A string representation of an IPv6 address.\n         */\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\n        setServers: typeof setServers;\n    }\n    export { dnsPromises as promises };\n}\ndeclare module \"node:dns\" {\n    export * from \"dns\";\n}\n"
        }
    ]
}