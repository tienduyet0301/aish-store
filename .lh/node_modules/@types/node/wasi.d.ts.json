{
    "sourceFile": "node_modules/@types/node/wasi.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * **The `node:wasi` module does not currently provide the**\n * **comprehensive file system security properties provided by some WASI runtimes.**\n * **Full support for secure file system sandboxing may or may not be implemented in**\n * **future. In the mean time, do not rely on it to run untrusted code.**\n *\n * The WASI API provides an implementation of the [WebAssembly System Interface](https://wasi.dev/) specification. WASI gives WebAssembly applications access to the underlying\n * operating system via a collection of POSIX-like functions.\n *\n * ```js\n * import { readFile } from 'node:fs/promises';\n * import { WASI } from 'node:wasi';\n * import { argv, env } from 'node:process';\n *\n * const wasi = new WASI({\n *   version: 'preview1',\n *   args: argv,\n *   env,\n *   preopens: {\n *     '/local': '/some/real/path/that/wasm/can/access',\n *   },\n * });\n *\n * const wasm = await WebAssembly.compile(\n *   await readFile(new URL('./demo.wasm', import.meta.url)),\n * );\n * const instance = await WebAssembly.instantiate(wasm, wasi.getImportObject());\n *\n * wasi.start(instance);\n * ```\n *\n * To run the above example, create a new WebAssembly text format file named `demo.wat`:\n *\n * ```text\n * (module\n *     ;; Import the required fd_write WASI function which will write the given io vectors to stdout\n *     ;; The function signature for fd_write is:\n *     ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written\n *     (import \"wasi_snapshot_preview1\" \"fd_write\" (func $fd_write (param i32 i32 i32 i32) (result i32)))\n *\n *     (memory 1)\n *     (export \"memory\" (memory 0))\n *\n *     ;; Write 'hello world\\n' to memory at an offset of 8 bytes\n *     ;; Note the trailing newline which is required for the text to appear\n *     (data (i32.const 8) \"hello world\\n\")\n *\n *     (func $main (export \"_start\")\n *         ;; Creating a new io vector within linear memory\n *         (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\\n' string\n *         (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello world\\n' string\n *\n *         (call $fd_write\n *             (i32.const 1) ;; file_descriptor - 1 for stdout\n *             (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0\n *             (i32.const 1) ;; iovs_len - We're printing 1 string stored in an iov - so one.\n *             (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written\n *         )\n *         drop ;; Discard the number of bytes written from the top of the stack\n *     )\n * )\n * ```\n *\n * Use [wabt](https://github.com/WebAssembly/wabt) to compile `.wat` to `.wasm`\n *\n * ```bash\n * wat2wasm demo.wat\n * ```\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/wasi.js)\n */\ndeclare module \"wasi\" {\n    interface WASIOptions {\n        /**\n         * An array of strings that the WebAssembly application will\n         * see as command line arguments. The first argument is the virtual path to the\n         * WASI command itself.\n         * @default []\n         */\n        args?: string[] | undefined;\n        /**\n         * An object similar to `process.env` that the WebAssembly\n         * application will see as its environment.\n         * @default {}\n         */\n        env?: object | undefined;\n        /**\n         * This object represents the WebAssembly application's\n         * sandbox directory structure. The string keys of `preopens` are treated as\n         * directories within the sandbox. The corresponding values in `preopens` are\n         * the real paths to those directories on the host machine.\n         */\n        preopens?: NodeJS.Dict<string> | undefined;\n        /**\n         * By default, when WASI applications call `__wasi_proc_exit()`\n         * `wasi.start()` will return with the exit code specified rather than terminatng the process.\n         * Setting this option to `false` will cause the Node.js process to exit with\n         * the specified exit code instead.\n         * @default true\n         */\n        returnOnExit?: boolean | undefined;\n        /**\n         * The file descriptor used as standard input in the WebAssembly application.\n         * @default 0\n         */\n        stdin?: number | undefined;\n        /**\n         * The file descriptor used as standard output in the WebAssembly application.\n         * @default 1\n         */\n        stdout?: number | undefined;\n        /**\n         * The file descriptor used as standard error in the WebAssembly application.\n         * @default 2\n         */\n        stderr?: number | undefined;\n        /**\n         * The version of WASI requested.\n         * Currently the only supported versions are `'unstable'` and `'preview1'`. This option is mandatory.\n         * @since v19.8.0\n         */\n        version: \"unstable\" | \"preview1\";\n    }\n    /**\n     * The `WASI` class provides the WASI system call API and additional convenience\n     * methods for working with WASI-based applications. Each `WASI` instance\n     * represents a distinct environment.\n     * @since v13.3.0, v12.16.0\n     */\n    class WASI {\n        constructor(options?: WASIOptions);\n        /**\n         * Return an import object that can be passed to `WebAssembly.instantiate()` if no other WASM imports are needed beyond those provided by WASI.\n         *\n         * If version `unstable` was passed into the constructor it will return:\n         *\n         * ```js\n         * { wasi_unstable: wasi.wasiImport }\n         * ```\n         *\n         * If version `preview1` was passed into the constructor or no version was specified it will return:\n         *\n         * ```js\n         * { wasi_snapshot_preview1: wasi.wasiImport }\n         * ```\n         * @since v19.8.0\n         */\n        getImportObject(): object;\n        /**\n         * Attempt to begin execution of `instance` as a WASI command by invoking its `_start()` export. If `instance` does not contain a `_start()` export, or if `instance` contains an `_initialize()`\n         * export, then an exception is thrown.\n         *\n         * `start()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named `memory`. If\n         * `instance` does not have a `memory` export an exception is thrown.\n         *\n         * If `start()` is called more than once, an exception is thrown.\n         * @since v13.3.0, v12.16.0\n         */\n        start(instance: object): number; // TODO: avoid DOM dependency until WASM moved to own lib.\n        /**\n         * Attempt to initialize `instance` as a WASI reactor by invoking its `_initialize()` export, if it is present. If `instance` contains a `_start()` export, then an exception is thrown.\n         *\n         * `initialize()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named `memory`.\n         * If `instance` does not have a `memory` export an exception is thrown.\n         *\n         * If `initialize()` is called more than once, an exception is thrown.\n         * @since v14.6.0, v12.19.0\n         */\n        initialize(instance: object): void; // TODO: avoid DOM dependency until WASM moved to own lib.\n        /**\n         * `wasiImport` is an object that implements the WASI system call API. This object\n         * should be passed as the `wasi_snapshot_preview1` import during the instantiation\n         * of a [`WebAssembly.Instance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance).\n         * @since v13.3.0, v12.16.0\n         */\n        readonly wasiImport: NodeJS.Dict<any>; // TODO: Narrow to DOM types\n    }\n}\ndeclare module \"node:wasi\" {\n    export * from \"wasi\";\n}\n"
        }
    ]
}