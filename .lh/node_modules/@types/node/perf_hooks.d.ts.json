{
    "sourceFile": "node_modules/@types/node/perf_hooks.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * This module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for\n * Node.js-specific performance measurements.\n *\n * Node.js supports the following [Web Performance APIs](https://w3c.github.io/perf-timing-primer/):\n *\n * * [High Resolution Time](https://www.w3.org/TR/hr-time-2)\n * * [Performance Timeline](https://w3c.github.io/performance-timeline/)\n * * [User Timing](https://www.w3.org/TR/user-timing/)\n * * [Resource Timing](https://www.w3.org/TR/resource-timing-2/)\n *\n * ```js\n * import { PerformanceObserver, performance } from 'node:perf_hooks';\n *\n * const obs = new PerformanceObserver((items) => {\n *   console.log(items.getEntries()[0].duration);\n *   performance.clearMarks();\n * });\n * obs.observe({ type: 'measure' });\n * performance.measure('Start to Now');\n *\n * performance.mark('A');\n * doSomeLongRunningProcess(() => {\n *   performance.measure('A to Now', 'A');\n *\n *   performance.mark('B');\n *   performance.measure('A to B', 'A', 'B');\n * });\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/perf_hooks.js)\n */\ndeclare module \"perf_hooks\" {\n    import { AsyncResource } from \"node:async_hooks\";\n    type EntryType =\n        | \"dns\" // Node.js only\n        | \"function\" // Node.js only\n        | \"gc\" // Node.js only\n        | \"http2\" // Node.js only\n        | \"http\" // Node.js only\n        | \"mark\" // available on the Web\n        | \"measure\" // available on the Web\n        | \"net\" // Node.js only\n        | \"node\" // Node.js only\n        | \"resource\"; // available on the Web\n    interface NodeGCPerformanceDetail {\n        /**\n         * When `performanceEntry.entryType` is equal to 'gc', the `performance.kind` property identifies\n         * the type of garbage collection operation that occurred.\n         * See perf_hooks.constants for valid values.\n         */\n        readonly kind?: number | undefined;\n        /**\n         * When `performanceEntry.entryType` is equal to 'gc', the `performance.flags`\n         * property contains additional information about garbage collection operation.\n         * See perf_hooks.constants for valid values.\n         */\n        readonly flags?: number | undefined;\n    }\n    /**\n     * The constructor of this class is not exposed to users directly.\n     * @since v8.5.0\n     */\n    class PerformanceEntry {\n        protected constructor();\n        /**\n         * The total number of milliseconds elapsed for this entry. This value will not\n         * be meaningful for all Performance Entry types.\n         * @since v8.5.0\n         */\n        readonly duration: number;\n        /**\n         * The name of the performance entry.\n         * @since v8.5.0\n         */\n        readonly name: string;\n        /**\n         * The high resolution millisecond timestamp marking the starting time of the\n         * Performance Entry.\n         * @since v8.5.0\n         */\n        readonly startTime: number;\n        /**\n         * The type of the performance entry. It may be one of:\n         *\n         * * `'node'` (Node.js only)\n         * * `'mark'` (available on the Web)\n         * * `'measure'` (available on the Web)\n         * * `'gc'` (Node.js only)\n         * * `'function'` (Node.js only)\n         * * `'http2'` (Node.js only)\n         * * `'http'` (Node.js only)\n         * @since v8.5.0\n         */\n        readonly entryType: EntryType;\n        /**\n         * Additional detail specific to the `entryType`.\n         * @since v16.0.0\n         */\n        readonly detail?: NodeGCPerformanceDetail | unknown | undefined; // TODO: Narrow this based on entry type.\n        toJSON(): any;\n    }\n    /**\n     * Exposes marks created via the `Performance.mark()` method.\n     * @since v18.2.0, v16.17.0\n     */\n    class PerformanceMark extends PerformanceEntry {\n        readonly duration: 0;\n        readonly entryType: \"mark\";\n    }\n    /**\n     * Exposes measures created via the `Performance.measure()` method.\n     *\n     * The constructor of this class is not exposed to users directly.\n     * @since v18.2.0, v16.17.0\n     */\n    class PerformanceMeasure extends PerformanceEntry {\n        readonly entryType: \"measure\";\n    }\n    interface UVMetrics {\n        /**\n         * Number of event loop iterations.\n         */\n        readonly loopCount: number;\n        /**\n         * Number of events that have been processed by the event handler.\n         */\n        readonly events: number;\n        /**\n         * Number of events that were waiting to be processed when the event provider was called.\n         */\n        readonly eventsWaiting: number;\n    }\n    /**\n     * _This property is an extension by Node.js. It is not available in Web browsers._\n     *\n     * Provides timing details for Node.js itself. The constructor of this class\n     * is not exposed to users.\n     * @since v8.5.0\n     */\n    class PerformanceNodeTiming extends PerformanceEntry {\n        readonly entryType: \"node\";\n        /**\n         * The high resolution millisecond timestamp at which the Node.js process\n         * completed bootstrapping. If bootstrapping has not yet finished, the property\n         * has the value of -1.\n         * @since v8.5.0\n         */\n        readonly bootstrapComplete: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js environment was\n         * initialized.\n         * @since v8.5.0\n         */\n        readonly environment: number;\n        /**\n         * The high resolution millisecond timestamp of the amount of time the event loop\n         * has been idle within the event loop's event provider (e.g. `epoll_wait`). This\n         * does not take CPU usage into consideration. If the event loop has not yet\n         * started (e.g., in the first tick of the main script), the property has the\n         * value of 0.\n         * @since v14.10.0, v12.19.0\n         */\n        readonly idleTime: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js event loop\n         * exited. If the event loop has not yet exited, the property has the value of -1\\.\n         * It can only have a value of not -1 in a handler of the `'exit'` event.\n         * @since v8.5.0\n         */\n        readonly loopExit: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js event loop\n         * started. If the event loop has not yet started (e.g., in the first tick of the\n         * main script), the property has the value of -1.\n         * @since v8.5.0\n         */\n        readonly loopStart: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js process was initialized.\n         * @since v8.5.0\n         */\n        readonly nodeStart: number;\n        /**\n         * This is a wrapper to the `uv_metrics_info` function.\n         * It returns the current set of event loop metrics.\n         *\n         * It is recommended to use this property inside a function whose execution was\n         * scheduled using `setImmediate` to avoid collecting metrics before finishing all\n         * operations scheduled during the current loop iteration.\n         * @since v22.8.0, v20.18.0\n         */\n        readonly uvMetricsInfo: UVMetrics;\n        /**\n         * The high resolution millisecond timestamp at which the V8 platform was\n         * initialized.\n         * @since v8.5.0\n         */\n        readonly v8Start: number;\n    }\n    interface EventLoopUtilization {\n        idle: number;\n        active: number;\n        utilization: number;\n    }\n    /**\n     * @param utilization1 The result of a previous call to `eventLoopUtilization()`.\n     * @param utilization2 The result of a previous call to `eventLoopUtilization()` prior to `utilization1`.\n     */\n    type EventLoopUtilityFunction = (\n        utilization1?: EventLoopUtilization,\n        utilization2?: EventLoopUtilization,\n    ) => EventLoopUtilization;\n    interface MarkOptions {\n        /**\n         * Additional optional detail to include with the mark.\n         */\n        detail?: unknown | undefined;\n        /**\n         * An optional timestamp to be used as the mark time.\n         * @default `performance.now()`\n         */\n        startTime?: number | undefined;\n    }\n    interface MeasureOptions {\n        /**\n         * Additional optional detail to include with the mark.\n         */\n        detail?: unknown | undefined;\n        /**\n         * Duration between start and end times.\n         */\n        duration?: number | undefined;\n        /**\n         * Timestamp to be used as the end time, or a string identifying a previously recorded mark.\n         */\n        end?: number | string | undefined;\n        /**\n         * Timestamp to be used as the start time, or a string identifying a previously recorded mark.\n         */\n        start?: number | string | undefined;\n    }\n    interface TimerifyOptions {\n        /**\n         * A histogram object created using `perf_hooks.createHistogram()` that will record runtime\n         * durations in nanoseconds.\n         */\n        histogram?: RecordableHistogram | undefined;\n    }\n    interface Performance {\n        /**\n         * If `name` is not provided, removes all `PerformanceMark` objects from the Performance Timeline.\n         * If `name` is provided, removes only the named mark.\n         * @since v8.5.0\n         */\n        clearMarks(name?: string): void;\n        /**\n         * If `name` is not provided, removes all `PerformanceMeasure` objects from the Performance Timeline.\n         * If `name` is provided, removes only the named measure.\n         * @since v16.7.0\n         */\n        clearMeasures(name?: string): void;\n        /**\n         * If `name` is not provided, removes all `PerformanceResourceTiming` objects from the Resource Timeline.\n         * If `name` is provided, removes only the named resource.\n         * @since v18.2.0, v16.17.0\n         */\n        clearResourceTimings(name?: string): void;\n        /**\n         * eventLoopUtilization is similar to CPU utilization except that it is calculated using high precision wall-clock time.\n         * It represents the percentage of time the event loop has spent outside the event loop's event provider (e.g. epoll_wait).\n         * No other CPU idle time is taken into consideration.\n         */\n        eventLoopUtilization: EventLoopUtilityFunction;\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`.\n         * If you are only interested in performance entries of certain types or that have certain names, see\n         * `performance.getEntriesByType()` and `performance.getEntriesByName()`.\n         * @since v16.7.0\n         */\n        getEntries(): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\n         * whose `performanceEntry.name` is equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to `type`.\n         * @param name\n         * @param type\n         * @since v16.7.0\n         */\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\n         * whose `performanceEntry.entryType` is equal to `type`.\n         * @param type\n         * @since v16.7.0\n         */\n        getEntriesByType(type: EntryType): PerformanceEntry[];\n        /**\n         * Creates a new `PerformanceMark` entry in the Performance Timeline.\n         * A `PerformanceMark` is a subclass of `PerformanceEntry` whose `performanceEntry.entryType` is always `'mark'`,\n         * and whose `performanceEntry.duration` is always `0`.\n         * Performance marks are used to mark specific significant moments in the Performance Timeline.\n         *\n         * The created `PerformanceMark` entry is put in the global Performance Timeline and can be queried with\n         * `performance.getEntries`, `performance.getEntriesByName`, and `performance.getEntriesByType`. When the observation is\n         * performed, the entries should be cleared from the global Performance Timeline manually with `performance.clearMarks`.\n         * @param name\n         */\n        mark(name: string, options?: MarkOptions): PerformanceMark;\n        /**\n         * Creates a new `PerformanceResourceTiming` entry in the Resource Timeline.\n         * A `PerformanceResourceTiming` is a subclass of `PerformanceEntry` whose `performanceEntry.entryType` is always `'resource'`.\n         * Performance resources are used to mark moments in the Resource Timeline.\n         * @param timingInfo [Fetch Timing Info](https://fetch.spec.whatwg.org/#fetch-timing-info)\n         * @param requestedUrl The resource url\n         * @param initiatorType The initiator name, e.g: 'fetch'\n         * @param global\n         * @param cacheMode The cache mode must be an empty string ('') or 'local'\n         * @param bodyInfo [Fetch Response Body Info](https://fetch.spec.whatwg.org/#response-body-info)\n         * @param responseStatus The response's status code\n         * @param deliveryType The delivery type. Default: ''.\n         * @since v18.2.0, v16.17.0\n         */\n        markResourceTiming(\n            timingInfo: object,\n            requestedUrl: string,\n            initiatorType: string,\n            global: object,\n            cacheMode: \"\" | \"local\",\n            bodyInfo: object,\n            responseStatus: number,\n            deliveryType?: string,\n        ): PerformanceResourceTiming;\n        /**\n         * Creates a new PerformanceMeasure entry in the Performance Timeline.\n         * A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure',\n         * and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.\n         *\n         * The startMark argument may identify any existing PerformanceMark in the the Performance Timeline, or may identify\n         * any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist,\n         * then startMark is set to timeOrigin by default.\n         *\n         * The endMark argument must identify any existing PerformanceMark in the the Performance Timeline or any of the timestamp\n         * properties provided by the PerformanceNodeTiming class. If the named endMark does not exist, an error will be thrown.\n         * @param name\n         * @param startMark\n         * @param endMark\n         * @return The PerformanceMeasure entry that was created\n         */\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure;\n        measure(name: string, options: MeasureOptions): PerformanceMeasure;\n        /**\n         * _This property is an extension by Node.js. It is not available in Web browsers._\n         *\n         * An instance of the `PerformanceNodeTiming` class that provides performance metrics for specific Node.js operational milestones.\n         * @since v8.5.0\n         */\n        readonly nodeTiming: PerformanceNodeTiming;\n        /**\n         * Returns the current high resolution millisecond timestamp, where 0 represents the start of the current `node` process.\n         * @since v8.5.0\n         */\n        now(): number;\n        /**\n         * Sets the global performance resource timing buffer size to the specified number of \"resource\" type performance entry objects.\n         *\n         * By default the max buffer size is set to 250.\n         * @since v18.8.0\n         */\n        setResourceTimingBufferSize(maxSize: number): void;\n        /**\n         * The [`timeOrigin`](https://w3c.github.io/hr-time/#dom-performance-timeorigin) specifies the high resolution millisecond timestamp\n         * at which the current `node` process began, measured in Unix time.\n         * @since v8.5.0\n         */\n        readonly timeOrigin: number;\n        /**\n         * _This property is an extension by Node.js. It is not available in Web browsers._\n         *\n         * Wraps a function within a new function that measures the running time of the wrapped function.\n         * A `PerformanceObserver` must be subscribed to the `'function'` event type in order for the timing details to be accessed.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * function someFunction() {\n         *   console.log('hello world');\n         * }\n         *\n         * const wrapped = performance.timerify(someFunction);\n         *\n         * const obs = new PerformanceObserver((list) => {\n         *   console.log(list.getEntries()[0].duration);\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   obs.disconnect();\n         * });\n         * obs.observe({ entryTypes: ['function'] });\n         *\n         * // A performance timeline entry will be created\n         * wrapped();\n         * ```\n         *\n         * If the wrapped function returns a promise, a finally handler will be attached to the promise and the duration will be reported\n         * once the finally handler is invoked.\n         * @param fn\n         */\n        timerify<T extends (...params: any[]) => any>(fn: T, options?: TimerifyOptions): T;\n        /**\n         * An object which is JSON representation of the performance object. It is similar to\n         * [`window.performance.toJSON`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON) in browsers.\n         * @since v16.1.0\n         */\n        toJSON(): any;\n    }\n    class PerformanceObserverEntryList {\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order\n         * with respect to `performanceEntry.startTime`.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\n         *   console.log(perfObserverList.getEntries());\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'test',\n         *    *     entryType: 'mark',\n         *    *     startTime: 81.465639,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   },\n         *    *   PerformanceEntry {\n         *    *     name: 'meow',\n         *    *     entryType: 'mark',\n         *    *     startTime: 81.860064,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   observer.disconnect();\n         * });\n         * obs.observe({ type: 'mark' });\n         *\n         * performance.mark('test');\n         * performance.mark('meow');\n         * ```\n         * @since v8.5.0\n         */\n        getEntries(): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.name` is\n         * equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to`type`.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\n         *   console.log(perfObserverList.getEntriesByName('meow'));\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'meow',\n         *    *     entryType: 'mark',\n         *    *     startTime: 98.545991,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   console.log(perfObserverList.getEntriesByName('nope')); // []\n         *\n         *   console.log(perfObserverList.getEntriesByName('test', 'mark'));\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'test',\n         *    *     entryType: 'mark',\n         *    *     startTime: 63.518931,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   console.log(perfObserverList.getEntriesByName('test', 'measure')); // []\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   observer.disconnect();\n         * });\n         * obs.observe({ entryTypes: ['mark', 'measure'] });\n         *\n         * performance.mark('test');\n         * performance.mark('meow');\n         * ```\n         * @since v8.5.0\n         */\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.entryType` is equal to `type`.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\n         *   console.log(perfObserverList.getEntriesByType('mark'));\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'test',\n         *    *     entryType: 'mark',\n         *    *     startTime: 55.897834,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   },\n         *    *   PerformanceEntry {\n         *    *     name: 'meow',\n         *    *     entryType: 'mark',\n         *    *     startTime: 56.350146,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   observer.disconnect();\n         * });\n         * obs.observe({ type: 'mark' });\n         *\n         * performance.mark('test');\n         * performance.mark('meow');\n         * ```\n         * @since v8.5.0\n         */\n        getEntriesByType(type: EntryType): PerformanceEntry[];\n    }\n    type PerformanceObserverCallback = (list: PerformanceObserverEntryList, observer: PerformanceObserver) => void;\n    /**\n     * @since v8.5.0\n     */\n    class PerformanceObserver extends AsyncResource {\n        constructor(callback: PerformanceObserverCallback);\n        /**\n         * Disconnects the `PerformanceObserver` instance from all notifications.\n         * @since v8.5.0\n         */\n        disconnect(): void;\n        /**\n         * Subscribes the `PerformanceObserver` instance to notifications of new `PerformanceEntry` instances identified either by `options.entryTypes` or `options.type`:\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((list, observer) => {\n         *   // Called once asynchronously. `list` contains three items.\n         * });\n         * obs.observe({ type: 'mark' });\n         *\n         * for (let n = 0; n < 3; n++)\n         *   performance.mark(`test${n}`);\n         * ```\n         * @since v8.5.0\n         */\n        observe(\n            options:\n                | {\n                    entryTypes: readonly EntryType[];\n                    buffered?: boolean | undefined;\n                }\n                | {\n                    type: EntryType;\n                    buffered?: boolean | undefined;\n                },\n        ): void;\n        /**\n         * @since v16.0.0\n         * @returns Current list of entries stored in the performance observer, emptying it out.\n         */\n        takeRecords(): PerformanceEntry[];\n    }\n    /**\n     * Provides detailed network timing data regarding the loading of an application's resources.\n     *\n     * The constructor of this class is not exposed to users directly.\n     * @since v18.2.0, v16.17.0\n     */\n    class PerformanceResourceTiming extends PerformanceEntry {\n        readonly entryType: \"resource\";\n        protected constructor();\n        /**\n         * The high resolution millisecond timestamp at immediately before dispatching the `fetch`\n         * request. If the resource is not intercepted by a worker the property will always return 0.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly workerStart: number;\n        /**\n         * The high resolution millisecond timestamp that represents the start time of the fetch which\n         * initiates the redirect.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly redirectStart: number;\n        /**\n         * The high resolution millisecond timestamp that will be created immediately after receiving\n         * the last byte of the response of the last redirect.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly redirectEnd: number;\n        /**\n         * The high resolution millisecond timestamp immediately before the Node.js starts to fetch the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly fetchStart: number;\n        /**\n         * The high resolution millisecond timestamp immediately before the Node.js starts the domain name lookup\n         * for the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly domainLookupStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately after the Node.js finished\n         * the domain name lookup for the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly domainLookupEnd: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately before Node.js starts to\n         * establish the connection to the server to retrieve the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly connectStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately after Node.js finishes\n         * establishing the connection to the server to retrieve the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly connectEnd: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately before Node.js starts the\n         * handshake process to secure the current connection.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly secureConnectionStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately before Node.js receives the\n         * first byte of the response from the server.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly requestStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately after Node.js receives the\n         * last byte of the resource or immediately before the transport connection is closed, whichever comes first.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly responseEnd: number;\n        /**\n         * A number representing the size (in octets) of the fetched resource. The size includes the response header\n         * fields plus the response payload body.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly transferSize: number;\n        /**\n         * A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before\n         * removing any applied content-codings.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly encodedBodySize: number;\n        /**\n         * A number representing the size (in octets) received from the fetch (HTTP or cache), of the message body, after\n         * removing any applied content-codings.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly decodedBodySize: number;\n        /**\n         * Returns a `object` that is the JSON representation of the `PerformanceResourceTiming` object\n         * @since v18.2.0, v16.17.0\n         */\n        toJSON(): any;\n    }\n    namespace constants {\n        const NODE_PERFORMANCE_GC_MAJOR: number;\n        const NODE_PERFORMANCE_GC_MINOR: number;\n        const NODE_PERFORMANCE_GC_INCREMENTAL: number;\n        const NODE_PERFORMANCE_GC_WEAKCB: number;\n        const NODE_PERFORMANCE_GC_FLAGS_NO: number;\n        const NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED: number;\n        const NODE_PERFORMANCE_GC_FLAGS_FORCED: number;\n        const NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING: number;\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE: number;\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY: number;\n        const NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE: number;\n    }\n    const performance: Performance;\n    interface EventLoopMonitorOptions {\n        /**\n         * The sampling rate in milliseconds.\n         * Must be greater than zero.\n         * @default 10\n         */\n        resolution?: number | undefined;\n    }\n    interface Histogram {\n        /**\n         * The number of samples recorded by the histogram.\n         * @since v17.4.0, v16.14.0\n         */\n        readonly count: number;\n        /**\n         * The number of samples recorded by the histogram.\n         * v17.4.0, v16.14.0\n         */\n        readonly countBigInt: bigint;\n        /**\n         * The number of times the event loop delay exceeded the maximum 1 hour event\n         * loop delay threshold.\n         * @since v11.10.0\n         */\n        readonly exceeds: number;\n        /**\n         * The number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.\n         * @since v17.4.0, v16.14.0\n         */\n        readonly exceedsBigInt: bigint;\n        /**\n         * The maximum recorded event loop delay.\n         * @since v11.10.0\n         */\n        readonly max: number;\n        /**\n         * The maximum recorded event loop delay.\n         * v17.4.0, v16.14.0\n         */\n        readonly maxBigInt: number;\n        /**\n         * The mean of the recorded event loop delays.\n         * @since v11.10.0\n         */\n        readonly mean: number;\n        /**\n         * The minimum recorded event loop delay.\n         * @since v11.10.0\n         */\n        readonly min: number;\n        /**\n         * The minimum recorded event loop delay.\n         * v17.4.0, v16.14.0\n         */\n        readonly minBigInt: bigint;\n        /**\n         * Returns the value at the given percentile.\n         * @since v11.10.0\n         * @param percentile A percentile value in the range (0, 100].\n         */\n        percentile(percentile: number): number;\n        /**\n         * Returns the value at the given percentile.\n         * @since v17.4.0, v16.14.0\n         * @param percentile A percentile value in the range (0, 100].\n         */\n        percentileBigInt(percentile: number): bigint;\n        /**\n         * Returns a `Map` object detailing the accumulated percentile distribution.\n         * @since v11.10.0\n         */\n        readonly percentiles: Map<number, number>;\n        /**\n         * Returns a `Map` object detailing the accumulated percentile distribution.\n         * @since v17.4.0, v16.14.0\n         */\n        readonly percentilesBigInt: Map<bigint, bigint>;\n        /**\n         * Resets the collected histogram data.\n         * @since v11.10.0\n         */\n        reset(): void;\n        /**\n         * The standard deviation of the recorded event loop delays.\n         * @since v11.10.0\n         */\n        readonly stddev: number;\n    }\n    interface IntervalHistogram extends Histogram {\n        /**\n         * Enables the update interval timer. Returns `true` if the timer was\n         * started, `false` if it was already started.\n         * @since v11.10.0\n         */\n        enable(): boolean;\n        /**\n         * Disables the update interval timer. Returns `true` if the timer was\n         * stopped, `false` if it was already stopped.\n         * @since v11.10.0\n         */\n        disable(): boolean;\n    }\n    interface RecordableHistogram extends Histogram {\n        /**\n         * @since v15.9.0, v14.18.0\n         * @param val The amount to record in the histogram.\n         */\n        record(val: number | bigint): void;\n        /**\n         * Calculates the amount of time (in nanoseconds) that has passed since the\n         * previous call to `recordDelta()` and records that amount in the histogram.\n         * @since v15.9.0, v14.18.0\n         */\n        recordDelta(): void;\n        /**\n         * Adds the values from `other` to this histogram.\n         * @since v17.4.0, v16.14.0\n         */\n        add(other: RecordableHistogram): void;\n    }\n    /**\n     * _This property is an extension by Node.js. It is not available in Web browsers._\n     *\n     * Creates an `IntervalHistogram` object that samples and reports the event loop\n     * delay over time. The delays will be reported in nanoseconds.\n     *\n     * Using a timer to detect approximate event loop delay works because the\n     * execution of timers is tied specifically to the lifecycle of the libuv\n     * event loop. That is, a delay in the loop will cause a delay in the execution\n     * of the timer, and those delays are specifically what this API is intended to\n     * detect.\n     *\n     * ```js\n     * import { monitorEventLoopDelay } from 'node:perf_hooks';\n     * const h = monitorEventLoopDelay({ resolution: 20 });\n     * h.enable();\n     * // Do something.\n     * h.disable();\n     * console.log(h.min);\n     * console.log(h.max);\n     * console.log(h.mean);\n     * console.log(h.stddev);\n     * console.log(h.percentiles);\n     * console.log(h.percentile(50));\n     * console.log(h.percentile(99));\n     * ```\n     * @since v11.10.0\n     */\n    function monitorEventLoopDelay(options?: EventLoopMonitorOptions): IntervalHistogram;\n    interface CreateHistogramOptions {\n        /**\n         * The minimum recordable value. Must be an integer value greater than 0.\n         * @default 1\n         */\n        min?: number | bigint | undefined;\n        /**\n         * The maximum recordable value. Must be an integer value greater than min.\n         * @default Number.MAX_SAFE_INTEGER\n         */\n        max?: number | bigint | undefined;\n        /**\n         * The number of accuracy digits. Must be a number between 1 and 5.\n         * @default 3\n         */\n        figures?: number | undefined;\n    }\n    /**\n     * Returns a `RecordableHistogram`.\n     * @since v15.9.0, v14.18.0\n     */\n    function createHistogram(options?: CreateHistogramOptions): RecordableHistogram;\n    import {\n        performance as _performance,\n        PerformanceEntry as _PerformanceEntry,\n        PerformanceMark as _PerformanceMark,\n        PerformanceMeasure as _PerformanceMeasure,\n        PerformanceObserver as _PerformanceObserver,\n        PerformanceObserverEntryList as _PerformanceObserverEntryList,\n        PerformanceResourceTiming as _PerformanceResourceTiming,\n    } from \"perf_hooks\";\n    global {\n        /**\n         * `PerformanceEntry` is a global reference for `import { PerformanceEntry } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceentry\n         * @since v19.0.0\n         */\n        var PerformanceEntry: typeof globalThis extends {\n            onmessage: any;\n            PerformanceEntry: infer T;\n        } ? T\n            : typeof _PerformanceEntry;\n        /**\n         * `PerformanceMark` is a global reference for `import { PerformanceMark } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performancemark\n         * @since v19.0.0\n         */\n        var PerformanceMark: typeof globalThis extends {\n            onmessage: any;\n            PerformanceMark: infer T;\n        } ? T\n            : typeof _PerformanceMark;\n        /**\n         * `PerformanceMeasure` is a global reference for `import { PerformanceMeasure } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performancemeasure\n         * @since v19.0.0\n         */\n        var PerformanceMeasure: typeof globalThis extends {\n            onmessage: any;\n            PerformanceMeasure: infer T;\n        } ? T\n            : typeof _PerformanceMeasure;\n        /**\n         * `PerformanceObserver` is a global reference for `import { PerformanceObserver } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceobserver\n         * @since v19.0.0\n         */\n        var PerformanceObserver: typeof globalThis extends {\n            onmessage: any;\n            PerformanceObserver: infer T;\n        } ? T\n            : typeof _PerformanceObserver;\n        /**\n         * `PerformanceObserverEntryList` is a global reference for `import { PerformanceObserverEntryList } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceobserverentrylist\n         * @since v19.0.0\n         */\n        var PerformanceObserverEntryList: typeof globalThis extends {\n            onmessage: any;\n            PerformanceObserverEntryList: infer T;\n        } ? T\n            : typeof _PerformanceObserverEntryList;\n        /**\n         * `PerformanceResourceTiming` is a global reference for `import { PerformanceResourceTiming } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceresourcetiming\n         * @since v19.0.0\n         */\n        var PerformanceResourceTiming: typeof globalThis extends {\n            onmessage: any;\n            PerformanceResourceTiming: infer T;\n        } ? T\n            : typeof _PerformanceResourceTiming;\n        /**\n         * `performance` is a global reference for `import { performance } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performance\n         * @since v16.0.0\n         */\n        var performance: typeof globalThis extends {\n            onmessage: any;\n            performance: infer T;\n        } ? T\n            : typeof _performance;\n    }\n}\ndeclare module \"node:perf_hooks\" {\n    export * from \"perf_hooks\";\n}\n"
        }
    ]
}