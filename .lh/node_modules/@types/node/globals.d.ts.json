{
    "sourceFile": "node_modules/@types/node/globals.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export {}; // Make this a module\n\n// #region Fetch and friends\n// Conditional type aliases, used at the end of this file.\n// Will either be empty if lib.dom (or lib.webworker) is included, or the undici version otherwise.\ntype _Request = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").Request;\ntype _Response = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").Response;\ntype _FormData = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").FormData;\ntype _Headers = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").Headers;\ntype _MessageEvent = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").MessageEvent;\ntype _RequestInit = typeof globalThis extends { onmessage: any } ? {}\n    : import(\"undici-types\").RequestInit;\ntype _ResponseInit = typeof globalThis extends { onmessage: any } ? {}\n    : import(\"undici-types\").ResponseInit;\ntype _WebSocket = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").WebSocket;\ntype _EventSource = typeof globalThis extends { onmessage: any } ? {} : import(\"undici-types\").EventSource;\n// #endregion Fetch and friends\n\n// Conditional type definitions for webstorage interface, which conflicts with lib.dom otherwise.\ntype _Storage = typeof globalThis extends { onabort: any } ? {} : {\n    /**\n     * Returns the number of key/value pairs.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/length)\n     */\n    readonly length: number;\n    /**\n     * Removes all key/value pairs, if there are any.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/clear)\n     */\n    clear(): void;\n    /**\n     * Returns the current value associated with the given key, or null if the given key does not exist.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/getItem)\n     */\n    getItem(key: string): string | null;\n    /**\n     * Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/key)\n     */\n    key(index: number): string | null;\n    /**\n     * Removes the key/value pair with the given key, if a key/value pair with the given key exists.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)\n     */\n    removeItem(key: string): void;\n    /**\n     * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n     *\n     * Throws a \"QuotaExceededError\" DOMException exception if the new value couldn't be set.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/setItem)\n     */\n    setItem(key: string, value: string): void;\n    [key: string]: any;\n};\n\n// #region DOMException\ntype _DOMException = typeof globalThis extends { onmessage: any } ? {} : NodeDOMException;\ninterface NodeDOMException extends Error {\n    /**\n     * @deprecated\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/code)\n     */\n    readonly code: number;\n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message) */\n    readonly message: string;\n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name) */\n    readonly name: string;\n    readonly INDEX_SIZE_ERR: 1;\n    readonly DOMSTRING_SIZE_ERR: 2;\n    readonly HIERARCHY_REQUEST_ERR: 3;\n    readonly WRONG_DOCUMENT_ERR: 4;\n    readonly INVALID_CHARACTER_ERR: 5;\n    readonly NO_DATA_ALLOWED_ERR: 6;\n    readonly NO_MODIFICATION_ALLOWED_ERR: 7;\n    readonly NOT_FOUND_ERR: 8;\n    readonly NOT_SUPPORTED_ERR: 9;\n    readonly INUSE_ATTRIBUTE_ERR: 10;\n    readonly INVALID_STATE_ERR: 11;\n    readonly SYNTAX_ERR: 12;\n    readonly INVALID_MODIFICATION_ERR: 13;\n    readonly NAMESPACE_ERR: 14;\n    readonly INVALID_ACCESS_ERR: 15;\n    readonly VALIDATION_ERR: 16;\n    readonly TYPE_MISMATCH_ERR: 17;\n    readonly SECURITY_ERR: 18;\n    readonly NETWORK_ERR: 19;\n    readonly ABORT_ERR: 20;\n    readonly URL_MISMATCH_ERR: 21;\n    readonly QUOTA_EXCEEDED_ERR: 22;\n    readonly TIMEOUT_ERR: 23;\n    readonly INVALID_NODE_TYPE_ERR: 24;\n    readonly DATA_CLONE_ERR: 25;\n}\ninterface NodeDOMExceptionConstructor {\n    prototype: DOMException;\n    new(message?: string, nameOrOptions?: string | { name?: string; cause?: unknown }): DOMException;\n    readonly INDEX_SIZE_ERR: 1;\n    readonly DOMSTRING_SIZE_ERR: 2;\n    readonly HIERARCHY_REQUEST_ERR: 3;\n    readonly WRONG_DOCUMENT_ERR: 4;\n    readonly INVALID_CHARACTER_ERR: 5;\n    readonly NO_DATA_ALLOWED_ERR: 6;\n    readonly NO_MODIFICATION_ALLOWED_ERR: 7;\n    readonly NOT_FOUND_ERR: 8;\n    readonly NOT_SUPPORTED_ERR: 9;\n    readonly INUSE_ATTRIBUTE_ERR: 10;\n    readonly INVALID_STATE_ERR: 11;\n    readonly SYNTAX_ERR: 12;\n    readonly INVALID_MODIFICATION_ERR: 13;\n    readonly NAMESPACE_ERR: 14;\n    readonly INVALID_ACCESS_ERR: 15;\n    readonly VALIDATION_ERR: 16;\n    readonly TYPE_MISMATCH_ERR: 17;\n    readonly SECURITY_ERR: 18;\n    readonly NETWORK_ERR: 19;\n    readonly ABORT_ERR: 20;\n    readonly URL_MISMATCH_ERR: 21;\n    readonly QUOTA_EXCEEDED_ERR: 22;\n    readonly TIMEOUT_ERR: 23;\n    readonly INVALID_NODE_TYPE_ERR: 24;\n    readonly DATA_CLONE_ERR: 25;\n}\n// #endregion DOMException\n\ndeclare global {\n    // Declare \"static\" methods in Error\n    interface ErrorConstructor {\n        /** Create .stack property on a target object */\n        captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n\n        /**\n         * Optional override for formatting stack traces\n         *\n         * @see https://v8.dev/docs/stack-trace-api#customizing-stack-traces\n         */\n        prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;\n\n        stackTraceLimit: number;\n    }\n\n    /*-----------------------------------------------*\n    *                                               *\n    *                   GLOBAL                      *\n    *                                               *\n    ------------------------------------------------*/\n\n    var global: typeof globalThis;\n\n    var process: NodeJS.Process;\n    var console: Console;\n\n    interface GCFunction {\n        (options: {\n            execution?: \"sync\";\n            flavor?: \"regular\" | \"last-resort\";\n            type?: \"major-snapshot\" | \"major\" | \"minor\";\n            filename?: string;\n        }): void;\n        (options: {\n            execution: \"async\";\n            flavor?: \"regular\" | \"last-resort\";\n            type?: \"major-snapshot\" | \"major\" | \"minor\";\n            filename?: string;\n        }): Promise<void>;\n        (options?: boolean): void;\n    }\n\n    /**\n     * Only available if `--expose-gc` is passed to the process.\n     */\n    var gc: undefined | GCFunction;\n\n    // #region borrowed\n    // from https://github.com/microsoft/TypeScript/blob/38da7c600c83e7b31193a62495239a0fe478cb67/lib/lib.webworker.d.ts#L633 until moved to separate lib\n    /** A controller object that allows you to abort one or more DOM requests as and when desired. */\n    interface AbortController {\n        /**\n         * Returns the AbortSignal object associated with this object.\n         */\n\n        readonly signal: AbortSignal;\n        /**\n         * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\n         */\n        abort(reason?: any): void;\n    }\n\n    /** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */\n    interface AbortSignal extends EventTarget {\n        /**\n         * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.\n         */\n        readonly aborted: boolean;\n        readonly reason: any;\n        onabort: null | ((this: AbortSignal, event: Event) => any);\n        throwIfAborted(): void;\n    }\n\n    var AbortController: typeof globalThis extends { onmessage: any; AbortController: infer T } ? T\n        : {\n            prototype: AbortController;\n            new(): AbortController;\n        };\n\n    var AbortSignal: typeof globalThis extends { onmessage: any; AbortSignal: infer T } ? T\n        : {\n            prototype: AbortSignal;\n            new(): AbortSignal;\n            abort(reason?: any): AbortSignal;\n            timeout(milliseconds: number): AbortSignal;\n            any(signals: AbortSignal[]): AbortSignal;\n        };\n    // #endregion borrowed\n\n    // #region Storage\n    /**\n     * This Web Storage API interface provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage)\n     */\n    interface Storage extends _Storage {}\n\n    // Conditional on `onabort` rather than `onmessage`, in order to exclude lib.webworker\n    var Storage: typeof globalThis extends { onabort: any; Storage: infer T } ? T\n        : {\n            prototype: Storage;\n            new(): Storage;\n        };\n\n    /**\n     * A browser-compatible implementation of [`localStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage). Data is stored\n     * unencrypted in the file specified by the `--localstorage-file` CLI flag.\n     * The maximum amount of data that can be stored is 10 MB.\n     * Any modification of this data outside of the Web Storage API is not supported.\n     * Enable this API with the `--experimental-webstorage` CLI flag.\n     * `localStorage` data is not stored per user or per request when used in the context\n     * of a server, it is shared across all users and requests.\n     * @since v22.4.0\n     */\n    var localStorage: Storage;\n\n    /**\n     * A browser-compatible implementation of [`sessionStorage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage). Data is stored in\n     * memory, with a storage quota of 10 MB. `sessionStorage` data persists only within\n     * the currently running process, and is not shared between workers.\n     * @since v22.4.0\n     */\n    var sessionStorage: Storage;\n    // #endregion Storage\n\n    /**\n     * @since v17.0.0\n     *\n     * Creates a deep clone of an object.\n     */\n    function structuredClone<T>(\n        value: T,\n        transfer?: { transfer: ReadonlyArray<import(\"worker_threads\").TransferListItem> },\n    ): T;\n\n    // #region DOMException\n    /**\n     * @since v17.0.0\n     * An abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API.\n     *\n     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)\n     */\n    interface DOMException extends _DOMException {}\n\n    /**\n     * @since v17.0.0\n     *\n     * The WHATWG `DOMException` class. See [DOMException](https://developer.mozilla.org/docs/Web/API/DOMException) for more details.\n     */\n    var DOMException: typeof globalThis extends { onmessage: any; DOMException: infer T } ? T\n        : NodeDOMExceptionConstructor;\n    // #endregion DOMException\n\n    /*----------------------------------------------*\n    *                                               *\n    *               GLOBAL INTERFACES               *\n    *                                               *\n    *-----------------------------------------------*/\n    namespace NodeJS {\n        interface CallSite {\n            /**\n             * Value of \"this\"\n             */\n            getThis(): unknown;\n\n            /**\n             * Type of \"this\" as a string.\n             * This is the name of the function stored in the constructor field of\n             * \"this\", if available.  Otherwise the object's [[Class]] internal\n             * property.\n             */\n            getTypeName(): string | null;\n\n            /**\n             * Current function\n             */\n            getFunction(): Function | undefined;\n\n            /**\n             * Name of the current function, typically its name property.\n             * If a name property is not available an attempt will be made to try\n             * to infer a name from the function's context.\n             */\n            getFunctionName(): string | null;\n\n            /**\n             * Name of the property [of \"this\" or one of its prototypes] that holds\n             * the current function\n             */\n            getMethodName(): string | null;\n\n            /**\n             * Name of the script [if this function was defined in a script]\n             */\n            getFileName(): string | undefined;\n\n            /**\n             * Current line number [if this function was defined in a script]\n             */\n            getLineNumber(): number | null;\n\n            /**\n             * Current column number [if this function was defined in a script]\n             */\n            getColumnNumber(): number | null;\n\n            /**\n             * A call site object representing the location where eval was called\n             * [if this function was created using a call to eval]\n             */\n            getEvalOrigin(): string | undefined;\n\n            /**\n             * Is this a toplevel invocation, that is, is \"this\" the global object?\n             */\n            isToplevel(): boolean;\n\n            /**\n             * Does this call take place in code defined by a call to eval?\n             */\n            isEval(): boolean;\n\n            /**\n             * Is this call in native V8 code?\n             */\n            isNative(): boolean;\n\n            /**\n             * Is this a constructor call?\n             */\n            isConstructor(): boolean;\n\n            /**\n             * is this an async call (i.e. await, Promise.all(), or Promise.any())?\n             */\n            isAsync(): boolean;\n\n            /**\n             * is this an async call to Promise.all()?\n             */\n            isPromiseAll(): boolean;\n\n            /**\n             * returns the index of the promise element that was followed in\n             * Promise.all() or Promise.any() for async stack traces, or null\n             * if the CallSite is not an async\n             */\n            getPromiseIndex(): number | null;\n\n            getScriptNameOrSourceURL(): string;\n            getScriptHash(): string;\n\n            getEnclosingColumnNumber(): number;\n            getEnclosingLineNumber(): number;\n            getPosition(): number;\n\n            toString(): string;\n        }\n\n        interface ErrnoException extends Error {\n            errno?: number | undefined;\n            code?: string | undefined;\n            path?: string | undefined;\n            syscall?: string | undefined;\n        }\n\n        interface ReadableStream extends EventEmitter {\n            readable: boolean;\n            read(size?: number): string | Buffer;\n            setEncoding(encoding: BufferEncoding): this;\n            pause(): this;\n            resume(): this;\n            isPaused(): boolean;\n            pipe<T extends WritableStream>(destination: T, options?: { end?: boolean | undefined }): T;\n            unpipe(destination?: WritableStream): this;\n            unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;\n            wrap(oldStream: ReadableStream): this;\n            [Symbol.asyncIterator](): NodeJS.AsyncIterator<string | Buffer>;\n        }\n\n        interface WritableStream extends EventEmitter {\n            writable: boolean;\n            write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\n            write(str: string, encoding?: BufferEncoding, cb?: (err?: Error | null) => void): boolean;\n            end(cb?: () => void): this;\n            end(data: string | Uint8Array, cb?: () => void): this;\n            end(str: string, encoding?: BufferEncoding, cb?: () => void): this;\n        }\n\n        interface ReadWriteStream extends ReadableStream, WritableStream {}\n\n        interface RefCounted {\n            ref(): this;\n            unref(): this;\n        }\n\n        interface Dict<T> {\n            [key: string]: T | undefined;\n        }\n\n        interface ReadOnlyDict<T> {\n            readonly [key: string]: T | undefined;\n        }\n\n        /** An iterable iterator returned by the Node.js API. */\n        // Default TReturn/TNext in v22 is `any`, for compatibility with the previously-used IterableIterator.\n        // TODO: In next major @types/node version, change default TReturn to undefined.\n        interface Iterator<T, TReturn = any, TNext = any> extends IteratorObject<T, TReturn, TNext> {\n            [Symbol.iterator](): NodeJS.Iterator<T, TReturn, TNext>;\n        }\n\n        /** An async iterable iterator returned by the Node.js API. */\n        // Default TReturn/TNext in v22 is `any`, for compatibility with the previously-used AsyncIterableIterator.\n        // TODO: In next major @types/node version, change default TReturn to undefined.\n        interface AsyncIterator<T, TReturn = any, TNext = any> extends AsyncIteratorObject<T, TReturn, TNext> {\n            [Symbol.asyncIterator](): NodeJS.AsyncIterator<T, TReturn, TNext>;\n        }\n    }\n\n    interface RequestInit extends _RequestInit {}\n\n    function fetch(\n        input: string | URL | globalThis.Request,\n        init?: RequestInit,\n    ): Promise<Response>;\n\n    interface Request extends _Request {}\n    var Request: typeof globalThis extends {\n        onmessage: any;\n        Request: infer T;\n    } ? T\n        : typeof import(\"undici-types\").Request;\n\n    interface ResponseInit extends _ResponseInit {}\n\n    interface Response extends _Response {}\n    var Response: typeof globalThis extends {\n        onmessage: any;\n        Response: infer T;\n    } ? T\n        : typeof import(\"undici-types\").Response;\n\n    interface FormData extends _FormData {}\n    var FormData: typeof globalThis extends {\n        onmessage: any;\n        FormData: infer T;\n    } ? T\n        : typeof import(\"undici-types\").FormData;\n\n    interface Headers extends _Headers {}\n    var Headers: typeof globalThis extends {\n        onmessage: any;\n        Headers: infer T;\n    } ? T\n        : typeof import(\"undici-types\").Headers;\n\n    interface MessageEvent extends _MessageEvent {}\n    /**\n     * @since v15.0.0\n     */\n    var MessageEvent: typeof globalThis extends {\n        onmessage: any;\n        MessageEvent: infer T;\n    } ? T\n        : typeof import(\"undici-types\").MessageEvent;\n\n    interface WebSocket extends _WebSocket {}\n    var WebSocket: typeof globalThis extends { onmessage: any; WebSocket: infer T } ? T\n        : typeof import(\"undici-types\").WebSocket;\n\n    interface EventSource extends _EventSource {}\n    /**\n     * Only available through the [--experimental-eventsource](https://nodejs.org/api/cli.html#--experimental-eventsource) flag.\n     *\n     * @since v22.3.0\n     */\n    var EventSource: typeof globalThis extends { onmessage: any; EventSource: infer T } ? T\n        : typeof import(\"undici-types\").EventSource;\n}\n"
        }
    ]
}