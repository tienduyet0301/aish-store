{
    "sourceFile": "node_modules/@types/node/dns/promises.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891955266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `dns.promises` API provides an alternative set of asynchronous DNS methods\n * that return `Promise` objects rather than using callbacks. The API is accessible\n * via `import { promises as dnsPromises } from 'node:dns'` or `import dnsPromises from 'node:dns/promises'`.\n * @since v10.6.0\n */\ndeclare module \"dns/promises\" {\n    import {\n        AnyRecord,\n        CaaRecord,\n        LookupAddress,\n        LookupAllOptions,\n        LookupOneOptions,\n        LookupOptions,\n        MxRecord,\n        NaptrRecord,\n        RecordWithTtl,\n        ResolveOptions,\n        ResolverOptions,\n        ResolveWithTtlOptions,\n        SoaRecord,\n        SrvRecord,\n    } from \"node:dns\";\n    /**\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\n     * that are currently configured for DNS resolution. A string will include a port\n     * section if a custom port is used.\n     *\n     * ```js\n     * [\n     *   '4.4.4.4',\n     *   '2001:4860:4860::8888',\n     *   '4.4.4.4:1053',\n     *   '[2001:4860:4860::8888]:1053',\n     * ]\n     * ```\n     * @since v10.6.0\n     */\n    function getServers(): string[];\n    /**\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\n     * integer, then it must be `4` or `6` â€“ if `options` is not provided, then IPv4\n     * and IPv6 addresses are both returned if found.\n     *\n     * With the `all` option set to `true`, the `Promise` is resolved with `addresses` being an array of objects with the properties `address` and `family`.\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code` is the error code.\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\n     * the host name does not exist but also when the lookup fails in other ways\n     * such as no available file descriptors.\n     *\n     * [`dnsPromises.lookup()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromiseslookuphostname-options) does not necessarily have anything to do with the DNS\n     * protocol. The implementation uses an operating system facility that can\n     * associate names with addresses and vice versa. This implementation can have\n     * subtle but important consequences on the behavior of any Node.js program. Please\n     * take some time to consult the [Implementation considerations section](https://nodejs.org/docs/latest-v20.x/api/dns.html#implementation-considerations) before\n     * using `dnsPromises.lookup()`.\n     *\n     * Example usage:\n     *\n     * ```js\n     * import dns from 'node:dns';\n     * const dnsPromises = dns.promises;\n     * const options = {\n     *   family: 6,\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\n     * };\n     *\n     * dnsPromises.lookup('example.com', options).then((result) => {\n     *   console.log('address: %j family: IPv%s', result.address, result.family);\n     *   // address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n     * });\n     *\n     * // When options.all is true, the result will be an Array.\n     * options.all = true;\n     * dnsPromises.lookup('example.com', options).then((result) => {\n     *   console.log('addresses: %j', result);\n     *   // addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]\n     * });\n     * ```\n     * @since v10.6.0\n     */\n    function lookup(hostname: string, family: number): Promise<LookupAddress>;\n    function lookup(hostname: string, options: LookupOneOptions): Promise<LookupAddress>;\n    function lookup(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\n    function lookup(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\n    function lookup(hostname: string): Promise<LookupAddress>;\n    /**\n     * Resolves the given `address` and `port` into a host name and service using\n     * the operating system's underlying `getnameinfo` implementation.\n     *\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError` will be thrown.\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code` is the error code.\n     *\n     * ```js\n     * import dnsPromises from 'node:dns';\n     * dnsPromises.lookupService('127.0.0.1', 22).then((result) => {\n     *   console.log(result.hostname, result.service);\n     *   // Prints: localhost ssh\n     * });\n     * ```\n     * @since v10.6.0\n     */\n    function lookupService(\n        address: string,\n        port: number,\n    ): Promise<{\n        hostname: string;\n        service: string;\n    }>;\n    /**\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\n     * of the resource records. When successful, the `Promise` is resolved with an\n     * array of resource records. The type and structure of individual results vary\n     * based on `rrtype`:\n     *\n     * <omitted>\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code`\n     * is one of the [DNS error codes](https://nodejs.org/docs/latest-v20.x/api/dns.html#error-codes).\n     * @since v10.6.0\n     * @param hostname Host name to resolve.\n     * @param [rrtype='A'] Resource record type.\n     */\n    function resolve(hostname: string): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"A\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"AAAA\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"ANY\"): Promise<AnyRecord[]>;\n    function resolve(hostname: string, rrtype: \"CAA\"): Promise<CaaRecord[]>;\n    function resolve(hostname: string, rrtype: \"CNAME\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"MX\"): Promise<MxRecord[]>;\n    function resolve(hostname: string, rrtype: \"NAPTR\"): Promise<NaptrRecord[]>;\n    function resolve(hostname: string, rrtype: \"NS\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"PTR\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"SOA\"): Promise<SoaRecord>;\n    function resolve(hostname: string, rrtype: \"SRV\"): Promise<SrvRecord[]>;\n    function resolve(hostname: string, rrtype: \"TXT\"): Promise<string[][]>;\n    function resolve(\n        hostname: string,\n        rrtype: string,\n    ): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve IPv4 addresses (`A` records) for the `hostname`. On success, the `Promise` is resolved with an array of IPv4\n     * addresses (e.g. `['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\n     * @since v10.6.0\n     * @param hostname Host name to resolve.\n     */\n    function resolve4(hostname: string): Promise<string[]>;\n    function resolve4(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n    function resolve4(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    /**\n     * Uses the DNS protocol to resolve IPv6 addresses (`AAAA` records) for the `hostname`. On success, the `Promise` is resolved with an array of IPv6\n     * addresses.\n     * @since v10.6.0\n     * @param hostname Host name to resolve.\n     */\n    function resolve6(hostname: string): Promise<string[]>;\n    function resolve6(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n    function resolve6(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    /**\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\n     * On success, the `Promise` is resolved with an array containing various types of\n     * records. Each object has a property `type` that indicates the type of the\n     * current record. And depending on the `type`, additional properties will be\n     * present on the object:\n     *\n     * <omitted>\n     *\n     * Here is an example of the result object:\n     *\n     * ```js\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\n     *   { type: 'CNAME', value: 'example.com' },\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\n     *   { type: 'NS', value: 'ns1.example.com' },\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\n     *   { type: 'SOA',\n     *     nsname: 'ns1.example.com',\n     *     hostmaster: 'admin.example.com',\n     *     serial: 156696742,\n     *     refresh: 900,\n     *     retry: 900,\n     *     expire: 1800,\n     *     minttl: 60 } ]\n     * ```\n     * @since v10.6.0\n     */\n    function resolveAny(hostname: string): Promise<AnyRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. On success,\n     * the `Promise` is resolved with an array of objects containing available\n     * certification authority authorization records available for the `hostname` (e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]`).\n     * @since v15.0.0, v14.17.0\n     */\n    function resolveCaa(hostname: string): Promise<CaaRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. On success,\n     * the `Promise` is resolved with an array of canonical name records available for\n     * the `hostname` (e.g. `['bar.example.com']`).\n     * @since v10.6.0\n     */\n    function resolveCname(hostname: string): Promise<string[]>;\n    /**\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the `hostname`. On success, the `Promise` is resolved with an array of objects\n     * containing both a `priority` and `exchange` property (e.g.`[{priority: 10, exchange: 'mx.example.com'}, ...]`).\n     * @since v10.6.0\n     */\n    function resolveMx(hostname: string): Promise<MxRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve regular expression-based records (`NAPTR` records) for the `hostname`. On success, the `Promise` is resolved with an array\n     * of objects with the following properties:\n     *\n     * * `flags`\n     * * `service`\n     * * `regexp`\n     * * `replacement`\n     * * `order`\n     * * `preference`\n     *\n     * ```js\n     * {\n     *   flags: 's',\n     *   service: 'SIP+D2U',\n     *   regexp: '',\n     *   replacement: '_sip._udp.example.com',\n     *   order: 30,\n     *   preference: 100\n     * }\n     * ```\n     * @since v10.6.0\n     */\n    function resolveNaptr(hostname: string): Promise<NaptrRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the `hostname`. On success, the `Promise` is resolved with an array of name server\n     * records available for `hostname` (e.g.`['ns1.example.com', 'ns2.example.com']`).\n     * @since v10.6.0\n     */\n    function resolveNs(hostname: string): Promise<string[]>;\n    /**\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the `hostname`. On success, the `Promise` is resolved with an array of strings\n     * containing the reply records.\n     * @since v10.6.0\n     */\n    function resolvePtr(hostname: string): Promise<string[]>;\n    /**\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\n     * the `hostname`. On success, the `Promise` is resolved with an object with the\n     * following properties:\n     *\n     * * `nsname`\n     * * `hostmaster`\n     * * `serial`\n     * * `refresh`\n     * * `retry`\n     * * `expire`\n     * * `minttl`\n     *\n     * ```js\n     * {\n     *   nsname: 'ns.example.com',\n     *   hostmaster: 'root.example.com',\n     *   serial: 2013101809,\n     *   refresh: 10000,\n     *   retry: 2400,\n     *   expire: 604800,\n     *   minttl: 3600\n     * }\n     * ```\n     * @since v10.6.0\n     */\n    function resolveSoa(hostname: string): Promise<SoaRecord>;\n    /**\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the `hostname`. On success, the `Promise` is resolved with an array of objects with\n     * the following properties:\n     *\n     * * `priority`\n     * * `weight`\n     * * `port`\n     * * `name`\n     *\n     * ```js\n     * {\n     *   priority: 10,\n     *   weight: 5,\n     *   port: 21223,\n     *   name: 'service.example.com'\n     * }\n     * ```\n     * @since v10.6.0\n     */\n    function resolveSrv(hostname: string): Promise<SrvRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the `hostname`. On success, the `Promise` is resolved with a two-dimensional array\n     * of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\n     * one record. Depending on the use case, these could be either joined together or\n     * treated separately.\n     * @since v10.6.0\n     */\n    function resolveTxt(hostname: string): Promise<string[][]>;\n    /**\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\n     * array of host names.\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code`\n     * is one of the [DNS error codes](https://nodejs.org/docs/latest-v20.x/api/dns.html#error-codes).\n     * @since v10.6.0\n     */\n    function reverse(ip: string): Promise<string[]>;\n    /**\n     * Get the default value for `verbatim` in {@link lookup} and [dnsPromises.lookup()](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromiseslookuphostname-options).\n     * The value could be:\n     *\n     * * `ipv4first`: for `verbatim` defaulting to `false`.\n     * * `verbatim`: for `verbatim` defaulting to `true`.\n     * @since v20.1.0\n     */\n    function getDefaultResultOrder(): \"ipv4first\" | \"verbatim\";\n    /**\n     * Sets the IP address and port of servers to be used when performing DNS\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\n     *\n     * ```js\n     * dnsPromises.setServers([\n     *   '4.4.4.4',\n     *   '[2001:4860:4860::8888]',\n     *   '4.4.4.4:1053',\n     *   '[2001:4860:4860::8888]:1053',\n     * ]);\n     * ```\n     *\n     * An error will be thrown if an invalid address is provided.\n     *\n     * The `dnsPromises.setServers()` method must not be called while a DNS query is in\n     * progress.\n     *\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\n     * That is, if attempting to resolve with the first server provided results in a `NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\n     * subsequent servers provided. Fallback DNS servers will only be used if the\n     * earlier ones time out or result in some other error.\n     * @since v10.6.0\n     * @param servers array of `RFC 5952` formatted addresses\n     */\n    function setServers(servers: readonly string[]): void;\n    /**\n     * Set the default value of `order` in `dns.lookup()` and `{@link lookup}`. The value could be:\n     *\n     * * `ipv4first`: sets default `order` to `ipv4first`.\n     * * `ipv6first`: sets default `order` to `ipv6first`.\n     * * `verbatim`: sets default `order` to `verbatim`.\n     *\n     * The default is `verbatim` and [dnsPromises.setDefaultResultOrder()](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetdefaultresultorderorder)\n     * have higher priority than [`--dns-result-order`](https://nodejs.org/docs/latest-v20.x/api/cli.html#--dns-result-orderorder).\n     * When using [worker threads](https://nodejs.org/docs/latest-v20.x/api/worker_threads.html), [`dnsPromises.setDefaultResultOrder()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetdefaultresultorderorder)\n     * from the main thread won't affect the default dns orders in workers.\n     * @since v16.4.0, v14.18.0\n     * @param order must be `'ipv4first'`, `'ipv6first'` or `'verbatim'`.\n     */\n    function setDefaultResultOrder(order: \"ipv4first\" | \"ipv6first\" | \"verbatim\"): void;\n    // Error codes\n    const NODATA: \"ENODATA\";\n    const FORMERR: \"EFORMERR\";\n    const SERVFAIL: \"ESERVFAIL\";\n    const NOTFOUND: \"ENOTFOUND\";\n    const NOTIMP: \"ENOTIMP\";\n    const REFUSED: \"EREFUSED\";\n    const BADQUERY: \"EBADQUERY\";\n    const BADNAME: \"EBADNAME\";\n    const BADFAMILY: \"EBADFAMILY\";\n    const BADRESP: \"EBADRESP\";\n    const CONNREFUSED: \"ECONNREFUSED\";\n    const TIMEOUT: \"ETIMEOUT\";\n    const EOF: \"EOF\";\n    const FILE: \"EFILE\";\n    const NOMEM: \"ENOMEM\";\n    const DESTRUCTION: \"EDESTRUCTION\";\n    const BADSTR: \"EBADSTR\";\n    const BADFLAGS: \"EBADFLAGS\";\n    const NONAME: \"ENONAME\";\n    const BADHINTS: \"EBADHINTS\";\n    const NOTINITIALIZED: \"ENOTINITIALIZED\";\n    const LOADIPHLPAPI: \"ELOADIPHLPAPI\";\n    const ADDRGETNETWORKPARAMS: \"EADDRGETNETWORKPARAMS\";\n    const CANCELLED: \"ECANCELLED\";\n\n    /**\n     * An independent resolver for DNS requests.\n     *\n     * Creating a new resolver uses the default server settings. Setting\n     * the servers used for a resolver using [`resolver.setServers()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetserversservers) does not affect\n     * other resolvers:\n     *\n     * ```js\n     * import { promises } from 'node:dns';\n     * const resolver = new promises.Resolver();\n     * resolver.setServers(['4.4.4.4']);\n     *\n     * // This request will use the server at 4.4.4.4, independent of global settings.\n     * resolver.resolve4('example.org').then((addresses) => {\n     *   // ...\n     * });\n     *\n     * // Alternatively, the same code can be written using async-await style.\n     * (async function() {\n     *   const addresses = await resolver.resolve4('example.org');\n     * })();\n     * ```\n     *\n     * The following methods from the `dnsPromises` API are available:\n     *\n     * * `resolver.getServers()`\n     * * `resolver.resolve()`\n     * * `resolver.resolve4()`\n     * * `resolver.resolve6()`\n     * * `resolver.resolveAny()`\n     * * `resolver.resolveCaa()`\n     * * `resolver.resolveCname()`\n     * * `resolver.resolveMx()`\n     * * `resolver.resolveNaptr()`\n     * * `resolver.resolveNs()`\n     * * `resolver.resolvePtr()`\n     * * `resolver.resolveSoa()`\n     * * `resolver.resolveSrv()`\n     * * `resolver.resolveTxt()`\n     * * `resolver.reverse()`\n     * * `resolver.setServers()`\n     * @since v10.6.0\n     */\n    class Resolver {\n        constructor(options?: ResolverOptions);\n        /**\n         * Cancel all outstanding DNS queries made by this resolver. The corresponding\n         * callbacks will be called with an error with code `ECANCELLED`.\n         * @since v8.3.0\n         */\n        cancel(): void;\n        getServers: typeof getServers;\n        resolve: typeof resolve;\n        resolve4: typeof resolve4;\n        resolve6: typeof resolve6;\n        resolveAny: typeof resolveAny;\n        resolveCaa: typeof resolveCaa;\n        resolveCname: typeof resolveCname;\n        resolveMx: typeof resolveMx;\n        resolveNaptr: typeof resolveNaptr;\n        resolveNs: typeof resolveNs;\n        resolvePtr: typeof resolvePtr;\n        resolveSoa: typeof resolveSoa;\n        resolveSrv: typeof resolveSrv;\n        resolveTxt: typeof resolveTxt;\n        reverse: typeof reverse;\n        /**\n         * The resolver instance will send its requests from the specified IP address.\n         * This allows programs to specify outbound interfaces when used on multi-homed\n         * systems.\n         *\n         * If a v4 or v6 address is not specified, it is set to the default and the\n         * operating system will choose a local address automatically.\n         *\n         * The resolver will use the v4 local address when making requests to IPv4 DNS\n         * servers, and the v6 local address when making requests to IPv6 DNS servers.\n         * The `rrtype` of resolution requests has no impact on the local address used.\n         * @since v15.1.0, v14.17.0\n         * @param [ipv4='0.0.0.0'] A string representation of an IPv4 address.\n         * @param [ipv6='::0'] A string representation of an IPv6 address.\n         */\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\n        setServers: typeof setServers;\n    }\n}\ndeclare module \"node:dns/promises\" {\n    export * from \"dns/promises\";\n}\n"
        }
    ]
}