{
    "sourceFile": "node_modules/@types/node/string_decoder.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * The `node:string_decoder` module provides an API for decoding `Buffer` objects\n * into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\n * characters. It can be accessed using:\n *\n * ```js\n * import { StringDecoder } from 'node:string_decoder';\n * ```\n *\n * The following example shows the basic use of the `StringDecoder` class.\n *\n * ```js\n * import { StringDecoder } from 'node:string_decoder';\n * const decoder = new StringDecoder('utf8');\n *\n * const cent = Buffer.from([0xC2, 0xA2]);\n * console.log(decoder.write(cent)); // Prints: ¢\n *\n * const euro = Buffer.from([0xE2, 0x82, 0xAC]);\n * console.log(decoder.write(euro)); // Prints: €\n * ```\n *\n * When a `Buffer` instance is written to the `StringDecoder` instance, an\n * internal buffer is used to ensure that the decoded string does not contain\n * any incomplete multibyte characters. These are held in the buffer until the\n * next call to `stringDecoder.write()` or until `stringDecoder.end()` is called.\n *\n * In the following example, the three UTF-8 encoded bytes of the European Euro\n * symbol (`€`) are written over three separate operations:\n *\n * ```js\n * import { StringDecoder } from 'node:string_decoder';\n * const decoder = new StringDecoder('utf8');\n *\n * decoder.write(Buffer.from([0xE2]));\n * decoder.write(Buffer.from([0x82]));\n * console.log(decoder.end(Buffer.from([0xAC]))); // Prints: €\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/string_decoder.js)\n */\ndeclare module \"string_decoder\" {\n    class StringDecoder {\n        constructor(encoding?: BufferEncoding);\n        /**\n         * Returns a decoded string, ensuring that any incomplete multibyte characters at\n         * the end of the `Buffer`, or `TypedArray`, or `DataView` are omitted from the\n         * returned string and stored in an internal buffer for the next call to `stringDecoder.write()` or `stringDecoder.end()`.\n         * @since v0.1.99\n         * @param buffer The bytes to decode.\n         */\n        write(buffer: string | Buffer | NodeJS.ArrayBufferView): string;\n        /**\n         * Returns any remaining input stored in the internal buffer as a string. Bytes\n         * representing incomplete UTF-8 and UTF-16 characters will be replaced with\n         * substitution characters appropriate for the character encoding.\n         *\n         * If the `buffer` argument is provided, one final call to `stringDecoder.write()` is performed before returning the remaining input.\n         * After `end()` is called, the `stringDecoder` object can be reused for new input.\n         * @since v0.9.3\n         * @param buffer The bytes to decode.\n         */\n        end(buffer?: string | Buffer | NodeJS.ArrayBufferView): string;\n    }\n}\ndeclare module \"node:string_decoder\" {\n    export * from \"string_decoder\";\n}\n"
        }
    ]
}