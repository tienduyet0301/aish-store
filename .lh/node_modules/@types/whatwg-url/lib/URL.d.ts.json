{
    "sourceFile": "node_modules/@types/whatwg-url/lib/URL.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891957236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { URL } from \"../index\";\nimport { implementation as URLImpl } from \"./URL-impl\";\n\n/**\n * Checks whether `obj` is a `URL` object with an implementation\n * provided by this package.\n */\nexport function is(obj: unknown): obj is URL;\n\n/**\n * Checks whether `obj` is a `URLImpl` WebIDL2JS implementation object\n * provided by this package.\n */\nexport function isImpl(obj: unknown): obj is URLImpl;\n\n/**\n * Converts the `URL` wrapper into a `URLImpl` object.\n *\n * @throws {TypeError} If `obj` is not a `URL` wrapper instance provided by this package.\n */\nexport function convert(globalObject: object, obj: unknown, { context }?: { context: string }): URLImpl;\n\n/**\n * Creates a new `URL` instance.\n *\n * @throws {Error} If the `globalObject` doesn't have a WebIDL2JS constructor\n *         registry or a `URL` constructor provided by this package\n *         in the WebIDL2JS constructor registry.\n */\nexport function create(globalObject: object, constructorArgs: readonly [url: string, base?: string]): URL;\n\n/**\n * Calls `create()` and returns the internal `URLImpl`.\n *\n * @throws {Error} If the `globalObject` doesn't have a WebIDL2JS constructor\n *         registry or a `URL` constructor provided by this package\n *         in the WebIDL2JS constructor registry.\n */\nexport function createImpl(globalObject: object, constructorArgs: readonly [url: string, base?: string]): URLImpl;\n\n/**\n * Initializes the `URL` instance, called by `create()`.\n *\n * Useful when manually sub-classing a non-constructable wrapper object.\n */\nexport function setup<T extends URL>(\n    obj: T,\n    globalObject: object,\n    constructorArgs: readonly [url: string, base?: string],\n): T;\n\n/**\n * Creates a new `URL` object without runing the constructor steps.\n *\n * Useful when implementing specifications that initialize objects\n * in different ways than their constructors do.\n */\ndeclare function _new(globalObject: object, newTarget?: new(url: string, base?: string) => URL): URLImpl;\nexport { _new as new };\n\n/**\n * Installs the `URL` constructor onto the `globalObject`.\n *\n * @throws {Error} If the target `globalObject` doesn't have an `Error` constructor.\n */\nexport function install(globalObject: object, globalNames: readonly string[]): void;\n"
        }
    ]
}