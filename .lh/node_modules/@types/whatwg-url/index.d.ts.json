{
    "sourceFile": "node_modules/@types/whatwg-url/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891957170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference lib=\"es2020\"/>\n/** https://url.spec.whatwg.org/#url-representation */\nexport interface URLRecord {\n    scheme: string;\n    username: string;\n    password: string;\n    host: string | number | IPv6Address | null;\n    port: number | null;\n    path: string | string[];\n    query: string | null;\n    fragment: string | null;\n}\n\n/** https://url.spec.whatwg.org/#concept-ipv6 */\nexport type IPv6Address = [number, number, number, number, number, number, number, number];\n\n/** https://url.spec.whatwg.org/#url-class */\nexport class URL {\n    constructor(url: string, base?: string | URL);\n\n    get href(): string;\n    set href(V: string);\n\n    get origin(): string;\n\n    get protocol(): string;\n    set protocol(V: string);\n\n    get username(): string;\n    set username(V: string);\n\n    get password(): string;\n    set password(V: string);\n\n    get host(): string;\n    set host(V: string);\n\n    get hostname(): string;\n    set hostname(V: string);\n\n    get port(): string;\n    set port(V: string);\n\n    get pathname(): string;\n    set pathname(V: string);\n\n    get search(): string;\n    set search(V: string);\n\n    get searchParams(): URLSearchParams;\n\n    get hash(): string;\n    set hash(V: string);\n\n    toJSON(): string;\n\n    readonly [Symbol.toStringTag]: \"URL\";\n}\n\n/** https://url.spec.whatwg.org/#interface-urlsearchparams */\nexport class URLSearchParams {\n    constructor(\n        init?:\n            | ReadonlyArray<readonly [name: string, value: string]>\n            | Iterable<readonly [name: string, value: string]>\n            | { readonly [name: string]: string }\n            | string,\n    );\n\n    append(name: string, value: string): void;\n    delete(name: string): void;\n    get(name: string): string | null;\n    getAll(name: string): string[];\n    has(name: string): boolean;\n    set(name: string, value: string): void;\n    sort(): void;\n\n    keys(): IterableIterator<string>;\n    values(): IterableIterator<string>;\n    entries(): IterableIterator<[name: string, value: string]>;\n    forEach<THIS_ARG = void>(\n        callback: (this: THIS_ARG, value: string, name: string, searchParams: this) => void,\n        thisArg?: THIS_ARG,\n    ): void;\n\n    readonly [Symbol.toStringTag]: \"URLSearchParams\";\n    [Symbol.iterator](): IterableIterator<[name: string, value: string]>;\n}\n\n/** https://url.spec.whatwg.org/#concept-url-parser */\nexport function parseURL(input: string, options?: { readonly baseURL?: URLRecord | undefined }): URLRecord | null;\n\n/** https://url.spec.whatwg.org/#concept-basic-url-parser */\nexport function basicURLParse(\n    input: string,\n    options?: {\n        baseURL?: URLRecord | undefined;\n        url?: URLRecord | undefined;\n        stateOverride?: StateOverride | undefined;\n    },\n): URLRecord | null;\n\n/** https://url.spec.whatwg.org/#scheme-start-state */\nexport type StateOverride =\n    | \"scheme start\"\n    | \"scheme\"\n    | \"no scheme\"\n    | \"special relative or authority\"\n    | \"path or authority\"\n    | \"relative\"\n    | \"relative slash\"\n    | \"special authority slashes\"\n    | \"special authority ignore slashes\"\n    | \"authority\"\n    | \"host\"\n    | \"hostname\"\n    | \"port\"\n    | \"file\"\n    | \"file slash\"\n    | \"file host\"\n    | \"path start\"\n    | \"path\"\n    | \"opaque path\"\n    | \"query\"\n    | \"fragment\";\n\n/** https://url.spec.whatwg.org/#concept-url-serializer */\nexport function serializeURL(urlRecord: URLRecord, excludeFragment?: boolean): string;\n\n/** https://url.spec.whatwg.org/#concept-host-serializer */\nexport function serializeHost(host: string | number | IPv6Address): string;\n\n/** https://url.spec.whatwg.org/#url-path-serializer */\nexport function serializePath(urlRecord: URLRecord): string;\n\n/** https://url.spec.whatwg.org/#serialize-an-integer */\nexport function serializeInteger(number: number): string;\n\n/** https://html.spec.whatwg.org#ascii-serialisation-of-an-origin */\nexport function serializeURLOrigin(urlRecord: URLRecord): string;\n\n/** https://url.spec.whatwg.org/#set-the-username */\nexport function setTheUsername(urlRecord: URLRecord, username: string): void;\n\n/** https://url.spec.whatwg.org/#set-the-password */\nexport function setThePassword(urlRecord: URLRecord, password: string): void;\n\n/** https://url.spec.whatwg.org/#url-opaque-path */\nexport function hasAnOpaquePath(urlRecord: URLRecord): boolean;\n\n/** https://url.spec.whatwg.org/#cannot-have-a-username-password-port */\nexport function cannotHaveAUsernamePasswordPort(urlRecord: URLRecord): boolean;\n\n/** https://url.spec.whatwg.org/#percent-decode */\nexport function percentDecodeBytes(buffer: TypedArray): Uint8Array;\n\n/** https://url.spec.whatwg.org/#string-percent-decode */\nexport function percentDecodeString(string: string): Uint8Array;\n\nexport type TypedArray =\n    | Uint8Array\n    | Uint8ClampedArray\n    | Uint16Array\n    | Uint32Array\n    | Int8Array\n    | Int16Array\n    | Int32Array\n    | Float32Array\n    | Float64Array;\n"
        }
    ]
}