{
    "sourceFile": "node_modules/@types/react/ts5.0/experimental.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891956780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,\n// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are\n// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.\n//\n// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js\n// is a good place to start looking for details; it generally calls prop validation functions or delegates\n// all tasks done as part of the render phase (the concurrent part of the React update cycle).\n//\n// Suspense-related handling can be found in ReactFiberThrow.js.\n\nimport React = require(\"./canary\");\n\nexport {};\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\ndeclare module \".\" {\n    export interface SuspenseProps {\n        /**\n         * The presence of this prop indicates that the content is computationally expensive to render.\n         * In other words, the tree is CPU bound and not I/O bound (e.g. due to fetching data).\n         * @see {@link https://github.com/facebook/react/pull/19936}\n         */\n        unstable_expectedLoadTime?: number | undefined;\n    }\n\n    export type SuspenseListRevealOrder = \"forwards\" | \"backwards\" | \"together\";\n    export type SuspenseListTailMode = \"collapsed\" | \"hidden\";\n\n    export interface SuspenseListCommonProps {\n        /**\n         * Note that SuspenseList require more than one child;\n         * it is a runtime warning to provide only a single child.\n         *\n         * It does, however, allow those children to be wrapped inside a single\n         * level of `<React.Fragment>`.\n         */\n        children: ReactElement | Iterable<ReactElement>;\n    }\n\n    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder: \"forwards\" | \"backwards\";\n        /**\n         * Dictates how unloaded items in a SuspenseList is shown.\n         *\n         * - By default, `SuspenseList` will show all fallbacks in the list.\n         * - `collapsed` shows only the next fallback in the list.\n         * - `hidden` doesnâ€™t show any unloaded items.\n         */\n        tail?: SuspenseListTailMode | undefined;\n    }\n\n    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps[\"revealOrder\"]> | undefined;\n        /**\n         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.\n         */\n        tail?: never | undefined;\n    }\n\n    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;\n\n    /**\n     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order\n     * in which these components are revealed to the user.\n     *\n     * When multiple components need to fetch data, this data may arrive in an unpredictable order.\n     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list\n     * until previous items have been displayed (this behavior is adjustable).\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist\n     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist\n     */\n    export const unstable_SuspenseList: ExoticComponent<SuspenseListProps>;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    export function experimental_useEffectEvent<T extends Function>(event: T): T;\n\n    type Reference = object;\n    type TaintableUniqueValue = string | bigint | ArrayBufferView;\n    function experimental_taintUniqueValue(\n        message: string | undefined,\n        lifetime: Reference,\n        value: TaintableUniqueValue,\n    ): void;\n    function experimental_taintObjectReference(message: string | undefined, object: Reference): void;\n\n    export interface ViewTransitionInstance {\n        /**\n         * The {@link ViewTransitionProps name} that was used in the corresponding {@link ViewTransition} component or `\"auto\"` if the `name` prop was omitted.\n         */\n        name: string;\n    }\n\n    export type ViewTransitionClassPerType = Record<\"default\" | (string & {}), \"none\" | \"auto\" | (string & {})>;\n    export type ViewTransitionClass = ViewTransitionClassPerType | ViewTransitionClassPerType[string];\n\n    export interface ViewTransitionProps {\n        children?: ReactNode | undefined;\n        /**\n         * Assigns the {@link https://developer.chrome.com/blog/view-transitions-update-io24#view-transition-class `view-transition-class`} class to the underlying DOM node.\n         */\n        default?: ViewTransitionClass | undefined;\n        /**\n         * Combined with {@link className} if this `<ViewTransition>` or its parent Component is mounted and there's no other with the same name being deleted.\n         * `\"none\"` is a special value that deactivates the view transition name under that condition.\n         */\n        enter?: ViewTransitionClass | undefined;\n        /**\n         * Combined with {@link className} if this `<ViewTransition>` or its parent Component is unmounted and there's no other with the same name being deleted.\n         * `\"none\"` is a special value that deactivates the view transition name under that condition.\n         */\n        exit?: ViewTransitionClass | undefined;\n        /**\n         * \"auto\" will automatically assign a view-transition-name to the inner DOM node.\n         * That way you can add a View Transition to a Component without controlling its DOM nodes styling otherwise.\n         *\n         * A difference between this and the browser's built-in view-transition-name: auto is that switching the DOM nodes within the `<ViewTransition>` component preserves the same name so this example cross-fades between the DOM nodes instead of causing an exit and enter.\n         * @default \"auto\"\n         */\n        name?: \"auto\" | (string & {}) | undefined;\n        /**\n         * The `<ViewTransition>` or its parent Component is mounted and there's no other `<ViewTransition>` with the same name being deleted.\n         */\n        onEnter?: (instance: ViewTransitionInstance, types: Array<string>) => void;\n        /**\n         * The `<ViewTransition>` or its parent Component is unmounted and there's no other `<ViewTransition>` with the same name being deleted.\n         */\n        onExit?: (instance: ViewTransitionInstance, types: Array<string>) => void;\n        /**\n         * This `<ViewTransition>` is being mounted and another `<ViewTransition>` instance with the same name is being unmounted elsewhere.\n         */\n        onShare?: (instance: ViewTransitionInstance, types: Array<string>) => void;\n        /**\n         * The content of `<ViewTransition>` has changed either due to DOM mutations or because an inner child `<ViewTransition>` has resized.\n         */\n        onUpdate?: (instance: ViewTransitionInstance, types: Array<string>) => void;\n        ref?: Ref<ViewTransitionInstance> | undefined;\n        /**\n         * Combined with {@link className} if this `<ViewTransition>` is being mounted and another instance with the same name is being unmounted elsewhere.\n         * `\"none\"` is a special value that deactivates the view transition name under that condition.\n         */\n        share?: ViewTransitionClass | undefined;\n        /**\n         * Combined with {@link className} if the content of this `<ViewTransition>` has changed either due to DOM mutations or because an inner child has resized.\n         * `\"none\"` is a special value that deactivates the view transition name under that condition.\n         */\n        update?: ViewTransitionClass | undefined;\n    }\n\n    /**\n     * Opt-in for using {@link https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API View Transitions} in React.\n     * View Transitions only trigger for async updates like {@link startTransition}, {@link useDeferredValue}, Actions or <{@link Suspense}> revealing from fallback to content.\n     * Synchronous updates provide an opt-out but also guarantee that they commit immediately which View Transitions can't.\n     *\n     * @see {@link https://github.com/facebook/react/pull/31975}\n     */\n    export const unstable_ViewTransition: ExoticComponent<ViewTransitionProps>;\n\n    export function unstable_addTransitionType(type: string): void;\n\n    // @enableGestureTransition\n    // Implemented by the specific renderer e.g. `react-dom`.\n    // Keep in mind that augmented interfaces merge their JSDoc so if you put\n    // JSDoc here and in the renderer, the IDE will display both.\n    export interface GestureProvider {}\n    export interface GestureOptions {\n        rangeStart?: number | undefined;\n        rangeEnd?: number | undefined;\n    }\n    /** */\n    export function unstable_startGestureTransition(\n        provider: GestureProvider,\n        scope: () => void,\n        options?: GestureOptions,\n    ): () => void;\n\n    // @enableFragmentRefs\n    export interface FragmentInstance {}\n\n    export interface FragmentProps {\n        ref?: Ref<FragmentInstance> | undefined;\n    }\n\n    // @enableActivity\n    export interface ActivityProps {\n        /**\n         * @default \"visible\"\n         */\n        mode?:\n            | \"hidden\"\n            | \"visible\"\n            | undefined;\n        children: ReactNode;\n    }\n\n    /** */\n    export const unstable_Activity: ExoticComponent<ActivityProps>;\n\n    // @enableSrcObject\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_IMG_SRC_TYPES {\n        srcObject: Blob;\n    }\n\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_MEDIA_SRC_TYPES {\n        srcObject: Blob | MediaSource | MediaStream;\n    }\n}\n"
        }
    ]
}