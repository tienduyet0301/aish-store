{
    "sourceFile": "node_modules/eslint-config-next/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892243883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * @rushstack/eslint-patch is used to include plugins as dev\n * dependencies instead of imposing them as peer dependencies\n *\n * https://www.npmjs.com/package/@rushstack/eslint-patch\n */\nconst keptPaths = []\nconst sortedPaths = []\nconst cwd = process.cwd().replace(/\\\\/g, '/')\nconst originalPaths = require.resolve.paths('eslint-plugin-import')\n\n// eslint throws a conflict error when plugins resolve to different\n// locations, since we want to lock our dependencies by default\n// but also need to allow using user dependencies this updates\n// our resolve paths to first check the cwd and iterate to\n// eslint-config-next's dependencies if needed\n\nfor (let i = originalPaths.length - 1; i >= 0; i--) {\n  const currentPath = originalPaths[i]\n\n  if (currentPath.replace(/\\\\/g, '/').startsWith(cwd)) {\n    sortedPaths.push(currentPath)\n  } else {\n    keptPaths.unshift(currentPath)\n  }\n}\n\n// maintain order of node_modules outside of cwd\nsortedPaths.push(...keptPaths)\n\nconst hookPropertyMap = new Map(\n  [\n    '@typescript-eslint/eslint-plugin',\n    'eslint-plugin-import',\n    'eslint-plugin-react',\n    'eslint-plugin-jsx-a11y',\n  ].map((request) => [\n    request,\n    require.resolve(request, { paths: sortedPaths }),\n  ])\n)\n\nconst mod = require('module')\nconst resolveFilename = mod._resolveFilename\nmod._resolveFilename = function (request, parent, isMain, options) {\n  const hookResolved = hookPropertyMap.get(request)\n  if (hookResolved) {\n    request = hookResolved\n  }\n  return resolveFilename.call(mod, request, parent, isMain, options)\n}\n\nrequire('@rushstack/eslint-patch/modern-module-resolution')\n\nmodule.exports = {\n  extends: [\n    'plugin:react/recommended',\n    'plugin:react-hooks/recommended',\n    'plugin:@next/next/recommended',\n  ],\n  plugins: ['import', 'react', 'jsx-a11y'],\n  rules: {\n    'import/no-anonymous-default-export': 'warn',\n    'react/no-unknown-property': 'off',\n    'react/react-in-jsx-scope': 'off',\n    'react/prop-types': 'off',\n    'jsx-a11y/alt-text': [\n      'warn',\n      {\n        elements: ['img'],\n        img: ['Image'],\n      },\n    ],\n    'jsx-a11y/aria-props': 'warn',\n    'jsx-a11y/aria-proptypes': 'warn',\n    'jsx-a11y/aria-unsupported-elements': 'warn',\n    'jsx-a11y/role-has-required-aria-props': 'warn',\n    'jsx-a11y/role-supports-aria-props': 'warn',\n    'react/jsx-no-target-blank': 'off',\n  },\n  parser: './parser.js',\n  parserOptions: {\n    requireConfigFile: false,\n    sourceType: 'module',\n    allowImportExportEverywhere: true,\n    babelOptions: {\n      presets: ['next/babel'],\n      caller: {\n        // Eslint supports top level await when a parser for it is included. We enable the parser by default for Babel.\n        supportsTopLevelAwait: true,\n      },\n    },\n  },\n  overrides: [\n    {\n      files: ['**/*.ts?(x)'],\n      parser: '@typescript-eslint/parser',\n      parserOptions: {\n        sourceType: 'module',\n      },\n    },\n  ],\n  settings: {\n    react: {\n      version: 'detect',\n    },\n    'import/parsers': {\n      [require.resolve('@typescript-eslint/parser')]: [\n        '.ts',\n        '.mts',\n        '.cts',\n        '.tsx',\n        '.d.ts',\n      ],\n    },\n    'import/resolver': {\n      [require.resolve('eslint-import-resolver-node')]: {\n        extensions: ['.js', '.jsx', '.ts', '.tsx'],\n      },\n      [require.resolve('eslint-import-resolver-typescript')]: {\n        alwaysTryTypes: true,\n      },\n    },\n  },\n  env: {\n    browser: true,\n    node: true,\n  },\n}\n"
        }
    ]
}