{
    "sourceFile": "node_modules/object.assign/test/native.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892945736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar defineProperties = require('define-properties');\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar functionsHaveNames = require('functions-have-names')();\n\nvar runTests = require('./tests');\n\ntest('native', function (t) {\n\tt.equal(Object.assign.length, 2, 'Object.assign has a length of 2');\n\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\tst.equal(Object.assign.name, 'assign', 'Object.assign has name \"assign\"');\n\t\tst.end();\n\t});\n\n\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\tet.equal(false, isEnumerable.call(Object, 'assign'), 'Object.assign is not enumerable');\n\t\tet.end();\n\t});\n\n\tvar supportsStrictMode = (function () { return typeof this === 'undefined'; }());\n\n\tt.test('bad object value', { skip: !supportsStrictMode }, function (st) {\n\t\tst['throws'](function () { return Object.assign(undefined); }, TypeError, 'undefined is not an object');\n\t\tst['throws'](function () { return Object.assign(null); }, TypeError, 'null is not an object');\n\t\tst.end();\n\t});\n\n\t// v8 in node 0.8 and 0.10 have non-enumerable string properties\n\tvar stringCharsAreEnumerable = isEnumerable.call('xy', 0);\n\tt.test('when Object.assign is present and has pending exceptions', { skip: !stringCharsAreEnumerable || !Object.preventExtensions }, function (st) {\n\t\t/*\n\t\t * Firefox 37 still has \"pending exception\" logic in its Object.assign implementation,\n\t\t * which is 72% slower than our shim, and Firefox 40's native implementation.\n\t\t */\n\t\tvar thrower = Object.preventExtensions({ 1: '2' });\n\t\tvar error;\n\t\ttry { Object.assign(thrower, 'xy'); } catch (e) { error = e; }\n\t\tst.equal(error instanceof TypeError, true, 'error is TypeError');\n\t\tst.equal(thrower[1], '2', 'thrower[1] === \"2\"');\n\n\t\tst.end();\n\t});\n\n\trunTests(Object.assign, t);\n\n\tt.end();\n});\n"
        }
    ]
}