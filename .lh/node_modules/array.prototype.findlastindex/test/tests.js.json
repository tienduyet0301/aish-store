{
    "sourceFile": "node_modules/array.prototype.findlastindex/test/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892029312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var hasStrictMode = require('has-strict-mode')();\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\nvar maxSafeInteger = require('es-abstract/helpers/maxSafeInteger');\nvar global = require('globalthis')();\n\nvar trueThunk = function () { return true; };\nvar falseThunk = function () { return false; };\n\nvar canDistinguishSparseFromUndefined = 0 in [undefined]; // IE 6 - 8 have a bug where this returns false.\nvar undefinedIfNoSparseBug = canDistinguishSparseFromUndefined ? undefined : { valueOf: function () { return 0; } };\n\nvar createArrayLikeFromArray = function createArrayLikeFromArray(arr) {\n\tvar o = {};\n\tfor (var i = 0; i < arr.length; i += 1) {\n\t\tif (i in arr) {\n\t\t\to[i] = arr[i];\n\t\t}\n\t}\n\to.length = arr.length;\n\treturn o;\n};\n\nvar getTestArr = function () {\n\tvar arr = [0, false, null, 'hej', true, undefinedIfNoSparseBug, 3, 2];\n\tdelete arr[6];\n\treturn arr;\n};\n\nmodule.exports = function (findLastIndex, t) {\n\tforEach(v.nonArrays, function (nonArray) {\n\t\tif (nonArray != null) { // eslint-disable-line eqeqeq\n\t\t\tt.equal(\n\t\t\t\tfindLastIndex(nonArray, function () { return true; }),\n\t\t\t\ttypeof nonArray.length === 'number' ? nonArray.length - 1 : -1,\n\t\t\t\tinspect(nonArray) + ' is not an array'\n\t\t\t);\n\t\t}\n\t});\n\n\tt.test('throws on a non-callable predicate', function (st) {\n\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\tst['throws'](\n\t\t\t\tfunction () { findLastIndex([], nonFunction); },\n\t\t\t\tTypeError,\n\t\t\t\tinspect(nonFunction) + ' is not a Function'\n\t\t\t);\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('passes the correct values to the callback', function (st) {\n\t\tst.plan(5);\n\n\t\tvar expectedValue = {};\n\t\tvar arr = [expectedValue];\n\t\tvar context = {};\n\t\tfindLastIndex(arr, function (value, key, list) {\n\t\t\tst.equal(arguments.length, 3);\n\t\t\tst.equal(value, expectedValue, 'first argument is the value');\n\t\t\tst.equal(key, 0, 'second argument is the index');\n\t\t\tst.equal(list, arr, 'third argument is the array being iterated');\n\t\t\tst.equal(this, context, 'receiver is the expected value');\n\t\t\treturn true;\n\t\t}, context);\n\n\t\tst.end();\n\t});\n\n\tt.test('does not visit elements added to the array after it has begun', function (st) {\n\t\tst.plan(2);\n\n\t\tvar arr = [1, 2, 3];\n\t\tvar i = 0;\n\t\tfindLastIndex(arr, function (a) {\n\t\t\ti += 1;\n\t\t\tarr.push(a + 3);\n\t\t\treturn i > 3;\n\t\t});\n\t\tst.deepEqual(arr, [1, 2, 3, 6, 5, 4], 'array has received 3 new elements');\n\t\tst.equal(i, 3, 'findLastIndex callback only called thrice');\n\n\t\tst.end();\n\t});\n\n\tt.test('does not visit elements deleted from the array after it has begun', function (st) {\n\t\tvar arr = [1, 2, 3];\n\t\tvar actual = [];\n\t\tfindLastIndex(arr, function (x, i) {\n\t\t\tactual.push([i, x]);\n\t\t\tdelete arr[1];\n\t\t\treturn false;\n\t\t});\n\t\tst.deepEqual(actual, [[2, 3], [1, undefined], [0, 1]]);\n\n\t\tst.end();\n\t});\n\n\tt.test('sets the right context when given none', function (st) {\n\t\tvar context;\n\t\tfindLastIndex([1], function () { context = this; });\n\t\tst.equal(context, global, 'receiver is global object in sloppy mode');\n\n\t\tst.test('strict mode', { skip: !hasStrictMode }, function (sst) {\n\t\t\tfindLastIndex([1], function () {\n\t\t\t\t'use strict';\n\n\t\t\t\tcontext = this;\n\t\t\t});\n\t\t\tsst.equal(context, undefined, 'receiver is undefined in strict mode');\n\t\t\tsst.end();\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('empty array', function (st) {\n\t\tst.equal(findLastIndex([], trueThunk), -1, 'true thunk callback yields -1');\n\t\tst.equal(findLastIndex([], falseThunk), -1, 'false thunk callback yields -1');\n\n\t\tvar counter = 0;\n\t\tvar callback = function () { counter += 1; };\n\t\tfindLastIndex([], callback);\n\t\tst.equal(counter, 0, 'counter is not incremented');\n\n\t\tst.end();\n\t});\n\n\tt.equal(findLastIndex([1, 2, 3], trueThunk), 2, 'returns last index if findLastIndex callback returns true');\n\tt.equal(findLastIndex([1, 2, 3], falseThunk), -1, 'returns -1 if no callback returns true');\n\n\tt.test('stopping after N elements', function (st) {\n\t\tst.test('no context', function (sst) {\n\t\t\tvar actual = {};\n\t\t\tvar count = 0;\n\t\t\tfindLastIndex(getTestArr(), function (obj, index) {\n\t\t\t\tactual[index] = obj;\n\t\t\t\tcount += 1;\n\t\t\t\treturn count === 4;\n\t\t\t});\n\t\t\tsst.deepEqual(actual, { 4: true, 5: undefinedIfNoSparseBug, 6: undefined, 7: 2 });\n\t\t\tsst.end();\n\t\t});\n\n\t\tst.test('with context', function (sst) {\n\t\t\tvar actual = {};\n\t\t\tvar context = { actual: actual };\n\t\t\tvar count = 0;\n\t\t\tfindLastIndex(getTestArr(), function (obj, index) {\n\t\t\t\tthis.actual[index] = obj;\n\t\t\t\tcount += 1;\n\t\t\t\treturn count === 4;\n\t\t\t}, context);\n\t\t\tsst.deepEqual(actual, { 4: true, 5: undefinedIfNoSparseBug, 6: undefined, 7: 2 });\n\t\t\tsst.end();\n\t\t});\n\n\t\tst.test('arraylike, no context', function (sst) {\n\t\t\tvar actual = {};\n\t\t\tvar count = 0;\n\t\t\tfindLastIndex(createArrayLikeFromArray(getTestArr()), function (obj, index) {\n\t\t\t\tactual[index] = obj;\n\t\t\t\tcount += 1;\n\t\t\t\treturn count === 4;\n\t\t\t});\n\t\t\tsst.deepEqual(actual, { 4: true, 5: undefinedIfNoSparseBug, 6: undefined, 7: 2 });\n\t\t\tsst.end();\n\t\t});\n\n\t\tst.test('arraylike, context', function (sst) {\n\t\t\tvar actual = {};\n\t\t\tvar count = 0;\n\t\t\tvar context = { actual: actual };\n\t\t\tfindLastIndex(createArrayLikeFromArray(getTestArr()), function (obj, index) {\n\t\t\t\tthis.actual[index] = obj;\n\t\t\t\tcount += 1;\n\t\t\t\treturn count === 4;\n\t\t\t}, context);\n\t\t\tsst.deepEqual(actual, { 4: true, 5: undefinedIfNoSparseBug, 6: undefined, 7: 2 });\n\t\t\tsst.end();\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('list arg boxing', function (st) {\n\t\tst.plan(3);\n\n\t\tfindLastIndex('bar', function (item, index, list) {\n\t\t\tst.equal(item, 'r', 'last letter matches');\n\t\t\tst.equal(typeof list, 'object', 'primitive list arg is boxed');\n\t\t\tst.equal(Object.prototype.toString.call(list), '[object String]', 'boxed list arg is a String');\n\t\t\treturn true;\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('array altered during loop', function (st) {\n\t\tvar arr = ['Shoes', 'Car', 'Bike'];\n\t\tvar results = [];\n\n\t\tfindLastIndex(arr, function (kValue) {\n\t\t\tif (results.length === 0) {\n\t\t\t\tarr.splice(1, 1);\n\t\t\t}\n\t\t\tresults.push(kValue);\n\t\t});\n\n\t\tst.equal(results.length, 3, 'predicate called three times');\n\t\tst.deepEqual(results, ['Bike', 'Bike', 'Shoes']);\n\n\t\tresults = [];\n\t\tarr = ['Skateboard', 'Barefoot'];\n\t\tfindLastIndex(arr, function (kValue) {\n\t\t\tif (results.length === 0) {\n\t\t\t\tarr.push('Motorcycle');\n\t\t\t\tarr[0] = 'Magic Carpet';\n\t\t\t}\n\n\t\t\tresults.push(kValue);\n\t\t});\n\n\t\tst.equal(results.length, 2, 'predicate called twice');\n\t\tst.deepEqual(results, ['Barefoot', 'Magic Carpet']);\n\n\t\tst.end();\n\t});\n\n\tt.test('maximum index', function (st) {\n\t\t// https://github.com/tc39/test262/pull/3775\n\n\t\tvar arrayLike = { length: Number.MAX_VALUE };\n\t\tvar calledWithIndex = [];\n\n\t\tfindLastIndex(arrayLike, function (_, index) {\n\t\t\tcalledWithIndex.push(index);\n\t\t\treturn true;\n\t\t});\n\n\t\tst.deepEqual(calledWithIndex, [maxSafeInteger - 1], 'predicate invoked once');\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}