{
    "sourceFile": "node_modules/array.prototype.findlastindex/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892028704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('es-abstract/2024/Call');\nvar Get = require('es-abstract/2024/Get');\nvar IsCallable = require('es-abstract/2024/IsCallable');\nvar LengthOfArrayLike = require('es-abstract/2024/LengthOfArrayLike');\nvar ToBoolean = require('es-abstract/2024/ToBoolean');\nvar ToObject = require('es-object-atoms/ToObject');\nvar ToString = require('es-abstract/2024/ToString');\n\nmodule.exports = function findLastIndex(predicate) {\n\tvar O = ToObject(this);\n\tvar len = LengthOfArrayLike(O);\n\n\tif (!IsCallable(predicate)) {\n\t\tthrow new $TypeError('predicate must be a function');\n\t}\n\n\tvar thisArg;\n\tif (arguments.length > 1) {\n\t\tthisArg = arguments[1];\n\t}\n\n\tvar k = len - 1;\n\twhile (k >= 0) {\n\t\tvar Pk = ToString(k);\n\t\tvar kValue = Get(O, Pk);\n\t\tvar testResult = ToBoolean(Call(predicate, thisArg, [kValue, k, O]));\n\t\tif (testResult) {\n\t\t\treturn k;\n\t\t}\n\t\tk -= 1;\n\t}\n\n\treturn -1;\n};\n"
        }
    ]
}