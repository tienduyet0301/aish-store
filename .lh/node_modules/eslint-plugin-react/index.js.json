{
    "sourceFile": "node_modules/eslint-plugin-react/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst fromEntries = require('object.fromentries');\nconst entries = require('object.entries');\n\nconst allRules = require('./lib/rules');\n\nfunction filterRules(rules, predicate) {\n  return fromEntries(entries(rules).filter((entry) => predicate(entry[1])));\n}\n\n/**\n * @param {object} rules - rules object mapping rule name to rule module\n * @returns {Record<string, SEVERITY_ERROR | 'error'>}\n */\nfunction configureAsError(rules) {\n  return fromEntries(Object.keys(rules).map((key) => [`react/${key}`, 2]));\n}\n\n/** @type {Partial<typeof allRules>} */\nconst activeRules = filterRules(allRules, (rule) => !rule.meta.deprecated);\n/** @type {Record<keyof typeof activeRules, 2 | 'error'>} */\nconst activeRulesConfig = configureAsError(activeRules);\n\n/** @type {Partial<typeof allRules>} */\nconst deprecatedRules = filterRules(allRules, (rule) => rule.meta.deprecated);\n\n/** @type {['react']} */\n// for legacy config system\nconst plugins = [\n  'react',\n];\n\n// TODO: with TS 4.5+, inline this\nconst SEVERITY_ERROR = /** @type {2} */ (2);\nconst SEVERITY_OFF = /** @type {0} */ (0);\n\nconst configs = {\n  recommended: {\n    plugins,\n    parserOptions: {\n      ecmaFeatures: {\n        jsx: true,\n      },\n    },\n    rules: {\n      'react/display-name': SEVERITY_ERROR,\n      'react/jsx-key': SEVERITY_ERROR,\n      'react/jsx-no-comment-textnodes': SEVERITY_ERROR,\n      'react/jsx-no-duplicate-props': SEVERITY_ERROR,\n      'react/jsx-no-target-blank': SEVERITY_ERROR,\n      'react/jsx-no-undef': SEVERITY_ERROR,\n      'react/jsx-uses-react': SEVERITY_ERROR,\n      'react/jsx-uses-vars': SEVERITY_ERROR,\n      'react/no-children-prop': SEVERITY_ERROR,\n      'react/no-danger-with-children': SEVERITY_ERROR,\n      'react/no-deprecated': SEVERITY_ERROR,\n      'react/no-direct-mutation-state': SEVERITY_ERROR,\n      'react/no-find-dom-node': SEVERITY_ERROR,\n      'react/no-is-mounted': SEVERITY_ERROR,\n      'react/no-render-return-value': SEVERITY_ERROR,\n      'react/no-string-refs': SEVERITY_ERROR,\n      'react/no-unescaped-entities': SEVERITY_ERROR,\n      'react/no-unknown-property': SEVERITY_ERROR,\n      'react/no-unsafe': SEVERITY_OFF,\n      'react/prop-types': SEVERITY_ERROR,\n      'react/react-in-jsx-scope': SEVERITY_ERROR,\n      'react/require-render-return': SEVERITY_ERROR,\n    },\n  },\n  all: {\n    plugins,\n    parserOptions: {\n      ecmaFeatures: {\n        jsx: true,\n      },\n    },\n    rules: activeRulesConfig,\n  },\n  'jsx-runtime': {\n    plugins,\n    parserOptions: {\n      ecmaFeatures: {\n        jsx: true,\n      },\n      jsxPragma: null, // for @typescript/eslint-parser\n    },\n    rules: {\n      'react/react-in-jsx-scope': SEVERITY_OFF,\n      'react/jsx-uses-react': SEVERITY_OFF,\n    },\n  },\n  flat: /** @type {Record<string, ReactFlatConfig>} */ ({\n    __proto__: null,\n  }),\n};\n\n/** @typedef {{ plugins: { react: typeof plugin }, rules: import('eslint').Linter.RulesRecord, languageOptions: { parserOptions: import('eslint').Linter.ParserOptions } }} ReactFlatConfig */\n\n/** @type {{ deprecatedRules: typeof deprecatedRules, rules: typeof allRules, configs: typeof configs & { flat: Record<string, ReactFlatConfig> }}} */\nconst plugin = {\n  deprecatedRules,\n  rules: allRules,\n  configs,\n};\n\nObject.assign(configs.flat, {\n  recommended: {\n    plugins: { react: plugin },\n    rules: configs.recommended.rules,\n    languageOptions: { parserOptions: configs.recommended.parserOptions },\n  },\n  all: {\n    plugins: { react: plugin },\n    rules: configs.all.rules,\n    languageOptions: { parserOptions: configs.all.parserOptions },\n  },\n  'jsx-runtime': {\n    plugins: { react: plugin },\n    rules: configs['jsx-runtime'].rules,\n    languageOptions: { parserOptions: configs['jsx-runtime'].parserOptions },\n  },\n});\n\nmodule.exports = plugin;\n"
        }
    ]
}