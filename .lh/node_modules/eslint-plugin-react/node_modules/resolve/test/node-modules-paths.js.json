{
    "sourceFile": "node_modules/eslint-plugin-react/node_modules/resolve/test/node-modules-paths.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892281485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var test = require('tape');\nvar path = require('path');\nvar parse = path.parse || require('path-parse');\nvar keys = require('object-keys');\n\nvar nodeModulesPaths = require('../lib/node-modules-paths');\n\nvar verifyDirs = function verifyDirs(t, start, dirs, moduleDirectories, paths) {\n    var moduleDirs = [].concat(moduleDirectories || 'node_modules');\n    if (paths) {\n        for (var k = 0; k < paths.length; ++k) {\n            moduleDirs.push(path.basename(paths[k]));\n        }\n    }\n\n    var foundModuleDirs = {};\n    var uniqueDirs = {};\n    var parsedDirs = {};\n    for (var i = 0; i < dirs.length; ++i) {\n        var parsed = parse(dirs[i]);\n        if (!foundModuleDirs[parsed.base]) { foundModuleDirs[parsed.base] = 0; }\n        foundModuleDirs[parsed.base] += 1;\n        parsedDirs[parsed.dir] = true;\n        uniqueDirs[dirs[i]] = true;\n    }\n    t.equal(keys(parsedDirs).length >= start.split(path.sep).length, true, 'there are >= dirs than \"start\" has');\n    var foundModuleDirNames = keys(foundModuleDirs);\n    t.deepEqual(foundModuleDirNames, moduleDirs, 'all desired module dirs were found');\n    t.equal(keys(uniqueDirs).length, dirs.length, 'all dirs provided were unique');\n\n    var counts = {};\n    for (var j = 0; j < foundModuleDirNames.length; ++j) {\n        counts[foundModuleDirs[j]] = true;\n    }\n    t.equal(keys(counts).length, 1, 'all found module directories had the same count');\n};\n\ntest('node-modules-paths', function (t) {\n    t.test('no options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start);\n\n        verifyDirs(t, start, dirs);\n\n        t.end();\n    });\n\n    t.test('empty options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start, {});\n\n        verifyDirs(t, start, dirs);\n\n        t.end();\n    });\n\n    t.test('with paths=array option', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var paths = ['a', 'b'];\n        var dirs = nodeModulesPaths(start, { paths: paths });\n\n        verifyDirs(t, start, dirs, null, paths);\n\n        t.end();\n    });\n\n    t.test('with paths=function option', function (t) {\n        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\n            return getNodeModulesDirs().concat(path.join(absoluteStart, 'not node modules', request));\n        };\n\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start, { paths: paths }, 'pkg');\n\n        verifyDirs(t, start, dirs, null, [path.join(start, 'not node modules', 'pkg')]);\n\n        t.end();\n    });\n\n    t.test('with paths=function skipping node modules resolution', function (t) {\n        var paths = function paths(request, absoluteStart, getNodeModulesDirs, opts) {\n            return [];\n        };\n        var start = path.join(__dirname, 'resolver');\n        var dirs = nodeModulesPaths(start, { paths: paths });\n        t.deepEqual(dirs, [], 'no node_modules was computed');\n        t.end();\n    });\n\n    t.test('with moduleDirectory option', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var moduleDirectory = 'not node modules';\n        var dirs = nodeModulesPaths(start, { moduleDirectory: moduleDirectory });\n\n        verifyDirs(t, start, dirs, moduleDirectory);\n\n        t.end();\n    });\n\n    t.test('with 1 moduleDirectory and paths options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var paths = ['a', 'b'];\n        var moduleDirectory = 'not node modules';\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectory });\n\n        verifyDirs(t, start, dirs, moduleDirectory, paths);\n\n        t.end();\n    });\n\n    t.test('with 1+ moduleDirectory and paths options', function (t) {\n        var start = path.join(__dirname, 'resolver');\n        var paths = ['a', 'b'];\n        var moduleDirectories = ['not node modules', 'other modules'];\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\n\n        verifyDirs(t, start, dirs, moduleDirectories, paths);\n\n        t.end();\n    });\n\n    t.test('combine paths correctly on Windows', function (t) {\n        var start = 'C:\\\\Users\\\\username\\\\myProject\\\\src';\n        var paths = [];\n        var moduleDirectories = ['node_modules', start];\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\n\n        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\n\n        t.end();\n    });\n\n    t.test('combine paths correctly on non-Windows', { skip: process.platform === 'win32' }, function (t) {\n        var start = '/Users/username/git/myProject/src';\n        var paths = [];\n        var moduleDirectories = ['node_modules', '/Users/username/git/myProject/src'];\n        var dirs = nodeModulesPaths(start, { paths: paths, moduleDirectory: moduleDirectories });\n\n        t.equal(dirs.indexOf(path.resolve(start)) > -1, true, 'should contain start dir');\n\n        t.end();\n    });\n});\n"
        }
    ]
}