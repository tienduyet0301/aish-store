{
    "sourceFile": "node_modules/eslint-plugin-react/node_modules/resolve/test/mock.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892281298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var path = require('path');\nvar test = require('tape');\nvar resolve = require('../');\n\ntest('mock', function (t) {\n    t.plan(8);\n\n    var files = {};\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\n\n    var dirs = {};\n    dirs[path.resolve('/foo/bar')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file, cb) {\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\n            },\n            isDirectory: function (dir, cb) {\n                cb(null, !!dirs[path.resolve(dir)]);\n            },\n            readFile: function (file, cb) {\n                cb(null, files[path.resolve(file)]);\n            },\n            realpath: function (file, cb) {\n                cb(null, file);\n            }\n        };\n    }\n\n    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\n        t.equal(pkg, undefined);\n    });\n\n    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\n        t.equal(pkg, undefined);\n    });\n\n    resolve('baz', opts('/foo/bar'), function (err, res) {\n        t.equal(err.message, \"Cannot find module 'baz' from '\" + path.resolve('/foo/bar') + \"'\");\n        t.equal(err.code, 'MODULE_NOT_FOUND');\n    });\n\n    resolve('../baz', opts('/foo/bar'), function (err, res) {\n        t.equal(err.message, \"Cannot find module '../baz' from '\" + path.resolve('/foo/bar') + \"'\");\n        t.equal(err.code, 'MODULE_NOT_FOUND');\n    });\n});\n\ntest('mock from package', function (t) {\n    t.plan(8);\n\n    var files = {};\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\n\n    var dirs = {};\n    dirs[path.resolve('/foo/bar')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file, cb) {\n                cb(null, Object.prototype.hasOwnProperty.call(files, file));\n            },\n            isDirectory: function (dir, cb) {\n                cb(null, !!dirs[path.resolve(dir)]);\n            },\n            'package': { main: 'bar' },\n            readFile: function (file, cb) {\n                cb(null, files[file]);\n            },\n            realpath: function (file, cb) {\n                cb(null, file);\n            }\n        };\n    }\n\n    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\n        t.equal(pkg && pkg.main, 'bar');\n    });\n\n    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/bar/baz.js'));\n        t.equal(pkg && pkg.main, 'bar');\n    });\n\n    resolve('baz', opts('/foo/bar'), function (err, res) {\n        t.equal(err.message, \"Cannot find module 'baz' from '\" + path.resolve('/foo/bar') + \"'\");\n        t.equal(err.code, 'MODULE_NOT_FOUND');\n    });\n\n    resolve('../baz', opts('/foo/bar'), function (err, res) {\n        t.equal(err.message, \"Cannot find module '../baz' from '\" + path.resolve('/foo/bar') + \"'\");\n        t.equal(err.code, 'MODULE_NOT_FOUND');\n    });\n});\n\ntest('mock package', function (t) {\n    t.plan(2);\n\n    var files = {};\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\n        main: './baz.js'\n    });\n\n    var dirs = {};\n    dirs[path.resolve('/foo')] = true;\n    dirs[path.resolve('/foo/node_modules')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file, cb) {\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\n            },\n            isDirectory: function (dir, cb) {\n                cb(null, !!dirs[path.resolve(dir)]);\n            },\n            readFile: function (file, cb) {\n                cb(null, files[path.resolve(file)]);\n            },\n            realpath: function (file, cb) {\n                cb(null, file);\n            }\n        };\n    }\n\n    resolve('bar', opts('/foo'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));\n        t.equal(pkg && pkg.main, './baz.js');\n    });\n});\n\ntest('mock package from package', function (t) {\n    t.plan(2);\n\n    var files = {};\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\n        main: './baz.js'\n    });\n\n    var dirs = {};\n    dirs[path.resolve('/foo')] = true;\n    dirs[path.resolve('/foo/node_modules')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file, cb) {\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\n            },\n            isDirectory: function (dir, cb) {\n                cb(null, !!dirs[path.resolve(dir)]);\n            },\n            'package': { main: 'bar' },\n            readFile: function (file, cb) {\n                cb(null, files[path.resolve(file)]);\n            },\n            realpath: function (file, cb) {\n                cb(null, file);\n            }\n        };\n    }\n\n    resolve('bar', opts('/foo'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));\n        t.equal(pkg && pkg.main, './baz.js');\n    });\n});\n\ntest('symlinked', function (t) {\n    t.plan(4);\n\n    var files = {};\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\n    files[path.resolve('/foo/bar/symlinked/baz.js')] = 'beep';\n\n    var dirs = {};\n    dirs[path.resolve('/foo/bar')] = true;\n    dirs[path.resolve('/foo/bar/symlinked')] = true;\n\n    function opts(basedir) {\n        return {\n            preserveSymlinks: false,\n            basedir: path.resolve(basedir),\n            isFile: function (file, cb) {\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\n            },\n            isDirectory: function (dir, cb) {\n                cb(null, !!dirs[path.resolve(dir)]);\n            },\n            readFile: function (file, cb) {\n                cb(null, files[path.resolve(file)]);\n            },\n            realpath: function (file, cb) {\n                var resolved = path.resolve(file);\n\n                if (resolved.indexOf('symlinked') >= 0) {\n                    cb(null, resolved);\n                    return;\n                }\n\n                var ext = path.extname(resolved);\n\n                if (ext) {\n                    var dir = path.dirname(resolved);\n                    var base = path.basename(resolved);\n                    cb(null, path.join(dir, 'symlinked', base));\n                } else {\n                    cb(null, path.join(resolved, 'symlinked'));\n                }\n            }\n        };\n    }\n\n    resolve('./baz', opts('/foo/bar'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/bar/symlinked/baz.js'));\n        t.equal(pkg, undefined);\n    });\n\n    resolve('./baz.js', opts('/foo/bar'), function (err, res, pkg) {\n        if (err) return t.fail(err);\n        t.equal(res, path.resolve('/foo/bar/symlinked/baz.js'));\n        t.equal(pkg, undefined);\n    });\n});\n\ntest('readPackage', function (t) {\n    t.plan(3);\n\n    var files = {};\n    files[path.resolve('/foo/node_modules/bar/something-else.js')] = 'beep';\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\n        main: './baz.js'\n    });\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'boop';\n\n    var dirs = {};\n    dirs[path.resolve('/foo')] = true;\n    dirs[path.resolve('/foo/node_modules')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file, cb) {\n                cb(null, Object.prototype.hasOwnProperty.call(files, path.resolve(file)));\n            },\n            isDirectory: function (dir, cb) {\n                cb(null, !!dirs[path.resolve(dir)]);\n            },\n            'package': { main: 'bar' },\n            readFile: function (file, cb) {\n                cb(null, files[path.resolve(file)]);\n            },\n            realpath: function (file, cb) {\n                cb(null, file);\n            }\n        };\n    }\n\n    t.test('with readFile', function (st) {\n        st.plan(3);\n\n        resolve('bar', opts('/foo'), function (err, res, pkg) {\n            st.error(err);\n            st.equal(res, path.resolve('/foo/node_modules/bar/baz.js'));\n            st.equal(pkg && pkg.main, './baz.js');\n        });\n    });\n\n    var readPackage = function (readFile, file, cb) {\n        var barPackage = path.join('bar', 'package.json');\n        if (file.slice(-barPackage.length) === barPackage) {\n            cb(null, { main: './something-else.js' });\n        } else {\n            cb(null, JSON.parse(files[path.resolve(file)]));\n        }\n    };\n\n    t.test('with readPackage', function (st) {\n        st.plan(3);\n\n        var options = opts('/foo');\n        delete options.readFile;\n        options.readPackage = readPackage;\n        resolve('bar', options, function (err, res, pkg) {\n            st.error(err);\n            st.equal(res, path.resolve('/foo/node_modules/bar/something-else.js'));\n            st.equal(pkg && pkg.main, './something-else.js');\n        });\n    });\n\n    t.test('with readFile and readPackage', function (st) {\n        st.plan(1);\n\n        var options = opts('/foo');\n        options.readPackage = readPackage;\n        resolve('bar', options, function (err) {\n            st.throws(function () { throw err; }, TypeError, 'errors when both readFile and readPackage are provided');\n        });\n    });\n});\n"
        }
    ]
}