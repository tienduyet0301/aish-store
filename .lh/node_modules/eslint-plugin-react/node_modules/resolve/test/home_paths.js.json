{
    "sourceFile": "node_modules/eslint-plugin-react/node_modules/resolve/test/home_paths.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892281234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar fs = require('fs');\nvar homedir = require('../lib/homedir');\nvar path = require('path');\n\nvar test = require('tape');\nvar mkdirp = require('mkdirp');\nvar rimraf = require('rimraf');\nvar mv = require('mv');\nvar copyDir = require('copy-dir');\nvar tmp = require('tmp');\n\nvar HOME = homedir();\n\nvar hnm = path.join(HOME, '.node_modules');\nvar hnl = path.join(HOME, '.node_libraries');\n\nvar resolve = require('../async');\n\nfunction makeDir(t, dir, cb) {\n    mkdirp(dir, function (err) {\n        if (err) {\n            cb(err);\n        } else {\n            t.teardown(function cleanup() {\n                rimraf.sync(dir);\n            });\n            cb();\n        }\n    });\n}\n\nfunction makeTempDir(t, dir, cb) {\n    if (fs.existsSync(dir)) {\n        var tmpResult = tmp.dirSync();\n        t.teardown(tmpResult.removeCallback);\n        var backup = path.join(tmpResult.name, path.basename(dir));\n        mv(dir, backup, function (err) {\n            if (err) {\n                cb(err);\n            } else {\n                t.teardown(function () {\n                    mv(backup, dir, cb);\n                });\n                makeDir(t, dir, cb);\n            }\n        });\n    } else {\n        makeDir(t, dir, cb);\n    }\n}\n\ntest('homedir module paths', function (t) {\n    t.plan(7);\n\n    makeTempDir(t, hnm, function (err) {\n        t.error(err, 'no error with HNM temp dir');\n        if (err) {\n            return t.end();\n        }\n\n        var bazHNMDir = path.join(hnm, 'baz');\n        var dotMainDir = path.join(hnm, 'dot_main');\n        copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNMDir);\n        copyDir.sync(path.join(__dirname, 'resolver/dot_main'), dotMainDir);\n\n        var bazPkg = { name: 'baz', main: 'quux.js' };\n        var dotMainPkg = { main: 'index' };\n\n        var bazHNMmain = path.join(bazHNMDir, 'quux.js');\n        t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');\n        var dotMainMain = path.join(dotMainDir, 'index.js');\n        t.equal(require.resolve('dot_main'), dotMainMain, 'sanity check: require.resolve finds `dot_main`');\n\n        makeTempDir(t, hnl, function (err) {\n            t.error(err, 'no error with HNL temp dir');\n            if (err) {\n                return t.end();\n            }\n            var bazHNLDir = path.join(hnl, 'baz');\n            copyDir.sync(path.join(__dirname, 'resolver/baz'), bazHNLDir);\n\n            var dotSlashMainDir = path.join(hnl, 'dot_slash_main');\n            var dotSlashMainMain = path.join(dotSlashMainDir, 'index.js');\n            var dotSlashMainPkg = { main: 'index' };\n            copyDir.sync(path.join(__dirname, 'resolver/dot_slash_main'), dotSlashMainDir);\n\n            t.equal(require.resolve('baz'), bazHNMmain, 'sanity check: require.resolve finds HNM `baz`');\n            t.equal(require.resolve('dot_slash_main'), dotSlashMainMain, 'sanity check: require.resolve finds HNL `dot_slash_main`');\n\n            t.test('with temp dirs', function (st) {\n                st.plan(3);\n\n                st.test('just in `$HOME/.node_modules`', function (s2t) {\n                    s2t.plan(3);\n\n                    resolve('dot_main', function (err, res, pkg) {\n                        s2t.error(err, 'no error resolving `dot_main`');\n                        s2t.equal(res, dotMainMain, '`dot_main` resolves in `$HOME/.node_modules`');\n                        s2t.deepEqual(pkg, dotMainPkg);\n                    });\n                });\n\n                st.test('just in `$HOME/.node_libraries`', function (s2t) {\n                    s2t.plan(3);\n\n                    resolve('dot_slash_main', function (err, res, pkg) {\n                        s2t.error(err, 'no error resolving `dot_slash_main`');\n                        s2t.equal(res, dotSlashMainMain, '`dot_slash_main` resolves in `$HOME/.node_libraries`');\n                        s2t.deepEqual(pkg, dotSlashMainPkg);\n                    });\n                });\n\n                st.test('in `$HOME/.node_libraries` and `$HOME/.node_modules`', function (s2t) {\n                    s2t.plan(3);\n\n                    resolve('baz', function (err, res, pkg) {\n                        s2t.error(err, 'no error resolving `baz`');\n                        s2t.equal(res, bazHNMmain, '`baz` resolves in `$HOME/.node_modules` when in both');\n                        s2t.deepEqual(pkg, bazPkg);\n                    });\n                });\n            });\n        });\n    });\n});\n"
        }
    ]
}