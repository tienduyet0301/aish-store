{
    "sourceFile": "node_modules/eslint-plugin-react/node_modules/resolve/test/symlinks.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892282940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var path = require('path');\nvar fs = require('fs');\nvar test = require('tape');\nvar map = require('array.prototype.map');\nvar resolve = require('../');\n\nvar symlinkDir = path.join(__dirname, 'resolver', 'symlinked', 'symlink');\nvar packageDir = path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'package');\nvar modADir = path.join(__dirname, 'symlinks', 'source', 'node_modules', 'mod-a');\nvar symlinkModADir = path.join(__dirname, 'symlinks', 'dest', 'node_modules', 'mod-a');\ntry {\n    fs.unlinkSync(symlinkDir);\n} catch (err) {}\ntry {\n    fs.unlinkSync(packageDir);\n} catch (err) {}\ntry {\n    fs.unlinkSync(modADir);\n} catch (err) {}\ntry {\n    fs.unlinkSync(symlinkModADir);\n} catch (err) {}\n\ntry {\n    fs.symlinkSync('./_/symlink_target', symlinkDir, 'dir');\n} catch (err) {\n    if (err.code !== 'EEXIST') {\n        // if fails then it is probably on Windows and lets try to create a junction\n        fs.symlinkSync(path.join(__dirname, 'resolver', 'symlinked', '_', 'symlink_target') + '\\\\', symlinkDir, 'junction');\n    }\n}\ntry {\n    fs.symlinkSync('../../package', packageDir, 'dir');\n} catch (err) {\n    // if fails then it is probably on Windows and lets try to create a junction\n    fs.symlinkSync(path.join(__dirname, '..', '..', 'package') + '\\\\', packageDir, 'junction');\n}\ntry {\n    fs.symlinkSync('../../source/node_modules/mod-a', symlinkModADir, 'dir');\n} catch (err) {\n    // if fails then it is probably on Windows and lets try to create a junction\n    fs.symlinkSync(path.join(__dirname, '..', '..', 'source', 'node_modules', 'mod-a') + '\\\\', symlinkModADir, 'junction');\n}\n\ntest('symlink', function (t) {\n    t.plan(2);\n\n    resolve('foo', { basedir: symlinkDir }, function (err, res, pkg) {\n        t.error(err);\n        t.equal(res, path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js'));\n    });\n});\n\ntest('sync symlink when preserveSymlinks = true', function (t) {\n    t.plan(4);\n\n    resolve('foo', { basedir: symlinkDir, preserveSymlinks: true }, function (err, res, pkg) {\n        t.ok(err, 'there is an error');\n        t.notOk(res, 'no result');\n\n        t.equal(err && err.code, 'MODULE_NOT_FOUND', 'error code matches require.resolve');\n        t.equal(\n            err && err.message,\n            'Cannot find module \\'foo\\' from \\'' + symlinkDir + '\\'',\n            'can not find nonexistent module'\n        );\n    });\n});\n\ntest('sync symlink', function (t) {\n    var start = new Date();\n    t.doesNotThrow(function () {\n        t.equal(\n            resolve.sync('foo', { basedir: symlinkDir, preserveSymlinks: false }),\n            path.join(__dirname, 'resolver', 'symlinked', '_', 'node_modules', 'foo.js')\n        );\n    });\n    t.ok(new Date() - start < 50, 'resolve.sync timedout');\n    t.end();\n});\n\ntest('sync symlink when preserveSymlinks = true', function (t) {\n    t.throws(function () {\n        resolve.sync('foo', { basedir: symlinkDir, preserveSymlinks: true });\n    }, /Cannot find module 'foo'/);\n    t.end();\n});\n\ntest('sync symlink from node_modules to other dir when preserveSymlinks = false', function (t) {\n    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');\n    var fn = resolve.sync('package', { basedir: basedir, preserveSymlinks: false });\n\n    t.equal(fn, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));\n    t.end();\n});\n\ntest('async symlink from node_modules to other dir when preserveSymlinks = false', function (t) {\n    t.plan(2);\n    var basedir = path.join(__dirname, 'resolver', 'symlinked', '_');\n    resolve('package', { basedir: basedir, preserveSymlinks: false }, function (err, result) {\n        t.notOk(err, 'no error');\n        t.equal(result, path.resolve(__dirname, 'resolver/symlinked/package/bar.js'));\n    });\n});\n\ntest('packageFilter', function (t) {\n    function relative(x) {\n        return path.relative(__dirname, x);\n    }\n\n    function testPackageFilter(preserveSymlinks) {\n        return function (st) {\n            st.plan(5);\n\n            var destMain = 'symlinks/dest/node_modules/mod-a/index.js';\n            var destPkg = 'symlinks/dest/node_modules/mod-a/package.json';\n            var sourceMain = 'symlinks/source/node_modules/mod-a/index.js';\n            var sourcePkg = 'symlinks/source/node_modules/mod-a/package.json';\n            var destDir = path.join(__dirname, 'symlinks', 'dest');\n\n            var packageFilterPath = [];\n            var actualPath = resolve.sync('mod-a', {\n                basedir: destDir,\n                preserveSymlinks: preserveSymlinks,\n                packageFilter: function (pkg, pkgfile, dir) {\n                    packageFilterPath.push(pkgfile);\n                }\n            });\n            st.equal(\n                relative(actualPath),\n                path.normalize(preserveSymlinks ? destMain : sourceMain),\n                'sync: actual path is correct'\n            );\n            st.deepEqual(\n                map(packageFilterPath, relative),\n                map(preserveSymlinks ? [destPkg, destPkg] : [sourcePkg, sourcePkg], path.normalize),\n                'sync: packageFilter pkgfile arg is correct'\n            );\n\n            var asyncPackageFilterPath = [];\n            resolve(\n                'mod-a',\n                {\n                    basedir: destDir,\n                    preserveSymlinks: preserveSymlinks,\n                    packageFilter: function (pkg, pkgfile) {\n                        asyncPackageFilterPath.push(pkgfile);\n                    }\n                },\n                function (err, actualPath) {\n                    st.error(err, 'no error');\n                    st.equal(\n                        relative(actualPath),\n                        path.normalize(preserveSymlinks ? destMain : sourceMain),\n                        'async: actual path is correct'\n                    );\n                    st.deepEqual(\n                        map(asyncPackageFilterPath, relative),\n                        map(\n                            preserveSymlinks ? [destPkg, destPkg, destPkg] : [sourcePkg, sourcePkg, sourcePkg],\n                            path.normalize\n                        ),\n                        'async: packageFilter pkgfile arg is correct'\n                    );\n                }\n            );\n        };\n    }\n\n    t.test('preserveSymlinks: false', testPackageFilter(false));\n\n    t.test('preserveSymlinks: true', testPackageFilter(true));\n\n    t.end();\n});\n"
        }
    ]
}