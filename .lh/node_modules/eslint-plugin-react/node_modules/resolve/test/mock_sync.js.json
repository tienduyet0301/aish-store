{
    "sourceFile": "node_modules/eslint-plugin-react/node_modules/resolve/test/mock_sync.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892281333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var path = require('path');\nvar test = require('tape');\nvar resolve = require('../');\n\ntest('mock', function (t) {\n    t.plan(4);\n\n    var files = {};\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\n\n    var dirs = {};\n    dirs[path.resolve('/foo/bar')] = true;\n    dirs[path.resolve('/foo/node_modules')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file) {\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\n            },\n            isDirectory: function (dir) {\n                return !!dirs[path.resolve(dir)];\n            },\n            readFileSync: function (file) {\n                return files[path.resolve(file)];\n            },\n            realpathSync: function (file) {\n                return file;\n            }\n        };\n    }\n\n    t.equal(\n        resolve.sync('./baz', opts('/foo/bar')),\n        path.resolve('/foo/bar/baz.js')\n    );\n\n    t.equal(\n        resolve.sync('./baz.js', opts('/foo/bar')),\n        path.resolve('/foo/bar/baz.js')\n    );\n\n    t.throws(function () {\n        resolve.sync('baz', opts('/foo/bar'));\n    });\n\n    t.throws(function () {\n        resolve.sync('../baz', opts('/foo/bar'));\n    });\n});\n\ntest('mock package', function (t) {\n    t.plan(1);\n\n    var files = {};\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'beep';\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\n        main: './baz.js'\n    });\n\n    var dirs = {};\n    dirs[path.resolve('/foo')] = true;\n    dirs[path.resolve('/foo/node_modules')] = true;\n\n    function opts(basedir) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file) {\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\n            },\n            isDirectory: function (dir) {\n                return !!dirs[path.resolve(dir)];\n            },\n            readFileSync: function (file) {\n                return files[path.resolve(file)];\n            },\n            realpathSync: function (file) {\n                return file;\n            }\n        };\n    }\n\n    t.equal(\n        resolve.sync('bar', opts('/foo')),\n        path.resolve('/foo/node_modules/bar/baz.js')\n    );\n});\n\ntest('symlinked', function (t) {\n    t.plan(2);\n\n    var files = {};\n    files[path.resolve('/foo/bar/baz.js')] = 'beep';\n    files[path.resolve('/foo/bar/symlinked/baz.js')] = 'beep';\n\n    var dirs = {};\n    dirs[path.resolve('/foo/bar')] = true;\n    dirs[path.resolve('/foo/bar/symlinked')] = true;\n\n    function opts(basedir) {\n        return {\n            preserveSymlinks: false,\n            basedir: path.resolve(basedir),\n            isFile: function (file) {\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\n            },\n            isDirectory: function (dir) {\n                return !!dirs[path.resolve(dir)];\n            },\n            readFileSync: function (file) {\n                return files[path.resolve(file)];\n            },\n            realpathSync: function (file) {\n                var resolved = path.resolve(file);\n\n                if (resolved.indexOf('symlinked') >= 0) {\n                    return resolved;\n                }\n\n                var ext = path.extname(resolved);\n\n                if (ext) {\n                    var dir = path.dirname(resolved);\n                    var base = path.basename(resolved);\n                    return path.join(dir, 'symlinked', base);\n                }\n                return path.join(resolved, 'symlinked');\n            }\n        };\n    }\n\n    t.equal(\n        resolve.sync('./baz', opts('/foo/bar')),\n        path.resolve('/foo/bar/symlinked/baz.js')\n    );\n\n    t.equal(\n        resolve.sync('./baz.js', opts('/foo/bar')),\n        path.resolve('/foo/bar/symlinked/baz.js')\n    );\n});\n\ntest('readPackageSync', function (t) {\n    t.plan(3);\n\n    var files = {};\n    files[path.resolve('/foo/node_modules/bar/something-else.js')] = 'beep';\n    files[path.resolve('/foo/node_modules/bar/package.json')] = JSON.stringify({\n        main: './baz.js'\n    });\n    files[path.resolve('/foo/node_modules/bar/baz.js')] = 'boop';\n\n    var dirs = {};\n    dirs[path.resolve('/foo')] = true;\n    dirs[path.resolve('/foo/node_modules')] = true;\n\n    function opts(basedir, useReadPackage) {\n        return {\n            basedir: path.resolve(basedir),\n            isFile: function (file) {\n                return Object.prototype.hasOwnProperty.call(files, path.resolve(file));\n            },\n            isDirectory: function (dir) {\n                return !!dirs[path.resolve(dir)];\n            },\n            readFileSync: useReadPackage ? null : function (file) {\n                return files[path.resolve(file)];\n            },\n            realpathSync: function (file) {\n                return file;\n            }\n        };\n    }\n    t.test('with readFile', function (st) {\n        st.plan(1);\n\n        st.equal(\n            resolve.sync('bar', opts('/foo')),\n            path.resolve('/foo/node_modules/bar/baz.js')\n        );\n    });\n\n    var readPackageSync = function (readFileSync, file) {\n        if (file.indexOf(path.join('bar', 'package.json')) >= 0) {\n            return { main: './something-else.js' };\n        }\n        return JSON.parse(files[path.resolve(file)]);\n    };\n\n    t.test('with readPackage', function (st) {\n        st.plan(1);\n\n        var options = opts('/foo');\n        delete options.readFileSync;\n        options.readPackageSync = readPackageSync;\n\n        st.equal(\n            resolve.sync('bar', options),\n            path.resolve('/foo/node_modules/bar/something-else.js')\n        );\n    });\n\n    t.test('with readFile and readPackage', function (st) {\n        st.plan(1);\n\n        var options = opts('/foo');\n        options.readPackageSync = readPackageSync;\n        st.throws(\n            function () { resolve.sync('bar', options); },\n            TypeError,\n            'errors when both readFile and readPackage are provided'\n        );\n    });\n});\n\n"
        }
    ]
}