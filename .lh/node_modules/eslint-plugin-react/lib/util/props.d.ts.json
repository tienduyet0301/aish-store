{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/props.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892279798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Checks if the Identifier node passed in looks like a propTypes declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {boolean} `true` if the node is a propTypes declaration, `false` if not\n */\nexport function isPropTypesDeclaration(node: ASTNode): boolean;\n/**\n * Checks if the node passed in looks like a contextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a contextTypes declaration, `false` if not\n */\nexport function isContextTypesDeclaration(node: ASTNode): boolean;\n/**\n * Checks if the node passed in looks like a contextType declaration.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a contextType declaration, `false` if not\n */\nexport function isContextTypeDeclaration(node: ASTNode): boolean;\n/**\n * Checks if the node passed in looks like a childContextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a childContextTypes declaration, `false` if not\n */\nexport function isChildContextTypesDeclaration(node: ASTNode): boolean;\n/**\n * Checks if the Identifier node passed in looks like a defaultProps declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {boolean} `true` if the node is a defaultProps declaration, `false` if not\n */\nexport function isDefaultPropsDeclaration(node: ASTNode): boolean;\n/**\n * Checks if we are declaring a display name\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} True if we are declaring a display name, false if not.\n */\nexport function isDisplayNameDeclaration(node: ASTNode): boolean;\n/**\n * Checks if the PropTypes MemberExpression node passed in declares a required propType.\n * @param {ASTNode} propTypeExpression node to check. Must be a `PropTypes` MemberExpression.\n * @returns {boolean} `true` if this PropType is required, `false` if not.\n */\nexport function isRequiredPropType(propTypeExpression: ASTNode): boolean;\n/**\n * Returns the type arguments of a node or type parameters if type arguments are not available.\n * @param {ASTNode} node The node to get the type arguments from.\n * @returns {ASTNode} The type arguments or type parameters of the node.\n */\nexport function getTypeArguments(node: ASTNode): ASTNode;\n/**\n * Returns the super type arguments of a node or super type parameters if type arguments are not available.\n * @param {ASTNode} node The node to get the super type arguments from.\n * @returns {ASTNode} The super type arguments or parameters of the node.\n */\nexport function getSuperTypeArguments(node: ASTNode): ASTNode;\n//# sourceMappingURL=props.d.ts.map"
        }
    ]
}