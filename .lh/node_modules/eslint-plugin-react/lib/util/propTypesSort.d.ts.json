{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/propTypesSort.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892279968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Fixes sort order of prop types.\n *\n * @param {Context} context the second element to compare.\n * @param {Fixer} fixer the first element to compare.\n * @param {Array} declarations The context of the two nodes.\n * @param {boolean=} ignoreCase whether or not to ignore case when comparing the two elements.\n * @param {boolean=} requiredFirst whether or not to sort required elements first.\n * @param {boolean=} callbacksLast whether or not to sort callbacks after everything else.\n * @param {boolean=} noSortAlphabetically whether or not to disable alphabetical sorting of the elements.\n * @param {boolean=} sortShapeProp whether or not to sort propTypes defined in PropTypes.shape.\n * @param {boolean=} checkTypes whether or not sorting of prop type definitions are checked.\n * @returns {Object|*|{range, text}} the sort order of the two elements.\n */\nexport function fixPropTypesSort(context: Context, fixer: Fixer, declarations: any[], ignoreCase?: boolean | undefined, requiredFirst?: boolean | undefined, callbacksLast?: boolean | undefined, noSortAlphabetically?: boolean | undefined, sortShapeProp?: boolean | undefined, checkTypes?: boolean | undefined): any | any | {\n    range;\n    text;\n};\n/**\n * Checks if the proptype is a callback by checking if it starts with 'on'.\n *\n * @param {string} propName the name of the proptype to check.\n * @returns {boolean} true if the proptype is a callback.\n */\nexport function isCallbackPropName(propName: string): boolean;\n/**\n * Checks if the prop is required or not.\n *\n * @param {ASTNode} node the prop to check.\n * @returns {boolean} true if the prop is required.\n */\nexport function isRequiredProp(node: ASTNode): boolean;\n/**\n * Checks if the prop is PropTypes.shape.\n *\n * @param {ASTNode} node the prop to check.\n * @returns {boolean} true if the prop is PropTypes.shape.\n */\nexport function isShapeProp(node: ASTNode): boolean;\n//# sourceMappingURL=propTypesSort.d.ts.map"
        }
    ]
}