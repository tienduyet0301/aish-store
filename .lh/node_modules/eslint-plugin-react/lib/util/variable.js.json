{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/variable.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892280287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility functions for React components detection\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst getScope = require('./eslint').getScope;\n\n/**\n * Search a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {boolean} True if the variable was found, false if not.\n */\nfunction findVariable(variables, name) {\n  return variables.some((variable) => variable.name === name);\n}\n\n/**\n * Find and return a particular variable in a list\n * @param {Array} variables The variables list.\n * @param {string} name The name of the variable to search.\n * @returns {Object} Variable if the variable was found, null if not.\n */\nfunction getVariable(variables, name) {\n  return variables.find((variable) => variable.name === name);\n}\n\n/**\n * Searches for a variable in the given scope.\n *\n * @param {Object} context The current rule context.\n * @param {ASTNode} node The node to start looking from.\n * @param {string} name The name of the variable to search.\n * @returns {Object | undefined} Variable if the variable was found, undefined if not.\n */\nfunction getVariableFromContext(context, node, name) {\n  let scope = getScope(context, node);\n\n  while (scope) {\n    let variable = getVariable(scope.variables, name);\n\n    if (!variable && scope.childScopes.length) {\n      variable = getVariable(scope.childScopes[0].variables, name);\n\n      if (!variable && scope.childScopes[0].childScopes.length) {\n        variable = getVariable(scope.childScopes[0].childScopes[0].variables, name);\n      }\n    }\n\n    if (variable) {\n      return variable;\n    }\n    scope = scope.upper;\n  }\n  return undefined;\n}\n\n/**\n * Find a variable by name in the current scope.\n * @param {Object} context The current rule context.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @param  {string} name Name of the variable to look for.\n * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n */\nfunction findVariableByName(context, node, name) {\n  const variable = getVariableFromContext(context, node, name);\n\n  if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n    return null;\n  }\n\n  if (variable.defs[0].node.type === 'TypeAlias') {\n    return variable.defs[0].node.right;\n  }\n\n  if (variable.defs[0].type === 'ImportBinding') {\n    return variable.defs[0].node;\n  }\n\n  return variable.defs[0].node.init;\n}\n\n/**\n * Returns the latest definition of the variable.\n * @param {Object} variable\n * @returns {Object | undefined} The latest variable definition or undefined.\n */\nfunction getLatestVariableDefinition(variable) {\n  return variable.defs[variable.defs.length - 1];\n}\n\nmodule.exports = {\n  findVariable,\n  findVariableByName,\n  getVariable,\n  getVariableFromContext,\n  getLatestVariableDefinition,\n};\n"
        }
    ]
}