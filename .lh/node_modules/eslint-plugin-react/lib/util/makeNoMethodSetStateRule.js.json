{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/makeNoMethodSetStateRule.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892279646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of setState in lifecycle methods\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst findLast = require('array.prototype.findlast');\n\nconst docsUrl = require('./docsUrl');\nconst report = require('./report');\nconst getAncestors = require('./eslint').getAncestors;\nconst testReactVersion = require('./version').testReactVersion;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nfunction mapTitle(methodName) {\n  const map = {\n    componentDidMount: 'did-mount',\n    componentDidUpdate: 'did-update',\n    componentWillUpdate: 'will-update',\n  };\n  const title = map[methodName];\n  if (!title) {\n    throw Error(`No docsUrl for '${methodName}'`);\n  }\n  return `no-${title}-set-state`;\n}\n\nconst messages = {\n  noSetState: 'Do not use setState in {{name}}',\n};\n\nconst methodNoopsAsOf = {\n  componentDidMount: '>= 16.3.0',\n  componentDidUpdate: '>= 16.3.0',\n};\n\nfunction shouldBeNoop(context, methodName) {\n  return methodName in methodNoopsAsOf\n    && testReactVersion(context, methodNoopsAsOf[methodName])\n    && !testReactVersion(context, '999.999.999'); // for when the version is not specified\n}\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @param {string} methodName\n * @param {(context: import('eslint').Rule.RuleContext) => boolean} [shouldCheckUnsafeCb]\n * @returns {import('eslint').Rule.RuleModule}\n */\nmodule.exports = function makeNoMethodSetStateRule(methodName, shouldCheckUnsafeCb) {\n  return {\n    meta: {\n      docs: {\n        description: `Disallow usage of setState in ${methodName}`,\n        category: 'Best Practices',\n        recommended: false,\n        url: docsUrl(mapTitle(methodName)),\n      },\n\n      messages,\n\n      schema: [{\n        enum: ['disallow-in-func'],\n      }],\n    },\n\n    create(context) {\n      const mode = context.options[0] || 'allow-in-func';\n\n      function nameMatches(name) {\n        if (name === methodName) {\n          return true;\n        }\n\n        if (typeof shouldCheckUnsafeCb === 'function' && shouldCheckUnsafeCb(context)) {\n          return name === `UNSAFE_${methodName}`;\n        }\n\n        return false;\n      }\n\n      if (shouldBeNoop(context, methodName)) {\n        return {};\n      }\n\n      // --------------------------------------------------------------------------\n      // Public\n      // --------------------------------------------------------------------------\n\n      return {\n        CallExpression(node) {\n          const callee = node.callee;\n          if (\n            callee.type !== 'MemberExpression'\n            || callee.object.type !== 'ThisExpression'\n            || !('name' in callee.property)\n            || callee.property.name !== 'setState'\n          ) {\n            return;\n          }\n          const ancestors = getAncestors(context, node);\n          let depth = 0;\n          findLast(ancestors, (ancestor) => {\n          // ancestors.some((ancestor) => {\n            if (/Function(Expression|Declaration)$/.test(ancestor.type)) {\n              depth += 1;\n            }\n            if (\n              (ancestor.type !== 'Property' && ancestor.type !== 'MethodDefinition' && ancestor.type !== 'ClassProperty' && ancestor.type !== 'PropertyDefinition')\n              || !nameMatches(ancestor.key.name)\n              || (mode !== 'disallow-in-func' && depth > 1)\n            ) {\n              return false;\n            }\n            report(context, messages.noSetState, 'noSetState', {\n              node: callee,\n              data: {\n                name: ancestor.key.name,\n              },\n            });\n            return true;\n          });\n        },\n      };\n    },\n  };\n};\n"
        }
    ]
}