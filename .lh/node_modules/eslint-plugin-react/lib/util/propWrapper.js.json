{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/propWrapper.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892280080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility functions for propWrapperFunctions setting\n */\n\n'use strict';\n\nconst filter = require('es-iterator-helpers/Iterator.prototype.filter');\nconst some = require('es-iterator-helpers/Iterator.prototype.some');\n\nfunction searchPropWrapperFunctions(name, propWrapperFunctions) {\n  const splitName = name.split('.');\n  return some(propWrapperFunctions.values(), (func) => {\n    if (splitName.length === 2 && func.object === splitName[0] && func.property === splitName[1]) {\n      return true;\n    }\n    return name === func || func.property === name;\n  });\n}\n\nfunction getPropWrapperFunctions(context) {\n  return new Set(context.settings.propWrapperFunctions || []);\n}\n\nfunction isPropWrapperFunction(context, name) {\n  if (typeof name !== 'string') {\n    return false;\n  }\n  const propWrapperFunctions = getPropWrapperFunctions(context);\n  return searchPropWrapperFunctions(name, propWrapperFunctions);\n}\n\nfunction getExactPropWrapperFunctions(context) {\n  const propWrapperFunctions = getPropWrapperFunctions(context);\n  const exactPropWrappers = filter(propWrapperFunctions.values(), (func) => func.exact === true);\n  return new Set(exactPropWrappers);\n}\n\nfunction isExactPropWrapperFunction(context, name) {\n  const exactPropWrappers = getExactPropWrapperFunctions(context);\n  return searchPropWrapperFunctions(name, exactPropWrappers);\n}\n\nfunction formatPropWrapperFunctions(propWrapperFunctions) {\n  return Array.from(propWrapperFunctions, (func) => {\n    if (func.object && func.property) {\n      return `'${func.object}.${func.property}'`;\n    }\n    if (func.property) {\n      return `'${func.property}'`;\n    }\n    return `'${func}'`;\n  }).join(', ');\n}\n\nmodule.exports = {\n  formatPropWrapperFunctions,\n  getExactPropWrapperFunctions,\n  getPropWrapperFunctions,\n  isExactPropWrapperFunction,\n  isPropWrapperFunction,\n};\n"
        }
    ]
}