{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/pragma.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892279766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility functions for React pragma configuration\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst getSourceCode = require('./eslint').getSourceCode;\n\nconst JSX_ANNOTATION_REGEX = /@jsx\\s+([^\\s]+)/;\n// Does not check for reserved keywords or unicode characters\nconst JS_IDENTIFIER_REGEX = /^[_$a-zA-Z][_$a-zA-Z0-9]*$/;\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getCreateClassFromContext(context) {\n  let pragma = 'createReactClass';\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.createClass) {\n    pragma = context.settings.react.createClass;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`createClass pragma ${pragma} is not a valid function name`);\n  }\n  return pragma;\n}\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getFragmentFromContext(context) {\n  let pragma = 'Fragment';\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.fragment) {\n    pragma = context.settings.react.fragment;\n  }\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    throw new Error(`Fragment pragma ${pragma} is not a valid identifier`);\n  }\n  return pragma;\n}\n\n/**\n * @param {Context} context\n * @returns {string}\n */\nfunction getFromContext(context) {\n  let pragma = 'React';\n\n  const sourceCode = getSourceCode(context);\n  const pragmaNode = sourceCode.getAllComments().find((node) => JSX_ANNOTATION_REGEX.test(node.value));\n\n  if (pragmaNode) {\n    const matches = JSX_ANNOTATION_REGEX.exec(pragmaNode.value);\n    pragma = matches[1].split('.')[0];\n    // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  } else if (context.settings.react && context.settings.react.pragma) {\n    pragma = context.settings.react.pragma;\n  }\n\n  if (!JS_IDENTIFIER_REGEX.test(pragma)) {\n    console.warn(`React pragma ${pragma} is not a valid identifier`);\n    return 'React';\n  }\n  return pragma;\n}\n\nmodule.exports = {\n  getCreateClassFromContext,\n  getFragmentFromContext,\n  getFromContext,\n};\n"
        }
    ]
}