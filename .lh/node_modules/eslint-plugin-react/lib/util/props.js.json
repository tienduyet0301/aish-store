{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892279853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility functions for props\n */\n\n'use strict';\n\nconst astUtil = require('./ast');\n\n/**\n * Checks if the Identifier node passed in looks like a propTypes declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {boolean} `true` if the node is a propTypes declaration, `false` if not\n */\nfunction isPropTypesDeclaration(node) {\n  if (node && (node.type === 'ClassProperty' || node.type === 'PropertyDefinition')) {\n    // Flow support\n    if (node.typeAnnotation && node.key.name === 'props') {\n      return true;\n    }\n  }\n  return astUtil.getPropertyName(node) === 'propTypes';\n}\n\n/**\n * Checks if the node passed in looks like a contextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a contextTypes declaration, `false` if not\n */\nfunction isContextTypesDeclaration(node) {\n  if (node && (node.type === 'ClassProperty' || node.type === 'PropertyDefinition')) {\n    // Flow support\n    if (node.typeAnnotation && node.key.name === 'context') {\n      return true;\n    }\n  }\n  return astUtil.getPropertyName(node) === 'contextTypes';\n}\n\n/**\n * Checks if the node passed in looks like a contextType declaration.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a contextType declaration, `false` if not\n */\nfunction isContextTypeDeclaration(node) {\n  return astUtil.getPropertyName(node) === 'contextType';\n}\n\n/**\n * Checks if the node passed in looks like a childContextTypes declaration.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a childContextTypes declaration, `false` if not\n */\nfunction isChildContextTypesDeclaration(node) {\n  return astUtil.getPropertyName(node) === 'childContextTypes';\n}\n\n/**\n * Checks if the Identifier node passed in looks like a defaultProps declaration.\n * @param {ASTNode} node The node to check. Must be an Identifier node.\n * @returns {boolean} `true` if the node is a defaultProps declaration, `false` if not\n */\nfunction isDefaultPropsDeclaration(node) {\n  const propName = astUtil.getPropertyName(node);\n  return (propName === 'defaultProps' || propName === 'getDefaultProps');\n}\n\n/**\n * Checks if we are declaring a display name\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} True if we are declaring a display name, false if not.\n */\nfunction isDisplayNameDeclaration(node) {\n  switch (node.type) {\n    case 'ClassProperty':\n    case 'PropertyDefinition':\n      return node.key && node.key.name === 'displayName';\n    case 'Identifier':\n      return node.name === 'displayName';\n    case 'Literal':\n      return node.value === 'displayName';\n    default:\n      return false;\n  }\n}\n\n/**\n * Checks if the PropTypes MemberExpression node passed in declares a required propType.\n * @param {ASTNode} propTypeExpression node to check. Must be a `PropTypes` MemberExpression.\n * @returns {boolean} `true` if this PropType is required, `false` if not.\n */\nfunction isRequiredPropType(propTypeExpression) {\n  return propTypeExpression.type === 'MemberExpression'\n    && propTypeExpression.property.name === 'isRequired';\n}\n\n/**\n * Returns the type arguments of a node or type parameters if type arguments are not available.\n * @param {ASTNode} node The node to get the type arguments from.\n * @returns {ASTNode} The type arguments or type parameters of the node.\n */\nfunction getTypeArguments(node) {\n  if ('typeArguments' in node) {\n    return node.typeArguments;\n  }\n  return node.typeParameters;\n}\n\n/**\n * Returns the super type arguments of a node or super type parameters if type arguments are not available.\n * @param {ASTNode} node The node to get the super type arguments from.\n * @returns {ASTNode} The super type arguments or parameters of the node.\n */\nfunction getSuperTypeArguments(node) {\n  if ('superTypeArguments' in node) {\n    return node.superTypeArguments;\n  }\n  return node.superTypeParameters;\n}\n\nmodule.exports = {\n  isPropTypesDeclaration,\n  isContextTypesDeclaration,\n  isContextTypeDeclaration,\n  isChildContextTypesDeclaration,\n  isDefaultPropsDeclaration,\n  isDisplayNameDeclaration,\n  isRequiredPropType,\n  getTypeArguments,\n  getSuperTypeArguments,\n};\n"
        }
    ]
}