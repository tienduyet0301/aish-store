{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/isDestructuredFromPragmaImport.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892279202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst astUtil = require('./ast');\nconst pragmaUtil = require('./pragma');\nconst variableUtil = require('./variable');\n\n/**\n * Check if variable is destructured from pragma import\n *\n * @param {Context} context eslint context\n * @param {ASTNode} node The AST node to check\n * @param {string} variable The variable name to check\n * @returns {boolean} True if createElement is destructured from the pragma\n */\nmodule.exports = function isDestructuredFromPragmaImport(context, node, variable) {\n  const pragma = pragmaUtil.getFromContext(context);\n  const variableInScope = variableUtil.getVariableFromContext(context, node, variable);\n  if (variableInScope) {\n    const latestDef = variableUtil.getLatestVariableDefinition(variableInScope);\n    if (latestDef) {\n      // check if latest definition is a variable declaration: 'variable = value'\n      if (latestDef.node.type === 'VariableDeclarator' && latestDef.node.init) {\n        // check for: 'variable = pragma.variable'\n        if (\n          latestDef.node.init.type === 'MemberExpression'\n          && latestDef.node.init.object.type === 'Identifier'\n          && latestDef.node.init.object.name === pragma\n        ) {\n          return true;\n        }\n        // check for: '{variable} = pragma'\n        if (\n          latestDef.node.init.type === 'Identifier'\n          && latestDef.node.init.name === pragma\n        ) {\n          return true;\n        }\n\n        // \"require('react')\"\n        let requireExpression = null;\n\n        // get \"require('react')\" from: \"{variable} = require('react')\"\n        if (astUtil.isCallExpression(latestDef.node.init)) {\n          requireExpression = latestDef.node.init;\n        }\n        // get \"require('react')\" from: \"variable = require('react').variable\"\n        if (\n          !requireExpression\n          && latestDef.node.init.type === 'MemberExpression'\n          && astUtil.isCallExpression(latestDef.node.init.object)\n        ) {\n          requireExpression = latestDef.node.init.object;\n        }\n\n        // check proper require.\n        if (\n          requireExpression\n          && requireExpression.callee\n          && requireExpression.callee.name === 'require'\n          && requireExpression.arguments[0]\n          && requireExpression.arguments[0].value === pragma.toLocaleLowerCase()\n        ) {\n          return true;\n        }\n\n        return false;\n      }\n\n      // latest definition is an import declaration: import {<variable>} from 'react'\n      if (\n        latestDef.parent\n        && latestDef.parent.type === 'ImportDeclaration'\n        && latestDef.parent.source.value === pragma.toLocaleLowerCase()\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n"
        }
    ]
}