{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/ast.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892278275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Find a return statement in the current node\n *\n * @param {ASTNode} node The AST node being checked\n * @returns {ASTNode | false}\n */\nexport function findReturnStatement(node: ASTNode): ASTNode | false;\n/**\n * Get properties for a given AST node\n * @param {ASTNode} node The AST node being checked.\n * @returns {Array} Properties array.\n */\nexport function getComponentProperties(node: ASTNode): any[];\n/**\n * Gets the first node in a line from the initial node, excluding whitespace.\n * @param {Object} context The node to check\n * @param {ASTNode} node The node to check\n * @return {ASTNode} the first node in the line\n */\nexport function getFirstNodeInLine(context: any, node: ASTNode): ASTNode;\n/**\n * Retrieve the name of a key node\n * @param {Context} context The AST node with the key.\n * @param {any} node The AST node with the key.\n * @return {string | undefined} the name of the key\n */\nexport function getKeyValue(context: Context, node: any): string | undefined;\n/**\n * Get properties name\n * @param {Object} node - Property.\n * @returns {string} Property name.\n */\nexport function getPropertyName(node: any): string;\n/**\n * Get node with property's name\n * @param {Object} node - Property.\n * @returns {Object} Property name node.\n */\nexport function getPropertyNameNode(node: any): any;\n/**\n * Check if we are in a class constructor\n * @param {Context} context\n * @param {ASTNode} node The AST node being checked.\n * @return {boolean}\n */\nexport function inConstructor(context: Context, node: ASTNode): boolean;\n/**\n * Checks if a node is being assigned a value: props.bar = 'bar'\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean}\n */\nexport function isAssignmentLHS(node: ASTNode): boolean;\n/**\n * Matcher used to check whether given node is a `CallExpression`\n * @param {ASTNode} node The AST node\n * @returns {boolean} True if node is a `CallExpression`, false if not\n */\nexport function isCallExpression(node: ASTNode): boolean;\n/**\n * Checks if the node is a class.\n * @param {ASTNode} node The node to check\n * @return {boolean} true if it's a class\n */\nexport function isClass(node: ASTNode): boolean;\n/**\n * Checks if the node is a function.\n * @param {ASTNode} node The node to check\n * @return {boolean} true if it's a function\n */\nexport function isFunction(node: ASTNode): boolean;\n/**\n * Checks if node is a function declaration or expression or arrow function.\n * @param {ASTNode} node The node to check\n * @return {boolean} true if it's a function-like\n */\nexport function isFunctionLike(node: ASTNode): boolean;\n/**\n * Checks if the node is a function or arrow function expression.\n * @param {ASTNode} node The node to check\n * @return {boolean} true if it's a function-like expression\n */\nexport function isFunctionLikeExpression(node: ASTNode): boolean;\n/**\n * Checks if the node is the first in its line, excluding whitespace.\n * @param {Object} context The node to check\n * @param {ASTNode} node The node to check\n * @return {boolean} true if it's the first node in its line\n */\nexport function isNodeFirstInLine(context: any, node: ASTNode): boolean;\n/**\n * Checks if a node is surrounded by parenthesis.\n *\n * @param {object} context - Context from the rule\n * @param {ASTNode} node - Node to be checked\n * @returns {boolean}\n */\nexport function isParenthesized(context: object, node: ASTNode): boolean;\nexport function isTSAsExpression(node: any): boolean;\nexport function isTSFunctionType(node: any): boolean;\nexport function isTSInterfaceDeclaration(node: any): boolean;\nexport function isTSInterfaceHeritage(node: any): boolean;\nexport function isTSIntersectionType(node: any): boolean;\nexport function isTSParenthesizedType(node: any): boolean;\nexport function isTSTypeAliasDeclaration(node: any): boolean;\nexport function isTSTypeAnnotation(node: any): boolean;\nexport function isTSTypeDeclaration(node: any): boolean;\nexport function isTSTypeLiteral(node: any): boolean;\nexport function isTSTypeParameterInstantiation(node: any): boolean;\nexport function isTSTypeQuery(node: any): boolean;\nexport function isTSTypeReference(node: any): boolean;\n/**\n * Wrapper for estraverse.traverse\n *\n * @param {ASTNode} ASTnode The AST node being checked\n * @param {Object} visitor Visitor Object for estraverse\n */\nexport function traverse(ASTnode: ASTNode, visitor: any): void;\n/**\n * Helper function for traversing \"returns\" (return statements or the\n * returned expression in the case of an arrow function) of a function\n *\n * @param {ASTNode} ASTNode The AST node being checked\n * @param {Context} context The context of `ASTNode`.\n * @param {(returnValue: ASTNode, breakTraverse: () => void) => void} onReturn\n *   Function to execute for each returnStatement found\n * @returns {undefined}\n */\nexport function traverseReturns(ASTNode: ASTNode, context: Context, onReturn: (returnValue: ASTNode, breakTraverse: () => void) => void): undefined;\n/**\n * Extracts the expression node that is wrapped inside a TS type assertion\n *\n * @param {ASTNode} node - potential TS node\n * @returns {ASTNode} - unwrapped expression node\n */\nexport function unwrapTSAsExpression(node: ASTNode): ASTNode;\n//# sourceMappingURL=ast.d.ts.map"
        }
    ]
}