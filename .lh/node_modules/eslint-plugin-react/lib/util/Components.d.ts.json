{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/Components.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892278433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare const _exports: typeof Components & {\n    detect(rule: any): (context?: any) => {\n        [_: string]: Function;\n    };\n};\nexport = _exports;\n/**\n * Components\n */\ndeclare class Components {\n    /**\n     * Add a node to the components list, or update it if it's already in the list\n     *\n     * @param {ASTNode} node The AST node being added.\n     * @param {number} confidence Confidence in the component detection (0=banned, 1=maybe, 2=yes)\n     * @returns {Object} Added component object\n     */\n    add(node: ASTNode, confidence: number): any;\n    /**\n     * Find a component in the list using its node\n     *\n     * @param {ASTNode} node The AST node being searched.\n     * @returns {Object} Component object, undefined if the component is not found or has confidence value of 0.\n     */\n    get(node: ASTNode): any;\n    /**\n     * Update a component in the list\n     *\n     * @param {ASTNode} node The AST node being updated.\n     * @param {Object} props Additional properties to add to the component.\n     */\n    set(node: ASTNode, props: any): void;\n    /**\n     * Return the components list\n     * Components for which we are not confident are not returned\n     *\n     * @returns {Object} Components list\n     */\n    list(): any;\n    /**\n     * Return the length of the components list\n     * Components for which we are not confident are not counted\n     *\n     * @returns {number} Components list length\n     */\n    length(): number;\n    /**\n     * Return the node naming the default React import\n     * It can be used to determine the local name of import, even if it's imported\n     * with an unusual name.\n     *\n     * @returns {ASTNode} React default import node\n     */\n    getDefaultReactImports(): ASTNode;\n    /**\n     * Return the nodes of all React named imports\n     *\n     * @returns {Object} The list of React named imports\n     */\n    getNamedReactImports(): any;\n    /**\n     * Add the default React import specifier to the scope\n     *\n     * @param {ASTNode} specifier The AST Node of the default React import\n     * @returns {void}\n     */\n    addDefaultReactImport(specifier: ASTNode): void;\n    /**\n     * Add a named React import specifier to the scope\n     *\n     * @param {ASTNode} specifier The AST Node of a named React import\n     * @returns {void}\n     */\n    addNamedReactImport(specifier: ASTNode): void;\n}\n//# sourceMappingURL=Components.d.ts.map"
        }
    ]
}