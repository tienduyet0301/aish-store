{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/annotations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892278222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility functions for type annotation detection.\n * @author Yannick Croissant\n * @author Vitor Balocco\n */\n\n'use strict';\n\nconst getFirstTokens = require('./eslint').getFirstTokens;\n\n/**\n * Checks if we are declaring a `props` argument with a flow type annotation.\n * @param {ASTNode} node The AST node being checked.\n * @param {Object} context\n * @returns {boolean} True if the node is a type annotated props declaration, false if not.\n */\nfunction isAnnotatedFunctionPropsDeclaration(node, context) {\n  if (!node || !node.params || !node.params.length) {\n    return false;\n  }\n\n  const typeNode = node.params[0].type === 'AssignmentPattern' ? node.params[0].left : node.params[0];\n\n  const tokens = getFirstTokens(context, typeNode, 2);\n  const isAnnotated = typeNode.typeAnnotation;\n  const isDestructuredProps = typeNode.type === 'ObjectPattern';\n  const isProps = tokens[0].value === 'props' || (tokens[1] && tokens[1].value === 'props');\n\n  return (isAnnotated && (isDestructuredProps || isProps));\n}\n\nmodule.exports = {\n  isAnnotatedFunctionPropsDeclaration,\n};\n"
        }
    ]
}