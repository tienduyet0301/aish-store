{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/componentUtil.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892278569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst doctrine = require('doctrine');\nconst pragmaUtil = require('./pragma');\nconst eslintUtil = require('./eslint');\n\nconst getScope = eslintUtil.getScope;\nconst getSourceCode = eslintUtil.getSourceCode;\nconst getText = eslintUtil.getText;\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @template {(_: object) => any} T\n * @param {T} fn\n * @returns {T}\n */\nfunction memoize(fn) {\n  const cache = new WeakMap();\n  // @ts-ignore\n  return function memoizedFn(arg) {\n    const cachedValue = cache.get(arg);\n    if (cachedValue !== undefined) {\n      return cachedValue;\n    }\n    const v = fn(arg);\n    cache.set(arg, v);\n    return v;\n  };\n}\n\nconst getPragma = memoize(pragmaUtil.getFromContext);\nconst getCreateClass = memoize(pragmaUtil.getCreateClassFromContext);\n\n/**\n * @param {ASTNode} node\n * @param {Context} context\n * @returns {boolean}\n */\nfunction isES5Component(node, context) {\n  const pragma = getPragma(context);\n  const createClass = getCreateClass(context);\n\n  if (!node.parent || !node.parent.callee) {\n    return false;\n  }\n  const callee = node.parent.callee;\n  // React.createClass({})\n  if (callee.type === 'MemberExpression') {\n    return callee.object.name === pragma && callee.property.name === createClass;\n  }\n  // createClass({})\n  if (callee.type === 'Identifier') {\n    return callee.name === createClass;\n  }\n  return false;\n}\n\n/**\n * Check if the node is explicitly declared as a descendant of a React Component\n * @param {any} node\n * @param {Context} context\n * @returns {boolean}\n */\nfunction isExplicitComponent(node, context) {\n  const sourceCode = getSourceCode(context);\n  let comment;\n  // Sometimes the passed node may not have been parsed yet by eslint, and this function call crashes.\n  // Can be removed when eslint sets \"parent\" property for all nodes on initial AST traversal: https://github.com/eslint/eslint-scope/issues/27\n  // eslint-disable-next-line no-warning-comments\n  // FIXME: Remove try/catch when https://github.com/eslint/eslint-scope/issues/27 is implemented.\n  try {\n    comment = sourceCode.getJSDocComment(node);\n  } catch (e) {\n    comment = null;\n  }\n\n  if (comment === null) {\n    return false;\n  }\n\n  let commentAst;\n  try {\n    commentAst = doctrine.parse(comment.value, {\n      unwrap: true,\n      tags: ['extends', 'augments'],\n    });\n  } catch (e) {\n    // handle a bug in the archived `doctrine`, see #2596\n    return false;\n  }\n\n  const relevantTags = commentAst.tags.filter((tag) => tag.name === 'React.Component' || tag.name === 'React.PureComponent');\n\n  return relevantTags.length > 0;\n}\n\n/**\n * @param {ASTNode} node\n * @param {Context} context\n * @returns {boolean}\n */\nfunction isES6Component(node, context) {\n  const pragma = getPragma(context);\n  if (isExplicitComponent(node, context)) {\n    return true;\n  }\n\n  if (!node.superClass) {\n    return false;\n  }\n  if (node.superClass.type === 'MemberExpression') {\n    return node.superClass.object.name === pragma\n          && /^(Pure)?Component$/.test(node.superClass.property.name);\n  }\n  if (node.superClass.type === 'Identifier') {\n    return /^(Pure)?Component$/.test(node.superClass.name);\n  }\n  return false;\n}\n\n/**\n * Get the parent ES5 component node from the current scope\n * @param {Context} context\n * @param {ASTNode} node\n * @returns {ASTNode|null}\n */\nfunction getParentES5Component(context, node) {\n  let scope = getScope(context, node);\n  while (scope) {\n    // @ts-ignore\n    node = scope.block && scope.block.parent && scope.block.parent.parent;\n    if (node && isES5Component(node, context)) {\n      return node;\n    }\n    scope = scope.upper;\n  }\n  return null;\n}\n\n/**\n * Get the parent ES6 component node from the current scope\n * @param {Context} context\n * @param {ASTNode} node\n * @returns {ASTNode | null}\n */\nfunction getParentES6Component(context, node) {\n  let scope = getScope(context, node);\n  while (scope && scope.type !== 'class') {\n    scope = scope.upper;\n  }\n  node = scope && scope.block;\n  if (!node || !isES6Component(node, context)) {\n    return null;\n  }\n  return node;\n}\n\n/**\n * Checks if a component extends React.PureComponent\n * @param {ASTNode} node\n * @param {Context} context\n * @returns {boolean}\n */\nfunction isPureComponent(node, context) {\n  const pragma = getPragma(context);\n  if (node.superClass) {\n    return new RegExp(`^(${pragma}\\\\.)?PureComponent$`).test(getText(context, node.superClass));\n  }\n  return false;\n}\n\n/**\n * @param {ASTNode} node\n * @returns {boolean}\n */\nfunction isStateMemberExpression(node) {\n  return node.type === 'MemberExpression'\n    && node.object.type === 'ThisExpression'\n    && node.property.name === 'state';\n}\n\nmodule.exports = {\n  isES5Component,\n  isES6Component,\n  getParentES5Component,\n  getParentES6Component,\n  isExplicitComponent,\n  isPureComponent,\n  isStateMemberExpression,\n};\n"
        }
    ]
}