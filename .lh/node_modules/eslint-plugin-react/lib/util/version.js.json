{
    "sourceFile": "node_modules/eslint-plugin-react/lib/util/version.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892280352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility functions for React and Flow version configuration\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst resolve = require('resolve');\nconst semver = require('semver');\nconst error = require('./error');\n\nconst ULTIMATE_LATEST_SEMVER = '999.999.999';\n\nlet warnedForMissingVersion = false;\n\nfunction resetWarningFlag() {\n  warnedForMissingVersion = false;\n}\n\nlet cachedDetectedReactVersion;\n\nfunction resetDetectedVersion() {\n  cachedDetectedReactVersion = undefined;\n}\n\nfunction resolveBasedir(contextOrFilename) {\n  if (contextOrFilename) {\n    const filename = typeof contextOrFilename === 'string' ? contextOrFilename : contextOrFilename.getFilename();\n    const dirname = path.dirname(filename);\n    try {\n      if (fs.statSync(filename).isFile()) {\n        // dirname must be dir here\n        return dirname;\n      }\n    } catch (err) {\n      // https://github.com/eslint/eslint/issues/11989\n      if (err.code === 'ENOTDIR') {\n        // virtual filename could be recursive\n        return resolveBasedir(dirname);\n      }\n    }\n  }\n  return process.cwd();\n}\n\nfunction convertConfVerToSemver(confVer) {\n  const fullSemverString = /^[0-9]+\\.[0-9]+$/.test(confVer) ? `${confVer}.0` : confVer;\n  return semver.coerce(fullSemverString.split('.').map((part) => Number(part)).join('.'));\n}\n\nlet defaultVersion = ULTIMATE_LATEST_SEMVER;\n\nfunction resetDefaultVersion() {\n  defaultVersion = ULTIMATE_LATEST_SEMVER;\n}\n\nfunction readDefaultReactVersionFromContext(context) {\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings && context.settings.react && context.settings.react.defaultVersion) {\n    let settingsDefaultVersion = context.settings.react.defaultVersion;\n    if (typeof settingsDefaultVersion !== 'string') {\n      error(`Warning: default React version specified in eslint-pluigin-react-settings must be a string; got \"${typeof settingsDefaultVersion}\"`);\n    }\n    settingsDefaultVersion = String(settingsDefaultVersion);\n    const result = convertConfVerToSemver(settingsDefaultVersion);\n    if (result) {\n      defaultVersion = result.version;\n    } else {\n      error(`Warning: React version specified in eslint-plugin-react-settings must be a valid semver version, or \"detect\"; got “${settingsDefaultVersion}”. Falling back to latest version as default.`);\n    }\n  } else {\n    defaultVersion = ULTIMATE_LATEST_SEMVER;\n  }\n}\n\n// TODO, semver-major: remove context fallback\nfunction detectReactVersion(context) {\n  if (cachedDetectedReactVersion) {\n    return cachedDetectedReactVersion;\n  }\n\n  const basedir = resolveBasedir(context);\n\n  try {\n    const reactPath = resolve.sync('react', { basedir });\n    const react = require(reactPath); // eslint-disable-line global-require, import/no-dynamic-require\n    cachedDetectedReactVersion = react.version;\n    return cachedDetectedReactVersion;\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      if (!warnedForMissingVersion) {\n        let sentence2 = 'Assuming latest React version for linting.';\n        if (defaultVersion !== ULTIMATE_LATEST_SEMVER) {\n          sentence2 = `Assuming default React version for linting: \"${defaultVersion}\".`;\n        }\n        error(`Warning: React version was set to \"detect\" in eslint-plugin-react settings, but the \"react\" package is not installed. ${sentence2}`);\n        warnedForMissingVersion = true;\n      }\n      cachedDetectedReactVersion = defaultVersion;\n      return cachedDetectedReactVersion;\n    }\n    throw e;\n  }\n}\n\nfunction getReactVersionFromContext(context) {\n  readDefaultReactVersionFromContext(context);\n  let confVer = defaultVersion;\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings && context.settings.react && context.settings.react.version) {\n    let settingsVersion = context.settings.react.version;\n    if (settingsVersion === 'detect') {\n      settingsVersion = detectReactVersion(context);\n    }\n    if (typeof settingsVersion !== 'string') {\n      error(`Warning: React version specified in eslint-plugin-react-settings must be a string; got “${typeof settingsVersion}”`);\n    }\n    confVer = String(settingsVersion);\n  } else if (!warnedForMissingVersion) {\n    error('Warning: React version not specified in eslint-plugin-react settings. See https://github.com/jsx-eslint/eslint-plugin-react#configuration .');\n    warnedForMissingVersion = true;\n  }\n\n  const result = convertConfVerToSemver(confVer);\n  if (!result) {\n    error(`Warning: React version specified in eslint-plugin-react-settings must be a valid semver version, or \"detect\"; got “${confVer}”`);\n  }\n  return result ? result.version : defaultVersion;\n}\n\n// TODO, semver-major: remove context fallback\nfunction detectFlowVersion(context) {\n  const basedir = resolveBasedir(context);\n\n  try {\n    const flowPackageJsonPath = resolve.sync('flow-bin/package.json', { basedir });\n    const flowPackageJson = require(flowPackageJsonPath); // eslint-disable-line global-require, import/no-dynamic-require\n    return flowPackageJson.version;\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      error('Warning: Flow version was set to \"detect\" in eslint-plugin-react settings, '\n        + 'but the \"flow-bin\" package is not installed. Assuming latest Flow version for linting.');\n      return ULTIMATE_LATEST_SEMVER;\n    }\n    throw e;\n  }\n}\n\nfunction getFlowVersionFromContext(context) {\n  let confVer = defaultVersion;\n  // .eslintrc shared settings (https://eslint.org/docs/user-guide/configuring#adding-shared-settings)\n  if (context.settings.react && context.settings.react.flowVersion) {\n    let flowVersion = context.settings.react.flowVersion;\n    if (flowVersion === 'detect') {\n      flowVersion = detectFlowVersion(context);\n    }\n    if (typeof flowVersion !== 'string') {\n      error('Warning: Flow version specified in eslint-plugin-react-settings must be a string; '\n        + `got “${typeof flowVersion}”`);\n    }\n    confVer = String(flowVersion);\n  } else {\n    throw 'Could not retrieve flowVersion from settings'; // eslint-disable-line no-throw-literal\n  }\n\n  const result = convertConfVerToSemver(confVer);\n  if (!result) {\n    error(`Warning: Flow version specified in eslint-plugin-react-settings must be a valid semver version, or \"detect\"; got “${confVer}”`);\n  }\n  return result ? result.version : defaultVersion;\n}\n\nfunction test(semverRange, confVer) {\n  return semver.satisfies(confVer, semverRange);\n}\n\nfunction testReactVersion(context, semverRange) {\n  return test(semverRange, getReactVersionFromContext(context));\n}\n\nfunction testFlowVersion(context, semverRange) {\n  return test(semverRange, getFlowVersionFromContext(context));\n}\n\nmodule.exports = {\n  testReactVersion,\n  testFlowVersion,\n  resetWarningFlag,\n  resetDetectedVersion,\n  resetDefaultVersion,\n};\n"
        }
    ]
}