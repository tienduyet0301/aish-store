{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/self-closing-comp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892277270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent extra closing tags for components without children\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\nconst optionDefaults = { component: true, html: true };\n\nfunction isComponent(node) {\n  return (\n    node.name\n    && (node.name.type === 'JSXIdentifier' || node.name.type === 'JSXMemberExpression')\n    && !jsxUtil.isDOMComponent(node)\n  );\n}\n\nfunction childrenIsEmpty(node) {\n  return node.parent.children.length === 0;\n}\n\nfunction childrenIsMultilineSpaces(node) {\n  const childrens = node.parent.children;\n\n  return (\n    childrens.length === 1\n    && (childrens[0].type === 'Literal' || childrens[0].type === 'JSXText')\n    && childrens[0].value.indexOf('\\n') !== -1\n    && childrens[0].value.replace(/(?!\\xA0)\\s/g, '') === ''\n  );\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  notSelfClosing: 'Empty components are self-closing',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow extra closing tags for components without children',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('self-closing-comp'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        component: {\n          default: optionDefaults.component,\n          type: 'boolean',\n        },\n        html: {\n          default: optionDefaults.html,\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    function isShouldBeSelfClosed(node) {\n      const configuration = Object.assign({}, optionDefaults, context.options[0]);\n      return (\n        (configuration.component && isComponent(node))\n        || (configuration.html && jsxUtil.isDOMComponent(node))\n      ) && !node.selfClosing && (childrenIsEmpty(node) || childrenIsMultilineSpaces(node));\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        if (!isShouldBeSelfClosed(node)) {\n          return;\n        }\n        report(context, messages.notSelfClosing, 'notSelfClosing', {\n          node,\n          fix(fixer) {\n            // Represents the last character of the JSXOpeningElement, the '>' character\n            const openingElementEnding = node.range[1] - 1;\n            // Represents the last character of the JSXClosingElement, the '>' character\n            const closingElementEnding = node.parent.closingElement.range[1];\n\n            // Replace />.*<\\/.*>/ with '/>'\n            const range = [openingElementEnding, closingElementEnding];\n            return fixer.replaceTextRange(range, ' />');\n          },\n        });\n      },\n    };\n  },\n};\n"
        }
    ]
}