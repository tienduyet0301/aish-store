{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/require-render-return.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892277165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce ES5 or ES6 class for returning value in render function.\n * @author Mark Orel\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\nconst getAncestors = require('../util/eslint').getAncestors;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noRenderReturn: 'Your render method should have a return statement',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce ES5 or ES6 class for returning value in render function',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('require-render-return'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create: Components.detect((context, components) => {\n    /**\n     * Mark a return statement as present\n     * @param {ASTNode} node The AST node being checked.\n     */\n    function markReturnStatementPresent(node) {\n      components.set(node, {\n        hasReturnStatement: true,\n      });\n    }\n\n    /**\n     * Find render method in a given AST node\n     * @param {ASTNode} node The component to find render method.\n     * @returns {ASTNode} Method node if found, undefined if not.\n     */\n    function findRenderMethod(node) {\n      const properties = astUtil.getComponentProperties(node);\n      return properties\n        .filter((property) => astUtil.getPropertyName(property) === 'render' && property.value)\n        .find((property) => astUtil.isFunctionLikeExpression(property.value));\n    }\n\n    return {\n      ReturnStatement(node) {\n        const ancestors = getAncestors(context, node).reverse();\n        let depth = 0;\n        ancestors.forEach((ancestor) => {\n          if (/Function(Expression|Declaration)$/.test(ancestor.type)) {\n            depth += 1;\n          }\n          if (\n            /(MethodDefinition|Property|ClassProperty|PropertyDefinition)$/.test(ancestor.type)\n            && astUtil.getPropertyName(ancestor) === 'render'\n            && depth <= 1\n          ) {\n            markReturnStatementPresent(node);\n          }\n        });\n      },\n\n      ArrowFunctionExpression(node) {\n        if (node.expression === false || astUtil.getPropertyName(node.parent) !== 'render') {\n          return;\n        }\n        markReturnStatementPresent(node);\n      },\n\n      'Program:exit'() {\n        values(components.list())\n          .filter((component) => (\n            findRenderMethod(component.node)\n            && !component.hasReturnStatement\n            && (\n              componentUtil.isES5Component(component.node, context)\n              || componentUtil.isES6Component(component.node, context)\n            )\n          ))\n          .forEach((component) => {\n            report(context, messages.noRenderReturn, 'noRenderReturn', {\n              node: findRenderMethod(component.node),\n            });\n          });\n      },\n    };\n  }),\n};\n"
        }
    ]
}