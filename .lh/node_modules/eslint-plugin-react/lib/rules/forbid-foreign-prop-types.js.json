{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/forbid-foreign-prop-types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892266897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Forbid using another component's propTypes\n * @author Ian Christian Myers\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst ast = require('../util/ast');\nconst report = require('../util/report');\n\nconst messages = {\n  forbiddenPropType: 'Using propTypes from another component is not safe because they may be removed in production builds',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow using another component\\'s propTypes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-foreign-prop-types'),\n    },\n\n    messages,\n\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          allowInPropTypes: {\n            type: 'boolean',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowInPropTypes = config.allowInPropTypes || false;\n\n    // --------------------------------------------------------------------------\n    // Helpers\n    // --------------------------------------------------------------------------\n\n    function findParentAssignmentExpression(node) {\n      let parent = node.parent;\n\n      while (parent && parent.type !== 'Program') {\n        if (parent.type === 'AssignmentExpression') {\n          return parent;\n        }\n        parent = parent.parent;\n      }\n      return null;\n    }\n\n    function findParentClassProperty(node) {\n      let parent = node.parent;\n\n      while (parent && parent.type !== 'Program') {\n        if (parent.type === 'ClassProperty' || parent.type === 'PropertyDefinition') {\n          return parent;\n        }\n        parent = parent.parent;\n      }\n      return null;\n    }\n\n    function isAllowedAssignment(node) {\n      if (!allowInPropTypes) {\n        return false;\n      }\n\n      const assignmentExpression = findParentAssignmentExpression(node);\n\n      if (\n        assignmentExpression\n        && assignmentExpression.left\n        && assignmentExpression.left.property\n        && assignmentExpression.left.property.name === 'propTypes'\n      ) {\n        return true;\n      }\n\n      const classProperty = findParentClassProperty(node);\n\n      if (\n        classProperty\n        && classProperty.key\n        && classProperty.key.name === 'propTypes'\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    return {\n      MemberExpression(node) {\n        if (\n          (node.property\n          && (\n            !node.computed\n            && node.property.type === 'Identifier'\n            && node.property.name === 'propTypes'\n            && !ast.isAssignmentLHS(node)\n            && !isAllowedAssignment(node)\n          )) || (\n            // @ts-expect-error: The JSXText type is not present in the estree type definitions\n            (node.property.type === 'Literal' || node.property.type === 'JSXText')\n            && 'value' in node.property\n            && node.property.value === 'propTypes'\n            && !ast.isAssignmentLHS(node)\n            && !isAllowedAssignment(node)\n          )\n        ) {\n          report(context, messages.forbiddenPropType, 'forbiddenPropType', {\n            node: node.property,\n          });\n        }\n      },\n\n      ObjectPattern(node) {\n        const propTypesNode = node.properties.find((property) => (\n          property.type === 'Property'\n          && 'name' in property.key\n          && property.key.name === 'propTypes'\n        ));\n\n        if (propTypesNode) {\n          report(context, messages.forbiddenPropType, 'forbiddenPropType', {\n            node: propTypesNode,\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}