{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-handler-names.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892269898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce event handler naming conventions in JSX\n * @author Jake Marsh\n */\n\n'use strict';\n\nconst minimatch = require('minimatch');\nconst docsUrl = require('../util/docsUrl');\nconst getText = require('../util/eslint').getText;\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  badHandlerName: 'Handler function for {{propKey}} prop key must be a camelCase name beginning with \\'{{handlerPrefix}}\\' only',\n  badPropKey: 'Prop key for {{propValue}} must begin with \\'{{handlerPropPrefix}}\\'',\n};\n\nfunction isPrefixDisabled(prefix) {\n  return prefix === false;\n}\n\nfunction isInlineHandler(node) {\n  return node.value.expression.type === 'ArrowFunctionExpression';\n}\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce event handler naming conventions in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-handler-names'),\n    },\n\n    messages,\n\n    schema: [{\n      anyOf: [\n        {\n          type: 'object',\n          properties: {\n            eventHandlerPrefix: { type: 'string' },\n            eventHandlerPropPrefix: { type: 'string' },\n            checkLocalVariables: { type: 'boolean' },\n            checkInlineFunction: { type: 'boolean' },\n            ignoreComponentNames: {\n              type: 'array',\n              uniqueItems: true,\n              items: { type: 'string' },\n            },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            eventHandlerPrefix: { type: 'string' },\n            eventHandlerPropPrefix: {\n              type: 'boolean',\n              enum: [false],\n            },\n            checkLocalVariables: { type: 'boolean' },\n            checkInlineFunction: { type: 'boolean' },\n            ignoreComponentNames: {\n              type: 'array',\n              uniqueItems: true,\n              items: { type: 'string' },\n            },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            eventHandlerPrefix: {\n              type: 'boolean',\n              enum: [false],\n            },\n            eventHandlerPropPrefix: { type: 'string' },\n            checkLocalVariables: { type: 'boolean' },\n            checkInlineFunction: { type: 'boolean' },\n            ignoreComponentNames: {\n              type: 'array',\n              uniqueItems: true,\n              items: { type: 'string' },\n            },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            checkLocalVariables: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        }, {\n          type: 'object',\n          properties: {\n            checkInlineFunction: { type: 'boolean' },\n          },\n          additionalProperties: false,\n        },\n        {\n          type: 'object',\n          properties: {\n            ignoreComponentNames: {\n              type: 'array',\n              uniqueItems: true,\n              items: { type: 'string' },\n            },\n          },\n        },\n      ],\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n\n    const eventHandlerPrefix = isPrefixDisabled(configuration.eventHandlerPrefix)\n      ? null\n      : configuration.eventHandlerPrefix || 'handle';\n    const eventHandlerPropPrefix = isPrefixDisabled(configuration.eventHandlerPropPrefix)\n      ? null\n      : configuration.eventHandlerPropPrefix || 'on';\n\n    const EVENT_HANDLER_REGEX = !eventHandlerPrefix\n      ? null\n      : new RegExp(`^((props\\\\.${eventHandlerPropPrefix || ''})|((.*\\\\.)?${eventHandlerPrefix}))[0-9]*[A-Z].*$`);\n    const PROP_EVENT_HANDLER_REGEX = !eventHandlerPropPrefix\n      ? null\n      : new RegExp(`^(${eventHandlerPropPrefix}[A-Z].*|ref)$`);\n\n    const checkLocal = !!configuration.checkLocalVariables;\n\n    const checkInlineFunction = !!configuration.checkInlineFunction;\n\n    const ignoreComponentNames = configuration.ignoreComponentNames || [];\n\n    return {\n      JSXAttribute(node) {\n        const componentName = node.parent.name.name;\n\n        const isComponentNameIgnored = ignoreComponentNames.some((ignoredComponentNamePattern) => minimatch(\n          componentName,\n          ignoredComponentNamePattern\n        ));\n\n        if (\n          !node.value\n          || !node.value.expression\n          || (!checkInlineFunction && isInlineHandler(node))\n          || (\n            !checkLocal\n            && (isInlineHandler(node)\n              ? !node.value.expression.body.callee || !node.value.expression.body.callee.object\n              : !node.value.expression.object\n            )\n          )\n          || isComponentNameIgnored\n        ) {\n          return;\n        }\n\n        const propKey = typeof node.name === 'object' ? node.name.name : node.name;\n        const expression = node.value.expression;\n        const propValue = getText(\n          context,\n          checkInlineFunction && isInlineHandler(node) ? expression.body.callee : expression\n        ).replace(/\\s*/g, '').replace(/^this\\.|.*::/, '');\n\n        if (propKey === 'ref') {\n          return;\n        }\n\n        const propIsEventHandler = PROP_EVENT_HANDLER_REGEX && PROP_EVENT_HANDLER_REGEX.test(propKey);\n        const propFnIsNamedCorrectly = EVENT_HANDLER_REGEX && EVENT_HANDLER_REGEX.test(propValue);\n\n        if (\n          propIsEventHandler\n          && propFnIsNamedCorrectly !== null\n          && !propFnIsNamedCorrectly\n        ) {\n          report(context, messages.badHandlerName, 'badHandlerName', {\n            node,\n            data: {\n              propKey,\n              handlerPrefix: eventHandlerPrefix,\n            },\n          });\n        } else if (\n          propFnIsNamedCorrectly\n          && propIsEventHandler !== null\n          && !propIsEventHandler\n        ) {\n          report(context, messages.badPropKey, 'badPropKey', {\n            node,\n            data: {\n              propValue,\n              handlerPropPrefix: eventHandlerPropPrefix,\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}