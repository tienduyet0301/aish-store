{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/prefer-read-only-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892275960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Require component props to be typed as read-only.\n * @author Luke Zapart\n */\n\n'use strict';\n\nconst flatMap = require('array.prototype.flatmap');\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\nfunction isFlowPropertyType(node) {\n  return node.type === 'ObjectTypeProperty';\n}\n\nfunction isTypescriptPropertyType(node) {\n  return node.type === 'TSPropertySignature';\n}\n\nfunction isCovariant(node) {\n  return (node.variance && node.variance.kind === 'plus')\n    || (\n      node.parent\n      && node.parent.parent\n      && node.parent.parent.parent\n      && node.parent.parent.parent.id\n      && node.parent.parent.parent.id.name === '$ReadOnly'\n    );\n}\n\nfunction isReadonly(node) {\n  return (\n    node.typeAnnotation\n    && node.typeAnnotation.parent\n    && node.typeAnnotation.parent.readonly\n  );\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  readOnlyProp: 'Prop \\'{{name}}\\' should be read-only.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce that props are read-only',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('prefer-read-only-props'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [],\n  },\n\n  create: Components.detect((context, components) => {\n    function reportReadOnlyProp(prop, propName, fixer) {\n      report(context, messages.readOnlyProp, 'readOnlyProp', {\n        node: prop.node,\n        data: {\n          name: propName,\n        },\n        fix: fixer,\n      });\n    }\n\n    return {\n      'Program:exit'() {\n        flatMap(\n          values(components.list()),\n          (component) => component.declaredPropTypes || []\n        ).forEach((declaredPropTypes) => {\n          Object.keys(declaredPropTypes).forEach((propName) => {\n            const prop = declaredPropTypes[propName];\n            if (!prop.node) {\n              return;\n            }\n\n            if (isFlowPropertyType(prop.node)) {\n              if (!isCovariant(prop.node)) {\n                reportReadOnlyProp(prop, propName, (fixer) => {\n                  if (!prop.node.variance) {\n                    // Insert covariance\n                    return fixer.insertTextBefore(prop.node, '+');\n                  }\n\n                  // Replace contravariance with covariance\n                  return fixer.replaceText(prop.node.variance, '+');\n                });\n              }\n\n              return;\n            }\n\n            if (isTypescriptPropertyType(prop.node)) {\n              if (!isReadonly(prop.node)) {\n                reportReadOnlyProp(prop, propName, (fixer) => (\n                  fixer.insertTextBefore(prop.node, 'readonly ')\n                ));\n              }\n            }\n          });\n        });\n      },\n    };\n  }),\n};\n"
        }
    ]
}