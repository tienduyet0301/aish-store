{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-redundant-should-component-update.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Flag shouldComponentUpdate when extending PureComponent\n */\n\n'use strict';\n\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noShouldCompUpdate: '{{component}} does not need shouldComponentUpdate when extending React.PureComponent.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of shouldComponentUpdate when extending React.PureComponent',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('no-redundant-should-component-update'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    /**\n     * Checks for shouldComponentUpdate property\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {boolean} Whether or not the property exists.\n     */\n    function hasShouldComponentUpdate(node) {\n      const properties = astUtil.getComponentProperties(node);\n      return properties.some((property) => {\n        const name = astUtil.getPropertyName(property);\n        return name === 'shouldComponentUpdate';\n      });\n    }\n\n    /**\n     * Get name of node if available\n     * @param {ASTNode} node The AST node being checked.\n     * @return {string} The name of the node\n     */\n    function getNodeName(node) {\n      if (node.id) {\n        return node.id.name;\n      }\n      if (node.parent && node.parent.id) {\n        return node.parent.id.name;\n      }\n      return '';\n    }\n\n    /**\n     * Checks for violation of rule\n     * @param {ASTNode} node The AST node being checked.\n     */\n    function checkForViolation(node) {\n      if (componentUtil.isPureComponent(node, context)) {\n        const hasScu = hasShouldComponentUpdate(node);\n        if (hasScu) {\n          const className = getNodeName(node);\n          report(context, messages.noShouldCompUpdate, 'noShouldCompUpdate', {\n            node,\n            data: {\n              component: className,\n            },\n          });\n        }\n      }\n    }\n\n    return {\n      ClassDeclaration: checkForViolation,\n      ClassExpression: checkForViolation,\n    };\n  },\n};\n"
        }
    ]
}