{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-multi-comp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent multiple component definition per file\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  onlyOneComponent: 'Declare only one React component per file',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow multiple component definition per file',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('no-multi-comp'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreStateless: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create: Components.detect((context, components, utils) => {\n    const configuration = context.options[0] || {};\n    const ignoreStateless = configuration.ignoreStateless || false;\n\n    /**\n     * Checks if the component is ignored\n     * @param {Object} component The component being checked.\n     * @returns {boolean} True if the component is ignored, false if not.\n     */\n    function isIgnored(component) {\n      return (\n        ignoreStateless && (\n          /Function/.test(component.node.type)\n          || utils.isPragmaComponentWrapper(component.node)\n        )\n      );\n    }\n\n    return {\n      'Program:exit'() {\n        if (components.length() <= 1) {\n          return;\n        }\n\n        values(components.list())\n          .filter((component) => !isIgnored(component))\n          .slice(1)\n          .forEach((component) => {\n            report(context, messages.onlyOneComponent, 'onlyOneComponent', {\n              node: component.node,\n            });\n          });\n      },\n    };\n  }),\n};\n"
        }
    ]
}