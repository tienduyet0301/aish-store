{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/forward-ref-uses-ref.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892267242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Require all forwardRef components include a ref parameter\n */\n\n'use strict';\n\nconst isParenthesized = require('../util/ast').isParenthesized;\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\nconst getMessageData = require('../util/message');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * @param {ASTNode} node\n * @returns {boolean} If the node represents the identifier `forwardRef`.\n */\nfunction isForwardRefIdentifier(node) {\n  return node.type === 'Identifier' && node.name === 'forwardRef';\n}\n\n/**\n * @param {ASTNode} node\n * @returns {boolean} If the node represents a function call `forwardRef()` or `React.forwardRef()`.\n */\nfunction isForwardRefCall(node) {\n  return (\n    node.type === 'CallExpression'\n    && (\n      isForwardRefIdentifier(node.callee)\n      || (node.callee.type === 'MemberExpression' && isForwardRefIdentifier(node.callee.property))\n    )\n  );\n}\n\nconst messages = {\n  missingRefParameter: 'forwardRef is used with this component but no ref parameter is set',\n  addRefParameter: 'Add a ref parameter',\n  removeForwardRef: 'Remove forwardRef wrapper',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Require all forwardRef components include a ref parameter',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('forward-ref-uses-ref'),\n    },\n    messages,\n    schema: [],\n    type: 'suggestion',\n    hasSuggestions: true,\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n\n    return {\n      'FunctionExpression, ArrowFunctionExpression'(node) {\n        if (!isForwardRefCall(node.parent)) {\n          return;\n        }\n\n        if (node.params.length === 1) {\n          report(context, messages.missingRefParameter, 'missingRefParameter', {\n            node,\n            suggest: [\n              Object.assign(\n                getMessageData('addRefParameter', messages.addRefParameter),\n                {\n                  fix(fixer) {\n                    const param = node.params[0];\n                    // If using shorthand arrow function syntax, add parentheses around the new parameter pair\n                    const shouldAddParentheses = node.type === 'ArrowFunctionExpression' && !isParenthesized(context, param);\n                    return [].concat(\n                      shouldAddParentheses ? fixer.insertTextBefore(param, '(') : [],\n                      fixer.insertTextAfter(param, `, ref${shouldAddParentheses ? ')' : ''}`)\n                    );\n                  },\n                }\n              ),\n              Object.assign(\n                getMessageData('removeForwardRef', messages.removeForwardRef),\n                {\n                  fix(fixer) {\n                    return fixer.replaceText(node.parent, sourceCode.getText(node));\n                  },\n                }\n              ),\n            ],\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}