{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-object-type-as-default-prop.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of referential-type variables as default param in functional component\n * @author Chang Yan\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst astUtil = require('../util/ast');\nconst report = require('../util/report');\n\nconst FORBIDDEN_TYPES_MAP = {\n  ArrowFunctionExpression: 'arrow function',\n  FunctionExpression: 'function expression',\n  ObjectExpression: 'object literal',\n  ArrayExpression: 'array literal',\n  ClassExpression: 'class expression',\n  NewExpression: 'construction expression',\n  JSXElement: 'JSX element',\n};\n\nconst FORBIDDEN_TYPES = new Set(Object.keys(FORBIDDEN_TYPES_MAP));\nconst MESSAGE_ID = 'forbiddenTypeDefaultParam';\n\nconst messages = {\n  [MESSAGE_ID]: '{{propName}} has a/an {{forbiddenType}} as default prop. This could lead to potential infinite render loop in React. Use a variable reference instead of {{forbiddenType}}.',\n};\nfunction hasUsedObjectDestructuringSyntax(params) {\n  return (\n    params != null\n    && params.length >= 1\n    && params[0].type === 'ObjectPattern'\n  );\n}\n\nfunction verifyDefaultPropsDestructuring(context, properties) {\n  // Loop through each of the default params\n  properties.filter((prop) => prop.type === 'Property' && prop.value.type === 'AssignmentPattern').forEach((prop) => {\n    const propName = prop.key.name;\n    const propDefaultValue = prop.value;\n\n    const propDefaultValueType = propDefaultValue.right.type;\n\n    if (\n      propDefaultValueType === 'Literal'\n      && propDefaultValue.right.regex != null\n    ) {\n      report(context, messages[MESSAGE_ID], MESSAGE_ID, {\n        node: propDefaultValue,\n        data: {\n          propName,\n          forbiddenType: 'regex literal',\n        },\n      });\n    } else if (\n      astUtil.isCallExpression(propDefaultValue.right)\n      && propDefaultValue.right.callee.type === 'Identifier'\n      && propDefaultValue.right.callee.name === 'Symbol'\n    ) {\n      report(context, messages[MESSAGE_ID], MESSAGE_ID, {\n        node: propDefaultValue,\n        data: {\n          propName,\n          forbiddenType: 'Symbol literal',\n        },\n      });\n    } else if (FORBIDDEN_TYPES.has(propDefaultValueType)) {\n      report(context, messages[MESSAGE_ID], MESSAGE_ID, {\n        node: propDefaultValue,\n        data: {\n          propName,\n          forbiddenType: FORBIDDEN_TYPES_MAP[propDefaultValueType],\n        },\n      });\n    }\n  });\n}\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of referential-type variables as default param in functional component',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-object-type-as-default-prop'),\n    },\n    messages,\n  },\n  create: Components.detect((context, components) => ({\n    'Program:exit'() {\n      const list = components.list();\n      values(list)\n        .filter((component) => hasUsedObjectDestructuringSyntax(component.node.params))\n        .forEach((component) => {\n          const node = component.node;\n          const properties = node.params[0].properties;\n          verifyDefaultPropsDestructuring(context, properties);\n        });\n    },\n  })),\n};\n"
        }
    ]
}