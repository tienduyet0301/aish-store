{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/forbid-component-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892266423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Forbid certain props on components\n * @author Joe Lencioni\n */\n\n'use strict';\n\nconst minimatch = require('minimatch');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = ['className', 'style'];\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  propIsForbidden: 'Prop \"{{prop}}\" is forbidden on Components',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain props on components',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-component-props'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { type: 'string' },\n              {\n                type: 'object',\n                properties: {\n                  propName: { type: 'string' },\n                  allowedFor: {\n                    type: 'array',\n                    uniqueItems: true,\n                    items: { type: 'string' },\n                  },\n                  allowedForPatterns: {\n                    type: 'array',\n                    uniqueItems: true,\n                    items: { type: 'string' },\n                  },\n                  message: { type: 'string' },\n                },\n                additionalProperties: false,\n              },\n              {\n                type: 'object',\n                properties: {\n                  propName: { type: 'string' },\n                  disallowedFor: {\n                    type: 'array',\n                    uniqueItems: true,\n                    minItems: 1,\n                    items: { type: 'string' },\n                  },\n                  disallowedForPatterns: {\n                    type: 'array',\n                    uniqueItems: true,\n                    minItems: 1,\n                    items: { type: 'string' },\n                  },\n                  message: { type: 'string' },\n                },\n                anyOf: [\n                  { required: ['disallowedFor'] },\n                  { required: ['disallowedForPatterns'] },\n                ],\n                additionalProperties: false,\n              },\n              {\n                type: 'object',\n                properties: {\n                  propNamePattern: { type: 'string' },\n                  allowedFor: {\n                    type: 'array',\n                    uniqueItems: true,\n                    items: { type: 'string' },\n                  },\n                  allowedForPatterns: {\n                    type: 'array',\n                    uniqueItems: true,\n                    items: { type: 'string' },\n                  },\n                  message: { type: 'string' },\n                },\n                additionalProperties: false,\n              },\n              {\n                type: 'object',\n                properties: {\n                  propNamePattern: { type: 'string' },\n                  disallowedFor: {\n                    type: 'array',\n                    uniqueItems: true,\n                    minItems: 1,\n                    items: { type: 'string' },\n                  },\n                  disallowedForPatterns: {\n                    type: 'array',\n                    uniqueItems: true,\n                    minItems: 1,\n                    items: { type: 'string' },\n                  },\n                  message: { type: 'string' },\n                },\n                anyOf: [\n                  { required: ['disallowedFor'] },\n                  { required: ['disallowedForPatterns'] },\n                ],\n                additionalProperties: false,\n              },\n            ],\n          },\n        },\n      },\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbid = new Map((configuration.forbid || DEFAULTS).map((value) => {\n      const propName = typeof value === 'string' ? value : value.propName;\n      const propPattern = value.propNamePattern;\n      const prop = propName || propPattern;\n      const options = {\n        allowList: [].concat(value.allowedFor || []),\n        allowPatternList: [].concat(value.allowedForPatterns || []),\n        disallowList: [].concat(value.disallowedFor || []),\n        disallowPatternList: [].concat(value.disallowedForPatterns || []),\n        message: typeof value === 'string' ? null : value.message,\n        isPattern: !!value.propNamePattern,\n      };\n      return [prop, options];\n    }));\n\n    function getPropOptions(prop) {\n      // Get config options having pattern\n      const propNamePatternArray = Array.from(forbid.entries()).filter((propEntry) => propEntry[1].isPattern);\n      // Match current prop with pattern options, return if matched\n      const propNamePattern = propNamePatternArray.find((propPatternVal) => minimatch(prop, propPatternVal[0]));\n      // Get options for matched propNamePattern\n      const propNamePatternOptions = propNamePattern && propNamePattern[1];\n\n      const options = forbid.get(prop) || propNamePatternOptions;\n      return options;\n    }\n\n    function isForbidden(prop, tagName) {\n      const options = getPropOptions(prop);\n      if (!options) {\n        return false;\n      }\n\n      function checkIsTagForbiddenByAllowOptions() {\n        if (options.allowList.indexOf(tagName) !== -1) {\n          return false;\n        }\n\n        if (options.allowPatternList.length === 0) {\n          return true;\n        }\n\n        return options.allowPatternList.every(\n          (pattern) => !minimatch(tagName, pattern)\n        );\n      }\n\n      function checkIsTagForbiddenByDisallowOptions() {\n        if (options.disallowList.indexOf(tagName) !== -1) {\n          return true;\n        }\n\n        if (options.disallowPatternList.length === 0) {\n          return false;\n        }\n\n        return options.disallowPatternList.some(\n          (pattern) => minimatch(tagName, pattern)\n        );\n      }\n\n      const hasDisallowOptions = options.disallowList.length > 0 || options.disallowPatternList.length > 0;\n\n      // disallowList should have a least one item (schema configuration)\n      const isTagForbidden = hasDisallowOptions\n        ? checkIsTagForbiddenByDisallowOptions()\n        : checkIsTagForbiddenByAllowOptions();\n\n      // if the tagName is undefined (`<this.something>`), we assume it's a forbidden element\n      return typeof tagName === 'undefined' || isTagForbidden;\n    }\n\n    return {\n      JSXAttribute(node) {\n        const parentName = node.parent.name;\n        // Extract a component name when using a \"namespace\", e.g. `<AntdLayout.Content />`.\n        const tag = parentName.name || `${parentName.object.name}.${parentName.property.name}`;\n        const componentName = parentName.name || parentName.property.name;\n        if (componentName && typeof componentName[0] === 'string' && componentName[0] !== componentName[0].toUpperCase()) {\n          // This is a DOM node, not a Component, so exit.\n          return;\n        }\n\n        const prop = node.name.name;\n\n        if (!isForbidden(prop, tag)) {\n          return;\n        }\n\n        const customMessage = getPropOptions(prop).message;\n\n        report(context, customMessage || messages.propIsForbidden, !customMessage && 'propIsForbidden', {\n          node,\n          data: {\n            prop,\n          },\n        });\n      },\n    };\n  },\n};\n"
        }
    ]
}