{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-children-prop.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892273562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent passing of children as props\n * @author Benjamin Stepp\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n/**\n * Checks if the node is a createElement call with a props literal.\n * @param {ASTNode} node - The AST node being checked.\n * @param {Context} context - The AST node being checked.\n * @returns {boolean} - True if node is a createElement call with a props\n * object literal, False if not.\n*/\nfunction isCreateElementWithProps(node, context) {\n  return isCreateElement(context, node)\n    && node.arguments.length > 1\n    && node.arguments[1].type === 'ObjectExpression';\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  nestChildren: 'Do not pass children as props. Instead, nest children between the opening and closing tags.',\n  passChildrenAsArgs: 'Do not pass children as props. Instead, pass them as additional arguments to React.createElement.',\n  nestFunction: 'Do not nest a function between the opening and closing tags. Instead, pass it as a prop.',\n  passFunctionAsArgs: 'Do not pass a function as an additional argument to React.createElement. Instead, pass it as a prop.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow passing of children as props',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('no-children-prop'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowFunctions: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n  create(context) {\n    const configuration = context.options[0] || {};\n\n    function isFunction(node) {\n      return configuration.allowFunctions && (node.type === 'ArrowFunctionExpression' || node.type === 'FunctionExpression');\n    }\n\n    return {\n      JSXAttribute(node) {\n        if (node.name.name !== 'children') {\n          return;\n        }\n\n        const value = node.value;\n        if (value && value.type === 'JSXExpressionContainer' && isFunction(value.expression)) {\n          return;\n        }\n\n        report(context, messages.nestChildren, 'nestChildren', {\n          node,\n        });\n      },\n      CallExpression(node) {\n        if (!isCreateElementWithProps(node, context)) {\n          return;\n        }\n\n        const props = 'properties' in node.arguments[1] ? node.arguments[1].properties : undefined;\n        const childrenProp = props.find((prop) => (\n          'key' in prop\n          && prop.key\n          && 'name' in prop.key\n          && prop.key.name === 'children'\n        ));\n\n        if (childrenProp) {\n          if ('value' in childrenProp && childrenProp.value && !isFunction(childrenProp.value)) {\n            report(context, messages.passChildrenAsArgs, 'passChildrenAsArgs', {\n              node,\n            });\n          }\n        } else if (node.arguments.length === 3) {\n          const children = node.arguments[2];\n          if (isFunction(children)) {\n            report(context, messages.passFunctionAsArgs, 'passFunctionAsArgs', {\n              node,\n            });\n          }\n        }\n      },\n      JSXElement(node) {\n        const children = node.children;\n        if (children && children.length === 1 && children[0].type === 'JSXExpressionContainer') {\n          if (isFunction(children[0].expression)) {\n            report(context, messages.nestFunction, 'nestFunction', {\n              node,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}