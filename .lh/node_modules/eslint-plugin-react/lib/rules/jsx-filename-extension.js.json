{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-filename-extension.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892269176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Restrict file extensions that may contain JSX\n * @author Joe Lencioni\n */\n\n'use strict';\n\nconst path = require('path');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = {\n  allow: 'always',\n  extensions: ['.jsx'],\n  ignoreFilesWithoutCode: false,\n};\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noJSXWithExtension: 'JSX not allowed in files with extension \\'{{ext}}\\'',\n  extensionOnlyForJSX: 'Only files containing JSX may use the extension \\'{{ext}}\\'',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow file extensions that may contain JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-filename-extension'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allow: {\n          enum: ['always', 'as-needed'],\n        },\n        extensions: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        ignoreFilesWithoutCode: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const filename = context.getFilename();\n\n    let jsxNode;\n\n    if (filename === '<text>') {\n      // No need to traverse any nodes.\n      return {};\n    }\n\n    const allow = (context.options[0] && context.options[0].allow) || DEFAULTS.allow;\n    const allowedExtensions = (context.options[0] && context.options[0].extensions) || DEFAULTS.extensions;\n    const ignoreFilesWithoutCode = (context.options[0] && context.options[0].ignoreFilesWithoutCode)\n      || DEFAULTS.ignoreFilesWithoutCode;\n    const isAllowedExtension = allowedExtensions.some((extension) => filename.slice(-extension.length) === extension);\n\n    function handleJSX(node) {\n      if (!jsxNode) {\n        jsxNode = node;\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      JSXElement: handleJSX,\n      JSXFragment: handleJSX,\n\n      'Program:exit'(node) {\n        if (jsxNode) {\n          if (!isAllowedExtension) {\n            report(context, messages.noJSXWithExtension, 'noJSXWithExtension', {\n              node: jsxNode,\n              data: {\n                ext: path.extname(filename),\n              },\n            });\n          }\n          return;\n        }\n\n        if (isAllowedExtension && allow === 'as-needed') {\n          if (ignoreFilesWithoutCode && node.body.length === 0) {\n            return;\n          }\n          report(context, messages.extensionOnlyForJSX, 'extensionOnlyForJSX', {\n            node,\n            data: {\n              ext: path.extname(filename),\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}