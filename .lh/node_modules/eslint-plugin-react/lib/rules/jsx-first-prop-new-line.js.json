{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-first-prop-new-line.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892269314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Ensure proper position of the first property in JSX\n * @author Joachim Seminck\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\nconst propsUtil = require('../util/props');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  propOnNewLine: 'Property should be placed on a new line',\n  propOnSameLine: 'Property should be placed on the same line as the component declaration',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce proper position of the first property in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-first-prop-new-line'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [{\n      enum: ['always', 'never', 'multiline', 'multiline-multiprop', 'multiprop'],\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || 'multiline-multiprop';\n\n    function isMultilineJSX(jsxNode) {\n      return jsxNode.loc.start.line < jsxNode.loc.end.line;\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        if (\n          (configuration === 'multiline' && isMultilineJSX(node))\n          || (configuration === 'multiline-multiprop' && isMultilineJSX(node) && node.attributes.length > 1)\n          || (configuration === 'multiprop' && node.attributes.length > 1)\n          || (configuration === 'always')\n        ) {\n          node.attributes.some((decl) => {\n            if (decl.loc.start.line === node.loc.start.line) {\n              report(context, messages.propOnNewLine, 'propOnNewLine', {\n                node: decl,\n                fix(fixer) {\n                  const nodeTypeArguments = propsUtil.getTypeArguments(node);\n                  return fixer.replaceTextRange([(nodeTypeArguments || node.name).range[1], decl.range[0]], '\\n');\n                },\n              });\n            }\n            return true;\n          });\n        } else if (\n          (configuration === 'never' && node.attributes.length > 0)\n          || (configuration === 'multiprop' && isMultilineJSX(node) && node.attributes.length <= 1)\n        ) {\n          const firstNode = node.attributes[0];\n          if (node.loc.start.line < firstNode.loc.start.line) {\n            report(context, messages.propOnSameLine, 'propOnSameLine', {\n              node: firstNode,\n              fix(fixer) {\n                return fixer.replaceTextRange([node.name.range[1], firstNode.range[0]], ' ');\n              },\n            });\n          }\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}