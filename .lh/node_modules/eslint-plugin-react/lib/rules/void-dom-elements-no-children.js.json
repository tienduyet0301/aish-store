{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/void-dom-elements-no-children.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892278017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent void elements (e.g. <img />, <br />) from receiving\n *   children\n * @author Joe Lencioni\n */\n\n'use strict';\n\nconst has = require('hasown');\n\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n// Using an object here to avoid array scan. We should switch to Set once\n// support is good enough.\nconst VOID_DOM_ELEMENTS = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  menuitem: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true,\n};\n\nfunction isVoidDOMElement(elementName) {\n  return has(VOID_DOM_ELEMENTS, elementName);\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst noChildrenInVoidEl = 'Void DOM element <{{element}} /> cannot receive children.';\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow void DOM elements (e.g. `<img />`, `<br />`) from receiving children',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('void-dom-elements-no-children'),\n    },\n\n    messages: {\n      noChildrenInVoidEl,\n    },\n\n    schema: [],\n  },\n\n  create: (context) => ({\n    JSXElement(node) {\n      const elementName = node.openingElement.name.name;\n\n      if (!isVoidDOMElement(elementName)) {\n        // e.g. <div />\n        return;\n      }\n\n      if (node.children.length > 0) {\n        // e.g. <br>Foo</br>\n        report(context, noChildrenInVoidEl, 'noChildrenInVoidEl', {\n          node,\n          data: {\n            element: elementName,\n          },\n        });\n      }\n\n      const attributes = node.openingElement.attributes;\n\n      const hasChildrenAttributeOrDanger = attributes.some((attribute) => {\n        if (!attribute.name) {\n          return false;\n        }\n\n        return attribute.name.name === 'children' || attribute.name.name === 'dangerouslySetInnerHTML';\n      });\n\n      if (hasChildrenAttributeOrDanger) {\n        // e.g. <br children=\"Foo\" />\n        report(context, noChildrenInVoidEl, 'noChildrenInVoidEl', {\n          node,\n          data: {\n            element: elementName,\n          },\n        });\n      }\n    },\n\n    CallExpression(node) {\n      if (node.callee.type !== 'MemberExpression' && node.callee.type !== 'Identifier') {\n        return;\n      }\n\n      if (!isCreateElement(context, node)) {\n        return;\n      }\n\n      const args = node.arguments;\n\n      if (args.length < 1) {\n        // React.createElement() should not crash linter\n        return;\n      }\n\n      const elementName = 'value' in args[0] ? args[0].value : undefined;\n\n      if (!isVoidDOMElement(elementName)) {\n        // e.g. React.createElement('div');\n        return;\n      }\n\n      if (args.length < 2 || args[1].type !== 'ObjectExpression') {\n        return;\n      }\n\n      const firstChild = args[2];\n      if (firstChild) {\n        // e.g. React.createElement('br', undefined, 'Foo')\n        report(context, noChildrenInVoidEl, 'noChildrenInVoidEl', {\n          node,\n          data: {\n            element: elementName,\n          },\n        });\n      }\n\n      const props = args[1].properties;\n\n      const hasChildrenPropOrDanger = props.some((prop) => {\n        if (!('key' in prop) || !prop.key || !('name' in prop.key)) {\n          return false;\n        }\n\n        return prop.key.name === 'children' || prop.key.name === 'dangerouslySetInnerHTML';\n      });\n\n      if (hasChildrenPropOrDanger) {\n        // e.g. React.createElement('br', { children: 'Foo' })\n        report(context, noChildrenInVoidEl, 'noChildrenInVoidEl', {\n          node,\n          data: {\n            element: elementName,\n          },\n        });\n      }\n    },\n  }),\n};\n"
        }
    ]
}