{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-no-target-blank.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892271765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Forbid target='_blank' attribute\n * @author Kevin Miller\n */\n\n'use strict';\n\nconst includes = require('array-includes');\nconst docsUrl = require('../util/docsUrl');\nconst linkComponentsUtil = require('../util/linkComponents');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nfunction findLastIndex(arr, condition) {\n  for (let i = arr.length - 1; i >= 0; i -= 1) {\n    if (condition(arr[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction attributeValuePossiblyBlank(attribute) {\n  if (!attribute || !attribute.value) {\n    return false;\n  }\n  const value = attribute.value;\n  if (value.type === 'Literal') {\n    return typeof value.value === 'string' && value.value.toLowerCase() === '_blank';\n  }\n  if (value.type === 'JSXExpressionContainer') {\n    const expr = value.expression;\n    if (expr.type === 'Literal') {\n      return typeof expr.value === 'string' && expr.value.toLowerCase() === '_blank';\n    }\n    if (expr.type === 'ConditionalExpression') {\n      if (expr.alternate.type === 'Literal' && expr.alternate.value && expr.alternate.value.toLowerCase() === '_blank') {\n        return true;\n      }\n      if (expr.consequent.type === 'Literal' && expr.consequent.value && expr.consequent.value.toLowerCase() === '_blank') {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction hasExternalLink(node, linkAttributes, warnOnSpreadAttributes, spreadAttributeIndex) {\n  const linkIndex = findLastIndex(node.attributes, (attr) => attr.name && includes(linkAttributes, attr.name.name));\n  const foundExternalLink = linkIndex !== -1 && ((attr) => attr.value && attr.value.type === 'Literal' && /^(?:\\w+:|\\/\\/)/.test(attr.value.value))(\n    node.attributes[linkIndex]);\n  return foundExternalLink || (warnOnSpreadAttributes && linkIndex < spreadAttributeIndex);\n}\n\nfunction hasDynamicLink(node, linkAttributes) {\n  const dynamicLinkIndex = findLastIndex(node.attributes, (attr) => attr.name\n    && includes(linkAttributes, attr.name.name)\n    && attr.value\n    && attr.value.type === 'JSXExpressionContainer');\n  if (dynamicLinkIndex !== -1) {\n    return true;\n  }\n}\n\n/**\n * Get the string(s) from a value\n * @param {ASTNode} value The AST node being checked.\n * @param {ASTNode} targetValue The AST node being checked.\n * @returns {string | string[] | null} The string value, or null if not a string.\n */\nfunction getStringFromValue(value, targetValue) {\n  if (value) {\n    if (value.type === 'Literal') {\n      return value.value;\n    }\n    if (value.type === 'JSXExpressionContainer') {\n      if (value.expression.type === 'TemplateLiteral') {\n        return value.expression.quasis[0].value.cooked;\n      }\n      const expr = value.expression;\n      if (expr && expr.type === 'ConditionalExpression') {\n        const relValues = [expr.consequent.value, expr.alternate.value];\n        if (targetValue.type === 'JSXExpressionContainer' && targetValue.expression && targetValue.expression.type === 'ConditionalExpression') {\n          const targetTestCond = targetValue.expression.test.name;\n          const relTestCond = value.expression.test.name;\n          if (targetTestCond === relTestCond) {\n            const targetBlankIndex = [targetValue.expression.consequent.value, targetValue.expression.alternate.value].indexOf('_blank');\n            return relValues[targetBlankIndex];\n          }\n        }\n        return relValues;\n      }\n      return expr.value;\n    }\n  }\n  return null;\n}\n\nfunction hasSecureRel(node, allowReferrer, warnOnSpreadAttributes, spreadAttributeIndex) {\n  const relIndex = findLastIndex(node.attributes, (attr) => (attr.type === 'JSXAttribute' && attr.name.name === 'rel'));\n  const targetIndex = findLastIndex(node.attributes, (attr) => (attr.type === 'JSXAttribute' && attr.name.name === 'target'));\n  if (relIndex === -1 || (warnOnSpreadAttributes && relIndex < spreadAttributeIndex)) {\n    return false;\n  }\n\n  const relAttribute = node.attributes[relIndex];\n  const targetAttributeValue = node.attributes[targetIndex] && node.attributes[targetIndex].value;\n  const value = getStringFromValue(relAttribute.value, targetAttributeValue);\n  return [].concat(value).every((item) => {\n    const tags = typeof item === 'string' ? item.toLowerCase().split(' ') : false;\n    const noreferrer = tags && tags.indexOf('noreferrer') >= 0;\n    if (noreferrer) {\n      return true;\n    }\n    const noopener = tags && tags.indexOf('noopener') >= 0;\n    return allowReferrer && noopener;\n  });\n}\n\nconst messages = {\n  noTargetBlankWithoutNoreferrer: 'Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations',\n  noTargetBlankWithoutNoopener: 'Using target=\"_blank\" without rel=\"noreferrer\" or rel=\"noopener\" (the former implies the latter and is preferred due to wider support) is a security risk: see https://mathiasbynens.github.io/rel-noopener/#recommendations',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    fixable: 'code',\n    docs: {\n      description: 'Disallow `target=\"_blank\"` attribute without `rel=\"noreferrer\"`',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('jsx-no-target-blank'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowReferrer: {\n          type: 'boolean',\n        },\n        enforceDynamicLinks: {\n          enum: ['always', 'never'],\n        },\n        warnOnSpreadAttributes: {\n          type: 'boolean',\n        },\n        links: {\n          type: 'boolean',\n          default: true,\n        },\n        forms: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = Object.assign(\n      {\n        allowReferrer: false,\n        warnOnSpreadAttributes: false,\n        links: true,\n        forms: false,\n      },\n      context.options[0]\n    );\n    const allowReferrer = configuration.allowReferrer;\n    const warnOnSpreadAttributes = configuration.warnOnSpreadAttributes;\n    const enforceDynamicLinks = configuration.enforceDynamicLinks || 'always';\n    const linkComponents = linkComponentsUtil.getLinkComponents(context);\n    const formComponents = linkComponentsUtil.getFormComponents(context);\n\n    return {\n      JSXOpeningElement(node) {\n        const targetIndex = findLastIndex(node.attributes, (attr) => attr.name && attr.name.name === 'target');\n        const spreadAttributeIndex = findLastIndex(node.attributes, (attr) => (attr.type === 'JSXSpreadAttribute'));\n\n        if (linkComponents.has(node.name.name)) {\n          if (!attributeValuePossiblyBlank(node.attributes[targetIndex])) {\n            const hasSpread = spreadAttributeIndex >= 0;\n\n            if (warnOnSpreadAttributes && hasSpread) {\n              // continue to check below\n            } else if ((hasSpread && targetIndex < spreadAttributeIndex) || !hasSpread || !warnOnSpreadAttributes) {\n              return;\n            }\n          }\n\n          const linkAttributes = linkComponents.get(node.name.name);\n          const hasDangerousLink = hasExternalLink(node, linkAttributes, warnOnSpreadAttributes, spreadAttributeIndex)\n            || (enforceDynamicLinks === 'always' && hasDynamicLink(node, linkAttributes));\n          if (hasDangerousLink && !hasSecureRel(node, allowReferrer, warnOnSpreadAttributes, spreadAttributeIndex)) {\n            const messageId = allowReferrer ? 'noTargetBlankWithoutNoopener' : 'noTargetBlankWithoutNoreferrer';\n            const relValue = allowReferrer ? 'noopener' : 'noreferrer';\n            report(context, messages[messageId], messageId, {\n              node,\n              fix(fixer) {\n                // eslint 5 uses `node.attributes`; eslint 6+ uses `node.parent.attributes`\n                const nodeWithAttrs = node.parent.attributes ? node.parent : node;\n                // eslint 5 does not provide a `name` property on JSXSpreadElements\n                const relAttribute = nodeWithAttrs.attributes.find((attr) => attr.name && attr.name.name === 'rel');\n\n                if (targetIndex < spreadAttributeIndex || (spreadAttributeIndex >= 0 && !relAttribute)) {\n                  return null;\n                }\n\n                if (!relAttribute) {\n                  return fixer.insertTextAfter(nodeWithAttrs.attributes.slice(-1)[0], ` rel=\"${relValue}\"`);\n                }\n\n                if (!relAttribute.value) {\n                  return fixer.insertTextAfter(relAttribute, `=\"${relValue}\"`);\n                }\n\n                if (relAttribute.value.type === 'Literal') {\n                  const parts = relAttribute.value.value\n                    .split('noreferrer')\n                    .filter(Boolean);\n                  return fixer.replaceText(relAttribute.value, `\"${parts.concat('noreferrer').join(' ')}\"`);\n                }\n\n                if (relAttribute.value.type === 'JSXExpressionContainer') {\n                  if (relAttribute.value.expression.type === 'Literal') {\n                    if (typeof relAttribute.value.expression.value === 'string') {\n                      const parts = relAttribute.value.expression.value\n                        .split('noreferrer')\n                        .filter(Boolean);\n                      return fixer.replaceText(relAttribute.value.expression, `\"${parts.concat('noreferrer').join(' ')}\"`);\n                    }\n\n                    // for undefined, boolean, number, symbol, bigint, and null\n                    return fixer.replaceText(relAttribute.value, '\"noreferrer\"');\n                  }\n                }\n\n                return null;\n              },\n            });\n          }\n        }\n        if (formComponents.has(node.name.name)) {\n          if (!attributeValuePossiblyBlank(node.attributes[targetIndex])) {\n            const hasSpread = spreadAttributeIndex >= 0;\n\n            if (warnOnSpreadAttributes && hasSpread) {\n              // continue to check below\n            } else if (\n              (hasSpread && targetIndex < spreadAttributeIndex)\n              || !hasSpread\n              || !warnOnSpreadAttributes\n            ) {\n              return;\n            }\n          }\n\n          if (!configuration.forms || hasSecureRel(node)) {\n            return;\n          }\n\n          const formAttributes = formComponents.get(node.name.name);\n\n          if (\n            hasExternalLink(node, formAttributes)\n            || (enforceDynamicLinks === 'always' && hasDynamicLink(node, formAttributes))\n          ) {\n            const messageId = allowReferrer ? 'noTargetBlankWithoutNoopener' : 'noTargetBlankWithoutNoreferrer';\n            report(context, messages[messageId], messageId, {\n              node,\n            });\n          }\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}