{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-uses-react.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892272860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent React to be marked as unused\n * @author Glen Mailer\n */\n\n'use strict';\n\nconst pragmaUtil = require('../util/pragma');\nconst docsUrl = require('../util/docsUrl');\nconst markVariableAsUsed = require('../util/eslint').markVariableAsUsed;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  // eslint-disable-next-line eslint-plugin/prefer-message-ids -- https://github.com/not-an-aardvark/eslint-plugin-eslint-plugin/issues/292\n  meta: {\n    docs: {\n      description: 'Disallow React to be incorrectly marked as unused',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('jsx-uses-react'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    const pragma = pragmaUtil.getFromContext(context);\n    const fragment = pragmaUtil.getFragmentFromContext(context);\n\n    /**\n     * @param {ASTNode} node\n     * @returns {void}\n     */\n    function handleOpeningElement(node) {\n      markVariableAsUsed(pragma, node, context);\n    }\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      JSXOpeningElement: handleOpeningElement,\n      JSXOpeningFragment: handleOpeningElement,\n      JSXFragment(node) {\n        markVariableAsUsed(fragment, node, context);\n      },\n    };\n  },\n};\n"
        }
    ]
}