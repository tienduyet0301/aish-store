{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-no-undef.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892271832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Disallow undeclared variables in JSX\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst eslintUtil = require('../util/eslint');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  undefined: '\\'{{identifier}}\\' is not defined.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow undeclared variables in JSX',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-undef'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowGlobals: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowGlobals = config.allowGlobals || false;\n\n    /**\n     * Compare an identifier with the variables declared in the scope\n     * @param {ASTNode} node - Identifier or JSXIdentifier node\n     * @returns {void}\n     */\n    function checkIdentifierInJSX(node) {\n      let scope = eslintUtil.getScope(context, node);\n      const sourceCode = eslintUtil.getSourceCode(context);\n      const sourceType = sourceCode.ast.sourceType;\n      const scopeUpperBound = !allowGlobals && sourceType === 'module' ? 'module' : 'global';\n      let variables = scope.variables;\n      let i;\n      let len;\n\n      // Ignore 'this' keyword (also maked as JSXIdentifier when used in JSX)\n      if (node.name === 'this') {\n        return;\n      }\n\n      while (scope.type !== scopeUpperBound && scope.type !== 'global') {\n        scope = scope.upper;\n        variables = scope.variables.concat(variables);\n      }\n      if (scope.childScopes.length) {\n        variables = scope.childScopes[0].variables.concat(variables);\n        // Temporary fix for babel-eslint\n        if (scope.childScopes[0].childScopes.length) {\n          variables = scope.childScopes[0].childScopes[0].variables.concat(variables);\n        }\n      }\n\n      for (i = 0, len = variables.length; i < len; i++) {\n        if (variables[i].name === node.name) {\n          return;\n        }\n      }\n\n      report(context, messages.undefined, 'undefined', {\n        node,\n        data: {\n          identifier: node.name,\n        },\n      });\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        switch (node.name.type) {\n          case 'JSXIdentifier':\n            if (jsxUtil.isDOMComponent(node)) {\n              return;\n            }\n            node = node.name;\n            break;\n          case 'JSXMemberExpression':\n            node = node.name;\n            do {\n              node = node.object;\n            } while (node && node.type !== 'JSXIdentifier');\n            break;\n          case 'JSXNamespacedName':\n            return;\n          default:\n            break;\n        }\n        checkIdentifierInJSX(node);\n      },\n    };\n  },\n};\n"
        }
    ]
}