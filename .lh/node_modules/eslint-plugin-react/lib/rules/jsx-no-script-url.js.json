{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-no-script-url.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892271672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of `javascript:` URLs\n * @author Sergei Startsev\n */\n\n'use strict';\n\nconst includes = require('array-includes');\nconst docsUrl = require('../util/docsUrl');\nconst linkComponentsUtil = require('../util/linkComponents');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n// https://github.com/facebook/react/blob/d0ebde77f6d1232cefc0da184d731943d78e86f2/packages/react-dom/src/shared/sanitizeURL.js#L30\n/* eslint-disable-next-line max-len, no-control-regex */\nconst isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*:/i;\n\nfunction hasJavaScriptProtocol(attr) {\n  return attr.value && attr.value.type === 'Literal'\n    && isJavaScriptProtocol.test(attr.value.value);\n}\n\nfunction shouldVerifyProp(node, config) {\n  const name = node.name && node.name.name;\n  const parentName = node.parent.name && node.parent.name.name;\n\n  if (!name || !parentName || !config.has(parentName)) return false;\n\n  const attributes = config.get(parentName);\n  return includes(attributes, name);\n}\n\nfunction parseLegacyOption(config, option) {\n  option.forEach((opt) => {\n    config.set(opt.name, opt.props);\n  });\n}\n\nconst messages = {\n  noScriptURL: 'A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML, try using dangerouslySetInnerHTML instead.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of `javascript:` URLs',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('jsx-no-script-url'),\n    },\n\n    messages,\n\n    schema: {\n      anyOf: [\n        {\n          type: 'array',\n          items: [\n            {\n              type: 'array',\n              uniqueItems: true,\n              items: {\n                type: 'object',\n                properties: {\n                  name: {\n                    type: 'string',\n                  },\n                  props: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                      uniqueItems: true,\n                    },\n                  },\n                },\n                required: ['name', 'props'],\n                additionalProperties: false,\n              },\n            },\n            {\n              type: 'object',\n              properties: {\n                includeFromSettings: {\n                  type: 'boolean',\n                },\n              },\n              additionalItems: false,\n            },\n          ],\n          additionalItems: false,\n        },\n        {\n          type: 'array',\n          items: [\n            {\n              type: 'object',\n              properties: {\n                includeFromSettings: {\n                  type: 'boolean',\n                },\n              },\n              additionalItems: false,\n            },\n          ],\n          additionalItems: false,\n        },\n      ],\n    },\n  },\n\n  create(context) {\n    const options = context.options;\n    const hasLegacyOption = Array.isArray(options[0]);\n    const legacyOptions = hasLegacyOption ? options[0] : [];\n    // eslint-disable-next-line no-nested-ternary\n    const objectOption = (hasLegacyOption && options.length > 1)\n      ? options[1]\n      : (options.length > 0\n        ? options[0]\n        : {\n          includeFromSettings: false,\n        }\n      );\n    const includeFromSettings = objectOption.includeFromSettings;\n\n    const linkComponents = linkComponentsUtil.getLinkComponents(includeFromSettings ? context : {});\n    parseLegacyOption(linkComponents, legacyOptions);\n\n    return {\n      JSXAttribute(node) {\n        if (shouldVerifyProp(node, linkComponents) && hasJavaScriptProtocol(node)) {\n          report(context, messages.noScriptURL, 'noScriptURL', {\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}