{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/style-prop-object.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892277900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce style prop value is an object\n * @author David Petersen\n */\n\n'use strict';\n\nconst variableUtil = require('../util/variable');\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  stylePropNotObject: 'Style prop value must be an object',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce style prop value is an object',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('style-prop-object'),\n    },\n\n    messages,\n\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          allow: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            additionalItems: false,\n            uniqueItems: true,\n          },\n        },\n      },\n    ],\n  },\n\n  create(context) {\n    const allowed = new Set(((context.options.length > 0) && context.options[0].allow) || []);\n\n    /**\n     * @param {ASTNode} expression An Identifier node\n     * @returns {boolean}\n     */\n    function isNonNullaryLiteral(expression) {\n      return expression.type === 'Literal' && expression.value !== null;\n    }\n\n    /**\n     * @param {object} node A Identifier node\n     */\n    function checkIdentifiers(node) {\n      const variable = variableUtil.getVariableFromContext(context, node, node.name);\n\n      if (!variable || !variable.defs[0] || !variable.defs[0].node.init) {\n        return;\n      }\n\n      if (isNonNullaryLiteral(variable.defs[0].node.init)) {\n        report(context, messages.stylePropNotObject, 'stylePropNotObject', {\n          node,\n        });\n      }\n    }\n\n    return {\n      CallExpression(node) {\n        if (\n          isCreateElement(context, node)\n          && node.arguments.length > 1\n        ) {\n          if ('name' in node.arguments[0] && node.arguments[0].name) {\n            // store name of component\n            const componentName = node.arguments[0].name;\n\n            // allowed list contains the name\n            if (allowed.has(componentName)) {\n              // abort operation\n              return;\n            }\n          }\n          if (node.arguments[1].type === 'ObjectExpression') {\n            const style = node.arguments[1].properties.find((property) => (\n              'key' in property\n              && property.key\n              && 'name' in property.key\n              && property.key.name === 'style'\n              && !property.computed\n            ));\n\n            if (style && 'value' in style) {\n              if (style.value.type === 'Identifier') {\n                checkIdentifiers(style.value);\n              } else if (isNonNullaryLiteral(style.value)) {\n                report(context, messages.stylePropNotObject, 'stylePropNotObject', {\n                  node: style.value,\n                });\n              }\n            }\n          }\n        }\n      },\n\n      JSXAttribute(node) {\n        if (!node.value || node.name.name !== 'style') {\n          return;\n        }\n        // store parent element\n        const parentElement = node.parent;\n\n        // parent element is a JSXOpeningElement\n        if (parentElement && parentElement.type === 'JSXOpeningElement') {\n          // get the name of the JSX element\n          const name = parentElement.name && parentElement.name.name;\n\n          // allowed list contains the name\n          if (allowed.has(name)) {\n            // abort operation\n            return;\n          }\n        }\n\n        if (node.value.type !== 'JSXExpressionContainer' || isNonNullaryLiteral(node.value.expression)) {\n          report(context, messages.stylePropNotObject, 'stylePropNotObject', {\n            node,\n          });\n        } else if (node.value.expression.type === 'Identifier') {\n          checkIdentifiers(node.value.expression);\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}