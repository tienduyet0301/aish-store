{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-deprecated.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892273834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of deprecated methods\n * @author Yannick Croissant\n * @author Scott Feeney\n * @author Sergei Startsev\n */\n\n'use strict';\n\nconst entries = require('object.entries');\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst pragmaUtil = require('../util/pragma');\nconst testReactVersion = require('../util/version').testReactVersion;\nconst report = require('../util/report');\nconst getText = require('../util/eslint').getText;\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst MODULES = {\n  react: ['React'],\n  'react-addons-perf': ['ReactPerf', 'Perf'],\n  'react-dom': ['ReactDOM'],\n  'react-dom/server': ['ReactDOMServer'],\n};\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nfunction getDeprecated(pragma) {\n  const deprecated = {};\n  // 0.12.0\n  deprecated[`${pragma}.renderComponent`] = ['0.12.0', `${pragma}.render`];\n  deprecated[`${pragma}.renderComponentToString`] = ['0.12.0', `${pragma}.renderToString`];\n  deprecated[`${pragma}.renderComponentToStaticMarkup`] = ['0.12.0', `${pragma}.renderToStaticMarkup`];\n  deprecated[`${pragma}.isValidComponent`] = ['0.12.0', `${pragma}.isValidElement`];\n  deprecated[`${pragma}.PropTypes.component`] = ['0.12.0', `${pragma}.PropTypes.element`];\n  deprecated[`${pragma}.PropTypes.renderable`] = ['0.12.0', `${pragma}.PropTypes.node`];\n  deprecated[`${pragma}.isValidClass`] = ['0.12.0'];\n  deprecated['this.transferPropsTo'] = ['0.12.0', 'spread operator ({...})'];\n  // 0.13.0\n  deprecated[`${pragma}.addons.classSet`] = ['0.13.0', 'the npm module classnames'];\n  deprecated[`${pragma}.addons.cloneWithProps`] = ['0.13.0', `${pragma}.cloneElement`];\n  // 0.14.0\n  deprecated[`${pragma}.render`] = ['0.14.0', 'ReactDOM.render'];\n  deprecated[`${pragma}.unmountComponentAtNode`] = ['0.14.0', 'ReactDOM.unmountComponentAtNode'];\n  deprecated[`${pragma}.findDOMNode`] = ['0.14.0', 'ReactDOM.findDOMNode'];\n  deprecated[`${pragma}.renderToString`] = ['0.14.0', 'ReactDOMServer.renderToString'];\n  deprecated[`${pragma}.renderToStaticMarkup`] = ['0.14.0', 'ReactDOMServer.renderToStaticMarkup'];\n  // 15.0.0\n  deprecated[`${pragma}.addons.LinkedStateMixin`] = ['15.0.0'];\n  deprecated['ReactPerf.printDOM'] = ['15.0.0', 'ReactPerf.printOperations'];\n  deprecated['Perf.printDOM'] = ['15.0.0', 'Perf.printOperations'];\n  deprecated['ReactPerf.getMeasurementsSummaryMap'] = ['15.0.0', 'ReactPerf.getWasted'];\n  deprecated['Perf.getMeasurementsSummaryMap'] = ['15.0.0', 'Perf.getWasted'];\n  // 15.5.0\n  deprecated[`${pragma}.createClass`] = ['15.5.0', 'the npm module create-react-class'];\n  deprecated[`${pragma}.addons.TestUtils`] = ['15.5.0', 'ReactDOM.TestUtils'];\n  deprecated[`${pragma}.PropTypes`] = ['15.5.0', 'the npm module prop-types'];\n  // 15.6.0\n  deprecated[`${pragma}.DOM`] = ['15.6.0', 'the npm module react-dom-factories'];\n  // 16.9.0\n  // For now the following life-cycle methods are just legacy, not deprecated:\n  // `componentWillMount`, `componentWillReceiveProps`, `componentWillUpdate`\n  // https://github.com/yannickcr/eslint-plugin-react/pull/1750#issuecomment-425975934\n  deprecated.componentWillMount = [\n    '16.9.0',\n    'UNSAFE_componentWillMount',\n    'https://reactjs.org/docs/react-component.html#unsafe_componentwillmount. '\n    + 'Use https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles to automatically update your components.',\n  ];\n  deprecated.componentWillReceiveProps = [\n    '16.9.0',\n    'UNSAFE_componentWillReceiveProps',\n    'https://reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops. '\n    + 'Use https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles to automatically update your components.',\n  ];\n  deprecated.componentWillUpdate = [\n    '16.9.0',\n    'UNSAFE_componentWillUpdate',\n    'https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate. '\n    + 'Use https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles to automatically update your components.',\n  ];\n  // 18.0.0\n  // https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#deprecations\n  deprecated['ReactDOM.render'] = [\n    '18.0.0',\n    'createRoot',\n    'https://reactjs.org/link/switch-to-createroot',\n  ];\n  deprecated['ReactDOM.hydrate'] = [\n    '18.0.0',\n    'hydrateRoot',\n    'https://reactjs.org/link/switch-to-createroot',\n  ];\n  deprecated['ReactDOM.unmountComponentAtNode'] = [\n    '18.0.0',\n    'root.unmount',\n    'https://reactjs.org/link/switch-to-createroot',\n  ];\n  deprecated['ReactDOMServer.renderToNodeStream'] = [\n    '18.0.0',\n    'renderToPipeableStream',\n    'https://reactjs.org/docs/react-dom-server.html#rendertonodestream',\n  ];\n\n  return deprecated;\n}\n\nconst messages = {\n  deprecated: '{{oldMethod}} is deprecated since React {{version}}{{newMethod}}{{refs}}',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of deprecated methods',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('no-deprecated'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    const pragma = pragmaUtil.getFromContext(context);\n    const deprecated = getDeprecated(pragma);\n\n    function isDeprecated(method) {\n      return (\n        deprecated\n        && deprecated[method]\n        && deprecated[method][0]\n        && testReactVersion(context, `>= ${deprecated[method][0]}`)\n      );\n    }\n\n    function checkDeprecation(node, methodName, methodNode) {\n      if (!isDeprecated(methodName)) {\n        return;\n      }\n      const version = deprecated[methodName][0];\n      const newMethod = deprecated[methodName][1];\n      const refs = deprecated[methodName][2];\n      report(context, messages.deprecated, 'deprecated', {\n        node: methodNode || node,\n        data: {\n          oldMethod: methodName,\n          version,\n          newMethod: newMethod ? `, use ${newMethod} instead` : '',\n          refs: refs ? `, see ${refs}` : '',\n        },\n      });\n    }\n\n    function getReactModuleName(node) {\n      let moduleName = false;\n      if (!node.init) {\n        return false;\n      }\n\n      entries(MODULES).some((entry) => {\n        const key = entry[0];\n        const moduleNames = entry[1];\n        if (\n          node.init.arguments\n          && node.init.arguments.length > 0\n          && node.init.arguments[0]\n          && key === node.init.arguments[0].value\n        ) {\n          moduleName = MODULES[key][0];\n        } else {\n          moduleName = moduleNames.find((name) => name === node.init.name);\n        }\n        return moduleName;\n      });\n\n      return moduleName;\n    }\n\n    /**\n     * Returns life cycle methods if available\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Array} The array of methods.\n     */\n    function getLifeCycleMethods(node) {\n      const properties = astUtil.getComponentProperties(node);\n      return properties.map((property) => ({\n        name: astUtil.getPropertyName(property),\n        node: astUtil.getPropertyNameNode(property),\n      }));\n    }\n\n    /**\n     * Checks life cycle methods\n     * @param {ASTNode} node The AST node being checked.\n     */\n    function checkLifeCycleMethods(node) {\n      if (\n        componentUtil.isES5Component(node, context)\n     || componentUtil.isES6Component(node, context)\n      ) {\n        const methods = getLifeCycleMethods(node);\n        methods.forEach((method) => checkDeprecation(node, method.name, method.node));\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      MemberExpression(node) {\n        checkDeprecation(node, getText(context, node));\n      },\n\n      ImportDeclaration(node) {\n        const isReactImport = typeof MODULES[node.source.value] !== 'undefined';\n        if (!isReactImport) {\n          return;\n        }\n        node.specifiers.filter(((s) => 'imported' in s && s.imported)).forEach((specifier) => {\n          // TODO, semver-major: remove `in` check as part of jsdoc->tsdoc migration\n          checkDeprecation(node, 'imported' in specifier && 'name' in specifier.imported && `${MODULES[node.source.value][0]}.${specifier.imported.name}`, specifier);\n        });\n      },\n\n      VariableDeclarator(node) {\n        const reactModuleName = getReactModuleName(node);\n        const isRequire = node.init\n          && 'callee' in node.init\n          && node.init.callee\n          && 'name' in node.init.callee\n          && node.init.callee.name === 'require';\n        const isReactRequire = node.init\n          && 'arguments' in node.init\n          && node.init.arguments\n          && node.init.arguments.length\n          && typeof MODULES['value' in node.init.arguments[0] ? node.init.arguments[0].value : undefined] !== 'undefined';\n        const isDestructuring = node.id && node.id.type === 'ObjectPattern';\n\n        if (\n          !(isDestructuring && reactModuleName)\n          && !(isDestructuring && isRequire && isReactRequire)\n        ) {\n          return;\n        }\n\n        ('properties' in node.id ? node.id.properties : undefined).filter((p) => p.type !== 'RestElement' && p.key).forEach((property) => {\n          checkDeprecation(\n            node,\n            'key' in property && 'name' in property.key && `${reactModuleName || pragma}.${property.key.name}`,\n            property\n          );\n        });\n      },\n\n      ClassDeclaration: checkLifeCycleMethods,\n      ClassExpression: checkLifeCycleMethods,\n      ObjectExpression: checkLifeCycleMethods,\n    };\n  },\n};\n"
        }
    ]
}