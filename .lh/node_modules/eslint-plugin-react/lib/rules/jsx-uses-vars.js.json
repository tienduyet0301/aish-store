{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-uses-vars.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892272941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent variables used in JSX to be marked as unused\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst markVariableAsUsed = require('../util/eslint').markVariableAsUsed;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst isTagNameRe = /^[a-z]/;\nconst isTagName = (name) => isTagNameRe.test(name);\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  // eslint-disable-next-line eslint-plugin/prefer-message-ids -- https://github.com/not-an-aardvark/eslint-plugin-eslint-plugin/issues/292\n  meta: {\n    docs: {\n      description: 'Disallow variables used in JSX to be incorrectly marked as unused',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('jsx-uses-vars'),\n    },\n    schema: [],\n  },\n\n  create(context) {\n    return {\n      JSXOpeningElement(node) {\n        let name;\n        if (node.name.namespace) {\n          // <Foo:Bar>\n          return;\n        }\n        if (node.name.name) {\n          // <Foo>\n          name = node.name.name;\n          // Exclude lowercase tag names like <div>\n          if (isTagName(name)) {\n            return;\n          }\n        } else if (node.name.object) {\n          // <Foo...Bar>\n          let parent = node.name.object;\n          while (parent.object) {\n            parent = parent.object;\n          }\n          name = parent.name;\n        } else {\n          return;\n        }\n\n        markVariableAsUsed(name, node, context);\n      },\n\n    };\n  },\n};\n"
        }
    ]
}