{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/iframe-missing-sandbox.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892267768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview TBD\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\nconst messages = {\n  attributeMissing: 'An iframe element is missing a sandbox attribute',\n  invalidValue: 'An iframe element defines a sandbox attribute with invalid value \"{{ value }}\"',\n  invalidCombination: 'An iframe element defines a sandbox attribute with both allow-scripts and allow-same-origin which is invalid',\n};\n\nconst ALLOWED_VALUES = [\n  // From https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n  '',\n  'allow-downloads-without-user-activation',\n  'allow-downloads',\n  'allow-forms',\n  'allow-modals',\n  'allow-orientation-lock',\n  'allow-pointer-lock',\n  'allow-popups',\n  'allow-popups-to-escape-sandbox',\n  'allow-presentation',\n  'allow-same-origin',\n  'allow-scripts',\n  'allow-storage-access-by-user-activation',\n  'allow-top-navigation',\n  'allow-top-navigation-by-user-activation',\n];\n\nfunction validateSandboxAttribute(context, node, attribute) {\n  if (typeof attribute !== 'string') {\n    // Only string literals are supported for now\n    return;\n  }\n  const values = attribute.split(' ');\n  let allowScripts = false;\n  let allowSameOrigin = false;\n  values.forEach((attributeValue) => {\n    const trimmedAttributeValue = attributeValue.trim();\n    if (ALLOWED_VALUES.indexOf(trimmedAttributeValue) === -1) {\n      report(context, messages.invalidValue, 'invalidValue', {\n        node,\n        data: {\n          value: trimmedAttributeValue,\n        },\n      });\n    }\n    if (trimmedAttributeValue === 'allow-scripts') {\n      allowScripts = true;\n    }\n    if (trimmedAttributeValue === 'allow-same-origin') {\n      allowSameOrigin = true;\n    }\n  });\n  if (allowScripts && allowSameOrigin) {\n    report(context, messages.invalidCombination, 'invalidCombination', {\n      node,\n    });\n  }\n}\n\nfunction checkAttributes(context, node) {\n  let sandboxAttributeFound = false;\n  node.attributes.forEach((attribute) => {\n    if (attribute.type === 'JSXAttribute'\n        && attribute.name\n        && attribute.name.type === 'JSXIdentifier'\n        && attribute.name.name === 'sandbox'\n    ) {\n      sandboxAttributeFound = true;\n      if (\n        attribute.value\n        && attribute.value.type === 'Literal'\n        && attribute.value.value\n      ) {\n        validateSandboxAttribute(context, node, attribute.value.value);\n      }\n    }\n  });\n  if (!sandboxAttributeFound) {\n    report(context, messages.attributeMissing, 'attributeMissing', {\n      node,\n    });\n  }\n}\n\nfunction checkProps(context, node) {\n  let sandboxAttributeFound = false;\n  if (node.arguments.length > 1) {\n    const props = node.arguments[1];\n    const sandboxProp = props.properties && props.properties.find((x) => x.type === 'Property' && x.key.name === 'sandbox');\n    if (sandboxProp) {\n      sandboxAttributeFound = true;\n      if (sandboxProp.value && sandboxProp.value.type === 'Literal' && sandboxProp.value.value) {\n        validateSandboxAttribute(context, node, sandboxProp.value.value);\n      }\n    }\n  }\n  if (!sandboxAttributeFound) {\n    report(context, messages.attributeMissing, 'attributeMissing', {\n      node,\n    });\n  }\n}\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce sandbox attribute on iframe elements',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('iframe-missing-sandbox'),\n    },\n\n    schema: [],\n\n    messages,\n  },\n\n  create(context) {\n    return {\n      'JSXOpeningElement[name.name=\"iframe\"]'(node) {\n        checkAttributes(context, node);\n      },\n\n      CallExpression(node) {\n        if (isCreateElement(context, node) && node.arguments && node.arguments.length > 0) {\n          const tag = node.arguments[0];\n          if (tag.type === 'Literal' && tag.value === 'iframe') {\n            checkProps(context, node);\n          }\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}