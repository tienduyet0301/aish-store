{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-is-mounted.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of isMounted\n * @author Joe Lencioni\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst getAncestors = require('../util/eslint').getAncestors;\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noIsMounted: 'Do not use isMounted',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of isMounted',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('no-is-mounted'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const callee = node.callee;\n        if (callee.type !== 'MemberExpression') {\n          return;\n        }\n        if (\n          callee.object.type !== 'ThisExpression'\n          || !('name' in callee.property)\n          || callee.property.name !== 'isMounted'\n        ) {\n          return;\n        }\n        const ancestors = getAncestors(context, node);\n        for (let i = 0, j = ancestors.length; i < j; i++) {\n          if (ancestors[i].type === 'Property' || ancestors[i].type === 'MethodDefinition') {\n            report(context, messages.noIsMounted, 'noIsMounted', {\n              node: callee,\n            });\n            break;\n          }\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}