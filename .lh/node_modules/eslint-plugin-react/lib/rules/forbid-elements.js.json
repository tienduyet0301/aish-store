{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/forbid-elements.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892266715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Forbid certain elements\n * @author Kenneth Chung\n */\n\n'use strict';\n\nconst has = require('hasown');\nconst docsUrl = require('../util/docsUrl');\nconst getText = require('../util/eslint').getText;\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  forbiddenElement: '<{{element}}> is forbidden',\n  forbiddenElement_message: '<{{element}}> is forbidden, {{message}}',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain elements',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-elements'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            anyOf: [\n              { type: 'string' },\n              {\n                type: 'object',\n                properties: {\n                  element: { type: 'string' },\n                  message: { type: 'string' },\n                },\n                required: ['element'],\n                additionalProperties: false,\n              },\n            ],\n          },\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbidConfiguration = configuration.forbid || [];\n\n    /** @type {Record<string, { element: string, message?: string }>} */\n    const indexedForbidConfigs = {};\n\n    forbidConfiguration.forEach((item) => {\n      if (typeof item === 'string') {\n        indexedForbidConfigs[item] = { element: item };\n      } else {\n        indexedForbidConfigs[item.element] = item;\n      }\n    });\n\n    function reportIfForbidden(element, node) {\n      if (has(indexedForbidConfigs, element)) {\n        const message = indexedForbidConfigs[element].message;\n\n        report(\n          context,\n          message ? messages.forbiddenElement_message : messages.forbiddenElement,\n          message ? 'forbiddenElement_message' : 'forbiddenElement',\n          {\n            node,\n            data: {\n              element,\n              message,\n            },\n          }\n        );\n      }\n    }\n\n    return {\n      JSXOpeningElement(node) {\n        reportIfForbidden(getText(context, node.name), node.name);\n      },\n\n      CallExpression(node) {\n        if (!isCreateElement(context, node)) {\n          return;\n        }\n\n        const argument = node.arguments[0];\n        if (!argument) {\n          return;\n        }\n\n        if (argument.type === 'Identifier' && /^[A-Z_]/.test(argument.name)) {\n          reportIfForbidden(argument.name, argument);\n        } else if (argument.type === 'Literal' && /^[a-z][^.]*$/.test(String(argument.value))) {\n          reportIfForbidden(argument.value, argument);\n        } else if (argument.type === 'MemberExpression') {\n          reportIfForbidden(getText(context, argument), argument);\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}