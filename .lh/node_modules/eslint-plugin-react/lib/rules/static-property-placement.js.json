{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/static-property-placement.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892277787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Defines where React component static properties should be positioned.\n * @author Daniel Mason\n */\n\n'use strict';\n\nconst fromEntries = require('object.fromentries');\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst propsUtil = require('../util/props');\nconst report = require('../util/report');\nconst getScope = require('../util/eslint').getScope;\n\n// ------------------------------------------------------------------------------\n// Positioning Options\n// ------------------------------------------------------------------------------\nconst STATIC_PUBLIC_FIELD = 'static public field';\nconst STATIC_GETTER = 'static getter';\nconst PROPERTY_ASSIGNMENT = 'property assignment';\nconst POSITION_SETTINGS = [STATIC_PUBLIC_FIELD, STATIC_GETTER, PROPERTY_ASSIGNMENT];\n\n// ------------------------------------------------------------------------------\n// Rule messages\n// ------------------------------------------------------------------------------\nconst ERROR_MESSAGES = {\n  [STATIC_PUBLIC_FIELD]: 'notStaticClassProp',\n  [STATIC_GETTER]: 'notGetterClassFunc',\n  [PROPERTY_ASSIGNMENT]: 'declareOutsideClass',\n};\n\n// ------------------------------------------------------------------------------\n// Properties to check\n// ------------------------------------------------------------------------------\nconst propertiesToCheck = {\n  propTypes: propsUtil.isPropTypesDeclaration,\n  defaultProps: propsUtil.isDefaultPropsDeclaration,\n  childContextTypes: propsUtil.isChildContextTypesDeclaration,\n  contextTypes: propsUtil.isContextTypesDeclaration,\n  contextType: propsUtil.isContextTypeDeclaration,\n  displayName: (node) => propsUtil.isDisplayNameDeclaration(astUtil.getPropertyNameNode(node)),\n};\n\nconst classProperties = Object.keys(propertiesToCheck);\nconst schemaProperties = fromEntries(classProperties.map((property) => [property, { enum: POSITION_SETTINGS }]));\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  notStaticClassProp: '\\'{{name}}\\' should be declared as a static class property.',\n  notGetterClassFunc: '\\'{{name}}\\' should be declared as a static getter class function.',\n  declareOutsideClass: '\\'{{name}}\\' should be declared outside the class body.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforces where React component static properties should be positioned.',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('static-property-placement'),\n    },\n    fixable: null, // or 'code' or 'whitespace'\n\n    messages,\n\n    schema: [\n      { enum: POSITION_SETTINGS },\n      {\n        type: 'object',\n        properties: schemaProperties,\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create: Components.detect((context, components, utils) => {\n    // variables should be defined here\n    const options = context.options;\n    const defaultCheckType = options[0] || STATIC_PUBLIC_FIELD;\n    const hasAdditionalConfig = options.length > 1;\n    const additionalConfig = hasAdditionalConfig ? options[1] : {};\n\n    // Set config\n    const config = fromEntries(classProperties.map((property) => [\n      property,\n      additionalConfig[property] || defaultCheckType,\n    ]));\n\n    // ----------------------------------------------------------------------\n    // Helpers\n    // ----------------------------------------------------------------------\n\n    /**\n      * Checks if we are declaring context in class\n      * @param {ASTNode} node\n      * @returns {boolean} True if we are declaring context in class, false if not.\n     */\n    function isContextInClass(node) {\n      let blockNode;\n      let scope = getScope(context, node);\n      while (scope) {\n        blockNode = scope.block;\n        if (blockNode && blockNode.type === 'ClassDeclaration') {\n          return true;\n        }\n        scope = scope.upper;\n      }\n\n      return false;\n    }\n\n    /**\n     * Check if we should report this property node\n     * @param {ASTNode} node\n     * @param {string} expectedRule\n     */\n    function reportNodeIncorrectlyPositioned(node, expectedRule) {\n      // Detect if this node is an expected property declaration adn return the property name\n      const name = classProperties.find((propertyName) => {\n        if (propertiesToCheck[propertyName](node)) {\n          return !!propertyName;\n        }\n\n        return false;\n      });\n\n      // If name is set but the configured rule does not match expected then report error\n      if (\n        name\n        && (\n          config[name] !== expectedRule\n          || (!node.static && (config[name] === STATIC_PUBLIC_FIELD || config[name] === STATIC_GETTER))\n        )\n      ) {\n        const messageId = ERROR_MESSAGES[config[name]];\n        report(context, messages[messageId], messageId, {\n          node,\n          data: { name },\n        });\n      }\n    }\n\n    // ----------------------------------------------------------------------\n    // Public\n    // ----------------------------------------------------------------------\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!componentUtil.getParentES6Component(context, node)) {\n          return;\n        }\n\n        reportNodeIncorrectlyPositioned(node, STATIC_PUBLIC_FIELD);\n      },\n\n      MemberExpression(node) {\n        // If definition type is undefined then it must not be a defining expression or if the definition is inside a\n        // class body then skip this node.\n        const right = node.parent.right;\n        if (!right || right.type === 'undefined' || isContextInClass(node)) {\n          return;\n        }\n\n        // Get the related component\n        const relatedComponent = utils.getRelatedComponent(node);\n\n        // If the related component is not an ES6 component then skip this node\n        if (!relatedComponent || !componentUtil.isES6Component(relatedComponent.node, context)) {\n          return;\n        }\n\n        // Report if needed\n        reportNodeIncorrectlyPositioned(node, PROPERTY_ASSIGNMENT);\n      },\n\n      MethodDefinition(node) {\n        // If the function is inside a class and is static getter then check if correctly positioned\n        if (\n          componentUtil.getParentES6Component(context, node)\n          && node.static\n          && node.kind === 'get'\n        ) {\n          // Report error if needed\n          reportNodeIncorrectlyPositioned(node, STATIC_GETTER);\n        }\n      },\n    };\n  }),\n};\n"
        }
    ]
}