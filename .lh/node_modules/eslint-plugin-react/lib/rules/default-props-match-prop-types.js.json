{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/default-props-match-prop-types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileOverview Enforce all defaultProps are defined in propTypes\n * @author Vitor Balocco\n * @author Roy Sutton\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  requiredHasDefault: 'defaultProp \"{{name}}\" defined for isRequired propType.',\n  defaultHasNoType: 'defaultProp \"{{name}}\" has no corresponding propTypes declaration.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce all defaultProps have a corresponding non-required PropType',\n      category: 'Best Practices',\n      url: docsUrl('default-props-match-prop-types'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowRequiredDefaults: {\n          default: false,\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create: Components.detect((context, components) => {\n    const configuration = context.options[0] || {};\n    const allowRequiredDefaults = configuration.allowRequiredDefaults || false;\n\n    /**\n     * Reports all defaultProps passed in that don't have an appropriate propTypes counterpart.\n     * @param  {Object[]} propTypes    Array of propTypes to check.\n     * @param  {Object}   defaultProps Object of defaultProps to check. Keys are the props names.\n     * @return {void}\n     */\n    function reportInvalidDefaultProps(propTypes, defaultProps) {\n      // If this defaultProps is \"unresolved\" or the propTypes is undefined, then we should ignore\n      // this component and not report any errors for it, to avoid false-positives with e.g.\n      // external defaultProps/propTypes declarations or spread operators.\n      if (defaultProps === 'unresolved' || !propTypes || Object.keys(propTypes).length === 0) {\n        return;\n      }\n\n      Object.keys(defaultProps).forEach((defaultPropName) => {\n        const defaultProp = defaultProps[defaultPropName];\n        const prop = propTypes[defaultPropName];\n\n        if (prop && (allowRequiredDefaults || !prop.isRequired)) {\n          return;\n        }\n\n        if (prop) {\n          report(context, messages.requiredHasDefault, 'requiredHasDefault', {\n            node: defaultProp.node,\n            data: {\n              name: defaultPropName,\n            },\n          });\n        } else {\n          report(context, messages.defaultHasNoType, 'defaultHasNoType', {\n            node: defaultProp.node,\n            data: {\n              name: defaultPropName,\n            },\n          });\n        }\n      });\n    }\n\n    // --------------------------------------------------------------------------\n    // Public API\n    // --------------------------------------------------------------------------\n\n    return {\n      'Program:exit'() {\n        // If no defaultProps could be found, we don't report anything.\n        values(components.list())\n          .filter((component) => component.defaultProps)\n          .forEach((component) => {\n            reportInvalidDefaultProps(\n              component.declaredPropTypes,\n              component.defaultProps || {}\n            );\n          });\n      },\n    };\n  }),\n};\n"
        }
    ]
}