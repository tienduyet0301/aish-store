{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-set-state.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of setState\n * @author Mark Dalgleish\n */\n\n'use strict';\n\nconst values = require('object.values');\n\nconst Components = require('../util/Components');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noSetState: 'Do not use setState',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of setState',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('no-set-state'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create: Components.detect((context, components, utils) => {\n    /**\n     * Checks if the component is valid\n     * @param {Object} component The component to process\n     * @returns {boolean} True if the component is valid, false if not.\n     */\n    function isValid(component) {\n      return !!component && !component.useSetState;\n    }\n\n    /**\n     * Reports usages of setState for a given component\n     * @param {Object} component The component to process\n     */\n    function reportSetStateUsages(component) {\n      for (let i = 0, j = component.setStateUsages.length; i < j; i++) {\n        const setStateUsage = component.setStateUsages[i];\n        report(context, messages.noSetState, 'noSetState', {\n          node: setStateUsage,\n        });\n      }\n    }\n\n    return {\n      CallExpression(node) {\n        const callee = node.callee;\n        if (\n          callee.type !== 'MemberExpression'\n          || callee.object.type !== 'ThisExpression'\n          || callee.property.name !== 'setState'\n        ) {\n          return;\n        }\n        const component = components.get(utils.getParentComponent(node));\n        const setStateUsages = (component && component.setStateUsages) || [];\n        setStateUsages.push(callee);\n        components.set(node, {\n          useSetState: true,\n          setStateUsages,\n        });\n      },\n\n      'Program:exit'() {\n        values(components.list())\n          .filter((component) => !isValid(component))\n          .forEach((component) => {\n            reportSetStateUsages(component);\n          });\n      },\n    };\n  }),\n};\n"
        }
    ]
}