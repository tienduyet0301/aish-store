{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-namespace.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce that namespaces are not used in React elements\n * @author Yacine Hmito\n */\n\n'use strict';\n\nconst elementType = require('jsx-ast-utils/elementType');\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noNamespace: 'React component {{name}} must not be in a namespace, as React does not support them',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce that namespaces are not used in React elements',\n      category: 'Possible Errors',\n      recommended: false,\n      url: docsUrl('no-namespace'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        if (isCreateElement(context, node) && node.arguments.length > 0 && node.arguments[0].type === 'Literal') {\n          const name = node.arguments[0].value;\n          if (typeof name !== 'string' || name.indexOf(':') === -1) return undefined;\n          report(context, messages.noNamespace, 'noNamespace', {\n            node,\n            data: {\n              name,\n            },\n          });\n        }\n      },\n      JSXOpeningElement(node) {\n        const name = elementType(node);\n        if (typeof name !== 'string' || name.indexOf(':') === -1) return undefined;\n        report(context, messages.noNamespace, 'noNamespace', {\n          node,\n          data: {\n            name,\n          },\n        });\n      },\n    };\n  },\n};\n"
        }
    ]
}