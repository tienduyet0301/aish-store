{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/react-in-jsx-scope.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892276717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent missing React when using JSX\n * @author Glen Mailer\n */\n\n'use strict';\n\nconst variableUtil = require('../util/variable');\nconst pragmaUtil = require('../util/pragma');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// -----------------------------------------------------------------------------\n// Rule Definition\n// -----------------------------------------------------------------------------\n\nconst messages = {\n  notInScope: '\\'{{name}}\\' must be in scope when using JSX',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow missing React when using JSX',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('react-in-jsx-scope'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    const pragma = pragmaUtil.getFromContext(context);\n\n    function checkIfReactIsInScope(node) {\n      if (variableUtil.getVariableFromContext(context, node, pragma)) {\n        return;\n      }\n      report(context, messages.notInScope, 'notInScope', {\n        node,\n        data: {\n          name: pragma,\n        },\n      });\n    }\n\n    return {\n      JSXOpeningElement: checkIfReactIsInScope,\n      JSXOpeningFragment: checkIfReactIsInScope,\n    };\n  },\n};\n"
        }
    ]
}