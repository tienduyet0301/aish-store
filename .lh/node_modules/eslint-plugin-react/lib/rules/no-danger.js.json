{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-danger.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892273744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of dangerous JSX props\n * @author Scott Andrews\n */\n\n'use strict';\n\nconst has = require('hasown');\nconst fromEntries = require('object.fromentries/polyfill')();\nconst minimatch = require('minimatch');\n\nconst docsUrl = require('../util/docsUrl');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DANGEROUS_PROPERTY_NAMES = [\n  'dangerouslySetInnerHTML',\n];\n\nconst DANGEROUS_PROPERTIES = fromEntries(DANGEROUS_PROPERTY_NAMES.map((prop) => [prop, prop]));\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n/**\n * Checks if a JSX attribute is dangerous.\n * @param {string} name - Name of the attribute to check.\n * @returns {boolean} Whether or not the attribute is dangerous.\n */\nfunction isDangerous(name) {\n  return has(DANGEROUS_PROPERTIES, name);\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  dangerousProp: 'Dangerous property \\'{{name}}\\' found',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of dangerous JSX properties',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-danger'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        customComponentNames: {\n          items: {\n            type: 'string',\n          },\n          minItems: 0,\n          type: 'array',\n          uniqueItems: true,\n        },\n      },\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const customComponentNames = configuration.customComponentNames || [];\n\n    return {\n      JSXAttribute(node) {\n        const nodeName = node.parent.name;\n        const functionName = nodeName.name || `${nodeName.object.name}.${nodeName.property.name}`;\n\n        const enableCheckingCustomComponent = customComponentNames.some((name) => minimatch(functionName, name));\n\n        if ((enableCheckingCustomComponent || jsxUtil.isDOMComponent(node.parent)) && isDangerous(node.name.name)) {\n          report(context, messages.dangerousProp, 'dangerousProp', {\n            node,\n            data: {\n              name: node.name.name,\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}