{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-unsafe.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892275323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of unsafe lifecycle methods\n * @author Sergei Startsev\n */\n\n'use strict';\n\nconst astUtil = require('../util/ast');\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst testReactVersion = require('../util/version').testReactVersion;\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  unsafeMethod: '{{method}} is unsafe for use in async rendering. Update the component to use {{newMethod}} instead. {{details}}',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of unsafe lifecycle methods',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-unsafe'),\n    },\n\n    messages,\n\n    schema: [\n      {\n        type: 'object',\n        properties: {\n          checkAliases: {\n            default: false,\n            type: 'boolean',\n          },\n        },\n        additionalProperties: false,\n      },\n    ],\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const checkAliases = config.checkAliases || false;\n\n    const isApplicable = testReactVersion(context, '>= 16.3.0');\n    if (!isApplicable) {\n      return {};\n    }\n\n    const unsafe = {\n      UNSAFE_componentWillMount: {\n        newMethod: 'componentDidMount',\n        details: 'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.',\n      },\n      UNSAFE_componentWillReceiveProps: {\n        newMethod: 'getDerivedStateFromProps',\n        details: 'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.',\n      },\n      UNSAFE_componentWillUpdate: {\n        newMethod: 'componentDidUpdate',\n        details: 'See https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html.',\n      },\n    };\n    if (checkAliases) {\n      unsafe.componentWillMount = unsafe.UNSAFE_componentWillMount;\n      unsafe.componentWillReceiveProps = unsafe.UNSAFE_componentWillReceiveProps;\n      unsafe.componentWillUpdate = unsafe.UNSAFE_componentWillUpdate;\n    }\n\n    /**\n     * Returns a list of unsafe methods\n     * @returns {Array} A list of unsafe methods\n     */\n    function getUnsafeMethods() {\n      return Object.keys(unsafe);\n    }\n\n    /**\n     * Checks if a passed method is unsafe\n     * @param {string} method Life cycle method\n     * @returns {boolean} Returns true for unsafe methods, otherwise returns false\n     */\n    function isUnsafe(method) {\n      const unsafeMethods = getUnsafeMethods();\n      return unsafeMethods.indexOf(method) !== -1;\n    }\n\n    /**\n     * Reports the error for an unsafe method\n     * @param {ASTNode} node The AST node being checked\n     * @param {string} method Life cycle method\n     */\n    function checkUnsafe(node, method) {\n      if (!isUnsafe(method)) {\n        return;\n      }\n\n      const meta = unsafe[method];\n      const newMethod = meta.newMethod;\n      const details = meta.details;\n\n      const propertyNode = astUtil.getComponentProperties(node)\n        .find((property) => astUtil.getPropertyName(property) === method);\n\n      report(context, messages.unsafeMethod, 'unsafeMethod', {\n        node: propertyNode,\n        data: {\n          method,\n          newMethod,\n          details,\n        },\n      });\n    }\n\n    /**\n     * Returns life cycle methods if available\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {Array} The array of methods.\n     */\n    function getLifeCycleMethods(node) {\n      const properties = astUtil.getComponentProperties(node);\n      return properties.map((property) => astUtil.getPropertyName(property));\n    }\n\n    /**\n     * Checks life cycle methods\n     * @param {ASTNode} node The AST node being checked.\n     */\n    function checkLifeCycleMethods(node) {\n      if (componentUtil.isES5Component(node, context) || componentUtil.isES6Component(node, context)) {\n        const methods = getLifeCycleMethods(node);\n        methods\n          .sort((a, b) => a.localeCompare(b))\n          .forEach((method) => checkUnsafe(node, method));\n      }\n    }\n\n    return {\n      ClassDeclaration: checkLifeCycleMethods,\n      ClassExpression: checkLifeCycleMethods,\n      ObjectExpression: checkLifeCycleMethods,\n    };\n  },\n};\n"
        }
    ]
}