{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-unknown-property.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892275247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent usage of unknown DOM property\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst has = require('hasown');\nconst docsUrl = require('../util/docsUrl');\nconst getText = require('../util/eslint').getText;\nconst testReactVersion = require('../util/version').testReactVersion;\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = {\n  ignore: [],\n  requireDataLowercase: false,\n};\n\nconst DOM_ATTRIBUTE_NAMES = {\n  'accept-charset': 'acceptCharset',\n  class: 'className',\n  'http-equiv': 'httpEquiv',\n  crossorigin: 'crossOrigin',\n  for: 'htmlFor',\n  nomodule: 'noModule',\n};\n\nconst ATTRIBUTE_TAGS_MAP = {\n  abbr: ['th', 'td'],\n  charset: ['meta'],\n  checked: ['input'],\n  // image is required for SVG support, all other tags are HTML.\n  crossOrigin: ['script', 'img', 'video', 'audio', 'link', 'image'],\n  displaystyle: ['math'],\n  // https://html.spec.whatwg.org/multipage/links.html#downloading-resources\n  download: ['a', 'area'],\n  fill: [ // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill\n    // Fill color\n    'altGlyph',\n    'circle',\n    'ellipse',\n    'g',\n    'line',\n    'marker',\n    'mask',\n    'path',\n    'polygon',\n    'polyline',\n    'rect',\n    'svg',\n    'symbol',\n    'text',\n    'textPath',\n    'tref',\n    'tspan',\n    'use',\n    // Animation final state\n    'animate',\n    'animateColor',\n    'animateMotion',\n    'animateTransform',\n    'set',\n  ],\n  focusable: ['svg'],\n  imageSizes: ['link'],\n  imageSrcSet: ['link'],\n  property: ['meta'],\n  viewBox: ['marker', 'pattern', 'svg', 'symbol', 'view'],\n  as: ['link'],\n  align: ['applet', 'caption', 'col', 'colgroup', 'hr', 'iframe', 'img', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr'], // deprecated, but known\n  valign: ['tr', 'td', 'th', 'thead', 'tbody', 'tfoot', 'colgroup', 'col'], // deprecated, but known\n  noModule: ['script'],\n  // Media events allowed only on audio and video tags, see https://github.com/facebook/react/blob/256aefbea1449869620fb26f6ec695536ab453f5/CHANGELOG.md#notable-enhancements\n  onAbort: ['audio', 'video'],\n  onCancel: ['dialog'],\n  onCanPlay: ['audio', 'video'],\n  onCanPlayThrough: ['audio', 'video'],\n  onClose: ['dialog'],\n  onDurationChange: ['audio', 'video'],\n  onEmptied: ['audio', 'video'],\n  onEncrypted: ['audio', 'video'],\n  onEnded: ['audio', 'video'],\n  onError: ['audio', 'video', 'img', 'link', 'source', 'script', 'picture', 'iframe'],\n  onLoad: ['script', 'img', 'link', 'picture', 'iframe', 'object', 'source'],\n  onLoadedData: ['audio', 'video'],\n  onLoadedMetadata: ['audio', 'video'],\n  onLoadStart: ['audio', 'video'],\n  onPause: ['audio', 'video'],\n  onPlay: ['audio', 'video'],\n  onPlaying: ['audio', 'video'],\n  onProgress: ['audio', 'video'],\n  onRateChange: ['audio', 'video'],\n  onResize: ['audio', 'video'],\n  onSeeked: ['audio', 'video'],\n  onSeeking: ['audio', 'video'],\n  onStalled: ['audio', 'video'],\n  onSuspend: ['audio', 'video'],\n  onTimeUpdate: ['audio', 'video'],\n  onVolumeChange: ['audio', 'video'],\n  onWaiting: ['audio', 'video'],\n  autoPictureInPicture: ['video'],\n  controls: ['audio', 'video'],\n  controlsList: ['audio', 'video'],\n  disablePictureInPicture: ['video'],\n  disableRemotePlayback: ['audio', 'video'],\n  loop: ['audio', 'video'],\n  muted: ['audio', 'video'],\n  playsInline: ['video'],\n  allowFullScreen: ['iframe', 'video'],\n  webkitAllowFullScreen: ['iframe', 'video'],\n  mozAllowFullScreen: ['iframe', 'video'],\n  poster: ['video'],\n  preload: ['audio', 'video'],\n  scrolling: ['iframe'],\n  returnValue: ['dialog'],\n  webkitDirectory: ['input'],\n};\n\nconst SVGDOM_ATTRIBUTE_NAMES = {\n  'accent-height': 'accentHeight',\n  'alignment-baseline': 'alignmentBaseline',\n  'arabic-form': 'arabicForm',\n  'baseline-shift': 'baselineShift',\n  'cap-height': 'capHeight',\n  'clip-path': 'clipPath',\n  'clip-rule': 'clipRule',\n  'color-interpolation': 'colorInterpolation',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  'color-profile': 'colorProfile',\n  'color-rendering': 'colorRendering',\n  'dominant-baseline': 'dominantBaseline',\n  'enable-background': 'enableBackground',\n  'fill-opacity': 'fillOpacity',\n  'fill-rule': 'fillRule',\n  'flood-color': 'floodColor',\n  'flood-opacity': 'floodOpacity',\n  'font-family': 'fontFamily',\n  'font-size': 'fontSize',\n  'font-size-adjust': 'fontSizeAdjust',\n  'font-stretch': 'fontStretch',\n  'font-style': 'fontStyle',\n  'font-variant': 'fontVariant',\n  'font-weight': 'fontWeight',\n  'glyph-name': 'glyphName',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  'horiz-adv-x': 'horizAdvX',\n  'horiz-origin-x': 'horizOriginX',\n  'image-rendering': 'imageRendering',\n  'letter-spacing': 'letterSpacing',\n  'lighting-color': 'lightingColor',\n  'marker-end': 'markerEnd',\n  'marker-mid': 'markerMid',\n  'marker-start': 'markerStart',\n  'overline-position': 'overlinePosition',\n  'overline-thickness': 'overlineThickness',\n  'paint-order': 'paintOrder',\n  'panose-1': 'panose1',\n  'pointer-events': 'pointerEvents',\n  'rendering-intent': 'renderingIntent',\n  'shape-rendering': 'shapeRendering',\n  'stop-color': 'stopColor',\n  'stop-opacity': 'stopOpacity',\n  'strikethrough-position': 'strikethroughPosition',\n  'strikethrough-thickness': 'strikethroughThickness',\n  'stroke-dasharray': 'strokeDasharray',\n  'stroke-dashoffset': 'strokeDashoffset',\n  'stroke-linecap': 'strokeLinecap',\n  'stroke-linejoin': 'strokeLinejoin',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  'stroke-opacity': 'strokeOpacity',\n  'stroke-width': 'strokeWidth',\n  'text-anchor': 'textAnchor',\n  'text-decoration': 'textDecoration',\n  'text-rendering': 'textRendering',\n  'underline-position': 'underlinePosition',\n  'underline-thickness': 'underlineThickness',\n  'unicode-bidi': 'unicodeBidi',\n  'unicode-range': 'unicodeRange',\n  'units-per-em': 'unitsPerEm',\n  'v-alphabetic': 'vAlphabetic',\n  'v-hanging': 'vHanging',\n  'v-ideographic': 'vIdeographic',\n  'v-mathematical': 'vMathematical',\n  'vector-effect': 'vectorEffect',\n  'vert-adv-y': 'vertAdvY',\n  'vert-origin-x': 'vertOriginX',\n  'vert-origin-y': 'vertOriginY',\n  'word-spacing': 'wordSpacing',\n  'writing-mode': 'writingMode',\n  'x-height': 'xHeight',\n  'xlink:actuate': 'xlinkActuate',\n  'xlink:arcrole': 'xlinkArcrole',\n  'xlink:href': 'xlinkHref',\n  'xlink:role': 'xlinkRole',\n  'xlink:show': 'xlinkShow',\n  'xlink:title': 'xlinkTitle',\n  'xlink:type': 'xlinkType',\n  'xml:base': 'xmlBase',\n  'xml:lang': 'xmlLang',\n  'xml:space': 'xmlSpace',\n};\n\nconst DOM_PROPERTY_NAMES_ONE_WORD = [\n  // Global attributes - can be used on any HTML/DOM element\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n  'dir', 'draggable', 'hidden', 'id', 'lang', 'nonce', 'part', 'slot', 'style', 'title', 'translate', 'inert',\n  // Element specific attributes\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes (includes global attributes too)\n  // To be considered if these should be added also to ATTRIBUTE_TAGS_MAP\n  'accept', 'action', 'allow', 'alt', 'as', 'async', 'buffered', 'capture', 'challenge', 'cite', 'code', 'cols',\n  'content', 'coords', 'csp', 'data', 'decoding', 'default', 'defer', 'disabled', 'form',\n  'headers', 'height', 'high', 'href', 'icon', 'importance', 'integrity', 'kind', 'label',\n  'language', 'loading', 'list', 'loop', 'low', 'manifest', 'max', 'media', 'method', 'min', 'multiple', 'muted',\n  'name', 'open', 'optimum', 'pattern', 'ping', 'placeholder', 'poster', 'preload', 'profile',\n  'rel', 'required', 'reversed', 'role', 'rows', 'sandbox', 'scope', 'seamless', 'selected', 'shape', 'size', 'sizes',\n  'span', 'src', 'start', 'step', 'summary', 'target', 'type', 'value', 'width', 'wmode', 'wrap',\n  // SVG attributes\n  // See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\n  'accumulate', 'additive', 'alphabetic', 'amplitude', 'ascent', 'azimuth', 'bbox', 'begin',\n  'bias', 'by', 'clip', 'color', 'cursor', 'cx', 'cy', 'd', 'decelerate', 'descent', 'direction',\n  'display', 'divisor', 'dur', 'dx', 'dy', 'elevation', 'end', 'exponent', 'fill', 'filter',\n  'format', 'from', 'fr', 'fx', 'fy', 'g1', 'g2', 'hanging', 'height', 'hreflang', 'ideographic',\n  'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'local', 'mask', 'mode',\n  'offset', 'opacity', 'operator', 'order', 'orient', 'orientation', 'origin', 'overflow', 'path',\n  'ping', 'points', 'r', 'radius', 'rel', 'restart', 'result', 'rotate', 'rx', 'ry', 'scale',\n  'seed', 'slope', 'spacing', 'speed', 'stemh', 'stemv', 'string', 'stroke', 'to', 'transform',\n  'u1', 'u2', 'unicode', 'values', 'version', 'visibility', 'widths', 'x', 'x1', 'x2', 'xmlns',\n  'y', 'y1', 'y2', 'z',\n  // OpenGraph meta tag attributes\n  'property',\n  // React specific attributes\n  'ref', 'key', 'children',\n  // Non-standard\n  'results', 'security',\n  // Video specific\n  'controls',\n  // popovers\n  'popover', 'popovertarget', 'popovertargetaction',\n];\n\nconst DOM_PROPERTY_NAMES_TWO_WORDS = [\n  // Global attributes - can be used on any HTML/DOM element\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n  'accessKey', 'autoCapitalize', 'autoFocus', 'contentEditable', 'enterKeyHint', 'exportParts',\n  'inputMode', 'itemID', 'itemRef', 'itemProp', 'itemScope', 'itemType', 'spellCheck', 'tabIndex',\n  // Element specific attributes\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes (includes global attributes too)\n  // To be considered if these should be added also to ATTRIBUTE_TAGS_MAP\n  'acceptCharset', 'autoComplete', 'autoPlay', 'border', 'cellPadding', 'cellSpacing', 'classID', 'codeBase',\n  'colSpan', 'contextMenu', 'dateTime', 'encType', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget',\n  'frameBorder', 'hrefLang', 'httpEquiv', 'imageSizes', 'imageSrcSet', 'isMap', 'keyParams', 'keyType', 'marginHeight', 'marginWidth',\n  'maxLength', 'mediaGroup', 'minLength', 'noValidate', 'onAnimationEnd', 'onAnimationIteration', 'onAnimationStart',\n  'onBlur', 'onChange', 'onClick', 'onContextMenu', 'onCopy', 'onCompositionEnd', 'onCompositionStart',\n  'onCompositionUpdate', 'onCut', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave',\n  'onError', 'onFocus', 'onInput', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onLoad', 'onWheel', 'onDragOver',\n  'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver',\n  'onMouseUp', 'onPaste', 'onScroll', 'onSelect', 'onSubmit', 'onBeforeToggle', 'onToggle', 'onTransitionEnd', 'radioGroup',\n  'readOnly', 'referrerPolicy', 'rowSpan', 'srcDoc', 'srcLang', 'srcSet', 'useMap', 'fetchPriority',\n  // SVG attributes\n  // See https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\n  'crossOrigin', 'accentHeight', 'alignmentBaseline', 'arabicForm', 'attributeName',\n  'attributeType', 'baseFrequency', 'baselineShift', 'baseProfile', 'calcMode', 'capHeight',\n  'clipPathUnits', 'clipPath', 'clipRule', 'colorInterpolation', 'colorInterpolationFilters',\n  'colorProfile', 'colorRendering', 'contentScriptType', 'contentStyleType', 'diffuseConstant',\n  'dominantBaseline', 'edgeMode', 'enableBackground', 'fillOpacity', 'fillRule', 'filterRes',\n  'filterUnits', 'floodColor', 'floodOpacity', 'fontFamily', 'fontSize', 'fontSizeAdjust',\n  'fontStretch', 'fontStyle', 'fontVariant', 'fontWeight', 'glyphName',\n  'glyphOrientationHorizontal', 'glyphOrientationVertical', 'glyphRef', 'gradientTransform',\n  'gradientUnits', 'horizAdvX', 'horizOriginX', 'imageRendering', 'kernelMatrix',\n  'kernelUnitLength', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust', 'letterSpacing',\n  'lightingColor', 'limitingConeAngle', 'markerEnd', 'markerMid', 'markerStart', 'markerHeight',\n  'markerUnits', 'markerWidth', 'maskContentUnits', 'maskUnits', 'mathematical', 'numOctaves',\n  'overlinePosition', 'overlineThickness', 'panose1', 'paintOrder', 'pathLength',\n  'patternContentUnits', 'patternTransform', 'patternUnits', 'pointerEvents', 'pointsAtX',\n  'pointsAtY', 'pointsAtZ', 'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits',\n  'referrerPolicy', 'refX', 'refY', 'rendering-intent', 'repeatCount', 'repeatDur',\n  'requiredExtensions', 'requiredFeatures', 'shapeRendering', 'specularConstant',\n  'specularExponent', 'spreadMethod', 'startOffset', 'stdDeviation', 'stitchTiles', 'stopColor',\n  'stopOpacity', 'strikethroughPosition', 'strikethroughThickness', 'strokeDasharray',\n  'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity',\n  'strokeWidth', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY',\n  'textAnchor', 'textDecoration', 'textRendering', 'textLength', 'transformOrigin',\n  'underlinePosition', 'underlineThickness', 'unicodeBidi', 'unicodeRange', 'unitsPerEm',\n  'vAlphabetic', 'vHanging', 'vIdeographic', 'vMathematical', 'vectorEffect', 'vertAdvY',\n  'vertOriginX', 'vertOriginY', 'viewBox', 'viewTarget', 'wordSpacing', 'writingMode', 'xHeight',\n  'xChannelSelector', 'xlinkActuate', 'xlinkArcrole', 'xlinkHref', 'xlinkRole', 'xlinkShow',\n  'xlinkTitle', 'xlinkType', 'xmlBase', 'xmlLang', 'xmlnsXlink', 'xmlSpace', 'yChannelSelector',\n  'zoomAndPan',\n  // Safari/Apple specific, no listing available\n  'autoCorrect', // https://stackoverflow.com/questions/47985384/html-autocorrect-for-text-input-is-not-working\n  'autoSave', // https://stackoverflow.com/questions/25456396/what-is-autosave-attribute-supposed-to-do-how-do-i-use-it\n  // React specific attributes https://reactjs.org/docs/dom-elements.html#differences-in-attributes\n  'className', 'dangerouslySetInnerHTML', 'defaultValue', 'defaultChecked', 'htmlFor',\n  // Events' capture events\n  'onBeforeInput', 'onChange',\n  'onInvalid', 'onReset', 'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart', 'suppressContentEditableWarning', 'suppressHydrationWarning',\n  'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded',\n  'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onResize',\n  'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting',\n  'onCopyCapture', 'onCutCapture', 'onPasteCapture', 'onCompositionEndCapture', 'onCompositionStartCapture', 'onCompositionUpdateCapture',\n  'onFocusCapture', 'onBlurCapture', 'onChangeCapture', 'onBeforeInputCapture', 'onInputCapture', 'onResetCapture', 'onSubmitCapture',\n  'onInvalidCapture', 'onLoadCapture', 'onErrorCapture', 'onKeyDownCapture', 'onKeyPressCapture', 'onKeyUpCapture',\n  'onAbortCapture', 'onCanPlayCapture', 'onCanPlayThroughCapture', 'onDurationChangeCapture', 'onEmptiedCapture', 'onEncryptedCapture',\n  'onEndedCapture', 'onLoadedDataCapture', 'onLoadedMetadataCapture', 'onLoadStartCapture', 'onPauseCapture', 'onPlayCapture',\n  'onPlayingCapture', 'onProgressCapture', 'onRateChangeCapture', 'onSeekedCapture', 'onSeekingCapture', 'onStalledCapture', 'onSuspendCapture',\n  'onTimeUpdateCapture', 'onVolumeChangeCapture', 'onWaitingCapture', 'onSelectCapture', 'onTouchCancelCapture', 'onTouchEndCapture',\n  'onTouchMoveCapture', 'onTouchStartCapture', 'onScrollCapture', 'onWheelCapture', 'onAnimationEndCapture', 'onAnimationIteration',\n  'onAnimationStartCapture', 'onTransitionEndCapture',\n  'onAuxClick', 'onAuxClickCapture', 'onClickCapture', 'onContextMenuCapture', 'onDoubleClickCapture',\n  'onDragCapture', 'onDragEndCapture', 'onDragEnterCapture', 'onDragExitCapture', 'onDragLeaveCapture',\n  'onDragOverCapture', 'onDragStartCapture', 'onDropCapture', 'onMouseDown', 'onMouseDownCapture',\n  'onMouseMoveCapture', 'onMouseOutCapture', 'onMouseOverCapture', 'onMouseUpCapture',\n  // Video specific\n  'autoPictureInPicture', 'controlsList', 'disablePictureInPicture', 'disableRemotePlayback',\n  // popovers\n  'popoverTarget', 'popoverTargetAction',\n];\n\nconst DOM_PROPERTIES_IGNORE_CASE = ['charset', 'allowFullScreen', 'webkitAllowFullScreen', 'mozAllowFullScreen', 'webkitDirectory', 'popoverTarget', 'popoverTargetAction'];\n\nconst ARIA_PROPERTIES = [\n  // See https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes\n  // Global attributes\n  'aria-atomic', 'aria-braillelabel', 'aria-brailleroledescription', 'aria-busy', 'aria-controls', 'aria-current',\n  'aria-describedby', 'aria-description', 'aria-details',\n  'aria-disabled', 'aria-dropeffect', 'aria-errormessage', 'aria-flowto', 'aria-grabbed', 'aria-haspopup',\n  'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-live',\n  'aria-owns', 'aria-relevant', 'aria-roledescription',\n  // Widget attributes\n  'aria-autocomplete', 'aria-checked', 'aria-expanded', 'aria-level', 'aria-modal', 'aria-multiline', 'aria-multiselectable',\n  'aria-orientation', 'aria-placeholder', 'aria-pressed', 'aria-readonly', 'aria-required', 'aria-selected',\n  'aria-sort', 'aria-valuemax', 'aria-valuemin', 'aria-valuenow', 'aria-valuetext',\n  // Relationship attributes\n  'aria-activedescendant', 'aria-colcount', 'aria-colindex', 'aria-colindextext', 'aria-colspan',\n  'aria-posinset', 'aria-rowcount', 'aria-rowindex', 'aria-rowindextext', 'aria-rowspan', 'aria-setsize',\n];\n\nconst REACT_ON_PROPS = [\n  'onGotPointerCapture',\n  'onGotPointerCaptureCapture',\n  'onLostPointerCapture',\n  'onLostPointerCapture',\n  'onLostPointerCaptureCapture',\n  'onPointerCancel',\n  'onPointerCancelCapture',\n  'onPointerDown',\n  'onPointerDownCapture',\n  'onPointerEnter',\n  'onPointerEnterCapture',\n  'onPointerLeave',\n  'onPointerLeaveCapture',\n  'onPointerMove',\n  'onPointerMoveCapture',\n  'onPointerOut',\n  'onPointerOutCapture',\n  'onPointerOver',\n  'onPointerOverCapture',\n  'onPointerUp',\n  'onPointerUpCapture',\n];\n\nfunction getDOMPropertyNames(context) {\n  return [].concat(\n    DOM_PROPERTY_NAMES_TWO_WORDS,\n    DOM_PROPERTY_NAMES_ONE_WORD,\n\n    testReactVersion(context, '>= 16.1.0') ? [].concat(\n      testReactVersion(context, '>= 16.4.0') ? [].concat(\n        // these were added in React v16.4.0, see https://reactjs.org/blog/2018/05/23/react-v-16-4.html and https://github.com/facebook/react/pull/12507\n        REACT_ON_PROPS,\n        testReactVersion(context, '>= 19') ? [\n          // precedence was added in React v19, see https://react.dev/blog/2024/04/25/react-19#support-for-stylesheets\n          'precedence',\n        ] : []\n      ) : []\n    ) : [\n      // this was removed in React v16.1+, see https://github.com/facebook/react/pull/10823\n      'allowTransparency',\n    ]\n  );\n}\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n/**\n * Checks if a node's parent is a JSX tag that is written with lowercase letters,\n * and is not a custom web component. Custom web components have a hyphen in tag name,\n * or have an `is=\"some-elem\"` attribute.\n *\n * Note: does not check if a tag's parent against a list of standard HTML/DOM tags. For example,\n * a `<fake>`'s child would return `true` because \"fake\" is written only with lowercase letters\n * without a hyphen and does not have a `is=\"some-elem\"` attribute.\n *\n * @param {Object} childNode - JSX element being tested.\n * @returns {boolean} Whether or not the node name match the JSX tag convention.\n */\nfunction isValidHTMLTagInJSX(childNode) {\n  const tagConvention = /^[a-z][^-]*$/;\n  if (tagConvention.test(childNode.parent.name.name)) {\n    return !childNode.parent.attributes.some((attrNode) => (\n      attrNode.type === 'JSXAttribute'\n        && attrNode.name.type === 'JSXIdentifier'\n        && attrNode.name.name === 'is'\n        // To learn more about custom web components and `is` attribute,\n        // see https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example\n\n    ));\n  }\n  return false;\n}\n\n/**\n * Checks if the attribute name is included in the attributes that are excluded\n * from the camel casing.\n *\n * // returns 'charSet'\n * @example normalizeAttributeCase('charset')\n *\n * Note - these exclusions are not made by React core team, but `eslint-plugin-react` community.\n *\n * @param {string} name - Attribute name to be normalized\n * @returns {string} Result\n */\nfunction normalizeAttributeCase(name) {\n  return DOM_PROPERTIES_IGNORE_CASE.find((element) => element.toLowerCase() === name.toLowerCase()) || name;\n}\n\n/**\n * Checks if an attribute name is a valid `data-*` attribute:\n * if the name starts with \"data-\" and has alphanumeric words (browsers require lowercase, but React and TS lowercase them),\n * not start with any casing of \"xml\", and separated by hyphens (-) (which is also called \"kebab case\" or \"dash case\"),\n * then the attribute is a valid data attribute.\n *\n * @param {string} name - Attribute name to be tested\n * @returns {boolean} Result\n */\nfunction isValidDataAttribute(name) {\n  return !/^data-xml/i.test(name) && /^data-[^:]*$/.test(name);\n}\n\n/**\n * Checks if an attribute name has at least one uppercase characters\n *\n * @param {string} name\n * @returns {boolean} Result\n */\nfunction hasUpperCaseCharacter(name) {\n  return name.toLowerCase() !== name;\n}\n\n/**\n * Checks if an attribute name is a standard aria attribute by compering it to a list\n * of standard aria property names\n *\n * @param {string} name - Attribute name to be tested\n * @returns {boolean} Result\n */\n\nfunction isValidAriaAttribute(name) {\n  return ARIA_PROPERTIES.some((element) => element === name);\n}\n\n/**\n * Extracts the tag name for the JSXAttribute\n * @param {JSXAttribute} node - JSXAttribute being tested.\n * @returns {string | null} tag name\n */\nfunction getTagName(node) {\n  if (\n    node\n    && node.parent\n    && node.parent.name\n  ) {\n    return node.parent.name.name;\n  }\n  return null;\n}\n\n/**\n * Test wether the tag name for the JSXAttribute is\n * something like <Foo.bar />\n * @param {JSXAttribute} node - JSXAttribute being tested.\n * @returns {boolean} result\n */\nfunction tagNameHasDot(node) {\n  return !!(\n    node.parent\n    && node.parent.name\n    && node.parent.name.type === 'JSXMemberExpression'\n  );\n}\n\n/**\n * Get the standard name of the attribute.\n * @param {string} name - Name of the attribute.\n * @param {object} context - eslint context\n * @returns {string | undefined} The standard name of the attribute, or undefined if no standard name was found.\n */\nfunction getStandardName(name, context) {\n  if (has(DOM_ATTRIBUTE_NAMES, name)) {\n    return DOM_ATTRIBUTE_NAMES[/** @type {keyof DOM_ATTRIBUTE_NAMES} */ (name)];\n  }\n  if (has(SVGDOM_ATTRIBUTE_NAMES, name)) {\n    return SVGDOM_ATTRIBUTE_NAMES[/** @type {keyof SVGDOM_ATTRIBUTE_NAMES} */ (name)];\n  }\n  const names = getDOMPropertyNames(context);\n\n  // Let's find a possible attribute match with a case-insensitive search.\n  return names.find((element) => element.toLowerCase() === name.toLowerCase());\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  invalidPropOnTag: 'Invalid property \\'{{name}}\\' found on tag \\'{{tagName}}\\', but it is only allowed on: {{allowedTags}}',\n  unknownPropWithStandardName: 'Unknown property \\'{{name}}\\' found, use \\'{{standardName}}\\' instead',\n  unknownProp: 'Unknown property \\'{{name}}\\' found',\n  dataLowercaseRequired: 'React does not recognize data-* props with uppercase characters on a DOM element. Found \\'{{name}}\\', use \\'{{lowerCaseName}}\\' instead',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow usage of unknown DOM property',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('no-unknown-property'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignore: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        requireDataLowercase: {\n          type: 'boolean',\n          default: false,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    function getIgnoreConfig() {\n      return (context.options[0] && context.options[0].ignore) || DEFAULTS.ignore;\n    }\n\n    function getRequireDataLowercase() {\n      return (context.options[0] && typeof context.options[0].requireDataLowercase !== 'undefined')\n        ? !!context.options[0].requireDataLowercase\n        : DEFAULTS.requireDataLowercase;\n    }\n\n    return {\n      JSXAttribute(node) {\n        const ignoreNames = getIgnoreConfig();\n        const actualName = getText(context, node.name);\n        if (ignoreNames.indexOf(actualName) >= 0) {\n          return;\n        }\n        const name = normalizeAttributeCase(actualName);\n\n        // Ignore tags like <Foo.bar />\n        if (tagNameHasDot(node)) {\n          return;\n        }\n\n        if (isValidDataAttribute(name)) {\n          if (getRequireDataLowercase() && hasUpperCaseCharacter(name)) {\n            report(context, messages.dataLowercaseRequired, 'dataLowercaseRequired', {\n              node,\n              data: {\n                name: actualName,\n                lowerCaseName: actualName.toLowerCase(),\n              },\n            });\n          }\n\n          return;\n        }\n\n        if (isValidAriaAttribute(name)) { return; }\n\n        const tagName = getTagName(node);\n\n        if (tagName === 'fbt' || tagName === 'fbs') { return; } // fbt/fbs nodes are bonkers, let's not go there\n\n        if (!isValidHTMLTagInJSX(node)) { return; }\n\n        // Let's dive deeper into tags that are HTML/DOM elements (`<button>`), and not React components (`<Button />`)\n\n        // Some attributes are allowed on some tags only\n        const allowedTags = has(ATTRIBUTE_TAGS_MAP, name)\n          ? ATTRIBUTE_TAGS_MAP[/** @type {keyof ATTRIBUTE_TAGS_MAP} */ (name)]\n          : null;\n        if (tagName && allowedTags) {\n          // Scenario 1A: Allowed attribute found where not supposed to, report it\n          if (allowedTags.indexOf(tagName) === -1) {\n            report(context, messages.invalidPropOnTag, 'invalidPropOnTag', {\n              node,\n              data: {\n                name: actualName,\n                tagName,\n                allowedTags: allowedTags.join(', '),\n              },\n            });\n          }\n          // Scenario 1B: There are allowed attributes on allowed tags, no need to report it\n          return;\n        }\n\n        // Let's see if the attribute is a close version to some standard property name\n        const standardName = getStandardName(name, context);\n\n        const hasStandardNameButIsNotUsed = standardName && standardName !== name;\n        const usesStandardName = standardName && standardName === name;\n\n        if (usesStandardName) {\n          // Scenario 2A: The attribute name is the standard name, no need to report it\n          return;\n        }\n\n        if (hasStandardNameButIsNotUsed) {\n          // Scenario 2B: The name of the attribute is close to a standard one, report it with the standard name\n          report(context, messages.unknownPropWithStandardName, 'unknownPropWithStandardName', {\n            node,\n            data: {\n              name: actualName,\n              standardName,\n            },\n            fix(fixer) {\n              return fixer.replaceText(node.name, standardName);\n            },\n          });\n          return;\n        }\n\n        // Scenario 3: We have an attribute that is unknown, report it\n        report(context, messages.unknownProp, 'unknownProp', {\n          node,\n          data: {\n            name: actualName,\n          },\n        });\n      },\n    };\n  },\n};\n"
        }
    ]
}