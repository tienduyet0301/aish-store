{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/checked-requires-onchange-or-readonly.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892265866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce the use of the 'onChange' or 'readonly' attribute when 'checked' is used'\n * @author Jaesoekjjang\n */\n\n'use strict';\n\nconst ASTUtils = require('jsx-ast-utils');\nconst flatMap = require('array.prototype.flatmap');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\nconst docsUrl = require('../util/docsUrl');\n\nconst messages = {\n  missingProperty: '`checked` should be used with either `onChange` or `readOnly`.',\n  exclusiveCheckedAttribute: 'Use either `checked` or `defaultChecked`, but not both.',\n};\n\nconst targetPropSet = new Set(['checked', 'onChange', 'readOnly', 'defaultChecked']);\n\nconst defaultOptions = {\n  ignoreMissingProperties: false,\n  ignoreExclusiveCheckedAttribute: false,\n};\n\n/**\n * @param {object[]} properties\n * @param {string} keyName\n * @returns {Set<string>}\n */\nfunction extractTargetProps(properties, keyName) {\n  return new Set(\n    flatMap(\n      properties,\n      (prop) => (\n        prop[keyName] && targetPropSet.has(prop[keyName].name)\n          ? [prop[keyName].name]\n          : []\n      )\n    )\n  );\n}\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce using `onChange` or `readonly` attribute when `checked` is used',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('checked-requires-onchange-or-readonly'),\n    },\n    messages,\n    schema: [{\n      additionalProperties: false,\n      properties: {\n        ignoreMissingProperties: {\n          type: 'boolean',\n        },\n        ignoreExclusiveCheckedAttribute: {\n          type: 'boolean',\n        },\n      },\n    }],\n  },\n  create(context) {\n    const options = Object.assign({}, defaultOptions, context.options[0]);\n\n    function reportMissingProperty(node) {\n      report(\n        context,\n        messages.missingProperty,\n        'missingProperty',\n        { node }\n      );\n    }\n\n    function reportExclusiveCheckedAttribute(node) {\n      report(\n        context,\n        messages.exclusiveCheckedAttribute,\n        'exclusiveCheckedAttribute',\n        { node }\n      );\n    }\n\n    /**\n     * @param {ASTNode} node\n     * @param {Set<string>} propSet\n     * @returns {void}\n     */\n    const checkAttributesAndReport = (node, propSet) => {\n      if (!propSet.has('checked')) {\n        return;\n      }\n\n      if (!options.ignoreExclusiveCheckedAttribute && propSet.has('defaultChecked')) {\n        reportExclusiveCheckedAttribute(node);\n      }\n\n      if (\n        !options.ignoreMissingProperties\n        && !(propSet.has('onChange') || propSet.has('readOnly'))\n      ) {\n        reportMissingProperty(node);\n      }\n    };\n\n    return {\n      JSXOpeningElement(node) {\n        if (ASTUtils.elementType(node) !== 'input') {\n          return;\n        }\n\n        const propSet = extractTargetProps(node.attributes, 'name');\n        checkAttributesAndReport(node, propSet);\n      },\n      CallExpression(node) {\n        if (!isCreateElement(context, node)) {\n          return;\n        }\n\n        const firstArg = node.arguments[0];\n        const secondArg = node.arguments[1];\n        if (\n          !firstArg\n          || firstArg.type !== 'Literal'\n          || firstArg.value !== 'input'\n        ) {\n          return;\n        }\n\n        if (!secondArg || secondArg.type !== 'ObjectExpression') {\n          return;\n        }\n\n        const propSet = extractTargetProps(secondArg.properties, 'key');\n        checkAttributesAndReport(node, propSet);\n      },\n    };\n  },\n};\n"
        }
    ]
}