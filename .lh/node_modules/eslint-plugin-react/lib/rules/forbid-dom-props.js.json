{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/forbid-dom-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892266565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Forbid certain props on DOM Nodes\n * @author David VÃ¡zquez\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst DEFAULTS = [];\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n/**\n * @param {Map<string, object>} forbidMap // { disallowList: null | string[], message: null | string }\n * @param {string} prop\n * @param {string} tagName\n * @returns {boolean}\n */\nfunction isForbidden(forbidMap, prop, tagName) {\n  const options = forbidMap.get(prop);\n  return options && (\n    typeof tagName === 'undefined'\n    || !options.disallowList\n    || options.disallowList.indexOf(tagName) !== -1\n  );\n}\n\nconst messages = {\n  propIsForbidden: 'Prop \"{{prop}}\" is forbidden on DOM Nodes',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow certain props on DOM Nodes',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('forbid-dom-props'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            anyOf: [{\n              type: 'string',\n            }, {\n              type: 'object',\n              properties: {\n                propName: {\n                  type: 'string',\n                },\n                disallowedFor: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string',\n                  },\n                },\n                message: {\n                  type: 'string',\n                },\n              },\n            }],\n            minLength: 1,\n          },\n          uniqueItems: true,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const forbid = new Map((configuration.forbid || DEFAULTS).map((value) => {\n      const propName = typeof value === 'string' ? value : value.propName;\n      return [propName, {\n        disallowList: typeof value === 'string' ? null : (value.disallowedFor || null),\n        message: typeof value === 'string' ? null : value.message,\n      }];\n    }));\n\n    return {\n      JSXAttribute(node) {\n        const tag = node.parent.name.name;\n        if (!(tag && typeof tag === 'string' && tag[0] !== tag[0].toUpperCase())) {\n          // This is a Component, not a DOM node, so exit.\n          return;\n        }\n\n        const prop = node.name.name;\n\n        if (!isForbidden(forbid, prop, tag)) {\n          return;\n        }\n\n        const customMessage = forbid.get(prop).message;\n\n        report(context, customMessage || messages.propIsForbidden, !customMessage && 'propIsForbidden', {\n          node,\n          data: {\n            prop,\n          },\n        });\n      },\n    };\n  },\n};\n"
        }
    ]
}