{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-boolean-value.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892268074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce boolean attributes notation in JSX\n * @author Yannick Croissant\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst exceptionsSchema = {\n  type: 'array',\n  items: { type: 'string', minLength: 1 },\n  uniqueItems: true,\n};\n\nconst ALWAYS = 'always';\nconst NEVER = 'never';\n\n/**\n * @param {string} configuration\n * @param {Set<string>} exceptions\n * @param {string} propName\n * @returns {boolean} propName\n */\nfunction isAlways(configuration, exceptions, propName) {\n  const isException = exceptions.has(propName);\n  if (configuration === ALWAYS) {\n    return !isException;\n  }\n  return isException;\n}\n/**\n * @param {string} configuration\n * @param {Set<string>} exceptions\n * @param {string} propName\n * @returns {boolean} propName\n */\nfunction isNever(configuration, exceptions, propName) {\n  const isException = exceptions.has(propName);\n  if (configuration === NEVER) {\n    return !isException;\n  }\n  return isException;\n}\n\nconst messages = {\n  omitBoolean: 'Value must be omitted for boolean attribute `{{propName}}`',\n  setBoolean: 'Value must be set for boolean attribute `{{propName}}`',\n  omitPropAndBoolean: 'Value must be omitted for `false` attribute: `{{propName}}`',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce boolean attributes notation in JSX',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-boolean-value'),\n    },\n    fixable: 'code',\n\n    messages,\n\n    schema: {\n      anyOf: [{\n        type: 'array',\n        items: [{ enum: [ALWAYS, NEVER] }],\n        additionalItems: false,\n      }, {\n        type: 'array',\n        items: [{\n          enum: [ALWAYS],\n        }, {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            [NEVER]: exceptionsSchema,\n            assumeUndefinedIsFalse: {\n              type: 'boolean',\n            },\n          },\n        }],\n        additionalItems: false,\n      }, {\n        type: 'array',\n        items: [{\n          enum: [NEVER],\n        }, {\n          type: 'object',\n          additionalProperties: false,\n          properties: {\n            [ALWAYS]: exceptionsSchema,\n            assumeUndefinedIsFalse: {\n              type: 'boolean',\n            },\n          },\n        }],\n        additionalItems: false,\n      }],\n    },\n  },\n\n  create(context) {\n    const configuration = context.options[0] || NEVER;\n    const configObject = context.options[1] || {};\n    const exceptions = new Set((configuration === ALWAYS ? configObject[NEVER] : configObject[ALWAYS]) || []);\n\n    return {\n      JSXAttribute(node) {\n        const propName = node.name && node.name.name;\n        const value = node.value;\n\n        if (\n          isAlways(configuration, exceptions, propName)\n          && value === null\n        ) {\n          const messageId = 'setBoolean';\n          const data = { propName };\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n            fix(fixer) {\n              return fixer.insertTextAfter(node, '={true}');\n            },\n          });\n        }\n        if (\n          isNever(configuration, exceptions, propName)\n          && value\n          && value.type === 'JSXExpressionContainer'\n          && value.expression.value === true\n        ) {\n          const messageId = 'omitBoolean';\n          const data = { propName };\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n            fix(fixer) {\n              return fixer.removeRange([node.name.range[1], value.range[1]]);\n            },\n          });\n        }\n        if (\n          isNever(configuration, exceptions, propName)\n          && configObject.assumeUndefinedIsFalse\n          && value\n          && value.type === 'JSXExpressionContainer'\n          && value.expression.value === false\n        ) {\n          const messageId = 'omitPropAndBoolean';\n          const data = { propName };\n          report(context, messages[messageId], messageId, {\n            node,\n            data,\n            fix(fixer) {\n              return fixer.removeRange([node.name.range[0], value.range[1]]);\n            },\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}