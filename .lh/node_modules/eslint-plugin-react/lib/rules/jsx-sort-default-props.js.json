{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-sort-default-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892272310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce default props alphabetical sorting\n * @author Vladimir Kattsov\n * @deprecated\n */\n\n'use strict';\n\nconst variableUtil = require('../util/variable');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\nconst log = require('../util/log');\nconst eslintUtil = require('../util/eslint');\n\nconst getFirstTokens = eslintUtil.getFirstTokens;\nconst getText = eslintUtil.getText;\n\nlet isWarnedForDeprecation = false;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  propsNotSorted: 'Default prop types declarations should be sorted alphabetically',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: ['sort-default-props'],\n    docs: {\n      description: 'Enforce defaultProps declarations alphabetical sorting',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-sort-default-props'),\n    },\n    // fixable: 'code',\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        ignoreCase: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreCase = configuration.ignoreCase || false;\n\n    /**\n     * Get properties name\n     * @param {Object} node - Property.\n     * @returns {string} Property name.\n     */\n    function getPropertyName(node) {\n      if (node.key || ['MethodDefinition', 'Property'].indexOf(node.type) !== -1) {\n        return node.key.name;\n      }\n      if (node.type === 'MemberExpression') {\n        return node.property.name;\n      // Special case for class properties\n      // (babel-eslint@5 does not expose property name so we have to rely on tokens)\n      }\n      if (node.type === 'ClassProperty') {\n        const tokens = getFirstTokens(context, node, 2);\n        return tokens[1] && tokens[1].type === 'Identifier' ? tokens[1].value : tokens[0].value;\n      }\n      return '';\n    }\n\n    /**\n     * Checks if the Identifier node passed in looks like a defaultProps declaration.\n     * @param   {ASTNode}  node The node to check. Must be an Identifier node.\n     * @returns {boolean}       `true` if the node is a defaultProps declaration, `false` if not\n     */\n    function isDefaultPropsDeclaration(node) {\n      const propName = getPropertyName(node);\n      return (propName === 'defaultProps' || propName === 'getDefaultProps');\n    }\n\n    function getKey(node) {\n      return getText(context, node.key || node.argument);\n    }\n\n    /**\n     * Find a variable by name in the current scope.\n     * @param  {ASTNode} node The node to look for.\n     * @param  {string} name Name of the variable to look for.\n     * @returns {ASTNode|null} Return null if the variable could not be found, ASTNode otherwise.\n     */\n    function findVariableByName(node, name) {\n      const variable = variableUtil\n        .getVariableFromContext(context, node, name);\n\n      if (!variable || !variable.defs[0] || !variable.defs[0].node) {\n        return null;\n      }\n\n      if (variable.defs[0].node.type === 'TypeAlias') {\n        return variable.defs[0].node.right;\n      }\n\n      return variable.defs[0].node.init;\n    }\n\n    /**\n     * Checks if defaultProps declarations are sorted\n     * @param {Array} declarations The array of AST nodes being checked.\n     * @returns {void}\n     */\n    function checkSorted(declarations) {\n      // function fix(fixer) {\n      //   return propTypesSortUtil.fixPropTypesSort(context, fixer, declarations, ignoreCase);\n      // }\n\n      declarations.reduce((prev, curr, idx, decls) => {\n        if (/Spread(?:Property|Element)$/.test(curr.type)) {\n          return decls[idx + 1];\n        }\n\n        let prevPropName = getKey(prev);\n        let currentPropName = getKey(curr);\n\n        if (ignoreCase) {\n          prevPropName = prevPropName.toLowerCase();\n          currentPropName = currentPropName.toLowerCase();\n        }\n\n        if (currentPropName < prevPropName) {\n          report(context, messages.propsNotSorted, 'propsNotSorted', {\n            node: curr,\n            // fix\n          });\n\n          return prev;\n        }\n\n        return curr;\n      }, declarations[0]);\n    }\n\n    function checkNode(node) {\n      if (!node) {\n        return;\n      }\n      if (node.type === 'ObjectExpression') {\n        checkSorted(node.properties);\n      } else if (node.type === 'Identifier') {\n        const propTypesObject = findVariableByName(node, node.name);\n        if (propTypesObject && propTypesObject.properties) {\n          checkSorted(propTypesObject.properties);\n        }\n      }\n    }\n\n    // --------------------------------------------------------------------------\n    // Public API\n    // --------------------------------------------------------------------------\n\n    return {\n      'ClassProperty, PropertyDefinition'(node) {\n        if (!isDefaultPropsDeclaration(node)) {\n          return;\n        }\n\n        checkNode(node.value);\n      },\n\n      MemberExpression(node) {\n        if (!isDefaultPropsDeclaration(node)) {\n          return;\n        }\n\n        checkNode('right' in node.parent && node.parent.right);\n      },\n\n      Program() {\n        if (isWarnedForDeprecation) {\n          return;\n        }\n\n        log('The react/jsx-sort-default-props rule is deprecated. It has been renamed to `react/sort-default-props`.');\n        isWarnedForDeprecation = true;\n      },\n    };\n  },\n};\n"
        }
    ]
}