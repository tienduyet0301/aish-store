{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-no-comment-textnodes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892271153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Comments inside children section of tag should be placed inside braces.\n * @author Ben Vinegar\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst getText = require('../util/eslint').getText;\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  putCommentInBraces: 'Comments inside children section of tag should be placed inside braces',\n};\n\n/**\n * @param {Context} context\n * @param {ASTNode} node\n * @returns {void}\n */\nfunction checkText(context, node) {\n  // since babel-eslint has the wrong node.raw, we'll get the source text\n  const rawValue = getText(context, node);\n  if (/^\\s*\\/(\\/|\\*)/m.test(rawValue)) {\n    // inside component, e.g. <div>literal</div>\n    if (\n      node.parent.type !== 'JSXAttribute'\n      && node.parent.type !== 'JSXExpressionContainer'\n      && node.parent.type.indexOf('JSX') !== -1\n    ) {\n      report(context, messages.putCommentInBraces, 'putCommentInBraces', {\n        node,\n      });\n    }\n  }\n}\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow comments from being inserted as text nodes',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('jsx-no-comment-textnodes'),\n    },\n\n    messages,\n\n    schema: [],\n  },\n\n  create(context) {\n    // --------------------------------------------------------------------------\n    // Public\n    // --------------------------------------------------------------------------\n\n    return {\n      Literal(node) {\n        checkText(context, node);\n      },\n      JSXText(node) {\n        checkText(context, node);\n      },\n    };\n  },\n};\n"
        }
    ]
}