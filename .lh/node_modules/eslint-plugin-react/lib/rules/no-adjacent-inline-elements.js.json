{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-adjacent-inline-elements.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892273177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent adjacent inline elements not separated by whitespace.\n * @author Sean Hayes\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst isCreateElement = require('../util/isCreateElement');\nconst report = require('../util/report');\nconst astUtil = require('../util/ast');\n\n// ------------------------------------------------------------------------------\n// Helpers\n// ------------------------------------------------------------------------------\n\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements\nconst inlineNames = [\n  'a',\n  'b',\n  'big',\n  'i',\n  'small',\n  'tt',\n  'abbr',\n  'acronym',\n  'cite',\n  'code',\n  'dfn',\n  'em',\n  'kbd',\n  'strong',\n  'samp',\n  'time',\n  'var',\n  'bdo',\n  'br',\n  'img',\n  'map',\n  'object',\n  'q',\n  'script',\n  'span',\n  'sub',\n  'sup',\n  'button',\n  'input',\n  'label',\n  'select',\n  'textarea',\n];\n// Note: raw &nbsp; will be transformed into \\u00a0.\nconst whitespaceRegex = /(?:^\\s|\\s$)/;\n\nfunction isInline(node) {\n  if (node.type === 'Literal') {\n    // Regular whitespace will be removed.\n    const value = node.value;\n    // To properly separate inline elements, each end of the literal will need\n    // whitespace.\n    return !whitespaceRegex.test(value);\n  }\n  if (node.type === 'JSXElement' && inlineNames.indexOf(node.openingElement.name.name) > -1) {\n    return true;\n  }\n  if (astUtil.isCallExpression(node) && inlineNames.indexOf(node.arguments[0].value) > -1) {\n    return true;\n  }\n  return false;\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  inlineElement: 'Child elements which render as inline HTML elements should be separated by a space or wrapped in block level elements.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow adjacent inline elements not separated by whitespace.',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('no-adjacent-inline-elements'),\n    },\n    schema: [],\n\n    messages,\n  },\n  create(context) {\n    function validate(node, children) {\n      let currentIsInline = false;\n      let previousIsInline = false;\n      if (!children) {\n        return;\n      }\n      for (let i = 0; i < children.length; i++) {\n        currentIsInline = isInline(children[i]);\n        if (previousIsInline && currentIsInline) {\n          report(context, messages.inlineElement, 'inlineElement', {\n            node,\n          });\n          return;\n        }\n        previousIsInline = currentIsInline;\n      }\n    }\n    return {\n      JSXElement(node) {\n        validate(node, node.children);\n      },\n      CallExpression(node) {\n        if (!isCreateElement(context, node)) {\n          return;\n        }\n        if (node.arguments.length < 2 || !node.arguments[2]) {\n          return;\n        }\n        const children = 'elements' in node.arguments[2] ? node.arguments[2].elements : undefined;\n        validate(node, children);\n      },\n    };\n  },\n};\n"
        }
    ]
}