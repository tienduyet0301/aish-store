{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-props-no-spreading.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892272242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent JSX prop spreading\n * @author Ashish Gambhir\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\n\n// ------------------------------------------------------------------------------\n// Constants\n// ------------------------------------------------------------------------------\n\nconst OPTIONS = { ignore: 'ignore', enforce: 'enforce' };\nconst DEFAULTS = {\n  html: OPTIONS.enforce,\n  custom: OPTIONS.enforce,\n  explicitSpread: OPTIONS.enforce,\n  exceptions: [],\n};\n\nconst isException = (tag, allExceptions) => allExceptions.indexOf(tag) !== -1;\nconst isProperty = (property) => property.type === 'Property';\nconst getTagNameFromMemberExpression = (node) => {\n  if (node.property.parent) {\n    return `${node.property.parent.object.name}.${node.property.name}`;\n  }\n  // for eslint 3\n  return `${node.object.name}.${node.property.name}`;\n};\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  noSpreading: 'Prop spreading is forbidden',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow JSX prop spreading',\n      category: 'Best Practices',\n      recommended: false,\n      url: docsUrl('jsx-props-no-spreading'),\n    },\n\n    messages,\n\n    schema: [{\n      allOf: [{\n        type: 'object',\n        properties: {\n          html: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore],\n          },\n          custom: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore],\n          },\n          explicitSpread: {\n            enum: [OPTIONS.enforce, OPTIONS.ignore],\n          },\n          exceptions: {\n            type: 'array',\n            items: {\n              type: 'string',\n              uniqueItems: true,\n            },\n          },\n        },\n      }, {\n        not: {\n          type: 'object',\n          required: ['html', 'custom'],\n          properties: {\n            html: {\n              enum: [OPTIONS.ignore],\n            },\n            custom: {\n              enum: [OPTIONS.ignore],\n            },\n            exceptions: {\n              type: 'array',\n              minItems: 0,\n              maxItems: 0,\n            },\n          },\n        },\n      }],\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const ignoreHtmlTags = (configuration.html || DEFAULTS.html) === OPTIONS.ignore;\n    const ignoreCustomTags = (configuration.custom || DEFAULTS.custom) === OPTIONS.ignore;\n    const ignoreExplicitSpread = (configuration.explicitSpread || DEFAULTS.explicitSpread) === OPTIONS.ignore;\n    const exceptions = configuration.exceptions || DEFAULTS.exceptions;\n    return {\n      JSXSpreadAttribute(node) {\n        const jsxOpeningElement = node.parent.name;\n        const type = jsxOpeningElement.type;\n\n        let tagName;\n        if (type === 'JSXIdentifier') {\n          tagName = jsxOpeningElement.name;\n        } else if (type === 'JSXMemberExpression') {\n          tagName = getTagNameFromMemberExpression(jsxOpeningElement);\n        } else {\n          tagName = undefined;\n        }\n\n        const isHTMLTag = tagName && tagName[0] !== tagName[0].toUpperCase();\n        const isCustomTag = tagName && (tagName[0] === tagName[0].toUpperCase() || tagName.includes('.'));\n        if (\n          isHTMLTag\n          && ((ignoreHtmlTags && !isException(tagName, exceptions))\n          || (!ignoreHtmlTags && isException(tagName, exceptions)))\n        ) {\n          return;\n        }\n        if (\n          isCustomTag\n          && ((ignoreCustomTags && !isException(tagName, exceptions))\n          || (!ignoreCustomTags && isException(tagName, exceptions)))\n        ) {\n          return;\n        }\n        if (\n          ignoreExplicitSpread\n          && node.argument.type === 'ObjectExpression'\n          && node.argument.properties.every(isProperty)\n        ) {\n          return;\n        }\n        report(context, messages.noSpreading, 'noSpreading', {\n          node,\n        });\n      },\n    };\n  },\n};\n"
        }
    ]
}