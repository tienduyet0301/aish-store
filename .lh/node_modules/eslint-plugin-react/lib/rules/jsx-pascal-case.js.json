{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/jsx-pascal-case.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892272053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Enforce PascalCase for user-defined JSX components\n * @author Jake Marsh\n */\n\n'use strict';\n\nconst elementType = require('jsx-ast-utils/elementType');\nconst minimatch = require('minimatch');\nconst docsUrl = require('../util/docsUrl');\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\n\nfunction testDigit(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 48 && charCode <= 57;\n}\n\nfunction testUpperCase(char) {\n  const upperCase = char.toUpperCase();\n  return char === upperCase && upperCase !== char.toLowerCase();\n}\n\nfunction testLowerCase(char) {\n  const lowerCase = char.toLowerCase();\n  return char === lowerCase && lowerCase !== char.toUpperCase();\n}\n\nfunction testPascalCase(name) {\n  if (!testUpperCase(name.charAt(0))) {\n    return false;\n  }\n  const anyNonAlphaNumeric = Array.prototype.some.call(\n    name.slice(1),\n    (char) => char.toLowerCase() === char.toUpperCase() && !testDigit(char)\n  );\n  if (anyNonAlphaNumeric) {\n    return false;\n  }\n  return Array.prototype.some.call(\n    name.slice(1),\n    (char) => testLowerCase(char) || testDigit(char)\n  );\n}\n\nfunction testAllCaps(name) {\n  const firstChar = name.charAt(0);\n  if (!(testUpperCase(firstChar) || testDigit(firstChar))) {\n    return false;\n  }\n  for (let i = 1; i < name.length - 1; i += 1) {\n    const char = name.charAt(i);\n    if (!(testUpperCase(char) || testDigit(char) || char === '_')) {\n      return false;\n    }\n  }\n  const lastChar = name.charAt(name.length - 1);\n  if (!(testUpperCase(lastChar) || testDigit(lastChar))) {\n    return false;\n  }\n  return true;\n}\n\nfunction ignoreCheck(ignore, name) {\n  return ignore.some(\n    (entry) => name === entry || minimatch(name, entry, { noglobstar: true })\n  );\n}\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  usePascalCase: 'Imported JSX component {{name}} must be in PascalCase',\n  usePascalOrSnakeCase: 'Imported JSX component {{name}} must be in PascalCase or SCREAMING_SNAKE_CASE',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Enforce PascalCase for user-defined JSX components',\n      category: 'Stylistic Issues',\n      recommended: false,\n      url: docsUrl('jsx-pascal-case'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        allowAllCaps: {\n          type: 'boolean',\n        },\n        allowLeadingUnderscore: {\n          type: 'boolean',\n        },\n        allowNamespace: {\n          type: 'boolean',\n        },\n        ignore: {\n          items: [\n            {\n              type: 'string',\n            },\n          ],\n          minItems: 0,\n          type: 'array',\n          uniqueItems: true,\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const configuration = context.options[0] || {};\n    const allowAllCaps = configuration.allowAllCaps || false;\n    const allowLeadingUnderscore = configuration.allowLeadingUnderscore || false;\n    const allowNamespace = configuration.allowNamespace || false;\n    const ignore = configuration.ignore || [];\n\n    return {\n      JSXOpeningElement(node) {\n        const isCompatTag = jsxUtil.isDOMComponent(node);\n        if (isCompatTag) return undefined;\n\n        const name = elementType(node);\n        let checkNames = [name];\n        let index = 0;\n\n        if (name.lastIndexOf(':') > -1) {\n          checkNames = name.split(':');\n        } else if (name.lastIndexOf('.') > -1) {\n          checkNames = name.split('.');\n        }\n\n        do {\n          const splitName = checkNames[index];\n          if (splitName.length === 1) return undefined;\n          const isIgnored = ignoreCheck(ignore, splitName);\n\n          const checkName = allowLeadingUnderscore && splitName.startsWith('_') ? splitName.slice(1) : splitName;\n          const isPascalCase = testPascalCase(checkName);\n          const isAllowedAllCaps = allowAllCaps && testAllCaps(checkName);\n\n          if (!isPascalCase && !isAllowedAllCaps && !isIgnored) {\n            const messageId = allowAllCaps ? 'usePascalOrSnakeCase' : 'usePascalCase';\n            report(context, messages[messageId], messageId, {\n              node,\n              data: {\n                name: splitName,\n              },\n            });\n            break;\n          }\n          index += 1;\n        } while (index < checkNames.length && !allowNamespace);\n      },\n    };\n  },\n};\n"
        }
    ]
}