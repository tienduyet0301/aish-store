{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-unescaped-entities.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892275181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview HTML special characters should be escaped.\n * @author Patrick Hayes\n */\n\n'use strict';\n\nconst docsUrl = require('../util/docsUrl');\nconst getSourceCode = require('../util/eslint').getSourceCode;\nconst jsxUtil = require('../util/jsx');\nconst report = require('../util/report');\nconst getMessageData = require('../util/message');\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\n// NOTE: '<' and '{' are also problematic characters, but they do not need\n// to be included here because it is a syntax error when these characters are\n// included accidentally.\nconst DEFAULTS = [{\n  char: '>',\n  alternatives: ['&gt;'],\n}, {\n  char: '\"',\n  alternatives: ['&quot;', '&ldquo;', '&#34;', '&rdquo;'],\n}, {\n  char: '\\'',\n  alternatives: ['&apos;', '&lsquo;', '&#39;', '&rsquo;'],\n}, {\n  char: '}',\n  alternatives: ['&#125;'],\n}];\n\nconst messages = {\n  unescapedEntity: 'HTML entity, `{{entity}}` , must be escaped.',\n  unescapedEntityAlts: '`{{entity}}` can be escaped with {{alts}}.',\n  replaceWithAlt: 'Replace with `{{alt}}`.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    hasSuggestions: true,\n    docs: {\n      description: 'Disallow unescaped HTML entities from appearing in markup',\n      category: 'Possible Errors',\n      recommended: true,\n      url: docsUrl('no-unescaped-entities'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        forbid: {\n          type: 'array',\n          items: {\n            anyOf: [{\n              type: 'string',\n            }, {\n              type: 'object',\n              properties: {\n                char: {\n                  type: 'string',\n                },\n                alternatives: {\n                  type: 'array',\n                  uniqueItems: true,\n                  items: {\n                    type: 'string',\n                  },\n                },\n              },\n            }],\n          },\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    function reportInvalidEntity(node) {\n      const configuration = context.options[0] || {};\n      const entities = configuration.forbid || DEFAULTS;\n\n      // HTML entities are already escaped in node.value (as well as node.raw),\n      // so pull the raw text from getSourceCode(context)\n      for (let i = node.loc.start.line; i <= node.loc.end.line; i++) {\n        let rawLine = getSourceCode(context).lines[i - 1];\n        let start = 0;\n        let end = rawLine.length;\n        if (i === node.loc.start.line) {\n          start = node.loc.start.column;\n        }\n        if (i === node.loc.end.line) {\n          end = node.loc.end.column;\n        }\n        rawLine = rawLine.slice(start, end);\n        for (let j = 0; j < entities.length; j++) {\n          for (let index = 0; index < rawLine.length; index++) {\n            const c = rawLine[index];\n            if (typeof entities[j] === 'string') {\n              if (c === entities[j]) {\n                report(context, messages.unescapedEntity, 'unescapedEntity', {\n                  node,\n                  loc: { line: i, column: start + index },\n                  data: {\n                    entity: entities[j],\n                  },\n                });\n              }\n            } else if (c === entities[j].char) {\n              report(context, messages.unescapedEntityAlts, 'unescapedEntityAlts', {\n                node,\n                loc: { line: i, column: start + index },\n                data: {\n                  entity: entities[j].char,\n                  alts: entities[j].alternatives.map((alt) => `\\`${alt}\\``).join(', '),\n                },\n                suggest: entities[j].alternatives.map((alt) => Object.assign(\n                  getMessageData('replaceWithAlt', messages.replaceWithAlt),\n                  {\n                    data: { alt },\n                    fix(fixer) {\n                      const lineToChange = i - node.loc.start.line;\n\n                      const newText = node.raw.split('\\n').map((line, idx) => {\n                        if (idx === lineToChange) {\n                          return line.slice(0, index) + alt + line.slice(index + 1);\n                        }\n\n                        return line;\n                      }).join('\\n');\n\n                      return fixer.replaceText(node, newText);\n                    },\n                  }\n                )),\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      'Literal, JSXText'(node) {\n        if (jsxUtil.isJSX(node.parent)) {\n          reportInvalidEntity(node);\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}