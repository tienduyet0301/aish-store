{
    "sourceFile": "node_modules/eslint-plugin-react/lib/rules/no-string-refs.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892274941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prevent string definitions for references and prevent referencing this.refs\n * @author Tom Hastjarjanto\n */\n\n'use strict';\n\nconst componentUtil = require('../util/componentUtil');\nconst docsUrl = require('../util/docsUrl');\nconst report = require('../util/report');\nconst testReactVersion = require('../util/version').testReactVersion;\n\n// ------------------------------------------------------------------------------\n// Rule Definition\n// ------------------------------------------------------------------------------\n\nconst messages = {\n  thisRefsDeprecated: 'Using this.refs is deprecated.',\n  stringInRefDeprecated: 'Using string literals in ref attributes is deprecated.',\n};\n\n/** @type {import('eslint').Rule.RuleModule} */\nmodule.exports = {\n  meta: {\n    docs: {\n      description: 'Disallow using string references',\n      category: 'Best Practices',\n      recommended: true,\n      url: docsUrl('no-string-refs'),\n    },\n\n    messages,\n\n    schema: [{\n      type: 'object',\n      properties: {\n        noTemplateLiterals: {\n          type: 'boolean',\n        },\n      },\n      additionalProperties: false,\n    }],\n  },\n\n  create(context) {\n    const checkRefsUsage = testReactVersion(context, '< 18.3.0'); // `this.refs` is writable in React 18.3.0 and later, see https://github.com/facebook/react/pull/28867\n    const detectTemplateLiterals = context.options[0] ? context.options[0].noTemplateLiterals : false;\n    /**\n     * Checks if we are using refs\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {boolean} True if we are using refs, false if not.\n     */\n    function isRefsUsage(node) {\n      return !!(\n        (componentUtil.getParentES6Component(context, node) || componentUtil.getParentES5Component(context, node))\n        && node.object.type === 'ThisExpression'\n        && node.property.name === 'refs'\n      );\n    }\n\n    /**\n     * Checks if we are using a ref attribute\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {boolean} True if we are using a ref attribute, false if not.\n     */\n    function isRefAttribute(node) {\n      return node.type === 'JSXAttribute'\n        && !!node.name\n        && node.name.name === 'ref';\n    }\n\n    /**\n     * Checks if a node contains a string value\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {boolean} True if the node contains a string value, false if not.\n     */\n    function containsStringLiteral(node) {\n      return !!node.value\n        && node.value.type === 'Literal'\n        && typeof node.value.value === 'string';\n    }\n\n    /**\n     * Checks if a node contains a string value within a jsx expression\n     * @param {ASTNode} node The AST node being checked.\n     * @returns {boolean} True if the node contains a string value within a jsx expression, false if not.\n     */\n    function containsStringExpressionContainer(node) {\n      return !!node.value\n        && node.value.type === 'JSXExpressionContainer'\n        && node.value.expression\n        && ((node.value.expression.type === 'Literal' && typeof node.value.expression.value === 'string')\n        || (node.value.expression.type === 'TemplateLiteral' && detectTemplateLiterals));\n    }\n\n    return {\n      MemberExpression(node) {\n        if (checkRefsUsage && isRefsUsage(node)) {\n          report(context, messages.thisRefsDeprecated, 'thisRefsDeprecated', {\n            node,\n          });\n        }\n      },\n\n      JSXAttribute(node) {\n        if (\n          isRefAttribute(node)\n          && (containsStringLiteral(node) || containsStringExpressionContainer(node))\n        ) {\n          report(context, messages.stringInRefDeprecated, 'stringInRefDeprecated', {\n            node,\n          });\n        }\n      },\n    };\n  },\n};\n"
        }
    ]
}