{
    "sourceFile": "node_modules/own-keys/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892953072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar hasSymbols = require('has-symbols/shams')();\nvar hasPropertyDescriptors = require('has-property-descriptors')();\n\nvar ownKeys = require('../');\n\n/** @type {(a: PropertyKey, b: PropertyKey) => number} */\nfunction comparator(a, b) {\n\tif (typeof a === 'string' && typeof b === 'string') {\n\t\treturn a.localeCompare(b);\n\t}\n\tif (typeof a === 'number' && typeof b === 'number') {\n\t\treturn a - b;\n\t}\n\treturn typeof a === 'symbol' ? 1 : -1;\n}\n\ntest('ownKeys', function (t) {\n\tt.equal(typeof ownKeys, 'function', 'is a function');\n\tt.equal(\n\t\townKeys.length,\n\t\t1,\n\t\t'has a length of 1'\n\t);\n\n\tt.test('basics', function (st) {\n\t\tvar obj = { a: 1, b: 2 };\n\t\tif (hasPropertyDescriptors) {\n\t\t\tObject.defineProperty(obj, 'c', {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\twritable: true,\n\t\t\t\tvalue: 3\n\t\t\t});\n\t\t}\n\n\t\tst.deepEqual(\n\t\t\townKeys(obj).sort(comparator),\n\t\t\t(hasPropertyDescriptors ? ['a', 'b', 'c'] : ['a', 'b']).sort(comparator),\n\t\t\t'includes non-enumerable properties'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('symbols', { skip: !hasSymbols }, function (st) {\n\t\t/** @type {Record<PropertyKey, unknown>} */\n\t\tvar obj = { a: 1 };\n\t\tvar sym = Symbol('b');\n\t\tobj[sym] = 2;\n\n\t\tvar nonEnumSym = Symbol('c');\n\t\tObject.defineProperty(obj, nonEnumSym, {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tvalue: 3\n\t\t});\n\n\t\tst.deepEqual(\n\t\t\townKeys(obj).sort(comparator),\n\t\t\t['a', sym, nonEnumSym].sort(comparator),\n\t\t\t'works with symbols, both enum and non-enum'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}