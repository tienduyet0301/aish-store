{
    "sourceFile": "node_modules/find-up/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892295003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint-disable @typescript-eslint/unified-signatures */\nimport {Options as LocatePathOptions} from 'locate-path';\n\ndeclare const stop: unique symbol;\n\ndeclare namespace findUp {\n\tinterface Options extends LocatePathOptions {}\n\n\ttype StopSymbol = typeof stop;\n\n\ttype Match = string | StopSymbol | undefined;\n}\n\ndeclare const findUp: {\n\tsync: {\n\t\t/**\n\t\tSynchronously check if a path exists.\n\n\t\t@param path - Path to the file or directory.\n\t\t@returns Whether the path exists.\n\n\t\t@example\n\t\t```\n\t\timport findUp = require('find-up');\n\n\t\tconsole.log(findUp.sync.exists('/Users/sindresorhus/unicorn.png'));\n\t\t//=> true\n\t\t```\n\t\t*/\n\t\texists: (path: string) => boolean;\n\n\t\t/**\n\t\tSynchronously find a file or directory by walking up parent directories.\n\n\t\t@param name - Name of the file or directory to find. Can be multiple.\n\t\t@returns The first path found (by respecting the order of `name`s) or `undefined` if none could be found.\n\t\t*/\n\t\t(name: string | readonly string[], options?: findUp.Options): string | undefined;\n\n\t\t/**\n\t\tSynchronously find a file or directory by walking up parent directories.\n\n\t\t@param matcher - Called for each directory in the search. Return a path or `findUp.stop` to stop the search.\n\t\t@returns The first path found or `undefined` if none could be found.\n\n\t\t@example\n\t\t```\n\t\timport path = require('path');\n\t\timport findUp = require('find-up');\n\n\t\tconsole.log(findUp.sync(directory => {\n\t\t\tconst hasUnicorns = findUp.sync.exists(path.join(directory, 'unicorn.png'));\n\t\t\treturn hasUnicorns && directory;\n\t\t}, {type: 'directory'}));\n\t\t//=> '/Users/sindresorhus'\n\t\t```\n\t\t*/\n\t\t(matcher: (directory: string) => findUp.Match, options?: findUp.Options): string | undefined;\n\t};\n\n\t/**\n\tCheck if a path exists.\n\n\t@param path - Path to a file or directory.\n\t@returns Whether the path exists.\n\n\t@example\n\t```\n\timport findUp = require('find-up');\n\n\t(async () => {\n\t\tconsole.log(await findUp.exists('/Users/sindresorhus/unicorn.png'));\n\t\t//=> true\n\t})();\n\t```\n\t*/\n\texists: (path: string) => Promise<boolean>;\n\n\t/**\n\tReturn this in a `matcher` function to stop the search and force `findUp` to immediately return `undefined`.\n\t*/\n\treadonly stop: findUp.StopSymbol;\n\n\t/**\n\tFind a file or directory by walking up parent directories.\n\n\t@param name - Name of the file or directory to find. Can be multiple.\n\t@returns The first path found (by respecting the order of `name`s) or `undefined` if none could be found.\n\n\t@example\n\t```\n\t// /\n\t// └── Users\n\t//     └── sindresorhus\n\t//         ├── unicorn.png\n\t//         └── foo\n\t//             └── bar\n\t//                 ├── baz\n\t//                 └── example.js\n\n\t// example.js\n\timport findUp = require('find-up');\n\n\t(async () => {\n\t\tconsole.log(await findUp('unicorn.png'));\n\t\t//=> '/Users/sindresorhus/unicorn.png'\n\n\t\tconsole.log(await findUp(['rainbow.png', 'unicorn.png']));\n\t\t//=> '/Users/sindresorhus/unicorn.png'\n\t})();\n\t```\n\t*/\n\t(name: string | readonly string[], options?: findUp.Options): Promise<string | undefined>;\n\n\t/**\n\tFind a file or directory by walking up parent directories.\n\n\t@param matcher - Called for each directory in the search. Return a path or `findUp.stop` to stop the search.\n\t@returns The first path found or `undefined` if none could be found.\n\n\t@example\n\t```\n\timport path = require('path');\n\timport findUp = require('find-up');\n\n\t(async () => {\n\t\tconsole.log(await findUp(async directory => {\n\t\t\tconst hasUnicorns = await findUp.exists(path.join(directory, 'unicorn.png'));\n\t\t\treturn hasUnicorns && directory;\n\t\t}, {type: 'directory'}));\n\t\t//=> '/Users/sindresorhus'\n\t})();\n\t```\n\t*/\n\t(matcher: (directory: string) => (findUp.Match | Promise<findUp.Match>), options?: findUp.Options): Promise<string | undefined>;\n};\n\nexport = findUp;\n"
        }
    ]
}