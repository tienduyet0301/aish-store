{
    "sourceFile": "node_modules/damerau-levenshtein/test/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892108827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var levenshtien = require(\"./../index\");\n\nvar assert = require(\"assert\");\n\ndescribe(\"Damerau - Levenshtein\", function() {\n  describe(\"Equality\", function() {\n    it(\"returns 0 steps for equal strings\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"test\"), {\n        steps: 0,\n        relative: 0,\n        similarity: 1\n      });\n    });\n  });\n\n  describe(\"Additions\", function() {\n    it(\"returns 1 step when appending one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tests\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n\n    it(\"returns 1 step when prepending one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"stest\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n\n    it(\"returns 2 steps when appending two char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"mytest\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n\n    it(\"returns 7 steps when appending seven char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"mycrazytest\"), {\n        steps: 7,\n        relative: 7 / 11,\n        similarity: 1 - 7 / 11\n      });\n    });\n\n    it(\"returns 9 steps when prepend two chars and append seven chars\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"mytestiscrazy\"), {\n        steps: 9,\n        relative: 9 / 13,\n        similarity: 1 - 9 / 13\n      });\n    });\n  });\n\n\n  describe(\"Addition of repeated chars\", function() {\n    it(\"returns 1 step when repeating a character\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"teest\"), {\n        steps: 1,\n        relative: 1 / 5,\n        similarity: 1 - 1 / 5\n      });\n    });\n\n    it(\"returns 2 step when repeating a character twice\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"teeest\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n  });\n\n\n  describe(\"#Deletion\", function() {\n    it(\"returns 1 step when removing one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tst\"), {\n        steps: 1,\n        relative: 1 / 4,\n        similarity: 1 - 1 / 4\n      });\n    });\n  });\n\n\n  describe(\"Transposition\", function() {\n    it(\"returns 1 step when transposing one char\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tset\"), {\n        steps: 1,\n        relative: 1 / 4,\n        similarity: 1 - 1 / 4\n      });\n    });\n  });\n\n\n  describe(\"Addition with transposition\", function() {\n    it(\"returns 2 step when transposing one char and append another\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tsets\"), {\n        steps: 2,\n        relative: 2 / 5,\n        similarity: 1 - 2 / 5\n      });\n    });\n    it(\"returns 2 step when transposing a char and repeating it\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"tsset\"), {\n        steps: 2,\n        relative: 2 / 5,\n        similarity: 1 - 2 / 5\n      });\n    });\n  });\n\n  describe(\"Transposition of multiple chars\", function() {\n    it(\"returns 1 step when transposing two neighbouring characters\", function() {\n      assert.deepEqual(levenshtien(\"banana\", \"banaan\"), {\n        steps: 1,\n        relative: 1 / 6,\n        similarity: 1 - 1 / 6\n      });\n    });\n\n    it(\"returns 2 step when transposing two neighbouring characters by two places\", function() {\n      assert.deepEqual(levenshtien(\"banana\", \"nabana\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n\n    it(\"returns 2 step when transposing two pairs of characters\", function() {\n      assert.deepEqual(levenshtien(\"banana\", \"abnaan\"), {\n        steps: 2,\n        relative: 2 / 6,\n        similarity: 1 - 2 / 6\n      });\n    });\n  });\n\n  describe(\"Empty strings\", function() {\n    it(\"returns 0 step and 0 relative when both are empty\", function() {\n      assert.deepEqual(levenshtien(\"\", \"\"), {\n        steps: 0,\n        relative: 0,\n        similarity: 1\n      });\n    });\n\n    it(\"returns steps equal to first string lenght when second string is empty\", function() {\n      assert.deepEqual(levenshtien(\"test\", \"\"), {\n        steps: 4,\n        relative: 4 / 4,\n        similarity: 0\n      });\n    });\n\n    it(\"returns steps equal to second string lenght when first string is empty\", function() {\n      assert.deepEqual(levenshtien(\"\", \"test\"), {\n        steps: 4,\n        relative: 1,\n        similarity: 0\n      });\n    });\n  });\n});\n"
        }
    ]
}