{
    "sourceFile": "node_modules/regexp.prototype.flags/test/shimmed.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893008280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nrequire('../auto');\n\nvar test = require('tape');\nvar defineProperties = require('define-properties');\nvar callBind = require('call-bind');\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar functionsHaveNames = require('functions-have-names')();\nvar functionsHaveConfigurableNames = require('functions-have-names').functionsHaveConfigurableNames();\nvar hasStrictMode = require('has-strict-mode')();\n\nvar runTests = require('./tests');\n\ntest('shimmed', function (t) {\n\tvar descriptor = Object.getOwnPropertyDescriptor(RegExp.prototype, 'flags');\n\n\tt.equal(descriptor.get.length, 0, 'RegExp#flags getter has a length of 0');\n\n\tt.test('Function name', { skip: !functionsHaveNames }, function (st) {\n\t\tst.equal(descriptor.get.name, functionsHaveConfigurableNames ? 'get flags' : 'flags', 'RegExp#flags getter has name \"get flags\" (or \"flags\" if function names are not configurable)');\n\t\tst.end();\n\t});\n\n\tt.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\tet.equal(false, isEnumerable.call(RegExp.prototype, 'flags'), 'RegExp#flags is not enumerable');\n\t\tet.end();\n\t});\n\n\tt.test('bad array/this value', { skip: !hasStrictMode }, function (st) {\n\t\tst['throws'](function () { return descriptor.get.call(undefined); }, TypeError, 'undefined is not an object');\n\t\tst['throws'](function () { return descriptor.get.call(null); }, TypeError, 'null is not an object');\n\t\tst.end();\n\t});\n\n\tt.test('has the correct descriptor', function (st) {\n\t\tst.equal(descriptor.configurable, true);\n\t\tst.equal(descriptor.enumerable, false);\n\t\tst.equal(typeof descriptor.get, 'function');\n\t\tst.equal(descriptor.set, undefined);\n\t\tst.end();\n\t});\n\n\trunTests(callBind(descriptor.get), t);\n\n\tt.end();\n});\n"
        }
    ]
}