{
    "sourceFile": "node_modules/is-generator-function/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892335877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\n/* globals window */\n\nvar test = require('tape');\n\nvar generatorFuncs = require('make-generator-function')();\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar forEach = require('for-each');\n\nvar isGeneratorFunction = require('../index');\n\ntest('returns false for non-functions', function (t) {\n\tvar nonFuncs = [\n\t\ttrue,\n\t\tfalse,\n\t\tnull,\n\t\tundefined,\n\t\t{},\n\t\t[],\n\t\t/a/g,\n\t\t'string',\n\t\t42,\n\t\tnew Date()\n\t];\n\tt.plan(nonFuncs.length);\n\tforEach(nonFuncs, function (nonFunc) {\n\t\tt.notOk(isGeneratorFunction(nonFunc), nonFunc + ' is not a function');\n\t});\n\tt.end();\n});\n\ntest('returns false for non-generator functions', function (t) {\n\tvar func = function () {};\n\tt.notOk(isGeneratorFunction(func), 'anonymous function is not an generator function');\n\n\tvar namedFunc = function foo() {};\n\tt.notOk(isGeneratorFunction(namedFunc), 'named function is not an generator function');\n\n\tif (typeof window === 'undefined') {\n\t\tt.skip('window.alert is not an generator function');\n\t} else {\n\t\tt.notOk(isGeneratorFunction(window.alert), 'window.alert is not an generator function');\n\t}\n\tt.end();\n});\n\nvar fakeToString = function () { return 'function* () { return \"TOTALLY REAL I SWEAR!\"; }'; };\n\ntest('returns false for non-generator function with faked toString', function (t) {\n\tvar func = function () {};\n\tfunc.toString = fakeToString;\n\n\tt.notEqual(String(func), Function.prototype.toString.apply(func), 'faked toString is not real toString');\n\tt.notOk(isGeneratorFunction(func), 'anonymous function with faked toString is not a generator function');\n\tt.end();\n});\n\ntest('returns false for non-generator function with faked @@toStringTag', { skip: !hasToStringTag || generatorFuncs.length === 0 }, function (t) {\n\tvar generatorFunc = generatorFuncs[0];\n\t/** @type {{ toString(): unknown; valueOf(): unknown; [Symbol.toStringTag]?: unknown; }} */\n\tvar fakeGenFunction = {\n\t\ttoString: function () { return String(generatorFunc); },\n\t\tvalueOf: function () { return generatorFunc; }\n\t};\n\tfakeGenFunction[Symbol.toStringTag] = 'GeneratorFunction';\n\tt.notOk(isGeneratorFunction(fakeGenFunction), 'fake GeneratorFunction with @@toStringTag \"GeneratorFunction\" is not a generator function');\n\tt.end();\n});\n\ntest('returns true for generator functions', function (t) {\n\tif (generatorFuncs.length > 0) {\n\t\tforEach(generatorFuncs, function (generatorFunc) {\n\t\t\tt.ok(isGeneratorFunction(generatorFunc), generatorFunc + ' is generator function');\n\t\t});\n\t} else {\n\t\tt.skip('generator function is generator function - this environment does not support ES6 generator functions. Please run `node --harmony`, or use a supporting browser.');\n\t}\n\tt.end();\n});\n"
        }
    ]
}