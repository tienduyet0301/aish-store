{
    "sourceFile": "node_modules/busboy/test/test-types-multipart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892066183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst assert = require('assert');\nconst { inspect } = require('util');\n\nconst busboy = require('..');\n\nconst active = new Map();\n\nconst tests = [\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'super alpha file',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_1\"',\n       '',\n       'super beta file',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'A'.repeat(1023),\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_1\"; filename=\"1k_b.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'B'.repeat(1023),\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'field',\n        name: 'file_name_0',\n        val: 'super alpha file',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      { type: 'field',\n        name: 'file_name_1',\n        val: 'super beta file',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('A'.repeat(1023)),\n        info: {\n          filename: '1k_a.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_1',\n        data: Buffer.from('B'.repeat(1023)),\n        info: {\n          filename: '1k_b.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Fields and files'\n  },\n  { source: [\n      ['------WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n       'Content-Disposition: form-data; name=\"cont\"',\n       '',\n       'some random content',\n       '------WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n       'Content-Disposition: form-data; name=\"pass\"',\n       '',\n       'some random pass',\n       '------WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n       'Content-Disposition: form-data; name=bit',\n       '',\n       '2',\n       '------WebKitFormBoundaryTB2MiQ36fnSJlrhY--'\n      ].join('\\r\\n')\n    ],\n    boundary: '----WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n    expected: [\n      { type: 'field',\n        name: 'cont',\n        val: 'some random content',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      { type: 'field',\n        name: 'pass',\n        val: 'some random pass',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      { type: 'field',\n        name: 'bit',\n        val: '2',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n    ],\n    what: 'Fields only'\n  },\n  { source: [\n      ''\n    ],\n    boundary: '----WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n    expected: [\n      { error: 'Unexpected end of form' },\n    ],\n    what: 'No fields and no files'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'super alpha file',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    limits: {\n      fileSize: 13,\n      fieldSize: 5\n    },\n    expected: [\n      { type: 'field',\n        name: 'file_name_0',\n        val: 'super',\n        info: {\n          nameTruncated: false,\n          valueTruncated: true,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('ABCDEFGHIJKLM'),\n        info: {\n          filename: '1k_a.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: true,\n      },\n    ],\n    what: 'Fields and files (limits)'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'super alpha file',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    limits: {\n      files: 0\n    },\n    expected: [\n      { type: 'field',\n        name: 'file_name_0',\n        val: 'super alpha file',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      'filesLimit',\n    ],\n    what: 'Fields and files (limits: 0 files)'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'super alpha file',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_1\"',\n       '',\n       'super beta file',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'A'.repeat(1023),\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_1\"; filename=\"1k_b.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'B'.repeat(1023),\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'field',\n        name: 'file_name_0',\n        val: 'super alpha file',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      { type: 'field',\n        name: 'file_name_1',\n        val: 'super beta file',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n    ],\n    events: ['field'],\n    what: 'Fields and (ignored) files'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"/tmp/1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_1\"; filename=\"C:\\\\files\\\\1k_b.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_2\"; filename=\"relative/1k_c.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: '1k_a.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_1',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: '1k_b.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_2',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: '1k_c.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Files with filenames containing paths'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"/absolute/1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_1\"; filename=\"C:\\\\absolute\\\\1k_b.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_2\"; filename=\"relative/1k_c.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    preservePath: true,\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: '/absolute/1k_a.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_1',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: 'C:\\\\absolute\\\\1k_b.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_2',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: 'relative/1k_c.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Paths to be preserved through the preservePath option'\n  },\n  { source: [\n      ['------WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n       'Content-Disposition: form-data; name=\"cont\"',\n       'Content-Type: ',\n       '',\n       'some random content',\n       '------WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n       'Content-Disposition: ',\n       '',\n       'some random pass',\n       '------WebKitFormBoundaryTB2MiQ36fnSJlrhY--'\n      ].join('\\r\\n')\n    ],\n    boundary: '----WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n    expected: [\n      { type: 'field',\n        name: 'cont',\n        val: 'some random content',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n    ],\n    what: 'Empty content-type and empty content-disposition'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"file\"; filename*=utf-8\\'\\'n%C3%A4me.txt',\n       'Content-Type: application/octet-stream',\n       '',\n       'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'file',\n        data: Buffer.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        info: {\n          filename: 'näme.txt',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Unicode filenames'\n  },\n  { source: [\n      ['--asdasdasdasd\\r\\n',\n       'Content-Type: text/plain\\r\\n',\n       'Content-Disposition: form-data; name=\"foo\"\\r\\n',\n       '\\r\\n',\n       'asd\\r\\n',\n       '--asdasdasdasd--'\n      ].join(':)')\n    ],\n    boundary: 'asdasdasdasd',\n    expected: [\n      { error: 'Malformed part header' },\n      { error: 'Unexpected end of form' },\n    ],\n    what: 'Stopped mid-header'\n  },\n  { source: [\n      ['------WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n       'Content-Disposition: form-data; name=\"cont\"',\n       'Content-Type: application/json',\n       '',\n       '{}',\n       '------WebKitFormBoundaryTB2MiQ36fnSJlrhY--',\n      ].join('\\r\\n')\n    ],\n    boundary: '----WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n    expected: [\n      { type: 'field',\n        name: 'cont',\n        val: '{}',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'application/json',\n        },\n      },\n    ],\n    what: 'content-type for fields'\n  },\n  { source: [\n      '------WebKitFormBoundaryTB2MiQ36fnSJlrhY--',\n    ],\n    boundary: '----WebKitFormBoundaryTB2MiQ36fnSJlrhY',\n    expected: [],\n    what: 'empty form'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=upload_file_0; filename=\"1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       'Content-Transfer-Encoding: binary',\n       '',\n       '',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.alloc(0),\n        info: {\n          filename: '1k_a.dat',\n          encoding: 'binary',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n        err: 'Unexpected end of form',\n      },\n      { error: 'Unexpected end of form' },\n    ],\n    what: 'Stopped mid-file #1'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=upload_file_0; filename=\"1k_a.dat\"',\n       'Content-Type: application/octet-stream',\n       '',\n       'a',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('a'),\n        info: {\n          filename: '1k_a.dat',\n          encoding: '7bit',\n          mimeType: 'application/octet-stream',\n        },\n        limited: false,\n        err: 'Unexpected end of form',\n      },\n      { error: 'Unexpected end of form' },\n    ],\n    what: 'Stopped mid-file #2'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"notes.txt\"',\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'a',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('a'),\n        info: {\n          filename: 'notes.txt',\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Text file with charset'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"notes.txt\"',\n       'Content-Type: ',\n       ' text/plain; charset=utf8',\n       '',\n       'a',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('a'),\n        info: {\n          filename: 'notes.txt',\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Folded header value'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'a',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [],\n    what: 'No Content-Disposition'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'a'.repeat(64 * 1024),\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"notes.txt\"',\n       'Content-Type: ',\n       ' text/plain; charset=utf8',\n       '',\n       'bc',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    limits: {\n      fieldSize: Infinity,\n    },\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('bc'),\n        info: {\n          filename: 'notes.txt',\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n    ],\n    events: [ 'file' ],\n    what: 'Skip field parts if no listener'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'a',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"notes.txt\"',\n       'Content-Type: ',\n       ' text/plain; charset=utf8',\n       '',\n       'bc',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    limits: {\n      parts: 1,\n    },\n    expected: [\n      { type: 'field',\n        name: 'file_name_0',\n        val: 'a',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      'partsLimit',\n    ],\n    what: 'Parts limit'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_0\"',\n       '',\n       'a',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; name=\"file_name_1\"',\n       '',\n       'b',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    limits: {\n      fields: 1,\n    },\n    expected: [\n      { type: 'field',\n        name: 'file_name_0',\n        val: 'a',\n        info: {\n          nameTruncated: false,\n          valueTruncated: false,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n      },\n      'fieldsLimit',\n    ],\n    what: 'Fields limit'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"notes.txt\"',\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'ab',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_1\"; filename=\"notes2.txt\"',\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'cd',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    limits: {\n      files: 1,\n    },\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('ab'),\n        info: {\n          filename: 'notes.txt',\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n      'filesLimit',\n    ],\n    what: 'Files limit'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + `name=\"upload_file_0\"; filename=\"${'a'.repeat(64 * 1024)}.txt\"`,\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'ab',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_1\"; filename=\"notes2.txt\"',\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'cd',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { error: 'Malformed part header' },\n      { type: 'file',\n        name: 'upload_file_1',\n        data: Buffer.from('cd'),\n        info: {\n          filename: 'notes2.txt',\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Oversized part header'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + 'name=\"upload_file_0\"; filename=\"notes.txt\"',\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'a'.repeat(31) + '\\r',\n      ].join('\\r\\n'),\n      'b'.repeat(40),\n      '\\r\\n-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    fileHwm: 32,\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('a'.repeat(31) + '\\r' + 'b'.repeat(40)),\n        info: {\n          filename: 'notes.txt',\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Lookbehind data should not stall file streams'\n  },\n  { source: [\n      ['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + `name=\"upload_file_0\"; filename=\"${'a'.repeat(8 * 1024)}.txt\"`,\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'ab',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + `name=\"upload_file_1\"; filename=\"${'b'.repeat(8 * 1024)}.txt\"`,\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'cd',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n       'Content-Disposition: form-data; '\n         + `name=\"upload_file_2\"; filename=\"${'c'.repeat(8 * 1024)}.txt\"`,\n       'Content-Type: text/plain; charset=utf8',\n       '',\n       'ef',\n       '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--',\n      ].join('\\r\\n')\n    ],\n    boundary: '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n    expected: [\n      { type: 'file',\n        name: 'upload_file_0',\n        data: Buffer.from('ab'),\n        info: {\n          filename: `${'a'.repeat(8 * 1024)}.txt`,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_1',\n        data: Buffer.from('cd'),\n        info: {\n          filename: `${'b'.repeat(8 * 1024)}.txt`,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n      { type: 'file',\n        name: 'upload_file_2',\n        data: Buffer.from('ef'),\n        info: {\n          filename: `${'c'.repeat(8 * 1024)}.txt`,\n          encoding: '7bit',\n          mimeType: 'text/plain',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Header size limit should be per part'\n  },\n  { source: [\n      '\\r\\n--d1bf46b3-aa33-4061-b28d-6c5ced8b08ee\\r\\n',\n      'Content-Type: application/gzip\\r\\n'\n        + 'Content-Encoding: gzip\\r\\n'\n        + 'Content-Disposition: form-data; name=batch-1; filename=batch-1'\n        + '\\r\\n\\r\\n',\n      '\\r\\n--d1bf46b3-aa33-4061-b28d-6c5ced8b08ee--',\n    ],\n    boundary: 'd1bf46b3-aa33-4061-b28d-6c5ced8b08ee',\n    expected: [\n      { type: 'file',\n        name: 'batch-1',\n        data: Buffer.alloc(0),\n        info: {\n          filename: 'batch-1',\n          encoding: '7bit',\n          mimeType: 'application/gzip',\n        },\n        limited: false,\n      },\n    ],\n    what: 'Empty part'\n  },\n];\n\nfor (const test of tests) {\n  active.set(test, 1);\n\n  const { what, boundary, events, limits, preservePath, fileHwm } = test;\n  const bb = busboy({\n    fileHwm,\n    limits,\n    preservePath,\n    headers: {\n      'content-type': `multipart/form-data; boundary=${boundary}`,\n    }\n  });\n  const results = [];\n\n  if (events === undefined || events.includes('field')) {\n    bb.on('field', (name, val, info) => {\n      results.push({ type: 'field', name, val, info });\n    });\n  }\n\n  if (events === undefined || events.includes('file')) {\n    bb.on('file', (name, stream, info) => {\n      const data = [];\n      let nb = 0;\n      const file = {\n        type: 'file',\n        name,\n        data: null,\n        info,\n        limited: false,\n      };\n      results.push(file);\n      stream.on('data', (d) => {\n        data.push(d);\n        nb += d.length;\n      }).on('limit', () => {\n        file.limited = true;\n      }).on('close', () => {\n        file.data = Buffer.concat(data, nb);\n        assert.strictEqual(stream.truncated, file.limited);\n      }).once('error', (err) => {\n        file.err = err.message;\n      });\n    });\n  }\n\n  bb.on('error', (err) => {\n    results.push({ error: err.message });\n  });\n\n  bb.on('partsLimit', () => {\n    results.push('partsLimit');\n  });\n\n  bb.on('filesLimit', () => {\n    results.push('filesLimit');\n  });\n\n  bb.on('fieldsLimit', () => {\n    results.push('fieldsLimit');\n  });\n\n  bb.on('close', () => {\n    active.delete(test);\n\n    assert.deepStrictEqual(\n      results,\n      test.expected,\n      `[${what}] Results mismatch.\\n`\n        + `Parsed: ${inspect(results)}\\n`\n        + `Expected: ${inspect(test.expected)}`\n    );\n  });\n\n  for (const src of test.source) {\n    const buf = (typeof src === 'string' ? Buffer.from(src, 'utf8') : src);\n    bb.write(buf);\n  }\n  bb.end();\n}\n\n// Byte-by-byte versions\nfor (let test of tests) {\n  test = { ...test };\n  test.what += ' (byte-by-byte)';\n  active.set(test, 1);\n\n  const { what, boundary, events, limits, preservePath, fileHwm } = test;\n  const bb = busboy({\n    fileHwm,\n    limits,\n    preservePath,\n    headers: {\n      'content-type': `multipart/form-data; boundary=${boundary}`,\n    }\n  });\n  const results = [];\n\n  if (events === undefined || events.includes('field')) {\n    bb.on('field', (name, val, info) => {\n      results.push({ type: 'field', name, val, info });\n    });\n  }\n\n  if (events === undefined || events.includes('file')) {\n    bb.on('file', (name, stream, info) => {\n      const data = [];\n      let nb = 0;\n      const file = {\n        type: 'file',\n        name,\n        data: null,\n        info,\n        limited: false,\n      };\n      results.push(file);\n      stream.on('data', (d) => {\n        data.push(d);\n        nb += d.length;\n      }).on('limit', () => {\n        file.limited = true;\n      }).on('close', () => {\n        file.data = Buffer.concat(data, nb);\n        assert.strictEqual(stream.truncated, file.limited);\n      }).once('error', (err) => {\n        file.err = err.message;\n      });\n    });\n  }\n\n  bb.on('error', (err) => {\n    results.push({ error: err.message });\n  });\n\n  bb.on('partsLimit', () => {\n    results.push('partsLimit');\n  });\n\n  bb.on('filesLimit', () => {\n    results.push('filesLimit');\n  });\n\n  bb.on('fieldsLimit', () => {\n    results.push('fieldsLimit');\n  });\n\n  bb.on('close', () => {\n    active.delete(test);\n\n    assert.deepStrictEqual(\n      results,\n      test.expected,\n      `[${what}] Results mismatch.\\n`\n        + `Parsed: ${inspect(results)}\\n`\n        + `Expected: ${inspect(test.expected)}`\n    );\n  });\n\n  for (const src of test.source) {\n    const buf = (typeof src === 'string' ? Buffer.from(src, 'utf8') : src);\n    for (let i = 0; i < buf.length; ++i)\n      bb.write(buf.slice(i, i + 1));\n  }\n  bb.end();\n}\n\n{\n  let exception = false;\n  process.once('uncaughtException', (ex) => {\n    exception = true;\n    throw ex;\n  });\n  process.on('exit', () => {\n    if (exception || active.size === 0)\n      return;\n    process.exitCode = 1;\n    console.error('==========================');\n    console.error(`${active.size} test(s) did not finish:`);\n    console.error('==========================');\n    console.error(Array.from(active.keys()).map((v) => v.what).join('\\n'));\n  });\n}\n"
        }
    ]
}