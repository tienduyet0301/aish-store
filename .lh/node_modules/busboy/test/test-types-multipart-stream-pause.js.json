{
    "sourceFile": "node_modules/busboy/test/test-types-multipart-stream-pause.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892066127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst assert = require('assert');\nconst { randomFillSync } = require('crypto');\nconst { inspect } = require('util');\n\nconst busboy = require('..');\n\nconst { mustCall } = require('./common.js');\n\nconst BOUNDARY = 'u2KxIV5yF1y+xUspOQCCZopaVgeV6Jxihv35XQJmuTx8X3sh';\n\nfunction formDataSection(key, value) {\n  return Buffer.from(\n    `\\r\\n--${BOUNDARY}`\n      + `\\r\\nContent-Disposition: form-data; name=\"${key}\"`\n      + `\\r\\n\\r\\n${value}`\n  );\n}\n\nfunction formDataFile(key, filename, contentType) {\n  const buf = Buffer.allocUnsafe(100000);\n  return Buffer.concat([\n    Buffer.from(`\\r\\n--${BOUNDARY}\\r\\n`),\n    Buffer.from(`Content-Disposition: form-data; name=\"${key}\"`\n                  + `; filename=\"${filename}\"\\r\\n`),\n    Buffer.from(`Content-Type: ${contentType}\\r\\n\\r\\n`),\n    randomFillSync(buf)\n  ]);\n}\n\nconst reqChunks = [\n  Buffer.concat([\n    formDataFile('file', 'file.bin', 'application/octet-stream'),\n    formDataSection('foo', 'foo value'),\n  ]),\n  formDataSection('bar', 'bar value'),\n  Buffer.from(`\\r\\n--${BOUNDARY}--\\r\\n`)\n];\nconst bb = busboy({\n  headers: {\n    'content-type': `multipart/form-data; boundary=${BOUNDARY}`\n  }\n});\nconst expected = [\n  { type: 'file',\n    name: 'file',\n    info: {\n      filename: 'file.bin',\n      encoding: '7bit',\n      mimeType: 'application/octet-stream',\n    },\n  },\n  { type: 'field',\n    name: 'foo',\n    val: 'foo value',\n    info: {\n      nameTruncated: false,\n      valueTruncated: false,\n      encoding: '7bit',\n      mimeType: 'text/plain',\n    },\n  },\n  { type: 'field',\n    name: 'bar',\n    val: 'bar value',\n    info: {\n      nameTruncated: false,\n      valueTruncated: false,\n      encoding: '7bit',\n      mimeType: 'text/plain',\n    },\n  },\n];\nconst results = [];\n\nbb.on('field', (name, val, info) => {\n  results.push({ type: 'field', name, val, info });\n});\n\nbb.on('file', (name, stream, info) => {\n  results.push({ type: 'file', name, info });\n  // Simulate a pipe where the destination is pausing (perhaps due to waiting\n  // for file system write to finish)\n  setTimeout(() => {\n    stream.resume();\n  }, 10);\n});\n\nbb.on('close', mustCall(() => {\n  assert.deepStrictEqual(\n    results,\n    expected,\n    'Results mismatch.\\n'\n      + `Parsed: ${inspect(results)}\\n`\n      + `Expected: ${inspect(expected)}`\n  );\n}));\n\nfor (const chunk of reqChunks)\n  bb.write(chunk);\nbb.end();\n"
        }
    ]
}