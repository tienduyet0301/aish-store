{
    "sourceFile": "node_modules/busboy/test/test-types-multipart-charsets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892065958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nconst assert = require('assert');\nconst { inspect } = require('util');\n\nconst { mustCall } = require(`${__dirname}/common.js`);\n\nconst busboy = require('..');\n\nconst input = Buffer.from([\n  '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n 'Content-Disposition: form-data; '\n   + 'name=\"upload_file_0\"; filename=\"テスト.dat\"',\n 'Content-Type: application/octet-stream',\n '',\n 'A'.repeat(1023),\n '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n].join('\\r\\n'));\nconst boundary = '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k';\nconst expected = [\n  { type: 'file',\n    name: 'upload_file_0',\n    data: Buffer.from('A'.repeat(1023)),\n    info: {\n      filename: 'テスト.dat',\n      encoding: '7bit',\n      mimeType: 'application/octet-stream',\n    },\n    limited: false,\n  },\n];\nconst bb = busboy({\n  defParamCharset: 'utf8',\n  headers: {\n    'content-type': `multipart/form-data; boundary=${boundary}`,\n  }\n});\nconst results = [];\n\nbb.on('field', (name, val, info) => {\n  results.push({ type: 'field', name, val, info });\n});\n\nbb.on('file', (name, stream, info) => {\n  const data = [];\n  let nb = 0;\n  const file = {\n    type: 'file',\n    name,\n    data: null,\n    info,\n    limited: false,\n  };\n  results.push(file);\n  stream.on('data', (d) => {\n    data.push(d);\n    nb += d.length;\n  }).on('limit', () => {\n    file.limited = true;\n  }).on('close', () => {\n    file.data = Buffer.concat(data, nb);\n    assert.strictEqual(stream.truncated, file.limited);\n  }).once('error', (err) => {\n    file.err = err.message;\n  });\n});\n\nbb.on('error', (err) => {\n  results.push({ error: err.message });\n});\n\nbb.on('partsLimit', () => {\n  results.push('partsLimit');\n});\n\nbb.on('filesLimit', () => {\n  results.push('filesLimit');\n});\n\nbb.on('fieldsLimit', () => {\n  results.push('fieldsLimit');\n});\n\nbb.on('close', mustCall(() => {\n  assert.deepStrictEqual(\n    results,\n    expected,\n    'Results mismatch.\\n'\n      + `Parsed: ${inspect(results)}\\n`\n      + `Expected: ${inspect(expected)}`\n  );\n}));\n\nbb.end(input);\n"
        }
    ]
}