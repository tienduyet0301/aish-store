{
    "sourceFile": "node_modules/string.prototype.matchall/regexp-matchall.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893038031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\n// var Construct = require('es-abstract/2024/Construct');\nvar CreateRegExpStringIterator = require('es-abstract/2024/CreateRegExpStringIterator');\nvar Get = require('es-abstract/2024/Get');\nvar Set = require('es-abstract/2024/Set');\nvar SpeciesConstructor = require('es-abstract/2024/SpeciesConstructor');\nvar ToLength = require('es-abstract/2024/ToLength');\nvar ToString = require('es-abstract/2024/ToString');\nvar Type = require('es-abstract/2024/Type');\nvar flagsGetter = require('regexp.prototype.flags');\nvar setFunctionName = require('set-function-name');\nvar callBound = require('call-bound');\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = require('es-errors/type');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar OrigRegExp = GetIntrinsic('%RegExp%');\n\nvar supportsConstructingWithFlags = 'flags' in OrigRegExp.prototype;\n\nvar constructRegexWithFlags = function constructRegex(C, R) {\n\tvar matcher;\n\t// workaround for older engines that lack RegExp.prototype.flags\n\tvar flags = 'flags' in R ? Get(R, 'flags') : ToString(flagsGetter(R));\n\tif (supportsConstructingWithFlags && typeof flags === 'string') {\n\t\tmatcher = new C(R, flags);\n\t} else if (C === OrigRegExp) {\n\t\t// workaround for older engines that can not construct a RegExp with flags\n\t\tmatcher = new C(R.source, flags);\n\t} else {\n\t\tmatcher = new C(R, flags);\n\t}\n\treturn { flags: flags, matcher: matcher };\n};\n\nvar regexMatchAll = setFunctionName(function SymbolMatchAll(string) {\n\tvar R = this;\n\tif (Type(R) !== 'Object') {\n\t\tthrow new $TypeError('\"this\" value must be an Object');\n\t}\n\tvar S = ToString(string);\n\tvar C = SpeciesConstructor(R, OrigRegExp);\n\n\tvar tmp = constructRegexWithFlags(C, R);\n\t// var flags = ToString(Get(R, 'flags'));\n\tvar flags = tmp.flags;\n\t// var matcher = Construct(C, [R, flags]);\n\tvar matcher = tmp.matcher;\n\n\tvar lastIndex = ToLength(Get(R, 'lastIndex'));\n\tSet(matcher, 'lastIndex', lastIndex, true);\n\tvar global = $indexOf(flags, 'g') > -1;\n\tvar fullUnicode = $indexOf(flags, 'u') > -1;\n\treturn CreateRegExpStringIterator(matcher, S, global, fullUnicode);\n}, '[Symbol.matchAll]', true);\n\nmodule.exports = regexMatchAll;\n"
        }
    ]
}