{
    "sourceFile": "node_modules/string.prototype.matchall/test/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893038370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar forEach = require('for-each');\nvar has = Object.prototype.hasOwnProperty;\nvar assign = require('object.assign');\nvar define = require('define-properties');\nvar entries = require('object.entries');\nvar inspect = require('object-inspect');\n\nvar hasSticky = typeof (/a/).sticky === 'boolean';\nvar hasGroups = 'groups' in (/a/).exec('a');\n\nvar groups = function groups(matchObject) {\n\treturn hasGroups ? assign(matchObject, { groups: matchObject.groups }, matchObject) : matchObject;\n};\n\nvar arraySpread = function arraySpread(iterator) {\n\tif (Array.isArray(iterator)) { return iterator; }\n\tvar result;\n\tvar values = [];\n\tdo {\n\t\tresult = iterator.next();\n\t\tvalues.push(result);\n\t} while (!result.done);\n\treturn values;\n};\n\nvar testResults = function (t, iterator, expectedResults, item) {\n\tvar prefix = arguments.length > 3 ? inspect(item) + ': ' : '';\n\tvar results = arraySpread(iterator);\n\tvar expecteds = arraySpread(expectedResults);\n\tt.test(prefix + 'actual vs expected result lengths', function (st) {\n\t\tst.equal(results.length, expecteds.length, 'actual and expected result counts are the same');\n\t\tst.end();\n\t});\n\tt.test(prefix + 'actual vs expected results', { skip: results.length !== expecteds.length }, function (st) {\n\t\tforEach(expecteds, function (expected, index) {\n\t\t\tvar result = results.shift();\n\t\t\tst.equal(result.done, expected.done, 'result ' + (index + 1) + ' is ' + (expected.done ? '' : 'not ') + 'done');\n\t\t\tst.test('result ' + (index + 1), { skip: result.done !== expected.done }, function (s2t) {\n\t\t\t\tif (expected.done) {\n\t\t\t\t\ts2t.equal(result.value, undefined, 'result ' + (index + 1) + ' value is undefined');\n\t\t\t\t} else {\n\t\t\t\t\ts2t.equal(Array.isArray(result.value), true, 'result ' + (index + 1) + ' value is an array');\n\t\t\t\t\ts2t.deepEqual(entries(result.value || {}), entries(expected.value || {}), 'result ' + (index + 1) + ' has the same entries');\n\t\t\t\t\ts2t.deepEqual(result.value, expected.value, 'result ' + (index + 1) + ' value is expected value');\n\t\t\t\t}\n\t\t\t\ts2t.end();\n\t\t\t});\n\t\t});\n\t});\n};\n\nmodule.exports = function (matchAll, regexMatchAll, t) {\n\tt.test('non-regexes', function (st) {\n\t\tvar notRegexes = [\n\t\t\t[null, [{ value: undefined, done: true }]],\n\t\t\t[undefined, [\n\t\t\t\t{ value: assign([''], groups({ index: 0, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 1, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 2, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 3, input: 'abc' })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t]],\n\t\t\t[NaN, [{ value: undefined, done: true }]],\n\t\t\t[42, [{ value: undefined, done: true }]],\n\t\t\t[new Date(), [{ value: undefined, done: true }]],\n\t\t\t[{}, [\n\t\t\t\t{ value: assign(['b'], groups({ index: 1, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign(['c'], groups({ index: 2, input: 'abc' })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t]],\n\t\t\t[[], [\n\t\t\t\t{ value: assign([''], groups({ index: 0, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 1, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 2, input: 'abc' })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 3, input: 'abc' })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t]]\n\t\t];\n\t\tvar str = 'abc';\n\t\tforEach(notRegexes, function (notRegex) {\n\t\t\ttestResults(st, matchAll(str, notRegex[0]), notRegex[1], notRegex[0]);\n\t\t});\n\t\tst.end();\n\t});\n\n\tt.test('passing a string instead of a regex', function (st) {\n\t\tvar str = 'aabcaba';\n\t\ttestResults(st, matchAll(str, 'a'), matchAll(str, /a/g));\n\t\tst.end();\n\t});\n\n\tt.test('ToString-able objects', function (st) {\n\t\tvar str = 'aabc';\n\t\tvar strObj = { toString: function () { return str; } };\n\t\tvar regex = /[ac]/g;\n\t\tvar expectedResults = [\n\t\t\t{ value: assign(['a'], groups({ index: 0, input: str })), done: false },\n\t\t\t{ value: assign(['a'], groups({ index: 1, input: str })), done: false },\n\t\t\t{ value: assign(['c'], groups({ index: 3, input: str })), done: false },\n\t\t\t{ value: undefined, done: true }\n\t\t];\n\t\ttestResults(st, matchAll(strObj, regex), expectedResults);\n\t\tst.end();\n\t});\n\n\tt.test('#flags', function (st) {\n\t\tst.test('without a flags property', function (s2t) {\n\t\t\tvar str = 'aabc';\n\t\t\tvar regex = /[ac]/g;\n\t\t\tif (define.supportsDescriptors) {\n\t\t\t\tObject.defineProperty(regex, 'flags', { value: undefined });\n\t\t\t}\n\t\t\ts2t.equal(regex.flags, undefined, 'regex has an undefined \"flags\" property');\n\t\t\ts2t['throws'](\n\t\t\t\tfunction () { matchAll(str, regex); },\n\t\t\t\t'undefined flags throws'\n\t\t\t);\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('with a static flags property', function (s2t) {\n\t\t\tvar str = 'AaBC';\n\t\t\tvar regex = /[ac]/;\n\t\t\tdefine(regex, { flags: 'ig' }, { flags: function () { return true; } });\n\t\t\ttry {\n\t\t\t\tdefine(regex, { global: true }, { global: function () { return true; } });\n\t\t\t\ts2t.equal(regex.global, true);\n\t\t\t} catch (e) {\n\t\t\t\ts2t.comment('# SKIP in node < 6, `global` is not configurable on regexes');\n\t\t\t\treturn s2t.end();\n\t\t\t}\n\t\t\ts2t.equal(regex.flags, 'ig');\n\t\t\tvar expectedResults = [\n\t\t\t\t{ value: assign(['A'], groups({ index: 0, input: str })), done: false },\n\t\t\t\t{ value: assign(['a'], groups({ index: 1, input: str })), done: false },\n\t\t\t\t{ value: assign(['C'], groups({ index: 3, input: str })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t];\n\t\t\ttestResults(s2t, matchAll(str, regex), expectedResults);\n\t\t\treturn s2t.end();\n\t\t});\n\n\t\tst.test('respects flags', function (s2t) {\n\t\t\tvar str = 'A\\na\\nb\\nC';\n\t\t\tvar regex = /^[ac]/img;\n\t\t\tvar expectedResults = [\n\t\t\t\t{ value: assign(['A'], groups({ index: 0, input: str })), done: false },\n\t\t\t\t{ value: assign(['a'], groups({ index: 2, input: str })), done: false },\n\t\t\t\t{ value: assign(['C'], groups({ index: 6, input: str })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t];\n\t\t\ttestResults(s2t, matchAll(str, regex), expectedResults);\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('throws with a non-global regex', function (s2t) {\n\t\t\tvar str = 'AaBbCc';\n\t\t\tvar regex = /[bc]/i;\n\t\t\ts2t['throws'](\n\t\t\t\tfunction () { matchAll(str, regex); },\n\t\t\t\tTypeError,\n\t\t\t\t'a non-global regex throws'\n\t\t\t);\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('works with a global non-sticky regex', function (s2t) {\n\t\t\tvar str = 'AaBbCc';\n\t\t\tvar regex = /[bc]/gi;\n\t\t\tvar expectedResults = [\n\t\t\t\t{ value: assign(['B'], groups({ index: 2, input: str })), done: false },\n\t\t\t\t{ value: assign(['b'], groups({ index: 3, input: str })), done: false },\n\t\t\t\t{ value: assign(['C'], groups({ index: 4, input: str })), done: false },\n\t\t\t\t{ value: assign(['c'], groups({ index: 5, input: str })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t];\n\t\t\ttestResults(s2t, matchAll(str, regex), expectedResults);\n\t\t\ts2t.end();\n\t\t});\n\t});\n\n\tt.test('returns an iterator', function (st) {\n\t\tvar str = 'aabc';\n\t\tvar iterator = matchAll(str, /[ac]/g);\n\t\tst.ok(iterator, 'iterator is truthy');\n\t\tst.equal(has.call(iterator, 'next'), false, 'iterator does not have own property \"next\"');\n\t\tfor (var key in iterator) {\n\t\t\tst.fail('iterator has enumerable properties: ' + key);\n\t\t}\n\t\tvar expectedResults = [\n\t\t\t{ value: assign(['a'], groups({ index: 0, input: str })), done: false },\n\t\t\t{ value: assign(['a'], groups({ index: 1, input: str })), done: false },\n\t\t\t{ value: assign(['c'], groups({ index: 3, input: str })), done: false },\n\t\t\t{ value: undefined, done: true }\n\t\t];\n\t\ttestResults(st, iterator, expectedResults);\n\t\tst.end();\n\t});\n\n\tt.test('zero-width matches', function (st) {\n\t\tvar str = 'abcde';\n\n\t\tst.test('global', function (s2t) {\n\t\t\tvar expectedResults = [\n\t\t\t\t{ value: assign([''], groups({ index: 1, input: str })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 2, input: str })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 3, input: str })), done: false },\n\t\t\t\t{ value: assign([''], groups({ index: 4, input: str })), done: false },\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t];\n\t\t\ttestResults(s2t, matchAll(str, /\\B/g), expectedResults);\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('sticky', { skip: !hasSticky }, function (s2t) {\n\t\t\tvar expectedResults = [\n\t\t\t\t{ value: undefined, done: true }\n\t\t\t];\n\n\t\t\t/* eslint no-invalid-regexp: [2, { \"allowConstructorFlags\": [\"y\"] }] */\n\t\t\tvar regex = new RegExp('\\\\B', 'y');\n\t\t\ts2t['throws'](\n\t\t\t\tfunction () { matchAll(str, regex); },\n\t\t\t\tTypeError,\n\t\t\t\t'non-global sticky regex throws'\n\t\t\t);\n\n\t\t\t/* eslint no-invalid-regexp: [2, { \"allowConstructorFlags\": [\"y\"] }] */\n\t\t\ttestResults(s2t, matchAll(str, new RegExp('\\\\B', 'gy')), expectedResults);\n\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('unflagged', function (s2t) {\n\t\t\ts2t['throws'](\n\t\t\t\tfunction () { matchAll(str, /\\B/); },\n\t\t\t\tTypeError,\n\t\t\t\t'unflagged regex throws'\n\t\t\t);\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}