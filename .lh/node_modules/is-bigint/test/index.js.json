{
    "sourceFile": "node_modules/is-bigint/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892327833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar inspect = require('object-inspect');\nvar hasBigInts = require('has-bigints')();\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar forEach = require('for-each');\nvar v = require('es-value-fixtures');\n\nvar isBigInt = require('../');\n\ntest('non-BigInt values', function (t) {\n\t/** @type {(typeof v.primitives[number] | object)[]} */\n\tvar nonBigInts = v.nonBigInts.concat(\n\t\tObject(true),\n\t\tObject(false),\n\t\t// @ts-expect-error TS sucks with concat\n\t\t{},\n\t\t[],\n\t\t/a/g,\n\t\tnew Date(),\n\t\tfunction () {},\n\t\tNaN,\n\t\tv.symbols\n\t);\n\tt.plan(nonBigInts.length);\n\tforEach(nonBigInts, function (nonBigInt) {\n\t\tt.equal(false, isBigInt(nonBigInt), inspect(nonBigInt) + ' is not a BigInt');\n\t});\n\tt.end();\n});\n\ntest('faked BigInt values', function (t) {\n\tt.test('real BigInt valueOf', { skip: !hasBigInts }, function (st) {\n\t\tvar fakeBigInt = { valueOf: function () { return BigInt(42); } };\n\t\tst.equal(false, isBigInt(fakeBigInt), 'object with valueOf returning a BigInt is not a BigInt');\n\t\tst.end();\n\t});\n\n\tt.test('faked @@toStringTag', { skip: !hasBigInts || !hasToStringTag }, function (st) {\n\t\t/** @type {{ valueOf(): unknown; [Symbol.toStringTag]?: unknown }} */\n\t\tvar fakeBigInt = { valueOf: function () { return BigInt(42); } };\n\t\tfakeBigInt[Symbol.toStringTag] = 'BigInt';\n\t\tst.equal(false, isBigInt(fakeBigInt), 'object with fake BigInt @@toStringTag and valueOf returning a BigInt is not a BigInt');\n\n\t\t/** @type {{ valueOf(): unknown; [Symbol.toStringTag]?: unknown }} */\n\t\tvar notSoFakeBigInt = { valueOf: function () { return 42; } };\n\t\tnotSoFakeBigInt[Symbol.toStringTag] = 'BigInt';\n\t\tst.equal(false, isBigInt(notSoFakeBigInt), 'object with fake BigInt @@toStringTag and valueOf not returning a BigInt is not a BigInt');\n\t\tst.end();\n\t});\n\n\tvar fakeBigIntString = { toString: function () { return '42n'; } };\n\tt.equal(false, isBigInt(fakeBigIntString), 'object with toString returning 42n is not a BigInt');\n\n\tt.end();\n});\n\ntest('BigInt support', { skip: !hasBigInts }, function (t) {\n\tforEach(v.bigints.concat(Object(BigInt(42))), function (bigInt) {\n\t\tt.equal(true, isBigInt(bigInt), inspect(bigInt) + ' is a BigInt');\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}