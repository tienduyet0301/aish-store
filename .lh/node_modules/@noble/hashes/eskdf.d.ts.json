{
    "sourceFile": "node_modules/@noble/hashes/eskdf.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891892647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export declare function scrypt(password: string, salt: string): Uint8Array;\nexport declare function pbkdf2(password: string, salt: string): Uint8Array;\n/**\n * Derives main seed. Takes a lot of time. Prefer `eskdf` method instead.\n */\nexport declare function deriveMainSeed(username: string, password: string): Uint8Array;\ntype AccountID = number | string;\ntype OptsLength = {\n    keyLength: number;\n};\ntype OptsMod = {\n    modulus: bigint;\n};\ntype KeyOpts = undefined | OptsLength | OptsMod;\nexport interface ESKDF {\n    /**\n     * Derives a child key. Child key will not be associated with any\n     * other child key because of properties of underlying KDF.\n     *\n     * @param protocol - 3-15 character protocol name\n     * @param accountId - numeric identifier of account\n     * @param options - `keyLength: 64` or `modulus: 41920438n`\n     * @example deriveChildKey('aes', 0)\n     */\n    deriveChildKey: (protocol: string, accountId: AccountID, options?: KeyOpts) => Uint8Array;\n    /**\n     * Deletes the main seed from eskdf instance\n     */\n    expire: () => void;\n    /**\n     * Account fingerprint\n     */\n    fingerprint: string;\n}\n/**\n * ESKDF\n * @param username - username, email, or identifier, min: 8 characters, should have enough entropy\n * @param password - password, min: 8 characters, should have enough entropy\n * @example\n * const kdf = await eskdf('example-university', 'beginning-new-example');\n * const key = kdf.deriveChildKey('aes', 0);\n * console.log(kdf.fingerprint);\n * kdf.expire();\n */\nexport declare function eskdf(username: string, password: string): Promise<ESKDF>;\nexport {};\n//# sourceMappingURL=eskdf.d.ts.map"
        }
    ]
}