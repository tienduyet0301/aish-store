{
    "sourceFile": "node_modules/@noble/hashes/esm/sha3-addons.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891896065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * SHA3 (keccak) addons.\n *\n * * Full [NIST SP 800-185](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-185.pdf):\n *   cSHAKE, KMAC, TupleHash, ParallelHash + XOF variants\n * * Reduced-round Keccak [(draft)](https://datatracker.ietf.org/doc/draft-irtf-cfrg-kangarootwelve/):\n *     * ðŸ¦˜ K12 aka KangarooTwelve\n *     * M14 aka MarsupilamiFourteen\n *     * TurboSHAKE\n * * KeccakPRG: Pseudo-random generator based on Keccak [(pdf)](https://keccak.team/files/CSF-0.1.pdf)\n * @module\n */\nimport { Keccak, type ShakeOpts } from './sha3.ts';\nimport { type CHashO, type CHashXO, Hash, type HashXOF, type Input } from './utils.ts';\nexport type cShakeOpts = ShakeOpts & {\n    personalization?: Input;\n    NISTfn?: Input;\n};\nexport type ICShake = {\n    (msg: Input, opts?: cShakeOpts): Uint8Array;\n    outputLen: number;\n    blockLen: number;\n    create(opts: cShakeOpts): HashXOF<Keccak>;\n};\nexport type ITupleHash = {\n    (messages: Input[], opts?: cShakeOpts): Uint8Array;\n    create(opts?: cShakeOpts): TupleHash;\n};\nexport type IParHash = {\n    (message: Input, opts?: ParallelOpts): Uint8Array;\n    create(opts?: ParallelOpts): ParallelHash;\n};\nexport declare const cshake128: ICShake;\nexport declare const cshake256: ICShake;\nexport declare class KMAC extends Keccak implements HashXOF<KMAC> {\n    constructor(blockLen: number, outputLen: number, enableXOF: boolean, key: Input, opts?: cShakeOpts);\n    protected finish(): void;\n    _cloneInto(to?: KMAC): KMAC;\n    clone(): KMAC;\n}\nexport declare const kmac128: {\n    (key: Input, message: Input, opts?: cShakeOpts): Uint8Array;\n    create(key: Input, opts?: cShakeOpts): KMAC;\n};\nexport declare const kmac256: {\n    (key: Input, message: Input, opts?: cShakeOpts): Uint8Array;\n    create(key: Input, opts?: cShakeOpts): KMAC;\n};\nexport declare const kmac128xof: {\n    (key: Input, message: Input, opts?: cShakeOpts): Uint8Array;\n    create(key: Input, opts?: cShakeOpts): KMAC;\n};\nexport declare const kmac256xof: {\n    (key: Input, message: Input, opts?: cShakeOpts): Uint8Array;\n    create(key: Input, opts?: cShakeOpts): KMAC;\n};\nexport declare class TupleHash extends Keccak implements HashXOF<TupleHash> {\n    constructor(blockLen: number, outputLen: number, enableXOF: boolean, opts?: cShakeOpts);\n    protected finish(): void;\n    _cloneInto(to?: TupleHash): TupleHash;\n    clone(): TupleHash;\n}\n/** 128-bit TupleHASH. */\nexport declare const tuplehash128: ITupleHash;\n/** 256-bit TupleHASH. */\nexport declare const tuplehash256: ITupleHash;\n/** 128-bit TupleHASH XOF. */\nexport declare const tuplehash128xof: ITupleHash;\n/** 256-bit TupleHASH XOF. */\nexport declare const tuplehash256xof: ITupleHash;\ntype ParallelOpts = cShakeOpts & {\n    blockLen?: number;\n};\nexport declare class ParallelHash extends Keccak implements HashXOF<ParallelHash> {\n    private leafHash?;\n    protected leafCons: () => Hash<Keccak>;\n    private chunkPos;\n    private chunksDone;\n    private chunkLen;\n    constructor(blockLen: number, outputLen: number, leafCons: () => Hash<Keccak>, enableXOF: boolean, opts?: ParallelOpts);\n    protected finish(): void;\n    _cloneInto(to?: ParallelHash): ParallelHash;\n    destroy(): void;\n    clone(): ParallelHash;\n}\n/** 128-bit ParallelHash. In JS, it is not parallel. */\nexport declare const parallelhash128: IParHash;\n/** 256-bit ParallelHash. In JS, it is not parallel. */\nexport declare const parallelhash256: IParHash;\n/** 128-bit ParallelHash XOF. In JS, it is not parallel. */\nexport declare const parallelhash128xof: IParHash;\n/** 256-bit ParallelHash. In JS, it is not parallel. */\nexport declare const parallelhash256xof: IParHash;\nexport type TurboshakeOpts = ShakeOpts & {\n    D?: number;\n};\n/** TurboSHAKE 128-bit: reduced 12-round keccak. */\nexport declare const turboshake128: CHashXO;\n/** TurboSHAKE 256-bit: reduced 12-round keccak. */\nexport declare const turboshake256: CHashXO;\nexport type KangarooOpts = {\n    dkLen?: number;\n    personalization?: Input;\n};\nexport declare class KangarooTwelve extends Keccak implements HashXOF<KangarooTwelve> {\n    readonly chunkLen = 8192;\n    private leafHash?;\n    protected leafLen: number;\n    private personalization;\n    private chunkPos;\n    private chunksDone;\n    constructor(blockLen: number, leafLen: number, outputLen: number, rounds: number, opts: KangarooOpts);\n    update(data: Input): this;\n    protected finish(): void;\n    destroy(): void;\n    _cloneInto(to?: KangarooTwelve): KangarooTwelve;\n    clone(): KangarooTwelve;\n}\n/** KangarooTwelve: reduced 12-round keccak. */\nexport declare const k12: CHashO;\n/** MarsupilamiFourteen: reduced 14-round keccak. */\nexport declare const m14: CHashO;\n/**\n * More at https://github.com/XKCP/XKCP/tree/master/lib/high/Keccak/PRG.\n */\nexport declare class KeccakPRG extends Keccak {\n    protected rate: number;\n    constructor(capacity: number);\n    keccak(): void;\n    update(data: Input): this;\n    feed(data: Input): this;\n    protected finish(): void;\n    digestInto(_out: Uint8Array): Uint8Array;\n    fetch(bytes: number): Uint8Array;\n    forget(): void;\n    _cloneInto(to?: KeccakPRG): KeccakPRG;\n    clone(): KeccakPRG;\n}\n/** KeccakPRG: Pseudo-random generator based on Keccak. https://keccak.team/files/CSF-0.1.pdf */\nexport declare const keccakprg: (capacity?: number) => KeccakPRG;\nexport {};\n//# sourceMappingURL=sha3-addons.d.ts.map"
        }
    ]
}