{
    "sourceFile": "node_modules/@noble/hashes/esm/_u64.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891896709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare function fromBig(n: bigint, le?: boolean): {\n    h: number;\n    l: number;\n};\ndeclare function split(lst: bigint[], le?: boolean): Uint32Array[];\ndeclare const toBig: (h: number, l: number) => bigint;\ndeclare const shrSH: (h: number, _l: number, s: number) => number;\ndeclare const shrSL: (h: number, l: number, s: number) => number;\ndeclare const rotrSH: (h: number, l: number, s: number) => number;\ndeclare const rotrSL: (h: number, l: number, s: number) => number;\ndeclare const rotrBH: (h: number, l: number, s: number) => number;\ndeclare const rotrBL: (h: number, l: number, s: number) => number;\ndeclare const rotr32H: (_h: number, l: number) => number;\ndeclare const rotr32L: (h: number, _l: number) => number;\ndeclare const rotlSH: (h: number, l: number, s: number) => number;\ndeclare const rotlSL: (h: number, l: number, s: number) => number;\ndeclare const rotlBH: (h: number, l: number, s: number) => number;\ndeclare const rotlBL: (h: number, l: number, s: number) => number;\ndeclare function add(Ah: number, Al: number, Bh: number, Bl: number): {\n    h: number;\n    l: number;\n};\ndeclare const add3L: (Al: number, Bl: number, Cl: number) => number;\ndeclare const add3H: (low: number, Ah: number, Bh: number, Ch: number) => number;\ndeclare const add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number;\ndeclare const add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number;\ndeclare const add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number;\ndeclare const add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number;\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\ndeclare const u64: {\n    fromBig: typeof fromBig;\n    split: typeof split;\n    toBig: (h: number, l: number) => bigint;\n    shrSH: (h: number, _l: number, s: number) => number;\n    shrSL: (h: number, l: number, s: number) => number;\n    rotrSH: (h: number, l: number, s: number) => number;\n    rotrSL: (h: number, l: number, s: number) => number;\n    rotrBH: (h: number, l: number, s: number) => number;\n    rotrBL: (h: number, l: number, s: number) => number;\n    rotr32H: (_h: number, l: number) => number;\n    rotr32L: (h: number, _l: number) => number;\n    rotlSH: (h: number, l: number, s: number) => number;\n    rotlSL: (h: number, l: number, s: number) => number;\n    rotlBH: (h: number, l: number, s: number) => number;\n    rotlBL: (h: number, l: number, s: number) => number;\n    add: typeof add;\n    add3L: (Al: number, Bl: number, Cl: number) => number;\n    add3H: (low: number, Ah: number, Bh: number, Ch: number) => number;\n    add4L: (Al: number, Bl: number, Cl: number, Dl: number) => number;\n    add4H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number) => number;\n    add5H: (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) => number;\n    add5L: (Al: number, Bl: number, Cl: number, Dl: number, El: number) => number;\n};\nexport default u64;\n//# sourceMappingURL=_u64.d.ts.map"
        }
    ]
}