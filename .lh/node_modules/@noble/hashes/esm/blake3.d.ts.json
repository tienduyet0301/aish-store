{
    "sourceFile": "node_modules/@noble/hashes/esm/blake3.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891894485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { BLAKE2 } from './blake2.ts';\nimport { type CHashXO, type HashXOF, type Input } from './utils.ts';\n/**\n * Ensure to use EITHER `key` OR `context`, not both.\n *\n * * `key`: 32-byte MAC key.\n * * `context`: string for KDF. Should be hardcoded, globally unique, and application - specific.\n *   A good default format for the context string is \"[application] [commit timestamp] [purpose]\".\n */\nexport type Blake3Opts = {\n    dkLen?: number;\n    key?: Input;\n    context?: Input;\n};\n/** Blake3 hash. Can be used as MAC and KDF. */\nexport declare class BLAKE3 extends BLAKE2<BLAKE3> implements HashXOF<BLAKE3> {\n    private chunkPos;\n    private chunksDone;\n    private flags;\n    private IV;\n    private state;\n    private stack;\n    private posOut;\n    private bufferOut32;\n    private bufferOut;\n    private chunkOut;\n    private enableXOF;\n    constructor(opts?: Blake3Opts, flags?: number);\n    protected get(): [];\n    protected set(): void;\n    private b2Compress;\n    protected compress(buf: Uint32Array, bufPos?: number, isLast?: boolean): void;\n    _cloneInto(to?: BLAKE3): BLAKE3;\n    destroy(): void;\n    private b2CompressOut;\n    protected finish(): void;\n    private writeInto;\n    xofInto(out: Uint8Array): Uint8Array;\n    xof(bytes: number): Uint8Array;\n    digestInto(out: Uint8Array): Uint8Array;\n    digest(): Uint8Array;\n}\n/**\n * BLAKE3 hash function. Can be used as MAC and KDF.\n * @param msg - message that would be hashed\n * @param opts - `dkLen` for output length, `key` for MAC mode, `context` for KDF mode\n * @example\n * const data = new Uint8Array(32);\n * const hash = blake3(data);\n * const mac = blake3(data, { key: new Uint8Array(32) });\n * const kdf = blake3(data, { context: 'application name' });\n */\nexport declare const blake3: CHashXO;\n//# sourceMappingURL=blake3.d.ts.map"
        }
    ]
}