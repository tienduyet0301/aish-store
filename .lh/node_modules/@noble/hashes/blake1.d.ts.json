{
    "sourceFile": "node_modules/@noble/hashes/blake1.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891891854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Hash, type CHashO, type Input } from './utils.ts';\n/** Blake1 options. Basically just \"salt\" */\nexport type BlakeOpts = {\n    salt?: Uint8Array;\n};\ndeclare abstract class BLAKE1<T extends BLAKE1<T>> extends Hash<T> {\n    protected finished: boolean;\n    protected length: number;\n    protected pos: number;\n    protected destroyed: boolean;\n    protected buffer: Uint8Array;\n    protected view: DataView;\n    protected salt: Uint32Array;\n    abstract compress(view: DataView, offset: number, withLength?: boolean): void;\n    protected abstract get(): number[];\n    protected abstract set(...args: number[]): void;\n    readonly blockLen: number;\n    readonly outputLen: number;\n    private lengthFlag;\n    private counterLen;\n    protected constants: Uint32Array;\n    constructor(blockLen: number, outputLen: number, lengthFlag: number, counterLen: number, saltLen: number, constants: Uint32Array, opts?: BlakeOpts);\n    update(data: Input): this;\n    destroy(): void;\n    _cloneInto(to?: T): T;\n    clone(): T;\n    digestInto(out: Uint8Array): void;\n    digest(): Uint8Array;\n}\ndeclare class Blake1_32 extends BLAKE1<Blake1_32> {\n    private v0;\n    private v1;\n    private v2;\n    private v3;\n    private v4;\n    private v5;\n    private v6;\n    private v7;\n    constructor(outputLen: number, IV: Uint32Array, lengthFlag: number, opts?: BlakeOpts);\n    protected get(): [number, number, number, number, number, number, number, number];\n    protected set(v0: number, v1: number, v2: number, v3: number, v4: number, v5: number, v6: number, v7: number): void;\n    destroy(): void;\n    compress(view: DataView, offset: number, withLength?: boolean): void;\n}\ndeclare class Blake1_64 extends BLAKE1<Blake1_64> {\n    private v0l;\n    private v0h;\n    private v1l;\n    private v1h;\n    private v2l;\n    private v2h;\n    private v3l;\n    private v3h;\n    private v4l;\n    private v4h;\n    private v5l;\n    private v5h;\n    private v6l;\n    private v6h;\n    private v7l;\n    private v7h;\n    constructor(outputLen: number, IV: Uint32Array, lengthFlag: number, opts?: BlakeOpts);\n    protected get(): [\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number,\n        number\n    ];\n    protected set(v0l: number, v0h: number, v1l: number, v1h: number, v2l: number, v2h: number, v3l: number, v3h: number, v4l: number, v4h: number, v5l: number, v5h: number, v6l: number, v6h: number, v7l: number, v7h: number): void;\n    destroy(): void;\n    compress(view: DataView, offset: number, withLength?: boolean): void;\n}\nexport declare class BLAKE224 extends Blake1_32 {\n    constructor(opts?: BlakeOpts);\n}\nexport declare class BLAKE256 extends Blake1_32 {\n    constructor(opts?: BlakeOpts);\n}\nexport declare class BLAKE384 extends Blake1_64 {\n    constructor(opts?: BlakeOpts);\n}\nexport declare class BLAKE512 extends Blake1_64 {\n    constructor(opts?: BlakeOpts);\n}\n/** blake1-224 hash function */\nexport declare const blake224: CHashO;\n/** blake1-256 hash function */\nexport declare const blake256: CHashO;\n/** blake1-384 hash function */\nexport declare const blake384: CHashO;\n/** blake1-512 hash function */\nexport declare const blake512: CHashO;\nexport {};\n//# sourceMappingURL=blake1.d.ts.map"
        }
    ]
}