{
    "sourceFile": "node_modules/eslint-import-resolver-typescript/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892246948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# eslint-import-resolver-typescript\n\n[![GitHub Actions](https://github.com/import-js/eslint-import-resolver-typescript/workflows/CI/badge.svg)](https://github.com/import-js/eslint-import-resolver-typescript/actions/workflows/ci.yml)\n[![type-coverage](https://img.shields.io/badge/dynamic/json.svg?label=type-coverage&prefix=%E2%89%A5&suffix=%&query=$.typeCoverage.atLeast&uri=https%3A%2F%2Fraw.githubusercontent.com%2Fimport-js%2Feslint-import-resolver-typescript%2Fmaster%2Fpackage.json)](https://github.com/plantain-00/type-coverage)\n[![npm](https://img.shields.io/npm/v/eslint-import-resolver-typescript.svg)](https://www.npmjs.com/package/eslint-import-resolver-typescript)\n[![GitHub Release](https://img.shields.io/github/release/import-js/eslint-import-resolver-typescript)](https://github.com/import-js/eslint-import-resolver-typescript/releases)\n\n[![Conventional Commits](https://img.shields.io/badge/conventional%20commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![Renovate enabled](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![Code Style: Prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg)](https://github.com/prettier/prettier)\n[![changesets](https://img.shields.io/badge/maintained%20with-changesets-176de3.svg)](https://github.com/changesets/changesets)\n\nThis plugin adds [`TypeScript`][] support to [`eslint-plugin-import`][] (Or maybe you want to try [`eslint-plugin-import-x`][] for faster speed)\n\nThis means you can:\n\n- `import`/`require` files with extension `.cts`/`.mts`/`.ts`/`.tsx`/`.d.cts`/`.d.mts`/`.d.ts`\n- Use [`paths`](https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping) defined in `tsconfig.json`\n- Prefer resolving `@types/*` definitions over plain `.js`/`.jsx`\n- Multiple tsconfigs support just like normal\n- `imports/exports` fields support in `package.json`\n\n## TOC <!-- omit in toc -->\n\n- [Notice](#notice)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Options from `enhanced-resolve`](#options-from-enhanced-resolve)\n  - [`conditionNames`](#conditionnames)\n  - [`extensions`](#extensions)\n  - [`extensionAlias`](#extensionalias)\n  - [`mainFields`](#mainfields)\n  - [Other options](#other-options)\n  - [Default options](#default-options)\n- [Contributing](#contributing)\n- [Sponsors](#sponsors)\n- [Backers](#backers)\n- [Changelog](#changelog)\n- [License](#license)\n\n## Notice\n\nAfter version 2.0.0, `.d.ts` will take higher priority then normal `.js`/`.jsx` files on resolving `node_modules` packages in favor of `@types/*` definitions or its own definition.\n\nIf you're facing some problems on rules `import/default` or `import/named` from [`eslint-plugin-import`][], do not post any issue here, because they are just working exactly as [expected](https://github.com/import-js/eslint-import-resolver-typescript/issues/31#issuecomment-539751607) on our sides, take [import-js/eslint-plugin-import#1525](https://github.com/import-js/eslint-plugin-import/issues/1525) as reference or post a new issue to [`eslint-plugin-import`][] instead.\n\n## Installation\n\n```sh\n# npm\nnpm i -D eslint-plugin-import eslint-import-resolver-typescript\n\n# pnpm\npnpm i -D eslint-plugin-import eslint-import-resolver-typescript\n\n# yarn\nyarn add -D eslint-plugin-import eslint-import-resolver-typescript\n```\n\n**Important when using `eslint-plugin-import-x` and `npm`**: Use `npm i -D eslint-plugin-import@eslint-plugin-import-x@latest eslint-import-resolver-typescript`, or you will end up with both `eslint-plugin-import` and `eslint-plugin-import-x` in your node_modules.\n\n## Configuration\n\n### `eslint.config.js`\n\nIf you are using `eslint-plugin-import-x@>=4.5.0`, you can use import/require to reference `eslint-import-resolver-typescript` directly in your ESLint flat config:\n\n```js\n// eslint.config.js\nconst {\n  createTypeScriptImportResolver,\n} = require('eslint-import-resolver-typescript')\n\nmodule.exports = [{\n  settings: {\n    \"import-x/resolver-next\": [\n      createTypeScriptImportResolver({\n        alwaysTryTypes: true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`\n\n        // Choose from one of the \"project\" configs below or omit to use <root>/tsconfig.json by default\n\n        // use <root>/path/to/folder/tsconfig.json\n        project: \"path/to/folder\",\n\n        // Multiple tsconfigs (Useful for monorepos)\n\n        // use a glob pattern\n        project: \"packages/*/tsconfig.json\",\n\n        // use an array\n        project: [\n          \"packages/module-a/tsconfig.json\",\n          \"packages/module-b/tsconfig.json\"\n        ],\n\n        // use an array of glob patterns\n        project: [\n          \"packages/*/tsconfig.json\",\n          \"other-packages/*/tsconfig.json\"\n        ]\n      }),\n    ]\n  }\n}]\n```\n\nBut if you are using `eslint-plugin-import` or the older version of `eslint-plugin-import-x`, you can't use require/import:\n\n```js\n// eslint.config.js\nmodule.exports = [\n  {\n    settings: {\n      'import/resolver': {\n        typescript: {\n          alwaysTryTypes: true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`\n\n          // Choose from one of the \"project\" configs below or omit to use <root>/tsconfig.json by default\n\n          // use <root>/path/to/folder/tsconfig.json\n          project: 'path/to/folder',\n\n          // Multiple tsconfigs (Useful for monorepos)\n\n          // use a glob pattern\n          project: 'packages/*/tsconfig.json',\n\n          // use an array\n          project: [\n            'packages/module-a/tsconfig.json',\n            'packages/module-b/tsconfig.json',\n          ],\n\n          // use an array of glob patterns\n          project: [\n            'packages/*/tsconfig.json',\n            'other-packages/*/tsconfig.json',\n          ],\n        },\n      },\n    },\n  },\n]\n```\n\n### `.eslintrc`\n\nAdd the following to your `.eslintrc` config:\n\n```jsonc\n{\n  \"plugins\": [\"import\"],\n  \"rules\": {\n    // turn on errors for missing imports\n    \"import/no-unresolved\": \"error\"\n  },\n  \"settings\": {\n    \"import/parsers\": {\n      \"@typescript-eslint/parser\": [\".ts\", \".tsx\"]\n    },\n    \"import/resolver\": {\n      \"typescript\": {\n        \"alwaysTryTypes\": true, // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`\n\n        // Choose from one of the \"project\" configs below or omit to use <root>/tsconfig.json by default\n\n        // use <root>/path/to/folder/tsconfig.json\n        \"project\": \"path/to/folder\",\n\n        // Multiple tsconfigs (Useful for monorepos)\n\n        // use a glob pattern\n        \"project\": \"packages/*/tsconfig.json\",\n\n        // use an array\n        \"project\": [\n          \"packages/module-a/tsconfig.json\",\n          \"packages/module-b/tsconfig.json\"\n        ],\n\n        // use an array of glob patterns\n        \"project\": [\n          \"packages/*/tsconfig.json\",\n          \"other-packages/*/tsconfig.json\"\n        ]\n      }\n    }\n  }\n}\n```\n\n## Options from [`enhanced-resolve`][]\n\n### `conditionNames`\n\nDefault:\n\n```jsonc\n[\n  \"types\",\n  \"import\",\n\n  // APF: https://angular.io/guide/angular-package-format\n  \"esm2020\",\n  \"es2020\",\n  \"es2015\",\n\n  \"require\",\n  \"node\",\n  \"node-addons\",\n  \"browser\",\n  \"default\"\n]\n```\n\n### `extensions`\n\nDefault:\n\n```jsonc\n[\n  // `.mts`, `.cts`, `.d.mts`, `.d.cts`, `.mjs`, `.cjs` are not included because `.cjs` and `.mjs` must be used explicitly\n  \".ts\",\n  \".tsx\",\n  \".d.ts\",\n  \".js\",\n  \".jsx\",\n  \".json\",\n  \".node\"\n]\n```\n\n### `extensionAlias`\n\nDefault:\n\n```jsonc\n{\n  \".js\": [\n    \".ts\",\n    // `.tsx` can also be compiled as `.js`\n    \".tsx\",\n    \".d.ts\",\n    \".js\"\n  ],\n  \".jsx\": [\".tsx\", \".d.ts\", \".jsx\"],\n  \".cjs\": [\".cts\", \".d.cts\", \".cjs\"],\n  \".mjs\": [\".mts\", \".d.mts\", \".mjs\"]\n}\n```\n\n### `mainFields`\n\nDefault:\n\n```jsonc\n[\n  \"types\",\n  \"typings\",\n\n  // APF: https://angular.io/guide/angular-package-format\n  \"fesm2020\",\n  \"fesm2015\",\n  \"esm2020\",\n  \"es2020\",\n\n  \"module\",\n  \"jsnext:main\",\n\n  \"main\"\n]\n```\n\n### Other options\n\nYou can pass through other options of [`enhanced-resolve`][] directly\n\n### Default options\n\nYou can reuse `defaultConditionNames`, `defaultExtensions`, `defaultExtensionAlias` and `defaultMainFields` by `require/import` them directly\n\n## Contributing\n\n- Make sure your change is covered by a test import.\n- Make sure that `yarn test` passes without a failure.\n- Make sure that `yarn lint` passes without conflicts.\n- Make sure your code changes match our [type-coverage](https://github.com/plantain-00/type-coverage) settings: `yarn type-coverage`.\n\nWe have [GitHub Actions](https://github.com/import-js/eslint-import-resolver-typescript/actions) which will run the above commands on your PRs.\n\nIf either fails, we won't be able to merge your PR until it's fixed.\n\n## Sponsors\n\n| 1stG                                                                                                                               | RxTS                                                                                                                               | UnTS                                                                                                                               |\n| ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n| [![1stG Open Collective backers and sponsors](https://opencollective.com/1stG/organizations.svg)](https://opencollective.com/1stG) | [![RxTS Open Collective backers and sponsors](https://opencollective.com/rxts/organizations.svg)](https://opencollective.com/rxts) | [![UnTS Open Collective backers and sponsors](https://opencollective.com/unts/organizations.svg)](https://opencollective.com/unts) |\n\n## Backers\n\n| 1stG                                                                                                                             | RxTS                                                                                                                             | UnTS                                                                                                                             |\n| -------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------- |\n| [![1stG Open Collective backers and sponsors](https://opencollective.com/1stG/individuals.svg)](https://opencollective.com/1stG) | [![RxTS Open Collective backers and sponsors](https://opencollective.com/rxts/individuals.svg)](https://opencollective.com/rxts) | [![UnTS Open Collective backers and sponsors](https://opencollective.com/unts/individuals.svg)](https://opencollective.com/unts) |\n\n## Changelog\n\nDetailed changes for each release are documented in [CHANGELOG.md](./CHANGELOG.md).\n\n## License\n\n[ISC][]\n\n[`eslint-plugin-import`]: https://github.com/import-js/eslint-plugin-import\n[`eslint-plugin-import-x`]: https://github.com/un-ts/eslint-plugin-import-x\n[`enhanced-resolve`]: https://github.com/webpack/enhanced-resolve\n[`typescript`]: https://www.typescriptlang.org\n[isc]: https://opensource.org/licenses/ISC\n"
        }
    ]
}