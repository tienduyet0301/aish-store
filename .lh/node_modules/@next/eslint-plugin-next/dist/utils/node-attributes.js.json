{
    "sourceFile": "node_modules/@next/eslint-plugin-next/dist/utils/node-attributes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891883456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// Return attributes and values of a node in a convenient way:\n/* example: \n    <ExampleElement attr1=\"15\" attr2>\n    {   attr1: {\n            hasValue: true,\n            value: 15\n        },\n        attr2: {\n            hasValue: false\n        }\nInclusion of hasValue is in case an eslint rule cares about boolean values\nexplicitly assigned to attribute vs the attribute being used as a flag\n*/ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return NodeAttributes;\n    }\n});\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar NodeAttributes = /*#__PURE__*/ function() {\n    \"use strict\";\n    function NodeAttributes(ASTnode) {\n        var _this = this;\n        _class_call_check(this, NodeAttributes);\n        _define_property(this, \"attributes\", void 0);\n        this.attributes = {};\n        ASTnode.attributes.forEach(function(attribute) {\n            if (!attribute.type || attribute.type !== 'JSXAttribute') {\n                return;\n            }\n            if (!!attribute.value) {\n                // hasValue\n                var value = typeof attribute.value.value === 'string' ? attribute.value.value : typeof attribute.value.expression.value !== 'undefined' ? attribute.value.expression.value : attribute.value.expression.properties;\n                _this.attributes[attribute.name.name] = {\n                    hasValue: true,\n                    value: value\n                };\n            } else {\n                _this.attributes[attribute.name.name] = {\n                    hasValue: false\n                };\n            }\n        });\n    }\n    _create_class(NodeAttributes, [\n        {\n            key: \"hasAny\",\n            value: function hasAny() {\n                return !!Object.keys(this.attributes).length;\n            }\n        },\n        {\n            key: \"has\",\n            value: function has(attrName) {\n                return !!this.attributes[attrName];\n            }\n        },\n        {\n            key: \"hasValue\",\n            value: function hasValue(attrName) {\n                return !!this.attributes[attrName].hasValue;\n            }\n        },\n        {\n            key: \"value\",\n            value: function value(attrName) {\n                var attr = this.attributes[attrName];\n                if (!attr) {\n                    return true;\n                }\n                if (attr.hasValue) {\n                    return attr.value;\n                }\n                return undefined;\n            }\n        }\n    ]);\n    return NodeAttributes;\n}();\n"
        }
    ]
}