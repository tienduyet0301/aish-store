{
    "sourceFile": "node_modules/@next/eslint-plugin-next/dist/rules/no-duplicate-head.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891882921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar _definerule = require(\"../utils/define-rule\");\nvar url = 'https://nextjs.org/docs/messages/no-duplicate-head';\nmodule.exports = (0, _definerule.defineRule)({\n    meta: {\n        docs: {\n            description: 'Prevent duplicate usage of `<Head>` in `pages/_document.js`.',\n            recommended: true,\n            url: url\n        },\n        type: 'problem',\n        schema: []\n    },\n    create: function create(context) {\n        var sourceCode = context.sourceCode;\n        var documentImportName;\n        return {\n            ImportDeclaration: function ImportDeclaration(node) {\n                if (node.source.value === 'next/document') {\n                    var documentImport = node.specifiers.find(function(param) {\n                        var type = param.type;\n                        return type === 'ImportDefaultSpecifier';\n                    });\n                    if (documentImport && documentImport.local) {\n                        documentImportName = documentImport.local.name;\n                    }\n                }\n            },\n            ReturnStatement: function ReturnStatement(node) {\n                var ancestors = sourceCode.getAncestors(node);\n                var documentClass = ancestors.find(function(ancestorNode) {\n                    return ancestorNode.type === 'ClassDeclaration' && ancestorNode.superClass && 'name' in ancestorNode.superClass && ancestorNode.superClass.name === documentImportName;\n                });\n                if (!documentClass) {\n                    return;\n                }\n                if (node.argument && 'children' in node.argument && node.argument.children) {\n                    // @ts-expect-error - `node.argument` could be a `JSXElement` which has property `children`\n                    var headComponents = node.argument.children.filter(function(childrenNode) {\n                        return childrenNode.openingElement && childrenNode.openingElement.name && childrenNode.openingElement.name.name === 'Head';\n                    });\n                    if (headComponents.length > 1) {\n                        for(var i = 1; i < headComponents.length; i++){\n                            context.report({\n                                node: headComponents[i],\n                                message: \"Do not include multiple instances of `<Head/>`. See: \".concat(url)\n                            });\n                        }\n                    }\n                }\n            }\n        };\n    }\n});\n"
        }
    ]
}