{
    "sourceFile": "node_modules/@next/eslint-plugin-next/dist/rules/no-page-custom-font.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891883071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar _definerule = require(\"../utils/define-rule\");\nvar _nodeattributes = /*#__PURE__*/ _interop_require_default(require(\"../utils/node-attributes\"));\nvar _path = require(\"path\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar url = 'https://nextjs.org/docs/messages/no-page-custom-font';\nfunction isIdentifierMatch(id1, id2) {\n    return id1 === null && id2 === null || id1 && id2 && id1.name === id2.name;\n}\nmodule.exports = (0, _definerule.defineRule)({\n    meta: {\n        docs: {\n            description: 'Prevent page-only custom fonts.',\n            recommended: true,\n            url: url\n        },\n        type: 'problem',\n        schema: []\n    },\n    create: function create(context) {\n        var sourceCode = context.sourceCode;\n        var paths = context.filename.split('pages');\n        var page = paths[paths.length - 1];\n        // outside of a file within `pages`, bail\n        if (!page) {\n            return {};\n        }\n        var is_Document = page.startsWith(\"\".concat(_path.sep, \"_document\")) || page.startsWith(\"\".concat(_path.posix.sep, \"_document\"));\n        var documentImportName;\n        var localDefaultExportId;\n        var exportDeclarationType;\n        return {\n            ImportDeclaration: function ImportDeclaration(node) {\n                if (node.source.value === 'next/document') {\n                    var documentImport = node.specifiers.find(function(param) {\n                        var type = param.type;\n                        return type === 'ImportDefaultSpecifier';\n                    });\n                    if (documentImport && documentImport.local) {\n                        documentImportName = documentImport.local.name;\n                    }\n                }\n            },\n            ExportDefaultDeclaration: function ExportDefaultDeclaration(node) {\n                exportDeclarationType = node.declaration.type;\n                if (node.declaration.type === 'FunctionDeclaration') {\n                    localDefaultExportId = node.declaration.id;\n                    return;\n                }\n                if (node.declaration.type === 'ClassDeclaration' && node.declaration.superClass && 'name' in node.declaration.superClass && node.declaration.superClass.name === documentImportName) {\n                    localDefaultExportId = node.declaration.id;\n                }\n            },\n            JSXOpeningElement: function JSXOpeningElement(node) {\n                if (node.name.name !== 'link') {\n                    return;\n                }\n                var ancestors = sourceCode.getAncestors(node);\n                // if `export default <name>` is further down within the file after the\n                // currently traversed component, then `localDefaultExportName` will\n                // still be undefined\n                if (!localDefaultExportId) {\n                    // find the top level of the module\n                    var program = ancestors.find(function(ancestor) {\n                        return ancestor.type === 'Program';\n                    });\n                    // go over each token to find the combination of `export default <name>`\n                    for(var i = 0; i <= program.tokens.length - 1; i++){\n                        if (localDefaultExportId) {\n                            break;\n                        }\n                        var token = program.tokens[i];\n                        if (token.type === 'Keyword' && token.value === 'export') {\n                            var nextToken = program.tokens[i + 1];\n                            if (nextToken && nextToken.type === 'Keyword' && nextToken.value === 'default') {\n                                var maybeIdentifier = program.tokens[i + 2];\n                                if (maybeIdentifier && maybeIdentifier.type === 'Identifier') {\n                                    localDefaultExportId = {\n                                        name: maybeIdentifier.value\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n                var parentComponent = ancestors.find(function(ancestor) {\n                    // export default class ... extends ...\n                    if (exportDeclarationType === 'ClassDeclaration') {\n                        return ancestor.type === exportDeclarationType && 'superClass' in ancestor && ancestor.superClass && 'name' in ancestor.superClass && ancestor.superClass.name === documentImportName;\n                    }\n                    if ('id' in ancestor) {\n                        // export default function ...\n                        if (exportDeclarationType === 'FunctionDeclaration') {\n                            return ancestor.type === exportDeclarationType && isIdentifierMatch(ancestor.id, localDefaultExportId);\n                        }\n                        // function ...() {} export default ...\n                        // class ... extends ...; export default ...\n                        return isIdentifierMatch(ancestor.id, localDefaultExportId);\n                    }\n                    return false;\n                });\n                // file starts with _document and this <link /> is within the default export\n                if (is_Document && parentComponent) {\n                    return;\n                }\n                var attributes = new _nodeattributes.default(node);\n                if (!attributes.has('href') || !attributes.hasValue('href')) {\n                    return;\n                }\n                var hrefValue = attributes.value('href');\n                var isGoogleFont = typeof hrefValue === 'string' && hrefValue.startsWith('https://fonts.googleapis.com/css');\n                if (isGoogleFont) {\n                    var end = \"This is discouraged. See: \".concat(url);\n                    var message = is_Document ? \"Using `<link />` outside of `<Head>` will disable automatic font optimization. \".concat(end) : \"Custom fonts not added in `pages/_document.js` will only load for a single page. \".concat(end);\n                    context.report({\n                        node: node,\n                        message: message\n                    });\n                }\n            }\n        };\n    }\n});\n"
        }
    ]
}