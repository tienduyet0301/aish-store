{
    "sourceFile": "node_modules/@next/eslint-plugin-next/dist/rules/no-async-client-component.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891882795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar _definerule = require(\"../utils/define-rule\");\nvar url = 'https://nextjs.org/docs/messages/no-async-client-component';\nvar description = 'Prevent client components from being async functions.';\nvar message = \"\".concat(description, \" See: \").concat(url);\nfunction isCapitalized(str) {\n    return /[A-Z]/.test(str === null || str === void 0 ? void 0 : str[0]);\n}\nmodule.exports = (0, _definerule.defineRule)({\n    meta: {\n        docs: {\n            description: description,\n            recommended: true,\n            url: url\n        },\n        type: 'problem',\n        schema: []\n    },\n    create: function create(context) {\n        return {\n            Program: function Program(node) {\n                var isClientComponent = false;\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _loop = function() {\n                        var block = _step.value;\n                        if (block.type === 'ExpressionStatement' && block.expression.type === 'Literal' && block.expression.value === 'use client') {\n                            isClientComponent = true;\n                        }\n                        if (block.type === 'ExportDefaultDeclaration' && isClientComponent) {\n                            var _block_declaration;\n                            // export default async function MyComponent() {...}\n                            if (((_block_declaration = block.declaration) === null || _block_declaration === void 0 ? void 0 : _block_declaration.type) === 'FunctionDeclaration' && block.declaration.async && isCapitalized(block.declaration.id.name)) {\n                                context.report({\n                                    node: block,\n                                    message: message\n                                });\n                            }\n                            // async function MyComponent() {...}; export default MyComponent;\n                            if (block.declaration.type === 'Identifier' && isCapitalized(block.declaration.name)) {\n                                var targetName = block.declaration.name;\n                                var functionDeclaration = node.body.find(function(localBlock) {\n                                    if (localBlock.type === 'FunctionDeclaration' && localBlock.id.name === targetName) return true;\n                                    if (localBlock.type === 'VariableDeclaration' && localBlock.declarations.find(function(declaration) {\n                                        var _declaration_id;\n                                        return ((_declaration_id = declaration.id) === null || _declaration_id === void 0 ? void 0 : _declaration_id.type) === 'Identifier' && declaration.id.name === targetName;\n                                    })) return true;\n                                    return false;\n                                });\n                                if ((functionDeclaration === null || functionDeclaration === void 0 ? void 0 : functionDeclaration.type) === 'FunctionDeclaration' && functionDeclaration.async) {\n                                    context.report({\n                                        node: functionDeclaration,\n                                        message: message\n                                    });\n                                }\n                                if ((functionDeclaration === null || functionDeclaration === void 0 ? void 0 : functionDeclaration.type) === 'VariableDeclaration') {\n                                    var _varDeclarator_init;\n                                    var varDeclarator = functionDeclaration.declarations.find(function(declaration) {\n                                        var _declaration_id;\n                                        return ((_declaration_id = declaration.id) === null || _declaration_id === void 0 ? void 0 : _declaration_id.type) === 'Identifier' && declaration.id.name === targetName;\n                                    });\n                                    if ((varDeclarator === null || varDeclarator === void 0 ? void 0 : (_varDeclarator_init = varDeclarator.init) === null || _varDeclarator_init === void 0 ? void 0 : _varDeclarator_init.type) === 'ArrowFunctionExpression' && varDeclarator.init.async) {\n                                        context.report({\n                                            node: functionDeclaration,\n                                            message: message\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    for(var _iterator = node.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        };\n    }\n});\n"
        }
    ]
}