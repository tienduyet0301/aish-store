{
    "sourceFile": "node_modules/@next/eslint-plugin-next/dist/rules/next-script-for-ga.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891882745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar _definerule = require(\"../utils/define-rule\");\nvar _nodeattributes = /*#__PURE__*/ _interop_require_default(require(\"../utils/node-attributes\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar SUPPORTED_SRCS = [\n    'www.google-analytics.com/analytics.js',\n    'www.googletagmanager.com/gtag/js'\n];\nvar SUPPORTED_HTML_CONTENT_URLS = [\n    'www.google-analytics.com/analytics.js',\n    'www.googletagmanager.com/gtm.js'\n];\nvar description = 'Prefer `next/script` component when using the inline script for Google Analytics.';\nvar url = 'https://nextjs.org/docs/messages/next-script-for-ga';\nvar ERROR_MSG = \"\".concat(description, \" See: \").concat(url);\n// Check if one of the items in the list is a substring of the passed string\nvar containsStr = function(str, strList) {\n    return strList.some(function(s) {\n        return str.includes(s);\n    });\n};\nmodule.exports = (0, _definerule.defineRule)({\n    meta: {\n        docs: {\n            description: description,\n            recommended: true,\n            url: url\n        },\n        type: 'problem',\n        schema: []\n    },\n    create: function create(context) {\n        return {\n            JSXOpeningElement: function JSXOpeningElement(node) {\n                if (node.name.name !== 'script') {\n                    return;\n                }\n                if (node.attributes.length === 0) {\n                    return;\n                }\n                var attributes = new _nodeattributes.default(node);\n                // Check if the Alternative async tag is being used to add GA.\n                // https://developers.google.com/analytics/devguides/collection/analyticsjs#alternative_async_tag\n                // https://developers.google.com/analytics/devguides/collection/gtagjs\n                if (typeof attributes.value('src') === 'string' && containsStr(attributes.value('src'), SUPPORTED_SRCS)) {\n                    return context.report({\n                        node: node,\n                        message: ERROR_MSG\n                    });\n                }\n                // Check if inline script is being used to add GA.\n                // https://developers.google.com/analytics/devguides/collection/analyticsjs#the_google_analytics_tag\n                // https://developers.google.com/tag-manager/quickstart\n                if (attributes.value('dangerouslySetInnerHTML') && attributes.value('dangerouslySetInnerHTML').length > 0) {\n                    var htmlContent = attributes.value('dangerouslySetInnerHTML')[0].value.quasis && attributes.value('dangerouslySetInnerHTML')[0].value.quasis[0].value.raw;\n                    if (htmlContent && containsStr(htmlContent, SUPPORTED_HTML_CONTENT_URLS)) {\n                        context.report({\n                            node: node,\n                            message: ERROR_MSG\n                        });\n                    }\n                }\n            }\n        };\n    }\n});\n"
        }
    ]
}