{
    "sourceFile": "node_modules/@next/eslint-plugin-next/dist/rules/no-typos.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891883247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar _definerule = require(\"../utils/define-rule\");\nvar _path = /*#__PURE__*/ _interop_require_wildcard(require(\"path\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar NEXT_EXPORT_FUNCTIONS = [\n    'getStaticProps',\n    'getStaticPaths',\n    'getServerSideProps'\n];\n// 0 is the exact match\nvar THRESHOLD = 1;\n// the minimum number of operations required to convert string a to string b.\nfunction minDistance(a, b) {\n    var m = a.length;\n    var n = b.length;\n    if (m < n) {\n        return minDistance(b, a);\n    }\n    if (n === 0) {\n        return m;\n    }\n    var previousRow = Array.from({\n        length: n + 1\n    }, function(_, i) {\n        return i;\n    });\n    for(var i = 0; i < m; i++){\n        var s1 = a[i];\n        var currentRow = [\n            i + 1\n        ];\n        for(var j = 0; j < n; j++){\n            var s2 = b[j];\n            var insertions = previousRow[j + 1] + 1;\n            var deletions = currentRow[j] + 1;\n            var substitutions = previousRow[j] + Number(s1 !== s2);\n            currentRow.push(Math.min(insertions, deletions, substitutions));\n        }\n        previousRow = currentRow;\n    }\n    return previousRow[previousRow.length - 1];\n}\nmodule.exports = (0, _definerule.defineRule)({\n    meta: {\n        docs: {\n            description: 'Prevent common typos in Next.js data fetching functions.',\n            recommended: true\n        },\n        type: 'problem',\n        schema: []\n    },\n    create: function create(context) {\n        function checkTypos(node, name) {\n            if (NEXT_EXPORT_FUNCTIONS.includes(name)) {\n                return;\n            }\n            var potentialTypos = NEXT_EXPORT_FUNCTIONS.map(function(o) {\n                return {\n                    option: o,\n                    distance: minDistance(o, name)\n                };\n            }).filter(function(param) {\n                var distance = param.distance;\n                return distance <= THRESHOLD && distance > 0;\n            }).sort(function(a, b) {\n                return a.distance - b.distance;\n            });\n            if (potentialTypos.length) {\n                context.report({\n                    node: node,\n                    message: \"\".concat(name, \" may be a typo. Did you mean \").concat(potentialTypos[0].option, \"?\")\n                });\n            }\n        }\n        return {\n            ExportNamedDeclaration: function ExportNamedDeclaration(node) {\n                var page = context.filename.split('pages', 2)[1];\n                if (!page || _path.parse(page).dir.startsWith('/api')) {\n                    return;\n                }\n                var decl = node.declaration;\n                if (!decl) {\n                    return;\n                }\n                switch(decl.type){\n                    case 'FunctionDeclaration':\n                        {\n                            checkTypos(node, decl.id.name);\n                            break;\n                        }\n                    case 'VariableDeclaration':\n                        {\n                            decl.declarations.forEach(function(d) {\n                                if (d.id.type !== 'Identifier') {\n                                    return;\n                                }\n                                checkTypos(node, d.id.name);\n                            });\n                            break;\n                        }\n                    default:\n                        {\n                            break;\n                        }\n                }\n                return;\n            }\n        };\n    }\n});\n"
        }
    ]
}