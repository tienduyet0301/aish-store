{
    "sourceFile": "node_modules/tailwindcss/dist/plugin.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893049101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { N as NamedUtilityValue, P as PluginUtils } from './resolve-config-BIFUA2FY.js';\nimport './colors-b_6i0Oi7.js';\n\ntype Config = UserConfig;\ntype PluginFn = (api: PluginAPI) => void;\ntype PluginWithConfig = {\n    handler: PluginFn;\n    config?: UserConfig;\n    /** @internal */\n    reference?: boolean;\n};\ntype PluginWithOptions<T> = {\n    (options?: T): PluginWithConfig;\n    __isOptionsFunction: true;\n};\ntype Plugin = PluginFn | PluginWithConfig | PluginWithOptions<any>;\ntype PluginAPI = {\n    addBase(base: CssInJs): void;\n    addVariant(name: string, variant: string | string[] | CssInJs): void;\n    matchVariant<T = string>(name: string, cb: (value: T | string, extra: {\n        modifier: string | null;\n    }) => string | string[], options?: {\n        values?: Record<string, T>;\n        sort?(a: {\n            value: T | string;\n            modifier: string | null;\n        }, b: {\n            value: T | string;\n            modifier: string | null;\n        }): number;\n    }): void;\n    addUtilities(utilities: Record<string, CssInJs | CssInJs[]> | Record<string, CssInJs | CssInJs[]>[], options?: {}): void;\n    matchUtilities(utilities: Record<string, (value: string, extra: {\n        modifier: string | null;\n    }) => CssInJs | CssInJs[]>, options?: Partial<{\n        type: string | string[];\n        supportsNegativeValues: boolean;\n        values: Record<string, string> & {\n            __BARE_VALUE__?: (value: NamedUtilityValue) => string | undefined;\n        };\n        modifiers: 'any' | Record<string, string>;\n    }>): void;\n    addComponents(utilities: Record<string, CssInJs> | Record<string, CssInJs>[], options?: {}): void;\n    matchComponents(utilities: Record<string, (value: string, extra: {\n        modifier: string | null;\n    }) => CssInJs>, options?: Partial<{\n        type: string | string[];\n        supportsNegativeValues: boolean;\n        values: Record<string, string> & {\n            __BARE_VALUE__?: (value: NamedUtilityValue) => string | undefined;\n        };\n        modifiers: 'any' | Record<string, string>;\n    }>): void;\n    theme(path: string, defaultValue?: any): any;\n    config(path?: string, defaultValue?: any): any;\n    prefix(className: string): string;\n};\ntype CssInJs = {\n    [key: string]: string | string[] | CssInJs | CssInJs[];\n};\n\ntype ResolvableTo<T> = T | ((utils: PluginUtils) => T);\ntype ThemeValue = ResolvableTo<Record<string, unknown>> | null | undefined;\ntype ThemeConfig = Record<string, ThemeValue> & {\n    extend?: Record<string, ThemeValue>;\n};\ntype ContentFile = string | {\n    raw: string;\n    extension?: string;\n};\ntype DarkModeStrategy = false | 'media' | 'class' | ['class', string] | 'selector' | ['selector', string] | ['variant', string | string[]];\ninterface UserConfig {\n    presets?: UserConfig[];\n    theme?: ThemeConfig;\n    plugins?: Plugin[];\n}\ninterface UserConfig {\n    content?: ContentFile[] | {\n        relative?: boolean;\n        files: ContentFile[];\n    };\n}\ninterface UserConfig {\n    darkMode?: DarkModeStrategy;\n}\ninterface UserConfig {\n    prefix?: string;\n}\ninterface UserConfig {\n    blocklist?: string[];\n}\ninterface UserConfig {\n    important?: boolean | string;\n}\ninterface UserConfig {\n    future?: 'all' | Record<string, boolean>;\n}\n\ndeclare function createPlugin(handler: PluginFn, config?: Partial<Config>): PluginWithConfig;\ndeclare namespace createPlugin {\n    var withOptions: <T>(pluginFunction: (options?: T) => PluginFn, configFunction?: (options?: T) => Partial<Config>) => PluginWithOptions<T>;\n}\n\nexport { createPlugin as default };\n"
        }
    ]
}