{
    "sourceFile": "node_modules/tailwindcss/dist/resolve-config-QUZ9b-Gn.d.mts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893049287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import _default from './colors.mjs';\n\ntype ArbitraryUtilityValue = {\n    kind: 'arbitrary';\n    /**\n     * ```\n     * bg-[color:var(--my-color)]\n     *     ^^^^^\n     *\n     * bg-(color:--my-color)\n     *     ^^^^^\n     * ```\n     */\n    dataType: string | null;\n    /**\n     * ```\n     * bg-[#0088cc]\n     *     ^^^^^^^\n     *\n     * bg-[var(--my_variable)]\n     *     ^^^^^^^^^^^^^^^^^^\n     *\n     * bg-(--my_variable)\n     *     ^^^^^^^^^^^^^^\n     * ```\n     */\n    value: string;\n};\ntype NamedUtilityValue = {\n    kind: 'named';\n    /**\n     * ```\n     * bg-red-500\n     *    ^^^^^^^\n     *\n     * w-1/2\n     *   ^\n     * ```\n     */\n    value: string;\n    /**\n     * ```\n     * w-1/2\n     *   ^^^\n     * ```\n     */\n    fraction: string | null;\n};\ntype ArbitraryModifier = {\n    kind: 'arbitrary';\n    /**\n     * ```\n     * bg-red-500/[50%]\n     *             ^^^\n     * ```\n     */\n    value: string;\n};\ntype NamedModifier = {\n    kind: 'named';\n    /**\n     * ```\n     * bg-red-500/50\n     *            ^^\n     * ```\n     */\n    value: string;\n};\ntype ArbitraryVariantValue = {\n    kind: 'arbitrary';\n    value: string;\n};\ntype NamedVariantValue = {\n    kind: 'named';\n    value: string;\n};\ntype Variant = \n/**\n * Arbitrary variants are variants that take a selector and generate a variant\n * on the fly.\n *\n * E.g.: `[&_p]`\n */\n{\n    kind: 'arbitrary';\n    selector: string;\n    relative: boolean;\n}\n/**\n * Static variants are variants that don't take any arguments.\n *\n * E.g.: `hover`\n */\n | {\n    kind: 'static';\n    root: string;\n}\n/**\n * Functional variants are variants that can take an argument. The argument is\n * either a named variant value or an arbitrary variant value.\n *\n * E.g.:\n *\n * - `aria-disabled`\n * - `aria-[disabled]`\n * - `@container-size`          -> @container, with named value `size`\n * - `@container-[inline-size]` -> @container, with arbitrary variant value `inline-size`\n * - `@container`               -> @container, with no value\n */\n | {\n    kind: 'functional';\n    root: string;\n    value: ArbitraryVariantValue | NamedVariantValue | null;\n    modifier: ArbitraryModifier | NamedModifier | null;\n}\n/**\n * Compound variants are variants that take another variant as an argument.\n *\n * E.g.:\n *\n * - `has-[&_p]`\n * - `group-*`\n * - `peer-*`\n */\n | {\n    kind: 'compound';\n    root: string;\n    modifier: ArbitraryModifier | NamedModifier | null;\n    variant: Variant;\n};\ntype Candidate = \n/**\n * Arbitrary candidates are candidates that register utilities on the fly with\n * a property and a value.\n *\n * E.g.:\n *\n * - `[color:red]`\n * - `[color:red]/50`\n * - `[color:red]/50!`\n */\n{\n    kind: 'arbitrary';\n    property: string;\n    value: string;\n    modifier: ArbitraryModifier | NamedModifier | null;\n    variants: Variant[];\n    important: boolean;\n    raw: string;\n}\n/**\n * Static candidates are candidates that don't take any arguments.\n *\n * E.g.:\n *\n * - `underline`\n * - `box-border`\n */\n | {\n    kind: 'static';\n    root: string;\n    variants: Variant[];\n    important: boolean;\n    raw: string;\n}\n/**\n * Functional candidates are candidates that can take an argument.\n *\n * E.g.:\n *\n * - `bg-red-500`\n * - `bg-[#0088cc]`\n * - `w-1/2`\n */\n | {\n    kind: 'functional';\n    root: string;\n    value: ArbitraryUtilityValue | NamedUtilityValue | null;\n    modifier: ArbitraryModifier | NamedModifier | null;\n    variants: Variant[];\n    important: boolean;\n    raw: string;\n};\n\ntype PluginUtils = {\n    theme: (keypath: string, defaultValue?: any) => any;\n    colors: typeof _default;\n};\n\nexport type { Candidate as C, NamedUtilityValue as N, PluginUtils as P, Variant as V };\n"
        }
    ]
}