{
    "sourceFile": "node_modules/get-proto/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892316236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\n\nvar getProto = require('../');\n\ntest('getProto', function (t) {\n\tt.equal(typeof getProto, 'function', 'is a function');\n\n\tt.test('can get', { skip: !getProto }, function (st) {\n\t\tif (getProto) { // TS doesn't understand tape's skip\n\t\t\tvar proto = { b: 2 };\n\t\t\tst.equal(getProto(proto), Object.prototype, 'proto: returns the [[Prototype]]');\n\n\t\t\tst.test('nullish value', function (s2t) {\n\t\t\t// @ts-expect-error\n\t\t\t\ts2t['throws'](function () { return getProto(undefined); }, TypeError, 'undefined is not an object');\n\t\t\t\t// @ts-expect-error\n\t\t\t\ts2t['throws'](function () { return getProto(null); }, TypeError, 'null is not an object');\n\t\t\t\ts2t.end();\n\t\t\t});\n\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(true); }, 'throws for true');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(false); }, 'throws for false');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(42); }, 'throws for 42');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(NaN); }, 'throws for NaN');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(0); }, 'throws for +0');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(-0); }, 'throws for -0');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(Infinity); }, 'throws for ∞');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(-Infinity); }, 'throws for -∞');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto(''); }, 'throws for empty string');\n\t\t\t// @ts-expect-error\n\t\t\tst['throws'](function () { getProto('foo'); }, 'throws for non-empty string');\n\t\t\tst.equal(getProto(/a/g), RegExp.prototype);\n\t\t\tst.equal(getProto(new Date()), Date.prototype);\n\t\t\tst.equal(getProto(function () {}), Function.prototype);\n\t\t\tst.equal(getProto([]), Array.prototype);\n\t\t\tst.equal(getProto({}), Object.prototype);\n\n\t\t\tvar nullObject = { __proto__: null };\n\t\t\tif ('toString' in nullObject) {\n\t\t\t\tst.comment('no null objects in this engine');\n\t\t\t\tst.equal(getProto(nullObject), Object.prototype, '\"null\" object has Object.prototype as [[Prototype]]');\n\t\t\t} else {\n\t\t\t\tst.equal(getProto(nullObject), null, 'null object has null [[Prototype]]');\n\t\t\t}\n\t\t}\n\n\t\tst.end();\n\t});\n\n\tt.test('can not get', { skip: !!getProto }, function (st) {\n\t\tst.equal(getProto, null);\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}