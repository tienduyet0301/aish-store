{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/previous-map.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892915934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { SourceMapConsumer } from 'source-map-js'\n\nimport { ProcessOptions } from './postcss.js'\n\ndeclare namespace PreviousMap {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { PreviousMap_ as default }\n}\n\n/**\n * Source map information from input CSS.\n * For example, source map after Sass compiler.\n *\n * This class will automatically find source map in input CSS or in file system\n * near input file (according `from` option).\n *\n * ```js\n * const root = parse(css, { from: 'a.sass.css' })\n * root.input.map //=> PreviousMap\n * ```\n */\ndeclare class PreviousMap_ {\n  /**\n   * `sourceMappingURL` content.\n   */\n  annotation?: string\n\n  /**\n   * The CSS source identifier. Contains `Input#file` if the user\n   * set the `from` option, or `Input#id` if they did not.\n   */\n  file?: string\n\n  /**\n   * Was source map inlined by data-uri to input CSS.\n   */\n  inline: boolean\n\n  /**\n   * Path to source map file.\n   */\n  mapFile?: string\n\n  /**\n   * The directory with source map file, if source map is in separated file.\n   */\n  root?: string\n\n  /**\n   * Source map file content.\n   */\n  text?: string\n\n  /**\n   * @param css  Input CSS source.\n   * @param opts Process options.\n   */\n  constructor(css: string, opts?: ProcessOptions)\n\n  /**\n   * Create a instance of `SourceMapGenerator` class\n   * from the `source-map` library to work with source map information.\n   *\n   * It is lazy method, so it will create object only on first call\n   * and then it will use cache.\n   *\n   * @return Object with source map information.\n   */\n  consumer(): SourceMapConsumer\n\n  /**\n   * Does source map contains `sourcesContent` with input source text.\n   *\n   * @return Is `sourcesContent` present.\n   */\n  withContent(): boolean\n}\n\ndeclare class PreviousMap extends PreviousMap_ {}\n\nexport = PreviousMap\n"
        }
    ]
}