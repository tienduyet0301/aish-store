{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/declaration.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892914842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Container from './container.js'\nimport Node from './node.js'\n\ndeclare namespace Declaration {\n  export interface DeclarationRaws extends Record<string, unknown> {\n    /**\n     * The space symbols before the node. It also stores `*`\n     * and `_` symbols before the declaration (IE hack).\n     */\n    before?: string\n\n    /**\n     * The symbols between the property and value for declarations.\n     */\n    between?: string\n\n    /**\n     * The content of the important statement, if it is not just `!important`.\n     */\n    important?: string\n\n    /**\n     * Declaration value with comments.\n     */\n    value?: {\n      raw: string\n      value: string\n    }\n  }\n\n  export interface DeclarationProps {\n    /** Whether the declaration has an `!important` annotation. */\n    important?: boolean\n    /** Name of the declaration. */\n    prop: string\n    /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n    raws?: DeclarationRaws\n    /** Value of the declaration. */\n    value: string\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Declaration_ as default }\n}\n\n/**\n * It represents a class that handles\n * [CSS declarations](https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#css_declarations)\n *\n * ```js\n * Once (root, { Declaration }) {\n *   const color = new Declaration({ prop: 'color', value: 'black' })\n *   root.append(color)\n * }\n * ```\n *\n * ```js\n * const root = postcss.parse('a { color: black }')\n * const decl = root.first?.first\n *\n * decl.type       //=> 'decl'\n * decl.toString() //=> ' color: black'\n * ```\n */\ndeclare class Declaration_ extends Node {\n  /**\n   * It represents a specificity of the declaration.\n   *\n   * If true, the CSS declaration will have an\n   * [important](https://developer.mozilla.org/en-US/docs/Web/CSS/important)\n   * specifier.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black !important; color: red }')\n   *\n   * root.first.first.important //=> true\n   * root.first.last.important  //=> undefined\n   * ```\n   */\n  important: boolean\n\n  parent: Container | undefined\n\n  /**\n   * The property name for a CSS declaration.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   *\n   * decl.prop //=> 'color'\n   * ```\n   */\n  prop: string\n\n  raws: Declaration.DeclarationRaws\n\n  type: 'decl'\n\n  /**\n   * The property value for a CSS declaration.\n   *\n   * Any CSS comments inside the value string will be filtered out.\n   * CSS comments present in the source value will be available in\n   * the `raws` property.\n   *\n   * Assigning new `value` would ignore the comments in `raws`\n   * property while compiling node to string.\n   *\n   * ```js\n   * const root = postcss.parse('a { color: black }')\n   * const decl = root.first.first\n   *\n   * decl.value //=> 'black'\n   * ```\n   */\n  value: string\n\n  /**\n   * It represents a getter that returns `true` if a declaration starts with\n   * `--` or `$`, which are used to declare variables in CSS and SASS/SCSS.\n   *\n   * ```js\n   * const root = postcss.parse(':root { --one: 1 }')\n   * const one = root.first.first\n   *\n   * one.variable //=> true\n   * ```\n   *\n   * ```js\n   * const root = postcss.parse('$one: 1')\n   * const one = root.first\n   *\n   * one.variable //=> true\n   * ```\n   */\n  variable: boolean\n\n  constructor(defaults?: Declaration.DeclarationProps)\n  assign(overrides: Declaration.DeclarationProps | object): this\n  clone(overrides?: Partial<Declaration.DeclarationProps>): Declaration\n  cloneAfter(overrides?: Partial<Declaration.DeclarationProps>): Declaration\n  cloneBefore(overrides?: Partial<Declaration.DeclarationProps>): Declaration\n}\n\ndeclare class Declaration extends Declaration_ {}\n\nexport = Declaration\n"
        }
    ]
}