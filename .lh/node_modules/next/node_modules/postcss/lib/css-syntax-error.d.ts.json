{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/css-syntax-error.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892914726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { FilePosition } from './input.js'\n\ndeclare namespace CssSyntaxError {\n  /**\n   * A position that is part of a range.\n   */\n  export interface RangePosition {\n    /**\n     * The column number in the input.\n     */\n    column: number\n\n    /**\n     * The line number in the input.\n     */\n    line: number\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { CssSyntaxError_ as default }\n}\n\n/**\n * The CSS parser throws this error for broken CSS.\n *\n * Custom parsers can throw this error for broken custom syntax using\n * the `Node#error` method.\n *\n * PostCSS will use the input source map to detect the original error location.\n * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,\n * PostCSS will show the original position in the Sass file.\n *\n * If you need the position in the PostCSS input\n * (e.g., to debug the previous compiler), use `error.input.file`.\n *\n * ```js\n * // Raising error from plugin\n * throw node.error('Unknown variable', { plugin: 'postcss-vars' })\n * ```\n *\n * ```js\n * // Catching and checking syntax error\n * try {\n *   postcss.parse('a{')\n * } catch (error) {\n *   if (error.name === 'CssSyntaxError') {\n *     error //=> CssSyntaxError\n *   }\n * }\n * ```\n */\ndeclare class CssSyntaxError_ {\n  /**\n   * Source column of the error.\n   *\n   * ```js\n   * error.column       //=> 1\n   * error.input.column //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.column`.\n   */\n  column?: number\n\n  /**\n   * Source column of the error's end, exclusive. Provided if the error pertains\n   * to a range.\n   *\n   * ```js\n   * error.endColumn       //=> 1\n   * error.input.endColumn //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.endColumn`.\n   */\n  endColumn?: number\n\n  /**\n   * Source line of the error's end, exclusive. Provided if the error pertains\n   * to a range.\n   *\n   * ```js\n   * error.endLine       //=> 3\n   * error.input.endLine //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.endLine`.\n   */\n  endLine?: number\n\n  /**\n   * Absolute path to the broken file.\n   *\n   * ```js\n   * error.file       //=> 'a.sass'\n   * error.input.file //=> 'a.css'\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.file`.\n   */\n  file?: string\n\n  /**\n   * Input object with PostCSS internal information\n   * about input file. If input has source map\n   * from previous tool, PostCSS will use origin\n   * (for example, Sass) source. You can use this\n   * object to get PostCSS input source.\n   *\n   * ```js\n   * error.input.file //=> 'a.css'\n   * error.file       //=> 'a.sass'\n   * ```\n   */\n  input?: FilePosition\n\n  /**\n   * Source line of the error.\n   *\n   * ```js\n   * error.line       //=> 2\n   * error.input.line //=> 4\n   * ```\n   *\n   * PostCSS will use the input source map to detect the original location.\n   * If you need the position in the PostCSS input, use `error.input.line`.\n   */\n  line?: number\n\n  /**\n   * Full error text in the GNU error format\n   * with plugin, file, line and column.\n   *\n   * ```js\n   * error.message //=> 'a.css:1:1: Unclosed block'\n   * ```\n   */\n  message: string\n\n  /**\n   * Always equal to `'CssSyntaxError'`. You should always check error type\n   * by `error.name === 'CssSyntaxError'`\n   * instead of `error instanceof CssSyntaxError`,\n   * because npm could have several PostCSS versions.\n   *\n   * ```js\n   * if (error.name === 'CssSyntaxError') {\n   *   error //=> CssSyntaxError\n   * }\n   * ```\n   */\n  name: 'CssSyntaxError'\n\n  /**\n   * Plugin name, if error came from plugin.\n   *\n   * ```js\n   * error.plugin //=> 'postcss-vars'\n   * ```\n   */\n  plugin?: string\n\n  /**\n   * Error message.\n   *\n   * ```js\n   * error.message //=> 'Unclosed block'\n   * ```\n   */\n  reason: string\n\n  /**\n   * Source code of the broken file.\n   *\n   * ```js\n   * error.source       //=> 'a { b {} }'\n   * error.input.source //=> 'a b { }'\n   * ```\n   */\n  source?: string\n\n  stack: string\n\n  /**\n   * Instantiates a CSS syntax error. Can be instantiated for a single position\n   * or for a range.\n   * @param message        Error message.\n   * @param lineOrStartPos If for a single position, the line number, or if for\n   *                       a range, the inclusive start position of the error.\n   * @param columnOrEndPos If for a single position, the column number, or if for\n   *                       a range, the exclusive end position of the error.\n   * @param source         Source code of the broken file.\n   * @param file           Absolute path to the broken file.\n   * @param plugin         PostCSS plugin name, if error came from plugin.\n   */\n  constructor(\n    message: string,\n    lineOrStartPos?: CssSyntaxError.RangePosition | number,\n    columnOrEndPos?: CssSyntaxError.RangePosition | number,\n    source?: string,\n    file?: string,\n    plugin?: string\n  )\n\n  /**\n   * Returns a few lines of CSS source that caused the error.\n   *\n   * If the CSS has an input source map without `sourceContent`,\n   * this method will return an empty string.\n   *\n   * ```js\n   * error.showSourceCode() //=> \"  4 | }\n   *                        //      5 | a {\n   *                        //    > 6 |   bad\n   *                        //        |   ^\n   *                        //      7 | }\n   *                        //      8 | b {\"\n   * ```\n   *\n   * @param color Whether arrow will be colored red by terminal\n   *              color codes. By default, PostCSS will detect\n   *              color support by `process.stdout.isTTY`\n   *              and `process.env.NODE_DISABLE_COLORS`.\n   * @return Few lines of CSS source that caused the error.\n   */\n  showSourceCode(color?: boolean): string\n\n  /**\n   * Returns error position, message and source code of the broken part.\n   *\n   * ```js\n   * error.toString() //=> \"CssSyntaxError: app.css:1:1: Unclosed block\n   *                  //    > 1 | a {\n   *                  //        | ^\"\n   * ```\n   *\n   * @return Error position, message and source code.\n   */\n  toString(): string\n}\n\ndeclare class CssSyntaxError extends CssSyntaxError_ {}\n\nexport = CssSyntaxError\n"
        }
    ]
}