{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/no-work-result.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892915559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import LazyResult from './lazy-result.js'\nimport { SourceMap } from './postcss.js'\nimport Processor from './processor.js'\nimport Result, { Message, ResultOptions } from './result.js'\nimport Root from './root.js'\nimport Warning from './warning.js'\n\ndeclare namespace NoWorkResult {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { NoWorkResult_ as default }\n}\n\n/**\n * A Promise proxy for the result of PostCSS transformations.\n * This lazy result instance doesn't parse css unless `NoWorkResult#root` or `Result#root`\n * are accessed. See the example below for details.\n * A `NoWork` instance is returned by `Processor#process` ONLY when no plugins defined.\n *\n * ```js\n * const noWorkResult = postcss().process(css) // No plugins are defined.\n *                                             // CSS is not parsed\n * let root = noWorkResult.root // now css is parsed because we accessed the root\n * ```\n */\ndeclare class NoWorkResult_ implements LazyResult<Root> {\n  catch: Promise<Result<Root>>['catch']\n  finally: Promise<Result<Root>>['finally']\n  then: Promise<Result<Root>>['then']\n  constructor(processor: Processor, css: string, opts: ResultOptions)\n  async(): Promise<Result<Root>>\n  sync(): Result<Root>\n  toString(): string\n  warnings(): Warning[]\n  get content(): string\n  get css(): string\n  get map(): SourceMap\n  get messages(): Message[]\n  get opts(): ResultOptions\n  get processor(): Processor\n  get root(): Root\n  get [Symbol.toStringTag](): string\n}\n\ndeclare class NoWorkResult extends NoWorkResult_ {}\n\nexport = NoWorkResult\n"
        }
    ]
}