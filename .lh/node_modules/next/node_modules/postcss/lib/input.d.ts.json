{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/input.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892915130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { CssSyntaxError, ProcessOptions } from './postcss.js'\nimport PreviousMap from './previous-map.js'\n\ndeclare namespace Input {\n  export interface FilePosition {\n    /**\n     * Column of inclusive start position in source file.\n     */\n    column: number\n\n    /**\n     * Column of exclusive end position in source file.\n     */\n    endColumn?: number\n\n    /**\n     * Line of exclusive end position in source file.\n     */\n    endLine?: number\n\n    /**\n     * Absolute path to the source file.\n     */\n    file?: string\n\n    /**\n     * Line of inclusive start position in source file.\n     */\n    line: number\n\n    /**\n     * Source code.\n     */\n    source?: string\n\n    /**\n     * URL for the source file.\n     */\n    url: string\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Input_ as default }\n}\n\n/**\n * Represents the source CSS.\n *\n * ```js\n * const root  = postcss.parse(css, { from: file })\n * const input = root.source.input\n * ```\n */\ndeclare class Input_ {\n  /**\n   * Input CSS source.\n   *\n   * ```js\n   * const input = postcss.parse('a{}', { from: file }).input\n   * input.css //=> \"a{}\"\n   * ```\n   */\n  css: string\n\n  /**\n   * The absolute path to the CSS source file defined\n   * with the `from` option.\n   *\n   * ```js\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.file //=> '/home/ai/a.css'\n   * ```\n   */\n  file?: string\n\n  /**\n   * The flag to indicate whether or not the source code has Unicode BOM.\n   */\n  hasBOM: boolean\n\n  /**\n   * The unique ID of the CSS source. It will be created if `from` option\n   * is not provided (because PostCSS does not know the file path).\n   *\n   * ```js\n   * const root = postcss.parse(css)\n   * root.source.input.file //=> undefined\n   * root.source.input.id   //=> \"<input css 8LZeVF>\"\n   * ```\n   */\n  id?: string\n\n  /**\n   * The input source map passed from a compilation step before PostCSS\n   * (for example, from Sass compiler).\n   *\n   * ```js\n   * root.source.input.map.consumer().sources //=> ['a.sass']\n   * ```\n   */\n  map: PreviousMap\n\n  /**\n   * @param css  Input CSS source.\n   * @param opts Process options.\n   */\n  constructor(css: string, opts?: ProcessOptions)\n\n  error(\n    message: string,\n    start:\n      | {\n          column: number\n          line: number\n        }\n      | {\n          offset: number\n        },\n    end:\n      | {\n          column: number\n          line: number\n        }\n      | {\n          offset: number\n        },\n    opts?: { plugin?: CssSyntaxError['plugin'] }\n  ): CssSyntaxError\n\n  /**\n   * Returns `CssSyntaxError` with information about the error and its position.\n   */\n  error(\n    message: string,\n    line: number,\n    column: number,\n    opts?: { plugin?: CssSyntaxError['plugin'] }\n  ): CssSyntaxError\n\n  error(\n    message: string,\n    offset: number,\n    opts?: { plugin?: CssSyntaxError['plugin'] }\n  ): CssSyntaxError\n\n  /**\n   * Converts source offset to line and column.\n   *\n   * @param offset Source offset.\n   */\n  fromOffset(offset: number): { col: number; line: number } | null\n  /**\n   * Reads the input source map and returns a symbol position\n   * in the input source (e.g., in a Sass file that was compiled\n   * to CSS before being passed to PostCSS). Optionally takes an\n   * end position, exclusive.\n   *\n   * ```js\n   * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }\n   * root.source.input.origin(1, 1, 1, 4)\n   * //=> { file: 'a.css', line: 3, column: 1, endLine: 3, endColumn: 4 }\n   * ```\n   *\n   * @param line      Line for inclusive start position in input CSS.\n   * @param column    Column for inclusive start position in input CSS.\n   * @param endLine   Line for exclusive end position in input CSS.\n   * @param endColumn Column for exclusive end position in input CSS.\n   *\n   * @return Position in input source.\n   */\n  origin(\n    line: number,\n    column: number,\n    endLine?: number,\n    endColumn?: number\n  ): false | Input.FilePosition\n  /**\n   * The CSS source identifier. Contains `Input#file` if the user\n   * set the `from` option, or `Input#id` if they did not.\n   *\n   * ```js\n   * const root = postcss.parse(css, { from: 'a.css' })\n   * root.source.input.from //=> \"/home/ai/a.css\"\n   *\n   * const root = postcss.parse(css)\n   * root.source.input.from //=> \"<input css 1>\"\n   * ```\n   */\n  get from(): string\n}\n\ndeclare class Input extends Input_ {}\n\nexport = Input\n"
        }
    ]
}