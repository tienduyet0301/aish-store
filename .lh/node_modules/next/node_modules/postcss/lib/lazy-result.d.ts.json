{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/lazy-result.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892915275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Document from './document.js'\nimport { SourceMap } from './postcss.js'\nimport Processor from './processor.js'\nimport Result, { Message, ResultOptions } from './result.js'\nimport Root from './root.js'\nimport Warning from './warning.js'\n\ndeclare namespace LazyResult {\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { LazyResult_ as default }\n}\n\n/**\n * A Promise proxy for the result of PostCSS transformations.\n *\n * A `LazyResult` instance is returned by `Processor#process`.\n *\n * ```js\n * const lazy = postcss([autoprefixer]).process(css)\n * ```\n */\ndeclare class LazyResult_<RootNode = Document | Root>\n  implements PromiseLike<Result<RootNode>>\n{\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls onRejected for each error thrown in any plugin.\n   *\n   * It implements standard Promise API.\n   *\n   * ```js\n   * postcss([autoprefixer]).process(css).then(result => {\n   *   console.log(result.css)\n   * }).catch(error => {\n   *   console.error(error)\n   * })\n   * ```\n   */\n  catch: Promise<Result<RootNode>>['catch']\n\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls onFinally on any error or when all plugins will finish work.\n   *\n   * It implements standard Promise API.\n   *\n   * ```js\n   * postcss([autoprefixer]).process(css).finally(() => {\n   *   console.log('processing ended')\n   * })\n   * ```\n   */\n  finally: Promise<Result<RootNode>>['finally']\n\n  /**\n   * Processes input CSS through synchronous and asynchronous plugins\n   * and calls `onFulfilled` with a Result instance. If a plugin throws\n   * an error, the `onRejected` callback will be executed.\n   *\n   * It implements standard Promise API.\n   *\n   * ```js\n   * postcss([autoprefixer]).process(css, { from: cssPath }).then(result => {\n   *   console.log(result.css)\n   * })\n   * ```\n   */\n  then: Promise<Result<RootNode>>['then']\n\n  /**\n   * @param processor Processor used for this transformation.\n   * @param css       CSS to parse and transform.\n   * @param opts      Options from the `Processor#process` or `Root#toResult`.\n   */\n  constructor(processor: Processor, css: string, opts: ResultOptions)\n\n  /**\n   * Run plugin in async way and return `Result`.\n   *\n   * @return Result with output content.\n   */\n  async(): Promise<Result<RootNode>>\n\n  /**\n   * Run plugin in sync way and return `Result`.\n   *\n   * @return Result with output content.\n   */\n  sync(): Result<RootNode>\n\n  /**\n   * Alias for the `LazyResult#css` property.\n   *\n   * ```js\n   * lazy + '' === lazy.css\n   * ```\n   *\n   * @return Output CSS.\n   */\n  toString(): string\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and calls `Result#warnings`.\n   *\n   * @return Warnings from plugins.\n   */\n  warnings(): Warning[]\n\n  /**\n   * An alias for the `css` property. Use it with syntaxes\n   * that generate non-CSS output.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get content(): string\n\n  /**\n   * Processes input CSS through synchronous plugins, converts `Root`\n   * to a CSS string and returns `Result#css`.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get css(): string\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns `Result#map`.\n   *\n   * This property will only work with synchronous plugins.\n   * If the processor contains any asynchronous plugins\n   * it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get map(): SourceMap\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns `Result#messages`.\n   *\n   * This property will only work with synchronous plugins. If the processor\n   * contains any asynchronous plugins it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get messages(): Message[]\n\n  /**\n   * Options from the `Processor#process` call.\n   */\n  get opts(): ResultOptions\n\n  /**\n   * Returns a `Processor` instance, which will be used\n   * for CSS transformations.\n   */\n  get processor(): Processor\n\n  /**\n   * Processes input CSS through synchronous plugins\n   * and returns `Result#root`.\n   *\n   * This property will only work with synchronous plugins. If the processor\n   * contains any asynchronous plugins it will throw an error.\n   *\n   * PostCSS runners should always use `LazyResult#then`.\n   */\n  get root(): RootNode\n\n  /**\n   * Returns the default string description of an object.\n   * Required to implement the Promise interface.\n   */\n  get [Symbol.toStringTag](): string\n}\n\ndeclare class LazyResult<\n  RootNode = Document | Root\n> extends LazyResult_<RootNode> {}\n\nexport = LazyResult\n"
        }
    ]
}