{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/comment.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892914532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Container from './container.js'\nimport Node, { NodeProps } from './node.js'\n\ndeclare namespace Comment {\n  export interface CommentRaws extends Record<string, unknown> {\n    /**\n     * The space symbols before the node.\n     */\n    before?: string\n\n    /**\n     * The space symbols between `/*` and the comment’s text.\n     */\n    left?: string\n\n    /**\n     * The space symbols between the comment’s text.\n     */\n    right?: string\n  }\n\n  export interface CommentProps extends NodeProps {\n    /** Information used to generate byte-to-byte equal node string as it was in the origin input. */\n    raws?: CommentRaws\n    /** Content of the comment. */\n    text: string\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Comment_ as default }\n}\n\n/**\n * It represents a class that handles\n * [CSS comments](https://developer.mozilla.org/en-US/docs/Web/CSS/Comments)\n *\n * ```js\n * Once (root, { Comment }) {\n *   const note = new Comment({ text: 'Note: …' })\n *   root.append(note)\n * }\n * ```\n *\n * Remember that CSS comments inside selectors, at-rule parameters,\n * or declaration values will be stored in the `raws` properties\n * explained above.\n */\ndeclare class Comment_ extends Node {\n  parent: Container | undefined\n  raws: Comment.CommentRaws\n  /**\n   * The comment's text.\n   */\n  text: string\n\n  type: 'comment'\n\n  constructor(defaults?: Comment.CommentProps)\n  assign(overrides: Comment.CommentProps | object): this\n  clone(overrides?: Partial<Comment.CommentProps>): Comment\n  cloneAfter(overrides?: Partial<Comment.CommentProps>): Comment\n  cloneBefore(overrides?: Partial<Comment.CommentProps>): Comment\n}\n\ndeclare class Comment extends Comment_ {}\n\nexport = Comment\n"
        }
    ]
}