{
    "sourceFile": "node_modules/next/node_modules/postcss/lib/warning.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892916421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { RangePosition } from './css-syntax-error.js'\nimport Node from './node.js'\n\ndeclare namespace Warning {\n  export interface WarningOptions {\n    /**\n     * End position, exclusive, in CSS node string that caused the warning.\n     */\n    end?: RangePosition\n\n    /**\n     * End index, exclusive, in CSS node string that caused the warning.\n     */\n    endIndex?: number\n\n    /**\n     * Start index, inclusive, in CSS node string that caused the warning.\n     */\n    index?: number\n\n    /**\n     * CSS node that caused the warning.\n     */\n    node?: Node\n\n    /**\n     * Name of the plugin that created this warning. `Result#warn` fills\n     * this property automatically.\n     */\n    plugin?: string\n\n    /**\n     * Start position, inclusive, in CSS node string that caused the warning.\n     */\n    start?: RangePosition\n\n    /**\n     * Word in CSS source that caused the warning.\n     */\n    word?: string\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  export { Warning_ as default }\n}\n\n/**\n * Represents a plugin’s warning. It can be created using `Node#warn`.\n *\n * ```js\n * if (decl.important) {\n *   decl.warn(result, 'Avoid !important', { word: '!important' })\n * }\n * ```\n */\ndeclare class Warning_ {\n  /**\n   * Column for inclusive start position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.column //=> 6\n   * ```\n   */\n  column: number\n\n  /**\n   * Column for exclusive end position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.endColumn //=> 4\n   * ```\n   */\n  endColumn?: number\n\n  /**\n   * Line for exclusive end position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.endLine //=> 6\n   * ```\n   */\n  endLine?: number\n\n  /**\n   * Line for inclusive start position in the input file with this warning’s source.\n   *\n   * ```js\n   * warning.line //=> 5\n   * ```\n   */\n  line: number\n\n  /**\n   * Contains the CSS node that caused the warning.\n   *\n   * ```js\n   * warning.node.toString() //=> 'color: white !important'\n   * ```\n   */\n  node: Node\n\n  /**\n   * The name of the plugin that created this warning.\n   * When you call `Node#warn` it will fill this property automatically.\n   *\n   * ```js\n   * warning.plugin //=> 'postcss-important'\n   * ```\n   */\n  plugin: string\n\n  /**\n   * The warning message.\n   *\n   * ```js\n   * warning.text //=> 'Try to avoid !important'\n   * ```\n   */\n  text: string\n\n  /**\n   * Type to filter warnings from `Result#messages`.\n   * Always equal to `\"warning\"`.\n   */\n  type: 'warning'\n\n  /**\n   * @param text Warning message.\n   * @param opts Warning options.\n   */\n  constructor(text: string, opts?: Warning.WarningOptions)\n\n  /**\n   * Returns a warning position and message.\n   *\n   * ```js\n   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'\n   * ```\n   *\n   * @return Warning position and message.\n   */\n  toString(): string\n}\n\ndeclare class Warning extends Warning_ {}\n\nexport = Warning\n"
        }
    ]
}