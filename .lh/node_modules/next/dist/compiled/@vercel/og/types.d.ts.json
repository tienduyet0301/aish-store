{
    "sourceFile": "node_modules/next/dist/compiled/@vercel/og/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892709971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"node\" />\n/// <reference types=\"react\" />\n/// <reference types=\"node\" />\nimport type { SatoriOptions } from \"next/dist/compiled/@vercel/og/satori\";\nimport type { EmojiType } from './emoji';\nimport type { OutgoingHttpHeader } from 'http';\ndeclare type ImageOptions = {\n    /**\n     * The width of the image.\n     *\n     * @type {number}\n     * @default 1200\n     */\n    width?: number;\n    /**\n     * The height of the image.\n     *\n     * @type {number}\n     * @default 630\n     */\n    height?: number;\n    /**\n     * Display debug information on the image.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    debug?: boolean;\n    /**\n     * A list of fonts to use.\n     *\n     * @type {{ data: ArrayBuffer; name: string; weight?: 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900; style?: 'normal' | 'italic' }[]}\n     * @default Noto Sans Latin Regular.\n     */\n    fonts?: SatoriOptions['fonts'];\n    /**\n     * Using a specific Emoji style. Defaults to `twemoji`.\n     *\n     * @type {EmojiType}\n     * @default 'twemoji'\n     */\n    emoji?: EmojiType;\n};\nexport declare type ImageResponseNodeOptions = ImageOptions & {\n    status?: number;\n    statusText?: string;\n    headers?: OutgoingHttpHeader[];\n};\nexport declare type ImageResponseOptions = ImageOptions & ConstructorParameters<typeof Response>[1];\nexport interface FigmaImageResponseProps {\n    /**\n     * Link to the Figma template frame.\n     *\n     * You can get the URL in Figma by right-clicking a frame and selecting \"Copy link\".\n     * @example https://www.figma.com/file/QjGNQixWnhu300e1Xzdl2y/OG-Images?type=design&node-id=11356-2443&mode=design&t=yLROd7ro8mP1PxMY-4\n     */\n    url: string;\n    /**\n     * A mapping between Figma layer name and the value you want to replace it with.\n     *\n     * @example Sets Figma text layer named \"Title\" to \"How to create OG Images\"\n     * ```js\n     *  { \"Title\": \"How to create OG Images\" }\n     * ```\n     *\n     * @example Sets multiple Figma text layers and provides custom styles\n     * ```js\n     * {\n     *   \"Title\": { value: \"How to create OG Images\", props: { color: \"red\", centerHorizontally: true } },\n     *   \"Description\": { value: \"A short story\", props: { centerHorizontally: true } },\n     * }\n     * ```\n     *\n     * `centerHorizontally` centers text layer horizontally.\n     */\n    template: Record<string, FigmaComplexTemplate | string>;\n    /**\n     * The font names must match the font names in Figma.\n     */\n    fonts?: FontOptions[];\n    /**\n     * The same as {@link ImageResponseOptions} except `width` and `height`. `width` and `height` are automatically set from the Figma frame's size.\n     */\n    imageResponseOptions?: Omit<ImageResponseOptions, 'width' | 'height'>;\n}\nexport interface FigmaComplexTemplate {\n    value: string;\n    props?: {\n        centerHorizontally?: boolean;\n    } & React.CSSProperties;\n}\ndeclare type Weight = 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\ndeclare type Style = 'normal' | 'italic';\ninterface FontOptions {\n    data: Buffer | ArrayBuffer;\n    name: string;\n    weight?: Weight;\n    style?: Style;\n    lang?: string;\n}\ndeclare module 'react' {\n    interface HTMLAttributes<T> {\n        /**\n         * Specify styles using Tailwind CSS classes. This feature is currently experimental.\n         * If `style` prop is also specified, styles generated with `tw` prop will be overridden.\n         *\n         * Example:\n         * - `tw='w-full h-full bg-blue-200'`\n         * - `tw='text-9xl'`\n         * - `tw='text-[80px]'`\n         *\n         * @type {string}\n         */\n        tw?: string;\n    }\n}\nexport {};\n"
        }
    ]
}