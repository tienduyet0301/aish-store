{
    "sourceFile": "node_modules/next/dist/compiled/@vercel/og/index.node.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892709534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"node\" />\nimport type { ReactElement } from 'react';\nimport type { ImageResponseNodeOptions, ImageResponseOptions, FigmaImageResponseProps } from './types';\nimport { Readable } from 'stream';\nexport declare class ImageResponse extends Response {\n    constructor(element: ReactElement, options?: ImageResponseOptions);\n}\n/**\n * Creates a pipeable stream of the rendered image in a lambda function.\n * All parameters are the same as `ImageResponse`.\n * @example\n * ```js\n * import { unstable_createNodejsStream } from '@vercel/og'\n *\n * export default async (req, res) => {\n *   const stream = await unstable_createNodejsStream(<div>Hello World</div>, { ... })\n *   res.setHeader('Content-Type', 'image/png')\n *   res.setHeader('Cache-Control', 'public, max-age=31536000, immutable')\n *   res.statusCode = 200\n *   res.statusMessage = 'OK'\n *   stream.pipe(res)\n * }\n * ```\n */\nexport declare function unstable_createNodejsStream(element: ReactElement, options?: Omit<ImageResponseNodeOptions, 'status' | 'statusText' | 'headers'>): Promise<Readable>;\nexport declare const experimental_FigmaImageResponse: (props: FigmaImageResponseProps) => Promise<import(\"./index.edge\").ImageResponse>;\nexport declare type NodeImageResponse = typeof ImageResponse;\n"
        }
    ]
}