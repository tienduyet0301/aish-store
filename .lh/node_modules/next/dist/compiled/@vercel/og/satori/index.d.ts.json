{
    "sourceFile": "node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892709907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { ReactNode } from 'react';\ntype Yoga = any;\n\ndeclare const code: {\n    readonly 'ja-JP': RegExp;\n    readonly 'ko-KR': RegExp;\n    readonly 'zh-CN': RegExp;\n    readonly 'zh-TW': RegExp;\n    readonly 'zh-HK': RegExp;\n    readonly 'th-TH': RegExp;\n    readonly 'bn-IN': RegExp;\n    readonly 'ar-AR': RegExp;\n    readonly 'ta-IN': RegExp;\n    readonly 'ml-IN': RegExp;\n    readonly 'he-IL': RegExp;\n    readonly 'te-IN': RegExp;\n    readonly devanagari: RegExp;\n    readonly kannada: RegExp;\n};\ntype Locale = keyof typeof code;\n\n/**\n * This class handles everything related to fonts.\n */\n\ntype Weight = 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\ntype FontStyle = 'normal' | 'italic';\ninterface FontOptions {\n    data: Buffer | ArrayBuffer;\n    name: string;\n    weight?: Weight;\n    style?: FontStyle;\n    lang?: string;\n}\n\ndeclare type Style = {\n    [key: string]: string[] | string | number | boolean | Style;\n};\ndeclare type NotImplemented = (...args: any) => unknown;\ndeclare type AddedUtilities = Record<string, Style | string>;\ndeclare type PluginFunction = (obj: {\n    addUtilities(utilities: AddedUtilities): unknown;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    addComponents: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    addBase: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    addVariant: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    e: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    prefix: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    theme: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    variants: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    config: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    corePlugins: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    matchUtilities: NotImplemented;\n    /**\n     * @deprecated not supported in @jaredh159/twrn\n     */\n    postcss: unknown;\n}) => unknown;\n\ndeclare type TwFontSize = string | [string, string] | [string, {\n    lineHeight?: string;\n    letterSpacing?: string;\n}];\ndeclare type TwScreen = string | {\n    max?: string;\n    min?: string;\n};\ndeclare type TwColors<K extends keyof any = string, V = string> = {\n    [key: string]: V | TwColors<K, V>;\n};\ninterface TwTheme {\n    fontSize?: Record<string, TwFontSize>;\n    lineHeight?: Record<string, string>;\n    spacing?: Record<string, string>;\n    padding?: Record<string, string>;\n    margin?: Record<string, string>;\n    inset?: Record<string, string>;\n    height?: Record<string, string>;\n    width?: Record<string, string>;\n    maxWidth?: Record<string, string>;\n    maxHeight?: Record<string, string>;\n    minWidth?: Record<string, string>;\n    minHeight?: Record<string, string>;\n    letterSpacing?: Record<string, string>;\n    borderWidth?: Record<string, string>;\n    borderRadius?: Record<string, string>;\n    screens?: Record<string, TwScreen>;\n    opacity?: Record<string, number | string>;\n    flex?: Record<string, string>;\n    flexGrow?: Record<string, number | string>;\n    flexShrink?: Record<string, number | string>;\n    fontWeight?: Record<string, number | string>;\n    fontFamily?: Record<string, string | string[]>;\n    zIndex?: Record<string, number | string>;\n    colors?: TwColors;\n    backgroundColor?: TwColors;\n    borderColor?: TwColors;\n    textColor?: TwColors;\n    extend?: Omit<TwTheme, 'extend'>;\n}\ninterface TwConfig {\n    theme?: TwTheme;\n    plugins?: Array<{\n        handler: PluginFunction;\n    }>;\n}\n\n/**\n * This module is used to calculate the layout of the current sub-tree.\n */\n\ninterface SatoriNode {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n    type: string;\n    key?: string | number;\n    props: Record<string, any>;\n    textContent?: string;\n}\n\ndeclare function init(yoga: Yoga): void;\n\ntype SatoriOptions = ({\n    width: number;\n    height: number;\n} | {\n    width: number;\n} | {\n    height: number;\n}) & {\n    fonts: FontOptions[];\n    embedFont?: boolean;\n    debug?: boolean;\n    graphemeImages?: Record<string, string>;\n    loadAdditionalAsset?: (languageCode: string, segment: string) => Promise<string | Array<FontOptions>>;\n    tailwindConfig?: TwConfig;\n    onNodeDetected?: (node: SatoriNode) => void;\n};\n\ndeclare function satori(element: ReactNode, options: SatoriOptions): Promise<string>;\n\nexport { FontOptions as Font, FontStyle, Weight as FontWeight, Locale, SatoriNode, SatoriOptions, satori as default, init };\n"
        }
    ]
}