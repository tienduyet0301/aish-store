{
    "sourceFile": "node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892705708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Basic HTTP cookie parser and serializer for HTTP servers.\n */\n\n/**\n * Additional serialization options\n */\ninterface CookieSerializeOptions {\n    /**\n     * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.3|Domain Set-Cookie attribute}. By default, no\n     * domain is set, and most clients will consider the cookie to apply to only\n     * the current domain.\n     */\n    domain?: string | undefined;\n\n    /**\n     * Specifies a function that will be used to encode a cookie's value. Since\n     * value of a cookie has a limited character set (and must be a simple\n     * string), this function can be used to encode a value into a string suited\n     * for a cookie's value.\n     *\n     * The default function is the global `encodeURIComponent`, which will\n     * encode a JavaScript string into UTF-8 byte sequences and then URL-encode\n     * any that fall outside of the cookie range.\n     */\n    encode?(value: string): string;\n\n    /**\n     * Specifies the `Date` object to be the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.1|`Expires` `Set-Cookie` attribute}. By default,\n     * no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete\n     * it on a condition like exiting a web browser application.\n     *\n     * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n     * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n     * possible not all clients by obey this, so if both are set, they should\n     * point to the same date and time.\n     */\n    expires?: Date | undefined;\n    /**\n     * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.6|`HttpOnly` `Set-Cookie` attribute}.\n     * When truthy, the `HttpOnly` attribute is set, otherwise it is not. By\n     * default, the `HttpOnly` attribute is not set.\n     *\n     * *Note* be careful when setting this to true, as compliant clients will\n     * not allow client-side JavaScript to see the cookie in `document.cookie`.\n     */\n    httpOnly?: boolean | undefined;\n    /**\n     * Specifies the number (in seconds) to be the value for the `Max-Age`\n     * `Set-Cookie` attribute. The given number will be converted to an integer\n     * by rounding down. By default, no maximum age is set.\n     *\n     * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n     * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n     * possible not all clients by obey this, so if both are set, they should\n     * point to the same date and time.\n     */\n    maxAge?: number | undefined;\n    /**\n     * Specifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies)\n     * attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the\n     * `Partitioned` attribute is not set.\n     *\n     * **note** This is an attribute that has not yet been fully standardized, and may change in the future.\n     * This also means many clients may ignore this attribute until they understand it.\n     *\n     * More information about can be found in [the proposal](https://github.com/privacycg/CHIPS)\n     */\n    partitioned?: boolean | undefined;\n    /**\n     * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute}.\n     * By default, the path is considered the \"default path\".\n     */\n    path?: string | undefined;\n    /**\n     * Specifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n     *\n     * - `'low'` will set the `Priority` attribute to `Low`.\n     * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n     * - `'high'` will set the `Priority` attribute to `High`.\n     *\n     * More information about the different priority levels can be found in\n     * [the specification][rfc-west-cookie-priority-00-4.1].\n     *\n     * **note** This is an attribute that has not yet been fully standardized, and may change in the future.\n     * This also means many clients may ignore this attribute until they understand it.\n     */\n    priority?: \"low\" | \"medium\" | \"high\" | undefined;\n    /**\n     * Specifies the boolean or string to be the value for the {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute}.\n     *\n     * - `true` will set the `SameSite` attribute to `Strict` for strict same\n     * site enforcement.\n     * - `false` will not set the `SameSite` attribute.\n     * - `'lax'` will set the `SameSite` attribute to Lax for lax same site\n     * enforcement.\n     * - `'strict'` will set the `SameSite` attribute to Strict for strict same\n     * site enforcement.\n     *  - `'none'` will set the SameSite attribute to None for an explicit\n     *  cross-site cookie.\n     *\n     * More information about the different enforcement levels can be found in {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|the specification}.\n     *\n     * *note* This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n     */\n    sameSite?: true | false | \"lax\" | \"strict\" | \"none\" | undefined;\n    /**\n     * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.5|`Secure` `Set-Cookie` attribute}. When truthy, the\n     * `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n     *\n     * *Note* be careful when setting this to `true`, as compliant clients will\n     * not send the cookie back to the server in the future if the browser does\n     * not have an HTTPS connection.\n     */\n    secure?: boolean | undefined;\n}\n\n/**\n * {@link https://wicg.github.io/cookie-store/#dictdef-cookielistitem CookieListItem}\n * as specified by W3C.\n */\ninterface CookieListItem extends Pick<CookieSerializeOptions, 'domain' | 'path' | 'secure' | 'sameSite' | 'partitioned'> {\n    /** A string with the name of a cookie. */\n    name: string;\n    /** A string containing the value of the cookie. */\n    value: string;\n    /** A number of milliseconds or Date interface containing the expires of the cookie. */\n    expires?: number | CookieSerializeOptions['expires'];\n}\n/**\n * Superset of {@link CookieListItem} extending it with\n * the `httpOnly`, `maxAge` and `priority` properties.\n */\ntype ResponseCookie = CookieListItem & Pick<CookieSerializeOptions, 'httpOnly' | 'maxAge' | 'priority'>;\n/**\n * Subset of {@link CookieListItem}, only containing `name` and `value`\n * since other cookie attributes aren't be available on a `Request`.\n */\ntype RequestCookie = Pick<CookieListItem, 'name' | 'value'>;\n\n/**\n * A class for manipulating {@link Request} cookies (`Cookie` header).\n */\ndeclare class RequestCookies {\n    constructor(requestHeaders: Headers);\n    [Symbol.iterator](): MapIterator<[string, RequestCookie]>;\n    /**\n     * The amount of cookies received from the client\n     */\n    get size(): number;\n    get(...args: [name: string] | [RequestCookie]): RequestCookie | undefined;\n    getAll(...args: [name: string] | [RequestCookie] | []): RequestCookie[];\n    has(name: string): boolean;\n    set(...args: [key: string, value: string] | [options: RequestCookie]): this;\n    /**\n     * Delete the cookies matching the passed name or names in the request.\n     */\n    delete(\n    /** Name or names of the cookies to be deleted  */\n    names: string | string[]): boolean | boolean[];\n    /**\n     * Delete all the cookies in the cookies in the request.\n     */\n    clear(): this;\n    toString(): string;\n}\n\n/**\n * A class for manipulating {@link Response} cookies (`Set-Cookie` header).\n * Loose implementation of the experimental [Cookie Store API](https://wicg.github.io/cookie-store/#dictdef-cookie)\n * The main difference is `ResponseCookies` methods do not return a Promise.\n */\ndeclare class ResponseCookies {\n    constructor(responseHeaders: Headers);\n    /**\n     * {@link https://wicg.github.io/cookie-store/#CookieStore-get CookieStore#get} without the Promise.\n     */\n    get(...args: [key: string] | [options: ResponseCookie]): ResponseCookie | undefined;\n    /**\n     * {@link https://wicg.github.io/cookie-store/#CookieStore-getAll CookieStore#getAll} without the Promise.\n     */\n    getAll(...args: [key: string] | [options: ResponseCookie] | []): ResponseCookie[];\n    has(name: string): boolean;\n    /**\n     * {@link https://wicg.github.io/cookie-store/#CookieStore-set CookieStore#set} without the Promise.\n     */\n    set(...args: [key: string, value: string, cookie?: Partial<ResponseCookie>] | [options: ResponseCookie]): this;\n    /**\n     * {@link https://wicg.github.io/cookie-store/#CookieStore-delete CookieStore#delete} without the Promise.\n     */\n    delete(...args: [key: string] | [options: Omit<ResponseCookie, 'value' | 'expires'>]): this;\n    toString(): string;\n}\n\ndeclare function stringifyCookie(c: ResponseCookie | RequestCookie): string;\n/** Parse a `Cookie` header value */\ndeclare function parseCookie(cookie: string): Map<string, string>;\n/** Parse a `Set-Cookie` header value */\ndeclare function parseSetCookie(setCookie: string): undefined | ResponseCookie;\n\nexport { type CookieListItem, type RequestCookie, RequestCookies, type ResponseCookie, ResponseCookies, parseCookie, parseSetCookie, stringifyCookie };\n"
        }
    ]
}