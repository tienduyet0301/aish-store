{
    "sourceFile": "node_modules/next/dist/compiled/@edge-runtime/primitives/events.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892706057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\ndeclare class EventTarget<TEventMap extends Record<string, Event$1> = Record<string, Event$1>, TMode extends \"standard\" | \"strict\" = \"standard\"> {\n\t/**\n\t * Initialize this instance.\n\t */\n\tconstructor();\n\t/**\n\t * Add an event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param options Options.\n\t */\n\taddEventListener<T extends string & keyof TEventMap>(type: T, callback?: EventTarget.EventListener<this, TEventMap[T]> | null, options?: EventTarget.AddOptions): void;\n\t/**\n\t * Add an event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param options Options.\n\t */\n\taddEventListener(type: string, callback?: EventTarget.FallbackEventListener<this, TMode>, options?: EventTarget.AddOptions): void;\n\t/**\n\t * Add an event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param capture The capture flag.\n\t * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n\t */\n\taddEventListener<T extends string & keyof TEventMap>(type: T, callback: EventTarget.EventListener<this, TEventMap[T]> | null | undefined, capture: boolean): void;\n\t/**\n\t * Add an event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param capture The capture flag.\n\t * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n\t */\n\taddEventListener(type: string, callback: EventTarget.FallbackEventListener<this, TMode>, capture: boolean): void;\n\t/**\n\t * Remove an added event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param options Options.\n\t */\n\tremoveEventListener<T extends string & keyof TEventMap>(type: T, callback?: EventTarget.EventListener<this, TEventMap[T]> | null, options?: EventTarget.Options): void;\n\t/**\n\t * Remove an added event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param options Options.\n\t */\n\tremoveEventListener(type: string, callback?: EventTarget.FallbackEventListener<this, TMode>, options?: EventTarget.Options): void;\n\t/**\n\t * Remove an added event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param capture The capture flag.\n\t * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n\t */\n\tremoveEventListener<T extends string & keyof TEventMap>(type: T, callback: EventTarget.EventListener<this, TEventMap[T]> | null | undefined, capture: boolean): void;\n\t/**\n\t * Remove an added event listener.\n\t * @param type The event type.\n\t * @param callback The event listener.\n\t * @param capture The capture flag.\n\t * @deprecated Use `{capture: boolean}` object instead of a boolean value.\n\t */\n\tremoveEventListener(type: string, callback: EventTarget.FallbackEventListener<this, TMode>, capture: boolean): void;\n\t/**\n\t * Dispatch an event.\n\t * @param event The `Event` object to dispatch.\n\t */\n\tdispatchEvent<T extends string & keyof TEventMap>(event: EventTarget.EventData<TEventMap, TMode, T>): boolean;\n\t/**\n\t * Dispatch an event.\n\t * @param event The `Event` object to dispatch.\n\t */\n\tdispatchEvent(event: EventTarget.FallbackEvent<TMode>): boolean;\n}\ndeclare namespace EventTarget {\n\t/**\n\t * The event listener.\n\t */\n\ttype EventListener<TEventTarget extends EventTarget<any, any>, TEvent extends Event$1> = CallbackFunction<TEventTarget, TEvent> | CallbackObject<TEvent>;\n\t/**\n\t * The event listener function.\n\t */\n\tinterface CallbackFunction<TEventTarget extends EventTarget<any, any>, TEvent extends Event$1> {\n\t\t(this: TEventTarget, event: TEvent): void;\n\t}\n\t/**\n\t * The event listener object.\n\t * @see https://dom.spec.whatwg.org/#callbackdef-eventlistener\n\t */\n\tinterface CallbackObject<TEvent extends Event$1> {\n\t\thandleEvent(event: TEvent): void;\n\t}\n\t/**\n\t * The common options for both `addEventListener` and `removeEventListener` methods.\n\t * @see https://dom.spec.whatwg.org/#dictdef-eventlisteneroptions\n\t */\n\tinterface Options {\n\t\tcapture?: boolean;\n\t}\n\t/**\n\t * The options for the `addEventListener` methods.\n\t * @see https://dom.spec.whatwg.org/#dictdef-addeventlisteneroptions\n\t */\n\tinterface AddOptions extends Options {\n\t\tpassive?: boolean;\n\t\tonce?: boolean;\n\t\tsignal?: AbortSignal | null | undefined;\n\t}\n\t/**\n\t * The abort signal.\n\t * @see https://dom.spec.whatwg.org/#abortsignal\n\t */\n\tinterface AbortSignal extends EventTarget<{\n\t\tabort: Event$1;\n\t}> {\n\t\treadonly aborted: boolean;\n\t\tonabort: CallbackFunction<this, Event$1> | null;\n\t}\n\t/**\n\t * The event data to dispatch in strict mode.\n\t */\n\ttype EventData<TEventMap extends Record<string, Event$1>, TMode extends \"standard\" | \"strict\", TEventType extends string> = TMode extends \"strict\" ? IsValidEventMap<TEventMap> extends true ? ExplicitType<TEventType> & Omit<TEventMap[TEventType], keyof Event$1> & Partial<Omit<Event$1, \"type\">> : never : never;\n\t/**\n\t * Define explicit `type` property if `T` is a string literal.\n\t * Otherwise, never.\n\t */\n\ttype ExplicitType<T extends string> = string extends T ? never : {\n\t\treadonly type: T;\n\t};\n\t/**\n\t * The event listener type in standard mode.\n\t * Otherwise, never.\n\t */\n\ttype FallbackEventListener<TEventTarget extends EventTarget<any, any>, TMode extends \"standard\" | \"strict\"> = TMode extends \"standard\" ? EventListener<TEventTarget, Event$1> | null | undefined : never;\n\t/**\n\t * The event type in standard mode.\n\t * Otherwise, never.\n\t */\n\ttype FallbackEvent<TMode extends \"standard\" | \"strict\"> = TMode extends \"standard\" ? Event$1 : never;\n\t/**\n\t * Check if given event map is valid.\n\t * It's valid if the keys of the event map are narrower than `string`.\n\t */\n\ttype IsValidEventMap<T> = string extends keyof T ? false : true;\n}\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\ndeclare class Event$1<TEventType extends string = string> {\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-none\n\t */\n\tstatic get NONE(): number;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n\t */\n\tstatic get CAPTURING_PHASE(): number;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-at_target\n\t */\n\tstatic get AT_TARGET(): number;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n\t */\n\tstatic get BUBBLING_PHASE(): number;\n\t/**\n\t * Initialize this event instance.\n\t * @param type The type of this event.\n\t * @param eventInitDict Options to initialize.\n\t * @see https://dom.spec.whatwg.org/#dom-event-event\n\t */\n\tconstructor(type: TEventType, eventInitDict?: Event$1.EventInit);\n\t/**\n\t * The type of this event.\n\t * @see https://dom.spec.whatwg.org/#dom-event-type\n\t */\n\tget type(): TEventType;\n\t/**\n\t * The event target of the current dispatching.\n\t * @see https://dom.spec.whatwg.org/#dom-event-target\n\t */\n\tget target(): EventTarget | null;\n\t/**\n\t * The event target of the current dispatching.\n\t * @deprecated Use the `target` property instead.\n\t * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n\t */\n\tget srcElement(): EventTarget | null;\n\t/**\n\t * The event target of the current dispatching.\n\t * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n\t */\n\tget currentTarget(): EventTarget | null;\n\t/**\n\t * The event target of the current dispatching.\n\t * This doesn't support node tree.\n\t * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n\t */\n\tcomposedPath(): EventTarget[];\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-none\n\t */\n\tget NONE(): number;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n\t */\n\tget CAPTURING_PHASE(): number;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-at_target\n\t */\n\tget AT_TARGET(): number;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n\t */\n\tget BUBBLING_PHASE(): number;\n\t/**\n\t * The current event phase.\n\t * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n\t */\n\tget eventPhase(): number;\n\t/**\n\t * Stop event bubbling.\n\t * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n\t * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n\t */\n\tstopPropagation(): void;\n\t/**\n\t * `true` if event bubbling was stopped.\n\t * @deprecated\n\t * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n\t */\n\tget cancelBubble(): boolean;\n\t/**\n\t * Stop event bubbling if `true` is set.\n\t * @deprecated Use the `stopPropagation()` method instead.\n\t * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n\t */\n\tset cancelBubble(value: boolean);\n\t/**\n\t * Stop event bubbling and subsequent event listener callings.\n\t * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n\t */\n\tstopImmediatePropagation(): void;\n\t/**\n\t * `true` if this event will bubble.\n\t * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n\t */\n\tget bubbles(): boolean;\n\t/**\n\t * `true` if this event can be canceled by the `preventDefault()` method.\n\t * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n\t */\n\tget cancelable(): boolean;\n\t/**\n\t * `true` if the default behavior will act.\n\t * @deprecated Use the `defaultPrevented` proeprty instead.\n\t * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n\t */\n\tget returnValue(): boolean;\n\t/**\n\t * Cancel the default behavior if `false` is set.\n\t * @deprecated Use the `preventDefault()` method instead.\n\t * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n\t */\n\tset returnValue(value: boolean);\n\t/**\n\t * Cancel the default behavior.\n\t * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n\t */\n\tpreventDefault(): void;\n\t/**\n\t * `true` if the default behavior was canceled.\n\t * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n\t */\n\tget defaultPrevented(): boolean;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-composed\n\t */\n\tget composed(): boolean;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n\t */\n\tget isTrusted(): boolean;\n\t/**\n\t * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n\t */\n\tget timeStamp(): number;\n\t/**\n\t * @deprecated Don't use this method. The constructor did initialization.\n\t */\n\tinitEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\n}\ndeclare namespace Event$1 {\n\t/**\n\t * The options of the `Event` constructor.\n\t * @see https://dom.spec.whatwg.org/#dictdef-eventinit\n\t */\n\tinterface EventInit {\n\t\tbubbles?: boolean;\n\t\tcancelable?: boolean;\n\t\tcomposed?: boolean;\n\t}\n}\n\ndeclare const EventTargetConstructor: typeof EventTarget\ndeclare const EventConstructor: typeof Event\n\ndeclare class FetchEvent {\n  request: Request\n  response: Response | null\n  awaiting: Set<Promise<void>>\n  constructor(request: Request)\n  respondWith(response: Response | Promise<Response>): void\n  waitUntil(promise: Promise<void>): void\n}\n\nexport { EventConstructor as Event, EventTargetConstructor as EventTarget, FetchEvent, EventTarget as PromiseRejectionEvent };\n"
        }
    ]
}