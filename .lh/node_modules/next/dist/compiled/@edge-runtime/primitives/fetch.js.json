{
    "sourceFile": "node_modules/next/dist/compiled/@edge-runtime/primitives/fetch.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892706247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj))\n    throw TypeError(\"Cannot \" + msg);\n};\nvar __privateIn = (member, obj) => {\n  if (Object(obj) !== obj)\n    throw TypeError('Cannot use the \"in\" operator on this value');\n  return member.has(obj);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj))\n    throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\n\n// <define:process>\nvar define_process_default;\nvar init_define_process = __esm({\n  \"<define:process>\"() {\n    define_process_default = { version: \"v18.20.5\", env: {}, versions: { node: \" 18.20.5\" } };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/symbols.js\nvar require_symbols = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/symbols.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports = {\n      kClose: Symbol(\"close\"),\n      kDestroy: Symbol(\"destroy\"),\n      kDispatch: Symbol(\"dispatch\"),\n      kUrl: Symbol(\"url\"),\n      kWriting: Symbol(\"writing\"),\n      kResuming: Symbol(\"resuming\"),\n      kQueue: Symbol(\"queue\"),\n      kConnect: Symbol(\"connect\"),\n      kConnecting: Symbol(\"connecting\"),\n      kKeepAliveDefaultTimeout: Symbol(\"default keep alive timeout\"),\n      kKeepAliveMaxTimeout: Symbol(\"max keep alive timeout\"),\n      kKeepAliveTimeoutThreshold: Symbol(\"keep alive timeout threshold\"),\n      kKeepAliveTimeoutValue: Symbol(\"keep alive timeout\"),\n      kKeepAlive: Symbol(\"keep alive\"),\n      kHeadersTimeout: Symbol(\"headers timeout\"),\n      kBodyTimeout: Symbol(\"body timeout\"),\n      kServerName: Symbol(\"server name\"),\n      kLocalAddress: Symbol(\"local address\"),\n      kHost: Symbol(\"host\"),\n      kNoRef: Symbol(\"no ref\"),\n      kBodyUsed: Symbol(\"used\"),\n      kBody: Symbol(\"abstracted request body\"),\n      kRunning: Symbol(\"running\"),\n      kBlocking: Symbol(\"blocking\"),\n      kPending: Symbol(\"pending\"),\n      kSize: Symbol(\"size\"),\n      kBusy: Symbol(\"busy\"),\n      kQueued: Symbol(\"queued\"),\n      kFree: Symbol(\"free\"),\n      kConnected: Symbol(\"connected\"),\n      kClosed: Symbol(\"closed\"),\n      kNeedDrain: Symbol(\"need drain\"),\n      kReset: Symbol(\"reset\"),\n      kDestroyed: Symbol.for(\"nodejs.stream.destroyed\"),\n      kResume: Symbol(\"resume\"),\n      kOnError: Symbol(\"on error\"),\n      kMaxHeadersSize: Symbol(\"max headers size\"),\n      kRunningIdx: Symbol(\"running index\"),\n      kPendingIdx: Symbol(\"pending index\"),\n      kError: Symbol(\"error\"),\n      kClients: Symbol(\"clients\"),\n      kClient: Symbol(\"client\"),\n      kParser: Symbol(\"parser\"),\n      kOnDestroyed: Symbol(\"destroy callbacks\"),\n      kPipelining: Symbol(\"pipelining\"),\n      kSocket: Symbol(\"socket\"),\n      kHostHeader: Symbol(\"host header\"),\n      kConnector: Symbol(\"connector\"),\n      kStrictContentLength: Symbol(\"strict content length\"),\n      kMaxRedirections: Symbol(\"maxRedirections\"),\n      kMaxRequests: Symbol(\"maxRequestsPerClient\"),\n      kProxy: Symbol(\"proxy agent options\"),\n      kCounter: Symbol(\"socket request counter\"),\n      kInterceptors: Symbol(\"dispatch interceptors\"),\n      kMaxResponseSize: Symbol(\"max response size\"),\n      kHTTP2Session: Symbol(\"http2Session\"),\n      kHTTP2SessionState: Symbol(\"http2Session state\"),\n      kRetryHandlerDefaultRetry: Symbol(\"retry agent default retry\"),\n      kConstruct: Symbol(\"constructable\"),\n      kListeners: Symbol(\"listeners\"),\n      kHTTPContext: Symbol(\"http context\"),\n      kMaxConcurrentStreams: Symbol(\"max concurrent streams\"),\n      kNoProxyAgent: Symbol(\"no proxy agent\"),\n      kHttpProxyAgent: Symbol(\"http proxy agent\"),\n      kHttpsProxyAgent: Symbol(\"https proxy agent\")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/errors.js\nvar require_errors = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/errors.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var _UndiciError = class _UndiciError extends Error {\n      constructor(message) {\n        super(message);\n        this.name = \"UndiciError\";\n        this.code = \"UND_ERR\";\n      }\n    };\n    __name(_UndiciError, \"UndiciError\");\n    var UndiciError = _UndiciError;\n    var _ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"ConnectTimeoutError\";\n        this.message = message || \"Connect Timeout Error\";\n        this.code = \"UND_ERR_CONNECT_TIMEOUT\";\n      }\n    };\n    __name(_ConnectTimeoutError, \"ConnectTimeoutError\");\n    var ConnectTimeoutError = _ConnectTimeoutError;\n    var _HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"HeadersTimeoutError\";\n        this.message = message || \"Headers Timeout Error\";\n        this.code = \"UND_ERR_HEADERS_TIMEOUT\";\n      }\n    };\n    __name(_HeadersTimeoutError, \"HeadersTimeoutError\");\n    var HeadersTimeoutError = _HeadersTimeoutError;\n    var _HeadersOverflowError = class _HeadersOverflowError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"HeadersOverflowError\";\n        this.message = message || \"Headers Overflow Error\";\n        this.code = \"UND_ERR_HEADERS_OVERFLOW\";\n      }\n    };\n    __name(_HeadersOverflowError, \"HeadersOverflowError\");\n    var HeadersOverflowError = _HeadersOverflowError;\n    var _BodyTimeoutError = class _BodyTimeoutError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"BodyTimeoutError\";\n        this.message = message || \"Body Timeout Error\";\n        this.code = \"UND_ERR_BODY_TIMEOUT\";\n      }\n    };\n    __name(_BodyTimeoutError, \"BodyTimeoutError\");\n    var BodyTimeoutError = _BodyTimeoutError;\n    var _ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {\n      constructor(message, statusCode, headers, body) {\n        super(message);\n        this.name = \"ResponseStatusCodeError\";\n        this.message = message || \"Response Status Code Error\";\n        this.code = \"UND_ERR_RESPONSE_STATUS_CODE\";\n        this.body = body;\n        this.status = statusCode;\n        this.statusCode = statusCode;\n        this.headers = headers;\n      }\n    };\n    __name(_ResponseStatusCodeError, \"ResponseStatusCodeError\");\n    var ResponseStatusCodeError = _ResponseStatusCodeError;\n    var _InvalidArgumentError = class _InvalidArgumentError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"InvalidArgumentError\";\n        this.message = message || \"Invalid Argument Error\";\n        this.code = \"UND_ERR_INVALID_ARG\";\n      }\n    };\n    __name(_InvalidArgumentError, \"InvalidArgumentError\");\n    var InvalidArgumentError = _InvalidArgumentError;\n    var _InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"InvalidReturnValueError\";\n        this.message = message || \"Invalid Return Value Error\";\n        this.code = \"UND_ERR_INVALID_RETURN_VALUE\";\n      }\n    };\n    __name(_InvalidReturnValueError, \"InvalidReturnValueError\");\n    var InvalidReturnValueError = _InvalidReturnValueError;\n    var _AbortError = class _AbortError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n        this.message = message || \"The operation was aborted\";\n      }\n    };\n    __name(_AbortError, \"AbortError\");\n    var AbortError = _AbortError;\n    var _RequestAbortedError = class _RequestAbortedError extends AbortError {\n      constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n        this.message = message || \"Request aborted\";\n        this.code = \"UND_ERR_ABORTED\";\n      }\n    };\n    __name(_RequestAbortedError, \"RequestAbortedError\");\n    var RequestAbortedError = _RequestAbortedError;\n    var _InformationalError = class _InformationalError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"InformationalError\";\n        this.message = message || \"Request information\";\n        this.code = \"UND_ERR_INFO\";\n      }\n    };\n    __name(_InformationalError, \"InformationalError\");\n    var InformationalError = _InformationalError;\n    var _RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"RequestContentLengthMismatchError\";\n        this.message = message || \"Request body length does not match content-length header\";\n        this.code = \"UND_ERR_REQ_CONTENT_LENGTH_MISMATCH\";\n      }\n    };\n    __name(_RequestContentLengthMismatchError, \"RequestContentLengthMismatchError\");\n    var RequestContentLengthMismatchError = _RequestContentLengthMismatchError;\n    var _ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"ResponseContentLengthMismatchError\";\n        this.message = message || \"Response body length does not match content-length header\";\n        this.code = \"UND_ERR_RES_CONTENT_LENGTH_MISMATCH\";\n      }\n    };\n    __name(_ResponseContentLengthMismatchError, \"ResponseContentLengthMismatchError\");\n    var ResponseContentLengthMismatchError = _ResponseContentLengthMismatchError;\n    var _ClientDestroyedError = class _ClientDestroyedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"ClientDestroyedError\";\n        this.message = message || \"The client is destroyed\";\n        this.code = \"UND_ERR_DESTROYED\";\n      }\n    };\n    __name(_ClientDestroyedError, \"ClientDestroyedError\");\n    var ClientDestroyedError = _ClientDestroyedError;\n    var _ClientClosedError = class _ClientClosedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"ClientClosedError\";\n        this.message = message || \"The client is closed\";\n        this.code = \"UND_ERR_CLOSED\";\n      }\n    };\n    __name(_ClientClosedError, \"ClientClosedError\");\n    var ClientClosedError = _ClientClosedError;\n    var _SocketError = class _SocketError extends UndiciError {\n      constructor(message, socket) {\n        super(message);\n        this.name = \"SocketError\";\n        this.message = message || \"Socket error\";\n        this.code = \"UND_ERR_SOCKET\";\n        this.socket = socket;\n      }\n    };\n    __name(_SocketError, \"SocketError\");\n    var SocketError = _SocketError;\n    var _NotSupportedError = class _NotSupportedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"NotSupportedError\";\n        this.message = message || \"Not supported error\";\n        this.code = \"UND_ERR_NOT_SUPPORTED\";\n      }\n    };\n    __name(_NotSupportedError, \"NotSupportedError\");\n    var NotSupportedError = _NotSupportedError;\n    var _BalancedPoolMissingUpstreamError = class _BalancedPoolMissingUpstreamError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"MissingUpstreamError\";\n        this.message = message || \"No upstream has been added to the BalancedPool\";\n        this.code = \"UND_ERR_BPL_MISSING_UPSTREAM\";\n      }\n    };\n    __name(_BalancedPoolMissingUpstreamError, \"BalancedPoolMissingUpstreamError\");\n    var BalancedPoolMissingUpstreamError = _BalancedPoolMissingUpstreamError;\n    var _HTTPParserError = class _HTTPParserError extends Error {\n      constructor(message, code, data) {\n        super(message);\n        this.name = \"HTTPParserError\";\n        this.code = code ? `HPE_${code}` : void 0;\n        this.data = data ? data.toString() : void 0;\n      }\n    };\n    __name(_HTTPParserError, \"HTTPParserError\");\n    var HTTPParserError = _HTTPParserError;\n    var _ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {\n      constructor(message) {\n        super(message);\n        this.name = \"ResponseExceededMaxSizeError\";\n        this.message = message || \"Response content exceeded max size\";\n        this.code = \"UND_ERR_RES_EXCEEDED_MAX_SIZE\";\n      }\n    };\n    __name(_ResponseExceededMaxSizeError, \"ResponseExceededMaxSizeError\");\n    var ResponseExceededMaxSizeError = _ResponseExceededMaxSizeError;\n    var _RequestRetryError = class _RequestRetryError extends UndiciError {\n      constructor(message, code, { headers, data }) {\n        super(message);\n        this.name = \"RequestRetryError\";\n        this.message = message || \"Request retry error\";\n        this.code = \"UND_ERR_REQ_RETRY\";\n        this.statusCode = code;\n        this.data = data;\n        this.headers = headers;\n      }\n    };\n    __name(_RequestRetryError, \"RequestRetryError\");\n    var RequestRetryError = _RequestRetryError;\n    var _ResponseError = class _ResponseError extends UndiciError {\n      constructor(message, code, { headers, data }) {\n        super(message);\n        this.name = \"ResponseError\";\n        this.message = message || \"Response error\";\n        this.code = \"UND_ERR_RESPONSE\";\n        this.statusCode = code;\n        this.data = data;\n        this.headers = headers;\n      }\n    };\n    __name(_ResponseError, \"ResponseError\");\n    var ResponseError = _ResponseError;\n    var _SecureProxyConnectionError = class _SecureProxyConnectionError extends UndiciError {\n      constructor(cause, message, options) {\n        super(message, { cause, ...options ?? {} });\n        this.name = \"SecureProxyConnectionError\";\n        this.message = message || \"Secure Proxy Connection failed\";\n        this.code = \"UND_ERR_PRX_TLS\";\n        this.cause = cause;\n      }\n    };\n    __name(_SecureProxyConnectionError, \"SecureProxyConnectionError\");\n    var SecureProxyConnectionError = _SecureProxyConnectionError;\n    module2.exports = {\n      AbortError,\n      HTTPParserError,\n      UndiciError,\n      HeadersTimeoutError,\n      HeadersOverflowError,\n      BodyTimeoutError,\n      RequestContentLengthMismatchError,\n      ConnectTimeoutError,\n      ResponseStatusCodeError,\n      InvalidArgumentError,\n      InvalidReturnValueError,\n      RequestAbortedError,\n      ClientDestroyedError,\n      ClientClosedError,\n      InformationalError,\n      SocketError,\n      NotSupportedError,\n      ResponseContentLengthMismatchError,\n      BalancedPoolMissingUpstreamError,\n      ResponseExceededMaxSizeError,\n      RequestRetryError,\n      ResponseError,\n      SecureProxyConnectionError\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/constants.js\nvar require_constants = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/constants.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var headerNameLowerCasedRecord = {};\n    var wellknownHeaderNames = [\n      \"Accept\",\n      \"Accept-Encoding\",\n      \"Accept-Language\",\n      \"Accept-Ranges\",\n      \"Access-Control-Allow-Credentials\",\n      \"Access-Control-Allow-Headers\",\n      \"Access-Control-Allow-Methods\",\n      \"Access-Control-Allow-Origin\",\n      \"Access-Control-Expose-Headers\",\n      \"Access-Control-Max-Age\",\n      \"Access-Control-Request-Headers\",\n      \"Access-Control-Request-Method\",\n      \"Age\",\n      \"Allow\",\n      \"Alt-Svc\",\n      \"Alt-Used\",\n      \"Authorization\",\n      \"Cache-Control\",\n      \"Clear-Site-Data\",\n      \"Connection\",\n      \"Content-Disposition\",\n      \"Content-Encoding\",\n      \"Content-Language\",\n      \"Content-Length\",\n      \"Content-Location\",\n      \"Content-Range\",\n      \"Content-Security-Policy\",\n      \"Content-Security-Policy-Report-Only\",\n      \"Content-Type\",\n      \"Cookie\",\n      \"Cross-Origin-Embedder-Policy\",\n      \"Cross-Origin-Opener-Policy\",\n      \"Cross-Origin-Resource-Policy\",\n      \"Date\",\n      \"Device-Memory\",\n      \"Downlink\",\n      \"ECT\",\n      \"ETag\",\n      \"Expect\",\n      \"Expect-CT\",\n      \"Expires\",\n      \"Forwarded\",\n      \"From\",\n      \"Host\",\n      \"If-Match\",\n      \"If-Modified-Since\",\n      \"If-None-Match\",\n      \"If-Range\",\n      \"If-Unmodified-Since\",\n      \"Keep-Alive\",\n      \"Last-Modified\",\n      \"Link\",\n      \"Location\",\n      \"Max-Forwards\",\n      \"Origin\",\n      \"Permissions-Policy\",\n      \"Pragma\",\n      \"Proxy-Authenticate\",\n      \"Proxy-Authorization\",\n      \"RTT\",\n      \"Range\",\n      \"Referer\",\n      \"Referrer-Policy\",\n      \"Refresh\",\n      \"Retry-After\",\n      \"Sec-WebSocket-Accept\",\n      \"Sec-WebSocket-Extensions\",\n      \"Sec-WebSocket-Key\",\n      \"Sec-WebSocket-Protocol\",\n      \"Sec-WebSocket-Version\",\n      \"Server\",\n      \"Server-Timing\",\n      \"Service-Worker-Allowed\",\n      \"Service-Worker-Navigation-Preload\",\n      \"Set-Cookie\",\n      \"SourceMap\",\n      \"Strict-Transport-Security\",\n      \"Supports-Loading-Mode\",\n      \"TE\",\n      \"Timing-Allow-Origin\",\n      \"Trailer\",\n      \"Transfer-Encoding\",\n      \"Upgrade\",\n      \"Upgrade-Insecure-Requests\",\n      \"User-Agent\",\n      \"Vary\",\n      \"Via\",\n      \"WWW-Authenticate\",\n      \"X-Content-Type-Options\",\n      \"X-DNS-Prefetch-Control\",\n      \"X-Frame-Options\",\n      \"X-Permitted-Cross-Domain-Policies\",\n      \"X-Powered-By\",\n      \"X-Requested-With\",\n      \"X-XSS-Protection\"\n    ];\n    for (let i = 0; i < wellknownHeaderNames.length; ++i) {\n      const key = wellknownHeaderNames[i];\n      const lowerCasedKey = key.toLowerCase();\n      headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;\n    }\n    Object.setPrototypeOf(headerNameLowerCasedRecord, null);\n    module2.exports = {\n      wellknownHeaderNames,\n      headerNameLowerCasedRecord\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/tree.js\nvar require_tree = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/tree.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      wellknownHeaderNames,\n      headerNameLowerCasedRecord\n    } = require_constants();\n    var _TstNode = class _TstNode {\n      /** @type {any} */\n      value = null;\n      /** @type {null | TstNode} */\n      left = null;\n      /** @type {null | TstNode} */\n      middle = null;\n      /** @type {null | TstNode} */\n      right = null;\n      /** @type {number} */\n      code;\n      /**\n       * @param {string} key\n       * @param {any} value\n       * @param {number} index\n       */\n      constructor(key, value, index) {\n        if (index === void 0 || index >= key.length) {\n          throw new TypeError(\"Unreachable\");\n        }\n        const code = this.code = key.charCodeAt(index);\n        if (code > 127) {\n          throw new TypeError(\"key must be ascii string\");\n        }\n        if (key.length !== ++index) {\n          this.middle = new _TstNode(key, value, index);\n        } else {\n          this.value = value;\n        }\n      }\n      /**\n       * @param {string} key\n       * @param {any} value\n       */\n      add(key, value) {\n        const length = key.length;\n        if (length === 0) {\n          throw new TypeError(\"Unreachable\");\n        }\n        let index = 0;\n        let node = this;\n        while (true) {\n          const code = key.charCodeAt(index);\n          if (code > 127) {\n            throw new TypeError(\"key must be ascii string\");\n          }\n          if (node.code === code) {\n            if (length === ++index) {\n              node.value = value;\n              break;\n            } else if (node.middle !== null) {\n              node = node.middle;\n            } else {\n              node.middle = new _TstNode(key, value, index);\n              break;\n            }\n          } else if (node.code < code) {\n            if (node.left !== null) {\n              node = node.left;\n            } else {\n              node.left = new _TstNode(key, value, index);\n              break;\n            }\n          } else if (node.right !== null) {\n            node = node.right;\n          } else {\n            node.right = new _TstNode(key, value, index);\n            break;\n          }\n        }\n      }\n      /**\n       * @param {Uint8Array} key\n       * @return {TstNode | null}\n       */\n      search(key) {\n        const keylength = key.length;\n        let index = 0;\n        let node = this;\n        while (node !== null && index < keylength) {\n          let code = key[index];\n          if (code <= 90 && code >= 65) {\n            code |= 32;\n          }\n          while (node !== null) {\n            if (code === node.code) {\n              if (keylength === ++index) {\n                return node;\n              }\n              node = node.middle;\n              break;\n            }\n            node = node.code < code ? node.left : node.right;\n          }\n        }\n        return null;\n      }\n    };\n    __name(_TstNode, \"TstNode\");\n    var TstNode = _TstNode;\n    var _TernarySearchTree = class _TernarySearchTree {\n      /** @type {TstNode | null} */\n      node = null;\n      /**\n       * @param {string} key\n       * @param {any} value\n       * */\n      insert(key, value) {\n        if (this.node === null) {\n          this.node = new TstNode(key, value, 0);\n        } else {\n          this.node.add(key, value);\n        }\n      }\n      /**\n       * @param {Uint8Array} key\n       * @return {any}\n       */\n      lookup(key) {\n        return this.node?.search(key)?.value ?? null;\n      }\n    };\n    __name(_TernarySearchTree, \"TernarySearchTree\");\n    var TernarySearchTree = _TernarySearchTree;\n    var tree = new TernarySearchTree();\n    for (let i = 0; i < wellknownHeaderNames.length; ++i) {\n      const key = headerNameLowerCasedRecord[wellknownHeaderNames[i]];\n      tree.insert(key, key);\n    }\n    module2.exports = {\n      TernarySearchTree,\n      tree\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/util.js\nvar require_util = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { kDestroyed, kBodyUsed, kListeners, kBody } = require_symbols();\n    var { IncomingMessage } = require(\"http\");\n    var stream = require(\"stream\");\n    var net = require(\"net\");\n    var { Blob: Blob3 } = require(\"buffer\");\n    var nodeUtil = require(\"util\");\n    var { stringify } = require(\"querystring\");\n    var { EventEmitter: EE } = require(\"events\");\n    var { InvalidArgumentError } = require_errors();\n    var { headerNameLowerCasedRecord } = require_constants();\n    var { tree } = require_tree();\n    var [nodeMajor, nodeMinor] = define_process_default.versions.node.split(\".\").map((v) => Number(v));\n    var _BodyAsyncIterable = class _BodyAsyncIterable {\n      constructor(body) {\n        this[kBody] = body;\n        this[kBodyUsed] = false;\n      }\n      async *[Symbol.asyncIterator]() {\n        assert(!this[kBodyUsed], \"disturbed\");\n        this[kBodyUsed] = true;\n        yield* this[kBody];\n      }\n    };\n    __name(_BodyAsyncIterable, \"BodyAsyncIterable\");\n    var BodyAsyncIterable = _BodyAsyncIterable;\n    function wrapRequestBody(body) {\n      if (isStream(body)) {\n        if (bodyLength(body) === 0) {\n          body.on(\"data\", function() {\n            assert(false);\n          });\n        }\n        if (typeof body.readableDidRead !== \"boolean\") {\n          body[kBodyUsed] = false;\n          EE.prototype.on.call(body, \"data\", function() {\n            this[kBodyUsed] = true;\n          });\n        }\n        return body;\n      } else if (body && typeof body.pipeTo === \"function\") {\n        return new BodyAsyncIterable(body);\n      } else if (body && typeof body !== \"string\" && !ArrayBuffer.isView(body) && isIterable(body)) {\n        return new BodyAsyncIterable(body);\n      } else {\n        return body;\n      }\n    }\n    __name(wrapRequestBody, \"wrapRequestBody\");\n    function nop() {\n    }\n    __name(nop, \"nop\");\n    function isStream(obj) {\n      return obj && typeof obj === \"object\" && typeof obj.pipe === \"function\" && typeof obj.on === \"function\";\n    }\n    __name(isStream, \"isStream\");\n    function isBlobLike(object) {\n      if (object === null) {\n        return false;\n      } else if (object instanceof Blob3) {\n        return true;\n      } else if (typeof object !== \"object\") {\n        return false;\n      } else {\n        const sTag = object[Symbol.toStringTag];\n        return (sTag === \"Blob\" || sTag === \"File\") && (\"stream\" in object && typeof object.stream === \"function\" || \"arrayBuffer\" in object && typeof object.arrayBuffer === \"function\");\n      }\n    }\n    __name(isBlobLike, \"isBlobLike\");\n    function buildURL(url, queryParams) {\n      if (url.includes(\"?\") || url.includes(\"#\")) {\n        throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".');\n      }\n      const stringified = stringify(queryParams);\n      if (stringified) {\n        url += \"?\" + stringified;\n      }\n      return url;\n    }\n    __name(buildURL, \"buildURL\");\n    function isValidPort(port) {\n      const value = parseInt(port, 10);\n      return value === Number(port) && value >= 0 && value <= 65535;\n    }\n    __name(isValidPort, \"isValidPort\");\n    function isHttpOrHttpsPrefixed(value) {\n      return value != null && value[0] === \"h\" && value[1] === \"t\" && value[2] === \"t\" && value[3] === \"p\" && (value[4] === \":\" || value[4] === \"s\" && value[5] === \":\");\n    }\n    __name(isHttpOrHttpsPrefixed, \"isHttpOrHttpsPrefixed\");\n    function parseURL(url) {\n      if (typeof url === \"string\") {\n        url = new URL(url);\n        if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n          throw new InvalidArgumentError(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");\n        }\n        return url;\n      }\n      if (!url || typeof url !== \"object\") {\n        throw new InvalidArgumentError(\"Invalid URL: The URL argument must be a non-null object.\");\n      }\n      if (!(url instanceof URL)) {\n        if (url.port != null && url.port !== \"\" && isValidPort(url.port) === false) {\n          throw new InvalidArgumentError(\"Invalid URL: port must be a valid integer or a string representation of an integer.\");\n        }\n        if (url.path != null && typeof url.path !== \"string\") {\n          throw new InvalidArgumentError(\"Invalid URL path: the path must be a string or null/undefined.\");\n        }\n        if (url.pathname != null && typeof url.pathname !== \"string\") {\n          throw new InvalidArgumentError(\"Invalid URL pathname: the pathname must be a string or null/undefined.\");\n        }\n        if (url.hostname != null && typeof url.hostname !== \"string\") {\n          throw new InvalidArgumentError(\"Invalid URL hostname: the hostname must be a string or null/undefined.\");\n        }\n        if (url.origin != null && typeof url.origin !== \"string\") {\n          throw new InvalidArgumentError(\"Invalid URL origin: the origin must be a string or null/undefined.\");\n        }\n        if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n          throw new InvalidArgumentError(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");\n        }\n        const port = url.port != null ? url.port : url.protocol === \"https:\" ? 443 : 80;\n        let origin = url.origin != null ? url.origin : `${url.protocol || \"\"}//${url.hostname || \"\"}:${port}`;\n        let path = url.path != null ? url.path : `${url.pathname || \"\"}${url.search || \"\"}`;\n        if (origin[origin.length - 1] === \"/\") {\n          origin = origin.slice(0, origin.length - 1);\n        }\n        if (path && path[0] !== \"/\") {\n          path = `/${path}`;\n        }\n        return new URL(`${origin}${path}`);\n      }\n      if (!isHttpOrHttpsPrefixed(url.origin || url.protocol)) {\n        throw new InvalidArgumentError(\"Invalid URL protocol: the URL must start with `http:` or `https:`.\");\n      }\n      return url;\n    }\n    __name(parseURL, \"parseURL\");\n    function parseOrigin(url) {\n      url = parseURL(url);\n      if (url.pathname !== \"/\" || url.search || url.hash) {\n        throw new InvalidArgumentError(\"invalid url\");\n      }\n      return url;\n    }\n    __name(parseOrigin, \"parseOrigin\");\n    function getHostname(host) {\n      if (host[0] === \"[\") {\n        const idx2 = host.indexOf(\"]\");\n        assert(idx2 !== -1);\n        return host.substring(1, idx2);\n      }\n      const idx = host.indexOf(\":\");\n      if (idx === -1)\n        return host;\n      return host.substring(0, idx);\n    }\n    __name(getHostname, \"getHostname\");\n    function getServerName(host) {\n      if (!host) {\n        return null;\n      }\n      assert(typeof host === \"string\");\n      const servername = getHostname(host);\n      if (net.isIP(servername)) {\n        return \"\";\n      }\n      return servername;\n    }\n    __name(getServerName, \"getServerName\");\n    function deepClone(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n    __name(deepClone, \"deepClone\");\n    function isAsyncIterable(obj) {\n      return !!(obj != null && typeof obj[Symbol.asyncIterator] === \"function\");\n    }\n    __name(isAsyncIterable, \"isAsyncIterable\");\n    function isIterable(obj) {\n      return !!(obj != null && (typeof obj[Symbol.iterator] === \"function\" || typeof obj[Symbol.asyncIterator] === \"function\"));\n    }\n    __name(isIterable, \"isIterable\");\n    function bodyLength(body) {\n      if (body == null) {\n        return 0;\n      } else if (isStream(body)) {\n        const state = body._readableState;\n        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;\n      } else if (isBlobLike(body)) {\n        return body.size != null ? body.size : null;\n      } else if (isBuffer(body)) {\n        return body.byteLength;\n      }\n      return null;\n    }\n    __name(bodyLength, \"bodyLength\");\n    function isDestroyed(body) {\n      return body && !!(body.destroyed || body[kDestroyed] || stream.isDestroyed?.(body));\n    }\n    __name(isDestroyed, \"isDestroyed\");\n    function destroy(stream2, err) {\n      if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {\n        return;\n      }\n      if (typeof stream2.destroy === \"function\") {\n        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {\n          stream2.socket = null;\n        }\n        stream2.destroy(err);\n      } else if (err) {\n        queueMicrotask(() => {\n          stream2.emit(\"error\", err);\n        });\n      }\n      if (stream2.destroyed !== true) {\n        stream2[kDestroyed] = true;\n      }\n    }\n    __name(destroy, \"destroy\");\n    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/;\n    function parseKeepAliveTimeout(val) {\n      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);\n      return m ? parseInt(m[1], 10) * 1e3 : null;\n    }\n    __name(parseKeepAliveTimeout, \"parseKeepAliveTimeout\");\n    function headerNameToString(value) {\n      return typeof value === \"string\" ? headerNameLowerCasedRecord[value] ?? value.toLowerCase() : tree.lookup(value) ?? value.toString(\"latin1\").toLowerCase();\n    }\n    __name(headerNameToString, \"headerNameToString\");\n    function bufferToLowerCasedHeaderName(value) {\n      return tree.lookup(value) ?? value.toString(\"latin1\").toLowerCase();\n    }\n    __name(bufferToLowerCasedHeaderName, \"bufferToLowerCasedHeaderName\");\n    function parseHeaders(headers, obj) {\n      if (obj === void 0)\n        obj = {};\n      for (let i = 0; i < headers.length; i += 2) {\n        const key = headerNameToString(headers[i]);\n        let val = obj[key];\n        if (val) {\n          if (typeof val === \"string\") {\n            val = [val];\n            obj[key] = val;\n          }\n          val.push(headers[i + 1].toString(\"utf8\"));\n        } else {\n          const headersValue = headers[i + 1];\n          if (typeof headersValue === \"string\") {\n            obj[key] = headersValue;\n          } else {\n            obj[key] = Array.isArray(headersValue) ? headersValue.map((x) => x.toString(\"utf8\")) : headersValue.toString(\"utf8\");\n          }\n        }\n      }\n      if (\"content-length\" in obj && \"content-disposition\" in obj) {\n        obj[\"content-disposition\"] = Buffer.from(obj[\"content-disposition\"]).toString(\"latin1\");\n      }\n      return obj;\n    }\n    __name(parseHeaders, \"parseHeaders\");\n    function parseRawHeaders(headers) {\n      const len = headers.length;\n      const ret = new Array(len);\n      let hasContentLength = false;\n      let contentDispositionIdx = -1;\n      let key;\n      let val;\n      let kLen = 0;\n      for (let n = 0; n < headers.length; n += 2) {\n        key = headers[n];\n        val = headers[n + 1];\n        typeof key !== \"string\" && (key = key.toString());\n        typeof val !== \"string\" && (val = val.toString(\"utf8\"));\n        kLen = key.length;\n        if (kLen === 14 && key[7] === \"-\" && (key === \"content-length\" || key.toLowerCase() === \"content-length\")) {\n          hasContentLength = true;\n        } else if (kLen === 19 && key[7] === \"-\" && (key === \"content-disposition\" || key.toLowerCase() === \"content-disposition\")) {\n          contentDispositionIdx = n + 1;\n        }\n        ret[n] = key;\n        ret[n + 1] = val;\n      }\n      if (hasContentLength && contentDispositionIdx !== -1) {\n        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString(\"latin1\");\n      }\n      return ret;\n    }\n    __name(parseRawHeaders, \"parseRawHeaders\");\n    function isBuffer(buffer) {\n      return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);\n    }\n    __name(isBuffer, \"isBuffer\");\n    function validateHandler(handler, method, upgrade) {\n      if (!handler || typeof handler !== \"object\") {\n        throw new InvalidArgumentError(\"handler must be an object\");\n      }\n      if (typeof handler.onConnect !== \"function\") {\n        throw new InvalidArgumentError(\"invalid onConnect method\");\n      }\n      if (typeof handler.onError !== \"function\") {\n        throw new InvalidArgumentError(\"invalid onError method\");\n      }\n      if (typeof handler.onBodySent !== \"function\" && handler.onBodySent !== void 0) {\n        throw new InvalidArgumentError(\"invalid onBodySent method\");\n      }\n      if (upgrade || method === \"CONNECT\") {\n        if (typeof handler.onUpgrade !== \"function\") {\n          throw new InvalidArgumentError(\"invalid onUpgrade method\");\n        }\n      } else {\n        if (typeof handler.onHeaders !== \"function\") {\n          throw new InvalidArgumentError(\"invalid onHeaders method\");\n        }\n        if (typeof handler.onData !== \"function\") {\n          throw new InvalidArgumentError(\"invalid onData method\");\n        }\n        if (typeof handler.onComplete !== \"function\") {\n          throw new InvalidArgumentError(\"invalid onComplete method\");\n        }\n      }\n    }\n    __name(validateHandler, \"validateHandler\");\n    function isDisturbed(body) {\n      return !!(body && (stream.isDisturbed(body) || body[kBodyUsed]));\n    }\n    __name(isDisturbed, \"isDisturbed\");\n    function isErrored(body) {\n      return !!(body && stream.isErrored(body));\n    }\n    __name(isErrored, \"isErrored\");\n    function isReadable(body) {\n      return !!(body && stream.isReadable(body));\n    }\n    __name(isReadable, \"isReadable\");\n    function getSocketInfo(socket) {\n      return {\n        localAddress: socket.localAddress,\n        localPort: socket.localPort,\n        remoteAddress: socket.remoteAddress,\n        remotePort: socket.remotePort,\n        remoteFamily: socket.remoteFamily,\n        timeout: socket.timeout,\n        bytesWritten: socket.bytesWritten,\n        bytesRead: socket.bytesRead\n      };\n    }\n    __name(getSocketInfo, \"getSocketInfo\");\n    function ReadableStreamFrom(iterable) {\n      let iterator;\n      return new ReadableStream(\n        {\n          async start() {\n            iterator = iterable[Symbol.asyncIterator]();\n          },\n          async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n              queueMicrotask(() => {\n                controller.close();\n                controller.byobRequest?.respond(0);\n              });\n            } else {\n              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);\n              if (buf.byteLength) {\n                controller.enqueue(new Uint8Array(buf));\n              }\n            }\n            return controller.desiredSize > 0;\n          },\n          async cancel(reason) {\n            await iterator.return();\n          },\n          type: \"bytes\"\n        }\n      );\n    }\n    __name(ReadableStreamFrom, \"ReadableStreamFrom\");\n    function isFormDataLike(object) {\n      return object && typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && object[Symbol.toStringTag] === \"FormData\";\n    }\n    __name(isFormDataLike, \"isFormDataLike\");\n    function addAbortListener(signal, listener) {\n      if (\"addEventListener\" in signal) {\n        signal.addEventListener(\"abort\", listener, { once: true });\n        return () => signal.removeEventListener(\"abort\", listener);\n      }\n      signal.addListener(\"abort\", listener);\n      return () => signal.removeListener(\"abort\", listener);\n    }\n    __name(addAbortListener, \"addAbortListener\");\n    var hasToWellFormed = typeof String.prototype.toWellFormed === \"function\";\n    var hasIsWellFormed = typeof String.prototype.isWellFormed === \"function\";\n    function toUSVString(val) {\n      return hasToWellFormed ? `${val}`.toWellFormed() : nodeUtil.toUSVString(val);\n    }\n    __name(toUSVString, \"toUSVString\");\n    function isUSVString(val) {\n      return hasIsWellFormed ? `${val}`.isWellFormed() : toUSVString(val) === `${val}`;\n    }\n    __name(isUSVString, \"isUSVString\");\n    function isTokenCharCode(c) {\n      switch (c) {\n        case 34:\n        case 40:\n        case 41:\n        case 44:\n        case 47:\n        case 58:\n        case 59:\n        case 60:\n        case 61:\n        case 62:\n        case 63:\n        case 64:\n        case 91:\n        case 92:\n        case 93:\n        case 123:\n        case 125:\n          return false;\n        default:\n          return c >= 33 && c <= 126;\n      }\n    }\n    __name(isTokenCharCode, \"isTokenCharCode\");\n    function isValidHTTPToken(characters) {\n      if (characters.length === 0) {\n        return false;\n      }\n      for (let i = 0; i < characters.length; ++i) {\n        if (!isTokenCharCode(characters.charCodeAt(i))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidHTTPToken, \"isValidHTTPToken\");\n    var headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n    function isValidHeaderValue(characters) {\n      return !headerCharRegex.test(characters);\n    }\n    __name(isValidHeaderValue, \"isValidHeaderValue\");\n    function parseRangeHeader(range) {\n      if (range == null || range === \"\")\n        return { start: 0, end: null, size: null };\n      const m = range ? range.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/) : null;\n      return m ? {\n        start: parseInt(m[1]),\n        end: m[2] ? parseInt(m[2]) : null,\n        size: m[3] ? parseInt(m[3]) : null\n      } : null;\n    }\n    __name(parseRangeHeader, \"parseRangeHeader\");\n    function addListener(obj, name, listener) {\n      const listeners = obj[kListeners] ??= [];\n      listeners.push([name, listener]);\n      obj.on(name, listener);\n      return obj;\n    }\n    __name(addListener, \"addListener\");\n    function removeAllListeners(obj) {\n      for (const [name, listener] of obj[kListeners] ?? []) {\n        obj.removeListener(name, listener);\n      }\n      obj[kListeners] = null;\n    }\n    __name(removeAllListeners, \"removeAllListeners\");\n    function errorRequest(client, request, err) {\n      try {\n        request.onError(err);\n        assert(request.aborted);\n      } catch (err2) {\n        client.emit(\"error\", err2);\n      }\n    }\n    __name(errorRequest, \"errorRequest\");\n    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);\n    kEnumerableProperty.enumerable = true;\n    var normalizedMethodRecordsBase = {\n      delete: \"DELETE\",\n      DELETE: \"DELETE\",\n      get: \"GET\",\n      GET: \"GET\",\n      head: \"HEAD\",\n      HEAD: \"HEAD\",\n      options: \"OPTIONS\",\n      OPTIONS: \"OPTIONS\",\n      post: \"POST\",\n      POST: \"POST\",\n      put: \"PUT\",\n      PUT: \"PUT\"\n    };\n    var normalizedMethodRecords = {\n      ...normalizedMethodRecordsBase,\n      patch: \"patch\",\n      PATCH: \"PATCH\"\n    };\n    Object.setPrototypeOf(normalizedMethodRecordsBase, null);\n    Object.setPrototypeOf(normalizedMethodRecords, null);\n    module2.exports = {\n      kEnumerableProperty,\n      nop,\n      isDisturbed,\n      isErrored,\n      isReadable,\n      toUSVString,\n      isUSVString,\n      isBlobLike,\n      parseOrigin,\n      parseURL,\n      getServerName,\n      isStream,\n      isIterable,\n      isAsyncIterable,\n      isDestroyed,\n      headerNameToString,\n      bufferToLowerCasedHeaderName,\n      addListener,\n      removeAllListeners,\n      errorRequest,\n      parseRawHeaders,\n      parseHeaders,\n      parseKeepAliveTimeout,\n      destroy,\n      bodyLength,\n      deepClone,\n      ReadableStreamFrom,\n      isBuffer,\n      validateHandler,\n      getSocketInfo,\n      isFormDataLike,\n      buildURL,\n      addAbortListener,\n      isValidHTTPToken,\n      isValidHeaderValue,\n      isTokenCharCode,\n      parseRangeHeader,\n      normalizedMethodRecordsBase,\n      normalizedMethodRecords,\n      isValidPort,\n      isHttpOrHttpsPrefixed,\n      nodeMajor,\n      nodeMinor,\n      safeHTTPMethods: [\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"],\n      wrapRequestBody\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/diagnostics.js\nvar require_diagnostics = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/diagnostics.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var diagnosticsChannel = require(\"diagnostics_channel\");\n    var util = require(\"util\");\n    var undiciDebugLog = util.debuglog(\"undici\");\n    var fetchDebuglog = util.debuglog(\"fetch\");\n    var websocketDebuglog = util.debuglog(\"websocket\");\n    var isClientSet = false;\n    var channels = {\n      // Client\n      beforeConnect: diagnosticsChannel.channel(\"undici:client:beforeConnect\"),\n      connected: diagnosticsChannel.channel(\"undici:client:connected\"),\n      connectError: diagnosticsChannel.channel(\"undici:client:connectError\"),\n      sendHeaders: diagnosticsChannel.channel(\"undici:client:sendHeaders\"),\n      // Request\n      create: diagnosticsChannel.channel(\"undici:request:create\"),\n      bodySent: diagnosticsChannel.channel(\"undici:request:bodySent\"),\n      headers: diagnosticsChannel.channel(\"undici:request:headers\"),\n      trailers: diagnosticsChannel.channel(\"undici:request:trailers\"),\n      error: diagnosticsChannel.channel(\"undici:request:error\"),\n      // WebSocket\n      open: diagnosticsChannel.channel(\"undici:websocket:open\"),\n      close: diagnosticsChannel.channel(\"undici:websocket:close\"),\n      socketError: diagnosticsChannel.channel(\"undici:websocket:socket_error\"),\n      ping: diagnosticsChannel.channel(\"undici:websocket:ping\"),\n      pong: diagnosticsChannel.channel(\"undici:websocket:pong\")\n    };\n    if (undiciDebugLog.enabled || fetchDebuglog.enabled) {\n      const debuglog = fetchDebuglog.enabled ? fetchDebuglog : undiciDebugLog;\n      diagnosticsChannel.channel(\"undici:client:beforeConnect\").subscribe((evt) => {\n        const {\n          connectParams: { version, protocol, port, host }\n        } = evt;\n        debuglog(\n          \"connecting to %s using %s%s\",\n          `${host}${port ? `:${port}` : \"\"}`,\n          protocol,\n          version\n        );\n      });\n      diagnosticsChannel.channel(\"undici:client:connected\").subscribe((evt) => {\n        const {\n          connectParams: { version, protocol, port, host }\n        } = evt;\n        debuglog(\n          \"connected to %s using %s%s\",\n          `${host}${port ? `:${port}` : \"\"}`,\n          protocol,\n          version\n        );\n      });\n      diagnosticsChannel.channel(\"undici:client:connectError\").subscribe((evt) => {\n        const {\n          connectParams: { version, protocol, port, host },\n          error\n        } = evt;\n        debuglog(\n          \"connection to %s using %s%s errored - %s\",\n          `${host}${port ? `:${port}` : \"\"}`,\n          protocol,\n          version,\n          error.message\n        );\n      });\n      diagnosticsChannel.channel(\"undici:client:sendHeaders\").subscribe((evt) => {\n        const {\n          request: { method, path, origin }\n        } = evt;\n        debuglog(\"sending request to %s %s/%s\", method, origin, path);\n      });\n      diagnosticsChannel.channel(\"undici:request:headers\").subscribe((evt) => {\n        const {\n          request: { method, path, origin },\n          response: { statusCode }\n        } = evt;\n        debuglog(\n          \"received response to %s %s/%s - HTTP %d\",\n          method,\n          origin,\n          path,\n          statusCode\n        );\n      });\n      diagnosticsChannel.channel(\"undici:request:trailers\").subscribe((evt) => {\n        const {\n          request: { method, path, origin }\n        } = evt;\n        debuglog(\"trailers received from %s %s/%s\", method, origin, path);\n      });\n      diagnosticsChannel.channel(\"undici:request:error\").subscribe((evt) => {\n        const {\n          request: { method, path, origin },\n          error\n        } = evt;\n        debuglog(\n          \"request to %s %s/%s errored - %s\",\n          method,\n          origin,\n          path,\n          error.message\n        );\n      });\n      isClientSet = true;\n    }\n    if (websocketDebuglog.enabled) {\n      if (!isClientSet) {\n        const debuglog = undiciDebugLog.enabled ? undiciDebugLog : websocketDebuglog;\n        diagnosticsChannel.channel(\"undici:client:beforeConnect\").subscribe((evt) => {\n          const {\n            connectParams: { version, protocol, port, host }\n          } = evt;\n          debuglog(\n            \"connecting to %s%s using %s%s\",\n            host,\n            port ? `:${port}` : \"\",\n            protocol,\n            version\n          );\n        });\n        diagnosticsChannel.channel(\"undici:client:connected\").subscribe((evt) => {\n          const {\n            connectParams: { version, protocol, port, host }\n          } = evt;\n          debuglog(\n            \"connected to %s%s using %s%s\",\n            host,\n            port ? `:${port}` : \"\",\n            protocol,\n            version\n          );\n        });\n        diagnosticsChannel.channel(\"undici:client:connectError\").subscribe((evt) => {\n          const {\n            connectParams: { version, protocol, port, host },\n            error\n          } = evt;\n          debuglog(\n            \"connection to %s%s using %s%s errored - %s\",\n            host,\n            port ? `:${port}` : \"\",\n            protocol,\n            version,\n            error.message\n          );\n        });\n        diagnosticsChannel.channel(\"undici:client:sendHeaders\").subscribe((evt) => {\n          const {\n            request: { method, path, origin }\n          } = evt;\n          debuglog(\"sending request to %s %s/%s\", method, origin, path);\n        });\n      }\n      diagnosticsChannel.channel(\"undici:websocket:open\").subscribe((evt) => {\n        const {\n          address: { address, port }\n        } = evt;\n        websocketDebuglog(\"connection opened %s%s\", address, port ? `:${port}` : \"\");\n      });\n      diagnosticsChannel.channel(\"undici:websocket:close\").subscribe((evt) => {\n        const { websocket, code, reason } = evt;\n        websocketDebuglog(\n          \"closed connection to %s - %s %s\",\n          websocket.url,\n          code,\n          reason\n        );\n      });\n      diagnosticsChannel.channel(\"undici:websocket:socket_error\").subscribe((err) => {\n        websocketDebuglog(\"connection errored - %s\", err.message);\n      });\n      diagnosticsChannel.channel(\"undici:websocket:ping\").subscribe((evt) => {\n        websocketDebuglog(\"ping received\");\n      });\n      diagnosticsChannel.channel(\"undici:websocket:pong\").subscribe((evt) => {\n        websocketDebuglog(\"pong received\");\n      });\n    }\n    module2.exports = {\n      channels\n    };\n  }\n});\n\n// src/patches/undici-core-request.js\nvar require_undici_core_request = __commonJS({\n  \"src/patches/undici-core-request.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      InvalidArgumentError,\n      NotSupportedError\n    } = require_errors();\n    var assert = require(\"assert\");\n    var {\n      isValidHTTPToken,\n      isValidHeaderValue,\n      isStream,\n      destroy,\n      isBuffer,\n      isFormDataLike,\n      isIterable,\n      isBlobLike,\n      buildURL,\n      validateHandler,\n      getServerName,\n      normalizedMethodRecords\n    } = require_util();\n    var { channels } = require_diagnostics();\n    var { headerNameLowerCasedRecord } = require_constants();\n    var invalidPathRegex = /[^\\u0021-\\u00ff]/;\n    var kHandler = Symbol(\"handler\");\n    var _Request2 = class _Request2 {\n      constructor(origin, {\n        path,\n        method,\n        body,\n        headers,\n        query,\n        idempotent,\n        blocking,\n        upgrade,\n        headersTimeout,\n        bodyTimeout,\n        reset,\n        throwOnError,\n        expectContinue,\n        servername\n      }, handler) {\n        if (typeof path !== \"string\") {\n          throw new InvalidArgumentError(\"path must be a string\");\n        } else if (path[0] !== \"/\" && !(path.startsWith(\"http://\") || path.startsWith(\"https://\")) && method !== \"CONNECT\") {\n          throw new InvalidArgumentError(\n            \"path must be an absolute URL or start with a slash\"\n          );\n        } else if (invalidPathRegex.test(path)) {\n          throw new InvalidArgumentError(\"invalid request path\");\n        }\n        if (typeof method !== \"string\") {\n          throw new InvalidArgumentError(\"method must be a string\");\n        } else if (normalizedMethodRecords[method] === void 0 && !isValidHTTPToken(method)) {\n          throw new InvalidArgumentError(\"invalid request method\");\n        }\n        if (upgrade && typeof upgrade !== \"string\") {\n          throw new InvalidArgumentError(\"upgrade must be a string\");\n        }\n        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n          throw new InvalidArgumentError(\"invalid headersTimeout\");\n        }\n        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n          throw new InvalidArgumentError(\"invalid bodyTimeout\");\n        }\n        if (reset != null && typeof reset !== \"boolean\") {\n          throw new InvalidArgumentError(\"invalid reset\");\n        }\n        if (expectContinue != null && typeof expectContinue !== \"boolean\") {\n          throw new InvalidArgumentError(\"invalid expectContinue\");\n        }\n        this.headersTimeout = headersTimeout;\n        this.bodyTimeout = bodyTimeout;\n        this.throwOnError = throwOnError === true;\n        this.method = method;\n        this.abort = null;\n        if (body == null) {\n          this.body = null;\n        } else if (isStream(body)) {\n          this.body = body;\n          const rState = this.body._readableState;\n          if (!rState || !rState.autoDestroy) {\n            this.endHandler = /* @__PURE__ */ __name(function autoDestroy() {\n              destroy(this);\n            }, \"autoDestroy\");\n            this.body.on(\"end\", this.endHandler);\n          }\n          this.errorHandler = (err) => {\n            if (this.abort) {\n              this.abort(err);\n            } else {\n              this.error = err;\n            }\n          };\n          this.body.on(\"error\", this.errorHandler);\n        } else if (isBuffer(body)) {\n          this.body = body.byteLength ? body : null;\n        } else if (ArrayBuffer.isView(body)) {\n          this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;\n        } else if (body instanceof ArrayBuffer) {\n          this.body = body.byteLength ? Buffer.from(body) : null;\n        } else if (typeof body === \"string\") {\n          this.body = body.length ? Buffer.from(body) : null;\n        } else if (isFormDataLike(body) || isIterable(body) || isBlobLike(body)) {\n          this.body = body;\n        } else {\n          throw new InvalidArgumentError(\n            \"body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable\"\n          );\n        }\n        this.completed = false;\n        this.aborted = false;\n        this.upgrade = upgrade || null;\n        this.path = query ? buildURL(path, query) : path;\n        this.origin = origin;\n        this.idempotent = idempotent == null ? method === \"HEAD\" || method === \"GET\" : idempotent;\n        this.blocking = blocking == null ? false : blocking;\n        this.reset = reset == null ? null : reset;\n        this.host = null;\n        this.contentLength = null;\n        this.contentType = null;\n        this.headers = [];\n        this.expectContinue = expectContinue != null ? expectContinue : false;\n        if (Array.isArray(headers)) {\n          if (headers.length % 2 !== 0) {\n            throw new InvalidArgumentError(\"headers array must be even\");\n          }\n          for (let i = 0; i < headers.length; i += 2) {\n            processHeader(this, headers[i], headers[i + 1]);\n          }\n        } else if (headers && typeof headers === \"object\") {\n          if (headers[Symbol.iterator]) {\n            for (const header of headers) {\n              if (!Array.isArray(header) || header.length !== 2) {\n                throw new InvalidArgumentError(\n                  \"headers must be in key-value pair format\"\n                );\n              }\n              processHeader(this, header[0], header[1]);\n            }\n          } else {\n            const keys = Object.keys(headers);\n            for (let i = 0; i < keys.length; ++i) {\n              processHeader(this, keys[i], headers[keys[i]]);\n            }\n          }\n        } else if (headers != null) {\n          throw new InvalidArgumentError(\"headers must be an object or an array\");\n        }\n        validateHandler(handler, method, upgrade);\n        this.servername = servername || getServerName(this.host);\n        this[kHandler] = handler;\n        if (channels.create.hasSubscribers) {\n          channels.create.publish({ request: this });\n        }\n      }\n      onBodySent(chunk) {\n        if (this[kHandler].onBodySent) {\n          try {\n            return this[kHandler].onBodySent(chunk);\n          } catch (err) {\n            this.abort(err);\n          }\n        }\n      }\n      onRequestSent() {\n        if (channels.bodySent.hasSubscribers) {\n          channels.bodySent.publish({ request: this });\n        }\n        if (this[kHandler].onRequestSent) {\n          try {\n            return this[kHandler].onRequestSent();\n          } catch (err) {\n            this.abort(err);\n          }\n        }\n      }\n      onConnect(abort) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        if (this.error) {\n          abort(this.error);\n        } else {\n          this.abort = abort;\n          return this[kHandler].onConnect(abort);\n        }\n      }\n      onResponseStarted() {\n        return this[kHandler].onResponseStarted?.();\n      }\n      onHeaders(statusCode, headers, resume, statusText) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        if (channels.headers.hasSubscribers) {\n          channels.headers.publish({\n            request: this,\n            response: { statusCode, headers, statusText }\n          });\n        }\n        try {\n          return this[kHandler].onHeaders(statusCode, headers, resume, statusText);\n        } catch (err) {\n          this.abort(err);\n        }\n      }\n      onData(chunk) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        try {\n          return this[kHandler].onData(chunk);\n        } catch (err) {\n          this.abort(err);\n          return false;\n        }\n      }\n      onUpgrade(statusCode, headers, socket) {\n        assert(!this.aborted);\n        assert(!this.completed);\n        return this[kHandler].onUpgrade(statusCode, headers, socket);\n      }\n      onComplete(trailers) {\n        this.onFinally();\n        assert(!this.aborted);\n        this.completed = true;\n        if (channels.trailers.hasSubscribers) {\n          channels.trailers.publish({ request: this, trailers });\n        }\n        try {\n          return this[kHandler].onComplete(trailers);\n        } catch (err) {\n          this.onError(err);\n        }\n      }\n      onError(error) {\n        this.onFinally();\n        if (channels.error.hasSubscribers) {\n          channels.error.publish({ request: this, error });\n        }\n        if (this.aborted) {\n          return;\n        }\n        this.aborted = true;\n        return this[kHandler].onError(error);\n      }\n      onFinally() {\n        if (this.errorHandler) {\n          this.body.off(\"error\", this.errorHandler);\n          this.errorHandler = null;\n        }\n        if (this.endHandler) {\n          this.body.off(\"end\", this.endHandler);\n          this.endHandler = null;\n        }\n      }\n      addHeader(key, value) {\n        processHeader(this, key, value);\n        return this;\n      }\n    };\n    __name(_Request2, \"Request\");\n    var Request2 = _Request2;\n    function processHeader(request, key, val) {\n      if (val && typeof val === \"object\" && !Array.isArray(val)) {\n        throw new InvalidArgumentError(`invalid ${key} header`);\n      } else if (val === void 0) {\n        return;\n      }\n      let headerName = headerNameLowerCasedRecord[key];\n      if (headerName === void 0) {\n        headerName = key.toLowerCase();\n        if (headerNameLowerCasedRecord[headerName] === void 0 && !isValidHTTPToken(headerName)) {\n          throw new InvalidArgumentError(\"invalid header key\");\n        }\n      }\n      if (Array.isArray(val)) {\n        const arr = [];\n        for (let i = 0; i < val.length; i++) {\n          if (typeof val[i] === \"string\") {\n            if (!isValidHeaderValue(val[i])) {\n              throw new InvalidArgumentError(`invalid ${key} header`);\n            }\n            arr.push(val[i]);\n          } else if (val[i] === null) {\n            arr.push(\"\");\n          } else if (typeof val[i] === \"object\") {\n            throw new InvalidArgumentError(`invalid ${key} header`);\n          } else {\n            arr.push(`${val[i]}`);\n          }\n        }\n        val = arr;\n      } else if (typeof val === \"string\") {\n        if (!isValidHeaderValue(val)) {\n          throw new InvalidArgumentError(`invalid ${key} header`);\n        }\n      } else if (val === null) {\n        val = \"\";\n      } else {\n        val = `${val}`;\n      }\n      if (request.host === null && headerName === \"host\") {\n        if (typeof val !== \"string\") {\n          throw new InvalidArgumentError(\"invalid host header\");\n        }\n        request.host = val;\n      } else if (request.contentLength === null && headerName === \"content-length\") {\n        request.contentLength = parseInt(val, 10);\n        if (!Number.isFinite(request.contentLength)) {\n          throw new InvalidArgumentError(\"invalid content-length header\");\n        }\n      } else if (request.contentType === null && headerName === \"content-type\") {\n        request.contentType = val;\n        request.headers.push(key, val);\n      } else if (headerName === \"connection\") {\n        const value = typeof val === \"string\" ? val.toLowerCase() : null;\n        if (value !== \"close\" && value !== \"keep-alive\") {\n          throw new InvalidArgumentError(\"invalid connection header\");\n        }\n        if (value === \"close\") {\n          request.reset = true;\n        }\n      } else if (headerName === \"expect\") {\n        throw new NotSupportedError(\"expect header not supported\");\n      } else {\n        request.headers.push(key, val);\n      }\n    }\n    __name(processHeader, \"processHeader\");\n    module2.exports = Request2;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/dispatcher.js\nvar require_dispatcher = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/dispatcher.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var EventEmitter = require(\"events\");\n    var _Dispatcher = class _Dispatcher extends EventEmitter {\n      dispatch() {\n        throw new Error(\"not implemented\");\n      }\n      close() {\n        throw new Error(\"not implemented\");\n      }\n      destroy() {\n        throw new Error(\"not implemented\");\n      }\n      compose(...args) {\n        const interceptors = Array.isArray(args[0]) ? args[0] : args;\n        let dispatch = this.dispatch.bind(this);\n        for (const interceptor of interceptors) {\n          if (interceptor == null) {\n            continue;\n          }\n          if (typeof interceptor !== \"function\") {\n            throw new TypeError(`invalid interceptor, expected function received ${typeof interceptor}`);\n          }\n          dispatch = interceptor(dispatch);\n          if (dispatch == null || typeof dispatch !== \"function\" || dispatch.length !== 2) {\n            throw new TypeError(\"invalid interceptor\");\n          }\n        }\n        return new ComposedDispatcher(this, dispatch);\n      }\n    };\n    __name(_Dispatcher, \"Dispatcher\");\n    var Dispatcher = _Dispatcher;\n    var _dispatcher, _dispatch;\n    var _ComposedDispatcher = class _ComposedDispatcher extends Dispatcher {\n      constructor(dispatcher, dispatch) {\n        super();\n        __privateAdd(this, _dispatcher, null);\n        __privateAdd(this, _dispatch, null);\n        __privateSet(this, _dispatcher, dispatcher);\n        __privateSet(this, _dispatch, dispatch);\n      }\n      dispatch(...args) {\n        __privateGet(this, _dispatch).call(this, ...args);\n      }\n      close(...args) {\n        return __privateGet(this, _dispatcher).close(...args);\n      }\n      destroy(...args) {\n        return __privateGet(this, _dispatcher).destroy(...args);\n      }\n    };\n    _dispatcher = new WeakMap();\n    _dispatch = new WeakMap();\n    __name(_ComposedDispatcher, \"ComposedDispatcher\");\n    var ComposedDispatcher = _ComposedDispatcher;\n    module2.exports = Dispatcher;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/dispatcher-base.js\nvar require_dispatcher_base = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/dispatcher-base.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var Dispatcher = require_dispatcher();\n    var {\n      ClientDestroyedError,\n      ClientClosedError,\n      InvalidArgumentError\n    } = require_errors();\n    var { kDestroy, kClose, kClosed, kDestroyed, kDispatch, kInterceptors } = require_symbols();\n    var kOnDestroyed = Symbol(\"onDestroyed\");\n    var kOnClosed = Symbol(\"onClosed\");\n    var kInterceptedDispatch = Symbol(\"Intercepted Dispatch\");\n    var _DispatcherBase = class _DispatcherBase extends Dispatcher {\n      constructor() {\n        super();\n        this[kDestroyed] = false;\n        this[kOnDestroyed] = null;\n        this[kClosed] = false;\n        this[kOnClosed] = [];\n      }\n      get destroyed() {\n        return this[kDestroyed];\n      }\n      get closed() {\n        return this[kClosed];\n      }\n      get interceptors() {\n        return this[kInterceptors];\n      }\n      set interceptors(newInterceptors) {\n        if (newInterceptors) {\n          for (let i = newInterceptors.length - 1; i >= 0; i--) {\n            const interceptor = this[kInterceptors][i];\n            if (typeof interceptor !== \"function\") {\n              throw new InvalidArgumentError(\"interceptor must be an function\");\n            }\n          }\n        }\n        this[kInterceptors] = newInterceptors;\n      }\n      close(callback) {\n        if (callback === void 0) {\n          return new Promise((resolve, reject) => {\n            this.close((err, data) => {\n              return err ? reject(err) : resolve(data);\n            });\n          });\n        }\n        if (typeof callback !== \"function\") {\n          throw new InvalidArgumentError(\"invalid callback\");\n        }\n        if (this[kDestroyed]) {\n          queueMicrotask(() => callback(new ClientDestroyedError(), null));\n          return;\n        }\n        if (this[kClosed]) {\n          if (this[kOnClosed]) {\n            this[kOnClosed].push(callback);\n          } else {\n            queueMicrotask(() => callback(null, null));\n          }\n          return;\n        }\n        this[kClosed] = true;\n        this[kOnClosed].push(callback);\n        const onClosed = /* @__PURE__ */ __name(() => {\n          const callbacks = this[kOnClosed];\n          this[kOnClosed] = null;\n          for (let i = 0; i < callbacks.length; i++) {\n            callbacks[i](null, null);\n          }\n        }, \"onClosed\");\n        this[kClose]().then(() => this.destroy()).then(() => {\n          queueMicrotask(onClosed);\n        });\n      }\n      destroy(err, callback) {\n        if (typeof err === \"function\") {\n          callback = err;\n          err = null;\n        }\n        if (callback === void 0) {\n          return new Promise((resolve, reject) => {\n            this.destroy(err, (err2, data) => {\n              return err2 ? (\n                /* istanbul ignore next: should never error */\n                reject(err2)\n              ) : resolve(data);\n            });\n          });\n        }\n        if (typeof callback !== \"function\") {\n          throw new InvalidArgumentError(\"invalid callback\");\n        }\n        if (this[kDestroyed]) {\n          if (this[kOnDestroyed]) {\n            this[kOnDestroyed].push(callback);\n          } else {\n            queueMicrotask(() => callback(null, null));\n          }\n          return;\n        }\n        if (!err) {\n          err = new ClientDestroyedError();\n        }\n        this[kDestroyed] = true;\n        this[kOnDestroyed] = this[kOnDestroyed] || [];\n        this[kOnDestroyed].push(callback);\n        const onDestroyed = /* @__PURE__ */ __name(() => {\n          const callbacks = this[kOnDestroyed];\n          this[kOnDestroyed] = null;\n          for (let i = 0; i < callbacks.length; i++) {\n            callbacks[i](null, null);\n          }\n        }, \"onDestroyed\");\n        this[kDestroy](err).then(() => {\n          queueMicrotask(onDestroyed);\n        });\n      }\n      [kInterceptedDispatch](opts, handler) {\n        if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n          this[kInterceptedDispatch] = this[kDispatch];\n          return this[kDispatch](opts, handler);\n        }\n        let dispatch = this[kDispatch].bind(this);\n        for (let i = this[kInterceptors].length - 1; i >= 0; i--) {\n          dispatch = this[kInterceptors][i](dispatch);\n        }\n        this[kInterceptedDispatch] = dispatch;\n        return dispatch(opts, handler);\n      }\n      dispatch(opts, handler) {\n        if (!handler || typeof handler !== \"object\") {\n          throw new InvalidArgumentError(\"handler must be an object\");\n        }\n        try {\n          if (!opts || typeof opts !== \"object\") {\n            throw new InvalidArgumentError(\"opts must be an object.\");\n          }\n          if (this[kDestroyed] || this[kOnDestroyed]) {\n            throw new ClientDestroyedError();\n          }\n          if (this[kClosed]) {\n            throw new ClientClosedError();\n          }\n          return this[kInterceptedDispatch](opts, handler);\n        } catch (err) {\n          if (typeof handler.onError !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onError method\");\n          }\n          handler.onError(err);\n          return false;\n        }\n      }\n    };\n    __name(_DispatcherBase, \"DispatcherBase\");\n    var DispatcherBase = _DispatcherBase;\n    module2.exports = DispatcherBase;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/util/timers.js\nvar require_timers = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/util/timers.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var fastNow = 0;\n    var RESOLUTION_MS = 1e3;\n    var TICK_MS = (RESOLUTION_MS >> 1) - 1;\n    var fastNowTimeout;\n    var kFastTimer = Symbol(\"kFastTimer\");\n    var fastTimers = [];\n    var NOT_IN_LIST = -2;\n    var TO_BE_CLEARED = -1;\n    var PENDING = 0;\n    var ACTIVE = 1;\n    function onTick() {\n      fastNow += TICK_MS;\n      let idx = 0;\n      let len = fastTimers.length;\n      while (idx < len) {\n        const timer = fastTimers[idx];\n        if (timer._state === PENDING) {\n          timer._idleStart = fastNow - TICK_MS;\n          timer._state = ACTIVE;\n        } else if (timer._state === ACTIVE && fastNow >= timer._idleStart + timer._idleTimeout) {\n          timer._state = TO_BE_CLEARED;\n          timer._idleStart = -1;\n          timer._onTimeout(timer._timerArg);\n        }\n        if (timer._state === TO_BE_CLEARED) {\n          timer._state = NOT_IN_LIST;\n          if (--len !== 0) {\n            fastTimers[idx] = fastTimers[len];\n          }\n        } else {\n          ++idx;\n        }\n      }\n      fastTimers.length = len;\n      if (fastTimers.length !== 0) {\n        refreshTimeout();\n      }\n    }\n    __name(onTick, \"onTick\");\n    function refreshTimeout() {\n      if (fastNowTimeout) {\n        fastNowTimeout.refresh();\n      } else {\n        clearTimeout(fastNowTimeout);\n        fastNowTimeout = setTimeout(onTick, TICK_MS);\n        if (fastNowTimeout.unref) {\n          fastNowTimeout.unref();\n        }\n      }\n    }\n    __name(refreshTimeout, \"refreshTimeout\");\n    var _FastTimer = class _FastTimer {\n      [kFastTimer] = true;\n      /**\n       * The state of the timer, which can be one of the following:\n       * - NOT_IN_LIST (-2)\n       * - TO_BE_CLEARED (-1)\n       * - PENDING (0)\n       * - ACTIVE (1)\n       *\n       * @type {-2|-1|0|1}\n       * @private\n       */\n      _state = NOT_IN_LIST;\n      /**\n       * The number of milliseconds to wait before calling the callback.\n       *\n       * @type {number}\n       * @private\n       */\n      _idleTimeout = -1;\n      /**\n       * The time in milliseconds when the timer was started. This value is used to\n       * calculate when the timer should expire.\n       *\n       * @type {number}\n       * @default -1\n       * @private\n       */\n      _idleStart = -1;\n      /**\n       * The function to be executed when the timer expires.\n       * @type {Function}\n       * @private\n       */\n      _onTimeout;\n      /**\n       * The argument to be passed to the callback when the timer expires.\n       *\n       * @type {*}\n       * @private\n       */\n      _timerArg;\n      /**\n       * @constructor\n       * @param {Function} callback A function to be executed after the timer\n       * expires.\n       * @param {number} delay The time, in milliseconds that the timer should wait\n       * before the specified function or code is executed.\n       * @param {*} arg\n       */\n      constructor(callback, delay, arg) {\n        this._onTimeout = callback;\n        this._idleTimeout = delay;\n        this._timerArg = arg;\n        this.refresh();\n      }\n      /**\n       * Sets the timer's start time to the current time, and reschedules the timer\n       * to call its callback at the previously specified duration adjusted to the\n       * current time.\n       * Using this on a timer that has already called its callback will reactivate\n       * the timer.\n       *\n       * @returns {void}\n       */\n      refresh() {\n        if (this._state === NOT_IN_LIST) {\n          fastTimers.push(this);\n        }\n        if (!fastNowTimeout || fastTimers.length === 1) {\n          refreshTimeout();\n        }\n        this._state = PENDING;\n      }\n      /**\n       * The `clear` method cancels the timer, preventing it from executing.\n       *\n       * @returns {void}\n       * @private\n       */\n      clear() {\n        this._state = TO_BE_CLEARED;\n        this._idleStart = -1;\n      }\n    };\n    __name(_FastTimer, \"FastTimer\");\n    var FastTimer = _FastTimer;\n    module2.exports = {\n      /**\n       * The setTimeout() method sets a timer which executes a function once the\n       * timer expires.\n       * @param {Function} callback A function to be executed after the timer\n       * expires.\n       * @param {number} delay The time, in milliseconds that the timer should\n       * wait before the specified function or code is executed.\n       * @param {*} [arg] An optional argument to be passed to the callback function\n       * when the timer expires.\n       * @returns {NodeJS.Timeout|FastTimer}\n       */\n      setTimeout(callback, delay, arg) {\n        return delay <= RESOLUTION_MS ? setTimeout(callback, delay, arg) : new FastTimer(callback, delay, arg);\n      },\n      /**\n       * The clearTimeout method cancels an instantiated Timer previously created\n       * by calling setTimeout.\n       *\n       * @param {NodeJS.Timeout|FastTimer} timeout\n       */\n      clearTimeout(timeout) {\n        if (timeout[kFastTimer]) {\n          timeout.clear();\n        } else {\n          clearTimeout(timeout);\n        }\n      },\n      /**\n       * The setFastTimeout() method sets a fastTimer which executes a function once\n       * the timer expires.\n       * @param {Function} callback A function to be executed after the timer\n       * expires.\n       * @param {number} delay The time, in milliseconds that the timer should\n       * wait before the specified function or code is executed.\n       * @param {*} [arg] An optional argument to be passed to the callback function\n       * when the timer expires.\n       * @returns {FastTimer}\n       */\n      setFastTimeout(callback, delay, arg) {\n        return new FastTimer(callback, delay, arg);\n      },\n      /**\n       * The clearTimeout method cancels an instantiated FastTimer previously\n       * created by calling setFastTimeout.\n       *\n       * @param {FastTimer} timeout\n       */\n      clearFastTimeout(timeout) {\n        timeout.clear();\n      },\n      /**\n       * The now method returns the value of the internal fast timer clock.\n       *\n       * @returns {number}\n       */\n      now() {\n        return fastNow;\n      },\n      /**\n       * Trigger the onTick function to process the fastTimers array.\n       * Exported for testing purposes only.\n       * Marking as deprecated to discourage any use outside of testing.\n       * @deprecated\n       * @param {number} [delay=0] The delay in milliseconds to add to the now value.\n       */\n      tick(delay = 0) {\n        fastNow += delay - RESOLUTION_MS + 1;\n        onTick();\n        onTick();\n      },\n      /**\n       * Reset FastTimers.\n       * Exported for testing purposes only.\n       * Marking as deprecated to discourage any use outside of testing.\n       * @deprecated\n       */\n      reset() {\n        fastNow = 0;\n        fastTimers.length = 0;\n        clearTimeout(fastNowTimeout);\n        fastNowTimeout = null;\n      },\n      /**\n       * Exporting for testing purposes only.\n       * Marking as deprecated to discourage any use outside of testing.\n       * @deprecated\n       */\n      kFastTimer\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/connect.js\nvar require_connect = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/core/connect.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var net = require(\"net\");\n    var assert = require(\"assert\");\n    var util = require_util();\n    var { InvalidArgumentError, ConnectTimeoutError } = require_errors();\n    var timers = require_timers();\n    function noop() {\n    }\n    __name(noop, \"noop\");\n    var tls;\n    var SessionCache;\n    var _a, _b;\n    if (global.FinalizationRegistry && !(define_process_default.env.NODE_V8_COVERAGE || define_process_default.env.UNDICI_NO_FG)) {\n      SessionCache = (_a = class {\n        constructor(maxCachedSessions) {\n          this._maxCachedSessions = maxCachedSessions;\n          this._sessionCache = /* @__PURE__ */ new Map();\n          this._sessionRegistry = new global.FinalizationRegistry((key) => {\n            if (this._sessionCache.size < this._maxCachedSessions) {\n              return;\n            }\n            const ref = this._sessionCache.get(key);\n            if (ref !== void 0 && ref.deref() === void 0) {\n              this._sessionCache.delete(key);\n            }\n          });\n        }\n        get(sessionKey) {\n          const ref = this._sessionCache.get(sessionKey);\n          return ref ? ref.deref() : null;\n        }\n        set(sessionKey, session) {\n          if (this._maxCachedSessions === 0) {\n            return;\n          }\n          this._sessionCache.set(sessionKey, new WeakRef(session));\n          this._sessionRegistry.register(session, sessionKey);\n        }\n      }, __name(_a, \"WeakSessionCache\"), _a);\n    } else {\n      SessionCache = (_b = class {\n        constructor(maxCachedSessions) {\n          this._maxCachedSessions = maxCachedSessions;\n          this._sessionCache = /* @__PURE__ */ new Map();\n        }\n        get(sessionKey) {\n          return this._sessionCache.get(sessionKey);\n        }\n        set(sessionKey, session) {\n          if (this._maxCachedSessions === 0) {\n            return;\n          }\n          if (this._sessionCache.size >= this._maxCachedSessions) {\n            const { value: oldestKey } = this._sessionCache.keys().next();\n            this._sessionCache.delete(oldestKey);\n          }\n          this._sessionCache.set(sessionKey, session);\n        }\n      }, __name(_b, \"SimpleSessionCache\"), _b);\n    }\n    function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, session: customSession, ...opts }) {\n      if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n        throw new InvalidArgumentError(\"maxCachedSessions must be a positive integer or zero\");\n      }\n      const options = { path: socketPath, ...opts };\n      const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);\n      timeout = timeout == null ? 1e4 : timeout;\n      allowH2 = allowH2 != null ? allowH2 : false;\n      return /* @__PURE__ */ __name(function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {\n        let socket;\n        if (protocol === \"https:\") {\n          if (!tls) {\n            tls = require(\"tls\");\n          }\n          servername = servername || options.servername || util.getServerName(host) || null;\n          const sessionKey = servername || hostname;\n          assert(sessionKey);\n          const session = customSession || sessionCache.get(sessionKey) || null;\n          port = port || 443;\n          socket = tls.connect({\n            highWaterMark: 16384,\n            // TLS in node can't have bigger HWM anyway...\n            ...options,\n            servername,\n            session,\n            localAddress,\n            // TODO(HTTP/2): Add support for h2c\n            ALPNProtocols: allowH2 ? [\"http/1.1\", \"h2\"] : [\"http/1.1\"],\n            socket: httpSocket,\n            // upgrade socket connection\n            port,\n            host: hostname\n          });\n          socket.on(\"session\", function(session2) {\n            sessionCache.set(sessionKey, session2);\n          });\n        } else {\n          assert(!httpSocket, \"httpSocket can only be sent on TLS update\");\n          port = port || 80;\n          socket = net.connect({\n            highWaterMark: 64 * 1024,\n            // Same as nodejs fs streams.\n            ...options,\n            localAddress,\n            port,\n            host: hostname\n          });\n        }\n        if (options.keepAlive == null || options.keepAlive) {\n          const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;\n          socket.setKeepAlive(true, keepAliveInitialDelay);\n        }\n        const clearConnectTimeout = setupConnectTimeout(new WeakRef(socket), { timeout, hostname, port });\n        socket.setNoDelay(true).once(protocol === \"https:\" ? \"secureConnect\" : \"connect\", function() {\n          queueMicrotask(clearConnectTimeout);\n          if (callback) {\n            const cb = callback;\n            callback = null;\n            cb(null, this);\n          }\n        }).on(\"error\", function(err) {\n          queueMicrotask(clearConnectTimeout);\n          if (callback) {\n            const cb = callback;\n            callback = null;\n            cb(err);\n          }\n        });\n        return socket;\n      }, \"connect\");\n    }\n    __name(buildConnector, \"buildConnector\");\n    var setupConnectTimeout = define_process_default.platform === \"win32\" ? (socketWeakRef, opts) => {\n      if (!opts.timeout) {\n        return noop;\n      }\n      let s1 = null;\n      let s2 = null;\n      const fastTimer = timers.setFastTimeout(() => {\n        s1 = setImmediate(() => {\n          s2 = setImmediate(() => onConnectTimeout(socketWeakRef.deref(), opts));\n        });\n      }, opts.timeout);\n      return () => {\n        timers.clearFastTimeout(fastTimer);\n        clearImmediate(s1);\n        clearImmediate(s2);\n      };\n    } : (socketWeakRef, opts) => {\n      if (!opts.timeout) {\n        return noop;\n      }\n      let s1 = null;\n      const fastTimer = timers.setFastTimeout(() => {\n        s1 = setImmediate(() => {\n          onConnectTimeout(socketWeakRef.deref(), opts);\n        });\n      }, opts.timeout);\n      return () => {\n        timers.clearFastTimeout(fastTimer);\n        clearImmediate(s1);\n      };\n    };\n    function onConnectTimeout(socket, opts) {\n      if (socket == null) {\n        return;\n      }\n      let message = \"Connect Timeout Error\";\n      if (Array.isArray(socket.autoSelectFamilyAttemptedAddresses)) {\n        message += ` (attempted addresses: ${socket.autoSelectFamilyAttemptedAddresses.join(\", \")},`;\n      } else {\n        message += ` (attempted address: ${opts.hostname}:${opts.port},`;\n      }\n      message += ` timeout: ${opts.timeout}ms)`;\n      util.destroy(socket, new ConnectTimeoutError(message));\n    }\n    __name(onConnectTimeout, \"onConnectTimeout\");\n    module2.exports = buildConnector;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/utils.js\nvar require_utils = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/utils.js\"(exports2) {\n    \"use strict\";\n    init_define_process();\n    Object.defineProperty(exports2, \"__esModule\", { value: true });\n    exports2.enumToMap = void 0;\n    function enumToMap(obj) {\n      const res = {};\n      Object.keys(obj).forEach((key) => {\n        const value = obj[key];\n        if (typeof value === \"number\") {\n          res[key] = value;\n        }\n      });\n      return res;\n    }\n    __name(enumToMap, \"enumToMap\");\n    exports2.enumToMap = enumToMap;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/constants.js\nvar require_constants2 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/constants.js\"(exports2) {\n    \"use strict\";\n    init_define_process();\n    Object.defineProperty(exports2, \"__esModule\", { value: true });\n    exports2.SPECIAL_HEADERS = exports2.HEADER_STATE = exports2.MINOR = exports2.MAJOR = exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS = exports2.TOKEN = exports2.STRICT_TOKEN = exports2.HEX = exports2.URL_CHAR = exports2.STRICT_URL_CHAR = exports2.USERINFO_CHARS = exports2.MARK = exports2.ALPHANUM = exports2.NUM = exports2.HEX_MAP = exports2.NUM_MAP = exports2.ALPHA = exports2.FINISH = exports2.H_METHOD_MAP = exports2.METHOD_MAP = exports2.METHODS_RTSP = exports2.METHODS_ICE = exports2.METHODS_HTTP = exports2.METHODS = exports2.LENIENT_FLAGS = exports2.FLAGS = exports2.TYPE = exports2.ERROR = void 0;\n    var utils_1 = require_utils();\n    var ERROR;\n    (function(ERROR2) {\n      ERROR2[ERROR2[\"OK\"] = 0] = \"OK\";\n      ERROR2[ERROR2[\"INTERNAL\"] = 1] = \"INTERNAL\";\n      ERROR2[ERROR2[\"STRICT\"] = 2] = \"STRICT\";\n      ERROR2[ERROR2[\"LF_EXPECTED\"] = 3] = \"LF_EXPECTED\";\n      ERROR2[ERROR2[\"UNEXPECTED_CONTENT_LENGTH\"] = 4] = \"UNEXPECTED_CONTENT_LENGTH\";\n      ERROR2[ERROR2[\"CLOSED_CONNECTION\"] = 5] = \"CLOSED_CONNECTION\";\n      ERROR2[ERROR2[\"INVALID_METHOD\"] = 6] = \"INVALID_METHOD\";\n      ERROR2[ERROR2[\"INVALID_URL\"] = 7] = \"INVALID_URL\";\n      ERROR2[ERROR2[\"INVALID_CONSTANT\"] = 8] = \"INVALID_CONSTANT\";\n      ERROR2[ERROR2[\"INVALID_VERSION\"] = 9] = \"INVALID_VERSION\";\n      ERROR2[ERROR2[\"INVALID_HEADER_TOKEN\"] = 10] = \"INVALID_HEADER_TOKEN\";\n      ERROR2[ERROR2[\"INVALID_CONTENT_LENGTH\"] = 11] = \"INVALID_CONTENT_LENGTH\";\n      ERROR2[ERROR2[\"INVALID_CHUNK_SIZE\"] = 12] = \"INVALID_CHUNK_SIZE\";\n      ERROR2[ERROR2[\"INVALID_STATUS\"] = 13] = \"INVALID_STATUS\";\n      ERROR2[ERROR2[\"INVALID_EOF_STATE\"] = 14] = \"INVALID_EOF_STATE\";\n      ERROR2[ERROR2[\"INVALID_TRANSFER_ENCODING\"] = 15] = \"INVALID_TRANSFER_ENCODING\";\n      ERROR2[ERROR2[\"CB_MESSAGE_BEGIN\"] = 16] = \"CB_MESSAGE_BEGIN\";\n      ERROR2[ERROR2[\"CB_HEADERS_COMPLETE\"] = 17] = \"CB_HEADERS_COMPLETE\";\n      ERROR2[ERROR2[\"CB_MESSAGE_COMPLETE\"] = 18] = \"CB_MESSAGE_COMPLETE\";\n      ERROR2[ERROR2[\"CB_CHUNK_HEADER\"] = 19] = \"CB_CHUNK_HEADER\";\n      ERROR2[ERROR2[\"CB_CHUNK_COMPLETE\"] = 20] = \"CB_CHUNK_COMPLETE\";\n      ERROR2[ERROR2[\"PAUSED\"] = 21] = \"PAUSED\";\n      ERROR2[ERROR2[\"PAUSED_UPGRADE\"] = 22] = \"PAUSED_UPGRADE\";\n      ERROR2[ERROR2[\"PAUSED_H2_UPGRADE\"] = 23] = \"PAUSED_H2_UPGRADE\";\n      ERROR2[ERROR2[\"USER\"] = 24] = \"USER\";\n    })(ERROR = exports2.ERROR || (exports2.ERROR = {}));\n    var TYPE;\n    (function(TYPE2) {\n      TYPE2[TYPE2[\"BOTH\"] = 0] = \"BOTH\";\n      TYPE2[TYPE2[\"REQUEST\"] = 1] = \"REQUEST\";\n      TYPE2[TYPE2[\"RESPONSE\"] = 2] = \"RESPONSE\";\n    })(TYPE = exports2.TYPE || (exports2.TYPE = {}));\n    var FLAGS;\n    (function(FLAGS2) {\n      FLAGS2[FLAGS2[\"CONNECTION_KEEP_ALIVE\"] = 1] = \"CONNECTION_KEEP_ALIVE\";\n      FLAGS2[FLAGS2[\"CONNECTION_CLOSE\"] = 2] = \"CONNECTION_CLOSE\";\n      FLAGS2[FLAGS2[\"CONNECTION_UPGRADE\"] = 4] = \"CONNECTION_UPGRADE\";\n      FLAGS2[FLAGS2[\"CHUNKED\"] = 8] = \"CHUNKED\";\n      FLAGS2[FLAGS2[\"UPGRADE\"] = 16] = \"UPGRADE\";\n      FLAGS2[FLAGS2[\"CONTENT_LENGTH\"] = 32] = \"CONTENT_LENGTH\";\n      FLAGS2[FLAGS2[\"SKIPBODY\"] = 64] = \"SKIPBODY\";\n      FLAGS2[FLAGS2[\"TRAILING\"] = 128] = \"TRAILING\";\n      FLAGS2[FLAGS2[\"TRANSFER_ENCODING\"] = 512] = \"TRANSFER_ENCODING\";\n    })(FLAGS = exports2.FLAGS || (exports2.FLAGS = {}));\n    var LENIENT_FLAGS;\n    (function(LENIENT_FLAGS2) {\n      LENIENT_FLAGS2[LENIENT_FLAGS2[\"HEADERS\"] = 1] = \"HEADERS\";\n      LENIENT_FLAGS2[LENIENT_FLAGS2[\"CHUNKED_LENGTH\"] = 2] = \"CHUNKED_LENGTH\";\n      LENIENT_FLAGS2[LENIENT_FLAGS2[\"KEEP_ALIVE\"] = 4] = \"KEEP_ALIVE\";\n    })(LENIENT_FLAGS = exports2.LENIENT_FLAGS || (exports2.LENIENT_FLAGS = {}));\n    var METHODS;\n    (function(METHODS2) {\n      METHODS2[METHODS2[\"DELETE\"] = 0] = \"DELETE\";\n      METHODS2[METHODS2[\"GET\"] = 1] = \"GET\";\n      METHODS2[METHODS2[\"HEAD\"] = 2] = \"HEAD\";\n      METHODS2[METHODS2[\"POST\"] = 3] = \"POST\";\n      METHODS2[METHODS2[\"PUT\"] = 4] = \"PUT\";\n      METHODS2[METHODS2[\"CONNECT\"] = 5] = \"CONNECT\";\n      METHODS2[METHODS2[\"OPTIONS\"] = 6] = \"OPTIONS\";\n      METHODS2[METHODS2[\"TRACE\"] = 7] = \"TRACE\";\n      METHODS2[METHODS2[\"COPY\"] = 8] = \"COPY\";\n      METHODS2[METHODS2[\"LOCK\"] = 9] = \"LOCK\";\n      METHODS2[METHODS2[\"MKCOL\"] = 10] = \"MKCOL\";\n      METHODS2[METHODS2[\"MOVE\"] = 11] = \"MOVE\";\n      METHODS2[METHODS2[\"PROPFIND\"] = 12] = \"PROPFIND\";\n      METHODS2[METHODS2[\"PROPPATCH\"] = 13] = \"PROPPATCH\";\n      METHODS2[METHODS2[\"SEARCH\"] = 14] = \"SEARCH\";\n      METHODS2[METHODS2[\"UNLOCK\"] = 15] = \"UNLOCK\";\n      METHODS2[METHODS2[\"BIND\"] = 16] = \"BIND\";\n      METHODS2[METHODS2[\"REBIND\"] = 17] = \"REBIND\";\n      METHODS2[METHODS2[\"UNBIND\"] = 18] = \"UNBIND\";\n      METHODS2[METHODS2[\"ACL\"] = 19] = \"ACL\";\n      METHODS2[METHODS2[\"REPORT\"] = 20] = \"REPORT\";\n      METHODS2[METHODS2[\"MKACTIVITY\"] = 21] = \"MKACTIVITY\";\n      METHODS2[METHODS2[\"CHECKOUT\"] = 22] = \"CHECKOUT\";\n      METHODS2[METHODS2[\"MERGE\"] = 23] = \"MERGE\";\n      METHODS2[METHODS2[\"M-SEARCH\"] = 24] = \"M-SEARCH\";\n      METHODS2[METHODS2[\"NOTIFY\"] = 25] = \"NOTIFY\";\n      METHODS2[METHODS2[\"SUBSCRIBE\"] = 26] = \"SUBSCRIBE\";\n      METHODS2[METHODS2[\"UNSUBSCRIBE\"] = 27] = \"UNSUBSCRIBE\";\n      METHODS2[METHODS2[\"PATCH\"] = 28] = \"PATCH\";\n      METHODS2[METHODS2[\"PURGE\"] = 29] = \"PURGE\";\n      METHODS2[METHODS2[\"MKCALENDAR\"] = 30] = \"MKCALENDAR\";\n      METHODS2[METHODS2[\"LINK\"] = 31] = \"LINK\";\n      METHODS2[METHODS2[\"UNLINK\"] = 32] = \"UNLINK\";\n      METHODS2[METHODS2[\"SOURCE\"] = 33] = \"SOURCE\";\n      METHODS2[METHODS2[\"PRI\"] = 34] = \"PRI\";\n      METHODS2[METHODS2[\"DESCRIBE\"] = 35] = \"DESCRIBE\";\n      METHODS2[METHODS2[\"ANNOUNCE\"] = 36] = \"ANNOUNCE\";\n      METHODS2[METHODS2[\"SETUP\"] = 37] = \"SETUP\";\n      METHODS2[METHODS2[\"PLAY\"] = 38] = \"PLAY\";\n      METHODS2[METHODS2[\"PAUSE\"] = 39] = \"PAUSE\";\n      METHODS2[METHODS2[\"TEARDOWN\"] = 40] = \"TEARDOWN\";\n      METHODS2[METHODS2[\"GET_PARAMETER\"] = 41] = \"GET_PARAMETER\";\n      METHODS2[METHODS2[\"SET_PARAMETER\"] = 42] = \"SET_PARAMETER\";\n      METHODS2[METHODS2[\"REDIRECT\"] = 43] = \"REDIRECT\";\n      METHODS2[METHODS2[\"RECORD\"] = 44] = \"RECORD\";\n      METHODS2[METHODS2[\"FLUSH\"] = 45] = \"FLUSH\";\n    })(METHODS = exports2.METHODS || (exports2.METHODS = {}));\n    exports2.METHODS_HTTP = [\n      METHODS.DELETE,\n      METHODS.GET,\n      METHODS.HEAD,\n      METHODS.POST,\n      METHODS.PUT,\n      METHODS.CONNECT,\n      METHODS.OPTIONS,\n      METHODS.TRACE,\n      METHODS.COPY,\n      METHODS.LOCK,\n      METHODS.MKCOL,\n      METHODS.MOVE,\n      METHODS.PROPFIND,\n      METHODS.PROPPATCH,\n      METHODS.SEARCH,\n      METHODS.UNLOCK,\n      METHODS.BIND,\n      METHODS.REBIND,\n      METHODS.UNBIND,\n      METHODS.ACL,\n      METHODS.REPORT,\n      METHODS.MKACTIVITY,\n      METHODS.CHECKOUT,\n      METHODS.MERGE,\n      METHODS[\"M-SEARCH\"],\n      METHODS.NOTIFY,\n      METHODS.SUBSCRIBE,\n      METHODS.UNSUBSCRIBE,\n      METHODS.PATCH,\n      METHODS.PURGE,\n      METHODS.MKCALENDAR,\n      METHODS.LINK,\n      METHODS.UNLINK,\n      METHODS.PRI,\n      // TODO(indutny): should we allow it with HTTP?\n      METHODS.SOURCE\n    ];\n    exports2.METHODS_ICE = [\n      METHODS.SOURCE\n    ];\n    exports2.METHODS_RTSP = [\n      METHODS.OPTIONS,\n      METHODS.DESCRIBE,\n      METHODS.ANNOUNCE,\n      METHODS.SETUP,\n      METHODS.PLAY,\n      METHODS.PAUSE,\n      METHODS.TEARDOWN,\n      METHODS.GET_PARAMETER,\n      METHODS.SET_PARAMETER,\n      METHODS.REDIRECT,\n      METHODS.RECORD,\n      METHODS.FLUSH,\n      // For AirPlay\n      METHODS.GET,\n      METHODS.POST\n    ];\n    exports2.METHOD_MAP = utils_1.enumToMap(METHODS);\n    exports2.H_METHOD_MAP = {};\n    Object.keys(exports2.METHOD_MAP).forEach((key) => {\n      if (/^H/.test(key)) {\n        exports2.H_METHOD_MAP[key] = exports2.METHOD_MAP[key];\n      }\n    });\n    var FINISH;\n    (function(FINISH2) {\n      FINISH2[FINISH2[\"SAFE\"] = 0] = \"SAFE\";\n      FINISH2[FINISH2[\"SAFE_WITH_CB\"] = 1] = \"SAFE_WITH_CB\";\n      FINISH2[FINISH2[\"UNSAFE\"] = 2] = \"UNSAFE\";\n    })(FINISH = exports2.FINISH || (exports2.FINISH = {}));\n    exports2.ALPHA = [];\n    for (let i = \"A\".charCodeAt(0); i <= \"Z\".charCodeAt(0); i++) {\n      exports2.ALPHA.push(String.fromCharCode(i));\n      exports2.ALPHA.push(String.fromCharCode(i + 32));\n    }\n    exports2.NUM_MAP = {\n      0: 0,\n      1: 1,\n      2: 2,\n      3: 3,\n      4: 4,\n      5: 5,\n      6: 6,\n      7: 7,\n      8: 8,\n      9: 9\n    };\n    exports2.HEX_MAP = {\n      0: 0,\n      1: 1,\n      2: 2,\n      3: 3,\n      4: 4,\n      5: 5,\n      6: 6,\n      7: 7,\n      8: 8,\n      9: 9,\n      A: 10,\n      B: 11,\n      C: 12,\n      D: 13,\n      E: 14,\n      F: 15,\n      a: 10,\n      b: 11,\n      c: 12,\n      d: 13,\n      e: 14,\n      f: 15\n    };\n    exports2.NUM = [\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\"\n    ];\n    exports2.ALPHANUM = exports2.ALPHA.concat(exports2.NUM);\n    exports2.MARK = [\"-\", \"_\", \".\", \"!\", \"~\", \"*\", \"'\", \"(\", \")\"];\n    exports2.USERINFO_CHARS = exports2.ALPHANUM.concat(exports2.MARK).concat([\"%\", \";\", \":\", \"&\", \"=\", \"+\", \"$\", \",\"]);\n    exports2.STRICT_URL_CHAR = [\n      \"!\",\n      '\"',\n      \"$\",\n      \"%\",\n      \"&\",\n      \"'\",\n      \"(\",\n      \")\",\n      \"*\",\n      \"+\",\n      \",\",\n      \"-\",\n      \".\",\n      \"/\",\n      \":\",\n      \";\",\n      \"<\",\n      \"=\",\n      \">\",\n      \"@\",\n      \"[\",\n      \"\\\\\",\n      \"]\",\n      \"^\",\n      \"_\",\n      \"`\",\n      \"{\",\n      \"|\",\n      \"}\",\n      \"~\"\n    ].concat(exports2.ALPHANUM);\n    exports2.URL_CHAR = exports2.STRICT_URL_CHAR.concat([\"\t\", \"\\f\"]);\n    for (let i = 128; i <= 255; i++) {\n      exports2.URL_CHAR.push(i);\n    }\n    exports2.HEX = exports2.NUM.concat([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]);\n    exports2.STRICT_TOKEN = [\n      \"!\",\n      \"#\",\n      \"$\",\n      \"%\",\n      \"&\",\n      \"'\",\n      \"*\",\n      \"+\",\n      \"-\",\n      \".\",\n      \"^\",\n      \"_\",\n      \"`\",\n      \"|\",\n      \"~\"\n    ].concat(exports2.ALPHANUM);\n    exports2.TOKEN = exports2.STRICT_TOKEN.concat([\" \"]);\n    exports2.HEADER_CHARS = [\"\t\"];\n    for (let i = 32; i <= 255; i++) {\n      if (i !== 127) {\n        exports2.HEADER_CHARS.push(i);\n      }\n    }\n    exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS.filter((c) => c !== 44);\n    exports2.MAJOR = exports2.NUM_MAP;\n    exports2.MINOR = exports2.MAJOR;\n    var HEADER_STATE;\n    (function(HEADER_STATE2) {\n      HEADER_STATE2[HEADER_STATE2[\"GENERAL\"] = 0] = \"GENERAL\";\n      HEADER_STATE2[HEADER_STATE2[\"CONNECTION\"] = 1] = \"CONNECTION\";\n      HEADER_STATE2[HEADER_STATE2[\"CONTENT_LENGTH\"] = 2] = \"CONTENT_LENGTH\";\n      HEADER_STATE2[HEADER_STATE2[\"TRANSFER_ENCODING\"] = 3] = \"TRANSFER_ENCODING\";\n      HEADER_STATE2[HEADER_STATE2[\"UPGRADE\"] = 4] = \"UPGRADE\";\n      HEADER_STATE2[HEADER_STATE2[\"CONNECTION_KEEP_ALIVE\"] = 5] = \"CONNECTION_KEEP_ALIVE\";\n      HEADER_STATE2[HEADER_STATE2[\"CONNECTION_CLOSE\"] = 6] = \"CONNECTION_CLOSE\";\n      HEADER_STATE2[HEADER_STATE2[\"CONNECTION_UPGRADE\"] = 7] = \"CONNECTION_UPGRADE\";\n      HEADER_STATE2[HEADER_STATE2[\"TRANSFER_ENCODING_CHUNKED\"] = 8] = \"TRANSFER_ENCODING_CHUNKED\";\n    })(HEADER_STATE = exports2.HEADER_STATE || (exports2.HEADER_STATE = {}));\n    exports2.SPECIAL_HEADERS = {\n      \"connection\": HEADER_STATE.CONNECTION,\n      \"content-length\": HEADER_STATE.CONTENT_LENGTH,\n      \"proxy-connection\": HEADER_STATE.CONNECTION,\n      \"transfer-encoding\": HEADER_STATE.TRANSFER_ENCODING,\n      \"upgrade\": HEADER_STATE.UPGRADE\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/llhttp-wasm.js\nvar require_llhttp_wasm = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/llhttp-wasm.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Buffer: Buffer2 } = require(\"buffer\");\n    module2.exports = Buffer2.from(\"\", \"base64\");\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\nvar require_llhttp_simd_wasm = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Buffer: Buffer2 } = require(\"buffer\");\n    module2.exports = Buffer2.from(\"\", \"base64\");\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/constants.js\nvar require_constants3 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/constants.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var corsSafeListedMethods = (\n      /** @type {const} */\n      [\"GET\", \"HEAD\", \"POST\"]\n    );\n    var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);\n    var nullBodyStatus = (\n      /** @type {const} */\n      [101, 204, 205, 304]\n    );\n    var redirectStatus = (\n      /** @type {const} */\n      [301, 302, 303, 307, 308]\n    );\n    var redirectStatusSet = new Set(redirectStatus);\n    var badPorts = (\n      /** @type {const} */\n      [\n        \"1\",\n        \"7\",\n        \"9\",\n        \"11\",\n        \"13\",\n        \"15\",\n        \"17\",\n        \"19\",\n        \"20\",\n        \"21\",\n        \"22\",\n        \"23\",\n        \"25\",\n        \"37\",\n        \"42\",\n        \"43\",\n        \"53\",\n        \"69\",\n        \"77\",\n        \"79\",\n        \"87\",\n        \"95\",\n        \"101\",\n        \"102\",\n        \"103\",\n        \"104\",\n        \"109\",\n        \"110\",\n        \"111\",\n        \"113\",\n        \"115\",\n        \"117\",\n        \"119\",\n        \"123\",\n        \"135\",\n        \"137\",\n        \"139\",\n        \"143\",\n        \"161\",\n        \"179\",\n        \"389\",\n        \"427\",\n        \"465\",\n        \"512\",\n        \"513\",\n        \"514\",\n        \"515\",\n        \"526\",\n        \"530\",\n        \"531\",\n        \"532\",\n        \"540\",\n        \"548\",\n        \"554\",\n        \"556\",\n        \"563\",\n        \"587\",\n        \"601\",\n        \"636\",\n        \"989\",\n        \"990\",\n        \"993\",\n        \"995\",\n        \"1719\",\n        \"1720\",\n        \"1723\",\n        \"2049\",\n        \"3659\",\n        \"4045\",\n        \"4190\",\n        \"5060\",\n        \"5061\",\n        \"6000\",\n        \"6566\",\n        \"6665\",\n        \"6666\",\n        \"6667\",\n        \"6668\",\n        \"6669\",\n        \"6679\",\n        \"6697\",\n        \"10080\"\n      ]\n    );\n    var badPortsSet = new Set(badPorts);\n    var referrerPolicy = (\n      /** @type {const} */\n      [\n        \"\",\n        \"no-referrer\",\n        \"no-referrer-when-downgrade\",\n        \"same-origin\",\n        \"origin\",\n        \"strict-origin\",\n        \"origin-when-cross-origin\",\n        \"strict-origin-when-cross-origin\",\n        \"unsafe-url\"\n      ]\n    );\n    var referrerPolicySet = new Set(referrerPolicy);\n    var requestRedirect = (\n      /** @type {const} */\n      [\"follow\", \"manual\", \"error\"]\n    );\n    var safeMethods = (\n      /** @type {const} */\n      [\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"]\n    );\n    var safeMethodsSet = new Set(safeMethods);\n    var requestMode = (\n      /** @type {const} */\n      [\"navigate\", \"same-origin\", \"no-cors\", \"cors\"]\n    );\n    var requestCredentials = (\n      /** @type {const} */\n      [\"omit\", \"same-origin\", \"include\"]\n    );\n    var requestCache = (\n      /** @type {const} */\n      [\n        \"default\",\n        \"no-store\",\n        \"reload\",\n        \"no-cache\",\n        \"force-cache\",\n        \"only-if-cached\"\n      ]\n    );\n    var requestBodyHeader = (\n      /** @type {const} */\n      [\n        \"content-encoding\",\n        \"content-language\",\n        \"content-location\",\n        \"content-type\",\n        // See https://github.com/nodejs/undici/issues/2021\n        // 'Content-Length' is a forbidden header name, which is typically\n        // removed in the Headers implementation. However, undici doesn't\n        // filter out headers, so we add it here.\n        \"content-length\"\n      ]\n    );\n    var requestDuplex = (\n      /** @type {const} */\n      [\n        \"half\"\n      ]\n    );\n    var forbiddenMethods = (\n      /** @type {const} */\n      [\"CONNECT\", \"TRACE\", \"TRACK\"]\n    );\n    var forbiddenMethodsSet = new Set(forbiddenMethods);\n    var subresource = (\n      /** @type {const} */\n      [\n        \"audio\",\n        \"audioworklet\",\n        \"font\",\n        \"image\",\n        \"manifest\",\n        \"paintworklet\",\n        \"script\",\n        \"style\",\n        \"track\",\n        \"video\",\n        \"xslt\",\n        \"\"\n      ]\n    );\n    var subresourceSet = new Set(subresource);\n    module2.exports = {\n      subresource,\n      forbiddenMethods,\n      requestBodyHeader,\n      referrerPolicy,\n      requestRedirect,\n      requestMode,\n      requestCredentials,\n      requestCache,\n      redirectStatus,\n      corsSafeListedMethods,\n      nullBodyStatus,\n      safeMethods,\n      badPorts,\n      requestDuplex,\n      subresourceSet,\n      badPortsSet,\n      redirectStatusSet,\n      corsSafeListedMethodsSet,\n      safeMethodsSet,\n      forbiddenMethodsSet,\n      referrerPolicySet\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/global.js\nvar require_global = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/global.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var globalOrigin = Symbol.for(\"undici.globalOrigin.1\");\n    function getGlobalOrigin() {\n      return globalThis[globalOrigin];\n    }\n    __name(getGlobalOrigin, \"getGlobalOrigin\");\n    function setGlobalOrigin(newOrigin) {\n      if (newOrigin === void 0) {\n        Object.defineProperty(globalThis, globalOrigin, {\n          value: void 0,\n          writable: true,\n          enumerable: false,\n          configurable: false\n        });\n        return;\n      }\n      const parsedURL = new URL(newOrigin);\n      if (parsedURL.protocol !== \"http:\" && parsedURL.protocol !== \"https:\") {\n        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);\n      }\n      Object.defineProperty(globalThis, globalOrigin, {\n        value: parsedURL,\n        writable: true,\n        enumerable: false,\n        configurable: false\n      });\n    }\n    __name(setGlobalOrigin, \"setGlobalOrigin\");\n    module2.exports = {\n      getGlobalOrigin,\n      setGlobalOrigin\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/data-url.js\nvar require_data_url = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/data-url.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var encoder = new TextEncoder();\n    var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+\\-.^_|~A-Za-z0-9]+$/;\n    var HTTP_WHITESPACE_REGEX = /[\\u000A\\u000D\\u0009\\u0020]/;\n    var ASCII_WHITESPACE_REPLACE_REGEX = /[\\u0009\\u000A\\u000C\\u000D\\u0020]/g;\n    var HTTP_QUOTED_STRING_TOKENS = /^[\\u0009\\u0020-\\u007E\\u0080-\\u00FF]+$/;\n    function dataURLProcessor(dataURL) {\n      assert(dataURL.protocol === \"data:\");\n      let input = URLSerializer(dataURL, true);\n      input = input.slice(5);\n      const position = { position: 0 };\n      let mimeType = collectASequenceOfCodePointsFast(\n        \",\",\n        input,\n        position\n      );\n      const mimeTypeLength = mimeType.length;\n      mimeType = removeASCIIWhitespace(mimeType, true, true);\n      if (position.position >= input.length) {\n        return \"failure\";\n      }\n      position.position++;\n      const encodedBody = input.slice(mimeTypeLength + 1);\n      let body = stringPercentDecode(encodedBody);\n      if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n        const stringBody = isomorphicDecode(body);\n        body = forgivingBase64(stringBody);\n        if (body === \"failure\") {\n          return \"failure\";\n        }\n        mimeType = mimeType.slice(0, -6);\n        mimeType = mimeType.replace(/(\\u0020)+$/, \"\");\n        mimeType = mimeType.slice(0, -1);\n      }\n      if (mimeType.startsWith(\";\")) {\n        mimeType = \"text/plain\" + mimeType;\n      }\n      let mimeTypeRecord = parseMIMEType(mimeType);\n      if (mimeTypeRecord === \"failure\") {\n        mimeTypeRecord = parseMIMEType(\"text/plain;charset=US-ASCII\");\n      }\n      return { mimeType: mimeTypeRecord, body };\n    }\n    __name(dataURLProcessor, \"dataURLProcessor\");\n    function URLSerializer(url, excludeFragment = false) {\n      if (!excludeFragment) {\n        return url.href;\n      }\n      const href = url.href;\n      const hashLength = url.hash.length;\n      const serialized = hashLength === 0 ? href : href.substring(0, href.length - hashLength);\n      if (!hashLength && href.endsWith(\"#\")) {\n        return serialized.slice(0, -1);\n      }\n      return serialized;\n    }\n    __name(URLSerializer, \"URLSerializer\");\n    function collectASequenceOfCodePoints(condition, input, position) {\n      let result = \"\";\n      while (position.position < input.length && condition(input[position.position])) {\n        result += input[position.position];\n        position.position++;\n      }\n      return result;\n    }\n    __name(collectASequenceOfCodePoints, \"collectASequenceOfCodePoints\");\n    function collectASequenceOfCodePointsFast(char, input, position) {\n      const idx = input.indexOf(char, position.position);\n      const start = position.position;\n      if (idx === -1) {\n        position.position = input.length;\n        return input.slice(start);\n      }\n      position.position = idx;\n      return input.slice(start, position.position);\n    }\n    __name(collectASequenceOfCodePointsFast, \"collectASequenceOfCodePointsFast\");\n    function stringPercentDecode(input) {\n      const bytes = encoder.encode(input);\n      return percentDecode(bytes);\n    }\n    __name(stringPercentDecode, \"stringPercentDecode\");\n    function isHexCharByte(byte) {\n      return byte >= 48 && byte <= 57 || byte >= 65 && byte <= 70 || byte >= 97 && byte <= 102;\n    }\n    __name(isHexCharByte, \"isHexCharByte\");\n    function hexByteToNumber(byte) {\n      return (\n        // 0-9\n        byte >= 48 && byte <= 57 ? byte - 48 : (byte & 223) - 55\n      );\n    }\n    __name(hexByteToNumber, \"hexByteToNumber\");\n    function percentDecode(input) {\n      const length = input.length;\n      const output = new Uint8Array(length);\n      let j = 0;\n      for (let i = 0; i < length; ++i) {\n        const byte = input[i];\n        if (byte !== 37) {\n          output[j++] = byte;\n        } else if (byte === 37 && !(isHexCharByte(input[i + 1]) && isHexCharByte(input[i + 2]))) {\n          output[j++] = 37;\n        } else {\n          output[j++] = hexByteToNumber(input[i + 1]) << 4 | hexByteToNumber(input[i + 2]);\n          i += 2;\n        }\n      }\n      return length === j ? output : output.subarray(0, j);\n    }\n    __name(percentDecode, \"percentDecode\");\n    function parseMIMEType(input) {\n      input = removeHTTPWhitespace(input, true, true);\n      const position = { position: 0 };\n      const type = collectASequenceOfCodePointsFast(\n        \"/\",\n        input,\n        position\n      );\n      if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n        return \"failure\";\n      }\n      if (position.position > input.length) {\n        return \"failure\";\n      }\n      position.position++;\n      let subtype = collectASequenceOfCodePointsFast(\n        \";\",\n        input,\n        position\n      );\n      subtype = removeHTTPWhitespace(subtype, false, true);\n      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n        return \"failure\";\n      }\n      const typeLowercase = type.toLowerCase();\n      const subtypeLowercase = subtype.toLowerCase();\n      const mimeType = {\n        type: typeLowercase,\n        subtype: subtypeLowercase,\n        /** @type {Map<string, string>} */\n        parameters: /* @__PURE__ */ new Map(),\n        // https://mimesniff.spec.whatwg.org/#mime-type-essence\n        essence: `${typeLowercase}/${subtypeLowercase}`\n      };\n      while (position.position < input.length) {\n        position.position++;\n        collectASequenceOfCodePoints(\n          // https://fetch.spec.whatwg.org/#http-whitespace\n          (char) => HTTP_WHITESPACE_REGEX.test(char),\n          input,\n          position\n        );\n        let parameterName = collectASequenceOfCodePoints(\n          (char) => char !== \";\" && char !== \"=\",\n          input,\n          position\n        );\n        parameterName = parameterName.toLowerCase();\n        if (position.position < input.length) {\n          if (input[position.position] === \";\") {\n            continue;\n          }\n          position.position++;\n        }\n        if (position.position > input.length) {\n          break;\n        }\n        let parameterValue = null;\n        if (input[position.position] === '\"') {\n          parameterValue = collectAnHTTPQuotedString(input, position, true);\n          collectASequenceOfCodePointsFast(\n            \";\",\n            input,\n            position\n          );\n        } else {\n          parameterValue = collectASequenceOfCodePointsFast(\n            \";\",\n            input,\n            position\n          );\n          parameterValue = removeHTTPWhitespace(parameterValue, false, true);\n          if (parameterValue.length === 0) {\n            continue;\n          }\n        }\n        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {\n          mimeType.parameters.set(parameterName, parameterValue);\n        }\n      }\n      return mimeType;\n    }\n    __name(parseMIMEType, \"parseMIMEType\");\n    function forgivingBase64(data) {\n      data = data.replace(ASCII_WHITESPACE_REPLACE_REGEX, \"\");\n      let dataLength = data.length;\n      if (dataLength % 4 === 0) {\n        if (data.charCodeAt(dataLength - 1) === 61) {\n          --dataLength;\n          if (data.charCodeAt(dataLength - 1) === 61) {\n            --dataLength;\n          }\n        }\n      }\n      if (dataLength % 4 === 1) {\n        return \"failure\";\n      }\n      if (/[^+/0-9A-Za-z]/.test(data.length === dataLength ? data : data.substring(0, dataLength))) {\n        return \"failure\";\n      }\n      const buffer = Buffer.from(data, \"base64\");\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    }\n    __name(forgivingBase64, \"forgivingBase64\");\n    function collectAnHTTPQuotedString(input, position, extractValue) {\n      const positionStart = position.position;\n      let value = \"\";\n      assert(input[position.position] === '\"');\n      position.position++;\n      while (true) {\n        value += collectASequenceOfCodePoints(\n          (char) => char !== '\"' && char !== \"\\\\\",\n          input,\n          position\n        );\n        if (position.position >= input.length) {\n          break;\n        }\n        const quoteOrBackslash = input[position.position];\n        position.position++;\n        if (quoteOrBackslash === \"\\\\\") {\n          if (position.position >= input.length) {\n            value += \"\\\\\";\n            break;\n          }\n          value += input[position.position];\n          position.position++;\n        } else {\n          assert(quoteOrBackslash === '\"');\n          break;\n        }\n      }\n      if (extractValue) {\n        return value;\n      }\n      return input.slice(positionStart, position.position);\n    }\n    __name(collectAnHTTPQuotedString, \"collectAnHTTPQuotedString\");\n    function serializeAMimeType(mimeType) {\n      assert(mimeType !== \"failure\");\n      const { parameters, essence } = mimeType;\n      let serialization = essence;\n      for (let [name, value] of parameters.entries()) {\n        serialization += \";\";\n        serialization += name;\n        serialization += \"=\";\n        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n          value = value.replace(/(\\\\|\")/g, \"\\\\$1\");\n          value = '\"' + value;\n          value += '\"';\n        }\n        serialization += value;\n      }\n      return serialization;\n    }\n    __name(serializeAMimeType, \"serializeAMimeType\");\n    function isHTTPWhiteSpace(char) {\n      return char === 13 || char === 10 || char === 9 || char === 32;\n    }\n    __name(isHTTPWhiteSpace, \"isHTTPWhiteSpace\");\n    function removeHTTPWhitespace(str, leading = true, trailing = true) {\n      return removeChars(str, leading, trailing, isHTTPWhiteSpace);\n    }\n    __name(removeHTTPWhitespace, \"removeHTTPWhitespace\");\n    function isASCIIWhitespace(char) {\n      return char === 13 || char === 10 || char === 9 || char === 12 || char === 32;\n    }\n    __name(isASCIIWhitespace, \"isASCIIWhitespace\");\n    function removeASCIIWhitespace(str, leading = true, trailing = true) {\n      return removeChars(str, leading, trailing, isASCIIWhitespace);\n    }\n    __name(removeASCIIWhitespace, \"removeASCIIWhitespace\");\n    function removeChars(str, leading, trailing, predicate) {\n      let lead = 0;\n      let trail = str.length - 1;\n      if (leading) {\n        while (lead < str.length && predicate(str.charCodeAt(lead)))\n          lead++;\n      }\n      if (trailing) {\n        while (trail > 0 && predicate(str.charCodeAt(trail)))\n          trail--;\n      }\n      return lead === 0 && trail === str.length - 1 ? str : str.slice(lead, trail + 1);\n    }\n    __name(removeChars, \"removeChars\");\n    function isomorphicDecode(input) {\n      const length = input.length;\n      if ((2 << 15) - 1 > length) {\n        return String.fromCharCode.apply(null, input);\n      }\n      let result = \"\";\n      let i = 0;\n      let addition = (2 << 15) - 1;\n      while (i < length) {\n        if (i + addition > length) {\n          addition = length - i;\n        }\n        result += String.fromCharCode.apply(null, input.subarray(i, i += addition));\n      }\n      return result;\n    }\n    __name(isomorphicDecode, \"isomorphicDecode\");\n    function minimizeSupportedMimeType(mimeType) {\n      switch (mimeType.essence) {\n        case \"application/ecmascript\":\n        case \"application/javascript\":\n        case \"application/x-ecmascript\":\n        case \"application/x-javascript\":\n        case \"text/ecmascript\":\n        case \"text/javascript\":\n        case \"text/javascript1.0\":\n        case \"text/javascript1.1\":\n        case \"text/javascript1.2\":\n        case \"text/javascript1.3\":\n        case \"text/javascript1.4\":\n        case \"text/javascript1.5\":\n        case \"text/jscript\":\n        case \"text/livescript\":\n        case \"text/x-ecmascript\":\n        case \"text/x-javascript\":\n          return \"text/javascript\";\n        case \"application/json\":\n        case \"text/json\":\n          return \"application/json\";\n        case \"image/svg+xml\":\n          return \"image/svg+xml\";\n        case \"text/xml\":\n        case \"application/xml\":\n          return \"application/xml\";\n      }\n      if (mimeType.subtype.endsWith(\"+json\")) {\n        return \"application/json\";\n      }\n      if (mimeType.subtype.endsWith(\"+xml\")) {\n        return \"application/xml\";\n      }\n      return \"\";\n    }\n    __name(minimizeSupportedMimeType, \"minimizeSupportedMimeType\");\n    module2.exports = {\n      dataURLProcessor,\n      URLSerializer,\n      collectASequenceOfCodePoints,\n      collectASequenceOfCodePointsFast,\n      stringPercentDecode,\n      parseMIMEType,\n      collectAnHTTPQuotedString,\n      serializeAMimeType,\n      removeChars,\n      removeHTTPWhitespace,\n      minimizeSupportedMimeType,\n      HTTP_TOKEN_CODEPOINTS,\n      isomorphicDecode\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/webidl.js\nvar require_webidl = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/webidl.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { types, inspect } = require(\"util\");\n    var { markAsUncloneable } = require(\"worker_threads\");\n    var { toUSVString } = require_util();\n    var webidl = {};\n    webidl.converters = {};\n    webidl.util = {};\n    webidl.errors = {};\n    webidl.errors.exception = function(message) {\n      return new TypeError(`${message.header}: ${message.message}`);\n    };\n    webidl.errors.conversionFailed = function(context) {\n      const plural = context.types.length === 1 ? \"\" : \" one of\";\n      const message = `${context.argument} could not be converted to${plural}: ${context.types.join(\", \")}.`;\n      return webidl.errors.exception({\n        header: context.prefix,\n        message\n      });\n    };\n    webidl.errors.invalidArgument = function(context) {\n      return webidl.errors.exception({\n        header: context.prefix,\n        message: `\"${context.value}\" is an invalid ${context.type}.`\n      });\n    };\n    webidl.brandCheck = function(V, I, opts) {\n      if (opts?.strict !== false) {\n        if (!(V instanceof I)) {\n          const err = new TypeError(\"Illegal invocation\");\n          err.code = \"ERR_INVALID_THIS\";\n          throw err;\n        }\n      } else {\n        if (V?.[Symbol.toStringTag] !== I.prototype[Symbol.toStringTag]) {\n          const err = new TypeError(\"Illegal invocation\");\n          err.code = \"ERR_INVALID_THIS\";\n          throw err;\n        }\n      }\n    };\n    webidl.argumentLengthCheck = function({ length }, min, ctx) {\n      if (length < min) {\n        throw webidl.errors.exception({\n          message: `${min} argument${min !== 1 ? \"s\" : \"\"} required, but${length ? \" only\" : \"\"} ${length} found.`,\n          header: ctx\n        });\n      }\n    };\n    webidl.illegalConstructor = function() {\n      throw webidl.errors.exception({\n        header: \"TypeError\",\n        message: \"Illegal constructor\"\n      });\n    };\n    webidl.util.Type = function(V) {\n      switch (typeof V) {\n        case \"undefined\":\n          return \"Undefined\";\n        case \"boolean\":\n          return \"Boolean\";\n        case \"string\":\n          return \"String\";\n        case \"symbol\":\n          return \"Symbol\";\n        case \"number\":\n          return \"Number\";\n        case \"bigint\":\n          return \"BigInt\";\n        case \"function\":\n        case \"object\": {\n          if (V === null) {\n            return \"Null\";\n          }\n          return \"Object\";\n        }\n      }\n    };\n    webidl.util.markAsUncloneable = markAsUncloneable || (() => {\n    });\n    webidl.util.ConvertToInt = function(V, bitLength, signedness, opts) {\n      let upperBound;\n      let lowerBound;\n      if (bitLength === 64) {\n        upperBound = Math.pow(2, 53) - 1;\n        if (signedness === \"unsigned\") {\n          lowerBound = 0;\n        } else {\n          lowerBound = Math.pow(-2, 53) + 1;\n        }\n      } else if (signedness === \"unsigned\") {\n        lowerBound = 0;\n        upperBound = Math.pow(2, bitLength) - 1;\n      } else {\n        lowerBound = Math.pow(-2, bitLength) - 1;\n        upperBound = Math.pow(2, bitLength - 1) - 1;\n      }\n      let x = Number(V);\n      if (x === 0) {\n        x = 0;\n      }\n      if (opts?.enforceRange === true) {\n        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n          throw webidl.errors.exception({\n            header: \"Integer conversion\",\n            message: `Could not convert ${webidl.util.Stringify(V)} to an integer.`\n          });\n        }\n        x = webidl.util.IntegerPart(x);\n        if (x < lowerBound || x > upperBound) {\n          throw webidl.errors.exception({\n            header: \"Integer conversion\",\n            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n          });\n        }\n        return x;\n      }\n      if (!Number.isNaN(x) && opts?.clamp === true) {\n        x = Math.min(Math.max(x, lowerBound), upperBound);\n        if (Math.floor(x) % 2 === 0) {\n          x = Math.floor(x);\n        } else {\n          x = Math.ceil(x);\n        }\n        return x;\n      }\n      if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {\n        return 0;\n      }\n      x = webidl.util.IntegerPart(x);\n      x = x % Math.pow(2, bitLength);\n      if (signedness === \"signed\" && x >= Math.pow(2, bitLength) - 1) {\n        return x - Math.pow(2, bitLength);\n      }\n      return x;\n    };\n    webidl.util.IntegerPart = function(n) {\n      const r = Math.floor(Math.abs(n));\n      if (n < 0) {\n        return -1 * r;\n      }\n      return r;\n    };\n    webidl.util.Stringify = function(V) {\n      const type = webidl.util.Type(V);\n      switch (type) {\n        case \"Symbol\":\n          return `Symbol(${V.description})`;\n        case \"Object\":\n          return inspect(V);\n        case \"String\":\n          return `\"${V}\"`;\n        default:\n          return `${V}`;\n      }\n    };\n    webidl.sequenceConverter = function(converter) {\n      return (V, prefix, argument, Iterable) => {\n        if (webidl.util.Type(V) !== \"Object\") {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `${argument} (${webidl.util.Stringify(V)}) is not iterable.`\n          });\n        }\n        const method = typeof Iterable === \"function\" ? Iterable() : V?.[Symbol.iterator]?.();\n        const seq = [];\n        let index = 0;\n        if (method === void 0 || typeof method.next !== \"function\") {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `${argument} is not iterable.`\n          });\n        }\n        while (true) {\n          const { done, value } = method.next();\n          if (done) {\n            break;\n          }\n          seq.push(converter(value, prefix, `${argument}[${index++}]`));\n        }\n        return seq;\n      };\n    };\n    webidl.recordConverter = function(keyConverter, valueConverter) {\n      return (O, prefix, argument) => {\n        if (webidl.util.Type(O) !== \"Object\") {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `${argument} (\"${webidl.util.Type(O)}\") is not an Object.`\n          });\n        }\n        const result = {};\n        if (!types.isProxy(O)) {\n          const keys2 = [...Object.getOwnPropertyNames(O), ...Object.getOwnPropertySymbols(O)];\n          for (const key of keys2) {\n            const typedKey = keyConverter(key, prefix, argument);\n            const typedValue = valueConverter(O[key], prefix, argument);\n            result[typedKey] = typedValue;\n          }\n          return result;\n        }\n        const keys = Reflect.ownKeys(O);\n        for (const key of keys) {\n          const desc = Reflect.getOwnPropertyDescriptor(O, key);\n          if (desc?.enumerable) {\n            const typedKey = keyConverter(key, prefix, argument);\n            const typedValue = valueConverter(O[key], prefix, argument);\n            result[typedKey] = typedValue;\n          }\n        }\n        return result;\n      };\n    };\n    webidl.interfaceConverter = function(i) {\n      return (V, prefix, argument, opts) => {\n        if (opts?.strict !== false && !(V instanceof i)) {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `Expected ${argument} (\"${webidl.util.Stringify(V)}\") to be an instance of ${i.name}.`\n          });\n        }\n        return V;\n      };\n    };\n    webidl.dictionaryConverter = function(converters) {\n      return (dictionary, prefix, argument) => {\n        const type = webidl.util.Type(dictionary);\n        const dict = {};\n        if (type === \"Null\" || type === \"Undefined\") {\n          return dict;\n        } else if (type !== \"Object\") {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n          });\n        }\n        for (const options of converters) {\n          const { key, defaultValue, required, converter } = options;\n          if (required === true) {\n            if (!Object.hasOwn(dictionary, key)) {\n              throw webidl.errors.exception({\n                header: prefix,\n                message: `Missing required key \"${key}\".`\n              });\n            }\n          }\n          let value = dictionary[key];\n          const hasDefault = Object.hasOwn(options, \"defaultValue\");\n          if (hasDefault && value !== null) {\n            value ??= defaultValue();\n          }\n          if (required || hasDefault || value !== void 0) {\n            value = converter(value, prefix, `${argument}.${key}`);\n            if (options.allowedValues && !options.allowedValues.includes(value)) {\n              throw webidl.errors.exception({\n                header: prefix,\n                message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(\", \")}.`\n              });\n            }\n            dict[key] = value;\n          }\n        }\n        return dict;\n      };\n    };\n    webidl.nullableConverter = function(converter) {\n      return (V, prefix, argument) => {\n        if (V === null) {\n          return V;\n        }\n        return converter(V, prefix, argument);\n      };\n    };\n    webidl.converters.DOMString = function(V, prefix, argument, opts) {\n      if (V === null && opts?.legacyNullToEmptyString) {\n        return \"\";\n      }\n      if (typeof V === \"symbol\") {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: `${argument} is a symbol, which cannot be converted to a DOMString.`\n        });\n      }\n      return String(V);\n    };\n    webidl.converters.ByteString = function(V, prefix, argument) {\n      const x = webidl.converters.DOMString(V, prefix, argument);\n      for (let index = 0; index < x.length; index++) {\n        if (x.charCodeAt(index) > 255) {\n          throw new TypeError(\n            `Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`\n          );\n        }\n      }\n      return x;\n    };\n    webidl.converters.USVString = toUSVString;\n    webidl.converters.boolean = function(V) {\n      const x = Boolean(V);\n      return x;\n    };\n    webidl.converters.any = function(V) {\n      return V;\n    };\n    webidl.converters[\"long long\"] = function(V, prefix, argument) {\n      const x = webidl.util.ConvertToInt(V, 64, \"signed\", void 0, prefix, argument);\n      return x;\n    };\n    webidl.converters[\"unsigned long long\"] = function(V, prefix, argument) {\n      const x = webidl.util.ConvertToInt(V, 64, \"unsigned\", void 0, prefix, argument);\n      return x;\n    };\n    webidl.converters[\"unsigned long\"] = function(V, prefix, argument) {\n      const x = webidl.util.ConvertToInt(V, 32, \"unsigned\", void 0, prefix, argument);\n      return x;\n    };\n    webidl.converters[\"unsigned short\"] = function(V, prefix, argument, opts) {\n      const x = webidl.util.ConvertToInt(V, 16, \"unsigned\", opts, prefix, argument);\n      return x;\n    };\n    webidl.converters.ArrayBuffer = function(V, prefix, argument, opts) {\n      if (webidl.util.Type(V) !== \"Object\" || !types.isAnyArrayBuffer(V)) {\n        throw webidl.errors.conversionFailed({\n          prefix,\n          argument: `${argument} (\"${webidl.util.Stringify(V)}\")`,\n          types: [\"ArrayBuffer\"]\n        });\n      }\n      if (opts?.allowShared === false && types.isSharedArrayBuffer(V)) {\n        throw webidl.errors.exception({\n          header: \"ArrayBuffer\",\n          message: \"SharedArrayBuffer is not allowed.\"\n        });\n      }\n      if (V.resizable || V.growable) {\n        throw webidl.errors.exception({\n          header: \"ArrayBuffer\",\n          message: \"Received a resizable ArrayBuffer.\"\n        });\n      }\n      return V;\n    };\n    webidl.converters.TypedArray = function(V, T, prefix, name, opts) {\n      if (webidl.util.Type(V) !== \"Object\" || !types.isTypedArray(V) || V.constructor.name !== T.name) {\n        throw webidl.errors.conversionFailed({\n          prefix,\n          argument: `${name} (\"${webidl.util.Stringify(V)}\")`,\n          types: [T.name]\n        });\n      }\n      if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n        throw webidl.errors.exception({\n          header: \"ArrayBuffer\",\n          message: \"SharedArrayBuffer is not allowed.\"\n        });\n      }\n      if (V.buffer.resizable || V.buffer.growable) {\n        throw webidl.errors.exception({\n          header: \"ArrayBuffer\",\n          message: \"Received a resizable ArrayBuffer.\"\n        });\n      }\n      return V;\n    };\n    webidl.converters.DataView = function(V, prefix, name, opts) {\n      if (webidl.util.Type(V) !== \"Object\" || !types.isDataView(V)) {\n        throw webidl.errors.exception({\n          header: prefix,\n          message: `${name} is not a DataView.`\n        });\n      }\n      if (opts?.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n        throw webidl.errors.exception({\n          header: \"ArrayBuffer\",\n          message: \"SharedArrayBuffer is not allowed.\"\n        });\n      }\n      if (V.buffer.resizable || V.buffer.growable) {\n        throw webidl.errors.exception({\n          header: \"ArrayBuffer\",\n          message: \"Received a resizable ArrayBuffer.\"\n        });\n      }\n      return V;\n    };\n    webidl.converters.BufferSource = function(V, prefix, name, opts) {\n      if (types.isAnyArrayBuffer(V)) {\n        return webidl.converters.ArrayBuffer(V, prefix, name, { ...opts, allowShared: false });\n      }\n      if (types.isTypedArray(V)) {\n        return webidl.converters.TypedArray(V, V.constructor, prefix, name, { ...opts, allowShared: false });\n      }\n      if (types.isDataView(V)) {\n        return webidl.converters.DataView(V, prefix, name, { ...opts, allowShared: false });\n      }\n      throw webidl.errors.conversionFailed({\n        prefix,\n        argument: `${name} (\"${webidl.util.Stringify(V)}\")`,\n        types: [\"BufferSource\"]\n      });\n    };\n    webidl.converters[\"sequence<ByteString>\"] = webidl.sequenceConverter(\n      webidl.converters.ByteString\n    );\n    webidl.converters[\"sequence<sequence<ByteString>>\"] = webidl.sequenceConverter(\n      webidl.converters[\"sequence<ByteString>\"]\n    );\n    webidl.converters[\"record<ByteString, ByteString>\"] = webidl.recordConverter(\n      webidl.converters.ByteString,\n      webidl.converters.ByteString\n    );\n    module2.exports = {\n      webidl\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/util.js\nvar require_util2 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Transform } = require(\"stream\");\n    var zlib = require(\"zlib\");\n    var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants3();\n    var { getGlobalOrigin } = require_global();\n    var { collectASequenceOfCodePoints, collectAnHTTPQuotedString, removeChars, parseMIMEType } = require_data_url();\n    var { performance: performance2 } = require(\"perf_hooks\");\n    var { isBlobLike, ReadableStreamFrom, isValidHTTPToken, normalizedMethodRecordsBase } = require_util();\n    var assert = require(\"assert\");\n    var { isUint8Array } = require(\"util/types\");\n    var { webidl } = require_webidl();\n    var supportedHashes = [];\n    var crypto;\n    try {\n      crypto = require(\"crypto\");\n      const possibleRelevantHashes = [\"sha256\", \"sha384\", \"sha512\"];\n      supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));\n    } catch {\n    }\n    function responseURL(response) {\n      const urlList = response.urlList;\n      const length = urlList.length;\n      return length === 0 ? null : urlList[length - 1].toString();\n    }\n    __name(responseURL, \"responseURL\");\n    function responseLocationURL(response, requestFragment) {\n      if (!redirectStatusSet.has(response.status)) {\n        return null;\n      }\n      let location = response.headersList.get(\"location\", true);\n      if (location !== null && isValidHeaderValue(location)) {\n        if (!isValidEncodedURL(location)) {\n          location = normalizeBinaryStringToUtf8(location);\n        }\n        location = new URL(location, responseURL(response));\n      }\n      if (location && !location.hash) {\n        location.hash = requestFragment;\n      }\n      return location;\n    }\n    __name(responseLocationURL, \"responseLocationURL\");\n    function isValidEncodedURL(url) {\n      for (let i = 0; i < url.length; ++i) {\n        const code = url.charCodeAt(i);\n        if (code > 126 || // Non-US-ASCII + DEL\n        code < 32) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidEncodedURL, \"isValidEncodedURL\");\n    function normalizeBinaryStringToUtf8(value) {\n      return Buffer.from(value, \"binary\").toString(\"utf8\");\n    }\n    __name(normalizeBinaryStringToUtf8, \"normalizeBinaryStringToUtf8\");\n    function requestCurrentURL(request) {\n      return request.urlList[request.urlList.length - 1];\n    }\n    __name(requestCurrentURL, \"requestCurrentURL\");\n    function requestBadPort(request) {\n      const url = requestCurrentURL(request);\n      if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {\n        return \"blocked\";\n      }\n      return \"allowed\";\n    }\n    __name(requestBadPort, \"requestBadPort\");\n    function isErrorLike(object) {\n      return object instanceof Error || (object?.constructor?.name === \"Error\" || object?.constructor?.name === \"DOMException\");\n    }\n    __name(isErrorLike, \"isErrorLike\");\n    function isValidReasonPhrase(statusText) {\n      for (let i = 0; i < statusText.length; ++i) {\n        const c = statusText.charCodeAt(i);\n        if (!(c === 9 || // HTAB\n        c >= 32 && c <= 126 || // SP / VCHAR\n        c >= 128 && c <= 255)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidReasonPhrase, \"isValidReasonPhrase\");\n    var isValidHeaderName = isValidHTTPToken;\n    function isValidHeaderValue(potentialValue) {\n      return (potentialValue[0] === \"\t\" || potentialValue[0] === \" \" || potentialValue[potentialValue.length - 1] === \"\t\" || potentialValue[potentialValue.length - 1] === \" \" || potentialValue.includes(\"\\n\") || potentialValue.includes(\"\\r\") || potentialValue.includes(\"\\0\")) === false;\n    }\n    __name(isValidHeaderValue, \"isValidHeaderValue\");\n    function setRequestReferrerPolicyOnRedirect(request, actualResponse) {\n      const { headersList } = actualResponse;\n      const policyHeader = (headersList.get(\"referrer-policy\", true) ?? \"\").split(\",\");\n      let policy = \"\";\n      if (policyHeader.length > 0) {\n        for (let i = policyHeader.length; i !== 0; i--) {\n          const token = policyHeader[i - 1].trim();\n          if (referrerPolicyTokens.has(token)) {\n            policy = token;\n            break;\n          }\n        }\n      }\n      if (policy !== \"\") {\n        request.referrerPolicy = policy;\n      }\n    }\n    __name(setRequestReferrerPolicyOnRedirect, \"setRequestReferrerPolicyOnRedirect\");\n    function crossOriginResourcePolicyCheck() {\n      return \"allowed\";\n    }\n    __name(crossOriginResourcePolicyCheck, \"crossOriginResourcePolicyCheck\");\n    function corsCheck() {\n      return \"success\";\n    }\n    __name(corsCheck, \"corsCheck\");\n    function TAOCheck() {\n      return \"success\";\n    }\n    __name(TAOCheck, \"TAOCheck\");\n    function appendFetchMetadata(httpRequest) {\n      let header = null;\n      header = httpRequest.mode;\n      httpRequest.headersList.set(\"sec-fetch-mode\", header, true);\n    }\n    __name(appendFetchMetadata, \"appendFetchMetadata\");\n    function appendRequestOriginHeader(request) {\n      let serializedOrigin = request.origin;\n      if (serializedOrigin === \"client\" || serializedOrigin === void 0) {\n        return;\n      }\n      if (request.responseTainting === \"cors\" || request.mode === \"websocket\") {\n        request.headersList.append(\"origin\", serializedOrigin, true);\n      } else if (request.method !== \"GET\" && request.method !== \"HEAD\") {\n        switch (request.referrerPolicy) {\n          case \"no-referrer\":\n            serializedOrigin = null;\n            break;\n          case \"no-referrer-when-downgrade\":\n          case \"strict-origin\":\n          case \"strict-origin-when-cross-origin\":\n            if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n              serializedOrigin = null;\n            }\n            break;\n          case \"same-origin\":\n            if (!sameOrigin(request, requestCurrentURL(request))) {\n              serializedOrigin = null;\n            }\n            break;\n          default:\n        }\n        request.headersList.append(\"origin\", serializedOrigin, true);\n      }\n    }\n    __name(appendRequestOriginHeader, \"appendRequestOriginHeader\");\n    function coarsenTime(timestamp, crossOriginIsolatedCapability) {\n      return timestamp;\n    }\n    __name(coarsenTime, \"coarsenTime\");\n    function clampAndCoarsenConnectionTimingInfo(connectionTimingInfo, defaultStartTime, crossOriginIsolatedCapability) {\n      if (!connectionTimingInfo?.startTime || connectionTimingInfo.startTime < defaultStartTime) {\n        return {\n          domainLookupStartTime: defaultStartTime,\n          domainLookupEndTime: defaultStartTime,\n          connectionStartTime: defaultStartTime,\n          connectionEndTime: defaultStartTime,\n          secureConnectionStartTime: defaultStartTime,\n          ALPNNegotiatedProtocol: connectionTimingInfo?.ALPNNegotiatedProtocol\n        };\n      }\n      return {\n        domainLookupStartTime: coarsenTime(connectionTimingInfo.domainLookupStartTime, crossOriginIsolatedCapability),\n        domainLookupEndTime: coarsenTime(connectionTimingInfo.domainLookupEndTime, crossOriginIsolatedCapability),\n        connectionStartTime: coarsenTime(connectionTimingInfo.connectionStartTime, crossOriginIsolatedCapability),\n        connectionEndTime: coarsenTime(connectionTimingInfo.connectionEndTime, crossOriginIsolatedCapability),\n        secureConnectionStartTime: coarsenTime(connectionTimingInfo.secureConnectionStartTime, crossOriginIsolatedCapability),\n        ALPNNegotiatedProtocol: connectionTimingInfo.ALPNNegotiatedProtocol\n      };\n    }\n    __name(clampAndCoarsenConnectionTimingInfo, \"clampAndCoarsenConnectionTimingInfo\");\n    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {\n      return coarsenTime(performance2.now(), crossOriginIsolatedCapability);\n    }\n    __name(coarsenedSharedCurrentTime, \"coarsenedSharedCurrentTime\");\n    function createOpaqueTimingInfo(timingInfo) {\n      return {\n        startTime: timingInfo.startTime ?? 0,\n        redirectStartTime: 0,\n        redirectEndTime: 0,\n        postRedirectStartTime: timingInfo.startTime ?? 0,\n        finalServiceWorkerStartTime: 0,\n        finalNetworkResponseStartTime: 0,\n        finalNetworkRequestStartTime: 0,\n        endTime: 0,\n        encodedBodySize: 0,\n        decodedBodySize: 0,\n        finalConnectionTimingInfo: null\n      };\n    }\n    __name(createOpaqueTimingInfo, \"createOpaqueTimingInfo\");\n    function makePolicyContainer() {\n      return {\n        referrerPolicy: \"strict-origin-when-cross-origin\"\n      };\n    }\n    __name(makePolicyContainer, \"makePolicyContainer\");\n    function clonePolicyContainer(policyContainer) {\n      return {\n        referrerPolicy: policyContainer.referrerPolicy\n      };\n    }\n    __name(clonePolicyContainer, \"clonePolicyContainer\");\n    function determineRequestsReferrer(request) {\n      const policy = request.referrerPolicy;\n      assert(policy);\n      let referrerSource = null;\n      if (request.referrer === \"client\") {\n        const globalOrigin = getGlobalOrigin();\n        if (!globalOrigin || globalOrigin.origin === \"null\") {\n          return \"no-referrer\";\n        }\n        referrerSource = new URL(globalOrigin);\n      } else if (request.referrer instanceof URL) {\n        referrerSource = request.referrer;\n      }\n      let referrerURL = stripURLForReferrer(referrerSource);\n      const referrerOrigin = stripURLForReferrer(referrerSource, true);\n      if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n      }\n      const areSameOrigin = sameOrigin(request, referrerURL);\n      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);\n      switch (policy) {\n        case \"origin\":\n          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);\n        case \"unsafe-url\":\n          return referrerURL;\n        case \"same-origin\":\n          return areSameOrigin ? referrerOrigin : \"no-referrer\";\n        case \"origin-when-cross-origin\":\n          return areSameOrigin ? referrerURL : referrerOrigin;\n        case \"strict-origin-when-cross-origin\": {\n          const currentURL = requestCurrentURL(request);\n          if (sameOrigin(referrerURL, currentURL)) {\n            return referrerURL;\n          }\n          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n            return \"no-referrer\";\n          }\n          return referrerOrigin;\n        }\n        case \"strict-origin\":\n        case \"no-referrer-when-downgrade\":\n        default:\n          return isNonPotentiallyTrustWorthy ? \"no-referrer\" : referrerOrigin;\n      }\n    }\n    __name(determineRequestsReferrer, \"determineRequestsReferrer\");\n    function stripURLForReferrer(url, originOnly) {\n      assert(url instanceof URL);\n      url = new URL(url);\n      if (url.protocol === \"file:\" || url.protocol === \"about:\" || url.protocol === \"blank:\") {\n        return \"no-referrer\";\n      }\n      url.username = \"\";\n      url.password = \"\";\n      url.hash = \"\";\n      if (originOnly) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url;\n    }\n    __name(stripURLForReferrer, \"stripURLForReferrer\");\n    function isURLPotentiallyTrustworthy(url) {\n      if (!(url instanceof URL)) {\n        return false;\n      }\n      if (url.href === \"about:blank\" || url.href === \"about:srcdoc\") {\n        return true;\n      }\n      if (url.protocol === \"data:\")\n        return true;\n      if (url.protocol === \"file:\")\n        return true;\n      return isOriginPotentiallyTrustworthy(url.origin);\n      function isOriginPotentiallyTrustworthy(origin) {\n        if (origin == null || origin === \"null\")\n          return false;\n        const originAsURL = new URL(origin);\n        if (originAsURL.protocol === \"https:\" || originAsURL.protocol === \"wss:\") {\n          return true;\n        }\n        if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) || (originAsURL.hostname === \"localhost\" || originAsURL.hostname.includes(\"localhost.\")) || originAsURL.hostname.endsWith(\".localhost\")) {\n          return true;\n        }\n        return false;\n      }\n      __name(isOriginPotentiallyTrustworthy, \"isOriginPotentiallyTrustworthy\");\n    }\n    __name(isURLPotentiallyTrustworthy, \"isURLPotentiallyTrustworthy\");\n    function bytesMatch(bytes, metadataList) {\n      if (crypto === void 0) {\n        return true;\n      }\n      const parsedMetadata = parseMetadata(metadataList);\n      if (parsedMetadata === \"no metadata\") {\n        return true;\n      }\n      if (parsedMetadata.length === 0) {\n        return true;\n      }\n      const strongest = getStrongestMetadata(parsedMetadata);\n      const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);\n      for (const item of metadata) {\n        const algorithm = item.algo;\n        const expectedValue = item.hash;\n        let actualValue = crypto.createHash(algorithm).update(bytes).digest(\"base64\");\n        if (actualValue[actualValue.length - 1] === \"=\") {\n          if (actualValue[actualValue.length - 2] === \"=\") {\n            actualValue = actualValue.slice(0, -2);\n          } else {\n            actualValue = actualValue.slice(0, -1);\n          }\n        }\n        if (compareBase64Mixed(actualValue, expectedValue)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    __name(bytesMatch, \"bytesMatch\");\n    var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i;\n    function parseMetadata(metadata) {\n      const result = [];\n      let empty = true;\n      for (const token of metadata.split(\" \")) {\n        empty = false;\n        const parsedToken = parseHashWithOptions.exec(token);\n        if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) {\n          continue;\n        }\n        const algorithm = parsedToken.groups.algo.toLowerCase();\n        if (supportedHashes.includes(algorithm)) {\n          result.push(parsedToken.groups);\n        }\n      }\n      if (empty === true) {\n        return \"no metadata\";\n      }\n      return result;\n    }\n    __name(parseMetadata, \"parseMetadata\");\n    function getStrongestMetadata(metadataList) {\n      let algorithm = metadataList[0].algo;\n      if (algorithm[3] === \"5\") {\n        return algorithm;\n      }\n      for (let i = 1; i < metadataList.length; ++i) {\n        const metadata = metadataList[i];\n        if (metadata.algo[3] === \"5\") {\n          algorithm = \"sha512\";\n          break;\n        } else if (algorithm[3] === \"3\") {\n          continue;\n        } else if (metadata.algo[3] === \"3\") {\n          algorithm = \"sha384\";\n        }\n      }\n      return algorithm;\n    }\n    __name(getStrongestMetadata, \"getStrongestMetadata\");\n    function filterMetadataListByAlgorithm(metadataList, algorithm) {\n      if (metadataList.length === 1) {\n        return metadataList;\n      }\n      let pos = 0;\n      for (let i = 0; i < metadataList.length; ++i) {\n        if (metadataList[i].algo === algorithm) {\n          metadataList[pos++] = metadataList[i];\n        }\n      }\n      metadataList.length = pos;\n      return metadataList;\n    }\n    __name(filterMetadataListByAlgorithm, \"filterMetadataListByAlgorithm\");\n    function compareBase64Mixed(actualValue, expectedValue) {\n      if (actualValue.length !== expectedValue.length) {\n        return false;\n      }\n      for (let i = 0; i < actualValue.length; ++i) {\n        if (actualValue[i] !== expectedValue[i]) {\n          if (actualValue[i] === \"+\" && expectedValue[i] === \"-\" || actualValue[i] === \"/\" && expectedValue[i] === \"_\") {\n            continue;\n          }\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(compareBase64Mixed, \"compareBase64Mixed\");\n    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {\n    }\n    __name(tryUpgradeRequestToAPotentiallyTrustworthyURL, \"tryUpgradeRequestToAPotentiallyTrustworthyURL\");\n    function sameOrigin(A, B) {\n      if (A.origin === B.origin && A.origin === \"null\") {\n        return true;\n      }\n      if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n        return true;\n      }\n      return false;\n    }\n    __name(sameOrigin, \"sameOrigin\");\n    function createDeferredPromise() {\n      let res;\n      let rej;\n      const promise = new Promise((resolve, reject) => {\n        res = resolve;\n        rej = reject;\n      });\n      return { promise, resolve: res, reject: rej };\n    }\n    __name(createDeferredPromise, \"createDeferredPromise\");\n    function isAborted(fetchParams) {\n      return fetchParams.controller.state === \"aborted\";\n    }\n    __name(isAborted, \"isAborted\");\n    function isCancelled(fetchParams) {\n      return fetchParams.controller.state === \"aborted\" || fetchParams.controller.state === \"terminated\";\n    }\n    __name(isCancelled, \"isCancelled\");\n    function normalizeMethod(method) {\n      return normalizedMethodRecordsBase[method.toLowerCase()] ?? method;\n    }\n    __name(normalizeMethod, \"normalizeMethod\");\n    function serializeJavascriptValueToJSONString(value) {\n      const result = JSON.stringify(value);\n      if (result === void 0) {\n        throw new TypeError(\"Value is not JSON serializable\");\n      }\n      assert(typeof result === \"string\");\n      return result;\n    }\n    __name(serializeJavascriptValueToJSONString, \"serializeJavascriptValueToJSONString\");\n    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\n    function createIterator(name, kInternalIterator, keyIndex = 0, valueIndex = 1) {\n      var _target, _kind, _index;\n      const _FastIterableIterator = class _FastIterableIterator {\n        /**\n         * @see https://webidl.spec.whatwg.org/#dfn-default-iterator-object\n         * @param {unknown} target\n         * @param {'key' | 'value' | 'key+value'} kind\n         */\n        constructor(target, kind) {\n          /** @type {any} */\n          __privateAdd(this, _target, void 0);\n          /** @type {'key' | 'value' | 'key+value'} */\n          __privateAdd(this, _kind, void 0);\n          /** @type {number} */\n          __privateAdd(this, _index, void 0);\n          __privateSet(this, _target, target);\n          __privateSet(this, _kind, kind);\n          __privateSet(this, _index, 0);\n        }\n        next() {\n          if (typeof this !== \"object\" || this === null || !__privateIn(_target, this)) {\n            throw new TypeError(\n              `'next' called on an object that does not implement interface ${name} Iterator.`\n            );\n          }\n          const index = __privateGet(this, _index);\n          const values = __privateGet(this, _target)[kInternalIterator];\n          const len = values.length;\n          if (index >= len) {\n            return {\n              value: void 0,\n              done: true\n            };\n          }\n          const { [keyIndex]: key, [valueIndex]: value } = values[index];\n          __privateSet(this, _index, index + 1);\n          let result;\n          switch (__privateGet(this, _kind)) {\n            case \"key\":\n              result = key;\n              break;\n            case \"value\":\n              result = value;\n              break;\n            case \"key+value\":\n              result = [key, value];\n              break;\n          }\n          return {\n            value: result,\n            done: false\n          };\n        }\n      };\n      _target = new WeakMap();\n      _kind = new WeakMap();\n      _index = new WeakMap();\n      __name(_FastIterableIterator, \"FastIterableIterator\");\n      let FastIterableIterator = _FastIterableIterator;\n      delete FastIterableIterator.prototype.constructor;\n      Object.setPrototypeOf(FastIterableIterator.prototype, esIteratorPrototype);\n      Object.defineProperties(FastIterableIterator.prototype, {\n        [Symbol.toStringTag]: {\n          writable: false,\n          enumerable: false,\n          configurable: true,\n          value: `${name} Iterator`\n        },\n        next: { writable: true, enumerable: true, configurable: true }\n      });\n      return function(target, kind) {\n        return new FastIterableIterator(target, kind);\n      };\n    }\n    __name(createIterator, \"createIterator\");\n    function iteratorMixin(name, object, kInternalIterator, keyIndex = 0, valueIndex = 1) {\n      const makeIterator = createIterator(name, kInternalIterator, keyIndex, valueIndex);\n      const properties = {\n        keys: {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: /* @__PURE__ */ __name(function keys() {\n            webidl.brandCheck(this, object);\n            return makeIterator(this, \"key\");\n          }, \"keys\")\n        },\n        values: {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: /* @__PURE__ */ __name(function values() {\n            webidl.brandCheck(this, object);\n            return makeIterator(this, \"value\");\n          }, \"values\")\n        },\n        entries: {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: /* @__PURE__ */ __name(function entries() {\n            webidl.brandCheck(this, object);\n            return makeIterator(this, \"key+value\");\n          }, \"entries\")\n        },\n        forEach: {\n          writable: true,\n          enumerable: true,\n          configurable: true,\n          value: /* @__PURE__ */ __name(function forEach(callbackfn, thisArg = globalThis) {\n            webidl.brandCheck(this, object);\n            webidl.argumentLengthCheck(arguments, 1, `${name}.forEach`);\n            if (typeof callbackfn !== \"function\") {\n              throw new TypeError(\n                `Failed to execute 'forEach' on '${name}': parameter 1 is not of type 'Function'.`\n              );\n            }\n            for (const { 0: key, 1: value } of makeIterator(this, \"key+value\")) {\n              callbackfn.call(thisArg, value, key, this);\n            }\n          }, \"forEach\")\n        }\n      };\n      return Object.defineProperties(object.prototype, {\n        ...properties,\n        [Symbol.iterator]: {\n          writable: true,\n          enumerable: false,\n          configurable: true,\n          value: properties.entries.value\n        }\n      });\n    }\n    __name(iteratorMixin, \"iteratorMixin\");\n    async function fullyReadBody(body, processBody, processBodyError) {\n      const successSteps = processBody;\n      const errorSteps = processBodyError;\n      let reader;\n      try {\n        reader = body.stream.getReader();\n      } catch (e) {\n        errorSteps(e);\n        return;\n      }\n      try {\n        successSteps(await readAllBytes(reader));\n      } catch (e) {\n        errorSteps(e);\n      }\n    }\n    __name(fullyReadBody, \"fullyReadBody\");\n    function isReadableStreamLike(stream) {\n      return stream instanceof ReadableStream || stream[Symbol.toStringTag] === \"ReadableStream\" && typeof stream.tee === \"function\";\n    }\n    __name(isReadableStreamLike, \"isReadableStreamLike\");\n    function readableStreamClose(controller) {\n      try {\n        controller.close();\n        controller.byobRequest?.respond(0);\n      } catch (err) {\n        if (!err.message.includes(\"Controller is already closed\") && !err.message.includes(\"ReadableStream is already closed\")) {\n          throw err;\n        }\n      }\n    }\n    __name(readableStreamClose, \"readableStreamClose\");\n    var invalidIsomorphicEncodeValueRegex = /[^\\x00-\\xFF]/;\n    function isomorphicEncode(input) {\n      assert(!invalidIsomorphicEncodeValueRegex.test(input));\n      return input;\n    }\n    __name(isomorphicEncode, \"isomorphicEncode\");\n    async function readAllBytes(reader) {\n      const bytes = [];\n      let byteLength = 0;\n      while (true) {\n        const { done, value: chunk } = await reader.read();\n        if (done) {\n          return Buffer.concat(bytes, byteLength);\n        }\n        if (!isUint8Array(chunk)) {\n          throw new TypeError(\"Received non-Uint8Array chunk\");\n        }\n        bytes.push(chunk);\n        byteLength += chunk.length;\n      }\n    }\n    __name(readAllBytes, \"readAllBytes\");\n    function urlIsLocal(url) {\n      assert(\"protocol\" in url);\n      const protocol = url.protocol;\n      return protocol === \"about:\" || protocol === \"blob:\" || protocol === \"data:\";\n    }\n    __name(urlIsLocal, \"urlIsLocal\");\n    function urlHasHttpsScheme(url) {\n      return typeof url === \"string\" && url[5] === \":\" && url[0] === \"h\" && url[1] === \"t\" && url[2] === \"t\" && url[3] === \"p\" && url[4] === \"s\" || url.protocol === \"https:\";\n    }\n    __name(urlHasHttpsScheme, \"urlHasHttpsScheme\");\n    function urlIsHttpHttpsScheme(url) {\n      assert(\"protocol\" in url);\n      const protocol = url.protocol;\n      return protocol === \"http:\" || protocol === \"https:\";\n    }\n    __name(urlIsHttpHttpsScheme, \"urlIsHttpHttpsScheme\");\n    function simpleRangeHeaderValue(value, allowWhitespace) {\n      const data = value;\n      if (!data.startsWith(\"bytes\")) {\n        return \"failure\";\n      }\n      const position = { position: 5 };\n      if (allowWhitespace) {\n        collectASequenceOfCodePoints(\n          (char) => char === \"\t\" || char === \" \",\n          data,\n          position\n        );\n      }\n      if (data.charCodeAt(position.position) !== 61) {\n        return \"failure\";\n      }\n      position.position++;\n      if (allowWhitespace) {\n        collectASequenceOfCodePoints(\n          (char) => char === \"\t\" || char === \" \",\n          data,\n          position\n        );\n      }\n      const rangeStart = collectASequenceOfCodePoints(\n        (char) => {\n          const code = char.charCodeAt(0);\n          return code >= 48 && code <= 57;\n        },\n        data,\n        position\n      );\n      const rangeStartValue = rangeStart.length ? Number(rangeStart) : null;\n      if (allowWhitespace) {\n        collectASequenceOfCodePoints(\n          (char) => char === \"\t\" || char === \" \",\n          data,\n          position\n        );\n      }\n      if (data.charCodeAt(position.position) !== 45) {\n        return \"failure\";\n      }\n      position.position++;\n      if (allowWhitespace) {\n        collectASequenceOfCodePoints(\n          (char) => char === \"\t\" || char === \" \",\n          data,\n          position\n        );\n      }\n      const rangeEnd = collectASequenceOfCodePoints(\n        (char) => {\n          const code = char.charCodeAt(0);\n          return code >= 48 && code <= 57;\n        },\n        data,\n        position\n      );\n      const rangeEndValue = rangeEnd.length ? Number(rangeEnd) : null;\n      if (position.position < data.length) {\n        return \"failure\";\n      }\n      if (rangeEndValue === null && rangeStartValue === null) {\n        return \"failure\";\n      }\n      if (rangeStartValue > rangeEndValue) {\n        return \"failure\";\n      }\n      return { rangeStartValue, rangeEndValue };\n    }\n    __name(simpleRangeHeaderValue, \"simpleRangeHeaderValue\");\n    function buildContentRange(rangeStart, rangeEnd, fullLength) {\n      let contentRange = \"bytes \";\n      contentRange += isomorphicEncode(`${rangeStart}`);\n      contentRange += \"-\";\n      contentRange += isomorphicEncode(`${rangeEnd}`);\n      contentRange += \"/\";\n      contentRange += isomorphicEncode(`${fullLength}`);\n      return contentRange;\n    }\n    __name(buildContentRange, \"buildContentRange\");\n    var _zlibOptions;\n    var _InflateStream = class _InflateStream extends Transform {\n      /** @param {zlib.ZlibOptions} [zlibOptions] */\n      constructor(zlibOptions) {\n        super();\n        __privateAdd(this, _zlibOptions, void 0);\n        __privateSet(this, _zlibOptions, zlibOptions);\n      }\n      _transform(chunk, encoding, callback) {\n        if (!this._inflateStream) {\n          if (chunk.length === 0) {\n            callback();\n            return;\n          }\n          this._inflateStream = (chunk[0] & 15) === 8 ? zlib.createInflate(__privateGet(this, _zlibOptions)) : zlib.createInflateRaw(__privateGet(this, _zlibOptions));\n          this._inflateStream.on(\"data\", this.push.bind(this));\n          this._inflateStream.on(\"end\", () => this.push(null));\n          this._inflateStream.on(\"error\", (err) => this.destroy(err));\n        }\n        this._inflateStream.write(chunk, encoding, callback);\n      }\n      _final(callback) {\n        if (this._inflateStream) {\n          this._inflateStream.end();\n          this._inflateStream = null;\n        }\n        callback();\n      }\n    };\n    _zlibOptions = new WeakMap();\n    __name(_InflateStream, \"InflateStream\");\n    var InflateStream = _InflateStream;\n    function createInflate(zlibOptions) {\n      return new InflateStream(zlibOptions);\n    }\n    __name(createInflate, \"createInflate\");\n    function extractMimeType(headers) {\n      let charset = null;\n      let essence = null;\n      let mimeType = null;\n      const values = getDecodeSplit(\"content-type\", headers);\n      if (values === null) {\n        return \"failure\";\n      }\n      for (const value of values) {\n        const temporaryMimeType = parseMIMEType(value);\n        if (temporaryMimeType === \"failure\" || temporaryMimeType.essence === \"*/*\") {\n          continue;\n        }\n        mimeType = temporaryMimeType;\n        if (mimeType.essence !== essence) {\n          charset = null;\n          if (mimeType.parameters.has(\"charset\")) {\n            charset = mimeType.parameters.get(\"charset\");\n          }\n          essence = mimeType.essence;\n        } else if (!mimeType.parameters.has(\"charset\") && charset !== null) {\n          mimeType.parameters.set(\"charset\", charset);\n        }\n      }\n      if (mimeType == null) {\n        return \"failure\";\n      }\n      return mimeType;\n    }\n    __name(extractMimeType, \"extractMimeType\");\n    function gettingDecodingSplitting(value) {\n      const input = value;\n      const position = { position: 0 };\n      const values = [];\n      let temporaryValue = \"\";\n      while (position.position < input.length) {\n        temporaryValue += collectASequenceOfCodePoints(\n          (char) => char !== '\"' && char !== \",\",\n          input,\n          position\n        );\n        if (position.position < input.length) {\n          if (input.charCodeAt(position.position) === 34) {\n            temporaryValue += collectAnHTTPQuotedString(\n              input,\n              position\n            );\n            if (position.position < input.length) {\n              continue;\n            }\n          } else {\n            assert(input.charCodeAt(position.position) === 44);\n            position.position++;\n          }\n        }\n        temporaryValue = removeChars(temporaryValue, true, true, (char) => char === 9 || char === 32);\n        values.push(temporaryValue);\n        temporaryValue = \"\";\n      }\n      return values;\n    }\n    __name(gettingDecodingSplitting, \"gettingDecodingSplitting\");\n    function getDecodeSplit(name, list) {\n      const value = list.get(name, true);\n      if (value === null) {\n        return null;\n      }\n      return gettingDecodingSplitting(value);\n    }\n    __name(getDecodeSplit, \"getDecodeSplit\");\n    var textDecoder = new TextDecoder();\n    function utf8DecodeBytes(buffer) {\n      if (buffer.length === 0) {\n        return \"\";\n      }\n      if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {\n        buffer = buffer.subarray(3);\n      }\n      const output = textDecoder.decode(buffer);\n      return output;\n    }\n    __name(utf8DecodeBytes, \"utf8DecodeBytes\");\n    var _EnvironmentSettingsObjectBase = class _EnvironmentSettingsObjectBase {\n      get baseUrl() {\n        return getGlobalOrigin();\n      }\n      get origin() {\n        return this.baseUrl?.origin;\n      }\n      policyContainer = makePolicyContainer();\n    };\n    __name(_EnvironmentSettingsObjectBase, \"EnvironmentSettingsObjectBase\");\n    var EnvironmentSettingsObjectBase = _EnvironmentSettingsObjectBase;\n    var _EnvironmentSettingsObject = class _EnvironmentSettingsObject {\n      settingsObject = new EnvironmentSettingsObjectBase();\n    };\n    __name(_EnvironmentSettingsObject, \"EnvironmentSettingsObject\");\n    var EnvironmentSettingsObject = _EnvironmentSettingsObject;\n    var environmentSettingsObject = new EnvironmentSettingsObject();\n    module2.exports = {\n      isAborted,\n      isCancelled,\n      isValidEncodedURL,\n      createDeferredPromise,\n      ReadableStreamFrom,\n      tryUpgradeRequestToAPotentiallyTrustworthyURL,\n      clampAndCoarsenConnectionTimingInfo,\n      coarsenedSharedCurrentTime,\n      determineRequestsReferrer,\n      makePolicyContainer,\n      clonePolicyContainer,\n      appendFetchMetadata,\n      appendRequestOriginHeader,\n      TAOCheck,\n      corsCheck,\n      crossOriginResourcePolicyCheck,\n      createOpaqueTimingInfo,\n      setRequestReferrerPolicyOnRedirect,\n      isValidHTTPToken,\n      requestBadPort,\n      requestCurrentURL,\n      responseURL,\n      responseLocationURL,\n      isBlobLike,\n      isURLPotentiallyTrustworthy,\n      isValidReasonPhrase,\n      sameOrigin,\n      normalizeMethod,\n      serializeJavascriptValueToJSONString,\n      iteratorMixin,\n      createIterator,\n      isValidHeaderName,\n      isValidHeaderValue,\n      isErrorLike,\n      fullyReadBody,\n      bytesMatch,\n      isReadableStreamLike,\n      readableStreamClose,\n      isomorphicEncode,\n      urlIsLocal,\n      urlHasHttpsScheme,\n      urlIsHttpHttpsScheme,\n      readAllBytes,\n      simpleRangeHeaderValue,\n      buildContentRange,\n      parseMetadata,\n      createInflate,\n      extractMimeType,\n      getDecodeSplit,\n      utf8DecodeBytes,\n      environmentSettingsObject\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/symbols.js\nvar require_symbols2 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/symbols.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports = {\n      kUrl: Symbol(\"url\"),\n      kHeaders: Symbol(\"headers\"),\n      kSignal: Symbol(\"signal\"),\n      kState: Symbol(\"state\"),\n      kDispatcher: Symbol(\"dispatcher\")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/file.js\nvar require_file = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/file.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Blob: Blob3, File: File2 } = require(\"buffer\");\n    var { kState } = require_symbols2();\n    var { webidl } = require_webidl();\n    var _FileLike = class _FileLike {\n      constructor(blobLike, fileName, options = {}) {\n        const n = fileName;\n        const t = options.type;\n        const d = options.lastModified ?? Date.now();\n        this[kState] = {\n          blobLike,\n          name: n,\n          type: t,\n          lastModified: d\n        };\n      }\n      stream(...args) {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].blobLike.stream(...args);\n      }\n      arrayBuffer(...args) {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].blobLike.arrayBuffer(...args);\n      }\n      slice(...args) {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].blobLike.slice(...args);\n      }\n      text(...args) {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].blobLike.text(...args);\n      }\n      get size() {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].blobLike.size;\n      }\n      get type() {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].blobLike.type;\n      }\n      get name() {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].name;\n      }\n      get lastModified() {\n        webidl.brandCheck(this, _FileLike);\n        return this[kState].lastModified;\n      }\n      get [Symbol.toStringTag]() {\n        return \"File\";\n      }\n    };\n    __name(_FileLike, \"FileLike\");\n    var FileLike = _FileLike;\n    webidl.converters.Blob = webidl.interfaceConverter(Blob3);\n    function isFileLike(object) {\n      return object instanceof File2 || object && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && object[Symbol.toStringTag] === \"File\";\n    }\n    __name(isFileLike, \"isFileLike\");\n    module2.exports = { FileLike, isFileLike };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/formdata.js\nvar require_formdata = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/formdata.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { isBlobLike, iteratorMixin } = require_util2();\n    var { kState } = require_symbols2();\n    var { kEnumerableProperty } = require_util();\n    var { FileLike, isFileLike } = require_file();\n    var { webidl } = require_webidl();\n    var { File: NativeFile } = require(\"buffer\");\n    var nodeUtil = require(\"util\");\n    var File2 = globalThis.File ?? NativeFile;\n    var _FormData = class _FormData {\n      constructor(form) {\n        webidl.util.markAsUncloneable(this);\n        if (form !== void 0) {\n          throw webidl.errors.conversionFailed({\n            prefix: \"FormData constructor\",\n            argument: \"Argument 1\",\n            types: [\"undefined\"]\n          });\n        }\n        this[kState] = [];\n      }\n      append(name, value, filename = void 0) {\n        webidl.brandCheck(this, _FormData);\n        const prefix = \"FormData.append\";\n        webidl.argumentLengthCheck(arguments, 2, prefix);\n        if (arguments.length === 3 && !isBlobLike(value)) {\n          throw new TypeError(\n            \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n          );\n        }\n        name = webidl.converters.USVString(name, prefix, \"name\");\n        value = isBlobLike(value) ? webidl.converters.Blob(value, prefix, \"value\", { strict: false }) : webidl.converters.USVString(value, prefix, \"value\");\n        filename = arguments.length === 3 ? webidl.converters.USVString(filename, prefix, \"filename\") : void 0;\n        const entry = makeEntry(name, value, filename);\n        this[kState].push(entry);\n      }\n      delete(name) {\n        webidl.brandCheck(this, _FormData);\n        const prefix = \"FormData.delete\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, \"name\");\n        this[kState] = this[kState].filter((entry) => entry.name !== name);\n      }\n      get(name) {\n        webidl.brandCheck(this, _FormData);\n        const prefix = \"FormData.get\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, \"name\");\n        const idx = this[kState].findIndex((entry) => entry.name === name);\n        if (idx === -1) {\n          return null;\n        }\n        return this[kState][idx].value;\n      }\n      getAll(name) {\n        webidl.brandCheck(this, _FormData);\n        const prefix = \"FormData.getAll\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, \"name\");\n        return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);\n      }\n      has(name) {\n        webidl.brandCheck(this, _FormData);\n        const prefix = \"FormData.has\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        name = webidl.converters.USVString(name, prefix, \"name\");\n        return this[kState].findIndex((entry) => entry.name === name) !== -1;\n      }\n      set(name, value, filename = void 0) {\n        webidl.brandCheck(this, _FormData);\n        const prefix = \"FormData.set\";\n        webidl.argumentLengthCheck(arguments, 2, prefix);\n        if (arguments.length === 3 && !isBlobLike(value)) {\n          throw new TypeError(\n            \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n          );\n        }\n        name = webidl.converters.USVString(name, prefix, \"name\");\n        value = isBlobLike(value) ? webidl.converters.Blob(value, prefix, \"name\", { strict: false }) : webidl.converters.USVString(value, prefix, \"name\");\n        filename = arguments.length === 3 ? webidl.converters.USVString(filename, prefix, \"name\") : void 0;\n        const entry = makeEntry(name, value, filename);\n        const idx = this[kState].findIndex((entry2) => entry2.name === name);\n        if (idx !== -1) {\n          this[kState] = [\n            ...this[kState].slice(0, idx),\n            entry,\n            ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)\n          ];\n        } else {\n          this[kState].push(entry);\n        }\n      }\n      [nodeUtil.inspect.custom](depth, options) {\n        const state = this[kState].reduce((a, b) => {\n          if (a[b.name]) {\n            if (Array.isArray(a[b.name])) {\n              a[b.name].push(b.value);\n            } else {\n              a[b.name] = [a[b.name], b.value];\n            }\n          } else {\n            a[b.name] = b.value;\n          }\n          return a;\n        }, { __proto__: null });\n        options.depth ??= depth;\n        options.colors ??= true;\n        const output = nodeUtil.formatWithOptions(options, state);\n        return `FormData ${output.slice(output.indexOf(\"]\") + 2)}`;\n      }\n    };\n    __name(_FormData, \"FormData\");\n    var FormData2 = _FormData;\n    iteratorMixin(\"FormData\", FormData2, kState, \"name\", \"value\");\n    Object.defineProperties(FormData2.prototype, {\n      append: kEnumerableProperty,\n      delete: kEnumerableProperty,\n      get: kEnumerableProperty,\n      getAll: kEnumerableProperty,\n      has: kEnumerableProperty,\n      set: kEnumerableProperty,\n      [Symbol.toStringTag]: {\n        value: \"FormData\",\n        configurable: true\n      }\n    });\n    function makeEntry(name, value, filename) {\n      if (typeof value === \"string\") {\n      } else {\n        if (!isFileLike(value)) {\n          value = value instanceof Blob ? new File2([value], \"blob\", { type: value.type }) : new FileLike(value, \"blob\", { type: value.type });\n        }\n        if (filename !== void 0) {\n          const options = {\n            type: value.type,\n            lastModified: value.lastModified\n          };\n          value = value instanceof NativeFile ? new File2([value], filename, options) : new FileLike(value, filename, options);\n        }\n      }\n      return { name, value };\n    }\n    __name(makeEntry, \"makeEntry\");\n    module2.exports = { FormData: FormData2, makeEntry };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/formdata-parser.js\nvar require_formdata_parser = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/formdata-parser.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { isUSVString, bufferToLowerCasedHeaderName } = require_util();\n    var { utf8DecodeBytes } = require_util2();\n    var { HTTP_TOKEN_CODEPOINTS, isomorphicDecode } = require_data_url();\n    var { isFileLike } = require_file();\n    var { makeEntry } = require_formdata();\n    var assert = require(\"assert\");\n    var { File: NodeFile } = require(\"buffer\");\n    var File2 = globalThis.File ?? NodeFile;\n    var formDataNameBuffer = Buffer.from('form-data; name=\"');\n    var filenameBuffer = Buffer.from(\"; filename\");\n    var dd = Buffer.from(\"--\");\n    var ddcrlf = Buffer.from(\"--\\r\\n\");\n    function isAsciiString(chars) {\n      for (let i = 0; i < chars.length; ++i) {\n        if ((chars.charCodeAt(i) & ~127) !== 0) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isAsciiString, \"isAsciiString\");\n    function validateBoundary(boundary) {\n      const length = boundary.length;\n      if (length < 27 || length > 70) {\n        return false;\n      }\n      for (let i = 0; i < length; ++i) {\n        const cp = boundary.charCodeAt(i);\n        if (!(cp >= 48 && cp <= 57 || cp >= 65 && cp <= 90 || cp >= 97 && cp <= 122 || cp === 39 || cp === 45 || cp === 95)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(validateBoundary, \"validateBoundary\");\n    function multipartFormDataParser(input, mimeType) {\n      assert(mimeType !== \"failure\" && mimeType.essence === \"multipart/form-data\");\n      const boundaryString = mimeType.parameters.get(\"boundary\");\n      if (boundaryString === void 0) {\n        return \"failure\";\n      }\n      const boundary = Buffer.from(`--${boundaryString}`, \"utf8\");\n      const entryList = [];\n      const position = { position: 0 };\n      while (input[position.position] === 13 && input[position.position + 1] === 10) {\n        position.position += 2;\n      }\n      let trailing = input.length;\n      while (input[trailing - 1] === 10 && input[trailing - 2] === 13) {\n        trailing -= 2;\n      }\n      if (trailing !== input.length) {\n        input = input.subarray(0, trailing);\n      }\n      while (true) {\n        if (input.subarray(position.position, position.position + boundary.length).equals(boundary)) {\n          position.position += boundary.length;\n        } else {\n          return \"failure\";\n        }\n        if (position.position === input.length - 2 && bufferStartsWith(input, dd, position) || position.position === input.length - 4 && bufferStartsWith(input, ddcrlf, position)) {\n          return entryList;\n        }\n        if (input[position.position] !== 13 || input[position.position + 1] !== 10) {\n          return \"failure\";\n        }\n        position.position += 2;\n        const result = parseMultipartFormDataHeaders(input, position);\n        if (result === \"failure\") {\n          return \"failure\";\n        }\n        let { name, filename, contentType, encoding } = result;\n        position.position += 2;\n        let body;\n        {\n          const boundaryIndex = input.indexOf(boundary.subarray(2), position.position);\n          if (boundaryIndex === -1) {\n            return \"failure\";\n          }\n          body = input.subarray(position.position, boundaryIndex - 4);\n          position.position += body.length;\n          if (encoding === \"base64\") {\n            body = Buffer.from(body.toString(), \"base64\");\n          }\n        }\n        if (input[position.position] !== 13 || input[position.position + 1] !== 10) {\n          return \"failure\";\n        } else {\n          position.position += 2;\n        }\n        let value;\n        if (filename !== null) {\n          contentType ??= \"text/plain\";\n          if (!isAsciiString(contentType)) {\n            contentType = \"\";\n          }\n          value = new File2([body], filename, { type: contentType });\n        } else {\n          value = utf8DecodeBytes(Buffer.from(body));\n        }\n        assert(isUSVString(name));\n        assert(typeof value === \"string\" && isUSVString(value) || isFileLike(value));\n        entryList.push(makeEntry(name, value, filename));\n      }\n    }\n    __name(multipartFormDataParser, \"multipartFormDataParser\");\n    function parseMultipartFormDataHeaders(input, position) {\n      let name = null;\n      let filename = null;\n      let contentType = null;\n      let encoding = null;\n      while (true) {\n        if (input[position.position] === 13 && input[position.position + 1] === 10) {\n          if (name === null) {\n            return \"failure\";\n          }\n          return { name, filename, contentType, encoding };\n        }\n        let headerName = collectASequenceOfBytes(\n          (char) => char !== 10 && char !== 13 && char !== 58,\n          input,\n          position\n        );\n        headerName = removeChars(headerName, true, true, (char) => char === 9 || char === 32);\n        if (!HTTP_TOKEN_CODEPOINTS.test(headerName.toString())) {\n          return \"failure\";\n        }\n        if (input[position.position] !== 58) {\n          return \"failure\";\n        }\n        position.position++;\n        collectASequenceOfBytes(\n          (char) => char === 32 || char === 9,\n          input,\n          position\n        );\n        switch (bufferToLowerCasedHeaderName(headerName)) {\n          case \"content-disposition\": {\n            name = filename = null;\n            if (!bufferStartsWith(input, formDataNameBuffer, position)) {\n              return \"failure\";\n            }\n            position.position += 17;\n            name = parseMultipartFormDataName(input, position);\n            if (name === null) {\n              return \"failure\";\n            }\n            if (bufferStartsWith(input, filenameBuffer, position)) {\n              let check = position.position + filenameBuffer.length;\n              if (input[check] === 42) {\n                position.position += 1;\n                check += 1;\n              }\n              if (input[check] !== 61 || input[check + 1] !== 34) {\n                return \"failure\";\n              }\n              position.position += 12;\n              filename = parseMultipartFormDataName(input, position);\n              if (filename === null) {\n                return \"failure\";\n              }\n            }\n            break;\n          }\n          case \"content-type\": {\n            let headerValue = collectASequenceOfBytes(\n              (char) => char !== 10 && char !== 13,\n              input,\n              position\n            );\n            headerValue = removeChars(headerValue, false, true, (char) => char === 9 || char === 32);\n            contentType = isomorphicDecode(headerValue);\n            break;\n          }\n          case \"content-transfer-encoding\": {\n            let headerValue = collectASequenceOfBytes(\n              (char) => char !== 10 && char !== 13,\n              input,\n              position\n            );\n            headerValue = removeChars(headerValue, false, true, (char) => char === 9 || char === 32);\n            encoding = isomorphicDecode(headerValue);\n            break;\n          }\n          default: {\n            collectASequenceOfBytes(\n              (char) => char !== 10 && char !== 13,\n              input,\n              position\n            );\n          }\n        }\n        if (input[position.position] !== 13 && input[position.position + 1] !== 10) {\n          return \"failure\";\n        } else {\n          position.position += 2;\n        }\n      }\n    }\n    __name(parseMultipartFormDataHeaders, \"parseMultipartFormDataHeaders\");\n    function parseMultipartFormDataName(input, position) {\n      assert(input[position.position - 1] === 34);\n      let name = collectASequenceOfBytes(\n        (char) => char !== 10 && char !== 13 && char !== 34,\n        input,\n        position\n      );\n      if (input[position.position] !== 34) {\n        return null;\n      } else {\n        position.position++;\n      }\n      name = new TextDecoder().decode(name).replace(/%0A/ig, \"\\n\").replace(/%0D/ig, \"\\r\").replace(/%22/g, '\"');\n      return name;\n    }\n    __name(parseMultipartFormDataName, \"parseMultipartFormDataName\");\n    function collectASequenceOfBytes(condition, input, position) {\n      let start = position.position;\n      while (start < input.length && condition(input[start])) {\n        ++start;\n      }\n      return input.subarray(position.position, position.position = start);\n    }\n    __name(collectASequenceOfBytes, \"collectASequenceOfBytes\");\n    function removeChars(buf, leading, trailing, predicate) {\n      let lead = 0;\n      let trail = buf.length - 1;\n      if (leading) {\n        while (lead < buf.length && predicate(buf[lead]))\n          lead++;\n      }\n      if (trailing) {\n        while (trail > 0 && predicate(buf[trail]))\n          trail--;\n      }\n      return lead === 0 && trail === buf.length - 1 ? buf : buf.subarray(lead, trail + 1);\n    }\n    __name(removeChars, \"removeChars\");\n    function bufferStartsWith(buffer, start, position) {\n      if (buffer.length < start.length) {\n        return false;\n      }\n      for (let i = 0; i < start.length; i++) {\n        if (start[i] !== buffer[position.position + i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(bufferStartsWith, \"bufferStartsWith\");\n    module2.exports = {\n      multipartFormDataParser,\n      validateBoundary\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/body.js\nvar require_body = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/body.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var util = require_util();\n    var {\n      ReadableStreamFrom,\n      isBlobLike,\n      isReadableStreamLike,\n      readableStreamClose,\n      createDeferredPromise,\n      fullyReadBody,\n      extractMimeType,\n      utf8DecodeBytes\n    } = require_util2();\n    var { FormData: FormData2 } = require_formdata();\n    var { kState } = require_symbols2();\n    var { webidl } = require_webidl();\n    var { Blob: Blob3 } = require(\"buffer\");\n    var assert = require(\"assert\");\n    var { isErrored, isDisturbed } = require(\"stream\");\n    var { isArrayBuffer } = require(\"util/types\");\n    var { serializeAMimeType } = require_data_url();\n    var { multipartFormDataParser } = require_formdata_parser();\n    var textEncoder = new TextEncoder();\n    function noop() {\n    }\n    __name(noop, \"noop\");\n    var hasFinalizationRegistry = globalThis.FinalizationRegistry && define_process_default.version.indexOf(\"v18\") !== 0;\n    var streamRegistry;\n    if (hasFinalizationRegistry) {\n      streamRegistry = new FinalizationRegistry((weakRef) => {\n        const stream = weakRef.deref();\n        if (stream && !stream.locked && !isDisturbed(stream) && !isErrored(stream)) {\n          stream.cancel(\"Response object has been garbage collected\").catch(noop);\n        }\n      });\n    }\n    function extractBody(object, keepalive = false) {\n      let stream = null;\n      if (object instanceof ReadableStream) {\n        stream = object;\n      } else if (isBlobLike(object)) {\n        stream = object.stream();\n      } else {\n        stream = new ReadableStream({\n          async pull(controller) {\n            const buffer = typeof source === \"string\" ? textEncoder.encode(source) : source;\n            if (buffer.byteLength) {\n              controller.enqueue(buffer);\n            }\n            queueMicrotask(() => readableStreamClose(controller));\n          },\n          start() {\n          },\n          type: \"bytes\"\n        });\n      }\n      assert(isReadableStreamLike(stream));\n      let action = null;\n      let source = null;\n      let length = null;\n      let type = null;\n      if (typeof object === \"string\") {\n        source = object;\n        type = \"text/plain;charset=UTF-8\";\n      } else if (object instanceof URLSearchParams) {\n        source = object.toString();\n        type = \"application/x-www-form-urlencoded;charset=UTF-8\";\n      } else if (isArrayBuffer(object)) {\n        source = new Uint8Array(object.slice());\n      } else if (ArrayBuffer.isView(object)) {\n        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));\n      } else if (util.isFormDataLike(object)) {\n        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, \"0\")}`;\n        const prefix = `--${boundary}\\r\nContent-Disposition: form-data`;\n        const escape = /* @__PURE__ */ __name((str) => str.replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\"), \"escape\");\n        const normalizeLinefeeds = /* @__PURE__ */ __name((value) => value.replace(/\\r?\\n|\\r/g, \"\\r\\n\"), \"normalizeLinefeeds\");\n        const blobParts = [];\n        const rn = new Uint8Array([13, 10]);\n        length = 0;\n        let hasUnknownSizeValue = false;\n        for (const [name, value] of object) {\n          if (typeof value === \"string\") {\n            const chunk2 = textEncoder.encode(prefix + `; name=\"${escape(normalizeLinefeeds(name))}\"\\r\n\\r\n${normalizeLinefeeds(value)}\\r\n`);\n            blobParts.push(chunk2);\n            length += chunk2.byteLength;\n          } else {\n            const chunk2 = textEncoder.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` + (value.name ? `; filename=\"${escape(value.name)}\"` : \"\") + `\\r\nContent-Type: ${value.type || \"application/octet-stream\"}\\r\n\\r\n`);\n            blobParts.push(chunk2, value, rn);\n            if (typeof value.size === \"number\") {\n              length += chunk2.byteLength + value.size + rn.byteLength;\n            } else {\n              hasUnknownSizeValue = true;\n            }\n          }\n        }\n        const chunk = textEncoder.encode(`--${boundary}--`);\n        blobParts.push(chunk);\n        length += chunk.byteLength;\n        if (hasUnknownSizeValue) {\n          length = null;\n        }\n        source = object;\n        action = /* @__PURE__ */ __name(async function* () {\n          for (const part of blobParts) {\n            if (part.stream) {\n              yield* part.stream();\n            } else {\n              yield part;\n            }\n          }\n        }, \"action\");\n        type = `multipart/form-data; boundary=${boundary}`;\n      } else if (isBlobLike(object)) {\n        source = object;\n        length = object.size;\n        if (object.type) {\n          type = object.type;\n        }\n      } else if (typeof object[Symbol.asyncIterator] === \"function\") {\n        if (keepalive) {\n          throw new TypeError(\"keepalive\");\n        }\n        if (util.isDisturbed(object) || object.locked) {\n          throw new TypeError(\n            \"Response body object should not be disturbed or locked\"\n          );\n        }\n        stream = object instanceof ReadableStream ? object : ReadableStreamFrom(object);\n      }\n      if (typeof source === \"string\" || util.isBuffer(source)) {\n        length = Buffer.byteLength(source);\n      }\n      if (action != null) {\n        let iterator;\n        stream = new ReadableStream({\n          async start() {\n            iterator = action(object)[Symbol.asyncIterator]();\n          },\n          async pull(controller) {\n            const { value, done } = await iterator.next();\n            if (done) {\n              queueMicrotask(() => {\n                controller.close();\n                controller.byobRequest?.respond(0);\n              });\n            } else {\n              if (!isErrored(stream)) {\n                const buffer = new Uint8Array(value);\n                if (buffer.byteLength) {\n                  controller.enqueue(buffer);\n                }\n              }\n            }\n            return controller.desiredSize > 0;\n          },\n          async cancel(reason) {\n            await iterator.return();\n          },\n          type: \"bytes\"\n        });\n      }\n      const body = { stream, source, length };\n      return [body, type];\n    }\n    __name(extractBody, \"extractBody\");\n    function safelyExtractBody(object, keepalive = false) {\n      if (object instanceof ReadableStream) {\n        assert(!util.isDisturbed(object), \"The body has already been consumed.\");\n        assert(!object.locked, \"The stream is locked.\");\n      }\n      return extractBody(object, keepalive);\n    }\n    __name(safelyExtractBody, \"safelyExtractBody\");\n    function cloneBody(instance, body) {\n      const [out1, out2] = body.stream.tee();\n      if (hasFinalizationRegistry) {\n        streamRegistry.register(instance, new WeakRef(out1));\n      }\n      body.stream = out1;\n      return {\n        stream: out2,\n        length: body.length,\n        source: body.source\n      };\n    }\n    __name(cloneBody, \"cloneBody\");\n    function throwIfAborted(state) {\n      if (state.aborted) {\n        throw new DOMException(\"The operation was aborted.\", \"AbortError\");\n      }\n    }\n    __name(throwIfAborted, \"throwIfAborted\");\n    function bodyMixinMethods(instance) {\n      const methods = {\n        blob() {\n          return consumeBody(this, (bytes) => {\n            let mimeType = bodyMimeType(this);\n            if (mimeType === null) {\n              mimeType = \"\";\n            } else if (mimeType) {\n              mimeType = serializeAMimeType(mimeType);\n            }\n            return new Blob3([bytes], { type: mimeType });\n          }, instance);\n        },\n        arrayBuffer() {\n          return consumeBody(this, (bytes) => {\n            return new Uint8Array(bytes).buffer;\n          }, instance);\n        },\n        text() {\n          return consumeBody(this, utf8DecodeBytes, instance);\n        },\n        json() {\n          return consumeBody(this, parseJSONFromBytes, instance);\n        },\n        formData() {\n          return consumeBody(this, (value) => {\n            const mimeType = bodyMimeType(this);\n            if (mimeType !== null) {\n              switch (mimeType.essence) {\n                case \"multipart/form-data\": {\n                  const parsed = multipartFormDataParser(value, mimeType);\n                  if (parsed === \"failure\") {\n                    throw new TypeError(\"Failed to parse body as FormData.\");\n                  }\n                  const fd = new FormData2();\n                  fd[kState] = parsed;\n                  return fd;\n                }\n                case \"application/x-www-form-urlencoded\": {\n                  const entries = new URLSearchParams(value.toString());\n                  const fd = new FormData2();\n                  for (const [name, value2] of entries) {\n                    fd.append(name, value2);\n                  }\n                  return fd;\n                }\n              }\n            }\n            throw new TypeError(\n              'Content-Type was not one of \"multipart/form-data\" or \"application/x-www-form-urlencoded\".'\n            );\n          }, instance);\n        },\n        bytes() {\n          return consumeBody(this, (bytes) => {\n            return new Uint8Array(bytes);\n          }, instance);\n        }\n      };\n      return methods;\n    }\n    __name(bodyMixinMethods, \"bodyMixinMethods\");\n    function mixinBody(prototype) {\n      Object.assign(prototype.prototype, bodyMixinMethods(prototype));\n    }\n    __name(mixinBody, \"mixinBody\");\n    async function consumeBody(object, convertBytesToJSValue, instance) {\n      webidl.brandCheck(object, instance);\n      if (bodyUnusable(object)) {\n        throw new TypeError(\"Body is unusable: Body has already been read\");\n      }\n      throwIfAborted(object[kState]);\n      const promise = createDeferredPromise();\n      const errorSteps = /* @__PURE__ */ __name((error) => promise.reject(error), \"errorSteps\");\n      const successSteps = /* @__PURE__ */ __name((data) => {\n        try {\n          promise.resolve(convertBytesToJSValue(data));\n        } catch (e) {\n          errorSteps(e);\n        }\n      }, \"successSteps\");\n      if (object[kState].body == null) {\n        successSteps(Buffer.allocUnsafe(0));\n        return promise.promise;\n      }\n      await fullyReadBody(object[kState].body, successSteps, errorSteps);\n      return promise.promise;\n    }\n    __name(consumeBody, \"consumeBody\");\n    function bodyUnusable(object) {\n      const body = object[kState].body;\n      return body != null && (body.stream.locked || util.isDisturbed(body.stream));\n    }\n    __name(bodyUnusable, \"bodyUnusable\");\n    function parseJSONFromBytes(bytes) {\n      return JSON.parse(utf8DecodeBytes(bytes));\n    }\n    __name(parseJSONFromBytes, \"parseJSONFromBytes\");\n    function bodyMimeType(requestOrResponse) {\n      const headers = requestOrResponse[kState].headersList;\n      const mimeType = extractMimeType(headers);\n      if (mimeType === \"failure\") {\n        return null;\n      }\n      return mimeType;\n    }\n    __name(bodyMimeType, \"bodyMimeType\");\n    module2.exports = {\n      extractBody,\n      safelyExtractBody,\n      cloneBody,\n      mixinBody,\n      streamRegistry,\n      hasFinalizationRegistry,\n      bodyUnusable\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/client-h1.js\nvar require_client_h1 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/client-h1.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var util = require_util();\n    var { channels } = require_diagnostics();\n    var timers = require_timers();\n    var {\n      RequestContentLengthMismatchError,\n      ResponseContentLengthMismatchError,\n      RequestAbortedError,\n      HeadersTimeoutError,\n      HeadersOverflowError,\n      SocketError,\n      InformationalError,\n      BodyTimeoutError,\n      HTTPParserError,\n      ResponseExceededMaxSizeError\n    } = require_errors();\n    var {\n      kUrl,\n      kReset,\n      kClient,\n      kParser,\n      kBlocking,\n      kRunning,\n      kPending,\n      kSize,\n      kWriting,\n      kQueue,\n      kNoRef,\n      kKeepAliveDefaultTimeout,\n      kHostHeader,\n      kPendingIdx,\n      kRunningIdx,\n      kError,\n      kPipelining,\n      kSocket,\n      kKeepAliveTimeoutValue,\n      kMaxHeadersSize,\n      kKeepAliveMaxTimeout,\n      kKeepAliveTimeoutThreshold,\n      kHeadersTimeout,\n      kBodyTimeout,\n      kStrictContentLength,\n      kMaxRequests,\n      kCounter,\n      kMaxResponseSize,\n      kOnError,\n      kResume,\n      kHTTPContext\n    } = require_symbols();\n    var constants = require_constants2();\n    var EMPTY_BUF = Buffer.alloc(0);\n    var FastBuffer = Buffer[Symbol.species];\n    var addListener = util.addListener;\n    var removeAllListeners = util.removeAllListeners;\n    var extractBody;\n    async function lazyllhttp() {\n      const llhttpWasmData = define_process_default.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;\n      let mod;\n      try {\n        mod = await WebAssembly.compile(require_llhttp_simd_wasm());\n      } catch (e) {\n        mod = await WebAssembly.compile(llhttpWasmData || require_llhttp_wasm());\n      }\n      return await WebAssembly.instantiate(mod, {\n        env: {\n          /* eslint-disable camelcase */\n          wasm_on_url: (p, at, len) => {\n            return 0;\n          },\n          wasm_on_status: (p, at, len) => {\n            assert(currentParser.ptr === p);\n            const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n            return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n          },\n          wasm_on_message_begin: (p) => {\n            assert(currentParser.ptr === p);\n            return currentParser.onMessageBegin() || 0;\n          },\n          wasm_on_header_field: (p, at, len) => {\n            assert(currentParser.ptr === p);\n            const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n            return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n          },\n          wasm_on_header_value: (p, at, len) => {\n            assert(currentParser.ptr === p);\n            const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n            return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n          },\n          wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {\n            assert(currentParser.ptr === p);\n            return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;\n          },\n          wasm_on_body: (p, at, len) => {\n            assert(currentParser.ptr === p);\n            const start = at - currentBufferPtr + currentBufferRef.byteOffset;\n            return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;\n          },\n          wasm_on_message_complete: (p) => {\n            assert(currentParser.ptr === p);\n            return currentParser.onMessageComplete() || 0;\n          }\n          /* eslint-enable camelcase */\n        }\n      });\n    }\n    __name(lazyllhttp, \"lazyllhttp\");\n    var llhttpInstance = null;\n    var llhttpPromise = lazyllhttp();\n    llhttpPromise.catch();\n    var currentParser = null;\n    var currentBufferRef = null;\n    var currentBufferSize = 0;\n    var currentBufferPtr = null;\n    var USE_NATIVE_TIMER = 0;\n    var USE_FAST_TIMER = 1;\n    var TIMEOUT_HEADERS = 2 | USE_FAST_TIMER;\n    var TIMEOUT_BODY = 4 | USE_FAST_TIMER;\n    var TIMEOUT_KEEP_ALIVE = 8 | USE_NATIVE_TIMER;\n    var _Parser = class _Parser {\n      constructor(client, socket, { exports: exports3 }) {\n        assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);\n        this.llhttp = exports3;\n        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);\n        this.client = client;\n        this.socket = socket;\n        this.timeout = null;\n        this.timeoutValue = null;\n        this.timeoutType = null;\n        this.statusCode = null;\n        this.statusText = \"\";\n        this.upgrade = false;\n        this.headers = [];\n        this.headersSize = 0;\n        this.headersMaxSize = client[kMaxHeadersSize];\n        this.shouldKeepAlive = false;\n        this.paused = false;\n        this.resume = this.resume.bind(this);\n        this.bytesRead = 0;\n        this.keepAlive = \"\";\n        this.contentLength = \"\";\n        this.connection = \"\";\n        this.maxResponseSize = client[kMaxResponseSize];\n      }\n      setTimeout(delay, type) {\n        if (delay !== this.timeoutValue || type & USE_FAST_TIMER ^ this.timeoutType & USE_FAST_TIMER) {\n          if (this.timeout) {\n            timers.clearTimeout(this.timeout);\n            this.timeout = null;\n          }\n          if (delay) {\n            if (type & USE_FAST_TIMER) {\n              this.timeout = timers.setFastTimeout(onParserTimeout, delay, new WeakRef(this));\n            } else {\n              this.timeout = setTimeout(onParserTimeout, delay, new WeakRef(this));\n              this.timeout.unref();\n            }\n          }\n          this.timeoutValue = delay;\n        } else if (this.timeout) {\n          if (this.timeout.refresh) {\n            this.timeout.refresh();\n          }\n        }\n        this.timeoutType = type;\n      }\n      resume() {\n        if (this.socket.destroyed || !this.paused) {\n          return;\n        }\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        this.llhttp.llhttp_resume(this.ptr);\n        assert(this.timeoutType === TIMEOUT_BODY);\n        if (this.timeout) {\n          if (this.timeout.refresh) {\n            this.timeout.refresh();\n          }\n        }\n        this.paused = false;\n        this.execute(this.socket.read() || EMPTY_BUF);\n        this.readMore();\n      }\n      readMore() {\n        while (!this.paused && this.ptr) {\n          const chunk = this.socket.read();\n          if (chunk === null) {\n            break;\n          }\n          this.execute(chunk);\n        }\n      }\n      execute(data) {\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        assert(!this.paused);\n        const { socket, llhttp } = this;\n        if (data.length > currentBufferSize) {\n          if (currentBufferPtr) {\n            llhttp.free(currentBufferPtr);\n          }\n          currentBufferSize = Math.ceil(data.length / 4096) * 4096;\n          currentBufferPtr = llhttp.malloc(currentBufferSize);\n        }\n        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);\n        try {\n          let ret;\n          try {\n            currentBufferRef = data;\n            currentParser = this;\n            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);\n          } catch (err) {\n            throw err;\n          } finally {\n            currentParser = null;\n            currentBufferRef = null;\n          }\n          const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;\n          if (ret === constants.ERROR.PAUSED_UPGRADE) {\n            this.onUpgrade(data.slice(offset));\n          } else if (ret === constants.ERROR.PAUSED) {\n            this.paused = true;\n            socket.unshift(data.slice(offset));\n          } else if (ret !== constants.ERROR.OK) {\n            const ptr = llhttp.llhttp_get_error_reason(this.ptr);\n            let message = \"\";\n            if (ptr) {\n              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);\n              message = \"Response does not match the HTTP/1.1 protocol (\" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + \")\";\n            }\n            throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));\n          }\n        } catch (err) {\n          util.destroy(socket, err);\n        }\n      }\n      destroy() {\n        assert(this.ptr != null);\n        assert(currentParser == null);\n        this.llhttp.llhttp_free(this.ptr);\n        this.ptr = null;\n        this.timeout && timers.clearTimeout(this.timeout);\n        this.timeout = null;\n        this.timeoutValue = null;\n        this.timeoutType = null;\n        this.paused = false;\n      }\n      onStatus(buf) {\n        this.statusText = buf.toString();\n      }\n      onMessageBegin() {\n        const { socket, client } = this;\n        if (socket.destroyed) {\n          return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        if (!request) {\n          return -1;\n        }\n        request.onResponseStarted();\n      }\n      onHeaderField(buf) {\n        const len = this.headers.length;\n        if ((len & 1) === 0) {\n          this.headers.push(buf);\n        } else {\n          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);\n        }\n        this.trackHeader(buf.length);\n      }\n      onHeaderValue(buf) {\n        let len = this.headers.length;\n        if ((len & 1) === 1) {\n          this.headers.push(buf);\n          len += 1;\n        } else {\n          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);\n        }\n        const key = this.headers[len - 2];\n        if (key.length === 10) {\n          const headerName = util.bufferToLowerCasedHeaderName(key);\n          if (headerName === \"keep-alive\") {\n            this.keepAlive += buf.toString();\n          } else if (headerName === \"connection\") {\n            this.connection += buf.toString();\n          }\n        } else if (key.length === 14 && util.bufferToLowerCasedHeaderName(key) === \"content-length\") {\n          this.contentLength += buf.toString();\n        }\n        this.trackHeader(buf.length);\n      }\n      trackHeader(len) {\n        this.headersSize += len;\n        if (this.headersSize >= this.headersMaxSize) {\n          util.destroy(this.socket, new HeadersOverflowError());\n        }\n      }\n      onUpgrade(head) {\n        const { upgrade, client, socket, headers, statusCode } = this;\n        assert(upgrade);\n        assert(client[kSocket] === socket);\n        assert(!socket.destroyed);\n        assert(!this.paused);\n        assert((headers.length & 1) === 0);\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert(request.upgrade || request.method === \"CONNECT\");\n        this.statusCode = null;\n        this.statusText = \"\";\n        this.shouldKeepAlive = null;\n        this.headers = [];\n        this.headersSize = 0;\n        socket.unshift(head);\n        socket[kParser].destroy();\n        socket[kParser] = null;\n        socket[kClient] = null;\n        socket[kError] = null;\n        removeAllListeners(socket);\n        client[kSocket] = null;\n        client[kHTTPContext] = null;\n        client[kQueue][client[kRunningIdx]++] = null;\n        client.emit(\"disconnect\", client[kUrl], [client], new InformationalError(\"upgrade\"));\n        try {\n          request.onUpgrade(statusCode, headers, socket);\n        } catch (err) {\n          util.destroy(socket, err);\n        }\n        client[kResume]();\n      }\n      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {\n        const { client, socket, headers, statusText } = this;\n        if (socket.destroyed) {\n          return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        if (!request) {\n          return -1;\n        }\n        assert(!this.upgrade);\n        assert(this.statusCode < 200);\n        if (statusCode === 100) {\n          util.destroy(socket, new SocketError(\"bad response\", util.getSocketInfo(socket)));\n          return -1;\n        }\n        if (upgrade && !request.upgrade) {\n          util.destroy(socket, new SocketError(\"bad upgrade\", util.getSocketInfo(socket)));\n          return -1;\n        }\n        assert(this.timeoutType === TIMEOUT_HEADERS);\n        this.statusCode = statusCode;\n        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.\n        request.method === \"HEAD\" && !socket[kReset] && this.connection.toLowerCase() === \"keep-alive\";\n        if (this.statusCode >= 200) {\n          const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];\n          this.setTimeout(bodyTimeout, TIMEOUT_BODY);\n        } else if (this.timeout) {\n          if (this.timeout.refresh) {\n            this.timeout.refresh();\n          }\n        }\n        if (request.method === \"CONNECT\") {\n          assert(client[kRunning] === 1);\n          this.upgrade = true;\n          return 2;\n        }\n        if (upgrade) {\n          assert(client[kRunning] === 1);\n          this.upgrade = true;\n          return 2;\n        }\n        assert((this.headers.length & 1) === 0);\n        this.headers = [];\n        this.headersSize = 0;\n        if (this.shouldKeepAlive && client[kPipelining]) {\n          const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;\n          if (keepAliveTimeout != null) {\n            const timeout = Math.min(\n              keepAliveTimeout - client[kKeepAliveTimeoutThreshold],\n              client[kKeepAliveMaxTimeout]\n            );\n            if (timeout <= 0) {\n              socket[kReset] = true;\n            } else {\n              client[kKeepAliveTimeoutValue] = timeout;\n            }\n          } else {\n            client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];\n          }\n        } else {\n          socket[kReset] = true;\n        }\n        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;\n        if (request.aborted) {\n          return -1;\n        }\n        if (request.method === \"HEAD\") {\n          return 1;\n        }\n        if (statusCode < 200) {\n          return 1;\n        }\n        if (socket[kBlocking]) {\n          socket[kBlocking] = false;\n          client[kResume]();\n        }\n        return pause ? constants.ERROR.PAUSED : 0;\n      }\n      onBody(buf) {\n        const { client, socket, statusCode, maxResponseSize } = this;\n        if (socket.destroyed) {\n          return -1;\n        }\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        assert(this.timeoutType === TIMEOUT_BODY);\n        if (this.timeout) {\n          if (this.timeout.refresh) {\n            this.timeout.refresh();\n          }\n        }\n        assert(statusCode >= 200);\n        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n          util.destroy(socket, new ResponseExceededMaxSizeError());\n          return -1;\n        }\n        this.bytesRead += buf.length;\n        if (request.onData(buf) === false) {\n          return constants.ERROR.PAUSED;\n        }\n      }\n      onMessageComplete() {\n        const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;\n        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n          return -1;\n        }\n        if (upgrade) {\n          return;\n        }\n        assert(statusCode >= 100);\n        assert((this.headers.length & 1) === 0);\n        const request = client[kQueue][client[kRunningIdx]];\n        assert(request);\n        this.statusCode = null;\n        this.statusText = \"\";\n        this.bytesRead = 0;\n        this.contentLength = \"\";\n        this.keepAlive = \"\";\n        this.connection = \"\";\n        this.headers = [];\n        this.headersSize = 0;\n        if (statusCode < 200) {\n          return;\n        }\n        if (request.method !== \"HEAD\" && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n          util.destroy(socket, new ResponseContentLengthMismatchError());\n          return -1;\n        }\n        request.onComplete(headers);\n        client[kQueue][client[kRunningIdx]++] = null;\n        if (socket[kWriting]) {\n          assert(client[kRunning] === 0);\n          util.destroy(socket, new InformationalError(\"reset\"));\n          return constants.ERROR.PAUSED;\n        } else if (!shouldKeepAlive) {\n          util.destroy(socket, new InformationalError(\"reset\"));\n          return constants.ERROR.PAUSED;\n        } else if (socket[kReset] && client[kRunning] === 0) {\n          util.destroy(socket, new InformationalError(\"reset\"));\n          return constants.ERROR.PAUSED;\n        } else if (client[kPipelining] == null || client[kPipelining] === 1) {\n          setImmediate(() => client[kResume]());\n        } else {\n          client[kResume]();\n        }\n      }\n    };\n    __name(_Parser, \"Parser\");\n    var Parser = _Parser;\n    function onParserTimeout(parser) {\n      const { socket, timeoutType, client, paused } = parser.deref();\n      if (timeoutType === TIMEOUT_HEADERS) {\n        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n          assert(!paused, \"cannot be paused while waiting for headers\");\n          util.destroy(socket, new HeadersTimeoutError());\n        }\n      } else if (timeoutType === TIMEOUT_BODY) {\n        if (!paused) {\n          util.destroy(socket, new BodyTimeoutError());\n        }\n      } else if (timeoutType === TIMEOUT_KEEP_ALIVE) {\n        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);\n        util.destroy(socket, new InformationalError(\"socket idle timeout\"));\n      }\n    }\n    __name(onParserTimeout, \"onParserTimeout\");\n    async function connectH1(client, socket) {\n      client[kSocket] = socket;\n      if (!llhttpInstance) {\n        llhttpInstance = await llhttpPromise;\n        llhttpPromise = null;\n      }\n      socket[kNoRef] = false;\n      socket[kWriting] = false;\n      socket[kReset] = false;\n      socket[kBlocking] = false;\n      socket[kParser] = new Parser(client, socket, llhttpInstance);\n      addListener(socket, \"error\", function(err) {\n        assert(err.code !== \"ERR_TLS_CERT_ALTNAME_INVALID\");\n        const parser = this[kParser];\n        if (err.code === \"ECONNRESET\" && parser.statusCode && !parser.shouldKeepAlive) {\n          parser.onMessageComplete();\n          return;\n        }\n        this[kError] = err;\n        this[kClient][kOnError](err);\n      });\n      addListener(socket, \"readable\", function() {\n        const parser = this[kParser];\n        if (parser) {\n          parser.readMore();\n        }\n      });\n      addListener(socket, \"end\", function() {\n        const parser = this[kParser];\n        if (parser.statusCode && !parser.shouldKeepAlive) {\n          parser.onMessageComplete();\n          return;\n        }\n        util.destroy(this, new SocketError(\"other side closed\", util.getSocketInfo(this)));\n      });\n      addListener(socket, \"close\", function() {\n        const client2 = this[kClient];\n        const parser = this[kParser];\n        if (parser) {\n          if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n            parser.onMessageComplete();\n          }\n          this[kParser].destroy();\n          this[kParser] = null;\n        }\n        const err = this[kError] || new SocketError(\"closed\", util.getSocketInfo(this));\n        client2[kSocket] = null;\n        client2[kHTTPContext] = null;\n        if (client2.destroyed) {\n          assert(client2[kPending] === 0);\n          const requests = client2[kQueue].splice(client2[kRunningIdx]);\n          for (let i = 0; i < requests.length; i++) {\n            const request = requests[i];\n            util.errorRequest(client2, request, err);\n          }\n        } else if (client2[kRunning] > 0 && err.code !== \"UND_ERR_INFO\") {\n          const request = client2[kQueue][client2[kRunningIdx]];\n          client2[kQueue][client2[kRunningIdx]++] = null;\n          util.errorRequest(client2, request, err);\n        }\n        client2[kPendingIdx] = client2[kRunningIdx];\n        assert(client2[kRunning] === 0);\n        client2.emit(\"disconnect\", client2[kUrl], [client2], err);\n        client2[kResume]();\n      });\n      let closed = false;\n      socket.on(\"close\", () => {\n        closed = true;\n      });\n      return {\n        version: \"h1\",\n        defaultPipelining: 1,\n        write(...args) {\n          return writeH1(client, ...args);\n        },\n        resume() {\n          resumeH1(client);\n        },\n        destroy(err, callback) {\n          if (closed) {\n            queueMicrotask(callback);\n          } else {\n            socket.destroy(err).on(\"close\", callback);\n          }\n        },\n        get destroyed() {\n          return socket.destroyed;\n        },\n        busy(request) {\n          if (socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n            return true;\n          }\n          if (request) {\n            if (client[kRunning] > 0 && !request.idempotent) {\n              return true;\n            }\n            if (client[kRunning] > 0 && (request.upgrade || request.method === \"CONNECT\")) {\n              return true;\n            }\n            if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body) || util.isFormDataLike(request.body))) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n    }\n    __name(connectH1, \"connectH1\");\n    function resumeH1(client) {\n      const socket = client[kSocket];\n      if (socket && !socket.destroyed) {\n        if (client[kSize] === 0) {\n          if (!socket[kNoRef] && socket.unref) {\n            socket.unref();\n            socket[kNoRef] = true;\n          }\n        } else if (socket[kNoRef] && socket.ref) {\n          socket.ref();\n          socket[kNoRef] = false;\n        }\n        if (client[kSize] === 0) {\n          if (socket[kParser].timeoutType !== TIMEOUT_KEEP_ALIVE) {\n            socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_KEEP_ALIVE);\n          }\n        } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n          if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n            const request = client[kQueue][client[kRunningIdx]];\n            const headersTimeout = request.headersTimeout != null ? request.headersTimeout : client[kHeadersTimeout];\n            socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);\n          }\n        }\n      }\n    }\n    __name(resumeH1, \"resumeH1\");\n    function shouldSendContentLength(method) {\n      return method !== \"GET\" && method !== \"HEAD\" && method !== \"OPTIONS\" && method !== \"TRACE\" && method !== \"CONNECT\";\n    }\n    __name(shouldSendContentLength, \"shouldSendContentLength\");\n    function writeH1(client, request) {\n      const { method, path, host, upgrade, blocking, reset } = request;\n      let { body, headers, contentLength } = request;\n      const expectsPayload = method === \"PUT\" || method === \"POST\" || method === \"PATCH\" || method === \"QUERY\" || method === \"PROPFIND\" || method === \"PROPPATCH\";\n      if (util.isFormDataLike(body)) {\n        if (!extractBody) {\n          extractBody = require_body().extractBody;\n        }\n        const [bodyStream, contentType] = extractBody(body);\n        if (request.contentType == null) {\n          headers.push(\"content-type\", contentType);\n        }\n        body = bodyStream.stream;\n        contentLength = bodyStream.length;\n      } else if (util.isBlobLike(body) && request.contentType == null && body.type) {\n        headers.push(\"content-type\", body.type);\n      }\n      if (body && typeof body.read === \"function\") {\n        body.read(0);\n      }\n      const bodyLength = util.bodyLength(body);\n      contentLength = bodyLength ?? contentLength;\n      if (contentLength === null) {\n        contentLength = request.contentLength;\n      }\n      if (contentLength === 0 && !expectsPayload) {\n        contentLength = null;\n      }\n      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {\n        if (client[kStrictContentLength]) {\n          util.errorRequest(client, request, new RequestContentLengthMismatchError());\n          return false;\n        }\n        define_process_default.emitWarning(new RequestContentLengthMismatchError());\n      }\n      const socket = client[kSocket];\n      const abort = /* @__PURE__ */ __name((err) => {\n        if (request.aborted || request.completed) {\n          return;\n        }\n        util.errorRequest(client, request, err || new RequestAbortedError());\n        util.destroy(body);\n        util.destroy(socket, new InformationalError(\"aborted\"));\n      }, \"abort\");\n      try {\n        request.onConnect(abort);\n      } catch (err) {\n        util.errorRequest(client, request, err);\n      }\n      if (request.aborted) {\n        return false;\n      }\n      if (method === \"HEAD\") {\n        socket[kReset] = true;\n      }\n      if (upgrade || method === \"CONNECT\") {\n        socket[kReset] = true;\n      }\n      if (reset != null) {\n        socket[kReset] = reset;\n      }\n      if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n        socket[kReset] = true;\n      }\n      if (blocking) {\n        socket[kBlocking] = true;\n      }\n      let header = `${method} ${path} HTTP/1.1\\r\n`;\n      if (typeof host === \"string\") {\n        header += `host: ${host}\\r\n`;\n      } else {\n        header += client[kHostHeader];\n      }\n      if (upgrade) {\n        header += `connection: upgrade\\r\nupgrade: ${upgrade}\\r\n`;\n      } else if (client[kPipelining] && !socket[kReset]) {\n        header += \"connection: keep-alive\\r\\n\";\n      } else {\n        header += \"connection: close\\r\\n\";\n      }\n      if (Array.isArray(headers)) {\n        for (let n = 0; n < headers.length; n += 2) {\n          const key = headers[n + 0];\n          const val = headers[n + 1];\n          if (Array.isArray(val)) {\n            for (let i = 0; i < val.length; i++) {\n              header += `${key}: ${val[i]}\\r\n`;\n            }\n          } else {\n            header += `${key}: ${val}\\r\n`;\n          }\n        }\n      }\n      if (channels.sendHeaders.hasSubscribers) {\n        channels.sendHeaders.publish({ request, headers: header, socket });\n      }\n      if (!body || bodyLength === 0) {\n        writeBuffer(abort, null, client, request, socket, contentLength, header, expectsPayload);\n      } else if (util.isBuffer(body)) {\n        writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload);\n      } else if (util.isBlobLike(body)) {\n        if (typeof body.stream === \"function\") {\n          writeIterable(abort, body.stream(), client, request, socket, contentLength, header, expectsPayload);\n        } else {\n          writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload);\n        }\n      } else if (util.isStream(body)) {\n        writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload);\n      } else if (util.isIterable(body)) {\n        writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload);\n      } else {\n        assert(false);\n      }\n      return true;\n    }\n    __name(writeH1, \"writeH1\");\n    function writeStream(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n      assert(contentLength !== 0 || client[kRunning] === 0, \"stream body cannot be pipelined\");\n      let finished = false;\n      const writer = new AsyncWriter({ abort, socket, request, contentLength, client, expectsPayload, header });\n      const onData = /* @__PURE__ */ __name(function(chunk) {\n        if (finished) {\n          return;\n        }\n        try {\n          if (!writer.write(chunk) && this.pause) {\n            this.pause();\n          }\n        } catch (err) {\n          util.destroy(this, err);\n        }\n      }, \"onData\");\n      const onDrain = /* @__PURE__ */ __name(function() {\n        if (finished) {\n          return;\n        }\n        if (body.resume) {\n          body.resume();\n        }\n      }, \"onDrain\");\n      const onClose = /* @__PURE__ */ __name(function() {\n        queueMicrotask(() => {\n          body.removeListener(\"error\", onFinished);\n        });\n        if (!finished) {\n          const err = new RequestAbortedError();\n          queueMicrotask(() => onFinished(err));\n        }\n      }, \"onClose\");\n      const onFinished = /* @__PURE__ */ __name(function(err) {\n        if (finished) {\n          return;\n        }\n        finished = true;\n        assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);\n        socket.off(\"drain\", onDrain).off(\"error\", onFinished);\n        body.removeListener(\"data\", onData).removeListener(\"end\", onFinished).removeListener(\"close\", onClose);\n        if (!err) {\n          try {\n            writer.end();\n          } catch (er) {\n            err = er;\n          }\n        }\n        writer.destroy(err);\n        if (err && (err.code !== \"UND_ERR_INFO\" || err.message !== \"reset\")) {\n          util.destroy(body, err);\n        } else {\n          util.destroy(body);\n        }\n      }, \"onFinished\");\n      body.on(\"data\", onData).on(\"end\", onFinished).on(\"error\", onFinished).on(\"close\", onClose);\n      if (body.resume) {\n        body.resume();\n      }\n      socket.on(\"drain\", onDrain).on(\"error\", onFinished);\n      if (body.errorEmitted ?? body.errored) {\n        setImmediate(() => onFinished(body.errored));\n      } else if (body.endEmitted ?? body.readableEnded) {\n        setImmediate(() => onFinished(null));\n      }\n      if (body.closeEmitted ?? body.closed) {\n        setImmediate(onClose);\n      }\n    }\n    __name(writeStream, \"writeStream\");\n    function writeBuffer(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n      try {\n        if (!body) {\n          if (contentLength === 0) {\n            socket.write(`${header}content-length: 0\\r\n\\r\n`, \"latin1\");\n          } else {\n            assert(contentLength === null, \"no body must not have content length\");\n            socket.write(`${header}\\r\n`, \"latin1\");\n          }\n        } else if (util.isBuffer(body)) {\n          assert(contentLength === body.byteLength, \"buffer body must have content length\");\n          socket.cork();\n          socket.write(`${header}content-length: ${contentLength}\\r\n\\r\n`, \"latin1\");\n          socket.write(body);\n          socket.uncork();\n          request.onBodySent(body);\n          if (!expectsPayload && request.reset !== false) {\n            socket[kReset] = true;\n          }\n        }\n        request.onRequestSent();\n        client[kResume]();\n      } catch (err) {\n        abort(err);\n      }\n    }\n    __name(writeBuffer, \"writeBuffer\");\n    async function writeBlob(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n      assert(contentLength === body.size, \"blob body must have content length\");\n      try {\n        if (contentLength != null && contentLength !== body.size) {\n          throw new RequestContentLengthMismatchError();\n        }\n        const buffer = Buffer.from(await body.arrayBuffer());\n        socket.cork();\n        socket.write(`${header}content-length: ${contentLength}\\r\n\\r\n`, \"latin1\");\n        socket.write(buffer);\n        socket.uncork();\n        request.onBodySent(buffer);\n        request.onRequestSent();\n        if (!expectsPayload && request.reset !== false) {\n          socket[kReset] = true;\n        }\n        client[kResume]();\n      } catch (err) {\n        abort(err);\n      }\n    }\n    __name(writeBlob, \"writeBlob\");\n    async function writeIterable(abort, body, client, request, socket, contentLength, header, expectsPayload) {\n      assert(contentLength !== 0 || client[kRunning] === 0, \"iterator body cannot be pipelined\");\n      let callback = null;\n      function onDrain() {\n        if (callback) {\n          const cb = callback;\n          callback = null;\n          cb();\n        }\n      }\n      __name(onDrain, \"onDrain\");\n      const waitForDrain = /* @__PURE__ */ __name(() => new Promise((resolve, reject) => {\n        assert(callback === null);\n        if (socket[kError]) {\n          reject(socket[kError]);\n        } else {\n          callback = resolve;\n        }\n      }), \"waitForDrain\");\n      socket.on(\"close\", onDrain).on(\"drain\", onDrain);\n      const writer = new AsyncWriter({ abort, socket, request, contentLength, client, expectsPayload, header });\n      try {\n        for await (const chunk of body) {\n          if (socket[kError]) {\n            throw socket[kError];\n          }\n          if (!writer.write(chunk)) {\n            await waitForDrain();\n          }\n        }\n        writer.end();\n      } catch (err) {\n        writer.destroy(err);\n      } finally {\n        socket.off(\"close\", onDrain).off(\"drain\", onDrain);\n      }\n    }\n    __name(writeIterable, \"writeIterable\");\n    var _AsyncWriter = class _AsyncWriter {\n      constructor({ abort, socket, request, contentLength, client, expectsPayload, header }) {\n        this.socket = socket;\n        this.request = request;\n        this.contentLength = contentLength;\n        this.client = client;\n        this.bytesWritten = 0;\n        this.expectsPayload = expectsPayload;\n        this.header = header;\n        this.abort = abort;\n        socket[kWriting] = true;\n      }\n      write(chunk) {\n        const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;\n        if (socket[kError]) {\n          throw socket[kError];\n        }\n        if (socket.destroyed) {\n          return false;\n        }\n        const len = Buffer.byteLength(chunk);\n        if (!len) {\n          return true;\n        }\n        if (contentLength !== null && bytesWritten + len > contentLength) {\n          if (client[kStrictContentLength]) {\n            throw new RequestContentLengthMismatchError();\n          }\n          define_process_default.emitWarning(new RequestContentLengthMismatchError());\n        }\n        socket.cork();\n        if (bytesWritten === 0) {\n          if (!expectsPayload && request.reset !== false) {\n            socket[kReset] = true;\n          }\n          if (contentLength === null) {\n            socket.write(`${header}transfer-encoding: chunked\\r\n`, \"latin1\");\n          } else {\n            socket.write(`${header}content-length: ${contentLength}\\r\n\\r\n`, \"latin1\");\n          }\n        }\n        if (contentLength === null) {\n          socket.write(`\\r\n${len.toString(16)}\\r\n`, \"latin1\");\n        }\n        this.bytesWritten += len;\n        const ret = socket.write(chunk);\n        socket.uncork();\n        request.onBodySent(chunk);\n        if (!ret) {\n          if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n            if (socket[kParser].timeout.refresh) {\n              socket[kParser].timeout.refresh();\n            }\n          }\n        }\n        return ret;\n      }\n      end() {\n        const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;\n        request.onRequestSent();\n        socket[kWriting] = false;\n        if (socket[kError]) {\n          throw socket[kError];\n        }\n        if (socket.destroyed) {\n          return;\n        }\n        if (bytesWritten === 0) {\n          if (expectsPayload) {\n            socket.write(`${header}content-length: 0\\r\n\\r\n`, \"latin1\");\n          } else {\n            socket.write(`${header}\\r\n`, \"latin1\");\n          }\n        } else if (contentLength === null) {\n          socket.write(\"\\r\\n0\\r\\n\\r\\n\", \"latin1\");\n        }\n        if (contentLength !== null && bytesWritten !== contentLength) {\n          if (client[kStrictContentLength]) {\n            throw new RequestContentLengthMismatchError();\n          } else {\n            define_process_default.emitWarning(new RequestContentLengthMismatchError());\n          }\n        }\n        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n          if (socket[kParser].timeout.refresh) {\n            socket[kParser].timeout.refresh();\n          }\n        }\n        client[kResume]();\n      }\n      destroy(err) {\n        const { socket, client, abort } = this;\n        socket[kWriting] = false;\n        if (err) {\n          assert(client[kRunning] <= 1, \"pipeline should only contain this request\");\n          abort(err);\n        }\n      }\n    };\n    __name(_AsyncWriter, \"AsyncWriter\");\n    var AsyncWriter = _AsyncWriter;\n    module2.exports = connectH1;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/client-h2.js\nvar require_client_h2 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/client-h2.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { pipeline } = require(\"stream\");\n    var util = require_util();\n    var {\n      RequestContentLengthMismatchError,\n      RequestAbortedError,\n      SocketError,\n      InformationalError\n    } = require_errors();\n    var {\n      kUrl,\n      kReset,\n      kClient,\n      kRunning,\n      kPending,\n      kQueue,\n      kPendingIdx,\n      kRunningIdx,\n      kError,\n      kSocket,\n      kStrictContentLength,\n      kOnError,\n      kMaxConcurrentStreams,\n      kHTTP2Session,\n      kResume,\n      kSize,\n      kHTTPContext\n    } = require_symbols();\n    var kOpenStreams = Symbol(\"open streams\");\n    var h2ExperimentalWarned = false;\n    var http2;\n    try {\n      http2 = require(\"http2\");\n    } catch {\n      http2 = { constants: {} };\n    }\n    var {\n      constants: {\n        HTTP2_HEADER_AUTHORITY,\n        HTTP2_HEADER_METHOD,\n        HTTP2_HEADER_PATH,\n        HTTP2_HEADER_SCHEME,\n        HTTP2_HEADER_CONTENT_LENGTH,\n        HTTP2_HEADER_EXPECT,\n        HTTP2_HEADER_STATUS\n      }\n    } = http2;\n    function parseH2Headers(headers) {\n      const result = [];\n      for (const [name, value] of Object.entries(headers)) {\n        if (Array.isArray(value)) {\n          for (const subvalue of value) {\n            result.push(Buffer.from(name), Buffer.from(subvalue));\n          }\n        } else {\n          result.push(Buffer.from(name), Buffer.from(value));\n        }\n      }\n      return result;\n    }\n    __name(parseH2Headers, \"parseH2Headers\");\n    async function connectH2(client, socket) {\n      client[kSocket] = socket;\n      if (!h2ExperimentalWarned) {\n        h2ExperimentalWarned = true;\n        define_process_default.emitWarning(\"H2 support is experimental, expect them to change at any time.\", {\n          code: \"UNDICI-H2\"\n        });\n      }\n      const session = http2.connect(client[kUrl], {\n        createConnection: () => socket,\n        peerMaxConcurrentStreams: client[kMaxConcurrentStreams]\n      });\n      session[kOpenStreams] = 0;\n      session[kClient] = client;\n      session[kSocket] = socket;\n      util.addListener(session, \"error\", onHttp2SessionError);\n      util.addListener(session, \"frameError\", onHttp2FrameError);\n      util.addListener(session, \"end\", onHttp2SessionEnd);\n      util.addListener(session, \"goaway\", onHTTP2GoAway);\n      util.addListener(session, \"close\", function() {\n        const { [kClient]: client2 } = this;\n        const { [kSocket]: socket2 } = client2;\n        const err = this[kSocket][kError] || this[kError] || new SocketError(\"closed\", util.getSocketInfo(socket2));\n        client2[kHTTP2Session] = null;\n        if (client2.destroyed) {\n          assert(client2[kPending] === 0);\n          const requests = client2[kQueue].splice(client2[kRunningIdx]);\n          for (let i = 0; i < requests.length; i++) {\n            const request = requests[i];\n            util.errorRequest(client2, request, err);\n          }\n        }\n      });\n      session.unref();\n      client[kHTTP2Session] = session;\n      socket[kHTTP2Session] = session;\n      util.addListener(socket, \"error\", function(err) {\n        assert(err.code !== \"ERR_TLS_CERT_ALTNAME_INVALID\");\n        this[kError] = err;\n        this[kClient][kOnError](err);\n      });\n      util.addListener(socket, \"end\", function() {\n        util.destroy(this, new SocketError(\"other side closed\", util.getSocketInfo(this)));\n      });\n      util.addListener(socket, \"close\", function() {\n        const err = this[kError] || new SocketError(\"closed\", util.getSocketInfo(this));\n        client[kSocket] = null;\n        if (this[kHTTP2Session] != null) {\n          this[kHTTP2Session].destroy(err);\n        }\n        client[kPendingIdx] = client[kRunningIdx];\n        assert(client[kRunning] === 0);\n        client.emit(\"disconnect\", client[kUrl], [client], err);\n        client[kResume]();\n      });\n      let closed = false;\n      socket.on(\"close\", () => {\n        closed = true;\n      });\n      return {\n        version: \"h2\",\n        defaultPipelining: Infinity,\n        write(...args) {\n          return writeH2(client, ...args);\n        },\n        resume() {\n          resumeH2(client);\n        },\n        destroy(err, callback) {\n          if (closed) {\n            queueMicrotask(callback);\n          } else {\n            socket.destroy(err).on(\"close\", callback);\n          }\n        },\n        get destroyed() {\n          return socket.destroyed;\n        },\n        busy() {\n          return false;\n        }\n      };\n    }\n    __name(connectH2, \"connectH2\");\n    function resumeH2(client) {\n      const socket = client[kSocket];\n      if (socket?.destroyed === false) {\n        if (client[kSize] === 0 && client[kMaxConcurrentStreams] === 0) {\n          socket.unref();\n          client[kHTTP2Session].unref();\n        } else {\n          socket.ref();\n          client[kHTTP2Session].ref();\n        }\n      }\n    }\n    __name(resumeH2, \"resumeH2\");\n    function onHttp2SessionError(err) {\n      assert(err.code !== \"ERR_TLS_CERT_ALTNAME_INVALID\");\n      this[kSocket][kError] = err;\n      this[kClient][kOnError](err);\n    }\n    __name(onHttp2SessionError, \"onHttp2SessionError\");\n    function onHttp2FrameError(type, code, id) {\n      if (id === 0) {\n        const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`);\n        this[kSocket][kError] = err;\n        this[kClient][kOnError](err);\n      }\n    }\n    __name(onHttp2FrameError, \"onHttp2FrameError\");\n    function onHttp2SessionEnd() {\n      const err = new SocketError(\"other side closed\", util.getSocketInfo(this[kSocket]));\n      this.destroy(err);\n      util.destroy(this[kSocket], err);\n    }\n    __name(onHttp2SessionEnd, \"onHttp2SessionEnd\");\n    function onHTTP2GoAway(code) {\n      const err = this[kError] || new SocketError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`, util.getSocketInfo(this));\n      const client = this[kClient];\n      client[kSocket] = null;\n      client[kHTTPContext] = null;\n      if (this[kHTTP2Session] != null) {\n        this[kHTTP2Session].destroy(err);\n        this[kHTTP2Session] = null;\n      }\n      util.destroy(this[kSocket], err);\n      const request = client[kQueue][client[kRunningIdx]];\n      client[kQueue][client[kRunningIdx]++] = null;\n      util.errorRequest(client, request, err);\n      client[kPendingIdx] = client[kRunningIdx];\n      assert(client[kRunning] === 0);\n      client.emit(\"disconnect\", client[kUrl], [client], err);\n      client[kResume]();\n    }\n    __name(onHTTP2GoAway, \"onHTTP2GoAway\");\n    function shouldSendContentLength(method) {\n      return method !== \"GET\" && method !== \"HEAD\" && method !== \"OPTIONS\" && method !== \"TRACE\" && method !== \"CONNECT\";\n    }\n    __name(shouldSendContentLength, \"shouldSendContentLength\");\n    function writeH2(client, request) {\n      const session = client[kHTTP2Session];\n      const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;\n      if (upgrade) {\n        util.errorRequest(client, request, new Error(\"Upgrade not supported for H2\"));\n        return false;\n      }\n      const headers = {};\n      for (let n = 0; n < reqHeaders.length; n += 2) {\n        const key = reqHeaders[n + 0];\n        const val = reqHeaders[n + 1];\n        if (Array.isArray(val)) {\n          for (let i = 0; i < val.length; i++) {\n            if (headers[key]) {\n              headers[key] += `,${val[i]}`;\n            } else {\n              headers[key] = val[i];\n            }\n          }\n        } else {\n          headers[key] = val;\n        }\n      }\n      let stream;\n      const { hostname, port } = client[kUrl];\n      headers[HTTP2_HEADER_AUTHORITY] = host || `${hostname}${port ? `:${port}` : \"\"}`;\n      headers[HTTP2_HEADER_METHOD] = method;\n      const abort = /* @__PURE__ */ __name((err) => {\n        if (request.aborted || request.completed) {\n          return;\n        }\n        err = err || new RequestAbortedError();\n        util.errorRequest(client, request, err);\n        if (stream != null) {\n          util.destroy(stream, err);\n        }\n        util.destroy(body, err);\n        client[kQueue][client[kRunningIdx]++] = null;\n        client[kResume]();\n      }, \"abort\");\n      try {\n        request.onConnect(abort);\n      } catch (err) {\n        util.errorRequest(client, request, err);\n      }\n      if (request.aborted) {\n        return false;\n      }\n      if (method === \"CONNECT\") {\n        session.ref();\n        stream = session.request(headers, { endStream: false, signal });\n        if (stream.id && !stream.pending) {\n          request.onUpgrade(null, null, stream);\n          ++session[kOpenStreams];\n          client[kQueue][client[kRunningIdx]++] = null;\n        } else {\n          stream.once(\"ready\", () => {\n            request.onUpgrade(null, null, stream);\n            ++session[kOpenStreams];\n            client[kQueue][client[kRunningIdx]++] = null;\n          });\n        }\n        stream.once(\"close\", () => {\n          session[kOpenStreams] -= 1;\n          if (session[kOpenStreams] === 0)\n            session.unref();\n        });\n        return true;\n      }\n      headers[HTTP2_HEADER_PATH] = path;\n      headers[HTTP2_HEADER_SCHEME] = \"https\";\n      const expectsPayload = method === \"PUT\" || method === \"POST\" || method === \"PATCH\";\n      if (body && typeof body.read === \"function\") {\n        body.read(0);\n      }\n      let contentLength = util.bodyLength(body);\n      if (contentLength == null) {\n        contentLength = request.contentLength;\n      }\n      if (contentLength === 0 || !expectsPayload) {\n        contentLength = null;\n      }\n      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {\n        if (client[kStrictContentLength]) {\n          util.errorRequest(client, request, new RequestContentLengthMismatchError());\n          return false;\n        }\n        define_process_default.emitWarning(new RequestContentLengthMismatchError());\n      }\n      if (contentLength != null) {\n        assert(body, \"no body must not have content length\");\n        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;\n      }\n      session.ref();\n      const shouldEndStream = method === \"GET\" || method === \"HEAD\" || body === null;\n      if (expectContinue) {\n        headers[HTTP2_HEADER_EXPECT] = \"100-continue\";\n        stream = session.request(headers, { endStream: shouldEndStream, signal });\n        stream.once(\"continue\", writeBodyH2);\n      } else {\n        stream = session.request(headers, {\n          endStream: shouldEndStream,\n          signal\n        });\n        writeBodyH2();\n      }\n      ++session[kOpenStreams];\n      stream.once(\"response\", (headers2) => {\n        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;\n        request.onResponseStarted();\n        if (request.aborted) {\n          const err = new RequestAbortedError();\n          util.errorRequest(client, request, err);\n          util.destroy(stream, err);\n          return;\n        }\n        if (request.onHeaders(Number(statusCode), parseH2Headers(realHeaders), stream.resume.bind(stream), \"\") === false) {\n          stream.pause();\n        }\n        stream.on(\"data\", (chunk) => {\n          if (request.onData(chunk) === false) {\n            stream.pause();\n          }\n        });\n      });\n      stream.once(\"end\", () => {\n        if (stream.state?.state == null || stream.state.state < 6) {\n          request.onComplete([]);\n        }\n        if (session[kOpenStreams] === 0) {\n          session.unref();\n        }\n        abort(new InformationalError(\"HTTP/2: stream half-closed (remote)\"));\n        client[kQueue][client[kRunningIdx]++] = null;\n        client[kPendingIdx] = client[kRunningIdx];\n        client[kResume]();\n      });\n      stream.once(\"close\", () => {\n        session[kOpenStreams] -= 1;\n        if (session[kOpenStreams] === 0) {\n          session.unref();\n        }\n      });\n      stream.once(\"error\", function(err) {\n        abort(err);\n      });\n      stream.once(\"frameError\", (type, code) => {\n        abort(new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`));\n      });\n      return true;\n      function writeBodyH2() {\n        if (!body || contentLength === 0) {\n          writeBuffer(\n            abort,\n            stream,\n            null,\n            client,\n            request,\n            client[kSocket],\n            contentLength,\n            expectsPayload\n          );\n        } else if (util.isBuffer(body)) {\n          writeBuffer(\n            abort,\n            stream,\n            body,\n            client,\n            request,\n            client[kSocket],\n            contentLength,\n            expectsPayload\n          );\n        } else if (util.isBlobLike(body)) {\n          if (typeof body.stream === \"function\") {\n            writeIterable(\n              abort,\n              stream,\n              body.stream(),\n              client,\n              request,\n              client[kSocket],\n              contentLength,\n              expectsPayload\n            );\n          } else {\n            writeBlob(\n              abort,\n              stream,\n              body,\n              client,\n              request,\n              client[kSocket],\n              contentLength,\n              expectsPayload\n            );\n          }\n        } else if (util.isStream(body)) {\n          writeStream(\n            abort,\n            client[kSocket],\n            expectsPayload,\n            stream,\n            body,\n            client,\n            request,\n            contentLength\n          );\n        } else if (util.isIterable(body)) {\n          writeIterable(\n            abort,\n            stream,\n            body,\n            client,\n            request,\n            client[kSocket],\n            contentLength,\n            expectsPayload\n          );\n        } else {\n          assert(false);\n        }\n      }\n      __name(writeBodyH2, \"writeBodyH2\");\n    }\n    __name(writeH2, \"writeH2\");\n    function writeBuffer(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n      try {\n        if (body != null && util.isBuffer(body)) {\n          assert(contentLength === body.byteLength, \"buffer body must have content length\");\n          h2stream.cork();\n          h2stream.write(body);\n          h2stream.uncork();\n          h2stream.end();\n          request.onBodySent(body);\n        }\n        if (!expectsPayload) {\n          socket[kReset] = true;\n        }\n        request.onRequestSent();\n        client[kResume]();\n      } catch (error) {\n        abort(error);\n      }\n    }\n    __name(writeBuffer, \"writeBuffer\");\n    function writeStream(abort, socket, expectsPayload, h2stream, body, client, request, contentLength) {\n      assert(contentLength !== 0 || client[kRunning] === 0, \"stream body cannot be pipelined\");\n      const pipe = pipeline(\n        body,\n        h2stream,\n        (err) => {\n          if (err) {\n            util.destroy(pipe, err);\n            abort(err);\n          } else {\n            util.removeAllListeners(pipe);\n            request.onRequestSent();\n            if (!expectsPayload) {\n              socket[kReset] = true;\n            }\n            client[kResume]();\n          }\n        }\n      );\n      util.addListener(pipe, \"data\", onPipeData);\n      function onPipeData(chunk) {\n        request.onBodySent(chunk);\n      }\n      __name(onPipeData, \"onPipeData\");\n    }\n    __name(writeStream, \"writeStream\");\n    async function writeBlob(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n      assert(contentLength === body.size, \"blob body must have content length\");\n      try {\n        if (contentLength != null && contentLength !== body.size) {\n          throw new RequestContentLengthMismatchError();\n        }\n        const buffer = Buffer.from(await body.arrayBuffer());\n        h2stream.cork();\n        h2stream.write(buffer);\n        h2stream.uncork();\n        h2stream.end();\n        request.onBodySent(buffer);\n        request.onRequestSent();\n        if (!expectsPayload) {\n          socket[kReset] = true;\n        }\n        client[kResume]();\n      } catch (err) {\n        abort(err);\n      }\n    }\n    __name(writeBlob, \"writeBlob\");\n    async function writeIterable(abort, h2stream, body, client, request, socket, contentLength, expectsPayload) {\n      assert(contentLength !== 0 || client[kRunning] === 0, \"iterator body cannot be pipelined\");\n      let callback = null;\n      function onDrain() {\n        if (callback) {\n          const cb = callback;\n          callback = null;\n          cb();\n        }\n      }\n      __name(onDrain, \"onDrain\");\n      const waitForDrain = /* @__PURE__ */ __name(() => new Promise((resolve, reject) => {\n        assert(callback === null);\n        if (socket[kError]) {\n          reject(socket[kError]);\n        } else {\n          callback = resolve;\n        }\n      }), \"waitForDrain\");\n      h2stream.on(\"close\", onDrain).on(\"drain\", onDrain);\n      try {\n        for await (const chunk of body) {\n          if (socket[kError]) {\n            throw socket[kError];\n          }\n          const res = h2stream.write(chunk);\n          request.onBodySent(chunk);\n          if (!res) {\n            await waitForDrain();\n          }\n        }\n        h2stream.end();\n        request.onRequestSent();\n        if (!expectsPayload) {\n          socket[kReset] = true;\n        }\n        client[kResume]();\n      } catch (err) {\n        abort(err);\n      } finally {\n        h2stream.off(\"close\", onDrain).off(\"drain\", onDrain);\n      }\n    }\n    __name(writeIterable, \"writeIterable\");\n    module2.exports = connectH2;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/handler/redirect-handler.js\nvar require_redirect_handler = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/handler/redirect-handler.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var util = require_util();\n    var { kBodyUsed } = require_symbols();\n    var assert = require(\"assert\");\n    var { InvalidArgumentError } = require_errors();\n    var EE = require(\"events\");\n    var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];\n    var kBody = Symbol(\"body\");\n    var _BodyAsyncIterable = class _BodyAsyncIterable {\n      constructor(body) {\n        this[kBody] = body;\n        this[kBodyUsed] = false;\n      }\n      async *[Symbol.asyncIterator]() {\n        assert(!this[kBodyUsed], \"disturbed\");\n        this[kBodyUsed] = true;\n        yield* this[kBody];\n      }\n    };\n    __name(_BodyAsyncIterable, \"BodyAsyncIterable\");\n    var BodyAsyncIterable = _BodyAsyncIterable;\n    var _RedirectHandler = class _RedirectHandler {\n      constructor(dispatch, maxRedirections, opts, handler) {\n        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n          throw new InvalidArgumentError(\"maxRedirections must be a positive number\");\n        }\n        util.validateHandler(handler, opts.method, opts.upgrade);\n        this.dispatch = dispatch;\n        this.location = null;\n        this.abort = null;\n        this.opts = { ...opts, maxRedirections: 0 };\n        this.maxRedirections = maxRedirections;\n        this.handler = handler;\n        this.history = [];\n        this.redirectionLimitReached = false;\n        if (util.isStream(this.opts.body)) {\n          if (util.bodyLength(this.opts.body) === 0) {\n            this.opts.body.on(\"data\", function() {\n              assert(false);\n            });\n          }\n          if (typeof this.opts.body.readableDidRead !== \"boolean\") {\n            this.opts.body[kBodyUsed] = false;\n            EE.prototype.on.call(this.opts.body, \"data\", function() {\n              this[kBodyUsed] = true;\n            });\n          }\n        } else if (this.opts.body && typeof this.opts.body.pipeTo === \"function\") {\n          this.opts.body = new BodyAsyncIterable(this.opts.body);\n        } else if (this.opts.body && typeof this.opts.body !== \"string\" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {\n          this.opts.body = new BodyAsyncIterable(this.opts.body);\n        }\n      }\n      onConnect(abort) {\n        this.abort = abort;\n        this.handler.onConnect(abort, { history: this.history });\n      }\n      onUpgrade(statusCode, headers, socket) {\n        this.handler.onUpgrade(statusCode, headers, socket);\n      }\n      onError(error) {\n        this.handler.onError(error);\n      }\n      onHeaders(statusCode, headers, resume, statusText) {\n        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);\n        if (this.opts.throwOnMaxRedirect && this.history.length >= this.maxRedirections) {\n          if (this.request) {\n            this.request.abort(new Error(\"max redirects\"));\n          }\n          this.redirectionLimitReached = true;\n          this.abort(new Error(\"max redirects\"));\n          return;\n        }\n        if (this.opts.origin) {\n          this.history.push(new URL(this.opts.path, this.opts.origin));\n        }\n        if (!this.location) {\n          return this.handler.onHeaders(statusCode, headers, resume, statusText);\n        }\n        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));\n        const path = search ? `${pathname}${search}` : pathname;\n        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);\n        this.opts.path = path;\n        this.opts.origin = origin;\n        this.opts.maxRedirections = 0;\n        this.opts.query = null;\n        if (statusCode === 303 && this.opts.method !== \"HEAD\") {\n          this.opts.method = \"GET\";\n          this.opts.body = null;\n        }\n      }\n      onData(chunk) {\n        if (this.location) {\n        } else {\n          return this.handler.onData(chunk);\n        }\n      }\n      onComplete(trailers) {\n        if (this.location) {\n          this.location = null;\n          this.abort = null;\n          this.dispatch(this.opts, this);\n        } else {\n          this.handler.onComplete(trailers);\n        }\n      }\n      onBodySent(chunk) {\n        if (this.handler.onBodySent) {\n          this.handler.onBodySent(chunk);\n        }\n      }\n    };\n    __name(_RedirectHandler, \"RedirectHandler\");\n    var RedirectHandler = _RedirectHandler;\n    function parseLocation(statusCode, headers) {\n      if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n        return null;\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        if (headers[i].length === 8 && util.headerNameToString(headers[i]) === \"location\") {\n          return headers[i + 1];\n        }\n      }\n    }\n    __name(parseLocation, \"parseLocation\");\n    function shouldRemoveHeader(header, removeContent, unknownOrigin) {\n      if (header.length === 4) {\n        return util.headerNameToString(header) === \"host\";\n      }\n      if (removeContent && util.headerNameToString(header).startsWith(\"content-\")) {\n        return true;\n      }\n      if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {\n        const name = util.headerNameToString(header);\n        return name === \"authorization\" || name === \"cookie\" || name === \"proxy-authorization\";\n      }\n      return false;\n    }\n    __name(shouldRemoveHeader, \"shouldRemoveHeader\");\n    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {\n      const ret = [];\n      if (Array.isArray(headers)) {\n        for (let i = 0; i < headers.length; i += 2) {\n          if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n            ret.push(headers[i], headers[i + 1]);\n          }\n        }\n      } else if (headers && typeof headers === \"object\") {\n        for (const key of Object.keys(headers)) {\n          if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n            ret.push(key, headers[key]);\n          }\n        }\n      } else {\n        assert(headers == null, \"headers must be an object or an array\");\n      }\n      return ret;\n    }\n    __name(cleanRequestHeaders, \"cleanRequestHeaders\");\n    module2.exports = RedirectHandler;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/redirect-interceptor.js\nvar require_redirect_interceptor = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/redirect-interceptor.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var RedirectHandler = require_redirect_handler();\n    function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {\n      return (dispatch) => {\n        return /* @__PURE__ */ __name(function Intercept(opts, handler) {\n          const { maxRedirections = defaultMaxRedirections } = opts;\n          if (!maxRedirections) {\n            return dispatch(opts, handler);\n          }\n          const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);\n          opts = { ...opts, maxRedirections: 0 };\n          return dispatch(opts, redirectHandler);\n        }, \"Intercept\");\n      };\n    }\n    __name(createRedirectInterceptor, \"createRedirectInterceptor\");\n    module2.exports = createRedirectInterceptor;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/client.js\nvar require_client = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/client.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var net = require(\"net\");\n    var http = require(\"http\");\n    var util = require_util();\n    var { channels } = require_diagnostics();\n    var Request2 = require_undici_core_request();\n    var DispatcherBase = require_dispatcher_base();\n    var {\n      InvalidArgumentError,\n      InformationalError,\n      ClientDestroyedError\n    } = require_errors();\n    var buildConnector = require_connect();\n    var {\n      kUrl,\n      kServerName,\n      kClient,\n      kBusy,\n      kConnect,\n      kResuming,\n      kRunning,\n      kPending,\n      kSize,\n      kQueue,\n      kConnected,\n      kConnecting,\n      kNeedDrain,\n      kKeepAliveDefaultTimeout,\n      kHostHeader,\n      kPendingIdx,\n      kRunningIdx,\n      kError,\n      kPipelining,\n      kKeepAliveTimeoutValue,\n      kMaxHeadersSize,\n      kKeepAliveMaxTimeout,\n      kKeepAliveTimeoutThreshold,\n      kHeadersTimeout,\n      kBodyTimeout,\n      kStrictContentLength,\n      kConnector,\n      kMaxRedirections,\n      kMaxRequests,\n      kCounter,\n      kClose,\n      kDestroy,\n      kDispatch,\n      kInterceptors,\n      kLocalAddress,\n      kMaxResponseSize,\n      kOnError,\n      kHTTPContext,\n      kMaxConcurrentStreams,\n      kResume\n    } = require_symbols();\n    var connectH1 = require_client_h1();\n    var connectH2 = require_client_h2();\n    var deprecatedInterceptorWarned = false;\n    var kClosedResolve = Symbol(\"kClosedResolve\");\n    var noop = /* @__PURE__ */ __name(() => {\n    }, \"noop\");\n    function getPipelining(client) {\n      return client[kPipelining] ?? client[kHTTPContext]?.defaultPipelining ?? 1;\n    }\n    __name(getPipelining, \"getPipelining\");\n    var _Client = class _Client extends DispatcherBase {\n      /**\n       *\n       * @param {string|URL} url\n       * @param {import('../../types/client.js').Client.Options} options\n       */\n      constructor(url, {\n        interceptors,\n        maxHeaderSize,\n        headersTimeout,\n        socketTimeout,\n        requestTimeout,\n        connectTimeout,\n        bodyTimeout,\n        idleTimeout,\n        keepAlive,\n        keepAliveTimeout,\n        maxKeepAliveTimeout,\n        keepAliveMaxTimeout,\n        keepAliveTimeoutThreshold,\n        socketPath,\n        pipelining,\n        tls,\n        strictContentLength,\n        maxCachedSessions,\n        maxRedirections,\n        connect: connect2,\n        maxRequestsPerClient,\n        localAddress,\n        maxResponseSize,\n        autoSelectFamily,\n        autoSelectFamilyAttemptTimeout,\n        // h2\n        maxConcurrentStreams,\n        allowH2\n      } = {}) {\n        super();\n        if (keepAlive !== void 0) {\n          throw new InvalidArgumentError(\"unsupported keepAlive, use pipelining=0 instead\");\n        }\n        if (socketTimeout !== void 0) {\n          throw new InvalidArgumentError(\"unsupported socketTimeout, use headersTimeout & bodyTimeout instead\");\n        }\n        if (requestTimeout !== void 0) {\n          throw new InvalidArgumentError(\"unsupported requestTimeout, use headersTimeout & bodyTimeout instead\");\n        }\n        if (idleTimeout !== void 0) {\n          throw new InvalidArgumentError(\"unsupported idleTimeout, use keepAliveTimeout instead\");\n        }\n        if (maxKeepAliveTimeout !== void 0) {\n          throw new InvalidArgumentError(\"unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead\");\n        }\n        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n          throw new InvalidArgumentError(\"invalid maxHeaderSize\");\n        }\n        if (socketPath != null && typeof socketPath !== \"string\") {\n          throw new InvalidArgumentError(\"invalid socketPath\");\n        }\n        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n          throw new InvalidArgumentError(\"invalid connectTimeout\");\n        }\n        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n          throw new InvalidArgumentError(\"invalid keepAliveTimeout\");\n        }\n        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n          throw new InvalidArgumentError(\"invalid keepAliveMaxTimeout\");\n        }\n        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n          throw new InvalidArgumentError(\"invalid keepAliveTimeoutThreshold\");\n        }\n        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n          throw new InvalidArgumentError(\"headersTimeout must be a positive integer or zero\");\n        }\n        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n          throw new InvalidArgumentError(\"bodyTimeout must be a positive integer or zero\");\n        }\n        if (connect2 != null && typeof connect2 !== \"function\" && typeof connect2 !== \"object\") {\n          throw new InvalidArgumentError(\"connect must be a function or an object\");\n        }\n        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n          throw new InvalidArgumentError(\"maxRedirections must be a positive number\");\n        }\n        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n          throw new InvalidArgumentError(\"maxRequestsPerClient must be a positive number\");\n        }\n        if (localAddress != null && (typeof localAddress !== \"string\" || net.isIP(localAddress) === 0)) {\n          throw new InvalidArgumentError(\"localAddress must be valid string IP address\");\n        }\n        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n          throw new InvalidArgumentError(\"maxResponseSize must be a positive number\");\n        }\n        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {\n          throw new InvalidArgumentError(\"autoSelectFamilyAttemptTimeout must be a positive number\");\n        }\n        if (allowH2 != null && typeof allowH2 !== \"boolean\") {\n          throw new InvalidArgumentError(\"allowH2 must be a valid boolean value\");\n        }\n        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== \"number\" || maxConcurrentStreams < 1)) {\n          throw new InvalidArgumentError(\"maxConcurrentStreams must be a positive integer, greater than 0\");\n        }\n        if (typeof connect2 !== \"function\") {\n          connect2 = buildConnector({\n            ...tls,\n            maxCachedSessions,\n            allowH2,\n            socketPath,\n            timeout: connectTimeout,\n            ...autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,\n            ...connect2\n          });\n        }\n        if (interceptors?.Client && Array.isArray(interceptors.Client)) {\n          this[kInterceptors] = interceptors.Client;\n          if (!deprecatedInterceptorWarned) {\n            deprecatedInterceptorWarned = true;\n            define_process_default.emitWarning(\"Client.Options#interceptor is deprecated. Use Dispatcher#compose instead.\", {\n              code: \"UNDICI-CLIENT-INTERCEPTOR-DEPRECATED\"\n            });\n          }\n        } else {\n          this[kInterceptors] = [createRedirectInterceptor({ maxRedirections })];\n        }\n        this[kUrl] = util.parseOrigin(url);\n        this[kConnector] = connect2;\n        this[kPipelining] = pipelining != null ? pipelining : 1;\n        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;\n        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;\n        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;\n        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 2e3 : keepAliveTimeoutThreshold;\n        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];\n        this[kServerName] = null;\n        this[kLocalAddress] = localAddress != null ? localAddress : null;\n        this[kResuming] = 0;\n        this[kNeedDrain] = 0;\n        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : \"\"}\\r\n`;\n        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;\n        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;\n        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;\n        this[kMaxRedirections] = maxRedirections;\n        this[kMaxRequests] = maxRequestsPerClient;\n        this[kClosedResolve] = null;\n        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;\n        this[kMaxConcurrentStreams] = maxConcurrentStreams != null ? maxConcurrentStreams : 100;\n        this[kHTTPContext] = null;\n        this[kQueue] = [];\n        this[kRunningIdx] = 0;\n        this[kPendingIdx] = 0;\n        this[kResume] = (sync) => resume(this, sync);\n        this[kOnError] = (err) => onError(this, err);\n      }\n      get pipelining() {\n        return this[kPipelining];\n      }\n      set pipelining(value) {\n        this[kPipelining] = value;\n        this[kResume](true);\n      }\n      get [kPending]() {\n        return this[kQueue].length - this[kPendingIdx];\n      }\n      get [kRunning]() {\n        return this[kPendingIdx] - this[kRunningIdx];\n      }\n      get [kSize]() {\n        return this[kQueue].length - this[kRunningIdx];\n      }\n      get [kConnected]() {\n        return !!this[kHTTPContext] && !this[kConnecting] && !this[kHTTPContext].destroyed;\n      }\n      get [kBusy]() {\n        return Boolean(\n          this[kHTTPContext]?.busy(null) || this[kSize] >= (getPipelining(this) || 1) || this[kPending] > 0\n        );\n      }\n      /* istanbul ignore: only used for test */\n      [kConnect](cb) {\n        connect(this);\n        this.once(\"connect\", cb);\n      }\n      [kDispatch](opts, handler) {\n        const origin = opts.origin || this[kUrl].origin;\n        const request = new Request2(origin, opts, handler);\n        this[kQueue].push(request);\n        if (this[kResuming]) {\n        } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n          this[kResuming] = 1;\n          queueMicrotask(() => resume(this));\n        } else {\n          this[kResume](true);\n        }\n        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n          this[kNeedDrain] = 2;\n        }\n        return this[kNeedDrain] < 2;\n      }\n      async [kClose]() {\n        return new Promise((resolve) => {\n          if (this[kSize]) {\n            this[kClosedResolve] = resolve;\n          } else {\n            resolve(null);\n          }\n        });\n      }\n      async [kDestroy](err) {\n        return new Promise((resolve) => {\n          const requests = this[kQueue].splice(this[kPendingIdx]);\n          for (let i = 0; i < requests.length; i++) {\n            const request = requests[i];\n            util.errorRequest(this, request, err);\n          }\n          const callback = /* @__PURE__ */ __name(() => {\n            if (this[kClosedResolve]) {\n              this[kClosedResolve]();\n              this[kClosedResolve] = null;\n            }\n            resolve(null);\n          }, \"callback\");\n          if (this[kHTTPContext]) {\n            this[kHTTPContext].destroy(err, callback);\n            this[kHTTPContext] = null;\n          } else {\n            queueMicrotask(callback);\n          }\n          this[kResume]();\n        });\n      }\n    };\n    __name(_Client, \"Client\");\n    var Client = _Client;\n    var createRedirectInterceptor = require_redirect_interceptor();\n    function onError(client, err) {\n      if (client[kRunning] === 0 && err.code !== \"UND_ERR_INFO\" && err.code !== \"UND_ERR_SOCKET\") {\n        assert(client[kPendingIdx] === client[kRunningIdx]);\n        const requests = client[kQueue].splice(client[kRunningIdx]);\n        for (let i = 0; i < requests.length; i++) {\n          const request = requests[i];\n          util.errorRequest(client, request, err);\n        }\n        assert(client[kSize] === 0);\n      }\n    }\n    __name(onError, \"onError\");\n    async function connect(client) {\n      assert(!client[kConnecting]);\n      assert(!client[kHTTPContext]);\n      let { host, hostname, protocol, port } = client[kUrl];\n      if (hostname[0] === \"[\") {\n        const idx = hostname.indexOf(\"]\");\n        assert(idx !== -1);\n        const ip = hostname.substring(1, idx);\n        assert(net.isIP(ip));\n        hostname = ip;\n      }\n      client[kConnecting] = true;\n      if (channels.beforeConnect.hasSubscribers) {\n        channels.beforeConnect.publish({\n          connectParams: {\n            host,\n            hostname,\n            protocol,\n            port,\n            version: client[kHTTPContext]?.version,\n            servername: client[kServerName],\n            localAddress: client[kLocalAddress]\n          },\n          connector: client[kConnector]\n        });\n      }\n      try {\n        const socket = await new Promise((resolve, reject) => {\n          client[kConnector]({\n            host,\n            hostname,\n            protocol,\n            port,\n            servername: client[kServerName],\n            localAddress: client[kLocalAddress]\n          }, (err, socket2) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(socket2);\n            }\n          });\n        });\n        if (client.destroyed) {\n          util.destroy(socket.on(\"error\", noop), new ClientDestroyedError());\n          return;\n        }\n        assert(socket);\n        try {\n          client[kHTTPContext] = socket.alpnProtocol === \"h2\" ? await connectH2(client, socket) : await connectH1(client, socket);\n        } catch (err) {\n          socket.destroy().on(\"error\", noop);\n          throw err;\n        }\n        client[kConnecting] = false;\n        socket[kCounter] = 0;\n        socket[kMaxRequests] = client[kMaxRequests];\n        socket[kClient] = client;\n        socket[kError] = null;\n        if (channels.connected.hasSubscribers) {\n          channels.connected.publish({\n            connectParams: {\n              host,\n              hostname,\n              protocol,\n              port,\n              version: client[kHTTPContext]?.version,\n              servername: client[kServerName],\n              localAddress: client[kLocalAddress]\n            },\n            connector: client[kConnector],\n            socket\n          });\n        }\n        client.emit(\"connect\", client[kUrl], [client]);\n      } catch (err) {\n        if (client.destroyed) {\n          return;\n        }\n        client[kConnecting] = false;\n        if (channels.connectError.hasSubscribers) {\n          channels.connectError.publish({\n            connectParams: {\n              host,\n              hostname,\n              protocol,\n              port,\n              version: client[kHTTPContext]?.version,\n              servername: client[kServerName],\n              localAddress: client[kLocalAddress]\n            },\n            connector: client[kConnector],\n            error: err\n          });\n        }\n        if (err.code === \"ERR_TLS_CERT_ALTNAME_INVALID\") {\n          assert(client[kRunning] === 0);\n          while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {\n            const request = client[kQueue][client[kPendingIdx]++];\n            util.errorRequest(client, request, err);\n          }\n        } else {\n          onError(client, err);\n        }\n        client.emit(\"connectionError\", client[kUrl], [client], err);\n      }\n      client[kResume]();\n    }\n    __name(connect, \"connect\");\n    function emitDrain(client) {\n      client[kNeedDrain] = 0;\n      client.emit(\"drain\", client[kUrl], [client]);\n    }\n    __name(emitDrain, \"emitDrain\");\n    function resume(client, sync) {\n      if (client[kResuming] === 2) {\n        return;\n      }\n      client[kResuming] = 2;\n      _resume(client, sync);\n      client[kResuming] = 0;\n      if (client[kRunningIdx] > 256) {\n        client[kQueue].splice(0, client[kRunningIdx]);\n        client[kPendingIdx] -= client[kRunningIdx];\n        client[kRunningIdx] = 0;\n      }\n    }\n    __name(resume, \"resume\");\n    function _resume(client, sync) {\n      while (true) {\n        if (client.destroyed) {\n          assert(client[kPending] === 0);\n          return;\n        }\n        if (client[kClosedResolve] && !client[kSize]) {\n          client[kClosedResolve]();\n          client[kClosedResolve] = null;\n          return;\n        }\n        if (client[kHTTPContext]) {\n          client[kHTTPContext].resume();\n        }\n        if (client[kBusy]) {\n          client[kNeedDrain] = 2;\n        } else if (client[kNeedDrain] === 2) {\n          if (sync) {\n            client[kNeedDrain] = 1;\n            queueMicrotask(() => emitDrain(client));\n          } else {\n            emitDrain(client);\n          }\n          continue;\n        }\n        if (client[kPending] === 0) {\n          return;\n        }\n        if (client[kRunning] >= (getPipelining(client) || 1)) {\n          return;\n        }\n        const request = client[kQueue][client[kPendingIdx]];\n        if (client[kUrl].protocol === \"https:\" && client[kServerName] !== request.servername) {\n          if (client[kRunning] > 0) {\n            return;\n          }\n          client[kServerName] = request.servername;\n          client[kHTTPContext]?.destroy(new InformationalError(\"servername changed\"), () => {\n            client[kHTTPContext] = null;\n            resume(client);\n          });\n        }\n        if (client[kConnecting]) {\n          return;\n        }\n        if (!client[kHTTPContext]) {\n          connect(client);\n          return;\n        }\n        if (client[kHTTPContext].destroyed) {\n          return;\n        }\n        if (client[kHTTPContext].busy(request)) {\n          return;\n        }\n        if (!request.aborted && client[kHTTPContext].write(request)) {\n          client[kPendingIdx]++;\n        } else {\n          client[kQueue].splice(client[kPendingIdx], 1);\n        }\n      }\n    }\n    __name(_resume, \"_resume\");\n    module2.exports = Client;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/fixed-queue.js\nvar require_fixed_queue = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/fixed-queue.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var kSize = 2048;\n    var kMask = kSize - 1;\n    var _FixedCircularBuffer = class _FixedCircularBuffer {\n      constructor() {\n        this.bottom = 0;\n        this.top = 0;\n        this.list = new Array(kSize);\n        this.next = null;\n      }\n      isEmpty() {\n        return this.top === this.bottom;\n      }\n      isFull() {\n        return (this.top + 1 & kMask) === this.bottom;\n      }\n      push(data) {\n        this.list[this.top] = data;\n        this.top = this.top + 1 & kMask;\n      }\n      shift() {\n        const nextItem = this.list[this.bottom];\n        if (nextItem === void 0)\n          return null;\n        this.list[this.bottom] = void 0;\n        this.bottom = this.bottom + 1 & kMask;\n        return nextItem;\n      }\n    };\n    __name(_FixedCircularBuffer, \"FixedCircularBuffer\");\n    var FixedCircularBuffer = _FixedCircularBuffer;\n    var _a;\n    module2.exports = (_a = class {\n      constructor() {\n        this.head = this.tail = new FixedCircularBuffer();\n      }\n      isEmpty() {\n        return this.head.isEmpty();\n      }\n      push(data) {\n        if (this.head.isFull()) {\n          this.head = this.head.next = new FixedCircularBuffer();\n        }\n        this.head.push(data);\n      }\n      shift() {\n        const tail = this.tail;\n        const next = tail.shift();\n        if (tail.isEmpty() && tail.next !== null) {\n          this.tail = tail.next;\n        }\n        return next;\n      }\n    }, __name(_a, \"FixedQueue\"), _a);\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/pool-stats.js\nvar require_pool_stats = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/pool-stats.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();\n    var kPool = Symbol(\"pool\");\n    var _PoolStats = class _PoolStats {\n      constructor(pool) {\n        this[kPool] = pool;\n      }\n      get connected() {\n        return this[kPool][kConnected];\n      }\n      get free() {\n        return this[kPool][kFree];\n      }\n      get pending() {\n        return this[kPool][kPending];\n      }\n      get queued() {\n        return this[kPool][kQueued];\n      }\n      get running() {\n        return this[kPool][kRunning];\n      }\n      get size() {\n        return this[kPool][kSize];\n      }\n    };\n    __name(_PoolStats, \"PoolStats\");\n    var PoolStats = _PoolStats;\n    module2.exports = PoolStats;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/pool-base.js\nvar require_pool_base = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/pool-base.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var DispatcherBase = require_dispatcher_base();\n    var FixedQueue = require_fixed_queue();\n    var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();\n    var PoolStats = require_pool_stats();\n    var kClients = Symbol(\"clients\");\n    var kNeedDrain = Symbol(\"needDrain\");\n    var kQueue = Symbol(\"queue\");\n    var kClosedResolve = Symbol(\"closed resolve\");\n    var kOnDrain = Symbol(\"onDrain\");\n    var kOnConnect = Symbol(\"onConnect\");\n    var kOnDisconnect = Symbol(\"onDisconnect\");\n    var kOnConnectionError = Symbol(\"onConnectionError\");\n    var kGetDispatcher = Symbol(\"get dispatcher\");\n    var kAddClient = Symbol(\"add client\");\n    var kRemoveClient = Symbol(\"remove client\");\n    var kStats = Symbol(\"stats\");\n    var _PoolBase = class _PoolBase extends DispatcherBase {\n      constructor() {\n        super();\n        this[kQueue] = new FixedQueue();\n        this[kClients] = [];\n        this[kQueued] = 0;\n        const pool = this;\n        this[kOnDrain] = /* @__PURE__ */ __name(function onDrain(origin, targets) {\n          const queue = pool[kQueue];\n          let needDrain = false;\n          while (!needDrain) {\n            const item = queue.shift();\n            if (!item) {\n              break;\n            }\n            pool[kQueued]--;\n            needDrain = !this.dispatch(item.opts, item.handler);\n          }\n          this[kNeedDrain] = needDrain;\n          if (!this[kNeedDrain] && pool[kNeedDrain]) {\n            pool[kNeedDrain] = false;\n            pool.emit(\"drain\", origin, [pool, ...targets]);\n          }\n          if (pool[kClosedResolve] && queue.isEmpty()) {\n            Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);\n          }\n        }, \"onDrain\");\n        this[kOnConnect] = (origin, targets) => {\n          pool.emit(\"connect\", origin, [pool, ...targets]);\n        };\n        this[kOnDisconnect] = (origin, targets, err) => {\n          pool.emit(\"disconnect\", origin, [pool, ...targets], err);\n        };\n        this[kOnConnectionError] = (origin, targets, err) => {\n          pool.emit(\"connectionError\", origin, [pool, ...targets], err);\n        };\n        this[kStats] = new PoolStats(this);\n      }\n      get [kBusy]() {\n        return this[kNeedDrain];\n      }\n      get [kConnected]() {\n        return this[kClients].filter((client) => client[kConnected]).length;\n      }\n      get [kFree]() {\n        return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;\n      }\n      get [kPending]() {\n        let ret = this[kQueued];\n        for (const { [kPending]: pending } of this[kClients]) {\n          ret += pending;\n        }\n        return ret;\n      }\n      get [kRunning]() {\n        let ret = 0;\n        for (const { [kRunning]: running } of this[kClients]) {\n          ret += running;\n        }\n        return ret;\n      }\n      get [kSize]() {\n        let ret = this[kQueued];\n        for (const { [kSize]: size } of this[kClients]) {\n          ret += size;\n        }\n        return ret;\n      }\n      get stats() {\n        return this[kStats];\n      }\n      async [kClose]() {\n        if (this[kQueue].isEmpty()) {\n          await Promise.all(this[kClients].map((c) => c.close()));\n        } else {\n          await new Promise((resolve) => {\n            this[kClosedResolve] = resolve;\n          });\n        }\n      }\n      async [kDestroy](err) {\n        while (true) {\n          const item = this[kQueue].shift();\n          if (!item) {\n            break;\n          }\n          item.handler.onError(err);\n        }\n        await Promise.all(this[kClients].map((c) => c.destroy(err)));\n      }\n      [kDispatch](opts, handler) {\n        const dispatcher = this[kGetDispatcher]();\n        if (!dispatcher) {\n          this[kNeedDrain] = true;\n          this[kQueue].push({ opts, handler });\n          this[kQueued]++;\n        } else if (!dispatcher.dispatch(opts, handler)) {\n          dispatcher[kNeedDrain] = true;\n          this[kNeedDrain] = !this[kGetDispatcher]();\n        }\n        return !this[kNeedDrain];\n      }\n      [kAddClient](client) {\n        client.on(\"drain\", this[kOnDrain]).on(\"connect\", this[kOnConnect]).on(\"disconnect\", this[kOnDisconnect]).on(\"connectionError\", this[kOnConnectionError]);\n        this[kClients].push(client);\n        if (this[kNeedDrain]) {\n          queueMicrotask(() => {\n            if (this[kNeedDrain]) {\n              this[kOnDrain](client[kUrl], [this, client]);\n            }\n          });\n        }\n        return this;\n      }\n      [kRemoveClient](client) {\n        client.close(() => {\n          const idx = this[kClients].indexOf(client);\n          if (idx !== -1) {\n            this[kClients].splice(idx, 1);\n          }\n        });\n        this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);\n      }\n    };\n    __name(_PoolBase, \"PoolBase\");\n    var PoolBase = _PoolBase;\n    module2.exports = {\n      PoolBase,\n      kClients,\n      kNeedDrain,\n      kAddClient,\n      kRemoveClient,\n      kGetDispatcher\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/pool.js\nvar require_pool = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/pool.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      PoolBase,\n      kClients,\n      kNeedDrain,\n      kAddClient,\n      kGetDispatcher\n    } = require_pool_base();\n    var Client = require_client();\n    var {\n      InvalidArgumentError\n    } = require_errors();\n    var util = require_util();\n    var { kUrl, kInterceptors } = require_symbols();\n    var buildConnector = require_connect();\n    var kOptions = Symbol(\"options\");\n    var kConnections = Symbol(\"connections\");\n    var kFactory = Symbol(\"factory\");\n    function defaultFactory(origin, opts) {\n      return new Client(origin, opts);\n    }\n    __name(defaultFactory, \"defaultFactory\");\n    var _Pool = class _Pool extends PoolBase {\n      constructor(origin, {\n        connections,\n        factory = defaultFactory,\n        connect,\n        connectTimeout,\n        tls,\n        maxCachedSessions,\n        socketPath,\n        autoSelectFamily,\n        autoSelectFamilyAttemptTimeout,\n        allowH2,\n        ...options\n      } = {}) {\n        super();\n        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n          throw new InvalidArgumentError(\"invalid connections\");\n        }\n        if (typeof factory !== \"function\") {\n          throw new InvalidArgumentError(\"factory must be a function.\");\n        }\n        if (connect != null && typeof connect !== \"function\" && typeof connect !== \"object\") {\n          throw new InvalidArgumentError(\"connect must be a function or an object\");\n        }\n        if (typeof connect !== \"function\") {\n          connect = buildConnector({\n            ...tls,\n            maxCachedSessions,\n            allowH2,\n            socketPath,\n            timeout: connectTimeout,\n            ...autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,\n            ...connect\n          });\n        }\n        this[kInterceptors] = options.interceptors?.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];\n        this[kConnections] = connections || null;\n        this[kUrl] = util.parseOrigin(origin);\n        this[kOptions] = { ...util.deepClone(options), connect, allowH2 };\n        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;\n        this[kFactory] = factory;\n      }\n      [kGetDispatcher]() {\n        for (const client of this[kClients]) {\n          if (!client[kNeedDrain]) {\n            return client;\n          }\n        }\n        if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n          const dispatcher = this[kFactory](this[kUrl], this[kOptions]);\n          this[kAddClient](dispatcher);\n          return dispatcher;\n        }\n      }\n    };\n    __name(_Pool, \"Pool\");\n    var Pool = _Pool;\n    module2.exports = Pool;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/balanced-pool.js\nvar require_balanced_pool = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/balanced-pool.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      BalancedPoolMissingUpstreamError,\n      InvalidArgumentError\n    } = require_errors();\n    var {\n      PoolBase,\n      kClients,\n      kNeedDrain,\n      kAddClient,\n      kRemoveClient,\n      kGetDispatcher\n    } = require_pool_base();\n    var Pool = require_pool();\n    var { kUrl, kInterceptors } = require_symbols();\n    var { parseOrigin } = require_util();\n    var kFactory = Symbol(\"factory\");\n    var kOptions = Symbol(\"options\");\n    var kGreatestCommonDivisor = Symbol(\"kGreatestCommonDivisor\");\n    var kCurrentWeight = Symbol(\"kCurrentWeight\");\n    var kIndex = Symbol(\"kIndex\");\n    var kWeight = Symbol(\"kWeight\");\n    var kMaxWeightPerServer = Symbol(\"kMaxWeightPerServer\");\n    var kErrorPenalty = Symbol(\"kErrorPenalty\");\n    function getGreatestCommonDivisor(a, b) {\n      if (a === 0)\n        return b;\n      while (b !== 0) {\n        const t = b;\n        b = a % b;\n        a = t;\n      }\n      return a;\n    }\n    __name(getGreatestCommonDivisor, \"getGreatestCommonDivisor\");\n    function defaultFactory(origin, opts) {\n      return new Pool(origin, opts);\n    }\n    __name(defaultFactory, \"defaultFactory\");\n    var _BalancedPool = class _BalancedPool extends PoolBase {\n      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {\n        super();\n        this[kOptions] = opts;\n        this[kIndex] = -1;\n        this[kCurrentWeight] = 0;\n        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;\n        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;\n        if (!Array.isArray(upstreams)) {\n          upstreams = [upstreams];\n        }\n        if (typeof factory !== \"function\") {\n          throw new InvalidArgumentError(\"factory must be a function.\");\n        }\n        this[kInterceptors] = opts.interceptors?.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];\n        this[kFactory] = factory;\n        for (const upstream of upstreams) {\n          this.addUpstream(upstream);\n        }\n        this._updateBalancedPoolStats();\n      }\n      addUpstream(upstream) {\n        const upstreamOrigin = parseOrigin(upstream).origin;\n        if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {\n          return this;\n        }\n        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));\n        this[kAddClient](pool);\n        pool.on(\"connect\", () => {\n          pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);\n        });\n        pool.on(\"connectionError\", () => {\n          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n          this._updateBalancedPoolStats();\n        });\n        pool.on(\"disconnect\", (...args) => {\n          const err = args[2];\n          if (err && err.code === \"UND_ERR_SOCKET\") {\n            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);\n            this._updateBalancedPoolStats();\n          }\n        });\n        for (const client of this[kClients]) {\n          client[kWeight] = this[kMaxWeightPerServer];\n        }\n        this._updateBalancedPoolStats();\n        return this;\n      }\n      _updateBalancedPoolStats() {\n        let result = 0;\n        for (let i = 0; i < this[kClients].length; i++) {\n          result = getGreatestCommonDivisor(this[kClients][i][kWeight], result);\n        }\n        this[kGreatestCommonDivisor] = result;\n      }\n      removeUpstream(upstream) {\n        const upstreamOrigin = parseOrigin(upstream).origin;\n        const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);\n        if (pool) {\n          this[kRemoveClient](pool);\n        }\n        return this;\n      }\n      get upstreams() {\n        return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);\n      }\n      [kGetDispatcher]() {\n        if (this[kClients].length === 0) {\n          throw new BalancedPoolMissingUpstreamError();\n        }\n        const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);\n        if (!dispatcher) {\n          return;\n        }\n        const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);\n        if (allClientsBusy) {\n          return;\n        }\n        let counter = 0;\n        let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);\n        while (counter++ < this[kClients].length) {\n          this[kIndex] = (this[kIndex] + 1) % this[kClients].length;\n          const pool = this[kClients][this[kIndex]];\n          if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n            maxWeightIndex = this[kIndex];\n          }\n          if (this[kIndex] === 0) {\n            this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];\n            if (this[kCurrentWeight] <= 0) {\n              this[kCurrentWeight] = this[kMaxWeightPerServer];\n            }\n          }\n          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {\n            return pool;\n          }\n        }\n        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];\n        this[kIndex] = maxWeightIndex;\n        return this[kClients][maxWeightIndex];\n      }\n    };\n    __name(_BalancedPool, \"BalancedPool\");\n    var BalancedPool = _BalancedPool;\n    module2.exports = BalancedPool;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/agent.js\nvar require_agent = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/agent.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { InvalidArgumentError } = require_errors();\n    var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();\n    var DispatcherBase = require_dispatcher_base();\n    var Pool = require_pool();\n    var Client = require_client();\n    var util = require_util();\n    var createRedirectInterceptor = require_redirect_interceptor();\n    var kOnConnect = Symbol(\"onConnect\");\n    var kOnDisconnect = Symbol(\"onDisconnect\");\n    var kOnConnectionError = Symbol(\"onConnectionError\");\n    var kMaxRedirections = Symbol(\"maxRedirections\");\n    var kOnDrain = Symbol(\"onDrain\");\n    var kFactory = Symbol(\"factory\");\n    var kOptions = Symbol(\"options\");\n    function defaultFactory(origin, opts) {\n      return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);\n    }\n    __name(defaultFactory, \"defaultFactory\");\n    var _Agent = class _Agent extends DispatcherBase {\n      constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {\n        super();\n        if (typeof factory !== \"function\") {\n          throw new InvalidArgumentError(\"factory must be a function.\");\n        }\n        if (connect != null && typeof connect !== \"function\" && typeof connect !== \"object\") {\n          throw new InvalidArgumentError(\"connect must be a function or an object\");\n        }\n        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n          throw new InvalidArgumentError(\"maxRedirections must be a positive number\");\n        }\n        if (connect && typeof connect !== \"function\") {\n          connect = { ...connect };\n        }\n        this[kInterceptors] = options.interceptors?.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];\n        this[kOptions] = { ...util.deepClone(options), connect };\n        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;\n        this[kMaxRedirections] = maxRedirections;\n        this[kFactory] = factory;\n        this[kClients] = /* @__PURE__ */ new Map();\n        this[kOnDrain] = (origin, targets) => {\n          this.emit(\"drain\", origin, [this, ...targets]);\n        };\n        this[kOnConnect] = (origin, targets) => {\n          this.emit(\"connect\", origin, [this, ...targets]);\n        };\n        this[kOnDisconnect] = (origin, targets, err) => {\n          this.emit(\"disconnect\", origin, [this, ...targets], err);\n        };\n        this[kOnConnectionError] = (origin, targets, err) => {\n          this.emit(\"connectionError\", origin, [this, ...targets], err);\n        };\n      }\n      get [kRunning]() {\n        let ret = 0;\n        for (const client of this[kClients].values()) {\n          ret += client[kRunning];\n        }\n        return ret;\n      }\n      [kDispatch](opts, handler) {\n        let key;\n        if (opts.origin && (typeof opts.origin === \"string\" || opts.origin instanceof URL)) {\n          key = String(opts.origin);\n        } else {\n          throw new InvalidArgumentError(\"opts.origin must be a non-empty string or URL.\");\n        }\n        let dispatcher = this[kClients].get(key);\n        if (!dispatcher) {\n          dispatcher = this[kFactory](opts.origin, this[kOptions]).on(\"drain\", this[kOnDrain]).on(\"connect\", this[kOnConnect]).on(\"disconnect\", this[kOnDisconnect]).on(\"connectionError\", this[kOnConnectionError]);\n          this[kClients].set(key, dispatcher);\n        }\n        return dispatcher.dispatch(opts, handler);\n      }\n      async [kClose]() {\n        const closePromises = [];\n        for (const client of this[kClients].values()) {\n          closePromises.push(client.close());\n        }\n        this[kClients].clear();\n        await Promise.all(closePromises);\n      }\n      async [kDestroy](err) {\n        const destroyPromises = [];\n        for (const client of this[kClients].values()) {\n          destroyPromises.push(client.destroy(err));\n        }\n        this[kClients].clear();\n        await Promise.all(destroyPromises);\n      }\n    };\n    __name(_Agent, \"Agent\");\n    var Agent = _Agent;\n    module2.exports = Agent;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/proxy-agent.js\nvar require_proxy_agent = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/proxy-agent.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();\n    var { URL: URL2 } = require(\"url\");\n    var Agent = require_agent();\n    var Pool = require_pool();\n    var DispatcherBase = require_dispatcher_base();\n    var { InvalidArgumentError, RequestAbortedError, SecureProxyConnectionError } = require_errors();\n    var buildConnector = require_connect();\n    var kAgent = Symbol(\"proxy agent\");\n    var kClient = Symbol(\"proxy client\");\n    var kProxyHeaders = Symbol(\"proxy headers\");\n    var kRequestTls = Symbol(\"request tls settings\");\n    var kProxyTls = Symbol(\"proxy tls settings\");\n    var kConnectEndpoint = Symbol(\"connect endpoint function\");\n    function defaultProtocolPort(protocol) {\n      return protocol === \"https:\" ? 443 : 80;\n    }\n    __name(defaultProtocolPort, \"defaultProtocolPort\");\n    function defaultFactory(origin, opts) {\n      return new Pool(origin, opts);\n    }\n    __name(defaultFactory, \"defaultFactory\");\n    var noop = /* @__PURE__ */ __name(() => {\n    }, \"noop\");\n    var _getUrl, getUrl_fn;\n    var _ProxyAgent = class _ProxyAgent extends DispatcherBase {\n      constructor(opts) {\n        super();\n        /**\n         * @param {import('../types/proxy-agent').ProxyAgent.Options | string | URL} opts\n         * @returns {URL}\n         */\n        __privateAdd(this, _getUrl);\n        if (!opts || typeof opts === \"object\" && !(opts instanceof URL2) && !opts.uri) {\n          throw new InvalidArgumentError(\"Proxy uri is mandatory\");\n        }\n        const { clientFactory = defaultFactory } = opts;\n        if (typeof clientFactory !== \"function\") {\n          throw new InvalidArgumentError(\"Proxy opts.clientFactory must be a function.\");\n        }\n        const url = __privateMethod(this, _getUrl, getUrl_fn).call(this, opts);\n        const { href, origin, port, protocol, username, password, hostname: proxyHostname } = url;\n        this[kProxy] = { uri: href, protocol };\n        this[kInterceptors] = opts.interceptors?.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];\n        this[kRequestTls] = opts.requestTls;\n        this[kProxyTls] = opts.proxyTls;\n        this[kProxyHeaders] = opts.headers || {};\n        if (opts.auth && opts.token) {\n          throw new InvalidArgumentError(\"opts.auth cannot be used in combination with opts.token\");\n        } else if (opts.auth) {\n          this[kProxyHeaders][\"proxy-authorization\"] = `Basic ${opts.auth}`;\n        } else if (opts.token) {\n          this[kProxyHeaders][\"proxy-authorization\"] = opts.token;\n        } else if (username && password) {\n          this[kProxyHeaders][\"proxy-authorization\"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString(\"base64\")}`;\n        }\n        const connect = buildConnector({ ...opts.proxyTls });\n        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });\n        this[kClient] = clientFactory(url, { connect });\n        this[kAgent] = new Agent({\n          ...opts,\n          connect: async (opts2, callback) => {\n            let requestedPath = opts2.host;\n            if (!opts2.port) {\n              requestedPath += `:${defaultProtocolPort(opts2.protocol)}`;\n            }\n            try {\n              const { socket, statusCode } = await this[kClient].connect({\n                origin,\n                port,\n                path: requestedPath,\n                signal: opts2.signal,\n                headers: {\n                  ...this[kProxyHeaders],\n                  host: opts2.host\n                },\n                servername: this[kProxyTls]?.servername || proxyHostname\n              });\n              if (statusCode !== 200) {\n                socket.on(\"error\", noop).destroy();\n                callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));\n              }\n              if (opts2.protocol !== \"https:\") {\n                callback(null, socket);\n                return;\n              }\n              let servername;\n              if (this[kRequestTls]) {\n                servername = this[kRequestTls].servername;\n              } else {\n                servername = opts2.servername;\n              }\n              this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);\n            } catch (err) {\n              if (err.code === \"ERR_TLS_CERT_ALTNAME_INVALID\") {\n                callback(new SecureProxyConnectionError(err));\n              } else {\n                callback(err);\n              }\n            }\n          }\n        });\n      }\n      dispatch(opts, handler) {\n        const headers = buildHeaders(opts.headers);\n        throwIfProxyAuthIsSent(headers);\n        if (headers && !(\"host\" in headers) && !(\"Host\" in headers)) {\n          const { host } = new URL2(opts.origin);\n          headers.host = host;\n        }\n        return this[kAgent].dispatch(\n          {\n            ...opts,\n            headers\n          },\n          handler\n        );\n      }\n      async [kClose]() {\n        await this[kAgent].close();\n        await this[kClient].close();\n      }\n      async [kDestroy]() {\n        await this[kAgent].destroy();\n        await this[kClient].destroy();\n      }\n    };\n    _getUrl = new WeakSet();\n    getUrl_fn = /* @__PURE__ */ __name(function(opts) {\n      if (typeof opts === \"string\") {\n        return new URL2(opts);\n      } else if (opts instanceof URL2) {\n        return opts;\n      } else {\n        return new URL2(opts.uri);\n      }\n    }, \"#getUrl\");\n    __name(_ProxyAgent, \"ProxyAgent\");\n    var ProxyAgent = _ProxyAgent;\n    function buildHeaders(headers) {\n      if (Array.isArray(headers)) {\n        const headersPair = {};\n        for (let i = 0; i < headers.length; i += 2) {\n          headersPair[headers[i]] = headers[i + 1];\n        }\n        return headersPair;\n      }\n      return headers;\n    }\n    __name(buildHeaders, \"buildHeaders\");\n    function throwIfProxyAuthIsSent(headers) {\n      const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === \"proxy-authorization\");\n      if (existProxyAuth) {\n        throw new InvalidArgumentError(\"Proxy-Authorization should be sent in ProxyAgent constructor\");\n      }\n    }\n    __name(throwIfProxyAuthIsSent, \"throwIfProxyAuthIsSent\");\n    module2.exports = ProxyAgent;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/env-http-proxy-agent.js\nvar require_env_http_proxy_agent = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/env-http-proxy-agent.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var DispatcherBase = require_dispatcher_base();\n    var { kClose, kDestroy, kClosed, kDestroyed, kDispatch, kNoProxyAgent, kHttpProxyAgent, kHttpsProxyAgent } = require_symbols();\n    var ProxyAgent = require_proxy_agent();\n    var Agent = require_agent();\n    var DEFAULT_PORTS = {\n      \"http:\": 80,\n      \"https:\": 443\n    };\n    var experimentalWarned = false;\n    var _noProxyValue, _noProxyEntries, _opts, _getProxyAgentForUrl, getProxyAgentForUrl_fn, _shouldProxy, shouldProxy_fn, _parseNoProxy, parseNoProxy_fn, _noProxyChanged, noProxyChanged_get, _noProxyEnv, noProxyEnv_get;\n    var _EnvHttpProxyAgent = class _EnvHttpProxyAgent extends DispatcherBase {\n      constructor(opts = {}) {\n        super();\n        __privateAdd(this, _getProxyAgentForUrl);\n        __privateAdd(this, _shouldProxy);\n        __privateAdd(this, _parseNoProxy);\n        __privateAdd(this, _noProxyChanged);\n        __privateAdd(this, _noProxyEnv);\n        __privateAdd(this, _noProxyValue, null);\n        __privateAdd(this, _noProxyEntries, null);\n        __privateAdd(this, _opts, null);\n        __privateSet(this, _opts, opts);\n        if (!experimentalWarned) {\n          experimentalWarned = true;\n          define_process_default.emitWarning(\"EnvHttpProxyAgent is experimental, expect them to change at any time.\", {\n            code: \"UNDICI-EHPA\"\n          });\n        }\n        const { httpProxy, httpsProxy, noProxy, ...agentOpts } = opts;\n        this[kNoProxyAgent] = new Agent(agentOpts);\n        const HTTP_PROXY = httpProxy ?? define_process_default.env.http_proxy ?? define_process_default.env.HTTP_PROXY;\n        if (HTTP_PROXY) {\n          this[kHttpProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTP_PROXY });\n        } else {\n          this[kHttpProxyAgent] = this[kNoProxyAgent];\n        }\n        const HTTPS_PROXY = httpsProxy ?? define_process_default.env.https_proxy ?? define_process_default.env.HTTPS_PROXY;\n        if (HTTPS_PROXY) {\n          this[kHttpsProxyAgent] = new ProxyAgent({ ...agentOpts, uri: HTTPS_PROXY });\n        } else {\n          this[kHttpsProxyAgent] = this[kHttpProxyAgent];\n        }\n        __privateMethod(this, _parseNoProxy, parseNoProxy_fn).call(this);\n      }\n      [kDispatch](opts, handler) {\n        const url = new URL(opts.origin);\n        const agent = __privateMethod(this, _getProxyAgentForUrl, getProxyAgentForUrl_fn).call(this, url);\n        return agent.dispatch(opts, handler);\n      }\n      async [kClose]() {\n        await this[kNoProxyAgent].close();\n        if (!this[kHttpProxyAgent][kClosed]) {\n          await this[kHttpProxyAgent].close();\n        }\n        if (!this[kHttpsProxyAgent][kClosed]) {\n          await this[kHttpsProxyAgent].close();\n        }\n      }\n      async [kDestroy](err) {\n        await this[kNoProxyAgent].destroy(err);\n        if (!this[kHttpProxyAgent][kDestroyed]) {\n          await this[kHttpProxyAgent].destroy(err);\n        }\n        if (!this[kHttpsProxyAgent][kDestroyed]) {\n          await this[kHttpsProxyAgent].destroy(err);\n        }\n      }\n    };\n    _noProxyValue = new WeakMap();\n    _noProxyEntries = new WeakMap();\n    _opts = new WeakMap();\n    _getProxyAgentForUrl = new WeakSet();\n    getProxyAgentForUrl_fn = /* @__PURE__ */ __name(function(url) {\n      let { protocol, host: hostname, port } = url;\n      hostname = hostname.replace(/:\\d*$/, \"\").toLowerCase();\n      port = Number.parseInt(port, 10) || DEFAULT_PORTS[protocol] || 0;\n      if (!__privateMethod(this, _shouldProxy, shouldProxy_fn).call(this, hostname, port)) {\n        return this[kNoProxyAgent];\n      }\n      if (protocol === \"https:\") {\n        return this[kHttpsProxyAgent];\n      }\n      return this[kHttpProxyAgent];\n    }, \"#getProxyAgentForUrl\");\n    _shouldProxy = new WeakSet();\n    shouldProxy_fn = /* @__PURE__ */ __name(function(hostname, port) {\n      if (__privateGet(this, _noProxyChanged, noProxyChanged_get)) {\n        __privateMethod(this, _parseNoProxy, parseNoProxy_fn).call(this);\n      }\n      if (__privateGet(this, _noProxyEntries).length === 0) {\n        return true;\n      }\n      if (__privateGet(this, _noProxyValue) === \"*\") {\n        return false;\n      }\n      for (let i = 0; i < __privateGet(this, _noProxyEntries).length; i++) {\n        const entry = __privateGet(this, _noProxyEntries)[i];\n        if (entry.port && entry.port !== port) {\n          continue;\n        }\n        if (!/^[.*]/.test(entry.hostname)) {\n          if (hostname === entry.hostname) {\n            return false;\n          }\n        } else {\n          if (hostname.endsWith(entry.hostname.replace(/^\\*/, \"\"))) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }, \"#shouldProxy\");\n    _parseNoProxy = new WeakSet();\n    parseNoProxy_fn = /* @__PURE__ */ __name(function() {\n      const noProxyValue = __privateGet(this, _opts).noProxy ?? __privateGet(this, _noProxyEnv, noProxyEnv_get);\n      const noProxySplit = noProxyValue.split(/[,\\s]/);\n      const noProxyEntries = [];\n      for (let i = 0; i < noProxySplit.length; i++) {\n        const entry = noProxySplit[i];\n        if (!entry) {\n          continue;\n        }\n        const parsed = entry.match(/^(.+):(\\d+)$/);\n        noProxyEntries.push({\n          hostname: (parsed ? parsed[1] : entry).toLowerCase(),\n          port: parsed ? Number.parseInt(parsed[2], 10) : 0\n        });\n      }\n      __privateSet(this, _noProxyValue, noProxyValue);\n      __privateSet(this, _noProxyEntries, noProxyEntries);\n    }, \"#parseNoProxy\");\n    _noProxyChanged = new WeakSet();\n    noProxyChanged_get = /* @__PURE__ */ __name(function() {\n      if (__privateGet(this, _opts).noProxy !== void 0) {\n        return false;\n      }\n      return __privateGet(this, _noProxyValue) !== __privateGet(this, _noProxyEnv, noProxyEnv_get);\n    }, \"#noProxyChanged\");\n    _noProxyEnv = new WeakSet();\n    noProxyEnv_get = /* @__PURE__ */ __name(function() {\n      return define_process_default.env.no_proxy ?? define_process_default.env.NO_PROXY ?? \"\";\n    }, \"#noProxyEnv\");\n    __name(_EnvHttpProxyAgent, \"EnvHttpProxyAgent\");\n    var EnvHttpProxyAgent = _EnvHttpProxyAgent;\n    module2.exports = EnvHttpProxyAgent;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/handler/retry-handler.js\nvar require_retry_handler = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/handler/retry-handler.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { kRetryHandlerDefaultRetry } = require_symbols();\n    var { RequestRetryError } = require_errors();\n    var {\n      isDisturbed,\n      parseHeaders,\n      parseRangeHeader,\n      wrapRequestBody\n    } = require_util();\n    function calculateRetryAfterHeader(retryAfter) {\n      const current = Date.now();\n      return new Date(retryAfter).getTime() - current;\n    }\n    __name(calculateRetryAfterHeader, \"calculateRetryAfterHeader\");\n    var _RetryHandler = class _RetryHandler {\n      constructor(opts, handlers) {\n        const { retryOptions, ...dispatchOpts } = opts;\n        const {\n          // Retry scoped\n          retry: retryFn,\n          maxRetries,\n          maxTimeout,\n          minTimeout,\n          timeoutFactor,\n          // Response scoped\n          methods,\n          errorCodes,\n          retryAfter,\n          statusCodes\n        } = retryOptions ?? {};\n        this.dispatch = handlers.dispatch;\n        this.handler = handlers.handler;\n        this.opts = { ...dispatchOpts, body: wrapRequestBody(opts.body) };\n        this.abort = null;\n        this.aborted = false;\n        this.retryOpts = {\n          retry: retryFn ?? _RetryHandler[kRetryHandlerDefaultRetry],\n          retryAfter: retryAfter ?? true,\n          maxTimeout: maxTimeout ?? 30 * 1e3,\n          // 30s,\n          minTimeout: minTimeout ?? 500,\n          // .5s\n          timeoutFactor: timeoutFactor ?? 2,\n          maxRetries: maxRetries ?? 5,\n          // What errors we should retry\n          methods: methods ?? [\"GET\", \"HEAD\", \"OPTIONS\", \"PUT\", \"DELETE\", \"TRACE\"],\n          // Indicates which errors to retry\n          statusCodes: statusCodes ?? [500, 502, 503, 504, 429],\n          // List of errors to retry\n          errorCodes: errorCodes ?? [\n            \"ECONNRESET\",\n            \"ECONNREFUSED\",\n            \"ENOTFOUND\",\n            \"ENETDOWN\",\n            \"ENETUNREACH\",\n            \"EHOSTDOWN\",\n            \"EHOSTUNREACH\",\n            \"EPIPE\",\n            \"UND_ERR_SOCKET\"\n          ]\n        };\n        this.retryCount = 0;\n        this.retryCountCheckpoint = 0;\n        this.start = 0;\n        this.end = null;\n        this.etag = null;\n        this.resume = null;\n        this.handler.onConnect((reason) => {\n          this.aborted = true;\n          if (this.abort) {\n            this.abort(reason);\n          } else {\n            this.reason = reason;\n          }\n        });\n      }\n      onRequestSent() {\n        if (this.handler.onRequestSent) {\n          this.handler.onRequestSent();\n        }\n      }\n      onUpgrade(statusCode, headers, socket) {\n        if (this.handler.onUpgrade) {\n          this.handler.onUpgrade(statusCode, headers, socket);\n        }\n      }\n      onConnect(abort) {\n        if (this.aborted) {\n          abort(this.reason);\n        } else {\n          this.abort = abort;\n        }\n      }\n      onBodySent(chunk) {\n        if (this.handler.onBodySent)\n          return this.handler.onBodySent(chunk);\n      }\n      static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {\n        const { statusCode, code, headers } = err;\n        const { method, retryOptions } = opts;\n        const {\n          maxRetries,\n          minTimeout,\n          maxTimeout,\n          timeoutFactor,\n          statusCodes,\n          errorCodes,\n          methods\n        } = retryOptions;\n        const { counter } = state;\n        if (code && code !== \"UND_ERR_REQ_RETRY\" && !errorCodes.includes(code)) {\n          cb(err);\n          return;\n        }\n        if (Array.isArray(methods) && !methods.includes(method)) {\n          cb(err);\n          return;\n        }\n        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {\n          cb(err);\n          return;\n        }\n        if (counter > maxRetries) {\n          cb(err);\n          return;\n        }\n        let retryAfterHeader = headers?.[\"retry-after\"];\n        if (retryAfterHeader) {\n          retryAfterHeader = Number(retryAfterHeader);\n          retryAfterHeader = Number.isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;\n        }\n        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(minTimeout * timeoutFactor ** (counter - 1), maxTimeout);\n        setTimeout(() => cb(null), retryTimeout);\n      }\n      onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const headers = parseHeaders(rawHeaders);\n        this.retryCount += 1;\n        if (statusCode >= 300) {\n          if (this.retryOpts.statusCodes.includes(statusCode) === false) {\n            return this.handler.onHeaders(\n              statusCode,\n              rawHeaders,\n              resume,\n              statusMessage\n            );\n          } else {\n            this.abort(\n              new RequestRetryError(\"Request failed\", statusCode, {\n                headers,\n                data: {\n                  count: this.retryCount\n                }\n              })\n            );\n            return false;\n          }\n        }\n        if (this.resume != null) {\n          this.resume = null;\n          if (statusCode !== 206 && (this.start > 0 || statusCode !== 200)) {\n            this.abort(\n              new RequestRetryError(\"server does not support the range header and the payload was partially consumed\", statusCode, {\n                headers,\n                data: { count: this.retryCount }\n              })\n            );\n            return false;\n          }\n          const contentRange = parseRangeHeader(headers[\"content-range\"]);\n          if (!contentRange) {\n            this.abort(\n              new RequestRetryError(\"Content-Range mismatch\", statusCode, {\n                headers,\n                data: { count: this.retryCount }\n              })\n            );\n            return false;\n          }\n          if (this.etag != null && this.etag !== headers.etag) {\n            this.abort(\n              new RequestRetryError(\"ETag mismatch\", statusCode, {\n                headers,\n                data: { count: this.retryCount }\n              })\n            );\n            return false;\n          }\n          const { start, size, end = size - 1 } = contentRange;\n          assert(this.start === start, \"content-range mismatch\");\n          assert(this.end == null || this.end === end, \"content-range mismatch\");\n          this.resume = resume;\n          return true;\n        }\n        if (this.end == null) {\n          if (statusCode === 206) {\n            const range = parseRangeHeader(headers[\"content-range\"]);\n            if (range == null) {\n              return this.handler.onHeaders(\n                statusCode,\n                rawHeaders,\n                resume,\n                statusMessage\n              );\n            }\n            const { start, size, end = size - 1 } = range;\n            assert(\n              start != null && Number.isFinite(start),\n              \"content-range mismatch\"\n            );\n            assert(end != null && Number.isFinite(end), \"invalid content-length\");\n            this.start = start;\n            this.end = end;\n          }\n          if (this.end == null) {\n            const contentLength = headers[\"content-length\"];\n            this.end = contentLength != null ? Number(contentLength) - 1 : null;\n          }\n          assert(Number.isFinite(this.start));\n          assert(\n            this.end == null || Number.isFinite(this.end),\n            \"invalid content-length\"\n          );\n          this.resume = resume;\n          this.etag = headers.etag != null ? headers.etag : null;\n          if (this.etag != null && this.etag.startsWith(\"W/\")) {\n            this.etag = null;\n          }\n          return this.handler.onHeaders(\n            statusCode,\n            rawHeaders,\n            resume,\n            statusMessage\n          );\n        }\n        const err = new RequestRetryError(\"Request failed\", statusCode, {\n          headers,\n          data: { count: this.retryCount }\n        });\n        this.abort(err);\n        return false;\n      }\n      onData(chunk) {\n        this.start += chunk.length;\n        return this.handler.onData(chunk);\n      }\n      onComplete(rawTrailers) {\n        this.retryCount = 0;\n        return this.handler.onComplete(rawTrailers);\n      }\n      onError(err) {\n        if (this.aborted || isDisturbed(this.opts.body)) {\n          return this.handler.onError(err);\n        }\n        if (this.retryCount - this.retryCountCheckpoint > 0) {\n          this.retryCount = this.retryCountCheckpoint + (this.retryCount - this.retryCountCheckpoint);\n        } else {\n          this.retryCount += 1;\n        }\n        this.retryOpts.retry(\n          err,\n          {\n            state: { counter: this.retryCount },\n            opts: { retryOptions: this.retryOpts, ...this.opts }\n          },\n          onRetry.bind(this)\n        );\n        function onRetry(err2) {\n          if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {\n            return this.handler.onError(err2);\n          }\n          if (this.start !== 0) {\n            const headers = { range: `bytes=${this.start}-${this.end ?? \"\"}` };\n            if (this.etag != null) {\n              headers[\"if-match\"] = this.etag;\n            }\n            this.opts = {\n              ...this.opts,\n              headers: {\n                ...this.opts.headers,\n                ...headers\n              }\n            };\n          }\n          try {\n            this.retryCountCheckpoint = this.retryCount;\n            this.dispatch(this.opts, this);\n          } catch (err3) {\n            this.handler.onError(err3);\n          }\n        }\n        __name(onRetry, \"onRetry\");\n      }\n    };\n    __name(_RetryHandler, \"RetryHandler\");\n    var RetryHandler = _RetryHandler;\n    module2.exports = RetryHandler;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/retry-agent.js\nvar require_retry_agent = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/dispatcher/retry-agent.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var Dispatcher = require_dispatcher();\n    var RetryHandler = require_retry_handler();\n    var _agent, _options;\n    var _RetryAgent = class _RetryAgent extends Dispatcher {\n      constructor(agent, options = {}) {\n        super(options);\n        __privateAdd(this, _agent, null);\n        __privateAdd(this, _options, null);\n        __privateSet(this, _agent, agent);\n        __privateSet(this, _options, options);\n      }\n      dispatch(opts, handler) {\n        const retry = new RetryHandler({\n          ...opts,\n          retryOptions: __privateGet(this, _options)\n        }, {\n          dispatch: __privateGet(this, _agent).dispatch.bind(__privateGet(this, _agent)),\n          handler\n        });\n        return __privateGet(this, _agent).dispatch(opts, retry);\n      }\n      close() {\n        return __privateGet(this, _agent).close();\n      }\n      destroy() {\n        return __privateGet(this, _agent).destroy();\n      }\n    };\n    _agent = new WeakMap();\n    _options = new WeakMap();\n    __name(_RetryAgent, \"RetryAgent\");\n    var RetryAgent = _RetryAgent;\n    module2.exports = RetryAgent;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/readable.js\nvar require_readable = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/readable.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { Readable } = require(\"stream\");\n    var { RequestAbortedError, NotSupportedError, InvalidArgumentError, AbortError } = require_errors();\n    var util = require_util();\n    var { ReadableStreamFrom } = require_util();\n    var kConsume = Symbol(\"kConsume\");\n    var kReading = Symbol(\"kReading\");\n    var kBody = Symbol(\"kBody\");\n    var kAbort = Symbol(\"kAbort\");\n    var kContentType = Symbol(\"kContentType\");\n    var kContentLength = Symbol(\"kContentLength\");\n    var noop = /* @__PURE__ */ __name(() => {\n    }, \"noop\");\n    var _BodyReadable = class _BodyReadable extends Readable {\n      constructor({\n        resume,\n        abort,\n        contentType = \"\",\n        contentLength,\n        highWaterMark = 64 * 1024\n        // Same as nodejs fs streams.\n      }) {\n        super({\n          autoDestroy: true,\n          read: resume,\n          highWaterMark\n        });\n        this._readableState.dataEmitted = false;\n        this[kAbort] = abort;\n        this[kConsume] = null;\n        this[kBody] = null;\n        this[kContentType] = contentType;\n        this[kContentLength] = contentLength;\n        this[kReading] = false;\n      }\n      destroy(err) {\n        if (!err && !this._readableState.endEmitted) {\n          err = new RequestAbortedError();\n        }\n        if (err) {\n          this[kAbort]();\n        }\n        return super.destroy(err);\n      }\n      _destroy(err, callback) {\n        if (!this[kReading]) {\n          setImmediate(() => {\n            callback(err);\n          });\n        } else {\n          callback(err);\n        }\n      }\n      on(ev, ...args) {\n        if (ev === \"data\" || ev === \"readable\") {\n          this[kReading] = true;\n        }\n        return super.on(ev, ...args);\n      }\n      addListener(ev, ...args) {\n        return this.on(ev, ...args);\n      }\n      off(ev, ...args) {\n        const ret = super.off(ev, ...args);\n        if (ev === \"data\" || ev === \"readable\") {\n          this[kReading] = this.listenerCount(\"data\") > 0 || this.listenerCount(\"readable\") > 0;\n        }\n        return ret;\n      }\n      removeListener(ev, ...args) {\n        return this.off(ev, ...args);\n      }\n      push(chunk) {\n        if (this[kConsume] && chunk !== null) {\n          consumePush(this[kConsume], chunk);\n          return this[kReading] ? super.push(chunk) : true;\n        }\n        return super.push(chunk);\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-text\n      async text() {\n        return consume(this, \"text\");\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-json\n      async json() {\n        return consume(this, \"json\");\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-blob\n      async blob() {\n        return consume(this, \"blob\");\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-bytes\n      async bytes() {\n        return consume(this, \"bytes\");\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n      async arrayBuffer() {\n        return consume(this, \"arrayBuffer\");\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-formdata\n      async formData() {\n        throw new NotSupportedError();\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-bodyused\n      get bodyUsed() {\n        return util.isDisturbed(this);\n      }\n      // https://fetch.spec.whatwg.org/#dom-body-body\n      get body() {\n        if (!this[kBody]) {\n          this[kBody] = ReadableStreamFrom(this);\n          if (this[kConsume]) {\n            this[kBody].getReader();\n            assert(this[kBody].locked);\n          }\n        }\n        return this[kBody];\n      }\n      async dump(opts) {\n        let limit = Number.isFinite(opts?.limit) ? opts.limit : 128 * 1024;\n        const signal = opts?.signal;\n        if (signal != null && (typeof signal !== \"object\" || !(\"aborted\" in signal))) {\n          throw new InvalidArgumentError(\"signal must be an AbortSignal\");\n        }\n        signal?.throwIfAborted();\n        if (this._readableState.closeEmitted) {\n          return null;\n        }\n        return await new Promise((resolve, reject) => {\n          if (this[kContentLength] > limit) {\n            this.destroy(new AbortError());\n          }\n          const onAbort = /* @__PURE__ */ __name(() => {\n            this.destroy(signal.reason ?? new AbortError());\n          }, \"onAbort\");\n          signal?.addEventListener(\"abort\", onAbort);\n          this.on(\"close\", function() {\n            signal?.removeEventListener(\"abort\", onAbort);\n            if (signal?.aborted) {\n              reject(signal.reason ?? new AbortError());\n            } else {\n              resolve(null);\n            }\n          }).on(\"error\", noop).on(\"data\", function(chunk) {\n            limit -= chunk.length;\n            if (limit <= 0) {\n              this.destroy();\n            }\n          }).resume();\n        });\n      }\n    };\n    __name(_BodyReadable, \"BodyReadable\");\n    var BodyReadable = _BodyReadable;\n    function isLocked(self) {\n      return self[kBody] && self[kBody].locked === true || self[kConsume];\n    }\n    __name(isLocked, \"isLocked\");\n    function isUnusable(self) {\n      return util.isDisturbed(self) || isLocked(self);\n    }\n    __name(isUnusable, \"isUnusable\");\n    async function consume(stream, type) {\n      assert(!stream[kConsume]);\n      return new Promise((resolve, reject) => {\n        if (isUnusable(stream)) {\n          const rState = stream._readableState;\n          if (rState.destroyed && rState.closeEmitted === false) {\n            stream.on(\"error\", (err) => {\n              reject(err);\n            }).on(\"close\", () => {\n              reject(new TypeError(\"unusable\"));\n            });\n          } else {\n            reject(rState.errored ?? new TypeError(\"unusable\"));\n          }\n        } else {\n          queueMicrotask(() => {\n            stream[kConsume] = {\n              type,\n              stream,\n              resolve,\n              reject,\n              length: 0,\n              body: []\n            };\n            stream.on(\"error\", function(err) {\n              consumeFinish(this[kConsume], err);\n            }).on(\"close\", function() {\n              if (this[kConsume].body !== null) {\n                consumeFinish(this[kConsume], new RequestAbortedError());\n              }\n            });\n            consumeStart(stream[kConsume]);\n          });\n        }\n      });\n    }\n    __name(consume, \"consume\");\n    function consumeStart(consume2) {\n      if (consume2.body === null) {\n        return;\n      }\n      const { _readableState: state } = consume2.stream;\n      if (state.bufferIndex) {\n        const start = state.bufferIndex;\n        const end = state.buffer.length;\n        for (let n = start; n < end; n++) {\n          consumePush(consume2, state.buffer[n]);\n        }\n      } else {\n        for (const chunk of state.buffer) {\n          consumePush(consume2, chunk);\n        }\n      }\n      if (state.endEmitted) {\n        consumeEnd(this[kConsume]);\n      } else {\n        consume2.stream.on(\"end\", function() {\n          consumeEnd(this[kConsume]);\n        });\n      }\n      consume2.stream.resume();\n      while (consume2.stream.read() != null) {\n      }\n    }\n    __name(consumeStart, \"consumeStart\");\n    function chunksDecode(chunks, length) {\n      if (chunks.length === 0 || length === 0) {\n        return \"\";\n      }\n      const buffer = chunks.length === 1 ? chunks[0] : Buffer.concat(chunks, length);\n      const bufferLength = buffer.length;\n      const start = bufferLength > 2 && buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191 ? 3 : 0;\n      return buffer.utf8Slice(start, bufferLength);\n    }\n    __name(chunksDecode, \"chunksDecode\");\n    function chunksConcat(chunks, length) {\n      if (chunks.length === 0 || length === 0) {\n        return new Uint8Array(0);\n      }\n      if (chunks.length === 1) {\n        return new Uint8Array(chunks[0]);\n      }\n      const buffer = new Uint8Array(Buffer.allocUnsafeSlow(length).buffer);\n      let offset = 0;\n      for (let i = 0; i < chunks.length; ++i) {\n        const chunk = chunks[i];\n        buffer.set(chunk, offset);\n        offset += chunk.length;\n      }\n      return buffer;\n    }\n    __name(chunksConcat, \"chunksConcat\");\n    function consumeEnd(consume2) {\n      const { type, body, resolve, stream, length } = consume2;\n      try {\n        if (type === \"text\") {\n          resolve(chunksDecode(body, length));\n        } else if (type === \"json\") {\n          resolve(JSON.parse(chunksDecode(body, length)));\n        } else if (type === \"arrayBuffer\") {\n          resolve(chunksConcat(body, length).buffer);\n        } else if (type === \"blob\") {\n          resolve(new Blob(body, { type: stream[kContentType] }));\n        } else if (type === \"bytes\") {\n          resolve(chunksConcat(body, length));\n        }\n        consumeFinish(consume2);\n      } catch (err) {\n        stream.destroy(err);\n      }\n    }\n    __name(consumeEnd, \"consumeEnd\");\n    function consumePush(consume2, chunk) {\n      consume2.length += chunk.length;\n      consume2.body.push(chunk);\n    }\n    __name(consumePush, \"consumePush\");\n    function consumeFinish(consume2, err) {\n      if (consume2.body === null) {\n        return;\n      }\n      if (err) {\n        consume2.reject(err);\n      } else {\n        consume2.resolve();\n      }\n      consume2.type = null;\n      consume2.stream = null;\n      consume2.resolve = null;\n      consume2.reject = null;\n      consume2.length = 0;\n      consume2.body = null;\n    }\n    __name(consumeFinish, \"consumeFinish\");\n    module2.exports = { Readable: BodyReadable, chunksDecode };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/util.js\nvar require_util3 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var {\n      ResponseStatusCodeError\n    } = require_errors();\n    var { chunksDecode } = require_readable();\n    var CHUNK_LIMIT = 128 * 1024;\n    async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {\n      assert(body);\n      let chunks = [];\n      let length = 0;\n      try {\n        for await (const chunk of body) {\n          chunks.push(chunk);\n          length += chunk.length;\n          if (length > CHUNK_LIMIT) {\n            chunks = [];\n            length = 0;\n            break;\n          }\n        }\n      } catch {\n        chunks = [];\n        length = 0;\n      }\n      const message = `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : \"\"}`;\n      if (statusCode === 204 || !contentType || !length) {\n        queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers)));\n        return;\n      }\n      const stackTraceLimit = Error.stackTraceLimit;\n      Error.stackTraceLimit = 0;\n      let payload;\n      try {\n        if (isContentTypeApplicationJson(contentType)) {\n          payload = JSON.parse(chunksDecode(chunks, length));\n        } else if (isContentTypeText(contentType)) {\n          payload = chunksDecode(chunks, length);\n        }\n      } catch {\n      } finally {\n        Error.stackTraceLimit = stackTraceLimit;\n      }\n      queueMicrotask(() => callback(new ResponseStatusCodeError(message, statusCode, headers, payload)));\n    }\n    __name(getResolveErrorBodyCallback, \"getResolveErrorBodyCallback\");\n    var isContentTypeApplicationJson = /* @__PURE__ */ __name((contentType) => {\n      return contentType.length > 15 && contentType[11] === \"/\" && contentType[0] === \"a\" && contentType[1] === \"p\" && contentType[2] === \"p\" && contentType[3] === \"l\" && contentType[4] === \"i\" && contentType[5] === \"c\" && contentType[6] === \"a\" && contentType[7] === \"t\" && contentType[8] === \"i\" && contentType[9] === \"o\" && contentType[10] === \"n\" && contentType[12] === \"j\" && contentType[13] === \"s\" && contentType[14] === \"o\" && contentType[15] === \"n\";\n    }, \"isContentTypeApplicationJson\");\n    var isContentTypeText = /* @__PURE__ */ __name((contentType) => {\n      return contentType.length > 4 && contentType[4] === \"/\" && contentType[0] === \"t\" && contentType[1] === \"e\" && contentType[2] === \"x\" && contentType[3] === \"t\";\n    }, \"isContentTypeText\");\n    module2.exports = {\n      getResolveErrorBodyCallback,\n      isContentTypeApplicationJson,\n      isContentTypeText\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-request.js\nvar require_api_request = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-request.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { Readable } = require_readable();\n    var { InvalidArgumentError, RequestAbortedError } = require_errors();\n    var util = require_util();\n    var { getResolveErrorBodyCallback } = require_util3();\n    var { AsyncResource } = require(\"async_hooks\");\n    var _RequestHandler = class _RequestHandler extends AsyncResource {\n      constructor(opts, callback) {\n        if (!opts || typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"invalid opts\");\n        }\n        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;\n        try {\n          if (typeof callback !== \"function\") {\n            throw new InvalidArgumentError(\"invalid callback\");\n          }\n          if (highWaterMark && (typeof highWaterMark !== \"number\" || highWaterMark < 0)) {\n            throw new InvalidArgumentError(\"invalid highWaterMark\");\n          }\n          if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n            throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n          }\n          if (method === \"CONNECT\") {\n            throw new InvalidArgumentError(\"invalid method\");\n          }\n          if (onInfo && typeof onInfo !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onInfo callback\");\n          }\n          super(\"UNDICI_REQUEST\");\n        } catch (err) {\n          if (util.isStream(body)) {\n            util.destroy(body.on(\"error\", util.nop), err);\n          }\n          throw err;\n        }\n        this.method = method;\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.callback = callback;\n        this.res = null;\n        this.abort = null;\n        this.body = body;\n        this.trailers = {};\n        this.context = null;\n        this.onInfo = onInfo || null;\n        this.throwOnError = throwOnError;\n        this.highWaterMark = highWaterMark;\n        this.signal = signal;\n        this.reason = null;\n        this.removeAbortListener = null;\n        if (util.isStream(body)) {\n          body.on(\"error\", (err) => {\n            this.onError(err);\n          });\n        }\n        if (this.signal) {\n          if (this.signal.aborted) {\n            this.reason = this.signal.reason ?? new RequestAbortedError();\n          } else {\n            this.removeAbortListener = util.addAbortListener(this.signal, () => {\n              this.reason = this.signal.reason ?? new RequestAbortedError();\n              if (this.res) {\n                util.destroy(this.res, this.reason);\n              } else if (this.abort) {\n                this.abort(this.reason);\n              }\n              if (this.removeAbortListener) {\n                this.res?.off(\"close\", this.removeAbortListener);\n                this.removeAbortListener();\n                this.removeAbortListener = null;\n              }\n            });\n          }\n        }\n      }\n      onConnect(abort, context) {\n        if (this.reason) {\n          abort(this.reason);\n          return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = context;\n      }\n      onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;\n        const headers = responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        if (statusCode < 200) {\n          if (this.onInfo) {\n            this.onInfo({ statusCode, headers });\n          }\n          return;\n        }\n        const parsedHeaders = responseHeaders === \"raw\" ? util.parseHeaders(rawHeaders) : headers;\n        const contentType = parsedHeaders[\"content-type\"];\n        const contentLength = parsedHeaders[\"content-length\"];\n        const res = new Readable({\n          resume,\n          abort,\n          contentType,\n          contentLength: this.method !== \"HEAD\" && contentLength ? Number(contentLength) : null,\n          highWaterMark\n        });\n        if (this.removeAbortListener) {\n          res.on(\"close\", this.removeAbortListener);\n        }\n        this.callback = null;\n        this.res = res;\n        if (callback !== null) {\n          if (this.throwOnError && statusCode >= 400) {\n            this.runInAsyncScope(\n              getResolveErrorBodyCallback,\n              null,\n              { callback, body: res, contentType, statusCode, statusMessage, headers }\n            );\n          } else {\n            this.runInAsyncScope(callback, null, null, {\n              statusCode,\n              headers,\n              trailers: this.trailers,\n              opaque,\n              body: res,\n              context\n            });\n          }\n        }\n      }\n      onData(chunk) {\n        return this.res.push(chunk);\n      }\n      onComplete(trailers) {\n        util.parseHeaders(trailers, this.trailers);\n        this.res.push(null);\n      }\n      onError(err) {\n        const { res, callback, body, opaque } = this;\n        if (callback) {\n          this.callback = null;\n          queueMicrotask(() => {\n            this.runInAsyncScope(callback, null, err, { opaque });\n          });\n        }\n        if (res) {\n          this.res = null;\n          queueMicrotask(() => {\n            util.destroy(res, err);\n          });\n        }\n        if (body) {\n          this.body = null;\n          util.destroy(body, err);\n        }\n        if (this.removeAbortListener) {\n          res?.off(\"close\", this.removeAbortListener);\n          this.removeAbortListener();\n          this.removeAbortListener = null;\n        }\n      }\n    };\n    __name(_RequestHandler, \"RequestHandler\");\n    var RequestHandler = _RequestHandler;\n    function request(opts, callback) {\n      if (callback === void 0) {\n        return new Promise((resolve, reject) => {\n          request.call(this, opts, (err, data) => {\n            return err ? reject(err) : resolve(data);\n          });\n        });\n      }\n      try {\n        this.dispatch(opts, new RequestHandler(opts, callback));\n      } catch (err) {\n        if (typeof callback !== \"function\") {\n          throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(() => callback(err, { opaque }));\n      }\n    }\n    __name(request, \"request\");\n    module2.exports = request;\n    module2.exports.RequestHandler = RequestHandler;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/abort-signal.js\nvar require_abort_signal = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/abort-signal.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { addAbortListener } = require_util();\n    var { RequestAbortedError } = require_errors();\n    var kListener = Symbol(\"kListener\");\n    var kSignal = Symbol(\"kSignal\");\n    function abort(self) {\n      if (self.abort) {\n        self.abort(self[kSignal]?.reason);\n      } else {\n        self.reason = self[kSignal]?.reason ?? new RequestAbortedError();\n      }\n      removeSignal(self);\n    }\n    __name(abort, \"abort\");\n    function addSignal(self, signal) {\n      self.reason = null;\n      self[kSignal] = null;\n      self[kListener] = null;\n      if (!signal) {\n        return;\n      }\n      if (signal.aborted) {\n        abort(self);\n        return;\n      }\n      self[kSignal] = signal;\n      self[kListener] = () => {\n        abort(self);\n      };\n      addAbortListener(self[kSignal], self[kListener]);\n    }\n    __name(addSignal, \"addSignal\");\n    function removeSignal(self) {\n      if (!self[kSignal]) {\n        return;\n      }\n      if (\"removeEventListener\" in self[kSignal]) {\n        self[kSignal].removeEventListener(\"abort\", self[kListener]);\n      } else {\n        self[kSignal].removeListener(\"abort\", self[kListener]);\n      }\n      self[kSignal] = null;\n      self[kListener] = null;\n    }\n    __name(removeSignal, \"removeSignal\");\n    module2.exports = {\n      addSignal,\n      removeSignal\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-stream.js\nvar require_api_stream = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-stream.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { finished, PassThrough } = require(\"stream\");\n    var { InvalidArgumentError, InvalidReturnValueError } = require_errors();\n    var util = require_util();\n    var { getResolveErrorBodyCallback } = require_util3();\n    var { AsyncResource } = require(\"async_hooks\");\n    var { addSignal, removeSignal } = require_abort_signal();\n    var _StreamHandler = class _StreamHandler extends AsyncResource {\n      constructor(opts, factory, callback) {\n        if (!opts || typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"invalid opts\");\n        }\n        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;\n        try {\n          if (typeof callback !== \"function\") {\n            throw new InvalidArgumentError(\"invalid callback\");\n          }\n          if (typeof factory !== \"function\") {\n            throw new InvalidArgumentError(\"invalid factory\");\n          }\n          if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n            throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n          }\n          if (method === \"CONNECT\") {\n            throw new InvalidArgumentError(\"invalid method\");\n          }\n          if (onInfo && typeof onInfo !== \"function\") {\n            throw new InvalidArgumentError(\"invalid onInfo callback\");\n          }\n          super(\"UNDICI_STREAM\");\n        } catch (err) {\n          if (util.isStream(body)) {\n            util.destroy(body.on(\"error\", util.nop), err);\n          }\n          throw err;\n        }\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.factory = factory;\n        this.callback = callback;\n        this.res = null;\n        this.abort = null;\n        this.context = null;\n        this.trailers = null;\n        this.body = body;\n        this.onInfo = onInfo || null;\n        this.throwOnError = throwOnError || false;\n        if (util.isStream(body)) {\n          body.on(\"error\", (err) => {\n            this.onError(err);\n          });\n        }\n        addSignal(this, signal);\n      }\n      onConnect(abort, context) {\n        if (this.reason) {\n          abort(this.reason);\n          return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = context;\n      }\n      onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const { factory, opaque, context, callback, responseHeaders } = this;\n        const headers = responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        if (statusCode < 200) {\n          if (this.onInfo) {\n            this.onInfo({ statusCode, headers });\n          }\n          return;\n        }\n        this.factory = null;\n        let res;\n        if (this.throwOnError && statusCode >= 400) {\n          const parsedHeaders = responseHeaders === \"raw\" ? util.parseHeaders(rawHeaders) : headers;\n          const contentType = parsedHeaders[\"content-type\"];\n          res = new PassThrough();\n          this.callback = null;\n          this.runInAsyncScope(\n            getResolveErrorBodyCallback,\n            null,\n            { callback, body: res, contentType, statusCode, statusMessage, headers }\n          );\n        } else {\n          if (factory === null) {\n            return;\n          }\n          res = this.runInAsyncScope(factory, null, {\n            statusCode,\n            headers,\n            opaque,\n            context\n          });\n          if (!res || typeof res.write !== \"function\" || typeof res.end !== \"function\" || typeof res.on !== \"function\") {\n            throw new InvalidReturnValueError(\"expected Writable\");\n          }\n          finished(res, { readable: false }, (err) => {\n            const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;\n            this.res = null;\n            if (err || !res2.readable) {\n              util.destroy(res2, err);\n            }\n            this.callback = null;\n            this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });\n            if (err) {\n              abort();\n            }\n          });\n        }\n        res.on(\"drain\", resume);\n        this.res = res;\n        const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState?.needDrain;\n        return needDrain !== true;\n      }\n      onData(chunk) {\n        const { res } = this;\n        return res ? res.write(chunk) : true;\n      }\n      onComplete(trailers) {\n        const { res } = this;\n        removeSignal(this);\n        if (!res) {\n          return;\n        }\n        this.trailers = util.parseHeaders(trailers);\n        res.end();\n      }\n      onError(err) {\n        const { res, callback, opaque, body } = this;\n        removeSignal(this);\n        this.factory = null;\n        if (res) {\n          this.res = null;\n          util.destroy(res, err);\n        } else if (callback) {\n          this.callback = null;\n          queueMicrotask(() => {\n            this.runInAsyncScope(callback, null, err, { opaque });\n          });\n        }\n        if (body) {\n          this.body = null;\n          util.destroy(body, err);\n        }\n      }\n    };\n    __name(_StreamHandler, \"StreamHandler\");\n    var StreamHandler = _StreamHandler;\n    function stream(opts, factory, callback) {\n      if (callback === void 0) {\n        return new Promise((resolve, reject) => {\n          stream.call(this, opts, factory, (err, data) => {\n            return err ? reject(err) : resolve(data);\n          });\n        });\n      }\n      try {\n        this.dispatch(opts, new StreamHandler(opts, factory, callback));\n      } catch (err) {\n        if (typeof callback !== \"function\") {\n          throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(() => callback(err, { opaque }));\n      }\n    }\n    __name(stream, \"stream\");\n    module2.exports = stream;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-pipeline.js\nvar require_api_pipeline = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-pipeline.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      Readable,\n      Duplex,\n      PassThrough\n    } = require(\"stream\");\n    var {\n      InvalidArgumentError,\n      InvalidReturnValueError,\n      RequestAbortedError\n    } = require_errors();\n    var util = require_util();\n    var { AsyncResource } = require(\"async_hooks\");\n    var { addSignal, removeSignal } = require_abort_signal();\n    var assert = require(\"assert\");\n    var kResume = Symbol(\"resume\");\n    var _PipelineRequest = class _PipelineRequest extends Readable {\n      constructor() {\n        super({ autoDestroy: true });\n        this[kResume] = null;\n      }\n      _read() {\n        const { [kResume]: resume } = this;\n        if (resume) {\n          this[kResume] = null;\n          resume();\n        }\n      }\n      _destroy(err, callback) {\n        this._read();\n        callback(err);\n      }\n    };\n    __name(_PipelineRequest, \"PipelineRequest\");\n    var PipelineRequest = _PipelineRequest;\n    var _PipelineResponse = class _PipelineResponse extends Readable {\n      constructor(resume) {\n        super({ autoDestroy: true });\n        this[kResume] = resume;\n      }\n      _read() {\n        this[kResume]();\n      }\n      _destroy(err, callback) {\n        if (!err && !this._readableState.endEmitted) {\n          err = new RequestAbortedError();\n        }\n        callback(err);\n      }\n    };\n    __name(_PipelineResponse, \"PipelineResponse\");\n    var PipelineResponse = _PipelineResponse;\n    var _PipelineHandler = class _PipelineHandler extends AsyncResource {\n      constructor(opts, handler) {\n        if (!opts || typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (typeof handler !== \"function\") {\n          throw new InvalidArgumentError(\"invalid handler\");\n        }\n        const { signal, method, opaque, onInfo, responseHeaders } = opts;\n        if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n          throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n        }\n        if (method === \"CONNECT\") {\n          throw new InvalidArgumentError(\"invalid method\");\n        }\n        if (onInfo && typeof onInfo !== \"function\") {\n          throw new InvalidArgumentError(\"invalid onInfo callback\");\n        }\n        super(\"UNDICI_PIPELINE\");\n        this.opaque = opaque || null;\n        this.responseHeaders = responseHeaders || null;\n        this.handler = handler;\n        this.abort = null;\n        this.context = null;\n        this.onInfo = onInfo || null;\n        this.req = new PipelineRequest().on(\"error\", util.nop);\n        this.ret = new Duplex({\n          readableObjectMode: opts.objectMode,\n          autoDestroy: true,\n          read: () => {\n            const { body } = this;\n            if (body?.resume) {\n              body.resume();\n            }\n          },\n          write: (chunk, encoding, callback) => {\n            const { req } = this;\n            if (req.push(chunk, encoding) || req._readableState.destroyed) {\n              callback();\n            } else {\n              req[kResume] = callback;\n            }\n          },\n          destroy: (err, callback) => {\n            const { body, req, res, ret, abort } = this;\n            if (!err && !ret._readableState.endEmitted) {\n              err = new RequestAbortedError();\n            }\n            if (abort && err) {\n              abort();\n            }\n            util.destroy(body, err);\n            util.destroy(req, err);\n            util.destroy(res, err);\n            removeSignal(this);\n            callback(err);\n          }\n        }).on(\"prefinish\", () => {\n          const { req } = this;\n          req.push(null);\n        });\n        this.res = null;\n        addSignal(this, signal);\n      }\n      onConnect(abort, context) {\n        const { ret, res } = this;\n        if (this.reason) {\n          abort(this.reason);\n          return;\n        }\n        assert(!res, \"pipeline cannot be retried\");\n        assert(!ret.destroyed);\n        this.abort = abort;\n        this.context = context;\n      }\n      onHeaders(statusCode, rawHeaders, resume) {\n        const { opaque, handler, context } = this;\n        if (statusCode < 200) {\n          if (this.onInfo) {\n            const headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n            this.onInfo({ statusCode, headers });\n          }\n          return;\n        }\n        this.res = new PipelineResponse(resume);\n        let body;\n        try {\n          this.handler = null;\n          const headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n          body = this.runInAsyncScope(handler, null, {\n            statusCode,\n            headers,\n            opaque,\n            body: this.res,\n            context\n          });\n        } catch (err) {\n          this.res.on(\"error\", util.nop);\n          throw err;\n        }\n        if (!body || typeof body.on !== \"function\") {\n          throw new InvalidReturnValueError(\"expected Readable\");\n        }\n        body.on(\"data\", (chunk) => {\n          const { ret, body: body2 } = this;\n          if (!ret.push(chunk) && body2.pause) {\n            body2.pause();\n          }\n        }).on(\"error\", (err) => {\n          const { ret } = this;\n          util.destroy(ret, err);\n        }).on(\"end\", () => {\n          const { ret } = this;\n          ret.push(null);\n        }).on(\"close\", () => {\n          const { ret } = this;\n          if (!ret._readableState.ended) {\n            util.destroy(ret, new RequestAbortedError());\n          }\n        });\n        this.body = body;\n      }\n      onData(chunk) {\n        const { res } = this;\n        return res.push(chunk);\n      }\n      onComplete(trailers) {\n        const { res } = this;\n        res.push(null);\n      }\n      onError(err) {\n        const { ret } = this;\n        this.handler = null;\n        util.destroy(ret, err);\n      }\n    };\n    __name(_PipelineHandler, \"PipelineHandler\");\n    var PipelineHandler = _PipelineHandler;\n    function pipeline(opts, handler) {\n      try {\n        const pipelineHandler = new PipelineHandler(opts, handler);\n        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);\n        return pipelineHandler.ret;\n      } catch (err) {\n        return new PassThrough().destroy(err);\n      }\n    }\n    __name(pipeline, \"pipeline\");\n    module2.exports = pipeline;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-upgrade.js\nvar require_api_upgrade = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-upgrade.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { InvalidArgumentError, SocketError } = require_errors();\n    var { AsyncResource } = require(\"async_hooks\");\n    var util = require_util();\n    var { addSignal, removeSignal } = require_abort_signal();\n    var assert = require(\"assert\");\n    var _UpgradeHandler = class _UpgradeHandler extends AsyncResource {\n      constructor(opts, callback) {\n        if (!opts || typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (typeof callback !== \"function\") {\n          throw new InvalidArgumentError(\"invalid callback\");\n        }\n        const { signal, opaque, responseHeaders } = opts;\n        if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n          throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n        }\n        super(\"UNDICI_UPGRADE\");\n        this.responseHeaders = responseHeaders || null;\n        this.opaque = opaque || null;\n        this.callback = callback;\n        this.abort = null;\n        this.context = null;\n        addSignal(this, signal);\n      }\n      onConnect(abort, context) {\n        if (this.reason) {\n          abort(this.reason);\n          return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = null;\n      }\n      onHeaders() {\n        throw new SocketError(\"bad upgrade\", null);\n      }\n      onUpgrade(statusCode, rawHeaders, socket) {\n        assert(statusCode === 101);\n        const { callback, opaque, context } = this;\n        removeSignal(this);\n        this.callback = null;\n        const headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        this.runInAsyncScope(callback, null, null, {\n          headers,\n          socket,\n          opaque,\n          context\n        });\n      }\n      onError(err) {\n        const { callback, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n          this.callback = null;\n          queueMicrotask(() => {\n            this.runInAsyncScope(callback, null, err, { opaque });\n          });\n        }\n      }\n    };\n    __name(_UpgradeHandler, \"UpgradeHandler\");\n    var UpgradeHandler = _UpgradeHandler;\n    function upgrade(opts, callback) {\n      if (callback === void 0) {\n        return new Promise((resolve, reject) => {\n          upgrade.call(this, opts, (err, data) => {\n            return err ? reject(err) : resolve(data);\n          });\n        });\n      }\n      try {\n        const upgradeHandler = new UpgradeHandler(opts, callback);\n        this.dispatch({\n          ...opts,\n          method: opts.method || \"GET\",\n          upgrade: opts.protocol || \"Websocket\"\n        }, upgradeHandler);\n      } catch (err) {\n        if (typeof callback !== \"function\") {\n          throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(() => callback(err, { opaque }));\n      }\n    }\n    __name(upgrade, \"upgrade\");\n    module2.exports = upgrade;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-connect.js\nvar require_api_connect = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/api-connect.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { AsyncResource } = require(\"async_hooks\");\n    var { InvalidArgumentError, SocketError } = require_errors();\n    var util = require_util();\n    var { addSignal, removeSignal } = require_abort_signal();\n    var _ConnectHandler = class _ConnectHandler extends AsyncResource {\n      constructor(opts, callback) {\n        if (!opts || typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (typeof callback !== \"function\") {\n          throw new InvalidArgumentError(\"invalid callback\");\n        }\n        const { signal, opaque, responseHeaders } = opts;\n        if (signal && typeof signal.on !== \"function\" && typeof signal.addEventListener !== \"function\") {\n          throw new InvalidArgumentError(\"signal must be an EventEmitter or EventTarget\");\n        }\n        super(\"UNDICI_CONNECT\");\n        this.opaque = opaque || null;\n        this.responseHeaders = responseHeaders || null;\n        this.callback = callback;\n        this.abort = null;\n        addSignal(this, signal);\n      }\n      onConnect(abort, context) {\n        if (this.reason) {\n          abort(this.reason);\n          return;\n        }\n        assert(this.callback);\n        this.abort = abort;\n        this.context = context;\n      }\n      onHeaders() {\n        throw new SocketError(\"bad connect\", null);\n      }\n      onUpgrade(statusCode, rawHeaders, socket) {\n        const { callback, opaque, context } = this;\n        removeSignal(this);\n        this.callback = null;\n        let headers = rawHeaders;\n        if (headers != null) {\n          headers = this.responseHeaders === \"raw\" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);\n        }\n        this.runInAsyncScope(callback, null, null, {\n          statusCode,\n          headers,\n          socket,\n          opaque,\n          context\n        });\n      }\n      onError(err) {\n        const { callback, opaque } = this;\n        removeSignal(this);\n        if (callback) {\n          this.callback = null;\n          queueMicrotask(() => {\n            this.runInAsyncScope(callback, null, err, { opaque });\n          });\n        }\n      }\n    };\n    __name(_ConnectHandler, \"ConnectHandler\");\n    var ConnectHandler = _ConnectHandler;\n    function connect(opts, callback) {\n      if (callback === void 0) {\n        return new Promise((resolve, reject) => {\n          connect.call(this, opts, (err, data) => {\n            return err ? reject(err) : resolve(data);\n          });\n        });\n      }\n      try {\n        const connectHandler = new ConnectHandler(opts, callback);\n        this.dispatch({ ...opts, method: \"CONNECT\" }, connectHandler);\n      } catch (err) {\n        if (typeof callback !== \"function\") {\n          throw err;\n        }\n        const opaque = opts?.opaque;\n        queueMicrotask(() => callback(err, { opaque }));\n      }\n    }\n    __name(connect, \"connect\");\n    module2.exports = connect;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/index.js\nvar require_api = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/api/index.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports.request = require_api_request();\n    module2.exports.stream = require_api_stream();\n    module2.exports.pipeline = require_api_pipeline();\n    module2.exports.upgrade = require_api_upgrade();\n    module2.exports.connect = require_api_connect();\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-errors.js\nvar require_mock_errors = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-errors.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { UndiciError } = require_errors();\n    var _MockNotMatchedError = class _MockNotMatchedError extends UndiciError {\n      constructor(message) {\n        super(message);\n        Error.captureStackTrace(this, _MockNotMatchedError);\n        this.name = \"MockNotMatchedError\";\n        this.message = message || \"The request does not match any registered mock dispatches\";\n        this.code = \"UND_MOCK_ERR_MOCK_NOT_MATCHED\";\n      }\n    };\n    __name(_MockNotMatchedError, \"MockNotMatchedError\");\n    var MockNotMatchedError = _MockNotMatchedError;\n    module2.exports = {\n      MockNotMatchedError\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-symbols.js\nvar require_mock_symbols = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-symbols.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports = {\n      kAgent: Symbol(\"agent\"),\n      kOptions: Symbol(\"options\"),\n      kFactory: Symbol(\"factory\"),\n      kDispatches: Symbol(\"dispatches\"),\n      kDispatchKey: Symbol(\"dispatch key\"),\n      kDefaultHeaders: Symbol(\"default headers\"),\n      kDefaultTrailers: Symbol(\"default trailers\"),\n      kContentLength: Symbol(\"content length\"),\n      kMockAgent: Symbol(\"mock agent\"),\n      kMockAgentSet: Symbol(\"mock agent set\"),\n      kMockAgentGet: Symbol(\"mock agent get\"),\n      kMockDispatch: Symbol(\"mock dispatch\"),\n      kClose: Symbol(\"close\"),\n      kOriginalClose: Symbol(\"original agent close\"),\n      kOrigin: Symbol(\"origin\"),\n      kIsMockActive: Symbol(\"is mock active\"),\n      kNetConnect: Symbol(\"net connect\"),\n      kGetNetConnect: Symbol(\"get net connect\"),\n      kConnected: Symbol(\"connected\")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-utils.js\nvar require_mock_utils = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-utils.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { MockNotMatchedError } = require_mock_errors();\n    var {\n      kDispatches,\n      kMockAgent,\n      kOriginalDispatch,\n      kOrigin,\n      kGetNetConnect\n    } = require_mock_symbols();\n    var { buildURL } = require_util();\n    var { STATUS_CODES } = require(\"http\");\n    var {\n      types: {\n        isPromise\n      }\n    } = require(\"util\");\n    function matchValue(match, value) {\n      if (typeof match === \"string\") {\n        return match === value;\n      }\n      if (match instanceof RegExp) {\n        return match.test(value);\n      }\n      if (typeof match === \"function\") {\n        return match(value) === true;\n      }\n      return false;\n    }\n    __name(matchValue, \"matchValue\");\n    function lowerCaseEntries(headers) {\n      return Object.fromEntries(\n        Object.entries(headers).map(([headerName, headerValue]) => {\n          return [headerName.toLocaleLowerCase(), headerValue];\n        })\n      );\n    }\n    __name(lowerCaseEntries, \"lowerCaseEntries\");\n    function getHeaderByName(headers, key) {\n      if (Array.isArray(headers)) {\n        for (let i = 0; i < headers.length; i += 2) {\n          if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n            return headers[i + 1];\n          }\n        }\n        return void 0;\n      } else if (typeof headers.get === \"function\") {\n        return headers.get(key);\n      } else {\n        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];\n      }\n    }\n    __name(getHeaderByName, \"getHeaderByName\");\n    function buildHeadersFromArray(headers) {\n      const clone = headers.slice();\n      const entries = [];\n      for (let index = 0; index < clone.length; index += 2) {\n        entries.push([clone[index], clone[index + 1]]);\n      }\n      return Object.fromEntries(entries);\n    }\n    __name(buildHeadersFromArray, \"buildHeadersFromArray\");\n    function matchHeaders(mockDispatch2, headers) {\n      if (typeof mockDispatch2.headers === \"function\") {\n        if (Array.isArray(headers)) {\n          headers = buildHeadersFromArray(headers);\n        }\n        return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});\n      }\n      if (typeof mockDispatch2.headers === \"undefined\") {\n        return true;\n      }\n      if (typeof headers !== \"object\" || typeof mockDispatch2.headers !== \"object\") {\n        return false;\n      }\n      for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {\n        const headerValue = getHeaderByName(headers, matchHeaderName);\n        if (!matchValue(matchHeaderValue, headerValue)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(matchHeaders, \"matchHeaders\");\n    function safeUrl(path) {\n      if (typeof path !== \"string\") {\n        return path;\n      }\n      const pathSegments = path.split(\"?\");\n      if (pathSegments.length !== 2) {\n        return path;\n      }\n      const qp = new URLSearchParams(pathSegments.pop());\n      qp.sort();\n      return [...pathSegments, qp.toString()].join(\"?\");\n    }\n    __name(safeUrl, \"safeUrl\");\n    function matchKey(mockDispatch2, { path, method, body, headers }) {\n      const pathMatch = matchValue(mockDispatch2.path, path);\n      const methodMatch = matchValue(mockDispatch2.method, method);\n      const bodyMatch = typeof mockDispatch2.body !== \"undefined\" ? matchValue(mockDispatch2.body, body) : true;\n      const headersMatch = matchHeaders(mockDispatch2, headers);\n      return pathMatch && methodMatch && bodyMatch && headersMatch;\n    }\n    __name(matchKey, \"matchKey\");\n    function getResponseData(data) {\n      if (Buffer.isBuffer(data)) {\n        return data;\n      } else if (data instanceof Uint8Array) {\n        return data;\n      } else if (data instanceof ArrayBuffer) {\n        return data;\n      } else if (typeof data === \"object\") {\n        return JSON.stringify(data);\n      } else {\n        return data.toString();\n      }\n    }\n    __name(getResponseData, \"getResponseData\");\n    function getMockDispatch(mockDispatches, key) {\n      const basePath = key.query ? buildURL(key.path, key.query) : key.path;\n      const resolvedPath = typeof basePath === \"string\" ? safeUrl(basePath) : basePath;\n      let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath));\n      if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);\n      }\n      matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));\n      if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}' on path '${resolvedPath}'`);\n      }\n      matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== \"undefined\" ? matchValue(body, key.body) : true);\n      if (matchedMockDispatches.length === 0) {\n        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}' on path '${resolvedPath}'`);\n      }\n      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));\n      if (matchedMockDispatches.length === 0) {\n        const headers = typeof key.headers === \"object\" ? JSON.stringify(key.headers) : key.headers;\n        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${headers}' on path '${resolvedPath}'`);\n      }\n      return matchedMockDispatches[0];\n    }\n    __name(getMockDispatch, \"getMockDispatch\");\n    function addMockDispatch(mockDispatches, key, data) {\n      const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };\n      const replyData = typeof data === \"function\" ? { callback: data } : { ...data };\n      const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };\n      mockDispatches.push(newMockDispatch);\n      return newMockDispatch;\n    }\n    __name(addMockDispatch, \"addMockDispatch\");\n    function deleteMockDispatch(mockDispatches, key) {\n      const index = mockDispatches.findIndex((dispatch) => {\n        if (!dispatch.consumed) {\n          return false;\n        }\n        return matchKey(dispatch, key);\n      });\n      if (index !== -1) {\n        mockDispatches.splice(index, 1);\n      }\n    }\n    __name(deleteMockDispatch, \"deleteMockDispatch\");\n    function buildKey(opts) {\n      const { path, method, body, headers, query } = opts;\n      return {\n        path,\n        method,\n        body,\n        headers,\n        query\n      };\n    }\n    __name(buildKey, \"buildKey\");\n    function generateKeyValues(data) {\n      const keys = Object.keys(data);\n      const result = [];\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        const value = data[key];\n        const name = Buffer.from(`${key}`);\n        if (Array.isArray(value)) {\n          for (let j = 0; j < value.length; ++j) {\n            result.push(name, Buffer.from(`${value[j]}`));\n          }\n        } else {\n          result.push(name, Buffer.from(`${value}`));\n        }\n      }\n      return result;\n    }\n    __name(generateKeyValues, \"generateKeyValues\");\n    function getStatusText(statusCode) {\n      return STATUS_CODES[statusCode] || \"unknown\";\n    }\n    __name(getStatusText, \"getStatusText\");\n    async function getResponse(body) {\n      const buffers = [];\n      for await (const data of body) {\n        buffers.push(data);\n      }\n      return Buffer.concat(buffers).toString(\"utf8\");\n    }\n    __name(getResponse, \"getResponse\");\n    function mockDispatch(opts, handler) {\n      const key = buildKey(opts);\n      const mockDispatch2 = getMockDispatch(this[kDispatches], key);\n      mockDispatch2.timesInvoked++;\n      if (mockDispatch2.data.callback) {\n        mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };\n      }\n      const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch2;\n      const { timesInvoked, times } = mockDispatch2;\n      mockDispatch2.consumed = !persist && timesInvoked >= times;\n      mockDispatch2.pending = timesInvoked < times;\n      if (error !== null) {\n        deleteMockDispatch(this[kDispatches], key);\n        handler.onError(error);\n        return true;\n      }\n      if (typeof delay === \"number\" && delay > 0) {\n        setTimeout(() => {\n          handleReply(this[kDispatches]);\n        }, delay);\n      } else {\n        handleReply(this[kDispatches]);\n      }\n      function handleReply(mockDispatches, _data = data) {\n        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;\n        const body = typeof _data === \"function\" ? _data({ ...opts, headers: optsHeaders }) : _data;\n        if (isPromise(body)) {\n          body.then((newData) => handleReply(mockDispatches, newData));\n          return;\n        }\n        const responseData = getResponseData(body);\n        const responseHeaders = generateKeyValues(headers);\n        const responseTrailers = generateKeyValues(trailers);\n        handler.onConnect?.((err) => handler.onError(err), null);\n        handler.onHeaders?.(statusCode, responseHeaders, resume, getStatusText(statusCode));\n        handler.onData?.(Buffer.from(responseData));\n        handler.onComplete?.(responseTrailers);\n        deleteMockDispatch(mockDispatches, key);\n      }\n      __name(handleReply, \"handleReply\");\n      function resume() {\n      }\n      __name(resume, \"resume\");\n      return true;\n    }\n    __name(mockDispatch, \"mockDispatch\");\n    function buildMockDispatch() {\n      const agent = this[kMockAgent];\n      const origin = this[kOrigin];\n      const originalDispatch = this[kOriginalDispatch];\n      return /* @__PURE__ */ __name(function dispatch(opts, handler) {\n        if (agent.isMockActive) {\n          try {\n            mockDispatch.call(this, opts, handler);\n          } catch (error) {\n            if (error instanceof MockNotMatchedError) {\n              const netConnect = agent[kGetNetConnect]();\n              if (netConnect === false) {\n                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);\n              }\n              if (checkNetConnect(netConnect, origin)) {\n                originalDispatch.call(this, opts, handler);\n              } else {\n                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);\n              }\n            } else {\n              throw error;\n            }\n          }\n        } else {\n          originalDispatch.call(this, opts, handler);\n        }\n      }, \"dispatch\");\n    }\n    __name(buildMockDispatch, \"buildMockDispatch\");\n    function checkNetConnect(netConnect, origin) {\n      const url = new URL(origin);\n      if (netConnect === true) {\n        return true;\n      } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {\n        return true;\n      }\n      return false;\n    }\n    __name(checkNetConnect, \"checkNetConnect\");\n    function buildMockOptions(opts) {\n      if (opts) {\n        const { agent, ...mockOptions } = opts;\n        return mockOptions;\n      }\n    }\n    __name(buildMockOptions, \"buildMockOptions\");\n    module2.exports = {\n      getResponseData,\n      getMockDispatch,\n      addMockDispatch,\n      deleteMockDispatch,\n      buildKey,\n      generateKeyValues,\n      matchValue,\n      getResponse,\n      getStatusText,\n      mockDispatch,\n      buildMockDispatch,\n      checkNetConnect,\n      buildMockOptions,\n      getHeaderByName,\n      buildHeadersFromArray\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-interceptor.js\nvar require_mock_interceptor = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-interceptor.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();\n    var {\n      kDispatches,\n      kDispatchKey,\n      kDefaultHeaders,\n      kDefaultTrailers,\n      kContentLength,\n      kMockDispatch\n    } = require_mock_symbols();\n    var { InvalidArgumentError } = require_errors();\n    var { buildURL } = require_util();\n    var _MockScope = class _MockScope {\n      constructor(mockDispatch) {\n        this[kMockDispatch] = mockDispatch;\n      }\n      /**\n       * Delay a reply by a set amount in ms.\n       */\n      delay(waitInMs) {\n        if (typeof waitInMs !== \"number\" || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n          throw new InvalidArgumentError(\"waitInMs must be a valid integer > 0\");\n        }\n        this[kMockDispatch].delay = waitInMs;\n        return this;\n      }\n      /**\n       * For a defined reply, never mark as consumed.\n       */\n      persist() {\n        this[kMockDispatch].persist = true;\n        return this;\n      }\n      /**\n       * Allow one to define a reply for a set amount of matching requests.\n       */\n      times(repeatTimes) {\n        if (typeof repeatTimes !== \"number\" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n          throw new InvalidArgumentError(\"repeatTimes must be a valid integer > 0\");\n        }\n        this[kMockDispatch].times = repeatTimes;\n        return this;\n      }\n    };\n    __name(_MockScope, \"MockScope\");\n    var MockScope = _MockScope;\n    var _MockInterceptor = class _MockInterceptor {\n      constructor(opts, mockDispatches) {\n        if (typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"opts must be an object\");\n        }\n        if (typeof opts.path === \"undefined\") {\n          throw new InvalidArgumentError(\"opts.path must be defined\");\n        }\n        if (typeof opts.method === \"undefined\") {\n          opts.method = \"GET\";\n        }\n        if (typeof opts.path === \"string\") {\n          if (opts.query) {\n            opts.path = buildURL(opts.path, opts.query);\n          } else {\n            const parsedURL = new URL(opts.path, \"data://\");\n            opts.path = parsedURL.pathname + parsedURL.search;\n          }\n        }\n        if (typeof opts.method === \"string\") {\n          opts.method = opts.method.toUpperCase();\n        }\n        this[kDispatchKey] = buildKey(opts);\n        this[kDispatches] = mockDispatches;\n        this[kDefaultHeaders] = {};\n        this[kDefaultTrailers] = {};\n        this[kContentLength] = false;\n      }\n      createMockScopeDispatchData({ statusCode, data, responseOptions }) {\n        const responseData = getResponseData(data);\n        const contentLength = this[kContentLength] ? { \"content-length\": responseData.length } : {};\n        const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };\n        const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };\n        return { statusCode, data, headers, trailers };\n      }\n      validateReplyParameters(replyParameters) {\n        if (typeof replyParameters.statusCode === \"undefined\") {\n          throw new InvalidArgumentError(\"statusCode must be defined\");\n        }\n        if (typeof replyParameters.responseOptions !== \"object\" || replyParameters.responseOptions === null) {\n          throw new InvalidArgumentError(\"responseOptions must be an object\");\n        }\n      }\n      /**\n       * Mock an undici request with a defined reply.\n       */\n      reply(replyOptionsCallbackOrStatusCode) {\n        if (typeof replyOptionsCallbackOrStatusCode === \"function\") {\n          const wrappedDefaultsCallback = /* @__PURE__ */ __name((opts) => {\n            const resolvedData = replyOptionsCallbackOrStatusCode(opts);\n            if (typeof resolvedData !== \"object\" || resolvedData === null) {\n              throw new InvalidArgumentError(\"reply options callback must return an object\");\n            }\n            const replyParameters2 = { data: \"\", responseOptions: {}, ...resolvedData };\n            this.validateReplyParameters(replyParameters2);\n            return {\n              ...this.createMockScopeDispatchData(replyParameters2)\n            };\n          }, \"wrappedDefaultsCallback\");\n          const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);\n          return new MockScope(newMockDispatch2);\n        }\n        const replyParameters = {\n          statusCode: replyOptionsCallbackOrStatusCode,\n          data: arguments[1] === void 0 ? \"\" : arguments[1],\n          responseOptions: arguments[2] === void 0 ? {} : arguments[2]\n        };\n        this.validateReplyParameters(replyParameters);\n        const dispatchData = this.createMockScopeDispatchData(replyParameters);\n        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);\n        return new MockScope(newMockDispatch);\n      }\n      /**\n       * Mock an undici request with a defined error.\n       */\n      replyWithError(error) {\n        if (typeof error === \"undefined\") {\n          throw new InvalidArgumentError(\"error must be defined\");\n        }\n        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });\n        return new MockScope(newMockDispatch);\n      }\n      /**\n       * Set default reply headers on the interceptor for subsequent replies\n       */\n      defaultReplyHeaders(headers) {\n        if (typeof headers === \"undefined\") {\n          throw new InvalidArgumentError(\"headers must be defined\");\n        }\n        this[kDefaultHeaders] = headers;\n        return this;\n      }\n      /**\n       * Set default reply trailers on the interceptor for subsequent replies\n       */\n      defaultReplyTrailers(trailers) {\n        if (typeof trailers === \"undefined\") {\n          throw new InvalidArgumentError(\"trailers must be defined\");\n        }\n        this[kDefaultTrailers] = trailers;\n        return this;\n      }\n      /**\n       * Set reply content length header for replies on the interceptor\n       */\n      replyContentLength() {\n        this[kContentLength] = true;\n        return this;\n      }\n    };\n    __name(_MockInterceptor, \"MockInterceptor\");\n    var MockInterceptor = _MockInterceptor;\n    module2.exports.MockInterceptor = MockInterceptor;\n    module2.exports.MockScope = MockScope;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-client.js\nvar require_mock_client = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-client.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { promisify } = require(\"util\");\n    var Client = require_client();\n    var { buildMockDispatch } = require_mock_utils();\n    var {\n      kDispatches,\n      kMockAgent,\n      kClose,\n      kOriginalClose,\n      kOrigin,\n      kOriginalDispatch,\n      kConnected\n    } = require_mock_symbols();\n    var { MockInterceptor } = require_mock_interceptor();\n    var Symbols = require_symbols();\n    var { InvalidArgumentError } = require_errors();\n    var _MockClient = class _MockClient extends Client {\n      constructor(origin, opts) {\n        super(origin, opts);\n        if (!opts || !opts.agent || typeof opts.agent.dispatch !== \"function\") {\n          throw new InvalidArgumentError(\"Argument opts.agent must implement Agent\");\n        }\n        this[kMockAgent] = opts.agent;\n        this[kOrigin] = origin;\n        this[kDispatches] = [];\n        this[kConnected] = 1;\n        this[kOriginalDispatch] = this.dispatch;\n        this[kOriginalClose] = this.close.bind(this);\n        this.dispatch = buildMockDispatch.call(this);\n        this.close = this[kClose];\n      }\n      get [Symbols.kConnected]() {\n        return this[kConnected];\n      }\n      /**\n       * Sets up the base interceptor for mocking replies from undici.\n       */\n      intercept(opts) {\n        return new MockInterceptor(opts, this[kDispatches]);\n      }\n      async [kClose]() {\n        await promisify(this[kOriginalClose])();\n        this[kConnected] = 0;\n        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n      }\n    };\n    __name(_MockClient, \"MockClient\");\n    var MockClient = _MockClient;\n    module2.exports = MockClient;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-pool.js\nvar require_mock_pool = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-pool.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { promisify } = require(\"util\");\n    var Pool = require_pool();\n    var { buildMockDispatch } = require_mock_utils();\n    var {\n      kDispatches,\n      kMockAgent,\n      kClose,\n      kOriginalClose,\n      kOrigin,\n      kOriginalDispatch,\n      kConnected\n    } = require_mock_symbols();\n    var { MockInterceptor } = require_mock_interceptor();\n    var Symbols = require_symbols();\n    var { InvalidArgumentError } = require_errors();\n    var _MockPool = class _MockPool extends Pool {\n      constructor(origin, opts) {\n        super(origin, opts);\n        if (!opts || !opts.agent || typeof opts.agent.dispatch !== \"function\") {\n          throw new InvalidArgumentError(\"Argument opts.agent must implement Agent\");\n        }\n        this[kMockAgent] = opts.agent;\n        this[kOrigin] = origin;\n        this[kDispatches] = [];\n        this[kConnected] = 1;\n        this[kOriginalDispatch] = this.dispatch;\n        this[kOriginalClose] = this.close.bind(this);\n        this.dispatch = buildMockDispatch.call(this);\n        this.close = this[kClose];\n      }\n      get [Symbols.kConnected]() {\n        return this[kConnected];\n      }\n      /**\n       * Sets up the base interceptor for mocking replies from undici.\n       */\n      intercept(opts) {\n        return new MockInterceptor(opts, this[kDispatches]);\n      }\n      async [kClose]() {\n        await promisify(this[kOriginalClose])();\n        this[kConnected] = 0;\n        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);\n      }\n    };\n    __name(_MockPool, \"MockPool\");\n    var MockPool = _MockPool;\n    module2.exports = MockPool;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/pluralizer.js\nvar require_pluralizer = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/pluralizer.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var singulars = {\n      pronoun: \"it\",\n      is: \"is\",\n      was: \"was\",\n      this: \"this\"\n    };\n    var plurals = {\n      pronoun: \"they\",\n      is: \"are\",\n      was: \"were\",\n      this: \"these\"\n    };\n    var _a;\n    module2.exports = (_a = class {\n      constructor(singular, plural) {\n        this.singular = singular;\n        this.plural = plural;\n      }\n      pluralize(count) {\n        const one = count === 1;\n        const keys = one ? singulars : plurals;\n        const noun = one ? this.singular : this.plural;\n        return { ...keys, count, noun };\n      }\n    }, __name(_a, \"Pluralizer\"), _a);\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js\nvar require_pending_interceptors_formatter = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Transform } = require(\"stream\");\n    var { Console } = require(\"console\");\n    var PERSISTENT = define_process_default.versions.icu ? \"\\u2705\" : \"Y \";\n    var NOT_PERSISTENT = define_process_default.versions.icu ? \"\\u274C\" : \"N \";\n    var _a;\n    module2.exports = (_a = class {\n      constructor({ disableColors } = {}) {\n        this.transform = new Transform({\n          transform(chunk, _enc, cb) {\n            cb(null, chunk);\n          }\n        });\n        this.logger = new Console({\n          stdout: this.transform,\n          inspectOptions: {\n            colors: !disableColors && !define_process_default.env.CI\n          }\n        });\n      }\n      format(pendingInterceptors) {\n        const withPrettyHeaders = pendingInterceptors.map(\n          ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n            Method: method,\n            Origin: origin,\n            Path: path,\n            \"Status code\": statusCode,\n            Persistent: persist ? PERSISTENT : NOT_PERSISTENT,\n            Invocations: timesInvoked,\n            Remaining: persist ? Infinity : times - timesInvoked\n          })\n        );\n        this.logger.table(withPrettyHeaders);\n        return this.transform.read().toString();\n      }\n    }, __name(_a, \"PendingInterceptorsFormatter\"), _a);\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-agent.js\nvar require_mock_agent = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/mock/mock-agent.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kClients } = require_symbols();\n    var Agent = require_agent();\n    var {\n      kAgent,\n      kMockAgentSet,\n      kMockAgentGet,\n      kDispatches,\n      kIsMockActive,\n      kNetConnect,\n      kGetNetConnect,\n      kOptions,\n      kFactory\n    } = require_mock_symbols();\n    var MockClient = require_mock_client();\n    var MockPool = require_mock_pool();\n    var { matchValue, buildMockOptions } = require_mock_utils();\n    var { InvalidArgumentError, UndiciError } = require_errors();\n    var Dispatcher = require_dispatcher();\n    var Pluralizer = require_pluralizer();\n    var PendingInterceptorsFormatter = require_pending_interceptors_formatter();\n    var _MockAgent = class _MockAgent extends Dispatcher {\n      constructor(opts) {\n        super(opts);\n        this[kNetConnect] = true;\n        this[kIsMockActive] = true;\n        if (opts?.agent && typeof opts.agent.dispatch !== \"function\") {\n          throw new InvalidArgumentError(\"Argument opts.agent must implement Agent\");\n        }\n        const agent = opts?.agent ? opts.agent : new Agent(opts);\n        this[kAgent] = agent;\n        this[kClients] = agent[kClients];\n        this[kOptions] = buildMockOptions(opts);\n      }\n      get(origin) {\n        let dispatcher = this[kMockAgentGet](origin);\n        if (!dispatcher) {\n          dispatcher = this[kFactory](origin);\n          this[kMockAgentSet](origin, dispatcher);\n        }\n        return dispatcher;\n      }\n      dispatch(opts, handler) {\n        this.get(opts.origin);\n        return this[kAgent].dispatch(opts, handler);\n      }\n      async close() {\n        await this[kAgent].close();\n        this[kClients].clear();\n      }\n      deactivate() {\n        this[kIsMockActive] = false;\n      }\n      activate() {\n        this[kIsMockActive] = true;\n      }\n      enableNetConnect(matcher) {\n        if (typeof matcher === \"string\" || typeof matcher === \"function\" || matcher instanceof RegExp) {\n          if (Array.isArray(this[kNetConnect])) {\n            this[kNetConnect].push(matcher);\n          } else {\n            this[kNetConnect] = [matcher];\n          }\n        } else if (typeof matcher === \"undefined\") {\n          this[kNetConnect] = true;\n        } else {\n          throw new InvalidArgumentError(\"Unsupported matcher. Must be one of String|Function|RegExp.\");\n        }\n      }\n      disableNetConnect() {\n        this[kNetConnect] = false;\n      }\n      // This is required to bypass issues caused by using global symbols - see:\n      // https://github.com/nodejs/undici/issues/1447\n      get isMockActive() {\n        return this[kIsMockActive];\n      }\n      [kMockAgentSet](origin, dispatcher) {\n        this[kClients].set(origin, dispatcher);\n      }\n      [kFactory](origin) {\n        const mockOptions = Object.assign({ agent: this }, this[kOptions]);\n        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);\n      }\n      [kMockAgentGet](origin) {\n        const client = this[kClients].get(origin);\n        if (client) {\n          return client;\n        }\n        if (typeof origin !== \"string\") {\n          const dispatcher = this[kFactory](\"http://localhost:9999\");\n          this[kMockAgentSet](origin, dispatcher);\n          return dispatcher;\n        }\n        for (const [keyMatcher, nonExplicitDispatcher] of Array.from(this[kClients])) {\n          if (nonExplicitDispatcher && typeof keyMatcher !== \"string\" && matchValue(keyMatcher, origin)) {\n            const dispatcher = this[kFactory](origin);\n            this[kMockAgentSet](origin, dispatcher);\n            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];\n            return dispatcher;\n          }\n        }\n      }\n      [kGetNetConnect]() {\n        return this[kNetConnect];\n      }\n      pendingInterceptors() {\n        const mockAgentClients = this[kClients];\n        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);\n      }\n      assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n        const pending = this.pendingInterceptors();\n        if (pending.length === 0) {\n          return;\n        }\n        const pluralizer = new Pluralizer(\"interceptor\", \"interceptors\").pluralize(pending.length);\n        throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim());\n      }\n    };\n    __name(_MockAgent, \"MockAgent\");\n    var MockAgent = _MockAgent;\n    module2.exports = MockAgent;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/global.js\nvar require_global2 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/global.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var globalDispatcher = Symbol.for(\"undici.globalDispatcher.1\");\n    var { InvalidArgumentError } = require_errors();\n    var Agent = require_agent();\n    if (getGlobalDispatcher() === void 0) {\n      setGlobalDispatcher(new Agent());\n    }\n    function setGlobalDispatcher(agent) {\n      if (!agent || typeof agent.dispatch !== \"function\") {\n        throw new InvalidArgumentError(\"Argument agent must implement Agent\");\n      }\n      Object.defineProperty(globalThis, globalDispatcher, {\n        value: agent,\n        writable: true,\n        enumerable: false,\n        configurable: false\n      });\n    }\n    __name(setGlobalDispatcher, \"setGlobalDispatcher\");\n    function getGlobalDispatcher() {\n      return globalThis[globalDispatcher];\n    }\n    __name(getGlobalDispatcher, \"getGlobalDispatcher\");\n    module2.exports = {\n      setGlobalDispatcher,\n      getGlobalDispatcher\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/handler/decorator-handler.js\nvar require_decorator_handler = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/handler/decorator-handler.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var _handler, _a;\n    module2.exports = (_a = class {\n      constructor(handler) {\n        __privateAdd(this, _handler, void 0);\n        if (typeof handler !== \"object\" || handler === null) {\n          throw new TypeError(\"handler must be an object\");\n        }\n        __privateSet(this, _handler, handler);\n      }\n      onConnect(...args) {\n        return __privateGet(this, _handler).onConnect?.(...args);\n      }\n      onError(...args) {\n        return __privateGet(this, _handler).onError?.(...args);\n      }\n      onUpgrade(...args) {\n        return __privateGet(this, _handler).onUpgrade?.(...args);\n      }\n      onResponseStarted(...args) {\n        return __privateGet(this, _handler).onResponseStarted?.(...args);\n      }\n      onHeaders(...args) {\n        return __privateGet(this, _handler).onHeaders?.(...args);\n      }\n      onData(...args) {\n        return __privateGet(this, _handler).onData?.(...args);\n      }\n      onComplete(...args) {\n        return __privateGet(this, _handler).onComplete?.(...args);\n      }\n      onBodySent(...args) {\n        return __privateGet(this, _handler).onBodySent?.(...args);\n      }\n    }, _handler = new WeakMap(), __name(_a, \"DecoratorHandler\"), _a);\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/redirect.js\nvar require_redirect = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/redirect.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var RedirectHandler = require_redirect_handler();\n    module2.exports = (opts) => {\n      const globalMaxRedirections = opts?.maxRedirections;\n      return (dispatch) => {\n        return /* @__PURE__ */ __name(function redirectInterceptor(opts2, handler) {\n          const { maxRedirections = globalMaxRedirections, ...baseOpts } = opts2;\n          if (!maxRedirections) {\n            return dispatch(opts2, handler);\n          }\n          const redirectHandler = new RedirectHandler(\n            dispatch,\n            maxRedirections,\n            opts2,\n            handler\n          );\n          return dispatch(baseOpts, redirectHandler);\n        }, \"redirectInterceptor\");\n      };\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/retry.js\nvar require_retry = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/retry.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var RetryHandler = require_retry_handler();\n    module2.exports = (globalOpts) => {\n      return (dispatch) => {\n        return /* @__PURE__ */ __name(function retryInterceptor(opts, handler) {\n          return dispatch(\n            opts,\n            new RetryHandler(\n              { ...opts, retryOptions: { ...globalOpts, ...opts.retryOptions } },\n              {\n                handler,\n                dispatch\n              }\n            )\n          );\n        }, \"retryInterceptor\");\n      };\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/dump.js\nvar require_dump = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/interceptor/dump.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var util = require_util();\n    var { InvalidArgumentError, RequestAbortedError } = require_errors();\n    var DecoratorHandler = require_decorator_handler();\n    var _maxSize, _abort, _dumped, _aborted, _size, _reason, _handler, _customAbort, customAbort_fn;\n    var _DumpHandler = class _DumpHandler extends DecoratorHandler {\n      constructor({ maxSize }, handler) {\n        super(handler);\n        __privateAdd(this, _customAbort);\n        __privateAdd(this, _maxSize, 1024 * 1024);\n        __privateAdd(this, _abort, null);\n        __privateAdd(this, _dumped, false);\n        __privateAdd(this, _aborted, false);\n        __privateAdd(this, _size, 0);\n        __privateAdd(this, _reason, null);\n        __privateAdd(this, _handler, null);\n        if (maxSize != null && (!Number.isFinite(maxSize) || maxSize < 1)) {\n          throw new InvalidArgumentError(\"maxSize must be a number greater than 0\");\n        }\n        __privateSet(this, _maxSize, maxSize ?? __privateGet(this, _maxSize));\n        __privateSet(this, _handler, handler);\n      }\n      onConnect(abort) {\n        __privateSet(this, _abort, abort);\n        __privateGet(this, _handler).onConnect(__privateMethod(this, _customAbort, customAbort_fn).bind(this));\n      }\n      // TODO: will require adjustment after new hooks are out\n      onHeaders(statusCode, rawHeaders, resume, statusMessage) {\n        const headers = util.parseHeaders(rawHeaders);\n        const contentLength = headers[\"content-length\"];\n        if (contentLength != null && contentLength > __privateGet(this, _maxSize)) {\n          throw new RequestAbortedError(\n            `Response size (${contentLength}) larger than maxSize (${__privateGet(this, _maxSize)})`\n          );\n        }\n        if (__privateGet(this, _aborted)) {\n          return true;\n        }\n        return __privateGet(this, _handler).onHeaders(\n          statusCode,\n          rawHeaders,\n          resume,\n          statusMessage\n        );\n      }\n      onError(err) {\n        if (__privateGet(this, _dumped)) {\n          return;\n        }\n        err = __privateGet(this, _reason) ?? err;\n        __privateGet(this, _handler).onError(err);\n      }\n      onData(chunk) {\n        __privateSet(this, _size, __privateGet(this, _size) + chunk.length);\n        if (__privateGet(this, _size) >= __privateGet(this, _maxSize)) {\n          __privateSet(this, _dumped, true);\n          if (__privateGet(this, _aborted)) {\n            __privateGet(this, _handler).onError(__privateGet(this, _reason));\n          } else {\n            __privateGet(this, _handler).onComplete([]);\n          }\n        }\n        return true;\n      }\n      onComplete(trailers) {\n        if (__privateGet(this, _dumped)) {\n          return;\n        }\n        if (__privateGet(this, _aborted)) {\n          __privateGet(this, _handler).onError(this.reason);\n          return;\n        }\n        __privateGet(this, _handler).onComplete(trailers);\n      }\n    };\n    _maxSize = new WeakMap();\n    _abort = new WeakMap();\n    _dumped = new WeakMap();\n    _aborted = new WeakMap();\n    _size = new WeakMap();\n    _reason = new WeakMap();\n    _handler = new WeakMap();\n    _customAbort = new WeakSet();\n    customAbort_fn = /* @__PURE__ */ __name(function(reason) {\n      __privateSet(this, _aborted, true);\n      __privateSet(this, _reason, reason);\n    }, \"#customAbort\");\n    __name(_DumpHandler, \"DumpHandler\");\n    var DumpHandler = _DumpHandler;\n    function createDumpInterceptor({ maxSize: defaultMaxSize } = {\n      maxSize: 1024 * 1024\n    }) {\n      return (dispatch) => {\n        return /* @__PURE__ */ __name(function Intercept(opts, handler) {\n          const { dumpMaxSize = defaultMaxSize } = opts;\n          const dumpHandler = new DumpHandler(\n            { maxSize: dumpMaxSize },\n            handler\n          );\n          return dispatch(opts, dumpHandler);\n        }, \"Intercept\");\n      };\n    }\n    __name(createDumpInterceptor, \"createDumpInterceptor\");\n    module2.exports = createDumpInterceptor;\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/headers.js\nvar require_headers = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/headers.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kConstruct } = require_symbols();\n    var { kEnumerableProperty } = require_util();\n    var {\n      iteratorMixin,\n      isValidHeaderName,\n      isValidHeaderValue\n    } = require_util2();\n    var { webidl } = require_webidl();\n    var assert = require(\"assert\");\n    var util = require(\"util\");\n    var kHeadersMap = Symbol(\"headers map\");\n    var kHeadersSortedMap = Symbol(\"headers map sorted\");\n    function isHTTPWhiteSpaceCharCode(code) {\n      return code === 10 || code === 13 || code === 9 || code === 32;\n    }\n    __name(isHTTPWhiteSpaceCharCode, \"isHTTPWhiteSpaceCharCode\");\n    function headerValueNormalize(potentialValue) {\n      let i = 0;\n      let j = potentialValue.length;\n      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1)))\n        --j;\n      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))\n        ++i;\n      return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);\n    }\n    __name(headerValueNormalize, \"headerValueNormalize\");\n    function fill(headers, object) {\n      if (Array.isArray(object)) {\n        for (let i = 0; i < object.length; ++i) {\n          const header = object[i];\n          if (header.length !== 2) {\n            throw webidl.errors.exception({\n              header: \"Headers constructor\",\n              message: `expected name/value pair to be length 2, found ${header.length}.`\n            });\n          }\n          appendHeader(headers, header[0], header[1]);\n        }\n      } else if (typeof object === \"object\" && object !== null) {\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; ++i) {\n          appendHeader(headers, keys[i], object[keys[i]]);\n        }\n      } else {\n        throw webidl.errors.conversionFailed({\n          prefix: \"Headers constructor\",\n          argument: \"Argument 1\",\n          types: [\"sequence<sequence<ByteString>>\", \"record<ByteString, ByteString>\"]\n        });\n      }\n    }\n    __name(fill, \"fill\");\n    function appendHeader(headers, name, value) {\n      value = headerValueNormalize(value);\n      if (!isValidHeaderName(name)) {\n        throw webidl.errors.invalidArgument({\n          prefix: \"Headers.append\",\n          value: name,\n          type: \"header name\"\n        });\n      } else if (!isValidHeaderValue(value)) {\n        throw webidl.errors.invalidArgument({\n          prefix: \"Headers.append\",\n          value,\n          type: \"header value\"\n        });\n      }\n      if (getHeadersGuard(headers) === \"immutable\") {\n        throw new TypeError(\"immutable\");\n      }\n      return getHeadersList(headers).append(name, value, false);\n    }\n    __name(appendHeader, \"appendHeader\");\n    function compareHeaderName(a, b) {\n      return a[0] < b[0] ? -1 : 1;\n    }\n    __name(compareHeaderName, \"compareHeaderName\");\n    var _HeadersList = class _HeadersList {\n      /** @type {[string, string][]|null} */\n      cookies = null;\n      constructor(init) {\n        if (init instanceof _HeadersList) {\n          this[kHeadersMap] = new Map(init[kHeadersMap]);\n          this[kHeadersSortedMap] = init[kHeadersSortedMap];\n          this.cookies = init.cookies === null ? null : [...init.cookies];\n        } else {\n          this[kHeadersMap] = new Map(init);\n          this[kHeadersSortedMap] = null;\n        }\n      }\n      /**\n       * @see https://fetch.spec.whatwg.org/#header-list-contains\n       * @param {string} name\n       * @param {boolean} isLowerCase\n       */\n      contains(name, isLowerCase) {\n        return this[kHeadersMap].has(isLowerCase ? name : name.toLowerCase());\n      }\n      clear() {\n        this[kHeadersMap].clear();\n        this[kHeadersSortedMap] = null;\n        this.cookies = null;\n      }\n      /**\n       * @see https://fetch.spec.whatwg.org/#concept-header-list-append\n       * @param {string} name\n       * @param {string} value\n       * @param {boolean} isLowerCase\n       */\n      append(name, value, isLowerCase) {\n        this[kHeadersSortedMap] = null;\n        const lowercaseName = isLowerCase ? name : name.toLowerCase();\n        const exists = this[kHeadersMap].get(lowercaseName);\n        if (exists) {\n          const delimiter = lowercaseName === \"cookie\" ? \"; \" : \", \";\n          this[kHeadersMap].set(lowercaseName, {\n            name: exists.name,\n            value: `${exists.value}${delimiter}${value}`\n          });\n        } else {\n          this[kHeadersMap].set(lowercaseName, { name, value });\n        }\n        if (lowercaseName === \"set-cookie\") {\n          (this.cookies ??= []).push(value);\n        }\n      }\n      /**\n       * @see https://fetch.spec.whatwg.org/#concept-header-list-set\n       * @param {string} name\n       * @param {string} value\n       * @param {boolean} isLowerCase\n       */\n      set(name, value, isLowerCase) {\n        this[kHeadersSortedMap] = null;\n        const lowercaseName = isLowerCase ? name : name.toLowerCase();\n        if (lowercaseName === \"set-cookie\") {\n          this.cookies = [value];\n        }\n        this[kHeadersMap].set(lowercaseName, { name, value });\n      }\n      /**\n       * @see https://fetch.spec.whatwg.org/#concept-header-list-delete\n       * @param {string} name\n       * @param {boolean} isLowerCase\n       */\n      delete(name, isLowerCase) {\n        this[kHeadersSortedMap] = null;\n        if (!isLowerCase)\n          name = name.toLowerCase();\n        if (name === \"set-cookie\") {\n          this.cookies = null;\n        }\n        this[kHeadersMap].delete(name);\n      }\n      /**\n       * @see https://fetch.spec.whatwg.org/#concept-header-list-get\n       * @param {string} name\n       * @param {boolean} isLowerCase\n       * @returns {string | null}\n       */\n      get(name, isLowerCase) {\n        return this[kHeadersMap].get(isLowerCase ? name : name.toLowerCase())?.value ?? null;\n      }\n      *[Symbol.iterator]() {\n        for (const { 0: name, 1: { value } } of this[kHeadersMap]) {\n          yield [name, value];\n        }\n      }\n      get entries() {\n        const headers = {};\n        if (this[kHeadersMap].size !== 0) {\n          for (const { name, value } of this[kHeadersMap].values()) {\n            headers[name] = value;\n          }\n        }\n        return headers;\n      }\n      rawValues() {\n        return this[kHeadersMap].values();\n      }\n      get entriesList() {\n        const headers = [];\n        if (this[kHeadersMap].size !== 0) {\n          for (const { 0: lowerName, 1: { name, value } } of this[kHeadersMap]) {\n            if (lowerName === \"set-cookie\") {\n              for (const cookie of this.cookies) {\n                headers.push([name, cookie]);\n              }\n            } else {\n              headers.push([name, value]);\n            }\n          }\n        }\n        return headers;\n      }\n      // https://fetch.spec.whatwg.org/#convert-header-names-to-a-sorted-lowercase-set\n      toSortedArray() {\n        const size = this[kHeadersMap].size;\n        const array = new Array(size);\n        if (size <= 32) {\n          if (size === 0) {\n            return array;\n          }\n          const iterator = this[kHeadersMap][Symbol.iterator]();\n          const firstValue = iterator.next().value;\n          array[0] = [firstValue[0], firstValue[1].value];\n          assert(firstValue[1].value !== null);\n          for (let i = 1, j = 0, right = 0, left = 0, pivot = 0, x, value; i < size; ++i) {\n            value = iterator.next().value;\n            x = array[i] = [value[0], value[1].value];\n            assert(x[1] !== null);\n            left = 0;\n            right = i;\n            while (left < right) {\n              pivot = left + (right - left >> 1);\n              if (array[pivot][0] <= x[0]) {\n                left = pivot + 1;\n              } else {\n                right = pivot;\n              }\n            }\n            if (i !== pivot) {\n              j = i;\n              while (j > left) {\n                array[j] = array[--j];\n              }\n              array[left] = x;\n            }\n          }\n          if (!iterator.next().done) {\n            throw new TypeError(\"Unreachable\");\n          }\n          return array;\n        } else {\n          let i = 0;\n          for (const { 0: name, 1: { value } } of this[kHeadersMap]) {\n            array[i++] = [name, value];\n            assert(value !== null);\n          }\n          return array.sort(compareHeaderName);\n        }\n      }\n    };\n    __name(_HeadersList, \"HeadersList\");\n    var HeadersList = _HeadersList;\n    var _guard, _headersList;\n    var _Headers = class _Headers {\n      constructor(init = void 0) {\n        __privateAdd(this, _guard, void 0);\n        __privateAdd(this, _headersList, void 0);\n        webidl.util.markAsUncloneable(this);\n        if (init === kConstruct) {\n          return;\n        }\n        __privateSet(this, _headersList, new HeadersList());\n        __privateSet(this, _guard, \"none\");\n        if (init !== void 0) {\n          init = webidl.converters.HeadersInit(init, \"Headers contructor\", \"init\");\n          fill(this, init);\n        }\n      }\n      // https://fetch.spec.whatwg.org/#dom-headers-append\n      append(name, value) {\n        webidl.brandCheck(this, _Headers);\n        webidl.argumentLengthCheck(arguments, 2, \"Headers.append\");\n        const prefix = \"Headers.append\";\n        name = webidl.converters.ByteString(name, prefix, \"name\");\n        value = webidl.converters.ByteString(value, prefix, \"value\");\n        return appendHeader(this, name, value);\n      }\n      // https://fetch.spec.whatwg.org/#dom-headers-delete\n      delete(name) {\n        webidl.brandCheck(this, _Headers);\n        webidl.argumentLengthCheck(arguments, 1, \"Headers.delete\");\n        const prefix = \"Headers.delete\";\n        name = webidl.converters.ByteString(name, prefix, \"name\");\n        if (!isValidHeaderName(name)) {\n          throw webidl.errors.invalidArgument({\n            prefix: \"Headers.delete\",\n            value: name,\n            type: \"header name\"\n          });\n        }\n        if (__privateGet(this, _guard) === \"immutable\") {\n          throw new TypeError(\"immutable\");\n        }\n        if (!__privateGet(this, _headersList).contains(name, false)) {\n          return;\n        }\n        __privateGet(this, _headersList).delete(name, false);\n      }\n      // https://fetch.spec.whatwg.org/#dom-headers-get\n      get(name) {\n        webidl.brandCheck(this, _Headers);\n        webidl.argumentLengthCheck(arguments, 1, \"Headers.get\");\n        const prefix = \"Headers.get\";\n        name = webidl.converters.ByteString(name, prefix, \"name\");\n        if (!isValidHeaderName(name)) {\n          throw webidl.errors.invalidArgument({\n            prefix,\n            value: name,\n            type: \"header name\"\n          });\n        }\n        return __privateGet(this, _headersList).get(name, false);\n      }\n      // https://fetch.spec.whatwg.org/#dom-headers-has\n      has(name) {\n        webidl.brandCheck(this, _Headers);\n        webidl.argumentLengthCheck(arguments, 1, \"Headers.has\");\n        const prefix = \"Headers.has\";\n        name = webidl.converters.ByteString(name, prefix, \"name\");\n        if (!isValidHeaderName(name)) {\n          throw webidl.errors.invalidArgument({\n            prefix,\n            value: name,\n            type: \"header name\"\n          });\n        }\n        return __privateGet(this, _headersList).contains(name, false);\n      }\n      // https://fetch.spec.whatwg.org/#dom-headers-set\n      set(name, value) {\n        webidl.brandCheck(this, _Headers);\n        webidl.argumentLengthCheck(arguments, 2, \"Headers.set\");\n        const prefix = \"Headers.set\";\n        name = webidl.converters.ByteString(name, prefix, \"name\");\n        value = webidl.converters.ByteString(value, prefix, \"value\");\n        value = headerValueNormalize(value);\n        if (!isValidHeaderName(name)) {\n          throw webidl.errors.invalidArgument({\n            prefix,\n            value: name,\n            type: \"header name\"\n          });\n        } else if (!isValidHeaderValue(value)) {\n          throw webidl.errors.invalidArgument({\n            prefix,\n            value,\n            type: \"header value\"\n          });\n        }\n        if (__privateGet(this, _guard) === \"immutable\") {\n          throw new TypeError(\"immutable\");\n        }\n        __privateGet(this, _headersList).set(name, value, false);\n      }\n      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n      getSetCookie() {\n        webidl.brandCheck(this, _Headers);\n        const list = __privateGet(this, _headersList).cookies;\n        if (list) {\n          return [...list];\n        }\n        return [];\n      }\n      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n      get [kHeadersSortedMap]() {\n        if (__privateGet(this, _headersList)[kHeadersSortedMap]) {\n          return __privateGet(this, _headersList)[kHeadersSortedMap];\n        }\n        const headers = [];\n        const names = __privateGet(this, _headersList).toSortedArray();\n        const cookies = __privateGet(this, _headersList).cookies;\n        if (cookies === null || cookies.length === 1) {\n          return __privateGet(this, _headersList)[kHeadersSortedMap] = names;\n        }\n        for (let i = 0; i < names.length; ++i) {\n          const { 0: name, 1: value } = names[i];\n          if (name === \"set-cookie\") {\n            for (let j = 0; j < cookies.length; ++j) {\n              headers.push([name, cookies[j]]);\n            }\n          } else {\n            headers.push([name, value]);\n          }\n        }\n        return __privateGet(this, _headersList)[kHeadersSortedMap] = headers;\n      }\n      [util.inspect.custom](depth, options) {\n        options.depth ??= depth;\n        return `Headers ${util.formatWithOptions(options, __privateGet(this, _headersList).entries)}`;\n      }\n      static getHeadersGuard(o) {\n        return __privateGet(o, _guard);\n      }\n      static setHeadersGuard(o, guard) {\n        __privateSet(o, _guard, guard);\n      }\n      static getHeadersList(o) {\n        return __privateGet(o, _headersList);\n      }\n      static setHeadersList(o, list) {\n        __privateSet(o, _headersList, list);\n      }\n    };\n    _guard = new WeakMap();\n    _headersList = new WeakMap();\n    __name(_Headers, \"Headers\");\n    var Headers2 = _Headers;\n    var { getHeadersGuard, setHeadersGuard, getHeadersList, setHeadersList } = Headers2;\n    Reflect.deleteProperty(Headers2, \"getHeadersGuard\");\n    Reflect.deleteProperty(Headers2, \"setHeadersGuard\");\n    Reflect.deleteProperty(Headers2, \"getHeadersList\");\n    Reflect.deleteProperty(Headers2, \"setHeadersList\");\n    iteratorMixin(\"Headers\", Headers2, kHeadersSortedMap, 0, 1);\n    Object.defineProperties(Headers2.prototype, {\n      append: kEnumerableProperty,\n      delete: kEnumerableProperty,\n      get: kEnumerableProperty,\n      has: kEnumerableProperty,\n      set: kEnumerableProperty,\n      getSetCookie: kEnumerableProperty,\n      [Symbol.toStringTag]: {\n        value: \"Headers\",\n        configurable: true\n      },\n      [util.inspect.custom]: {\n        enumerable: false\n      }\n    });\n    webidl.converters.HeadersInit = function(V, prefix, argument) {\n      if (webidl.util.Type(V) === \"Object\") {\n        const iterator = Reflect.get(V, Symbol.iterator);\n        if (!util.types.isProxy(V) && iterator === Headers2.prototype.entries) {\n          try {\n            return getHeadersList(V).entriesList;\n          } catch {\n          }\n        }\n        if (typeof iterator === \"function\") {\n          return webidl.converters[\"sequence<sequence<ByteString>>\"](V, prefix, argument, iterator.bind(V));\n        }\n        return webidl.converters[\"record<ByteString, ByteString>\"](V, prefix, argument);\n      }\n      throw webidl.errors.conversionFailed({\n        prefix: \"Headers constructor\",\n        argument: \"Argument 1\",\n        types: [\"sequence<sequence<ByteString>>\", \"record<ByteString, ByteString>\"]\n      });\n    };\n    module2.exports = {\n      fill,\n      // for test.\n      compareHeaderName,\n      Headers: Headers2,\n      HeadersList,\n      getHeadersGuard,\n      setHeadersGuard,\n      setHeadersList,\n      getHeadersList\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/response.js\nvar require_response = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/response.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Headers: Headers2, HeadersList, fill, getHeadersGuard, setHeadersGuard, setHeadersList } = require_headers();\n    var { extractBody, cloneBody, mixinBody, hasFinalizationRegistry, streamRegistry, bodyUnusable } = require_body();\n    var util = require_util();\n    var nodeUtil = require(\"util\");\n    var { kEnumerableProperty } = util;\n    var {\n      isValidReasonPhrase,\n      isCancelled,\n      isAborted,\n      isBlobLike,\n      serializeJavascriptValueToJSONString,\n      isErrorLike,\n      isomorphicEncode,\n      environmentSettingsObject: relevantRealm\n    } = require_util2();\n    var {\n      redirectStatusSet,\n      nullBodyStatus\n    } = require_constants3();\n    var { kState, kHeaders } = require_symbols2();\n    var { webidl } = require_webidl();\n    var { FormData: FormData2 } = require_formdata();\n    var { URLSerializer } = require_data_url();\n    var { kConstruct } = require_symbols();\n    var assert = require(\"assert\");\n    var { types } = require(\"util\");\n    var textEncoder = new TextEncoder(\"utf-8\");\n    var _Response = class _Response {\n      // Creates network error Response.\n      static error() {\n        const responseObject = fromInnerResponse2(makeNetworkError2(), \"immutable\");\n        return responseObject;\n      }\n      // https://fetch.spec.whatwg.org/#dom-response-json\n      static json(data, init = {}) {\n        webidl.argumentLengthCheck(arguments, 1, \"Response.json\");\n        if (init !== null) {\n          init = webidl.converters.ResponseInit(init);\n        }\n        const bytes = textEncoder.encode(\n          serializeJavascriptValueToJSONString(data)\n        );\n        const body = extractBody(bytes);\n        const responseObject = fromInnerResponse2(makeResponse({}), \"response\");\n        initializeResponse(responseObject, init, { body: body[0], type: \"application/json\" });\n        return responseObject;\n      }\n      // Creates a redirect Response that redirects to url with status status.\n      static redirect(url, status = 302) {\n        webidl.argumentLengthCheck(arguments, 1, \"Response.redirect\");\n        url = webidl.converters.USVString(url);\n        status = webidl.converters[\"unsigned short\"](status);\n        let parsedURL;\n        try {\n          parsedURL = new URL(url, relevantRealm.settingsObject.baseUrl);\n        } catch (err) {\n          throw new TypeError(`Failed to parse URL from ${url}`, { cause: err });\n        }\n        if (!redirectStatusSet.has(status)) {\n          throw new RangeError(`Invalid status code ${status}`);\n        }\n        const responseObject = fromInnerResponse2(makeResponse({}), \"immutable\");\n        responseObject[kState].status = status;\n        const value = isomorphicEncode(URLSerializer(parsedURL));\n        responseObject[kState].headersList.append(\"location\", value, true);\n        return responseObject;\n      }\n      // https://fetch.spec.whatwg.org/#dom-response\n      constructor(body = null, init = {}) {\n        webidl.util.markAsUncloneable(this);\n        if (body === kConstruct) {\n          return;\n        }\n        if (body !== null) {\n          body = webidl.converters.BodyInit(body);\n        }\n        init = webidl.converters.ResponseInit(init);\n        this[kState] = makeResponse({});\n        this[kHeaders] = new Headers2(kConstruct);\n        setHeadersGuard(this[kHeaders], \"response\");\n        setHeadersList(this[kHeaders], this[kState].headersList);\n        let bodyWithType = null;\n        if (body != null) {\n          const [extractedBody, type] = extractBody(body);\n          bodyWithType = { body: extractedBody, type };\n        }\n        initializeResponse(this, init, bodyWithType);\n      }\n      // Returns response’s type, e.g., \"cors\".\n      get type() {\n        webidl.brandCheck(this, _Response);\n        return this[kState].type;\n      }\n      // Returns response’s URL, if it has one; otherwise the empty string.\n      get url() {\n        webidl.brandCheck(this, _Response);\n        const urlList = this[kState].urlList;\n        const url = urlList[urlList.length - 1] ?? null;\n        if (url === null) {\n          return \"\";\n        }\n        return URLSerializer(url, true);\n      }\n      // Returns whether response was obtained through a redirect.\n      get redirected() {\n        webidl.brandCheck(this, _Response);\n        return this[kState].urlList.length > 1;\n      }\n      // Returns response’s status.\n      get status() {\n        webidl.brandCheck(this, _Response);\n        return this[kState].status;\n      }\n      // Returns whether response’s status is an ok status.\n      get ok() {\n        webidl.brandCheck(this, _Response);\n        return this[kState].status >= 200 && this[kState].status <= 299;\n      }\n      // Returns response’s status message.\n      get statusText() {\n        webidl.brandCheck(this, _Response);\n        return this[kState].statusText;\n      }\n      // Returns response’s headers as Headers.\n      get headers() {\n        webidl.brandCheck(this, _Response);\n        return this[kHeaders];\n      }\n      get body() {\n        webidl.brandCheck(this, _Response);\n        return this[kState].body ? this[kState].body.stream : null;\n      }\n      get bodyUsed() {\n        webidl.brandCheck(this, _Response);\n        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n      }\n      // Returns a clone of response.\n      clone() {\n        webidl.brandCheck(this, _Response);\n        if (bodyUnusable(this)) {\n          throw webidl.errors.exception({\n            header: \"Response.clone\",\n            message: \"Body has already been consumed.\"\n          });\n        }\n        const clonedResponse = cloneResponse(this[kState]);\n        return fromInnerResponse2(clonedResponse, getHeadersGuard(this[kHeaders]));\n      }\n      [nodeUtil.inspect.custom](depth, options) {\n        if (options.depth === null) {\n          options.depth = 2;\n        }\n        options.colors ??= true;\n        const properties = {\n          status: this.status,\n          statusText: this.statusText,\n          headers: this.headers,\n          body: this.body,\n          bodyUsed: this.bodyUsed,\n          ok: this.ok,\n          redirected: this.redirected,\n          type: this.type,\n          url: this.url\n        };\n        return `Response ${nodeUtil.formatWithOptions(options, properties)}`;\n      }\n    };\n    __name(_Response, \"Response\");\n    var Response2 = _Response;\n    mixinBody(Response2);\n    Object.defineProperties(Response2.prototype, {\n      type: kEnumerableProperty,\n      url: kEnumerableProperty,\n      status: kEnumerableProperty,\n      ok: kEnumerableProperty,\n      redirected: kEnumerableProperty,\n      statusText: kEnumerableProperty,\n      headers: kEnumerableProperty,\n      clone: kEnumerableProperty,\n      body: kEnumerableProperty,\n      bodyUsed: kEnumerableProperty,\n      [Symbol.toStringTag]: {\n        value: \"Response\",\n        configurable: true\n      }\n    });\n    Object.defineProperties(Response2, {\n      json: kEnumerableProperty,\n      redirect: kEnumerableProperty,\n      error: kEnumerableProperty\n    });\n    function cloneResponse(response) {\n      if (response.internalResponse) {\n        return filterResponse(\n          cloneResponse(response.internalResponse),\n          response.type\n        );\n      }\n      const newResponse = makeResponse({ ...response, body: null });\n      if (response.body != null) {\n        newResponse.body = cloneBody(newResponse, response.body);\n      }\n      return newResponse;\n    }\n    __name(cloneResponse, \"cloneResponse\");\n    function makeResponse(init) {\n      return {\n        aborted: false,\n        rangeRequested: false,\n        timingAllowPassed: false,\n        requestIncludesCredentials: false,\n        type: \"default\",\n        status: 200,\n        timingInfo: null,\n        cacheState: \"\",\n        statusText: \"\",\n        ...init,\n        headersList: init?.headersList ? new HeadersList(init?.headersList) : new HeadersList(),\n        urlList: init?.urlList ? [...init.urlList] : []\n      };\n    }\n    __name(makeResponse, \"makeResponse\");\n    function makeNetworkError2(reason) {\n      const isError = isErrorLike(reason);\n      return makeResponse({\n        type: \"error\",\n        status: 0,\n        error: isError ? reason : new Error(reason ? String(reason) : reason),\n        aborted: reason && reason.name === \"AbortError\"\n      });\n    }\n    __name(makeNetworkError2, \"makeNetworkError\");\n    function isNetworkError(response) {\n      return (\n        // A network error is a response whose type is \"error\",\n        response.type === \"error\" && // status is 0\n        response.status === 0\n      );\n    }\n    __name(isNetworkError, \"isNetworkError\");\n    function makeFilteredResponse(response, state) {\n      state = {\n        internalResponse: response,\n        ...state\n      };\n      return new Proxy(response, {\n        get(target, p) {\n          return p in state ? state[p] : target[p];\n        },\n        set(target, p, value) {\n          assert(!(p in state));\n          target[p] = value;\n          return true;\n        }\n      });\n    }\n    __name(makeFilteredResponse, \"makeFilteredResponse\");\n    function filterResponse(response, type) {\n      if (type === \"basic\") {\n        return makeFilteredResponse(response, {\n          type: \"basic\",\n          headersList: response.headersList\n        });\n      } else if (type === \"cors\") {\n        return makeFilteredResponse(response, {\n          type: \"cors\",\n          headersList: response.headersList\n        });\n      } else if (type === \"opaque\") {\n        return makeFilteredResponse(response, {\n          type: \"opaque\",\n          urlList: Object.freeze([]),\n          status: 0,\n          statusText: \"\",\n          body: null\n        });\n      } else if (type === \"opaqueredirect\") {\n        return makeFilteredResponse(response, {\n          type: \"opaqueredirect\",\n          status: 0,\n          statusText: \"\",\n          headersList: [],\n          body: null\n        });\n      } else {\n        assert(false);\n      }\n    }\n    __name(filterResponse, \"filterResponse\");\n    function makeAppropriateNetworkError(fetchParams, err = null) {\n      assert(isCancelled(fetchParams));\n      return isAborted(fetchParams) ? makeNetworkError2(Object.assign(new DOMException(\"The operation was aborted.\", \"AbortError\"), { cause: err })) : makeNetworkError2(Object.assign(new DOMException(\"Request was cancelled.\"), { cause: err }));\n    }\n    __name(makeAppropriateNetworkError, \"makeAppropriateNetworkError\");\n    function initializeResponse(response, init, body) {\n      if (init.status !== null && (init.status < 200 || init.status > 599)) {\n        throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.');\n      }\n      if (\"statusText\" in init && init.statusText != null) {\n        if (!isValidReasonPhrase(String(init.statusText))) {\n          throw new TypeError(\"Invalid statusText\");\n        }\n      }\n      if (\"status\" in init && init.status != null) {\n        response[kState].status = init.status;\n      }\n      if (\"statusText\" in init && init.statusText != null) {\n        response[kState].statusText = init.statusText;\n      }\n      if (\"headers\" in init && init.headers != null) {\n        fill(response[kHeaders], init.headers);\n      }\n      if (body) {\n        if (nullBodyStatus.includes(response.status)) {\n          throw webidl.errors.exception({\n            header: \"Response constructor\",\n            message: `Invalid response status code ${response.status}`\n          });\n        }\n        response[kState].body = body.body;\n        if (body.type != null && !response[kState].headersList.contains(\"content-type\", true)) {\n          response[kState].headersList.append(\"content-type\", body.type, true);\n        }\n      }\n    }\n    __name(initializeResponse, \"initializeResponse\");\n    function fromInnerResponse2(innerResponse, guard) {\n      const response = new Response2(kConstruct);\n      response[kState] = innerResponse;\n      response[kHeaders] = new Headers2(kConstruct);\n      setHeadersList(response[kHeaders], innerResponse.headersList);\n      setHeadersGuard(response[kHeaders], guard);\n      if (hasFinalizationRegistry && innerResponse.body?.stream) {\n        streamRegistry.register(response, new WeakRef(innerResponse.body.stream));\n      }\n      return response;\n    }\n    __name(fromInnerResponse2, \"fromInnerResponse\");\n    webidl.converters.ReadableStream = webidl.interfaceConverter(\n      ReadableStream\n    );\n    webidl.converters.FormData = webidl.interfaceConverter(\n      FormData2\n    );\n    webidl.converters.URLSearchParams = webidl.interfaceConverter(\n      URLSearchParams\n    );\n    webidl.converters.XMLHttpRequestBodyInit = function(V, prefix, name) {\n      if (typeof V === \"string\") {\n        return webidl.converters.USVString(V, prefix, name);\n      }\n      if (isBlobLike(V)) {\n        return webidl.converters.Blob(V, prefix, name, { strict: false });\n      }\n      if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n        return webidl.converters.BufferSource(V, prefix, name);\n      }\n      if (util.isFormDataLike(V)) {\n        return webidl.converters.FormData(V, prefix, name, { strict: false });\n      }\n      if (V instanceof URLSearchParams) {\n        return webidl.converters.URLSearchParams(V, prefix, name);\n      }\n      return webidl.converters.DOMString(V, prefix, name);\n    };\n    webidl.converters.BodyInit = function(V, prefix, argument) {\n      if (V instanceof ReadableStream) {\n        return webidl.converters.ReadableStream(V, prefix, argument);\n      }\n      if (V?.[Symbol.asyncIterator]) {\n        return V;\n      }\n      return webidl.converters.XMLHttpRequestBodyInit(V, prefix, argument);\n    };\n    webidl.converters.ResponseInit = webidl.dictionaryConverter([\n      {\n        key: \"status\",\n        converter: webidl.converters[\"unsigned short\"],\n        defaultValue: () => 200\n      },\n      {\n        key: \"statusText\",\n        converter: webidl.converters.ByteString,\n        defaultValue: () => \"\"\n      },\n      {\n        key: \"headers\",\n        converter: webidl.converters.HeadersInit\n      }\n    ]);\n    module2.exports = {\n      isNetworkError,\n      makeNetworkError: makeNetworkError2,\n      makeResponse,\n      makeAppropriateNetworkError,\n      filterResponse,\n      Response: Response2,\n      cloneResponse,\n      fromInnerResponse: fromInnerResponse2\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/dispatcher-weakref.js\nvar require_dispatcher_weakref = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/dispatcher-weakref.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kConnected, kSize } = require_symbols();\n    var _CompatWeakRef = class _CompatWeakRef {\n      constructor(value) {\n        this.value = value;\n      }\n      deref() {\n        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;\n      }\n    };\n    __name(_CompatWeakRef, \"CompatWeakRef\");\n    var CompatWeakRef = _CompatWeakRef;\n    var _CompatFinalizer = class _CompatFinalizer {\n      constructor(finalizer) {\n        this.finalizer = finalizer;\n      }\n      register(dispatcher, key) {\n        if (dispatcher.on) {\n          dispatcher.on(\"disconnect\", () => {\n            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n              this.finalizer(key);\n            }\n          });\n        }\n      }\n      unregister(key) {\n      }\n    };\n    __name(_CompatFinalizer, \"CompatFinalizer\");\n    var CompatFinalizer = _CompatFinalizer;\n    module2.exports = function() {\n      if (define_process_default.env.NODE_V8_COVERAGE && define_process_default.version.startsWith(\"v18\")) {\n        define_process_default._rawDebug(\"Using compatibility WeakRef and FinalizationRegistry\");\n        return {\n          WeakRef: CompatWeakRef,\n          FinalizationRegistry: CompatFinalizer\n        };\n      }\n      return { WeakRef, FinalizationRegistry };\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/request.js\nvar require_request = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/request.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { extractBody, mixinBody, cloneBody, bodyUnusable } = require_body();\n    var { Headers: Headers2, fill: fillHeaders, HeadersList, setHeadersGuard, getHeadersGuard, setHeadersList, getHeadersList } = require_headers();\n    var { FinalizationRegistry: FinalizationRegistry2 } = require_dispatcher_weakref()();\n    var util = require_util();\n    var nodeUtil = require(\"util\");\n    var {\n      isValidHTTPToken,\n      sameOrigin,\n      environmentSettingsObject\n    } = require_util2();\n    var {\n      forbiddenMethodsSet,\n      corsSafeListedMethodsSet,\n      referrerPolicy,\n      requestRedirect,\n      requestMode,\n      requestCredentials,\n      requestCache,\n      requestDuplex\n    } = require_constants3();\n    var { kEnumerableProperty, normalizedMethodRecordsBase, normalizedMethodRecords } = util;\n    var { kHeaders, kSignal, kState, kDispatcher } = require_symbols2();\n    var { webidl } = require_webidl();\n    var { URLSerializer } = require_data_url();\n    var { kConstruct } = require_symbols();\n    var assert = require(\"assert\");\n    var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require(\"events\");\n    var kAbortController = Symbol(\"abortController\");\n    var requestFinalizer = new FinalizationRegistry2(({ signal, abort }) => {\n      signal.removeEventListener(\"abort\", abort);\n    });\n    var dependentControllerMap = /* @__PURE__ */ new WeakMap();\n    function buildAbort(acRef) {\n      return abort;\n      function abort() {\n        const ac = acRef.deref();\n        if (ac !== void 0) {\n          requestFinalizer.unregister(abort);\n          this.removeEventListener(\"abort\", abort);\n          ac.abort(this.reason);\n          const controllerList = dependentControllerMap.get(ac.signal);\n          if (controllerList !== void 0) {\n            if (controllerList.size !== 0) {\n              for (const ref of controllerList) {\n                const ctrl = ref.deref();\n                if (ctrl !== void 0) {\n                  ctrl.abort(this.reason);\n                }\n              }\n              controllerList.clear();\n            }\n            dependentControllerMap.delete(ac.signal);\n          }\n        }\n      }\n      __name(abort, \"abort\");\n    }\n    __name(buildAbort, \"buildAbort\");\n    var patchMethodWarning = false;\n    var _Request2 = class _Request2 {\n      // https://fetch.spec.whatwg.org/#dom-request\n      constructor(input, init = {}) {\n        webidl.util.markAsUncloneable(this);\n        if (input === kConstruct) {\n          return;\n        }\n        const prefix = \"Request constructor\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        input = webidl.converters.RequestInfo(input, prefix, \"input\");\n        init = webidl.converters.RequestInit(init, prefix, \"init\");\n        let request = null;\n        let fallbackMode = null;\n        const baseUrl = environmentSettingsObject.settingsObject.baseUrl;\n        let signal = null;\n        if (typeof input === \"string\") {\n          this[kDispatcher] = init.dispatcher;\n          let parsedURL;\n          try {\n            parsedURL = new URL(input, baseUrl);\n          } catch (err) {\n            throw new TypeError(\"Failed to parse URL from \" + input, { cause: err });\n          }\n          if (parsedURL.username || parsedURL.password) {\n            throw new TypeError(\n              \"Request cannot be constructed from a URL that includes credentials: \" + input\n            );\n          }\n          request = makeRequest({ urlList: [parsedURL] });\n          fallbackMode = \"cors\";\n        } else {\n          this[kDispatcher] = init.dispatcher || input[kDispatcher];\n          assert(input instanceof _Request2);\n          request = input[kState];\n          signal = input[kSignal];\n        }\n        const origin = environmentSettingsObject.settingsObject.origin;\n        let window = \"client\";\n        if (request.window?.constructor?.name === \"EnvironmentSettingsObject\" && sameOrigin(request.window, origin)) {\n          window = request.window;\n        }\n        if (init.window != null) {\n          throw new TypeError(`'window' option '${window}' must be null`);\n        }\n        if (\"window\" in init) {\n          window = \"no-window\";\n        }\n        request = makeRequest({\n          // URL request’s URL.\n          // undici implementation note: this is set as the first item in request's urlList in makeRequest\n          // method request’s method.\n          method: request.method,\n          // header list A copy of request’s header list.\n          // undici implementation note: headersList is cloned in makeRequest\n          headersList: request.headersList,\n          // unsafe-request flag Set.\n          unsafeRequest: request.unsafeRequest,\n          // client This’s relevant settings object.\n          client: environmentSettingsObject.settingsObject,\n          // window window.\n          window,\n          // priority request’s priority.\n          priority: request.priority,\n          // origin request’s origin. The propagation of the origin is only significant for navigation requests\n          // being handled by a service worker. In this scenario a request can have an origin that is different\n          // from the current client.\n          origin: request.origin,\n          // referrer request’s referrer.\n          referrer: request.referrer,\n          // referrer policy request’s referrer policy.\n          referrerPolicy: request.referrerPolicy,\n          // mode request’s mode.\n          mode: request.mode,\n          // credentials mode request’s credentials mode.\n          credentials: request.credentials,\n          // cache mode request’s cache mode.\n          cache: request.cache,\n          // redirect mode request’s redirect mode.\n          redirect: request.redirect,\n          // integrity metadata request’s integrity metadata.\n          integrity: request.integrity,\n          // keepalive request’s keepalive.\n          keepalive: request.keepalive,\n          // reload-navigation flag request’s reload-navigation flag.\n          reloadNavigation: request.reloadNavigation,\n          // history-navigation flag request’s history-navigation flag.\n          historyNavigation: request.historyNavigation,\n          // URL list A clone of request’s URL list.\n          urlList: [...request.urlList]\n        });\n        const initHasKey = Object.keys(init).length !== 0;\n        if (initHasKey) {\n          if (request.mode === \"navigate\") {\n            request.mode = \"same-origin\";\n          }\n          request.reloadNavigation = false;\n          request.historyNavigation = false;\n          request.origin = \"client\";\n          request.referrer = \"client\";\n          request.referrerPolicy = \"\";\n          request.url = request.urlList[request.urlList.length - 1];\n          request.urlList = [request.url];\n        }\n        if (init.referrer !== void 0) {\n          const referrer = init.referrer;\n          if (referrer === \"\") {\n            request.referrer = \"no-referrer\";\n          } else {\n            let parsedReferrer;\n            try {\n              parsedReferrer = new URL(referrer, baseUrl);\n            } catch (err) {\n              throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err });\n            }\n            if (parsedReferrer.protocol === \"about:\" && parsedReferrer.hostname === \"client\" || origin && !sameOrigin(parsedReferrer, environmentSettingsObject.settingsObject.baseUrl)) {\n              request.referrer = \"client\";\n            } else {\n              request.referrer = parsedReferrer;\n            }\n          }\n        }\n        if (init.referrerPolicy !== void 0) {\n          request.referrerPolicy = init.referrerPolicy;\n        }\n        let mode;\n        if (init.mode !== void 0) {\n          mode = init.mode;\n        } else {\n          mode = fallbackMode;\n        }\n        if (mode === \"navigate\") {\n          throw webidl.errors.exception({\n            header: \"Request constructor\",\n            message: \"invalid request mode navigate.\"\n          });\n        }\n        if (mode != null) {\n          request.mode = mode;\n        }\n        if (init.credentials !== void 0) {\n          request.credentials = init.credentials;\n        }\n        if (init.cache !== void 0) {\n          request.cache = init.cache;\n        }\n        if (request.cache === \"only-if-cached\" && request.mode !== \"same-origin\") {\n          throw new TypeError(\n            \"'only-if-cached' can be set only with 'same-origin' mode\"\n          );\n        }\n        if (init.redirect !== void 0) {\n          request.redirect = init.redirect;\n        }\n        if (init.integrity != null) {\n          request.integrity = String(init.integrity);\n        }\n        if (init.keepalive !== void 0) {\n          request.keepalive = Boolean(init.keepalive);\n        }\n        if (init.method !== void 0) {\n          let method = init.method;\n          const mayBeNormalized = normalizedMethodRecords[method];\n          if (mayBeNormalized !== void 0) {\n            request.method = mayBeNormalized;\n          } else {\n            if (!isValidHTTPToken(method)) {\n              throw new TypeError(`'${method}' is not a valid HTTP method.`);\n            }\n            const upperCase = method.toUpperCase();\n            if (forbiddenMethodsSet.has(upperCase)) {\n              throw new TypeError(`'${method}' HTTP method is unsupported.`);\n            }\n            method = normalizedMethodRecordsBase[upperCase] ?? method;\n            request.method = method;\n          }\n          if (!patchMethodWarning && request.method === \"patch\") {\n            define_process_default.emitWarning(\"Using `patch` is highly likely to result in a `405 Method Not Allowed`. `PATCH` is much more likely to succeed.\", {\n              code: \"UNDICI-FETCH-patch\"\n            });\n            patchMethodWarning = true;\n          }\n        }\n        if (init.signal !== void 0) {\n          signal = init.signal;\n        }\n        this[kState] = request;\n        const ac = new AbortController();\n        this[kSignal] = ac.signal;\n        if (signal != null) {\n          if (!signal || typeof signal.aborted !== \"boolean\" || typeof signal.addEventListener !== \"function\") {\n            throw new TypeError(\n              \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n            );\n          }\n          if (signal.aborted) {\n            ac.abort(signal.reason);\n          } else {\n            this[kAbortController] = ac;\n            const acRef = new WeakRef(ac);\n            const abort = buildAbort(acRef);\n            try {\n              if (typeof getMaxListeners === \"function\" && getMaxListeners(signal) === defaultMaxListeners) {\n                setMaxListeners(1500, signal);\n              } else if (getEventListeners(signal, \"abort\").length >= defaultMaxListeners) {\n                setMaxListeners(1500, signal);\n              }\n            } catch {\n            }\n            util.addAbortListener(signal, abort);\n            requestFinalizer.register(ac, { signal, abort }, abort);\n          }\n        }\n        this[kHeaders] = new Headers2(kConstruct);\n        setHeadersList(this[kHeaders], request.headersList);\n        setHeadersGuard(this[kHeaders], \"request\");\n        if (mode === \"no-cors\") {\n          if (!corsSafeListedMethodsSet.has(request.method)) {\n            throw new TypeError(\n              `'${request.method} is unsupported in no-cors mode.`\n            );\n          }\n          setHeadersGuard(this[kHeaders], \"request-no-cors\");\n        }\n        if (initHasKey) {\n          const headersList = getHeadersList(this[kHeaders]);\n          const headers = init.headers !== void 0 ? init.headers : new HeadersList(headersList);\n          headersList.clear();\n          if (headers instanceof HeadersList) {\n            for (const { name, value } of headers.rawValues()) {\n              headersList.append(name, value, false);\n            }\n            headersList.cookies = headers.cookies;\n          } else {\n            fillHeaders(this[kHeaders], headers);\n          }\n        }\n        const inputBody = input instanceof _Request2 ? input[kState].body : null;\n        if ((init.body != null || inputBody != null) && (request.method === \"GET\" || request.method === \"HEAD\")) {\n          throw new TypeError(\"Request with GET/HEAD method cannot have body.\");\n        }\n        let initBody = null;\n        if (init.body != null) {\n          const [extractedBody, contentType] = extractBody(\n            init.body,\n            request.keepalive\n          );\n          initBody = extractedBody;\n          if (contentType && !getHeadersList(this[kHeaders]).contains(\"content-type\", true)) {\n            this[kHeaders].append(\"content-type\", contentType);\n          }\n        }\n        const inputOrInitBody = initBody ?? inputBody;\n        if (inputOrInitBody != null && inputOrInitBody.source == null) {\n          if (initBody != null && init.duplex == null) {\n            throw new TypeError(\"RequestInit: duplex option is required when sending a body.\");\n          }\n          if (request.mode !== \"same-origin\" && request.mode !== \"cors\") {\n            throw new TypeError(\n              'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n            );\n          }\n          request.useCORSPreflightFlag = true;\n        }\n        let finalBody = inputOrInitBody;\n        if (initBody == null && inputBody != null) {\n          if (bodyUnusable(input)) {\n            throw new TypeError(\n              \"Cannot construct a Request with a Request object that has already been used.\"\n            );\n          }\n          const identityTransform = new TransformStream();\n          inputBody.stream.pipeThrough(identityTransform);\n          finalBody = {\n            source: inputBody.source,\n            length: inputBody.length,\n            stream: identityTransform.readable\n          };\n        }\n        this[kState].body = finalBody;\n      }\n      // Returns request’s HTTP method, which is \"GET\" by default.\n      get method() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].method;\n      }\n      // Returns the URL of request as a string.\n      get url() {\n        webidl.brandCheck(this, _Request2);\n        return URLSerializer(this[kState].url);\n      }\n      // Returns a Headers object consisting of the headers associated with request.\n      // Note that headers added in the network layer by the user agent will not\n      // be accounted for in this object, e.g., the \"Host\" header.\n      get headers() {\n        webidl.brandCheck(this, _Request2);\n        return this[kHeaders];\n      }\n      // Returns the kind of resource requested by request, e.g., \"document\"\n      // or \"script\".\n      get destination() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].destination;\n      }\n      // Returns the referrer of request. Its value can be a same-origin URL if\n      // explicitly set in init, the empty string to indicate no referrer, and\n      // \"about:client\" when defaulting to the global’s default. This is used\n      // during fetching to determine the value of the `Referer` header of the\n      // request being made.\n      get referrer() {\n        webidl.brandCheck(this, _Request2);\n        if (this[kState].referrer === \"no-referrer\") {\n          return \"\";\n        }\n        if (this[kState].referrer === \"client\") {\n          return \"about:client\";\n        }\n        return this[kState].referrer.toString();\n      }\n      // Returns the referrer policy associated with request.\n      // This is used during fetching to compute the value of the request’s\n      // referrer.\n      get referrerPolicy() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].referrerPolicy;\n      }\n      // Returns the mode associated with request, which is a string indicating\n      // whether the request will use CORS, or will be restricted to same-origin\n      // URLs.\n      get mode() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].mode;\n      }\n      // Returns the credentials mode associated with request,\n      // which is a string indicating whether credentials will be sent with the\n      // request always, never, or only when sent to a same-origin URL.\n      get credentials() {\n        return this[kState].credentials;\n      }\n      // Returns the cache mode associated with request,\n      // which is a string indicating how the request will\n      // interact with the browser’s cache when fetching.\n      get cache() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].cache;\n      }\n      // Returns the redirect mode associated with request,\n      // which is a string indicating how redirects for the\n      // request will be handled during fetching. A request\n      // will follow redirects by default.\n      get redirect() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].redirect;\n      }\n      // Returns request’s subresource integrity metadata, which is a\n      // cryptographic hash of the resource being fetched. Its value\n      // consists of multiple hashes separated by whitespace. [SRI]\n      get integrity() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].integrity;\n      }\n      // Returns a boolean indicating whether or not request can outlive the\n      // global in which it was created.\n      get keepalive() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].keepalive;\n      }\n      // Returns a boolean indicating whether or not request is for a reload\n      // navigation.\n      get isReloadNavigation() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].reloadNavigation;\n      }\n      // Returns a boolean indicating whether or not request is for a history\n      // navigation (a.k.a. back-forward navigation).\n      get isHistoryNavigation() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].historyNavigation;\n      }\n      // Returns the signal associated with request, which is an AbortSignal\n      // object indicating whether or not request has been aborted, and its\n      // abort event handler.\n      get signal() {\n        webidl.brandCheck(this, _Request2);\n        return this[kSignal];\n      }\n      get body() {\n        webidl.brandCheck(this, _Request2);\n        return this[kState].body ? this[kState].body.stream : null;\n      }\n      get bodyUsed() {\n        webidl.brandCheck(this, _Request2);\n        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n      }\n      get duplex() {\n        webidl.brandCheck(this, _Request2);\n        return \"half\";\n      }\n      // Returns a clone of request.\n      clone() {\n        webidl.brandCheck(this, _Request2);\n        if (bodyUnusable(this)) {\n          throw new TypeError(\"unusable\");\n        }\n        const clonedRequest = cloneRequest(this[kState]);\n        const ac = new AbortController();\n        if (this.signal.aborted) {\n          ac.abort(this.signal.reason);\n        } else {\n          let list = dependentControllerMap.get(this.signal);\n          if (list === void 0) {\n            list = /* @__PURE__ */ new Set();\n            dependentControllerMap.set(this.signal, list);\n          }\n          const acRef = new WeakRef(ac);\n          list.add(acRef);\n          util.addAbortListener(\n            ac.signal,\n            buildAbort(acRef)\n          );\n        }\n        return fromInnerRequest(clonedRequest, ac.signal, getHeadersGuard(this[kHeaders]));\n      }\n      [nodeUtil.inspect.custom](depth, options) {\n        if (options.depth === null) {\n          options.depth = 2;\n        }\n        options.colors ??= true;\n        const properties = {\n          method: this.method,\n          url: this.url,\n          headers: this.headers,\n          destination: this.destination,\n          referrer: this.referrer,\n          referrerPolicy: this.referrerPolicy,\n          mode: this.mode,\n          credentials: this.credentials,\n          cache: this.cache,\n          redirect: this.redirect,\n          integrity: this.integrity,\n          keepalive: this.keepalive,\n          isReloadNavigation: this.isReloadNavigation,\n          isHistoryNavigation: this.isHistoryNavigation,\n          signal: this.signal\n        };\n        return `Request ${nodeUtil.formatWithOptions(options, properties)}`;\n      }\n    };\n    __name(_Request2, \"Request\");\n    var Request2 = _Request2;\n    mixinBody(Request2);\n    function makeRequest(init) {\n      return {\n        method: init.method ?? \"GET\",\n        localURLsOnly: init.localURLsOnly ?? false,\n        unsafeRequest: init.unsafeRequest ?? false,\n        body: init.body ?? null,\n        client: init.client ?? null,\n        reservedClient: init.reservedClient ?? null,\n        replacesClientId: init.replacesClientId ?? \"\",\n        window: init.window ?? \"client\",\n        keepalive: init.keepalive ?? false,\n        serviceWorkers: init.serviceWorkers ?? \"all\",\n        initiator: init.initiator ?? \"\",\n        destination: init.destination ?? \"\",\n        priority: init.priority ?? null,\n        origin: init.origin ?? \"client\",\n        policyContainer: init.policyContainer ?? \"client\",\n        referrer: init.referrer ?? \"client\",\n        referrerPolicy: init.referrerPolicy ?? \"\",\n        mode: init.mode ?? \"no-cors\",\n        useCORSPreflightFlag: init.useCORSPreflightFlag ?? false,\n        credentials: init.credentials ?? \"same-origin\",\n        useCredentials: init.useCredentials ?? false,\n        cache: init.cache ?? \"default\",\n        redirect: init.redirect ?? \"follow\",\n        integrity: init.integrity ?? \"\",\n        cryptoGraphicsNonceMetadata: init.cryptoGraphicsNonceMetadata ?? \"\",\n        parserMetadata: init.parserMetadata ?? \"\",\n        reloadNavigation: init.reloadNavigation ?? false,\n        historyNavigation: init.historyNavigation ?? false,\n        userActivation: init.userActivation ?? false,\n        taintedOrigin: init.taintedOrigin ?? false,\n        redirectCount: init.redirectCount ?? 0,\n        responseTainting: init.responseTainting ?? \"basic\",\n        preventNoCacheCacheControlHeaderModification: init.preventNoCacheCacheControlHeaderModification ?? false,\n        done: init.done ?? false,\n        timingAllowFailed: init.timingAllowFailed ?? false,\n        urlList: init.urlList,\n        url: init.urlList[0],\n        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n      };\n    }\n    __name(makeRequest, \"makeRequest\");\n    function cloneRequest(request) {\n      const newRequest = makeRequest({ ...request, body: null });\n      if (request.body != null) {\n        newRequest.body = cloneBody(newRequest, request.body);\n      }\n      return newRequest;\n    }\n    __name(cloneRequest, \"cloneRequest\");\n    function fromInnerRequest(innerRequest, signal, guard) {\n      const request = new Request2(kConstruct);\n      request[kState] = innerRequest;\n      request[kSignal] = signal;\n      request[kHeaders] = new Headers2(kConstruct);\n      setHeadersList(request[kHeaders], innerRequest.headersList);\n      setHeadersGuard(request[kHeaders], guard);\n      return request;\n    }\n    __name(fromInnerRequest, \"fromInnerRequest\");\n    Object.defineProperties(Request2.prototype, {\n      method: kEnumerableProperty,\n      url: kEnumerableProperty,\n      headers: kEnumerableProperty,\n      redirect: kEnumerableProperty,\n      clone: kEnumerableProperty,\n      signal: kEnumerableProperty,\n      duplex: kEnumerableProperty,\n      destination: kEnumerableProperty,\n      body: kEnumerableProperty,\n      bodyUsed: kEnumerableProperty,\n      isHistoryNavigation: kEnumerableProperty,\n      isReloadNavigation: kEnumerableProperty,\n      keepalive: kEnumerableProperty,\n      integrity: kEnumerableProperty,\n      cache: kEnumerableProperty,\n      credentials: kEnumerableProperty,\n      attribute: kEnumerableProperty,\n      referrerPolicy: kEnumerableProperty,\n      referrer: kEnumerableProperty,\n      mode: kEnumerableProperty,\n      [Symbol.toStringTag]: {\n        value: \"Request\",\n        configurable: true\n      }\n    });\n    webidl.converters.Request = webidl.interfaceConverter(\n      Request2\n    );\n    webidl.converters.RequestInfo = function(V, prefix, argument) {\n      if (typeof V === \"string\") {\n        return webidl.converters.USVString(V, prefix, argument);\n      }\n      if (V instanceof Request2) {\n        return webidl.converters.Request(V, prefix, argument);\n      }\n      return webidl.converters.USVString(V, prefix, argument);\n    };\n    webidl.converters.AbortSignal = webidl.interfaceConverter(\n      AbortSignal\n    );\n    webidl.converters.RequestInit = webidl.dictionaryConverter([\n      {\n        key: \"method\",\n        converter: webidl.converters.ByteString\n      },\n      {\n        key: \"headers\",\n        converter: webidl.converters.HeadersInit\n      },\n      {\n        key: \"body\",\n        converter: webidl.nullableConverter(\n          webidl.converters.BodyInit\n        )\n      },\n      {\n        key: \"referrer\",\n        converter: webidl.converters.USVString\n      },\n      {\n        key: \"referrerPolicy\",\n        converter: webidl.converters.DOMString,\n        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n        allowedValues: referrerPolicy\n      },\n      {\n        key: \"mode\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#concept-request-mode\n        allowedValues: requestMode\n      },\n      {\n        key: \"credentials\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcredentials\n        allowedValues: requestCredentials\n      },\n      {\n        key: \"cache\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestcache\n        allowedValues: requestCache\n      },\n      {\n        key: \"redirect\",\n        converter: webidl.converters.DOMString,\n        // https://fetch.spec.whatwg.org/#requestredirect\n        allowedValues: requestRedirect\n      },\n      {\n        key: \"integrity\",\n        converter: webidl.converters.DOMString\n      },\n      {\n        key: \"keepalive\",\n        converter: webidl.converters.boolean\n      },\n      {\n        key: \"signal\",\n        converter: webidl.nullableConverter(\n          (signal) => webidl.converters.AbortSignal(\n            signal,\n            \"RequestInit\",\n            \"signal\",\n            { strict: false }\n          )\n        )\n      },\n      {\n        key: \"window\",\n        converter: webidl.converters.any\n      },\n      {\n        key: \"duplex\",\n        converter: webidl.converters.DOMString,\n        allowedValues: requestDuplex\n      },\n      {\n        key: \"dispatcher\",\n        // undici specific option\n        converter: webidl.converters.any\n      }\n    ]);\n    module2.exports = { Request: Request2, makeRequest, fromInnerRequest, cloneRequest };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/index.js\nvar require_fetch = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fetch/index.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      makeNetworkError: makeNetworkError2,\n      makeAppropriateNetworkError,\n      filterResponse,\n      makeResponse,\n      fromInnerResponse: fromInnerResponse2\n    } = require_response();\n    var { HeadersList } = require_headers();\n    var { Request: Request2, cloneRequest } = require_request();\n    var zlib = require(\"zlib\");\n    var {\n      bytesMatch,\n      makePolicyContainer,\n      clonePolicyContainer,\n      requestBadPort,\n      TAOCheck,\n      appendRequestOriginHeader,\n      responseLocationURL,\n      requestCurrentURL,\n      setRequestReferrerPolicyOnRedirect,\n      tryUpgradeRequestToAPotentiallyTrustworthyURL,\n      createOpaqueTimingInfo,\n      appendFetchMetadata,\n      corsCheck,\n      crossOriginResourcePolicyCheck,\n      determineRequestsReferrer,\n      coarsenedSharedCurrentTime,\n      createDeferredPromise,\n      isBlobLike,\n      sameOrigin,\n      isCancelled,\n      isAborted,\n      isErrorLike,\n      fullyReadBody,\n      readableStreamClose,\n      isomorphicEncode,\n      urlIsLocal,\n      urlIsHttpHttpsScheme,\n      urlHasHttpsScheme,\n      clampAndCoarsenConnectionTimingInfo,\n      simpleRangeHeaderValue,\n      buildContentRange,\n      createInflate,\n      extractMimeType\n    } = require_util2();\n    var { kState, kDispatcher } = require_symbols2();\n    var assert = require(\"assert\");\n    var { safelyExtractBody, extractBody } = require_body();\n    var {\n      redirectStatusSet,\n      nullBodyStatus,\n      safeMethodsSet,\n      requestBodyHeader,\n      subresourceSet\n    } = require_constants3();\n    var EE = require(\"events\");\n    var { Readable, pipeline, finished } = require(\"stream\");\n    var { addAbortListener, isErrored, isReadable, bufferToLowerCasedHeaderName } = require_util();\n    var { dataURLProcessor, serializeAMimeType, minimizeSupportedMimeType } = require_data_url();\n    var { getGlobalDispatcher } = require_global2();\n    var { webidl } = require_webidl();\n    var { STATUS_CODES } = require(\"http\");\n    var GET_OR_HEAD = [\"GET\", \"HEAD\"];\n    var defaultUserAgent = typeof __UNDICI_IS_NODE__ !== \"undefined\" || typeof esbuildDetection !== \"undefined\" ? \"node\" : \"undici\";\n    var resolveObjectURL;\n    var _Fetch = class _Fetch extends EE {\n      constructor(dispatcher) {\n        super();\n        this.dispatcher = dispatcher;\n        this.connection = null;\n        this.dump = false;\n        this.state = \"ongoing\";\n      }\n      terminate(reason) {\n        if (this.state !== \"ongoing\") {\n          return;\n        }\n        this.state = \"terminated\";\n        this.connection?.destroy(reason);\n        this.emit(\"terminated\", reason);\n      }\n      // https://fetch.spec.whatwg.org/#fetch-controller-abort\n      abort(error) {\n        if (this.state !== \"ongoing\") {\n          return;\n        }\n        this.state = \"aborted\";\n        if (!error) {\n          error = new DOMException(\"The operation was aborted.\", \"AbortError\");\n        }\n        this.serializedAbortReason = error;\n        this.connection?.destroy(error);\n        this.emit(\"terminated\", error);\n      }\n    };\n    __name(_Fetch, \"Fetch\");\n    var Fetch = _Fetch;\n    function handleFetchDone(response) {\n      finalizeAndReportTiming(response, \"fetch\");\n    }\n    __name(handleFetchDone, \"handleFetchDone\");\n    function fetch2(input, init = void 0) {\n      webidl.argumentLengthCheck(arguments, 1, \"globalThis.fetch\");\n      let p = createDeferredPromise();\n      let requestObject;\n      try {\n        requestObject = new Request2(input, init);\n      } catch (e) {\n        p.reject(e);\n        return p.promise;\n      }\n      const request = requestObject[kState];\n      if (requestObject.signal.aborted) {\n        abortFetch(p, request, null, requestObject.signal.reason);\n        return p.promise;\n      }\n      const globalObject = request.client.globalObject;\n      if (globalObject?.constructor?.name === \"ServiceWorkerGlobalScope\") {\n        request.serviceWorkers = \"none\";\n      }\n      let responseObject = null;\n      let locallyAborted = false;\n      let controller = null;\n      addAbortListener(\n        requestObject.signal,\n        () => {\n          locallyAborted = true;\n          assert(controller != null);\n          controller.abort(requestObject.signal.reason);\n          const realResponse = responseObject?.deref();\n          abortFetch(p, request, realResponse, requestObject.signal.reason);\n        }\n      );\n      const processResponse = /* @__PURE__ */ __name((response) => {\n        if (locallyAborted) {\n          return;\n        }\n        if (response.aborted) {\n          abortFetch(p, request, responseObject, controller.serializedAbortReason);\n          return;\n        }\n        if (response.type === \"error\") {\n          p.reject(new TypeError(\"fetch failed\", { cause: response.error }));\n          return;\n        }\n        responseObject = new WeakRef(fromInnerResponse2(response, \"immutable\"));\n        p.resolve(responseObject.deref());\n        p = null;\n      }, \"processResponse\");\n      controller = fetching({\n        request,\n        processResponseEndOfBody: handleFetchDone,\n        processResponse,\n        dispatcher: requestObject[kDispatcher]\n        // undici\n      });\n      return p.promise;\n    }\n    __name(fetch2, \"fetch\");\n    function finalizeAndReportTiming(response, initiatorType = \"other\") {\n      if (response.type === \"error\" && response.aborted) {\n        return;\n      }\n      if (!response.urlList?.length) {\n        return;\n      }\n      const originalURL = response.urlList[0];\n      let timingInfo = response.timingInfo;\n      let cacheState = response.cacheState;\n      if (!urlIsHttpHttpsScheme(originalURL)) {\n        return;\n      }\n      if (timingInfo === null) {\n        return;\n      }\n      if (!response.timingAllowPassed) {\n        timingInfo = createOpaqueTimingInfo({\n          startTime: timingInfo.startTime\n        });\n        cacheState = \"\";\n      }\n      timingInfo.endTime = coarsenedSharedCurrentTime();\n      response.timingInfo = timingInfo;\n      markResourceTiming(\n        timingInfo,\n        originalURL.href,\n        initiatorType,\n        globalThis,\n        cacheState\n      );\n    }\n    __name(finalizeAndReportTiming, \"finalizeAndReportTiming\");\n    var markResourceTiming = performance.markResourceTiming;\n    function abortFetch(p, request, responseObject, error) {\n      if (p) {\n        p.reject(error);\n      }\n      if (request.body != null && isReadable(request.body?.stream)) {\n        request.body.stream.cancel(error).catch((err) => {\n          if (err.code === \"ERR_INVALID_STATE\") {\n            return;\n          }\n          throw err;\n        });\n      }\n      if (responseObject == null) {\n        return;\n      }\n      const response = responseObject[kState];\n      if (response.body != null && isReadable(response.body?.stream)) {\n        response.body.stream.cancel(error).catch((err) => {\n          if (err.code === \"ERR_INVALID_STATE\") {\n            return;\n          }\n          throw err;\n        });\n      }\n    }\n    __name(abortFetch, \"abortFetch\");\n    function fetching({\n      request,\n      processRequestBodyChunkLength,\n      processRequestEndOfBody,\n      processResponse,\n      processResponseEndOfBody,\n      processResponseConsumeBody,\n      useParallelQueue = false,\n      dispatcher = getGlobalDispatcher()\n      // undici\n    }) {\n      assert(dispatcher);\n      let taskDestination = null;\n      let crossOriginIsolatedCapability = false;\n      if (request.client != null) {\n        taskDestination = request.client.globalObject;\n        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;\n      }\n      const currentTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);\n      const timingInfo = createOpaqueTimingInfo({\n        startTime: currentTime\n      });\n      const fetchParams = {\n        controller: new Fetch(dispatcher),\n        request,\n        timingInfo,\n        processRequestBodyChunkLength,\n        processRequestEndOfBody,\n        processResponse,\n        processResponseConsumeBody,\n        processResponseEndOfBody,\n        taskDestination,\n        crossOriginIsolatedCapability\n      };\n      assert(!request.body || request.body.stream);\n      if (request.window === \"client\") {\n        request.window = request.client?.globalObject?.constructor?.name === \"Window\" ? request.client : \"no-window\";\n      }\n      if (request.origin === \"client\") {\n        request.origin = request.client.origin;\n      }\n      if (request.policyContainer === \"client\") {\n        if (request.client != null) {\n          request.policyContainer = clonePolicyContainer(\n            request.client.policyContainer\n          );\n        } else {\n          request.policyContainer = makePolicyContainer();\n        }\n      }\n      if (!request.headersList.contains(\"accept\", true)) {\n        const value = \"*/*\";\n        request.headersList.append(\"accept\", value, true);\n      }\n      if (!request.headersList.contains(\"accept-language\", true)) {\n        request.headersList.append(\"accept-language\", \"*\", true);\n      }\n      if (request.priority === null) {\n      }\n      if (subresourceSet.has(request.destination)) {\n      }\n      mainFetch(fetchParams).catch((err) => {\n        fetchParams.controller.terminate(err);\n      });\n      return fetchParams.controller;\n    }\n    __name(fetching, \"fetching\");\n    async function mainFetch(fetchParams, recursive = false) {\n      const request = fetchParams.request;\n      let response = null;\n      if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n        response = makeNetworkError2(\"local URLs only\");\n      }\n      tryUpgradeRequestToAPotentiallyTrustworthyURL(request);\n      if (requestBadPort(request) === \"blocked\") {\n        response = makeNetworkError2(\"bad port\");\n      }\n      if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = request.policyContainer.referrerPolicy;\n      }\n      if (request.referrer !== \"no-referrer\") {\n        request.referrer = determineRequestsReferrer(request);\n      }\n      if (response === null) {\n        response = await (async () => {\n          const currentURL = requestCurrentURL(request);\n          if (\n            // - request’s current URL’s origin is same origin with request’s origin,\n            //   and request’s response tainting is \"basic\"\n            sameOrigin(currentURL, request.url) && request.responseTainting === \"basic\" || // request’s current URL’s scheme is \"data\"\n            currentURL.protocol === \"data:\" || // - request’s mode is \"navigate\" or \"websocket\"\n            (request.mode === \"navigate\" || request.mode === \"websocket\")\n          ) {\n            request.responseTainting = \"basic\";\n            return await schemeFetch(fetchParams);\n          }\n          if (request.mode === \"same-origin\") {\n            return makeNetworkError2('request mode cannot be \"same-origin\"');\n          }\n          if (request.mode === \"no-cors\") {\n            if (request.redirect !== \"follow\") {\n              return makeNetworkError2(\n                'redirect mode cannot be \"follow\" for \"no-cors\" request'\n              );\n            }\n            request.responseTainting = \"opaque\";\n            return await schemeFetch(fetchParams);\n          }\n          if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n            return makeNetworkError2(\"URL scheme must be a HTTP(S) scheme\");\n          }\n          request.responseTainting = \"cors\";\n          return await httpFetch(fetchParams);\n        })();\n      }\n      if (recursive) {\n        return response;\n      }\n      if (response.status !== 0 && !response.internalResponse) {\n        if (request.responseTainting === \"cors\") {\n        }\n        if (request.responseTainting === \"basic\") {\n          response = filterResponse(response, \"basic\");\n        } else if (request.responseTainting === \"cors\") {\n          response = filterResponse(response, \"cors\");\n        } else if (request.responseTainting === \"opaque\") {\n          response = filterResponse(response, \"opaque\");\n        } else {\n          assert(false);\n        }\n      }\n      let internalResponse = response.status === 0 ? response : response.internalResponse;\n      if (internalResponse.urlList.length === 0) {\n        internalResponse.urlList.push(...request.urlList);\n      }\n      if (!request.timingAllowFailed) {\n        response.timingAllowPassed = true;\n      }\n      if (response.type === \"opaque\" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains(\"range\", true)) {\n        response = internalResponse = makeNetworkError2();\n      }\n      if (response.status !== 0 && (request.method === \"HEAD\" || request.method === \"CONNECT\" || nullBodyStatus.includes(internalResponse.status))) {\n        internalResponse.body = null;\n        fetchParams.controller.dump = true;\n      }\n      if (request.integrity) {\n        const processBodyError = /* @__PURE__ */ __name((reason) => fetchFinale(fetchParams, makeNetworkError2(reason)), \"processBodyError\");\n        if (request.responseTainting === \"opaque\" || response.body == null) {\n          processBodyError(response.error);\n          return;\n        }\n        const processBody = /* @__PURE__ */ __name((bytes) => {\n          if (!bytesMatch(bytes, request.integrity)) {\n            processBodyError(\"integrity mismatch\");\n            return;\n          }\n          response.body = safelyExtractBody(bytes)[0];\n          fetchFinale(fetchParams, response);\n        }, \"processBody\");\n        await fullyReadBody(response.body, processBody, processBodyError);\n      } else {\n        fetchFinale(fetchParams, response);\n      }\n    }\n    __name(mainFetch, \"mainFetch\");\n    function schemeFetch(fetchParams) {\n      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n        return Promise.resolve(makeAppropriateNetworkError(fetchParams));\n      }\n      const { request } = fetchParams;\n      const { protocol: scheme } = requestCurrentURL(request);\n      switch (scheme) {\n        case \"about:\": {\n          return Promise.resolve(makeNetworkError2(\"about scheme is not supported\"));\n        }\n        case \"blob:\": {\n          if (!resolveObjectURL) {\n            resolveObjectURL = require(\"buffer\").resolveObjectURL;\n          }\n          const blobURLEntry = requestCurrentURL(request);\n          if (blobURLEntry.search.length !== 0) {\n            return Promise.resolve(makeNetworkError2(\"NetworkError when attempting to fetch resource.\"));\n          }\n          const blob = resolveObjectURL(blobURLEntry.toString());\n          if (request.method !== \"GET\" || !isBlobLike(blob)) {\n            return Promise.resolve(makeNetworkError2(\"invalid method\"));\n          }\n          const response = makeResponse();\n          const fullLength = blob.size;\n          const serializedFullLength = isomorphicEncode(`${fullLength}`);\n          const type = blob.type;\n          if (!request.headersList.contains(\"range\", true)) {\n            const bodyWithType = extractBody(blob);\n            response.statusText = \"OK\";\n            response.body = bodyWithType[0];\n            response.headersList.set(\"content-length\", serializedFullLength, true);\n            response.headersList.set(\"content-type\", type, true);\n          } else {\n            response.rangeRequested = true;\n            const rangeHeader = request.headersList.get(\"range\", true);\n            const rangeValue = simpleRangeHeaderValue(rangeHeader, true);\n            if (rangeValue === \"failure\") {\n              return Promise.resolve(makeNetworkError2(\"failed to fetch the data URL\"));\n            }\n            let { rangeStartValue: rangeStart, rangeEndValue: rangeEnd } = rangeValue;\n            if (rangeStart === null) {\n              rangeStart = fullLength - rangeEnd;\n              rangeEnd = rangeStart + rangeEnd - 1;\n            } else {\n              if (rangeStart >= fullLength) {\n                return Promise.resolve(makeNetworkError2(\"Range start is greater than the blob's size.\"));\n              }\n              if (rangeEnd === null || rangeEnd >= fullLength) {\n                rangeEnd = fullLength - 1;\n              }\n            }\n            const slicedBlob = blob.slice(rangeStart, rangeEnd, type);\n            const slicedBodyWithType = extractBody(slicedBlob);\n            response.body = slicedBodyWithType[0];\n            const serializedSlicedLength = isomorphicEncode(`${slicedBlob.size}`);\n            const contentRange = buildContentRange(rangeStart, rangeEnd, fullLength);\n            response.status = 206;\n            response.statusText = \"Partial Content\";\n            response.headersList.set(\"content-length\", serializedSlicedLength, true);\n            response.headersList.set(\"content-type\", type, true);\n            response.headersList.set(\"content-range\", contentRange, true);\n          }\n          return Promise.resolve(response);\n        }\n        case \"data:\": {\n          const currentURL = requestCurrentURL(request);\n          const dataURLStruct = dataURLProcessor(currentURL);\n          if (dataURLStruct === \"failure\") {\n            return Promise.resolve(makeNetworkError2(\"failed to fetch the data URL\"));\n          }\n          const mimeType = serializeAMimeType(dataURLStruct.mimeType);\n          return Promise.resolve(makeResponse({\n            statusText: \"OK\",\n            headersList: [\n              [\"content-type\", { name: \"Content-Type\", value: mimeType }]\n            ],\n            body: safelyExtractBody(dataURLStruct.body)[0]\n          }));\n        }\n        case \"file:\": {\n          return Promise.resolve(makeNetworkError2(\"not implemented... yet...\"));\n        }\n        case \"http:\":\n        case \"https:\": {\n          return httpFetch(fetchParams).catch((err) => makeNetworkError2(err));\n        }\n        default: {\n          return Promise.resolve(makeNetworkError2(\"unknown scheme\"));\n        }\n      }\n    }\n    __name(schemeFetch, \"schemeFetch\");\n    function finalizeResponse(fetchParams, response) {\n      fetchParams.request.done = true;\n      if (fetchParams.processResponseDone != null) {\n        queueMicrotask(() => fetchParams.processResponseDone(response));\n      }\n    }\n    __name(finalizeResponse, \"finalizeResponse\");\n    function fetchFinale(fetchParams, response) {\n      let timingInfo = fetchParams.timingInfo;\n      const processResponseEndOfBody = /* @__PURE__ */ __name(() => {\n        const unsafeEndTime = Date.now();\n        if (fetchParams.request.destination === \"document\") {\n          fetchParams.controller.fullTimingInfo = timingInfo;\n        }\n        fetchParams.controller.reportTimingSteps = () => {\n          if (fetchParams.request.url.protocol !== \"https:\") {\n            return;\n          }\n          timingInfo.endTime = unsafeEndTime;\n          let cacheState = response.cacheState;\n          const bodyInfo = response.bodyInfo;\n          if (!response.timingAllowPassed) {\n            timingInfo = createOpaqueTimingInfo(timingInfo);\n            cacheState = \"\";\n          }\n          let responseStatus = 0;\n          if (fetchParams.request.mode !== \"navigator\" || !response.hasCrossOriginRedirects) {\n            responseStatus = response.status;\n            const mimeType = extractMimeType(response.headersList);\n            if (mimeType !== \"failure\") {\n              bodyInfo.contentType = minimizeSupportedMimeType(mimeType);\n            }\n          }\n          if (fetchParams.request.initiatorType != null) {\n            markResourceTiming(timingInfo, fetchParams.request.url.href, fetchParams.request.initiatorType, globalThis, cacheState, bodyInfo, responseStatus);\n          }\n        };\n        const processResponseEndOfBodyTask = /* @__PURE__ */ __name(() => {\n          fetchParams.request.done = true;\n          if (fetchParams.processResponseEndOfBody != null) {\n            queueMicrotask(() => fetchParams.processResponseEndOfBody(response));\n          }\n          if (fetchParams.request.initiatorType != null) {\n            fetchParams.controller.reportTimingSteps();\n          }\n        }, \"processResponseEndOfBodyTask\");\n        queueMicrotask(() => processResponseEndOfBodyTask());\n      }, \"processResponseEndOfBody\");\n      if (fetchParams.processResponse != null) {\n        queueMicrotask(() => {\n          fetchParams.processResponse(response);\n          fetchParams.processResponse = null;\n        });\n      }\n      const internalResponse = response.type === \"error\" ? response : response.internalResponse ?? response;\n      if (internalResponse.body == null) {\n        processResponseEndOfBody();\n      } else {\n        finished(internalResponse.body.stream, () => {\n          processResponseEndOfBody();\n        });\n      }\n    }\n    __name(fetchFinale, \"fetchFinale\");\n    async function httpFetch(fetchParams) {\n      const request = fetchParams.request;\n      let response = null;\n      let actualResponse = null;\n      const timingInfo = fetchParams.timingInfo;\n      if (request.serviceWorkers === \"all\") {\n      }\n      if (response === null) {\n        if (request.redirect === \"follow\") {\n          request.serviceWorkers = \"none\";\n        }\n        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);\n        if (request.responseTainting === \"cors\" && corsCheck(request, response) === \"failure\") {\n          return makeNetworkError2(\"cors failure\");\n        }\n        if (TAOCheck(request, response) === \"failure\") {\n          request.timingAllowFailed = true;\n        }\n      }\n      if ((request.responseTainting === \"opaque\" || response.type === \"opaque\") && crossOriginResourcePolicyCheck(\n        request.origin,\n        request.client,\n        request.destination,\n        actualResponse\n      ) === \"blocked\") {\n        return makeNetworkError2(\"blocked\");\n      }\n      if (redirectStatusSet.has(actualResponse.status)) {\n        if (request.redirect !== \"manual\") {\n          fetchParams.controller.connection.destroy(void 0, false);\n        }\n        if (request.redirect === \"error\") {\n          response = makeNetworkError2(\"unexpected redirect\");\n        } else if (request.redirect === \"manual\") {\n          response = actualResponse;\n        } else if (request.redirect === \"follow\") {\n          response = await httpRedirectFetch(fetchParams, response);\n        } else {\n          assert(false);\n        }\n      }\n      response.timingInfo = timingInfo;\n      return response;\n    }\n    __name(httpFetch, \"httpFetch\");\n    function httpRedirectFetch(fetchParams, response) {\n      const request = fetchParams.request;\n      const actualResponse = response.internalResponse ? response.internalResponse : response;\n      let locationURL;\n      try {\n        locationURL = responseLocationURL(\n          actualResponse,\n          requestCurrentURL(request).hash\n        );\n        if (locationURL == null) {\n          return response;\n        }\n      } catch (err) {\n        return Promise.resolve(makeNetworkError2(err));\n      }\n      if (!urlIsHttpHttpsScheme(locationURL)) {\n        return Promise.resolve(makeNetworkError2(\"URL scheme must be a HTTP(S) scheme\"));\n      }\n      if (request.redirectCount === 20) {\n        return Promise.resolve(makeNetworkError2(\"redirect count exceeded\"));\n      }\n      request.redirectCount += 1;\n      if (request.mode === \"cors\" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {\n        return Promise.resolve(makeNetworkError2('cross origin not allowed for request mode \"cors\"'));\n      }\n      if (request.responseTainting === \"cors\" && (locationURL.username || locationURL.password)) {\n        return Promise.resolve(makeNetworkError2(\n          'URL cannot contain credentials for request mode \"cors\"'\n        ));\n      }\n      if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {\n        return Promise.resolve(makeNetworkError2());\n      }\n      if ([301, 302].includes(actualResponse.status) && request.method === \"POST\" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {\n        request.method = \"GET\";\n        request.body = null;\n        for (const headerName of requestBodyHeader) {\n          request.headersList.delete(headerName);\n        }\n      }\n      if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n        request.headersList.delete(\"authorization\", true);\n        request.headersList.delete(\"proxy-authorization\", true);\n        request.headersList.delete(\"cookie\", true);\n        request.headersList.delete(\"host\", true);\n      }\n      if (request.body != null) {\n        assert(request.body.source != null);\n        request.body = safelyExtractBody(request.body.source)[0];\n      }\n      const timingInfo = fetchParams.timingInfo;\n      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n      if (timingInfo.redirectStartTime === 0) {\n        timingInfo.redirectStartTime = timingInfo.startTime;\n      }\n      request.urlList.push(locationURL);\n      setRequestReferrerPolicyOnRedirect(request, actualResponse);\n      return mainFetch(fetchParams, true);\n    }\n    __name(httpRedirectFetch, \"httpRedirectFetch\");\n    async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {\n      const request = fetchParams.request;\n      let httpFetchParams = null;\n      let httpRequest = null;\n      let response = null;\n      const httpCache = null;\n      const revalidatingFlag = false;\n      if (request.window === \"no-window\" && request.redirect === \"error\") {\n        httpFetchParams = fetchParams;\n        httpRequest = request;\n      } else {\n        httpRequest = cloneRequest(request);\n        httpFetchParams = { ...fetchParams };\n        httpFetchParams.request = httpRequest;\n      }\n      const includeCredentials = request.credentials === \"include\" || request.credentials === \"same-origin\" && request.responseTainting === \"basic\";\n      const contentLength = httpRequest.body ? httpRequest.body.length : null;\n      let contentLengthHeaderValue = null;\n      if (httpRequest.body == null && [\"POST\", \"PUT\"].includes(httpRequest.method)) {\n        contentLengthHeaderValue = \"0\";\n      }\n      if (contentLength != null) {\n        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);\n      }\n      if (contentLengthHeaderValue != null) {\n        httpRequest.headersList.append(\"content-length\", contentLengthHeaderValue, true);\n      }\n      if (contentLength != null && httpRequest.keepalive) {\n      }\n      if (httpRequest.referrer instanceof URL) {\n        httpRequest.headersList.append(\"referer\", isomorphicEncode(httpRequest.referrer.href), true);\n      }\n      appendRequestOriginHeader(httpRequest);\n      appendFetchMetadata(httpRequest);\n      if (!httpRequest.headersList.contains(\"user-agent\", true)) {\n        httpRequest.headersList.append(\"user-agent\", defaultUserAgent);\n      }\n      if (httpRequest.cache === \"default\" && (httpRequest.headersList.contains(\"if-modified-since\", true) || httpRequest.headersList.contains(\"if-none-match\", true) || httpRequest.headersList.contains(\"if-unmodified-since\", true) || httpRequest.headersList.contains(\"if-match\", true) || httpRequest.headersList.contains(\"if-range\", true))) {\n        httpRequest.cache = \"no-store\";\n      }\n      if (httpRequest.cache === \"no-cache\" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains(\"cache-control\", true)) {\n        httpRequest.headersList.append(\"cache-control\", \"max-age=0\", true);\n      }\n      if (httpRequest.cache === \"no-store\" || httpRequest.cache === \"reload\") {\n        if (!httpRequest.headersList.contains(\"pragma\", true)) {\n          httpRequest.headersList.append(\"pragma\", \"no-cache\", true);\n        }\n        if (!httpRequest.headersList.contains(\"cache-control\", true)) {\n          httpRequest.headersList.append(\"cache-control\", \"no-cache\", true);\n        }\n      }\n      if (httpRequest.headersList.contains(\"range\", true)) {\n        httpRequest.headersList.append(\"accept-encoding\", \"identity\", true);\n      }\n      if (!httpRequest.headersList.contains(\"accept-encoding\", true)) {\n        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n          httpRequest.headersList.append(\"accept-encoding\", \"br, gzip, deflate\", true);\n        } else {\n          httpRequest.headersList.append(\"accept-encoding\", \"gzip, deflate\", true);\n        }\n      }\n      if (includeCredentials) {\n      }\n      if (httpCache == null) {\n        httpRequest.cache = \"no-store\";\n      }\n      if (httpRequest.cache !== \"no-store\" && httpRequest.cache !== \"reload\") {\n      }\n      if (response == null) {\n        if (httpRequest.cache === \"only-if-cached\") {\n          return makeNetworkError2(\"only if cached\");\n        }\n        const forwardResponse = await httpNetworkFetch(\n          httpFetchParams,\n          includeCredentials,\n          isNewConnectionFetch\n        );\n        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {\n        }\n        if (revalidatingFlag && forwardResponse.status === 304) {\n        }\n        if (response == null) {\n          response = forwardResponse;\n        }\n      }\n      response.urlList = [...httpRequest.urlList];\n      if (httpRequest.headersList.contains(\"range\", true)) {\n        response.rangeRequested = true;\n      }\n      response.requestIncludesCredentials = includeCredentials;\n      if (response.status === 407) {\n        if (request.window === \"no-window\") {\n          return makeNetworkError2();\n        }\n        if (isCancelled(fetchParams)) {\n          return makeAppropriateNetworkError(fetchParams);\n        }\n        return makeNetworkError2(\"proxy authentication required\");\n      }\n      if (\n        // response’s status is 421\n        response.status === 421 && // isNewConnectionFetch is false\n        !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null\n        (request.body == null || request.body.source != null)\n      ) {\n        if (isCancelled(fetchParams)) {\n          return makeAppropriateNetworkError(fetchParams);\n        }\n        fetchParams.controller.connection.destroy();\n        response = await httpNetworkOrCacheFetch(\n          fetchParams,\n          isAuthenticationFetch,\n          true\n        );\n      }\n      if (isAuthenticationFetch) {\n      }\n      return response;\n    }\n    __name(httpNetworkOrCacheFetch, \"httpNetworkOrCacheFetch\");\n    async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {\n      assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);\n      fetchParams.controller.connection = {\n        abort: null,\n        destroyed: false,\n        destroy(err, abort = true) {\n          if (!this.destroyed) {\n            this.destroyed = true;\n            if (abort) {\n              this.abort?.(err ?? new DOMException(\"The operation was aborted.\", \"AbortError\"));\n            }\n          }\n        }\n      };\n      const request = fetchParams.request;\n      let response = null;\n      const timingInfo = fetchParams.timingInfo;\n      const httpCache = null;\n      if (httpCache == null) {\n        request.cache = \"no-store\";\n      }\n      const newConnection = forceNewConnection ? \"yes\" : \"no\";\n      if (request.mode === \"websocket\") {\n      } else {\n      }\n      let requestBody = null;\n      if (request.body == null && fetchParams.processRequestEndOfBody) {\n        queueMicrotask(() => fetchParams.processRequestEndOfBody());\n      } else if (request.body != null) {\n        const processBodyChunk = /* @__PURE__ */ __name(async function* (bytes) {\n          if (isCancelled(fetchParams)) {\n            return;\n          }\n          yield bytes;\n          fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);\n        }, \"processBodyChunk\");\n        const processEndOfBody = /* @__PURE__ */ __name(() => {\n          if (isCancelled(fetchParams)) {\n            return;\n          }\n          if (fetchParams.processRequestEndOfBody) {\n            fetchParams.processRequestEndOfBody();\n          }\n        }, \"processEndOfBody\");\n        const processBodyError = /* @__PURE__ */ __name((e) => {\n          if (isCancelled(fetchParams)) {\n            return;\n          }\n          if (e.name === \"AbortError\") {\n            fetchParams.controller.abort();\n          } else {\n            fetchParams.controller.terminate(e);\n          }\n        }, \"processBodyError\");\n        requestBody = async function* () {\n          try {\n            for await (const bytes of request.body.stream) {\n              yield* processBodyChunk(bytes);\n            }\n            processEndOfBody();\n          } catch (err) {\n            processBodyError(err);\n          }\n        }();\n      }\n      try {\n        const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });\n        if (socket) {\n          response = makeResponse({ status, statusText, headersList, socket });\n        } else {\n          const iterator = body[Symbol.asyncIterator]();\n          fetchParams.controller.next = () => iterator.next();\n          response = makeResponse({ status, statusText, headersList });\n        }\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          fetchParams.controller.connection.destroy();\n          return makeAppropriateNetworkError(fetchParams, err);\n        }\n        return makeNetworkError2(err);\n      }\n      const pullAlgorithm = /* @__PURE__ */ __name(async () => {\n        await fetchParams.controller.resume();\n      }, \"pullAlgorithm\");\n      const cancelAlgorithm = /* @__PURE__ */ __name((reason) => {\n        if (!isCancelled(fetchParams)) {\n          fetchParams.controller.abort(reason);\n        }\n      }, \"cancelAlgorithm\");\n      const stream = new ReadableStream(\n        {\n          async start(controller) {\n            fetchParams.controller.controller = controller;\n          },\n          async pull(controller) {\n            await pullAlgorithm(controller);\n          },\n          async cancel(reason) {\n            await cancelAlgorithm(reason);\n          },\n          type: \"bytes\"\n        }\n      );\n      response.body = { stream, source: null, length: null };\n      fetchParams.controller.onAborted = onAborted;\n      fetchParams.controller.on(\"terminated\", onAborted);\n      fetchParams.controller.resume = async () => {\n        while (true) {\n          let bytes;\n          let isFailure;\n          try {\n            const { done, value } = await fetchParams.controller.next();\n            if (isAborted(fetchParams)) {\n              break;\n            }\n            bytes = done ? void 0 : value;\n          } catch (err) {\n            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n              bytes = void 0;\n            } else {\n              bytes = err;\n              isFailure = true;\n            }\n          }\n          if (bytes === void 0) {\n            readableStreamClose(fetchParams.controller.controller);\n            finalizeResponse(fetchParams, response);\n            return;\n          }\n          timingInfo.decodedBodySize += bytes?.byteLength ?? 0;\n          if (isFailure) {\n            fetchParams.controller.terminate(bytes);\n            return;\n          }\n          const buffer = new Uint8Array(bytes);\n          if (buffer.byteLength) {\n            fetchParams.controller.controller.enqueue(buffer);\n          }\n          if (isErrored(stream)) {\n            fetchParams.controller.terminate();\n            return;\n          }\n          if (fetchParams.controller.controller.desiredSize <= 0) {\n            return;\n          }\n        }\n      };\n      function onAborted(reason) {\n        if (isAborted(fetchParams)) {\n          response.aborted = true;\n          if (isReadable(stream)) {\n            fetchParams.controller.controller.error(\n              fetchParams.controller.serializedAbortReason\n            );\n          }\n        } else {\n          if (isReadable(stream)) {\n            fetchParams.controller.controller.error(new TypeError(\"terminated\", {\n              cause: isErrorLike(reason) ? reason : void 0\n            }));\n          }\n        }\n        fetchParams.controller.connection.destroy();\n      }\n      __name(onAborted, \"onAborted\");\n      return response;\n      function dispatch({ body }) {\n        const url = requestCurrentURL(request);\n        const agent = fetchParams.controller.dispatcher;\n        return new Promise((resolve, reject) => agent.dispatch(\n          {\n            path: url.pathname + url.search,\n            origin: url.origin,\n            method: request.method,\n            body: agent.isMockActive ? request.body && (request.body.source || request.body.stream) : body,\n            headers: request.headersList.entries,\n            maxRedirections: 0,\n            upgrade: request.mode === \"websocket\" ? \"websocket\" : void 0\n          },\n          {\n            body: null,\n            abort: null,\n            onConnect(abort) {\n              const { connection } = fetchParams.controller;\n              timingInfo.finalConnectionTimingInfo = clampAndCoarsenConnectionTimingInfo(void 0, timingInfo.postRedirectStartTime, fetchParams.crossOriginIsolatedCapability);\n              if (connection.destroyed) {\n                abort(new DOMException(\"The operation was aborted.\", \"AbortError\"));\n              } else {\n                fetchParams.controller.on(\"terminated\", abort);\n                this.abort = connection.abort = abort;\n              }\n              timingInfo.finalNetworkRequestStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n            },\n            onResponseStarted() {\n              timingInfo.finalNetworkResponseStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);\n            },\n            onHeaders(status, rawHeaders, resume, statusText) {\n              if (status < 200) {\n                return;\n              }\n              let codings = [];\n              let location = \"\";\n              const headersList = new HeadersList();\n              for (let i = 0; i < rawHeaders.length; i += 2) {\n                headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString(\"latin1\"), true);\n              }\n              const contentEncoding = headersList.get(\"content-encoding\", true);\n              if (contentEncoding) {\n                codings = contentEncoding.toLowerCase().split(\",\").map((x) => x.trim());\n              }\n              location = headersList.get(\"location\", true);\n              this.body = new Readable({ read: resume });\n              const decoders = [];\n              const willFollow = location && request.redirect === \"follow\" && redirectStatusSet.has(status);\n              if (codings.length !== 0 && request.method !== \"HEAD\" && request.method !== \"CONNECT\" && !nullBodyStatus.includes(status) && !willFollow) {\n                for (let i = codings.length - 1; i >= 0; --i) {\n                  const coding = codings[i];\n                  if (coding === \"x-gzip\" || coding === \"gzip\") {\n                    decoders.push(zlib.createGunzip({\n                      // Be less strict when decoding compressed responses, since sometimes\n                      // servers send slightly invalid responses that are still accepted\n                      // by common browsers.\n                      // Always using Z_SYNC_FLUSH is what cURL does.\n                      flush: zlib.constants.Z_SYNC_FLUSH,\n                      finishFlush: zlib.constants.Z_SYNC_FLUSH\n                    }));\n                  } else if (coding === \"deflate\") {\n                    decoders.push(createInflate({\n                      flush: zlib.constants.Z_SYNC_FLUSH,\n                      finishFlush: zlib.constants.Z_SYNC_FLUSH\n                    }));\n                  } else if (coding === \"br\") {\n                    decoders.push(zlib.createBrotliDecompress({\n                      flush: zlib.constants.BROTLI_OPERATION_FLUSH,\n                      finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH\n                    }));\n                  } else {\n                    decoders.length = 0;\n                    break;\n                  }\n                }\n              }\n              const onError = this.onError.bind(this);\n              resolve({\n                status,\n                statusText,\n                headersList,\n                body: decoders.length ? pipeline(this.body, ...decoders, (err) => {\n                  if (err) {\n                    this.onError(err);\n                  }\n                }).on(\"error\", onError) : this.body.on(\"error\", onError)\n              });\n              return true;\n            },\n            onData(chunk) {\n              if (fetchParams.controller.dump) {\n                return;\n              }\n              const bytes = chunk;\n              timingInfo.encodedBodySize += bytes.byteLength;\n              return this.body.push(bytes);\n            },\n            onComplete() {\n              if (this.abort) {\n                fetchParams.controller.off(\"terminated\", this.abort);\n              }\n              if (fetchParams.controller.onAborted) {\n                fetchParams.controller.off(\"terminated\", fetchParams.controller.onAborted);\n              }\n              fetchParams.controller.ended = true;\n              this.body.push(null);\n            },\n            onError(error) {\n              if (this.abort) {\n                fetchParams.controller.off(\"terminated\", this.abort);\n              }\n              this.body?.destroy(error);\n              fetchParams.controller.terminate(error);\n              reject(error);\n            },\n            onUpgrade(status, rawHeaders, socket) {\n              if (status !== 101) {\n                return;\n              }\n              const headersList = new HeadersList();\n              for (let i = 0; i < rawHeaders.length; i += 2) {\n                headersList.append(bufferToLowerCasedHeaderName(rawHeaders[i]), rawHeaders[i + 1].toString(\"latin1\"), true);\n              }\n              resolve({\n                status,\n                statusText: STATUS_CODES[status],\n                headersList,\n                socket\n              });\n              return true;\n            }\n          }\n        ));\n      }\n      __name(dispatch, \"dispatch\");\n    }\n    __name(httpNetworkFetch, \"httpNetworkFetch\");\n    module2.exports = {\n      fetch: fetch2,\n      Fetch,\n      fetching,\n      finalizeAndReportTiming\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/symbols.js\nvar require_symbols3 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/symbols.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports = {\n      kState: Symbol(\"FileReader state\"),\n      kResult: Symbol(\"FileReader result\"),\n      kError: Symbol(\"FileReader error\"),\n      kLastProgressEventFired: Symbol(\"FileReader last progress event fired timestamp\"),\n      kEvents: Symbol(\"FileReader events\"),\n      kAborted: Symbol(\"FileReader aborted\")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/progressevent.js\nvar require_progressevent = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/progressevent.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { webidl } = require_webidl();\n    var kState = Symbol(\"ProgressEvent state\");\n    var _ProgressEvent = class _ProgressEvent extends Event {\n      constructor(type, eventInitDict = {}) {\n        type = webidl.converters.DOMString(type, \"ProgressEvent constructor\", \"type\");\n        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});\n        super(type, eventInitDict);\n        this[kState] = {\n          lengthComputable: eventInitDict.lengthComputable,\n          loaded: eventInitDict.loaded,\n          total: eventInitDict.total\n        };\n      }\n      get lengthComputable() {\n        webidl.brandCheck(this, _ProgressEvent);\n        return this[kState].lengthComputable;\n      }\n      get loaded() {\n        webidl.brandCheck(this, _ProgressEvent);\n        return this[kState].loaded;\n      }\n      get total() {\n        webidl.brandCheck(this, _ProgressEvent);\n        return this[kState].total;\n      }\n    };\n    __name(_ProgressEvent, \"ProgressEvent\");\n    var ProgressEvent = _ProgressEvent;\n    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([\n      {\n        key: \"lengthComputable\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"loaded\",\n        converter: webidl.converters[\"unsigned long long\"],\n        defaultValue: () => 0\n      },\n      {\n        key: \"total\",\n        converter: webidl.converters[\"unsigned long long\"],\n        defaultValue: () => 0\n      },\n      {\n        key: \"bubbles\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"cancelable\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"composed\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      }\n    ]);\n    module2.exports = {\n      ProgressEvent\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/encoding.js\nvar require_encoding = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/encoding.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    function getEncoding(label) {\n      if (!label) {\n        return \"failure\";\n      }\n      switch (label.trim().toLowerCase()) {\n        case \"unicode-1-1-utf-8\":\n        case \"unicode11utf8\":\n        case \"unicode20utf8\":\n        case \"utf-8\":\n        case \"utf8\":\n        case \"x-unicode20utf8\":\n          return \"UTF-8\";\n        case \"866\":\n        case \"cp866\":\n        case \"csibm866\":\n        case \"ibm866\":\n          return \"IBM866\";\n        case \"csisolatin2\":\n        case \"iso-8859-2\":\n        case \"iso-ir-101\":\n        case \"iso8859-2\":\n        case \"iso88592\":\n        case \"iso_8859-2\":\n        case \"iso_8859-2:1987\":\n        case \"l2\":\n        case \"latin2\":\n          return \"ISO-8859-2\";\n        case \"csisolatin3\":\n        case \"iso-8859-3\":\n        case \"iso-ir-109\":\n        case \"iso8859-3\":\n        case \"iso88593\":\n        case \"iso_8859-3\":\n        case \"iso_8859-3:1988\":\n        case \"l3\":\n        case \"latin3\":\n          return \"ISO-8859-3\";\n        case \"csisolatin4\":\n        case \"iso-8859-4\":\n        case \"iso-ir-110\":\n        case \"iso8859-4\":\n        case \"iso88594\":\n        case \"iso_8859-4\":\n        case \"iso_8859-4:1988\":\n        case \"l4\":\n        case \"latin4\":\n          return \"ISO-8859-4\";\n        case \"csisolatincyrillic\":\n        case \"cyrillic\":\n        case \"iso-8859-5\":\n        case \"iso-ir-144\":\n        case \"iso8859-5\":\n        case \"iso88595\":\n        case \"iso_8859-5\":\n        case \"iso_8859-5:1988\":\n          return \"ISO-8859-5\";\n        case \"arabic\":\n        case \"asmo-708\":\n        case \"csiso88596e\":\n        case \"csiso88596i\":\n        case \"csisolatinarabic\":\n        case \"ecma-114\":\n        case \"iso-8859-6\":\n        case \"iso-8859-6-e\":\n        case \"iso-8859-6-i\":\n        case \"iso-ir-127\":\n        case \"iso8859-6\":\n        case \"iso88596\":\n        case \"iso_8859-6\":\n        case \"iso_8859-6:1987\":\n          return \"ISO-8859-6\";\n        case \"csisolatingreek\":\n        case \"ecma-118\":\n        case \"elot_928\":\n        case \"greek\":\n        case \"greek8\":\n        case \"iso-8859-7\":\n        case \"iso-ir-126\":\n        case \"iso8859-7\":\n        case \"iso88597\":\n        case \"iso_8859-7\":\n        case \"iso_8859-7:1987\":\n        case \"sun_eu_greek\":\n          return \"ISO-8859-7\";\n        case \"csiso88598e\":\n        case \"csisolatinhebrew\":\n        case \"hebrew\":\n        case \"iso-8859-8\":\n        case \"iso-8859-8-e\":\n        case \"iso-ir-138\":\n        case \"iso8859-8\":\n        case \"iso88598\":\n        case \"iso_8859-8\":\n        case \"iso_8859-8:1988\":\n        case \"visual\":\n          return \"ISO-8859-8\";\n        case \"csiso88598i\":\n        case \"iso-8859-8-i\":\n        case \"logical\":\n          return \"ISO-8859-8-I\";\n        case \"csisolatin6\":\n        case \"iso-8859-10\":\n        case \"iso-ir-157\":\n        case \"iso8859-10\":\n        case \"iso885910\":\n        case \"l6\":\n        case \"latin6\":\n          return \"ISO-8859-10\";\n        case \"iso-8859-13\":\n        case \"iso8859-13\":\n        case \"iso885913\":\n          return \"ISO-8859-13\";\n        case \"iso-8859-14\":\n        case \"iso8859-14\":\n        case \"iso885914\":\n          return \"ISO-8859-14\";\n        case \"csisolatin9\":\n        case \"iso-8859-15\":\n        case \"iso8859-15\":\n        case \"iso885915\":\n        case \"iso_8859-15\":\n        case \"l9\":\n          return \"ISO-8859-15\";\n        case \"iso-8859-16\":\n          return \"ISO-8859-16\";\n        case \"cskoi8r\":\n        case \"koi\":\n        case \"koi8\":\n        case \"koi8-r\":\n        case \"koi8_r\":\n          return \"KOI8-R\";\n        case \"koi8-ru\":\n        case \"koi8-u\":\n          return \"KOI8-U\";\n        case \"csmacintosh\":\n        case \"mac\":\n        case \"macintosh\":\n        case \"x-mac-roman\":\n          return \"macintosh\";\n        case \"iso-8859-11\":\n        case \"iso8859-11\":\n        case \"iso885911\":\n        case \"tis-620\":\n        case \"windows-874\":\n          return \"windows-874\";\n        case \"cp1250\":\n        case \"windows-1250\":\n        case \"x-cp1250\":\n          return \"windows-1250\";\n        case \"cp1251\":\n        case \"windows-1251\":\n        case \"x-cp1251\":\n          return \"windows-1251\";\n        case \"ansi_x3.4-1968\":\n        case \"ascii\":\n        case \"cp1252\":\n        case \"cp819\":\n        case \"csisolatin1\":\n        case \"ibm819\":\n        case \"iso-8859-1\":\n        case \"iso-ir-100\":\n        case \"iso8859-1\":\n        case \"iso88591\":\n        case \"iso_8859-1\":\n        case \"iso_8859-1:1987\":\n        case \"l1\":\n        case \"latin1\":\n        case \"us-ascii\":\n        case \"windows-1252\":\n        case \"x-cp1252\":\n          return \"windows-1252\";\n        case \"cp1253\":\n        case \"windows-1253\":\n        case \"x-cp1253\":\n          return \"windows-1253\";\n        case \"cp1254\":\n        case \"csisolatin5\":\n        case \"iso-8859-9\":\n        case \"iso-ir-148\":\n        case \"iso8859-9\":\n        case \"iso88599\":\n        case \"iso_8859-9\":\n        case \"iso_8859-9:1989\":\n        case \"l5\":\n        case \"latin5\":\n        case \"windows-1254\":\n        case \"x-cp1254\":\n          return \"windows-1254\";\n        case \"cp1255\":\n        case \"windows-1255\":\n        case \"x-cp1255\":\n          return \"windows-1255\";\n        case \"cp1256\":\n        case \"windows-1256\":\n        case \"x-cp1256\":\n          return \"windows-1256\";\n        case \"cp1257\":\n        case \"windows-1257\":\n        case \"x-cp1257\":\n          return \"windows-1257\";\n        case \"cp1258\":\n        case \"windows-1258\":\n        case \"x-cp1258\":\n          return \"windows-1258\";\n        case \"x-mac-cyrillic\":\n        case \"x-mac-ukrainian\":\n          return \"x-mac-cyrillic\";\n        case \"chinese\":\n        case \"csgb2312\":\n        case \"csiso58gb231280\":\n        case \"gb2312\":\n        case \"gb_2312\":\n        case \"gb_2312-80\":\n        case \"gbk\":\n        case \"iso-ir-58\":\n        case \"x-gbk\":\n          return \"GBK\";\n        case \"gb18030\":\n          return \"gb18030\";\n        case \"big5\":\n        case \"big5-hkscs\":\n        case \"cn-big5\":\n        case \"csbig5\":\n        case \"x-x-big5\":\n          return \"Big5\";\n        case \"cseucpkdfmtjapanese\":\n        case \"euc-jp\":\n        case \"x-euc-jp\":\n          return \"EUC-JP\";\n        case \"csiso2022jp\":\n        case \"iso-2022-jp\":\n          return \"ISO-2022-JP\";\n        case \"csshiftjis\":\n        case \"ms932\":\n        case \"ms_kanji\":\n        case \"shift-jis\":\n        case \"shift_jis\":\n        case \"sjis\":\n        case \"windows-31j\":\n        case \"x-sjis\":\n          return \"Shift_JIS\";\n        case \"cseuckr\":\n        case \"csksc56011987\":\n        case \"euc-kr\":\n        case \"iso-ir-149\":\n        case \"korean\":\n        case \"ks_c_5601-1987\":\n        case \"ks_c_5601-1989\":\n        case \"ksc5601\":\n        case \"ksc_5601\":\n        case \"windows-949\":\n          return \"EUC-KR\";\n        case \"csiso2022kr\":\n        case \"hz-gb-2312\":\n        case \"iso-2022-cn\":\n        case \"iso-2022-cn-ext\":\n        case \"iso-2022-kr\":\n        case \"replacement\":\n          return \"replacement\";\n        case \"unicodefffe\":\n        case \"utf-16be\":\n          return \"UTF-16BE\";\n        case \"csunicode\":\n        case \"iso-10646-ucs-2\":\n        case \"ucs-2\":\n        case \"unicode\":\n        case \"unicodefeff\":\n        case \"utf-16\":\n        case \"utf-16le\":\n          return \"UTF-16LE\";\n        case \"x-user-defined\":\n          return \"x-user-defined\";\n        default:\n          return \"failure\";\n      }\n    }\n    __name(getEncoding, \"getEncoding\");\n    module2.exports = {\n      getEncoding\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/util.js\nvar require_util4 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      kState,\n      kError,\n      kResult,\n      kAborted,\n      kLastProgressEventFired\n    } = require_symbols3();\n    var { ProgressEvent } = require_progressevent();\n    var { getEncoding } = require_encoding();\n    var { serializeAMimeType, parseMIMEType } = require_data_url();\n    var { types } = require(\"util\");\n    var { StringDecoder } = require(\"string_decoder\");\n    var { btoa } = require(\"buffer\");\n    var staticPropertyDescriptors = {\n      enumerable: true,\n      writable: false,\n      configurable: false\n    };\n    function readOperation(fr, blob, type, encodingName) {\n      if (fr[kState] === \"loading\") {\n        throw new DOMException(\"Invalid state\", \"InvalidStateError\");\n      }\n      fr[kState] = \"loading\";\n      fr[kResult] = null;\n      fr[kError] = null;\n      const stream = blob.stream();\n      const reader = stream.getReader();\n      const bytes = [];\n      let chunkPromise = reader.read();\n      let isFirstChunk = true;\n      (async () => {\n        while (!fr[kAborted]) {\n          try {\n            const { done, value } = await chunkPromise;\n            if (isFirstChunk && !fr[kAborted]) {\n              queueMicrotask(() => {\n                fireAProgressEvent(\"loadstart\", fr);\n              });\n            }\n            isFirstChunk = false;\n            if (!done && types.isUint8Array(value)) {\n              bytes.push(value);\n              if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {\n                fr[kLastProgressEventFired] = Date.now();\n                queueMicrotask(() => {\n                  fireAProgressEvent(\"progress\", fr);\n                });\n              }\n              chunkPromise = reader.read();\n            } else if (done) {\n              queueMicrotask(() => {\n                fr[kState] = \"done\";\n                try {\n                  const result = packageData(bytes, type, blob.type, encodingName);\n                  if (fr[kAborted]) {\n                    return;\n                  }\n                  fr[kResult] = result;\n                  fireAProgressEvent(\"load\", fr);\n                } catch (error) {\n                  fr[kError] = error;\n                  fireAProgressEvent(\"error\", fr);\n                }\n                if (fr[kState] !== \"loading\") {\n                  fireAProgressEvent(\"loadend\", fr);\n                }\n              });\n              break;\n            }\n          } catch (error) {\n            if (fr[kAborted]) {\n              return;\n            }\n            queueMicrotask(() => {\n              fr[kState] = \"done\";\n              fr[kError] = error;\n              fireAProgressEvent(\"error\", fr);\n              if (fr[kState] !== \"loading\") {\n                fireAProgressEvent(\"loadend\", fr);\n              }\n            });\n            break;\n          }\n        }\n      })();\n    }\n    __name(readOperation, \"readOperation\");\n    function fireAProgressEvent(e, reader) {\n      const event = new ProgressEvent(e, {\n        bubbles: false,\n        cancelable: false\n      });\n      reader.dispatchEvent(event);\n    }\n    __name(fireAProgressEvent, \"fireAProgressEvent\");\n    function packageData(bytes, type, mimeType, encodingName) {\n      switch (type) {\n        case \"DataURL\": {\n          let dataURL = \"data:\";\n          const parsed = parseMIMEType(mimeType || \"application/octet-stream\");\n          if (parsed !== \"failure\") {\n            dataURL += serializeAMimeType(parsed);\n          }\n          dataURL += \";base64,\";\n          const decoder = new StringDecoder(\"latin1\");\n          for (const chunk of bytes) {\n            dataURL += btoa(decoder.write(chunk));\n          }\n          dataURL += btoa(decoder.end());\n          return dataURL;\n        }\n        case \"Text\": {\n          let encoding = \"failure\";\n          if (encodingName) {\n            encoding = getEncoding(encodingName);\n          }\n          if (encoding === \"failure\" && mimeType) {\n            const type2 = parseMIMEType(mimeType);\n            if (type2 !== \"failure\") {\n              encoding = getEncoding(type2.parameters.get(\"charset\"));\n            }\n          }\n          if (encoding === \"failure\") {\n            encoding = \"UTF-8\";\n          }\n          return decode(bytes, encoding);\n        }\n        case \"ArrayBuffer\": {\n          const sequence = combineByteSequences(bytes);\n          return sequence.buffer;\n        }\n        case \"BinaryString\": {\n          let binaryString = \"\";\n          const decoder = new StringDecoder(\"latin1\");\n          for (const chunk of bytes) {\n            binaryString += decoder.write(chunk);\n          }\n          binaryString += decoder.end();\n          return binaryString;\n        }\n      }\n    }\n    __name(packageData, \"packageData\");\n    function decode(ioQueue, encoding) {\n      const bytes = combineByteSequences(ioQueue);\n      const BOMEncoding = BOMSniffing(bytes);\n      let slice = 0;\n      if (BOMEncoding !== null) {\n        encoding = BOMEncoding;\n        slice = BOMEncoding === \"UTF-8\" ? 3 : 2;\n      }\n      const sliced = bytes.slice(slice);\n      return new TextDecoder(encoding).decode(sliced);\n    }\n    __name(decode, \"decode\");\n    function BOMSniffing(ioQueue) {\n      const [a, b, c] = ioQueue;\n      if (a === 239 && b === 187 && c === 191) {\n        return \"UTF-8\";\n      } else if (a === 254 && b === 255) {\n        return \"UTF-16BE\";\n      } else if (a === 255 && b === 254) {\n        return \"UTF-16LE\";\n      }\n      return null;\n    }\n    __name(BOMSniffing, \"BOMSniffing\");\n    function combineByteSequences(sequences) {\n      const size = sequences.reduce((a, b) => {\n        return a + b.byteLength;\n      }, 0);\n      let offset = 0;\n      return sequences.reduce((a, b) => {\n        a.set(b, offset);\n        offset += b.byteLength;\n        return a;\n      }, new Uint8Array(size));\n    }\n    __name(combineByteSequences, \"combineByteSequences\");\n    module2.exports = {\n      staticPropertyDescriptors,\n      readOperation,\n      fireAProgressEvent\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/filereader.js\nvar require_filereader = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/fileapi/filereader.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var {\n      staticPropertyDescriptors,\n      readOperation,\n      fireAProgressEvent\n    } = require_util4();\n    var {\n      kState,\n      kError,\n      kResult,\n      kEvents,\n      kAborted\n    } = require_symbols3();\n    var { webidl } = require_webidl();\n    var { kEnumerableProperty } = require_util();\n    var _FileReader = class _FileReader extends EventTarget {\n      constructor() {\n        super();\n        this[kState] = \"empty\";\n        this[kResult] = null;\n        this[kError] = null;\n        this[kEvents] = {\n          loadend: null,\n          error: null,\n          abort: null,\n          load: null,\n          progress: null,\n          loadstart: null\n        };\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n       * @param {import('buffer').Blob} blob\n       */\n      readAsArrayBuffer(blob) {\n        webidl.brandCheck(this, _FileReader);\n        webidl.argumentLengthCheck(arguments, 1, \"FileReader.readAsArrayBuffer\");\n        blob = webidl.converters.Blob(blob, { strict: false });\n        readOperation(this, blob, \"ArrayBuffer\");\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n       * @param {import('buffer').Blob} blob\n       */\n      readAsBinaryString(blob) {\n        webidl.brandCheck(this, _FileReader);\n        webidl.argumentLengthCheck(arguments, 1, \"FileReader.readAsBinaryString\");\n        blob = webidl.converters.Blob(blob, { strict: false });\n        readOperation(this, blob, \"BinaryString\");\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#readAsDataText\n       * @param {import('buffer').Blob} blob\n       * @param {string?} encoding\n       */\n      readAsText(blob, encoding = void 0) {\n        webidl.brandCheck(this, _FileReader);\n        webidl.argumentLengthCheck(arguments, 1, \"FileReader.readAsText\");\n        blob = webidl.converters.Blob(blob, { strict: false });\n        if (encoding !== void 0) {\n          encoding = webidl.converters.DOMString(encoding, \"FileReader.readAsText\", \"encoding\");\n        }\n        readOperation(this, blob, \"Text\", encoding);\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n       * @param {import('buffer').Blob} blob\n       */\n      readAsDataURL(blob) {\n        webidl.brandCheck(this, _FileReader);\n        webidl.argumentLengthCheck(arguments, 1, \"FileReader.readAsDataURL\");\n        blob = webidl.converters.Blob(blob, { strict: false });\n        readOperation(this, blob, \"DataURL\");\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#dfn-abort\n       */\n      abort() {\n        if (this[kState] === \"empty\" || this[kState] === \"done\") {\n          this[kResult] = null;\n          return;\n        }\n        if (this[kState] === \"loading\") {\n          this[kState] = \"done\";\n          this[kResult] = null;\n        }\n        this[kAborted] = true;\n        fireAProgressEvent(\"abort\", this);\n        if (this[kState] !== \"loading\") {\n          fireAProgressEvent(\"loadend\", this);\n        }\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n       */\n      get readyState() {\n        webidl.brandCheck(this, _FileReader);\n        switch (this[kState]) {\n          case \"empty\":\n            return this.EMPTY;\n          case \"loading\":\n            return this.LOADING;\n          case \"done\":\n            return this.DONE;\n        }\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n       */\n      get result() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kResult];\n      }\n      /**\n       * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n       */\n      get error() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kError];\n      }\n      get onloadend() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kEvents].loadend;\n      }\n      set onloadend(fn) {\n        webidl.brandCheck(this, _FileReader);\n        if (this[kEvents].loadend) {\n          this.removeEventListener(\"loadend\", this[kEvents].loadend);\n        }\n        if (typeof fn === \"function\") {\n          this[kEvents].loadend = fn;\n          this.addEventListener(\"loadend\", fn);\n        } else {\n          this[kEvents].loadend = null;\n        }\n      }\n      get onerror() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kEvents].error;\n      }\n      set onerror(fn) {\n        webidl.brandCheck(this, _FileReader);\n        if (this[kEvents].error) {\n          this.removeEventListener(\"error\", this[kEvents].error);\n        }\n        if (typeof fn === \"function\") {\n          this[kEvents].error = fn;\n          this.addEventListener(\"error\", fn);\n        } else {\n          this[kEvents].error = null;\n        }\n      }\n      get onloadstart() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kEvents].loadstart;\n      }\n      set onloadstart(fn) {\n        webidl.brandCheck(this, _FileReader);\n        if (this[kEvents].loadstart) {\n          this.removeEventListener(\"loadstart\", this[kEvents].loadstart);\n        }\n        if (typeof fn === \"function\") {\n          this[kEvents].loadstart = fn;\n          this.addEventListener(\"loadstart\", fn);\n        } else {\n          this[kEvents].loadstart = null;\n        }\n      }\n      get onprogress() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kEvents].progress;\n      }\n      set onprogress(fn) {\n        webidl.brandCheck(this, _FileReader);\n        if (this[kEvents].progress) {\n          this.removeEventListener(\"progress\", this[kEvents].progress);\n        }\n        if (typeof fn === \"function\") {\n          this[kEvents].progress = fn;\n          this.addEventListener(\"progress\", fn);\n        } else {\n          this[kEvents].progress = null;\n        }\n      }\n      get onload() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kEvents].load;\n      }\n      set onload(fn) {\n        webidl.brandCheck(this, _FileReader);\n        if (this[kEvents].load) {\n          this.removeEventListener(\"load\", this[kEvents].load);\n        }\n        if (typeof fn === \"function\") {\n          this[kEvents].load = fn;\n          this.addEventListener(\"load\", fn);\n        } else {\n          this[kEvents].load = null;\n        }\n      }\n      get onabort() {\n        webidl.brandCheck(this, _FileReader);\n        return this[kEvents].abort;\n      }\n      set onabort(fn) {\n        webidl.brandCheck(this, _FileReader);\n        if (this[kEvents].abort) {\n          this.removeEventListener(\"abort\", this[kEvents].abort);\n        }\n        if (typeof fn === \"function\") {\n          this[kEvents].abort = fn;\n          this.addEventListener(\"abort\", fn);\n        } else {\n          this[kEvents].abort = null;\n        }\n      }\n    };\n    __name(_FileReader, \"FileReader\");\n    var FileReader = _FileReader;\n    FileReader.EMPTY = FileReader.prototype.EMPTY = 0;\n    FileReader.LOADING = FileReader.prototype.LOADING = 1;\n    FileReader.DONE = FileReader.prototype.DONE = 2;\n    Object.defineProperties(FileReader.prototype, {\n      EMPTY: staticPropertyDescriptors,\n      LOADING: staticPropertyDescriptors,\n      DONE: staticPropertyDescriptors,\n      readAsArrayBuffer: kEnumerableProperty,\n      readAsBinaryString: kEnumerableProperty,\n      readAsText: kEnumerableProperty,\n      readAsDataURL: kEnumerableProperty,\n      abort: kEnumerableProperty,\n      readyState: kEnumerableProperty,\n      result: kEnumerableProperty,\n      error: kEnumerableProperty,\n      onloadstart: kEnumerableProperty,\n      onprogress: kEnumerableProperty,\n      onload: kEnumerableProperty,\n      onabort: kEnumerableProperty,\n      onerror: kEnumerableProperty,\n      onloadend: kEnumerableProperty,\n      [Symbol.toStringTag]: {\n        value: \"FileReader\",\n        writable: false,\n        enumerable: false,\n        configurable: true\n      }\n    });\n    Object.defineProperties(FileReader, {\n      EMPTY: staticPropertyDescriptors,\n      LOADING: staticPropertyDescriptors,\n      DONE: staticPropertyDescriptors\n    });\n    module2.exports = {\n      FileReader\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/symbols.js\nvar require_symbols4 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/symbols.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports = {\n      kConstruct: require_symbols().kConstruct\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/util.js\nvar require_util5 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var assert = require(\"assert\");\n    var { URLSerializer } = require_data_url();\n    var { isValidHeaderName } = require_util2();\n    function urlEquals(A, B, excludeFragment = false) {\n      const serializedA = URLSerializer(A, excludeFragment);\n      const serializedB = URLSerializer(B, excludeFragment);\n      return serializedA === serializedB;\n    }\n    __name(urlEquals, \"urlEquals\");\n    function getFieldValues(header) {\n      assert(header !== null);\n      const values = [];\n      for (let value of header.split(\",\")) {\n        value = value.trim();\n        if (isValidHeaderName(value)) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n    __name(getFieldValues, \"getFieldValues\");\n    module2.exports = {\n      urlEquals,\n      getFieldValues\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/cache.js\nvar require_cache = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/cache.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kConstruct } = require_symbols4();\n    var { urlEquals, getFieldValues } = require_util5();\n    var { kEnumerableProperty, isDisturbed } = require_util();\n    var { webidl } = require_webidl();\n    var { Response: Response2, cloneResponse, fromInnerResponse: fromInnerResponse2 } = require_response();\n    var { Request: Request2, fromInnerRequest } = require_request();\n    var { kState } = require_symbols2();\n    var { fetching } = require_fetch();\n    var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util2();\n    var assert = require(\"assert\");\n    var _relevantRequestResponseList, _batchCacheOperations, batchCacheOperations_fn, _queryCache, queryCache_fn, _requestMatchesCachedItem, requestMatchesCachedItem_fn, _internalMatchAll, internalMatchAll_fn;\n    var _Cache = class _Cache {\n      constructor() {\n        /**\n         * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n         * @param {CacheBatchOperation[]} operations\n         * @returns {requestResponseList}\n         */\n        __privateAdd(this, _batchCacheOperations);\n        /**\n         * @see https://w3c.github.io/ServiceWorker/#query-cache\n         * @param {any} requestQuery\n         * @param {import('../../types/cache').CacheQueryOptions} options\n         * @param {requestResponseList} targetStorage\n         * @returns {requestResponseList}\n         */\n        __privateAdd(this, _queryCache);\n        /**\n         * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n         * @param {any} requestQuery\n         * @param {any} request\n         * @param {any | null} response\n         * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n         * @returns {boolean}\n         */\n        __privateAdd(this, _requestMatchesCachedItem);\n        __privateAdd(this, _internalMatchAll);\n        /**\n         * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n         * @type {requestResponseList}\n         */\n        __privateAdd(this, _relevantRequestResponseList, void 0);\n        if (arguments[0] !== kConstruct) {\n          webidl.illegalConstructor();\n        }\n        webidl.util.markAsUncloneable(this);\n        __privateSet(this, _relevantRequestResponseList, arguments[1]);\n      }\n      async match(request, options = {}) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.match\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, \"request\");\n        options = webidl.converters.CacheQueryOptions(options, prefix, \"options\");\n        const p = __privateMethod(this, _internalMatchAll, internalMatchAll_fn).call(this, request, options, 1);\n        if (p.length === 0) {\n          return;\n        }\n        return p[0];\n      }\n      async matchAll(request = void 0, options = {}) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.matchAll\";\n        if (request !== void 0)\n          request = webidl.converters.RequestInfo(request, prefix, \"request\");\n        options = webidl.converters.CacheQueryOptions(options, prefix, \"options\");\n        return __privateMethod(this, _internalMatchAll, internalMatchAll_fn).call(this, request, options);\n      }\n      async add(request) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.add\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, \"request\");\n        const requests = [request];\n        const responseArrayPromise = this.addAll(requests);\n        return await responseArrayPromise;\n      }\n      async addAll(requests) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.addAll\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        const responsePromises = [];\n        const requestList = [];\n        for (let request of requests) {\n          if (request === void 0) {\n            throw webidl.errors.conversionFailed({\n              prefix,\n              argument: \"Argument 1\",\n              types: [\"undefined is not allowed\"]\n            });\n          }\n          request = webidl.converters.RequestInfo(request);\n          if (typeof request === \"string\") {\n            continue;\n          }\n          const r = request[kState];\n          if (!urlIsHttpHttpsScheme(r.url) || r.method !== \"GET\") {\n            throw webidl.errors.exception({\n              header: prefix,\n              message: \"Expected http/s scheme when method is not GET.\"\n            });\n          }\n        }\n        const fetchControllers = [];\n        for (const request of requests) {\n          const r = new Request2(request)[kState];\n          if (!urlIsHttpHttpsScheme(r.url)) {\n            throw webidl.errors.exception({\n              header: prefix,\n              message: \"Expected http/s scheme.\"\n            });\n          }\n          r.initiator = \"fetch\";\n          r.destination = \"subresource\";\n          requestList.push(r);\n          const responsePromise = createDeferredPromise();\n          fetchControllers.push(fetching({\n            request: r,\n            processResponse(response) {\n              if (response.type === \"error\" || response.status === 206 || response.status < 200 || response.status > 299) {\n                responsePromise.reject(webidl.errors.exception({\n                  header: \"Cache.addAll\",\n                  message: \"Received an invalid status code or the request failed.\"\n                }));\n              } else if (response.headersList.contains(\"vary\")) {\n                const fieldValues = getFieldValues(response.headersList.get(\"vary\"));\n                for (const fieldValue of fieldValues) {\n                  if (fieldValue === \"*\") {\n                    responsePromise.reject(webidl.errors.exception({\n                      header: \"Cache.addAll\",\n                      message: \"invalid vary field value\"\n                    }));\n                    for (const controller of fetchControllers) {\n                      controller.abort();\n                    }\n                    return;\n                  }\n                }\n              }\n            },\n            processResponseEndOfBody(response) {\n              if (response.aborted) {\n                responsePromise.reject(new DOMException(\"aborted\", \"AbortError\"));\n                return;\n              }\n              responsePromise.resolve(response);\n            }\n          }));\n          responsePromises.push(responsePromise.promise);\n        }\n        const p = Promise.all(responsePromises);\n        const responses = await p;\n        const operations = [];\n        let index = 0;\n        for (const response of responses) {\n          const operation = {\n            type: \"put\",\n            // 7.3.2\n            request: requestList[index],\n            // 7.3.3\n            response\n            // 7.3.4\n          };\n          operations.push(operation);\n          index++;\n        }\n        const cacheJobPromise = createDeferredPromise();\n        let errorData = null;\n        try {\n          __privateMethod(this, _batchCacheOperations, batchCacheOperations_fn).call(this, operations);\n        } catch (e) {\n          errorData = e;\n        }\n        queueMicrotask(() => {\n          if (errorData === null) {\n            cacheJobPromise.resolve(void 0);\n          } else {\n            cacheJobPromise.reject(errorData);\n          }\n        });\n        return cacheJobPromise.promise;\n      }\n      async put(request, response) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.put\";\n        webidl.argumentLengthCheck(arguments, 2, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, \"request\");\n        response = webidl.converters.Response(response, prefix, \"response\");\n        let innerRequest = null;\n        if (request instanceof Request2) {\n          innerRequest = request[kState];\n        } else {\n          innerRequest = new Request2(request)[kState];\n        }\n        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== \"GET\") {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: \"Expected an http/s scheme when method is not GET\"\n          });\n        }\n        const innerResponse = response[kState];\n        if (innerResponse.status === 206) {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: \"Got 206 status\"\n          });\n        }\n        if (innerResponse.headersList.contains(\"vary\")) {\n          const fieldValues = getFieldValues(innerResponse.headersList.get(\"vary\"));\n          for (const fieldValue of fieldValues) {\n            if (fieldValue === \"*\") {\n              throw webidl.errors.exception({\n                header: prefix,\n                message: \"Got * vary field value\"\n              });\n            }\n          }\n        }\n        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n          throw webidl.errors.exception({\n            header: prefix,\n            message: \"Response body is locked or disturbed\"\n          });\n        }\n        const clonedResponse = cloneResponse(innerResponse);\n        const bodyReadPromise = createDeferredPromise();\n        if (innerResponse.body != null) {\n          const stream = innerResponse.body.stream;\n          const reader = stream.getReader();\n          readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);\n        } else {\n          bodyReadPromise.resolve(void 0);\n        }\n        const operations = [];\n        const operation = {\n          type: \"put\",\n          // 14.\n          request: innerRequest,\n          // 15.\n          response: clonedResponse\n          // 16.\n        };\n        operations.push(operation);\n        const bytes = await bodyReadPromise.promise;\n        if (clonedResponse.body != null) {\n          clonedResponse.body.source = bytes;\n        }\n        const cacheJobPromise = createDeferredPromise();\n        let errorData = null;\n        try {\n          __privateMethod(this, _batchCacheOperations, batchCacheOperations_fn).call(this, operations);\n        } catch (e) {\n          errorData = e;\n        }\n        queueMicrotask(() => {\n          if (errorData === null) {\n            cacheJobPromise.resolve();\n          } else {\n            cacheJobPromise.reject(errorData);\n          }\n        });\n        return cacheJobPromise.promise;\n      }\n      async delete(request, options = {}) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.delete\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        request = webidl.converters.RequestInfo(request, prefix, \"request\");\n        options = webidl.converters.CacheQueryOptions(options, prefix, \"options\");\n        let r = null;\n        if (request instanceof Request2) {\n          r = request[kState];\n          if (r.method !== \"GET\" && !options.ignoreMethod) {\n            return false;\n          }\n        } else {\n          assert(typeof request === \"string\");\n          r = new Request2(request)[kState];\n        }\n        const operations = [];\n        const operation = {\n          type: \"delete\",\n          request: r,\n          options\n        };\n        operations.push(operation);\n        const cacheJobPromise = createDeferredPromise();\n        let errorData = null;\n        let requestResponses;\n        try {\n          requestResponses = __privateMethod(this, _batchCacheOperations, batchCacheOperations_fn).call(this, operations);\n        } catch (e) {\n          errorData = e;\n        }\n        queueMicrotask(() => {\n          if (errorData === null) {\n            cacheJobPromise.resolve(!!requestResponses?.length);\n          } else {\n            cacheJobPromise.reject(errorData);\n          }\n        });\n        return cacheJobPromise.promise;\n      }\n      /**\n       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n       * @param {any} request\n       * @param {import('../../types/cache').CacheQueryOptions} options\n       * @returns {Promise<readonly Request[]>}\n       */\n      async keys(request = void 0, options = {}) {\n        webidl.brandCheck(this, _Cache);\n        const prefix = \"Cache.keys\";\n        if (request !== void 0)\n          request = webidl.converters.RequestInfo(request, prefix, \"request\");\n        options = webidl.converters.CacheQueryOptions(options, prefix, \"options\");\n        let r = null;\n        if (request !== void 0) {\n          if (request instanceof Request2) {\n            r = request[kState];\n            if (r.method !== \"GET\" && !options.ignoreMethod) {\n              return [];\n            }\n          } else if (typeof request === \"string\") {\n            r = new Request2(request)[kState];\n          }\n        }\n        const promise = createDeferredPromise();\n        const requests = [];\n        if (request === void 0) {\n          for (const requestResponse of __privateGet(this, _relevantRequestResponseList)) {\n            requests.push(requestResponse[0]);\n          }\n        } else {\n          const requestResponses = __privateMethod(this, _queryCache, queryCache_fn).call(this, r, options);\n          for (const requestResponse of requestResponses) {\n            requests.push(requestResponse[0]);\n          }\n        }\n        queueMicrotask(() => {\n          const requestList = [];\n          for (const request2 of requests) {\n            const requestObject = fromInnerRequest(\n              request2,\n              new AbortController().signal,\n              \"immutable\"\n            );\n            requestList.push(requestObject);\n          }\n          promise.resolve(Object.freeze(requestList));\n        });\n        return promise.promise;\n      }\n    };\n    _relevantRequestResponseList = new WeakMap();\n    _batchCacheOperations = new WeakSet();\n    batchCacheOperations_fn = /* @__PURE__ */ __name(function(operations) {\n      const cache = __privateGet(this, _relevantRequestResponseList);\n      const backupCache = [...cache];\n      const addedItems = [];\n      const resultList = [];\n      try {\n        for (const operation of operations) {\n          if (operation.type !== \"delete\" && operation.type !== \"put\") {\n            throw webidl.errors.exception({\n              header: \"Cache.#batchCacheOperations\",\n              message: 'operation type does not match \"delete\" or \"put\"'\n            });\n          }\n          if (operation.type === \"delete\" && operation.response != null) {\n            throw webidl.errors.exception({\n              header: \"Cache.#batchCacheOperations\",\n              message: \"delete operation should not have an associated response\"\n            });\n          }\n          if (__privateMethod(this, _queryCache, queryCache_fn).call(this, operation.request, operation.options, addedItems).length) {\n            throw new DOMException(\"???\", \"InvalidStateError\");\n          }\n          let requestResponses;\n          if (operation.type === \"delete\") {\n            requestResponses = __privateMethod(this, _queryCache, queryCache_fn).call(this, operation.request, operation.options);\n            if (requestResponses.length === 0) {\n              return [];\n            }\n            for (const requestResponse of requestResponses) {\n              const idx = cache.indexOf(requestResponse);\n              assert(idx !== -1);\n              cache.splice(idx, 1);\n            }\n          } else if (operation.type === \"put\") {\n            if (operation.response == null) {\n              throw webidl.errors.exception({\n                header: \"Cache.#batchCacheOperations\",\n                message: \"put operation should have an associated response\"\n              });\n            }\n            const r = operation.request;\n            if (!urlIsHttpHttpsScheme(r.url)) {\n              throw webidl.errors.exception({\n                header: \"Cache.#batchCacheOperations\",\n                message: \"expected http or https scheme\"\n              });\n            }\n            if (r.method !== \"GET\") {\n              throw webidl.errors.exception({\n                header: \"Cache.#batchCacheOperations\",\n                message: \"not get method\"\n              });\n            }\n            if (operation.options != null) {\n              throw webidl.errors.exception({\n                header: \"Cache.#batchCacheOperations\",\n                message: \"options must not be defined\"\n              });\n            }\n            requestResponses = __privateMethod(this, _queryCache, queryCache_fn).call(this, operation.request);\n            for (const requestResponse of requestResponses) {\n              const idx = cache.indexOf(requestResponse);\n              assert(idx !== -1);\n              cache.splice(idx, 1);\n            }\n            cache.push([operation.request, operation.response]);\n            addedItems.push([operation.request, operation.response]);\n          }\n          resultList.push([operation.request, operation.response]);\n        }\n        return resultList;\n      } catch (e) {\n        __privateGet(this, _relevantRequestResponseList).length = 0;\n        __privateSet(this, _relevantRequestResponseList, backupCache);\n        throw e;\n      }\n    }, \"#batchCacheOperations\");\n    _queryCache = new WeakSet();\n    queryCache_fn = /* @__PURE__ */ __name(function(requestQuery, options, targetStorage) {\n      const resultList = [];\n      const storage = targetStorage ?? __privateGet(this, _relevantRequestResponseList);\n      for (const requestResponse of storage) {\n        const [cachedRequest, cachedResponse] = requestResponse;\n        if (__privateMethod(this, _requestMatchesCachedItem, requestMatchesCachedItem_fn).call(this, requestQuery, cachedRequest, cachedResponse, options)) {\n          resultList.push(requestResponse);\n        }\n      }\n      return resultList;\n    }, \"#queryCache\");\n    _requestMatchesCachedItem = new WeakSet();\n    requestMatchesCachedItem_fn = /* @__PURE__ */ __name(function(requestQuery, request, response = null, options) {\n      const queryURL = new URL(requestQuery.url);\n      const cachedURL = new URL(request.url);\n      if (options?.ignoreSearch) {\n        cachedURL.search = \"\";\n        queryURL.search = \"\";\n      }\n      if (!urlEquals(queryURL, cachedURL, true)) {\n        return false;\n      }\n      if (response == null || options?.ignoreVary || !response.headersList.contains(\"vary\")) {\n        return true;\n      }\n      const fieldValues = getFieldValues(response.headersList.get(\"vary\"));\n      for (const fieldValue of fieldValues) {\n        if (fieldValue === \"*\") {\n          return false;\n        }\n        const requestValue = request.headersList.get(fieldValue);\n        const queryValue = requestQuery.headersList.get(fieldValue);\n        if (requestValue !== queryValue) {\n          return false;\n        }\n      }\n      return true;\n    }, \"#requestMatchesCachedItem\");\n    _internalMatchAll = new WeakSet();\n    internalMatchAll_fn = /* @__PURE__ */ __name(function(request, options, maxResponses = Infinity) {\n      let r = null;\n      if (request !== void 0) {\n        if (request instanceof Request2) {\n          r = request[kState];\n          if (r.method !== \"GET\" && !options.ignoreMethod) {\n            return [];\n          }\n        } else if (typeof request === \"string\") {\n          r = new Request2(request)[kState];\n        }\n      }\n      const responses = [];\n      if (request === void 0) {\n        for (const requestResponse of __privateGet(this, _relevantRequestResponseList)) {\n          responses.push(requestResponse[1]);\n        }\n      } else {\n        const requestResponses = __privateMethod(this, _queryCache, queryCache_fn).call(this, r, options);\n        for (const requestResponse of requestResponses) {\n          responses.push(requestResponse[1]);\n        }\n      }\n      const responseList = [];\n      for (const response of responses) {\n        const responseObject = fromInnerResponse2(response, \"immutable\");\n        responseList.push(responseObject.clone());\n        if (responseList.length >= maxResponses) {\n          break;\n        }\n      }\n      return Object.freeze(responseList);\n    }, \"#internalMatchAll\");\n    __name(_Cache, \"Cache\");\n    var Cache = _Cache;\n    Object.defineProperties(Cache.prototype, {\n      [Symbol.toStringTag]: {\n        value: \"Cache\",\n        configurable: true\n      },\n      match: kEnumerableProperty,\n      matchAll: kEnumerableProperty,\n      add: kEnumerableProperty,\n      addAll: kEnumerableProperty,\n      put: kEnumerableProperty,\n      delete: kEnumerableProperty,\n      keys: kEnumerableProperty\n    });\n    var cacheQueryOptionConverters = [\n      {\n        key: \"ignoreSearch\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"ignoreMethod\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"ignoreVary\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      }\n    ];\n    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);\n    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n      ...cacheQueryOptionConverters,\n      {\n        key: \"cacheName\",\n        converter: webidl.converters.DOMString\n      }\n    ]);\n    webidl.converters.Response = webidl.interfaceConverter(Response2);\n    webidl.converters[\"sequence<RequestInfo>\"] = webidl.sequenceConverter(\n      webidl.converters.RequestInfo\n    );\n    module2.exports = {\n      Cache\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/cachestorage.js\nvar require_cachestorage = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cache/cachestorage.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kConstruct } = require_symbols4();\n    var { Cache } = require_cache();\n    var { webidl } = require_webidl();\n    var { kEnumerableProperty } = require_util();\n    var _caches;\n    var _CacheStorage = class _CacheStorage {\n      constructor() {\n        /**\n         * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n         * @type {Map<string, import('./cache').requestResponseList}\n         */\n        __privateAdd(this, _caches, /* @__PURE__ */ new Map());\n        if (arguments[0] !== kConstruct) {\n          webidl.illegalConstructor();\n        }\n        webidl.util.markAsUncloneable(this);\n      }\n      async match(request, options = {}) {\n        webidl.brandCheck(this, _CacheStorage);\n        webidl.argumentLengthCheck(arguments, 1, \"CacheStorage.match\");\n        request = webidl.converters.RequestInfo(request);\n        options = webidl.converters.MultiCacheQueryOptions(options);\n        if (options.cacheName != null) {\n          if (__privateGet(this, _caches).has(options.cacheName)) {\n            const cacheList = __privateGet(this, _caches).get(options.cacheName);\n            const cache = new Cache(kConstruct, cacheList);\n            return await cache.match(request, options);\n          }\n        } else {\n          for (const cacheList of __privateGet(this, _caches).values()) {\n            const cache = new Cache(kConstruct, cacheList);\n            const response = await cache.match(request, options);\n            if (response !== void 0) {\n              return response;\n            }\n          }\n        }\n      }\n      /**\n       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n       * @param {string} cacheName\n       * @returns {Promise<boolean>}\n       */\n      async has(cacheName) {\n        webidl.brandCheck(this, _CacheStorage);\n        const prefix = \"CacheStorage.has\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        cacheName = webidl.converters.DOMString(cacheName, prefix, \"cacheName\");\n        return __privateGet(this, _caches).has(cacheName);\n      }\n      /**\n       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n       * @param {string} cacheName\n       * @returns {Promise<Cache>}\n       */\n      async open(cacheName) {\n        webidl.brandCheck(this, _CacheStorage);\n        const prefix = \"CacheStorage.open\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        cacheName = webidl.converters.DOMString(cacheName, prefix, \"cacheName\");\n        if (__privateGet(this, _caches).has(cacheName)) {\n          const cache2 = __privateGet(this, _caches).get(cacheName);\n          return new Cache(kConstruct, cache2);\n        }\n        const cache = [];\n        __privateGet(this, _caches).set(cacheName, cache);\n        return new Cache(kConstruct, cache);\n      }\n      /**\n       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n       * @param {string} cacheName\n       * @returns {Promise<boolean>}\n       */\n      async delete(cacheName) {\n        webidl.brandCheck(this, _CacheStorage);\n        const prefix = \"CacheStorage.delete\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        cacheName = webidl.converters.DOMString(cacheName, prefix, \"cacheName\");\n        return __privateGet(this, _caches).delete(cacheName);\n      }\n      /**\n       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n       * @returns {Promise<string[]>}\n       */\n      async keys() {\n        webidl.brandCheck(this, _CacheStorage);\n        const keys = __privateGet(this, _caches).keys();\n        return [...keys];\n      }\n    };\n    _caches = new WeakMap();\n    __name(_CacheStorage, \"CacheStorage\");\n    var CacheStorage = _CacheStorage;\n    Object.defineProperties(CacheStorage.prototype, {\n      [Symbol.toStringTag]: {\n        value: \"CacheStorage\",\n        configurable: true\n      },\n      match: kEnumerableProperty,\n      has: kEnumerableProperty,\n      open: kEnumerableProperty,\n      delete: kEnumerableProperty,\n      keys: kEnumerableProperty\n    });\n    module2.exports = {\n      CacheStorage\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/constants.js\nvar require_constants4 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/constants.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var maxAttributeValueSize = 1024;\n    var maxNameValuePairSize = 4096;\n    module2.exports = {\n      maxAttributeValueSize,\n      maxNameValuePairSize\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/util.js\nvar require_util6 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    function isCTLExcludingHtab(value) {\n      for (let i = 0; i < value.length; ++i) {\n        const code = value.charCodeAt(i);\n        if (code >= 0 && code <= 8 || code >= 10 && code <= 31 || code === 127) {\n          return true;\n        }\n      }\n      return false;\n    }\n    __name(isCTLExcludingHtab, \"isCTLExcludingHtab\");\n    function validateCookieName(name) {\n      for (let i = 0; i < name.length; ++i) {\n        const code = name.charCodeAt(i);\n        if (code < 33 || // exclude CTLs (0-31), SP and HT\n        code > 126 || // exclude non-ascii and DEL\n        code === 34 || // \"\n        code === 40 || // (\n        code === 41 || // )\n        code === 60 || // <\n        code === 62 || // >\n        code === 64 || // @\n        code === 44 || // ,\n        code === 59 || // ;\n        code === 58 || // :\n        code === 92 || // \\\n        code === 47 || // /\n        code === 91 || // [\n        code === 93 || // ]\n        code === 63 || // ?\n        code === 61 || // =\n        code === 123 || // {\n        code === 125) {\n          throw new Error(\"Invalid cookie name\");\n        }\n      }\n    }\n    __name(validateCookieName, \"validateCookieName\");\n    function validateCookieValue(value) {\n      let len = value.length;\n      let i = 0;\n      if (value[0] === '\"') {\n        if (len === 1 || value[len - 1] !== '\"') {\n          throw new Error(\"Invalid cookie value\");\n        }\n        --len;\n        ++i;\n      }\n      while (i < len) {\n        const code = value.charCodeAt(i++);\n        if (code < 33 || // exclude CTLs (0-31)\n        code > 126 || // non-ascii and DEL (127)\n        code === 34 || // \"\n        code === 44 || // ,\n        code === 59 || // ;\n        code === 92) {\n          throw new Error(\"Invalid cookie value\");\n        }\n      }\n    }\n    __name(validateCookieValue, \"validateCookieValue\");\n    function validateCookiePath(path) {\n      for (let i = 0; i < path.length; ++i) {\n        const code = path.charCodeAt(i);\n        if (code < 32 || // exclude CTLs (0-31)\n        code === 127 || // DEL\n        code === 59) {\n          throw new Error(\"Invalid cookie path\");\n        }\n      }\n    }\n    __name(validateCookiePath, \"validateCookiePath\");\n    function validateCookieDomain(domain) {\n      if (domain.startsWith(\"-\") || domain.endsWith(\".\") || domain.endsWith(\"-\")) {\n        throw new Error(\"Invalid cookie domain\");\n      }\n    }\n    __name(validateCookieDomain, \"validateCookieDomain\");\n    var IMFDays = [\n      \"Sun\",\n      \"Mon\",\n      \"Tue\",\n      \"Wed\",\n      \"Thu\",\n      \"Fri\",\n      \"Sat\"\n    ];\n    var IMFMonths = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n    var IMFPaddedNumbers = Array(61).fill(0).map((_, i) => i.toString().padStart(2, \"0\"));\n    function toIMFDate(date) {\n      if (typeof date === \"number\") {\n        date = new Date(date);\n      }\n      return `${IMFDays[date.getUTCDay()]}, ${IMFPaddedNumbers[date.getUTCDate()]} ${IMFMonths[date.getUTCMonth()]} ${date.getUTCFullYear()} ${IMFPaddedNumbers[date.getUTCHours()]}:${IMFPaddedNumbers[date.getUTCMinutes()]}:${IMFPaddedNumbers[date.getUTCSeconds()]} GMT`;\n    }\n    __name(toIMFDate, \"toIMFDate\");\n    function validateCookieMaxAge(maxAge) {\n      if (maxAge < 0) {\n        throw new Error(\"Invalid cookie max-age\");\n      }\n    }\n    __name(validateCookieMaxAge, \"validateCookieMaxAge\");\n    function stringify(cookie) {\n      if (cookie.name.length === 0) {\n        return null;\n      }\n      validateCookieName(cookie.name);\n      validateCookieValue(cookie.value);\n      const out = [`${cookie.name}=${cookie.value}`];\n      if (cookie.name.startsWith(\"__Secure-\")) {\n        cookie.secure = true;\n      }\n      if (cookie.name.startsWith(\"__Host-\")) {\n        cookie.secure = true;\n        cookie.domain = null;\n        cookie.path = \"/\";\n      }\n      if (cookie.secure) {\n        out.push(\"Secure\");\n      }\n      if (cookie.httpOnly) {\n        out.push(\"HttpOnly\");\n      }\n      if (typeof cookie.maxAge === \"number\") {\n        validateCookieMaxAge(cookie.maxAge);\n        out.push(`Max-Age=${cookie.maxAge}`);\n      }\n      if (cookie.domain) {\n        validateCookieDomain(cookie.domain);\n        out.push(`Domain=${cookie.domain}`);\n      }\n      if (cookie.path) {\n        validateCookiePath(cookie.path);\n        out.push(`Path=${cookie.path}`);\n      }\n      if (cookie.expires && cookie.expires.toString() !== \"Invalid Date\") {\n        out.push(`Expires=${toIMFDate(cookie.expires)}`);\n      }\n      if (cookie.sameSite) {\n        out.push(`SameSite=${cookie.sameSite}`);\n      }\n      for (const part of cookie.unparsed) {\n        if (!part.includes(\"=\")) {\n          throw new Error(\"Invalid unparsed\");\n        }\n        const [key, ...value] = part.split(\"=\");\n        out.push(`${key.trim()}=${value.join(\"=\")}`);\n      }\n      return out.join(\"; \");\n    }\n    __name(stringify, \"stringify\");\n    module2.exports = {\n      isCTLExcludingHtab,\n      validateCookieName,\n      validateCookiePath,\n      validateCookieValue,\n      toIMFDate,\n      stringify\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/parse.js\nvar require_parse = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/parse.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();\n    var { isCTLExcludingHtab } = require_util6();\n    var { collectASequenceOfCodePointsFast } = require_data_url();\n    var assert = require(\"assert\");\n    function parseSetCookie(header) {\n      if (isCTLExcludingHtab(header)) {\n        return null;\n      }\n      let nameValuePair = \"\";\n      let unparsedAttributes = \"\";\n      let name = \"\";\n      let value = \"\";\n      if (header.includes(\";\")) {\n        const position = { position: 0 };\n        nameValuePair = collectASequenceOfCodePointsFast(\";\", header, position);\n        unparsedAttributes = header.slice(position.position);\n      } else {\n        nameValuePair = header;\n      }\n      if (!nameValuePair.includes(\"=\")) {\n        value = nameValuePair;\n      } else {\n        const position = { position: 0 };\n        name = collectASequenceOfCodePointsFast(\n          \"=\",\n          nameValuePair,\n          position\n        );\n        value = nameValuePair.slice(position.position + 1);\n      }\n      name = name.trim();\n      value = value.trim();\n      if (name.length + value.length > maxNameValuePairSize) {\n        return null;\n      }\n      return {\n        name,\n        value,\n        ...parseUnparsedAttributes(unparsedAttributes)\n      };\n    }\n    __name(parseSetCookie, \"parseSetCookie\");\n    function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {\n      if (unparsedAttributes.length === 0) {\n        return cookieAttributeList;\n      }\n      assert(unparsedAttributes[0] === \";\");\n      unparsedAttributes = unparsedAttributes.slice(1);\n      let cookieAv = \"\";\n      if (unparsedAttributes.includes(\";\")) {\n        cookieAv = collectASequenceOfCodePointsFast(\n          \";\",\n          unparsedAttributes,\n          { position: 0 }\n        );\n        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);\n      } else {\n        cookieAv = unparsedAttributes;\n        unparsedAttributes = \"\";\n      }\n      let attributeName = \"\";\n      let attributeValue = \"\";\n      if (cookieAv.includes(\"=\")) {\n        const position = { position: 0 };\n        attributeName = collectASequenceOfCodePointsFast(\n          \"=\",\n          cookieAv,\n          position\n        );\n        attributeValue = cookieAv.slice(position.position + 1);\n      } else {\n        attributeName = cookieAv;\n      }\n      attributeName = attributeName.trim();\n      attributeValue = attributeValue.trim();\n      if (attributeValue.length > maxAttributeValueSize) {\n        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n      }\n      const attributeNameLowercase = attributeName.toLowerCase();\n      if (attributeNameLowercase === \"expires\") {\n        const expiryTime = new Date(attributeValue);\n        cookieAttributeList.expires = expiryTime;\n      } else if (attributeNameLowercase === \"max-age\") {\n        const charCode = attributeValue.charCodeAt(0);\n        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== \"-\") {\n          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n        }\n        if (!/^\\d+$/.test(attributeValue)) {\n          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n        }\n        const deltaSeconds = Number(attributeValue);\n        cookieAttributeList.maxAge = deltaSeconds;\n      } else if (attributeNameLowercase === \"domain\") {\n        let cookieDomain = attributeValue;\n        if (cookieDomain[0] === \".\") {\n          cookieDomain = cookieDomain.slice(1);\n        }\n        cookieDomain = cookieDomain.toLowerCase();\n        cookieAttributeList.domain = cookieDomain;\n      } else if (attributeNameLowercase === \"path\") {\n        let cookiePath = \"\";\n        if (attributeValue.length === 0 || attributeValue[0] !== \"/\") {\n          cookiePath = \"/\";\n        } else {\n          cookiePath = attributeValue;\n        }\n        cookieAttributeList.path = cookiePath;\n      } else if (attributeNameLowercase === \"secure\") {\n        cookieAttributeList.secure = true;\n      } else if (attributeNameLowercase === \"httponly\") {\n        cookieAttributeList.httpOnly = true;\n      } else if (attributeNameLowercase === \"samesite\") {\n        let enforcement = \"Default\";\n        const attributeValueLowercase = attributeValue.toLowerCase();\n        if (attributeValueLowercase.includes(\"none\")) {\n          enforcement = \"None\";\n        }\n        if (attributeValueLowercase.includes(\"strict\")) {\n          enforcement = \"Strict\";\n        }\n        if (attributeValueLowercase.includes(\"lax\")) {\n          enforcement = \"Lax\";\n        }\n        cookieAttributeList.sameSite = enforcement;\n      } else {\n        cookieAttributeList.unparsed ??= [];\n        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);\n      }\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);\n    }\n    __name(parseUnparsedAttributes, \"parseUnparsedAttributes\");\n    module2.exports = {\n      parseSetCookie,\n      parseUnparsedAttributes\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/index.js\nvar require_cookies = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/cookies/index.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { parseSetCookie } = require_parse();\n    var { stringify } = require_util6();\n    var { webidl } = require_webidl();\n    var { Headers: Headers2 } = require_headers();\n    function getCookies(headers) {\n      webidl.argumentLengthCheck(arguments, 1, \"getCookies\");\n      webidl.brandCheck(headers, Headers2, { strict: false });\n      const cookie = headers.get(\"cookie\");\n      const out = {};\n      if (!cookie) {\n        return out;\n      }\n      for (const piece of cookie.split(\";\")) {\n        const [name, ...value] = piece.split(\"=\");\n        out[name.trim()] = value.join(\"=\");\n      }\n      return out;\n    }\n    __name(getCookies, \"getCookies\");\n    function deleteCookie(headers, name, attributes) {\n      webidl.brandCheck(headers, Headers2, { strict: false });\n      const prefix = \"deleteCookie\";\n      webidl.argumentLengthCheck(arguments, 2, prefix);\n      name = webidl.converters.DOMString(name, prefix, \"name\");\n      attributes = webidl.converters.DeleteCookieAttributes(attributes);\n      setCookie(headers, {\n        name,\n        value: \"\",\n        expires: /* @__PURE__ */ new Date(0),\n        ...attributes\n      });\n    }\n    __name(deleteCookie, \"deleteCookie\");\n    function getSetCookies(headers) {\n      webidl.argumentLengthCheck(arguments, 1, \"getSetCookies\");\n      webidl.brandCheck(headers, Headers2, { strict: false });\n      const cookies = headers.getSetCookie();\n      if (!cookies) {\n        return [];\n      }\n      return cookies.map((pair) => parseSetCookie(pair));\n    }\n    __name(getSetCookies, \"getSetCookies\");\n    function setCookie(headers, cookie) {\n      webidl.argumentLengthCheck(arguments, 2, \"setCookie\");\n      webidl.brandCheck(headers, Headers2, { strict: false });\n      cookie = webidl.converters.Cookie(cookie);\n      const str = stringify(cookie);\n      if (str) {\n        headers.append(\"Set-Cookie\", str);\n      }\n    }\n    __name(setCookie, \"setCookie\");\n    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([\n      {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"path\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"domain\",\n        defaultValue: () => null\n      }\n    ]);\n    webidl.converters.Cookie = webidl.dictionaryConverter([\n      {\n        converter: webidl.converters.DOMString,\n        key: \"name\"\n      },\n      {\n        converter: webidl.converters.DOMString,\n        key: \"value\"\n      },\n      {\n        converter: webidl.nullableConverter((value) => {\n          if (typeof value === \"number\") {\n            return webidl.converters[\"unsigned long long\"](value);\n          }\n          return new Date(value);\n        }),\n        key: \"expires\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.nullableConverter(webidl.converters[\"long long\"]),\n        key: \"maxAge\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"domain\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.nullableConverter(webidl.converters.DOMString),\n        key: \"path\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.nullableConverter(webidl.converters.boolean),\n        key: \"secure\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.nullableConverter(webidl.converters.boolean),\n        key: \"httpOnly\",\n        defaultValue: () => null\n      },\n      {\n        converter: webidl.converters.USVString,\n        key: \"sameSite\",\n        allowedValues: [\"Strict\", \"Lax\", \"None\"]\n      },\n      {\n        converter: webidl.sequenceConverter(webidl.converters.DOMString),\n        key: \"unparsed\",\n        defaultValue: () => new Array(0)\n      }\n    ]);\n    module2.exports = {\n      getCookies,\n      deleteCookie,\n      getSetCookies,\n      setCookie\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/events.js\nvar require_events = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/events.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { webidl } = require_webidl();\n    var { kEnumerableProperty } = require_util();\n    var { kConstruct } = require_symbols();\n    var { MessagePort } = require(\"worker_threads\");\n    var _eventInit;\n    var _MessageEvent = class _MessageEvent extends Event {\n      constructor(type, eventInitDict = {}) {\n        var __super = (...args) => {\n          super(...args);\n          __privateAdd(this, _eventInit, void 0);\n          return this;\n        };\n        if (type === kConstruct) {\n          __super(arguments[1], arguments[2]);\n          webidl.util.markAsUncloneable(this);\n          return;\n        }\n        const prefix = \"MessageEvent constructor\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        type = webidl.converters.DOMString(type, prefix, \"type\");\n        eventInitDict = webidl.converters.MessageEventInit(eventInitDict, prefix, \"eventInitDict\");\n        __super(type, eventInitDict);\n        __privateSet(this, _eventInit, eventInitDict);\n        webidl.util.markAsUncloneable(this);\n      }\n      get data() {\n        webidl.brandCheck(this, _MessageEvent);\n        return __privateGet(this, _eventInit).data;\n      }\n      get origin() {\n        webidl.brandCheck(this, _MessageEvent);\n        return __privateGet(this, _eventInit).origin;\n      }\n      get lastEventId() {\n        webidl.brandCheck(this, _MessageEvent);\n        return __privateGet(this, _eventInit).lastEventId;\n      }\n      get source() {\n        webidl.brandCheck(this, _MessageEvent);\n        return __privateGet(this, _eventInit).source;\n      }\n      get ports() {\n        webidl.brandCheck(this, _MessageEvent);\n        if (!Object.isFrozen(__privateGet(this, _eventInit).ports)) {\n          Object.freeze(__privateGet(this, _eventInit).ports);\n        }\n        return __privateGet(this, _eventInit).ports;\n      }\n      initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = \"\", lastEventId = \"\", source = null, ports = []) {\n        webidl.brandCheck(this, _MessageEvent);\n        webidl.argumentLengthCheck(arguments, 1, \"MessageEvent.initMessageEvent\");\n        return new _MessageEvent(type, {\n          bubbles,\n          cancelable,\n          data,\n          origin,\n          lastEventId,\n          source,\n          ports\n        });\n      }\n      static createFastMessageEvent(type, init) {\n        const messageEvent = new _MessageEvent(kConstruct, type, init);\n        __privateSet(messageEvent, _eventInit, init);\n        __privateGet(messageEvent, _eventInit).data ??= null;\n        __privateGet(messageEvent, _eventInit).origin ??= \"\";\n        __privateGet(messageEvent, _eventInit).lastEventId ??= \"\";\n        __privateGet(messageEvent, _eventInit).source ??= null;\n        __privateGet(messageEvent, _eventInit).ports ??= [];\n        return messageEvent;\n      }\n    };\n    _eventInit = new WeakMap();\n    __name(_MessageEvent, \"MessageEvent\");\n    var MessageEvent = _MessageEvent;\n    var { createFastMessageEvent } = MessageEvent;\n    delete MessageEvent.createFastMessageEvent;\n    var _eventInit2;\n    var _CloseEvent = class _CloseEvent extends Event {\n      constructor(type, eventInitDict = {}) {\n        const prefix = \"CloseEvent constructor\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        type = webidl.converters.DOMString(type, prefix, \"type\");\n        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);\n        super(type, eventInitDict);\n        __privateAdd(this, _eventInit2, void 0);\n        __privateSet(this, _eventInit2, eventInitDict);\n        webidl.util.markAsUncloneable(this);\n      }\n      get wasClean() {\n        webidl.brandCheck(this, _CloseEvent);\n        return __privateGet(this, _eventInit2).wasClean;\n      }\n      get code() {\n        webidl.brandCheck(this, _CloseEvent);\n        return __privateGet(this, _eventInit2).code;\n      }\n      get reason() {\n        webidl.brandCheck(this, _CloseEvent);\n        return __privateGet(this, _eventInit2).reason;\n      }\n    };\n    _eventInit2 = new WeakMap();\n    __name(_CloseEvent, \"CloseEvent\");\n    var CloseEvent = _CloseEvent;\n    var _eventInit3;\n    var _ErrorEvent = class _ErrorEvent extends Event {\n      constructor(type, eventInitDict) {\n        const prefix = \"ErrorEvent constructor\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        super(type, eventInitDict);\n        __privateAdd(this, _eventInit3, void 0);\n        webidl.util.markAsUncloneable(this);\n        type = webidl.converters.DOMString(type, prefix, \"type\");\n        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});\n        __privateSet(this, _eventInit3, eventInitDict);\n      }\n      get message() {\n        webidl.brandCheck(this, _ErrorEvent);\n        return __privateGet(this, _eventInit3).message;\n      }\n      get filename() {\n        webidl.brandCheck(this, _ErrorEvent);\n        return __privateGet(this, _eventInit3).filename;\n      }\n      get lineno() {\n        webidl.brandCheck(this, _ErrorEvent);\n        return __privateGet(this, _eventInit3).lineno;\n      }\n      get colno() {\n        webidl.brandCheck(this, _ErrorEvent);\n        return __privateGet(this, _eventInit3).colno;\n      }\n      get error() {\n        webidl.brandCheck(this, _ErrorEvent);\n        return __privateGet(this, _eventInit3).error;\n      }\n    };\n    _eventInit3 = new WeakMap();\n    __name(_ErrorEvent, \"ErrorEvent\");\n    var ErrorEvent = _ErrorEvent;\n    Object.defineProperties(MessageEvent.prototype, {\n      [Symbol.toStringTag]: {\n        value: \"MessageEvent\",\n        configurable: true\n      },\n      data: kEnumerableProperty,\n      origin: kEnumerableProperty,\n      lastEventId: kEnumerableProperty,\n      source: kEnumerableProperty,\n      ports: kEnumerableProperty,\n      initMessageEvent: kEnumerableProperty\n    });\n    Object.defineProperties(CloseEvent.prototype, {\n      [Symbol.toStringTag]: {\n        value: \"CloseEvent\",\n        configurable: true\n      },\n      reason: kEnumerableProperty,\n      code: kEnumerableProperty,\n      wasClean: kEnumerableProperty\n    });\n    Object.defineProperties(ErrorEvent.prototype, {\n      [Symbol.toStringTag]: {\n        value: \"ErrorEvent\",\n        configurable: true\n      },\n      message: kEnumerableProperty,\n      filename: kEnumerableProperty,\n      lineno: kEnumerableProperty,\n      colno: kEnumerableProperty,\n      error: kEnumerableProperty\n    });\n    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);\n    webidl.converters[\"sequence<MessagePort>\"] = webidl.sequenceConverter(\n      webidl.converters.MessagePort\n    );\n    var eventInit = [\n      {\n        key: \"bubbles\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"cancelable\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"composed\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      }\n    ];\n    webidl.converters.MessageEventInit = webidl.dictionaryConverter([\n      ...eventInit,\n      {\n        key: \"data\",\n        converter: webidl.converters.any,\n        defaultValue: () => null\n      },\n      {\n        key: \"origin\",\n        converter: webidl.converters.USVString,\n        defaultValue: () => \"\"\n      },\n      {\n        key: \"lastEventId\",\n        converter: webidl.converters.DOMString,\n        defaultValue: () => \"\"\n      },\n      {\n        key: \"source\",\n        // Node doesn't implement WindowProxy or ServiceWorker, so the only\n        // valid value for source is a MessagePort.\n        converter: webidl.nullableConverter(webidl.converters.MessagePort),\n        defaultValue: () => null\n      },\n      {\n        key: \"ports\",\n        converter: webidl.converters[\"sequence<MessagePort>\"],\n        defaultValue: () => new Array(0)\n      }\n    ]);\n    webidl.converters.CloseEventInit = webidl.dictionaryConverter([\n      ...eventInit,\n      {\n        key: \"wasClean\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"code\",\n        converter: webidl.converters[\"unsigned short\"],\n        defaultValue: () => 0\n      },\n      {\n        key: \"reason\",\n        converter: webidl.converters.USVString,\n        defaultValue: () => \"\"\n      }\n    ]);\n    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([\n      ...eventInit,\n      {\n        key: \"message\",\n        converter: webidl.converters.DOMString,\n        defaultValue: () => \"\"\n      },\n      {\n        key: \"filename\",\n        converter: webidl.converters.USVString,\n        defaultValue: () => \"\"\n      },\n      {\n        key: \"lineno\",\n        converter: webidl.converters[\"unsigned long\"],\n        defaultValue: () => 0\n      },\n      {\n        key: \"colno\",\n        converter: webidl.converters[\"unsigned long\"],\n        defaultValue: () => 0\n      },\n      {\n        key: \"error\",\n        converter: webidl.converters.any\n      }\n    ]);\n    module2.exports = {\n      MessageEvent,\n      CloseEvent,\n      ErrorEvent,\n      createFastMessageEvent\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/constants.js\nvar require_constants5 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/constants.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var uid = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n    var staticPropertyDescriptors = {\n      enumerable: true,\n      writable: false,\n      configurable: false\n    };\n    var states = {\n      CONNECTING: 0,\n      OPEN: 1,\n      CLOSING: 2,\n      CLOSED: 3\n    };\n    var sentCloseFrameState = {\n      NOT_SENT: 0,\n      PROCESSING: 1,\n      SENT: 2\n    };\n    var opcodes = {\n      CONTINUATION: 0,\n      TEXT: 1,\n      BINARY: 2,\n      CLOSE: 8,\n      PING: 9,\n      PONG: 10\n    };\n    var maxUnsigned16Bit = 2 ** 16 - 1;\n    var parserStates = {\n      INFO: 0,\n      PAYLOADLENGTH_16: 2,\n      PAYLOADLENGTH_64: 3,\n      READ_DATA: 4\n    };\n    var emptyBuffer = Buffer.allocUnsafe(0);\n    var sendHints = {\n      string: 1,\n      typedArray: 2,\n      arrayBuffer: 3,\n      blob: 4\n    };\n    module2.exports = {\n      uid,\n      sentCloseFrameState,\n      staticPropertyDescriptors,\n      states,\n      opcodes,\n      maxUnsigned16Bit,\n      parserStates,\n      emptyBuffer,\n      sendHints\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/symbols.js\nvar require_symbols5 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/symbols.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    module2.exports = {\n      kWebSocketURL: Symbol(\"url\"),\n      kReadyState: Symbol(\"ready state\"),\n      kController: Symbol(\"controller\"),\n      kResponse: Symbol(\"response\"),\n      kBinaryType: Symbol(\"binary type\"),\n      kSentClose: Symbol(\"sent close\"),\n      kReceivedClose: Symbol(\"received close\"),\n      kByteParser: Symbol(\"byte parser\")\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/util.js\nvar require_util7 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();\n    var { states, opcodes } = require_constants5();\n    var { ErrorEvent, createFastMessageEvent } = require_events();\n    var { isUtf8 } = require(\"buffer\");\n    var { collectASequenceOfCodePointsFast, removeHTTPWhitespace } = require_data_url();\n    function isConnecting(ws) {\n      return ws[kReadyState] === states.CONNECTING;\n    }\n    __name(isConnecting, \"isConnecting\");\n    function isEstablished(ws) {\n      return ws[kReadyState] === states.OPEN;\n    }\n    __name(isEstablished, \"isEstablished\");\n    function isClosing(ws) {\n      return ws[kReadyState] === states.CLOSING;\n    }\n    __name(isClosing, \"isClosing\");\n    function isClosed(ws) {\n      return ws[kReadyState] === states.CLOSED;\n    }\n    __name(isClosed, \"isClosed\");\n    function fireEvent(e, target, eventFactory = (type, init) => new Event(type, init), eventInitDict = {}) {\n      const event = eventFactory(e, eventInitDict);\n      target.dispatchEvent(event);\n    }\n    __name(fireEvent, \"fireEvent\");\n    function websocketMessageReceived(ws, type, data) {\n      if (ws[kReadyState] !== states.OPEN) {\n        return;\n      }\n      let dataForEvent;\n      if (type === opcodes.TEXT) {\n        try {\n          dataForEvent = utf8Decode(data);\n        } catch {\n          failWebsocketConnection(ws, \"Received invalid UTF-8 in text frame.\");\n          return;\n        }\n      } else if (type === opcodes.BINARY) {\n        if (ws[kBinaryType] === \"blob\") {\n          dataForEvent = new Blob([data]);\n        } else {\n          dataForEvent = toArrayBuffer(data);\n        }\n      }\n      fireEvent(\"message\", ws, createFastMessageEvent, {\n        origin: ws[kWebSocketURL].origin,\n        data: dataForEvent\n      });\n    }\n    __name(websocketMessageReceived, \"websocketMessageReceived\");\n    function toArrayBuffer(buffer) {\n      if (buffer.byteLength === buffer.buffer.byteLength) {\n        return buffer.buffer;\n      }\n      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n    }\n    __name(toArrayBuffer, \"toArrayBuffer\");\n    function isValidSubprotocol(protocol) {\n      if (protocol.length === 0) {\n        return false;\n      }\n      for (let i = 0; i < protocol.length; ++i) {\n        const code = protocol.charCodeAt(i);\n        if (code < 33 || // CTL, contains SP (0x20) and HT (0x09)\n        code > 126 || code === 34 || // \"\n        code === 40 || // (\n        code === 41 || // )\n        code === 44 || // ,\n        code === 47 || // /\n        code === 58 || // :\n        code === 59 || // ;\n        code === 60 || // <\n        code === 61 || // =\n        code === 62 || // >\n        code === 63 || // ?\n        code === 64 || // @\n        code === 91 || // [\n        code === 92 || // \\\n        code === 93 || // ]\n        code === 123 || // {\n        code === 125) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidSubprotocol, \"isValidSubprotocol\");\n    function isValidStatusCode(code) {\n      if (code >= 1e3 && code < 1015) {\n        return code !== 1004 && // reserved\n        code !== 1005 && // \"MUST NOT be set as a status code\"\n        code !== 1006;\n      }\n      return code >= 3e3 && code <= 4999;\n    }\n    __name(isValidStatusCode, \"isValidStatusCode\");\n    function failWebsocketConnection(ws, reason) {\n      const { [kController]: controller, [kResponse]: response } = ws;\n      controller.abort();\n      if (response?.socket && !response.socket.destroyed) {\n        response.socket.destroy();\n      }\n      if (reason) {\n        fireEvent(\"error\", ws, (type, init) => new ErrorEvent(type, init), {\n          error: new Error(reason),\n          message: reason\n        });\n      }\n    }\n    __name(failWebsocketConnection, \"failWebsocketConnection\");\n    function isControlFrame(opcode) {\n      return opcode === opcodes.CLOSE || opcode === opcodes.PING || opcode === opcodes.PONG;\n    }\n    __name(isControlFrame, \"isControlFrame\");\n    function isContinuationFrame(opcode) {\n      return opcode === opcodes.CONTINUATION;\n    }\n    __name(isContinuationFrame, \"isContinuationFrame\");\n    function isTextBinaryFrame(opcode) {\n      return opcode === opcodes.TEXT || opcode === opcodes.BINARY;\n    }\n    __name(isTextBinaryFrame, \"isTextBinaryFrame\");\n    function isValidOpcode(opcode) {\n      return isTextBinaryFrame(opcode) || isContinuationFrame(opcode) || isControlFrame(opcode);\n    }\n    __name(isValidOpcode, \"isValidOpcode\");\n    function parseExtensions(extensions) {\n      const position = { position: 0 };\n      const extensionList = /* @__PURE__ */ new Map();\n      while (position.position < extensions.length) {\n        const pair = collectASequenceOfCodePointsFast(\";\", extensions, position);\n        const [name, value = \"\"] = pair.split(\"=\");\n        extensionList.set(\n          removeHTTPWhitespace(name, true, false),\n          removeHTTPWhitespace(value, false, true)\n        );\n        position.position++;\n      }\n      return extensionList;\n    }\n    __name(parseExtensions, \"parseExtensions\");\n    function isValidClientWindowBits(value) {\n      for (let i = 0; i < value.length; i++) {\n        const byte = value.charCodeAt(i);\n        if (byte < 48 || byte > 57) {\n          return false;\n        }\n      }\n      return true;\n    }\n    __name(isValidClientWindowBits, \"isValidClientWindowBits\");\n    var hasIntl = typeof define_process_default.versions.icu === \"string\";\n    var fatalDecoder = hasIntl ? new TextDecoder(\"utf-8\", { fatal: true }) : void 0;\n    var utf8Decode = hasIntl ? fatalDecoder.decode.bind(fatalDecoder) : function(buffer) {\n      if (isUtf8(buffer)) {\n        return buffer.toString(\"utf-8\");\n      }\n      throw new TypeError(\"Invalid utf-8 received.\");\n    };\n    module2.exports = {\n      isConnecting,\n      isEstablished,\n      isClosing,\n      isClosed,\n      fireEvent,\n      isValidSubprotocol,\n      isValidStatusCode,\n      failWebsocketConnection,\n      websocketMessageReceived,\n      utf8Decode,\n      isControlFrame,\n      isContinuationFrame,\n      isTextBinaryFrame,\n      isValidOpcode,\n      parseExtensions,\n      isValidClientWindowBits\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/frame.js\nvar require_frame = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/frame.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { maxUnsigned16Bit } = require_constants5();\n    var BUFFER_SIZE = 16386;\n    var crypto;\n    var buffer = null;\n    var bufIdx = BUFFER_SIZE;\n    try {\n      crypto = require(\"crypto\");\n    } catch {\n      crypto = {\n        // not full compatibility, but minimum.\n        randomFillSync: /* @__PURE__ */ __name(function randomFillSync(buffer2, _offset, _size) {\n          for (let i = 0; i < buffer2.length; ++i) {\n            buffer2[i] = Math.random() * 255 | 0;\n          }\n          return buffer2;\n        }, \"randomFillSync\")\n      };\n    }\n    function generateMask() {\n      if (bufIdx === BUFFER_SIZE) {\n        bufIdx = 0;\n        crypto.randomFillSync(buffer ??= Buffer.allocUnsafe(BUFFER_SIZE), 0, BUFFER_SIZE);\n      }\n      return [buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++], buffer[bufIdx++]];\n    }\n    __name(generateMask, \"generateMask\");\n    var _WebsocketFrameSend = class _WebsocketFrameSend {\n      /**\n       * @param {Buffer|undefined} data\n       */\n      constructor(data) {\n        this.frameData = data;\n      }\n      createFrame(opcode) {\n        const frameData = this.frameData;\n        const maskKey = generateMask();\n        const bodyLength = frameData?.byteLength ?? 0;\n        let payloadLength = bodyLength;\n        let offset = 6;\n        if (bodyLength > maxUnsigned16Bit) {\n          offset += 8;\n          payloadLength = 127;\n        } else if (bodyLength > 125) {\n          offset += 2;\n          payloadLength = 126;\n        }\n        const buffer2 = Buffer.allocUnsafe(bodyLength + offset);\n        buffer2[0] = buffer2[1] = 0;\n        buffer2[0] |= 128;\n        buffer2[0] = (buffer2[0] & 240) + opcode;\n        buffer2[offset - 4] = maskKey[0];\n        buffer2[offset - 3] = maskKey[1];\n        buffer2[offset - 2] = maskKey[2];\n        buffer2[offset - 1] = maskKey[3];\n        buffer2[1] = payloadLength;\n        if (payloadLength === 126) {\n          buffer2.writeUInt16BE(bodyLength, 2);\n        } else if (payloadLength === 127) {\n          buffer2[2] = buffer2[3] = 0;\n          buffer2.writeUIntBE(bodyLength, 4, 6);\n        }\n        buffer2[1] |= 128;\n        for (let i = 0; i < bodyLength; ++i) {\n          buffer2[offset + i] = frameData[i] ^ maskKey[i & 3];\n        }\n        return buffer2;\n      }\n    };\n    __name(_WebsocketFrameSend, \"WebsocketFrameSend\");\n    var WebsocketFrameSend = _WebsocketFrameSend;\n    module2.exports = {\n      WebsocketFrameSend\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/connection.js\nvar require_connection = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/connection.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { uid, states, sentCloseFrameState, emptyBuffer, opcodes } = require_constants5();\n    var {\n      kReadyState,\n      kSentClose,\n      kByteParser,\n      kReceivedClose,\n      kResponse\n    } = require_symbols5();\n    var { fireEvent, failWebsocketConnection, isClosing, isClosed, isEstablished, parseExtensions } = require_util7();\n    var { channels } = require_diagnostics();\n    var { CloseEvent } = require_events();\n    var { makeRequest } = require_request();\n    var { fetching } = require_fetch();\n    var { Headers: Headers2, getHeadersList } = require_headers();\n    var { getDecodeSplit } = require_util2();\n    var { WebsocketFrameSend } = require_frame();\n    var crypto;\n    try {\n      crypto = require(\"crypto\");\n    } catch {\n    }\n    function establishWebSocketConnection(url, protocols, client, ws, onEstablish, options) {\n      const requestURL = url;\n      requestURL.protocol = url.protocol === \"ws:\" ? \"http:\" : \"https:\";\n      const request = makeRequest({\n        urlList: [requestURL],\n        client,\n        serviceWorkers: \"none\",\n        referrer: \"no-referrer\",\n        mode: \"websocket\",\n        credentials: \"include\",\n        cache: \"no-store\",\n        redirect: \"error\"\n      });\n      if (options.headers) {\n        const headersList = getHeadersList(new Headers2(options.headers));\n        request.headersList = headersList;\n      }\n      const keyValue = crypto.randomBytes(16).toString(\"base64\");\n      request.headersList.append(\"sec-websocket-key\", keyValue);\n      request.headersList.append(\"sec-websocket-version\", \"13\");\n      for (const protocol of protocols) {\n        request.headersList.append(\"sec-websocket-protocol\", protocol);\n      }\n      const permessageDeflate = \"permessage-deflate; client_max_window_bits\";\n      request.headersList.append(\"sec-websocket-extensions\", permessageDeflate);\n      const controller = fetching({\n        request,\n        useParallelQueue: true,\n        dispatcher: options.dispatcher,\n        processResponse(response) {\n          if (response.type === \"error\" || response.status !== 101) {\n            failWebsocketConnection(ws, \"Received network error or non-101 status code.\");\n            return;\n          }\n          if (protocols.length !== 0 && !response.headersList.get(\"Sec-WebSocket-Protocol\")) {\n            failWebsocketConnection(ws, \"Server did not respond with sent protocols.\");\n            return;\n          }\n          if (response.headersList.get(\"Upgrade\")?.toLowerCase() !== \"websocket\") {\n            failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".');\n            return;\n          }\n          if (response.headersList.get(\"Connection\")?.toLowerCase() !== \"upgrade\") {\n            failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".');\n            return;\n          }\n          const secWSAccept = response.headersList.get(\"Sec-WebSocket-Accept\");\n          const digest = crypto.createHash(\"sha1\").update(keyValue + uid).digest(\"base64\");\n          if (secWSAccept !== digest) {\n            failWebsocketConnection(ws, \"Incorrect hash received in Sec-WebSocket-Accept header.\");\n            return;\n          }\n          const secExtension = response.headersList.get(\"Sec-WebSocket-Extensions\");\n          let extensions;\n          if (secExtension !== null) {\n            extensions = parseExtensions(secExtension);\n            if (!extensions.has(\"permessage-deflate\")) {\n              failWebsocketConnection(ws, \"Sec-WebSocket-Extensions header does not match.\");\n              return;\n            }\n          }\n          const secProtocol = response.headersList.get(\"Sec-WebSocket-Protocol\");\n          if (secProtocol !== null) {\n            const requestProtocols = getDecodeSplit(\"sec-websocket-protocol\", request.headersList);\n            if (!requestProtocols.includes(secProtocol)) {\n              failWebsocketConnection(ws, \"Protocol was not set in the opening handshake.\");\n              return;\n            }\n          }\n          response.socket.on(\"data\", onSocketData);\n          response.socket.on(\"close\", onSocketClose);\n          response.socket.on(\"error\", onSocketError);\n          if (channels.open.hasSubscribers) {\n            channels.open.publish({\n              address: response.socket.address(),\n              protocol: secProtocol,\n              extensions: secExtension\n            });\n          }\n          onEstablish(response, extensions);\n        }\n      });\n      return controller;\n    }\n    __name(establishWebSocketConnection, \"establishWebSocketConnection\");\n    function closeWebSocketConnection(ws, code, reason, reasonByteLength) {\n      if (isClosing(ws) || isClosed(ws)) {\n      } else if (!isEstablished(ws)) {\n        failWebsocketConnection(ws, \"Connection was closed before it was established.\");\n        ws[kReadyState] = states.CLOSING;\n      } else if (ws[kSentClose] === sentCloseFrameState.NOT_SENT) {\n        ws[kSentClose] = sentCloseFrameState.PROCESSING;\n        const frame = new WebsocketFrameSend();\n        if (code !== void 0 && reason === void 0) {\n          frame.frameData = Buffer.allocUnsafe(2);\n          frame.frameData.writeUInt16BE(code, 0);\n        } else if (code !== void 0 && reason !== void 0) {\n          frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);\n          frame.frameData.writeUInt16BE(code, 0);\n          frame.frameData.write(reason, 2, \"utf-8\");\n        } else {\n          frame.frameData = emptyBuffer;\n        }\n        const socket = ws[kResponse].socket;\n        socket.write(frame.createFrame(opcodes.CLOSE));\n        ws[kSentClose] = sentCloseFrameState.SENT;\n        ws[kReadyState] = states.CLOSING;\n      } else {\n        ws[kReadyState] = states.CLOSING;\n      }\n    }\n    __name(closeWebSocketConnection, \"closeWebSocketConnection\");\n    function onSocketData(chunk) {\n      if (!this.ws[kByteParser].write(chunk)) {\n        this.pause();\n      }\n    }\n    __name(onSocketData, \"onSocketData\");\n    function onSocketClose() {\n      const { ws } = this;\n      const { [kResponse]: response } = ws;\n      response.socket.off(\"data\", onSocketData);\n      response.socket.off(\"close\", onSocketClose);\n      response.socket.off(\"error\", onSocketError);\n      const wasClean = ws[kSentClose] === sentCloseFrameState.SENT && ws[kReceivedClose];\n      let code = 1005;\n      let reason = \"\";\n      const result = ws[kByteParser].closingInfo;\n      if (result && !result.error) {\n        code = result.code ?? 1005;\n        reason = result.reason;\n      } else if (!ws[kReceivedClose]) {\n        code = 1006;\n      }\n      ws[kReadyState] = states.CLOSED;\n      fireEvent(\"close\", ws, (type, init) => new CloseEvent(type, init), {\n        wasClean,\n        code,\n        reason\n      });\n      if (channels.close.hasSubscribers) {\n        channels.close.publish({\n          websocket: ws,\n          code,\n          reason\n        });\n      }\n    }\n    __name(onSocketClose, \"onSocketClose\");\n    function onSocketError(error) {\n      const { ws } = this;\n      ws[kReadyState] = states.CLOSING;\n      if (channels.socketError.hasSubscribers) {\n        channels.socketError.publish(error);\n      }\n      this.destroy();\n    }\n    __name(onSocketError, \"onSocketError\");\n    module2.exports = {\n      establishWebSocketConnection,\n      closeWebSocketConnection\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/permessage-deflate.js\nvar require_permessage_deflate = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/permessage-deflate.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { createInflateRaw, Z_DEFAULT_WINDOWBITS } = require(\"zlib\");\n    var { isValidClientWindowBits } = require_util7();\n    var tail = Buffer.from([0, 0, 255, 255]);\n    var kBuffer = Symbol(\"kBuffer\");\n    var kLength = Symbol(\"kLength\");\n    var _inflate, _options;\n    var _PerMessageDeflate = class _PerMessageDeflate {\n      constructor(extensions) {\n        /** @type {import('node:zlib').InflateRaw} */\n        __privateAdd(this, _inflate, void 0);\n        __privateAdd(this, _options, {});\n        __privateGet(this, _options).serverNoContextTakeover = extensions.has(\"server_no_context_takeover\");\n        __privateGet(this, _options).serverMaxWindowBits = extensions.get(\"server_max_window_bits\");\n      }\n      decompress(chunk, fin, callback) {\n        if (!__privateGet(this, _inflate)) {\n          let windowBits = Z_DEFAULT_WINDOWBITS;\n          if (__privateGet(this, _options).serverMaxWindowBits) {\n            if (!isValidClientWindowBits(__privateGet(this, _options).serverMaxWindowBits)) {\n              callback(new Error(\"Invalid server_max_window_bits\"));\n              return;\n            }\n            windowBits = Number.parseInt(__privateGet(this, _options).serverMaxWindowBits);\n          }\n          __privateSet(this, _inflate, createInflateRaw({ windowBits }));\n          __privateGet(this, _inflate)[kBuffer] = [];\n          __privateGet(this, _inflate)[kLength] = 0;\n          __privateGet(this, _inflate).on(\"data\", (data) => {\n            __privateGet(this, _inflate)[kBuffer].push(data);\n            __privateGet(this, _inflate)[kLength] += data.length;\n          });\n          __privateGet(this, _inflate).on(\"error\", (err) => {\n            __privateSet(this, _inflate, null);\n            callback(err);\n          });\n        }\n        __privateGet(this, _inflate).write(chunk);\n        if (fin) {\n          __privateGet(this, _inflate).write(tail);\n        }\n        __privateGet(this, _inflate).flush(() => {\n          const full = Buffer.concat(__privateGet(this, _inflate)[kBuffer], __privateGet(this, _inflate)[kLength]);\n          __privateGet(this, _inflate)[kBuffer].length = 0;\n          __privateGet(this, _inflate)[kLength] = 0;\n          callback(null, full);\n        });\n      }\n    };\n    _inflate = new WeakMap();\n    _options = new WeakMap();\n    __name(_PerMessageDeflate, \"PerMessageDeflate\");\n    var PerMessageDeflate = _PerMessageDeflate;\n    module2.exports = { PerMessageDeflate };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/receiver.js\nvar require_receiver = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/receiver.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Writable } = require(\"stream\");\n    var assert = require(\"assert\");\n    var { parserStates, opcodes, states, emptyBuffer, sentCloseFrameState } = require_constants5();\n    var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();\n    var { channels } = require_diagnostics();\n    var {\n      isValidStatusCode,\n      isValidOpcode,\n      failWebsocketConnection,\n      websocketMessageReceived,\n      utf8Decode,\n      isControlFrame,\n      isTextBinaryFrame,\n      isContinuationFrame\n    } = require_util7();\n    var { WebsocketFrameSend } = require_frame();\n    var { closeWebSocketConnection } = require_connection();\n    var { PerMessageDeflate } = require_permessage_deflate();\n    var _buffers, _byteOffset, _loop, _state, _info, _fragments, _extensions;\n    var _ByteParser = class _ByteParser extends Writable {\n      constructor(ws, extensions) {\n        super();\n        __privateAdd(this, _buffers, []);\n        __privateAdd(this, _byteOffset, 0);\n        __privateAdd(this, _loop, false);\n        __privateAdd(this, _state, parserStates.INFO);\n        __privateAdd(this, _info, {});\n        __privateAdd(this, _fragments, []);\n        /** @type {Map<string, PerMessageDeflate>} */\n        __privateAdd(this, _extensions, void 0);\n        this.ws = ws;\n        __privateSet(this, _extensions, extensions == null ? /* @__PURE__ */ new Map() : extensions);\n        if (__privateGet(this, _extensions).has(\"permessage-deflate\")) {\n          __privateGet(this, _extensions).set(\"permessage-deflate\", new PerMessageDeflate(extensions));\n        }\n      }\n      /**\n       * @param {Buffer} chunk\n       * @param {() => void} callback\n       */\n      _write(chunk, _, callback) {\n        __privateGet(this, _buffers).push(chunk);\n        __privateSet(this, _byteOffset, __privateGet(this, _byteOffset) + chunk.length);\n        __privateSet(this, _loop, true);\n        this.run(callback);\n      }\n      /**\n       * Runs whenever a new chunk is received.\n       * Callback is called whenever there are no more chunks buffering,\n       * or not enough bytes are buffered to parse.\n       */\n      run(callback) {\n        while (__privateGet(this, _loop)) {\n          if (__privateGet(this, _state) === parserStates.INFO) {\n            if (__privateGet(this, _byteOffset) < 2) {\n              return callback();\n            }\n            const buffer = this.consume(2);\n            const fin = (buffer[0] & 128) !== 0;\n            const opcode = buffer[0] & 15;\n            const masked = (buffer[1] & 128) === 128;\n            const fragmented = !fin && opcode !== opcodes.CONTINUATION;\n            const payloadLength = buffer[1] & 127;\n            const rsv1 = buffer[0] & 64;\n            const rsv2 = buffer[0] & 32;\n            const rsv3 = buffer[0] & 16;\n            if (!isValidOpcode(opcode)) {\n              failWebsocketConnection(this.ws, \"Invalid opcode received\");\n              return callback();\n            }\n            if (masked) {\n              failWebsocketConnection(this.ws, \"Frame cannot be masked\");\n              return callback();\n            }\n            if (rsv1 !== 0 && !__privateGet(this, _extensions).has(\"permessage-deflate\")) {\n              failWebsocketConnection(this.ws, \"Expected RSV1 to be clear.\");\n              return;\n            }\n            if (rsv2 !== 0 || rsv3 !== 0) {\n              failWebsocketConnection(this.ws, \"RSV1, RSV2, RSV3 must be clear\");\n              return;\n            }\n            if (fragmented && !isTextBinaryFrame(opcode)) {\n              failWebsocketConnection(this.ws, \"Invalid frame type was fragmented.\");\n              return;\n            }\n            if (isTextBinaryFrame(opcode) && __privateGet(this, _fragments).length > 0) {\n              failWebsocketConnection(this.ws, \"Expected continuation frame\");\n              return;\n            }\n            if (__privateGet(this, _info).fragmented && fragmented) {\n              failWebsocketConnection(this.ws, \"Fragmented frame exceeded 125 bytes.\");\n              return;\n            }\n            if ((payloadLength > 125 || fragmented) && isControlFrame(opcode)) {\n              failWebsocketConnection(this.ws, \"Control frame either too large or fragmented\");\n              return;\n            }\n            if (isContinuationFrame(opcode) && __privateGet(this, _fragments).length === 0 && !__privateGet(this, _info).compressed) {\n              failWebsocketConnection(this.ws, \"Unexpected continuation frame\");\n              return;\n            }\n            if (payloadLength <= 125) {\n              __privateGet(this, _info).payloadLength = payloadLength;\n              __privateSet(this, _state, parserStates.READ_DATA);\n            } else if (payloadLength === 126) {\n              __privateSet(this, _state, parserStates.PAYLOADLENGTH_16);\n            } else if (payloadLength === 127) {\n              __privateSet(this, _state, parserStates.PAYLOADLENGTH_64);\n            }\n            if (isTextBinaryFrame(opcode)) {\n              __privateGet(this, _info).binaryType = opcode;\n              __privateGet(this, _info).compressed = rsv1 !== 0;\n            }\n            __privateGet(this, _info).opcode = opcode;\n            __privateGet(this, _info).masked = masked;\n            __privateGet(this, _info).fin = fin;\n            __privateGet(this, _info).fragmented = fragmented;\n          } else if (__privateGet(this, _state) === parserStates.PAYLOADLENGTH_16) {\n            if (__privateGet(this, _byteOffset) < 2) {\n              return callback();\n            }\n            const buffer = this.consume(2);\n            __privateGet(this, _info).payloadLength = buffer.readUInt16BE(0);\n            __privateSet(this, _state, parserStates.READ_DATA);\n          } else if (__privateGet(this, _state) === parserStates.PAYLOADLENGTH_64) {\n            if (__privateGet(this, _byteOffset) < 8) {\n              return callback();\n            }\n            const buffer = this.consume(8);\n            const upper = buffer.readUInt32BE(0);\n            if (upper > 2 ** 31 - 1) {\n              failWebsocketConnection(this.ws, \"Received payload length > 2^31 bytes.\");\n              return;\n            }\n            const lower = buffer.readUInt32BE(4);\n            __privateGet(this, _info).payloadLength = (upper << 8) + lower;\n            __privateSet(this, _state, parserStates.READ_DATA);\n          } else if (__privateGet(this, _state) === parserStates.READ_DATA) {\n            if (__privateGet(this, _byteOffset) < __privateGet(this, _info).payloadLength) {\n              return callback();\n            }\n            const body = this.consume(__privateGet(this, _info).payloadLength);\n            if (isControlFrame(__privateGet(this, _info).opcode)) {\n              __privateSet(this, _loop, this.parseControlFrame(body));\n              __privateSet(this, _state, parserStates.INFO);\n            } else {\n              if (!__privateGet(this, _info).compressed) {\n                __privateGet(this, _fragments).push(body);\n                if (!__privateGet(this, _info).fragmented && __privateGet(this, _info).fin) {\n                  const fullMessage = Buffer.concat(__privateGet(this, _fragments));\n                  websocketMessageReceived(this.ws, __privateGet(this, _info).binaryType, fullMessage);\n                  __privateGet(this, _fragments).length = 0;\n                }\n                __privateSet(this, _state, parserStates.INFO);\n              } else {\n                __privateGet(this, _extensions).get(\"permessage-deflate\").decompress(body, __privateGet(this, _info).fin, (error, data) => {\n                  if (error) {\n                    closeWebSocketConnection(this.ws, 1007, error.message, error.message.length);\n                    return;\n                  }\n                  __privateGet(this, _fragments).push(data);\n                  if (!__privateGet(this, _info).fin) {\n                    __privateSet(this, _state, parserStates.INFO);\n                    __privateSet(this, _loop, true);\n                    this.run(callback);\n                    return;\n                  }\n                  websocketMessageReceived(this.ws, __privateGet(this, _info).binaryType, Buffer.concat(__privateGet(this, _fragments)));\n                  __privateSet(this, _loop, true);\n                  __privateSet(this, _state, parserStates.INFO);\n                  __privateGet(this, _fragments).length = 0;\n                  this.run(callback);\n                });\n                __privateSet(this, _loop, false);\n                break;\n              }\n            }\n          }\n        }\n      }\n      /**\n       * Take n bytes from the buffered Buffers\n       * @param {number} n\n       * @returns {Buffer}\n       */\n      consume(n) {\n        if (n > __privateGet(this, _byteOffset)) {\n          throw new Error(\"Called consume() before buffers satiated.\");\n        } else if (n === 0) {\n          return emptyBuffer;\n        }\n        if (__privateGet(this, _buffers)[0].length === n) {\n          __privateSet(this, _byteOffset, __privateGet(this, _byteOffset) - __privateGet(this, _buffers)[0].length);\n          return __privateGet(this, _buffers).shift();\n        }\n        const buffer = Buffer.allocUnsafe(n);\n        let offset = 0;\n        while (offset !== n) {\n          const next = __privateGet(this, _buffers)[0];\n          const { length } = next;\n          if (length + offset === n) {\n            buffer.set(__privateGet(this, _buffers).shift(), offset);\n            break;\n          } else if (length + offset > n) {\n            buffer.set(next.subarray(0, n - offset), offset);\n            __privateGet(this, _buffers)[0] = next.subarray(n - offset);\n            break;\n          } else {\n            buffer.set(__privateGet(this, _buffers).shift(), offset);\n            offset += next.length;\n          }\n        }\n        __privateSet(this, _byteOffset, __privateGet(this, _byteOffset) - n);\n        return buffer;\n      }\n      parseCloseBody(data) {\n        assert(data.length !== 1);\n        let code;\n        if (data.length >= 2) {\n          code = data.readUInt16BE(0);\n        }\n        if (code !== void 0 && !isValidStatusCode(code)) {\n          return { code: 1002, reason: \"Invalid status code\", error: true };\n        }\n        let reason = data.subarray(2);\n        if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {\n          reason = reason.subarray(3);\n        }\n        try {\n          reason = utf8Decode(reason);\n        } catch {\n          return { code: 1007, reason: \"Invalid UTF-8\", error: true };\n        }\n        return { code, reason, error: false };\n      }\n      /**\n       * Parses control frames.\n       * @param {Buffer} body\n       */\n      parseControlFrame(body) {\n        const { opcode, payloadLength } = __privateGet(this, _info);\n        if (opcode === opcodes.CLOSE) {\n          if (payloadLength === 1) {\n            failWebsocketConnection(this.ws, \"Received close frame with a 1-byte body.\");\n            return false;\n          }\n          __privateGet(this, _info).closeInfo = this.parseCloseBody(body);\n          if (__privateGet(this, _info).closeInfo.error) {\n            const { code, reason } = __privateGet(this, _info).closeInfo;\n            closeWebSocketConnection(this.ws, code, reason, reason.length);\n            failWebsocketConnection(this.ws, reason);\n            return false;\n          }\n          if (this.ws[kSentClose] !== sentCloseFrameState.SENT) {\n            let body2 = emptyBuffer;\n            if (__privateGet(this, _info).closeInfo.code) {\n              body2 = Buffer.allocUnsafe(2);\n              body2.writeUInt16BE(__privateGet(this, _info).closeInfo.code, 0);\n            }\n            const closeFrame = new WebsocketFrameSend(body2);\n            this.ws[kResponse].socket.write(\n              closeFrame.createFrame(opcodes.CLOSE),\n              (err) => {\n                if (!err) {\n                  this.ws[kSentClose] = sentCloseFrameState.SENT;\n                }\n              }\n            );\n          }\n          this.ws[kReadyState] = states.CLOSING;\n          this.ws[kReceivedClose] = true;\n          return false;\n        } else if (opcode === opcodes.PING) {\n          if (!this.ws[kReceivedClose]) {\n            const frame = new WebsocketFrameSend(body);\n            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));\n            if (channels.ping.hasSubscribers) {\n              channels.ping.publish({\n                payload: body\n              });\n            }\n          }\n        } else if (opcode === opcodes.PONG) {\n          if (channels.pong.hasSubscribers) {\n            channels.pong.publish({\n              payload: body\n            });\n          }\n        }\n        return true;\n      }\n      get closingInfo() {\n        return __privateGet(this, _info).closeInfo;\n      }\n    };\n    _buffers = new WeakMap();\n    _byteOffset = new WeakMap();\n    _loop = new WeakMap();\n    _state = new WeakMap();\n    _info = new WeakMap();\n    _fragments = new WeakMap();\n    _extensions = new WeakMap();\n    __name(_ByteParser, \"ByteParser\");\n    var ByteParser = _ByteParser;\n    module2.exports = {\n      ByteParser\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/sender.js\nvar require_sender = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/sender.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { WebsocketFrameSend } = require_frame();\n    var { opcodes, sendHints } = require_constants5();\n    var FixedQueue = require_fixed_queue();\n    var FastBuffer = Buffer[Symbol.species];\n    var _queue, _running, _socket, _run, run_fn;\n    var _SendQueue = class _SendQueue {\n      constructor(socket) {\n        __privateAdd(this, _run);\n        /**\n         * @type {FixedQueue}\n         */\n        __privateAdd(this, _queue, new FixedQueue());\n        /**\n         * @type {boolean}\n         */\n        __privateAdd(this, _running, false);\n        /** @type {import('node:net').Socket} */\n        __privateAdd(this, _socket, void 0);\n        __privateSet(this, _socket, socket);\n      }\n      add(item, cb, hint) {\n        if (hint !== sendHints.blob) {\n          const frame = createFrame(item, hint);\n          if (!__privateGet(this, _running)) {\n            __privateGet(this, _socket).write(frame, cb);\n          } else {\n            const node2 = {\n              promise: null,\n              callback: cb,\n              frame\n            };\n            __privateGet(this, _queue).push(node2);\n          }\n          return;\n        }\n        const node = {\n          promise: item.arrayBuffer().then((ab) => {\n            node.promise = null;\n            node.frame = createFrame(ab, hint);\n          }),\n          callback: cb,\n          frame: null\n        };\n        __privateGet(this, _queue).push(node);\n        if (!__privateGet(this, _running)) {\n          __privateMethod(this, _run, run_fn).call(this);\n        }\n      }\n    };\n    _queue = new WeakMap();\n    _running = new WeakMap();\n    _socket = new WeakMap();\n    _run = new WeakSet();\n    run_fn = /* @__PURE__ */ __name(async function() {\n      __privateSet(this, _running, true);\n      const queue = __privateGet(this, _queue);\n      while (!queue.isEmpty()) {\n        const node = queue.shift();\n        if (node.promise !== null) {\n          await node.promise;\n        }\n        __privateGet(this, _socket).write(node.frame, node.callback);\n        node.callback = node.frame = null;\n      }\n      __privateSet(this, _running, false);\n    }, \"#run\");\n    __name(_SendQueue, \"SendQueue\");\n    var SendQueue = _SendQueue;\n    function createFrame(data, hint) {\n      return new WebsocketFrameSend(toBuffer(data, hint)).createFrame(hint === sendHints.string ? opcodes.TEXT : opcodes.BINARY);\n    }\n    __name(createFrame, \"createFrame\");\n    function toBuffer(data, hint) {\n      switch (hint) {\n        case sendHints.string:\n          return Buffer.from(data);\n        case sendHints.arrayBuffer:\n        case sendHints.blob:\n          return new FastBuffer(data);\n        case sendHints.typedArray:\n          return new FastBuffer(data.buffer, data.byteOffset, data.byteLength);\n      }\n    }\n    __name(toBuffer, \"toBuffer\");\n    module2.exports = { SendQueue };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/websocket.js\nvar require_websocket = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/websocket/websocket.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { webidl } = require_webidl();\n    var { URLSerializer } = require_data_url();\n    var { environmentSettingsObject } = require_util2();\n    var { staticPropertyDescriptors, states, sentCloseFrameState, sendHints } = require_constants5();\n    var {\n      kWebSocketURL,\n      kReadyState,\n      kController,\n      kBinaryType,\n      kResponse,\n      kSentClose,\n      kByteParser\n    } = require_symbols5();\n    var {\n      isConnecting,\n      isEstablished,\n      isClosing,\n      isValidSubprotocol,\n      fireEvent\n    } = require_util7();\n    var { establishWebSocketConnection, closeWebSocketConnection } = require_connection();\n    var { ByteParser } = require_receiver();\n    var { kEnumerableProperty, isBlobLike } = require_util();\n    var { getGlobalDispatcher } = require_global2();\n    var { types } = require(\"util\");\n    var { ErrorEvent, CloseEvent } = require_events();\n    var { SendQueue } = require_sender();\n    var _events, _bufferedAmount, _protocol, _extensions, _sendQueue, _onConnectionEstablished, onConnectionEstablished_fn;\n    var _WebSocket = class _WebSocket extends EventTarget {\n      /**\n       * @param {string} url\n       * @param {string|string[]} protocols\n       */\n      constructor(url, protocols = []) {\n        super();\n        /**\n         * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n         */\n        __privateAdd(this, _onConnectionEstablished);\n        __privateAdd(this, _events, {\n          open: null,\n          error: null,\n          close: null,\n          message: null\n        });\n        __privateAdd(this, _bufferedAmount, 0);\n        __privateAdd(this, _protocol, \"\");\n        __privateAdd(this, _extensions, \"\");\n        /** @type {SendQueue} */\n        __privateAdd(this, _sendQueue, void 0);\n        webidl.util.markAsUncloneable(this);\n        const prefix = \"WebSocket constructor\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        const options = webidl.converters[\"DOMString or sequence<DOMString> or WebSocketInit\"](protocols, prefix, \"options\");\n        url = webidl.converters.USVString(url, prefix, \"url\");\n        protocols = options.protocols;\n        const baseURL = environmentSettingsObject.settingsObject.baseUrl;\n        let urlRecord;\n        try {\n          urlRecord = new URL(url, baseURL);\n        } catch (e) {\n          throw new DOMException(e, \"SyntaxError\");\n        }\n        if (urlRecord.protocol === \"http:\") {\n          urlRecord.protocol = \"ws:\";\n        } else if (urlRecord.protocol === \"https:\") {\n          urlRecord.protocol = \"wss:\";\n        }\n        if (urlRecord.protocol !== \"ws:\" && urlRecord.protocol !== \"wss:\") {\n          throw new DOMException(\n            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,\n            \"SyntaxError\"\n          );\n        }\n        if (urlRecord.hash || urlRecord.href.endsWith(\"#\")) {\n          throw new DOMException(\"Got fragment\", \"SyntaxError\");\n        }\n        if (typeof protocols === \"string\") {\n          protocols = [protocols];\n        }\n        if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {\n          throw new DOMException(\"Invalid Sec-WebSocket-Protocol value\", \"SyntaxError\");\n        }\n        if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {\n          throw new DOMException(\"Invalid Sec-WebSocket-Protocol value\", \"SyntaxError\");\n        }\n        this[kWebSocketURL] = new URL(urlRecord.href);\n        const client = environmentSettingsObject.settingsObject;\n        this[kController] = establishWebSocketConnection(\n          urlRecord,\n          protocols,\n          client,\n          this,\n          (response, extensions) => __privateMethod(this, _onConnectionEstablished, onConnectionEstablished_fn).call(this, response, extensions),\n          options\n        );\n        this[kReadyState] = _WebSocket.CONNECTING;\n        this[kSentClose] = sentCloseFrameState.NOT_SENT;\n        this[kBinaryType] = \"blob\";\n      }\n      /**\n       * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n       * @param {number|undefined} code\n       * @param {string|undefined} reason\n       */\n      close(code = void 0, reason = void 0) {\n        webidl.brandCheck(this, _WebSocket);\n        const prefix = \"WebSocket.close\";\n        if (code !== void 0) {\n          code = webidl.converters[\"unsigned short\"](code, prefix, \"code\", { clamp: true });\n        }\n        if (reason !== void 0) {\n          reason = webidl.converters.USVString(reason, prefix, \"reason\");\n        }\n        if (code !== void 0) {\n          if (code !== 1e3 && (code < 3e3 || code > 4999)) {\n            throw new DOMException(\"invalid code\", \"InvalidAccessError\");\n          }\n        }\n        let reasonByteLength = 0;\n        if (reason !== void 0) {\n          reasonByteLength = Buffer.byteLength(reason);\n          if (reasonByteLength > 123) {\n            throw new DOMException(\n              `Reason must be less than 123 bytes; received ${reasonByteLength}`,\n              \"SyntaxError\"\n            );\n          }\n        }\n        closeWebSocketConnection(this, code, reason, reasonByteLength);\n      }\n      /**\n       * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n       */\n      send(data) {\n        webidl.brandCheck(this, _WebSocket);\n        const prefix = \"WebSocket.send\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        data = webidl.converters.WebSocketSendData(data, prefix, \"data\");\n        if (isConnecting(this)) {\n          throw new DOMException(\"Sent before connected.\", \"InvalidStateError\");\n        }\n        if (!isEstablished(this) || isClosing(this)) {\n          return;\n        }\n        if (typeof data === \"string\") {\n          const length = Buffer.byteLength(data);\n          __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) + length);\n          __privateGet(this, _sendQueue).add(data, () => {\n            __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) - length);\n          }, sendHints.string);\n        } else if (types.isArrayBuffer(data)) {\n          __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) + data.byteLength);\n          __privateGet(this, _sendQueue).add(data, () => {\n            __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) - data.byteLength);\n          }, sendHints.arrayBuffer);\n        } else if (ArrayBuffer.isView(data)) {\n          __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) + data.byteLength);\n          __privateGet(this, _sendQueue).add(data, () => {\n            __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) - data.byteLength);\n          }, sendHints.typedArray);\n        } else if (isBlobLike(data)) {\n          __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) + data.size);\n          __privateGet(this, _sendQueue).add(data, () => {\n            __privateSet(this, _bufferedAmount, __privateGet(this, _bufferedAmount) - data.size);\n          }, sendHints.blob);\n        }\n      }\n      get readyState() {\n        webidl.brandCheck(this, _WebSocket);\n        return this[kReadyState];\n      }\n      get bufferedAmount() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _bufferedAmount);\n      }\n      get url() {\n        webidl.brandCheck(this, _WebSocket);\n        return URLSerializer(this[kWebSocketURL]);\n      }\n      get extensions() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _extensions);\n      }\n      get protocol() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _protocol);\n      }\n      get onopen() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _events).open;\n      }\n      set onopen(fn) {\n        webidl.brandCheck(this, _WebSocket);\n        if (__privateGet(this, _events).open) {\n          this.removeEventListener(\"open\", __privateGet(this, _events).open);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).open = fn;\n          this.addEventListener(\"open\", fn);\n        } else {\n          __privateGet(this, _events).open = null;\n        }\n      }\n      get onerror() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _events).error;\n      }\n      set onerror(fn) {\n        webidl.brandCheck(this, _WebSocket);\n        if (__privateGet(this, _events).error) {\n          this.removeEventListener(\"error\", __privateGet(this, _events).error);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).error = fn;\n          this.addEventListener(\"error\", fn);\n        } else {\n          __privateGet(this, _events).error = null;\n        }\n      }\n      get onclose() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _events).close;\n      }\n      set onclose(fn) {\n        webidl.brandCheck(this, _WebSocket);\n        if (__privateGet(this, _events).close) {\n          this.removeEventListener(\"close\", __privateGet(this, _events).close);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).close = fn;\n          this.addEventListener(\"close\", fn);\n        } else {\n          __privateGet(this, _events).close = null;\n        }\n      }\n      get onmessage() {\n        webidl.brandCheck(this, _WebSocket);\n        return __privateGet(this, _events).message;\n      }\n      set onmessage(fn) {\n        webidl.brandCheck(this, _WebSocket);\n        if (__privateGet(this, _events).message) {\n          this.removeEventListener(\"message\", __privateGet(this, _events).message);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).message = fn;\n          this.addEventListener(\"message\", fn);\n        } else {\n          __privateGet(this, _events).message = null;\n        }\n      }\n      get binaryType() {\n        webidl.brandCheck(this, _WebSocket);\n        return this[kBinaryType];\n      }\n      set binaryType(type) {\n        webidl.brandCheck(this, _WebSocket);\n        if (type !== \"blob\" && type !== \"arraybuffer\") {\n          this[kBinaryType] = \"blob\";\n        } else {\n          this[kBinaryType] = type;\n        }\n      }\n    };\n    _events = new WeakMap();\n    _bufferedAmount = new WeakMap();\n    _protocol = new WeakMap();\n    _extensions = new WeakMap();\n    _sendQueue = new WeakMap();\n    _onConnectionEstablished = new WeakSet();\n    onConnectionEstablished_fn = /* @__PURE__ */ __name(function(response, parsedExtensions) {\n      this[kResponse] = response;\n      const parser = new ByteParser(this, parsedExtensions);\n      parser.on(\"drain\", onParserDrain);\n      parser.on(\"error\", onParserError.bind(this));\n      response.socket.ws = this;\n      this[kByteParser] = parser;\n      __privateSet(this, _sendQueue, new SendQueue(response.socket));\n      this[kReadyState] = states.OPEN;\n      const extensions = response.headersList.get(\"sec-websocket-extensions\");\n      if (extensions !== null) {\n        __privateSet(this, _extensions, extensions);\n      }\n      const protocol = response.headersList.get(\"sec-websocket-protocol\");\n      if (protocol !== null) {\n        __privateSet(this, _protocol, protocol);\n      }\n      fireEvent(\"open\", this);\n    }, \"#onConnectionEstablished\");\n    __name(_WebSocket, \"WebSocket\");\n    var WebSocket2 = _WebSocket;\n    WebSocket2.CONNECTING = WebSocket2.prototype.CONNECTING = states.CONNECTING;\n    WebSocket2.OPEN = WebSocket2.prototype.OPEN = states.OPEN;\n    WebSocket2.CLOSING = WebSocket2.prototype.CLOSING = states.CLOSING;\n    WebSocket2.CLOSED = WebSocket2.prototype.CLOSED = states.CLOSED;\n    Object.defineProperties(WebSocket2.prototype, {\n      CONNECTING: staticPropertyDescriptors,\n      OPEN: staticPropertyDescriptors,\n      CLOSING: staticPropertyDescriptors,\n      CLOSED: staticPropertyDescriptors,\n      url: kEnumerableProperty,\n      readyState: kEnumerableProperty,\n      bufferedAmount: kEnumerableProperty,\n      onopen: kEnumerableProperty,\n      onerror: kEnumerableProperty,\n      onclose: kEnumerableProperty,\n      close: kEnumerableProperty,\n      onmessage: kEnumerableProperty,\n      binaryType: kEnumerableProperty,\n      send: kEnumerableProperty,\n      extensions: kEnumerableProperty,\n      protocol: kEnumerableProperty,\n      [Symbol.toStringTag]: {\n        value: \"WebSocket\",\n        writable: false,\n        enumerable: false,\n        configurable: true\n      }\n    });\n    Object.defineProperties(WebSocket2, {\n      CONNECTING: staticPropertyDescriptors,\n      OPEN: staticPropertyDescriptors,\n      CLOSING: staticPropertyDescriptors,\n      CLOSED: staticPropertyDescriptors\n    });\n    webidl.converters[\"sequence<DOMString>\"] = webidl.sequenceConverter(\n      webidl.converters.DOMString\n    );\n    webidl.converters[\"DOMString or sequence<DOMString>\"] = function(V, prefix, argument) {\n      if (webidl.util.Type(V) === \"Object\" && Symbol.iterator in V) {\n        return webidl.converters[\"sequence<DOMString>\"](V);\n      }\n      return webidl.converters.DOMString(V, prefix, argument);\n    };\n    webidl.converters.WebSocketInit = webidl.dictionaryConverter([\n      {\n        key: \"protocols\",\n        converter: webidl.converters[\"DOMString or sequence<DOMString>\"],\n        defaultValue: () => new Array(0)\n      },\n      {\n        key: \"dispatcher\",\n        converter: webidl.converters.any,\n        defaultValue: () => getGlobalDispatcher()\n      },\n      {\n        key: \"headers\",\n        converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n      }\n    ]);\n    webidl.converters[\"DOMString or sequence<DOMString> or WebSocketInit\"] = function(V) {\n      if (webidl.util.Type(V) === \"Object\" && !(Symbol.iterator in V)) {\n        return webidl.converters.WebSocketInit(V);\n      }\n      return { protocols: webidl.converters[\"DOMString or sequence<DOMString>\"](V) };\n    };\n    webidl.converters.WebSocketSendData = function(V) {\n      if (webidl.util.Type(V) === \"Object\") {\n        if (isBlobLike(V)) {\n          return webidl.converters.Blob(V, { strict: false });\n        }\n        if (ArrayBuffer.isView(V) || types.isArrayBuffer(V)) {\n          return webidl.converters.BufferSource(V);\n        }\n      }\n      return webidl.converters.USVString(V);\n    };\n    function onParserDrain() {\n      this.ws[kResponse].socket.resume();\n    }\n    __name(onParserDrain, \"onParserDrain\");\n    function onParserError(err) {\n      let message;\n      let code;\n      if (err instanceof CloseEvent) {\n        message = err.reason;\n        code = err.code;\n      } else {\n        message = err.message;\n      }\n      fireEvent(\"error\", this, () => new ErrorEvent(\"error\", { error: err, message }));\n      closeWebSocketConnection(this, code);\n    }\n    __name(onParserError, \"onParserError\");\n    module2.exports = {\n      WebSocket: WebSocket2\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/eventsource/util.js\nvar require_util8 = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/eventsource/util.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    function isValidLastEventId(value) {\n      return value.indexOf(\"\\0\") === -1;\n    }\n    __name(isValidLastEventId, \"isValidLastEventId\");\n    function isASCIINumber(value) {\n      if (value.length === 0)\n        return false;\n      for (let i = 0; i < value.length; i++) {\n        if (value.charCodeAt(i) < 48 || value.charCodeAt(i) > 57)\n          return false;\n      }\n      return true;\n    }\n    __name(isASCIINumber, \"isASCIINumber\");\n    function delay(ms) {\n      return new Promise((resolve) => {\n        setTimeout(resolve, ms).unref();\n      });\n    }\n    __name(delay, \"delay\");\n    module2.exports = {\n      isValidLastEventId,\n      isASCIINumber,\n      delay\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/eventsource/eventsource-stream.js\nvar require_eventsource_stream = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/eventsource/eventsource-stream.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { Transform } = require(\"stream\");\n    var { isASCIINumber, isValidLastEventId } = require_util8();\n    var BOM = [239, 187, 191];\n    var LF = 10;\n    var CR = 13;\n    var COLON = 58;\n    var SPACE = 32;\n    var _EventSourceStream = class _EventSourceStream extends Transform {\n      /**\n       * @type {eventSourceSettings}\n       */\n      state = null;\n      /**\n       * Leading byte-order-mark check.\n       * @type {boolean}\n       */\n      checkBOM = true;\n      /**\n       * @type {boolean}\n       */\n      crlfCheck = false;\n      /**\n       * @type {boolean}\n       */\n      eventEndCheck = false;\n      /**\n       * @type {Buffer}\n       */\n      buffer = null;\n      pos = 0;\n      event = {\n        data: void 0,\n        event: void 0,\n        id: void 0,\n        retry: void 0\n      };\n      /**\n       * @param {object} options\n       * @param {eventSourceSettings} options.eventSourceSettings\n       * @param {Function} [options.push]\n       */\n      constructor(options = {}) {\n        options.readableObjectMode = true;\n        super(options);\n        this.state = options.eventSourceSettings || {};\n        if (options.push) {\n          this.push = options.push;\n        }\n      }\n      /**\n       * @param {Buffer} chunk\n       * @param {string} _encoding\n       * @param {Function} callback\n       * @returns {void}\n       */\n      _transform(chunk, _encoding, callback) {\n        if (chunk.length === 0) {\n          callback();\n          return;\n        }\n        if (this.buffer) {\n          this.buffer = Buffer.concat([this.buffer, chunk]);\n        } else {\n          this.buffer = chunk;\n        }\n        if (this.checkBOM) {\n          switch (this.buffer.length) {\n            case 1:\n              if (this.buffer[0] === BOM[0]) {\n                callback();\n                return;\n              }\n              this.checkBOM = false;\n              callback();\n              return;\n            case 2:\n              if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1]) {\n                callback();\n                return;\n              }\n              this.checkBOM = false;\n              break;\n            case 3:\n              if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {\n                this.buffer = Buffer.alloc(0);\n                this.checkBOM = false;\n                callback();\n                return;\n              }\n              this.checkBOM = false;\n              break;\n            default:\n              if (this.buffer[0] === BOM[0] && this.buffer[1] === BOM[1] && this.buffer[2] === BOM[2]) {\n                this.buffer = this.buffer.subarray(3);\n              }\n              this.checkBOM = false;\n              break;\n          }\n        }\n        while (this.pos < this.buffer.length) {\n          if (this.eventEndCheck) {\n            if (this.crlfCheck) {\n              if (this.buffer[this.pos] === LF) {\n                this.buffer = this.buffer.subarray(this.pos + 1);\n                this.pos = 0;\n                this.crlfCheck = false;\n                continue;\n              }\n              this.crlfCheck = false;\n            }\n            if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {\n              if (this.buffer[this.pos] === CR) {\n                this.crlfCheck = true;\n              }\n              this.buffer = this.buffer.subarray(this.pos + 1);\n              this.pos = 0;\n              if (this.event.data !== void 0 || this.event.event || this.event.id || this.event.retry) {\n                this.processEvent(this.event);\n              }\n              this.clearEvent();\n              continue;\n            }\n            this.eventEndCheck = false;\n            continue;\n          }\n          if (this.buffer[this.pos] === LF || this.buffer[this.pos] === CR) {\n            if (this.buffer[this.pos] === CR) {\n              this.crlfCheck = true;\n            }\n            this.parseLine(this.buffer.subarray(0, this.pos), this.event);\n            this.buffer = this.buffer.subarray(this.pos + 1);\n            this.pos = 0;\n            this.eventEndCheck = true;\n            continue;\n          }\n          this.pos++;\n        }\n        callback();\n      }\n      /**\n       * @param {Buffer} line\n       * @param {EventStreamEvent} event\n       */\n      parseLine(line, event) {\n        if (line.length === 0) {\n          return;\n        }\n        const colonPosition = line.indexOf(COLON);\n        if (colonPosition === 0) {\n          return;\n        }\n        let field = \"\";\n        let value = \"\";\n        if (colonPosition !== -1) {\n          field = line.subarray(0, colonPosition).toString(\"utf8\");\n          let valueStart = colonPosition + 1;\n          if (line[valueStart] === SPACE) {\n            ++valueStart;\n          }\n          value = line.subarray(valueStart).toString(\"utf8\");\n        } else {\n          field = line.toString(\"utf8\");\n          value = \"\";\n        }\n        switch (field) {\n          case \"data\":\n            if (event[field] === void 0) {\n              event[field] = value;\n            } else {\n              event[field] += `\n${value}`;\n            }\n            break;\n          case \"retry\":\n            if (isASCIINumber(value)) {\n              event[field] = value;\n            }\n            break;\n          case \"id\":\n            if (isValidLastEventId(value)) {\n              event[field] = value;\n            }\n            break;\n          case \"event\":\n            if (value.length > 0) {\n              event[field] = value;\n            }\n            break;\n        }\n      }\n      /**\n       * @param {EventSourceStreamEvent} event\n       */\n      processEvent(event) {\n        if (event.retry && isASCIINumber(event.retry)) {\n          this.state.reconnectionTime = parseInt(event.retry, 10);\n        }\n        if (event.id && isValidLastEventId(event.id)) {\n          this.state.lastEventId = event.id;\n        }\n        if (event.data !== void 0) {\n          this.push({\n            type: event.event || \"message\",\n            options: {\n              data: event.data,\n              lastEventId: this.state.lastEventId,\n              origin: this.state.origin\n            }\n          });\n        }\n      }\n      clearEvent() {\n        this.event = {\n          data: void 0,\n          event: void 0,\n          id: void 0,\n          retry: void 0\n        };\n      }\n    };\n    __name(_EventSourceStream, \"EventSourceStream\");\n    var EventSourceStream = _EventSourceStream;\n    module2.exports = {\n      EventSourceStream\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/eventsource/eventsource.js\nvar require_eventsource = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/lib/web/eventsource/eventsource.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var { pipeline } = require(\"stream\");\n    var { fetching } = require_fetch();\n    var { makeRequest } = require_request();\n    var { webidl } = require_webidl();\n    var { EventSourceStream } = require_eventsource_stream();\n    var { parseMIMEType } = require_data_url();\n    var { createFastMessageEvent } = require_events();\n    var { isNetworkError } = require_response();\n    var { delay } = require_util8();\n    var { kEnumerableProperty } = require_util();\n    var { environmentSettingsObject } = require_util2();\n    var experimentalWarned = false;\n    var defaultReconnectionTime = 3e3;\n    var CONNECTING = 0;\n    var OPEN = 1;\n    var CLOSED = 2;\n    var ANONYMOUS = \"anonymous\";\n    var USE_CREDENTIALS = \"use-credentials\";\n    var _events, _url, _withCredentials, _readyState, _request, _controller, _dispatcher, _state, _connect, connect_fn, _reconnect, reconnect_fn;\n    var _EventSource = class _EventSource extends EventTarget {\n      /**\n       * Creates a new EventSource object.\n       * @param {string} url\n       * @param {EventSourceInit} [eventSourceInitDict]\n       * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface\n       */\n      constructor(url, eventSourceInitDict = {}) {\n        super();\n        __privateAdd(this, _connect);\n        /**\n         * @see https://html.spec.whatwg.org/multipage/server-sent-events.html#sse-processing-model\n         * @returns {Promise<void>}\n         */\n        __privateAdd(this, _reconnect);\n        __privateAdd(this, _events, {\n          open: null,\n          error: null,\n          message: null\n        });\n        __privateAdd(this, _url, null);\n        __privateAdd(this, _withCredentials, false);\n        __privateAdd(this, _readyState, CONNECTING);\n        __privateAdd(this, _request, null);\n        __privateAdd(this, _controller, null);\n        __privateAdd(this, _dispatcher, void 0);\n        /**\n         * @type {import('./eventsource-stream').eventSourceSettings}\n         */\n        __privateAdd(this, _state, void 0);\n        webidl.util.markAsUncloneable(this);\n        const prefix = \"EventSource constructor\";\n        webidl.argumentLengthCheck(arguments, 1, prefix);\n        if (!experimentalWarned) {\n          experimentalWarned = true;\n          define_process_default.emitWarning(\"EventSource is experimental, expect them to change at any time.\", {\n            code: \"UNDICI-ES\"\n          });\n        }\n        url = webidl.converters.USVString(url, prefix, \"url\");\n        eventSourceInitDict = webidl.converters.EventSourceInitDict(eventSourceInitDict, prefix, \"eventSourceInitDict\");\n        __privateSet(this, _dispatcher, eventSourceInitDict.dispatcher);\n        __privateSet(this, _state, {\n          lastEventId: \"\",\n          reconnectionTime: defaultReconnectionTime\n        });\n        const settings = environmentSettingsObject;\n        let urlRecord;\n        try {\n          urlRecord = new URL(url, settings.settingsObject.baseUrl);\n          __privateGet(this, _state).origin = urlRecord.origin;\n        } catch (e) {\n          throw new DOMException(e, \"SyntaxError\");\n        }\n        __privateSet(this, _url, urlRecord.href);\n        let corsAttributeState = ANONYMOUS;\n        if (eventSourceInitDict.withCredentials) {\n          corsAttributeState = USE_CREDENTIALS;\n          __privateSet(this, _withCredentials, true);\n        }\n        const initRequest = {\n          redirect: \"follow\",\n          keepalive: true,\n          // @see https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attributes\n          mode: \"cors\",\n          credentials: corsAttributeState === \"anonymous\" ? \"same-origin\" : \"omit\",\n          referrer: \"no-referrer\"\n        };\n        initRequest.client = environmentSettingsObject.settingsObject;\n        initRequest.headersList = [[\"accept\", { name: \"accept\", value: \"text/event-stream\" }]];\n        initRequest.cache = \"no-store\";\n        initRequest.initiator = \"other\";\n        initRequest.urlList = [new URL(__privateGet(this, _url))];\n        __privateSet(this, _request, makeRequest(initRequest));\n        __privateMethod(this, _connect, connect_fn).call(this);\n      }\n      /**\n       * Returns the state of this EventSource object's connection. It can have the\n       * values described below.\n       * @returns {0|1|2}\n       * @readonly\n       */\n      get readyState() {\n        return __privateGet(this, _readyState);\n      }\n      /**\n       * Returns the URL providing the event stream.\n       * @readonly\n       * @returns {string}\n       */\n      get url() {\n        return __privateGet(this, _url);\n      }\n      /**\n       * Returns a boolean indicating whether the EventSource object was\n       * instantiated with CORS credentials set (true), or not (false, the default).\n       */\n      get withCredentials() {\n        return __privateGet(this, _withCredentials);\n      }\n      /**\n       * Closes the connection, if any, and sets the readyState attribute to\n       * CLOSED.\n       */\n      close() {\n        webidl.brandCheck(this, _EventSource);\n        if (__privateGet(this, _readyState) === CLOSED)\n          return;\n        __privateSet(this, _readyState, CLOSED);\n        __privateGet(this, _controller).abort();\n        __privateSet(this, _request, null);\n      }\n      get onopen() {\n        return __privateGet(this, _events).open;\n      }\n      set onopen(fn) {\n        if (__privateGet(this, _events).open) {\n          this.removeEventListener(\"open\", __privateGet(this, _events).open);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).open = fn;\n          this.addEventListener(\"open\", fn);\n        } else {\n          __privateGet(this, _events).open = null;\n        }\n      }\n      get onmessage() {\n        return __privateGet(this, _events).message;\n      }\n      set onmessage(fn) {\n        if (__privateGet(this, _events).message) {\n          this.removeEventListener(\"message\", __privateGet(this, _events).message);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).message = fn;\n          this.addEventListener(\"message\", fn);\n        } else {\n          __privateGet(this, _events).message = null;\n        }\n      }\n      get onerror() {\n        return __privateGet(this, _events).error;\n      }\n      set onerror(fn) {\n        if (__privateGet(this, _events).error) {\n          this.removeEventListener(\"error\", __privateGet(this, _events).error);\n        }\n        if (typeof fn === \"function\") {\n          __privateGet(this, _events).error = fn;\n          this.addEventListener(\"error\", fn);\n        } else {\n          __privateGet(this, _events).error = null;\n        }\n      }\n    };\n    _events = new WeakMap();\n    _url = new WeakMap();\n    _withCredentials = new WeakMap();\n    _readyState = new WeakMap();\n    _request = new WeakMap();\n    _controller = new WeakMap();\n    _dispatcher = new WeakMap();\n    _state = new WeakMap();\n    _connect = new WeakSet();\n    connect_fn = /* @__PURE__ */ __name(function() {\n      if (__privateGet(this, _readyState) === CLOSED)\n        return;\n      __privateSet(this, _readyState, CONNECTING);\n      const fetchParams = {\n        request: __privateGet(this, _request),\n        dispatcher: __privateGet(this, _dispatcher)\n      };\n      const processEventSourceEndOfBody = /* @__PURE__ */ __name((response) => {\n        if (isNetworkError(response)) {\n          this.dispatchEvent(new Event(\"error\"));\n          this.close();\n        }\n        __privateMethod(this, _reconnect, reconnect_fn).call(this);\n      }, \"processEventSourceEndOfBody\");\n      fetchParams.processResponseEndOfBody = processEventSourceEndOfBody;\n      fetchParams.processResponse = (response) => {\n        if (isNetworkError(response)) {\n          if (response.aborted) {\n            this.close();\n            this.dispatchEvent(new Event(\"error\"));\n            return;\n          } else {\n            __privateMethod(this, _reconnect, reconnect_fn).call(this);\n            return;\n          }\n        }\n        const contentType = response.headersList.get(\"content-type\", true);\n        const mimeType = contentType !== null ? parseMIMEType(contentType) : \"failure\";\n        const contentTypeValid = mimeType !== \"failure\" && mimeType.essence === \"text/event-stream\";\n        if (response.status !== 200 || contentTypeValid === false) {\n          this.close();\n          this.dispatchEvent(new Event(\"error\"));\n          return;\n        }\n        __privateSet(this, _readyState, OPEN);\n        this.dispatchEvent(new Event(\"open\"));\n        __privateGet(this, _state).origin = response.urlList[response.urlList.length - 1].origin;\n        const eventSourceStream = new EventSourceStream({\n          eventSourceSettings: __privateGet(this, _state),\n          push: (event) => {\n            this.dispatchEvent(createFastMessageEvent(\n              event.type,\n              event.options\n            ));\n          }\n        });\n        pipeline(\n          response.body.stream,\n          eventSourceStream,\n          (error) => {\n            if (error?.aborted === false) {\n              this.close();\n              this.dispatchEvent(new Event(\"error\"));\n            }\n          }\n        );\n      };\n      __privateSet(this, _controller, fetching(fetchParams));\n    }, \"#connect\");\n    _reconnect = new WeakSet();\n    reconnect_fn = /* @__PURE__ */ __name(async function() {\n      if (__privateGet(this, _readyState) === CLOSED)\n        return;\n      __privateSet(this, _readyState, CONNECTING);\n      this.dispatchEvent(new Event(\"error\"));\n      await delay(__privateGet(this, _state).reconnectionTime);\n      if (__privateGet(this, _readyState) !== CONNECTING)\n        return;\n      if (__privateGet(this, _state).lastEventId.length) {\n        __privateGet(this, _request).headersList.set(\"last-event-id\", __privateGet(this, _state).lastEventId, true);\n      }\n      __privateMethod(this, _connect, connect_fn).call(this);\n    }, \"#reconnect\");\n    __name(_EventSource, \"EventSource\");\n    var EventSource = _EventSource;\n    var constantsPropertyDescriptors = {\n      CONNECTING: {\n        __proto__: null,\n        configurable: false,\n        enumerable: true,\n        value: CONNECTING,\n        writable: false\n      },\n      OPEN: {\n        __proto__: null,\n        configurable: false,\n        enumerable: true,\n        value: OPEN,\n        writable: false\n      },\n      CLOSED: {\n        __proto__: null,\n        configurable: false,\n        enumerable: true,\n        value: CLOSED,\n        writable: false\n      }\n    };\n    Object.defineProperties(EventSource, constantsPropertyDescriptors);\n    Object.defineProperties(EventSource.prototype, constantsPropertyDescriptors);\n    Object.defineProperties(EventSource.prototype, {\n      close: kEnumerableProperty,\n      onerror: kEnumerableProperty,\n      onmessage: kEnumerableProperty,\n      onopen: kEnumerableProperty,\n      readyState: kEnumerableProperty,\n      url: kEnumerableProperty,\n      withCredentials: kEnumerableProperty\n    });\n    webidl.converters.EventSourceInitDict = webidl.dictionaryConverter([\n      {\n        key: \"withCredentials\",\n        converter: webidl.converters.boolean,\n        defaultValue: () => false\n      },\n      {\n        key: \"dispatcher\",\n        // undici only\n        converter: webidl.converters.any\n      }\n    ]);\n    module2.exports = {\n      EventSource,\n      defaultReconnectionTime\n    };\n  }\n});\n\n// ../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/index.js\nvar require_undici = __commonJS({\n  \"../../node_modules/.pnpm/undici@6.21.0/node_modules/undici/index.js\"(exports2, module2) {\n    \"use strict\";\n    init_define_process();\n    var Client = require_client();\n    var Dispatcher = require_dispatcher();\n    var Pool = require_pool();\n    var BalancedPool = require_balanced_pool();\n    var Agent = require_agent();\n    var ProxyAgent = require_proxy_agent();\n    var EnvHttpProxyAgent = require_env_http_proxy_agent();\n    var RetryAgent = require_retry_agent();\n    var errors = require_errors();\n    var util = require_util();\n    var { InvalidArgumentError } = errors;\n    var api = require_api();\n    var buildConnector = require_connect();\n    var MockClient = require_mock_client();\n    var MockAgent = require_mock_agent();\n    var MockPool = require_mock_pool();\n    var mockErrors = require_mock_errors();\n    var RetryHandler = require_retry_handler();\n    var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();\n    var DecoratorHandler = require_decorator_handler();\n    var RedirectHandler = require_redirect_handler();\n    var createRedirectInterceptor = require_redirect_interceptor();\n    Object.assign(Dispatcher.prototype, api);\n    module2.exports.Dispatcher = Dispatcher;\n    module2.exports.Client = Client;\n    module2.exports.Pool = Pool;\n    module2.exports.BalancedPool = BalancedPool;\n    module2.exports.Agent = Agent;\n    module2.exports.ProxyAgent = ProxyAgent;\n    module2.exports.EnvHttpProxyAgent = EnvHttpProxyAgent;\n    module2.exports.RetryAgent = RetryAgent;\n    module2.exports.RetryHandler = RetryHandler;\n    module2.exports.DecoratorHandler = DecoratorHandler;\n    module2.exports.RedirectHandler = RedirectHandler;\n    module2.exports.createRedirectInterceptor = createRedirectInterceptor;\n    module2.exports.interceptors = {\n      redirect: require_redirect(),\n      retry: require_retry(),\n      dump: require_dump()\n    };\n    module2.exports.buildConnector = buildConnector;\n    module2.exports.errors = errors;\n    module2.exports.util = {\n      parseHeaders: util.parseHeaders,\n      headerNameToString: util.headerNameToString\n    };\n    function makeDispatcher(fn) {\n      return (url, opts, handler) => {\n        if (typeof opts === \"function\") {\n          handler = opts;\n          opts = null;\n        }\n        if (!url || typeof url !== \"string\" && typeof url !== \"object\" && !(url instanceof URL)) {\n          throw new InvalidArgumentError(\"invalid url\");\n        }\n        if (opts != null && typeof opts !== \"object\") {\n          throw new InvalidArgumentError(\"invalid opts\");\n        }\n        if (opts && opts.path != null) {\n          if (typeof opts.path !== \"string\") {\n            throw new InvalidArgumentError(\"invalid opts.path\");\n          }\n          let path = opts.path;\n          if (!opts.path.startsWith(\"/\")) {\n            path = `/${path}`;\n          }\n          url = new URL(util.parseOrigin(url).origin + path);\n        } else {\n          if (!opts) {\n            opts = typeof url === \"object\" ? url : {};\n          }\n          url = util.parseURL(url);\n        }\n        const { agent, dispatcher = getGlobalDispatcher() } = opts;\n        if (agent) {\n          throw new InvalidArgumentError(\"unsupported opts.agent. Did you mean opts.client?\");\n        }\n        return fn.call(dispatcher, {\n          ...opts,\n          origin: url.origin,\n          path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n          method: opts.method || (opts.body ? \"PUT\" : \"GET\")\n        }, handler);\n      };\n    }\n    __name(makeDispatcher, \"makeDispatcher\");\n    module2.exports.setGlobalDispatcher = setGlobalDispatcher;\n    module2.exports.getGlobalDispatcher = getGlobalDispatcher;\n    var fetchImpl = require_fetch().fetch;\n    module2.exports.fetch = /* @__PURE__ */ __name(async function fetch2(init, options = void 0) {\n      try {\n        return await fetchImpl(init, options);\n      } catch (err) {\n        if (err && typeof err === \"object\") {\n          Error.captureStackTrace(err);\n        }\n        throw err;\n      }\n    }, \"fetch\");\n    module2.exports.Headers = require_headers().Headers;\n    module2.exports.Response = require_response().Response;\n    module2.exports.Request = require_request().Request;\n    module2.exports.FormData = require_formdata().FormData;\n    module2.exports.File = globalThis.File ?? require(\"buffer\").File;\n    module2.exports.FileReader = require_filereader().FileReader;\n    var { setGlobalOrigin, getGlobalOrigin } = require_global();\n    module2.exports.setGlobalOrigin = setGlobalOrigin;\n    module2.exports.getGlobalOrigin = getGlobalOrigin;\n    var { CacheStorage } = require_cachestorage();\n    var { kConstruct } = require_symbols4();\n    module2.exports.caches = new CacheStorage(kConstruct);\n    var { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();\n    module2.exports.deleteCookie = deleteCookie;\n    module2.exports.getCookies = getCookies;\n    module2.exports.getSetCookies = getSetCookies;\n    module2.exports.setCookie = setCookie;\n    var { parseMIMEType, serializeAMimeType } = require_data_url();\n    module2.exports.parseMIMEType = parseMIMEType;\n    module2.exports.serializeAMimeType = serializeAMimeType;\n    var { CloseEvent, ErrorEvent, MessageEvent } = require_events();\n    module2.exports.WebSocket = require_websocket().WebSocket;\n    module2.exports.CloseEvent = CloseEvent;\n    module2.exports.ErrorEvent = ErrorEvent;\n    module2.exports.MessageEvent = MessageEvent;\n    module2.exports.request = makeDispatcher(api.request);\n    module2.exports.stream = makeDispatcher(api.stream);\n    module2.exports.pipeline = makeDispatcher(api.pipeline);\n    module2.exports.connect = makeDispatcher(api.connect);\n    module2.exports.upgrade = makeDispatcher(api.upgrade);\n    module2.exports.MockClient = MockClient;\n    module2.exports.MockPool = MockPool;\n    module2.exports.MockAgent = MockAgent;\n    module2.exports.mockErrors = mockErrors;\n    var { EventSource } = require_eventsource();\n    module2.exports.EventSource = EventSource;\n  }\n});\n\n// src/primitives/fetch.js\nvar fetch_exports = {};\n__export(fetch_exports, {\n  Blob: () => Blob2,\n  File: () => import_node_buffer.File,\n  FormData: () => FormData,\n  Headers: () => Headers,\n  Request: () => Request,\n  Response: () => Response,\n  WebSocket: () => WebSocket,\n  fetch: () => fetch\n});\nmodule.exports = __toCommonJS(fetch_exports);\ninit_define_process();\nvar import_node_buffer = require(\"buffer\");\nvar import_undici = __toESM(require_undici());\nvar import_response = __toESM(require_response());\nfunction addDuplexToInit(options) {\n  return typeof options === \"undefined\" || typeof options === \"object\" && options.duplex === void 0 ? { duplex: \"half\", ...options } : options;\n}\n__name(addDuplexToInit, \"addDuplexToInit\");\nvar _Request = class _Request extends import_undici.default.Request {\n  constructor(input, options) {\n    super(input, addDuplexToInit(options));\n  }\n};\n__name(_Request, \"Request\");\nvar Request = _Request;\nvar Response = import_undici.default.Response;\nResponse.error = function() {\n  return (0, import_response.fromInnerResponse)((0, import_response.makeNetworkError)(), \"\");\n};\nasync function fetch(resource, options) {\n  const res = await import_undici.default.fetch(resource, addDuplexToInit(options));\n  const response = new Response(res.body, res);\n  Object.defineProperty(response, \"url\", { value: res.url });\n  return response;\n}\n__name(fetch, \"fetch\");\nvar { Headers, FormData, WebSocket } = import_undici.default;\nvar { Blob: Blob2 } = globalThis;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Blob,\n  File,\n  FormData,\n  Headers,\n  Request,\n  Response,\n  WebSocket,\n  fetch\n});\n"
        }
    ]
}