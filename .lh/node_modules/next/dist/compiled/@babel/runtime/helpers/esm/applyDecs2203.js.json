{
    "sourceFile": "node_modules/next/dist/compiled/@babel/runtime/helpers/esm/applyDecs2203.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892701646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import _typeof from \"./typeof.js\";\nfunction applyDecs2203Factory() {\n  function createAddInitializerMethod(initializers, decoratorFinishedRef) {\n    return function (initializer) {\n      !function (decoratorFinishedRef, fnName) {\n        if (decoratorFinishedRef.v) throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n      }(decoratorFinishedRef, \"addInitializer\"), assertCallable(initializer, \"An initializer\"), initializers.push(initializer);\n    };\n  }\n  function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, value) {\n    var kindStr;\n    switch (kind) {\n      case 1:\n        kindStr = \"accessor\";\n        break;\n      case 2:\n        kindStr = \"method\";\n        break;\n      case 3:\n        kindStr = \"getter\";\n        break;\n      case 4:\n        kindStr = \"setter\";\n        break;\n      default:\n        kindStr = \"field\";\n    }\n    var get,\n      set,\n      ctx = {\n        kind: kindStr,\n        name: isPrivate ? \"#\" + name : name,\n        \"static\": isStatic,\n        \"private\": isPrivate\n      },\n      decoratorFinishedRef = {\n        v: !1\n      };\n    0 !== kind && (ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef)), 0 === kind ? isPrivate ? (get = desc.get, set = desc.set) : (get = function get() {\n      return this[name];\n    }, set = function set(v) {\n      this[name] = v;\n    }) : 2 === kind ? get = function get() {\n      return desc.value;\n    } : (1 !== kind && 3 !== kind || (get = function get() {\n      return desc.get.call(this);\n    }), 1 !== kind && 4 !== kind || (set = function set(v) {\n      desc.set.call(this, v);\n    })), ctx.access = get && set ? {\n      get: get,\n      set: set\n    } : get ? {\n      get: get\n    } : {\n      set: set\n    };\n    try {\n      return dec(value, ctx);\n    } finally {\n      decoratorFinishedRef.v = !0;\n    }\n  }\n  function assertCallable(fn, hint) {\n    if (\"function\" != typeof fn) throw new TypeError(hint + \" must be a function\");\n  }\n  function assertValidReturnValue(kind, value) {\n    var type = _typeof(value);\n    if (1 === kind) {\n      if (\"object\" !== type || null === value) throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n      void 0 !== value.get && assertCallable(value.get, \"accessor.get\"), void 0 !== value.set && assertCallable(value.set, \"accessor.set\"), void 0 !== value.init && assertCallable(value.init, \"accessor.init\");\n    } else if (\"function\" !== type) {\n      var hint;\n      throw hint = 0 === kind ? \"field\" : 10 === kind ? \"class\" : \"method\", new TypeError(hint + \" decorators must return a function or void 0\");\n    }\n  }\n  function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers) {\n    var desc,\n      init,\n      value,\n      newValue,\n      get,\n      set,\n      decs = decInfo[0];\n    if (isPrivate ? desc = 0 === kind || 1 === kind ? {\n      get: decInfo[3],\n      set: decInfo[4]\n    } : 3 === kind ? {\n      get: decInfo[3]\n    } : 4 === kind ? {\n      set: decInfo[3]\n    } : {\n      value: decInfo[3]\n    } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = {\n      get: desc.get,\n      set: desc.set\n    } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), \"function\" == typeof decs) void 0 !== (newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, value)) && (assertValidReturnValue(kind, newValue), 0 === kind ? init = newValue : 1 === kind ? (init = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = {\n      get: get,\n      set: set\n    }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) {\n      var newInit;\n      if (void 0 !== (newValue = memberDec(decs[i], name, desc, initializers, kind, isStatic, isPrivate, value))) assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = newValue.init, get = newValue.get || value.get, set = newValue.set || value.set, value = {\n        get: get,\n        set: set\n      }) : value = newValue, void 0 !== newInit && (void 0 === init ? init = newInit : \"function\" == typeof init ? init = [init, newInit] : init.push(newInit));\n    }\n    if (0 === kind || 1 === kind) {\n      if (void 0 === init) init = function init(instance, _init) {\n        return _init;\n      };else if (\"function\" != typeof init) {\n        var ownInitializers = init;\n        init = function init(instance, _init2) {\n          for (var value = _init2, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value);\n          return value;\n        };\n      } else {\n        var originalInitializer = init;\n        init = function init(instance, _init3) {\n          return originalInitializer.call(instance, _init3);\n        };\n      }\n      ret.push(init);\n    }\n    0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) {\n      return value.get.call(instance, args);\n    }), ret.push(function (instance, args) {\n      return value.set.call(instance, args);\n    })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) {\n      return value.call(instance, args);\n    }) : Object.defineProperty(base, name, desc));\n  }\n  function pushInitializers(ret, initializers) {\n    initializers && ret.push(function (instance) {\n      for (var i = 0; i < initializers.length; i++) initializers[i].call(instance);\n      return instance;\n    });\n  }\n  return function (targetClass, memberDecs, classDecs) {\n    var ret = [];\n    return function (ret, Class, decInfos) {\n      for (var protoInitializers, staticInitializers, existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) {\n        var decInfo = decInfos[i];\n        if (Array.isArray(decInfo)) {\n          var base,\n            initializers,\n            kind = decInfo[1],\n            name = decInfo[2],\n            isPrivate = decInfo.length > 3,\n            isStatic = kind >= 5;\n          if (isStatic ? (base = Class, 0 != (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) {\n            var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields,\n              existingKind = existingNonFields.get(name) || 0;\n            if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n            !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0);\n          }\n          applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers);\n        }\n      }\n      pushInitializers(ret, protoInitializers), pushInitializers(ret, staticInitializers);\n    }(ret, targetClass, memberDecs), function (ret, targetClass, classDecs) {\n      if (classDecs.length > 0) {\n        for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) {\n          var decoratorFinishedRef = {\n            v: !1\n          };\n          try {\n            var nextNewClass = classDecs[i](newClass, {\n              kind: \"class\",\n              name: name,\n              addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef)\n            });\n          } finally {\n            decoratorFinishedRef.v = !0;\n          }\n          void 0 !== nextNewClass && (assertValidReturnValue(10, nextNewClass), newClass = nextNewClass);\n        }\n        ret.push(newClass, function () {\n          for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass);\n        });\n      }\n    }(ret, targetClass, classDecs), ret;\n  };\n}\nvar applyDecs2203Impl;\nexport default function applyDecs2203(targetClass, memberDecs, classDecs) {\n  return (applyDecs2203Impl = applyDecs2203Impl || applyDecs2203Factory())(targetClass, memberDecs, classDecs);\n}"
        }
    ]
}