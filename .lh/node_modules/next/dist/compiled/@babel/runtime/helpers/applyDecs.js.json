{
    "sourceFile": "node_modules/next/dist/compiled/@babel/runtime/helpers/applyDecs.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892700221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction old_createMetadataMethodsForProperty(metadataMap, kind, property, decoratorFinishedRef) {\n  return {\n    getMetadata: function getMetadata(key) {\n      old_assertNotFinished(decoratorFinishedRef, \"getMetadata\"), old_assertMetadataKey(key);\n      var metadataForKey = metadataMap[key];\n      if (void 0 !== metadataForKey) if (1 === kind) {\n        var pub = metadataForKey[\"public\"];\n        if (void 0 !== pub) return pub[property];\n      } else if (2 === kind) {\n        var priv = metadataForKey[\"private\"];\n        if (void 0 !== priv) return priv.get(property);\n      } else if (Object.hasOwnProperty.call(metadataForKey, \"constructor\")) return metadataForKey.constructor;\n    },\n    setMetadata: function setMetadata(key, value) {\n      old_assertNotFinished(decoratorFinishedRef, \"setMetadata\"), old_assertMetadataKey(key);\n      var metadataForKey = metadataMap[key];\n      if (void 0 === metadataForKey && (metadataForKey = metadataMap[key] = {}), 1 === kind) {\n        var pub = metadataForKey[\"public\"];\n        void 0 === pub && (pub = metadataForKey[\"public\"] = {}), pub[property] = value;\n      } else if (2 === kind) {\n        var priv = metadataForKey.priv;\n        void 0 === priv && (priv = metadataForKey[\"private\"] = new Map()), priv.set(property, value);\n      } else metadataForKey.constructor = value;\n    }\n  };\n}\nfunction old_convertMetadataMapToFinal(obj, metadataMap) {\n  var parentMetadataMap = obj[Symbol.metadata || Symbol[\"for\"](\"Symbol.metadata\")],\n    metadataKeys = Object.getOwnPropertySymbols(metadataMap);\n  if (0 !== metadataKeys.length) {\n    for (var i = 0; i < metadataKeys.length; i++) {\n      var key = metadataKeys[i],\n        metaForKey = metadataMap[key],\n        parentMetaForKey = parentMetadataMap ? parentMetadataMap[key] : null,\n        pub = metaForKey[\"public\"],\n        parentPub = parentMetaForKey ? parentMetaForKey[\"public\"] : null;\n      pub && parentPub && Object.setPrototypeOf(pub, parentPub);\n      var priv = metaForKey[\"private\"];\n      if (priv) {\n        var privArr = Array.from(priv.values()),\n          parentPriv = parentMetaForKey ? parentMetaForKey[\"private\"] : null;\n        parentPriv && (privArr = privArr.concat(parentPriv)), metaForKey[\"private\"] = privArr;\n      }\n      parentMetaForKey && Object.setPrototypeOf(metaForKey, parentMetaForKey);\n    }\n    parentMetadataMap && Object.setPrototypeOf(metadataMap, parentMetadataMap), obj[Symbol.metadata || Symbol[\"for\"](\"Symbol.metadata\")] = metadataMap;\n  }\n}\nfunction old_createAddInitializerMethod(initializers, decoratorFinishedRef) {\n  return function (initializer) {\n    old_assertNotFinished(decoratorFinishedRef, \"addInitializer\"), old_assertCallable(initializer, \"An initializer\"), initializers.push(initializer);\n  };\n}\nfunction old_memberDec(dec, name, desc, metadataMap, initializers, kind, isStatic, isPrivate, value) {\n  var kindStr;\n  switch (kind) {\n    case 1:\n      kindStr = \"accessor\";\n      break;\n    case 2:\n      kindStr = \"method\";\n      break;\n    case 3:\n      kindStr = \"getter\";\n      break;\n    case 4:\n      kindStr = \"setter\";\n      break;\n    default:\n      kindStr = \"field\";\n  }\n  var metadataKind,\n    metadataName,\n    ctx = {\n      kind: kindStr,\n      name: isPrivate ? \"#\" + name : name,\n      isStatic: isStatic,\n      isPrivate: isPrivate\n    },\n    decoratorFinishedRef = {\n      v: !1\n    };\n  if (0 !== kind && (ctx.addInitializer = old_createAddInitializerMethod(initializers, decoratorFinishedRef)), isPrivate) {\n    metadataKind = 2, metadataName = Symbol(name);\n    var access = {};\n    0 === kind ? (access.get = desc.get, access.set = desc.set) : 2 === kind ? access.get = function () {\n      return desc.value;\n    } : (1 !== kind && 3 !== kind || (access.get = function () {\n      return desc.get.call(this);\n    }), 1 !== kind && 4 !== kind || (access.set = function (v) {\n      desc.set.call(this, v);\n    })), ctx.access = access;\n  } else metadataKind = 1, metadataName = name;\n  try {\n    return dec(value, Object.assign(ctx, old_createMetadataMethodsForProperty(metadataMap, metadataKind, metadataName, decoratorFinishedRef)));\n  } finally {\n    decoratorFinishedRef.v = !0;\n  }\n}\nfunction old_assertNotFinished(decoratorFinishedRef, fnName) {\n  if (decoratorFinishedRef.v) throw new Error(\"attempted to call \" + fnName + \" after decoration was finished\");\n}\nfunction old_assertMetadataKey(key) {\n  if (\"symbol\" != _typeof(key)) throw new TypeError(\"Metadata keys must be symbols, received: \" + key);\n}\nfunction old_assertCallable(fn, hint) {\n  if (\"function\" != typeof fn) throw new TypeError(hint + \" must be a function\");\n}\nfunction old_assertValidReturnValue(kind, value) {\n  var type = _typeof(value);\n  if (1 === kind) {\n    if (\"object\" !== type || null === value) throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");\n    void 0 !== value.get && old_assertCallable(value.get, \"accessor.get\"), void 0 !== value.set && old_assertCallable(value.set, \"accessor.set\"), void 0 !== value.init && old_assertCallable(value.init, \"accessor.init\"), void 0 !== value.initializer && old_assertCallable(value.initializer, \"accessor.initializer\");\n  } else if (\"function\" !== type) {\n    var hint;\n    throw hint = 0 === kind ? \"field\" : 10 === kind ? \"class\" : \"method\", new TypeError(hint + \" decorators must return a function or void 0\");\n  }\n}\nfunction old_getInit(desc) {\n  var initializer;\n  return null == (initializer = desc.init) && (initializer = desc.initializer) && \"undefined\" != typeof console && console.warn(\".initializer has been renamed to .init as of March 2022\"), initializer;\n}\nfunction old_applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, metadataMap, initializers) {\n  var desc,\n    initializer,\n    value,\n    newValue,\n    get,\n    set,\n    decs = decInfo[0];\n  if (isPrivate ? desc = 0 === kind || 1 === kind ? {\n    get: decInfo[3],\n    set: decInfo[4]\n  } : 3 === kind ? {\n    get: decInfo[3]\n  } : 4 === kind ? {\n    set: decInfo[3]\n  } : {\n    value: decInfo[3]\n  } : 0 !== kind && (desc = Object.getOwnPropertyDescriptor(base, name)), 1 === kind ? value = {\n    get: desc.get,\n    set: desc.set\n  } : 2 === kind ? value = desc.value : 3 === kind ? value = desc.get : 4 === kind && (value = desc.set), \"function\" == typeof decs) void 0 !== (newValue = old_memberDec(decs, name, desc, metadataMap, initializers, kind, isStatic, isPrivate, value)) && (old_assertValidReturnValue(kind, newValue), 0 === kind ? initializer = newValue : 1 === kind ? (initializer = old_getInit(newValue), get = newValue.get || value.get, set = newValue.set || value.set, value = {\n    get: get,\n    set: set\n  }) : value = newValue);else for (var i = decs.length - 1; i >= 0; i--) {\n    var newInit;\n    if (void 0 !== (newValue = old_memberDec(decs[i], name, desc, metadataMap, initializers, kind, isStatic, isPrivate, value))) old_assertValidReturnValue(kind, newValue), 0 === kind ? newInit = newValue : 1 === kind ? (newInit = old_getInit(newValue), get = newValue.get || value.get, set = newValue.set || value.set, value = {\n      get: get,\n      set: set\n    }) : value = newValue, void 0 !== newInit && (void 0 === initializer ? initializer = newInit : \"function\" == typeof initializer ? initializer = [initializer, newInit] : initializer.push(newInit));\n  }\n  if (0 === kind || 1 === kind) {\n    if (void 0 === initializer) initializer = function initializer(instance, init) {\n      return init;\n    };else if (\"function\" != typeof initializer) {\n      var ownInitializers = initializer;\n      initializer = function initializer(instance, init) {\n        for (var value = init, i = 0; i < ownInitializers.length; i++) value = ownInitializers[i].call(instance, value);\n        return value;\n      };\n    } else {\n      var originalInitializer = initializer;\n      initializer = function initializer(instance, init) {\n        return originalInitializer.call(instance, init);\n      };\n    }\n    ret.push(initializer);\n  }\n  0 !== kind && (1 === kind ? (desc.get = value.get, desc.set = value.set) : 2 === kind ? desc.value = value : 3 === kind ? desc.get = value : 4 === kind && (desc.set = value), isPrivate ? 1 === kind ? (ret.push(function (instance, args) {\n    return value.get.call(instance, args);\n  }), ret.push(function (instance, args) {\n    return value.set.call(instance, args);\n  })) : 2 === kind ? ret.push(value) : ret.push(function (instance, args) {\n    return value.call(instance, args);\n  }) : Object.defineProperty(base, name, desc));\n}\nfunction old_applyMemberDecs(ret, Class, protoMetadataMap, staticMetadataMap, decInfos) {\n  for (var protoInitializers, staticInitializers, existingProtoNonFields = new Map(), existingStaticNonFields = new Map(), i = 0; i < decInfos.length; i++) {\n    var decInfo = decInfos[i];\n    if (Array.isArray(decInfo)) {\n      var base,\n        metadataMap,\n        initializers,\n        kind = decInfo[1],\n        name = decInfo[2],\n        isPrivate = decInfo.length > 3,\n        isStatic = kind >= 5;\n      if (isStatic ? (base = Class, metadataMap = staticMetadataMap, 0 !== (kind -= 5) && (initializers = staticInitializers = staticInitializers || [])) : (base = Class.prototype, metadataMap = protoMetadataMap, 0 !== kind && (initializers = protoInitializers = protoInitializers || [])), 0 !== kind && !isPrivate) {\n        var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields,\n          existingKind = existingNonFields.get(name) || 0;\n        if (!0 === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \" + name);\n        !existingKind && kind > 2 ? existingNonFields.set(name, kind) : existingNonFields.set(name, !0);\n      }\n      old_applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, metadataMap, initializers);\n    }\n  }\n  old_pushInitializers(ret, protoInitializers), old_pushInitializers(ret, staticInitializers);\n}\nfunction old_pushInitializers(ret, initializers) {\n  initializers && ret.push(function (instance) {\n    for (var i = 0; i < initializers.length; i++) initializers[i].call(instance);\n    return instance;\n  });\n}\nfunction old_applyClassDecs(ret, targetClass, metadataMap, classDecs) {\n  if (classDecs.length > 0) {\n    for (var initializers = [], newClass = targetClass, name = targetClass.name, i = classDecs.length - 1; i >= 0; i--) {\n      var decoratorFinishedRef = {\n        v: !1\n      };\n      try {\n        var ctx = Object.assign({\n            kind: \"class\",\n            name: name,\n            addInitializer: old_createAddInitializerMethod(initializers, decoratorFinishedRef)\n          }, old_createMetadataMethodsForProperty(metadataMap, 0, name, decoratorFinishedRef)),\n          nextNewClass = classDecs[i](newClass, ctx);\n      } finally {\n        decoratorFinishedRef.v = !0;\n      }\n      void 0 !== nextNewClass && (old_assertValidReturnValue(10, nextNewClass), newClass = nextNewClass);\n    }\n    ret.push(newClass, function () {\n      for (var i = 0; i < initializers.length; i++) initializers[i].call(newClass);\n    });\n  }\n}\nfunction applyDecs(targetClass, memberDecs, classDecs) {\n  var ret = [],\n    staticMetadataMap = {},\n    protoMetadataMap = {};\n  return old_applyMemberDecs(ret, targetClass, protoMetadataMap, staticMetadataMap, memberDecs), old_convertMetadataMapToFinal(targetClass.prototype, protoMetadataMap), old_applyClassDecs(ret, targetClass, staticMetadataMap, classDecs), old_convertMetadataMapToFinal(targetClass, staticMetadataMap), ret;\n}\nmodule.exports = applyDecs, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"
        }
    ]
}