{
    "sourceFile": "node_modules/next/dist/compiled/react-server-dom-webpack-experimental/cjs/react-server-dom-webpack-node-register.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892736631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @license React\n * react-server-dom-webpack-node-register.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\nconst acorn = require(\"acorn-loose\"),\n  url = require(\"url\"),\n  Module = require(\"module\");\nmodule.exports = function () {\n  const Server = require(\"react-server-dom-webpack/server\"),\n    registerServerReference = Server.registerServerReference,\n    createClientModuleProxy = Server.createClientModuleProxy,\n    originalCompile = Module.prototype._compile;\n  Module.prototype._compile = function (content, filename) {\n    if (\n      -1 === content.indexOf(\"use client\") &&\n      -1 === content.indexOf(\"use server\")\n    )\n      return originalCompile.apply(this, arguments);\n    try {\n      var body = acorn.parse(content, {\n        ecmaVersion: \"2024\",\n        sourceType: \"source\"\n      }).body;\n    } catch (x) {\n      return (\n        console.error(\"Error parsing %s %s\", url, x.message),\n        originalCompile.apply(this, arguments)\n      );\n    }\n    var useClient = !1,\n      useServer = !1;\n    for (var i = 0; i < body.length; i++) {\n      var node = body[i];\n      if (\"ExpressionStatement\" !== node.type || !node.directive) break;\n      \"use client\" === node.directive && (useClient = !0);\n      \"use server\" === node.directive && (useServer = !0);\n    }\n    if (!useClient && !useServer) return originalCompile.apply(this, arguments);\n    if (useClient && useServer)\n      throw Error(\n        'Cannot have both \"use client\" and \"use server\" directives in the same file.'\n      );\n    useClient &&\n      ((body = url.pathToFileURL(filename).href),\n      (this.exports = createClientModuleProxy(body)));\n    if (useServer)\n      if (\n        (originalCompile.apply(this, arguments),\n        (useServer = url.pathToFileURL(filename).href),\n        (body = this.exports),\n        \"function\" === typeof body)\n      )\n        registerServerReference(body, useServer, null);\n      else\n        for (useClient = Object.keys(body), i = 0; i < useClient.length; i++) {\n          node = useClient[i];\n          const value = body[useClient[i]];\n          \"function\" === typeof value &&\n            registerServerReference(value, useServer, node);\n        }\n  };\n};\n"
        }
    ]
}