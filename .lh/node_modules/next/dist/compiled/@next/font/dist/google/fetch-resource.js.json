{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/google/fetch-resource.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892707264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchResource = fetchResource;\nconst node_http_1 = __importDefault(require(\"node:http\"));\nconst node_https_1 = __importDefault(require(\"node:https\"));\nconst get_proxy_agent_1 = require(\"./get-proxy-agent\");\n/**\n * Makes a simple GET request and returns the entire response as a Buffer.\n * - Throws if the response status is not 200.\n * - Applies a 3000 ms timeout when `isDev` is `true`.\n */\nfunction fetchResource(url, isDev, errorMessage) {\n    return new Promise((resolve, reject) => {\n        const { protocol } = new URL(url);\n        const client = protocol === 'https:' ? node_https_1.default : node_http_1.default;\n        const timeout = isDev ? 3000 : undefined;\n        const req = client.request(url, {\n            agent: (0, get_proxy_agent_1.getProxyAgent)(),\n            headers: {\n                // The file format is based off of the user agent, make sure woff2 files are fetched\n                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) ' +\n                    'AppleWebKit/537.36 (KHTML, like Gecko) ' +\n                    'Chrome/104.0.0.0 Safari/537.36',\n            },\n        }, (res) => {\n            if (res.statusCode !== 200) {\n                reject(new Error(errorMessage ||\n                    `Request failed: ${url} (status: ${res.statusCode})`));\n                return;\n            }\n            const chunks = [];\n            res.on('data', (chunk) => chunks.push(Buffer.from(chunk)));\n            res.on('end', () => resolve(Buffer.concat(chunks)));\n        });\n        if (timeout) {\n            req.setTimeout(timeout, () => {\n                req.destroy(new Error(`Request timed out after ${timeout}ms`));\n            });\n        }\n        req.on('error', (err) => reject(err));\n        req.end();\n    });\n}\n"
        }
    ]
}