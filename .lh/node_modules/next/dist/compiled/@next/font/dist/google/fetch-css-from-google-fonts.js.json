{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/google/fetch-css-from-google-fonts.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892707170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchCSSFromGoogleFonts = fetchCSSFromGoogleFonts;\nconst next_font_error_1 = require(\"../next-font-error\");\nconst fetch_resource_1 = require(\"./fetch-resource\");\nconst retry_1 = require(\"./retry\");\n/**\n * Fetches the CSS containing the @font-face declarations from Google Fonts.\n * The fetch has a user agent header with a modern browser to ensure we'll get .woff2 files.\n *\n * The env variable NEXT_FONT_GOOGLE_MOCKED_RESPONSES may be set containing a path to mocked data.\n * It's used to define mocked data to avoid hitting the Google Fonts API during tests.\n */\nasync function fetchCSSFromGoogleFonts(url, fontFamily, isDev) {\n    if (process.env.NEXT_FONT_GOOGLE_MOCKED_RESPONSES) {\n        const mockFile = require(process.env.NEXT_FONT_GOOGLE_MOCKED_RESPONSES);\n        const mockedResponse = mockFile[url];\n        if (!mockedResponse) {\n            (0, next_font_error_1.nextFontError)('Missing mocked response for URL: ' + url);\n        }\n        return mockedResponse;\n    }\n    const buffer = await (0, retry_1.retry)(async () => {\n        return (0, fetch_resource_1.fetchResource)(url, isDev, `Failed to fetch font \\`${fontFamily}\\`: ${url}\\n` +\n            `Please check your network connection.`);\n    }, 3);\n    return buffer.toString('utf8');\n}\n"
        }
    ]
}