{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/local/validate-local-font-function-call.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892708149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateLocalFontFunctionCall = validateLocalFontFunctionCall;\nconst constants_1 = require(\"../constants\");\nconst format_available_values_1 = require(\"../format-available-values\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst extToFormat = {\n    woff: 'woff',\n    woff2: 'woff2',\n    ttf: 'truetype',\n    otf: 'opentype',\n    eot: 'embedded-opentype',\n};\n/**\n * Validate the data received from next-swc next-transform-font on next/font/local calls\n */\nfunction validateLocalFontFunctionCall(functionName, fontData) {\n    if (functionName) {\n        (0, next_font_error_1.nextFontError)(`next/font/local has no named exports`);\n    }\n    let { src, display = 'swap', weight, style, fallback, preload = true, variable, adjustFontFallback, declarations, } = fontData || {};\n    if (!constants_1.allowedDisplayValues.includes(display)) {\n        (0, next_font_error_1.nextFontError)(`Invalid display value \\`${display}\\`.\\nAvailable display values: ${(0, format_available_values_1.formatAvailableValues)(constants_1.allowedDisplayValues)}`);\n    }\n    if (!src) {\n        (0, next_font_error_1.nextFontError)('Missing required `src` property');\n    }\n    if (!Array.isArray(src)) {\n        src = [{ path: src, weight, style }];\n    }\n    else {\n        if (src.length === 0) {\n            (0, next_font_error_1.nextFontError)('Unexpected empty `src` array.');\n        }\n    }\n    src = src.map((fontFile) => {\n        var _a;\n        const ext = (_a = /\\.(woff|woff2|eot|ttf|otf)$/.exec(fontFile.path)) === null || _a === void 0 ? void 0 : _a[1];\n        if (!ext) {\n            (0, next_font_error_1.nextFontError)(`Unexpected file \\`${fontFile.path}\\``);\n        }\n        return {\n            ...fontFile,\n            ext,\n            format: extToFormat[ext],\n        };\n    });\n    if (Array.isArray(declarations)) {\n        declarations.forEach((declaration) => {\n            if ([\n                'font-family',\n                'src',\n                'font-display',\n                'font-weight',\n                'font-style',\n            ].includes(declaration === null || declaration === void 0 ? void 0 : declaration.prop)) {\n                (0, next_font_error_1.nextFontError)(`Invalid declaration prop: \\`${declaration.prop}\\``);\n            }\n        });\n    }\n    return {\n        src,\n        display,\n        weight,\n        style,\n        fallback,\n        preload,\n        variable,\n        adjustFontFallback,\n        declarations,\n    };\n}\n"
        }
    ]
}