{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/google/get-font-axes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892707439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFontAxes = getFontAxes;\nconst format_available_values_1 = require(\"../format-available-values\");\nconst next_font_error_1 = require(\"../next-font-error\");\nconst google_fonts_metadata_1 = require(\"./google-fonts-metadata\");\n/**\n * Validates and gets the data for each font axis required to generate the Google Fonts URL.\n */\nfunction getFontAxes(fontFamily, weights, styles, selectedVariableAxes) {\n    const hasItalic = styles.includes('italic');\n    const hasNormal = styles.includes('normal');\n    // Make sure the order is correct, otherwise Google Fonts will return an error\n    // If only normal is set, we can skip returning the ital axis as normal is the default\n    const ital = hasItalic ? [...(hasNormal ? ['0'] : []), '1'] : undefined;\n    // Weights will always contain one element if it's a variable font\n    if (weights[0] === 'variable') {\n        // Get all the available axes for the current font from the metadata file\n        const allAxes = google_fonts_metadata_1.googleFontsMetadata[fontFamily].axes;\n        if (!allAxes) {\n            throw new Error('invariant variable font without axes');\n        }\n        if (selectedVariableAxes) {\n            // The axes other than weight and style that can be defined for the current variable font\n            const defineAbleAxes = allAxes\n                .map(({ tag }) => tag)\n                .filter((tag) => tag !== 'wght');\n            if (defineAbleAxes.length === 0) {\n                (0, next_font_error_1.nextFontError)(`Font \\`${fontFamily}\\` has no definable \\`axes\\``);\n            }\n            if (!Array.isArray(selectedVariableAxes)) {\n                (0, next_font_error_1.nextFontError)(`Invalid axes value for font \\`${fontFamily}\\`, expected an array of axes.\\nAvailable axes: ${(0, format_available_values_1.formatAvailableValues)(defineAbleAxes)}`);\n            }\n            selectedVariableAxes.forEach((key) => {\n                if (!defineAbleAxes.some((tag) => tag === key)) {\n                    (0, next_font_error_1.nextFontError)(`Invalid axes value \\`${key}\\` for font \\`${fontFamily}\\`.\\nAvailable axes: ${(0, format_available_values_1.formatAvailableValues)(defineAbleAxes)}`);\n                }\n            });\n        }\n        let weightAxis;\n        let variableAxes;\n        for (const { tag, min, max } of allAxes) {\n            if (tag === 'wght') {\n                // In variable fonts the weight is a range\n                weightAxis = `${min}..${max}`;\n            }\n            else if (selectedVariableAxes === null || selectedVariableAxes === void 0 ? void 0 : selectedVariableAxes.includes(tag)) {\n                if (!variableAxes) {\n                    variableAxes = [];\n                }\n                variableAxes.push([tag, `${min}..${max}`]);\n            }\n        }\n        return {\n            wght: weightAxis ? [weightAxis] : undefined,\n            ital,\n            variableAxes,\n        };\n    }\n    else {\n        return {\n            ital,\n            wght: weights,\n        };\n    }\n}\n"
        }
    ]
}