{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/local/get-fallback-metrics-from-font-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892707944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFallbackMetricsFromFontFile = getFallbackMetricsFromFontFile;\n// The font metadata of the fallback fonts, retrieved with fontkit on system font files\n// The average width is calculated with the calcAverageWidth function below\nconst DEFAULT_SANS_SERIF_FONT = {\n    name: 'Arial',\n    azAvgWidth: 934.5116279069767,\n    unitsPerEm: 2048,\n};\nconst DEFAULT_SERIF_FONT = {\n    name: 'Times New Roman',\n    azAvgWidth: 854.3953488372093,\n    unitsPerEm: 2048,\n};\n/**\n * Calculate the average character width of a font file.\n * Used to calculate the size-adjust property by comparing the fallback average with the loaded font average.\n */\nfunction calcAverageWidth(font) {\n    try {\n        /**\n         * Finding the right characters to use when calculating the average width is tricky.\n         * We can't just use the average width of all characters, because we have to take letter frequency into account.\n         * We also have to take word length into account, because the font's space width usually differ a lot from other characters.\n         * The goal is to find a string that'll give you a good average width, given most texts in most languages.\n         *\n         * TODO: Currently only works for the latin alphabet. Support more languages by finding the right characters for additional languages.\n         *\n         * The used characters were decided through trial and error with letter frequency and word length tables as a guideline.\n         * E.g. https://en.wikipedia.org/wiki/Letter_frequency\n         */\n        const avgCharacters = 'aaabcdeeeefghiijklmnnoopqrrssttuvwxyz      ';\n        // Check if the font file has all the characters we need to calculate the average width\n        const hasAllChars = font\n            .glyphsForString(avgCharacters)\n            .flatMap((glyph) => glyph.codePoints)\n            .every((codePoint) => font.hasGlyphForCodePoint(codePoint));\n        if (!hasAllChars)\n            return undefined;\n        const widths = font\n            .glyphsForString(avgCharacters)\n            .map((glyph) => glyph.advanceWidth);\n        const totalWidth = widths.reduce((sum, width) => sum + width, 0);\n        return totalWidth / widths.length;\n    }\n    catch {\n        // Could not calculate average width from the font file, skip size-adjust\n        return undefined;\n    }\n}\nfunction formatOverrideValue(val) {\n    return Math.abs(val * 100).toFixed(2) + '%';\n}\n/**\n * Given a font file and category, calculate the fallback font override values.\n * The returned values can be used to generate a CSS @font-face declaration.\n *\n * For example:\n * @font-face {\n *   font-family: local-font;\n *   src: local(Arial);\n *   size-adjust: 90%;\n * }\n *\n * Read more about this technique in these texts by the Google Aurora team:\n * https://developer.chrome.com/blog/font-fallbacks/\n * https://docs.google.com/document/d/e/2PACX-1vRsazeNirATC7lIj2aErSHpK26hZ6dA9GsQ069GEbq5fyzXEhXbvByoftSfhG82aJXmrQ_sJCPBqcx_/pub\n */\nfunction getFallbackMetricsFromFontFile(font, category = 'serif') {\n    const fallbackFont = category === 'serif' ? DEFAULT_SERIF_FONT : DEFAULT_SANS_SERIF_FONT;\n    const azAvgWidth = calcAverageWidth(font);\n    const { ascent, descent, lineGap, unitsPerEm } = font;\n    const fallbackFontAvgWidth = fallbackFont.azAvgWidth / fallbackFont.unitsPerEm;\n    let sizeAdjust = azAvgWidth\n        ? azAvgWidth / unitsPerEm / fallbackFontAvgWidth\n        : 1;\n    return {\n        ascentOverride: formatOverrideValue(ascent / (unitsPerEm * sizeAdjust)),\n        descentOverride: formatOverrideValue(descent / (unitsPerEm * sizeAdjust)),\n        lineGapOverride: formatOverrideValue(lineGap / (unitsPerEm * sizeAdjust)),\n        fallbackFont: fallbackFont.name,\n        sizeAdjust: formatOverrideValue(sizeAdjust),\n    };\n}\n"
        }
    ]
}