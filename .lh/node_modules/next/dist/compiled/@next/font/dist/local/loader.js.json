{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/local/loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892708039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\nlet fontFromBuffer;\ntry {\n    const mod = require('../fontkit').default;\n    fontFromBuffer = mod.default || mod;\n}\ncatch { }\nconst util_1 = require(\"util\");\nconst pick_font_file_for_fallback_generation_1 = require(\"./pick-font-file-for-fallback-generation\");\nconst get_fallback_metrics_from_font_file_1 = require(\"./get-fallback-metrics-from-font-file\");\nconst validate_local_font_function_call_1 = require(\"./validate-local-font-function-call\");\nconst nextFontLocalFontLoader = async ({ functionName, variableName, data, emitFontFile, resolve, loaderContext, }) => {\n    const { src, display, fallback, preload, variable, adjustFontFallback, declarations, weight: defaultWeight, style: defaultStyle, } = (0, validate_local_font_function_call_1.validateLocalFontFunctionCall)(functionName, data[0]);\n    // Load all font files and emit them to the .next output directory\n    // Also generate a @font-face CSS for each font file\n    const fontFiles = await Promise.all(src.map(async ({ path, style, weight, ext, format }) => {\n        const resolved = await resolve(path);\n        const fileBuffer = await (0, util_1.promisify)(loaderContext.fs.readFile)(resolved);\n        const fontUrl = emitFontFile(fileBuffer, ext, preload, typeof adjustFontFallback === 'undefined' || !!adjustFontFallback);\n        // Try to load font metadata from the font file using fontkit.\n        // The data is used to calculate the fallback font override values.\n        let fontMetadata;\n        try {\n            fontMetadata = fontFromBuffer === null || fontFromBuffer === void 0 ? void 0 : fontFromBuffer(fileBuffer);\n        }\n        catch (e) {\n            console.error(`Failed to load font file: ${resolved}\\n${e}`);\n        }\n        // Get all values that should be added to the @font-face declaration\n        const fontFaceProperties = [\n            ...(declarations\n                ? declarations.map(({ prop, value }) => [prop, value])\n                : []),\n            ['font-family', variableName],\n            ['src', `url(${fontUrl}) format('${format}')`],\n            ['font-display', display],\n            ...((weight !== null && weight !== void 0 ? weight : defaultWeight)\n                ? [['font-weight', weight !== null && weight !== void 0 ? weight : defaultWeight]]\n                : []),\n            ...((style !== null && style !== void 0 ? style : defaultStyle)\n                ? [['font-style', style !== null && style !== void 0 ? style : defaultStyle]]\n                : []),\n        ];\n        // Generate the @font-face CSS from the font-face properties\n        const css = `@font-face {\\n${fontFaceProperties\n            .map(([property, value]) => `${property}: ${value};`)\n            .join('\\n')}\\n}\\n`;\n        return {\n            css,\n            fontMetadata,\n            weight,\n            style,\n        };\n    }));\n    // Calculate the fallback font override values using the font file metadata\n    let adjustFontFallbackMetrics;\n    if (adjustFontFallback !== false) {\n        const fallbackFontFile = (0, pick_font_file_for_fallback_generation_1.pickFontFileForFallbackGeneration)(fontFiles);\n        if (fallbackFontFile.fontMetadata) {\n            adjustFontFallbackMetrics = (0, get_fallback_metrics_from_font_file_1.getFallbackMetricsFromFontFile)(fallbackFontFile.fontMetadata, adjustFontFallback === 'Times New Roman' ? 'serif' : 'sans-serif');\n        }\n    }\n    return {\n        css: fontFiles.map(({ css }) => css).join('\\n'),\n        fallbackFonts: fallback,\n        weight: src.length === 1 ? src[0].weight : undefined,\n        style: src.length === 1 ? src[0].style : undefined,\n        variable,\n        adjustFontFallback: adjustFontFallbackMetrics,\n    };\n};\nexports.default = nextFontLocalFontLoader;\n"
        }
    ]
}