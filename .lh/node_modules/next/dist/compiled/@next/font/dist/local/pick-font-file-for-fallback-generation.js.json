{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/local/pick-font-file-for-fallback-generation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892708086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pickFontFileForFallbackGeneration = pickFontFileForFallbackGeneration;\nconst next_font_error_1 = require(\"../next-font-error\");\nconst NORMAL_WEIGHT = 400;\nconst BOLD_WEIGHT = 700;\n/**\n * Convert the weight string to a number so it can be used for comparison.\n * Weights can be defined as a number, 'normal' or 'bold'. https://developer.mozilla.org/docs/Web/CSS/@font-face/font-weight\n */\nfunction getWeightNumber(weight) {\n    return weight === 'normal'\n        ? NORMAL_WEIGHT\n        : weight === 'bold'\n            ? BOLD_WEIGHT\n            : Number(weight);\n}\n/**\n * Get the distance from normal (400) weight for the provided weight.\n * If it's not a variable font we can just return the distance.\n * If it's a variable font we need to compare its weight range to 400.\n */\nfunction getDistanceFromNormalWeight(weight) {\n    if (!weight)\n        return 0;\n    // If it's a variable font the weight is defined with two numbers \"100 900\", rather than just one \"400\"\n    const [firstWeight, secondWeight] = weight\n        .trim()\n        .split(/ +/)\n        .map(getWeightNumber);\n    if (Number.isNaN(firstWeight) || Number.isNaN(secondWeight)) {\n        (0, next_font_error_1.nextFontError)(`Invalid weight value in src array: \\`${weight}\\`.\\nExpected \\`normal\\`, \\`bold\\` or a number.`);\n    }\n    // If the weight doesn't have have a second value, it's not a variable font\n    // If that's the case, just return the distance from normal weight\n    if (!secondWeight) {\n        return firstWeight - NORMAL_WEIGHT;\n    }\n    // Normal weight is within variable font range\n    if (firstWeight <= NORMAL_WEIGHT && secondWeight >= NORMAL_WEIGHT) {\n        return 0;\n    }\n    // Normal weight is outside variable font range\n    // Return the distance of normal weight to the variable font range\n    const firstWeightDistance = firstWeight - NORMAL_WEIGHT;\n    const secondWeightDistance = secondWeight - NORMAL_WEIGHT;\n    if (Math.abs(firstWeightDistance) < Math.abs(secondWeightDistance)) {\n        return firstWeightDistance;\n    }\n    return secondWeightDistance;\n}\n/**\n * If multiple font files are provided for a font family, we need to pick one to use for the automatic fallback generation.\n * This function returns the font file that is most likely to be used for the bulk of the text on a page.\n *\n * There are some assumptions here about the text on a page when picking the font file:\n * - Most of the text will have normal weight, use the one closest to 400\n * - Most of the text will have normal style, prefer normal over italic\n * - If two font files have the same distance from normal weight, the thinner one will most likely be the bulk of the text\n */\nfunction pickFontFileForFallbackGeneration(fontFiles) {\n    return fontFiles.reduce((usedFontFile, currentFontFile) => {\n        if (!usedFontFile)\n            return currentFontFile;\n        const usedFontDistance = getDistanceFromNormalWeight(usedFontFile.weight);\n        const currentFontDistance = getDistanceFromNormalWeight(currentFontFile.weight);\n        // Prefer normal style if they have the same weight\n        if (usedFontDistance === currentFontDistance &&\n            (typeof currentFontFile.style === 'undefined' ||\n                currentFontFile.style === 'normal')) {\n            return currentFontFile;\n        }\n        const absUsedDistance = Math.abs(usedFontDistance);\n        const absCurrentDistance = Math.abs(currentFontDistance);\n        // Use closest absolute distance to normal weight\n        if (absCurrentDistance < absUsedDistance)\n            return currentFontFile;\n        // Prefer the thinner font if both have the same absolute distance from normal weight\n        if (absUsedDistance === absCurrentDistance &&\n            currentFontDistance < usedFontDistance) {\n            return currentFontFile;\n        }\n        return usedFontFile;\n    });\n}\n"
        }
    ]
}