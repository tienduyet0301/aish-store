{
    "sourceFile": "node_modules/next/dist/compiled/@next/font/dist/google/fetch-font-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892707213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fetchFontFile = fetchFontFile;\nconst node_fs_1 = __importDefault(require(\"node:fs\"));\nconst retry_1 = require(\"./retry\");\nconst fetch_resource_1 = require(\"./fetch-resource\");\n/**\n * Fetches a font file and returns its contents as a Buffer.\n * If NEXT_FONT_GOOGLE_MOCKED_RESPONSES is set, we handle mock data logic.\n */\nasync function fetchFontFile(url, isDev) {\n    if (process.env.NEXT_FONT_GOOGLE_MOCKED_RESPONSES) {\n        if (url.startsWith('/')) {\n            return node_fs_1.default.readFileSync(url);\n        }\n        return Buffer.from(url);\n    }\n    return await (0, retry_1.retry)(async () => {\n        return (0, fetch_resource_1.fetchResource)(url, isDev, `Failed to fetch font file from \\`${url}\\`.`);\n    }, 3);\n}\n"
        }
    ]
}