{
    "sourceFile": "node_modules/next/dist/compiled/@next/react-refresh-utils/dist/loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892708614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ReactRefreshModule_runtime_1 = __importDefault(require(\"./internal/ReactRefreshModule.runtime\"));\nlet refreshModuleRuntime = ReactRefreshModule_runtime_1.default.toString();\nrefreshModuleRuntime = refreshModuleRuntime\n    .slice(refreshModuleRuntime.indexOf('{') + 1, refreshModuleRuntime.lastIndexOf('}'))\n    // Given that the import above executes the module we need to make sure it does not crash on `import.meta` not being allowed.\n    .replace('global.importMeta', 'import.meta');\nlet commonJsrefreshModuleRuntime = refreshModuleRuntime.replace('import.meta.webpackHot', 'module.hot');\nconst ReactRefreshLoader = function ReactRefreshLoader(source, inputSourceMap) {\n    this.callback(null, `${source}\\n\\n;${\n    // Account for commonjs not supporting `import.meta\n    this.resourcePath.endsWith('.cjs')\n        ? commonJsrefreshModuleRuntime\n        : refreshModuleRuntime}`, inputSourceMap);\n};\nexports.default = ReactRefreshLoader;\n//# sourceMappingURL=loader.js.map"
        }
    ]
}