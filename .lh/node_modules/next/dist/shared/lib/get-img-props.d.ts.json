{
    "sourceFile": "node_modules/next/dist/shared/lib/get-img-props.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892899884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ImageConfigComplete, ImageLoaderProps, ImageLoaderPropsWithConfig } from './image-config';\nimport type { CSSProperties, JSX } from 'react';\nexport interface StaticImageData {\n    src: string;\n    height: number;\n    width: number;\n    blurDataURL?: string;\n    blurWidth?: number;\n    blurHeight?: number;\n}\nexport interface StaticRequire {\n    default: StaticImageData;\n}\nexport type StaticImport = StaticRequire | StaticImageData;\nexport type ImageProps = Omit<JSX.IntrinsicElements['img'], 'src' | 'srcSet' | 'ref' | 'alt' | 'width' | 'height' | 'loading'> & {\n    src: string | StaticImport;\n    alt: string;\n    width?: number | `${number}`;\n    height?: number | `${number}`;\n    fill?: boolean;\n    loader?: ImageLoader;\n    quality?: number | `${number}`;\n    priority?: boolean;\n    loading?: LoadingValue;\n    placeholder?: PlaceholderValue;\n    blurDataURL?: string;\n    unoptimized?: boolean;\n    overrideSrc?: string;\n    /**\n     * @deprecated Use `onLoad` instead.\n     * @see https://nextjs.org/docs/app/api-reference/components/image#onload\n     */\n    onLoadingComplete?: OnLoadingComplete;\n    /**\n     * @deprecated Use `fill` prop instead of `layout=\"fill\"` or change import to `next/legacy/image`.\n     * @see https://nextjs.org/docs/api-reference/next/legacy/image\n     */\n    layout?: string;\n    /**\n     * @deprecated Use `style` prop instead.\n     */\n    objectFit?: string;\n    /**\n     * @deprecated Use `style` prop instead.\n     */\n    objectPosition?: string;\n    /**\n     * @deprecated This prop does not do anything.\n     */\n    lazyBoundary?: string;\n    /**\n     * @deprecated This prop does not do anything.\n     */\n    lazyRoot?: string;\n};\nexport type ImgProps = Omit<ImageProps, 'src' | 'loader'> & {\n    loading: LoadingValue;\n    width: number | undefined;\n    height: number | undefined;\n    style: NonNullable<JSX.IntrinsicElements['img']['style']>;\n    sizes: string | undefined;\n    srcSet: string | undefined;\n    src: string;\n};\ndeclare const VALID_LOADING_VALUES: readonly [\"lazy\", \"eager\", undefined];\ntype LoadingValue = (typeof VALID_LOADING_VALUES)[number];\nexport type ImageLoader = (p: ImageLoaderProps) => string;\ntype ImageLoaderWithConfig = (p: ImageLoaderPropsWithConfig) => string;\nexport type PlaceholderValue = 'blur' | 'empty' | `data:image/${string}`;\nexport type OnLoad = React.ReactEventHandler<HTMLImageElement> | undefined;\nexport type OnLoadingComplete = (img: HTMLImageElement) => void;\nexport type PlaceholderStyle = Partial<Pick<CSSProperties, 'backgroundSize' | 'backgroundPosition' | 'backgroundRepeat' | 'backgroundImage'>>;\n/**\n * A shared function, used on both client and server, to generate the props for <img>.\n */\nexport declare function getImgProps({ src, sizes, unoptimized, priority, loading, className, quality, width, height, fill, style, overrideSrc, onLoad, onLoadingComplete, placeholder, blurDataURL, fetchPriority, decoding, layout, objectFit, objectPosition, lazyBoundary, lazyRoot, ...rest }: ImageProps, _state: {\n    defaultLoader: ImageLoaderWithConfig;\n    imgConf: ImageConfigComplete;\n    showAltText?: boolean;\n    blurComplete?: boolean;\n}): {\n    props: ImgProps;\n    meta: {\n        unoptimized: boolean;\n        priority: boolean;\n        placeholder: NonNullable<ImageProps['placeholder']>;\n        fill: boolean;\n    };\n};\nexport {};\n"
        }
    ]
}