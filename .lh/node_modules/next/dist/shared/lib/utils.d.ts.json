{
    "sourceFile": "node_modules/next/dist/shared/lib/utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892909962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { HtmlProps } from './html-context.shared-runtime';\nimport type { ComponentType, JSX } from 'react';\nimport type { DomainLocale } from '../../server/config';\nimport type { Env } from '@next/env';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type { NextRouter } from './router/router';\nimport type { ParsedUrlQuery } from 'querystring';\nimport type { PreviewData } from '../../types';\nimport type { COMPILER_NAMES } from './constants';\nimport type fs from 'fs';\nexport type NextComponentType<Context extends BaseContext = NextPageContext, InitialProps = {}, Props = {}> = ComponentType<Props> & {\n    /**\n     * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n     * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n     * @param context Context of `page`\n     */\n    getInitialProps?(context: Context): InitialProps | Promise<InitialProps>;\n};\nexport type DocumentType = NextComponentType<DocumentContext, DocumentInitialProps, DocumentProps>;\nexport type AppType<P = {}> = NextComponentType<AppContextType, P, AppPropsType<any, P>>;\nexport type AppTreeType = ComponentType<AppInitialProps & {\n    [name: string]: any;\n}>;\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\nexport declare const WEB_VITALS: readonly [\"CLS\", \"FCP\", \"FID\", \"INP\", \"LCP\", \"TTFB\"];\nexport type NextWebVitalsMetric = {\n    id: string;\n    startTime: number;\n    value: number;\n    attribution?: {\n        [key: string]: unknown;\n    };\n} & ({\n    label: 'web-vital';\n    name: (typeof WEB_VITALS)[number];\n} | {\n    label: 'custom';\n    name: 'Next.js-hydration' | 'Next.js-route-change-to-render' | 'Next.js-render';\n});\nexport type Enhancer<C> = (Component: C) => C;\nexport type ComponentsEnhancer = {\n    enhanceApp?: Enhancer<AppType>;\n    enhanceComponent?: Enhancer<NextComponentType>;\n} | Enhancer<NextComponentType>;\nexport type RenderPageResult = {\n    html: string;\n    head?: Array<JSX.Element | null>;\n};\nexport type RenderPage = (options?: ComponentsEnhancer) => DocumentInitialProps | Promise<DocumentInitialProps>;\nexport type BaseContext = {\n    res?: ServerResponse;\n    [k: string]: any;\n};\nexport type NEXT_DATA = {\n    props: Record<string, any>;\n    page: string;\n    query: ParsedUrlQuery;\n    buildId: string;\n    assetPrefix?: string;\n    runtimeConfig?: {\n        [key: string]: any;\n    };\n    nextExport?: boolean;\n    autoExport?: boolean;\n    isFallback?: boolean;\n    isExperimentalCompile?: boolean;\n    dynamicIds?: (string | number)[];\n    err?: Error & {\n        statusCode?: number;\n        source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer;\n    };\n    gsp?: boolean;\n    gssp?: boolean;\n    customServer?: boolean;\n    gip?: boolean;\n    appGip?: boolean;\n    locale?: string;\n    locales?: readonly string[];\n    defaultLocale?: string;\n    domainLocales?: readonly DomainLocale[];\n    scriptLoader?: any[];\n    isPreview?: boolean;\n    notFoundSrcPage?: string;\n};\n/**\n * `Next` context\n */\nexport interface NextPageContext {\n    /**\n     * Error object if encountered during rendering\n     */\n    err?: (Error & {\n        statusCode?: number;\n    }) | null;\n    /**\n     * `HTTP` request object.\n     */\n    req?: IncomingMessage;\n    /**\n     * `HTTP` response object.\n     */\n    res?: ServerResponse;\n    /**\n     * Path section of `URL`.\n     */\n    pathname: string;\n    /**\n     * Query string section of `URL` parsed as an object.\n     */\n    query: ParsedUrlQuery;\n    /**\n     * `String` of the actual path including query.\n     */\n    asPath?: string;\n    /**\n     * The currently active locale\n     */\n    locale?: string;\n    /**\n     * All configured locales\n     */\n    locales?: readonly string[];\n    /**\n     * The configured default locale\n     */\n    defaultLocale?: string;\n    /**\n     * `Component` the tree of the App to use if needing to render separately\n     */\n    AppTree: AppTreeType;\n}\nexport type AppContextType<Router extends NextRouter = NextRouter> = {\n    Component: NextComponentType<NextPageContext>;\n    AppTree: AppTreeType;\n    ctx: NextPageContext;\n    router: Router;\n};\nexport type AppInitialProps<PageProps = any> = {\n    pageProps: PageProps;\n};\nexport type AppPropsType<Router extends NextRouter = NextRouter, PageProps = {}> = AppInitialProps<PageProps> & {\n    Component: NextComponentType<NextPageContext, any, any>;\n    router: Router;\n    __N_SSG?: boolean;\n    __N_SSP?: boolean;\n};\nexport type DocumentContext = NextPageContext & {\n    renderPage: RenderPage;\n    defaultGetInitialProps(ctx: DocumentContext, options?: {\n        nonce?: string;\n    }): Promise<DocumentInitialProps>;\n};\nexport type DocumentInitialProps = RenderPageResult & {\n    styles?: React.ReactElement[] | Iterable<React.ReactNode> | JSX.Element;\n};\nexport type DocumentProps = DocumentInitialProps & HtmlProps;\n/**\n * Next `API` route request\n */\nexport interface NextApiRequest extends IncomingMessage {\n    /**\n     * Object of `query` values from url\n     */\n    query: Partial<{\n        [key: string]: string | string[];\n    }>;\n    /**\n     * Object of `cookies` from header\n     */\n    cookies: Partial<{\n        [key: string]: string;\n    }>;\n    body: any;\n    env: Env;\n    draftMode?: boolean;\n    preview?: boolean;\n    /**\n     * Preview data set on the request, if any\n     * */\n    previewData?: PreviewData;\n}\n/**\n * Send body of response\n */\ntype Send<T> = (body: T) => void;\n/**\n * Next `API` route response\n */\nexport type NextApiResponse<Data = any> = ServerResponse & {\n    /**\n     * Send data `any` data in response\n     */\n    send: Send<Data>;\n    /**\n     * Send data `json` data in response\n     */\n    json: Send<Data>;\n    status: (statusCode: number) => NextApiResponse<Data>;\n    redirect(url: string): NextApiResponse<Data>;\n    redirect(status: number, url: string): NextApiResponse<Data>;\n    /**\n     * Set draft mode\n     */\n    setDraftMode: (options: {\n        enable: boolean;\n    }) => NextApiResponse<Data>;\n    /**\n     * Set preview data for Next.js' prerender mode\n     */\n    setPreviewData: (data: object | string, options?: {\n        /**\n         * Specifies the number (in seconds) for the preview session to last for.\n         * The given number will be converted to an integer by rounding down.\n         * By default, no maximum age is set and the preview session finishes\n         * when the client shuts down (browser is closed).\n         */\n        maxAge?: number;\n        /**\n         * Specifies the path for the preview session to work under. By default,\n         * the path is considered the \"default path\", i.e., any pages under \"/\".\n         */\n        path?: string;\n    }) => NextApiResponse<Data>;\n    /**\n     * Clear preview data for Next.js' prerender mode\n     */\n    clearPreviewData: (options?: {\n        path?: string;\n    }) => NextApiResponse<Data>;\n    /**\n     * Revalidate a specific page and regenerate it using On-Demand Incremental\n     * Static Regeneration.\n     * The path should be an actual path, not a rewritten path. E.g. for\n     * \"/blog/[slug]\" this should be \"/blog/post-1\".\n     * @link https://nextjs.org/docs/app/building-your-application/data-fetching/incremental-static-regeneration#on-demand-revalidation-with-revalidatepath\n     */\n    revalidate: (urlPath: string, opts?: {\n        unstable_onlyGenerated?: boolean;\n    }) => Promise<void>;\n};\n/**\n * Next `API` route handler\n */\nexport type NextApiHandler<T = any> = (req: NextApiRequest, res: NextApiResponse<T>) => unknown | Promise<unknown>;\n/**\n * Utils\n */\nexport declare function execOnce<T extends (...args: any[]) => ReturnType<T>>(fn: T): T;\nexport declare const isAbsoluteUrl: (url: string) => boolean;\nexport declare function getLocationOrigin(): string;\nexport declare function getURL(): string;\nexport declare function getDisplayName<P>(Component: ComponentType<P>): string;\nexport declare function isResSent(res: ServerResponse): boolean;\nexport declare function normalizeRepeatedSlashes(url: string): string;\nexport declare function loadGetInitialProps<C extends BaseContext, IP = {}, P = {}>(App: NextComponentType<C, IP, P>, ctx: C): Promise<IP>;\nexport declare const SP: boolean;\nexport declare const ST: boolean;\nexport declare class DecodeError extends Error {\n}\nexport declare class NormalizeError extends Error {\n}\nexport declare class PageNotFoundError extends Error {\n    code: string;\n    constructor(page: string);\n}\nexport declare class MissingStaticPage extends Error {\n    constructor(page: string, message: string);\n}\nexport declare class MiddlewareNotFoundError extends Error {\n    code: string;\n    constructor();\n}\nexport interface CacheFs {\n    existsSync: typeof fs.existsSync;\n    readFile: typeof fs.promises.readFile;\n    readFileSync: typeof fs.readFileSync;\n    writeFile(f: string, d: any): Promise<void>;\n    mkdir(dir: string): Promise<void | string>;\n    stat(f: string): Promise<{\n        mtime: Date;\n    }>;\n}\nexport declare function stringifyError(error: Error): string;\nexport {};\n"
        }
    ]
}