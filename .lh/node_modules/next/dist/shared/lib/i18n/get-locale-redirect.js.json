{
    "sourceFile": "node_modules/next/dist/shared/lib/i18n/get-locale-redirect.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892900905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getLocaleRedirect\", {\n    enumerable: true,\n    get: function() {\n        return getLocaleRedirect;\n    }\n});\nconst _acceptheader = require(\"../../../server/accept-header\");\nconst _denormalizepagepath = require(\"../page-path/denormalize-page-path\");\nconst _detectdomainlocale = require(\"./detect-domain-locale\");\nconst _formaturl = require(\"../router/utils/format-url\");\nconst _getcookieparser = require(\"../../../server/api-utils/get-cookie-parser\");\nfunction getLocaleFromCookie(i18n, headers) {\n    if (headers === void 0) headers = {};\n    var _getCookieParser_NEXT_LOCALE, _getCookieParser;\n    const nextLocale = (_getCookieParser = (0, _getcookieparser.getCookieParser)(headers || {})()) == null ? void 0 : (_getCookieParser_NEXT_LOCALE = _getCookieParser.NEXT_LOCALE) == null ? void 0 : _getCookieParser_NEXT_LOCALE.toLowerCase();\n    return nextLocale ? i18n.locales.find((locale)=>nextLocale === locale.toLowerCase()) : undefined;\n}\nfunction detectLocale(param) {\n    let { i18n, headers, domainLocale, preferredLocale, pathLocale } = param;\n    return pathLocale || (domainLocale == null ? void 0 : domainLocale.defaultLocale) || getLocaleFromCookie(i18n, headers) || preferredLocale || i18n.defaultLocale;\n}\nfunction getAcceptPreferredLocale(i18n, headers) {\n    if ((headers == null ? void 0 : headers['accept-language']) && !Array.isArray(headers['accept-language'])) {\n        try {\n            return (0, _acceptheader.acceptLanguage)(headers['accept-language'], i18n.locales);\n        } catch (err) {}\n    }\n}\nfunction getLocaleRedirect(param) {\n    let { defaultLocale, domainLocale, pathLocale, headers, nextConfig, urlParsed } = param;\n    if (nextConfig.i18n && nextConfig.i18n.localeDetection !== false && (0, _denormalizepagepath.denormalizePagePath)(urlParsed.pathname) === '/') {\n        const preferredLocale = getAcceptPreferredLocale(nextConfig.i18n, headers);\n        const detectedLocale = detectLocale({\n            i18n: nextConfig.i18n,\n            preferredLocale,\n            headers,\n            pathLocale,\n            domainLocale\n        });\n        const preferredDomain = (0, _detectdomainlocale.detectDomainLocale)(nextConfig.i18n.domains, undefined, preferredLocale);\n        if (domainLocale && preferredDomain) {\n            const isPDomain = preferredDomain.domain === domainLocale.domain;\n            const isPLocale = preferredDomain.defaultLocale === preferredLocale;\n            if (!isPDomain || !isPLocale) {\n                const scheme = \"http\" + (preferredDomain.http ? '' : 's');\n                const rlocale = isPLocale ? '' : preferredLocale;\n                return scheme + \"://\" + preferredDomain.domain + \"/\" + rlocale;\n            }\n        }\n        if (detectedLocale.toLowerCase() !== defaultLocale.toLowerCase()) {\n            return (0, _formaturl.formatUrl)({\n                ...urlParsed,\n                pathname: (nextConfig.basePath || '') + \"/\" + detectedLocale + (nextConfig.trailingSlash ? '/' : '')\n            });\n        }\n    }\n}\n\n//# sourceMappingURL=get-locale-redirect.js.map"
        }
    ]
}