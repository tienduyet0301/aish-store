{
    "sourceFile": "node_modules/next/dist/shared/lib/turbopack/utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892909640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Issue, StyledString, TurbopackResult } from '../../../build/swc/types';\nimport type { EntryKey } from './entry-key';\nimport type { NextConfigComplete } from '../../../server/config-shared';\ntype IssueKey = `${Issue['severity']}-${Issue['filePath']}-${string}-${string}`;\nexport type IssuesMap = Map<IssueKey, Issue>;\nexport type EntryIssuesMap = Map<EntryKey, IssuesMap>;\nexport type TopLevelIssuesMap = IssuesMap;\nexport declare class ModuleBuildError extends Error {\n    name: string;\n}\nexport declare class TurbopackInternalError extends Error {\n    name: string;\n    __NEXT_ERROR_CODE: string;\n    static createAndRecordTelemetry(cause: Error): TurbopackInternalError;\n    constructor(cause: Error);\n}\n/**\n * Thin stopgap workaround layer to mimic existing wellknown-errors-plugin in webpack's build\n * to emit certain type of errors into cli.\n */\nexport declare function isWellKnownError(issue: Issue): boolean;\nexport declare function getIssueKey(issue: Issue): IssueKey;\nexport declare function getTurbopackJsConfig(dir: string, nextConfig: NextConfigComplete): Promise<{\n    compilerOptions: Record<string, any>;\n}>;\nexport declare function processIssues(currentEntryIssues: EntryIssuesMap, key: EntryKey, result: TurbopackResult, throwIssue: boolean, logErrors: boolean): void;\nexport declare function formatIssue(issue: Issue): string;\nexport declare function isRelevantWarning(issue: Issue): boolean;\nexport declare function renderStyledStringToErrorAnsi(string: StyledString): string;\nexport declare function isPersistentCachingEnabled(config: NextConfigComplete): boolean;\nexport {};\n"
        }
    ]
}