{
    "sourceFile": "node_modules/next/dist/shared/lib/turbopack/manifest-loader.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892909558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { MiddlewareManifest } from '../../../build/webpack/plugins/middleware-plugin';\nimport type { SetupOpts } from '../../../server/lib/router-utils/setup-dev-bundler';\nimport { type EntryKey } from './entry-key';\nimport type { CustomRoutes } from '../../../lib/load-custom-routes';\nimport type { Entrypoints } from '../../../build/swc/types';\ninterface InstrumentationDefinition {\n    files: string[];\n    name: 'instrumentation';\n}\ntype TurbopackMiddlewareManifest = MiddlewareManifest & {\n    instrumentation?: InstrumentationDefinition;\n};\nexport declare class TurbopackManifestLoader {\n    private actionManifests;\n    private appBuildManifests;\n    private appPathsManifests;\n    private buildManifests;\n    private fontManifests;\n    private middlewareManifests;\n    private pagesManifests;\n    private webpackStats;\n    private encryptionKey;\n    private readonly distDir;\n    private readonly buildId;\n    constructor({ distDir, buildId, encryptionKey, }: {\n        buildId: string;\n        distDir: string;\n        encryptionKey: string;\n    });\n    delete(key: EntryKey): void;\n    loadActionManifest(pageName: string): Promise<void>;\n    private mergeActionManifests;\n    private writeActionManifest;\n    loadAppBuildManifest(pageName: string): Promise<void>;\n    private mergeAppBuildManifests;\n    private writeAppBuildManifest;\n    loadAppPathsManifest(pageName: string): Promise<void>;\n    private writeAppPathsManifest;\n    private writeWebpackStats;\n    loadBuildManifest(pageName: string, type?: 'app' | 'pages'): Promise<void>;\n    loadWebpackStats(pageName: string, type?: 'app' | 'pages'): Promise<void>;\n    private mergeWebpackStats;\n    private mergeBuildManifests;\n    private writeBuildManifest;\n    private writeClientMiddlewareManifest;\n    private writeFallbackBuildManifest;\n    loadFontManifest(pageName: string, type?: 'app' | 'pages'): Promise<void>;\n    private mergeFontManifests;\n    private writeNextFontManifest;\n    /**\n     * @returns If the manifest was written or not\n     */\n    loadMiddlewareManifest(pageName: string, type: 'pages' | 'app' | 'middleware' | 'instrumentation'): Promise<boolean>;\n    getMiddlewareManifest(key: EntryKey): TurbopackMiddlewareManifest | undefined;\n    deleteMiddlewareManifest(key: EntryKey): boolean;\n    private mergeMiddlewareManifests;\n    private writeMiddlewareManifest;\n    loadPagesManifest(pageName: string): Promise<void>;\n    private mergePagesManifests;\n    private writePagesManifest;\n    writeManifests({ devRewrites, productionRewrites, entrypoints, }: {\n        devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined;\n        productionRewrites: CustomRoutes['rewrites'] | undefined;\n        entrypoints: Entrypoints;\n    }): Promise<void>;\n}\nexport {};\n"
        }
    ]
}