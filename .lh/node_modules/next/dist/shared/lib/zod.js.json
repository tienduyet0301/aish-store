{
    "sourceFile": "node_modules/next/dist/shared/lib/zod.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892910146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    formatZodError: null,\n    normalizeZodErrors: null,\n    reportZodError: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    formatZodError: function() {\n        return formatZodError;\n    },\n    normalizeZodErrors: function() {\n        return normalizeZodErrors;\n    },\n    reportZodError: function() {\n        return reportZodError;\n    }\n});\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\nconst _zod = require(\"next/dist/compiled/zod\");\nconst _zodvalidationerror = require(\"next/dist/compiled/zod-validation-error\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard._(require(\"../../build/output/log\"));\nfunction processZodErrorMessage(issue) {\n    let message = issue.message;\n    let path;\n    if (issue.path.length > 0) {\n        if (issue.path.length === 1) {\n            const identifier = issue.path[0];\n            if (typeof identifier === 'number') {\n                // The first identifier inside path is a number\n                path = \"index \" + identifier;\n            } else {\n                path = '\"' + identifier + '\"';\n            }\n        } else {\n            // joined path to be shown in the error message\n            path = '\"' + issue.path.reduce((acc, cur)=>{\n                if (typeof cur === 'number') {\n                    // array index\n                    return acc + \"[\" + cur + \"]\";\n                }\n                if (cur.includes('\"')) {\n                    // escape quotes\n                    return acc + '[\"' + cur.replaceAll('\"', '\\\\\"') + '\"]';\n                }\n                // dot notation\n                const separator = acc.length === 0 ? '' : '.';\n                return acc + separator + cur;\n            }, '') + '\"';\n        }\n    } else {\n        path = '';\n    }\n    if (issue.code === 'invalid_type' && issue.received === _zod.ZodParsedType.undefined) {\n        // Missing key in object.\n        return path + \" is missing, expected \" + issue.expected;\n    }\n    if (issue.code === 'invalid_enum_value') {\n        // Remove \"Invalid enum value\" prefix from zod default error message\n        return \"Expected \" + _zod.util.joinValues(issue.options) + \", received '\" + issue.received + \"' at \" + path;\n    }\n    return message + (path ? \" at \" + path : '');\n}\nfunction normalizeZodErrors(error) {\n    return error.issues.flatMap((issue)=>{\n        const issues = [\n            {\n                issue,\n                message: processZodErrorMessage(issue)\n            }\n        ];\n        if ('unionErrors' in issue) {\n            for (const unionError of issue.unionErrors){\n                issues.push(...normalizeZodErrors(unionError));\n            }\n        }\n        return issues;\n    });\n}\nfunction formatZodError(prefix, error) {\n    return Object.defineProperty(new Error((0, _zodvalidationerror.fromZodError)(error, {\n        prefix: prefix\n    }).toString()), \"__NEXT_ERROR_CODE\", {\n        value: \"E394\",\n        enumerable: false,\n        configurable: true\n    });\n}\nfunction reportZodError(prefix, error) {\n    _log.error(formatZodError(prefix, error).message);\n}\n\n//# sourceMappingURL=zod.js.map"
        }
    ]
}