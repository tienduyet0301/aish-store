{
    "sourceFile": "node_modules/next/dist/export/helpers/create-incremental-cache.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892855497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"createIncrementalCache\", {\n    enumerable: true,\n    get: function() {\n        return createIncrementalCache;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _incrementalcache = require(\"../../server/lib/incremental-cache\");\nconst _ciinfo = require(\"../../server/ci-info\");\nconst _nodefsmethods = require(\"../../server/lib/node-fs-methods\");\nconst _interopdefault = require(\"../../lib/interop-default\");\nconst _formatdynamicimportpath = require(\"../../lib/format-dynamic-import-path\");\nconst _handlers = require(\"../../server/use-cache/handlers\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nasync function createIncrementalCache({ cacheHandler, cacheMaxMemorySize, fetchCacheKeyPrefix, distDir, dir, flushToDisk, cacheHandlers, requestHeaders }) {\n    // Custom cache handler overrides.\n    let CacheHandler;\n    if (cacheHandler) {\n        CacheHandler = (0, _interopdefault.interopDefault)(await import((0, _formatdynamicimportpath.formatDynamicImportPath)(dir, cacheHandler)).then((mod)=>mod.default || mod));\n    }\n    if (cacheHandlers && (0, _handlers.initializeCacheHandlers)()) {\n        for (const [kind, handler] of Object.entries(cacheHandlers)){\n            if (!handler) continue;\n            (0, _handlers.setCacheHandler)(kind, (0, _interopdefault.interopDefault)(await import((0, _formatdynamicimportpath.formatDynamicImportPath)(dir, handler)).then((mod)=>mod.default || mod)));\n        }\n    }\n    const incrementalCache = new _incrementalcache.IncrementalCache({\n        dev: false,\n        requestHeaders: requestHeaders || {},\n        flushToDisk,\n        maxMemoryCacheSize: cacheMaxMemorySize,\n        fetchCacheKeyPrefix,\n        getPrerenderManifest: ()=>({\n                version: 4,\n                routes: {},\n                dynamicRoutes: {},\n                preview: {\n                    previewModeEncryptionKey: '',\n                    previewModeId: '',\n                    previewModeSigningKey: ''\n                },\n                notFoundRoutes: []\n            }),\n        fs: _nodefsmethods.nodeFs,\n        serverDistDir: _path.default.join(distDir, 'server'),\n        CurCacheHandler: CacheHandler,\n        minimalMode: _ciinfo.hasNextSupport\n    });\n    globalThis.__incrementalCache = incrementalCache;\n    return incrementalCache;\n}\n\n//# sourceMappingURL=create-incremental-cache.js.map"
        }
    ]
}