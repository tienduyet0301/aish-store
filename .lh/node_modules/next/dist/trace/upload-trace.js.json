{
    "sourceFile": "node_modules/next/dist/trace/upload-trace.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892912390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return uploadTrace;\n    }\n});\nconst _shared = require(\"./shared\");\nconst _storage = require(\"../telemetry/storage\");\nfunction uploadTrace({ traceUploadUrl, mode, projectDir, distDir, isTurboSession, sync }) {\n    const { NEXT_TRACE_UPLOAD_DEBUG } = process.env;\n    const telemetry = new _storage.Telemetry({\n        distDir\n    });\n    // Note: cross-spawn is not used here as it causes\n    // a new command window to appear when we don't want it to\n    const child_process = require('child_process');\n    // we use spawnSync when debugging to ensure logs are piped\n    // correctly to stdout/stderr\n    const spawn = NEXT_TRACE_UPLOAD_DEBUG || sync ? child_process.spawnSync : child_process.spawn;\n    spawn(process.execPath, [\n        require.resolve('./trace-uploader'),\n        traceUploadUrl,\n        mode,\n        projectDir,\n        distDir,\n        String(isTurboSession),\n        _shared.traceId,\n        telemetry.anonymousId,\n        telemetry.sessionId\n    ], {\n        detached: !NEXT_TRACE_UPLOAD_DEBUG,\n        windowsHide: true,\n        shell: false,\n        ...NEXT_TRACE_UPLOAD_DEBUG ? {\n            stdio: 'inherit'\n        } : {}\n    });\n}\n\n//# sourceMappingURL=upload-trace.js.map"
        }
    ]
}