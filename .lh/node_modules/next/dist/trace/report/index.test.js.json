{
    "sourceFile": "node_modules/next/dist/trace/report/index.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892911606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _promises = require(\"fs/promises\");\nconst _ = require(\".\");\nconst _shared = require(\"../shared\");\nconst _path = require(\"path\");\nconst _os = require(\"os\");\nconst TRACE_EVENT = {\n    name: 'test-span',\n    duration: 321,\n    timestamp: Date.now(),\n    id: 127,\n    startTime: Date.now()\n};\nconst WEBPACK_INVALIDATED_EVENT = {\n    name: 'webpack-invalidated',\n    duration: 100,\n    timestamp: Date.now(),\n    id: 112,\n    startTime: Date.now()\n};\ndescribe('Trace Reporter', ()=>{\n    describe('JSON reporter', ()=>{\n        it('should write the trace events to JSON file', async ()=>{\n            const tmpDir = await (0, _promises.mkdtemp)((0, _path.join)((0, _os.tmpdir)(), 'json-reporter'));\n            (0, _shared.setGlobal)('distDir', tmpDir);\n            (0, _shared.setGlobal)('phase', 'anything');\n            _.reporter.report(TRACE_EVENT);\n            await _.reporter.flushAll();\n            const traceFilename = (0, _path.join)(tmpDir, 'trace');\n            const traces = JSON.parse(await (0, _promises.readFile)(traceFilename, 'utf-8'));\n            expect(traces.length).toEqual(1);\n            expect(traces[0].name).toEqual('test-span');\n            expect(traces[0].id).toEqual(127);\n            expect(traces[0].duration).toEqual(321);\n            expect(traces[0].traceId).toBeDefined();\n        });\n    });\n    describe('Telemetry reporter', ()=>{\n        it('should record telemetry event', async ()=>{\n            const recordMock = jest.fn();\n            const telemetryMock = {\n                record: recordMock\n            };\n            (0, _shared.setGlobal)('telemetry', telemetryMock);\n            // This should be ignored.\n            _.reporter.report(TRACE_EVENT);\n            expect(recordMock).toHaveBeenCalledTimes(0);\n            _.reporter.report(WEBPACK_INVALIDATED_EVENT);\n            expect(recordMock).toHaveBeenCalledTimes(1);\n            expect(recordMock).toHaveBeenCalledWith({\n                eventName: 'WEBPACK_INVALIDATED',\n                payload: {\n                    durationInMicroseconds: 100\n                }\n            });\n        });\n    });\n});\n\n//# sourceMappingURL=index.test.js.map"
        }
    ]
}