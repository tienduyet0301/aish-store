{
    "sourceFile": "node_modules/next/dist/trace/trace.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892911959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { SpanId, TraceEvent, TraceState } from './types';\nexport declare enum SpanStatus {\n    Started = \"started\",\n    Stopped = \"stopped\"\n}\ninterface Attributes {\n    [key: string]: string;\n}\nexport declare class Span {\n    private name;\n    private id;\n    private parentId?;\n    private attrs;\n    private status;\n    private now;\n    private _start;\n    constructor({ name, parentId, attrs, startTime, }: {\n        name: string;\n        parentId?: SpanId;\n        startTime?: bigint;\n        attrs?: Attributes;\n    });\n    stop(stopTime?: bigint): void;\n    traceChild(name: string, attrs?: Attributes): Span;\n    manualTraceChild(name: string, startTime?: bigint, stopTime?: bigint, attrs?: Attributes): void;\n    getId(): number;\n    setAttribute(key: string, value: string): void;\n    traceFn<T>(fn: (span: Span) => T): T;\n    traceAsyncFn<T>(fn: (span: Span) => T | Promise<T>): Promise<T>;\n}\nexport declare const trace: (name: string, parentId?: SpanId, attrs?: {\n    [key: string]: string;\n}) => Span;\nexport declare const flushAllTraces: (opts?: {\n    end: boolean;\n}) => Promise<void>;\nexport declare const exportTraceState: () => TraceState;\nexport declare const initializeTraceState: (state: TraceState) => void;\nexport declare function getTraceEvents(): TraceEvent[];\nexport declare function recordTraceEvents(events: TraceEvent[]): void;\nexport declare const clearTraceEvents: () => never[];\nexport {};\n"
        }
    ]
}