{
    "sourceFile": "node_modules/next/dist/trace/trace.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892912076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _promises = require(\"fs/promises\");\nconst _path = require(\"path\");\nconst _os = require(\"os\");\nconst _shared = require(\"./shared\");\nconst _trace = require(\"./trace\");\ndescribe('Trace', ()=>{\n    beforeEach(()=>{\n        (0, _trace.initializeTraceState)({\n            lastId: 0,\n            shouldSaveTraceEvents: true\n        });\n        (0, _trace.clearTraceEvents)();\n    });\n    describe('Tracer', ()=>{\n        it('traces a block of code', async ()=>{\n            const tmpDir = await (0, _promises.mkdtemp)((0, _path.join)((0, _os.tmpdir)(), 'json-reporter'));\n            (0, _shared.setGlobal)('distDir', tmpDir);\n            (0, _shared.setGlobal)('phase', 'anything');\n            const root = (0, _trace.trace)('root-span', undefined, {\n                'some-tag': 'some-value'\n            });\n            root.traceChild('child-span').traceFn(()=>null);\n            await root.traceChild('async-child-span').traceAsyncFn(async ()=>{\n                const delayedPromise = new Promise((resolve)=>{\n                    setTimeout(resolve, 100);\n                });\n                await delayedPromise;\n            });\n            root.stop();\n            const traceEvents = (0, _trace.getTraceEvents)();\n            expect(traceEvents.length).toEqual(3);\n            expect(traceEvents[0].name).toEqual('child-span');\n            expect(traceEvents[1].name).toEqual('async-child-span');\n            expect(traceEvents[2].name).toEqual('root-span');\n            // Check that the serialized .next/trace file looks correct.\n            await (0, _trace.flushAllTraces)();\n            const traceFilename = (0, _path.join)(tmpDir, 'trace');\n            const serializedTraces = JSON.parse(await (0, _promises.readFile)(traceFilename, 'utf-8'));\n            expect(serializedTraces).toMatchObject([\n                {\n                    id: 2,\n                    name: 'child-span',\n                    parentId: 1,\n                    startTime: expect.any(Number),\n                    timestamp: expect.any(Number),\n                    duration: expect.any(Number),\n                    tags: {}\n                },\n                {\n                    id: 3,\n                    name: 'async-child-span',\n                    parentId: 1,\n                    startTime: expect.any(Number),\n                    timestamp: expect.any(Number),\n                    duration: expect.any(Number),\n                    tags: {}\n                },\n                {\n                    id: 1,\n                    name: 'root-span',\n                    startTime: expect.any(Number),\n                    timestamp: expect.any(Number),\n                    duration: expect.any(Number),\n                    tags: {\n                        'some-tag': 'some-value'\n                    }\n                }\n            ]);\n        });\n    });\n    describe('Worker', ()=>{\n        it('exports and initializes trace state', ()=>{\n            const root = (0, _trace.trace)('root-span');\n            expect(root.getId()).toEqual(1);\n            const traceState = (0, _trace.exportTraceState)();\n            expect(traceState.lastId).toEqual(1);\n            (0, _trace.initializeTraceState)({\n                lastId: 101\n            });\n            const span = (0, _trace.trace)('another-span');\n            expect(span.getId()).toEqual(102);\n        });\n        it('trace data is serializable to a worker', async ()=>{\n            const root = (0, _trace.trace)('root-span');\n            root.traceChild('child-span').traceFn(()=>null);\n            root.stop();\n            const traceEvents = (0, _trace.getTraceEvents)();\n            expect(traceEvents.length).toEqual(2);\n            // This is a proxy check to make sure the object would be serializable\n            // to a worker. It will fail if the data contains some unserializable\n            // objects like BigInt.\n            const clone = JSON.parse(JSON.stringify(traceEvents));\n            expect(clone).toEqual(traceEvents);\n        });\n        it('correctly reports trace data from multiple workers', ()=>{\n            // This test simulates workers creating traces and propagating them\n            // back to the main process for recording. It doesn't use\n            // actual workers since they are more difficult to set up in tests.\n            (0, _trace.initializeTraceState)({\n                lastId: 5,\n                defaultParentSpanId: 1,\n                shouldSaveTraceEvents: true\n            });\n            const worker1Span = (0, _trace.trace)('worker1');\n            worker1Span.traceChild('webpack-compilation1').traceFn(()=>null);\n            worker1Span.stop();\n            const worker1Traces = (0, _trace.getTraceEvents)();\n            expect(worker1Traces.length).toEqual(2);\n            // Repeat for a second worker.\n            (0, _trace.clearTraceEvents)();\n            (0, _trace.initializeTraceState)({\n                lastId: 10,\n                defaultParentSpanId: 1,\n                shouldSaveTraceEvents: true\n            });\n            const worker2Span = (0, _trace.trace)('worker2');\n            worker2Span.traceChild('webpack-compilation2').traceFn(()=>null);\n            worker2Span.stop();\n            const worker2Traces = (0, _trace.getTraceEvents)();\n            expect(worker2Traces.length).toEqual(2);\n            // Now simulate the traces in the main process and record the traces\n            // from each worker.\n            (0, _trace.clearTraceEvents)();\n            (0, _trace.initializeTraceState)({\n                lastId: 0,\n                shouldSaveTraceEvents: true\n            });\n            const root = (0, _trace.trace)('next-build');\n            root.traceChild('some-child-span').traceFn(()=>null);\n            (0, _trace.recordTraceEvents)(worker1Traces);\n            expect((0, _trace.exportTraceState)().lastId).toEqual(8);\n            (0, _trace.recordTraceEvents)(worker2Traces);\n            expect((0, _trace.exportTraceState)().lastId).toEqual(13);\n            root.traceChild('another-child-span').traceFn(()=>null);\n            root.stop();\n            // Check that the final output looks correct.\n            const allTraces = (0, _trace.getTraceEvents)();\n            expect(allTraces.length).toEqual(7);\n            const firstSpan = allTraces[0];\n            expect(firstSpan.name).toEqual('some-child-span');\n            expect(firstSpan.id).toEqual(2);\n            expect(firstSpan.parentId).toEqual(1);\n            const worker1Child = allTraces[1];\n            expect(worker1Child.name).toEqual('webpack-compilation1');\n            expect(worker1Child.id).toEqual(7);\n            expect(worker1Child.parentId).toEqual(6);\n            const worker1Root = allTraces[2];\n            expect(worker1Root.name).toEqual('worker1');\n            expect(worker1Root.id).toEqual(6);\n            expect(worker1Root.parentId).toEqual(1);\n            const worker2Child = allTraces[3];\n            expect(worker2Child.name).toEqual('webpack-compilation2');\n            expect(worker2Child.id).toEqual(12);\n            expect(worker2Child.parentId).toEqual(11);\n            const worker2Root = allTraces[4];\n            expect(worker2Root.name).toEqual('worker2');\n            expect(worker2Root.id).toEqual(11);\n            expect(worker2Root.parentId).toEqual(1);\n            const lastChildSpan = allTraces[5];\n            expect(lastChildSpan.name).toEqual('another-child-span');\n            expect(lastChildSpan.id).toEqual(14);\n            expect(lastChildSpan.parentId).toEqual(1);\n            const rootSpan = allTraces[6];\n            expect(rootSpan.name).toEqual('next-build');\n            expect(rootSpan.id).toEqual(1);\n            expect(rootSpan.parentId).toBeUndefined();\n        });\n    });\n});\n\n//# sourceMappingURL=trace.test.js.map"
        }
    ]
}