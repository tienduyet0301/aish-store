{
    "sourceFile": "node_modules/next/dist/pages/_document.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892865684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type JSX } from 'react';\nimport type { DocumentContext, DocumentInitialProps, DocumentProps } from '../shared/lib/utils';\nimport type { HtmlProps } from '../shared/lib/html-context.shared-runtime';\nexport type { DocumentContext, DocumentInitialProps, DocumentProps };\nexport type OriginProps = {\n    nonce?: string;\n    crossOrigin?: 'anonymous' | 'use-credentials' | '' | undefined;\n    children?: React.ReactNode;\n};\ntype DocumentFiles = {\n    sharedFiles: readonly string[];\n    pageFiles: readonly string[];\n    allFiles: readonly string[];\n};\ntype HeadHTMLProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\ntype HeadProps = OriginProps & HeadHTMLProps;\nexport declare class Head extends React.Component<HeadProps> {\n    static contextType: React.Context<HtmlProps | undefined>;\n    context: HtmlProps;\n    getCssLinks(files: DocumentFiles): JSX.Element[] | null;\n    getPreloadDynamicChunks(): (import(\"react/jsx-runtime\").JSX.Element | null)[];\n    getPreloadMainLinks(files: DocumentFiles): JSX.Element[] | null;\n    getBeforeInteractiveInlineScripts(): import(\"react/jsx-runtime\").JSX.Element[];\n    getDynamicChunks(files: DocumentFiles): (import(\"react/jsx-runtime\").JSX.Element | null)[];\n    getPreNextScripts(): import(\"react/jsx-runtime\").JSX.Element;\n    getScripts(files: DocumentFiles): import(\"react/jsx-runtime\").JSX.Element[];\n    getPolyfillScripts(): import(\"react/jsx-runtime\").JSX.Element[];\n    render(): import(\"react/jsx-runtime\").JSX.Element;\n}\nexport declare class NextScript extends React.Component<OriginProps> {\n    static contextType: React.Context<HtmlProps | undefined>;\n    context: HtmlProps;\n    getDynamicChunks(files: DocumentFiles): (import(\"react/jsx-runtime\").JSX.Element | null)[];\n    getPreNextScripts(): import(\"react/jsx-runtime\").JSX.Element;\n    getScripts(files: DocumentFiles): import(\"react/jsx-runtime\").JSX.Element[];\n    getPolyfillScripts(): import(\"react/jsx-runtime\").JSX.Element[];\n    static getInlineScriptSource(context: Readonly<HtmlProps>): string;\n    render(): import(\"react/jsx-runtime\").JSX.Element | null;\n}\nexport declare function Html(props: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>): import(\"react/jsx-runtime\").JSX.Element;\nexport declare function Main(): import(\"react/jsx-runtime\").JSX.Element;\n/**\n * `Document` component handles the initial `document` markup and renders only on the server side.\n * Commonly used for implementing server side rendering for `css-in-js` libraries.\n */\nexport default class Document<P = {}> extends React.Component<DocumentProps & P> {\n    /**\n     * `getInitialProps` hook returns the context object with the addition of `renderPage`.\n     * `renderPage` callback executes `React` rendering logic synchronously to support server-rendering wrappers\n     */\n    static getInitialProps(ctx: DocumentContext): Promise<DocumentInitialProps>;\n    render(): import(\"react/jsx-runtime\").JSX.Element;\n}\n"
        }
    ]
}