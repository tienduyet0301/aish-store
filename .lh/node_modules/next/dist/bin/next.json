{
    "sourceFile": "node_modules/next/dist/bin/next",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892651876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nrequire(\"../server/require-hook\");\nconst _commander = require(\"next/dist/compiled/commander\");\nconst _log = require(\"../build/output/log\");\nconst _semver = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/semver\"));\nconst _picocolors = require(\"../lib/picocolors\");\nconst _formatclihelpoutput = require(\"../lib/format-cli-help-output\");\nconst _constants = require(\"../lib/constants\");\nconst _utils = require(\"../server/lib/utils\");\nconst _nexttest = require(\"../cli/next-test.js\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nif (process.env.NEXT_RSPACK) {\n    // silent rspack's schema check\n    process.env.RSPACK_CONFIG_VALIDATE = 'loose-silent';\n}\nif (!_semver.default.satisfies(process.versions.node, \"^18.18.0 || ^19.8.0 || >= 20.0.0\", {\n    includePrerelease: true\n})) {\n    console.error(`You are using Node.js ${process.versions.node}. For Next.js, Node.js version \"${\"^18.18.0 || ^19.8.0 || >= 20.0.0\"}\" is required.`);\n    process.exit(1);\n}\n// Start performance profiling after Node.js version is checked\nperformance.mark('next-start');\nfor (const dependency of [\n    'react',\n    'react-dom'\n]){\n    try {\n        // When 'npm link' is used it checks the clone location. Not the project.\n        require.resolve(dependency);\n    } catch (err) {\n        console.warn(`The module '${dependency}' was not found. Next.js requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install ${dependency}'`);\n    }\n}\nclass NextRootCommand extends _commander.Command {\n    createCommand(name) {\n        const command = new _commander.Command(name);\n        command.addOption(new _commander.Option('--inspect').hideHelp());\n        command.hook('preAction', (event)=>{\n            const commandName = event.name();\n            const defaultEnv = commandName === 'dev' ? 'development' : 'production';\n            const standardEnv = [\n                'production',\n                'development',\n                'test'\n            ];\n            if (process.env.NODE_ENV) {\n                const isNotStandard = !standardEnv.includes(process.env.NODE_ENV);\n                const shouldWarnCommands = process.env.NODE_ENV === 'development' ? [\n                    'start',\n                    'build'\n                ] : process.env.NODE_ENV === 'production' ? [\n                    'dev'\n                ] : [];\n                if (isNotStandard || shouldWarnCommands.includes(commandName)) {\n                    (0, _log.warn)(_constants.NON_STANDARD_NODE_ENV);\n                }\n            }\n            ;\n            process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv;\n            process.env.NEXT_RUNTIME = 'nodejs';\n            if (event.getOptionValue('inspect') === true) {\n                console.error(`\\`--inspect\\` flag is deprecated. Use env variable NODE_OPTIONS instead: NODE_OPTIONS='--inspect' next ${commandName}`);\n                process.exit(1);\n            }\n        });\n        return command;\n    }\n}\nconst program = new NextRootCommand();\nprogram.name('next').description('The Next.js CLI allows you to develop, build, start your application, and more.').configureHelp({\n    formatHelp: (cmd, helper)=>(0, _formatclihelpoutput.formatCliHelpOutput)(cmd, helper),\n    subcommandTerm: (cmd)=>`${cmd.name()} ${cmd.usage()}`\n}).helpCommand(false).helpOption('-h, --help', 'Displays this message.').version(`Next.js v${\"15.3.1\"}`, '-v, --version', 'Outputs the Next.js version.');\nprogram.command('build').description('Creates an optimized production build of your application. The output displays information about each route.').argument('[directory]', `A directory on which to build the application. ${(0, _picocolors.italic)('If no directory is provided, the current directory will be used.')}`).option('-d, --debug', 'Enables a more verbose build output.').option('--no-lint', 'Disables linting.').option('--no-mangling', 'Disables mangling.').option('--profile', 'Enables production profiling for React.').option('--experimental-app-only', 'Builds only App Router routes.').option('--turbo', 'Starts development mode using Turbopack.').option('--turbopack', 'Starts development mode using Turbopack.').addOption(new _commander.Option('--experimental-build-mode [mode]', 'Uses an experimental build mode.').choices([\n    'compile',\n    'generate',\n    'generate-env'\n]).default('default')).option('--experimental-debug-memory-usage', 'Enables memory profiling features to debug memory consumption.').option('--experimental-upload-trace, <traceUrl>', 'Reports a subset of the debugging trace to a remote HTTP URL. Includes sensitive data.').action((directory, options)=>// ensure process exits after build completes so open handles/connections\n    // don't cause process to hang\n    import('../cli/next-build.js').then((mod)=>mod.nextBuild(options, directory).then(()=>process.exit(0)))).usage('[directory] [options]');\nprogram.command('dev', {\n    isDefault: true\n}).description('Starts Next.js in development mode with hot-code reloading, error reporting, and more.').argument('[directory]', `A directory on which to build the application. ${(0, _picocolors.italic)('If no directory is provided, the current directory will be used.')}`).option('--turbo', 'Starts development mode using Turbopack.').option('--turbopack', 'Starts development mode using Turbopack.').addOption(new _commander.Option('-p, --port <port>', 'Specify a port number on which to start the application.').argParser(_utils.parseValidPositiveInteger).default(3000).env('PORT')).option('-H, --hostname <hostname>', 'Specify a hostname on which to start the application (default: 0.0.0.0).').option('--disable-source-maps', \"Don't start the Dev server with `--enable-source-maps`.\", false).option('--experimental-https', 'Starts the server with HTTPS and generates a self-signed certificate.').option('--experimental-https-key, <path>', 'Path to a HTTPS key file.').option('--experimental-https-cert, <path>', 'Path to a HTTPS certificate file.').option('--experimental-https-ca, <path>', 'Path to a HTTPS certificate authority file.').option('--experimental-upload-trace, <traceUrl>', 'Reports a subset of the debugging trace to a remote HTTP URL. Includes sensitive data.').action((directory, options, { _optionValueSources })=>{\n    const portSource = _optionValueSources.port;\n    import('../cli/next-dev.js').then((mod)=>mod.nextDev(options, portSource, directory));\n}).usage('[directory] [options]');\nprogram.command('export', {\n    hidden: true\n}).action(()=>import('../cli/next-export.js').then((mod)=>mod.nextExport())).helpOption(false);\nprogram.command('info').description('Prints relevant details about the current system which can be used to report Next.js bugs.').addHelpText('after', `\\nLearn more: ${(0, _picocolors.cyan)('https://nextjs.org/docs/api-reference/cli#info')}`).option('--verbose', 'Collects additional information for debugging.').action((options)=>import('../cli/next-info.js').then((mod)=>mod.nextInfo(options)));\nprogram.command('lint').description('Runs ESLint for all files in the `/src`, `/app`, `/pages`, `/components`, and `/lib` directories. It also provides a guided setup to install any required dependencies if ESLint is not already configured in your application.').argument('[directory]', `A base directory on which to lint the application. ${(0, _picocolors.italic)('If no directory is provided, the current directory will be used.')}`).option('-d, --dir, <dirs...>', 'Include directory, or directories, to run ESLint.').option('--file, <files...>', 'Include file, or files, to run ESLint.').addOption(new _commander.Option('--ext, [exts...]', 'Specify JavaScript file extensions.').default([\n    '.js',\n    '.mjs',\n    '.cjs',\n    '.jsx',\n    '.ts',\n    '.mts',\n    '.cts',\n    '.tsx'\n])).option('-c, --config, <config>', 'Uses this configuration file, overriding all other configuration options.').option('--resolve-plugins-relative-to, <rprt>', 'Specify a directory where plugins should be resolved from.').option('--strict', 'Creates a `.eslintrc.json` file using the Next.js strict configuration.').option('--rulesdir, <rulesdir...>', 'Uses additional rules from this directory(s).').option('--fix', 'Automatically fix linting issues.').option('--fix-type <fixType>', 'Specify the types of fixes to apply (e.g., problem, suggestion, layout).').option('--ignore-path <path>', 'Specify a file to ignore.').option('--no-ignore', 'Disables the `--ignore-path` option.').option('--quiet', 'Reports errors only.').addOption(new _commander.Option('--max-warnings [maxWarnings]', 'Specify the number of warnings before triggering a non-zero exit code.').argParser(_utils.parseValidPositiveInteger).default(-1)).option('-o, --output-file, <outputFile>', 'Specify a file to write report to.').option('-f, --format, <format>', 'Uses a specific output format.').option('--no-inline-config', 'Prevents comments from changing config or rules.').addOption(new _commander.Option('--report-unused-disable-directives-severity <level>', 'Specify severity level for unused eslint-disable directives.').choices([\n    'error',\n    'off',\n    'warn'\n])).option('--no-cache', 'Disables caching.').option('--cache-location, <cacheLocation>', 'Specify a location for cache.').addOption(new _commander.Option('--cache-strategy, [cacheStrategy]', 'Specify a strategy to use for detecting changed files in the cache.').default('metadata')).option('--error-on-unmatched-pattern', 'Reports errors when any file patterns are unmatched.').action((directory, options)=>import('../cli/next-lint.js').then((mod)=>mod.nextLint(options, directory))).usage('[directory] [options]');\nprogram.command('start').description('Starts Next.js in production mode. The application should be compiled with `next build` first.').argument('[directory]', `A directory on which to start the application. ${(0, _picocolors.italic)('If no directory is provided, the current directory will be used.')}`).addOption(new _commander.Option('-p, --port <port>', 'Specify a port number on which to start the application.').argParser(_utils.parseValidPositiveInteger).default(3000).env('PORT')).option('-H, --hostname <hostname>', 'Specify a hostname on which to start the application (default: 0.0.0.0).').addOption(new _commander.Option('--keepAliveTimeout <keepAliveTimeout>', 'Specify the maximum amount of milliseconds to wait before closing inactive connections.').argParser(_utils.parseValidPositiveInteger)).addOption(new _commander.Option('--turbo').hideHelp()).option('--turbopack', 'Starts development mode using Turbopack.').action((directory, options)=>import('../cli/next-start.js').then((mod)=>mod.nextStart(options, directory))).usage('[directory] [options]');\nprogram.command('telemetry').description(`Allows you to enable or disable Next.js' ${(0, _picocolors.bold)('completely anonymous')} telemetry collection.`).addArgument(new _commander.Argument('[arg]').choices([\n    'disable',\n    'enable',\n    'status'\n])).addHelpText('after', `\\nLearn more: ${(0, _picocolors.cyan)('https://nextjs.org/telemetry')}`).addOption(new _commander.Option('--enable', `Enables Next.js' telemetry collection.`).conflicts('disable')).option('--disable', `Disables Next.js' telemetry collection.`).action((arg, options)=>import('../cli/next-telemetry.js').then((mod)=>mod.nextTelemetry(options, arg)));\nprogram.command('experimental-test').description(`Execute \\`next/experimental/testmode\\` tests using a specified test runner. The test runner defaults to 'playwright' if the \\`experimental.defaultTestRunner\\` configuration option or the \\`--test-runner\\` option are not set.`).argument('[directory]', `A Next.js project directory to execute the test runner on. ${(0, _picocolors.italic)('If no directory is provided, the current directory will be used.')}`).argument('[test-runner-args...]', 'Any additional arguments or options to pass down to the test runner `test` command.').option('--test-runner [test-runner]', `Any supported test runner. Options: ${(0, _picocolors.bold)(_nexttest.SUPPORTED_TEST_RUNNERS_LIST.join(', '))}. ${(0, _picocolors.italic)(\"If no test runner is provided, the Next.js config option `experimental.defaultTestRunner`, or 'playwright' will be used.\")}`).allowUnknownOption().action((directory, testRunnerArgs, options)=>{\n    return import('../cli/next-test.js').then((mod)=>{\n        mod.nextTest(directory, testRunnerArgs, options);\n    });\n}).usage('[directory] [options]');\nconst internal = program.command('internal').description('Internal debugging commands. Use with caution. Not covered by semver.');\ninternal.command('turbo-trace-server').argument('[file]', 'Trace file to serve.').action((file)=>{\n    return import('../cli/internal/turbo-trace-server.js').then((mod)=>mod.startTurboTraceServerCli(file));\n});\nprogram.parse(process.argv);\n\n//# sourceMappingURL=next.map"
        }
    ]
}