{
    "sourceFile": "node_modules/next/dist/telemetry/post-telemetry-payload.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892911258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _posttelemetrypayload = require(\"./post-telemetry-payload\");\ndescribe('postNextTelemetryPayload', ()=>{\n    let originalFetch;\n    beforeEach(()=>{\n        originalFetch = global.fetch;\n    });\n    afterEach(()=>{\n        global.fetch = originalFetch;\n    });\n    it('sends telemetry payload successfully', async ()=>{\n        const mockFetch = jest.fn().mockResolvedValue({\n            ok: true\n        });\n        global.fetch = mockFetch;\n        const payload = {\n            meta: {\n                version: '1.0'\n            },\n            context: {\n                anonymousId: 'test-id',\n                projectId: 'test-project',\n                sessionId: 'test-session'\n            },\n            events: [\n                {\n                    eventName: 'test-event',\n                    fields: {\n                        foo: 'bar'\n                    }\n                }\n            ]\n        };\n        await (0, _posttelemetrypayload.postNextTelemetryPayload)(payload);\n        expect(mockFetch).toHaveBeenCalledWith('https://telemetry.nextjs.org/api/v1/record', {\n            method: 'POST',\n            body: JSON.stringify(payload),\n            headers: {\n                'content-type': 'application/json'\n            },\n            signal: expect.any(AbortSignal)\n        });\n    });\n    it('retries on failure', async ()=>{\n        const mockFetch = jest.fn().mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({\n            ok: true\n        });\n        global.fetch = mockFetch;\n        const payload = {\n            meta: {},\n            context: {\n                anonymousId: 'test-id',\n                projectId: 'test-project',\n                sessionId: 'test-session'\n            },\n            events: []\n        };\n        await (0, _posttelemetrypayload.postNextTelemetryPayload)(payload);\n        expect(mockFetch).toHaveBeenCalledTimes(2);\n    });\n    it('swallows errors after retries exhausted', async ()=>{\n        const mockFetch = jest.fn().mockRejectedValue(new Error('Network error'));\n        global.fetch = mockFetch;\n        const payload = {\n            meta: {},\n            context: {\n                anonymousId: 'test-id',\n                projectId: 'test-project',\n                sessionId: 'test-session'\n            },\n            events: []\n        };\n        // Should not throw\n        await (0, _posttelemetrypayload.postNextTelemetryPayload)(payload);\n        expect(mockFetch).toHaveBeenCalledTimes(2) // Initial try + 1 retry\n        ;\n    });\n});\n\n//# sourceMappingURL=post-telemetry-payload.test.js.map"
        }
    ]
}