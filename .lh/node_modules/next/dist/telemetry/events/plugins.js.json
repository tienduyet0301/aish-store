{
    "sourceFile": "node_modules/next/dist/telemetry/events/plugins.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892910809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"eventNextPlugins\", {\n    enumerable: true,\n    get: function() {\n        return eventNextPlugins;\n    }\n});\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst EVENT_PLUGIN_PRESENT = 'NEXT_PACKAGE_DETECTED';\nasync function eventNextPlugins(dir) {\n    try {\n        const packageJsonPath = await (0, _findup.default)('package.json', {\n            cwd: dir\n        });\n        if (!packageJsonPath) {\n            return [];\n        }\n        const { dependencies = {}, devDependencies = {} } = require(packageJsonPath);\n        const deps = {\n            ...devDependencies,\n            ...dependencies\n        };\n        return Object.keys(deps).reduce((events, plugin)=>{\n            const version = deps[plugin];\n            // Don't add deps without a version set\n            if (!version) {\n                return events;\n            }\n            events.push({\n                eventName: EVENT_PLUGIN_PRESENT,\n                payload: {\n                    packageName: plugin,\n                    packageVersion: version\n                }\n            });\n            return events;\n        }, []);\n    } catch (_) {\n        return [];\n    }\n}\n\n//# sourceMappingURL=plugins.js.map"
        }
    ]
}