{
    "sourceFile": "node_modules/next/dist/telemetry/events/swc-plugins.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892911006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"eventSwcPlugins\", {\n    enumerable: true,\n    get: function() {\n        return eventSwcPlugins;\n    }\n});\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _fs = /*#__PURE__*/ _interop_require_default(require(\"fs\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst EVENT_SWC_PLUGIN_PRESENT = 'NEXT_SWC_PLUGIN_DETECTED';\nasync function eventSwcPlugins(dir, config) {\n    try {\n        var _config_experimental_swcPlugins, _config_experimental;\n        const packageJsonPath = await (0, _findup.default)('package.json', {\n            cwd: dir\n        });\n        if (!packageJsonPath) {\n            return [];\n        }\n        const { dependencies = {}, devDependencies = {} } = require(packageJsonPath);\n        const deps = {\n            ...devDependencies,\n            ...dependencies\n        };\n        const swcPluginPackages = ((_config_experimental = config.experimental) == null ? void 0 : (_config_experimental_swcPlugins = _config_experimental.swcPlugins) == null ? void 0 : _config_experimental_swcPlugins.map(([name, _])=>name)) ?? [];\n        return swcPluginPackages.map((plugin)=>{\n            // swc plugins can be non-npm pkgs with absolute path doesn't have version\n            const version = deps[plugin] ?? undefined;\n            let pluginName = plugin;\n            if (_fs.default.existsSync(pluginName)) {\n                pluginName = _path.default.basename(plugin, '.wasm');\n            }\n            return {\n                eventName: EVENT_SWC_PLUGIN_PRESENT,\n                payload: {\n                    pluginName: pluginName,\n                    pluginVersion: version\n                }\n            };\n        });\n    } catch (_) {\n        return [];\n    }\n}\n\n//# sourceMappingURL=swc-plugins.js.map"
        }
    ]
}