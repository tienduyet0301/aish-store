{
    "sourceFile": "node_modules/next/dist/telemetry/storage.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892911373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { BinaryLike } from 'crypto';\nexport type TelemetryEvent = {\n    eventName: string;\n    payload: object;\n};\ntype RecordObject = {\n    isFulfilled: boolean;\n    isRejected: boolean;\n    value?: any;\n    reason?: any;\n};\nexport declare class Telemetry {\n    readonly sessionId: string;\n    private conf;\n    private distDir;\n    private loadProjectId;\n    private NEXT_TELEMETRY_DISABLED;\n    private NEXT_TELEMETRY_DEBUG;\n    private queue;\n    constructor({ distDir }: {\n        distDir: string;\n    });\n    private notify;\n    get anonymousId(): string;\n    get salt(): string;\n    private get isDisabled();\n    setEnabled: (_enabled: boolean) => string | null;\n    get isEnabled(): boolean;\n    oneWayHash: (payload: BinaryLike) => string;\n    private getProjectId;\n    record: (_events: TelemetryEvent | TelemetryEvent[], deferred?: boolean) => Promise<RecordObject>;\n    flush: () => Promise<RecordObject[] | null>;\n    flushDetached: (mode: \"dev\", dir: string) => void;\n    private submitRecord;\n}\nexport {};\n"
        }
    ]
}