{
    "sourceFile": "node_modules/next/dist/telemetry/detached-flush.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892910458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _fs = /*#__PURE__*/ _interop_require_default(require(\"fs\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _storage = require(\"./storage\");\nconst _config = /*#__PURE__*/ _interop_require_default(require(\"../server/config\"));\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _constants = require(\"../shared/lib/constants\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n(async ()=>{\n    const args = [\n        ...process.argv\n    ];\n    let dir = args.pop();\n    const mode = args.pop();\n    if (!dir || mode !== 'dev') {\n        throw Object.defineProperty(new Error(`Invalid flags should be run as node detached-flush dev ./path-to/project`), \"__NEXT_ERROR_CODE\", {\n            value: \"E24\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    dir = (0, _getprojectdir.getProjectDir)(dir);\n    const config = await (0, _config.default)(_constants.PHASE_DEVELOPMENT_SERVER, dir);\n    const distDir = _path.default.join(dir, config.distDir || '.next');\n    const eventsPath = _path.default.join(distDir, '_events.json');\n    let events;\n    try {\n        events = JSON.parse(_fs.default.readFileSync(eventsPath, 'utf8'));\n    } catch (err) {\n        if (err.code === 'ENOENT') {\n            // no events to process we can exit now\n            process.exit(0);\n        }\n        throw err;\n    }\n    const telemetry = new _storage.Telemetry({\n        distDir\n    });\n    await telemetry.record(events);\n    await telemetry.flush();\n    // finished flushing events clean-up/exit\n    _fs.default.unlinkSync(eventsPath);\n    process.exit(0);\n})();\n\n//# sourceMappingURL=detached-flush.js.map"
        }
    ]
}