{
    "sourceFile": "node_modules/next/dist/client/form.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892696528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _react = require(\"react\");\nconst _addbasepath = require(\"./add-base-path\");\nconst _routercontextsharedruntime = require(\"../shared/lib/router-context.shared-runtime\");\nconst _formshared = require(\"./form-shared\");\nconst Form = /*#__PURE__*/ (0, _react.forwardRef)(function FormComponent(param, ref) {\n    let { replace, scroll, prefetch: prefetchProp, ...props } = param;\n    const router = (0, _react.useContext)(_routercontextsharedruntime.RouterContext);\n    const actionProp = props.action;\n    const isNavigatingForm = typeof actionProp === 'string';\n    // Validate `action`\n    if (process.env.NODE_ENV === 'development') {\n        if (isNavigatingForm) {\n            (0, _formshared.checkFormActionUrl)(actionProp, 'action');\n        }\n    }\n    // Validate `prefetch`\n    if (process.env.NODE_ENV === 'development') {\n        if (prefetchProp !== undefined) {\n            console.error('Passing `prefetch` to a <Form> has no effect in the pages directory.');\n        }\n    }\n    // Validate `scroll` and `replace`\n    if (process.env.NODE_ENV === 'development') {\n        if (!isNavigatingForm && (replace !== undefined || scroll !== undefined)) {\n            console.error('Passing `replace` or `scroll` to a <Form> whose `action` is a function has no effect.\\n' + 'See the relevant docs to learn how to control this behavior for navigations triggered from actions:\\n' + '  `router.replace()` - https://nextjs.org/docs/pages/api-reference/functions/use-router#routerreplace\\n');\n        }\n    }\n    // Clean up any unsupported form props (and warn if present)\n    for (const key of _formshared.DISALLOWED_FORM_PROPS){\n        if (key in props) {\n            if (process.env.NODE_ENV === 'development') {\n                console.error(\"<Form> does not support changing `\" + key + \"`.\");\n            }\n            delete props[key];\n        }\n    }\n    if (!isNavigatingForm) {\n        return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"form\", {\n            ...props,\n            ref: ref\n        });\n    }\n    const actionHref = (0, _addbasepath.addBasePath)(actionProp);\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"form\", {\n        ...props,\n        ref: ref,\n        action: actionHref,\n        onSubmit: (event)=>onFormSubmit(event, {\n                router,\n                actionHref,\n                replace,\n                scroll,\n                onSubmit: props.onSubmit\n            })\n    });\n});\nconst _default = Form;\nfunction onFormSubmit(event, param) {\n    let { actionHref, onSubmit, replace, scroll, router } = param;\n    if (typeof onSubmit === 'function') {\n        onSubmit(event);\n        // if the user called event.preventDefault(), do nothing.\n        // (this matches what Link does for `onClick`)\n        if (event.defaultPrevented) {\n            return;\n        }\n    }\n    if (!router) {\n        // Form was somehow used outside of the router (but not in app/, the implementation is forked!).\n        // We can't perform a soft navigation, so let the native submit handling do its thing.\n        return;\n    }\n    const formElement = event.currentTarget;\n    const submitter = event.nativeEvent.submitter;\n    let action = actionHref;\n    if (submitter) {\n        // this is page-router-only, so we don't need to worry about false positives\n        // from the attributes that react adds for server actions.\n        if ((0, _formshared.hasUnsupportedSubmitterAttributes)(submitter)) {\n            return;\n        }\n        // client actions have `formAction=\"javascript:...\"`. We obviously can't prefetch/navigate to that.\n        if ((0, _formshared.hasReactClientActionAttributes)(submitter)) {\n            return;\n        }\n        // If the submitter specified an alternate formAction,\n        // use that URL instead -- this is what a native form would do.\n        // NOTE: `submitter.formAction` is unreliable, because it will give us `location.href` if it *wasn't* set\n        // NOTE: this should not have `basePath` added, because we can't add it before hydration\n        const submitterFormAction = submitter.getAttribute('formAction');\n        if (submitterFormAction !== null) {\n            if (process.env.NODE_ENV === 'development') {\n                (0, _formshared.checkFormActionUrl)(submitterFormAction, 'formAction');\n            }\n            action = submitterFormAction;\n        }\n    }\n    const targetUrl = (0, _formshared.createFormSubmitDestinationUrl)(action, formElement);\n    // Finally, no more reasons for bailing out.\n    event.preventDefault();\n    const method = replace ? 'replace' : 'push';\n    const targetHref = targetUrl.href // TODO: will pages router be happy about an absolute URL here?\n    ;\n    // TODO(form): Make this use a transition so that pending states work\n    //\n    // Unlike the app router, pages router doesn't use startTransition,\n    // and can't easily be wrapped in one because of implementation details\n    // (e.g. it doesn't use any react state)\n    // But it's important to have this wrapped in a transition because\n    // pending states from e.g. `useFormStatus` rely on that.\n    // So this needs some follow up work.\n    router[method](targetHref, undefined, {\n        scroll\n    });\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=form.js.map"
        }
    ]
}