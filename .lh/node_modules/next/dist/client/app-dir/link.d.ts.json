{
    "sourceFile": "node_modules/next/dist/client/app-dir/link.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892675510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React from 'react';\nimport type { UrlObject } from 'url';\ntype Url = string | UrlObject;\ntype OnNavigateEventHandler = (event: {\n    preventDefault: () => void;\n}) => void;\ntype InternalLinkProps = {\n    /**\n     * **Required**. The path or URL to navigate to. It can also be an object (similar to `URL`).\n     *\n     * @example\n     * ```tsx\n     * // Navigate to /dashboard:\n     * <Link href=\"/dashboard\">Dashboard</Link>\n     *\n     * // Navigate to /about?name=test:\n     * <Link href={{ pathname: '/about', query: { name: 'test' } }}>\n     *   About\n     * </Link>\n     * ```\n     *\n     * @remarks\n     * - For external URLs, use a fully qualified URL such as `https://...`.\n     * - In the App Router, dynamic routes must not include bracketed segments in `href`.\n     */\n    href: Url;\n    /**\n     * @deprecated v10.0.0: `href` props pointing to a dynamic route are\n     * automatically resolved and no longer require the `as` prop.\n     */\n    as?: Url;\n    /**\n     * Replace the current `history` state instead of adding a new URL into the stack.\n     *\n     * @defaultValue `false`\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/about\" replace>\n     *   About (replaces the history state)\n     * </Link>\n     * ```\n     */\n    replace?: boolean;\n    /**\n     * Whether to override the default scroll behavior. If `true`, Next.js attempts to maintain\n     * the scroll position if the newly navigated page is still visible. If not, it scrolls to the top.\n     *\n     * If `false`, Next.js will not modify the scroll behavior at all.\n     *\n     * @defaultValue `true`\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/dashboard\" scroll={false}>\n     *   No auto scroll\n     * </Link>\n     * ```\n     */\n    scroll?: boolean;\n    /**\n     * Update the path of the current page without rerunning data fetching methods\n     * like `getStaticProps`, `getServerSideProps`, or `getInitialProps`.\n     *\n     * @remarks\n     * `shallow` only applies to the Pages Router. For the App Router, see the\n     * [following documentation](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#using-the-native-history-api).\n     *\n     * @defaultValue `false`\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/blog\" shallow>\n     *   Shallow navigation\n     * </Link>\n     * ```\n     */\n    shallow?: boolean;\n    /**\n     * Forces `Link` to pass its `href` to the child component. Useful if the child is a custom\n     * component that wraps an `<a>` tag, or if you're using certain styling libraries.\n     *\n     * @defaultValue `false`\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/dashboard\" passHref>\n     *   <MyStyledAnchor>Dashboard</MyStyledAnchor>\n     * </Link>\n     * ```\n     */\n    passHref?: boolean;\n    /**\n     * Prefetch the page in the background.\n     * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n     * Prefetch can be disabled by passing `prefetch={false}`.\n     *\n     * @remarks\n     * Prefetching is only enabled in production.\n     *\n     * - In the **App Router**:\n     *   - `null` (default): Prefetch behavior depends on static vs dynamic routes:\n     *     - Static routes: fully prefetched\n     *     - Dynamic routes: partial prefetch to the nearest segment with a `loading.js`\n     *   - `true`: Always prefetch the full route and data.\n     *   - `false`: Disable prefetching on both viewport and hover.\n     * - In the **Pages Router**:\n     *   - `true` (default): Prefetches the route and data in the background on viewport or hover.\n     *   - `false`: Prefetch only on hover, not on viewport.\n     *\n     * @defaultValue `true` (Pages Router) or `null` (App Router)\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/dashboard\" prefetch={false}>\n     *   Dashboard\n     * </Link>\n     * ```\n     */\n    prefetch?: boolean | null;\n    /**\n     * (unstable) Switch to a dynamic prefetch on hover. Effectively the same as\n     * updating the prefetch prop to `true` in a mouse event.\n     */\n    unstable_dynamicOnHover?: boolean;\n    /**\n     * The active locale is automatically prepended in the Pages Router. `locale` allows for providing\n     * a different locale, or can be set to `false` to opt out of automatic locale behavior.\n     *\n     * @remarks\n     * Note: locale only applies in the Pages Router and is ignored in the App Router.\n     *\n     * @example\n     * ```tsx\n     * // Use the 'fr' locale:\n     * <Link href=\"/about\" locale=\"fr\">\n     *   About (French)\n     * </Link>\n     *\n     * // Disable locale prefix:\n     * <Link href=\"/about\" locale={false}>\n     *   About (no locale prefix)\n     * </Link>\n     * ```\n     */\n    locale?: string | false;\n    /**\n     * Enable legacy link behavior, requiring an `<a>` tag to wrap the child content\n     * if the child is a string or number.\n     *\n     * @deprecated This will be removed in v16\n     * @defaultValue `false`\n     * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n     */\n    legacyBehavior?: boolean;\n    /**\n     * Optional event handler for when the mouse pointer is moved onto the `<Link>`.\n     */\n    onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>;\n    /**\n     * Optional event handler for when the `<Link>` is touched.\n     */\n    onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>;\n    /**\n     * Optional event handler for when the `<Link>` is clicked.\n     */\n    onClick?: React.MouseEventHandler<HTMLAnchorElement>;\n    /**\n     * Optional event handler for when the `<Link>` is navigated.\n     */\n    onNavigate?: OnNavigateEventHandler;\n};\nexport type LinkProps<RouteInferType = any> = InternalLinkProps;\n/**\n * A React component that extends the HTML `<a>` element to provide\n * [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation. This is the primary way to navigate between routes in Next.js.\n *\n * @remarks\n * - Prefetching is only enabled in production.\n *\n * @see https://nextjs.org/docs/app/api-reference/components/link\n */\nexport default function LinkComponent(props: LinkProps & {\n    children: React.ReactNode;\n    ref: React.Ref<HTMLAnchorElement>;\n}): import(\"react/jsx-runtime\").JSX.Element;\nexport declare const useLinkStatus: () => {\n    pending: boolean;\n} | {\n    pending: boolean;\n};\nexport {};\n"
        }
    ]
}