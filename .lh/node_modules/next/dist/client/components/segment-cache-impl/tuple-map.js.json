{
    "sourceFile": "node_modules/next/dist/client/components/segment-cache-impl/tuple-map.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892693172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// Utility type. Prefix<[A, B, C, D]> matches [A], [A, B], [A, B, C] etc.\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"createTupleMap\", {\n    enumerable: true,\n    get: function() {\n        return createTupleMap;\n    }\n});\nfunction createTupleMap() {\n    let rootEntry = {\n        parent: null,\n        key: null,\n        hasValue: false,\n        value: null,\n        map: null\n    };\n    // To optimize successive lookups, we cache the last accessed keypath.\n    // Although it's not encoded in the type, these are both null or\n    // both non-null. It uses object equality, so to take advantage of this\n    // optimization, you must pass the same array instance to each successive\n    // method call, and you must also not mutate the array between calls.\n    let lastAccessedEntry = null;\n    let lastAccessedKeys = null;\n    function getOrCreateEntry(keys) {\n        if (lastAccessedKeys === keys) {\n            return lastAccessedEntry;\n        }\n        // Go through each level of keys until we find the entry that matches,\n        // or create a new one if it doesn't already exist.\n        let entry = rootEntry;\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i];\n            let map = entry.map;\n            if (map !== null) {\n                const existingEntry = map.get(key);\n                if (existingEntry !== undefined) {\n                    // Found a match. Keep going.\n                    entry = existingEntry;\n                    continue;\n                }\n            } else {\n                map = new Map();\n                entry.map = map;\n            }\n            // No entry exists yet at this level. Create a new one.\n            const newEntry = {\n                parent: entry,\n                key,\n                value: null,\n                hasValue: false,\n                map: null\n            };\n            map.set(key, newEntry);\n            entry = newEntry;\n        }\n        lastAccessedKeys = keys;\n        lastAccessedEntry = entry;\n        return entry;\n    }\n    function getEntryIfExists(keys) {\n        if (lastAccessedKeys === keys) {\n            return lastAccessedEntry;\n        }\n        // Go through each level of keys until we find the entry that matches, or\n        // return null if no match exists.\n        let entry = rootEntry;\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i];\n            let map = entry.map;\n            if (map !== null) {\n                const existingEntry = map.get(key);\n                if (existingEntry !== undefined) {\n                    // Found a match. Keep going.\n                    entry = existingEntry;\n                    continue;\n                }\n            }\n            // No entry exists at this level.\n            return null;\n        }\n        lastAccessedKeys = keys;\n        lastAccessedEntry = entry;\n        return entry;\n    }\n    function set(keys, value) {\n        const entry = getOrCreateEntry(keys);\n        entry.hasValue = true;\n        entry.value = value;\n    }\n    function get(keys) {\n        const entry = getEntryIfExists(keys);\n        if (entry === null || !entry.hasValue) {\n            return null;\n        }\n        return entry.value;\n    }\n    function deleteEntry(keys) {\n        const entry = getEntryIfExists(keys);\n        if (entry === null || !entry.hasValue) {\n            return;\n        }\n        // Found a match. Delete it from the cache.\n        const deletedEntry = entry;\n        deletedEntry.hasValue = false;\n        deletedEntry.value = null;\n        // Check if we can garbage collect the entry.\n        if (deletedEntry.map === null) {\n            // Since this entry has no value, and also no child entries, we can\n            // garbage collect it. Remove it from its parent, and keep garbage\n            // collecting the parents until we reach a non-empty entry.\n            // Unlike a `set` operation, these are no longer valid because the entry\n            // itself is being modified, not just the value it contains.\n            lastAccessedEntry = null;\n            lastAccessedKeys = null;\n            let parent = deletedEntry.parent;\n            let key = deletedEntry.key;\n            while(parent !== null){\n                const parentMap = parent.map;\n                if (parentMap !== null) {\n                    parentMap.delete(key);\n                    if (parentMap.size === 0) {\n                        // We just removed the last entry in the parent map.\n                        parent.map = null;\n                        if (parent.value === null) {\n                            // The parent node has no child entries, nor does it have a value\n                            // on itself. It can be garbage collected. Keep going.\n                            key = parent.key;\n                            parent = parent.parent;\n                            continue;\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    return {\n        set,\n        get,\n        delete: deleteEntry\n    };\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=tuple-map.js.map"
        }
    ]
}