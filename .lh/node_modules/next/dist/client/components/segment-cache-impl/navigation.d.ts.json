{
    "sourceFile": "node_modules/next/dist/client/components/segment-cache-impl/navigation.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892692918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FlightRouterState, FlightSegmentPath } from '../../../server/app-render/types';\nimport type { CacheNode } from '../../../shared/lib/app-router-context.shared-runtime';\nimport { NavigationResultTag } from '../segment-cache';\ntype MPANavigationResult = {\n    tag: NavigationResultTag.MPA;\n    data: string;\n};\ntype NoOpNavigationResult = {\n    tag: NavigationResultTag.NoOp;\n    data: {\n        canonicalUrl: string;\n        shouldScroll: boolean;\n    };\n};\ntype SuccessfulNavigationResult = {\n    tag: NavigationResultTag.Success;\n    data: {\n        flightRouterState: FlightRouterState;\n        cacheNode: CacheNode;\n        canonicalUrl: string;\n        scrollableSegments: Array<FlightSegmentPath>;\n        shouldScroll: boolean;\n        hash: string;\n    };\n};\ntype AsyncNavigationResult = {\n    tag: NavigationResultTag.Async;\n    data: Promise<MPANavigationResult | NoOpNavigationResult | SuccessfulNavigationResult>;\n};\nexport type NavigationResult = MPANavigationResult | SuccessfulNavigationResult | NoOpNavigationResult | AsyncNavigationResult;\n/**\n * Navigate to a new URL, using the Segment Cache to construct a response.\n *\n * To allow for synchronous navigations whenever possible, this is not an async\n * function. It returns a promise only if there's no matching prefetch in\n * the cache. Otherwise it returns an immediate result and uses Suspense/RSC to\n * stream in any missing data.\n */\nexport declare function navigate(url: URL, currentCacheNode: CacheNode, currentFlightRouterState: FlightRouterState, nextUrl: string | null, shouldScroll: boolean): NavigationResult;\nexport {};\n"
        }
    ]
}