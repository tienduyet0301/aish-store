{
    "sourceFile": "node_modules/next/dist/client/components/metadata/metadata-boundary.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892678702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    MetadataBoundary: null,\n    OutletBoundary: null,\n    ViewportBoundary: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    MetadataBoundary: function() {\n        return MetadataBoundary;\n    },\n    OutletBoundary: function() {\n        return OutletBoundary;\n    },\n    ViewportBoundary: function() {\n        return ViewportBoundary;\n    }\n});\nconst _metadataconstants = require(\"../../../lib/metadata/metadata-constants\");\n// We use a namespace object to allow us to recover the name of the function\n// at runtime even when production bundling/minification is used.\nconst NameSpace = {\n    [_metadataconstants.METADATA_BOUNDARY_NAME]: function(param) {\n        let { children } = param;\n        return children;\n    },\n    [_metadataconstants.VIEWPORT_BOUNDARY_NAME]: function(param) {\n        let { children } = param;\n        return children;\n    },\n    [_metadataconstants.OUTLET_BOUNDARY_NAME]: function(param) {\n        let { children } = param;\n        return children;\n    }\n};\nconst MetadataBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[_metadataconstants.METADATA_BOUNDARY_NAME.slice(0)];\nconst ViewportBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[_metadataconstants.VIEWPORT_BOUNDARY_NAME.slice(0)];\nconst OutletBoundary = // We use slice(0) to trick the bundler into not inlining/minifying the function\n// so it retains the name inferred from the namespace object\nNameSpace[_metadataconstants.OUTLET_BOUNDARY_NAME.slice(0)];\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=metadata-boundary.js.map"
        }
    ]
}