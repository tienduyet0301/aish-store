{
    "sourceFile": "node_modules/next/dist/client/components/app-router-instance.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892676471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type AppRouterState, type ReducerActions, type ReducerState, type NavigateAction } from './router-reducer/router-reducer-types';\nimport type { AppRouterInstance } from '../../shared/lib/app-router-context.shared-runtime';\nimport { type LinkInstance } from './links';\nimport type { FlightRouterState } from '../../server/app-render/types';\nimport type { ClientInstrumentationHooks } from '../app-index';\nexport type DispatchStatePromise = React.Dispatch<ReducerState>;\nexport type AppRouterActionQueue = {\n    state: AppRouterState;\n    dispatch: (payload: ReducerActions, setState: DispatchStatePromise) => void;\n    action: (state: AppRouterState, action: ReducerActions) => ReducerState;\n    onRouterTransitionStart: ((url: string, type: 'push' | 'replace' | 'traverse') => void) | null;\n    pending: ActionQueueNode | null;\n    needsRefresh?: boolean;\n    last: ActionQueueNode | null;\n};\nexport type ActionQueueNode = {\n    payload: ReducerActions;\n    next: ActionQueueNode | null;\n    resolve: (value: ReducerState) => void;\n    reject: (err: Error) => void;\n    discarded?: boolean;\n};\nexport declare function createMutableActionQueue(initialState: AppRouterState, instrumentationHooks: ClientInstrumentationHooks | null): AppRouterActionQueue;\nexport declare function getCurrentAppRouterState(): AppRouterState | null;\nexport declare function dispatchNavigateAction(href: string, navigateType: NavigateAction['navigateType'], shouldScroll: boolean, linkInstanceRef: LinkInstance | null): void;\nexport declare function dispatchTraverseAction(href: string, tree: FlightRouterState | undefined): void;\n/**\n * The app router that is exposed through `useRouter`. These are public API\n * methods. Internal Next.js code should call the lower level methods directly\n * (although there's lots of existing code that doesn't do that).\n */\nexport declare const publicAppRouterInstance: AppRouterInstance;\n"
        }
    ]
}