{
    "sourceFile": "node_modules/next/dist/client/components/router-reducer/aliased-prefetch-navigations.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892690011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FlightRouterState } from '../../../server/app-render/types';\nimport type { NormalizedFlightData } from '../../flight-data-helpers';\nimport type { Mutable, ReadonlyReducerState } from './router-reducer-types';\n/**\n * This is a stop-gap until per-segment caching is implemented. It leverages the `aliased` flag that is added\n * to prefetch entries when it's determined that the loading state from that entry should be used for this navigation.\n * This function takes the aliased entry and only applies the loading state to the updated cache node.\n * We should remove this once per-segment fetching is implemented as ideally the prefetch cache will contain a\n * more granular segment map and so the router will be able to simply re-use the loading segment for the new navigation.\n */\nexport declare function handleAliasedPrefetchEntry(navigatedAt: number, state: ReadonlyReducerState, flightData: string | NormalizedFlightData[], url: URL, mutable: Mutable): false | import(\"./router-reducer-types\").ReducerState;\n/**\n * Add search params to the page segments in the flight router state\n * Page segments that are associated with search params have a page segment key\n * followed by a query string. This function will add those params to the page segment.\n * This is useful if we return an aliased prefetch entry (ie, won't have search params)\n * but the canonical router URL has search params.\n */\nexport declare function addSearchParamsToPageSegments(flightRouterState: FlightRouterState, searchParams: Record<string, string | string[] | undefined>): FlightRouterState;\n"
        }
    ]
}