{
    "sourceFile": "node_modules/next/dist/client/components/router-reducer/ppr-navigations.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892691239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CacheNodeSeedData, FlightRouterState, FlightSegmentPath } from '../../../server/app-render/types';\nimport type { CacheNode, HeadData, ReadyCacheNode } from '../../../shared/lib/app-router-context.shared-runtime';\nimport type { FetchServerResponseResult } from './fetch-server-response';\ntype SPANavigationTask = {\n    route: FlightRouterState;\n    node: CacheNode | null;\n    dynamicRequestTree: FlightRouterState | null;\n    children: Map<string, SPANavigationTask> | null;\n};\ntype MPANavigationTask = {\n    route: null;\n    node: null;\n    dynamicRequestTree: null;\n    children: null;\n};\nexport type Task = SPANavigationTask | MPANavigationTask;\nexport declare function startPPRNavigation(navigatedAt: number, oldCacheNode: CacheNode, oldRouterState: FlightRouterState, newRouterState: FlightRouterState, prefetchData: CacheNodeSeedData | null, prefetchHead: HeadData | null, isPrefetchHeadPartial: boolean, isSamePageNavigation: boolean, scrollableSegmentsResult: Array<FlightSegmentPath>): Task | null;\nexport declare function listenForDynamicRequest(task: SPANavigationTask, responsePromise: Promise<FetchServerResponseResult>): void;\nexport declare function abortTask(task: SPANavigationTask, error: any): void;\nexport declare function updateCacheNodeOnPopstateRestoration(oldCacheNode: CacheNode, routerState: FlightRouterState): ReadyCacheNode;\nexport {};\n"
        }
    ]
}