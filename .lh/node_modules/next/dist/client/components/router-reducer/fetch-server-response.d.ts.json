{
    "sourceFile": "node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892690604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FlightRouterState } from '../../../server/app-render/types';\nimport type { NEXT_ROUTER_SEGMENT_PREFETCH_HEADER } from '../app-router-headers';\nimport { NEXT_ROUTER_PREFETCH_HEADER, NEXT_ROUTER_STATE_TREE_HEADER, NEXT_URL, RSC_HEADER, NEXT_HMR_REFRESH_HEADER } from '../app-router-headers';\nimport { PrefetchKind } from './router-reducer-types';\nimport { type NormalizedFlightData } from '../../flight-data-helpers';\nexport interface FetchServerResponseOptions {\n    readonly flightRouterState: FlightRouterState;\n    readonly nextUrl: string | null;\n    readonly prefetchKind?: PrefetchKind;\n    readonly isHmrRefresh?: boolean;\n}\nexport type FetchServerResponseResult = {\n    flightData: NormalizedFlightData[] | string;\n    canonicalUrl: URL | undefined;\n    couldBeIntercepted: boolean;\n    prerendered: boolean;\n    postponed: boolean;\n    staleTime: number;\n};\nexport type RequestHeaders = {\n    [RSC_HEADER]?: '1';\n    [NEXT_ROUTER_STATE_TREE_HEADER]?: string;\n    [NEXT_URL]?: string;\n    [NEXT_ROUTER_PREFETCH_HEADER]?: '1';\n    [NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]?: string;\n    'x-deployment-id'?: string;\n    [NEXT_HMR_REFRESH_HEADER]?: '1';\n    'Next-Test-Fetch-Priority'?: RequestInit['priority'];\n};\nexport declare function urlToUrlWithoutFlightMarker(url: string): URL;\n/**\n * Fetch the flight data for the provided url. Takes in the current router state\n * to decide what to render server-side.\n */\nexport declare function fetchServerResponse(url: URL, options: FetchServerResponseOptions): Promise<FetchServerResponseResult>;\nexport declare function createFetch(url: URL, headers: RequestHeaders, fetchPriority: 'auto' | 'high' | 'low' | null, signal?: AbortSignal): Promise<Response>;\nexport declare function createFromNextReadableStream(flightStream: ReadableStream<Uint8Array>): Promise<unknown>;\n"
        }
    ]
}