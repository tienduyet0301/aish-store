{
    "sourceFile": "node_modules/next/dist/client/components/router-reducer/prefetch-cache-utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892691315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type FetchServerResponseResult } from './fetch-server-response';\nimport { PrefetchCacheEntryStatus, type PrefetchCacheEntry, PrefetchKind, type ReadonlyReducerState } from './router-reducer-types';\nexport type AliasedPrefetchCacheEntry = PrefetchCacheEntry & {\n    /** This is a special property that indicates a prefetch entry associated with a different URL\n     * was returned rather than the requested URL. This signals to the router that it should only\n     * apply the part that doesn't depend on searchParams (specifically the loading state).\n     */\n    aliased?: boolean;\n};\n/**\n * Returns a prefetch cache entry if one exists. Otherwise creates a new one and enqueues a fetch request\n * to retrieve the prefetch data from the server.\n */\nexport declare function getOrCreatePrefetchCacheEntry({ url, nextUrl, tree, prefetchCache, kind, allowAliasing, }: Pick<ReadonlyReducerState, 'nextUrl' | 'prefetchCache' | 'tree'> & {\n    url: URL;\n    kind?: PrefetchKind;\n    allowAliasing: boolean;\n}): AliasedPrefetchCacheEntry;\n/**\n * Use to seed the prefetch cache with data that has already been fetched.\n */\nexport declare function createSeededPrefetchCacheEntry({ nextUrl, tree, prefetchCache, url, data, kind, }: Pick<ReadonlyReducerState, 'nextUrl' | 'tree' | 'prefetchCache'> & {\n    url: URL;\n    data: FetchServerResponseResult;\n    kind: PrefetchKind;\n}): {\n    treeAtTimeOfPrefetch: import(\"../../../server/app-render/types\").FlightRouterState;\n    data: Promise<FetchServerResponseResult>;\n    kind: PrefetchKind;\n    prefetchTime: number;\n    lastUsedTime: number;\n    staleTime: number;\n    key: string;\n    status: PrefetchCacheEntryStatus.fresh;\n    url: URL;\n};\nexport declare function prunePrefetchCache(prefetchCache: ReadonlyReducerState['prefetchCache']): void;\nexport declare const DYNAMIC_STALETIME_MS: number;\nexport declare const STATIC_STALETIME_MS: number;\n"
        }
    ]
}