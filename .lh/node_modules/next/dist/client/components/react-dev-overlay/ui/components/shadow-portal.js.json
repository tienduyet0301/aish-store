{
    "sourceFile": "node_modules/next/dist/client/components/react-dev-overlay/ui/components/shadow-portal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892685246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"ShadowPortal\", {\n    enumerable: true,\n    get: function() {\n        return ShadowPortal;\n    }\n});\nconst _interop_require_wildcard = require(\"@swc/helpers/_/_interop_require_wildcard\");\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(require(\"react\"));\nconst _reactdom = require(\"react-dom\");\nconst _shared = require(\"../../shared\");\nfunction ShadowPortal(param) {\n    let { children } = param;\n    let portalNode = _react.useRef(null);\n    let shadowNode = _react.useRef(null);\n    let [, forceUpdate] = _react.useState();\n    // Don't use useLayoutEffect here, as it will cause warnings during SSR in React 18.\n    // Don't use useSyncExternalStore as an SSR gate unless you verified it doesn't\n    // downgrade a Transition of the initial root render to a sync render or\n    // we can assure the root render is not a Transition.\n    _react.useEffect(()=>{\n        const ownerDocument = document;\n        portalNode.current = ownerDocument.createElement('nextjs-portal');\n        // load default color preference from localstorage\n        if (typeof localStorage !== 'undefined') {\n            const theme = localStorage.getItem(_shared.STORAGE_KEY_THEME);\n            if (theme === 'dark') {\n                portalNode.current.classList.add('dark');\n                portalNode.current.classList.remove('light');\n            } else if (theme === 'light') {\n                portalNode.current.classList.remove('dark');\n                portalNode.current.classList.add('light');\n            }\n        }\n        shadowNode.current = portalNode.current.attachShadow({\n            mode: 'open'\n        });\n        ownerDocument.body.appendChild(portalNode.current);\n        forceUpdate({});\n        return ()=>{\n            if (portalNode.current && portalNode.current.ownerDocument) {\n                portalNode.current.ownerDocument.body.removeChild(portalNode.current);\n            }\n        };\n    }, []);\n    return shadowNode.current ? /*#__PURE__*/ (0, _reactdom.createPortal)(children, shadowNode.current) : null;\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=shadow-portal.js.map"
        }
    ]
}