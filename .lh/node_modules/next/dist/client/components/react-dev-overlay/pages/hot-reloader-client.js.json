{
    "sourceFile": "node_modules/next/dist/client/components/react-dev-overlay/pages/hot-reloader-client.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892680400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// TODO: Remove use of `any` type. Fix no-use-before-define violations.\n/* eslint-disable @typescript-eslint/no-use-before-define */ /**\n * MIT License\n *\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */ /// <reference types=\"webpack/module.d.ts\" />\n// This file is a modified version of the Create React App HMR dev client that\n// can be found here:\n// https://github.com/facebook/create-react-app/blob/v3.4.1/packages/react-dev-utils/webpackHotDevClient.js\n/// <reference types=\"webpack/module.d.ts\" />\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    handleStaticIndicator: null,\n    performFullReload: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return connect;\n    },\n    handleStaticIndicator: function() {\n        return handleStaticIndicator;\n    },\n    performFullReload: function() {\n        return performFullReload;\n    }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _client = require(\"./client\");\nconst _stripansi = /*#__PURE__*/ _interop_require_default._(require(\"next/dist/compiled/strip-ansi\"));\nconst _websocket = require(\"./websocket\");\nconst _formatwebpackmessages = /*#__PURE__*/ _interop_require_default._(require(\"../utils/format-webpack-messages\"));\nconst _hotreloadertypes = require(\"../../../../server/dev/hot-reloader-types\");\nconst _shared = require(\"../shared\");\nconst _runtimeerrorhandler = require(\"../../errors/runtime-error-handler\");\nconst _reporthmrlatency = /*#__PURE__*/ _interop_require_default._(require(\"../utils/report-hmr-latency\"));\nconst _turbopackhotreloadercommon = require(\"../utils/turbopack-hot-reloader-common\");\nwindow.__nextDevClientId = Math.round(Math.random() * 100 + Date.now());\nlet customHmrEventHandler;\nlet turbopackMessageListeners = [];\nfunction connect() {\n    (0, _client.register)();\n    (0, _websocket.addMessageListener)((payload)=>{\n        if (!('action' in payload)) {\n            return;\n        }\n        try {\n            processMessage(payload);\n        } catch (err) {\n            (0, _shared.reportInvalidHmrMessage)(payload, err);\n        }\n    });\n    return {\n        subscribeToHmrEvent (handler) {\n            customHmrEventHandler = handler;\n        },\n        onUnrecoverableError () {\n            _runtimeerrorhandler.RuntimeErrorHandler.hadRuntimeError = true;\n        },\n        addTurbopackMessageListener (cb) {\n            turbopackMessageListeners.push(cb);\n        },\n        sendTurbopackMessage (msg) {\n            (0, _websocket.sendMessage)(msg);\n        },\n        handleUpdateError (err) {\n            performFullReload(err);\n        }\n    };\n}\n// Remember some state related to hot module replacement.\nvar isFirstCompilation = true;\nvar mostRecentCompilationHash = null;\nvar hasCompileErrors = false;\nfunction clearOutdatedErrors() {\n    // Clean up outdated compile errors, if any.\n    if (typeof console !== 'undefined' && typeof console.clear === 'function') {\n        if (hasCompileErrors) {\n            console.clear();\n        }\n    }\n}\n// Successful compilation.\nfunction handleSuccess() {\n    clearOutdatedErrors();\n    hasCompileErrors = false;\n    if (process.env.TURBOPACK) {\n        const hmrUpdate = turbopackHmr.onBuilt();\n        if (hmrUpdate != null) {\n            (0, _reporthmrlatency.default)(_websocket.sendMessage, [\n                ...hmrUpdate.updatedModules\n            ], hmrUpdate.startMsSinceEpoch, hmrUpdate.endMsSinceEpoch, hmrUpdate.hasUpdates);\n        }\n        (0, _client.onBuildOk)();\n    } else {\n        const isHotUpdate = !isFirstCompilation || window.__NEXT_DATA__.page !== '/_error' && isUpdateAvailable();\n        // Attempt to apply hot updates or reload.\n        if (isHotUpdate) {\n            tryApplyUpdatesWebpack();\n        }\n    }\n    isFirstCompilation = false;\n}\n// Compilation with warnings (e.g. ESLint).\nfunction handleWarnings(warnings) {\n    clearOutdatedErrors();\n    const isHotUpdate = !isFirstCompilation;\n    isFirstCompilation = false;\n    hasCompileErrors = false;\n    function printWarnings() {\n        // Print warnings to the console.\n        const formatted = (0, _formatwebpackmessages.default)({\n            warnings: warnings,\n            errors: []\n        });\n        if (typeof console !== 'undefined' && typeof console.warn === 'function') {\n            var _formatted_warnings;\n            for(let i = 0; i < ((_formatted_warnings = formatted.warnings) == null ? void 0 : _formatted_warnings.length); i++){\n                if (i === 5) {\n                    console.warn('There were more warnings in other files.\\n' + 'You can find a complete log in the terminal.');\n                    break;\n                }\n                console.warn((0, _stripansi.default)(formatted.warnings[i]));\n            }\n        }\n    }\n    printWarnings();\n    // Attempt to apply hot updates or reload.\n    if (isHotUpdate) {\n        tryApplyUpdatesWebpack();\n    }\n}\n// Compilation with errors (e.g. syntax error or missing modules).\nfunction handleErrors(errors) {\n    clearOutdatedErrors();\n    isFirstCompilation = false;\n    hasCompileErrors = true;\n    // \"Massage\" webpack messages.\n    var formatted = (0, _formatwebpackmessages.default)({\n        errors: errors,\n        warnings: []\n    });\n    // Only show the first error.\n    (0, _client.onBuildError)(formatted.errors[0]);\n    // Also log them to the console.\n    if (typeof console !== 'undefined' && typeof console.error === 'function') {\n        for(var i = 0; i < formatted.errors.length; i++){\n            console.error((0, _stripansi.default)(formatted.errors[i]));\n        }\n    }\n    // Do not attempt to reload now.\n    // We will reload on next success instead.\n    if (process.env.__NEXT_TEST_MODE) {\n        if (self.__NEXT_HMR_CB) {\n            self.__NEXT_HMR_CB(formatted.errors[0]);\n            self.__NEXT_HMR_CB = null;\n        }\n    }\n}\nlet webpackStartMsSinceEpoch = null;\nconst turbopackHmr = process.env.TURBOPACK ? new _turbopackhotreloadercommon.TurbopackHmr() : null;\nlet isrManifest = {};\n// There is a newer version of the code available.\nfunction handleAvailableHash(hash) {\n    // Update last known compilation hash.\n    mostRecentCompilationHash = hash;\n}\nfunction handleStaticIndicator() {\n    if (process.env.__NEXT_DEV_INDICATOR) {\n        var _window_next_router_components__app;\n        const routeInfo = window.next.router.components[window.next.router.pathname];\n        const pageComponent = routeInfo == null ? void 0 : routeInfo.Component;\n        const appComponent = (_window_next_router_components__app = window.next.router.components['/_app']) == null ? void 0 : _window_next_router_components__app.Component;\n        const isDynamicPage = Boolean(pageComponent == null ? void 0 : pageComponent.getInitialProps) || Boolean(routeInfo == null ? void 0 : routeInfo.__N_SSP);\n        const hasAppGetInitialProps = Boolean(appComponent == null ? void 0 : appComponent.getInitialProps) && (appComponent == null ? void 0 : appComponent.getInitialProps) !== (appComponent == null ? void 0 : appComponent.origGetInitialProps);\n        const isPageStatic = window.location.pathname in isrManifest || !isDynamicPage && !hasAppGetInitialProps;\n        (0, _client.onStaticIndicator)(isPageStatic);\n    }\n}\n/** Handles messages from the server for the Pages Router. */ function processMessage(obj) {\n    if (!('action' in obj)) {\n        return;\n    }\n    switch(obj.action){\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.ISR_MANIFEST:\n            {\n                isrManifest = obj.data;\n                handleStaticIndicator();\n                break;\n            }\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.BUILDING:\n            {\n                if (process.env.TURBOPACK) {\n                    turbopackHmr.onBuilding();\n                } else {\n                    webpackStartMsSinceEpoch = Date.now();\n                    console.log('[Fast Refresh] rebuilding');\n                }\n                break;\n            }\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.BUILT:\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.SYNC:\n            {\n                if (obj.hash) handleAvailableHash(obj.hash);\n                const { errors, warnings } = obj;\n                // Is undefined when it's a 'built' event\n                if ('versionInfo' in obj) (0, _client.onVersionInfo)(obj.versionInfo);\n                if ('devIndicator' in obj) (0, _client.onDevIndicator)(obj.devIndicator);\n                const hasErrors = Boolean(errors && errors.length);\n                if (hasErrors) {\n                    (0, _websocket.sendMessage)(JSON.stringify({\n                        event: 'client-error',\n                        errorCount: errors.length,\n                        clientId: window.__nextDevClientId\n                    }));\n                    return handleErrors(errors);\n                }\n                // NOTE: Turbopack does not currently send warnings\n                const hasWarnings = Boolean(warnings && warnings.length);\n                if (hasWarnings) {\n                    (0, _websocket.sendMessage)(JSON.stringify({\n                        event: 'client-warning',\n                        warningCount: warnings.length,\n                        clientId: window.__nextDevClientId\n                    }));\n                    return handleWarnings(warnings);\n                }\n                (0, _websocket.sendMessage)(JSON.stringify({\n                    event: 'client-success',\n                    clientId: window.__nextDevClientId\n                }));\n                return handleSuccess();\n            }\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES:\n            {\n                turbopackHmr == null ? void 0 : turbopackHmr.onServerComponentChanges();\n                if (hasCompileErrors || _runtimeerrorhandler.RuntimeErrorHandler.hadRuntimeError) {\n                    window.location.reload();\n                }\n                return;\n            }\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ERROR:\n            {\n                const { errorJSON } = obj;\n                if (errorJSON) {\n                    const { message, stack } = JSON.parse(errorJSON);\n                    const error = Object.defineProperty(new Error(message), \"__NEXT_ERROR_CODE\", {\n                        value: \"E394\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                    error.stack = stack;\n                    handleErrors([\n                        error\n                    ]);\n                }\n                return;\n            }\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED:\n            {\n                for (const listener of turbopackMessageListeners){\n                    listener({\n                        type: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n                        data: obj.data\n                    });\n                }\n                break;\n            }\n        case _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE:\n            {\n                turbopackHmr.onTurbopackMessage(obj);\n                (0, _client.onBeforeRefresh)();\n                for (const listener of turbopackMessageListeners){\n                    listener({\n                        type: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n                        data: obj.data\n                    });\n                }\n                if (_runtimeerrorhandler.RuntimeErrorHandler.hadRuntimeError) {\n                    console.warn(_shared.REACT_REFRESH_FULL_RELOAD_FROM_ERROR);\n                    performFullReload(null);\n                }\n                (0, _client.onRefresh)();\n                break;\n            }\n        default:\n            {\n                if (customHmrEventHandler) {\n                    customHmrEventHandler(obj);\n                    break;\n                }\n                break;\n            }\n    }\n}\n// Is there a newer version of this code available?\nfunction isUpdateAvailable() {\n    /* globals __webpack_hash__ */ // __webpack_hash__ is the hash of the current compilation.\n    // It's a global variable injected by Webpack.\n    return mostRecentCompilationHash !== __webpack_hash__;\n}\n// Webpack disallows updates in other states.\nfunction canApplyUpdates() {\n    return module.hot.status() === 'idle';\n}\nfunction afterApplyUpdates(fn) {\n    if (canApplyUpdates()) {\n        fn();\n    } else {\n        function handler(status) {\n            if (status === 'idle') {\n                module.hot.removeStatusHandler(handler);\n                fn();\n            }\n        }\n        module.hot.addStatusHandler(handler);\n    }\n}\n// Attempt to update code on the fly, fall back to a hard reload.\nfunction tryApplyUpdatesWebpack() {\n    if (!module.hot) {\n        // HotModuleReplacementPlugin is not in Webpack configuration.\n        console.error('HotModuleReplacementPlugin is not in Webpack configuration.');\n        // window.location.reload();\n        return;\n    }\n    if (!isUpdateAvailable() || !canApplyUpdates()) {\n        (0, _client.onBuildOk)();\n        return;\n    }\n    function handleApplyUpdates(err, updatedModules) {\n        if (err || _runtimeerrorhandler.RuntimeErrorHandler.hadRuntimeError || updatedModules == null) {\n            if (err) {\n                console.warn(_shared.REACT_REFRESH_FULL_RELOAD);\n            } else if (_runtimeerrorhandler.RuntimeErrorHandler.hadRuntimeError) {\n                console.warn(_shared.REACT_REFRESH_FULL_RELOAD_FROM_ERROR);\n            }\n            performFullReload(err);\n            return;\n        }\n        (0, _client.onBuildOk)();\n        if (isUpdateAvailable()) {\n            // While we were updating, there was a new update! Do it again.\n            tryApplyUpdatesWebpack();\n            return;\n        }\n        (0, _client.onRefresh)();\n        (0, _reporthmrlatency.default)(_websocket.sendMessage, updatedModules, webpackStartMsSinceEpoch, Date.now());\n        if (process.env.__NEXT_TEST_MODE) {\n            afterApplyUpdates(()=>{\n                if (self.__NEXT_HMR_CB) {\n                    self.__NEXT_HMR_CB();\n                    self.__NEXT_HMR_CB = null;\n                }\n            });\n        }\n    }\n    // https://webpack.js.org/api/hot-module-replacement/#check\n    module.hot.check(/* autoApply */ false).then((updatedModules)=>{\n        if (updatedModules == null) {\n            return null;\n        }\n        // We should always handle an update, even if updatedModules is empty (but\n        // non-null) for any reason. That's what webpack would normally do:\n        // https://github.com/webpack/webpack/blob/3aa6b6bc3a64/lib/hmr/HotModuleReplacement.runtime.js#L296-L298\n        (0, _client.onBeforeRefresh)();\n        // https://webpack.js.org/api/hot-module-replacement/#apply\n        return module.hot.apply();\n    }).then((updatedModules)=>{\n        handleApplyUpdates(null, updatedModules);\n    }, (err)=>{\n        handleApplyUpdates(err, null);\n    });\n}\nfunction performFullReload(err) {\n    const stackTrace = err && (err.stack && err.stack.split('\\n').slice(0, 5).join('\\n') || err.message || err + '');\n    (0, _websocket.sendMessage)(JSON.stringify({\n        event: 'client-full-reload',\n        stackTrace,\n        hadRuntimeError: !!_runtimeerrorhandler.RuntimeErrorHandler.hadRuntimeError,\n        dependencyChain: err ? err.dependencyChain : undefined\n    }));\n    window.location.reload();\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=hot-reloader-client.js.map"
        }
    ]
}