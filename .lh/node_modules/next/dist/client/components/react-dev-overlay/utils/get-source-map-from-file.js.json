{
    "sourceFile": "node_modules/next/dist/client/components/react-dev-overlay/utils/get-source-map-from-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892688878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getSourceMapFromFile\", {\n    enumerable: true,\n    get: function() {\n        return getSourceMapFromFile;\n    }\n});\nconst _interop_require_default = require(\"@swc/helpers/_/_interop_require_default\");\nconst _promises = /*#__PURE__*/ _interop_require_default._(require(\"fs/promises\"));\nconst _path = /*#__PURE__*/ _interop_require_default._(require(\"path\"));\nconst _url = /*#__PURE__*/ _interop_require_default._(require(\"url\"));\nconst _datauritobuffer = /*#__PURE__*/ _interop_require_default._(require(\"next/dist/compiled/data-uri-to-buffer\"));\nconst _getsourcemapurl = require(\"./get-source-map-url\");\nasync function getSourceMapFromFile(filename) {\n    filename = filename.startsWith('file://') ? _url.default.fileURLToPath(filename) : filename;\n    let fileContents;\n    try {\n        fileContents = await _promises.default.readFile(filename, 'utf-8');\n    } catch (error) {\n        throw Object.defineProperty(new Error(\"Failed to read file contents of \" + filename + \".\", {\n            cause: error\n        }), \"__NEXT_ERROR_CODE\", {\n            value: \"E466\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const sourceUrl = (0, _getsourcemapurl.getSourceMapUrl)(fileContents);\n    if (!sourceUrl) {\n        return undefined;\n    }\n    if (sourceUrl.startsWith('data:')) {\n        let buffer;\n        try {\n            buffer = (0, _datauritobuffer.default)(sourceUrl);\n        } catch (error) {\n            throw Object.defineProperty(new Error(\"Failed to parse source map URL for \" + filename + \".\", {\n                cause: error\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E199\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (buffer.type !== 'application/json') {\n            throw Object.defineProperty(new Error(\"Unknown source map type for \" + filename + \": \" + buffer.typeFull + \".\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E113\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        try {\n            return JSON.parse(buffer.toString());\n        } catch (error) {\n            throw Object.defineProperty(new Error(\"Failed to parse source map for \" + filename + \".\", {\n                cause: error\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E318\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    const sourceMapFilename = _path.default.resolve(_path.default.dirname(filename), decodeURIComponent(sourceUrl));\n    try {\n        const sourceMapContents = await _promises.default.readFile(sourceMapFilename, 'utf-8');\n        return JSON.parse(sourceMapContents.toString());\n    } catch (error) {\n        throw Object.defineProperty(new Error(\"Failed to parse source map \" + sourceMapFilename + \".\", {\n            cause: error\n        }), \"__NEXT_ERROR_CODE\", {\n            value: \"E220\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=get-source-map-from-file.js.map"
        }
    ]
}