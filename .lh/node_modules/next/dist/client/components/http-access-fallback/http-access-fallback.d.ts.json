{
    "sourceFile": "node_modules/next/dist/client/components/http-access-fallback/http-access-fallback.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892678098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export declare const HTTPAccessErrorStatus: {\n    NOT_FOUND: number;\n    FORBIDDEN: number;\n    UNAUTHORIZED: number;\n};\nexport declare const HTTP_ERROR_FALLBACK_ERROR_CODE = \"NEXT_HTTP_ERROR_FALLBACK\";\nexport type HTTPAccessFallbackError = Error & {\n    digest: `${typeof HTTP_ERROR_FALLBACK_ERROR_CODE};${string}`;\n};\n/**\n * Checks an error to determine if it's an error generated by\n * the HTTP navigation APIs `notFound()`, `forbidden()` or `unauthorized()`.\n *\n * @param error the error that may reference a HTTP access error\n * @returns true if the error is a HTTP access error\n */\nexport declare function isHTTPAccessFallbackError(error: unknown): error is HTTPAccessFallbackError;\nexport declare function getAccessFallbackHTTPStatus(error: HTTPAccessFallbackError): number;\nexport declare function getAccessFallbackErrorTypeByStatus(status: number): 'not-found' | 'forbidden' | 'unauthorized' | undefined;\n"
        }
    ]
}