{
    "sourceFile": "node_modules/next/dist/client/components/error-boundary.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892676989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React, { type JSX } from 'react';\nexport type ErrorComponent = React.ComponentType<{\n    error: Error;\n    reset?: () => void;\n}>;\nexport interface ErrorBoundaryProps {\n    children?: React.ReactNode;\n    errorComponent: ErrorComponent | undefined;\n    errorStyles?: React.ReactNode | undefined;\n    errorScripts?: React.ReactNode | undefined;\n}\ninterface ErrorBoundaryHandlerProps extends ErrorBoundaryProps {\n    pathname: string | null;\n    errorComponent: ErrorComponent;\n}\ninterface ErrorBoundaryHandlerState {\n    error: Error | null;\n    previousPathname: string | null;\n}\nexport declare class ErrorBoundaryHandler extends React.Component<ErrorBoundaryHandlerProps, ErrorBoundaryHandlerState> {\n    constructor(props: ErrorBoundaryHandlerProps);\n    static getDerivedStateFromError(error: Error): {\n        error: Error;\n    };\n    static getDerivedStateFromProps(props: ErrorBoundaryHandlerProps, state: ErrorBoundaryHandlerState): ErrorBoundaryHandlerState | null;\n    reset: () => void;\n    render(): React.ReactNode;\n}\nexport type GlobalErrorComponent = React.ComponentType<{\n    error: any;\n}>;\nexport declare function GlobalError({ error }: {\n    error: any;\n}): import(\"react/jsx-runtime\").JSX.Element;\nexport default GlobalError;\n/**\n * Handles errors through `getDerivedStateFromError`.\n * Renders the provided error component and provides a way to `reset` the error boundary state.\n */\n/**\n * Renders error boundary with the provided \"errorComponent\" property as the fallback.\n * If no \"errorComponent\" property is provided it renders the children without an error boundary.\n */\nexport declare function ErrorBoundary({ errorComponent, errorStyles, errorScripts, children, }: ErrorBoundaryProps & {\n    children: React.ReactNode;\n}): JSX.Element;\n"
        }
    ]
}