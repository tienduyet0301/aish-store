{
    "sourceFile": "node_modules/next/dist/client/link.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892697130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React from 'react';\nimport type { UrlObject } from 'url';\ntype Url = string | UrlObject;\ntype OnNavigateEventHandler = (event: {\n    preventDefault: () => void;\n}) => void;\ntype InternalLinkProps = {\n    /**\n     * The path or URL to navigate to. It can also be an object.\n     *\n     * @example https://nextjs.org/docs/api-reference/next/link#with-url-object\n     */\n    href: Url;\n    /**\n     * Optional decorator for the path that will be shown in the browser URL bar. Before Next.js 9.5.3 this was used for dynamic routes, check our [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes) to see how it worked. Note: when this path differs from the one provided in `href` the previous `href`/`as` behavior is used as shown in the [previous docs](https://github.com/vercel/next.js/blob/v9.5.2/docs/api-reference/next/link.md#dynamic-routes).\n     */\n    as?: Url;\n    /**\n     * Replace the current `history` state instead of adding a new url into the stack.\n     *\n     * @defaultValue `false`\n     */\n    replace?: boolean;\n    /**\n     * Whether to override the default scroll behavior\n     *\n     * @example https://nextjs.org/docs/api-reference/next/link#disable-scrolling-to-the-top-of-the-page\n     *\n     * @defaultValue `true`\n     */\n    scroll?: boolean;\n    /**\n     * Update the path of the current page without rerunning [`getStaticProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props).\n     *\n     * @defaultValue `false`\n     */\n    shallow?: boolean;\n    /**\n     * Forces `Link` to send the `href` property to its child.\n     *\n     * @defaultValue `false`\n     */\n    passHref?: boolean;\n    /**\n     * Prefetch the page in the background.\n     * Any `<Link />` that is in the viewport (initially or through scroll) will be prefetched.\n     * Prefetch can be disabled by passing `prefetch={false}`. Prefetching is only enabled in production.\n     *\n     * In App Router:\n     * - `null` (default): For statically generated pages, this will prefetch the full React Server Component data. For dynamic pages, this will prefetch up to the nearest route segment with a [`loading.js`](https://nextjs.org/docs/app/api-reference/file-conventions/loading) file. If there is no loading file, it will not fetch the full tree to avoid fetching too much data.\n     * - `true`: This will prefetch the full React Server Component data for all route segments, regardless of whether they contain a segment with `loading.js`.\n     * - `false`: This will not prefetch any data, even on hover.\n     *\n     * In Pages Router:\n     * - `true` (default): The full route & its data will be prefetched.\n     * - `false`: Prefetching will not happen when entering the viewport, but will still happen on hover.\n     * @defaultValue `true` (pages router) or `null` (app router)\n     */\n    prefetch?: boolean | null;\n    /**\n     * The active locale is automatically prepended. `locale` allows for providing a different locale.\n     * When `false` `href` has to include the locale as the default behavior is disabled.\n     * Note: This is only available in the Pages Router.\n     */\n    locale?: string | false;\n    /**\n     * Enable legacy link behavior.\n     * @deprecated This will be removed in v16\n     * @defaultValue `false`\n     * @see https://github.com/vercel/next.js/commit/489e65ed98544e69b0afd7e0cfc3f9f6c2b803b7\n     */\n    legacyBehavior?: boolean;\n    /**\n     * Optional event handler for when the mouse pointer is moved onto Link\n     */\n    onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement>;\n    /**\n     * Optional event handler for when Link is touched.\n     */\n    onTouchStart?: React.TouchEventHandler<HTMLAnchorElement>;\n    /**\n     * Optional event handler for when Link is clicked.\n     */\n    onClick?: React.MouseEventHandler<HTMLAnchorElement>;\n    /**\n     * Optional event handler for when the `<Link>` is navigated.\n     */\n    onNavigate?: OnNavigateEventHandler;\n};\nexport type LinkProps<RouteInferType = any> = InternalLinkProps;\n/**\n * A React component that extends the HTML `<a>` element to provide [prefetching](https://nextjs.org/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching)\n * and client-side navigation between routes.\n *\n * It is the primary way to navigate between routes in Next.js.\n *\n * Read more: [Next.js docs: `<Link>`](https://nextjs.org/docs/app/api-reference/components/link)\n */\ndeclare const Link: React.ForwardRefExoticComponent<Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, keyof InternalLinkProps> & InternalLinkProps & {\n    children?: React.ReactNode | undefined;\n} & React.RefAttributes<HTMLAnchorElement>>;\nexport declare const useLinkStatus: () => {\n    pending: boolean;\n};\nexport default Link;\n"
        }
    ]
}