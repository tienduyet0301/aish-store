{
    "sourceFile": "node_modules/next/dist/esm/export/helpers/create-incremental-cache.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892797654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport { IncrementalCache } from '../../server/lib/incremental-cache';\nimport { hasNextSupport } from '../../server/ci-info';\nimport { nodeFs } from '../../server/lib/node-fs-methods';\nimport { interopDefault } from '../../lib/interop-default';\nimport { formatDynamicImportPath } from '../../lib/format-dynamic-import-path';\nimport { initializeCacheHandlers, setCacheHandler } from '../../server/use-cache/handlers';\nexport async function createIncrementalCache({ cacheHandler, cacheMaxMemorySize, fetchCacheKeyPrefix, distDir, dir, flushToDisk, cacheHandlers, requestHeaders }) {\n    // Custom cache handler overrides.\n    let CacheHandler;\n    if (cacheHandler) {\n        CacheHandler = interopDefault(await import(formatDynamicImportPath(dir, cacheHandler)).then((mod)=>mod.default || mod));\n    }\n    if (cacheHandlers && initializeCacheHandlers()) {\n        for (const [kind, handler] of Object.entries(cacheHandlers)){\n            if (!handler) continue;\n            setCacheHandler(kind, interopDefault(await import(formatDynamicImportPath(dir, handler)).then((mod)=>mod.default || mod)));\n        }\n    }\n    const incrementalCache = new IncrementalCache({\n        dev: false,\n        requestHeaders: requestHeaders || {},\n        flushToDisk,\n        maxMemoryCacheSize: cacheMaxMemorySize,\n        fetchCacheKeyPrefix,\n        getPrerenderManifest: ()=>({\n                version: 4,\n                routes: {},\n                dynamicRoutes: {},\n                preview: {\n                    previewModeEncryptionKey: '',\n                    previewModeId: '',\n                    previewModeSigningKey: ''\n                },\n                notFoundRoutes: []\n            }),\n        fs: nodeFs,\n        serverDistDir: path.join(distDir, 'server'),\n        CurCacheHandler: CacheHandler,\n        minimalMode: hasNextSupport\n    });\n    globalThis.__incrementalCache = incrementalCache;\n    return incrementalCache;\n}\n\n//# sourceMappingURL=create-incremental-cache.js.map"
        }
    ]
}