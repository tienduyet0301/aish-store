{
    "sourceFile": "node_modules/next/dist/esm/build/webpack-build/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892761776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as Log from '../output/log';\nimport { NextBuildContext } from '../build-context';\nimport { Worker } from '../../lib/worker';\nimport origDebug from 'next/dist/compiled/debug';\nimport path from 'path';\nimport { exportTraceState, recordTraceEvents } from '../../trace';\nimport { formatNodeOptions, getParsedNodeOptionsWithoutInspect } from '../../server/lib/utils';\nimport { mergeUseCacheTrackers } from '../webpack/plugins/telemetry-plugin/use-cache-tracker-utils';\nimport { durationToString } from '../duration-to-string';\nconst debug = origDebug('next:build:webpack-build');\nconst ORDERED_COMPILER_NAMES = [\n    'server',\n    'edge-server',\n    'client'\n];\nlet pluginState = {};\nfunction deepMerge(target, source) {\n    const result = {\n        ...target,\n        ...source\n    };\n    for (const key of Object.keys(result)){\n        result[key] = Array.isArray(target[key]) ? target[key] = [\n            ...target[key],\n            ...source[key] || []\n        ] : typeof target[key] == 'object' && typeof source[key] == 'object' ? deepMerge(target[key], source[key]) : result[key];\n    }\n    return result;\n}\nasync function webpackBuildWithWorker(compilerNamesArg) {\n    const compilerNames = compilerNamesArg || ORDERED_COMPILER_NAMES;\n    const { nextBuildSpan, ...prunedBuildContext } = NextBuildContext;\n    prunedBuildContext.pluginState = pluginState;\n    const combinedResult = {\n        duration: 0,\n        buildTraceContext: {}\n    };\n    const nodeOptions = getParsedNodeOptionsWithoutInspect();\n    for (const compilerName of compilerNames){\n        var _curResult_buildTraceContext;\n        const worker = new Worker(path.join(__dirname, 'impl.js'), {\n            exposedMethods: [\n                'workerMain'\n            ],\n            numWorkers: 1,\n            maxRetries: 0,\n            forkOptions: {\n                env: {\n                    ...process.env,\n                    NEXT_PRIVATE_BUILD_WORKER: '1',\n                    NODE_OPTIONS: formatNodeOptions(nodeOptions)\n                }\n            }\n        });\n        const curResult = await worker.workerMain({\n            buildContext: prunedBuildContext,\n            compilerName,\n            traceState: {\n                ...exportTraceState(),\n                defaultParentSpanId: nextBuildSpan == null ? void 0 : nextBuildSpan.getId(),\n                shouldSaveTraceEvents: true\n            }\n        });\n        if (nextBuildSpan && curResult.debugTraceEvents) {\n            recordTraceEvents(curResult.debugTraceEvents);\n        }\n        // destroy worker so it's not sticking around using memory\n        await worker.end();\n        // Update plugin state\n        pluginState = deepMerge(pluginState, curResult.pluginState);\n        prunedBuildContext.pluginState = pluginState;\n        if (curResult.telemetryState) {\n            var _NextBuildContext_telemetryState;\n            NextBuildContext.telemetryState = {\n                ...curResult.telemetryState,\n                useCacheTracker: mergeUseCacheTrackers((_NextBuildContext_telemetryState = NextBuildContext.telemetryState) == null ? void 0 : _NextBuildContext_telemetryState.useCacheTracker, curResult.telemetryState.useCacheTracker)\n            };\n        }\n        combinedResult.duration += curResult.duration;\n        if ((_curResult_buildTraceContext = curResult.buildTraceContext) == null ? void 0 : _curResult_buildTraceContext.entriesTrace) {\n            var _curResult_buildTraceContext1;\n            const { entryNameMap } = curResult.buildTraceContext.entriesTrace;\n            if (entryNameMap) {\n                combinedResult.buildTraceContext.entriesTrace = curResult.buildTraceContext.entriesTrace;\n                combinedResult.buildTraceContext.entriesTrace.entryNameMap = entryNameMap;\n            }\n            if ((_curResult_buildTraceContext1 = curResult.buildTraceContext) == null ? void 0 : _curResult_buildTraceContext1.chunksTrace) {\n                const { entryNameFilesMap } = curResult.buildTraceContext.chunksTrace;\n                if (entryNameFilesMap) {\n                    combinedResult.buildTraceContext.chunksTrace = curResult.buildTraceContext.chunksTrace;\n                    combinedResult.buildTraceContext.chunksTrace.entryNameFilesMap = entryNameFilesMap;\n                }\n            }\n        }\n    }\n    if (compilerNames.length === 3) {\n        const durationString = durationToString(combinedResult.duration);\n        Log.event(`Compiled successfully in ${durationString}`);\n    }\n    return combinedResult;\n}\nexport async function webpackBuild(withWorker, compilerNames) {\n    if (withWorker) {\n        debug('using separate compiler workers');\n        return await webpackBuildWithWorker(compilerNames);\n    } else {\n        debug('building all compilers in same process');\n        const webpackBuildImpl = require('./impl').webpackBuildImpl;\n        const curResult = await webpackBuildImpl(null, null);\n        // Mirror what happens in webpackBuildWithWorker\n        if (curResult.telemetryState) {\n            var _NextBuildContext_telemetryState;\n            NextBuildContext.telemetryState = {\n                ...curResult.telemetryState,\n                useCacheTracker: mergeUseCacheTrackers((_NextBuildContext_telemetryState = NextBuildContext.telemetryState) == null ? void 0 : _NextBuildContext_telemetryState.useCacheTracker, curResult.telemetryState.useCacheTracker)\n            };\n        }\n        return curResult;\n    }\n}\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}