{
    "sourceFile": "node_modules/next/dist/esm/build/webpack-build/impl.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892761713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { stringBufferUtils } from 'next/dist/compiled/webpack-sources3';\nimport { red } from '../../lib/picocolors';\nimport formatWebpackMessages from '../../client/components/react-dev-overlay/utils/format-webpack-messages';\nimport { nonNullable } from '../../lib/non-nullable';\nimport { COMPILER_NAMES, CLIENT_STATIC_FILES_RUNTIME_MAIN_APP, APP_CLIENT_INTERNALS, PHASE_PRODUCTION_BUILD } from '../../shared/lib/constants';\nimport { runCompiler } from '../compiler';\nimport * as Log from '../output/log';\nimport getBaseWebpackConfig, { loadProjectInfo } from '../webpack-config';\nimport { TelemetryPlugin } from '../webpack/plugins/telemetry-plugin/telemetry-plugin';\nimport { NextBuildContext, resumePluginState, getPluginState } from '../build-context';\nimport { createEntrypoints } from '../entries';\nimport loadConfig from '../../server/config';\nimport { getTraceEvents, initializeTraceState, setGlobal, trace } from '../../trace';\nimport { WEBPACK_LAYERS } from '../../lib/constants';\nimport { TraceEntryPointsPlugin } from '../webpack/plugins/next-trace-entrypoints-plugin';\nimport origDebug from 'next/dist/compiled/debug';\nimport { Telemetry } from '../../telemetry/storage';\nimport { durationToString } from '../duration-to-string';\nconst debug = origDebug('next:build:webpack-build');\nfunction isTelemetryPlugin(plugin) {\n    return plugin instanceof TelemetryPlugin;\n}\nfunction isTraceEntryPointsPlugin(plugin) {\n    return plugin instanceof TraceEntryPointsPlugin;\n}\nexport async function webpackBuildImpl(compilerName) {\n    var _clientConfig_plugins, _serverConfig_plugins;\n    let result = {\n        warnings: [],\n        errors: [],\n        stats: []\n    };\n    let webpackBuildStart;\n    const nextBuildSpan = NextBuildContext.nextBuildSpan;\n    const dir = NextBuildContext.dir;\n    const config = NextBuildContext.config;\n    process.env.NEXT_COMPILER_NAME = compilerName || 'server';\n    const runWebpackSpan = nextBuildSpan.traceChild('run-webpack-compiler');\n    const entrypoints = await nextBuildSpan.traceChild('create-entrypoints').traceAsyncFn(()=>createEntrypoints({\n            buildId: NextBuildContext.buildId,\n            config: config,\n            envFiles: NextBuildContext.loadedEnvFiles,\n            isDev: false,\n            rootDir: dir,\n            pageExtensions: config.pageExtensions,\n            pagesDir: NextBuildContext.pagesDir,\n            appDir: NextBuildContext.appDir,\n            pages: NextBuildContext.mappedPages,\n            appPaths: NextBuildContext.mappedAppPages,\n            previewMode: NextBuildContext.previewProps,\n            rootPaths: NextBuildContext.mappedRootPaths,\n            hasInstrumentationHook: NextBuildContext.hasInstrumentationHook\n        }));\n    const commonWebpackOptions = {\n        isServer: false,\n        isCompileMode: NextBuildContext.isCompileMode,\n        buildId: NextBuildContext.buildId,\n        encryptionKey: NextBuildContext.encryptionKey,\n        config: config,\n        appDir: NextBuildContext.appDir,\n        pagesDir: NextBuildContext.pagesDir,\n        rewrites: NextBuildContext.rewrites,\n        originalRewrites: NextBuildContext.originalRewrites,\n        originalRedirects: NextBuildContext.originalRedirects,\n        reactProductionProfiling: NextBuildContext.reactProductionProfiling,\n        noMangling: NextBuildContext.noMangling,\n        clientRouterFilters: NextBuildContext.clientRouterFilters,\n        previewModeId: NextBuildContext.previewModeId,\n        allowedRevalidateHeaderKeys: NextBuildContext.allowedRevalidateHeaderKeys,\n        fetchCacheKeyPrefix: NextBuildContext.fetchCacheKeyPrefix\n    };\n    const configs = await runWebpackSpan.traceChild('generate-webpack-config').traceAsyncFn(async ()=>{\n        const info = await loadProjectInfo({\n            dir,\n            config: commonWebpackOptions.config,\n            dev: false\n        });\n        return Promise.all([\n            getBaseWebpackConfig(dir, {\n                ...commonWebpackOptions,\n                middlewareMatchers: entrypoints.middlewareMatchers,\n                runWebpackSpan,\n                compilerType: COMPILER_NAMES.client,\n                entrypoints: entrypoints.client,\n                ...info\n            }),\n            getBaseWebpackConfig(dir, {\n                ...commonWebpackOptions,\n                runWebpackSpan,\n                middlewareMatchers: entrypoints.middlewareMatchers,\n                compilerType: COMPILER_NAMES.server,\n                entrypoints: entrypoints.server,\n                ...info\n            }),\n            getBaseWebpackConfig(dir, {\n                ...commonWebpackOptions,\n                runWebpackSpan,\n                middlewareMatchers: entrypoints.middlewareMatchers,\n                compilerType: COMPILER_NAMES.edgeServer,\n                entrypoints: entrypoints.edgeServer,\n                edgePreviewProps: {\n                    __NEXT_PREVIEW_MODE_ID: NextBuildContext.previewProps.previewModeId,\n                    __NEXT_PREVIEW_MODE_ENCRYPTION_KEY: NextBuildContext.previewProps.previewModeEncryptionKey,\n                    __NEXT_PREVIEW_MODE_SIGNING_KEY: NextBuildContext.previewProps.previewModeSigningKey\n                },\n                ...info\n            })\n        ]);\n    });\n    const clientConfig = configs[0];\n    const serverConfig = configs[1];\n    const edgeConfig = configs[2];\n    if (clientConfig.optimization && (clientConfig.optimization.minimize !== true || clientConfig.optimization.minimizer && clientConfig.optimization.minimizer.length === 0)) {\n        Log.warn(`Production code optimization has been disabled in your project. Read more: https://nextjs.org/docs/messages/minification-disabled`);\n    }\n    webpackBuildStart = process.hrtime();\n    debug(`starting compiler`, compilerName);\n    // We run client and server compilation separately to optimize for memory usage\n    await runWebpackSpan.traceAsyncFn(async ()=>{\n        var _inputFileSystem_purge;\n        if (config.experimental.webpackMemoryOptimizations) {\n            stringBufferUtils.disableDualStringBufferCaching();\n            stringBufferUtils.enterStringInterningRange();\n        }\n        // Run the server compilers first and then the client\n        // compiler to track the boundary of server/client components.\n        let clientResult = null;\n        // During the server compilations, entries of client components will be\n        // injected to this set and then will be consumed by the client compiler.\n        let serverResult = null;\n        let edgeServerResult = null;\n        let inputFileSystem;\n        if (!compilerName || compilerName === 'server') {\n            debug('starting server compiler');\n            const start = Date.now();\n            [serverResult, inputFileSystem] = await runCompiler(serverConfig, {\n                runWebpackSpan,\n                inputFileSystem\n            });\n            debug(`server compiler finished ${Date.now() - start}ms`);\n        }\n        if (!compilerName || compilerName === 'edge-server') {\n            debug('starting edge-server compiler');\n            const start = Date.now();\n            [edgeServerResult, inputFileSystem] = edgeConfig ? await runCompiler(edgeConfig, {\n                runWebpackSpan,\n                inputFileSystem\n            }) : [\n                null\n            ];\n            debug(`edge-server compiler finished ${Date.now() - start}ms`);\n        }\n        // Only continue if there were no errors\n        if (!(serverResult == null ? void 0 : serverResult.errors.length) && !(edgeServerResult == null ? void 0 : edgeServerResult.errors.length)) {\n            const pluginState = getPluginState();\n            for(const key in pluginState.injectedClientEntries){\n                const value = pluginState.injectedClientEntries[key];\n                const clientEntry = clientConfig.entry;\n                if (key === APP_CLIENT_INTERNALS) {\n                    clientEntry[CLIENT_STATIC_FILES_RUNTIME_MAIN_APP] = {\n                        import: [\n                            // TODO-APP: cast clientEntry[CLIENT_STATIC_FILES_RUNTIME_MAIN_APP] to type EntryDescription once it's available from webpack\n                            // @ts-expect-error clientEntry['main-app'] is type EntryDescription { import: ... }\n                            ...clientEntry[CLIENT_STATIC_FILES_RUNTIME_MAIN_APP].import,\n                            value\n                        ],\n                        layer: WEBPACK_LAYERS.appPagesBrowser\n                    };\n                } else {\n                    clientEntry[key] = {\n                        dependOn: [\n                            CLIENT_STATIC_FILES_RUNTIME_MAIN_APP\n                        ],\n                        import: value,\n                        layer: WEBPACK_LAYERS.appPagesBrowser\n                    };\n                }\n            }\n            if (!compilerName || compilerName === 'client') {\n                debug('starting client compiler');\n                const start = Date.now();\n                [clientResult, inputFileSystem] = await runCompiler(clientConfig, {\n                    runWebpackSpan,\n                    inputFileSystem\n                });\n                debug(`client compiler finished ${Date.now() - start}ms`);\n            }\n        }\n        if (config.experimental.webpackMemoryOptimizations) {\n            stringBufferUtils.exitStringInterningRange();\n        }\n        inputFileSystem == null ? void 0 : (_inputFileSystem_purge = inputFileSystem.purge) == null ? void 0 : _inputFileSystem_purge.call(inputFileSystem);\n        result = {\n            warnings: [\n                ...(clientResult == null ? void 0 : clientResult.warnings) ?? [],\n                ...(serverResult == null ? void 0 : serverResult.warnings) ?? [],\n                ...(edgeServerResult == null ? void 0 : edgeServerResult.warnings) ?? []\n            ].filter(nonNullable),\n            errors: [\n                ...(clientResult == null ? void 0 : clientResult.errors) ?? [],\n                ...(serverResult == null ? void 0 : serverResult.errors) ?? [],\n                ...(edgeServerResult == null ? void 0 : edgeServerResult.errors) ?? []\n            ].filter(nonNullable),\n            stats: [\n                clientResult == null ? void 0 : clientResult.stats,\n                serverResult == null ? void 0 : serverResult.stats,\n                edgeServerResult == null ? void 0 : edgeServerResult.stats\n            ]\n        };\n    });\n    result = nextBuildSpan.traceChild('format-webpack-messages').traceFn(()=>formatWebpackMessages(result, true));\n    const telemetryPlugin = (_clientConfig_plugins = clientConfig.plugins) == null ? void 0 : _clientConfig_plugins.find(isTelemetryPlugin);\n    const traceEntryPointsPlugin = (_serverConfig_plugins = serverConfig.plugins) == null ? void 0 : _serverConfig_plugins.find(isTraceEntryPointsPlugin);\n    const webpackBuildEnd = process.hrtime(webpackBuildStart);\n    if (result.errors.length > 0) {\n        // Only keep the first few errors. Others are often indicative\n        // of the same problem, but confuse the reader with noise.\n        if (result.errors.length > 5) {\n            result.errors.length = 5;\n        }\n        let error = result.errors.filter(Boolean).join('\\n\\n');\n        console.error(red('Failed to compile.\\n'));\n        if (error.indexOf('private-next-pages') > -1 && error.indexOf('does not contain a default export') > -1) {\n            const page_name_regex = /'private-next-pages\\/(?<page_name>[^']*)'/;\n            const parsed = page_name_regex.exec(error);\n            const page_name = parsed && parsed.groups && parsed.groups.page_name;\n            throw Object.defineProperty(new Error(`webpack build failed: found page without a React Component as default export in pages/${page_name}\\n\\nSee https://nextjs.org/docs/messages/page-without-valid-component for more info.`), \"__NEXT_ERROR_CODE\", {\n                value: \"E164\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        console.error(error);\n        console.error();\n        if (error.indexOf('private-next-pages') > -1 || error.indexOf('__next_polyfill__') > -1) {\n            const err = Object.defineProperty(new Error('webpack config.resolve.alias was incorrectly overridden. https://nextjs.org/docs/messages/invalid-resolve-alias'), \"__NEXT_ERROR_CODE\", {\n                value: \"E70\",\n                enumerable: false,\n                configurable: true\n            });\n            err.code = 'INVALID_RESOLVE_ALIAS';\n            throw err;\n        }\n        const err = Object.defineProperty(new Error(`Build failed because of ${process.env.NEXT_RSPACK ? 'rspack' : 'webpack'} errors`), \"__NEXT_ERROR_CODE\", {\n            value: \"E661\",\n            enumerable: false,\n            configurable: true\n        });\n        err.code = 'WEBPACK_ERRORS';\n        throw err;\n    } else {\n        const duration = webpackBuildEnd[0];\n        const durationString = durationToString(duration);\n        if (result.warnings.length > 0) {\n            Log.warn(`Compiled with warnings in ${durationString}\\n`);\n            console.warn(result.warnings.filter(Boolean).join('\\n\\n'));\n            console.warn();\n        } else if (!compilerName) {\n            Log.event(`Compiled successfully in ${durationString}`);\n        }\n        return {\n            duration: webpackBuildEnd[0],\n            buildTraceContext: traceEntryPointsPlugin == null ? void 0 : traceEntryPointsPlugin.buildTraceContext,\n            pluginState: getPluginState(),\n            telemetryState: {\n                usages: (telemetryPlugin == null ? void 0 : telemetryPlugin.usages()) || [],\n                packagesUsedInServerSideProps: (telemetryPlugin == null ? void 0 : telemetryPlugin.packagesUsedInServerSideProps()) || [],\n                useCacheTracker: (telemetryPlugin == null ? void 0 : telemetryPlugin.getUseCacheTracker()) || {}\n            }\n        };\n    }\n}\n// the main function when this file is run as a worker\nexport async function workerMain(workerData) {\n    // Clone the telemetry for worker\n    const telemetry = new Telemetry({\n        distDir: workerData.buildContext.config.distDir\n    });\n    setGlobal('telemetry', telemetry);\n    // setup new build context from the serialized data passed from the parent\n    Object.assign(NextBuildContext, workerData.buildContext);\n    // Initialize tracer state from the parent\n    initializeTraceState(workerData.traceState);\n    // Resume plugin state\n    resumePluginState(NextBuildContext.pluginState);\n    /// load the config because it's not serializable\n    NextBuildContext.config = await loadConfig(PHASE_PRODUCTION_BUILD, NextBuildContext.dir);\n    NextBuildContext.nextBuildSpan = trace(`worker-main-${workerData.compilerName}`);\n    const result = await webpackBuildImpl(workerData.compilerName);\n    const { entriesTrace, chunksTrace } = result.buildTraceContext ?? {};\n    if (entriesTrace) {\n        const { entryNameMap, depModArray } = entriesTrace;\n        if (depModArray) {\n            result.buildTraceContext.entriesTrace.depModArray = depModArray;\n        }\n        if (entryNameMap) {\n            const entryEntries = entryNameMap;\n            result.buildTraceContext.entriesTrace.entryNameMap = entryEntries;\n        }\n    }\n    if (chunksTrace == null ? void 0 : chunksTrace.entryNameFilesMap) {\n        const entryNameFilesMap = chunksTrace.entryNameFilesMap;\n        result.buildTraceContext.chunksTrace.entryNameFilesMap = entryNameFilesMap;\n    }\n    NextBuildContext.nextBuildSpan.stop();\n    return {\n        ...result,\n        debugTraceEvents: getTraceEvents()\n    };\n}\n\n//# sourceMappingURL=impl.js.map"
        }
    ]
}