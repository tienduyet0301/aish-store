{
    "sourceFile": "node_modules/next/dist/esm/build/handle-entrypoints.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892746770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { getEntryKey } from '../shared/lib/turbopack/entry-key';\nimport * as Log from './output/log';\nexport async function rawEntrypointsToEntrypoints(entrypointsOp) {\n    const page = new Map();\n    const app = new Map();\n    for (const [pathname, route] of entrypointsOp.routes){\n        switch(route.type){\n            case 'page':\n            case 'page-api':\n                page.set(pathname, route);\n                break;\n            case 'app-page':\n                {\n                    for (const p of route.pages){\n                        app.set(p.originalName, {\n                            type: 'app-page',\n                            ...p\n                        });\n                    }\n                    break;\n                }\n            case 'app-route':\n                {\n                    app.set(route.originalName, route);\n                    break;\n                }\n            default:\n                Log.info(`skipping ${pathname} (${route.type})`);\n                break;\n        }\n    }\n    return {\n        global: {\n            app: entrypointsOp.pagesAppEndpoint,\n            document: entrypointsOp.pagesDocumentEndpoint,\n            error: entrypointsOp.pagesErrorEndpoint,\n            instrumentation: entrypointsOp.instrumentation,\n            middleware: entrypointsOp.middleware\n        },\n        page,\n        app\n    };\n}\nexport async function handleRouteType({ page, route, manifestLoader }) {\n    const shouldCreateWebpackStats = process.env.TURBOPACK_STATS != null;\n    switch(route.type){\n        case 'page':\n            {\n                const serverKey = getEntryKey('pages', 'server', page);\n                await manifestLoader.loadBuildManifest(page);\n                await manifestLoader.loadPagesManifest(page);\n                const middlewareManifestWritten = await manifestLoader.loadMiddlewareManifest(page, 'pages');\n                if (!middlewareManifestWritten) {\n                    manifestLoader.deleteMiddlewareManifest(serverKey);\n                }\n                await manifestLoader.loadFontManifest('/_app', 'pages');\n                await manifestLoader.loadFontManifest(page, 'pages');\n                if (shouldCreateWebpackStats) {\n                    await manifestLoader.loadWebpackStats(page, 'pages');\n                }\n                break;\n            }\n        case 'page-api':\n            {\n                const key = getEntryKey('pages', 'server', page);\n                await manifestLoader.loadPagesManifest(page);\n                const middlewareManifestWritten = await manifestLoader.loadMiddlewareManifest(page, 'pages');\n                if (!middlewareManifestWritten) {\n                    manifestLoader.deleteMiddlewareManifest(key);\n                }\n                break;\n            }\n        case 'app-page':\n            {\n                const key = getEntryKey('app', 'server', page);\n                const middlewareManifestWritten = await manifestLoader.loadMiddlewareManifest(page, 'app');\n                if (!middlewareManifestWritten) {\n                    manifestLoader.deleteMiddlewareManifest(key);\n                }\n                await manifestLoader.loadAppBuildManifest(page);\n                await manifestLoader.loadBuildManifest(page, 'app');\n                await manifestLoader.loadAppPathsManifest(page);\n                await manifestLoader.loadActionManifest(page);\n                await manifestLoader.loadFontManifest(page, 'app');\n                if (shouldCreateWebpackStats) {\n                    await manifestLoader.loadWebpackStats(page, 'app');\n                }\n                break;\n            }\n        case 'app-route':\n            {\n                const key = getEntryKey('app', 'server', page);\n                await manifestLoader.loadAppPathsManifest(page);\n                const middlewareManifestWritten = await manifestLoader.loadMiddlewareManifest(page, 'app');\n                if (!middlewareManifestWritten) {\n                    manifestLoader.deleteMiddlewareManifest(key);\n                }\n                break;\n            }\n        default:\n            {\n                throw Object.defineProperty(new Error(`unknown route type ${route.type} for ${page}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E316\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n    }\n}\n\n//# sourceMappingURL=handle-entrypoints.js.map"
        }
    ]
}