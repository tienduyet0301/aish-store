{
    "sourceFile": "node_modules/next/dist/esm/build/build-context.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892746067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// A layer for storing data that is used by plugins to communicate with each\n// other between different steps of the build process. This is only internal\n// to Next.js and will not be a part of the final build output.\n// These states don't need to be deeply merged.\nlet pluginState = {};\nexport function resumePluginState(resumedState) {\n    Object.assign(pluginState, resumedState);\n}\n// This method gives you the plugin state with typed and mutable value fields\n// behind a proxy so we can lazily initialize the values **after** resuming the\n// plugin state.\nexport function getProxiedPluginState(initialState) {\n    return new Proxy(pluginState, {\n        get (target, key) {\n            if (typeof target[key] === 'undefined') {\n                return target[key] = initialState[key];\n            }\n            return target[key];\n        },\n        set (target, key, value) {\n            target[key] = value;\n            return true;\n        }\n    });\n}\nexport function getPluginState() {\n    return pluginState;\n}\n// a global object to store context for the current build\n// this is used to pass data between different steps of the build without having\n// to pass it through function arguments.\n// Not exhaustive, but should be extended to as needed whilst refactoring\nexport const NextBuildContext = {};\n\n//# sourceMappingURL=build-context.js.map"
        }
    ]
}