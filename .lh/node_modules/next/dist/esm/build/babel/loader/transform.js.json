{
    "sourceFile": "node_modules/next/dist/esm/build/babel/loader/transform.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892745250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Partially adapted from @babel/core (MIT license).\n */ import traverse from 'next/dist/compiled/babel/traverse';\nimport generate from 'next/dist/compiled/babel/generator';\nimport normalizeFile from 'next/dist/compiled/babel/core-lib-normalize-file';\nimport normalizeOpts from 'next/dist/compiled/babel/core-lib-normalize-opts';\nimport loadBlockHoistPlugin from 'next/dist/compiled/babel/core-lib-block-hoist-plugin';\nimport PluginPass from 'next/dist/compiled/babel/core-lib-plugin-pass';\nimport getConfig from './get-config';\nimport { consumeIterator } from './util';\nfunction getTraversalParams(file, pluginPairs) {\n    const passPairs = [];\n    const passes = [];\n    const visitors = [];\n    for (const plugin of pluginPairs.concat(loadBlockHoistPlugin())){\n        const pass = new PluginPass(file, plugin.key, plugin.options);\n        passPairs.push([\n            plugin,\n            pass\n        ]);\n        passes.push(pass);\n        visitors.push(plugin.visitor);\n    }\n    return {\n        passPairs,\n        passes,\n        visitors\n    };\n}\nfunction invokePluginPre(file, passPairs) {\n    for (const [{ pre }, pass] of passPairs){\n        if (pre) {\n            pre.call(pass, file);\n        }\n    }\n}\nfunction invokePluginPost(file, passPairs) {\n    for (const [{ post }, pass] of passPairs){\n        if (post) {\n            post.call(pass, file);\n        }\n    }\n}\nfunction transformAstPass(file, pluginPairs, parentSpan) {\n    const { passPairs, passes, visitors } = getTraversalParams(file, pluginPairs);\n    invokePluginPre(file, passPairs);\n    const visitor = traverse.visitors.merge(visitors, passes, // @ts-ignore - the exported types are incorrect here\n    file.opts.wrapPluginVisitorMethod);\n    parentSpan.traceChild('babel-turbo-traverse').traceFn(()=>traverse(file.ast, visitor, file.scope));\n    invokePluginPost(file, passPairs);\n}\nfunction transformAst(file, babelConfig, parentSpan) {\n    for (const pluginPairs of babelConfig.passes){\n        transformAstPass(file, pluginPairs, parentSpan);\n    }\n}\nexport default async function transform(source, inputSourceMap, loaderOptions, filename, target, parentSpan) {\n    const getConfigSpan = parentSpan.traceChild('babel-turbo-get-config');\n    const babelConfig = await getConfig.call(this, {\n        source,\n        loaderOptions,\n        inputSourceMap,\n        target,\n        filename\n    });\n    if (!babelConfig) {\n        return {\n            code: source,\n            map: inputSourceMap\n        };\n    }\n    getConfigSpan.stop();\n    const normalizeSpan = parentSpan.traceChild('babel-turbo-normalize-file');\n    const file = consumeIterator(normalizeFile(babelConfig.passes, normalizeOpts(babelConfig), source));\n    normalizeSpan.stop();\n    const transformSpan = parentSpan.traceChild('babel-turbo-transform');\n    transformAst(file, babelConfig, transformSpan);\n    transformSpan.stop();\n    const generateSpan = parentSpan.traceChild('babel-turbo-generate');\n    const { code, map } = generate(file.ast, file.opts.generatorOpts, file.code);\n    generateSpan.stop();\n    return {\n        code,\n        map\n    };\n}\n\n//# sourceMappingURL=transform.js.map"
        }
    ]
}