{
    "sourceFile": "node_modules/next/dist/esm/build/babel/preset.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892745984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { dirname } from 'path';\nconst isLoadIntentTest = process.env.NODE_ENV === 'test';\nconst isLoadIntentDevelopment = process.env.NODE_ENV === 'development';\n// Resolve styled-jsx plugins\nfunction styledJsxOptions(options) {\n    options = options || {};\n    options.styleModule = 'styled-jsx/style';\n    if (!Array.isArray(options.plugins)) {\n        return options;\n    }\n    options.plugins = options.plugins.map((plugin)=>{\n        if (Array.isArray(plugin)) {\n            const [name, pluginOptions] = plugin;\n            return [\n                require.resolve(name),\n                pluginOptions\n            ];\n        }\n        return require.resolve(plugin);\n    });\n    return options;\n}\n// Taken from https://github.com/babel/babel/commit/d60c5e1736543a6eac4b549553e107a9ba967051#diff-b4beead8ad9195361b4537601cc22532R158\nfunction supportsStaticESM(caller) {\n    return !!(caller == null ? void 0 : caller.supportsStaticESM);\n}\nexport default ((api, options = {})=>{\n    var _options_presetreact, _options_presetreact1;\n    const supportsESM = api.caller(supportsStaticESM);\n    const isServer = api.caller((caller)=>!!caller && caller.isServer);\n    const isCallerDevelopment = api.caller((caller)=>caller == null ? void 0 : caller.isDev);\n    // Look at external intent if used without a caller (e.g. via Jest):\n    const isTest = isCallerDevelopment == null && isLoadIntentTest;\n    // Look at external intent if used without a caller (e.g. Storybook):\n    const isDevelopment = isCallerDevelopment === true || isCallerDevelopment == null && isLoadIntentDevelopment;\n    // Default to production mode if not `test` nor `development`:\n    const isProduction = !(isTest || isDevelopment);\n    const isBabelLoader = api.caller((caller)=>!!caller && (caller.name === 'babel-loader' || caller.name === 'next-babel-turbo-loader'));\n    const useJsxRuntime = ((_options_presetreact = options['preset-react']) == null ? void 0 : _options_presetreact.runtime) === 'automatic' || Boolean(api.caller((caller)=>!!caller && caller.hasJsxRuntime)) && ((_options_presetreact1 = options['preset-react']) == null ? void 0 : _options_presetreact1.runtime) !== 'classic';\n    const presetEnvConfig = {\n        // In the test environment `modules` is often needed to be set to true, babel figures that out by itself using the `'auto'` option\n        // In production/development this option is set to `false` so that webpack can handle import/export with tree-shaking\n        modules: 'auto',\n        exclude: [\n            'transform-typeof-symbol'\n        ],\n        ...options['preset-env']\n    };\n    // When transpiling for the server or tests, target the current Node version\n    // if not explicitly specified:\n    if ((isServer || isTest) && (!presetEnvConfig.targets || !(typeof presetEnvConfig.targets === 'object' && 'node' in presetEnvConfig.targets))) {\n        presetEnvConfig.targets = {\n            // Targets the current process' version of Node. This requires apps be\n            // built and deployed on the same version of Node.\n            // This is the same as using \"current\" but explicit\n            node: process.versions.node\n        };\n    }\n    return {\n        sourceType: 'unambiguous',\n        presets: [\n            [\n                require('next/dist/compiled/babel/preset-env'),\n                presetEnvConfig\n            ],\n            [\n                require('next/dist/compiled/babel/preset-react'),\n                {\n                    // This adds @babel/plugin-transform-react-jsx-source and\n                    // @babel/plugin-transform-react-jsx-self automatically in development\n                    development: isDevelopment || isTest,\n                    ...useJsxRuntime ? {\n                        runtime: 'automatic'\n                    } : {\n                        pragma: '__jsx'\n                    },\n                    ...options['preset-react']\n                }\n            ],\n            [\n                require('next/dist/compiled/babel/preset-typescript'),\n                {\n                    allowNamespaces: true,\n                    ...options['preset-typescript']\n                }\n            ]\n        ],\n        plugins: [\n            !useJsxRuntime && [\n                require('./plugins/jsx-pragma'),\n                {\n                    // This produces the following injected import for modules containing JSX:\n                    //   import React from 'react';\n                    //   var __jsx = React.createElement;\n                    module: 'react',\n                    importAs: 'React',\n                    pragma: '__jsx',\n                    property: 'createElement'\n                }\n            ],\n            [\n                require('./plugins/optimize-hook-destructuring'),\n                {\n                    // only optimize hook functions imported from React/Preact\n                    lib: true\n                }\n            ],\n            require('next/dist/compiled/babel/plugin-syntax-dynamic-import'),\n            [\n                require('next/dist/compiled/babel/plugin-syntax-import-attributes'),\n                {\n                    deprecatedAssertSyntax: true\n                }\n            ],\n            require('./plugins/react-loadable-plugin'),\n            // only enable this plugin if custom config for it was provided\n            // otherwise we will only enable it if their browserslist triggers\n            // preset-env to pull it in\n            options['class-properties'] && [\n                require('next/dist/compiled/babel/plugin-proposal-class-properties'),\n                options['class-properties'] || {}\n            ],\n            [\n                require('next/dist/compiled/babel/plugin-proposal-object-rest-spread'),\n                {\n                    useBuiltIns: true\n                }\n            ],\n            !isServer && [\n                require('next/dist/compiled/babel/plugin-transform-runtime'),\n                {\n                    corejs: false,\n                    helpers: true,\n                    regenerator: true,\n                    useESModules: supportsESM && presetEnvConfig.modules !== 'commonjs',\n                    absoluteRuntime: isBabelLoader ? dirname(require.resolve('next/dist/compiled/@babel/runtime/package.json')) : undefined,\n                    ...options['transform-runtime']\n                }\n            ],\n            [\n                isTest && options['styled-jsx'] && options['styled-jsx']['babel-test'] ? require('styled-jsx/babel-test') : require('styled-jsx/babel'),\n                styledJsxOptions(options['styled-jsx'])\n            ],\n            require('./plugins/amp-attributes'),\n            isProduction && [\n                require('next/dist/compiled/babel/plugin-transform-react-remove-prop-types'),\n                {\n                    removeImport: true\n                }\n            ],\n            isServer && require('next/dist/compiled/babel/plugin-syntax-bigint'),\n            // Always compile numeric separator because the resulting number is\n            // smaller.\n            require('next/dist/compiled/babel/plugin-proposal-numeric-separator'),\n            require('next/dist/compiled/babel/plugin-proposal-export-namespace-from')\n        ].filter(Boolean)\n    };\n});\n\n//# sourceMappingURL=preset.js.map"
        }
    ]
}