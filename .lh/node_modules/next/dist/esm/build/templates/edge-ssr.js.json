{
    "sourceFile": "node_modules/next/dist/esm/build/templates/edge-ssr.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892750715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import '../../server/web/globals';\nimport { adapter } from '../../server/web/adapter';\nimport { getRender } from '../webpack/loaders/next-edge-ssr-loader/render';\nimport { IncrementalCache } from '../../server/lib/incremental-cache';\nimport { initializeCacheHandlers } from '../../server/use-cache/handlers';\nimport Document from 'VAR_MODULE_DOCUMENT';\nimport * as appMod from 'VAR_MODULE_APP';\nimport * as userlandPage from 'VAR_USERLAND';\nimport * as userlandErrorPage from 'VAR_MODULE_GLOBAL_ERROR';\n// OPTIONAL_IMPORT:* as userland500Page\n// OPTIONAL_IMPORT:incrementalCacheHandler\n// TODO: re-enable this once we've refactored to use implicit matches\n// const renderToHTML = undefined\nimport { renderToHTML } from '../../server/render';\nimport RouteModule from '../../server/route-modules/pages/module';\n// INJECT:pagesType\n// INJECT:sriEnabled\n// INJECT:dev\n// INJECT:nextConfig\n// INJECT:pageRouteModuleOptions\n// INJECT:errorRouteModuleOptions\n// INJECT:user500RouteModuleOptions\n// Initialize the cache handlers interface.\ninitializeCacheHandlers();\nconst pageMod = {\n    ...userlandPage,\n    routeModule: new RouteModule({\n        ...pageRouteModuleOptions,\n        components: {\n            App: appMod.default,\n            Document\n        },\n        userland: userlandPage\n    })\n};\nconst errorMod = {\n    ...userlandErrorPage,\n    routeModule: new RouteModule({\n        ...errorRouteModuleOptions,\n        components: {\n            App: appMod.default,\n            Document\n        },\n        userland: userlandErrorPage\n    })\n};\n// FIXME: this needs to be made compatible with the template\nconst error500Mod = userland500Page ? {\n    ...userland500Page,\n    routeModule: new RouteModule({\n        ...user500RouteModuleOptions,\n        components: {\n            App: appMod.default,\n            Document\n        },\n        userland: userland500Page\n    })\n} : null;\nconst maybeJSONParse = (str)=>str ? JSON.parse(str) : undefined;\nconst buildManifest = self.__BUILD_MANIFEST;\nconst reactLoadableManifest = maybeJSONParse(self.__REACT_LOADABLE_MANIFEST);\nconst dynamicCssManifest = maybeJSONParse(self.__DYNAMIC_CSS_MANIFEST);\nconst subresourceIntegrityManifest = sriEnabled ? maybeJSONParse(self.__SUBRESOURCE_INTEGRITY_MANIFEST) : undefined;\nconst nextFontManifest = maybeJSONParse(self.__NEXT_FONT_MANIFEST);\nconst render = getRender({\n    pagesType,\n    dev,\n    page: 'VAR_PAGE',\n    appMod,\n    pageMod,\n    errorMod,\n    error500Mod,\n    Document,\n    buildManifest,\n    renderToHTML,\n    reactLoadableManifest,\n    dynamicCssManifest,\n    subresourceIntegrityManifest,\n    config: nextConfig,\n    buildId: process.env.__NEXT_BUILD_ID,\n    nextFontManifest,\n    incrementalCacheHandler\n});\nexport const ComponentMod = pageMod;\nexport default function nHandler(opts) {\n    return adapter({\n        ...opts,\n        IncrementalCache,\n        handler: render\n    });\n}\n\n//# sourceMappingURL=edge-ssr.js.map"
        }
    ]
}