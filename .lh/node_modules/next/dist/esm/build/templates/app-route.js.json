{
    "sourceFile": "node_modules/next/dist/esm/build/templates/app-route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892750481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { AppRouteRouteModule } from '../../server/route-modules/app-route/module.compiled';\nimport { RouteKind } from '../../server/route-kind';\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch';\nimport * as userland from 'VAR_USERLAND';\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        filename: 'VAR_DEFINITION_FILENAME',\n        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'\n    },\n    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map"
        }
    ]
}