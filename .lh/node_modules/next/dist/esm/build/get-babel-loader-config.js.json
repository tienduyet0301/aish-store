{
    "sourceFile": "node_modules/next/dist/esm/build/get-babel-loader-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892746688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nfunction getReactCompiler() {\n    try {\n        // It's in peerDependencies, so it should be available\n        // eslint-disable-next-line import/no-extraneous-dependencies\n        return require.resolve('babel-plugin-react-compiler');\n    } catch  {\n        throw Object.defineProperty(new Error('Failed to load the `babel-plugin-react-compiler`. It is required to use the React Compiler. Please install it.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E78\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nconst getReactCompilerPlugins = (options, isDev, isServer)=>{\n    if (!options || isServer) {\n        return undefined;\n    }\n    const compilerOptions = typeof options === 'boolean' ? {} : options;\n    if (options) {\n        return [\n            [\n                getReactCompiler(),\n                {\n                    panicThreshold: isDev ? undefined : 'NONE',\n                    ...compilerOptions\n                }\n            ]\n        ];\n    }\n    return undefined;\n};\nconst getBabelLoader = (useSWCLoader, babelConfigFile, isServer, distDir, pagesDir, cwd, srcDir, dev, isClient, reactCompilerOptions, reactCompilerExclude)=>{\n    if (!useSWCLoader) {\n        return {\n            loader: require.resolve('./babel/loader/index'),\n            options: {\n                transformMode: 'default',\n                configFile: babelConfigFile,\n                isServer,\n                distDir,\n                pagesDir,\n                cwd,\n                srcDir: path.dirname(srcDir),\n                development: dev,\n                hasReactRefresh: dev && isClient,\n                hasJsxRuntime: true,\n                reactCompilerPlugins: getReactCompilerPlugins(reactCompilerOptions, dev, isServer),\n                reactCompilerExclude\n            }\n        };\n    }\n    return undefined;\n};\n/**\n * Get a separate babel loader for the react compiler, only used if Babel is not\n * configured through e.g. .babelrc. If user have babel config, this should be configured in the babel loader itself.\n * Note from react compiler:\n * > For best results, compiler must run as the first plugin in your Babel pipeline so it receives input as close to the original source as possible.\n */ const getReactCompilerLoader = (options, cwd, isDev, isServer, reactCompilerExclude)=>{\n    const reactCompilerPlugins = getReactCompilerPlugins(options, isDev, isServer);\n    if (!reactCompilerPlugins) {\n        return undefined;\n    }\n    const config = {\n        loader: require.resolve('./babel/loader/index'),\n        options: {\n            transformMode: 'standalone',\n            cwd,\n            reactCompilerPlugins\n        }\n    };\n    if (reactCompilerExclude) {\n        config.options.reactCompilerExclude = reactCompilerExclude;\n    }\n    return config;\n};\nexport { getBabelLoader, getReactCompilerLoader };\n\n//# sourceMappingURL=get-babel-loader-config.js.map"
        }
    ]
}