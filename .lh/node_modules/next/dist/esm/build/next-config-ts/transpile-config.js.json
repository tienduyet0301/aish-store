{
    "sourceFile": "node_modules/next/dist/esm/build/next-config-ts/transpile-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892747432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { join } from 'node:path';\nimport { readFile } from 'node:fs/promises';\nimport { deregisterHook, registerHook, requireFromString } from './require-hook';\nimport { parseJsonFile } from '../load-jsconfig';\nfunction resolveSWCOptions(cwd, compilerOptions) {\n    const resolvedBaseUrl = join(cwd, compilerOptions.baseUrl ?? '.');\n    return {\n        jsc: {\n            target: 'es5',\n            parser: {\n                syntax: 'typescript'\n            },\n            paths: compilerOptions.paths,\n            baseUrl: resolvedBaseUrl\n        },\n        module: {\n            type: 'commonjs'\n        },\n        isModule: 'unknown'\n    };\n}\nasync function lazilyGetTSConfig(cwd) {\n    let tsConfig;\n    try {\n        tsConfig = parseJsonFile(join(cwd, 'tsconfig.json'));\n    } catch (error) {\n        // ignore if tsconfig.json does not exist\n        if (error.code !== 'ENOENT') {\n            throw error;\n        }\n        tsConfig = {\n            compilerOptions: {}\n        };\n    }\n    return tsConfig;\n}\nexport async function transpileConfig({ nextConfigPath, cwd }) {\n    let hasRequire = false;\n    try {\n        const { compilerOptions } = await lazilyGetTSConfig(cwd);\n        const swcOptions = resolveSWCOptions(cwd, compilerOptions);\n        const nextConfigString = await readFile(nextConfigPath, 'utf8');\n        // lazy require swc since it loads React before even setting NODE_ENV\n        // resulting loading Development React on Production\n        const { transform } = require('../swc');\n        const { code } = await transform(nextConfigString, swcOptions);\n        // register require hook only if require exists\n        if (code.includes('require(')) {\n            registerHook(swcOptions);\n            hasRequire = true;\n        }\n        // filename & extension don't matter here\n        return requireFromString(code, join(cwd, 'next.config.compiled.js'));\n    } catch (error) {\n        throw error;\n    } finally{\n        if (hasRequire) {\n            deregisterHook();\n        }\n    }\n}\n\n//# sourceMappingURL=transpile-config.js.map"
        }
    ]
}