{
    "sourceFile": "node_modules/next/dist/esm/build/progress.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892748875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as Log from '../build/output/log';\nimport createSpinner from './spinner';\nfunction divideSegments(number, segments) {\n    const result = [];\n    while(number > 0 && segments > 0){\n        const dividedNumber = number < segments ? number : Math.floor(number / segments);\n        number -= dividedNumber;\n        segments--;\n        result.push(dividedNumber);\n    }\n    return result;\n}\nexport const createProgress = (total, label)=>{\n    const segments = divideSegments(total, 4);\n    if (total === 0) {\n        throw Object.defineProperty(new Error('invariant: progress total can not be zero'), \"__NEXT_ERROR_CODE\", {\n            value: \"E49\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    let currentSegmentTotal = segments.shift();\n    let currentSegmentCount = 0;\n    let lastProgressOutput = Date.now();\n    let curProgress = 0;\n    let progressSpinner = createSpinner(`${label} (${curProgress}/${total})`, {\n        spinner: {\n            frames: [\n                '[    ]',\n                '[=   ]',\n                '[==  ]',\n                '[=== ]',\n                '[ ===]',\n                '[  ==]',\n                '[   =]',\n                '[    ]',\n                '[   =]',\n                '[  ==]',\n                '[ ===]',\n                '[====]',\n                '[=== ]',\n                '[==  ]',\n                '[=   ]'\n            ],\n            interval: 200\n        }\n    });\n    const run = ()=>{\n        curProgress++;\n        // Make sure we only log once\n        // - per fully generated segment, or\n        // - per minute\n        // when not showing the spinner\n        if (!progressSpinner) {\n            currentSegmentCount++;\n            if (currentSegmentCount === currentSegmentTotal) {\n                currentSegmentTotal = segments.shift();\n                currentSegmentCount = 0;\n            } else if (lastProgressOutput + 60000 > Date.now()) {\n                return;\n            }\n            lastProgressOutput = Date.now();\n        }\n        const isFinished = curProgress === total;\n        const message = `${label} (${curProgress}/${total})`;\n        if (progressSpinner && !isFinished) {\n            progressSpinner.setText(message);\n        } else {\n            progressSpinner == null ? void 0 : progressSpinner.stop();\n            if (isFinished) {\n                Log.event(message);\n            } else {\n                Log.info(`${message} ${process.stdout.isTTY ? '\\n' : '\\r'}`);\n            }\n        }\n    };\n    const clear = ()=>{\n        if (progressSpinner && // Ensure only reset and clear once to avoid set operation overflow in ora\n        progressSpinner.isSpinning) {\n            progressSpinner.prefixText = '\\r';\n            progressSpinner.text = '\\r';\n            progressSpinner.clear();\n            progressSpinner.stop();\n        }\n    };\n    return {\n        run,\n        clear\n    };\n};\n\n//# sourceMappingURL=progress.js.map"
        }
    ]
}