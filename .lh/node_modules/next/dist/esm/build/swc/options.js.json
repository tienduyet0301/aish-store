{
    "sourceFile": "node_modules/next/dist/esm/build/swc/options.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892750210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport { WEBPACK_LAYERS } from '../../lib/constants';\nimport { isWebpackServerOnlyLayer, isWebpackAppPagesLayer } from '../utils';\nimport { escapeStringRegexp } from '../../shared/lib/escape-regexp';\nconst nextDirname = path.dirname(require.resolve('next/package.json'));\nconst nextDistPath = new RegExp(`${escapeStringRegexp(nextDirname)}[\\\\/]dist[\\\\/](shared[\\\\/]lib|client|pages)`);\nconst nodeModulesPath = /[\\\\/]node_modules[\\\\/]/;\nconst regeneratorRuntimePath = require.resolve('next/dist/compiled/regenerator-runtime');\nfunction isTypeScriptFile(filename) {\n    return filename.endsWith('.ts') || filename.endsWith('.tsx');\n}\nfunction isCommonJSFile(filename) {\n    return filename.endsWith('.cjs');\n}\n// Ensure Next.js internals and .cjs files are output as CJS modules,\n// By default all modules are output as ESM or will treated as CJS if next-swc/auto-cjs plugin detects file is CJS.\nfunction shouldOutputCommonJs(filename) {\n    return isCommonJSFile(filename) || nextDistPath.test(filename);\n}\nexport function getParserOptions({ filename, jsConfig, ...rest }) {\n    var _jsConfig_compilerOptions;\n    const isTSFile = filename.endsWith('.ts');\n    const hasTsSyntax = isTypeScriptFile(filename);\n    const enableDecorators = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.experimentalDecorators);\n    return {\n        ...rest,\n        syntax: hasTsSyntax ? 'typescript' : 'ecmascript',\n        dynamicImport: true,\n        decorators: enableDecorators,\n        // Exclude regular TypeScript files from React transformation to prevent e.g. generic parameters and angle-bracket type assertion from being interpreted as JSX tags.\n        [hasTsSyntax ? 'tsx' : 'jsx']: !isTSFile,\n        importAssertions: true\n    };\n}\nfunction getBaseSWCOptions({ filename, jest, development, hasReactRefresh, globalWindow, esm, modularizeImports, swcPlugins, compilerOptions, resolvedBaseUrl, jsConfig, supportedBrowsers, swcCacheDir, serverComponents, serverReferenceHashSalt, bundleLayer, isDynamicIo, cacheHandlers, useCacheEnabled }) {\n    var _jsConfig_compilerOptions, _jsConfig_compilerOptions1, _jsConfig_compilerOptions2, _jsConfig_compilerOptions3, _jsConfig_compilerOptions4, _jsConfig_experimental;\n    const isReactServerLayer = isWebpackServerOnlyLayer(bundleLayer);\n    const isAppRouterPagesLayer = isWebpackAppPagesLayer(bundleLayer);\n    const parserConfig = getParserOptions({\n        filename,\n        jsConfig\n    });\n    const paths = jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.paths;\n    const enableDecorators = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions1 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions1.experimentalDecorators);\n    const emitDecoratorMetadata = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions2 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions2.emitDecoratorMetadata);\n    const useDefineForClassFields = Boolean(jsConfig == null ? void 0 : (_jsConfig_compilerOptions3 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions3.useDefineForClassFields);\n    const plugins = (swcPlugins ?? []).filter(Array.isArray).map(([name, options])=>[\n            require.resolve(name),\n            options\n        ]);\n    return {\n        jsc: {\n            ...resolvedBaseUrl && paths ? {\n                baseUrl: resolvedBaseUrl.baseUrl,\n                paths\n            } : {},\n            externalHelpers: !process.versions.pnp && !jest,\n            parser: parserConfig,\n            experimental: {\n                keepImportAttributes: true,\n                emitAssertForImportAttributes: true,\n                plugins,\n                cacheRoot: swcCacheDir\n            },\n            transform: {\n                // Enables https://github.com/swc-project/swc/blob/0359deb4841be743d73db4536d4a22ac797d7f65/crates/swc_ecma_ext_transforms/src/jest.rs\n                ...jest ? {\n                    hidden: {\n                        jest: true\n                    }\n                } : {},\n                legacyDecorator: enableDecorators,\n                decoratorMetadata: emitDecoratorMetadata,\n                useDefineForClassFields: useDefineForClassFields,\n                react: {\n                    importSource: (jsConfig == null ? void 0 : (_jsConfig_compilerOptions4 = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions4.jsxImportSource) ?? ((compilerOptions == null ? void 0 : compilerOptions.emotion) && !isReactServerLayer ? '@emotion/react' : 'react'),\n                    runtime: 'automatic',\n                    pragmaFrag: 'React.Fragment',\n                    throwIfNamespace: true,\n                    development: !!development,\n                    useBuiltins: true,\n                    refresh: !!hasReactRefresh\n                },\n                optimizer: {\n                    simplify: false,\n                    globals: jest ? null : {\n                        typeofs: {\n                            window: globalWindow ? 'object' : 'undefined'\n                        },\n                        envs: {\n                            NODE_ENV: development ? '\"development\"' : '\"production\"'\n                        }\n                    }\n                },\n                regenerator: {\n                    importPath: regeneratorRuntimePath\n                }\n            }\n        },\n        sourceMaps: jest ? 'inline' : undefined,\n        removeConsole: compilerOptions == null ? void 0 : compilerOptions.removeConsole,\n        // disable \"reactRemoveProperties\" when \"jest\" is true\n        // otherwise the setting from next.config.js will be used\n        reactRemoveProperties: jest ? false : compilerOptions == null ? void 0 : compilerOptions.reactRemoveProperties,\n        // Map the k-v map to an array of pairs.\n        modularizeImports: modularizeImports ? Object.fromEntries(Object.entries(modularizeImports).map(([mod, config])=>[\n                mod,\n                {\n                    ...config,\n                    transform: typeof config.transform === 'string' ? config.transform : Object.entries(config.transform).map(([key, value])=>[\n                            key,\n                            value\n                        ])\n                }\n            ])) : undefined,\n        relay: compilerOptions == null ? void 0 : compilerOptions.relay,\n        // Always transform styled-jsx and error when `client-only` condition is triggered\n        styledJsx: (compilerOptions == null ? void 0 : compilerOptions.styledJsx) ?? {\n            useLightningcss: (jsConfig == null ? void 0 : (_jsConfig_experimental = jsConfig.experimental) == null ? void 0 : _jsConfig_experimental.useLightningcss) ?? false\n        },\n        // Disable css-in-js libs (without client-only integration) transform on server layer for server components\n        ...!isReactServerLayer && {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            emotion: getEmotionOptions(compilerOptions == null ? void 0 : compilerOptions.emotion, development),\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            styledComponents: getStyledComponentsOptions(compilerOptions == null ? void 0 : compilerOptions.styledComponents, development)\n        },\n        serverComponents: serverComponents && !jest ? {\n            isReactServerLayer,\n            dynamicIoEnabled: isDynamicIo,\n            useCacheEnabled\n        } : undefined,\n        serverActions: isAppRouterPagesLayer && !jest ? {\n            isReactServerLayer,\n            isDevelopment: development,\n            useCacheEnabled,\n            hashSalt: serverReferenceHashSalt,\n            cacheKinds: [\n                'default',\n                'remote'\n            ].concat(cacheHandlers ? Object.keys(cacheHandlers) : [])\n        } : undefined,\n        // For app router we prefer to bundle ESM,\n        // On server side of pages router we prefer CJS.\n        preferEsm: esm,\n        lintCodemodComments: true,\n        debugFunctionName: development,\n        ...supportedBrowsers && supportedBrowsers.length > 0 ? {\n            cssEnv: {\n                targets: supportedBrowsers\n            }\n        } : {}\n    };\n}\nfunction getStyledComponentsOptions(styledComponentsConfig, development) {\n    if (!styledComponentsConfig) {\n        return null;\n    } else if (typeof styledComponentsConfig === 'object') {\n        return {\n            ...styledComponentsConfig,\n            displayName: styledComponentsConfig.displayName ?? Boolean(development)\n        };\n    } else {\n        return {\n            displayName: Boolean(development)\n        };\n    }\n}\nfunction getEmotionOptions(emotionConfig, development) {\n    if (!emotionConfig) {\n        return null;\n    }\n    let autoLabel = !!development;\n    switch(typeof emotionConfig === 'object' && emotionConfig.autoLabel){\n        case 'never':\n            autoLabel = false;\n            break;\n        case 'always':\n            autoLabel = true;\n            break;\n        case 'dev-only':\n        default:\n            break;\n    }\n    return {\n        enabled: true,\n        autoLabel,\n        sourcemap: development,\n        ...typeof emotionConfig === 'object' && {\n            importMap: emotionConfig.importMap,\n            labelFormat: emotionConfig.labelFormat,\n            sourcemap: development && emotionConfig.sourceMap\n        }\n    };\n}\nexport function getJestSWCOptions({ isServer, filename, esm, modularizeImports, swcPlugins, compilerOptions, jsConfig, resolvedBaseUrl, pagesDir, serverReferenceHashSalt }) {\n    let baseOptions = getBaseSWCOptions({\n        filename,\n        jest: true,\n        development: false,\n        hasReactRefresh: false,\n        globalWindow: !isServer,\n        modularizeImports,\n        swcPlugins,\n        compilerOptions,\n        jsConfig,\n        resolvedBaseUrl,\n        supportedBrowsers: undefined,\n        esm,\n        // Don't apply server layer transformations for Jest\n        // Disable server / client graph assertions for Jest\n        bundleLayer: undefined,\n        serverComponents: false,\n        serverReferenceHashSalt\n    });\n    const useCjsModules = shouldOutputCommonJs(filename);\n    return {\n        ...baseOptions,\n        env: {\n            targets: {\n                // Targets the current version of Node.js\n                node: process.versions.node\n            }\n        },\n        module: {\n            type: esm && !useCjsModules ? 'es6' : 'commonjs'\n        },\n        disableNextSsg: true,\n        disablePageConfig: true,\n        pagesDir\n    };\n}\nexport function getLoaderSWCOptions({ // This is not passed yet as \"paths\" resolving is handled by webpack currently.\n// resolvedBaseUrl,\nfilename, development, isServer, pagesDir, appDir, isPageFile, isDynamicIo, hasReactRefresh, modularizeImports, optimizeServerReact, optimizePackageImports, swcPlugins, compilerOptions, jsConfig, supportedBrowsers, swcCacheDir, relativeFilePathFromRoot, serverComponents, serverReferenceHashSalt, bundleLayer, esm, cacheHandlers, useCacheEnabled }) {\n    let baseOptions = getBaseSWCOptions({\n        filename,\n        development,\n        globalWindow: !isServer,\n        hasReactRefresh,\n        modularizeImports,\n        swcPlugins,\n        compilerOptions,\n        jsConfig,\n        // resolvedBaseUrl,\n        supportedBrowsers,\n        swcCacheDir,\n        bundleLayer,\n        serverComponents,\n        serverReferenceHashSalt,\n        esm: !!esm,\n        isDynamicIo,\n        cacheHandlers,\n        useCacheEnabled\n    });\n    baseOptions.fontLoaders = {\n        fontLoaders: [\n            'next/font/local',\n            'next/font/google'\n        ],\n        relativeFilePathFromRoot\n    };\n    baseOptions.cjsRequireOptimizer = {\n        packages: {\n            'next/server': {\n                transforms: {\n                    NextRequest: 'next/dist/server/web/spec-extension/request',\n                    NextResponse: 'next/dist/server/web/spec-extension/response',\n                    ImageResponse: 'next/dist/server/web/spec-extension/image-response',\n                    userAgentFromString: 'next/dist/server/web/spec-extension/user-agent',\n                    userAgent: 'next/dist/server/web/spec-extension/user-agent'\n                }\n            }\n        }\n    };\n    if (optimizeServerReact && isServer && !development) {\n        baseOptions.optimizeServerReact = {\n            optimize_use_state: false\n        };\n    }\n    // Modularize import optimization for barrel files\n    if (optimizePackageImports) {\n        baseOptions.autoModularizeImports = {\n            packages: optimizePackageImports\n        };\n    }\n    const isNodeModules = nodeModulesPath.test(filename);\n    const isAppBrowserLayer = bundleLayer === WEBPACK_LAYERS.appPagesBrowser;\n    const moduleResolutionConfig = shouldOutputCommonJs(filename) ? {\n        module: {\n            type: 'commonjs'\n        }\n    } : {};\n    let options;\n    if (isServer) {\n        options = {\n            ...baseOptions,\n            ...moduleResolutionConfig,\n            // Disables getStaticProps/getServerSideProps tree shaking on the server compilation for pages\n            disableNextSsg: true,\n            disablePageConfig: true,\n            isDevelopment: development,\n            isServerCompiler: isServer,\n            pagesDir,\n            appDir,\n            preferEsm: !!esm,\n            isPageFile,\n            env: {\n                targets: {\n                    // Targets the current version of Node.js\n                    node: process.versions.node\n                }\n            }\n        };\n    } else {\n        options = {\n            ...baseOptions,\n            ...moduleResolutionConfig,\n            disableNextSsg: !isPageFile,\n            isDevelopment: development,\n            isServerCompiler: isServer,\n            pagesDir,\n            appDir,\n            isPageFile,\n            ...supportedBrowsers && supportedBrowsers.length > 0 ? {\n                env: {\n                    targets: supportedBrowsers\n                }\n            } : {}\n        };\n        if (!options.env) {\n            // Matches default @babel/preset-env behavior\n            options.jsc.target = 'es5';\n        }\n    }\n    // For node_modules in app browser layer, we don't need to do any server side transformation.\n    // Only keep server actions transform to discover server actions from client components.\n    if (isAppBrowserLayer && isNodeModules) {\n        var _options_jsc_transform_optimizer_globals;\n        options.disableNextSsg = true;\n        options.disablePageConfig = true;\n        options.isPageFile = false;\n        options.optimizeServerReact = undefined;\n        options.cjsRequireOptimizer = undefined;\n        // Disable optimizer for node_modules in app browser layer, to avoid unnecessary replacement.\n        // e.g. typeof window could result differently in js worker or browser.\n        if (((_options_jsc_transform_optimizer_globals = options.jsc.transform.optimizer.globals) == null ? void 0 : _options_jsc_transform_optimizer_globals.typeofs) && !filename.includes(nextDirname)) {\n            delete options.jsc.transform.optimizer.globals.typeofs.window;\n        }\n    }\n    return options;\n}\n\n//# sourceMappingURL=options.js.map"
        }
    ]
}