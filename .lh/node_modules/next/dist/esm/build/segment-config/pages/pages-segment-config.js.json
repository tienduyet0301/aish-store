{
    "sourceFile": "node_modules/next/dist/esm/build/segment-config/pages/pages-segment-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892749454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { z } from 'next/dist/compiled/zod';\nimport { formatZodError } from '../../../shared/lib/zod';\n/**\n * The schema for the page segment config.\n */ const PagesSegmentConfigSchema = z.object({\n    /**\n   * The runtime to use for the page.\n   */ runtime: z.enum([\n        'edge',\n        'experimental-edge',\n        'nodejs'\n    ]).optional(),\n    /**\n   * The maximum duration for the page render.\n   */ maxDuration: z.number().optional(),\n    /**\n   * The exported config object for the page.\n   */ config: z.object({\n        /**\n       * Enables AMP for the page.\n       */ amp: z.union([\n            z.boolean(),\n            z.literal('hybrid')\n        ]).optional(),\n        /**\n       * The runtime to use for the page.\n       */ runtime: z.enum([\n            'edge',\n            'experimental-edge',\n            'nodejs'\n        ]).optional(),\n        /**\n       * The maximum duration for the page render.\n       */ maxDuration: z.number().optional()\n    }).optional()\n});\n/**\n * Parse the page segment config.\n * @param data - The data to parse.\n * @param route - The route of the page.\n * @returns The parsed page segment config.\n */ export function parsePagesSegmentConfig(data, route) {\n    const parsed = PagesSegmentConfigSchema.safeParse(data, {});\n    if (!parsed.success) {\n        throw formatZodError(`Invalid segment configuration options detected for \"${route}\". Read more at https://nextjs.org/docs/messages/invalid-page-config`, parsed.error);\n    }\n    return parsed.data;\n}\n/**\n * The keys of the configuration for a page.\n *\n * @internal - required to exclude zod types from the build\n */ export const PagesSegmentConfigSchemaKeys = PagesSegmentConfigSchema.keyof().options;\n\n//# sourceMappingURL=pages-segment-config.js.map"
        }
    ]
}