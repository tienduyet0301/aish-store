{
    "sourceFile": "node_modules/next/dist/esm/build/segment-config/app/app-segment-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892749099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { z } from 'next/dist/compiled/zod';\nimport { formatZodError } from '../../../shared/lib/zod';\n/**\n * The schema for configuration for a page.\n */ const AppSegmentConfigSchema = z.object({\n    /**\n   * The number of seconds to revalidate the page or false to disable revalidation.\n   */ revalidate: z.union([\n        z.number().int().nonnegative(),\n        z.literal(false)\n    ]).optional(),\n    /**\n   * Whether the page supports dynamic parameters.\n   */ dynamicParams: z.boolean().optional(),\n    /**\n   * The dynamic behavior of the page.\n   */ dynamic: z.enum([\n        'auto',\n        'error',\n        'force-static',\n        'force-dynamic'\n    ]).optional(),\n    /**\n   * The caching behavior of the page.\n   */ fetchCache: z.enum([\n        'auto',\n        'default-cache',\n        'only-cache',\n        'force-cache',\n        'force-no-store',\n        'default-no-store',\n        'only-no-store'\n    ]).optional(),\n    /**\n   * The preferred region for the page.\n   */ preferredRegion: z.union([\n        z.string(),\n        z.array(z.string())\n    ]).optional(),\n    /**\n   * Whether the page supports partial prerendering. When true, the page will be\n   * served using partial prerendering. This setting will only take affect if\n   * it's enabled via the `experimental.ppr = \"incremental\"` option.\n   */ experimental_ppr: z.boolean().optional(),\n    /**\n   * The runtime to use for the page.\n   */ runtime: z.enum([\n        'edge',\n        'nodejs'\n    ]).optional(),\n    /**\n   * The maximum duration for the page in seconds.\n   */ maxDuration: z.number().int().nonnegative().optional()\n});\n/**\n * Parse the app segment config.\n * @param data - The data to parse.\n * @param route - The route of the app.\n * @returns The parsed app segment config.\n */ export function parseAppSegmentConfig(data, route) {\n    const parsed = AppSegmentConfigSchema.safeParse(data, {\n        errorMap: (issue, ctx)=>{\n            if (issue.path.length === 1 && issue.path[0] === 'revalidate') {\n                return {\n                    message: `Invalid revalidate value ${JSON.stringify(ctx.data)} on \"${route}\", must be a non-negative number or false`\n                };\n            }\n            return {\n                message: ctx.defaultError\n            };\n        }\n    });\n    if (!parsed.success) {\n        throw formatZodError(`Invalid segment configuration options detected for \"${route}\". Read more at https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config`, parsed.error);\n    }\n    return parsed.data;\n}\n/**\n * The keys of the configuration for a page.\n *\n * @internal - required to exclude zod types from the build\n */ export const AppSegmentConfigSchemaKeys = AppSegmentConfigSchema.keyof().options;\n\n//# sourceMappingURL=app-segment-config.js.map"
        }
    ]
}