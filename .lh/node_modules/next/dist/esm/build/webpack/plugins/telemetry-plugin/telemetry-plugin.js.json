{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/telemetry-plugin/telemetry-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892760533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { createUseCacheTracker } from './use-cache-tracker-utils';\n// Map of a feature module to the file it belongs in the next package.\nconst FEATURE_MODULE_MAP = new Map([\n    [\n        'next/image',\n        '/next/image.js'\n    ],\n    [\n        'next/future/image',\n        '/next/future/image.js'\n    ],\n    [\n        'next/legacy/image',\n        '/next/legacy/image.js'\n    ],\n    [\n        'next/script',\n        '/next/script.js'\n    ],\n    [\n        'next/dynamic',\n        '/next/dynamic.js'\n    ]\n]);\nconst FEATURE_MODULE_REGEXP_MAP = new Map([\n    [\n        '@next/font/google',\n        /\\/@next\\/font\\/google\\/target.css?.+$/\n    ],\n    [\n        '@next/font/local',\n        /\\/@next\\/font\\/local\\/target.css?.+$/\n    ],\n    [\n        'next/font/google',\n        /\\/next\\/font\\/google\\/target.css?.+$/\n    ],\n    [\n        'next/font/local',\n        /\\/next\\/font\\/local\\/target.css?.+$/\n    ]\n]);\n// List of build features used in webpack configuration\nconst BUILD_FEATURES = [\n    'swcLoader',\n    'swcRelay',\n    'swcStyledComponents',\n    'swcReactRemoveProperties',\n    'swcExperimentalDecorators',\n    'swcRemoveConsole',\n    'swcImportSource',\n    'swcEmotion',\n    'swc/target/x86_64-apple-darwin',\n    'swc/target/x86_64-unknown-linux-gnu',\n    'swc/target/x86_64-pc-windows-msvc',\n    'swc/target/i686-pc-windows-msvc',\n    'swc/target/aarch64-unknown-linux-gnu',\n    'swc/target/armv7-unknown-linux-gnueabihf',\n    'swc/target/aarch64-apple-darwin',\n    'swc/target/aarch64-linux-android',\n    'swc/target/arm-linux-androideabi',\n    'swc/target/x86_64-unknown-freebsd',\n    'swc/target/x86_64-unknown-linux-musl',\n    'swc/target/aarch64-unknown-linux-musl',\n    'swc/target/aarch64-pc-windows-msvc',\n    'turbotrace',\n    'transpilePackages',\n    'skipMiddlewareUrlNormalize',\n    'skipTrailingSlashRedirect',\n    'modularizeImports',\n    'esmExternals',\n    'webpackPlugins'\n];\nconst eliminatedPackages = new Set();\nconst useCacheTracker = createUseCacheTracker();\n/**\n * Determine if there is a feature of interest in the specified 'module'.\n */ function findFeatureInModule(module) {\n    if (module.type !== 'javascript/auto') {\n        return;\n    }\n    for (const [feature, path] of FEATURE_MODULE_MAP){\n        var _module_resource;\n        // imports like \"http\" will be undefined resource in rspack\n        if ((_module_resource = module.resource) == null ? void 0 : _module_resource.endsWith(path)) {\n            return feature;\n        }\n    }\n    const normalizedIdentifier = module.identifier().replace(/\\\\/g, '/');\n    for (const [feature, regexp] of FEATURE_MODULE_REGEXP_MAP){\n        if (regexp.test(normalizedIdentifier)) {\n            return feature;\n        }\n    }\n}\n/**\n * Find unique origin modules in the specified 'connections', which possibly\n * contains more than one connection for a module due to different types of\n * dependency.\n */ function findUniqueOriginModulesInConnections(connections, originModule) {\n    const originModules = new Set();\n    for (const connection of connections){\n        if (!originModules.has(connection.originModule) && connection.originModule !== originModule) {\n            originModules.add(connection.originModule);\n        }\n    }\n    return originModules;\n}\n/**\n * Plugin that queries the ModuleGraph to look for modules that correspond to\n * certain features (e.g. next/image and next/script) and record how many times\n * they are imported.\n */ export class TelemetryPlugin {\n    // Build feature usage is on/off and is known before the build starts\n    constructor(buildFeaturesMap){\n        this.usageTracker = new Map();\n        for (const featureName of BUILD_FEATURES){\n            this.usageTracker.set(featureName, {\n                featureName,\n                invocationCount: buildFeaturesMap.get(featureName) ? 1 : 0\n            });\n        }\n        for (const featureName of FEATURE_MODULE_MAP.keys()){\n            this.usageTracker.set(featureName, {\n                featureName,\n                invocationCount: 0\n            });\n        }\n        for (const featureName of FEATURE_MODULE_REGEXP_MAP.keys()){\n            this.usageTracker.set(featureName, {\n                featureName,\n                invocationCount: 0\n            });\n        }\n    }\n    addUsage(featureName, invocationCount) {\n        this.usageTracker.set(featureName, {\n            featureName,\n            invocationCount\n        });\n    }\n    apply(compiler) {\n        compiler.hooks.make.tapAsync(TelemetryPlugin.name, async (compilation, callback)=>{\n            compilation.hooks.finishModules.tapAsync(TelemetryPlugin.name, async (modules, modulesFinish)=>{\n                for (const module of modules){\n                    const feature = findFeatureInModule(module);\n                    if (!feature) {\n                        continue;\n                    }\n                    const connections = compilation.moduleGraph.getIncomingConnections(module);\n                    const originModules = findUniqueOriginModulesInConnections(connections, module);\n                    this.usageTracker.get(feature).invocationCount = originModules.size;\n                }\n                modulesFinish();\n            });\n            callback();\n        });\n        if (compiler.options.mode === 'production' && !compiler.watchMode) {\n            compiler.hooks.thisCompilation.tap(TelemetryPlugin.name, (compilation)=>{\n                const moduleHooks = compiler.webpack.NormalModule.getCompilationHooks(compilation);\n                moduleHooks.loader.tap(TelemetryPlugin.name, (loaderContext)=>{\n                    ;\n                    loaderContext.eliminatedPackages = eliminatedPackages;\n                    loaderContext.useCacheTracker = useCacheTracker;\n                });\n            });\n        }\n    }\n    usages() {\n        return [\n            ...this.usageTracker.values()\n        ];\n    }\n    packagesUsedInServerSideProps() {\n        return Array.from(eliminatedPackages);\n    }\n    getUseCacheTracker() {\n        return Object.fromEntries(useCacheTracker);\n    }\n}\n\n//# sourceMappingURL=telemetry-plugin.js.map"
        }
    ]
}