{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/wellknown-errors-plugin/parseScss.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892761407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { bold, cyan, red, yellow } from '../../../../lib/picocolors';\nimport { SimpleWebpackError } from './simpleWebpackError';\nconst regexScssError = /SassError: (.+)\\n\\s+on line (\\d+) [\\s\\S]*?>> (.+)\\n\\s*(-+)\\^$/m;\nexport function getScssError(fileName, fileContent, err) {\n    if (err.name !== 'SassError') {\n        return false;\n    }\n    const res = regexScssError.exec(err.message);\n    if (res) {\n        const [, reason, _lineNumer, backupFrame, columnString] = res;\n        const lineNumber = Math.max(1, parseInt(_lineNumer, 10));\n        const column = (columnString == null ? void 0 : columnString.length) ?? 1;\n        let frame;\n        if (fileContent) {\n            try {\n                const { codeFrameColumns } = require('next/dist/compiled/babel/code-frame');\n                frame = codeFrameColumns(fileContent, {\n                    start: {\n                        line: lineNumber,\n                        column\n                    }\n                }, {\n                    forceColor: true\n                });\n            } catch  {}\n        }\n        return new SimpleWebpackError(`${cyan(fileName)}:${yellow(lineNumber.toString())}:${yellow(column.toString())}`, red(bold('Syntax error')).concat(`: ${reason}\\n\\n${frame ?? backupFrame}`));\n    }\n    return false;\n}\n\n//# sourceMappingURL=parseScss.js.map"
        }
    ]
}