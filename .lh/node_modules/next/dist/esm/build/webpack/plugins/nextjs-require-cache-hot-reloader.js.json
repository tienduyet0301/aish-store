{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/nextjs-require-cache-hot-reloader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892759932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { deleteCache } from '../../../server/dev/require-cache';\nimport { clearModuleContext } from '../../../server/web/sandbox';\nimport path from 'path';\nconst RUNTIME_NAMES = [\n    'webpack-runtime',\n    'webpack-api-runtime'\n];\nconst PLUGIN_NAME = 'NextJsRequireCacheHotReloader';\n// This plugin flushes require.cache after emitting the files. Providing 'hot reloading' of server files.\nexport class NextJsRequireCacheHotReloader {\n    constructor(opts){\n        this.prevAssets = null;\n        this.serverComponents = opts.serverComponents;\n    }\n    apply(compiler) {\n        compiler.hooks.assetEmitted.tap(PLUGIN_NAME, (_file, { targetPath })=>{\n            // Clear module context in this process\n            clearModuleContext(targetPath);\n            deleteCache(targetPath);\n        });\n        compiler.hooks.afterEmit.tapPromise(PLUGIN_NAME, async (compilation)=>{\n            for (const name of RUNTIME_NAMES){\n                const runtimeChunkPath = path.join(compilation.outputOptions.path, `${name}.js`);\n                deleteCache(runtimeChunkPath);\n            }\n            // we need to make sure to clear all server entries from cache\n            // since they can have a stale webpack-runtime cache\n            // which needs to always be in-sync\n            const entries = [\n                ...compilation.entrypoints.keys()\n            ].filter((entry)=>{\n                const isAppPath = entry.toString().startsWith('app/');\n                return entry.toString().startsWith('pages/') || isAppPath;\n            });\n            for (const page of entries){\n                const outputPath = path.join(compilation.outputOptions.path, page + '.js');\n                deleteCache(outputPath);\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=nextjs-require-cache-hot-reloader.js.map"
        }
    ]
}