{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/wellknown-errors-plugin/webpackModuleError.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892761512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { readFileSync } from 'fs';\nimport * as path from 'path';\nimport { getBabelError } from './parseBabel';\nimport { getCssError } from './parseCss';\nimport { getScssError } from './parseScss';\nimport { getNotFoundError, getImageError } from './parseNotFoundError';\nimport isError from '../../../../lib/is-error';\nimport { getNextFontError } from './parseNextFontError';\nimport { getNextAppLoaderError } from './parseNextAppLoaderError';\nimport { getNextInvalidImportError } from './parseNextInvalidImportError';\nfunction getFileData(compilation, m) {\n    var _compilation_compiler;\n    let resolved;\n    let ctx = ((_compilation_compiler = compilation.compiler) == null ? void 0 : _compilation_compiler.context) ?? null;\n    if (ctx !== null && typeof m.resource === 'string') {\n        const res = path.relative(ctx, m.resource).replace(/\\\\/g, path.posix.sep);\n        resolved = res.startsWith('.') ? res : `.${path.posix.sep}${res}`;\n    } else {\n        const requestShortener = compilation.requestShortener;\n        if (typeof (m == null ? void 0 : m.readableIdentifier) === 'function') {\n            resolved = m.readableIdentifier(requestShortener);\n        } else {\n            resolved = m.request ?? m.userRequest;\n        }\n    }\n    if (resolved) {\n        let content = null;\n        try {\n            content = readFileSync(ctx ? path.resolve(ctx, resolved) : resolved, 'utf8');\n        } catch  {}\n        return [\n            resolved,\n            content\n        ];\n    }\n    return [\n        '<unknown>',\n        null\n    ];\n}\nexport async function getModuleBuildError(compiler, compilation, input) {\n    if (!(typeof input === 'object' && ((input == null ? void 0 : input.name) === 'ModuleBuildError' || (input == null ? void 0 : input.name) === 'ModuleNotFoundError') && Boolean(input.module) && isError(input.error))) {\n        return false;\n    }\n    const err = input.error;\n    const [sourceFilename, sourceContent] = getFileData(compilation, input.module);\n    const notFoundError = await getNotFoundError(compilation, input, sourceFilename, input.module);\n    if (notFoundError !== false) {\n        return notFoundError;\n    }\n    const imageError = await getImageError(compilation, input, err);\n    if (imageError !== false) {\n        return imageError;\n    }\n    const babel = getBabelError(sourceFilename, err);\n    if (babel !== false) {\n        return babel;\n    }\n    const css = getCssError(sourceFilename, err);\n    if (css !== false) {\n        return css;\n    }\n    const scss = getScssError(sourceFilename, sourceContent, err);\n    if (scss !== false) {\n        return scss;\n    }\n    const nextFont = getNextFontError(err, input.module);\n    if (nextFont !== false) {\n        return nextFont;\n    }\n    const nextAppLoader = getNextAppLoaderError(err, input.module, compiler);\n    if (nextAppLoader !== false) {\n        return nextAppLoader;\n    }\n    const invalidImportError = getNextInvalidImportError(err, input.module, compilation, compiler);\n    if (invalidImportError !== false) {\n        return invalidImportError;\n    }\n    return false;\n}\n\n//# sourceMappingURL=webpackModuleError.js.map"
        }
    ]
}