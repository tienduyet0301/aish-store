{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/css-minimizer-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892758506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import cssnanoSimple from 'next/dist/compiled/cssnano-simple';\nimport postcssScss from 'next/dist/compiled/postcss-scss';\nimport postcss from 'postcss';\nimport { webpack, sources } from 'next/dist/compiled/webpack/webpack';\nimport { getCompilationSpan } from '../utils';\n// https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\nconst CSS_REGEX = /\\.css(\\?.*)?$/i;\nexport class CssMinimizerPlugin {\n    constructor(options){\n        this.__next_css_remove = true;\n        this.options = options;\n    }\n    optimizeAsset(file, asset) {\n        const postcssOptions = {\n            ...this.options.postcssOptions,\n            to: file,\n            from: file,\n            // We don't actually add this parser to support Sass. It can also be used\n            // for inline comment support. See the README:\n            // https://github.com/postcss/postcss-scss/blob/master/README.md#2-inline-comments-for-postcss\n            parser: postcssScss\n        };\n        let input;\n        if (postcssOptions.map && asset.sourceAndMap) {\n            const { source, map } = asset.sourceAndMap();\n            input = source;\n            postcssOptions.map.prev = map ? map : false;\n        } else {\n            input = asset.source();\n        }\n        return postcss([\n            cssnanoSimple({\n                colormin: false\n            }, postcss)\n        ]).process(input, postcssOptions).then((res)=>{\n            if (res.map) {\n                return new sources.SourceMapSource(res.css, file, res.map.toJSON());\n            } else {\n                return new sources.RawSource(res.css);\n            }\n        });\n    }\n    apply(compiler) {\n        compiler.hooks.compilation.tap('CssMinimizerPlugin', (compilation)=>{\n            const cache = compilation.getCache('CssMinimizerPlugin');\n            compilation.hooks.processAssets.tapPromise({\n                name: 'CssMinimizerPlugin',\n                stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n            }, async (assets)=>{\n                const compilationSpan = getCompilationSpan(compilation) || getCompilationSpan(compiler);\n                const cssMinimizerSpan = compilationSpan.traceChild('css-minimizer-plugin');\n                return cssMinimizerSpan.traceAsyncFn(async ()=>{\n                    const files = Object.keys(assets);\n                    await Promise.all(files.filter((file)=>CSS_REGEX.test(file)).map(async (file)=>{\n                        const assetSpan = cssMinimizerSpan.traceChild('minify-css');\n                        assetSpan.setAttribute('file', file);\n                        return assetSpan.traceAsyncFn(async ()=>{\n                            const assetSource = compilation.getAsset(file).source;\n                            const etag = cache.getLazyHashedEtag(assetSource);\n                            const cachedResult = await cache.getPromise(file, etag);\n                            assetSpan.setAttribute('cache', cachedResult ? 'HIT' : 'MISS');\n                            if (cachedResult) {\n                                compilation.updateAsset(file, cachedResult);\n                                return;\n                            }\n                            const result = await this.optimizeAsset(file, assetSource);\n                            await cache.storePromise(file, etag, result);\n                            compilation.updateAsset(file, result);\n                        });\n                    }));\n                });\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=css-minimizer-plugin.js.map"
        }
    ]
}