{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/next-drop-client-page-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892759301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { STRING_LITERAL_DROP_BUNDLE } from '../../../shared/lib/constants';\nexport const ampFirstEntryNamesMap = new WeakMap();\nconst PLUGIN_NAME = 'DropAmpFirstPagesPlugin';\n// Prevents outputting client pages when they are not needed\nexport class DropClientPage {\n    apply(compiler) {\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation, { normalModuleFactory })=>{\n            // Recursively look up the issuer till it ends up at the root\n            function findEntryModule(mod) {\n                const queue = new Set([\n                    mod\n                ]);\n                for (const module of queue){\n                    const incomingConnections = compilation.moduleGraph.getIncomingConnections(module);\n                    for (const incomingConnection of incomingConnections){\n                        if (!incomingConnection.originModule) return module;\n                        queue.add(incomingConnection.originModule);\n                    }\n                }\n                return null;\n            }\n            function handler(parser) {\n                function markAsAmpFirst() {\n                    const entryModule = findEntryModule(parser.state.module);\n                    if (!entryModule) {\n                        return;\n                    }\n                    // @ts-ignore buildInfo exists on Module\n                    entryModule.buildInfo.NEXT_ampFirst = true;\n                }\n                parser.hooks.preDeclarator.tap(PLUGIN_NAME, (declarator)=>{\n                    var _declarator_id;\n                    if ((declarator == null ? void 0 : (_declarator_id = declarator.id) == null ? void 0 : _declarator_id.name) === STRING_LITERAL_DROP_BUNDLE) {\n                        markAsAmpFirst();\n                    }\n                });\n            }\n            normalModuleFactory.hooks.parser.for('javascript/auto').tap(PLUGIN_NAME, handler);\n            normalModuleFactory.hooks.parser.for('javascript/esm').tap(PLUGIN_NAME, handler);\n            normalModuleFactory.hooks.parser.for('javascript/dynamic').tap(PLUGIN_NAME, handler);\n            if (!ampFirstEntryNamesMap.has(compilation)) {\n                ampFirstEntryNamesMap.set(compilation, []);\n            }\n            const ampFirstEntryNamesItem = ampFirstEntryNamesMap.get(compilation);\n            compilation.hooks.seal.tap(PLUGIN_NAME, ()=>{\n                for (const [name, entryData] of compilation.entries){\n                    for (const dependency of entryData.dependencies){\n                        var _module_buildInfo;\n                        const module = compilation.moduleGraph.getModule(dependency);\n                        if (module == null ? void 0 : (_module_buildInfo = module.buildInfo) == null ? void 0 : _module_buildInfo.NEXT_ampFirst) {\n                            ampFirstEntryNamesItem.push(name);\n                            compilation.entries.delete(name);\n                        }\n                    }\n                }\n            });\n        });\n    }\n    constructor(){\n        this.ampPages = new Set();\n    }\n}\n\n//# sourceMappingURL=next-drop-client-page-plugin.js.map"
        }
    ]
}