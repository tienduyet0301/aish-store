{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/copy-file-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892758362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { promises as fs } from 'fs';\nimport loaderUtils from 'next/dist/compiled/loader-utils3';\nimport { sources, webpack } from 'next/dist/compiled/webpack/webpack';\nconst PLUGIN_NAME = 'CopyFilePlugin';\nexport class CopyFilePlugin {\n    constructor({ filePath, cacheKey, name, info }){\n        this.filePath = filePath;\n        this.cacheKey = cacheKey;\n        this.name = name;\n        this.info = info;\n    }\n    apply(compiler) {\n        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation)=>{\n            const cache = compilation.getCache('CopyFilePlugin');\n            const hook = compilation.hooks.processAssets;\n            hook.tapPromise({\n                name: PLUGIN_NAME,\n                stage: webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n            }, async ()=>{\n                if (cache) {\n                    const cachedResult = await cache.getPromise(this.filePath, this.cacheKey);\n                    if (cachedResult) {\n                        const { file, source } = cachedResult;\n                        compilation.emitAsset(file, source, {\n                            ...this.info\n                        });\n                        return;\n                    }\n                }\n                const content = await fs.readFile(this.filePath, 'utf8');\n                const file = loaderUtils.interpolateName({\n                    resourcePath: this.filePath\n                }, this.name, {\n                    content,\n                    context: compiler.context\n                });\n                const source = new sources.RawSource(content);\n                if (cache) {\n                    await cache.storePromise(this.filePath, this.cacheKey, {\n                        file,\n                        source\n                    });\n                }\n                compilation.emitAsset(file, source, {\n                    ...this.info\n                });\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=copy-file-plugin.js.map"
        }
    ]
}