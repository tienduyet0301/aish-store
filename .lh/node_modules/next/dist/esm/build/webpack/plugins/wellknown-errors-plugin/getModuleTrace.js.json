{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/plugins/wellknown-errors-plugin/getModuleTrace.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892760738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import loaderUtils from 'next/dist/compiled/loader-utils3';\nimport { relative } from 'path';\nfunction formatModule(compiler, module) {\n    const relativePath = relative(compiler.context, module.resource).replace(/\\?.+$/, '');\n    return loaderUtils.isUrlRequest(relativePath) ? loaderUtils.urlToRequest(relativePath) : relativePath;\n}\nexport function formatModuleTrace(compiler, moduleTrace) {\n    let importTrace = [];\n    let firstExternalModule;\n    for(let i = moduleTrace.length - 1; i >= 0; i--){\n        const mod = moduleTrace[i];\n        if (!mod.resource) continue;\n        if (!mod.resource.includes('node_modules/')) {\n            importTrace.unshift(formatModule(compiler, mod));\n        } else {\n            firstExternalModule = mod;\n            break;\n        }\n    }\n    let invalidImportMessage = '';\n    if (firstExternalModule) {\n        var _firstExternalModule_resourceResolveData_descriptionFileData, _firstExternalModule_resourceResolveData;\n        const firstExternalPackageName = (_firstExternalModule_resourceResolveData = firstExternalModule.resourceResolveData) == null ? void 0 : (_firstExternalModule_resourceResolveData_descriptionFileData = _firstExternalModule_resourceResolveData.descriptionFileData) == null ? void 0 : _firstExternalModule_resourceResolveData_descriptionFileData.name;\n        if (firstExternalPackageName === 'styled-jsx') {\n            invalidImportMessage += `\\n\\nThe error was caused by using 'styled-jsx' in '${importTrace[0]}'. It only works in a Client Component but none of its parents are marked with \"use client\", so they're Server Components by default.`;\n        } else {\n            let formattedExternalFile = firstExternalModule.resource.split('node_modules');\n            formattedExternalFile = formattedExternalFile[formattedExternalFile.length - 1];\n            invalidImportMessage += `\\n\\nThe error was caused by importing '${formattedExternalFile.slice(1)}' in '${importTrace[0]}'.`;\n        }\n    }\n    return {\n        lastInternalFileName: importTrace[0],\n        invalidImportMessage,\n        formattedModuleTrace: importTrace.map((mod)=>'  ' + mod).join('\\n')\n    };\n}\nexport function getModuleTrace(module, compilation, compiler) {\n    // Get the module trace:\n    // https://cs.github.com/webpack/webpack/blob/9fcaa243573005d6fdece9a3f8d89a0e8b399613/lib/stats/DefaultStatsFactoryPlugin.js#L414\n    const visitedModules = new Set();\n    const moduleTrace = [];\n    let current = module;\n    let isPagesDir = false;\n    while(current){\n        if (visitedModules.has(current)) break;\n        if (/[\\\\/]pages/.test(current.resource.replace(compiler.context, ''))) {\n            isPagesDir = true;\n        }\n        visitedModules.add(current);\n        moduleTrace.push(current);\n        const origin = compilation.moduleGraph.getIssuer(current);\n        if (!origin) break;\n        current = origin;\n    }\n    return {\n        moduleTrace,\n        isPagesDir\n    };\n}\n\n//# sourceMappingURL=getModuleTrace.js.map"
        }
    ]
}