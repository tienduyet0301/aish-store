{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-font-loader/postcss-next-font.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892756257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import postcss from 'postcss';\n/**\n * The next/font postcss plugin recieves the @font-face declarations returned from the next/font loaders.\n *\n * It hashes the font-family name to make it unguessable, it shouldn't be globally accessible.\n * If it were global, we wouldn't be able to tell which pages are using which fonts when generating preload tags.\n *\n * If the font loader returned fallback metrics, generate a fallback @font-face.\n *\n * If the font loader returned a variable name, add a CSS class that declares a variable containing the font and fallback fonts.\n *\n * Lastly, it adds the font-family to the exports object.\n * This enables you to access the actual font-family name, not just through the CSS class.\n * e.g:\n * const inter = Inter({ subsets: ['latin'] })\n * inter.style.fontFamily // => '__Inter_123456'\n */ const postcssNextFontPlugin = ({ exports, fallbackFonts = [], adjustFontFallback, variable, weight, style })=>{\n    return {\n        postcssPlugin: 'postcss-next-font',\n        Once (root) {\n            let fontFamily;\n            const normalizeFamily = (family)=>{\n                return family.replace(/['\"]/g, '');\n            };\n            const formatFamily = (family)=>{\n                return `'${family}'`;\n            };\n            // Hash font-family names\n            for (const node of root.nodes){\n                if (node.type === 'atrule' && node.name === 'font-face') {\n                    const familyNode = node.nodes.find((decl)=>decl.prop === 'font-family');\n                    if (!familyNode) {\n                        continue;\n                    }\n                    if (!fontFamily) {\n                        fontFamily = normalizeFamily(familyNode.value);\n                    }\n                    familyNode.value = formatFamily(fontFamily);\n                }\n            }\n            if (!fontFamily) {\n                throw Object.defineProperty(new Error(\"Font loaders must return one or more @font-face's\"), \"__NEXT_ERROR_CODE\", {\n                    value: \"E428\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            // Add fallback @font-face with the provided override values\n            let adjustFontFallbackFamily;\n            if (adjustFontFallback) {\n                adjustFontFallbackFamily = formatFamily(`${fontFamily} Fallback`);\n                const fallbackFontFace = postcss.atRule({\n                    name: 'font-face'\n                });\n                const { fallbackFont, ascentOverride, descentOverride, lineGapOverride, sizeAdjust } = adjustFontFallback;\n                fallbackFontFace.nodes = [\n                    new postcss.Declaration({\n                        prop: 'font-family',\n                        value: adjustFontFallbackFamily\n                    }),\n                    new postcss.Declaration({\n                        prop: 'src',\n                        value: `local(\"${fallbackFont}\")`\n                    }),\n                    ...ascentOverride ? [\n                        new postcss.Declaration({\n                            prop: 'ascent-override',\n                            value: ascentOverride\n                        })\n                    ] : [],\n                    ...descentOverride ? [\n                        new postcss.Declaration({\n                            prop: 'descent-override',\n                            value: descentOverride\n                        })\n                    ] : [],\n                    ...lineGapOverride ? [\n                        new postcss.Declaration({\n                            prop: 'line-gap-override',\n                            value: lineGapOverride\n                        })\n                    ] : [],\n                    ...sizeAdjust ? [\n                        new postcss.Declaration({\n                            prop: 'size-adjust',\n                            value: sizeAdjust\n                        })\n                    ] : []\n                ];\n                root.nodes.push(fallbackFontFace);\n            }\n            // Variable fonts can define ranges of values\n            const isRange = (value)=>value.trim().includes(' ');\n            // Format the font families to be used in the CSS\n            const formattedFontFamilies = [\n                formatFamily(fontFamily),\n                ...adjustFontFallbackFamily ? [\n                    adjustFontFallbackFamily\n                ] : [],\n                ...fallbackFonts\n            ].join(', ');\n            // Add class with family, weight and style\n            const classRule = new postcss.Rule({\n                selector: '.className'\n            });\n            classRule.nodes = [\n                new postcss.Declaration({\n                    prop: 'font-family',\n                    value: formattedFontFamilies\n                }),\n                // If the font only has one weight or style, we can set it on the class\n                ...weight && !isRange(weight) ? [\n                    new postcss.Declaration({\n                        prop: 'font-weight',\n                        value: weight\n                    })\n                ] : [],\n                ...style && !isRange(style) ? [\n                    new postcss.Declaration({\n                        prop: 'font-style',\n                        value: style\n                    })\n                ] : []\n            ];\n            root.nodes.push(classRule);\n            // Add CSS class that defines a variable with the font families\n            if (variable) {\n                const varialbeRule = new postcss.Rule({\n                    selector: '.variable'\n                });\n                varialbeRule.nodes = [\n                    new postcss.Declaration({\n                        prop: variable,\n                        value: formattedFontFamilies\n                    })\n                ];\n                root.nodes.push(varialbeRule);\n            }\n            // Export @font-face values as is\n            exports.push({\n                name: 'style',\n                value: {\n                    fontFamily: formattedFontFamilies,\n                    fontWeight: !Number.isNaN(Number(weight)) ? Number(weight) : undefined,\n                    fontStyle: style && !isRange(style) ? style : undefined\n                }\n            });\n        }\n    };\n};\npostcssNextFontPlugin.postcss = true;\nexport default postcssNextFontPlugin;\n\n//# sourceMappingURL=postcss-next-font.js.map"
        }
    ]
}