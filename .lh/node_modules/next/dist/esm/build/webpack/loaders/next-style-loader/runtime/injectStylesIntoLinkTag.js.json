{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoLinkTag.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892757006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"webpack/module.d.ts\" />\nconst getTarget = (()=>{\n    const memo = {};\n    return function memorize(target) {\n        if (typeof memo[target] === 'undefined') {\n            let styleTarget = document.querySelector(target);\n            // Special case to return head of iframe instead of iframe itself\n            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n                try {\n                    // This will throw an exception if access to iframe is blocked\n                    // due to cross-origin restrictions\n                    styleTarget = styleTarget.contentDocument.head;\n                } catch (e) {\n                    // istanbul ignore next\n                    styleTarget = null;\n                }\n            }\n            memo[target] = styleTarget;\n        }\n        return memo[target];\n    };\n})();\nmodule.exports = (url, options)=>{\n    options = options || {};\n    options.attributes = typeof options.attributes === 'object' ? options.attributes : {};\n    if (typeof options.attributes.nonce === 'undefined') {\n        const nonce = // eslint-disable-next-line no-undef\n        typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n        if (nonce) {\n            options.attributes.nonce = nonce;\n        }\n    }\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = url;\n    Object.keys(options.attributes).forEach((key)=>{\n        link.setAttribute(key, options.attributes[key]);\n    });\n    if (typeof options.insert === 'function') {\n        options.insert(link);\n    } else {\n        const target = getTarget(options.insert || 'head');\n        if (!target) {\n            throw Object.defineProperty(new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E245\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        target.appendChild(link);\n    }\n    return (newUrl)=>{\n        if (typeof newUrl === 'string') {\n            link.href = newUrl;\n        } else {\n            link.parentNode.removeChild(link);\n        }\n    };\n};\n\n//# sourceMappingURL=injectStylesIntoLinkTag.js.map"
        }
    ]
}