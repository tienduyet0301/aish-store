{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-edge-ssr-loader/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892755103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { getModuleBuildInfo } from '../get-module-build-info';\nimport { WEBPACK_RESOURCE_QUERIES } from '../../../../lib/constants';\nimport { RouteKind } from '../../../../server/route-kind';\nimport { normalizePagePath } from '../../../../shared/lib/page-path/normalize-page-path';\nimport { loadEntrypoint } from '../../../load-entrypoint';\n/*\nFor pages SSR'd at the edge, we bundle them with the ESM version of Next in order to\nbenefit from the better tree-shaking and thus, smaller bundle sizes.\n\nThe absolute paths for _app, _error and _document, used in this loader, link to the regular CJS modules.\nThey are generated in `createPagesMapping` where we don't have access to `isEdgeRuntime`,\nso we have to do it here. It's not that bad because it keeps all references to ESM modules magic in this place.\n*/ function swapDistFolderWithEsmDistFolder(path) {\n    return path.replace('next/dist/pages', 'next/dist/esm/pages');\n}\nfunction getRouteModuleOptions(page) {\n    const options = {\n        definition: {\n            kind: RouteKind.PAGES,\n            page: normalizePagePath(page),\n            pathname: page,\n            // The following aren't used in production.\n            bundlePath: '',\n            filename: ''\n        }\n    };\n    return options;\n}\nconst edgeSSRLoader = async function edgeSSRLoader() {\n    const { dev, page, absolutePagePath, absoluteAppPath, absoluteDocumentPath, absolute500Path, absoluteErrorPath, isServerComponent, stringifiedConfig: stringifiedConfigBase64, appDirLoader: appDirLoaderBase64, pagesType, sriEnabled, cacheHandler, cacheHandlers: cacheHandlersStringified, preferredRegion, middlewareConfig: middlewareConfigBase64, serverActions } = this.getOptions();\n    const cacheHandlers = JSON.parse(cacheHandlersStringified || '{}');\n    if (!cacheHandlers.default) {\n        cacheHandlers.default = require.resolve('../../../../server/lib/cache-handlers/default');\n    }\n    const middlewareConfig = JSON.parse(Buffer.from(middlewareConfigBase64, 'base64').toString());\n    const stringifiedConfig = Buffer.from(stringifiedConfigBase64 || '', 'base64').toString();\n    const appDirLoader = Buffer.from(appDirLoaderBase64 || '', 'base64').toString();\n    const isAppDir = pagesType === 'app';\n    const buildInfo = getModuleBuildInfo(this._module);\n    buildInfo.nextEdgeSSR = {\n        isServerComponent,\n        page: page,\n        isAppDir\n    };\n    buildInfo.route = {\n        page,\n        absolutePagePath,\n        preferredRegion,\n        middlewareConfig\n    };\n    const pagePath = this.utils.contextify(this.context || this.rootContext, absolutePagePath);\n    const appPath = this.utils.contextify(this.context || this.rootContext, swapDistFolderWithEsmDistFolder(absoluteAppPath));\n    const errorPath = this.utils.contextify(this.context || this.rootContext, swapDistFolderWithEsmDistFolder(absoluteErrorPath));\n    const documentPath = this.utils.contextify(this.context || this.rootContext, swapDistFolderWithEsmDistFolder(absoluteDocumentPath));\n    const userland500Path = absolute500Path ? this.utils.contextify(this.context || this.rootContext, swapDistFolderWithEsmDistFolder(absolute500Path)) : null;\n    const stringifiedPagePath = JSON.stringify(pagePath);\n    const pageModPath = `${appDirLoader}${stringifiedPagePath.substring(1, stringifiedPagePath.length - 1)}${isAppDir ? `?${WEBPACK_RESOURCE_QUERIES.edgeSSREntry}` : ''}`;\n    if (isAppDir) {\n        return await loadEntrypoint('edge-ssr-app', {\n            VAR_USERLAND: pageModPath,\n            VAR_PAGE: page\n        }, {\n            sriEnabled: JSON.stringify(sriEnabled),\n            nextConfig: stringifiedConfig,\n            isServerComponent: JSON.stringify(isServerComponent),\n            dev: JSON.stringify(dev),\n            serverActions: typeof serverActions === 'undefined' ? 'undefined' : JSON.stringify(serverActions)\n        }, {\n            incrementalCacheHandler: cacheHandler ?? null\n        });\n    } else {\n        return await loadEntrypoint('edge-ssr', {\n            VAR_USERLAND: pageModPath,\n            VAR_PAGE: page,\n            VAR_MODULE_DOCUMENT: documentPath,\n            VAR_MODULE_APP: appPath,\n            VAR_MODULE_GLOBAL_ERROR: errorPath\n        }, {\n            pagesType: JSON.stringify(pagesType),\n            sriEnabled: JSON.stringify(sriEnabled),\n            nextConfig: stringifiedConfig,\n            dev: JSON.stringify(dev),\n            pageRouteModuleOptions: JSON.stringify(getRouteModuleOptions(page)),\n            errorRouteModuleOptions: JSON.stringify(getRouteModuleOptions('/_error')),\n            user500RouteModuleOptions: JSON.stringify(getRouteModuleOptions('/500'))\n        }, {\n            userland500Page: userland500Path,\n            incrementalCacheHandler: cacheHandler ?? null\n        });\n    }\n};\nexport default edgeSSRLoader;\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}