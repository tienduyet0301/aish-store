{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-app-loader/create-app-route-code.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892754683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport { stringify } from 'querystring';\nimport { WEBPACK_RESOURCE_QUERIES } from '../../../../lib/constants';\nimport { DEFAULT_METADATA_ROUTE_EXTENSIONS, isMetadataRouteFile } from '../../../../lib/metadata/is-metadata-route';\nimport { AppBundlePathNormalizer } from '../../../../server/normalizers/built/app/app-bundle-path-normalizer';\nimport { AppPathnameNormalizer } from '../../../../server/normalizers/built/app/app-pathname-normalizer';\nimport { loadEntrypoint } from '../../../load-entrypoint';\nimport { getFilenameAndExtension } from '../next-metadata-route-loader';\nexport async function createAppRouteCode({ appDir, name, page, pagePath, resolveAppRoute, pageExtensions, nextConfigOutput }) {\n    // routePath is the path to the route handler file,\n    // but could be aliased e.g. private-next-app-dir/favicon.ico\n    const routePath = pagePath.replace(/[\\\\/]/, '/');\n    // This, when used with the resolver will give us the pathname to the built\n    // route handler file.\n    let resolvedPagePath = await resolveAppRoute(routePath);\n    if (!resolvedPagePath) {\n        throw Object.defineProperty(new Error(`Invariant: could not resolve page path for ${name} at ${routePath}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E281\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // If this is a metadata route file, then we need to use the metadata-loader\n    // for the route to ensure that the route is generated.\n    const fileBaseName = path.parse(resolvedPagePath).name;\n    const appDirRelativePath = resolvedPagePath.slice(appDir.length);\n    const isMetadataEntryFile = isMetadataRouteFile(appDirRelativePath, DEFAULT_METADATA_ROUTE_EXTENSIONS, true);\n    if (isMetadataEntryFile) {\n        const { ext } = getFilenameAndExtension(resolvedPagePath);\n        const isDynamicRouteExtension = pageExtensions.includes(ext);\n        resolvedPagePath = `next-metadata-route-loader?${stringify({\n            filePath: resolvedPagePath,\n            isDynamicRouteExtension: isDynamicRouteExtension ? '1' : '0'\n        })}!?${WEBPACK_RESOURCE_QUERIES.metadataRoute}`;\n    }\n    const pathname = new AppPathnameNormalizer().normalize(page);\n    const bundlePath = new AppBundlePathNormalizer().normalize(page);\n    return await loadEntrypoint('app-route', {\n        VAR_USERLAND: resolvedPagePath,\n        VAR_DEFINITION_PAGE: page,\n        VAR_DEFINITION_PATHNAME: pathname,\n        VAR_DEFINITION_FILENAME: fileBaseName,\n        VAR_DEFINITION_BUNDLE_PATH: bundlePath,\n        VAR_RESOLVED_PAGE_PATH: resolvedPagePath\n    }, {\n        nextConfigOutput: JSON.stringify(nextConfigOutput)\n    });\n}\n\n//# sourceMappingURL=create-app-route-code.js.map"
        }
    ]
}