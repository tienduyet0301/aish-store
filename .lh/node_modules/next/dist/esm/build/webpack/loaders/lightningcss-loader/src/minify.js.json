{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/lightningcss-loader/src/minify.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892754236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// @ts-ignore\nimport { ModuleFilenameHelpers } from 'next/dist/compiled/webpack/webpack';\nimport { webpack } from 'next/dist/compiled/webpack/webpack';\n// @ts-ignore\nimport { RawSource, SourceMapSource } from 'next/dist/compiled/webpack-sources3';\nimport { ECacheKey } from './interface';\nimport { getTargets } from './utils';\nimport { Buffer } from 'buffer';\nconst PLUGIN_NAME = 'lightning-css-minify';\nconst CSS_FILE_REG = /\\.css(?:\\?.*)?$/i;\nexport class LightningCssMinifyPlugin {\n    constructor(opts = {}){\n        const { implementation, ...otherOpts } = opts;\n        if (implementation && typeof implementation.transformCss !== 'function') {\n            throw Object.defineProperty(new TypeError(`[LightningCssMinifyPlugin]: implementation.transformCss must be an 'lightningcss' transform function. Received ${typeof implementation.transformCss}`), \"__NEXT_ERROR_CODE\", {\n                value: \"E561\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        this.transform = implementation == null ? void 0 : implementation.transformCss;\n        this.options = otherOpts;\n    }\n    apply(compiler) {\n        const meta = JSON.stringify({\n            name: '@next/lightningcss-loader',\n            version: '0.0.0',\n            options: this.options\n        });\n        compiler.hooks.compilation.tap(PLUGIN_NAME, (compilation)=>{\n            compilation.hooks.chunkHash.tap(PLUGIN_NAME, (_, hash)=>hash.update(meta));\n            compilation.hooks.processAssets.tapPromise({\n                name: PLUGIN_NAME,\n                stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n                additionalAssets: true\n            }, async ()=>await this.transformAssets(compilation));\n            compilation.hooks.statsPrinter.tap(PLUGIN_NAME, (statsPrinter)=>{\n                statsPrinter.hooks.print.for('asset.info.minimized')// @ts-ignore\n                .tap(PLUGIN_NAME, (minimized, { green, formatFlag })=>{\n                    // @ts-ignore\n                    return minimized ? green(formatFlag('minimized')) : undefined;\n                });\n            });\n        });\n    }\n    async transformAssets(compilation) {\n        const { options: { devtool } } = compilation.compiler;\n        if (!this.transform) {\n            const { loadBindings } = require('next/dist/build/swc');\n            this.transform = (await loadBindings()).css.lightning.transform;\n        }\n        const sourcemap = this.options.sourceMap === undefined ? devtool && devtool.includes('source-map') : this.options.sourceMap;\n        const { include, exclude, test: testRegExp, targets: userTargets, ...transformOptions } = this.options;\n        const assets = compilation.getAssets().filter((asset)=>// Filter out already minimized\n            !asset.info.minimized && // Filter out by file type\n            (testRegExp || CSS_FILE_REG).test(asset.name) && ModuleFilenameHelpers.matchObject({\n                include,\n                exclude\n            }, asset.name));\n        await Promise.all(assets.map(async (asset)=>{\n            const { source, map } = asset.source.sourceAndMap();\n            const sourceAsString = source.toString();\n            const code = typeof source === 'string' ? Buffer.from(source) : source;\n            const targets = getTargets({\n                targets: userTargets,\n                key: ECacheKey.minify\n            });\n            const result = await this.transform({\n                filename: asset.name,\n                code,\n                minify: true,\n                sourceMap: sourcemap,\n                targets,\n                ...transformOptions\n            });\n            const codeString = result.code.toString();\n            compilation.updateAsset(asset.name, // @ts-ignore\n            sourcemap ? new SourceMapSource(codeString, asset.name, JSON.parse(result.map.toString()), sourceAsString, map, true) : new RawSource(codeString), {\n                ...asset.info,\n                minimized: true\n            });\n        }));\n    }\n}\n\n//# sourceMappingURL=minify.js.map"
        }
    ]
}