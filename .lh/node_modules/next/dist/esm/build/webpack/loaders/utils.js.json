{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892758042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { RSC_MODULE_TYPES } from '../../../shared/lib/constants';\nimport { getModuleBuildInfo } from './get-module-build-info';\nconst imageExtensions = [\n    'jpg',\n    'jpeg',\n    'png',\n    'webp',\n    'avif',\n    'ico',\n    'svg'\n];\nconst imageRegex = new RegExp(`\\\\.(${imageExtensions.join('|')})$`);\n// Determine if the whole module is client action, 'use server' in nested closure in the client module\nfunction isActionClientLayerModule(mod) {\n    const rscInfo = getModuleBuildInfo(mod).rsc;\n    return !!((rscInfo == null ? void 0 : rscInfo.actionIds) && (rscInfo == null ? void 0 : rscInfo.type) === RSC_MODULE_TYPES.client);\n}\nexport function isClientComponentEntryModule(mod) {\n    const rscInfo = getModuleBuildInfo(mod).rsc;\n    const hasClientDirective = rscInfo == null ? void 0 : rscInfo.isClientRef;\n    const isActionLayerEntry = isActionClientLayerModule(mod);\n    return hasClientDirective || isActionLayerEntry || imageRegex.test(mod.resource);\n}\nexport const regexCSS = /\\.(css|scss|sass)(\\?.*)?$/;\n// This function checks if a module is able to emit CSS resources. You should\n// never only rely on a single regex to do that.\nexport function isCSSMod(mod) {\n    var _mod_loaders;\n    return !!(mod.type === 'css/mini-extract' || mod.resource && regexCSS.test(mod.resource) || ((_mod_loaders = mod.loaders) == null ? void 0 : _mod_loaders.some(({ loader })=>loader.includes('next-style-loader/index.js') || process.env.NEXT_RSPACK && loader.includes('rspack.CssExtractRspackPlugin.loader') || loader.includes('mini-css-extract-plugin/loader.js') || loader.includes('@vanilla-extract/webpack-plugin/loader/'))));\n}\nexport function encodeToBase64(obj) {\n    return Buffer.from(JSON.stringify(obj)).toString('base64');\n}\nexport function decodeFromBase64(str) {\n    return JSON.parse(Buffer.from(str, 'base64').toString('utf8'));\n}\nexport async function getLoaderModuleNamedExports(resourcePath, context) {\n    var _mod_dependencies;\n    const mod = await new Promise((res, rej)=>{\n        context.loadModule(resourcePath, (err, _source, _sourceMap, module)=>{\n            if (err) {\n                return rej(err);\n            }\n            res(module);\n        });\n    });\n    const exportNames = ((_mod_dependencies = mod.dependencies) == null ? void 0 : _mod_dependencies.filter((dep)=>{\n        return [\n            'HarmonyExportImportedSpecifierDependency',\n            'HarmonyExportSpecifierDependency'\n        ].includes(dep.constructor.name) && 'name' in dep && dep.name !== 'default';\n    }).map((dep)=>{\n        return dep.name;\n    })) || [];\n    return exportNames;\n}\n\n//# sourceMappingURL=utils.js.map"
        }
    ]
}