{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-edge-app-route-loader/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892754950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { getModuleBuildInfo } from '../get-module-build-info';\nimport { stringifyRequest } from '../../stringify-request';\nimport { WEBPACK_RESOURCE_QUERIES } from '../../../../lib/constants';\nimport { loadEntrypoint } from '../../../load-entrypoint';\nimport { isMetadataRoute } from '../../../../lib/metadata/is-metadata-route';\nconst EdgeAppRouteLoader = async function() {\n    const { page, absolutePagePath, preferredRegion, appDirLoader: appDirLoaderBase64 = '', middlewareConfig: middlewareConfigBase64 = '', nextConfig: nextConfigBase64, cacheHandlers: cacheHandlersStringified } = this.getOptions();\n    const appDirLoader = Buffer.from(appDirLoaderBase64, 'base64').toString();\n    const middlewareConfig = JSON.parse(Buffer.from(middlewareConfigBase64, 'base64').toString());\n    const cacheHandlers = JSON.parse(cacheHandlersStringified || '{}');\n    if (!cacheHandlers.default) {\n        cacheHandlers.default = require.resolve('../../../../server/lib/cache-handlers/default');\n    }\n    // Ensure we only run this loader for as a module.\n    if (!this._module) throw Object.defineProperty(new Error('This loader is only usable as a module'), \"__NEXT_ERROR_CODE\", {\n        value: \"E433\",\n        enumerable: false,\n        configurable: true\n    });\n    const buildInfo = getModuleBuildInfo(this._module);\n    buildInfo.nextEdgeSSR = {\n        isServerComponent: !isMetadataRoute(page),\n        page: page,\n        isAppDir: true\n    };\n    buildInfo.route = {\n        page,\n        absolutePagePath,\n        preferredRegion,\n        middlewareConfig\n    };\n    const stringifiedPagePath = stringifyRequest(this, absolutePagePath);\n    const modulePath = `${appDirLoader}${stringifiedPagePath.substring(1, stringifiedPagePath.length - 1)}?${WEBPACK_RESOURCE_QUERIES.edgeSSREntry}`;\n    const stringifiedConfig = Buffer.from(nextConfigBase64 || '', 'base64').toString();\n    return await loadEntrypoint('edge-app-route', {\n        VAR_USERLAND: modulePath,\n        VAR_PAGE: page\n    }, {\n        nextConfig: stringifiedConfig\n    });\n};\nexport default EdgeAppRouteLoader;\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}