{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-route-loader/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892756854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { stringify } from 'querystring';\nimport { getModuleBuildInfo } from '../get-module-build-info';\nimport { RouteKind } from '../../../../server/route-kind';\nimport { normalizePagePath } from '../../../../shared/lib/page-path/normalize-page-path';\nimport { decodeFromBase64, encodeToBase64 } from '../utils';\nimport { isInstrumentationHookFile } from '../../../utils';\nimport { loadEntrypoint } from '../../../load-entrypoint';\n/**\n * Returns the loader entry for a given page.\n *\n * @param options the options to create the loader entry\n * @returns the encoded loader entry\n */ export function getRouteLoaderEntry(options) {\n    switch(options.kind){\n        case RouteKind.PAGES:\n            {\n                const query = {\n                    kind: options.kind,\n                    page: options.page,\n                    preferredRegion: options.preferredRegion,\n                    absolutePagePath: options.absolutePagePath,\n                    // These are the path references to the internal components that may be\n                    // overridden by userland components.\n                    absoluteAppPath: options.pages['/_app'],\n                    absoluteDocumentPath: options.pages['/_document'],\n                    middlewareConfigBase64: encodeToBase64(options.middlewareConfig)\n                };\n                return `next-route-loader?${stringify(query)}!`;\n            }\n        case RouteKind.PAGES_API:\n            {\n                const query = {\n                    kind: options.kind,\n                    page: options.page,\n                    preferredRegion: options.preferredRegion,\n                    absolutePagePath: options.absolutePagePath,\n                    middlewareConfigBase64: encodeToBase64(options.middlewareConfig)\n                };\n                return `next-route-loader?${stringify(query)}!`;\n            }\n        default:\n            {\n                throw Object.defineProperty(new Error('Invariant: Unexpected route kind'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E453\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n    }\n}\nconst loadPages = async ({ page, absolutePagePath, absoluteDocumentPath, absoluteAppPath, preferredRegion, middlewareConfigBase64 }, buildInfo)=>{\n    const middlewareConfig = decodeFromBase64(middlewareConfigBase64);\n    // Attach build info to the module.\n    buildInfo.route = {\n        page,\n        absolutePagePath,\n        preferredRegion,\n        middlewareConfig\n    };\n    let file = await loadEntrypoint('pages', {\n        VAR_USERLAND: absolutePagePath,\n        VAR_MODULE_DOCUMENT: absoluteDocumentPath,\n        VAR_MODULE_APP: absoluteAppPath,\n        VAR_DEFINITION_PAGE: normalizePagePath(page),\n        VAR_DEFINITION_PATHNAME: page\n    });\n    if (isInstrumentationHookFile(page)) {\n        // When we're building the instrumentation page (only when the\n        // instrumentation file conflicts with a page also labeled\n        // /instrumentation) hoist the `register` method.\n        file += '\\nexport const register = hoist(userland, \"register\")';\n    }\n    return file;\n};\nconst loadPagesAPI = async ({ page, absolutePagePath, preferredRegion, middlewareConfigBase64 }, buildInfo)=>{\n    const middlewareConfig = decodeFromBase64(middlewareConfigBase64);\n    // Attach build info to the module.\n    buildInfo.route = {\n        page,\n        absolutePagePath,\n        preferredRegion,\n        middlewareConfig\n    };\n    return await loadEntrypoint('pages-api', {\n        VAR_USERLAND: absolutePagePath,\n        VAR_DEFINITION_PAGE: normalizePagePath(page),\n        VAR_DEFINITION_PATHNAME: page\n    });\n};\n/**\n * Handles the `next-route-loader` options.\n * @returns the loader definition function\n */ const loader = async function() {\n    if (!this._module) {\n        throw Object.defineProperty(new Error('Invariant: expected this to reference a module'), \"__NEXT_ERROR_CODE\", {\n            value: \"E383\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const buildInfo = getModuleBuildInfo(this._module);\n    const opts = this.getOptions();\n    switch(opts.kind){\n        case RouteKind.PAGES:\n            {\n                return await loadPages(opts, buildInfo);\n            }\n        case RouteKind.PAGES_API:\n            {\n                return await loadPagesAPI(opts, buildInfo);\n            }\n        default:\n            {\n                throw Object.defineProperty(new Error('Invariant: Unexpected route kind'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E453\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n    }\n};\nexport default loader;\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}