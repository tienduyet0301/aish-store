{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/postcss-loader/src/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892757423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nconst IS_NATIVE_WIN32_PATH = /^[a-z]:[/\\\\]|^\\\\\\\\/i;\nconst ABSOLUTE_SCHEME = /^[a-z0-9+\\-.]+:/i;\nfunction getURLType(source) {\n    if (source[0] === '/') {\n        if (source[1] === '/') {\n            return 'scheme-relative';\n        }\n        return 'path-absolute';\n    }\n    if (IS_NATIVE_WIN32_PATH.test(source)) {\n        return 'path-absolute';\n    }\n    return ABSOLUTE_SCHEME.test(source) ? 'absolute' : 'path-relative';\n}\nfunction normalizeSourceMap(map, resourceContext) {\n    let newMap = map;\n    // Some loader emit source map as string\n    // Strip any JSON XSSI avoidance prefix from the string (as documented in the source maps specification), and then parse the string as JSON.\n    if (typeof newMap === 'string') {\n        newMap = JSON.parse(newMap);\n    }\n    delete newMap.file;\n    const { sourceRoot } = newMap;\n    delete newMap.sourceRoot;\n    if (newMap.sources) {\n        newMap.sources = newMap.sources.map((source)=>{\n            const sourceType = getURLType(source);\n            // Do no touch `scheme-relative` and `absolute` URLs\n            if (sourceType === 'path-relative' || sourceType === 'path-absolute') {\n                const absoluteSource = sourceType === 'path-relative' && sourceRoot ? path.resolve(sourceRoot, path.normalize(source)) : path.normalize(source);\n                return path.relative(resourceContext, absoluteSource);\n            }\n            return source;\n        });\n    }\n    return newMap;\n}\nfunction normalizeSourceMapAfterPostcss(map, resourceContext) {\n    const newMap = map;\n    // result.map.file is an optional property that provides the output filename.\n    // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n    // eslint-disable-next-line no-param-reassign\n    delete newMap.file;\n    // eslint-disable-next-line no-param-reassign\n    newMap.sourceRoot = '';\n    // eslint-disable-next-line no-param-reassign\n    newMap.sources = newMap.sources.map((source)=>{\n        if (source.startsWith('<')) {\n            return source;\n        }\n        const sourceType = getURLType(source);\n        // Do no touch `scheme-relative`, `path-absolute` and `absolute` types\n        if (sourceType === 'path-relative') {\n            return path.resolve(resourceContext, source);\n        }\n        return source;\n    });\n    return newMap;\n}\nexport { normalizeSourceMap, normalizeSourceMapAfterPostcss };\n\n//# sourceMappingURL=utils.js.map"
        }
    ]
}