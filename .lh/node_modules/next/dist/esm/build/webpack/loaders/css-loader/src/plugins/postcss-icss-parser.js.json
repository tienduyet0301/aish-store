{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/css-loader/src/plugins/postcss-icss-parser.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892753354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { extractICSS, replaceValueSymbols, replaceSymbols } from 'next/dist/compiled/icss-utils';\nimport { normalizeUrl, resolveRequests, requestify } from '../utils';\nconst plugin = (options = {})=>{\n    return {\n        postcssPlugin: 'postcss-icss-parser',\n        async OnceExit (root) {\n            const importReplacements = Object.create(null);\n            const { icssImports, icssExports } = extractICSS(root);\n            const imports = new Map();\n            const tasks = [];\n            // eslint-disable-next-line guard-for-in\n            for(const url in icssImports){\n                const tokens = icssImports[url];\n                if (Object.keys(tokens).length === 0) {\n                    continue;\n                }\n                let normalizedUrl = url;\n                let prefix = '';\n                const queryParts = normalizedUrl.split('!');\n                if (queryParts.length > 1) {\n                    normalizedUrl = queryParts.pop();\n                    prefix = queryParts.join('!');\n                }\n                const request = requestify(normalizeUrl(normalizedUrl, true), options.rootContext);\n                const doResolve = async ()=>{\n                    const { resolver, context } = options;\n                    const resolvedUrl = await resolveRequests(resolver, context, [\n                        ...new Set([\n                            normalizedUrl,\n                            request\n                        ])\n                    ]);\n                    if (!resolvedUrl) {\n                        return;\n                    }\n                    // eslint-disable-next-line consistent-return\n                    return {\n                        url: resolvedUrl,\n                        prefix,\n                        tokens\n                    };\n                };\n                tasks.push(doResolve());\n            }\n            const results = await Promise.all(tasks);\n            for(let index = 0; index <= results.length - 1; index++){\n                const item = results[index];\n                if (!item) {\n                    continue;\n                }\n                const newUrl = item.prefix ? `${item.prefix}!${item.url}` : item.url;\n                const importKey = newUrl;\n                let importName = imports.get(importKey);\n                if (!importName) {\n                    importName = `___CSS_LOADER_ICSS_IMPORT_${imports.size}___`;\n                    imports.set(importKey, importName);\n                    options.imports.push({\n                        type: 'icss_import',\n                        importName,\n                        url: options.urlHandler(newUrl),\n                        icss: true,\n                        index\n                    });\n                    options.api.push({\n                        importName,\n                        dedupe: true,\n                        index\n                    });\n                }\n                for (const [replacementIndex, token] of Object.keys(item.tokens).entries()){\n                    const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;\n                    const localName = item.tokens[token];\n                    importReplacements[token] = replacementName;\n                    options.replacements.push({\n                        replacementName,\n                        importName,\n                        localName\n                    });\n                }\n            }\n            if (Object.keys(importReplacements).length > 0) {\n                replaceSymbols(root, importReplacements);\n            }\n            for (const name of Object.keys(icssExports)){\n                const value = replaceValueSymbols(icssExports[name], importReplacements);\n                options.exports.push({\n                    name,\n                    value\n                });\n            }\n        }\n    };\n};\nplugin.postcss = true;\nexport default plugin;\n\n//# sourceMappingURL=postcss-icss-parser.js.map"
        }
    ]
}