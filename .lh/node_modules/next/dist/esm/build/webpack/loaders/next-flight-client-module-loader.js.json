{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/loaders/next-flight-client-module-loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892755486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { getRSCModuleInformation } from '../../analysis/get-page-static-info';\nimport { getModuleBuildInfo } from './get-module-build-info';\nconst flightClientModuleLoader = function transformSource(source, sourceMap) {\n    // Avoid buffer to be consumed\n    if (typeof source !== 'string') {\n        throw Object.defineProperty(new Error('Expected source to have been transformed to a string.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E429\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (!this._module) {\n        return source;\n    }\n    // Assign the RSC meta information to buildInfo.\n    const buildInfo = getModuleBuildInfo(this._module);\n    buildInfo.rsc = getRSCModuleInformation(source, false);\n    let prefix = '';\n    if (process.env.BUILTIN_FLIGHT_CLIENT_ENTRY_PLUGIN) {\n        const rscModuleInformationJson = JSON.stringify(buildInfo.rsc);\n        prefix = `/* __rspack_internal_rsc_module_information_do_not_use__ ${rscModuleInformationJson} */\\n`;\n        source = prefix + source;\n    }\n    // This is a server action entry module in the client layer. We need to\n    // create re-exports of \"virtual modules\" to expose the reference IDs to the\n    // client separately so they won't be always in the same one module which is\n    // not splittable. This server action module tree shaking is only applied in\n    // production mode. In development mode, we want to preserve the original\n    // modules (as transformed by SWC) to ensure that source mapping works.\n    if (buildInfo.rsc.actionIds && process.env.NODE_ENV === 'production') {\n        return prefix + Object.entries(buildInfo.rsc.actionIds).map(([id, name])=>{\n            return `export { ${name} } from 'next-flight-server-reference-proxy-loader?id=${id}&name=${name}!'`;\n        }).join('\\n');\n    }\n    return this.callback(null, source, sourceMap);\n};\nexport default flightClientModuleLoader;\n\n//# sourceMappingURL=next-flight-client-module-loader.js.map"
        }
    ]
}