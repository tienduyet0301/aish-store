{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/config/blocks/css/loaders/modules.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892752466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { getClientStyleLoader } from './client';\nimport { cssFileResolve } from './file-resolve';\nimport { getCssModuleLocalIdent } from './getCssModuleLocalIdent';\nexport function getCssModuleLoader(ctx, postcss, preProcessors = []) {\n    const loaders = [];\n    if (ctx.isClient) {\n        // Add appropriate development more or production mode style\n        // loader\n        loaders.push(getClientStyleLoader({\n            hasAppDir: ctx.hasAppDir,\n            isAppDir: ctx.isAppDir,\n            isDevelopment: ctx.isDevelopment,\n            assetPrefix: ctx.assetPrefix\n        }));\n    }\n    if (ctx.experimental.useLightningcss) {\n        loaders.push({\n            loader: require.resolve('../../../../loaders/lightningcss-loader/src'),\n            options: {\n                importLoaders: 1 + preProcessors.length,\n                url: (url, resourcePath)=>cssFileResolve(url, resourcePath, ctx.experimental.urlImports),\n                import: (url, _, resourcePath)=>cssFileResolve(url, resourcePath, ctx.experimental.urlImports),\n                modules: {\n                    // Do not transform class names (CJS mode backwards compatibility):\n                    exportLocalsConvention: 'asIs',\n                    // Server-side (Node.js) rendering support:\n                    exportOnlyLocals: ctx.isServer\n                },\n                targets: ctx.supportedBrowsers,\n                postcss\n            }\n        });\n    } else {\n        // Resolve CSS `@import`s and `url()`s\n        loaders.push({\n            loader: require.resolve('../../../../loaders/css-loader/src'),\n            options: {\n                postcss,\n                importLoaders: 1 + preProcessors.length,\n                // Use CJS mode for backwards compatibility:\n                esModule: false,\n                url: (url, resourcePath)=>cssFileResolve(url, resourcePath, ctx.experimental.urlImports),\n                import: (url, _, resourcePath)=>cssFileResolve(url, resourcePath, ctx.experimental.urlImports),\n                modules: {\n                    // Do not transform class names (CJS mode backwards compatibility):\n                    exportLocalsConvention: 'asIs',\n                    // Server-side (Node.js) rendering support:\n                    exportOnlyLocals: ctx.isServer,\n                    // Disallow global style exports so we can code-split CSS and\n                    // not worry about loading order.\n                    mode: 'pure',\n                    // Generate a friendly production-ready name so it's\n                    // reasonably understandable. The same name is used for\n                    // development.\n                    // TODO: Consider making production reduce this to a single\n                    // character?\n                    getLocalIdent: getCssModuleLocalIdent\n                }\n            }\n        });\n        // Compile CSS\n        loaders.push({\n            loader: require.resolve('../../../../loaders/postcss-loader/src'),\n            options: {\n                postcss\n            }\n        });\n    }\n    loaders.push(// Webpack loaders run like a stack, so we need to reverse the natural\n    // order of preprocessors.\n    ...preProcessors.slice().reverse());\n    return loaders;\n}\n\n//# sourceMappingURL=modules.js.map"
        }
    ]
}