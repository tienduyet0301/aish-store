{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/config/helpers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892752873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import curry from 'next/dist/compiled/lodash.curry';\nexport const loader = curry(function loader(rule, config) {\n    var _config_module_rules;\n    if (!config.module) {\n        config.module = {\n            rules: []\n        };\n    }\n    if (rule.oneOf) {\n        var _config_module_rules1;\n        const existing = (_config_module_rules1 = config.module.rules) == null ? void 0 : _config_module_rules1.find((arrayRule)=>arrayRule && typeof arrayRule === 'object' && arrayRule.oneOf);\n        if (existing && typeof existing === 'object') {\n            existing.oneOf.push(...rule.oneOf);\n            return config;\n        }\n    }\n    (_config_module_rules = config.module.rules) == null ? void 0 : _config_module_rules.push(rule);\n    return config;\n});\nexport const unshiftLoader = curry(function unshiftLoader(rule, config) {\n    var _config_module_rules;\n    if (!config.module) {\n        config.module = {\n            rules: []\n        };\n    }\n    if (rule.oneOf) {\n        var _config_module_rules1;\n        const existing = (_config_module_rules1 = config.module.rules) == null ? void 0 : _config_module_rules1.find((arrayRule)=>arrayRule && typeof arrayRule === 'object' && arrayRule.oneOf);\n        if (existing && typeof existing === 'object') {\n            var _existing_oneOf;\n            (_existing_oneOf = existing.oneOf) == null ? void 0 : _existing_oneOf.unshift(...rule.oneOf);\n            return config;\n        }\n    }\n    (_config_module_rules = config.module.rules) == null ? void 0 : _config_module_rules.unshift(rule);\n    return config;\n});\nexport const plugin = curry(function plugin(p, config) {\n    if (!config.plugins) {\n        config.plugins = [];\n    }\n    config.plugins.push(p);\n    return config;\n});\n\n//# sourceMappingURL=helpers.js.map"
        }
    ]
}