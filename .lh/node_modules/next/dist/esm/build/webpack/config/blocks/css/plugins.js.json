{
    "sourceFile": "node_modules/next/dist/esm/build/webpack/config/blocks/css/plugins.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892752672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { bold, red, underline, yellow } from '../../../../../lib/picocolors';\nimport { findConfig } from '../../../../../lib/find-config';\nconst genericErrorText = 'Malformed PostCSS Configuration';\nfunction getError_NullConfig(pluginName) {\n    return `${red(bold('Error'))}: Your PostCSS configuration for '${pluginName}' cannot have ${bold('null')} configuration.\\nTo disable '${pluginName}', pass ${bold('false')}, otherwise, pass ${bold('true')} or a configuration object.`;\n}\nfunction isIgnoredPlugin(pluginPath) {\n    const ignoredRegex = /(?:^|[\\\\/])(postcss-modules-values|postcss-modules-scope|postcss-modules-extract-imports|postcss-modules-local-by-default|postcss-modules)(?:[\\\\/]|$)/i;\n    const match = ignoredRegex.exec(pluginPath);\n    if (match == null) {\n        return false;\n    }\n    const plugin = match.pop();\n    console.warn(`${yellow(bold('Warning'))}: Please remove the ${underline(plugin)} plugin from your PostCSS configuration. ` + `This plugin is automatically configured by Next.js.\\n` + 'Read more: https://nextjs.org/docs/messages/postcss-ignored-plugin');\n    return true;\n}\nconst createLazyPostCssPlugin = (fn)=>{\n    let result = undefined;\n    const plugin = (...args)=>{\n        if (result === undefined) result = fn();\n        if (result.postcss === true) {\n            return result(...args);\n        } else if (result.postcss) {\n            return result.postcss;\n        }\n        return result;\n    };\n    plugin.postcss = true;\n    return plugin;\n};\nasync function loadPlugin(dir, pluginName, options) {\n    if (options === false || isIgnoredPlugin(pluginName)) {\n        return false;\n    }\n    if (options == null) {\n        console.error(getError_NullConfig(pluginName));\n        throw Object.defineProperty(new Error(genericErrorText), \"__NEXT_ERROR_CODE\", {\n            value: \"E394\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const pluginPath = require.resolve(pluginName, {\n        paths: [\n            dir\n        ]\n    });\n    if (isIgnoredPlugin(pluginPath)) {\n        return false;\n    } else if (options === true) {\n        return createLazyPostCssPlugin(()=>require(pluginPath));\n    } else {\n        if (typeof options === 'object' && Object.keys(options).length === 0) {\n            return createLazyPostCssPlugin(()=>require(pluginPath));\n        }\n        return createLazyPostCssPlugin(()=>require(pluginPath)(options));\n    }\n}\nfunction getDefaultPlugins(supportedBrowsers, disablePostcssPresetEnv) {\n    return [\n        require.resolve('next/dist/compiled/postcss-flexbugs-fixes'),\n        disablePostcssPresetEnv ? false : [\n            require.resolve('next/dist/compiled/postcss-preset-env'),\n            {\n                browsers: supportedBrowsers ?? [\n                    'defaults'\n                ],\n                autoprefixer: {\n                    // Disable legacy flexbox support\n                    flexbox: 'no-2009'\n                },\n                // Enable CSS features that have shipped to the\n                // web platform, i.e. in 2+ browsers unflagged.\n                stage: 3,\n                features: {\n                    'custom-properties': false\n                }\n            }\n        ]\n    ].filter(Boolean);\n}\nexport async function getPostCssPlugins(dir, supportedBrowsers, disablePostcssPresetEnv = false, useLightningcss = false) {\n    let config = await findConfig(dir, 'postcss');\n    if (config == null) {\n        config = {\n            plugins: useLightningcss ? [] : getDefaultPlugins(supportedBrowsers, disablePostcssPresetEnv)\n        };\n    }\n    if (typeof config === 'function') {\n        throw Object.defineProperty(new Error(`Your custom PostCSS configuration may not export a function. Please export a plain object instead.\\n` + 'Read more: https://nextjs.org/docs/messages/postcss-function'), \"__NEXT_ERROR_CODE\", {\n            value: \"E323\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // Warn user about configuration keys which are not respected\n    const invalidKey = Object.keys(config).find((key)=>key !== 'plugins');\n    if (invalidKey) {\n        console.warn(`${yellow(bold('Warning'))}: Your PostCSS configuration defines a field which is not supported (\\`${invalidKey}\\`). ` + `Please remove this configuration value.`);\n    }\n    // Enforce the user provided plugins if the configuration file is present\n    let plugins = config.plugins;\n    if (plugins == null || typeof plugins !== 'object') {\n        throw Object.defineProperty(new Error(`Your custom PostCSS configuration must export a \\`plugins\\` key.`), \"__NEXT_ERROR_CODE\", {\n            value: \"E347\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (!Array.isArray(plugins)) {\n        // Capture variable so TypeScript is happy\n        const pc = plugins;\n        plugins = Object.keys(plugins).reduce((acc, curr)=>{\n            const p = pc[curr];\n            if (typeof p === 'undefined') {\n                console.error(getError_NullConfig(curr));\n                throw Object.defineProperty(new Error(genericErrorText), \"__NEXT_ERROR_CODE\", {\n                    value: \"E394\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            acc.push([\n                curr,\n                p\n            ]);\n            return acc;\n        }, []);\n    }\n    const parsed = [];\n    plugins.forEach((plugin)=>{\n        if (plugin == null) {\n            console.warn(`${yellow(bold('Warning'))}: A ${bold('null')} PostCSS plugin was provided. This entry will be ignored.`);\n        } else if (typeof plugin === 'string') {\n            parsed.push([\n                plugin,\n                true\n            ]);\n        } else if (Array.isArray(plugin)) {\n            const pluginName = plugin[0];\n            const pluginConfig = plugin[1];\n            if (typeof pluginName === 'string' && (typeof pluginConfig === 'boolean' || typeof pluginConfig === 'object' || typeof pluginConfig === 'string')) {\n                parsed.push([\n                    pluginName,\n                    pluginConfig\n                ]);\n            } else {\n                if (typeof pluginName !== 'string') {\n                    console.error(`${red(bold('Error'))}: A PostCSS Plugin must be provided as a ${bold('string')}. Instead, we got: '${pluginName}'.\\n` + 'Read more: https://nextjs.org/docs/messages/postcss-shape');\n                } else {\n                    console.error(`${red(bold('Error'))}: A PostCSS Plugin was passed as an array but did not provide its configuration ('${pluginName}').\\n` + 'Read more: https://nextjs.org/docs/messages/postcss-shape');\n                }\n                throw Object.defineProperty(new Error(genericErrorText), \"__NEXT_ERROR_CODE\", {\n                    value: \"E394\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n        } else if (typeof plugin === 'function') {\n            console.error(`${red(bold('Error'))}: A PostCSS Plugin was passed as a function using require(), but it must be provided as a ${bold('string')}.\\nRead more: https://nextjs.org/docs/messages/postcss-shape`);\n            throw Object.defineProperty(new Error(genericErrorText), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        } else {\n            console.error(`${red(bold('Error'))}: An unknown PostCSS plugin was provided (${plugin}).\\n` + 'Read more: https://nextjs.org/docs/messages/postcss-shape');\n            throw Object.defineProperty(new Error(genericErrorText), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    });\n    const resolved = await Promise.all(parsed.map((p)=>loadPlugin(dir, p[0], p[1])));\n    const filtered = resolved.filter(Boolean);\n    return filtered;\n}\n\n//# sourceMappingURL=plugins.js.map"
        }
    ]
}