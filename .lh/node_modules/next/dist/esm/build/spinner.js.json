{
    "sourceFile": "node_modules/next/dist/esm/build/spinner.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892749529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import ora from 'next/dist/compiled/ora';\nimport * as Log from './output/log';\nconst dotsSpinner = {\n    frames: [\n        '.',\n        '..',\n        '...'\n    ],\n    interval: 200\n};\nexport default function createSpinner(text, options = {}, logFn = console.log) {\n    let spinner;\n    let prefixText = ` ${Log.prefixes.info} ${text} `;\n    if (process.stdout.isTTY) {\n        spinner = ora({\n            text: undefined,\n            prefixText,\n            spinner: dotsSpinner,\n            stream: process.stdout,\n            ...options\n        }).start();\n        // Add capturing of console.log/warn/error to allow pausing\n        // the spinner before logging and then restarting spinner after\n        const origLog = console.log;\n        const origWarn = console.warn;\n        const origError = console.error;\n        const origStop = spinner.stop.bind(spinner);\n        const origStopAndPersist = spinner.stopAndPersist.bind(spinner);\n        const logHandle = (method, args)=>{\n            // Enter a new line before logging new message, to avoid\n            // the new message shows up right after the spinner in the same line.\n            const isInProgress = spinner == null ? void 0 : spinner.isSpinning;\n            if (spinner && isInProgress) {\n                // Reset the current running spinner to empty line by `\\r`\n                spinner.prefixText = '\\r';\n                spinner.text = '\\r';\n                spinner.clear();\n                origStop();\n            }\n            method(...args);\n            if (spinner && isInProgress) {\n                spinner.start();\n            }\n        };\n        console.log = (...args)=>logHandle(origLog, args);\n        console.warn = (...args)=>logHandle(origWarn, args);\n        console.error = (...args)=>logHandle(origError, args);\n        const resetLog = ()=>{\n            console.log = origLog;\n            console.warn = origWarn;\n            console.error = origError;\n        };\n        spinner.setText = (newText)=>{\n            text = newText;\n            prefixText = ` ${Log.prefixes.info} ${newText} `;\n            spinner.prefixText = prefixText;\n            return spinner;\n        };\n        spinner.stop = ()=>{\n            origStop();\n            resetLog();\n            return spinner;\n        };\n        spinner.stopAndPersist = ()=>{\n            // Add \\r at beginning to reset the current line of loading status text\n            const suffixText = `\\r ${Log.prefixes.event} ${text} `;\n            if (spinner) {\n                spinner.text = suffixText;\n            } else {\n                logFn(suffixText);\n            }\n            origStopAndPersist();\n            resetLog();\n            return spinner;\n        };\n    } else if (prefixText || text) {\n        logFn(prefixText ? prefixText + '...' : text);\n    }\n    return spinner;\n}\n\n//# sourceMappingURL=spinner.js.map"
        }
    ]
}