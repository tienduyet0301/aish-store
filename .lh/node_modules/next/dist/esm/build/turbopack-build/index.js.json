{
    "sourceFile": "node_modules/next/dist/esm/build/turbopack-build/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892751179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport { formatNodeOptions, getParsedNodeOptionsWithoutInspect } from '../../server/lib/utils';\nimport { Worker } from '../../lib/worker';\nimport { NextBuildContext } from '../build-context';\nasync function turbopackBuildWithWorker() {\n    const nodeOptions = getParsedNodeOptionsWithoutInspect();\n    try {\n        const worker = new Worker(path.join(__dirname, 'impl.js'), {\n            exposedMethods: [\n                'workerMain',\n                'waitForShutdown'\n            ],\n            numWorkers: 1,\n            maxRetries: 0,\n            forkOptions: {\n                env: {\n                    ...process.env,\n                    NEXT_PRIVATE_BUILD_WORKER: '1',\n                    NODE_OPTIONS: formatNodeOptions(nodeOptions)\n                }\n            }\n        });\n        const { nextBuildSpan, ...prunedBuildContext } = NextBuildContext;\n        const result = await worker.workerMain({\n            buildContext: prunedBuildContext\n        });\n        // destroy worker when Turbopack has shutdown so it's not sticking around using memory\n        // We need to wait for shutdown to make sure persistent cache is flushed\n        result.shutdownPromise = worker.waitForShutdown().then(()=>{\n            worker.end();\n        });\n        return result;\n    } catch (err) {\n        // When the error is a serialized `Error` object we need to recreate the `Error` instance\n        // in order to keep the consistent error reporting behavior.\n        if (err.type === 'Error') {\n            const error = Object.defineProperty(new Error(err.message), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n            if (err.name) {\n                error.name = err.name;\n            }\n            if (err.cause) {\n                error.cause = err.cause;\n            }\n            error.message = err.message;\n            error.stack = err.stack;\n            throw error;\n        }\n        throw err;\n    }\n}\nexport function turbopackBuild(withWorker) {\n    if (withWorker) {\n        return turbopackBuildWithWorker();\n    } else {\n        const build = require('./impl').turbopackBuild;\n        return build();\n    }\n}\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}