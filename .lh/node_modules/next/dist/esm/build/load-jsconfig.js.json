{
    "sourceFile": "node_modules/next/dist/esm/build/load-jsconfig.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892747155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport fs from 'fs';\nimport * as Log from './output/log';\nimport { getTypeScriptConfiguration } from '../lib/typescript/getTypeScriptConfiguration';\nimport { readFileSync } from 'fs';\nimport isError from '../lib/is-error';\nimport { hasNecessaryDependencies } from '../lib/has-necessary-dependencies';\nlet TSCONFIG_WARNED = false;\nexport function parseJsonFile(filePath) {\n    const JSON5 = require('next/dist/compiled/json5');\n    const contents = readFileSync(filePath, 'utf8');\n    // Special case an empty file\n    if (contents.trim() === '') {\n        return {};\n    }\n    try {\n        return JSON5.parse(contents);\n    } catch (err) {\n        if (!isError(err)) throw err;\n        const { codeFrameColumns } = require('next/dist/compiled/babel/code-frame');\n        const codeFrame = codeFrameColumns(String(contents), {\n            start: {\n                line: err.lineNumber || 0,\n                column: err.columnNumber || 0\n            }\n        }, {\n            message: err.message,\n            highlightCode: true\n        });\n        throw Object.defineProperty(new Error(`Failed to parse \"${filePath}\":\\n${codeFrame}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E232\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nexport default async function loadJsConfig(dir, config) {\n    var _jsConfig_compilerOptions;\n    let typeScriptPath;\n    try {\n        const deps = await hasNecessaryDependencies(dir, [\n            {\n                pkg: 'typescript',\n                file: 'typescript/lib/typescript.js',\n                exportsRestrict: true\n            }\n        ]);\n        typeScriptPath = deps.resolved.get('typescript');\n    } catch  {}\n    const tsConfigPath = path.join(dir, config.typescript.tsconfigPath);\n    const useTypeScript = Boolean(typeScriptPath && fs.existsSync(tsConfigPath));\n    let implicitBaseurl;\n    let jsConfig;\n    // jsconfig is a subset of tsconfig\n    if (useTypeScript) {\n        if (config.typescript.tsconfigPath !== 'tsconfig.json' && TSCONFIG_WARNED === false) {\n            TSCONFIG_WARNED = true;\n            Log.info(`Using tsconfig file: ${config.typescript.tsconfigPath}`);\n        }\n        const ts = await Promise.resolve(require(typeScriptPath));\n        const tsConfig = await getTypeScriptConfiguration(ts, tsConfigPath, true);\n        jsConfig = {\n            compilerOptions: tsConfig.options\n        };\n        implicitBaseurl = path.dirname(tsConfigPath);\n    }\n    const jsConfigPath = path.join(dir, 'jsconfig.json');\n    if (!useTypeScript && fs.existsSync(jsConfigPath)) {\n        jsConfig = parseJsonFile(jsConfigPath);\n        implicitBaseurl = path.dirname(jsConfigPath);\n    }\n    let resolvedBaseUrl;\n    if (jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.baseUrl) {\n        resolvedBaseUrl = {\n            baseUrl: path.resolve(dir, jsConfig.compilerOptions.baseUrl),\n            isImplicit: false\n        };\n    } else {\n        if (implicitBaseurl) {\n            resolvedBaseUrl = {\n                baseUrl: implicitBaseurl,\n                isImplicit: true\n            };\n        }\n    }\n    return {\n        useTypeScript,\n        jsConfig,\n        resolvedBaseUrl,\n        jsConfigPath: useTypeScript ? tsConfigPath : fs.existsSync(jsConfigPath) ? jsConfigPath : undefined\n    };\n}\n\n//# sourceMappingURL=load-jsconfig.js.map"
        }
    ]
}