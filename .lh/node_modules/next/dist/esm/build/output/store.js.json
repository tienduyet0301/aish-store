{
    "sourceFile": "node_modules/next/dist/esm/build/output/store.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892748047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import createStore from 'next/dist/compiled/unistore';\nimport stripAnsi from 'next/dist/compiled/strip-ansi';\nimport { flushAllTraces, trace } from '../../trace';\nimport { teardownTraceSubscriber } from '../swc';\nimport * as Log from './log';\nconst MAX_LOG_SKIP_DURATION = 500 // 500ms\n;\nexport function formatTrigger(trigger) {\n    // Format dynamic sitemap routes to simpler file path\n    // e.g., /sitemap.xml[] -> /sitemap.xml\n    if (trigger.includes('[__metadata_id__]')) {\n        trigger = trigger.replace('/[__metadata_id__]', '/[id]');\n    }\n    if (trigger.length > 1 && trigger.endsWith('/')) {\n        trigger = trigger.slice(0, -1);\n    }\n    return trigger;\n}\nexport const store = createStore({\n    appUrl: null,\n    bindAddr: null,\n    bootstrap: true,\n    logging: true\n});\nlet lastStore = {\n    appUrl: null,\n    bindAddr: null,\n    bootstrap: true,\n    logging: true\n};\nfunction hasStoreChanged(nextStore) {\n    if ([\n        ...new Set([\n            ...Object.keys(lastStore),\n            ...Object.keys(nextStore)\n        ])\n    ].every((key)=>Object.is(lastStore[key], nextStore[key]))) {\n        return false;\n    }\n    lastStore = nextStore;\n    return true;\n}\nlet startTime = 0;\nlet trigger = '' // default, use empty string for trigger\n;\nlet triggerUrl = undefined;\nlet loadingLogTimer = null;\nlet traceSpan = null;\nlet logging = true;\nstore.subscribe((state)=>{\n    // Update persisted logging state\n    if ('logging' in state) {\n        logging = state.logging;\n    }\n    // If logging is disabled, do not log\n    if (!logging) {\n        return;\n    }\n    if (!hasStoreChanged(state)) {\n        return;\n    }\n    if (state.bootstrap) {\n        return;\n    }\n    if (state.loading) {\n        if (state.trigger) {\n            trigger = formatTrigger(state.trigger);\n            triggerUrl = state.url;\n            if (trigger !== 'initial') {\n                traceSpan = trace('compile-path', undefined, {\n                    trigger: trigger\n                });\n                if (!loadingLogTimer) {\n                    // Only log compiling if compiled is not finished in 3 seconds\n                    loadingLogTimer = setTimeout(()=>{\n                        if (triggerUrl && triggerUrl !== trigger && process.env.NEXT_TRIGGER_URL) {\n                            Log.wait(`Compiling ${trigger} (${triggerUrl}) ...`);\n                        } else {\n                            Log.wait(`Compiling ${trigger} ...`);\n                        }\n                    }, MAX_LOG_SKIP_DURATION);\n                }\n            }\n        }\n        if (startTime === 0) {\n            startTime = Date.now();\n        }\n        return;\n    }\n    if (state.errors) {\n        // Log compilation errors\n        Log.error(state.errors[0]);\n        const cleanError = stripAnsi(state.errors[0]);\n        if (cleanError.indexOf('SyntaxError') > -1) {\n            const matches = cleanError.match(/\\[.*\\]=/);\n            if (matches) {\n                for (const match of matches){\n                    const prop = (match.split(']').shift() || '').slice(1);\n                    console.log(`AMP bind syntax [${prop}]='' is not supported in JSX, use 'data-amp-bind-${prop}' instead. https://nextjs.org/docs/messages/amp-bind-jsx-alt`);\n                }\n                return;\n            }\n        }\n        startTime = 0;\n        // Ensure traces are flushed after each compile in development mode\n        flushAllTraces();\n        teardownTraceSubscriber();\n        return;\n    }\n    let timeMessage = '';\n    if (startTime) {\n        const time = Date.now() - startTime;\n        startTime = 0;\n        timeMessage = ' ' + (time > 2000 ? `in ${Math.round(time / 100) / 10}s` : `in ${time}ms`);\n    }\n    let modulesMessage = '';\n    if (state.totalModulesCount) {\n        modulesMessage = ` (${state.totalModulesCount} modules)`;\n    }\n    if (state.warnings) {\n        Log.warn(state.warnings.join('\\n\\n'));\n        // Ensure traces are flushed after each compile in development mode\n        flushAllTraces();\n        teardownTraceSubscriber();\n        return;\n    }\n    if (state.typeChecking) {\n        Log.info(`bundled ${trigger}${timeMessage}${modulesMessage}, type checking...`);\n        return;\n    }\n    if (trigger === 'initial') {\n        trigger = '';\n    } else {\n        if (loadingLogTimer) {\n            clearTimeout(loadingLogTimer);\n            loadingLogTimer = null;\n        }\n        if (traceSpan) {\n            traceSpan.stop();\n            traceSpan = null;\n        }\n        Log.event(`Compiled${trigger ? ' ' + trigger : ''}${timeMessage}${modulesMessage}`);\n        trigger = '';\n    }\n    // Ensure traces are flushed after each compile in development mode\n    flushAllTraces();\n    teardownTraceSubscriber();\n});\n\n//# sourceMappingURL=store.js.map"
        }
    ]
}