{
    "sourceFile": "node_modules/next/dist/esm/build/compiler.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892746194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import getWebpackBundler from '../shared/lib/get-webpack-bundler';\nfunction generateStats(result, stat) {\n    const { errors, warnings } = stat.toJson({\n        preset: 'errors-warnings',\n        moduleTrace: true\n    });\n    if (errors && errors.length > 0) {\n        result.errors.push(...errors);\n    }\n    if (warnings && warnings.length > 0) {\n        result.warnings.push(...warnings);\n    }\n    return result;\n}\n// Webpack 5 requires the compiler to be closed (to save caches)\n// Webpack 4 does not have this close method so in order to be backwards compatible we check if it exists\nfunction closeCompiler(compiler) {\n    return new Promise((resolve, reject)=>{\n        // @ts-ignore Close only exists on the compiler in webpack 5\n        return compiler.close((err)=>err ? reject(err) : resolve());\n    });\n}\nexport function runCompiler(config, { runWebpackSpan, inputFileSystem }) {\n    return new Promise((resolve, reject)=>{\n        const compiler = getWebpackBundler()(config);\n        // Ensure we use the previous inputFileSystem\n        if (inputFileSystem) {\n            compiler.inputFileSystem = inputFileSystem;\n        }\n        compiler.fsStartTime = Date.now();\n        compiler.run((err, stats)=>{\n            const webpackCloseSpan = runWebpackSpan.traceChild('webpack-close', {\n                name: config.name || 'unknown'\n            });\n            webpackCloseSpan.traceAsyncFn(()=>closeCompiler(compiler)).then(()=>{\n                if (err) {\n                    const reason = err.stack ?? err.toString();\n                    if (reason) {\n                        return resolve([\n                            {\n                                errors: [\n                                    {\n                                        message: reason,\n                                        details: err.details\n                                    }\n                                ],\n                                warnings: [],\n                                stats\n                            },\n                            compiler.inputFileSystem\n                        ]);\n                    }\n                    return reject(err);\n                } else if (!stats) throw Object.defineProperty(new Error('No Stats from webpack'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E370\",\n                    enumerable: false,\n                    configurable: true\n                });\n                const result = webpackCloseSpan.traceChild('webpack-generate-error-stats').traceFn(()=>generateStats({\n                        errors: [],\n                        warnings: [],\n                        stats\n                    }, stats));\n                return resolve([\n                    result,\n                    compiler.inputFileSystem\n                ]);\n            });\n        });\n    });\n}\n\n//# sourceMappingURL=compiler.js.map"
        }
    ]
}