{
    "sourceFile": "node_modules/next/dist/esm/client/react-client-callbacks/on-recoverable-error.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892790678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// This module can be shared between both pages router and app router\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr';\nimport { reportGlobalError } from './report-global-error';\nimport { getReactStitchedError } from '../components/errors/stitched-error';\nimport isError from '../../lib/is-error';\nexport const onRecoverableError = (error, errorInfo)=>{\n    // x-ref: https://github.com/facebook/react/pull/28736\n    const cause = isError(error) && 'cause' in error ? error.cause : error;\n    const stitchedError = getReactStitchedError(cause);\n    // In development mode, pass along the component stack to the error\n    if (process.env.NODE_ENV === 'development' && errorInfo.componentStack) {\n        ;\n        stitchedError._componentStack = errorInfo.componentStack;\n    }\n    // Skip certain custom errors which are not expected to be reported on client\n    if (isBailoutToCSRError(cause)) return;\n    reportGlobalError(stitchedError);\n};\n\n//# sourceMappingURL=on-recoverable-error.js.map"
        }
    ]
}