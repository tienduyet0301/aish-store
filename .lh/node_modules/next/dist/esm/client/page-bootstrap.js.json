{
    "sourceFile": "node_modules/next/dist/esm/client/page-bootstrap.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892789718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import '../lib/require-instrumentation-client';\nimport { hydrate, router } from './';\nimport initOnDemandEntries from './dev/on-demand-entries-client';\nimport { devBuildIndicator } from './dev/dev-build-indicator/internal/dev-build-indicator';\nimport { displayContent } from './dev/fouc';\nimport { connectHMR, addMessageListener } from './components/react-dev-overlay/pages/websocket';\nimport { assign, urlQueryToSearchParams } from '../shared/lib/router/utils/querystring';\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from '../server/dev/hot-reloader-types';\nimport { RuntimeErrorHandler } from './components/errors/runtime-error-handler';\nimport { REACT_REFRESH_FULL_RELOAD_FROM_ERROR } from './components/react-dev-overlay/shared';\nimport { performFullReload } from './components/react-dev-overlay/pages/hot-reloader-client';\nimport { initializeDevBuildIndicatorForPageRouter } from './dev/dev-build-indicator/initialize-for-page-router';\nexport function pageBootstrap(assetPrefix) {\n    connectHMR({\n        assetPrefix,\n        path: '/_next/webpack-hmr'\n    });\n    return hydrate({\n        beforeRender: displayContent\n    }).then(()=>{\n        initOnDemandEntries();\n        initializeDevBuildIndicatorForPageRouter();\n        let reloading = false;\n        addMessageListener((payload)=>{\n            if (reloading) return;\n            if ('action' in payload) {\n                switch(payload.action){\n                    case HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ERROR:\n                        {\n                            const { stack, message } = JSON.parse(payload.errorJSON);\n                            const error = Object.defineProperty(new Error(message), \"__NEXT_ERROR_CODE\", {\n                                value: \"E394\",\n                                enumerable: false,\n                                configurable: true\n                            });\n                            error.stack = stack;\n                            throw error;\n                        }\n                    case HMR_ACTIONS_SENT_TO_BROWSER.RELOAD_PAGE:\n                        {\n                            reloading = true;\n                            window.location.reload();\n                            break;\n                        }\n                    case HMR_ACTIONS_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE:\n                        {\n                            fetch(\"\" + assetPrefix + \"/_next/static/development/_devPagesManifest.json\").then((res)=>res.json()).then((manifest)=>{\n                                window.__DEV_PAGES_MANIFEST = manifest;\n                            }).catch((err)=>{\n                                console.log(\"Failed to fetch devPagesManifest\", err);\n                            });\n                            break;\n                        }\n                    default:\n                        break;\n                }\n            } else if ('event' in payload) {\n                switch(payload.event){\n                    case HMR_ACTIONS_SENT_TO_BROWSER.MIDDLEWARE_CHANGES:\n                        {\n                            return window.location.reload();\n                        }\n                    case HMR_ACTIONS_SENT_TO_BROWSER.CLIENT_CHANGES:\n                        {\n                            // This is used in `../server/dev/turbopack-utils.ts`.\n                            const isOnErrorPage = window.next.router.pathname === '/_error';\n                            // On the error page we want to reload the page when a page was changed\n                            if (isOnErrorPage) {\n                                if (RuntimeErrorHandler.hadRuntimeError) {\n                                    console.warn(REACT_REFRESH_FULL_RELOAD_FROM_ERROR);\n                                }\n                                reloading = true;\n                                performFullReload(null);\n                            }\n                            break;\n                        }\n                    case HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ONLY_CHANGES:\n                        {\n                            if (RuntimeErrorHandler.hadRuntimeError) {\n                                console.warn(REACT_REFRESH_FULL_RELOAD_FROM_ERROR);\n                                performFullReload(null);\n                            }\n                            const { pages } = payload;\n                            // Make sure to reload when the dev-overlay is showing for an\n                            // API route\n                            // TODO: Fix `__NEXT_PAGE` type\n                            if (pages.includes(router.query.__NEXT_PAGE)) {\n                                return window.location.reload();\n                            }\n                            if (!router.clc && pages.includes(router.pathname)) {\n                                console.log('Refreshing page data due to server-side change');\n                                devBuildIndicator.show();\n                                const clearIndicator = ()=>devBuildIndicator.hide();\n                                router.replace(router.pathname + '?' + String(assign(urlQueryToSearchParams(router.query), new URLSearchParams(location.search))), router.asPath, {\n                                    scroll: false\n                                }).catch(()=>{\n                                    // trigger hard reload when failing to refresh data\n                                    // to show error overlay properly\n                                    location.reload();\n                                }).finally(clearIndicator);\n                            }\n                            break;\n                        }\n                    default:\n                        break;\n                }\n            }\n        });\n    });\n}\n\n//# sourceMappingURL=page-bootstrap.js.map"
        }
    ]
}