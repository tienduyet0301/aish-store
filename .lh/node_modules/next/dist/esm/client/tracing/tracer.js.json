{
    "sourceFile": "node_modules/next/dist/esm/client/tracing/tracer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892795819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import mitt from '../../shared/lib/mitt';\nclass Span {\n    end(endTime) {\n        if (this.state.state === 'ended') {\n            throw Object.defineProperty(new Error('Span has already ended'), \"__NEXT_ERROR_CODE\", {\n                value: \"E17\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        this.state = {\n            state: 'ended',\n            endTime: endTime != null ? endTime : Date.now()\n        };\n        this.onSpanEnd(this);\n    }\n    constructor(name, options, onSpanEnd){\n        this.name = name;\n        var _options_attributes;\n        this.attributes = (_options_attributes = options.attributes) != null ? _options_attributes : {};\n        var _options_startTime;\n        this.startTime = (_options_startTime = options.startTime) != null ? _options_startTime : Date.now();\n        this.onSpanEnd = onSpanEnd;\n        this.state = {\n            state: 'inprogress'\n        };\n    }\n}\nclass Tracer {\n    startSpan(name, options) {\n        return new Span(name, options, this.handleSpanEnd);\n    }\n    onSpanEnd(cb) {\n        this._emitter.on('spanend', cb);\n        return ()=>{\n            this._emitter.off('spanend', cb);\n        };\n    }\n    constructor(){\n        this._emitter = mitt();\n        this.handleSpanEnd = (span)=>{\n            this._emitter.emit('spanend', span);\n        };\n    }\n}\nexport default new Tracer();\n\n//# sourceMappingURL=tracer.js.map"
        }
    ]
}