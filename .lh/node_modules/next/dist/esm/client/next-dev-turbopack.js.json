{
    "sourceFile": "node_modules/next/dist/esm/client/next-dev-turbopack.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892788463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// TODO: Remove use of `any` type.\nimport { initialize, version, router, emitter } from './';\nimport initHMR from './dev/hot-middleware-client';\nimport { pageBootstrap } from './page-bootstrap';\n//@ts-expect-error requires \"moduleResolution\": \"node16\" in tsconfig.json and not .ts extension\nimport { connect } from '@vercel/turbopack-ecmascript-runtime/browser/dev/hmr-client/hmr-client.ts';\nwindow.next = {\n    version: \"\" + version + \"-turbo\",\n    // router is initialized later so it has to be live-binded\n    get router () {\n        return router;\n    },\n    emitter\n};\nself.__next_set_public_path__ = ()=>{};\nself.__webpack_hash__ = '';\nconst devClient = initHMR();\ninitialize({\n    devClient\n}).then((param)=>{\n    let { assetPrefix } = param;\n    // for the page loader\n    ;\n    self.__turbopack_load_page_chunks__ = (page, chunksData)=>{\n        const chunkPromises = chunksData.map(__turbopack_load__);\n        Promise.all(chunkPromises).catch((err)=>console.error('failed to load chunks for page ' + page, err));\n    };\n    connect({\n        addMessageListener (cb) {\n            devClient.addTurbopackMessageListener(cb);\n        },\n        sendMessage: devClient.sendTurbopackMessage,\n        onUpdateError: devClient.handleUpdateError\n    });\n    return pageBootstrap(assetPrefix);\n}).catch((err)=>{\n    console.error('Error was not caught', err);\n});\n\n//# sourceMappingURL=next-dev-turbopack.js.map"
        }
    ]
}