{
    "sourceFile": "node_modules/next/dist/esm/client/app-dir/form.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892762471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useContext } from 'react';\nimport { addBasePath } from '../add-base-path';\nimport { useMergedRef } from '../use-merged-ref';\nimport { AppRouterContext } from '../../shared/lib/app-router-context.shared-runtime';\nimport { PrefetchKind } from '../components/router-reducer/router-reducer-types';\nimport { checkFormActionUrl, createFormSubmitDestinationUrl, DISALLOWED_FORM_PROPS, hasReactClientActionAttributes, hasUnsupportedSubmitterAttributes } from '../form-shared';\nimport { mountFormInstance, unmountPrefetchableInstance } from '../components/links';\nexport default function Form(param) {\n    let { replace, scroll, prefetch: prefetchProp, ref: externalRef, ...props } = param;\n    const router = useContext(AppRouterContext);\n    const actionProp = props.action;\n    const isNavigatingForm = typeof actionProp === 'string';\n    // Validate `action`\n    if (process.env.NODE_ENV === 'development') {\n        if (isNavigatingForm) {\n            checkFormActionUrl(actionProp, 'action');\n        }\n    }\n    // Validate `prefetch`\n    if (process.env.NODE_ENV === 'development') {\n        if (!(prefetchProp === undefined || prefetchProp === false || prefetchProp === null)) {\n            console.error('The `prefetch` prop of <Form> must be `false` or `null`');\n        }\n        if (prefetchProp !== undefined && !isNavigatingForm) {\n            console.error('Passing `prefetch` to a <Form> whose `action` is a function has no effect.');\n        }\n    }\n    const prefetch = prefetchProp === false || prefetchProp === null ? prefetchProp : null;\n    // Validate `scroll` and `replace`\n    if (process.env.NODE_ENV === 'development') {\n        if (!isNavigatingForm && (replace !== undefined || scroll !== undefined)) {\n            console.error('Passing `replace` or `scroll` to a <Form> whose `action` is a function has no effect.\\n' + 'See the relevant docs to learn how to control this behavior for navigations triggered from actions:\\n' + '  `redirect()`       - https://nextjs.org/docs/app/api-reference/functions/redirect#parameters\\n' + '  `router.replace()` - https://nextjs.org/docs/app/api-reference/functions/use-router#userouter\\n');\n        }\n    }\n    // Clean up any unsupported form props (and warn if present)\n    for (const key of DISALLOWED_FORM_PROPS){\n        if (key in props) {\n            if (process.env.NODE_ENV === 'development') {\n                console.error(\"<Form> does not support changing `\" + key + \"`. \" + (isNavigatingForm ? \"If you'd like to use it to perform a mutation, consider making `action` a function instead.\\n\" + \"Learn more: https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations\" : ''));\n            }\n            delete props[key];\n        }\n    }\n    const isPrefetchEnabled = // if we don't have an action path, we can't prefetch anything.\n    !!router && isNavigatingForm && prefetch === null;\n    const observeFormVisibilityOnMount = useCallback((element)=>{\n        if (isPrefetchEnabled && router !== null) {\n            mountFormInstance(element, actionProp, router, PrefetchKind.AUTO);\n        }\n        return ()=>{\n            unmountPrefetchableInstance(element);\n        };\n    }, [\n        isPrefetchEnabled,\n        actionProp,\n        router\n    ]);\n    const mergedRef = useMergedRef(observeFormVisibilityOnMount, externalRef != null ? externalRef : null);\n    if (!isNavigatingForm) {\n        return /*#__PURE__*/ _jsx(\"form\", {\n            ...props,\n            ref: mergedRef\n        });\n    }\n    const actionHref = addBasePath(actionProp);\n    return /*#__PURE__*/ _jsx(\"form\", {\n        ...props,\n        ref: mergedRef,\n        action: actionHref,\n        onSubmit: (event)=>onFormSubmit(event, {\n                router,\n                actionHref,\n                replace,\n                scroll,\n                onSubmit: props.onSubmit\n            })\n    });\n}\nfunction onFormSubmit(event, param) {\n    let { actionHref, onSubmit, replace, scroll, router } = param;\n    if (typeof onSubmit === 'function') {\n        onSubmit(event);\n        // if the user called event.preventDefault(), do nothing.\n        // (this matches what Link does for `onClick`)\n        if (event.defaultPrevented) {\n            return;\n        }\n    }\n    if (!router) {\n        // Form was somehow used outside of the router (but not in pages, the implementation is forked!).\n        // We can't perform a soft navigation, so let the native submit handling do its thing.\n        return;\n    }\n    const formElement = event.currentTarget;\n    const submitter = event.nativeEvent.submitter;\n    let action = actionHref;\n    if (submitter) {\n        if (process.env.NODE_ENV === 'development') {\n            // the way server actions are encoded (e.g. `formMethod=\"post\")\n            // causes some unnecessary dev-mode warnings from `hasUnsupportedSubmitterAttributes`.\n            // we'd bail out anyway, but we just do it silently.\n            if (hasReactServerActionAttributes(submitter)) {\n                return;\n            }\n        }\n        if (hasUnsupportedSubmitterAttributes(submitter)) {\n            return;\n        }\n        // client actions have `formAction=\"javascript:...\"`. We obviously can't prefetch/navigate to that.\n        if (hasReactClientActionAttributes(submitter)) {\n            return;\n        }\n        // If the submitter specified an alternate formAction,\n        // use that URL instead -- this is what a native form would do.\n        // NOTE: `submitter.formAction` is unreliable, because it will give us `location.href` if it *wasn't* set\n        // NOTE: this should not have `basePath` added, because we can't add it before hydration\n        const submitterFormAction = submitter.getAttribute('formAction');\n        if (submitterFormAction !== null) {\n            if (process.env.NODE_ENV === 'development') {\n                checkFormActionUrl(submitterFormAction, 'formAction');\n            }\n            action = submitterFormAction;\n        }\n    }\n    const targetUrl = createFormSubmitDestinationUrl(action, formElement);\n    // Finally, no more reasons for bailing out.\n    event.preventDefault();\n    const method = replace ? 'replace' : 'push';\n    const targetHref = targetUrl.href;\n    router[method](targetHref, {\n        scroll\n    });\n}\nfunction hasReactServerActionAttributes(submitter) {\n    // https://github.com/facebook/react/blob/942eb80381b96f8410eab1bef1c539bed1ab0eb1/packages/react-client/src/ReactFlightReplyClient.js#L931-L934\n    const name = submitter.getAttribute('name');\n    return name && (name.startsWith('$ACTION_ID_') || name.startsWith('$ACTION_REF_'));\n}\n\n//# sourceMappingURL=form.js.map"
        }
    ]
}