{
    "sourceFile": "node_modules/next/dist/esm/client/page-loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892789817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { addBasePath } from './add-base-path';\nimport { interpolateAs } from '../shared/lib/router/utils/interpolate-as';\nimport getAssetPathFromRoute from '../shared/lib/router/utils/get-asset-path-from-route';\nimport { addLocale } from './add-locale';\nimport { isDynamicRoute } from '../shared/lib/router/utils/is-dynamic';\nimport { parseRelativeUrl } from '../shared/lib/router/utils/parse-relative-url';\nimport { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash';\nimport { createRouteLoader, getClientBuildManifest } from './route-loader';\nimport { DEV_CLIENT_PAGES_MANIFEST, DEV_CLIENT_MIDDLEWARE_MANIFEST, TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST } from '../shared/lib/constants';\nclass PageLoader {\n    getPageList() {\n        if (process.env.NODE_ENV === 'production') {\n            return getClientBuildManifest().then((manifest)=>manifest.sortedPages);\n        } else {\n            if (window.__DEV_PAGES_MANIFEST) {\n                return window.__DEV_PAGES_MANIFEST.pages;\n            } else {\n                this.promisedDevPagesManifest || (this.promisedDevPagesManifest = fetch(this.assetPrefix + \"/_next/static/development/\" + DEV_CLIENT_PAGES_MANIFEST, {\n                    credentials: 'same-origin'\n                }).then((res)=>res.json()).then((manifest)=>{\n                    window.__DEV_PAGES_MANIFEST = manifest;\n                    return manifest.pages;\n                }).catch((err)=>{\n                    console.log(\"Failed to fetch devPagesManifest:\", err);\n                    throw Object.defineProperty(new Error(\"Failed to fetch _devPagesManifest.json. Is something blocking that network request?\\n\" + 'Read more: https://nextjs.org/docs/messages/failed-to-fetch-devpagesmanifest'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E423\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }));\n                return this.promisedDevPagesManifest;\n            }\n        }\n    }\n    getMiddleware() {\n        // Webpack production\n        if (process.env.NODE_ENV === 'production' && process.env.__NEXT_MIDDLEWARE_MATCHERS) {\n            const middlewareMatchers = process.env.__NEXT_MIDDLEWARE_MATCHERS;\n            window.__MIDDLEWARE_MATCHERS = middlewareMatchers ? middlewareMatchers : undefined;\n            return window.__MIDDLEWARE_MATCHERS;\n        // Turbopack production\n        } else if (process.env.NODE_ENV === 'production') {\n            if (window.__MIDDLEWARE_MATCHERS) {\n                return window.__MIDDLEWARE_MATCHERS;\n            } else {\n                if (!this.promisedMiddlewareMatchers) {\n                    // TODO: Decide what should happen when fetching fails instead of asserting\n                    // @ts-ignore\n                    this.promisedMiddlewareMatchers = fetch(this.assetPrefix + \"/_next/static/\" + this.buildId + \"/\" + TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST, {\n                        credentials: 'same-origin'\n                    }).then((res)=>res.json()).then((matchers)=>{\n                        window.__MIDDLEWARE_MATCHERS = matchers;\n                        return matchers;\n                    }).catch((err)=>{\n                        console.log(\"Failed to fetch _devMiddlewareManifest\", err);\n                    });\n                }\n                // TODO Remove this assertion as this could be undefined\n                return this.promisedMiddlewareMatchers;\n            }\n        // Development both Turbopack and Webpack\n        } else {\n            if (window.__DEV_MIDDLEWARE_MATCHERS) {\n                return window.__DEV_MIDDLEWARE_MATCHERS;\n            } else {\n                if (!this.promisedMiddlewareMatchers) {\n                    // TODO: Decide what should happen when fetching fails instead of asserting\n                    // @ts-ignore\n                    this.promisedMiddlewareMatchers = fetch(this.assetPrefix + \"/_next/static/\" + this.buildId + \"/\" + DEV_CLIENT_MIDDLEWARE_MANIFEST, {\n                        credentials: 'same-origin'\n                    }).then((res)=>res.json()).then((matchers)=>{\n                        window.__DEV_MIDDLEWARE_MATCHERS = matchers;\n                        return matchers;\n                    }).catch((err)=>{\n                        console.log(\"Failed to fetch _devMiddlewareManifest\", err);\n                    });\n                }\n                // TODO Remove this assertion as this could be undefined\n                return this.promisedMiddlewareMatchers;\n            }\n        }\n    }\n    getDataHref(params) {\n        const { asPath, href, locale } = params;\n        const { pathname: hrefPathname, query, search } = parseRelativeUrl(href);\n        const { pathname: asPathname } = parseRelativeUrl(asPath);\n        const route = removeTrailingSlash(hrefPathname);\n        if (route[0] !== '/') {\n            throw Object.defineProperty(new Error('Route name should start with a \"/\", got \"' + route + '\"'), \"__NEXT_ERROR_CODE\", {\n                value: \"E303\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const getHrefForSlug = (path)=>{\n            const dataRoute = getAssetPathFromRoute(removeTrailingSlash(addLocale(path, locale)), '.json');\n            return addBasePath(\"/_next/data/\" + this.buildId + dataRoute + search, true);\n        };\n        return getHrefForSlug(params.skipInterpolation ? asPathname : isDynamicRoute(route) ? interpolateAs(hrefPathname, asPathname, query).result : route);\n    }\n    _isSsg(/** the route (file-system path) */ route) {\n        return this.promisedSsgManifest.then((manifest)=>manifest.has(route));\n    }\n    loadPage(route) {\n        return this.routeLoader.loadRoute(route).then((res)=>{\n            if ('component' in res) {\n                return {\n                    page: res.component,\n                    mod: res.exports,\n                    styleSheets: res.styles.map((o)=>({\n                            href: o.href,\n                            text: o.content\n                        }))\n                };\n            }\n            throw res.error;\n        });\n    }\n    prefetch(route) {\n        return this.routeLoader.prefetch(route);\n    }\n    constructor(buildId, assetPrefix){\n        this.routeLoader = createRouteLoader(assetPrefix);\n        this.buildId = buildId;\n        this.assetPrefix = assetPrefix;\n        this.promisedSsgManifest = new Promise((resolve)=>{\n            if (window.__SSG_MANIFEST) {\n                resolve(window.__SSG_MANIFEST);\n            } else {\n                window.__SSG_MANIFEST_CB = ()=>{\n                    resolve(window.__SSG_MANIFEST);\n                };\n            }\n        });\n    }\n}\nexport { PageLoader as default };\n\n//# sourceMappingURL=page-loader.js.map"
        }
    ]
}