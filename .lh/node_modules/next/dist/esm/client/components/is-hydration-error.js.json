{
    "sourceFile": "node_modules/next/dist/esm/client/components/is-hydration-error.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892765509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import isError from '../../lib/is-error';\nconst hydrationErrorRegex = /hydration failed|while hydrating|content does not match|did not match|HTML didn't match|text didn't match/i;\nconst reactUnifiedMismatchWarning = \"Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\";\nconst reactHydrationStartMessages = [\n    reactUnifiedMismatchWarning,\n    \"Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\",\n    \"A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\"\n];\nexport const REACT_HYDRATION_ERROR_LINK = 'https://react.dev/link/hydration-mismatch';\nexport const NEXTJS_HYDRATION_ERROR_LINK = 'https://nextjs.org/docs/messages/react-hydration-error';\nexport const getDefaultHydrationErrorMessage = ()=>{\n    return reactUnifiedMismatchWarning;\n};\nexport function isHydrationError(error) {\n    return isError(error) && hydrationErrorRegex.test(error.message);\n}\nexport function isReactHydrationErrorMessage(msg) {\n    return reactHydrationStartMessages.some((prefix)=>msg.startsWith(prefix));\n}\nconst hydrationWarningRegexes = [\n    /^In HTML, (.+?) cannot be a child of <(.+?)>\\.(.*)\\nThis will cause a hydration error\\.(.*)/,\n    /^In HTML, (.+?) cannot be a descendant of <(.+?)>\\.\\nThis will cause a hydration error\\.(.*)/,\n    /^In HTML, text nodes cannot be a child of <(.+?)>\\.\\nThis will cause a hydration error\\./,\n    /^In HTML, whitespace text nodes cannot be a child of <(.+?)>\\. Make sure you don't have any extra whitespace between tags on each line of your source code\\.\\nThis will cause a hydration error\\./,\n    /^Expected server HTML to contain a matching <(.+?)> in <(.+?)>\\.(.*)/,\n    /^Did not expect server HTML to contain a <(.+?)> in <(.+?)>\\.(.*)/,\n    /^Expected server HTML to contain a matching text node for \"(.+?)\" in <(.+?)>\\.(.*)/,\n    /^Did not expect server HTML to contain the text node \"(.+?)\" in <(.+?)>\\.(.*)/,\n    /^Text content did not match\\. Server: \"(.+?)\" Client: \"(.+?)\"(.*)/\n];\nexport function testReactHydrationWarning(msg) {\n    if (typeof msg !== 'string' || !msg) return false;\n    // React 18 has the `Warning: ` prefix.\n    // React 19 does not.\n    if (msg.startsWith('Warning: ')) {\n        msg = msg.slice('Warning: '.length);\n    }\n    return hydrationWarningRegexes.some((regex)=>regex.test(msg));\n}\nexport function getHydrationErrorStackInfo(rawMessage) {\n    rawMessage = rawMessage.replace(/^Error: /, '');\n    rawMessage = rawMessage.replace('Warning: ', '');\n    const isReactHydrationWarning = testReactHydrationWarning(rawMessage);\n    if (!isReactHydrationErrorMessage(rawMessage) && !isReactHydrationWarning) {\n        return {\n            message: null,\n            stack: rawMessage,\n            diff: ''\n        };\n    }\n    if (isReactHydrationWarning) {\n        const [message, diffLog] = rawMessage.split('\\n\\n');\n        return {\n            message: message.trim(),\n            stack: '',\n            diff: (diffLog || '').trim()\n        };\n    }\n    const firstLineBreak = rawMessage.indexOf('\\n');\n    rawMessage = rawMessage.slice(firstLineBreak + 1).trim();\n    const [message, trailing] = rawMessage.split(\"\" + REACT_HYDRATION_ERROR_LINK);\n    const trimmedMessage = message.trim();\n    // React built-in hydration diff starts with a newline, checking if length is > 1\n    if (trailing && trailing.length > 1) {\n        const stacks = [];\n        const diffs = [];\n        trailing.split('\\n').forEach((line)=>{\n            if (line.trim() === '') return;\n            if (line.trim().startsWith('at ')) {\n                stacks.push(line);\n            } else {\n                diffs.push(line);\n            }\n        });\n        return {\n            message: trimmedMessage,\n            diff: diffs.join('\\n'),\n            stack: stacks.join('\\n')\n        };\n    } else {\n        return {\n            message: trimmedMessage,\n            stack: trailing\n        };\n    }\n}\n\n//# sourceMappingURL=is-hydration-error.js.map"
        }
    ]
}