{
    "sourceFile": "node_modules/next/dist/esm/client/components/client-segment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892763813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { InvariantError } from '../../shared/lib/invariant-error';\n/**\n * When the Page is a client component we send the params to this client wrapper\n * where they are turned into dynamically tracked values before being passed to the actual Segment component.\n *\n * additionally we may send a promise representing params. We don't ever use this passed\n * value but it can be necessary for the sender to send a Promise that doesn't resolve in certain situations\n * such as when dynamicIO is enabled. It is up to the caller to decide if the promises are needed.\n */ export function ClientSegmentRoot(param) {\n    let { Component, slots, params, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    promise } = param;\n    if (typeof window === 'undefined') {\n        const { workAsyncStorage } = require('../../server/app-render/work-async-storage.external');\n        let clientParams;\n        // We are going to instrument the searchParams prop with tracking for the\n        // appropriate context. We wrap differently in prerendering vs rendering\n        const store = workAsyncStorage.getStore();\n        if (!store) {\n            throw Object.defineProperty(new InvariantError('Expected workStore to exist when handling params in a client segment such as a Layout or Template.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E600\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const { createParamsFromClient } = require('../../server/request/params');\n        clientParams = createParamsFromClient(params, store);\n        return /*#__PURE__*/ _jsx(Component, {\n            ...slots,\n            params: clientParams\n        });\n    } else {\n        const { createRenderParamsFromClient } = require('../request/params.browser');\n        const clientParams = createRenderParamsFromClient(params);\n        return /*#__PURE__*/ _jsx(Component, {\n            ...slots,\n            params: clientParams\n        });\n    }\n}\n\n//# sourceMappingURL=client-segment.js.map"
        }
    ]
}