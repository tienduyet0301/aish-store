{
    "sourceFile": "node_modules/next/dist/esm/client/components/router-reducer/aliased-prefetch-navigations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892779594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { addSearchParamsIfPageSegment, PAGE_SEGMENT_KEY } from '../../../shared/lib/segment';\nimport { createEmptyCacheNode } from '../app-router';\nimport { applyRouterStatePatchToTree } from './apply-router-state-patch-to-tree';\nimport { createHrefFromUrl } from './create-href-from-url';\nimport { createRouterCacheKey } from './create-router-cache-key';\nimport { fillCacheWithNewSubTreeDataButOnlyLoading } from './fill-cache-with-new-subtree-data';\nimport { handleMutable } from './handle-mutable';\n/**\n * This is a stop-gap until per-segment caching is implemented. It leverages the `aliased` flag that is added\n * to prefetch entries when it's determined that the loading state from that entry should be used for this navigation.\n * This function takes the aliased entry and only applies the loading state to the updated cache node.\n * We should remove this once per-segment fetching is implemented as ideally the prefetch cache will contain a\n * more granular segment map and so the router will be able to simply re-use the loading segment for the new navigation.\n */ export function handleAliasedPrefetchEntry(navigatedAt, state, flightData, url, mutable) {\n    let currentTree = state.tree;\n    let currentCache = state.cache;\n    const href = createHrefFromUrl(url);\n    let applied;\n    if (typeof flightData === 'string') {\n        return false;\n    }\n    for (const normalizedFlightData of flightData){\n        // If the segment doesn't have a loading component, we don't need to do anything.\n        if (!hasLoadingComponentInSeedData(normalizedFlightData.seedData)) {\n            continue;\n        }\n        let treePatch = normalizedFlightData.tree;\n        // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}). We might return a less specific, param-less entry,\n        // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.\n        // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set\n        treePatch = addSearchParamsToPageSegments(treePatch, Object.fromEntries(url.searchParams));\n        const { seedData, isRootRender, pathToSegment } = normalizedFlightData;\n        // TODO-APP: remove ''\n        const flightSegmentPathWithLeadingEmpty = [\n            '',\n            ...pathToSegment\n        ];\n        // Segments are keyed by searchParams (e.g. __PAGE__?{\"foo\":\"bar\"}). We might return a less specific, param-less entry,\n        // so we ensure that the final tree contains the correct searchParams (reflected in the URL) are provided in the updated FlightRouterState tree.\n        // We only do this on the first read, as otherwise we'd be overwriting the searchParams that may have already been set\n        treePatch = addSearchParamsToPageSegments(treePatch, Object.fromEntries(url.searchParams));\n        let newTree = applyRouterStatePatchToTree(flightSegmentPathWithLeadingEmpty, currentTree, treePatch, href);\n        const newCache = createEmptyCacheNode();\n        // The prefetch cache entry was aliased -- this signals that we only fill in the cache with the\n        // loading state and not the actual parallel route seed data.\n        if (isRootRender && seedData) {\n            // Fill in the cache with the new loading / rsc data\n            const rsc = seedData[1];\n            const loading = seedData[3];\n            newCache.loading = loading;\n            newCache.rsc = rsc;\n            // Construct a new tree and apply the aliased loading state for each parallel route\n            fillNewTreeWithOnlyLoadingSegments(navigatedAt, newCache, currentCache, treePatch, seedData);\n        } else {\n            // Copy rsc for the root node of the cache.\n            newCache.rsc = currentCache.rsc;\n            newCache.prefetchRsc = currentCache.prefetchRsc;\n            newCache.loading = currentCache.loading;\n            newCache.parallelRoutes = new Map(currentCache.parallelRoutes);\n            // copy the loading state only into the leaf node (the part that changed)\n            fillCacheWithNewSubTreeDataButOnlyLoading(navigatedAt, newCache, currentCache, normalizedFlightData);\n        }\n        // If we don't have an updated tree, there's no reason to update the cache, as the tree\n        // dictates what cache nodes to render.\n        if (newTree) {\n            currentTree = newTree;\n            currentCache = newCache;\n            applied = true;\n        }\n    }\n    if (!applied) {\n        return false;\n    }\n    mutable.patchedTree = currentTree;\n    mutable.cache = currentCache;\n    mutable.canonicalUrl = href;\n    mutable.hashFragment = url.hash;\n    return handleMutable(state, mutable);\n}\nfunction hasLoadingComponentInSeedData(seedData) {\n    if (!seedData) return false;\n    const parallelRoutes = seedData[2];\n    const loading = seedData[3];\n    if (loading) {\n        return true;\n    }\n    for(const key in parallelRoutes){\n        if (hasLoadingComponentInSeedData(parallelRoutes[key])) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction fillNewTreeWithOnlyLoadingSegments(navigatedAt, newCache, existingCache, routerState, cacheNodeSeedData) {\n    const isLastSegment = Object.keys(routerState[1]).length === 0;\n    if (isLastSegment) {\n        return;\n    }\n    for(const key in routerState[1]){\n        const parallelRouteState = routerState[1][key];\n        const segmentForParallelRoute = parallelRouteState[0];\n        const cacheKey = createRouterCacheKey(segmentForParallelRoute);\n        const parallelSeedData = cacheNodeSeedData !== null && cacheNodeSeedData[2][key] !== undefined ? cacheNodeSeedData[2][key] : null;\n        let newCacheNode;\n        if (parallelSeedData !== null) {\n            // New data was sent from the server.\n            const rsc = parallelSeedData[1];\n            const loading = parallelSeedData[3];\n            newCacheNode = {\n                lazyData: null,\n                // copy the layout but null the page segment as that's not meant to be used\n                rsc: segmentForParallelRoute.includes(PAGE_SEGMENT_KEY) ? null : rsc,\n                prefetchRsc: null,\n                head: null,\n                prefetchHead: null,\n                parallelRoutes: new Map(),\n                loading,\n                navigatedAt\n            };\n        } else {\n            // No data available for this node. This will trigger a lazy fetch\n            // during render.\n            newCacheNode = {\n                lazyData: null,\n                rsc: null,\n                prefetchRsc: null,\n                head: null,\n                prefetchHead: null,\n                parallelRoutes: new Map(),\n                loading: null,\n                navigatedAt: -1\n            };\n        }\n        const existingParallelRoutes = newCache.parallelRoutes.get(key);\n        if (existingParallelRoutes) {\n            existingParallelRoutes.set(cacheKey, newCacheNode);\n        } else {\n            newCache.parallelRoutes.set(key, new Map([\n                [\n                    cacheKey,\n                    newCacheNode\n                ]\n            ]));\n        }\n        fillNewTreeWithOnlyLoadingSegments(navigatedAt, newCacheNode, existingCache, parallelRouteState, parallelSeedData);\n    }\n}\n/**\n * Add search params to the page segments in the flight router state\n * Page segments that are associated with search params have a page segment key\n * followed by a query string. This function will add those params to the page segment.\n * This is useful if we return an aliased prefetch entry (ie, won't have search params)\n * but the canonical router URL has search params.\n */ export function addSearchParamsToPageSegments(flightRouterState, searchParams) {\n    const [segment, parallelRoutes, ...rest] = flightRouterState;\n    // If it's a page segment, modify the segment by adding search params\n    if (segment.includes(PAGE_SEGMENT_KEY)) {\n        const newSegment = addSearchParamsIfPageSegment(segment, searchParams);\n        return [\n            newSegment,\n            parallelRoutes,\n            ...rest\n        ];\n    }\n    // Otherwise, recurse through the parallel routes and return a new tree\n    const updatedParallelRoutes = {};\n    for (const [key, parallelRoute] of Object.entries(parallelRoutes)){\n        updatedParallelRoutes[key] = addSearchParamsToPageSegments(parallelRoute, searchParams);\n    }\n    return [\n        segment,\n        updatedParallelRoutes,\n        ...rest\n    ];\n}\n\n//# sourceMappingURL=aliased-prefetch-navigations.js.map"
        }
    ]
}