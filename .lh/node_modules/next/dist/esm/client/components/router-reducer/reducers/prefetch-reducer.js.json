{
    "sourceFile": "node_modules/next/dist/esm/client/components/router-reducer/reducers/prefetch-reducer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892783484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { PromiseQueue } from '../../promise-queue';\nimport { getOrCreatePrefetchCacheEntry, prunePrefetchCache } from '../prefetch-cache-utils';\nexport const prefetchQueue = new PromiseQueue(5);\nexport const prefetchReducer = process.env.__NEXT_CLIENT_SEGMENT_CACHE ? identityReducerWhenSegmentCacheIsEnabled : prefetchReducerImpl;\nfunction identityReducerWhenSegmentCacheIsEnabled(state) {\n    // Unlike the old implementation, the Segment Cache doesn't store its data in\n    // the router reducer state.\n    //\n    // This shouldn't be reachable because we wrap the prefetch API in a check,\n    // too, which prevents the action from being dispatched. But it's here for\n    // clarity + code elimination.\n    return state;\n}\nfunction prefetchReducerImpl(state, action) {\n    // let's prune the prefetch cache before we do anything else\n    prunePrefetchCache(state.prefetchCache);\n    const { url } = action;\n    getOrCreatePrefetchCacheEntry({\n        url,\n        nextUrl: state.nextUrl,\n        prefetchCache: state.prefetchCache,\n        kind: action.kind,\n        tree: state.tree,\n        allowAliasing: true\n    });\n    return state;\n}\n\n//# sourceMappingURL=prefetch-reducer.js.map"
        }
    ]
}