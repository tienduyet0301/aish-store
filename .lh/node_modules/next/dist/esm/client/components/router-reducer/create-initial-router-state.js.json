{
    "sourceFile": "node_modules/next/dist/esm/client/components/router-reducer/create-initial-router-state.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892780034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { createHrefFromUrl } from './create-href-from-url';\nimport { fillLazyItemsTillLeafWithHead } from './fill-lazy-items-till-leaf-with-head';\nimport { extractPathFromFlightRouterState } from './compute-changed-path';\nimport { createSeededPrefetchCacheEntry } from './prefetch-cache-utils';\nimport { PrefetchKind } from './router-reducer-types';\nimport { addRefreshMarkerToActiveParallelSegments } from './refetch-inactive-parallel-segments';\nimport { getFlightDataPartsFromPath } from '../../flight-data-helpers';\nexport function createInitialRouterState(param) {\n    let { navigatedAt, initialFlightData, initialCanonicalUrlParts, initialParallelRoutes, location, couldBeIntercepted, postponed, prerendered } = param;\n    // When initialized on the server, the canonical URL is provided as an array of parts.\n    // This is to ensure that when the RSC payload streamed to the client, crawlers don't interpret it\n    // as a URL that should be crawled.\n    const initialCanonicalUrl = initialCanonicalUrlParts.join('/');\n    const normalizedFlightData = getFlightDataPartsFromPath(initialFlightData[0]);\n    const { tree: initialTree, seedData: initialSeedData, head: initialHead } = normalizedFlightData;\n    // For the SSR render, seed data should always be available (we only send back a `null` response\n    // in the case of a `loading` segment, pre-PPR.)\n    const rsc = initialSeedData == null ? void 0 : initialSeedData[1];\n    var _initialSeedData_;\n    const loading = (_initialSeedData_ = initialSeedData == null ? void 0 : initialSeedData[3]) != null ? _initialSeedData_ : null;\n    const cache = {\n        lazyData: null,\n        rsc,\n        prefetchRsc: null,\n        head: null,\n        prefetchHead: null,\n        // The cache gets seeded during the first render. `initialParallelRoutes` ensures the cache from the first render is there during the second render.\n        parallelRoutes: initialParallelRoutes,\n        loading,\n        navigatedAt\n    };\n    const canonicalUrl = // location.href is read as the initial value for canonicalUrl in the browser\n    // This is safe to do as canonicalUrl can't be rendered, it's only used to control the history updates in the useEffect further down in this file.\n    location ? createHrefFromUrl(location) : initialCanonicalUrl;\n    addRefreshMarkerToActiveParallelSegments(initialTree, canonicalUrl);\n    const prefetchCache = new Map();\n    // When the cache hasn't been seeded yet we fill the cache with the head.\n    if (initialParallelRoutes === null || initialParallelRoutes.size === 0) {\n        fillLazyItemsTillLeafWithHead(navigatedAt, cache, undefined, initialTree, initialSeedData, initialHead, undefined);\n    }\n    var // the || operator is intentional, the pathname can be an empty string\n    _ref;\n    const initialState = {\n        tree: initialTree,\n        cache,\n        prefetchCache,\n        pushRef: {\n            pendingPush: false,\n            mpaNavigation: false,\n            // First render needs to preserve the previous window.history.state\n            // to avoid it being overwritten on navigation back/forward with MPA Navigation.\n            preserveCustomHistoryState: true\n        },\n        focusAndScrollRef: {\n            apply: false,\n            onlyHashChange: false,\n            hashFragment: null,\n            segmentPaths: []\n        },\n        canonicalUrl,\n        nextUrl: (_ref = extractPathFromFlightRouterState(initialTree) || (location == null ? void 0 : location.pathname)) != null ? _ref : null\n    };\n    if (process.env.NODE_ENV !== 'development' && location) {\n        // Seed the prefetch cache with this page's data.\n        // This is to prevent needlessly re-prefetching a page that is already reusable,\n        // and will avoid triggering a loading state/data fetch stall when navigating back to the page.\n        // We don't currently do this in development because links aren't prefetched in development\n        // so having a mismatch between prefetch/no prefetch provides inconsistent behavior based on which page\n        // was loaded first.\n        const url = new URL(\"\" + location.pathname + location.search, location.origin);\n        createSeededPrefetchCacheEntry({\n            url,\n            data: {\n                flightData: [\n                    normalizedFlightData\n                ],\n                canonicalUrl: undefined,\n                couldBeIntercepted: !!couldBeIntercepted,\n                prerendered,\n                postponed,\n                // TODO: The initial RSC payload includes both static and dynamic data\n                // in the same response, even if PPR is enabled. So if there's any\n                // dynamic data at all, we can't set a stale time. In the future we may\n                // add a way to split a single Flight stream into static and dynamic\n                // parts. But in the meantime we should at least make this work for\n                // fully static pages.\n                staleTime: -1\n            },\n            tree: initialState.tree,\n            prefetchCache: initialState.prefetchCache,\n            nextUrl: initialState.nextUrl,\n            kind: prerendered ? PrefetchKind.FULL : PrefetchKind.AUTO\n        });\n    }\n    return initialState;\n}\n\n//# sourceMappingURL=create-initial-router-state.js.map"
        }
    ]
}