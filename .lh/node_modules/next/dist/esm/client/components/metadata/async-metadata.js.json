{
    "sourceFile": "node_modules/next/dist/esm/client/components/metadata/async-metadata.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892766169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Suspense, use } from 'react';\nexport const AsyncMetadata = typeof window === 'undefined' ? require('./server-inserted-metadata').ServerInsertMetadata : require('./browser-resolved-metadata').BrowserResolvedMetadata;\nfunction MetadataOutlet(param) {\n    let { promise } = param;\n    const { error, digest } = use(promise);\n    if (error) {\n        if (digest) {\n            // The error will lose its original digest after passing from server layer to client layerï¼›\n            // We recover the digest property here to override the React created one if original digest exists.\n            ;\n            error.digest = digest;\n        }\n        throw error;\n    }\n    return null;\n}\nexport function AsyncMetadataOutlet(param) {\n    let { promise } = param;\n    return /*#__PURE__*/ _jsx(Suspense, {\n        fallback: null,\n        children: /*#__PURE__*/ _jsx(MetadataOutlet, {\n            promise: promise\n        })\n    });\n}\n\n//# sourceMappingURL=async-metadata.js.map"
        }
    ]
}