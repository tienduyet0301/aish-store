{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/utils/node-stack-frames.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892778601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { parse } from 'next/dist/compiled/stacktrace-parser';\nimport { decorateServerError } from '../../../../shared/lib/error-source';\nexport function getFilesystemFrame(frame) {\n    const f = {\n        ...frame\n    };\n    if (typeof f.file === 'string') {\n        if (// Posix:\n        f.file.startsWith('/') || // Win32:\n        /^[a-z]:\\\\/i.test(f.file) || // Win32 UNC:\n        f.file.startsWith('\\\\\\\\')) {\n            f.file = \"file://\" + f.file;\n        }\n    }\n    return f;\n}\nexport function getServerError(error, type) {\n    if (error.name === 'TurbopackInternalError') {\n        // If this is an internal Turbopack error we shouldn't show internal details\n        // to the user. These are written to a log file instead.\n        const turbopackInternalError = Object.defineProperty(new Error('An unexpected Turbopack error occurred. Please see the output of `next dev` for more details.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E167\",\n            enumerable: false,\n            configurable: true\n        });\n        decorateServerError(turbopackInternalError, type);\n        return turbopackInternalError;\n    }\n    let n;\n    try {\n        throw Object.defineProperty(new Error(error.message), \"__NEXT_ERROR_CODE\", {\n            value: \"E394\",\n            enumerable: false,\n            configurable: true\n        });\n    } catch (e) {\n        n = e;\n    }\n    n.name = error.name;\n    try {\n        n.stack = n.toString() + \"\\n\" + parse(error.stack).map(getFilesystemFrame).map((f)=>{\n            let str = \"    at \" + f.methodName;\n            if (f.file) {\n                let loc = f.file;\n                if (f.lineNumber) {\n                    loc += \":\" + f.lineNumber;\n                    if (f.column) {\n                        loc += \":\" + f.column;\n                    }\n                }\n                str += \" (\" + loc + \")\";\n            }\n            return str;\n        }).join('\\n');\n    } catch (e) {\n        n.stack = error.stack;\n    }\n    decorateServerError(n, type);\n    return n;\n}\n\n//# sourceMappingURL=node-stack-frames.js.map"
        }
    ]
}