{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/hooks/use-delayed-render.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892775847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { useState, useRef, useCallback, useEffect } from 'react';\n/**\n * Useful to perform CSS transitions on React components without\n * using libraries like Framer Motion. This hook will defer the\n * unmount of a React component until after a delay.\n *\n * @param active - Whether the component should be rendered\n * @param options - Options for the delayed render\n * @param options.enterDelay - Delay before rendering the component\n * @param options.exitDelay - Delay before unmounting the component\n *\n * const Modal = ({ active }) => {\n * const { mounted, rendered } = useDelayedRender(active, {\n *  exitDelay: 2000,\n * })\n *\n * if (!mounted) return null\n *\n * return (\n *   <Portal>\n *     <div className={rendered ? 'modal visible' : 'modal'}>...</div>\n *   </Portal>\n * )\n *}\n *\n * */ export function useDelayedRender(active, options) {\n    if (active === void 0) active = false;\n    if (options === void 0) options = {};\n    const [mounted, setMounted] = useState(active);\n    const [rendered, setRendered] = useState(false);\n    const renderTimerRef = useRef(null);\n    const unmountTimerRef = useRef(null);\n    const clearTimers = useCallback(()=>{\n        if (renderTimerRef.current !== null) {\n            window.clearTimeout(renderTimerRef.current);\n            renderTimerRef.current = null;\n        }\n        if (unmountTimerRef.current !== null) {\n            window.clearTimeout(unmountTimerRef.current);\n            unmountTimerRef.current = null;\n        }\n    }, []);\n    useEffect(()=>{\n        const { enterDelay = 1, exitDelay = 0 } = options;\n        clearTimers();\n        if (active) {\n            setMounted(true);\n            if (enterDelay <= 0) {\n                setRendered(true);\n            } else {\n                renderTimerRef.current = window.setTimeout(()=>{\n                    setRendered(true);\n                }, enterDelay);\n            }\n        } else {\n            setRendered(false);\n            if (exitDelay <= 0) {\n                setMounted(false);\n            } else {\n                unmountTimerRef.current = window.setTimeout(()=>{\n                    setMounted(false);\n                }, exitDelay);\n            }\n        }\n        return clearTimers;\n    }, [\n        active,\n        options,\n        clearTimers\n    ]);\n    return {\n        mounted,\n        rendered\n    };\n}\n\n//# sourceMappingURL=use-delayed-render.js.map"
        }
    ]
}