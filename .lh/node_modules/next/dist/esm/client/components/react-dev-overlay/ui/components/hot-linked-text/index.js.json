{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/components/hot-linked-text/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892774454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { decodeMagicIdentifier, MAGIC_IDENTIFIER_REGEX } from '../../../../../../shared/lib/magic-identifier';\nconst linkRegex = /https?:\\/\\/[^\\s/$.?#].[^\\s)'\"]*/i;\nconst splitRegexp = new RegExp(\"(\" + MAGIC_IDENTIFIER_REGEX.source + \"|\\\\s+)\");\nexport const HotlinkedText = function HotlinkedText(props) {\n    const { text, matcher } = props;\n    const wordsAndWhitespaces = text.split(splitRegexp);\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: wordsAndWhitespaces.map((word, index)=>{\n            if (linkRegex.test(word)) {\n                const link = linkRegex.exec(word);\n                const href = link[0];\n                // If link matcher is present but the link doesn't match, don't turn it into a link\n                if (typeof matcher === 'function' && !matcher(href)) {\n                    return word;\n                }\n                return /*#__PURE__*/ _jsx(React.Fragment, {\n                    children: /*#__PURE__*/ _jsx(\"a\", {\n                        href: href,\n                        target: \"_blank\",\n                        rel: \"noreferrer noopener\",\n                        children: word\n                    })\n                }, \"link-\" + index);\n            }\n            try {\n                const decodedWord = decodeMagicIdentifier(word);\n                if (decodedWord !== word) {\n                    return /*#__PURE__*/ _jsxs(\"i\", {\n                        children: [\n                            '{',\n                            decodedWord,\n                            '}'\n                        ]\n                    }, \"ident-\" + index);\n                }\n            } catch (e) {\n                return /*#__PURE__*/ _jsxs(\"i\", {\n                    children: [\n                        '{',\n                        word,\n                        \" (decoding failed: \",\n                        '' + e,\n                        \")\",\n                        '}'\n                    ]\n                }, \"ident-\" + index);\n            }\n            return /*#__PURE__*/ _jsx(React.Fragment, {\n                children: word\n            }, \"text-\" + index);\n        })\n    });\n};\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}