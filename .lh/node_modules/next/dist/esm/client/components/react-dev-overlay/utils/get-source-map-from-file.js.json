{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/utils/get-source-map-from-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892778351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import fs from 'fs/promises';\nimport path from 'path';\nimport url from 'url';\nimport dataUriToBuffer from 'next/dist/compiled/data-uri-to-buffer';\nimport { getSourceMapUrl } from './get-source-map-url';\nexport async function getSourceMapFromFile(filename) {\n    filename = filename.startsWith('file://') ? url.fileURLToPath(filename) : filename;\n    let fileContents;\n    try {\n        fileContents = await fs.readFile(filename, 'utf-8');\n    } catch (error) {\n        throw Object.defineProperty(new Error(\"Failed to read file contents of \" + filename + \".\", {\n            cause: error\n        }), \"__NEXT_ERROR_CODE\", {\n            value: \"E466\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const sourceUrl = getSourceMapUrl(fileContents);\n    if (!sourceUrl) {\n        return undefined;\n    }\n    if (sourceUrl.startsWith('data:')) {\n        let buffer;\n        try {\n            buffer = dataUriToBuffer(sourceUrl);\n        } catch (error) {\n            throw Object.defineProperty(new Error(\"Failed to parse source map URL for \" + filename + \".\", {\n                cause: error\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E199\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (buffer.type !== 'application/json') {\n            throw Object.defineProperty(new Error(\"Unknown source map type for \" + filename + \": \" + buffer.typeFull + \".\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E113\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        try {\n            return JSON.parse(buffer.toString());\n        } catch (error) {\n            throw Object.defineProperty(new Error(\"Failed to parse source map for \" + filename + \".\", {\n                cause: error\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E318\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    const sourceMapFilename = path.resolve(path.dirname(filename), decodeURIComponent(sourceUrl));\n    try {\n        const sourceMapContents = await fs.readFile(sourceMapFilename, 'utf-8');\n        return JSON.parse(sourceMapContents.toString());\n    } catch (error) {\n        throw Object.defineProperty(new Error(\"Failed to parse source map \" + sourceMapFilename + \".\", {\n            cause: error\n        }), \"__NEXT_ERROR_CODE\", {\n            value: \"E220\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\n\n//# sourceMappingURL=get-source-map-from-file.js.map"
        }
    ]
}