{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/components/dialog/dialog.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892770707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as React from 'react';\nimport { useOnClickOutside } from '../../hooks/use-on-click-outside';\nimport { useMeasureHeight } from '../../hooks/use-measure-height';\nconst CSS_SELECTORS_TO_EXCLUDE_ON_CLICK_OUTSIDE = [\n    '[data-next-mark]',\n    '[data-issues-open]',\n    '#nextjs-dev-tools-menu',\n    '[data-nextjs-error-overlay-nav]',\n    '[data-info-popover]'\n];\nconst Dialog = function Dialog(param) {\n    let { children, type, className, onClose, 'aria-labelledby': ariaLabelledBy, 'aria-describedby': ariaDescribedBy, dialogResizerRef, ...props } = param;\n    const dialogRef = React.useRef(null);\n    const [role, setRole] = React.useState(typeof document !== 'undefined' && document.hasFocus() ? 'dialog' : undefined);\n    const ref = React.useRef(null);\n    const [height, pristine] = useMeasureHeight(ref);\n    useOnClickOutside(dialogRef.current, CSS_SELECTORS_TO_EXCLUDE_ON_CLICK_OUTSIDE, (e)=>{\n        e.preventDefault();\n        return onClose == null ? void 0 : onClose();\n    });\n    React.useEffect(()=>{\n        if (dialogRef.current == null) {\n            return;\n        }\n        function handleFocus() {\n            // safari will force itself as the active application when a background page triggers any sort of autofocus\n            // this is a workaround to only set the dialog role if the document has focus\n            setRole(document.hasFocus() ? 'dialog' : undefined);\n        }\n        window.addEventListener('focus', handleFocus);\n        window.addEventListener('blur', handleFocus);\n        return ()=>{\n            window.removeEventListener('focus', handleFocus);\n            window.removeEventListener('blur', handleFocus);\n        };\n    }, []);\n    React.useEffect(()=>{\n        const dialog = dialogRef.current;\n        const root = dialog == null ? void 0 : dialog.getRootNode();\n        const initialActiveElement = root instanceof ShadowRoot ? root == null ? void 0 : root.activeElement : null;\n        // Trap focus within the dialog\n        dialog == null ? void 0 : dialog.focus();\n        return ()=>{\n            // Blur first to avoid getting stuck, in case `activeElement` is missing\n            dialog == null ? void 0 : dialog.blur();\n            // Restore focus to the previously active element\n            initialActiveElement == null ? void 0 : initialActiveElement.focus();\n        };\n    }, []);\n    return /*#__PURE__*/ _jsx(\"div\", {\n        ref: dialogRef,\n        tabIndex: -1,\n        \"data-nextjs-dialog\": true,\n        role: role,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-modal\": \"true\",\n        className: className,\n        onKeyDown: (e)=>{\n            if (e.key === 'Escape') {\n                onClose == null ? void 0 : onClose();\n            }\n        },\n        ...props,\n        children: /*#__PURE__*/ _jsx(\"div\", {\n            ref: dialogResizerRef,\n            \"data-nextjs-dialog-sizer\": true,\n            // [x] Don't animate on initial load\n            // [x] No duplicate elements\n            // [x] Responds to content growth\n            style: {\n                height,\n                transition: pristine ? undefined : 'height 250ms var(--timing-swift)'\n            },\n            children: /*#__PURE__*/ _jsx(\"div\", {\n                ref: ref,\n                children: children\n            })\n        })\n    });\n};\nexport { Dialog };\n\n//# sourceMappingURL=dialog.js.map"
        }
    ]
}