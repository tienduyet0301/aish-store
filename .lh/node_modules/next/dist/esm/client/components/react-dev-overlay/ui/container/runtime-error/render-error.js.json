{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/container/runtime-error/render-error.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892775732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useMemo, useState, useEffect } from 'react';\nimport { ACTION_UNHANDLED_ERROR, ACTION_UNHANDLED_REJECTION } from '../../../shared';\nimport { getErrorByType } from '../../../utils/get-error-by-type';\nfunction getErrorSignature(ev) {\n    const { event } = ev;\n    // eslint-disable-next-line default-case -- TypeScript checks this\n    switch(event.type){\n        case ACTION_UNHANDLED_ERROR:\n        case ACTION_UNHANDLED_REJECTION:\n            {\n                return event.reason.name + \"::\" + event.reason.message + \"::\" + event.reason.stack;\n            }\n    }\n}\nexport const RenderError = (props)=>{\n    const { state } = props;\n    const isBuildError = !!state.buildError;\n    if (isBuildError) {\n        return /*#__PURE__*/ _jsx(RenderBuildError, {\n            ...props\n        });\n    } else {\n        return /*#__PURE__*/ _jsx(RenderRuntimeError, {\n            ...props\n        });\n    }\n};\nconst RenderRuntimeError = (param)=>{\n    let { children, state, isAppDir } = param;\n    const { errors } = state;\n    const [lookups, setLookups] = useState({});\n    const [runtimeErrors, nextError] = useMemo(()=>{\n        let ready = [];\n        let next = null;\n        // Ensure errors are displayed in the order they occurred in:\n        for(let idx = 0; idx < errors.length; ++idx){\n            const e = errors[idx];\n            const { id } = e;\n            if (id in lookups) {\n                ready.push(lookups[id]);\n                continue;\n            }\n            // Check for duplicate errors\n            if (idx > 0) {\n                const prev = errors[idx - 1];\n                if (getErrorSignature(prev) === getErrorSignature(e)) {\n                    continue;\n                }\n            }\n            next = e;\n            break;\n        }\n        return [\n            ready,\n            next\n        ];\n    }, [\n        errors,\n        lookups\n    ]);\n    useEffect(()=>{\n        if (nextError == null) {\n            return;\n        }\n        let mounted = true;\n        getErrorByType(nextError, isAppDir).then((resolved)=>{\n            if (mounted) {\n                // We don't care if the desired error changed while we were resolving,\n                // thus we're not tracking it using a ref. Once the work has been done,\n                // we'll store it.\n                setLookups((m)=>({\n                        ...m,\n                        [resolved.id]: resolved\n                    }));\n            }\n        });\n        return ()=>{\n            mounted = false;\n        };\n    }, [\n        nextError,\n        isAppDir\n    ]);\n    const totalErrorCount = errors.filter((err, idx)=>{\n        const prev = errors[idx - 1];\n        // Check for duplicates\n        if (idx > 0) return getErrorSignature(prev) !== getErrorSignature(err);\n        return true;\n    }).length;\n    return children({\n        runtimeErrors,\n        totalErrorCount\n    });\n};\nconst RenderBuildError = (param)=>{\n    let { children } = param;\n    return children({\n        runtimeErrors: [],\n        // Build errors and missing root layout tags persist until fixed,\n        // so we can set a fixed error count of 1\n        totalErrorCount: 1\n    });\n};\n\n//# sourceMappingURL=render-error.js.map"
        }
    ]
}