{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/app/client-entry.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892767308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { getSocketUrl } from '../utils/get-socket-url';\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from '../../../../server/dev/hot-reloader-types';\nimport GlobalError from '../../error-boundary';\nimport { AppDevOverlayErrorBoundary } from './app-dev-overlay-error-boundary';\nconst noop = ()=>{};\n// if an error is thrown while rendering an RSC stream, this will catch it in dev\n// and show the error overlay\nexport function createRootLevelDevOverlayElement(reactEl) {\n    const socketUrl = getSocketUrl(process.env.__NEXT_ASSET_PREFIX || '');\n    const socket = new window.WebSocket(\"\" + socketUrl + \"/_next/webpack-hmr\");\n    // add minimal \"hot reload\" support for RSC errors\n    const handler = (event)=>{\n        let obj;\n        try {\n            obj = JSON.parse(event.data);\n        } catch (e) {}\n        if (!obj || !('action' in obj)) {\n            return;\n        }\n        if (obj.action === HMR_ACTIONS_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES) {\n            window.location.reload();\n        }\n    };\n    socket.addEventListener('message', handler);\n    return /*#__PURE__*/ _jsx(AppDevOverlayErrorBoundary, {\n        globalError: [\n            GlobalError,\n            null\n        ],\n        onError: noop,\n        children: reactEl\n    });\n}\n\n//# sourceMappingURL=client-entry.js.map"
        }
    ]
}