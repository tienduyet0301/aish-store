{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/components/errors/error-overlay/error-overlay.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892773433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Suspense } from 'react';\nimport { BuildError } from '../../../container/build-error';\nimport { Errors } from '../../../container/errors';\nimport { useDelayedRender } from '../../../hooks/use-delayed-render';\nconst transitionDurationMs = 200;\nexport function ErrorOverlay(param) {\n    let { state, runtimeErrors, isErrorOverlayOpen, setIsErrorOverlayOpen } = param;\n    const isTurbopack = !!process.env.TURBOPACK;\n    // This hook lets us do an exit animation before unmounting the component\n    const { mounted, rendered } = useDelayedRender(isErrorOverlayOpen, {\n        exitDelay: transitionDurationMs\n    });\n    const commonProps = {\n        rendered,\n        transitionDurationMs,\n        isTurbopack,\n        versionInfo: state.versionInfo\n    };\n    if (state.buildError !== null) {\n        return /*#__PURE__*/ _jsx(BuildError, {\n            ...commonProps,\n            message: state.buildError,\n            // This is not a runtime error, forcedly display error overlay\n            rendered: true\n        });\n    }\n    // No Runtime Errors.\n    if (!runtimeErrors.length) {\n        // Workaround React quirk that triggers \"Switch to client-side rendering\" if\n        // we return no Suspense boundary here.\n        return /*#__PURE__*/ _jsx(Suspense, {});\n    }\n    if (!mounted) {\n        // Workaround React quirk that triggers \"Switch to client-side rendering\" if\n        // we return no Suspense boundary here.\n        return /*#__PURE__*/ _jsx(Suspense, {});\n    }\n    return /*#__PURE__*/ _jsx(Errors, {\n        ...commonProps,\n        debugInfo: state.debugInfo,\n        runtimeErrors: runtimeErrors,\n        onClose: ()=>{\n            setIsErrorOverlayOpen(false);\n        }\n    });\n}\n\n//# sourceMappingURL=error-overlay.js.map"
        }
    ]
}