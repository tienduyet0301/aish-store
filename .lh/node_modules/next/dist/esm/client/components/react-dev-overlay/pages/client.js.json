{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/pages/client.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892767741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as Bus from './bus';\nimport { parseStack } from '../utils/parse-stack';\nimport { parseComponentStack } from '../utils/parse-component-stack';\nimport { storeHydrationErrorStateFromConsoleArgs } from '../../errors/hydration-error-info';\nimport { ACTION_BEFORE_REFRESH, ACTION_BUILD_ERROR, ACTION_BUILD_OK, ACTION_DEV_INDICATOR, ACTION_REFRESH, ACTION_STATIC_INDICATOR, ACTION_UNHANDLED_ERROR, ACTION_UNHANDLED_REJECTION, ACTION_VERSION_INFO } from '../shared';\nimport { attachHydrationErrorState } from '../../errors/attach-hydration-error-state';\nlet isRegistered = false;\nfunction handleError(error) {\n    if (!error || !(error instanceof Error) || typeof error.stack !== 'string') {\n        // A non-error was thrown, we don't have anything to show. :-(\n        return;\n    }\n    attachHydrationErrorState(error);\n    const componentStackTrace = error._componentStack;\n    const componentStackFrames = typeof componentStackTrace === 'string' ? parseComponentStack(componentStackTrace) : undefined;\n    // Skip ModuleBuildError and ModuleNotFoundError, as it will be sent through onBuildError callback.\n    // This is to avoid same error as different type showing up on client to cause flashing.\n    if (error.name !== 'ModuleBuildError' && error.name !== 'ModuleNotFoundError') {\n        Bus.emit({\n            type: ACTION_UNHANDLED_ERROR,\n            reason: error,\n            frames: parseStack(error.stack),\n            componentStackFrames\n        });\n    }\n}\nlet origConsoleError = console.error;\nfunction nextJsHandleConsoleError() {\n    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n        args[_key] = arguments[_key];\n    }\n    // See https://github.com/facebook/react/blob/d50323eb845c5fde0d720cae888bf35dedd05506/packages/react-reconciler/src/ReactFiberErrorLogger.js#L78\n    const error = process.env.NODE_ENV !== 'production' ? args[1] : args[0];\n    storeHydrationErrorStateFromConsoleArgs(...args);\n    handleError(error);\n    origConsoleError.apply(window.console, args);\n}\nfunction onUnhandledError(event) {\n    const error = event == null ? void 0 : event.error;\n    handleError(error);\n}\nfunction onUnhandledRejection(ev) {\n    const reason = ev == null ? void 0 : ev.reason;\n    if (!reason || !(reason instanceof Error) || typeof reason.stack !== 'string') {\n        // A non-error was thrown, we don't have anything to show. :-(\n        return;\n    }\n    const e = reason;\n    Bus.emit({\n        type: ACTION_UNHANDLED_REJECTION,\n        reason: reason,\n        frames: parseStack(e.stack)\n    });\n}\nexport function register() {\n    if (isRegistered) {\n        return;\n    }\n    isRegistered = true;\n    try {\n        Error.stackTraceLimit = 50;\n    } catch (e) {}\n    window.addEventListener('error', onUnhandledError);\n    window.addEventListener('unhandledrejection', onUnhandledRejection);\n    window.console.error = nextJsHandleConsoleError;\n}\nexport function onBuildOk() {\n    Bus.emit({\n        type: ACTION_BUILD_OK\n    });\n}\nexport function onBuildError(message) {\n    Bus.emit({\n        type: ACTION_BUILD_ERROR,\n        message\n    });\n}\nexport function onRefresh() {\n    Bus.emit({\n        type: ACTION_REFRESH\n    });\n}\nexport function onBeforeRefresh() {\n    Bus.emit({\n        type: ACTION_BEFORE_REFRESH\n    });\n}\nexport function onVersionInfo(versionInfo) {\n    Bus.emit({\n        type: ACTION_VERSION_INFO,\n        versionInfo\n    });\n}\nexport function onStaticIndicator(isStatic) {\n    Bus.emit({\n        type: ACTION_STATIC_INDICATOR,\n        staticIndicator: isStatic\n    });\n}\nexport function onDevIndicator(devIndicatorsState) {\n    Bus.emit({\n        type: ACTION_DEV_INDICATOR,\n        devIndicator: devIndicatorsState\n    });\n}\nexport { getErrorByType } from '../utils/get-error-by-type';\nexport { getServerError } from '../utils/node-stack-frames';\n\n//# sourceMappingURL=client.js.map"
        }
    ]
}