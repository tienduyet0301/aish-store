{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/components/code-frame/code-frame.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892768667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { HotlinkedText } from '../hot-linked-text';\nimport { getFrameSource } from '../../../utils/stack-frame';\nimport { useOpenInEditor } from '../../utils/use-open-in-editor';\nimport { ExternalIcon } from '../../icons/external';\nimport { FileIcon } from '../../icons/file';\nimport { formatCodeFrame, groupCodeFrameLines, parseLineNumberFromCodeFrameLine } from './parse-code-frame';\nexport function CodeFrame(param) {\n    let { stackFrame, codeFrame } = param;\n    var _stackFrame_file;\n    const formattedFrame = useMemo(()=>formatCodeFrame(codeFrame), [\n        codeFrame\n    ]);\n    const decodedLines = useMemo(()=>groupCodeFrameLines(formattedFrame), [\n        formattedFrame\n    ]);\n    const open = useOpenInEditor({\n        file: stackFrame.file,\n        lineNumber: stackFrame.lineNumber,\n        column: stackFrame.column\n    });\n    const fileExtension = stackFrame == null ? void 0 : (_stackFrame_file = stackFrame.file) == null ? void 0 : _stackFrame_file.split('.').pop();\n    // TODO: make the caret absolute\n    return /*#__PURE__*/ _jsxs(\"div\", {\n        \"data-nextjs-codeframe\": true,\n        children: [\n            /*#__PURE__*/ _jsx(\"div\", {\n                className: \"code-frame-header\",\n                children: /*#__PURE__*/ _jsxs(\"p\", {\n                    className: \"code-frame-link\",\n                    children: [\n                        /*#__PURE__*/ _jsx(\"span\", {\n                            className: \"code-frame-icon\",\n                            children: /*#__PURE__*/ _jsx(FileIcon, {\n                                lang: fileExtension\n                            })\n                        }),\n                        /*#__PURE__*/ _jsxs(\"span\", {\n                            \"data-text\": true,\n                            children: [\n                                getFrameSource(stackFrame),\n                                \" @\",\n                                ' ',\n                                /*#__PURE__*/ _jsx(HotlinkedText, {\n                                    text: stackFrame.methodName\n                                })\n                            ]\n                        }),\n                        /*#__PURE__*/ _jsx(\"button\", {\n                            \"aria-label\": \"Open in editor\",\n                            \"data-with-open-in-editor-link-source-file\": true,\n                            onClick: open,\n                            children: /*#__PURE__*/ _jsx(\"span\", {\n                                className: \"code-frame-icon\",\n                                \"data-icon\": \"right\",\n                                children: /*#__PURE__*/ _jsx(ExternalIcon, {\n                                    width: 16,\n                                    height: 16\n                                })\n                            })\n                        })\n                    ]\n                })\n            }),\n            /*#__PURE__*/ _jsx(\"pre\", {\n                className: \"code-frame-pre\",\n                children: decodedLines.map((line, lineIndex)=>{\n                    const { lineNumber, isErroredLine } = parseLineNumberFromCodeFrameLine(line, stackFrame);\n                    const lineNumberProps = {};\n                    if (lineNumber) {\n                        lineNumberProps['data-nextjs-codeframe-line'] = lineNumber;\n                    }\n                    if (isErroredLine) {\n                        lineNumberProps['data-nextjs-codeframe-line--errored'] = true;\n                    }\n                    return /*#__PURE__*/ _jsx(\"div\", {\n                        ...lineNumberProps,\n                        children: line.map((entry, entryIndex)=>/*#__PURE__*/ _jsx(\"span\", {\n                                style: {\n                                    color: entry.fg ? \"var(--color-\" + entry.fg + \")\" : undefined,\n                                    ...entry.decoration === 'bold' ? // having longer width than expected on Geist Mono font-weight\n                                    // above 600, hence a temporary fix is to use 500 for bold.\n                                    {\n                                        fontWeight: 500\n                                    } : entry.decoration === 'italic' ? {\n                                        fontStyle: 'italic'\n                                    } : undefined\n                                },\n                                children: entry.content\n                            }, \"frame-\" + entryIndex))\n                    }, \"line-\" + lineIndex);\n                })\n            })\n        ]\n    });\n}\nexport const CODE_FRAME_STYLES = '\\n  [data-nextjs-codeframe] {\\n    --code-frame-padding: 12px;\\n    --code-frame-line-height: var(--size-16);\\n    background-color: var(--color-background-200);\\n    overflow: hidden;\\n    color: var(--color-gray-1000);\\n    text-overflow: ellipsis;\\n    border: 1px solid var(--color-gray-400);\\n    border-radius: 8px;\\n    font-family: var(--font-stack-monospace);\\n    font-size: var(--size-12);\\n    line-height: var(--code-frame-line-height);\\n    margin: 8px 0;\\n\\n    svg {\\n      width: var(--size-16);\\n      height: var(--size-16);\\n    }\\n  }\\n\\n  .code-frame-link,\\n  .code-frame-pre {\\n    padding: var(--code-frame-padding);\\n  }\\n\\n  .code-frame-link svg {\\n    flex-shrink: 0;\\n  }\\n\\n  .code-frame-link [data-text] {\\n    display: inline-flex;\\n    text-align: left;\\n    margin: auto 6px;\\n  }\\n\\n  .code-frame-header {\\n    width: 100%;\\n    transition: background 100ms ease-out;\\n    border-radius: 8px 8px 0 0;\\n    border-bottom: 1px solid var(--color-gray-400);\\n  }\\n\\n  [data-with-open-in-editor-link-source-file] {\\n    padding: 4px;\\n    margin: -4px 0 -4px auto;\\n    border-radius: var(--rounded-full);\\n    margin-left: auto;\\n\\n    &:focus-visible {\\n      outline: var(--focus-ring);\\n      outline-offset: -2px;\\n    }\\n\\n    &:hover {\\n      background: var(--color-gray-100);\\n    }\\n  }\\n\\n  [data-nextjs-codeframe]::selection,\\n  [data-nextjs-codeframe] *::selection {\\n    background-color: var(--color-ansi-selection);\\n  }\\n\\n  [data-nextjs-codeframe] *:not(a) {\\n    color: inherit;\\n    background-color: transparent;\\n    font-family: var(--font-stack-monospace);\\n  }\\n\\n  [data-nextjs-codeframe-line][data-nextjs-codeframe-line--errored=\"true\"] {\\n    position: relative;\\n    isolation: isolate;\\n\\n    > span { \\n      position: relative;\\n      z-index: 1;\\n    }\\n\\n    &::after {\\n      content: \"\";\\n      width: calc(100% + var(--code-frame-padding) * 2);\\n      height: var(--code-frame-line-height);\\n      left: calc(-1 * var(--code-frame-padding));\\n      background: var(--color-red-200);\\n      box-shadow: 2px 0 0 0 var(--color-red-900) inset;\\n      position: absolute;\\n    }\\n  }\\n\\n\\n  [data-nextjs-codeframe] > * {\\n    margin: 0;\\n  }\\n\\n  .code-frame-link {\\n    display: flex;\\n    margin: 0;\\n    outline: 0;\\n  }\\n  .code-frame-link [data-icon=\\'right\\'] {\\n    margin-left: auto;\\n  }\\n\\n  [data-nextjs-codeframe] div > pre {\\n    overflow: hidden;\\n    display: inline-block;\\n  }\\n\\n  [data-nextjs-codeframe] svg {\\n    color: var(--color-gray-900);\\n  }\\n';\n\n//# sourceMappingURL=code-frame.js.map"
        }
    ]
}