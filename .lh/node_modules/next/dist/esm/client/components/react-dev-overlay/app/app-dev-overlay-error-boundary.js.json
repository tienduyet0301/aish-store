{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/app/app-dev-overlay-error-boundary.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892767191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { PureComponent } from 'react';\nimport { RuntimeErrorHandler } from '../../errors/runtime-error-handler';\nimport { ErrorBoundary, GlobalError as DefaultGlobalError } from '../../error-boundary';\nfunction ErroredHtml(param) {\n    let { globalError: [GlobalError, globalErrorStyles], error } = param;\n    if (!error) {\n        return /*#__PURE__*/ _jsxs(\"html\", {\n            children: [\n                /*#__PURE__*/ _jsx(\"head\", {}),\n                /*#__PURE__*/ _jsx(\"body\", {})\n            ]\n        });\n    }\n    return /*#__PURE__*/ _jsxs(ErrorBoundary, {\n        errorComponent: DefaultGlobalError,\n        children: [\n            globalErrorStyles,\n            /*#__PURE__*/ _jsx(GlobalError, {\n                error: error\n            })\n        ]\n    });\n}\nexport class AppDevOverlayErrorBoundary extends PureComponent {\n    static getDerivedStateFromError(error) {\n        if (!error.stack) {\n            return {\n                isReactError: false,\n                reactError: null\n            };\n        }\n        RuntimeErrorHandler.hadRuntimeError = true;\n        return {\n            isReactError: true,\n            reactError: error\n        };\n    }\n    componentDidCatch() {\n        this.props.onError(this.state.isReactError);\n    }\n    render() {\n        const { children, globalError } = this.props;\n        const { isReactError, reactError } = this.state;\n        const fallback = /*#__PURE__*/ _jsx(ErroredHtml, {\n            globalError: globalError,\n            error: reactError\n        });\n        return isReactError ? fallback : children;\n    }\n    constructor(...args){\n        super(...args), this.state = {\n            isReactError: false,\n            reactError: null\n        };\n    }\n}\n\n//# sourceMappingURL=app-dev-overlay-error-boundary.js.map"
        }
    ]
}