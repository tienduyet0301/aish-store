{
    "sourceFile": "node_modules/next/dist/esm/client/components/react-dev-overlay/ui/components/terminal/terminal.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892775102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport Anser from 'next/dist/compiled/anser';\nimport * as React from 'react';\nimport { HotlinkedText } from '../hot-linked-text';\nimport { EditorLink } from './editor-link';\nimport { ExternalIcon } from '../../icons/external';\nimport { getFrameSource } from '../../../utils/stack-frame';\nimport { useOpenInEditor } from '../../utils/use-open-in-editor';\nimport { FileIcon } from '../../icons/file';\nfunction getFile(lines) {\n    const contentFileName = lines.shift();\n    if (!contentFileName) return null;\n    const [fileName, line, column] = contentFileName.split(':', 3);\n    const parsedLine = Number(line);\n    const parsedColumn = Number(column);\n    const hasLocation = !Number.isNaN(parsedLine) && !Number.isNaN(parsedColumn);\n    return {\n        fileName: hasLocation ? fileName : contentFileName,\n        location: hasLocation ? {\n            line: parsedLine,\n            column: parsedColumn\n        } : undefined\n    };\n}\nfunction getImportTraceFiles(lines) {\n    if (lines.some((line)=>/ReactServerComponentsError:/.test(line)) || lines.some((line)=>/Import trace for requested module:/.test(line))) {\n        // Grab the lines at the end containing the files\n        const files = [];\n        while(/.+\\..+/.test(lines[lines.length - 1]) && !lines[lines.length - 1].includes(':')){\n            const file = lines.pop().trim();\n            files.unshift(file);\n        }\n        return files;\n    }\n    return [];\n}\nfunction getEditorLinks(content) {\n    const lines = content.split('\\n');\n    const file = getFile(lines);\n    const importTraceFiles = getImportTraceFiles(lines);\n    return {\n        file,\n        source: lines.join('\\n'),\n        importTraceFiles\n    };\n}\nexport const Terminal = function Terminal(param) {\n    let { content } = param;\n    var _file_location, _file_location1, _file_location2, _file_location3, _stackFrame_file;\n    const { file, source, importTraceFiles } = React.useMemo(()=>getEditorLinks(content), [\n        content\n    ]);\n    const decoded = React.useMemo(()=>{\n        return Anser.ansiToJson(source, {\n            json: true,\n            use_classes: true,\n            remove_empty: true\n        });\n    }, [\n        source\n    ]);\n    var _file_location_line, _file_location_column;\n    const open = useOpenInEditor({\n        file: file == null ? void 0 : file.fileName,\n        lineNumber: (_file_location_line = file == null ? void 0 : (_file_location = file.location) == null ? void 0 : _file_location.line) != null ? _file_location_line : 1,\n        column: (_file_location_column = file == null ? void 0 : (_file_location1 = file.location) == null ? void 0 : _file_location1.column) != null ? _file_location_column : 0\n    });\n    var _file_fileName, _file_location_line1, _file_location_column1;\n    const stackFrame = {\n        file: (_file_fileName = file == null ? void 0 : file.fileName) != null ? _file_fileName : null,\n        methodName: '',\n        arguments: [],\n        lineNumber: (_file_location_line1 = file == null ? void 0 : (_file_location2 = file.location) == null ? void 0 : _file_location2.line) != null ? _file_location_line1 : null,\n        column: (_file_location_column1 = file == null ? void 0 : (_file_location3 = file.location) == null ? void 0 : _file_location3.column) != null ? _file_location_column1 : null\n    };\n    const fileExtension = stackFrame == null ? void 0 : (_stackFrame_file = stackFrame.file) == null ? void 0 : _stackFrame_file.split('.').pop();\n    return /*#__PURE__*/ _jsxs(\"div\", {\n        \"data-nextjs-codeframe\": true,\n        children: [\n            /*#__PURE__*/ _jsx(\"div\", {\n                className: \"code-frame-header\",\n                children: /*#__PURE__*/ _jsxs(\"div\", {\n                    className: \"code-frame-link\",\n                    children: [\n                        /*#__PURE__*/ _jsx(\"span\", {\n                            className: \"code-frame-icon\",\n                            children: /*#__PURE__*/ _jsx(FileIcon, {\n                                lang: fileExtension\n                            })\n                        }),\n                        /*#__PURE__*/ _jsx(\"span\", {\n                            \"data-text\": true,\n                            children: getFrameSource(stackFrame)\n                        }),\n                        /*#__PURE__*/ _jsx(\"button\", {\n                            \"aria-label\": \"Open in editor\",\n                            \"data-with-open-in-editor-link-source-file\": true,\n                            onClick: open,\n                            children: /*#__PURE__*/ _jsx(\"span\", {\n                                className: \"code-frame-icon\",\n                                \"data-icon\": \"right\",\n                                children: /*#__PURE__*/ _jsx(ExternalIcon, {\n                                    width: 16,\n                                    height: 16\n                                })\n                            })\n                        })\n                    ]\n                })\n            }),\n            /*#__PURE__*/ _jsxs(\"pre\", {\n                className: \"code-frame-pre\",\n                children: [\n                    decoded.map((entry, index)=>/*#__PURE__*/ _jsx(\"span\", {\n                            style: {\n                                color: entry.fg ? \"var(--color-\" + entry.fg + \")\" : undefined,\n                                ...entry.decoration === 'bold' ? // having longer width than expected on Geist Mono font-weight\n                                // above 600, hence a temporary fix is to use 500 for bold.\n                                {\n                                    fontWeight: 500\n                                } : entry.decoration === 'italic' ? {\n                                    fontStyle: 'italic'\n                                } : undefined\n                            },\n                            children: /*#__PURE__*/ _jsx(HotlinkedText, {\n                                text: entry.content\n                            })\n                        }, \"terminal-entry-\" + index)),\n                    importTraceFiles.map((importTraceFile)=>/*#__PURE__*/ _jsx(EditorLink, {\n                            isSourceFile: false,\n                            file: importTraceFile\n                        }, importTraceFile))\n                ]\n            })\n        ]\n    });\n};\nexport const TERMINAL_STYLES = \"\\n  [data-nextjs-terminal]::selection,\\n  [data-nextjs-terminal] *::selection {\\n    background-color: var(--color-ansi-selection);\\n  }\\n\\n  [data-nextjs-terminal] * {\\n    color: inherit;\\n    background-color: transparent;\\n    font-family: var(--font-stack-monospace);\\n  }\\n\\n  [data-nextjs-terminal] > div > p {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    cursor: pointer;\\n    margin: 0;\\n  }\\n  [data-nextjs-terminal] > div > p:hover {\\n    text-decoration: underline dotted;\\n  }\\n  [data-nextjs-terminal] div > pre {\\n    overflow: hidden;\\n    display: inline-block;\\n  }\\n\";\n\n//# sourceMappingURL=terminal.js.map"
        }
    ]
}