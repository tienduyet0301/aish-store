{
    "sourceFile": "node_modules/next/dist/esm/client/dev/amp-dev.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892786004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* globals __webpack_hash__ */ import { displayContent } from './fouc';\nimport initOnDemandEntries from './on-demand-entries-client';\nimport { addMessageListener, connectHMR } from '../components/react-dev-overlay/pages/websocket';\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from '../../server/dev/hot-reloader-types';\nimport { reportInvalidHmrMessage } from '../components/react-dev-overlay/shared';\n/// <reference types=\"webpack/module.d.ts\" />\nconst data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nwindow.__NEXT_DATA__ = data;\nlet { assetPrefix, page } = data;\nassetPrefix = assetPrefix || '';\nlet mostRecentHash = null;\n/* eslint-disable-next-line */ let curHash = __webpack_hash__;\nconst hotUpdatePath = assetPrefix + (assetPrefix.endsWith('/') ? '' : '/') + '_next/static/webpack/';\n// Is there a newer version of this code available?\nfunction isUpdateAvailable() {\n    // __webpack_hash__ is the hash of the current compilation.\n    // It's a global variable injected by Webpack.\n    /* eslint-disable-next-line */ return mostRecentHash !== __webpack_hash__;\n}\n// Webpack disallows updates in other states.\nfunction canApplyUpdates() {\n    return module.hot.status() === 'idle';\n}\n// This function reads code updates on the fly and hard\n// reloads the page when it has changed.\nasync function tryApplyUpdates() {\n    if (!isUpdateAvailable() || !canApplyUpdates()) {\n        return;\n    }\n    try {\n        const res = await fetch(typeof __webpack_runtime_id__ !== 'undefined' ? \"\" + hotUpdatePath + curHash + \".\" + __webpack_runtime_id__ + \".hot-update.json\" : \"\" + hotUpdatePath + curHash + \".hot-update.json\");\n        const jsonData = await res.json();\n        const curPage = page === '/' ? 'index' : page;\n        // webpack 5 uses an array instead\n        const pageUpdated = (Array.isArray(jsonData.c) ? jsonData.c : Object.keys(jsonData.c)).some((mod)=>{\n            return mod.indexOf(\"pages\" + (curPage.startsWith('/') ? curPage : \"/\" + curPage)) !== -1 || mod.indexOf((\"pages\" + (curPage.startsWith('/') ? curPage : \"/\" + curPage)).replace(/\\//g, '\\\\')) !== -1;\n        });\n        if (pageUpdated) {\n            window.location.reload();\n        } else {\n            curHash = mostRecentHash;\n        }\n    } catch (err) {\n        console.error('Error occurred checking for update', err);\n        window.location.reload();\n    }\n}\naddMessageListener((message)=>{\n    if (!('action' in message)) {\n        return;\n    }\n    try {\n        // actions which are not related to amp-dev\n        if (message.action === HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ERROR || message.action === HMR_ACTIONS_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE) {\n            return;\n        }\n        if (message.action === HMR_ACTIONS_SENT_TO_BROWSER.SYNC || message.action === HMR_ACTIONS_SENT_TO_BROWSER.BUILT) {\n            if (!message.hash) {\n                return;\n            }\n            mostRecentHash = message.hash;\n            tryApplyUpdates();\n        } else if (message.action === HMR_ACTIONS_SENT_TO_BROWSER.RELOAD_PAGE) {\n            window.location.reload();\n        }\n    } catch (err) {\n        reportInvalidHmrMessage(message, err);\n    }\n});\nconnectHMR({\n    assetPrefix,\n    path: '/_next/webpack-hmr'\n});\ndisplayContent();\ninitOnDemandEntries(data.page);\n\n//# sourceMappingURL=amp-dev.js.map"
        }
    ]
}