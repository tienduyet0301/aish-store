{
    "sourceFile": "node_modules/next/dist/esm/client/dev/hot-middleware-client.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892786644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import connect from '../components/react-dev-overlay/pages/hot-reloader-client';\nimport { sendMessage } from '../components/react-dev-overlay/pages/websocket';\nlet reloading = false;\nexport default (()=>{\n    const devClient = connect();\n    devClient.subscribeToHmrEvent((obj)=>{\n        var _window_next;\n        if (reloading) return;\n        // Retrieve the router if it's available\n        const router = (_window_next = window.next) == null ? void 0 : _window_next.router;\n        // Determine if we're on an error page or the router is not initialized\n        const isOnErrorPage = !router || router.pathname === '/404' || router.pathname === '/_error';\n        switch(obj.action){\n            case 'reloadPage':\n                {\n                    sendMessage(JSON.stringify({\n                        event: 'client-reload-page',\n                        clientId: window.__nextDevClientId\n                    }));\n                    reloading = true;\n                    return window.location.reload();\n                }\n            case 'removedPage':\n                {\n                    const [page] = obj.data;\n                    // Check if the removed page is the current page\n                    const isCurrentPage = page === (router == null ? void 0 : router.pathname);\n                    // We enter here if the removed page is currently being viewed\n                    // or if we happen to be on an error page.\n                    if (isCurrentPage || isOnErrorPage) {\n                        sendMessage(JSON.stringify({\n                            event: 'client-removed-page',\n                            clientId: window.__nextDevClientId,\n                            page\n                        }));\n                        return window.location.reload();\n                    }\n                    return;\n                }\n            case 'addedPage':\n                {\n                    var _router_components;\n                    const [page] = obj.data;\n                    // Check if the added page is the current page\n                    const isCurrentPage = page === (router == null ? void 0 : router.pathname);\n                    // Check if the page component is not yet loaded\n                    const isPageNotLoaded = typeof (router == null ? void 0 : (_router_components = router.components) == null ? void 0 : _router_components[page]) === 'undefined';\n                    // We enter this block if the newly added page is the one currently being viewed\n                    // but hasn't been loaded yet, or if we're on an error page.\n                    if (isCurrentPage && isPageNotLoaded || isOnErrorPage) {\n                        sendMessage(JSON.stringify({\n                            event: 'client-added-page',\n                            clientId: window.__nextDevClientId,\n                            page\n                        }));\n                        return window.location.reload();\n                    }\n                    return;\n                }\n            case 'serverError':\n            case 'devPagesManifestUpdate':\n            case 'isrManifest':\n            case 'building':\n            case 'finishBuilding':\n                {\n                    return;\n                }\n            default:\n                {\n                    throw Object.defineProperty(new Error('Unexpected action ' + obj.action), \"__NEXT_ERROR_CODE\", {\n                        value: \"E59\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n        }\n    });\n    return devClient;\n});\n\n//# sourceMappingURL=hot-middleware-client.js.map"
        }
    ]
}