{
    "sourceFile": "node_modules/next/dist/esm/shared/lib/lazy-dynamic/preload-chunks.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892849991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\nimport { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { preload } from 'react-dom';\nimport { workAsyncStorage } from '../../../server/app-render/work-async-storage.external';\nimport { encodeURIPath } from '../encode-uri-path';\nexport function PreloadChunks(param) {\n    let { moduleIds } = param;\n    // Early return in client compilation and only load requestStore on server side\n    if (typeof window !== 'undefined') {\n        return null;\n    }\n    const workStore = workAsyncStorage.getStore();\n    if (workStore === undefined) {\n        return null;\n    }\n    const allFiles = [];\n    // Search the current dynamic call unique key id in react loadable manifest,\n    // and find the corresponding CSS files to preload\n    if (workStore.reactLoadableManifest && moduleIds) {\n        const manifest = workStore.reactLoadableManifest;\n        for (const key of moduleIds){\n            if (!manifest[key]) continue;\n            const chunks = manifest[key].files;\n            allFiles.push(...chunks);\n        }\n    }\n    if (allFiles.length === 0) {\n        return null;\n    }\n    const dplId = process.env.NEXT_DEPLOYMENT_ID ? \"?dpl=\" + process.env.NEXT_DEPLOYMENT_ID : '';\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: allFiles.map((chunk)=>{\n            const href = workStore.assetPrefix + \"/_next/\" + encodeURIPath(chunk) + dplId;\n            const isCss = chunk.endsWith('.css');\n            // If it's stylesheet we use `precedence` o help hoist with React Float.\n            // For stylesheets we actually need to render the CSS because nothing else is going to do it so it needs to be part of the component tree.\n            // The `preload` for stylesheet is not optional.\n            if (isCss) {\n                return /*#__PURE__*/ _jsx(\"link\", {\n                    // @ts-ignore\n                    precedence: \"dynamic\",\n                    href: href,\n                    rel: \"stylesheet\",\n                    as: \"style\"\n                }, chunk);\n            } else {\n                // If it's script we use ReactDOM.preload to preload the resources\n                preload(href, {\n                    as: 'script',\n                    fetchPriority: 'low'\n                });\n                return null;\n            }\n        })\n    });\n}\n\n//# sourceMappingURL=preload-chunks.js.map"
        }
    ]
}