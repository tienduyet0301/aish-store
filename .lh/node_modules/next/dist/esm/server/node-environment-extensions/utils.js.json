{
    "sourceFile": "node_modules/next/dist/esm/server/node-environment-extensions/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892834713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { workAsyncStorage } from '../app-render/work-async-storage.external';\nimport { workUnitAsyncStorage } from '../app-render/work-unit-async-storage.external';\nimport { abortOnSynchronousPlatformIOAccess, trackSynchronousPlatformIOAccessInDev } from '../app-render/dynamic-rendering';\nimport { InvariantError } from '../../shared/lib/invariant-error';\nexport function io(expression, type) {\n    const workUnitStore = workUnitAsyncStorage.getStore();\n    if (workUnitStore) {\n        if (workUnitStore.type === 'prerender') {\n            const prerenderSignal = workUnitStore.controller.signal;\n            if (prerenderSignal.aborted === false) {\n                // If the prerender signal is already aborted we don't need to construct any stacks\n                // because something else actually terminated the prerender.\n                const workStore = workAsyncStorage.getStore();\n                if (workStore) {\n                    let message;\n                    switch(type){\n                        case 'time':\n                            message = `Route \"${workStore.route}\" used ${expression} instead of using \\`performance\\` or without explicitly calling \\`await connection()\\` beforehand. See more info here: https://nextjs.org/docs/messages/next-prerender-current-time`;\n                            break;\n                        case 'random':\n                            message = `Route \"${workStore.route}\" used ${expression} outside of \\`\"use cache\"\\` and without explicitly calling \\`await connection()\\` beforehand. See more info here: https://nextjs.org/docs/messages/next-prerender-random`;\n                            break;\n                        case 'crypto':\n                            message = `Route \"${workStore.route}\" used ${expression} outside of \\`\"use cache\"\\` and without explicitly calling \\`await connection()\\` beforehand. See more info here: https://nextjs.org/docs/messages/next-prerender-crypto`;\n                            break;\n                        default:\n                            throw Object.defineProperty(new InvariantError('Unknown expression type in abortOnSynchronousPlatformIOAccess.'), \"__NEXT_ERROR_CODE\", {\n                                value: \"E526\",\n                                enumerable: false,\n                                configurable: true\n                            });\n                    }\n                    const errorWithStack = Object.defineProperty(new Error(message), \"__NEXT_ERROR_CODE\", {\n                        value: \"E394\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                    abortOnSynchronousPlatformIOAccess(workStore.route, expression, errorWithStack, workUnitStore);\n                }\n            }\n        } else if (workUnitStore.type === 'request' && workUnitStore.prerenderPhase === true) {\n            const requestStore = workUnitStore;\n            trackSynchronousPlatformIOAccessInDev(requestStore);\n        }\n    }\n}\n\n//# sourceMappingURL=utils.js.map"
        }
    ]
}