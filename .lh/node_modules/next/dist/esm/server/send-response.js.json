{
    "sourceFile": "node_modules/next/dist/esm/server/send-response.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892844648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { isNodeNextResponse } from './base-http/helpers';\nimport { pipeToNodeResponse } from './pipe-readable';\nimport { splitCookiesString } from './web/utils';\n/**\n * Sends the response on the underlying next response object.\n *\n * @param req the underlying request object\n * @param res the underlying response object\n * @param response the response to send\n */ export async function sendResponse(req, res, response, waitUntil) {\n    if (// The type check here ensures that `req` is correctly typed, and the\n    // environment variable check provides dead code elimination.\n    process.env.NEXT_RUNTIME !== 'edge' && isNodeNextResponse(res)) {\n        var // Copy over the response headers.\n        _response_headers;\n        // Copy over the response status.\n        res.statusCode = response.status;\n        res.statusMessage = response.statusText;\n        // TODO: this is not spec-compliant behavior and we should not restrict\n        // headers that are allowed to appear many times.\n        //\n        // See:\n        // https://github.com/vercel/next.js/pull/70127\n        const headersWithMultipleValuesAllowed = [\n            // can add more headers to this list if needed\n            'set-cookie',\n            'www-authenticate',\n            'proxy-authenticate',\n            'vary'\n        ];\n        (_response_headers = response.headers) == null ? void 0 : _response_headers.forEach((value, name)=>{\n            // `x-middleware-set-cookie` is an internal header not needed for the response\n            if (name.toLowerCase() === 'x-middleware-set-cookie') {\n                return;\n            }\n            // The append handling is special cased for `set-cookie`.\n            if (name.toLowerCase() === 'set-cookie') {\n                // TODO: (wyattjoh) replace with native response iteration when we can upgrade undici\n                for (const cookie of splitCookiesString(value)){\n                    res.appendHeader(name, cookie);\n                }\n            } else {\n                // only append the header if it is either not present in the outbound response\n                // or if the header supports multiple values\n                const isHeaderPresent = typeof res.getHeader(name) !== 'undefined';\n                if (headersWithMultipleValuesAllowed.includes(name.toLowerCase()) || !isHeaderPresent) {\n                    res.appendHeader(name, value);\n                }\n            }\n        });\n        /**\n     * The response can't be directly piped to the underlying response. The\n     * following is duplicated from the edge runtime handler.\n     *\n     * See packages/next/server/next-server.ts\n     */ const { originalResponse } = res;\n        // A response body must not be sent for HEAD requests. See https://httpwg.org/specs/rfc9110.html#HEAD\n        if (response.body && req.method !== 'HEAD') {\n            await pipeToNodeResponse(response.body, originalResponse, waitUntil);\n        } else {\n            originalResponse.end();\n        }\n    }\n}\n\n//# sourceMappingURL=send-response.js.map"
        }
    ]
}