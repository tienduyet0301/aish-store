{
    "sourceFile": "node_modules/next/dist/esm/server/app-render/get-layer-assets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892823660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { getLinkAndScriptTags } from './get-css-inlined-link-tags';\nimport { getPreloadableFonts } from './get-preloadable-fonts';\nimport { getAssetQueryString } from './get-asset-query-string';\nimport { encodeURIPath } from '../../shared/lib/encode-uri-path';\nimport { renderCssResource } from './render-css-resource';\nexport function getLayerAssets({ ctx, layoutOrPagePath, injectedCSS: injectedCSSWithCurrentLayout, injectedJS: injectedJSWithCurrentLayout, injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout, preloadCallbacks }) {\n    const { styles: styleTags, scripts: scriptTags } = layoutOrPagePath ? getLinkAndScriptTags(ctx.clientReferenceManifest, layoutOrPagePath, injectedCSSWithCurrentLayout, injectedJSWithCurrentLayout, true) : {\n        styles: [],\n        scripts: []\n    };\n    const preloadedFontFiles = layoutOrPagePath ? getPreloadableFonts(ctx.renderOpts.nextFontManifest, layoutOrPagePath, injectedFontPreloadTagsWithCurrentLayout) : null;\n    if (preloadedFontFiles) {\n        if (preloadedFontFiles.length) {\n            for(let i = 0; i < preloadedFontFiles.length; i++){\n                const fontFilename = preloadedFontFiles[i];\n                const ext = /\\.(woff|woff2|eot|ttf|otf)$/.exec(fontFilename)[1];\n                const type = `font/${ext}`;\n                const href = `${ctx.assetPrefix}/_next/${encodeURIPath(fontFilename)}`;\n                preloadCallbacks.push(()=>{\n                    ctx.componentMod.preloadFont(href, type, ctx.renderOpts.crossOrigin, ctx.nonce);\n                });\n            }\n        } else {\n            try {\n                let url = new URL(ctx.assetPrefix);\n                preloadCallbacks.push(()=>{\n                    ctx.componentMod.preconnect(url.origin, 'anonymous', ctx.nonce);\n                });\n            } catch (error) {\n                // assetPrefix must not be a fully qualified domain name. We assume\n                // we should preconnect to same origin instead\n                preloadCallbacks.push(()=>{\n                    ctx.componentMod.preconnect('/', 'anonymous', ctx.nonce);\n                });\n            }\n        }\n    }\n    const styles = renderCssResource(styleTags, ctx, preloadCallbacks);\n    const scripts = scriptTags ? scriptTags.map((href, index)=>{\n        const fullSrc = `${ctx.assetPrefix}/_next/${encodeURIPath(href)}${getAssetQueryString(ctx, true)}`;\n        return /*#__PURE__*/ _jsx(\"script\", {\n            src: fullSrc,\n            async: true,\n            nonce: ctx.nonce\n        }, `script-${index}`);\n    }) : [];\n    return styles.length || scripts.length ? [\n        ...styles,\n        ...scripts\n    ] : null;\n}\n\n//# sourceMappingURL=get-layer-assets.js.map"
        }
    ]
}