{
    "sourceFile": "node_modules/next/dist/esm/server/dev/hot-middleware.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892827821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// Based on https://github.com/webpack-contrib/webpack-hot-middleware/blob/9708d781ae0e46179cf8ea1a94719de4679aaf53/middleware.js\n// Included License below\n// Copyright JS Foundation and other contributors\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// 'Software'), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport { isMiddlewareFilename } from '../../build/utils';\nimport { HMR_ACTIONS_SENT_TO_BROWSER } from './hot-reloader-types';\nimport { devIndicatorServerState } from './dev-indicator-server-state';\nfunction isMiddlewareStats(stats) {\n    for (const key of stats.compilation.entrypoints.keys()){\n        if (isMiddlewareFilename(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction statsToJson(stats) {\n    if (!stats) return {};\n    return stats.toJson({\n        all: false,\n        errors: true,\n        hash: true,\n        warnings: true\n    });\n}\nfunction getStatsForSyncEvent(clientStats, serverStats) {\n    if (!clientStats) return serverStats == null ? void 0 : serverStats.stats;\n    if (!serverStats) return clientStats == null ? void 0 : clientStats.stats;\n    // Prefer the server compiler stats if it has errors.\n    // Otherwise we may end up in a state where the client compilation is the latest but without errors.\n    // This causes the error overlay to not display the build error.\n    if (serverStats.stats.hasErrors()) {\n        return serverStats.stats;\n    }\n    // Return the latest stats\n    return serverStats.ts > clientStats.ts ? serverStats.stats : clientStats.stats;\n}\nclass EventStream {\n    constructor(){\n        this.clients = new Set();\n    }\n    close() {\n        for (const wsClient of this.clients){\n            // it's okay to not cleanly close these websocket connections, this is dev\n            wsClient.terminate();\n        }\n        this.clients.clear();\n    }\n    handler(client) {\n        this.clients.add(client);\n        client.addEventListener('close', ()=>{\n            this.clients.delete(client);\n        });\n    }\n    publish(payload) {\n        for (const wsClient of this.clients){\n            wsClient.send(JSON.stringify(payload));\n        }\n    }\n}\nexport class WebpackHotMiddleware {\n    constructor(compilers, versionInfo, devtoolsFrontendUrl){\n        this.onClientInvalid = ()=>{\n            var _this_serverLatestStats;\n            if (this.closed || ((_this_serverLatestStats = this.serverLatestStats) == null ? void 0 : _this_serverLatestStats.stats.hasErrors())) return;\n            this.publish({\n                action: HMR_ACTIONS_SENT_TO_BROWSER.BUILDING\n            });\n        };\n        this.onClientDone = (statsResult)=>{\n            var _this_serverLatestStats;\n            this.clientLatestStats = {\n                ts: Date.now(),\n                stats: statsResult\n            };\n            if (this.closed || ((_this_serverLatestStats = this.serverLatestStats) == null ? void 0 : _this_serverLatestStats.stats.hasErrors())) return;\n            this.publishStats(statsResult);\n        };\n        this.onServerInvalid = ()=>{\n            var _this_serverLatestStats, _this_clientLatestStats;\n            if (!((_this_serverLatestStats = this.serverLatestStats) == null ? void 0 : _this_serverLatestStats.stats.hasErrors())) return;\n            this.serverLatestStats = null;\n            if ((_this_clientLatestStats = this.clientLatestStats) == null ? void 0 : _this_clientLatestStats.stats) {\n                this.publishStats(this.clientLatestStats.stats);\n            }\n        };\n        this.onServerDone = (statsResult)=>{\n            if (this.closed) return;\n            if (statsResult.hasErrors()) {\n                this.serverLatestStats = {\n                    ts: Date.now(),\n                    stats: statsResult\n                };\n                this.publishStats(statsResult);\n            }\n        };\n        this.onEdgeServerInvalid = ()=>{\n            var _this_middlewareLatestStats, _this_clientLatestStats;\n            if (!((_this_middlewareLatestStats = this.middlewareLatestStats) == null ? void 0 : _this_middlewareLatestStats.stats.hasErrors())) return;\n            this.middlewareLatestStats = null;\n            if ((_this_clientLatestStats = this.clientLatestStats) == null ? void 0 : _this_clientLatestStats.stats) {\n                this.publishStats(this.clientLatestStats.stats);\n            }\n        };\n        this.onEdgeServerDone = (statsResult)=>{\n            if (!isMiddlewareStats(statsResult)) {\n                this.onServerInvalid();\n                this.onServerDone(statsResult);\n                return;\n            }\n            if (statsResult.hasErrors()) {\n                this.middlewareLatestStats = {\n                    ts: Date.now(),\n                    stats: statsResult\n                };\n                this.publishStats(statsResult);\n            }\n        };\n        /**\n   * To sync we use the most recent stats but also we append middleware\n   * errors. This is because it is possible that middleware fails to compile\n   * and we still want to show the client overlay with the error while\n   * the error page should be rendered just fine.\n   */ this.onHMR = (client)=>{\n            if (this.closed) return;\n            this.eventStream.handler(client);\n            const syncStats = getStatsForSyncEvent(this.clientLatestStats, this.serverLatestStats);\n            if (syncStats) {\n                var _this_middlewareLatestStats;\n                const stats = statsToJson(syncStats);\n                const middlewareStats = statsToJson((_this_middlewareLatestStats = this.middlewareLatestStats) == null ? void 0 : _this_middlewareLatestStats.stats);\n                if (devIndicatorServerState.disabledUntil < Date.now()) {\n                    devIndicatorServerState.disabledUntil = 0;\n                }\n                this.publish({\n                    action: HMR_ACTIONS_SENT_TO_BROWSER.SYNC,\n                    hash: stats.hash,\n                    errors: [\n                        ...stats.errors || [],\n                        ...middlewareStats.errors || []\n                    ],\n                    warnings: [\n                        ...stats.warnings || [],\n                        ...middlewareStats.warnings || []\n                    ],\n                    versionInfo: this.versionInfo,\n                    debug: {\n                        devtoolsFrontendUrl: this.devtoolsFrontendUrl\n                    },\n                    devIndicator: devIndicatorServerState\n                });\n            }\n        };\n        this.publishStats = (statsResult)=>{\n            const stats = statsResult.toJson({\n                all: false,\n                hash: true,\n                warnings: true,\n                errors: true,\n                moduleTrace: true\n            });\n            this.publish({\n                action: HMR_ACTIONS_SENT_TO_BROWSER.BUILT,\n                hash: stats.hash,\n                warnings: stats.warnings || [],\n                errors: stats.errors || []\n            });\n        };\n        this.publish = (payload)=>{\n            if (this.closed) return;\n            this.eventStream.publish(payload);\n        };\n        this.close = ()=>{\n            if (this.closed) return;\n            // Can't remove compiler plugins, so we just set a flag and noop if closed\n            // https://github.com/webpack/tapable/issues/32#issuecomment-350644466\n            this.closed = true;\n            this.eventStream.close();\n        };\n        this.eventStream = new EventStream();\n        this.clientLatestStats = null;\n        this.middlewareLatestStats = null;\n        this.serverLatestStats = null;\n        this.closed = false;\n        this.versionInfo = versionInfo;\n        this.devtoolsFrontendUrl = devtoolsFrontendUrl;\n        compilers[0].hooks.invalid.tap('webpack-hot-middleware', this.onClientInvalid);\n        compilers[0].hooks.done.tap('webpack-hot-middleware', this.onClientDone);\n        compilers[1].hooks.invalid.tap('webpack-hot-middleware', this.onServerInvalid);\n        compilers[1].hooks.done.tap('webpack-hot-middleware', this.onServerDone);\n        compilers[2].hooks.done.tap('webpack-hot-middleware', this.onEdgeServerDone);\n        compilers[2].hooks.invalid.tap('webpack-hot-middleware', this.onEdgeServerInvalid);\n    }\n}\n\n//# sourceMappingURL=hot-middleware.js.map"
        }
    ]
}