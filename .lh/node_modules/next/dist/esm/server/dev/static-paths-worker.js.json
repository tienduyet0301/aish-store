{
    "sourceFile": "node_modules/next/dist/esm/server/dev/static-paths-worker.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892828789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import '../require-hook';\nimport '../node-environment';\nimport { reduceAppConfig } from '../../build/utils';\nimport { collectSegments } from '../../build/segment-config/app/app-segments';\nimport { loadComponents } from '../load-components';\nimport { setHttpClientAndAgentOptions } from '../setup-http-agent-env';\nimport { isAppPageRouteModule } from '../route-modules/checks';\nimport { checkIsRoutePPREnabled } from '../lib/experimental/ppr';\nimport { InvariantError } from '../../shared/lib/invariant-error';\nimport { collectRootParamKeys } from '../../build/segment-config/app/collect-root-param-keys';\nimport { buildAppStaticPaths } from '../../build/static-paths/app';\nimport { buildPagesStaticPaths } from '../../build/static-paths/pages';\nimport { createIncrementalCache } from '../../export/helpers/create-incremental-cache';\n// we call getStaticPaths in a separate process to ensure\n// side-effects aren't relied on in dev that will break\n// during a production build\nexport async function loadStaticPaths({ dir, distDir, pathname, config, httpAgentOptions, locales, defaultLocale, isAppPath, page, isrFlushToDisk, fetchCacheKeyPrefix, maxMemoryCacheSize, requestHeaders, cacheHandler, cacheHandlers, cacheLifeProfiles, nextConfigOutput, buildId, authInterrupts, sriEnabled }) {\n    // this needs to be initialized before loadComponents otherwise\n    // \"use cache\" could be missing it's cache handlers\n    await createIncrementalCache({\n        dir,\n        distDir,\n        cacheHandler,\n        cacheHandlers,\n        requestHeaders,\n        fetchCacheKeyPrefix,\n        flushToDisk: isrFlushToDisk,\n        cacheMaxMemorySize: maxMemoryCacheSize\n    });\n    // update work memory runtime-config\n    require('../../shared/lib/runtime-config.external').setConfig(config);\n    setHttpClientAndAgentOptions({\n        httpAgentOptions\n    });\n    const components = await loadComponents({\n        distDir,\n        // In `pages/`, the page is the same as the pathname.\n        page: page || pathname,\n        isAppPath,\n        isDev: true,\n        sriEnabled\n    });\n    if (isAppPath) {\n        const segments = await collectSegments(components);\n        const isRoutePPREnabled = isAppPageRouteModule(components.routeModule) && checkIsRoutePPREnabled(config.pprConfig, reduceAppConfig(segments));\n        const rootParamKeys = collectRootParamKeys(components);\n        return buildAppStaticPaths({\n            dir,\n            page: pathname,\n            dynamicIO: config.dynamicIO,\n            segments,\n            distDir,\n            requestHeaders,\n            cacheHandler,\n            cacheLifeProfiles,\n            isrFlushToDisk,\n            fetchCacheKeyPrefix,\n            maxMemoryCacheSize,\n            ComponentMod: components.ComponentMod,\n            nextConfigOutput,\n            isRoutePPREnabled,\n            buildId,\n            authInterrupts,\n            rootParamKeys\n        });\n    } else if (!components.getStaticPaths) {\n        // We shouldn't get to this point since the worker should only be called for\n        // SSG pages with getStaticPaths.\n        throw Object.defineProperty(new InvariantError(`Failed to load page with getStaticPaths for ${pathname}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E605\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return buildPagesStaticPaths({\n        page: pathname,\n        getStaticPaths: components.getStaticPaths,\n        configFileName: config.configFileName,\n        locales,\n        defaultLocale\n    });\n}\n\n//# sourceMappingURL=static-paths-worker.js.map"
        }
    ]
}