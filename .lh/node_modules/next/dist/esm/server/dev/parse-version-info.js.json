{
    "sourceFile": "node_modules/next/dist/esm/server/dev/parse-version-info.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892828615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as semver from 'next/dist/compiled/semver';\nexport function parseVersionInfo(o) {\n    const latest = semver.parse(o.latest);\n    const canary = semver.parse(o.canary);\n    const installedParsed = semver.parse(o.installed);\n    const installed = o.installed;\n    if (installedParsed && latest && canary) {\n        if (installedParsed.major < latest.major) {\n            // Old major version\n            return {\n                staleness: 'stale-major',\n                expected: latest.raw,\n                installed\n            };\n        } else if (installedParsed.prerelease[0] === 'canary' && semver.lt(installedParsed, canary)) {\n            // Matching major, but old canary\n            return {\n                staleness: 'stale-prerelease',\n                expected: canary.raw,\n                installed\n            };\n        } else if (!installedParsed.prerelease.length && semver.lt(installedParsed, latest)) {\n            // Stable, but not the latest\n            if (installedParsed.minor === latest.minor) {\n                // Same major and minor, but not the latest patch\n                return {\n                    staleness: 'stale-patch',\n                    expected: latest.raw,\n                    installed\n                };\n            }\n            return {\n                staleness: 'stale-minor',\n                expected: latest.raw,\n                installed\n            };\n        } else if (semver.gt(installedParsed, latest) && installedParsed.version !== canary.version) {\n            // Newer major version\n            return {\n                staleness: 'newer-than-npm',\n                installed\n            };\n        } else {\n            // Latest and greatest\n            return {\n                staleness: 'fresh',\n                installed\n            };\n        }\n    }\n    return {\n        installed: (installedParsed == null ? void 0 : installedParsed.raw) ?? '0.0.0',\n        staleness: 'unknown'\n    };\n}\n\n//# sourceMappingURL=parse-version-info.js.map"
        }
    ]
}