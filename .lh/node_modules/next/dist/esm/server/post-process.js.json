{
    "sourceFile": "node_modules/next/dist/esm/server/post-process.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892836737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { nonNullable } from '../lib/non-nullable';\nasync function postProcessHTML(pathname, content, renderOpts, { inAmpMode, hybridAmp }) {\n    const postProcessors = [\n        process.env.NEXT_RUNTIME !== 'edge' && inAmpMode && !process.env.TURBOPACK ? async (html)=>{\n            const optimizeAmp = require('./optimize-amp').default;\n            html = await optimizeAmp(html, renderOpts.ampOptimizerConfig);\n            if (!renderOpts.ampSkipValidation && renderOpts.ampValidator) {\n                await renderOpts.ampValidator(html, pathname);\n            }\n            return html;\n        } : null,\n        process.env.NEXT_RUNTIME !== 'edge' && renderOpts.optimizeCss ? async (html)=>{\n            // eslint-disable-next-line import/no-extraneous-dependencies\n            const Critters = require('critters');\n            const cssOptimizer = new Critters({\n                ssrMode: true,\n                reduceInlineStyles: false,\n                path: renderOpts.distDir,\n                publicPath: `${renderOpts.assetPrefix}/_next/`,\n                preload: 'media',\n                fonts: false,\n                logLevel: process.env.CRITTERS_LOG_LEVEL || (process.env.NODE_ENV === 'production' ? 'warn' : 'info'),\n                ...renderOpts.optimizeCss\n            });\n            return await cssOptimizer.process(html);\n        } : null,\n        inAmpMode || hybridAmp ? (html)=>{\n            return html.replace(/&amp;amp=1/g, '&amp=1');\n        } : null\n    ].filter(nonNullable);\n    for (const postProcessor of postProcessors){\n        if (postProcessor) {\n            content = await postProcessor(content);\n        }\n    }\n    return content;\n}\nexport { postProcessHTML };\n\n//# sourceMappingURL=post-process.js.map"
        }
    ]
}