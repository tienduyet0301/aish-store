{
    "sourceFile": "node_modules/next/dist/esm/server/resume-data-cache/cache-store.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892838244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { arrayBufferToString, stringToUint8Array } from '../app-render/encryption-utils';\n/**\n * Parses serialized cache entries into a UseCacheCacheStore\n * @param entries - The serialized entries to parse\n * @returns A new UseCacheCacheStore containing the parsed entries\n */ export function parseUseCacheCacheStore(entries) {\n    const store = new Map();\n    for (const [key, { value, tags, stale, timestamp, expire, revalidate }] of entries){\n        store.set(key, Promise.resolve({\n            // Create a ReadableStream from the Uint8Array\n            value: new ReadableStream({\n                start (controller) {\n                    // Enqueue the Uint8Array to the stream\n                    controller.enqueue(stringToUint8Array(atob(value)));\n                    // Close the stream\n                    controller.close();\n                }\n            }),\n            tags,\n            stale,\n            timestamp,\n            expire,\n            revalidate\n        }));\n    }\n    return store;\n}\n/**\n * Serializes UseCacheCacheStore entries into an array of key-value pairs\n * @param entries - The store entries to stringify\n * @returns A promise that resolves to an array of key-value pairs with serialized values\n */ export async function serializeUseCacheCacheStore(entries) {\n    return Promise.all(Array.from(entries).map(([key, value])=>{\n        return value.then(async (entry)=>{\n            const [left, right] = entry.value.tee();\n            entry.value = right;\n            let binaryString = '';\n            // We want to encode the value as a string, but we aren't sure if the\n            // value is a a stream of UTF-8 bytes or not, so let's just encode it\n            // as a string using base64.\n            for await (const chunk of left){\n                binaryString += arrayBufferToString(chunk);\n            }\n            return [\n                key,\n                {\n                    // Encode the value as a base64 string.\n                    value: btoa(binaryString),\n                    tags: entry.tags,\n                    stale: entry.stale,\n                    timestamp: entry.timestamp,\n                    expire: entry.expire,\n                    revalidate: entry.revalidate\n                }\n            ];\n        }).catch(()=>{\n            // Any failed cache writes should be ignored as to not discard the\n            // entire cache.\n            return null;\n        });\n    }));\n}\n\n//# sourceMappingURL=cache-store.js.map"
        }
    ]
}