{
    "sourceFile": "node_modules/next/dist/esm/server/after/awaiter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892819034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { InvariantError } from '../../shared/lib/invariant-error';\n/**\n * Provides a `waitUntil` implementation which gathers promises to be awaited later (via {@link AwaiterMulti.awaiting}).\n * Unlike a simple `Promise.all`, {@link AwaiterMulti} works recursively --\n * if a promise passed to {@link AwaiterMulti.waitUntil} calls `waitUntil` again,\n * that second promise will also be awaited.\n */ export class AwaiterMulti {\n    constructor({ onError } = {}){\n        this.promises = new Set();\n        this.waitUntil = (promise)=>{\n            // if a promise settles before we await it, we should drop it --\n            // storing them indefinitely could result in a memory leak.\n            const cleanup = ()=>{\n                this.promises.delete(promise);\n            };\n            promise.then(cleanup, (err)=>{\n                cleanup();\n                this.onError(err);\n            });\n            this.promises.add(promise);\n        };\n        this.onError = onError ?? console.error;\n    }\n    async awaiting() {\n        while(this.promises.size > 0){\n            const promises = Array.from(this.promises);\n            this.promises.clear();\n            await Promise.allSettled(promises);\n        }\n    }\n}\n/**\n * Like {@link AwaiterMulti}, but can only be awaited once.\n * If {@link AwaiterOnce.waitUntil} is called after that, it will throw.\n */ export class AwaiterOnce {\n    constructor(options = {}){\n        this.done = false;\n        this.waitUntil = (promise)=>{\n            if (this.done) {\n                throw Object.defineProperty(new InvariantError('Cannot call waitUntil() on an AwaiterOnce that was already awaited'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E563\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            return this.awaiter.waitUntil(promise);\n        };\n        this.awaiter = new AwaiterMulti(options);\n    }\n    async awaiting() {\n        if (!this.pending) {\n            this.pending = this.awaiter.awaiting().finally(()=>{\n                this.done = true;\n            });\n        }\n        return this.pending;\n    }\n}\n\n//# sourceMappingURL=awaiter.js.map"
        }
    ]
}