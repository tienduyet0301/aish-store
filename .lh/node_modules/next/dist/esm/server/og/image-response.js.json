{
    "sourceFile": "node_modules/next/dist/esm/server/og/image-response.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892836405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "function importModule() {\n    return import(process.env.NEXT_RUNTIME === 'edge' ? 'next/dist/compiled/@vercel/og/index.edge.js' : 'next/dist/compiled/@vercel/og/index.node.js');\n}\n/**\n * The ImageResponse class allows you to generate dynamic images using JSX and CSS.\n * This is useful for generating social media images such as Open Graph images, Twitter cards, and more.\n *\n * Read more: [Next.js Docs: `ImageResponse`](https://nextjs.org/docs/app/api-reference/functions/image-response)\n */ export class ImageResponse extends Response {\n    static #_ = this.displayName = 'ImageResponse';\n    constructor(...args){\n        const readable = new ReadableStream({\n            async start (controller) {\n                const OGImageResponse = // So far we have to manually determine which build to use,\n                // as the auto resolving is not working\n                (await importModule()).ImageResponse;\n                const imageResponse = new OGImageResponse(...args);\n                if (!imageResponse.body) {\n                    return controller.close();\n                }\n                const reader = imageResponse.body.getReader();\n                while(true){\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        return controller.close();\n                    }\n                    controller.enqueue(value);\n                }\n            }\n        });\n        const options = args[1] || {};\n        const headers = new Headers({\n            'content-type': 'image/png',\n            'cache-control': process.env.NODE_ENV === 'development' ? 'no-cache, no-store' : 'public, immutable, no-transform, max-age=31536000'\n        });\n        if (options.headers) {\n            const newHeaders = new Headers(options.headers);\n            newHeaders.forEach((value, key)=>headers.set(key, value));\n        }\n        super(readable, {\n            headers,\n            status: options.status,\n            statusText: options.statusText\n        });\n    }\n}\n\n//# sourceMappingURL=image-response.js.map"
        }
    ]
}