{
    "sourceFile": "node_modules/next/dist/esm/server/api-utils/node/parse-body.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892819566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { parse } from 'next/dist/compiled/content-type';\nimport isError from '../../../lib/is-error';\nimport { ApiError } from '../index';\n/**\n * Parse `JSON` and handles invalid `JSON` strings\n * @param str `JSON` string\n */ function parseJson(str) {\n    if (str.length === 0) {\n        // special-case empty json body, as it's a common client-side mistake\n        return {};\n    }\n    try {\n        return JSON.parse(str);\n    } catch (e) {\n        throw Object.defineProperty(new ApiError(400, 'Invalid JSON'), \"__NEXT_ERROR_CODE\", {\n            value: \"E394\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\n/**\n * Parse incoming message like `json` or `urlencoded`\n * @param req request object\n */ export async function parseBody(req, limit) {\n    let contentType;\n    try {\n        contentType = parse(req.headers['content-type'] || 'text/plain');\n    } catch  {\n        contentType = parse('text/plain');\n    }\n    const { type, parameters } = contentType;\n    const encoding = parameters.charset || 'utf-8';\n    let buffer;\n    try {\n        const getRawBody = require('next/dist/compiled/raw-body');\n        buffer = await getRawBody(req, {\n            encoding,\n            limit\n        });\n    } catch (e) {\n        if (isError(e) && e.type === 'entity.too.large') {\n            throw Object.defineProperty(new ApiError(413, `Body exceeded ${limit} limit`), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        } else {\n            throw Object.defineProperty(new ApiError(400, 'Invalid body'), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    const body = buffer.toString();\n    if (type === 'application/json' || type === 'application/ld+json') {\n        return parseJson(body);\n    } else if (type === 'application/x-www-form-urlencoded') {\n        const qs = require('querystring');\n        return qs.decode(body);\n    } else {\n        return body;\n    }\n}\n\n//# sourceMappingURL=parse-body.js.map"
        }
    ]
}