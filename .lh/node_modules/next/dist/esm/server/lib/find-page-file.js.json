{
    "sourceFile": "node_modules/next/dist/esm/server/lib/find-page-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892830709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { fileExists } from '../../lib/file-exists';\nimport { getPagePaths } from '../../shared/lib/page-path/get-page-paths';\nimport { nonNullable } from '../../lib/non-nullable';\nimport { join, sep, normalize } from 'path';\nimport { promises as fsPromises } from 'fs';\nimport { warn } from '../../build/output/log';\nimport { cyan } from '../../lib/picocolors';\nimport { isMetadataRouteFile } from '../../lib/metadata/is-metadata-route';\nasync function isTrueCasePagePath(pagePath, pagesDir) {\n    const pageSegments = normalize(pagePath).split(sep).filter(Boolean);\n    const segmentExistsPromises = pageSegments.map(async (segment, i)=>{\n        const segmentParentDir = join(pagesDir, ...pageSegments.slice(0, i));\n        const parentDirEntries = await fsPromises.readdir(segmentParentDir);\n        return parentDirEntries.includes(segment);\n    });\n    return (await Promise.all(segmentExistsPromises)).every(Boolean);\n}\n/**\n * Finds a page file with the given parameters. If the page is duplicated with\n * multiple extensions it will throw, otherwise it will return the *relative*\n * path to the page file or null if it is not found.\n *\n * @param pagesDir Absolute path to the pages folder with trailing `/pages`.\n * @param normalizedPagePath The page normalized (it will be denormalized).\n * @param pageExtensions Array of page extensions.\n */ export async function findPageFile(pagesDir, normalizedPagePath, pageExtensions, isAppDir) {\n    const pagePaths = getPagePaths(normalizedPagePath, pageExtensions, isAppDir);\n    const [existingPath, ...others] = (await Promise.all(pagePaths.map(async (path)=>{\n        const filePath = join(pagesDir, path);\n        try {\n            return await fileExists(filePath) ? path : null;\n        } catch (err) {\n            var _err_code;\n            if (!(err == null ? void 0 : (_err_code = err.code) == null ? void 0 : _err_code.includes('ENOTDIR'))) throw err;\n        }\n        return null;\n    }))).filter(nonNullable);\n    if (!existingPath) {\n        return null;\n    }\n    if (!await isTrueCasePagePath(existingPath, pagesDir)) {\n        return null;\n    }\n    if (others.length > 0) {\n        warn(`Duplicate page detected. ${cyan(join('pages', existingPath))} and ${cyan(join('pages', others[0]))} both resolve to ${cyan(normalizedPagePath)}.`);\n    }\n    return existingPath;\n}\n/**\n *\n * createValidFileMatcher receives configured page extensions and return helpers to determine:\n * `isLayoutsLeafPage`: if a file is a valid page file or routes file under app directory\n * `isTrackedFiles`: if it's a tracked file for webpack watcher\n *\n */ export function createValidFileMatcher(pageExtensions, appDirPath) {\n    const getExtensionRegexString = (extensions)=>`(?:${extensions.join('|')})`;\n    const validExtensionFileRegex = new RegExp('\\\\.' + getExtensionRegexString(pageExtensions) + '$');\n    const leafOnlyPageFileRegex = new RegExp(`(^(page|route)|[\\\\\\\\/](page|route))\\\\.${getExtensionRegexString(pageExtensions)}$`);\n    const rootNotFoundFileRegex = new RegExp(`^not-found\\\\.${getExtensionRegexString(pageExtensions)}$`);\n    /** TODO-METADATA: support other metadata routes\n   *  regex for:\n   *\n   * /robots.txt|<ext>\n   * /sitemap.xml|<ext>\n   * /favicon.ico\n   * /manifest.json|<ext>\n   * <route>/icon.png|jpg|<ext>\n   * <route>/apple-touch-icon.png|jpg|<ext>\n   *\n   */ /**\n   * Match the file if it's a metadata route file, static: if the file is a static metadata file.\n   * It needs to be a file which doesn't match the custom metadata routes e.g. `app/robots.txt/route.js`\n   */ function isMetadataFile(filePath) {\n        const appDirRelativePath = appDirPath ? filePath.replace(appDirPath, '') : filePath;\n        return isMetadataRouteFile(appDirRelativePath, pageExtensions, true);\n    }\n    // Determine if the file is leaf node page file or route file under layouts,\n    // 'page.<extension>' | 'route.<extension>'\n    function isAppRouterPage(filePath) {\n        return leafOnlyPageFileRegex.test(filePath) || isMetadataFile(filePath);\n    }\n    function isPageFile(filePath) {\n        return validExtensionFileRegex.test(filePath) || isMetadataFile(filePath);\n    }\n    function isRootNotFound(filePath) {\n        if (!appDirPath) {\n            return false;\n        }\n        if (!filePath.startsWith(appDirPath + sep)) {\n            return false;\n        }\n        const rest = filePath.slice(appDirPath.length + 1);\n        return rootNotFoundFileRegex.test(rest);\n    }\n    return {\n        isPageFile,\n        isAppRouterPage,\n        isMetadataFile,\n        isRootNotFound\n    };\n}\n\n//# sourceMappingURL=find-page-file.js.map"
        }
    ]
}