{
    "sourceFile": "node_modules/next/dist/esm/server/lib/app-info-log.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892829777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { loadEnvConfig } from '@next/env';\nimport * as Log from '../../build/output/log';\nimport { bold, purple } from '../../lib/picocolors';\nimport { PHASE_DEVELOPMENT_SERVER, PHASE_PRODUCTION_BUILD } from '../../shared/lib/constants';\nimport loadConfig, { getConfiguredExperimentalFeatures } from '../config';\nexport function logStartInfo({ networkUrl, appUrl, envInfo, experimentalFeatures, maxExperimentalFeatures = Infinity }) {\n    let bundlerSuffix;\n    if (process.env.TURBOPACK) {\n        bundlerSuffix = ' (Turbopack)';\n    } else if (process.env.NEXT_RSPACK) {\n        bundlerSuffix = ' (Rspack)';\n    } else {\n        bundlerSuffix = '';\n    }\n    Log.bootstrap(`${bold(purple(`${Log.prefixes.ready} Next.js ${\"15.3.1\"}`))}${bundlerSuffix}`);\n    if (appUrl) {\n        Log.bootstrap(`- Local:        ${appUrl}`);\n    }\n    if (networkUrl) {\n        Log.bootstrap(`- Network:      ${networkUrl}`);\n    }\n    if (envInfo == null ? void 0 : envInfo.length) Log.bootstrap(`- Environments: ${envInfo.join(', ')}`);\n    if (experimentalFeatures == null ? void 0 : experimentalFeatures.length) {\n        Log.bootstrap(`- Experiments (use with caution):`);\n        // only show a maximum number of flags\n        for (const exp of experimentalFeatures.slice(0, maxExperimentalFeatures)){\n            const symbol = exp.type === 'boolean' ? exp.value === true ? bold('✓') : bold('⨯') : '·';\n            const suffix = exp.type === 'number' ? `: ${exp.value}` : '';\n            Log.bootstrap(`  ${symbol} ${exp.name}${suffix}`);\n        }\n        /* indicate if there are more than the maximum shown no. flags */ if (experimentalFeatures.length > maxExperimentalFeatures) {\n            Log.bootstrap(`  · ...`);\n        }\n    }\n    // New line after the bootstrap info\n    Log.info('');\n}\nexport async function getStartServerInfo(dir, dev) {\n    let experimentalFeatures = [];\n    await loadConfig(dev ? PHASE_DEVELOPMENT_SERVER : PHASE_PRODUCTION_BUILD, dir, {\n        onLoadUserConfig (userConfig) {\n            const configuredExperimentalFeatures = getConfiguredExperimentalFeatures(userConfig.experimental);\n            experimentalFeatures = configuredExperimentalFeatures.sort(({ name: a }, { name: b })=>a.length - b.length);\n        }\n    });\n    // we need to reset env if we are going to create\n    // the worker process with the esm loader so that the\n    // initial env state is correct\n    let envInfo = [];\n    const { loadedEnvFiles } = loadEnvConfig(dir, true, console, false);\n    if (loadedEnvFiles.length > 0) {\n        envInfo = loadedEnvFiles.map((f)=>f.path);\n    }\n    return {\n        envInfo,\n        experimentalFeatures\n    };\n}\n\n//# sourceMappingURL=app-info-log.js.map"
        }
    ]
}