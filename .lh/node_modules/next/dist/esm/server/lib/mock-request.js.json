{
    "sourceFile": "node_modules/next/dist/esm/server/lib/mock-request.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892831571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Stream from 'stream';\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from '../web/utils';\nexport class MockedRequest extends Stream.Readable {\n    constructor({ url, headers, method, socket = null, readable }){\n        super(), // This is hardcoded for now, but can be updated to be configurable if needed.\n        this.httpVersion = '1.0', this.httpVersionMajor = 1, this.httpVersionMinor = 0, // If we don't actually have a socket, we'll just use a mock one that\n        // always returns false for the `encrypted` property and undefined for the\n        // `remoteAddress` property.\n        this.socket = new Proxy({}, {\n            get: (_target, prop)=>{\n                if (prop !== 'encrypted' && prop !== 'remoteAddress') {\n                    throw Object.defineProperty(new Error('Method not implemented'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E52\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (prop === 'remoteAddress') return undefined;\n                // For this mock request, always ensure we just respond with the encrypted\n                // set to false to ensure there's no odd leakages.\n                return false;\n            }\n        });\n        this.url = url;\n        this.headers = headers;\n        this.method = method;\n        if (readable) {\n            this.bodyReadable = readable;\n            this.bodyReadable.on('end', ()=>this.emit('end'));\n            this.bodyReadable.on('close', ()=>this.emit('close'));\n        }\n        if (socket) {\n            this.socket = socket;\n        }\n    }\n    get headersDistinct() {\n        const headers = {};\n        for (const [key, value] of Object.entries(this.headers)){\n            if (!value) continue;\n            headers[key] = Array.isArray(value) ? value : [\n                value\n            ];\n        }\n        return headers;\n    }\n    _read(size) {\n        if (this.bodyReadable) {\n            return this.bodyReadable._read(size);\n        } else {\n            this.emit('end');\n            this.emit('close');\n        }\n    }\n    /**\n   * The `connection` property is just an alias for the `socket` property.\n   *\n   * @deprecated â€” since v13.0.0 - Use socket instead.\n   */ get connection() {\n        return this.socket;\n    }\n    // The following methods are not implemented as they are not used in the\n    // Next.js codebase.\n    get aborted() {\n        throw Object.defineProperty(new Error('Method not implemented'), \"__NEXT_ERROR_CODE\", {\n            value: \"E52\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get complete() {\n        throw Object.defineProperty(new Error('Method not implemented'), \"__NEXT_ERROR_CODE\", {\n            value: \"E52\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get trailers() {\n        throw Object.defineProperty(new Error('Method not implemented'), \"__NEXT_ERROR_CODE\", {\n            value: \"E52\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get trailersDistinct() {\n        throw Object.defineProperty(new Error('Method not implemented'), \"__NEXT_ERROR_CODE\", {\n            value: \"E52\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get rawTrailers() {\n        throw Object.defineProperty(new Error('Method not implemented'), \"__NEXT_ERROR_CODE\", {\n            value: \"E52\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get rawHeaders() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    setTimeout() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nexport class MockedResponse extends Stream.Writable {\n    constructor(res = {}){\n        super(), this.statusMessage = '', this.finished = false, this.headersSent = false, /**\n   * A list of buffers that have been written to the response.\n   *\n   * @internal - used internally by Next.js\n   */ this.buffers = [];\n        this.statusCode = res.statusCode ?? 200;\n        this.socket = res.socket ?? null;\n        this.headers = res.headers ? fromNodeOutgoingHttpHeaders(res.headers) : new Headers();\n        this.headPromise = new Promise((resolve)=>{\n            this.headPromiseResolve = resolve;\n        });\n        // Attach listeners for the `finish`, `end`, and `error` events to the\n        // `MockedResponse` instance.\n        this.hasStreamed = new Promise((resolve, reject)=>{\n            this.on('finish', ()=>resolve(true));\n            this.on('end', ()=>resolve(true));\n            this.on('error', (err)=>reject(err));\n        }).then((val)=>{\n            this.headPromiseResolve == null ? void 0 : this.headPromiseResolve.call(this);\n            return val;\n        });\n        if (res.resWriter) {\n            this.resWriter = res.resWriter;\n        }\n    }\n    appendHeader(name, value) {\n        const values = Array.isArray(value) ? value : [\n            value\n        ];\n        for (const v of values){\n            this.headers.append(name, v);\n        }\n        return this;\n    }\n    /**\n   * Returns true if the response has been sent, false otherwise.\n   *\n   * @internal - used internally by Next.js\n   */ get isSent() {\n        return this.finished || this.headersSent;\n    }\n    /**\n   * The `connection` property is just an alias for the `socket` property.\n   *\n   * @deprecated â€” since v13.0.0 - Use socket instead.\n   */ get connection() {\n        return this.socket;\n    }\n    write(chunk) {\n        if (this.resWriter) {\n            return this.resWriter(chunk);\n        }\n        this.buffers.push(Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk));\n        return true;\n    }\n    end() {\n        this.finished = true;\n        return super.end(...arguments);\n    }\n    /**\n   * This method is a no-op because the `MockedResponse` instance is not\n   * actually connected to a socket. This method is not specified on the\n   * interface type for `ServerResponse` but is called by Node.js.\n   *\n   * @see https://github.com/nodejs/node/pull/7949\n   */ _implicitHeader() {}\n    _write(chunk, _encoding, callback) {\n        this.write(chunk);\n        // According to Node.js documentation, the callback MUST be invoked to\n        // signal that the write completed successfully. If this callback is not\n        // invoked, the 'finish' event will not be emitted.\n        //\n        // https://nodejs.org/docs/latest-v16.x/api/stream.html#writable_writechunk-encoding-callback\n        callback();\n    }\n    writeHead(statusCode, statusMessage, headers) {\n        if (!headers && typeof statusMessage !== 'string') {\n            headers = statusMessage;\n        } else if (typeof statusMessage === 'string' && statusMessage.length > 0) {\n            this.statusMessage = statusMessage;\n        }\n        if (headers) {\n            // When headers have been set with response.setHeader(), they will be\n            // merged with any headers passed to response.writeHead(), with the\n            // headers passed to response.writeHead() given precedence.\n            //\n            // https://nodejs.org/api/http.html#responsewriteheadstatuscode-statusmessage-headers\n            //\n            // For this reason, we need to only call `set` to ensure that this will\n            // overwrite any existing headers.\n            if (Array.isArray(headers)) {\n                // headers may be an Array where the keys and values are in the same list.\n                // It is not a list of tuples. So, the even-numbered offsets are key\n                // values, and the odd-numbered offsets are the associated values. The\n                // array is in the same format as request.rawHeaders.\n                for(let i = 0; i < headers.length; i += 2){\n                    // The header key is always a string according to the spec.\n                    this.setHeader(headers[i], headers[i + 1]);\n                }\n            } else {\n                for (const [key, value] of Object.entries(headers)){\n                    // Skip undefined values\n                    if (typeof value === 'undefined') continue;\n                    this.setHeader(key, value);\n                }\n            }\n        }\n        this.statusCode = statusCode;\n        this.headersSent = true;\n        this.headPromiseResolve == null ? void 0 : this.headPromiseResolve.call(this);\n        return this;\n    }\n    hasHeader(name) {\n        return this.headers.has(name);\n    }\n    getHeader(name) {\n        return this.headers.get(name) ?? undefined;\n    }\n    getHeaders() {\n        return toNodeOutgoingHttpHeaders(this.headers);\n    }\n    getHeaderNames() {\n        return Array.from(this.headers.keys());\n    }\n    setHeader(name, value) {\n        if (Array.isArray(value)) {\n            // Because `set` here should override any existing values, we need to\n            // delete the existing values before setting the new ones via `append`.\n            this.headers.delete(name);\n            for (const v of value){\n                this.headers.append(name, v);\n            }\n        } else if (typeof value === 'number') {\n            this.headers.set(name, value.toString());\n        } else {\n            this.headers.set(name, value);\n        }\n        return this;\n    }\n    removeHeader(name) {\n        this.headers.delete(name);\n    }\n    flushHeaders() {\n    // This is a no-op because we don't actually have a socket to flush the\n    // headers to.\n    }\n    // The following methods are not implemented as they are not used in the\n    // Next.js codebase.\n    get strictContentLength() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    writeEarlyHints() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get req() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    assignSocket() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    detachSocket() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    writeContinue() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    writeProcessing() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get upgrading() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get chunkedEncoding() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get shouldKeepAlive() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get useChunkedEncodingByDefault() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    get sendDate() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    setTimeout() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    addTrailers() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    setHeaders() {\n        throw Object.defineProperty(new Error('Method not implemented.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E41\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nexport function createRequestResponseMocks({ url, headers = {}, method = 'GET', bodyReadable, resWriter, socket = null }) {\n    return {\n        req: new MockedRequest({\n            url,\n            headers,\n            method,\n            socket,\n            readable: bodyReadable\n        }),\n        res: new MockedResponse({\n            socket,\n            resWriter\n        })\n    };\n}\n\n//# sourceMappingURL=mock-request.js.map"
        }
    ]
}