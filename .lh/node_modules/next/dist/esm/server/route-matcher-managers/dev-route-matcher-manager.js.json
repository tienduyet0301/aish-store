{
    "sourceFile": "node_modules/next/dist/esm/server/route-matcher-managers/dev-route-matcher-manager.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892838983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { RouteKind } from '../route-kind';\nimport { DefaultRouteMatcherManager } from './default-route-matcher-manager';\nimport path from '../../shared/lib/isomorphic/path';\nimport * as Log from '../../build/output/log';\nimport { cyan } from '../../lib/picocolors';\nexport class DevRouteMatcherManager extends DefaultRouteMatcherManager {\n    constructor(production, ensurer, dir){\n        super(), this.production = production, this.ensurer = ensurer, this.dir = dir;\n    }\n    async test(pathname, options) {\n        // Try to find a match within the developer routes.\n        const match = await super.match(pathname, options);\n        // Return if the match wasn't null. Unlike the implementation of `match`\n        // which uses `matchAll` here, this does not call `ensure` on the match\n        // found via the development matches.\n        return match !== null;\n    }\n    validate(pathname, matcher, options) {\n        const match = super.validate(pathname, matcher, options);\n        // If a match was found, check to see if there were any conflicting app or\n        // pages files.\n        // TODO: maybe expand this to _any_ duplicated routes instead?\n        if (match && matcher.duplicated && matcher.duplicated.some((duplicate)=>duplicate.definition.kind === RouteKind.APP_PAGE || duplicate.definition.kind === RouteKind.APP_ROUTE) && matcher.duplicated.some((duplicate)=>duplicate.definition.kind === RouteKind.PAGES || duplicate.definition.kind === RouteKind.PAGES_API)) {\n            return null;\n        }\n        return match;\n    }\n    async *matchAll(pathname, options) {\n        // Compile the development routes.\n        // TODO: we may want to only run this during testing, users won't be fast enough to require this many dir scans\n        await super.reload();\n        // Iterate over the development matches to see if one of them match the\n        // request path.\n        for await (const development of super.matchAll(pathname, options)){\n            // We're here, which means that we haven't seen this match yet, so we\n            // should try to ensure it and recompile the production matcher.\n            await this.ensurer.ensure(development, pathname);\n            await this.production.reload();\n            // Iterate over the production matches again, this time we should be able\n            // to match it against the production matcher unless there's an error.\n            for await (const production of this.production.matchAll(pathname, options)){\n                yield production;\n            }\n        }\n        // We tried direct matching against the pathname and against all the dynamic\n        // paths, so there was no match.\n        return null;\n    }\n    async reload() {\n        // Compile the production routes again.\n        await this.production.reload();\n        // Compile the development routes.\n        await super.reload();\n        // Check for and warn of any duplicates.\n        for (const [pathname, matchers] of Object.entries(this.matchers.duplicates)){\n            // We only want to warn about matchers resolving to the same path if their\n            // identities are different.\n            const identity = matchers[0].identity;\n            if (matchers.slice(1).some((matcher)=>matcher.identity !== identity)) {\n                continue;\n            }\n            Log.warn(`Duplicate page detected. ${matchers.map((matcher)=>cyan(path.relative(this.dir, matcher.definition.filename))).join(' and ')} resolve to ${cyan(pathname)}`);\n        }\n    }\n}\n\n//# sourceMappingURL=dev-route-matcher-manager.js.map"
        }
    ]
}