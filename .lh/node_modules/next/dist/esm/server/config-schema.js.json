{
    "sourceFile": "node_modules/next/dist/esm/server/config-schema.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892826812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { VALID_LOADERS } from '../shared/lib/image-config';\nimport { z } from 'next/dist/compiled/zod';\nimport { SUPPORTED_TEST_RUNNERS_LIST } from '../cli/next-test';\n// A custom zod schema for the SizeLimit type\nconst zSizeLimit = z.custom((val)=>{\n    if (typeof val === 'number' || typeof val === 'string') {\n        return true;\n    }\n    return false;\n});\nconst zExportMap = z.record(z.string(), z.object({\n    page: z.string(),\n    query: z.any(),\n    // private optional properties\n    _fallbackRouteParams: z.array(z.string()).optional(),\n    _isAppDir: z.boolean().optional(),\n    _isDynamicError: z.boolean().optional(),\n    _isRoutePPREnabled: z.boolean().optional(),\n    _isProspectiveRender: z.boolean().optional()\n}));\nconst zRouteHas = z.union([\n    z.object({\n        type: z.enum([\n            'header',\n            'query',\n            'cookie'\n        ]),\n        key: z.string(),\n        value: z.string().optional()\n    }),\n    z.object({\n        type: z.literal('host'),\n        key: z.undefined().optional(),\n        value: z.string()\n    })\n]);\nconst zRewrite = z.object({\n    source: z.string(),\n    destination: z.string(),\n    basePath: z.literal(false).optional(),\n    locale: z.literal(false).optional(),\n    has: z.array(zRouteHas).optional(),\n    missing: z.array(zRouteHas).optional(),\n    internal: z.boolean().optional()\n});\nconst zRedirect = z.object({\n    source: z.string(),\n    destination: z.string(),\n    basePath: z.literal(false).optional(),\n    locale: z.literal(false).optional(),\n    has: z.array(zRouteHas).optional(),\n    missing: z.array(zRouteHas).optional(),\n    internal: z.boolean().optional()\n}).and(z.union([\n    z.object({\n        statusCode: z.never().optional(),\n        permanent: z.boolean()\n    }),\n    z.object({\n        statusCode: z.number(),\n        permanent: z.never().optional()\n    })\n]));\nconst zHeader = z.object({\n    source: z.string(),\n    basePath: z.literal(false).optional(),\n    locale: z.literal(false).optional(),\n    headers: z.array(z.object({\n        key: z.string(),\n        value: z.string()\n    })),\n    has: z.array(zRouteHas).optional(),\n    missing: z.array(zRouteHas).optional(),\n    internal: z.boolean().optional()\n});\nconst zTurboLoaderItem = z.union([\n    z.string(),\n    z.object({\n        loader: z.string(),\n        // Any JSON value can be used as turbo loader options, so use z.any() here\n        options: z.record(z.string(), z.any())\n    })\n]);\nconst zTurboRuleConfigItemOptions = z.object({\n    loaders: z.array(zTurboLoaderItem),\n    as: z.string().optional()\n});\nconst zTurboRuleConfigItem = z.union([\n    z.literal(false),\n    z.record(z.string(), z.lazy(()=>zTurboRuleConfigItem)),\n    zTurboRuleConfigItemOptions\n]);\nconst zTurboRuleConfigItemOrShortcut = z.union([\n    z.array(zTurboLoaderItem),\n    zTurboRuleConfigItem\n]);\nconst zTurbopackConfig = z.strictObject({\n    rules: z.record(z.string(), zTurboRuleConfigItemOrShortcut).optional(),\n    resolveAlias: z.record(z.string(), z.union([\n        z.string(),\n        z.array(z.string()),\n        z.record(z.string(), z.union([\n            z.string(),\n            z.array(z.string())\n        ]))\n    ])).optional(),\n    resolveExtensions: z.array(z.string()).optional(),\n    moduleIds: z.enum([\n        'named',\n        'deterministic'\n    ]).optional()\n});\n// Same as zTurbopackConfig but with deprecated properties. Unfortunately, base\n// properties are duplicated here as `ZodType`s do not export `extend()`.\nconst zDeprecatedExperimentalTurboConfig = z.strictObject({\n    loaders: z.record(z.string(), z.array(zTurboLoaderItem)).optional(),\n    rules: z.record(z.string(), zTurboRuleConfigItemOrShortcut).optional(),\n    resolveAlias: z.record(z.string(), z.union([\n        z.string(),\n        z.array(z.string()),\n        z.record(z.string(), z.union([\n            z.string(),\n            z.array(z.string())\n        ]))\n    ])).optional(),\n    resolveExtensions: z.array(z.string()).optional(),\n    treeShaking: z.boolean().optional(),\n    persistentCaching: z.union([\n        z.number(),\n        z.literal(false)\n    ]).optional(),\n    memoryLimit: z.number().optional(),\n    moduleIds: z.enum([\n        'named',\n        'deterministic'\n    ]).optional(),\n    minify: z.boolean().optional(),\n    sourceMaps: z.boolean().optional()\n});\nexport const configSchema = z.lazy(()=>z.strictObject({\n        allowedDevOrigins: z.array(z.string()).optional(),\n        amp: z.object({\n            canonicalBase: z.string().optional()\n        }).optional(),\n        assetPrefix: z.string().optional(),\n        basePath: z.string().optional(),\n        bundlePagesRouterDependencies: z.boolean().optional(),\n        cacheHandler: z.string().min(1).optional(),\n        cacheMaxMemorySize: z.number().optional(),\n        cleanDistDir: z.boolean().optional(),\n        compiler: z.strictObject({\n            emotion: z.union([\n                z.boolean(),\n                z.object({\n                    sourceMap: z.boolean().optional(),\n                    autoLabel: z.union([\n                        z.literal('always'),\n                        z.literal('dev-only'),\n                        z.literal('never')\n                    ]).optional(),\n                    labelFormat: z.string().min(1).optional(),\n                    importMap: z.record(z.string(), z.record(z.string(), z.object({\n                        canonicalImport: z.tuple([\n                            z.string(),\n                            z.string()\n                        ]).optional(),\n                        styledBaseImport: z.tuple([\n                            z.string(),\n                            z.string()\n                        ]).optional()\n                    }))).optional()\n                })\n            ]).optional(),\n            reactRemoveProperties: z.union([\n                z.boolean().optional(),\n                z.object({\n                    properties: z.array(z.string()).optional()\n                })\n            ]).optional(),\n            relay: z.object({\n                src: z.string(),\n                artifactDirectory: z.string().optional(),\n                language: z.enum([\n                    'javascript',\n                    'typescript',\n                    'flow'\n                ]).optional(),\n                eagerEsModules: z.boolean().optional()\n            }).optional(),\n            removeConsole: z.union([\n                z.boolean().optional(),\n                z.object({\n                    exclude: z.array(z.string()).min(1).optional()\n                })\n            ]).optional(),\n            styledComponents: z.union([\n                z.boolean().optional(),\n                z.object({\n                    displayName: z.boolean().optional(),\n                    topLevelImportPaths: z.array(z.string()).optional(),\n                    ssr: z.boolean().optional(),\n                    fileName: z.boolean().optional(),\n                    meaninglessFileNames: z.array(z.string()).optional(),\n                    minify: z.boolean().optional(),\n                    transpileTemplateLiterals: z.boolean().optional(),\n                    namespace: z.string().min(1).optional(),\n                    pure: z.boolean().optional(),\n                    cssProp: z.boolean().optional()\n                })\n            ]),\n            styledJsx: z.union([\n                z.boolean().optional(),\n                z.object({\n                    useLightningcss: z.boolean().optional()\n                })\n            ]),\n            define: z.record(z.string(), z.string()).optional()\n        }).optional(),\n        compress: z.boolean().optional(),\n        configOrigin: z.string().optional(),\n        crossOrigin: z.union([\n            z.literal('anonymous'),\n            z.literal('use-credentials')\n        ]).optional(),\n        deploymentId: z.string().optional(),\n        devIndicators: z.union([\n            z.object({\n                buildActivityPosition: z.union([\n                    z.literal('bottom-left'),\n                    z.literal('bottom-right'),\n                    z.literal('top-left'),\n                    z.literal('top-right')\n                ]).optional(),\n                position: z.union([\n                    z.literal('bottom-left'),\n                    z.literal('bottom-right'),\n                    z.literal('top-left'),\n                    z.literal('top-right')\n                ]).optional()\n            }),\n            z.literal(false)\n        ]).optional(),\n        distDir: z.string().min(1).optional(),\n        env: z.record(z.string(), z.union([\n            z.string(),\n            z.undefined()\n        ])).optional(),\n        eslint: z.strictObject({\n            dirs: z.array(z.string().min(1)).optional(),\n            ignoreDuringBuilds: z.boolean().optional()\n        }).optional(),\n        excludeDefaultMomentLocales: z.boolean().optional(),\n        experimental: z.strictObject({\n            nodeMiddleware: z.boolean().optional(),\n            after: z.boolean().optional(),\n            appDocumentPreloading: z.boolean().optional(),\n            appNavFailHandling: z.boolean().optional(),\n            preloadEntriesOnStart: z.boolean().optional(),\n            allowedRevalidateHeaderKeys: z.array(z.string()).optional(),\n            amp: z.object({\n                // AMP optimizer option is unknown, use z.any() here\n                optimizer: z.any().optional(),\n                skipValidation: z.boolean().optional(),\n                validator: z.string().optional()\n            }).optional(),\n            staleTimes: z.object({\n                dynamic: z.number().optional(),\n                static: z.number().optional()\n            }).optional(),\n            cacheLife: z.record(z.object({\n                stale: z.number().optional(),\n                revalidate: z.number().optional(),\n                expire: z.number().optional()\n            })).optional(),\n            cacheHandlers: z.record(z.string(), z.string().optional()).optional(),\n            clientRouterFilter: z.boolean().optional(),\n            clientRouterFilterRedirects: z.boolean().optional(),\n            clientRouterFilterAllowedRate: z.number().optional(),\n            cpus: z.number().optional(),\n            memoryBasedWorkersCount: z.boolean().optional(),\n            craCompat: z.boolean().optional(),\n            caseSensitiveRoutes: z.boolean().optional(),\n            clientSegmentCache: z.union([\n                z.boolean(),\n                z.literal('client-only')\n            ]).optional(),\n            dynamicOnHover: z.boolean().optional(),\n            disableOptimizedLoading: z.boolean().optional(),\n            disablePostcssPresetEnv: z.boolean().optional(),\n            dynamicIO: z.boolean().optional(),\n            inlineCss: z.boolean().optional(),\n            esmExternals: z.union([\n                z.boolean(),\n                z.literal('loose')\n            ]).optional(),\n            serverActions: z.object({\n                bodySizeLimit: zSizeLimit.optional(),\n                allowedOrigins: z.array(z.string()).optional()\n            }).optional(),\n            // The original type was Record<string, any>\n            extensionAlias: z.record(z.string(), z.any()).optional(),\n            externalDir: z.boolean().optional(),\n            externalMiddlewareRewritesResolve: z.boolean().optional(),\n            fallbackNodePolyfills: z.literal(false).optional(),\n            fetchCacheKeyPrefix: z.string().optional(),\n            forceSwcTransforms: z.boolean().optional(),\n            fullySpecified: z.boolean().optional(),\n            gzipSize: z.boolean().optional(),\n            imgOptConcurrency: z.number().int().optional().nullable(),\n            imgOptTimeoutInSeconds: z.number().int().optional(),\n            imgOptMaxInputPixels: z.number().int().optional(),\n            imgOptSequentialRead: z.boolean().optional().nullable(),\n            isrFlushToDisk: z.boolean().optional(),\n            largePageDataBytes: z.number().optional(),\n            linkNoTouchStart: z.boolean().optional(),\n            manualClientBasePath: z.boolean().optional(),\n            middlewarePrefetch: z.enum([\n                'strict',\n                'flexible'\n            ]).optional(),\n            multiZoneDraftMode: z.boolean().optional(),\n            cssChunking: z.union([\n                z.boolean(),\n                z.literal('strict')\n            ]).optional(),\n            nextScriptWorkers: z.boolean().optional(),\n            // The critter option is unknown, use z.any() here\n            optimizeCss: z.union([\n                z.boolean(),\n                z.any()\n            ]).optional(),\n            optimisticClientCache: z.boolean().optional(),\n            parallelServerCompiles: z.boolean().optional(),\n            parallelServerBuildTraces: z.boolean().optional(),\n            ppr: z.union([\n                z.boolean(),\n                z.literal('incremental')\n            ]).readonly().optional(),\n            taint: z.boolean().optional(),\n            prerenderEarlyExit: z.boolean().optional(),\n            proxyTimeout: z.number().gte(0).optional(),\n            routerBFCache: z.boolean().optional(),\n            scrollRestoration: z.boolean().optional(),\n            sri: z.object({\n                algorithm: z.enum([\n                    'sha256',\n                    'sha384',\n                    'sha512'\n                ]).optional()\n            }).optional(),\n            strictNextHead: z.boolean().optional(),\n            swcPlugins: z// The specific swc plugin's option is unknown, use z.any() here\n            .array(z.tuple([\n                z.string(),\n                z.record(z.string(), z.any())\n            ])).optional(),\n            swcTraceProfiling: z.boolean().optional(),\n            // NonNullable<webpack.Configuration['experiments']>['buildHttp']\n            urlImports: z.any().optional(),\n            viewTransition: z.boolean().optional(),\n            workerThreads: z.boolean().optional(),\n            webVitalsAttribution: z.array(z.union([\n                z.literal('CLS'),\n                z.literal('FCP'),\n                z.literal('FID'),\n                z.literal('INP'),\n                z.literal('LCP'),\n                z.literal('TTFB')\n            ])).optional(),\n            // This is partial set of mdx-rs transform options we support, aligned\n            // with next_core::next_config::MdxRsOptions. Ensure both types are kept in sync.\n            mdxRs: z.union([\n                z.boolean(),\n                z.object({\n                    development: z.boolean().optional(),\n                    jsxRuntime: z.string().optional(),\n                    jsxImportSource: z.string().optional(),\n                    providerImportSource: z.string().optional(),\n                    mdxType: z.enum([\n                        'gfm',\n                        'commonmark'\n                    ]).optional()\n                })\n            ]).optional(),\n            typedRoutes: z.boolean().optional(),\n            webpackBuildWorker: z.boolean().optional(),\n            webpackMemoryOptimizations: z.boolean().optional(),\n            /**\n         * @deprecated Use `config.turbopack` instead.\n         */ turbo: zDeprecatedExperimentalTurboConfig.optional(),\n            turbopackMemoryLimit: z.number().optional(),\n            turbopackMinify: z.boolean().optional(),\n            turbopackPersistentCaching: z.boolean().optional(),\n            turbopackSourceMaps: z.boolean().optional(),\n            turbopackTreeShaking: z.boolean().optional(),\n            optimizePackageImports: z.array(z.string()).optional(),\n            optimizeServerReact: z.boolean().optional(),\n            clientTraceMetadata: z.array(z.string()).optional(),\n            serverMinification: z.boolean().optional(),\n            serverSourceMaps: z.boolean().optional(),\n            useWasmBinary: z.boolean().optional(),\n            useLightningcss: z.boolean().optional(),\n            useEarlyImport: z.boolean().optional(),\n            testProxy: z.boolean().optional(),\n            defaultTestRunner: z.enum(SUPPORTED_TEST_RUNNERS_LIST).optional(),\n            allowDevelopmentBuild: z.literal(true).optional(),\n            reactCompiler: z.union([\n                z.boolean(),\n                z.object({\n                    compilationMode: z.enum([\n                        'infer',\n                        'annotation',\n                        'all'\n                    ]).optional(),\n                    panicThreshold: z.enum([\n                        'ALL_ERRORS',\n                        'CRITICAL_ERRORS',\n                        'NONE'\n                    ]).optional()\n                }).optional()\n            ]),\n            staticGenerationRetryCount: z.number().int().optional(),\n            staticGenerationMaxConcurrency: z.number().int().optional(),\n            staticGenerationMinPagesPerWorker: z.number().int().optional(),\n            typedEnv: z.boolean().optional(),\n            serverComponentsHmrCache: z.boolean().optional(),\n            authInterrupts: z.boolean().optional(),\n            useCache: z.boolean().optional(),\n            slowModuleDetection: z.object({\n                buildTimeThresholdMs: z.number().int()\n            }).optional()\n        }).optional(),\n        exportPathMap: z.function().args(zExportMap, z.object({\n            dev: z.boolean(),\n            dir: z.string(),\n            outDir: z.string().nullable(),\n            distDir: z.string(),\n            buildId: z.string()\n        })).returns(z.union([\n            zExportMap,\n            z.promise(zExportMap)\n        ])).optional(),\n        generateBuildId: z.function().args().returns(z.union([\n            z.string(),\n            z.null(),\n            z.promise(z.union([\n                z.string(),\n                z.null()\n            ]))\n        ])).optional(),\n        generateEtags: z.boolean().optional(),\n        headers: z.function().args().returns(z.promise(z.array(zHeader))).optional(),\n        htmlLimitedBots: z.instanceof(RegExp).optional(),\n        httpAgentOptions: z.strictObject({\n            keepAlive: z.boolean().optional()\n        }).optional(),\n        i18n: z.strictObject({\n            defaultLocale: z.string().min(1),\n            domains: z.array(z.strictObject({\n                defaultLocale: z.string().min(1),\n                domain: z.string().min(1),\n                http: z.literal(true).optional(),\n                locales: z.array(z.string().min(1)).optional()\n            })).optional(),\n            localeDetection: z.literal(false).optional(),\n            locales: z.array(z.string().min(1))\n        }).nullable().optional(),\n        images: z.strictObject({\n            localPatterns: z.array(z.strictObject({\n                pathname: z.string().optional(),\n                search: z.string().optional()\n            })).max(25).optional(),\n            remotePatterns: z.array(z.union([\n                z.instanceof(URL),\n                z.strictObject({\n                    hostname: z.string(),\n                    pathname: z.string().optional(),\n                    port: z.string().max(5).optional(),\n                    protocol: z.enum([\n                        'http',\n                        'https'\n                    ]).optional(),\n                    search: z.string().optional()\n                })\n            ])).max(50).optional(),\n            unoptimized: z.boolean().optional(),\n            contentSecurityPolicy: z.string().optional(),\n            contentDispositionType: z.enum([\n                'inline',\n                'attachment'\n            ]).optional(),\n            dangerouslyAllowSVG: z.boolean().optional(),\n            deviceSizes: z.array(z.number().int().gte(1).lte(10000)).max(25).optional(),\n            disableStaticImages: z.boolean().optional(),\n            domains: z.array(z.string()).max(50).optional(),\n            formats: z.array(z.enum([\n                'image/avif',\n                'image/webp'\n            ])).max(4).optional(),\n            imageSizes: z.array(z.number().int().gte(1).lte(10000)).min(0).max(25).optional(),\n            loader: z.enum(VALID_LOADERS).optional(),\n            loaderFile: z.string().optional(),\n            minimumCacheTTL: z.number().int().gte(0).optional(),\n            path: z.string().optional(),\n            qualities: z.array(z.number().int().gte(1).lte(100)).min(1).max(20).optional()\n        }).optional(),\n        logging: z.union([\n            z.object({\n                fetches: z.object({\n                    fullUrl: z.boolean().optional(),\n                    hmrRefreshes: z.boolean().optional()\n                }).optional(),\n                incomingRequests: z.union([\n                    z.boolean(),\n                    z.object({\n                        ignore: z.array(z.instanceof(RegExp))\n                    })\n                ]).optional()\n            }),\n            z.literal(false)\n        ]).optional(),\n        modularizeImports: z.record(z.string(), z.object({\n            transform: z.union([\n                z.string(),\n                z.record(z.string(), z.string())\n            ]),\n            preventFullImport: z.boolean().optional(),\n            skipDefaultConversion: z.boolean().optional()\n        })).optional(),\n        onDemandEntries: z.strictObject({\n            maxInactiveAge: z.number().optional(),\n            pagesBufferLength: z.number().optional()\n        }).optional(),\n        output: z.enum([\n            'standalone',\n            'export'\n        ]).optional(),\n        outputFileTracingRoot: z.string().optional(),\n        outputFileTracingExcludes: z.record(z.string(), z.array(z.string())).optional(),\n        outputFileTracingIncludes: z.record(z.string(), z.array(z.string())).optional(),\n        pageExtensions: z.array(z.string()).min(1).optional(),\n        poweredByHeader: z.boolean().optional(),\n        productionBrowserSourceMaps: z.boolean().optional(),\n        publicRuntimeConfig: z.record(z.string(), z.any()).optional(),\n        reactProductionProfiling: z.boolean().optional(),\n        reactStrictMode: z.boolean().nullable().optional(),\n        reactMaxHeadersLength: z.number().nonnegative().int().optional(),\n        redirects: z.function().args().returns(z.promise(z.array(zRedirect))).optional(),\n        rewrites: z.function().args().returns(z.promise(z.union([\n            z.array(zRewrite),\n            z.object({\n                beforeFiles: z.array(zRewrite),\n                afterFiles: z.array(zRewrite),\n                fallback: z.array(zRewrite)\n            })\n        ]))).optional(),\n        // sassOptions properties are unknown besides implementation, use z.any() here\n        sassOptions: z.object({\n            implementation: z.string().optional()\n        }).catchall(z.any()).optional(),\n        serverExternalPackages: z.array(z.string()).optional(),\n        serverRuntimeConfig: z.record(z.string(), z.any()).optional(),\n        skipMiddlewareUrlNormalize: z.boolean().optional(),\n        skipTrailingSlashRedirect: z.boolean().optional(),\n        staticPageGenerationTimeout: z.number().optional(),\n        expireTime: z.number().optional(),\n        target: z.string().optional(),\n        trailingSlash: z.boolean().optional(),\n        transpilePackages: z.array(z.string()).optional(),\n        turbopack: zTurbopackConfig.optional(),\n        typescript: z.strictObject({\n            ignoreBuildErrors: z.boolean().optional(),\n            tsconfigPath: z.string().min(1).optional()\n        }).optional(),\n        useFileSystemPublicRoutes: z.boolean().optional(),\n        // The webpack config type is unknown, use z.any() here\n        webpack: z.any().nullable().optional(),\n        watchOptions: z.strictObject({\n            pollIntervalMs: z.number().positive().finite().optional()\n        }).optional()\n    }));\n\n//# sourceMappingURL=config-schema.js.map"
        }
    ]
}