{
    "sourceFile": "node_modules/next/dist/esm/server/web/sandbox/fetch-inline-assets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892846580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { createReadStream, promises as fs } from 'fs';\nimport { requestToBodyStream } from '../../body-streams';\nimport { resolve } from 'path';\n/**\n * Short-circuits the `fetch` function\n * to return a stream for a given asset, if a user used `new URL(\"file\", import.meta.url)`.\n * This allows to embed assets in Edge Runtime.\n */ export async function fetchInlineAsset(options) {\n    const inputString = String(options.input);\n    if (!inputString.startsWith('blob:')) {\n        return;\n    }\n    const name = inputString.replace('blob:', '');\n    const asset = options.assets ? options.assets.find((x)=>x.name === name) : {\n        name,\n        filePath: name\n    };\n    if (!asset) {\n        return;\n    }\n    const filePath = resolve(options.distDir, asset.filePath);\n    const fileIsReadable = await fs.access(filePath).then(()=>true, ()=>false);\n    if (fileIsReadable) {\n        const readStream = createReadStream(filePath);\n        return new options.context.Response(requestToBodyStream(options.context, Uint8Array, readStream));\n    }\n}\n\n//# sourceMappingURL=fetch-inline-assets.js.map"
        }
    ]
}