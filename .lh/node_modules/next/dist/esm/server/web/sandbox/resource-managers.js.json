{
    "sourceFile": "node_modules/next/dist/esm/server/web/sandbox/resource-managers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892846673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "class ResourceManager {\n    add(resourceArgs) {\n        const resource = this.create(resourceArgs);\n        this.resources.push(resource);\n        return resource;\n    }\n    remove(resource) {\n        this.resources = this.resources.filter((r)=>r !== resource);\n        this.destroy(resource);\n    }\n    removeAll() {\n        this.resources.forEach(this.destroy);\n        this.resources = [];\n    }\n    constructor(){\n        this.resources = [];\n    }\n}\nclass IntervalsManager extends ResourceManager {\n    create(args) {\n        // TODO: use the edge runtime provided `setInterval` instead\n        return webSetIntervalPolyfill(...args);\n    }\n    destroy(interval) {\n        clearInterval(interval);\n    }\n}\nclass TimeoutsManager extends ResourceManager {\n    create(args) {\n        // TODO: use the edge runtime provided `setTimeout` instead\n        return webSetTimeoutPolyfill(...args);\n    }\n    destroy(timeout) {\n        clearTimeout(timeout);\n    }\n}\nfunction webSetIntervalPolyfill(callback, ms, ...args) {\n    return setInterval(()=>{\n        // node's `setInterval` sets `this` to the `Timeout` instance it returned,\n        // but web `setInterval` always sets `this` to `window`\n        // see: https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval#the_this_problem\n        return callback.apply(globalThis, args);\n    }, ms)[Symbol.toPrimitive]();\n}\nfunction webSetTimeoutPolyfill(callback, ms, ...args) {\n    const wrappedCallback = ()=>{\n        try {\n            // node's `setTimeout` sets `this` to the `Timeout` instance it returned,\n            // but web `setTimeout` always sets `this` to `window`\n            // see: https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout#the_this_problem\n            return callback.apply(globalThis, args);\n        } finally{\n            // On certain older node versions (<20.16.0, <22.4.0),\n            // a `setTimeout` whose Timeout was converted to a primitive will leak.\n            // See: https://github.com/nodejs/node/issues/53335\n            // We can work around this by explicitly calling `clearTimeout` after the callback runs.\n            clearTimeout(timeout);\n        }\n    };\n    const timeout = setTimeout(wrappedCallback, ms);\n    return timeout[Symbol.toPrimitive]();\n}\nexport const intervalsManager = new IntervalsManager();\nexport const timeoutsManager = new TimeoutsManager();\n\n//# sourceMappingURL=resource-managers.js.map"
        }
    ]
}