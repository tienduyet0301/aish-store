{
    "sourceFile": "node_modules/next/dist/esm/server/base-http/web.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892826275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { toNodeOutgoingHttpHeaders } from '../web/utils';\nimport { BaseNextRequest, BaseNextResponse } from './index';\nimport { DetachedPromise } from '../../lib/detached-promise';\nimport { CloseController, trackBodyConsumed } from '../web/web-on-close';\nimport { InvariantError } from '../../shared/lib/invariant-error';\nexport class WebNextRequest extends BaseNextRequest {\n    constructor(request){\n        const url = new URL(request.url);\n        super(request.method, url.href.slice(url.origin.length), request.clone().body);\n        this.request = request;\n        this.fetchMetrics = request.fetchMetrics;\n        this.headers = {};\n        for (const [name, value] of request.headers.entries()){\n            this.headers[name] = value;\n        }\n    }\n    async parseBody(_limit) {\n        throw Object.defineProperty(new Error('parseBody is not implemented in the web runtime'), \"__NEXT_ERROR_CODE\", {\n            value: \"E213\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nexport class WebNextResponse extends BaseNextResponse {\n    constructor(transformStream = new TransformStream()){\n        super(transformStream.writable), this.transformStream = transformStream, this.headers = new Headers(), this.textBody = undefined, this.closeController = new CloseController(), this.sendPromise = new DetachedPromise(), this._sent = false;\n    }\n    setHeader(name, value) {\n        this.headers.delete(name);\n        for (const val of Array.isArray(value) ? value : [\n            value\n        ]){\n            this.headers.append(name, val);\n        }\n        return this;\n    }\n    removeHeader(name) {\n        this.headers.delete(name);\n        return this;\n    }\n    getHeaderValues(name) {\n        var _this_getHeader;\n        // https://developer.mozilla.org/docs/Web/API/Headers/get#example\n        return (_this_getHeader = this.getHeader(name)) == null ? void 0 : _this_getHeader.split(',').map((v)=>v.trimStart());\n    }\n    getHeader(name) {\n        return this.headers.get(name) ?? undefined;\n    }\n    getHeaders() {\n        return toNodeOutgoingHttpHeaders(this.headers);\n    }\n    hasHeader(name) {\n        return this.headers.has(name);\n    }\n    appendHeader(name, value) {\n        this.headers.append(name, value);\n        return this;\n    }\n    body(value) {\n        this.textBody = value;\n        return this;\n    }\n    send() {\n        this.sendPromise.resolve();\n        this._sent = true;\n    }\n    get sent() {\n        return this._sent;\n    }\n    async toResponse() {\n        // If we haven't called `send` yet, wait for it to be called.\n        if (!this.sent) await this.sendPromise.promise;\n        const body = this.textBody ?? this.transformStream.readable;\n        let bodyInit = body;\n        // if the response is streaming, onClose() can still be called after this point.\n        const canAddListenersLater = typeof bodyInit !== 'string';\n        const shouldTrackBody = canAddListenersLater ? true : this.closeController.listeners > 0;\n        if (shouldTrackBody) {\n            bodyInit = trackBodyConsumed(body, ()=>{\n                this.closeController.dispatchClose();\n            });\n        }\n        return new Response(bodyInit, {\n            headers: this.headers,\n            status: this.statusCode,\n            statusText: this.statusMessage\n        });\n    }\n    onClose(callback) {\n        if (this.closeController.isClosed) {\n            throw Object.defineProperty(new InvariantError('Cannot call onClose on a WebNextResponse that is already closed'), \"__NEXT_ERROR_CODE\", {\n                value: \"E599\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        return this.closeController.onClose(callback);\n    }\n}\n\n//# sourceMappingURL=web.js.map"
        }
    ]
}