{
    "sourceFile": "node_modules/next/dist/esm/lib/multi-file-writer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892815420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from '../shared/lib/isomorphic/path';\n/**\n * MultiFileWriter is a utility for writing multiple files in parallel that\n * guarantees that all files will be written after their containing directory\n * is created, and that the directory will only be created once.\n */ export class MultiFileWriter {\n    constructor(/**\n     * The file system methods to use.\n     */ fs){\n        this.fs = fs;\n        this.tasks = [];\n    }\n    /**\n   * Finds or creates a task for a directory.\n   *\n   * @param directory - The directory to find or create a task for.\n   * @returns The task for the directory.\n   */ findOrCreateTask(directory) {\n        // See if this directory already has a task to create it.\n        for (const task of this.tasks){\n            if (task[0] === directory) {\n                return task;\n            }\n        }\n        const promise = this.fs.mkdir(directory);\n        // Attach a catch handler so that it doesn't throw an unhandled promise\n        // rejection warning.\n        promise.catch(()=>{});\n        // Otherwise, create a new task for this directory.\n        const task = [\n            directory,\n            promise,\n            []\n        ];\n        this.tasks.push(task);\n        return task;\n    }\n    /**\n   * Appends a file to the writer to be written after its containing directory\n   * is created. The file writer should be awaited after all the files have been\n   * appended. Any async operation that occurs between appending and awaiting\n   * may cause an unhandled promise rejection warning and potentially crash the\n   * process.\n   *\n   * @param filePath - The path to the file to write.\n   * @param data - The data to write to the file.\n   */ append(filePath, data) {\n        // Find or create a task for the directory that contains the file.\n        const task = this.findOrCreateTask(path.dirname(filePath));\n        const promise = task[1].then(()=>this.fs.writeFile(filePath, data));\n        // Attach a catch handler so that it doesn't throw an unhandled promise\n        // rejection warning.\n        promise.catch(()=>{});\n        // Add the file write to the task AFTER the directory promise has resolved.\n        task[2].push(promise);\n    }\n    /**\n   * Returns a promise that resolves when all the files have been written.\n   */ wait() {\n        return Promise.all(this.tasks.flatMap((task)=>task[2]));\n    }\n}\n\n//# sourceMappingURL=multi-file-writer.js.map"
        }
    ]
}