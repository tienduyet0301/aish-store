{
    "sourceFile": "node_modules/next/dist/esm/lib/eslint/customFormatter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892807230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { bold, cyan, gray, red, yellow } from '../picocolors';\nimport path from 'path';\n// eslint-disable-next-line no-shadow\nexport var MessageSeverity = /*#__PURE__*/ function(MessageSeverity) {\n    MessageSeverity[MessageSeverity[\"Warning\"] = 1] = \"Warning\";\n    MessageSeverity[MessageSeverity[\"Error\"] = 2] = \"Error\";\n    return MessageSeverity;\n}({});\nfunction pluginCount(messages) {\n    let nextPluginWarningCount = 0;\n    let nextPluginErrorCount = 0;\n    for(let i = 0; i < messages.length; i++){\n        const { severity, ruleId } = messages[i];\n        if (ruleId == null ? void 0 : ruleId.includes('@next/next')) {\n            if (severity === 1) {\n                nextPluginWarningCount += 1;\n            } else {\n                nextPluginErrorCount += 1;\n            }\n        }\n    }\n    return {\n        nextPluginErrorCount,\n        nextPluginWarningCount\n    };\n}\nfunction formatMessage(dir, messages, filePath) {\n    let fileName = path.posix.normalize(path.relative(dir, filePath).replace(/\\\\/g, '/'));\n    if (!fileName.startsWith('.')) {\n        fileName = './' + fileName;\n    }\n    let output = '\\n' + cyan(fileName);\n    for(let i = 0; i < messages.length; i++){\n        const { message, severity, line, column, ruleId } = messages[i];\n        output = output + '\\n';\n        if (line && column) {\n            output = output + yellow(line.toString()) + ':' + yellow(column.toString()) + '  ';\n        }\n        if (severity === 1) {\n            output += yellow(bold('Warning')) + ': ';\n        } else {\n            output += red(bold('Error')) + ': ';\n        }\n        output += message;\n        if (ruleId) {\n            output += '  ' + gray(bold(ruleId));\n        }\n    }\n    return output;\n}\nexport async function formatResults(baseDir, results, format) {\n    let totalNextPluginErrorCount = 0;\n    let totalNextPluginWarningCount = 0;\n    let resultsWithMessages = results.filter(({ messages })=>messages == null ? void 0 : messages.length);\n    // Track number of Next.js plugin errors and warnings\n    resultsWithMessages.forEach(({ messages })=>{\n        const res = pluginCount(messages);\n        totalNextPluginErrorCount += res.nextPluginErrorCount;\n        totalNextPluginWarningCount += res.nextPluginWarningCount;\n    });\n    // Use user defined formatter or Next.js's built-in custom formatter\n    const output = format ? await format(resultsWithMessages) : resultsWithMessages.map(({ messages, filePath })=>formatMessage(baseDir, messages, filePath)).join('\\n');\n    return {\n        output: output,\n        outputWithMessages: resultsWithMessages.length > 0 ? output + `\\n\\n${cyan('info')}  - Need to disable some ESLint rules? Learn more here: https://nextjs.org/docs/app/api-reference/config/eslint#disabling-rules` : '',\n        totalNextPluginErrorCount,\n        totalNextPluginWarningCount\n    };\n}\n\n//# sourceMappingURL=customFormatter.js.map"
        }
    ]
}