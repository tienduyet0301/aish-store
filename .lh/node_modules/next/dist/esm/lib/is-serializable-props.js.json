{
    "sourceFile": "node_modules/next/dist/esm/lib/is-serializable-props.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892811429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { isPlainObject, getObjectClassLabel } from '../shared/lib/is-plain-object';\nconst regexpPlainIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/;\nexport class SerializableError extends Error {\n    constructor(page, method, path, message){\n        super(path ? `Error serializing \\`${path}\\` returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}` : `Error serializing props returned from \\`${method}\\` in \"${page}\".\\nReason: ${message}`);\n    }\n}\nexport function isSerializableProps(page, method, input) {\n    if (!isPlainObject(input)) {\n        throw Object.defineProperty(new SerializableError(page, method, '', `Props must be returned as a plain object from ${method}: \\`{ props: { ... } }\\` (received: \\`${getObjectClassLabel(input)}\\`).`), \"__NEXT_ERROR_CODE\", {\n            value: \"E394\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    function visit(visited, value, path) {\n        if (visited.has(value)) {\n            throw Object.defineProperty(new SerializableError(page, method, path, `Circular references cannot be expressed in JSON (references: \\`${visited.get(value) || '(self)'}\\`).`), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        visited.set(value, path);\n    }\n    function isSerializable(refs, value, path) {\n        const type = typeof value;\n        if (// `null` can be serialized, but not `undefined`.\n        value === null || // n.b. `bigint`, `function`, `symbol`, and `undefined` cannot be\n        // serialized.\n        //\n        // `object` is special-cased below, as it may represent `null`, an Array,\n        // a plain object, a class, et al.\n        type === 'boolean' || type === 'number' || type === 'string') {\n            return true;\n        }\n        if (type === 'undefined') {\n            throw Object.defineProperty(new SerializableError(page, method, path, '`undefined` cannot be serialized as JSON. Please use `null` or omit this value.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (isPlainObject(value)) {\n            visit(refs, value, path);\n            if (Object.entries(value).every(([key, nestedValue])=>{\n                const nextPath = regexpPlainIdentifier.test(key) ? `${path}.${key}` : `${path}[${JSON.stringify(key)}]`;\n                const newRefs = new Map(refs);\n                return isSerializable(newRefs, key, nextPath) && isSerializable(newRefs, nestedValue, nextPath);\n            })) {\n                return true;\n            }\n            throw Object.defineProperty(new SerializableError(page, method, path, `invariant: Unknown error encountered in Object.`), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (Array.isArray(value)) {\n            visit(refs, value, path);\n            if (value.every((nestedValue, index)=>{\n                const newRefs = new Map(refs);\n                return isSerializable(newRefs, nestedValue, `${path}[${index}]`);\n            })) {\n                return true;\n            }\n            throw Object.defineProperty(new SerializableError(page, method, path, `invariant: Unknown error encountered in Array.`), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        // None of these can be expressed as JSON:\n        // const type: \"bigint\" | \"symbol\" | \"object\" | \"function\"\n        throw Object.defineProperty(new SerializableError(page, method, path, '`' + type + '`' + (type === 'object' ? ` (\"${Object.prototype.toString.call(value)}\")` : '') + ' cannot be serialized as JSON. Please only return JSON serializable data types.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E394\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return isSerializable(new Map(), input, '');\n}\n\n//# sourceMappingURL=is-serializable-props.js.map"
        }
    ]
}