{
    "sourceFile": "node_modules/next/dist/esm/lib/format-cli-help-output.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892808409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { bold } from '../lib/picocolors';\n// Copy-pasted from Commander's Help class -> formatHelp().\n// TL;DR, we're overriding the built-in help to add a few niceties.\n// Link: https://github.com/tj/commander.js/blob/master/lib/help.js\nconst formatCliHelpOutput = (cmd, helper)=>{\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2 // between term and description\n    ;\n    function formatItem(term, description) {\n        let value = term;\n        if (description) {\n            if (term === 'directory') {\n                value = `[${term}]`;\n            }\n            const fullText = `${value.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n            return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n        }\n        return term;\n    }\n    function formatList(textArray) {\n        return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n    // Usage\n    let output = [\n        `${bold('Usage:')} ${helper.commandUsage(cmd)}`,\n        ''\n    ];\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n        output = output.concat([\n            helper.wrap(commandDescription, helpWidth, 0),\n            ''\n        ]);\n    }\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument)=>{\n        return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n        output = output.concat([\n            `${bold('Arguments:')}`,\n            formatList(argumentList),\n            ''\n        ]);\n    }\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option)=>{\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n        output = output.concat([\n            `${bold('Options:')}`,\n            formatList(optionList),\n            ''\n        ]);\n    }\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((subCmd)=>{\n        return formatItem(helper.subcommandTerm(subCmd), helper.subcommandDescription(subCmd));\n    });\n    if (commandList.length > 0) {\n        output = output.concat([\n            `${bold('Commands:')}`,\n            formatList(commandList),\n            ''\n        ]);\n    }\n    return output.join('\\n');\n};\nexport { formatCliHelpOutput };\n\n//# sourceMappingURL=format-cli-help-output.js.map"
        }
    ]
}