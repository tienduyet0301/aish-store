{
    "sourceFile": "node_modules/next/dist/esm/lib/metadata/metadata-context.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892813703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { trackFallbackParamAccessed } from '../../server/app-render/dynamic-rendering';\nexport function createMetadataContext(pathname, renderOpts) {\n    return {\n        pathname,\n        trailingSlash: renderOpts.trailingSlash,\n        isStaticMetadataRouteFile: false\n    };\n}\nexport function createTrackedMetadataContext(pathname, renderOpts, workStore) {\n    return {\n        // Use the regular metadata context, but we trap the pathname access.\n        ...createMetadataContext(pathname, renderOpts),\n        // Setup the trap around the pathname access so we can track when the\n        // pathname is accessed while resolving metadata which would indicate it's\n        // being used to resolve a relative URL. If that's the case, we don't want\n        // to provide it, and instead we should error.\n        get pathname () {\n            if (workStore && workStore.isStaticGeneration && workStore.fallbackRouteParams && workStore.fallbackRouteParams.size > 0) {\n                trackFallbackParamAccessed(workStore, 'metadata relative url resolving');\n            }\n            return pathname;\n        }\n    };\n}\n\n//# sourceMappingURL=metadata-context.js.map"
        }
    ]
}