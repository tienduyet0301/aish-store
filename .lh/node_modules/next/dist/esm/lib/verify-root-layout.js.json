{
    "sourceFile": "node_modules/next/dist/esm/lib/verify-root-layout.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892818090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import path from 'path';\nimport * as Log from '../build/output/log';\nimport { promises as fs } from 'fs';\nimport { bold } from './picocolors';\nimport { APP_DIR_ALIAS } from './constants';\nconst globOrig = require('next/dist/compiled/glob');\nconst glob = (cwd, pattern)=>{\n    return new Promise((resolve, reject)=>{\n        globOrig(pattern, {\n            cwd\n        }, (err, files)=>{\n            if (err) {\n                return reject(err);\n            }\n            resolve(files);\n        });\n    });\n};\nfunction getRootLayout(isTs) {\n    if (isTs) {\n        return `export const metadata = {\n  title: 'Next.js',\n  description: 'Generated by Next.js',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n`;\n    }\n    return `export const metadata = {\n  title: 'Next.js',\n  description: 'Generated by Next.js',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n`;\n}\nexport async function verifyRootLayout({ dir, appDir, tsconfigPath, pagePath, pageExtensions }) {\n    let rootLayoutPath;\n    try {\n        const layoutFiles = await glob(appDir, `**/layout.{${pageExtensions.join(',')}}`);\n        const isFileUnderAppDir = pagePath.startsWith(`${APP_DIR_ALIAS}/`);\n        const normalizedPagePath = pagePath.replace(`${APP_DIR_ALIAS}/`, '');\n        const pagePathSegments = normalizedPagePath.split('/');\n        // Find an available dir to place the layout file in, the layout file can't affect any other layout.\n        // Place the layout as close to app/ as possible.\n        let availableDir;\n        if (isFileUnderAppDir) {\n            if (layoutFiles.length === 0) {\n                // If there's no other layout file we can place the layout file in the app dir.\n                // However, if the page is within a route group directly under app (e.g. app/(routegroup)/page.js)\n                // prefer creating the root layout in that route group.\n                const firstSegmentValue = pagePathSegments[0];\n                availableDir = firstSegmentValue.startsWith('(') ? firstSegmentValue : '';\n            } else {\n                pagePathSegments.pop() // remove the page from segments\n                ;\n                let currentSegments = [];\n                for (const segment of pagePathSegments){\n                    currentSegments.push(segment);\n                    // Find the dir closest to app/ where a layout can be created without affecting other layouts.\n                    if (!layoutFiles.some((file)=>file.startsWith(currentSegments.join('/')))) {\n                        availableDir = currentSegments.join('/');\n                        break;\n                    }\n                }\n            }\n        } else {\n            availableDir = '';\n        }\n        if (typeof availableDir === 'string') {\n            const resolvedTsConfigPath = path.join(dir, tsconfigPath);\n            const hasTsConfig = await fs.access(resolvedTsConfigPath).then(()=>true, ()=>false);\n            rootLayoutPath = path.join(appDir, availableDir, `layout.${hasTsConfig ? 'tsx' : 'js'}`);\n            await fs.writeFile(rootLayoutPath, getRootLayout(hasTsConfig));\n            Log.warn(`Your page ${bold(`app/${normalizedPagePath}`)} did not have a root layout. We created ${bold(`app${rootLayoutPath.replace(appDir, '')}`)} for you.`);\n            // Created root layout\n            return [\n                true,\n                rootLayoutPath\n            ];\n        }\n    } catch (e) {\n        console.error(e);\n    }\n    // Didn't create root layout\n    return [\n        false,\n        rootLayoutPath\n    ];\n}\n\n//# sourceMappingURL=verify-root-layout.js.map"
        }
    ]
}