{
    "sourceFile": "node_modules/next/dist/esm/lib/create-client-router-filter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892806305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { BloomFilter } from '../shared/lib/bloom-filter';\nimport { isDynamicRoute } from '../shared/lib/router/utils';\nimport { removeTrailingSlash } from '../shared/lib/router/utils/remove-trailing-slash';\nimport { tryToParsePath } from './try-to-parse-path';\nimport { extractInterceptionRouteInformation, isInterceptionRouteAppPath } from '../shared/lib/router/utils/interception-routes';\nexport function createClientRouterFilter(paths, redirects, allowedErrorRate) {\n    const staticPaths = new Set();\n    const dynamicPaths = new Set();\n    for (let path of paths){\n        if (isDynamicRoute(path)) {\n            if (isInterceptionRouteAppPath(path)) {\n                path = extractInterceptionRouteInformation(path).interceptedRoute;\n            }\n            let subPath = '';\n            const pathParts = path.split('/');\n            // start at 1 since we split on '/' and the path starts\n            // with this so the first entry is an empty string\n            for(let i = 1; i < pathParts.length; i++){\n                const curPart = pathParts[i];\n                if (curPart.startsWith('[')) {\n                    break;\n                }\n                subPath = `${subPath}/${curPart}`;\n            }\n            if (subPath) {\n                dynamicPaths.add(subPath);\n            }\n        } else {\n            staticPaths.add(path);\n        }\n    }\n    for (const redirect of redirects){\n        const { source } = redirect;\n        const path = removeTrailingSlash(source);\n        let tokens = [];\n        try {\n            tokens = tryToParsePath(source).tokens || [];\n        } catch  {}\n        if (tokens.every((token)=>typeof token === 'string')) {\n            // only include static redirects initially\n            staticPaths.add(path);\n        }\n    }\n    const staticFilter = BloomFilter.from([\n        ...staticPaths\n    ], allowedErrorRate);\n    const dynamicFilter = BloomFilter.from([\n        ...dynamicPaths\n    ], allowedErrorRate);\n    const data = {\n        staticFilter: staticFilter.export(),\n        dynamicFilter: dynamicFilter.export()\n    };\n    return data;\n}\n\n//# sourceMappingURL=create-client-router-filter.js.map"
        }
    ]
}