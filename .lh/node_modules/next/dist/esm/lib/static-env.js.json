{
    "sourceFile": "node_modules/next/dist/esm/lib/static-env.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892817046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "function errorIfEnvConflicted(config, key) {\n    const isPrivateKey = /^(?:NODE_.+)|^(?:__.+)$/i.test(key);\n    const hasNextRuntimeKey = key === 'NEXT_RUNTIME';\n    if (isPrivateKey || hasNextRuntimeKey) {\n        throw Object.defineProperty(new Error(`The key \"${key}\" under \"env\" in ${config.configFileName} is not allowed. https://nextjs.org/docs/messages/env-key-not-allowed`), \"__NEXT_ERROR_CODE\", {\n            value: \"E170\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\n/**\n * Collects all environment variables that are using the `NEXT_PUBLIC_` prefix.\n */ export function getNextPublicEnvironmentVariables() {\n    const defineEnv = {};\n    for(const key in process.env){\n        if (key.startsWith('NEXT_PUBLIC_')) {\n            const value = process.env[key];\n            if (value != null) {\n                defineEnv[`process.env.${key}`] = value;\n            }\n        }\n    }\n    return defineEnv;\n}\n/**\n * Collects the `env` config value from the Next.js config.\n */ export function getNextConfigEnv(config) {\n    // Refactored code below to use for-of\n    const defineEnv = {};\n    const env = config.env;\n    for(const key in env){\n        const value = env[key];\n        if (value != null) {\n            errorIfEnvConflicted(config, key);\n            defineEnv[`process.env.${key}`] = value;\n        }\n    }\n    return defineEnv;\n}\nexport function getStaticEnv(config) {\n    const staticEnv = {\n        ...getNextPublicEnvironmentVariables(),\n        ...getNextConfigEnv(config),\n        'process.env.NEXT_DEPLOYMENT_ID': config.deploymentId || ''\n    };\n    return staticEnv;\n}\nexport function populateStaticEnv(config) {\n    // since inlining comes after static generation we need\n    // to ensure this value is assigned to process env so it\n    // can still be accessed\n    const staticEnv = getStaticEnv(config);\n    for(const key in staticEnv){\n        const innerKey = key.split('.').pop() || '';\n        if (!process.env[innerKey]) {\n            process.env[innerKey] = staticEnv[key] || '';\n        }\n    }\n}\n\n//# sourceMappingURL=static-env.js.map"
        }
    ]
}