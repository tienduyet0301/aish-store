{
    "sourceFile": "node_modules/next/dist/esm/lib/verify-partytown-setup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892818012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { promises } from 'fs';\nimport { bold, cyan, red } from './picocolors';\nimport path from 'path';\nimport { hasNecessaryDependencies } from './has-necessary-dependencies';\nimport { fileExists, FileType } from './file-exists';\nimport { FatalError } from './fatal-error';\nimport * as Log from '../build/output/log';\nimport { getPkgManager } from './helpers/get-pkg-manager';\nasync function missingDependencyError(dir) {\n    const packageManager = getPkgManager(dir);\n    throw Object.defineProperty(new FatalError(bold(red(\"It looks like you're trying to use Partytown with next/script but do not have the required package(s) installed.\")) + '\\n\\n' + bold(`Please install Partytown by running:`) + '\\n\\n' + `\\t${bold(cyan((packageManager === 'yarn' ? 'yarn add --dev' : packageManager === 'pnpm' ? 'pnpm install --save-dev' : 'npm install --save-dev') + ' @builder.io/partytown'))}` + '\\n\\n' + bold(`If you are not trying to use Partytown, please disable the experimental ${cyan('\"nextScriptWorkers\"')} flag in next.config.js.`) + '\\n'), \"__NEXT_ERROR_CODE\", {\n        value: \"E552\",\n        enumerable: false,\n        configurable: true\n    });\n}\nasync function copyPartytownStaticFiles(deps, staticDir) {\n    const partytownLibDir = path.join(staticDir, '~partytown');\n    const hasPartytownLibDir = await fileExists(partytownLibDir, FileType.Directory);\n    if (hasPartytownLibDir) {\n        await promises.rm(partytownLibDir, {\n            recursive: true,\n            force: true\n        });\n    }\n    const { copyLibFiles } = await Promise.resolve(require(path.join(deps.resolved.get('@builder.io/partytown'), '../utils')));\n    await copyLibFiles(partytownLibDir);\n}\nexport async function verifyPartytownSetup(dir, targetDir) {\n    try {\n        var _partytownDeps_missing;\n        const partytownDeps = await hasNecessaryDependencies(dir, [\n            {\n                file: '@builder.io/partytown',\n                pkg: '@builder.io/partytown',\n                exportsRestrict: false\n            }\n        ]);\n        if (((_partytownDeps_missing = partytownDeps.missing) == null ? void 0 : _partytownDeps_missing.length) > 0) {\n            await missingDependencyError(dir);\n        } else {\n            try {\n                await copyPartytownStaticFiles(partytownDeps, targetDir);\n            } catch (err) {\n                Log.warn(`Partytown library files could not be copied to the static directory. Please ensure that ${bold(cyan('@builder.io/partytown'))} is installed as a dependency.`);\n            }\n        }\n    } catch (err) {\n        // Don't show a stack trace when there is an error due to missing dependencies\n        if (err instanceof FatalError) {\n            console.error(err.message);\n            process.exit(1);\n        }\n        throw err;\n    }\n}\n\n//# sourceMappingURL=verify-partytown-setup.js.map"
        }
    ]
}