{
    "sourceFile": "node_modules/next/dist/esm/lib/download-swc.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892807085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import fs from 'fs';\nimport path from 'path';\nimport * as Log from '../build/output/log';\nimport tar from 'next/dist/compiled/tar';\nconst { WritableStream } = require('node:stream/web');\nimport { getRegistry } from './helpers/get-registry';\nimport { getCacheDirectory } from './helpers/get-cache-directory';\nconst MAX_VERSIONS_TO_CACHE = 8;\nasync function extractBinary(outputDirectory, pkgName, tarFileName) {\n    const cacheDirectory = getCacheDirectory('next-swc', process.env['NEXT_SWC_PATH']);\n    const extractFromTar = ()=>tar.x({\n            file: path.join(cacheDirectory, tarFileName),\n            cwd: outputDirectory,\n            strip: 1\n        });\n    if (!fs.existsSync(path.join(cacheDirectory, tarFileName))) {\n        Log.info(`Downloading swc package ${pkgName}... to ${cacheDirectory}`);\n        await fs.promises.mkdir(cacheDirectory, {\n            recursive: true\n        });\n        const tempFile = path.join(cacheDirectory, `${tarFileName}.temp-${Date.now()}`);\n        const registry = getRegistry();\n        const downloadUrl = `${registry}${pkgName}/-/${tarFileName}`;\n        await fetch(downloadUrl).then((res)=>{\n            const { ok, body } = res;\n            if (!ok || !body) {\n                Log.error(`Failed to download swc package from ${downloadUrl}`);\n            }\n            if (!ok) {\n                throw Object.defineProperty(new Error(`request failed with status ${res.status}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E109\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!body) {\n                throw Object.defineProperty(new Error('request failed with empty body'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E143\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            const cacheWriteStream = fs.createWriteStream(tempFile);\n            return body.pipeTo(new WritableStream({\n                write (chunk) {\n                    return new Promise((resolve, reject)=>cacheWriteStream.write(chunk, (error)=>{\n                            if (error) {\n                                reject(error);\n                                return;\n                            }\n                            resolve();\n                        }));\n                },\n                close () {\n                    return new Promise((resolve, reject)=>cacheWriteStream.close((error)=>{\n                            if (error) {\n                                reject(error);\n                                return;\n                            }\n                            resolve();\n                        }));\n                }\n            }));\n        });\n        await fs.promises.access(tempFile) // ensure the temp file existed\n        ;\n        await fs.promises.rename(tempFile, path.join(cacheDirectory, tarFileName));\n    } else {\n        Log.info(`Using cached swc package ${pkgName}...`);\n    }\n    await extractFromTar();\n    const cacheFiles = await fs.promises.readdir(cacheDirectory);\n    if (cacheFiles.length > MAX_VERSIONS_TO_CACHE) {\n        cacheFiles.sort((a, b)=>{\n            if (a.length < b.length) return -1;\n            return a.localeCompare(b);\n        });\n        // prune oldest versions in cache\n        for(let i = 0; i++; i < cacheFiles.length - MAX_VERSIONS_TO_CACHE){\n            await fs.promises.unlink(path.join(cacheDirectory, cacheFiles[i])).catch(()=>{});\n        }\n    }\n}\nexport async function downloadNativeNextSwc(version, bindingsDirectory, triplesABI) {\n    for (const triple of triplesABI){\n        const pkgName = `@next/swc-${triple}`;\n        const tarFileName = `${pkgName.substring(6)}-${version}.tgz`;\n        const outputDirectory = path.join(bindingsDirectory, pkgName);\n        if (fs.existsSync(outputDirectory)) {\n            // if the package is already downloaded a different\n            // failure occurred than not being present\n            return;\n        }\n        await fs.promises.mkdir(outputDirectory, {\n            recursive: true\n        });\n        await extractBinary(outputDirectory, pkgName, tarFileName);\n    }\n}\nexport async function downloadWasmSwc(version, wasmDirectory, variant = 'nodejs') {\n    const pkgName = `@next/swc-wasm-${variant}`;\n    const tarFileName = `${pkgName.substring(6)}-${version}.tgz`;\n    const outputDirectory = path.join(wasmDirectory, pkgName);\n    if (fs.existsSync(outputDirectory)) {\n        // if the package is already downloaded a different\n        // failure occurred than not being present\n        return;\n    }\n    await fs.promises.mkdir(outputDirectory, {\n        recursive: true\n    });\n    await extractBinary(outputDirectory, pkgName, tarFileName);\n}\n\n//# sourceMappingURL=download-swc.js.map"
        }
    ]
}