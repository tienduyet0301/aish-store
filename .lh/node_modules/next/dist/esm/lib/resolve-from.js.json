{
    "sourceFile": "node_modules/next/dist/esm/lib/resolve-from.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892816712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// source: https://github.com/sindresorhus/resolve-from\nimport path from 'path';\nimport isError from './is-error';\nimport { realpathSync } from './realpath';\nconst Module = require('module');\nexport const resolveFrom = (fromDirectory, moduleId, silent)=>{\n    if (typeof fromDirectory !== 'string') {\n        throw Object.defineProperty(new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDirectory}\\``), \"__NEXT_ERROR_CODE\", {\n            value: \"E537\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (typeof moduleId !== 'string') {\n        throw Object.defineProperty(new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``), \"__NEXT_ERROR_CODE\", {\n            value: \"E565\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    try {\n        fromDirectory = realpathSync(fromDirectory);\n    } catch (error) {\n        if (isError(error) && error.code === 'ENOENT') {\n            fromDirectory = path.resolve(fromDirectory);\n        } else if (silent) {\n            return;\n        } else {\n            throw error;\n        }\n    }\n    const fromFile = path.join(fromDirectory, 'noop.js');\n    const resolveFileName = ()=>Module._resolveFilename(moduleId, {\n            id: fromFile,\n            filename: fromFile,\n            paths: Module._nodeModulePaths(fromDirectory)\n        });\n    if (silent) {\n        try {\n            return resolveFileName();\n        } catch (error) {\n            return;\n        }\n    }\n    return resolveFileName();\n};\n\n//# sourceMappingURL=resolve-from.js.map"
        }
    ]
}