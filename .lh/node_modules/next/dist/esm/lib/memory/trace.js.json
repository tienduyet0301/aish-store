{
    "sourceFile": "node_modules/next/dist/esm/lib/memory/trace.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892812275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import v8 from 'v8';\nimport { info, warn } from '../../build/output/log';\nimport { trace } from '../../trace';\nimport { bold, italic } from '../picocolors';\nimport { join } from 'path';\nimport { traceGlobals } from '../../trace/shared';\nconst HEAP_SNAPSHOT_THRESHOLD_PERCENT = 70;\nlet alreadyGeneratedHeapSnapshot = false;\nconst TRACE_MEMORY_USAGE_TIMER_MS = 20000;\nlet traceMemoryUsageTimer;\nconst allMemoryUsage = [];\n/**\n * Begins a timer that will record memory usage periodically to understand\n * memory usage across the lifetime of the process.\n */ export function startPeriodicMemoryUsageTracing() {\n    traceMemoryUsageTimer = setTimeout(()=>{\n        traceMemoryUsage('periodic memory snapshot');\n        startPeriodicMemoryUsageTracing();\n    }, TRACE_MEMORY_USAGE_TIMER_MS);\n}\nexport function stopPeriodicMemoryUsageTracing() {\n    if (traceMemoryUsageTimer) {\n        clearTimeout(traceMemoryUsageTimer);\n    }\n}\n/**\n * Returns the list of all recorded memory usage snapshots from the process.\n */ export function getAllMemoryUsageSpans() {\n    return allMemoryUsage;\n}\n/**\n * Records a snapshot of memory usage at this moment in time to the .next/trace\n * file.\n */ export function traceMemoryUsage(description, parentSpan) {\n    const memoryUsage = process.memoryUsage();\n    const v8HeapStatistics = v8.getHeapStatistics();\n    const heapUsed = v8HeapStatistics.used_heap_size;\n    const heapMax = v8HeapStatistics.heap_size_limit;\n    const tracedMemoryUsage = {\n        'memory.rss': memoryUsage.rss,\n        'memory.heapUsed': heapUsed,\n        'memory.heapTotal': memoryUsage.heapTotal,\n        'memory.heapMax': heapMax\n    };\n    allMemoryUsage.push(tracedMemoryUsage);\n    const tracedMemoryUsageAsStrings = Object.fromEntries(Object.entries(tracedMemoryUsage).map(([key, value])=>[\n            key,\n            String(value)\n        ]));\n    if (parentSpan) {\n        parentSpan.traceChild('memory-usage', tracedMemoryUsageAsStrings);\n    } else {\n        trace('memory-usage', undefined, tracedMemoryUsageAsStrings);\n    }\n    if (process.env.EXPERIMENTAL_DEBUG_MEMORY_USAGE) {\n        const percentageHeapUsed = 100 * heapUsed / heapMax;\n        info('');\n        info('***************************************');\n        info(`Memory usage report at \"${description}\":`);\n        info(` - RSS: ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} MB`);\n        info(` - Heap Used: ${(heapUsed / 1024 / 1024).toFixed(2)} MB`);\n        info(` - Heap Total Allocated: ${(memoryUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`);\n        info(` - Heap Max: ${(heapMax / 1024 / 1024).toFixed(2)} MB`);\n        info(` - Percentage Heap Used: ${percentageHeapUsed.toFixed(2)}%`);\n        info('***************************************');\n        info('');\n        if (percentageHeapUsed > HEAP_SNAPSHOT_THRESHOLD_PERCENT) {\n            const distDir = traceGlobals.get('distDir');\n            const heapFilename = join(distDir, `${description.replace(' ', '-')}.heapsnapshot`);\n            warn(bold(`Heap usage is close to the limit. ${percentageHeapUsed.toFixed(2)}% of heap has been used.`));\n            if (!alreadyGeneratedHeapSnapshot) {\n                warn(bold(`Saving heap snapshot to ${heapFilename}.  ${italic('Note: this will take some time.')}`));\n                v8.writeHeapSnapshot(heapFilename);\n                alreadyGeneratedHeapSnapshot = true;\n            } else {\n                warn('Skipping heap snapshot generation since heap snapshot has already been generated.');\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=trace.js.map"
        }
    ]
}