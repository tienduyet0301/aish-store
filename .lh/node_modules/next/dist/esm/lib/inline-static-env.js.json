{
    "sourceFile": "node_modules/next/dist/esm/lib/inline-static-env.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892810384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import fs from 'fs';\nimport path from 'path';\nimport crypto from 'crypto';\nimport { promisify } from 'util';\nimport globOriginal from 'next/dist/compiled/glob';\nimport { Sema } from 'next/dist/compiled/async-sema';\nimport { getNextConfigEnv, getStaticEnv } from './static-env';\nconst glob = promisify(globOriginal);\nexport async function inlineStaticEnv({ distDir, config }) {\n    const nextConfigEnv = getNextConfigEnv(config);\n    const staticEnv = getStaticEnv(config);\n    const serverDir = path.join(distDir, 'server');\n    const serverChunks = await glob('**/*.{js,json,js.map}', {\n        cwd: serverDir\n    });\n    const clientDir = path.join(distDir, 'static');\n    const clientChunks = await glob('**/*.{js,json,js.map}', {\n        cwd: clientDir\n    });\n    const manifestChunks = await glob('*.{js,json,js.map}', {\n        cwd: distDir\n    });\n    const inlineSema = new Sema(8);\n    const nextConfigEnvKeys = Object.keys(nextConfigEnv).map((item)=>item.split('process.env.').pop());\n    const builtRegEx = new RegExp(`[\\\\w]{1,}(\\\\.env)?\\\\.(?:NEXT_PUBLIC_[\\\\w]{1,}${nextConfigEnvKeys.length ? '|' + nextConfigEnvKeys.join('|') : ''})`, 'g');\n    const changedClientFiles = [];\n    const filesToCheck = new Set(manifestChunks.map((f)=>path.join(distDir, f)));\n    for (const [parentDir, files] of [\n        [\n            serverDir,\n            serverChunks\n        ],\n        [\n            clientDir,\n            clientChunks\n        ]\n    ]){\n        await Promise.all(files.map(async (file)=>{\n            await inlineSema.acquire();\n            const filepath = path.join(parentDir, file);\n            const content = await fs.promises.readFile(filepath, 'utf8');\n            const newContent = content.replace(builtRegEx, (match)=>{\n                let normalizedMatch = `process.env.${match.split('.').pop()}`;\n                if (staticEnv[normalizedMatch]) {\n                    return JSON.stringify(staticEnv[normalizedMatch]);\n                }\n                return match;\n            });\n            await fs.promises.writeFile(filepath, newContent);\n            if (content !== newContent && parentDir === clientDir) {\n                changedClientFiles.push({\n                    file,\n                    content: newContent\n                });\n            }\n            filesToCheck.add(filepath);\n            inlineSema.release();\n        }));\n    }\n    const hashChanges = [];\n    // hashes need updating for any changed client files\n    for (const { file, content } of changedClientFiles){\n        var _file_match;\n        // hash is 16 chars currently for all client chunks\n        const originalHash = ((_file_match = file.match(/([a-z0-9]{16})\\./)) == null ? void 0 : _file_match[1]) || '';\n        if (!originalHash) {\n            throw Object.defineProperty(new Error(`Invariant: client chunk changed but failed to detect hash ${file}`), \"__NEXT_ERROR_CODE\", {\n                value: \"E663\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const newHash = crypto.createHash('sha256').update(content).digest('hex').substring(0, 16);\n        hashChanges.push({\n            originalHash,\n            newHash\n        });\n        const filepath = path.join(clientDir, file);\n        const newFilepath = filepath.replace(originalHash, newHash);\n        filesToCheck.delete(filepath);\n        filesToCheck.add(newFilepath);\n        await fs.promises.rename(filepath, newFilepath);\n    }\n    // update build-manifest and webpack-runtime with new hashes\n    for (let file of filesToCheck){\n        const content = await fs.promises.readFile(file, 'utf-8');\n        let newContent = content;\n        for (const { originalHash, newHash } of hashChanges){\n            newContent = newContent.replaceAll(originalHash, newHash);\n        }\n        if (content !== newContent) {\n            await fs.promises.writeFile(file, newContent);\n        }\n    }\n}\n\n//# sourceMappingURL=inline-static-env.js.map"
        }
    ]
}