{
    "sourceFile": "node_modules/next/dist/esm/lib/verify-typescript-setup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892818173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { bold, cyan, red, yellow } from './picocolors';\nimport path from 'path';\nimport { hasNecessaryDependencies } from './has-necessary-dependencies';\nimport semver from 'next/dist/compiled/semver';\nimport { CompileError } from './compile-error';\nimport * as log from '../build/output/log';\nimport { getTypeScriptIntent } from './typescript/getTypeScriptIntent';\nimport { writeAppTypeDeclarations } from './typescript/writeAppTypeDeclarations';\nimport { writeConfigurationDefaults } from './typescript/writeConfigurationDefaults';\nimport { installDependencies } from './install-dependencies';\nimport { isCI } from '../server/ci-info';\nimport { missingDepsError } from './typescript/missingDependencyError';\nconst requiredPackages = [\n    {\n        file: 'typescript/lib/typescript.js',\n        pkg: 'typescript',\n        exportsRestrict: true\n    },\n    {\n        file: '@types/react/index.d.ts',\n        pkg: '@types/react',\n        exportsRestrict: true\n    },\n    {\n        file: '@types/node/index.d.ts',\n        pkg: '@types/node',\n        exportsRestrict: true\n    }\n];\nexport async function verifyTypeScriptSetup({ dir, distDir, cacheDir, intentDirs, tsconfigPath, typeCheckPreflight, disableStaticImages, hasAppDir, hasPagesDir }) {\n    const resolvedTsConfigPath = path.join(dir, tsconfigPath);\n    try {\n        var _deps_missing;\n        // Check if the project uses TypeScript:\n        const intent = await getTypeScriptIntent(dir, intentDirs, tsconfigPath);\n        if (!intent) {\n            return {\n                version: null\n            };\n        }\n        // Ensure TypeScript and necessary `@types/*` are installed:\n        let deps = await hasNecessaryDependencies(dir, requiredPackages);\n        if (((_deps_missing = deps.missing) == null ? void 0 : _deps_missing.length) > 0) {\n            if (isCI) {\n                // we don't attempt auto install in CI to avoid side-effects\n                // and instead log the error for installing needed packages\n                missingDepsError(dir, deps.missing);\n            }\n            console.log(bold(yellow(`It looks like you're trying to use TypeScript but do not have the required package(s) installed.`)) + '\\n' + 'Installing dependencies' + '\\n\\n' + bold('If you are not trying to use TypeScript, please remove the ' + cyan('tsconfig.json') + ' file from your package root (and any TypeScript files in your app and pages directories).') + '\\n');\n            await installDependencies(dir, deps.missing, true).catch((err)=>{\n                if (err && typeof err === 'object' && 'command' in err) {\n                    console.error(`Failed to install required TypeScript dependencies, please install them manually to continue:\\n` + err.command + '\\n');\n                }\n                throw err;\n            });\n            deps = await hasNecessaryDependencies(dir, requiredPackages);\n        }\n        // Load TypeScript after we're sure it exists:\n        const tsPath = deps.resolved.get('typescript');\n        const ts = await Promise.resolve(require(tsPath));\n        if (semver.lt(ts.version, '4.5.2')) {\n            log.warn(`Minimum recommended TypeScript version is v4.5.2, older versions can potentially be incompatible with Next.js. Detected: ${ts.version}`);\n        }\n        // Reconfigure (or create) the user's `tsconfig.json` for them:\n        await writeConfigurationDefaults(ts, resolvedTsConfigPath, intent.firstTimeSetup, hasAppDir, distDir, hasPagesDir);\n        // Write out the necessary `next-env.d.ts` file to correctly register\n        // Next.js' types:\n        await writeAppTypeDeclarations({\n            baseDir: dir,\n            imageImportsEnabled: !disableStaticImages,\n            hasPagesDir,\n            hasAppDir\n        });\n        let result;\n        if (typeCheckPreflight) {\n            const { runTypeCheck } = require('./typescript/runTypeCheck');\n            // Verify the project passes type-checking before we go to webpack phase:\n            result = await runTypeCheck(ts, dir, distDir, resolvedTsConfigPath, cacheDir, hasAppDir);\n        }\n        return {\n            result,\n            version: ts.version\n        };\n    } catch (err) {\n        // These are special errors that should not show a stack trace:\n        if (err instanceof CompileError) {\n            console.error(red('Failed to compile.\\n'));\n            console.error(err.message);\n            process.exit(1);\n        }\n        /**\n     * verifyTypeScriptSetup can be either invoked directly in the main thread (during next dev / next lint)\n     * or run in a worker (during next build). In the latter case, we need to print the error message, as the\n     * parent process will only receive an `Jest worker encountered 1 child process exceptions, exceeding retry limit`.\n     */ // we are in a worker, print the error message and exit the process\n        if (process.env.IS_NEXT_WORKER) {\n            if (err instanceof Error) {\n                console.error(err.message);\n            } else {\n                console.error(err);\n            }\n            process.exit(1);\n        }\n        // we are in the main thread, throw the error and it will be handled by the caller\n        throw err;\n    }\n}\n\n//# sourceMappingURL=verify-typescript-setup.js.map"
        }
    ]
}