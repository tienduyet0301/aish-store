{
    "sourceFile": "node_modules/next/dist/esm/lib/patch-incorrect-lockfile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892815885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { promises } from 'fs';\nimport * as Log from '../build/output/log';\nimport findUp from 'next/dist/compiled/find-up';\n// @ts-ignore no-json types\nimport nextPkgJson from 'next/package.json';\nimport { isCI } from '../server/ci-info';\nimport { getRegistry } from './helpers/get-registry';\nlet registry;\nasync function fetchPkgInfo(pkg) {\n    if (!registry) registry = getRegistry();\n    const res = await fetch(`${registry}${pkg}`);\n    if (!res.ok) {\n        throw Object.defineProperty(new Error(`Failed to fetch registry info for ${pkg}, got status ${res.status}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E172\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const data = await res.json();\n    const versionData = data.versions[nextPkgJson.version];\n    return {\n        os: versionData.os,\n        cpu: versionData.cpu,\n        engines: versionData.engines,\n        tarball: versionData.dist.tarball,\n        integrity: versionData.dist.integrity\n    };\n}\n/**\n * Attempts to patch npm package-lock.json when it\n * fails to include optionalDependencies for other platforms\n * this can occur when the package-lock is rebuilt from a current\n * node_modules install instead of pulling fresh package data\n */ export async function patchIncorrectLockfile(dir) {\n    if (process.env.NEXT_IGNORE_INCORRECT_LOCKFILE) {\n        return;\n    }\n    const lockfilePath = await findUp('package-lock.json', {\n        cwd: dir\n    });\n    if (!lockfilePath) {\n        // if no lockfile present there is no action to take\n        return;\n    }\n    const content = await promises.readFile(lockfilePath, 'utf8');\n    // maintain current line ending\n    const endingNewline = content.endsWith('\\r\\n') ? '\\r\\n' : content.endsWith('\\n') ? '\\n' : '';\n    const lockfileParsed = JSON.parse(content);\n    const lockfileVersion = parseInt(lockfileParsed == null ? void 0 : lockfileParsed.lockfileVersion, 10);\n    const expectedSwcPkgs = Object.keys(nextPkgJson['optionalDependencies'] || {}).filter((pkg)=>pkg.startsWith('@next/swc-'));\n    const patchDependency = (pkg, pkgData)=>{\n        lockfileParsed.dependencies[pkg] = {\n            version: nextPkgJson.version,\n            resolved: pkgData.tarball,\n            integrity: pkgData.integrity,\n            optional: true\n        };\n    };\n    const patchPackage = (pkg, pkgData)=>{\n        lockfileParsed.packages[pkg] = {\n            version: nextPkgJson.version,\n            resolved: pkgData.tarball,\n            integrity: pkgData.integrity,\n            cpu: pkgData.cpu,\n            optional: true,\n            os: pkgData.os,\n            engines: pkgData.engines\n        };\n    };\n    try {\n        const supportedVersions = [\n            1,\n            2,\n            3\n        ];\n        if (!supportedVersions.includes(lockfileVersion)) {\n            // bail on unsupported version\n            return;\n        }\n        // v1 only uses dependencies\n        // v2 uses dependencies and packages\n        // v3 only uses packages\n        const shouldPatchDependencies = lockfileVersion === 1 || lockfileVersion === 2;\n        const shouldPatchPackages = lockfileVersion === 2 || lockfileVersion === 3;\n        if (shouldPatchDependencies && !lockfileParsed.dependencies || shouldPatchPackages && !lockfileParsed.packages) {\n            // invalid lockfile so bail\n            return;\n        }\n        const missingSwcPkgs = [];\n        let pkgPrefix;\n        if (shouldPatchPackages) {\n            pkgPrefix = '';\n            for (const pkg of Object.keys(lockfileParsed.packages)){\n                if (pkg.endsWith('node_modules/next')) {\n                    pkgPrefix = pkg.substring(0, pkg.length - 4);\n                }\n            }\n            if (!pkgPrefix) {\n                // unable to locate the next package so bail\n                return;\n            }\n        }\n        for (const pkg of expectedSwcPkgs){\n            if (shouldPatchDependencies && !lockfileParsed.dependencies[pkg] || shouldPatchPackages && !lockfileParsed.packages[`${pkgPrefix}${pkg}`]) {\n                missingSwcPkgs.push(pkg);\n            }\n        }\n        if (missingSwcPkgs.length === 0) {\n            return;\n        }\n        Log.warn(`Found lockfile missing swc dependencies,`, isCI ? 'run next locally to automatically patch' : 'patching...');\n        if (isCI) {\n            // no point in updating in CI as the user can't save the patch\n            return;\n        }\n        const pkgsData = await Promise.all(missingSwcPkgs.map((pkg)=>fetchPkgInfo(pkg)));\n        for(let i = 0; i < pkgsData.length; i++){\n            const pkg = missingSwcPkgs[i];\n            const pkgData = pkgsData[i];\n            if (shouldPatchDependencies) {\n                patchDependency(pkg, pkgData);\n            }\n            if (shouldPatchPackages) {\n                patchPackage(`${pkgPrefix}${pkg}`, pkgData);\n            }\n        }\n        await promises.writeFile(lockfilePath, JSON.stringify(lockfileParsed, null, 2) + endingNewline);\n        Log.warn('Lockfile was successfully patched, please run \"npm install\" to ensure @next/swc dependencies are downloaded');\n    } catch (err) {\n        Log.error(`Failed to patch lockfile, please try uninstalling and reinstalling next in this workspace`);\n        console.error(err);\n    }\n}\n\n//# sourceMappingURL=patch-incorrect-lockfile.js.map"
        }
    ]
}