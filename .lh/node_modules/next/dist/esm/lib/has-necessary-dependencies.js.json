{
    "sourceFile": "node_modules/next/dist/esm/lib/has-necessary-dependencies.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892809594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { existsSync, promises as fs } from 'fs';\nimport { resolveFrom } from './resolve-from';\nimport { dirname, join, relative } from 'path';\nexport async function hasNecessaryDependencies(baseDir, requiredPackages) {\n    let resolutions = new Map();\n    const missingPackages = [];\n    await Promise.all(requiredPackages.map(async (p)=>{\n        try {\n            const pkgPath = await fs.realpath(resolveFrom(baseDir, `${p.pkg}/package.json`));\n            const pkgDir = dirname(pkgPath);\n            if (p.exportsRestrict) {\n                const fileNameToVerify = relative(p.pkg, p.file);\n                if (fileNameToVerify) {\n                    const fileToVerify = join(pkgDir, fileNameToVerify);\n                    if (existsSync(fileToVerify)) {\n                        resolutions.set(p.pkg, fileToVerify);\n                    } else {\n                        return missingPackages.push(p);\n                    }\n                } else {\n                    resolutions.set(p.pkg, pkgPath);\n                }\n            } else {\n                resolutions.set(p.pkg, resolveFrom(baseDir, p.file));\n            }\n        } catch (_) {\n            return missingPackages.push(p);\n        }\n    }));\n    return {\n        resolved: resolutions,\n        missing: missingPackages\n    };\n}\n\n//# sourceMappingURL=has-necessary-dependencies.js.map"
        }
    ]
}