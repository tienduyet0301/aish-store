{
    "sourceFile": "node_modules/next/dist/esm/lib/typescript/writeAppTypeDeclarations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892817759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import os from 'os';\nimport path from 'path';\nimport { promises as fs } from 'fs';\nexport async function writeAppTypeDeclarations({ baseDir, imageImportsEnabled, hasPagesDir, hasAppDir }) {\n    // Reference `next` types\n    const appTypeDeclarations = path.join(baseDir, 'next-env.d.ts');\n    // Defaults EOL to system default\n    let eol = os.EOL;\n    let currentContent;\n    try {\n        currentContent = await fs.readFile(appTypeDeclarations, 'utf8');\n        // If file already exists then preserve its line ending\n        const lf = currentContent.indexOf('\\n', /* skip first so we can lf - 1 */ 1);\n        if (lf !== -1) {\n            if (currentContent[lf - 1] === '\\r') {\n                eol = '\\r\\n';\n            } else {\n                eol = '\\n';\n            }\n        }\n    } catch  {}\n    /**\n   * \"Triple-slash directives\" used to create typings files for Next.js projects\n   * using Typescript .\n   *\n   * @see https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\n   */ const directives = [\n        // Include the core Next.js typings.\n        '/// <reference types=\"next\" />'\n    ];\n    if (imageImportsEnabled) {\n        directives.push('/// <reference types=\"next/image-types/global\" />');\n    }\n    if (hasAppDir && hasPagesDir) {\n        directives.push('/// <reference types=\"next/navigation-types/compat/navigation\" />');\n    }\n    // Push the notice in.\n    directives.push('', '// NOTE: This file should not be edited', `// see https://nextjs.org/docs/${hasAppDir ? 'app' : 'pages'}/api-reference/config/typescript for more information.`);\n    const content = directives.join(eol) + eol;\n    // Avoids an un-necessary write on read-only fs\n    if (currentContent === content) {\n        return;\n    }\n    await fs.writeFile(appTypeDeclarations, content);\n}\n\n//# sourceMappingURL=writeAppTypeDeclarations.js.map"
        }
    ]
}