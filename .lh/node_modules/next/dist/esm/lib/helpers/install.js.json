{
    "sourceFile": "node_modules/next/dist/esm/lib/helpers/install.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892810204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { yellow } from '../picocolors';\nimport spawn from 'next/dist/compiled/cross-spawn';\n/**\n * Spawn a package manager installation with either npm, pnpm, or yarn.\n *\n * @returns A Promise that resolves once the installation is finished.\n */ export function install(root, dependencies, { packageManager, isOnline, devDependencies }) {\n    let args = [];\n    if (dependencies.length > 0) {\n        if (packageManager === 'yarn') {\n            args = [\n                'add',\n                '--exact'\n            ];\n            if (devDependencies) args.push('--dev');\n        } else if (packageManager === 'pnpm') {\n            args = [\n                'add',\n                '--save-exact'\n            ];\n            args.push(devDependencies ? '--save-dev' : '--save-prod');\n        } else {\n            // npm\n            args = [\n                'install',\n                '--save-exact'\n            ];\n            args.push(devDependencies ? '--save-dev' : '--save');\n        }\n        args.push(...dependencies);\n    } else {\n        args = [\n            'install'\n        ] // npm, pnpm, and yarn all support `install`\n        ;\n        if (!isOnline) {\n            args.push('--offline');\n            console.log(yellow('You appear to be offline.'));\n            if (packageManager !== 'npm') {\n                console.log(yellow(`Falling back to the local ${packageManager} cache.`));\n            }\n            console.log();\n        }\n    }\n    return new Promise((resolve, reject)=>{\n        /**\n     * Spawn the installation process.\n     */ const child = spawn(packageManager, args, {\n            cwd: root,\n            stdio: 'inherit',\n            env: {\n                ...process.env,\n                ADBLOCK: '1',\n                // we set NODE_ENV to development as pnpm skips dev\n                // dependencies when production\n                NODE_ENV: 'development',\n                DISABLE_OPENCOLLECTIVE: '1'\n            }\n        });\n        child.on('close', (code)=>{\n            if (code !== 0) {\n                reject({\n                    command: `${packageManager} ${args.join(' ')}`\n                });\n                return;\n            }\n            resolve();\n        });\n    });\n}\n\n//# sourceMappingURL=install.js.map"
        }
    ]
}