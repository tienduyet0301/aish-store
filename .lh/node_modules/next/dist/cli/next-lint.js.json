{
    "sourceFile": "node_modules/next/dist/cli/next-lint.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892674831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"nextLint\", {\n    enumerable: true,\n    get: function() {\n        return nextLint;\n    }\n});\nconst _fs = require(\"fs\");\nconst _path = require(\"path\");\nconst _config = /*#__PURE__*/ _interop_require_default(require(\"../server/config\"));\nconst _utils = require(\"../server/lib/utils\");\nconst _storage = require(\"../telemetry/storage\");\nconst _picocolors = require(\"../lib/picocolors\");\nconst _constants = require(\"../lib/constants\");\nconst _runLintCheck = require(\"../lib/eslint/runLintCheck\");\nconst _compileerror = require(\"../lib/compile-error\");\nconst _constants1 = require(\"../shared/lib/constants\");\nconst _events = require(\"../telemetry/events\");\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _findpagesdir = require(\"../lib/find-pages-dir\");\nconst _verifytypescriptsetup = require(\"../lib/verify-typescript-setup\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst eslintOptions = (options, defaultCacheLocation)=>({\n        overrideConfigFile: options.config || null,\n        extensions: options.ext ?? [],\n        resolvePluginsRelativeTo: options.resolvePluginsRelativeTo || null,\n        rulePaths: options.rulesdir ?? [],\n        fix: options.fix ?? false,\n        fixTypes: options.fixType ?? null,\n        ignorePath: options.ignorePath || null,\n        ignore: options.ignore,\n        allowInlineConfig: options.inlineConfig,\n        reportUnusedDisableDirectives: options.reportUnusedDisableDirectivesSeverity || null,\n        cache: options.cache,\n        cacheLocation: options.cacheLocation || defaultCacheLocation,\n        cacheStrategy: options.cacheStrategy,\n        errorOnUnmatchedPattern: options.errorOnUnmatchedPattern ?? false\n    });\nconst nextLint = async (options, directory)=>{\n    var _nextConfig_eslint;\n    const baseDir = (0, _getprojectdir.getProjectDir)(directory);\n    // Check if the provided directory exists\n    if (!(0, _fs.existsSync)(baseDir)) {\n        (0, _utils.printAndExit)(`> No such directory exists as the project root: ${baseDir}`);\n    }\n    const nextConfig = await (0, _config.default)(_constants1.PHASE_PRODUCTION_BUILD, baseDir);\n    const files = options.file ?? [];\n    const dirs = options.dir ?? ((_nextConfig_eslint = nextConfig.eslint) == null ? void 0 : _nextConfig_eslint.dirs);\n    const filesToLint = [\n        ...dirs ?? [],\n        ...files\n    ];\n    const pathsToLint = (filesToLint.length ? filesToLint : _constants.ESLINT_DEFAULT_DIRS).reduce((res, d)=>{\n        const currDir = (0, _path.isAbsolute)(d) ? d : (0, _path.join)(baseDir, d);\n        if (!(0, _fs.existsSync)(currDir)) {\n            return res;\n        }\n        res.push(currDir);\n        return res;\n    }, []);\n    const reportErrorsOnly = Boolean(options.quiet);\n    const maxWarnings = options.maxWarnings;\n    const formatter = options.format || null;\n    const strict = Boolean(options.strict);\n    const outputFile = options.outputFile || null;\n    const distDir = (0, _path.join)(baseDir, nextConfig.distDir);\n    const defaultCacheLocation = (0, _path.join)(distDir, 'cache', 'eslint/');\n    const { pagesDir, appDir } = (0, _findpagesdir.findPagesDir)(baseDir);\n    await (0, _verifytypescriptsetup.verifyTypeScriptSetup)({\n        dir: baseDir,\n        distDir: nextConfig.distDir,\n        intentDirs: [\n            pagesDir,\n            appDir\n        ].filter(Boolean),\n        typeCheckPreflight: false,\n        tsconfigPath: nextConfig.typescript.tsconfigPath,\n        disableStaticImages: nextConfig.images.disableStaticImages,\n        hasAppDir: !!appDir,\n        hasPagesDir: !!pagesDir\n    });\n    (0, _runLintCheck.runLintCheck)(baseDir, pathsToLint, {\n        lintDuringBuild: false,\n        eslintOptions: eslintOptions(options, defaultCacheLocation),\n        reportErrorsOnly,\n        maxWarnings,\n        formatter,\n        outputFile,\n        strict\n    }).then(async (lintResults)=>{\n        const lintOutput = typeof lintResults === 'string' ? lintResults : lintResults == null ? void 0 : lintResults.output;\n        if (typeof lintResults !== 'string' && (lintResults == null ? void 0 : lintResults.eventInfo)) {\n            const telemetry = new _storage.Telemetry({\n                distDir\n            });\n            telemetry.record((0, _events.eventLintCheckCompleted)({\n                ...lintResults.eventInfo,\n                buildLint: false\n            }));\n            await telemetry.flush();\n        }\n        if (typeof lintResults !== 'string' && (lintResults == null ? void 0 : lintResults.isError) && lintOutput) {\n            throw Object.defineProperty(new _compileerror.CompileError(lintOutput), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (lintOutput) {\n            (0, _utils.printAndExit)(lintOutput, 0);\n        } else if (lintResults && !lintOutput) {\n            (0, _utils.printAndExit)((0, _picocolors.green)('âœ” No ESLint warnings or errors'), 0);\n        } else {\n            // this makes sure we exit 1 after the error from line 116\n            // in packages/next/src/lib/eslint/runLintCheck\n            process.exit(1);\n        }\n    }).catch((err)=>{\n        (0, _utils.printAndExit)(err.message);\n    });\n};\n\n//# sourceMappingURL=next-lint.js.map"
        }
    ]
}