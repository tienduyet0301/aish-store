{
    "sourceFile": "node_modules/next/dist/cli/next-build.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892674532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"nextBuild\", {\n    enumerable: true,\n    get: function() {\n        return nextBuild;\n    }\n});\nrequire(\"../server/lib/cpu-profile\");\nconst _fs = require(\"fs\");\nconst _picocolors = require(\"../lib/picocolors\");\nconst _build = /*#__PURE__*/ _interop_require_default(require(\"../build\"));\nconst _log = require(\"../build/output/log\");\nconst _utils = require(\"../server/lib/utils\");\nconst _iserror = /*#__PURE__*/ _interop_require_default(require(\"../lib/is-error\"));\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _startup = require(\"../lib/memory/startup\");\nconst _shutdown = require(\"../lib/memory/shutdown\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst nextBuild = (options, directory)=>{\n    process.on('SIGTERM', ()=>process.exit(143));\n    process.on('SIGINT', ()=>process.exit(130));\n    const { debug, experimentalDebugMemoryUsage, profile, lint, mangling, experimentalAppOnly, experimentalBuildMode, experimentalUploadTrace } = options;\n    let traceUploadUrl;\n    if (experimentalUploadTrace && !process.env.NEXT_TRACE_UPLOAD_DISABLED) {\n        traceUploadUrl = experimentalUploadTrace;\n    }\n    if (!lint) {\n        (0, _log.warn)('Linting is disabled.');\n    }\n    if (!mangling) {\n        (0, _log.warn)('Mangling is disabled. Note: This may affect performance and should only be used for debugging purposes.');\n    }\n    if (profile) {\n        (0, _log.warn)(`Profiling is enabled. ${(0, _picocolors.italic)('Note: This may affect performance.')}`);\n    }\n    if (experimentalDebugMemoryUsage) {\n        process.env.EXPERIMENTAL_DEBUG_MEMORY_USAGE = '1';\n        (0, _startup.enableMemoryDebuggingMode)();\n    }\n    const dir = (0, _getprojectdir.getProjectDir)(directory);\n    if (!(0, _fs.existsSync)(dir)) {\n        (0, _utils.printAndExit)(`> No such directory exists as the project root: ${dir}`);\n    }\n    const isTurbopack = Boolean(options.turbo || options.turbopack || process.env.IS_TURBOPACK_TEST);\n    if (isTurbopack) {\n        process.env.TURBOPACK = '1';\n    }\n    return (0, _build.default)(dir, profile, debug || Boolean(process.env.NEXT_DEBUG_BUILD), lint, !mangling, experimentalAppOnly, isTurbopack, experimentalBuildMode, traceUploadUrl).catch((err)=>{\n        if (experimentalDebugMemoryUsage) {\n            (0, _shutdown.disableMemoryDebuggingMode)();\n        }\n        console.error('');\n        if ((0, _iserror.default)(err) && (err.code === 'INVALID_RESOLVE_ALIAS' || err.code === 'WEBPACK_ERRORS' || err.code === 'BUILD_OPTIMIZATION_FAILED' || err.code === 'NEXT_EXPORT_ERROR' || err.code === 'NEXT_STATIC_GEN_BAILOUT' || err.code === 'EDGE_RUNTIME_UNSUPPORTED_API')) {\n            (0, _utils.printAndExit)(`> ${err.message}`);\n        } else {\n            console.error('> Build error occurred');\n            (0, _utils.printAndExit)(err);\n        }\n    }).finally(()=>{\n        if (experimentalDebugMemoryUsage) {\n            (0, _shutdown.disableMemoryDebuggingMode)();\n        }\n    });\n};\n\n//# sourceMappingURL=next-build.js.map"
        }
    ]
}