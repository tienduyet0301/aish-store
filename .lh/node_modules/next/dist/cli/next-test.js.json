{
    "sourceFile": "node_modules/next/dist/cli/next-test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892675028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    SUPPORTED_TEST_RUNNERS_LIST: null,\n    nextTest: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    SUPPORTED_TEST_RUNNERS_LIST: function() {\n        return SUPPORTED_TEST_RUNNERS_LIST;\n    },\n    nextTest: function() {\n        return nextTest;\n    }\n});\nconst _fs = require(\"fs\");\nconst _getprojectdir = require(\"../lib/get-project-dir\");\nconst _utils = require(\"../server/lib/utils\");\nconst _config = /*#__PURE__*/ _interop_require_default(require(\"../server/config\"));\nconst _constants = require(\"../shared/lib/constants\");\nconst _hasnecessarydependencies = require(\"../lib/has-necessary-dependencies\");\nconst _installdependencies = require(\"../lib/install-dependencies\");\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _findpagesdir = require(\"../lib/find-pages-dir\");\nconst _verifytypescriptsetup = require(\"../lib/verify-typescript-setup\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _crossspawn = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/cross-spawn\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst SUPPORTED_TEST_RUNNERS_LIST = [\n    'playwright'\n];\nconst requiredPackagesByTestRunner = {\n    playwright: [\n        {\n            file: 'playwright',\n            pkg: '@playwright/test',\n            exportsRestrict: false\n        }\n    ]\n};\nasync function nextTest(directory, testRunnerArgs = [], options = {}) {\n    // The following mess is in order to support an existing Next.js CLI pattern of optionally, passing a project `directory` as the first argument to execute the command on.\n    // This is problematic for `next test` because as a wrapper around a test runner's `test` command, it needs to pass through any additional arguments and options.\n    // Thus, `directory` could either be a valid Next.js project directory (that the user intends to run `next test` on), or it is the first argument for the test runner.\n    // Unfortunately, since many test runners support passing a path (to a test file or directory containing test files), we must check if `directory` is both a valid path and a valid Next.js project.\n    let baseDir, nextConfig;\n    try {\n        // if directory is `undefined` or a valid path this will succeed.\n        baseDir = (0, _getprojectdir.getProjectDir)(directory, false);\n    } catch (err) {\n        // if that failed, then `directory` is not a valid path, so it must have meant to be the first item for `testRunnerArgs`\n        // @ts-expect-error directory is a string here since `getProjectDir` will succeed if its undefined\n        testRunnerArgs.unshift(directory);\n        // intentionally set baseDir to the resolved '.' path\n        baseDir = (0, _getprojectdir.getProjectDir)();\n    }\n    try {\n        // but, `baseDir` might not be a Next.js project directory, it could be a path-like argument for the test runner (i.e. `playwright test test/foo.spec.js`)\n        // if this succeeds, it means that `baseDir` is a Next.js project directory\n        nextConfig = await (0, _config.default)(_constants.PHASE_PRODUCTION_BUILD, baseDir);\n    } catch (err) {\n        // if it doesn't, then most likely `baseDir` is not a Next.js project directory\n        // @ts-expect-error directory is a string here since `getProjectDir` will succeed if its undefined\n        testRunnerArgs.unshift(directory);\n        // intentionally set baseDir to the resolved '.' path\n        baseDir = (0, _getprojectdir.getProjectDir)();\n        nextConfig = await (0, _config.default)(_constants.PHASE_PRODUCTION_BUILD, baseDir) // let this error bubble up if the `basePath` is still not a valid Next.js project\n        ;\n    }\n    // set the test runner. priority is CLI option > next config > default 'playwright'\n    const configuredTestRunner = (options == null ? void 0 : options.testRunner) ?? // --test-runner='foo'\n    nextConfig.experimental.defaultTestRunner ?? // { experimental: { defaultTestRunner: 'foo' }}\n    'playwright';\n    if (!nextConfig.experimental.testProxy) {\n        return (0, _utils.printAndExit)(`\\`next experimental-test\\` requires the \\`experimental.testProxy: true\\` configuration option.`);\n    }\n    // execute test runner specific function\n    switch(configuredTestRunner){\n        case 'playwright':\n            return runPlaywright(baseDir, nextConfig, testRunnerArgs);\n        default:\n            return (0, _utils.printAndExit)(`Test runner ${configuredTestRunner} is not supported.`);\n    }\n}\nasync function checkRequiredDeps(baseDir, testRunner) {\n    const deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(baseDir, requiredPackagesByTestRunner[testRunner]);\n    if (deps.missing.length > 0) {\n        await (0, _installdependencies.installDependencies)(baseDir, deps.missing, true);\n        const playwright = (0, _crossspawn.default)(_path.default.join(baseDir, 'node_modules', '.bin', 'playwright'), [\n            'install'\n        ], {\n            cwd: baseDir,\n            shell: false,\n            stdio: 'inherit',\n            env: {\n                ...process.env\n            }\n        });\n        return new Promise((resolve, reject)=>{\n            playwright.on('close', (c)=>resolve(c));\n            playwright.on('error', (err)=>reject(err));\n        });\n    }\n}\nasync function runPlaywright(baseDir, nextConfig, testRunnerArgs) {\n    await checkRequiredDeps(baseDir, 'playwright');\n    const playwrightConfigFile = await (0, _findup.default)([\n        'playwright.config.js',\n        'playwright.config.ts'\n    ], {\n        cwd: baseDir\n    });\n    if (!playwrightConfigFile) {\n        const { pagesDir, appDir } = (0, _findpagesdir.findPagesDir)(baseDir);\n        const { version: typeScriptVersion } = await (0, _verifytypescriptsetup.verifyTypeScriptSetup)({\n            dir: baseDir,\n            distDir: nextConfig.distDir,\n            intentDirs: [\n                pagesDir,\n                appDir\n            ].filter(Boolean),\n            typeCheckPreflight: false,\n            tsconfigPath: nextConfig.typescript.tsconfigPath,\n            disableStaticImages: nextConfig.images.disableStaticImages,\n            hasAppDir: !!appDir,\n            hasPagesDir: !!pagesDir\n        });\n        const isUsingTypeScript = !!typeScriptVersion;\n        const playwrightConfigFilename = isUsingTypeScript ? 'playwright.config.ts' : 'playwright.config.js';\n        (0, _fs.writeFileSync)(_path.default.join(baseDir, playwrightConfigFilename), defaultPlaywrightConfig(isUsingTypeScript));\n        return (0, _utils.printAndExit)(`Successfully generated ${playwrightConfigFilename}. Create your first test and then run \\`next experimental-test\\`.`, 0);\n    } else {\n        const playwright = (0, _crossspawn.default)(_path.default.join(baseDir, 'node_modules', '.bin', 'playwright'), [\n            'test',\n            ...testRunnerArgs\n        ], {\n            cwd: baseDir,\n            shell: false,\n            stdio: 'inherit',\n            env: {\n                ...process.env\n            }\n        });\n        return new Promise((resolve, reject)=>{\n            playwright.on('close', (c)=>resolve(c));\n            playwright.on('error', (err)=>reject(err));\n        });\n    }\n}\nfunction defaultPlaywrightConfig(typescript) {\n    const comment = `/*\n * Specify any additional Playwright config options here.\n * They will be merged with Next.js' default Playwright config.\n * You can access the default config by importing \\`defaultPlaywrightConfig\\` from \\`'next/experimental/testmode/playwright'\\`.\n */`;\n    return typescript ? `import { defineConfig } from 'next/experimental/testmode/playwright';\\n\\n${comment}\\nexport default defineConfig({});` : `const { defineConfig } = require('next/experimental/testmode/playwright');\\n\\n${comment}\\nmodule.exports = defineConfig({});`;\n}\n\n//# sourceMappingURL=next-test.js.map"
        }
    ]
}