{
    "sourceFile": "node_modules/next/dist/diagnostics/build-diagnostics.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892743991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _promises = require(\"fs/promises\");\nconst _os = require(\"os\");\nconst _path = require(\"path\");\nconst _shared = require(\"../trace/shared\");\nconst _builddiagnostics = require(\"./build-diagnostics\");\nasync function readBuildDiagnostics(dir) {\n    return JSON.parse(await (0, _promises.readFile)((0, _path.join)(dir, 'diagnostics', 'build-diagnostics.json'), 'utf8'));\n}\ndescribe('build-diagnostics', ()=>{\n    it('records framework version to framework.json correctly', async ()=>{\n        const tmpDir = await (0, _promises.mkdtemp)((0, _path.join)((0, _os.tmpdir)(), 'build-diagnostics'));\n        (0, _shared.setGlobal)('distDir', tmpDir);\n        // Record the initial diagnostics and make sure it's correct.\n        await (0, _builddiagnostics.recordFrameworkVersion)('14.2.3');\n        let diagnostics = JSON.parse(await (0, _promises.readFile)((0, _path.join)(tmpDir, 'diagnostics', 'framework.json'), 'utf8'));\n        expect(diagnostics.version).toEqual('14.2.3');\n    });\n    it('records build diagnostics to a file correctly', async ()=>{\n        const tmpDir = await (0, _promises.mkdtemp)((0, _path.join)((0, _os.tmpdir)(), 'build-diagnostics'));\n        (0, _shared.setGlobal)('distDir', tmpDir);\n        // Record the initial diagnostics and make sure it's correct.\n        await (0, _builddiagnostics.updateBuildDiagnostics)({\n            buildStage: 'compile'\n        });\n        let diagnostics = await readBuildDiagnostics(tmpDir);\n        expect(diagnostics.buildStage).toEqual('compile');\n        // Add a new build option. Make sure that existing fields are preserved.\n        await (0, _builddiagnostics.updateBuildDiagnostics)({\n            buildStage: 'compile-server',\n            buildOptions: {\n                useBuildWorker: String(false)\n            }\n        });\n        diagnostics = await readBuildDiagnostics(tmpDir);\n        expect(diagnostics.buildStage).toEqual('compile-server');\n        expect(diagnostics.buildOptions).toEqual({\n            useBuildWorker: 'false'\n        });\n        // Make sure that it keeps existing build options when adding a new one.\n        await (0, _builddiagnostics.updateBuildDiagnostics)({\n            buildStage: 'compile-client',\n            buildOptions: {\n                experimentalBuildMode: 'compile'\n            }\n        });\n        diagnostics = await readBuildDiagnostics(tmpDir);\n        expect(diagnostics.buildStage).toEqual('compile-client');\n        expect(diagnostics.buildOptions).toEqual({\n            experimentalBuildMode: 'compile',\n            useBuildWorker: 'false'\n        });\n    });\n});\n\n//# sourceMappingURL=build-diagnostics.test.js.map"
        }
    ]
}