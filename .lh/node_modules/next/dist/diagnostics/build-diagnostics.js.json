{
    "sourceFile": "node_modules/next/dist/diagnostics/build-diagnostics.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892743928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    recordFetchMetrics: null,\n    recordFrameworkVersion: null,\n    updateBuildDiagnostics: null,\n    updateIncrementalBuildMetrics: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    recordFetchMetrics: function() {\n        return recordFetchMetrics;\n    },\n    recordFrameworkVersion: function() {\n        return recordFrameworkVersion;\n    },\n    updateBuildDiagnostics: function() {\n        return updateBuildDiagnostics;\n    },\n    updateIncrementalBuildMetrics: function() {\n        return updateIncrementalBuildMetrics;\n    }\n});\nconst _promises = require(\"fs/promises\");\nconst _path = require(\"path\");\nconst _shared = require(\"../trace/shared\");\nconst DIAGNOSTICS_DIR = 'diagnostics';\nconst DIAGNOSTICS_FILE = 'build-diagnostics.json';\nconst FETCH_METRICS_FILE = 'fetch-metrics.json';\nconst INCREMENTAL_BUILDS_FILE = 'incremental-build-diagnostics.json';\nconst FRAMEWORK_VERSION_FILE = 'framework.json';\nasync function getDiagnosticsDir() {\n    const distDir = _shared.traceGlobals.get('distDir');\n    const diagnosticsDir = (0, _path.join)(distDir, DIAGNOSTICS_DIR);\n    await (0, _promises.mkdir)(diagnosticsDir, {\n        recursive: true\n    });\n    return diagnosticsDir;\n}\nasync function recordFrameworkVersion(version) {\n    const diagnosticsDir = await getDiagnosticsDir();\n    const frameworkVersionFile = (0, _path.join)(diagnosticsDir, FRAMEWORK_VERSION_FILE);\n    await (0, _promises.writeFile)(frameworkVersionFile, JSON.stringify({\n        name: 'Next.js',\n        version\n    }));\n}\nasync function updateBuildDiagnostics(diagnostics) {\n    const diagnosticsDir = await getDiagnosticsDir();\n    const diagnosticsFile = (0, _path.join)(diagnosticsDir, DIAGNOSTICS_FILE);\n    const existingDiagnostics = JSON.parse(await (0, _promises.readFile)(diagnosticsFile, 'utf8').catch(()=>'{}'));\n    const updatedBuildOptions = {\n        ...existingDiagnostics.buildOptions ?? {},\n        ...diagnostics.buildOptions ?? {}\n    };\n    const updatedDiagnostics = {\n        ...existingDiagnostics,\n        ...diagnostics,\n        buildOptions: updatedBuildOptions\n    };\n    await (0, _promises.writeFile)(diagnosticsFile, JSON.stringify(updatedDiagnostics, null, 2));\n}\nasync function recordFetchMetrics(exportResult) {\n    const diagnosticsDir = await getDiagnosticsDir();\n    const diagnosticsFile = (0, _path.join)(diagnosticsDir, FETCH_METRICS_FILE);\n    const fetchMetricsByPath = {};\n    for (const [appPath, { fetchMetrics }] of exportResult.byPath){\n        if (fetchMetrics) {\n            fetchMetricsByPath[appPath] = fetchMetrics;\n        }\n    }\n    return (0, _promises.writeFile)(diagnosticsFile, JSON.stringify(fetchMetricsByPath, null, 2));\n}\nasync function updateIncrementalBuildMetrics(diagnostics) {\n    const diagnosticsDir = await getDiagnosticsDir();\n    const diagnosticsFile = (0, _path.join)(diagnosticsDir, INCREMENTAL_BUILDS_FILE);\n    const existingDiagnostics = JSON.parse(await (0, _promises.readFile)(diagnosticsFile, 'utf8').catch(()=>'{}'));\n    const updatedDiagnostics = {\n        ...existingDiagnostics,\n        ...diagnostics\n    };\n    await (0, _promises.writeFile)(diagnosticsFile, JSON.stringify(updatedDiagnostics, null, 2));\n}\n\n//# sourceMappingURL=build-diagnostics.js.map"
        }
    ]
}