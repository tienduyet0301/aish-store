{
    "sourceFile": "node_modules/next/dist/lib/memory/trace.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892860735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getAllMemoryUsageSpans: null,\n    startPeriodicMemoryUsageTracing: null,\n    stopPeriodicMemoryUsageTracing: null,\n    traceMemoryUsage: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getAllMemoryUsageSpans: function() {\n        return getAllMemoryUsageSpans;\n    },\n    startPeriodicMemoryUsageTracing: function() {\n        return startPeriodicMemoryUsageTracing;\n    },\n    stopPeriodicMemoryUsageTracing: function() {\n        return stopPeriodicMemoryUsageTracing;\n    },\n    traceMemoryUsage: function() {\n        return traceMemoryUsage;\n    }\n});\nconst _v8 = /*#__PURE__*/ _interop_require_default(require(\"v8\"));\nconst _log = require(\"../../build/output/log\");\nconst _trace = require(\"../../trace\");\nconst _picocolors = require(\"../picocolors\");\nconst _path = require(\"path\");\nconst _shared = require(\"../../trace/shared\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst HEAP_SNAPSHOT_THRESHOLD_PERCENT = 70;\nlet alreadyGeneratedHeapSnapshot = false;\nconst TRACE_MEMORY_USAGE_TIMER_MS = 20000;\nlet traceMemoryUsageTimer;\nconst allMemoryUsage = [];\nfunction startPeriodicMemoryUsageTracing() {\n    traceMemoryUsageTimer = setTimeout(()=>{\n        traceMemoryUsage('periodic memory snapshot');\n        startPeriodicMemoryUsageTracing();\n    }, TRACE_MEMORY_USAGE_TIMER_MS);\n}\nfunction stopPeriodicMemoryUsageTracing() {\n    if (traceMemoryUsageTimer) {\n        clearTimeout(traceMemoryUsageTimer);\n    }\n}\nfunction getAllMemoryUsageSpans() {\n    return allMemoryUsage;\n}\nfunction traceMemoryUsage(description, parentSpan) {\n    const memoryUsage = process.memoryUsage();\n    const v8HeapStatistics = _v8.default.getHeapStatistics();\n    const heapUsed = v8HeapStatistics.used_heap_size;\n    const heapMax = v8HeapStatistics.heap_size_limit;\n    const tracedMemoryUsage = {\n        'memory.rss': memoryUsage.rss,\n        'memory.heapUsed': heapUsed,\n        'memory.heapTotal': memoryUsage.heapTotal,\n        'memory.heapMax': heapMax\n    };\n    allMemoryUsage.push(tracedMemoryUsage);\n    const tracedMemoryUsageAsStrings = Object.fromEntries(Object.entries(tracedMemoryUsage).map(([key, value])=>[\n            key,\n            String(value)\n        ]));\n    if (parentSpan) {\n        parentSpan.traceChild('memory-usage', tracedMemoryUsageAsStrings);\n    } else {\n        (0, _trace.trace)('memory-usage', undefined, tracedMemoryUsageAsStrings);\n    }\n    if (process.env.EXPERIMENTAL_DEBUG_MEMORY_USAGE) {\n        const percentageHeapUsed = 100 * heapUsed / heapMax;\n        (0, _log.info)('');\n        (0, _log.info)('***************************************');\n        (0, _log.info)(`Memory usage report at \"${description}\":`);\n        (0, _log.info)(` - RSS: ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} MB`);\n        (0, _log.info)(` - Heap Used: ${(heapUsed / 1024 / 1024).toFixed(2)} MB`);\n        (0, _log.info)(` - Heap Total Allocated: ${(memoryUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`);\n        (0, _log.info)(` - Heap Max: ${(heapMax / 1024 / 1024).toFixed(2)} MB`);\n        (0, _log.info)(` - Percentage Heap Used: ${percentageHeapUsed.toFixed(2)}%`);\n        (0, _log.info)('***************************************');\n        (0, _log.info)('');\n        if (percentageHeapUsed > HEAP_SNAPSHOT_THRESHOLD_PERCENT) {\n            const distDir = _shared.traceGlobals.get('distDir');\n            const heapFilename = (0, _path.join)(distDir, `${description.replace(' ', '-')}.heapsnapshot`);\n            (0, _log.warn)((0, _picocolors.bold)(`Heap usage is close to the limit. ${percentageHeapUsed.toFixed(2)}% of heap has been used.`));\n            if (!alreadyGeneratedHeapSnapshot) {\n                (0, _log.warn)((0, _picocolors.bold)(`Saving heap snapshot to ${heapFilename}.  ${(0, _picocolors.italic)('Note: this will take some time.')}`));\n                _v8.default.writeHeapSnapshot(heapFilename);\n                alreadyGeneratedHeapSnapshot = true;\n            } else {\n                (0, _log.warn)('Skipping heap snapshot generation since heap snapshot has already been generated.');\n            }\n        }\n    }\n}\n\n//# sourceMappingURL=trace.js.map"
        }
    ]
}