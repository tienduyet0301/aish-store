{
    "sourceFile": "node_modules/next/dist/lib/memory/gc-observer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892860521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getGcEvents: null,\n    startObservingGc: null,\n    stopObservingGc: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getGcEvents: function() {\n        return getGcEvents;\n    },\n    startObservingGc: function() {\n        return startObservingGc;\n    },\n    stopObservingGc: function() {\n        return stopObservingGc;\n    }\n});\nconst _perf_hooks = require(\"perf_hooks\");\nconst _log = require(\"../../build/output/log\");\nconst _picocolors = require(\"../picocolors\");\nconst LONG_RUNNING_GC_THRESHOLD_MS = 15;\nconst gcEvents = [];\nconst obs = new _perf_hooks.PerformanceObserver((list)=>{\n    const entry = list.getEntries()[0];\n    gcEvents.push(entry);\n    if (entry.duration > LONG_RUNNING_GC_THRESHOLD_MS) {\n        (0, _log.warn)((0, _picocolors.bold)(`Long running GC detected: ${entry.duration.toFixed(2)}ms`));\n    }\n});\nfunction startObservingGc() {\n    obs.observe({\n        entryTypes: [\n            'gc'\n        ]\n    });\n}\nfunction stopObservingGc() {\n    obs.disconnect();\n}\nfunction getGcEvents() {\n    return gcEvents;\n}\n\n//# sourceMappingURL=gc-observer.js.map"
        }
    ]
}