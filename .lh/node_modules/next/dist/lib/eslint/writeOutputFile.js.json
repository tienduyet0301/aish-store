{
    "sourceFile": "node_modules/next/dist/lib/eslint/writeOutputFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892857814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"writeOutputFile\", {\n    enumerable: true,\n    get: function() {\n        return writeOutputFile;\n    }\n});\nconst _fs = require(\"fs\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../../build/output/log\"));\nconst _iserror = /*#__PURE__*/ _interop_require_default(require(\"../../lib/is-error\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n/**\n * Check if a given file path is a directory or not.\n * Returns `true` if the path is a directory.\n */ function isDirectory(/**  The path to a file to check. */ filePath) {\n    return _fs.promises.stat(filePath).then((stat)=>stat.isDirectory()).catch((error)=>{\n        if ((0, _iserror.default)(error) && (error.code === 'ENOENT' || error.code === 'ENOTDIR')) {\n            return false;\n        }\n        throw error;\n    });\n}\nasync function writeOutputFile(/** The name file that needs to be created */ outputFile, /** The data that needs to be inserted into the file */ outputData) {\n    const filePath = _path.default.resolve(process.cwd(), outputFile);\n    if (await isDirectory(filePath)) {\n        _log.error(`Cannot write to output file path, it is a directory: ${filePath}`);\n    } else {\n        try {\n            await _fs.promises.mkdir(_path.default.dirname(filePath), {\n                recursive: true\n            });\n            await _fs.promises.writeFile(filePath, outputData);\n            _log.info(`The output file has been created: ${filePath}`);\n        } catch (err) {\n            _log.error(`There was a problem writing the output file: ${filePath}`);\n            console.error(err);\n        }\n    }\n}\n\n//# sourceMappingURL=writeOutputFile.js.map"
        }
    ]
}