{
    "sourceFile": "node_modules/next/dist/lib/eslint/runLintCheck.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892857673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"runLintCheck\", {\n    enumerable: true,\n    get: function() {\n        return runLintCheck;\n    }\n});\nconst _fs = require(\"fs\");\nconst _picocolors = require(\"../picocolors\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _semver = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/semver\"));\nconst _commentjson = /*#__PURE__*/ _interop_require_wildcard(require(\"next/dist/compiled/comment-json\"));\nconst _customFormatter = require(\"./customFormatter\");\nconst _writeDefaultConfig = require(\"./writeDefaultConfig\");\nconst _hasEslintConfiguration = require(\"./hasEslintConfiguration\");\nconst _writeOutputFile = require(\"./writeOutputFile\");\nconst _findpagesdir = require(\"../find-pages-dir\");\nconst _installdependencies = require(\"../install-dependencies\");\nconst _hasnecessarydependencies = require(\"../has-necessary-dependencies\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../../build/output/log\"));\nconst _iserror = /*#__PURE__*/ _interop_require_wildcard(require(\"../is-error\"));\nconst _getpkgmanager = require(\"../helpers/get-pkg-manager\");\nconst _getESLintPromptValues = require(\"./getESLintPromptValues\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// 0 is off, 1 is warn, 2 is error. See https://eslint.org/docs/user-guide/configuring/rules#configuring-rules\nconst VALID_SEVERITY = [\n    'off',\n    'warn',\n    'error'\n];\nfunction isValidSeverity(severity) {\n    return VALID_SEVERITY.includes(severity);\n}\nconst requiredPackages = [\n    {\n        file: 'eslint',\n        pkg: 'eslint',\n        exportsRestrict: false\n    },\n    {\n        file: 'eslint-config-next',\n        pkg: 'eslint-config-next',\n        exportsRestrict: false\n    }\n];\nasync function cliPrompt(cwd) {\n    console.log((0, _picocolors.bold)(`${(0, _picocolors.cyan)('?')} How would you like to configure ESLint? https://nextjs.org/docs/app/api-reference/config/eslint`));\n    try {\n        const cliSelect = (await Promise.resolve(require('next/dist/compiled/cli-select'))).default;\n        const { value } = await cliSelect({\n            values: await (0, _getESLintPromptValues.getESLintPromptValues)(cwd),\n            valueRenderer: ({ title, recommended }, selected)=>{\n                const name = selected ? (0, _picocolors.bold)((0, _picocolors.underline)((0, _picocolors.cyan)(title))) : title;\n                return name + (recommended ? (0, _picocolors.bold)((0, _picocolors.yellow)(' (recommended)')) : '');\n            },\n            selected: (0, _picocolors.cyan)('❯ '),\n            unselected: '  '\n        });\n        return {\n            config: (value == null ? void 0 : value.config) ?? null\n        };\n    } catch  {\n        return {\n            config: null\n        };\n    }\n}\nasync function lint(baseDir, lintDirs, eslintrcFile, pkgJsonPath, { lintDuringBuild = false, eslintOptions = null, reportErrorsOnly = false, maxWarnings = -1, formatter = null, outputFile = null }) {\n    try {\n        var _mod_CLIEngine, _ESLint_getErrorResults;\n        // Load ESLint after we're sure it exists:\n        const deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(baseDir, requiredPackages);\n        const packageManager = (0, _getpkgmanager.getPkgManager)(baseDir);\n        if (deps.missing.some((dep)=>dep.pkg === 'eslint')) {\n            _log.error(`ESLint must be installed${lintDuringBuild ? ' in order to run during builds:' : ':'} ${(0, _picocolors.bold)((0, _picocolors.cyan)((packageManager === 'yarn' ? 'yarn add --dev' : packageManager === 'pnpm' ? 'pnpm install --save-dev' : 'npm install --save-dev') + ' eslint'))}`);\n            return null;\n        }\n        const mod = await Promise.resolve(require(deps.resolved.get('eslint')));\n        // If V9 config was found, use flat config, or else use legacy.\n        const useFlatConfig = eslintrcFile ? _path.default.basename(eslintrcFile).startsWith('eslint.config.') : false;\n        let ESLint;\n        // loadESLint is >= 8.57.0\n        // PR https://github.com/eslint/eslint/pull/18098\n        // Release https://github.com/eslint/eslint/releases/tag/v8.57.0\n        if ('loadESLint' in mod) {\n            // By default, configType is `flat`. If `useFlatConfig` is false, the return value is `LegacyESLint`.\n            // https://github.com/eslint/eslint/blob/1def4cdfab1f067c5089df8b36242cdf912b0eb6/lib/types/index.d.ts#L1609-L1613\n            ESLint = await mod.loadESLint({\n                useFlatConfig\n            });\n        } else {\n            // eslint < 8.57.0, use legacy ESLint\n            ESLint = mod.ESLint;\n        }\n        let eslintVersion = (ESLint == null ? void 0 : ESLint.version) ?? ((_mod_CLIEngine = mod.CLIEngine) == null ? void 0 : _mod_CLIEngine.version);\n        if (!eslintVersion || _semver.default.lt(eslintVersion, '7.0.0')) {\n            return `${(0, _picocolors.red)('error')} - Your project has an older version of ESLint installed${eslintVersion ? ' (' + eslintVersion + ')' : ''}. Please upgrade to ESLint version 7 or above`;\n        }\n        let options = {\n            useEslintrc: true,\n            baseConfig: {},\n            errorOnUnmatchedPattern: false,\n            extensions: [\n                '.js',\n                '.jsx',\n                '.ts',\n                '.tsx'\n            ],\n            cache: true,\n            ...eslintOptions\n        };\n        if (_semver.default.gte(eslintVersion, '9.0.0') && useFlatConfig) {\n            for (const option of [\n                'useEslintrc',\n                'extensions',\n                'ignorePath',\n                'reportUnusedDisableDirectives',\n                'resolvePluginsRelativeTo',\n                'rulePaths',\n                'inlineConfig',\n                'maxWarnings'\n            ]){\n                if (option in options) {\n                    delete options[option];\n                }\n            }\n        }\n        let eslint = new ESLint(options);\n        let nextEslintPluginIsEnabled = false;\n        const nextRulesEnabled = new Map();\n        for (const configFile of [\n            eslintrcFile,\n            pkgJsonPath\n        ]){\n            if (!configFile) continue;\n            const completeConfig = await eslint.calculateConfigForFile(configFile);\n            if (!completeConfig) continue;\n            const plugins = completeConfig.plugins;\n            const hasNextPlugin = // in ESLint < 9, `plugins` value is string[]\n            Array.isArray(plugins) ? plugins.includes('@next/next') : '@next/next' in plugins;\n            if (hasNextPlugin) {\n                nextEslintPluginIsEnabled = true;\n                for (const [name, [severity]] of Object.entries(completeConfig.rules)){\n                    if (!name.startsWith('@next/next/')) {\n                        continue;\n                    }\n                    if (typeof severity === 'number' && severity >= 0 && severity < VALID_SEVERITY.length) {\n                        nextRulesEnabled.set(name, VALID_SEVERITY[severity]);\n                    } else if (typeof severity === 'string' && isValidSeverity(severity)) {\n                        nextRulesEnabled.set(name, severity);\n                    }\n                }\n                break;\n            }\n        }\n        const pagesDir = (0, _findpagesdir.findPagesDir)(baseDir).pagesDir;\n        const pagesDirRules = pagesDir ? [\n            '@next/next/no-html-link-for-pages'\n        ] : [];\n        if (nextEslintPluginIsEnabled) {\n            let updatedPagesDir = false;\n            for (const rule of pagesDirRules){\n                var _options_baseConfig_rules, _options_baseConfig_rules1;\n                if (!((_options_baseConfig_rules = options.baseConfig.rules) == null ? void 0 : _options_baseConfig_rules[rule]) && !((_options_baseConfig_rules1 = options.baseConfig.rules) == null ? void 0 : _options_baseConfig_rules1[rule.replace('@next/next', '@next/babel-plugin-next')])) {\n                    if (!options.baseConfig.rules) {\n                        options.baseConfig.rules = {};\n                    }\n                    options.baseConfig.rules[rule] = [\n                        1,\n                        pagesDir\n                    ];\n                    updatedPagesDir = true;\n                }\n            }\n            if (updatedPagesDir) {\n                eslint = new ESLint(options);\n            }\n        } else {\n            _log.warn('');\n            _log.warn('The Next.js plugin was not detected in your ESLint configuration. See https://nextjs.org/docs/app/api-reference/config/eslint#migrating-existing-config');\n        }\n        const lintStart = process.hrtime();\n        let results = await eslint.lintFiles(lintDirs);\n        let selectedFormatter = null;\n        if (options.fix) await ESLint.outputFixes(results);\n        if (reportErrorsOnly) results = await ESLint.getErrorResults(results) // Only return errors if --quiet flag is used\n        ;\n        if (formatter) selectedFormatter = await eslint.loadFormatter(formatter);\n        const formattedResult = await (0, _customFormatter.formatResults)(baseDir, results, selectedFormatter == null ? void 0 : selectedFormatter.format);\n        const lintEnd = process.hrtime(lintStart);\n        const totalWarnings = results.reduce((sum, file)=>sum + file.warningCount, 0);\n        if (outputFile) await (0, _writeOutputFile.writeOutputFile)(outputFile, formattedResult.output);\n        return {\n            output: formattedResult.outputWithMessages,\n            isError: ((_ESLint_getErrorResults = ESLint.getErrorResults(results)) == null ? void 0 : _ESLint_getErrorResults.length) > 0 || maxWarnings >= 0 && totalWarnings > maxWarnings,\n            eventInfo: {\n                durationInSeconds: lintEnd[0],\n                eslintVersion: eslintVersion,\n                lintedFilesCount: results.length,\n                lintFix: !!options.fix,\n                nextEslintPluginVersion: nextEslintPluginIsEnabled && deps.resolved.has('eslint-config-next') ? require(_path.default.join(_path.default.dirname(deps.resolved.get('eslint-config-next')), 'package.json')).version : null,\n                nextEslintPluginErrorsCount: formattedResult.totalNextPluginErrorCount,\n                nextEslintPluginWarningsCount: formattedResult.totalNextPluginWarningCount,\n                nextRulesEnabled: Object.fromEntries(nextRulesEnabled)\n            }\n        };\n    } catch (err) {\n        if (lintDuringBuild) {\n            _log.error(`ESLint: ${(0, _iserror.default)(err) && err.message ? err.message.replace(/\\n/g, ' ') : err}`);\n            return null;\n        } else {\n            throw (0, _iserror.getProperError)(err);\n        }\n    }\n}\nasync function runLintCheck(baseDir, lintDirs, opts) {\n    const { lintDuringBuild = false, eslintOptions = null, reportErrorsOnly = false, maxWarnings = -1, formatter = null, outputFile = null, strict = false } = opts;\n    try {\n        // Find user's .eslintrc file\n        // See: https://eslint.org/docs/user-guide/configuring/configuration-files#configuration-file-formats\n        const eslintrcFile = await (0, _findup.default)([\n            // eslint v9\n            'eslint.config.js',\n            'eslint.config.mjs',\n            'eslint.config.cjs',\n            // TS extensions require to install a separate package `jiti`.\n            // https://eslint.org/docs/latest/use/configure/configuration-files#typescript-configuration-files\n            'eslint.config.ts',\n            'eslint.config.mts',\n            'eslint.config.cts',\n            // eslint <= v8\n            '.eslintrc.js',\n            '.eslintrc.cjs',\n            '.eslintrc.yaml',\n            '.eslintrc.yml',\n            '.eslintrc.json',\n            '.eslintrc'\n        ], {\n            cwd: baseDir\n        }) ?? null;\n        const pkgJsonPath = await (0, _findup.default)('package.json', {\n            cwd: baseDir\n        }) ?? null;\n        let packageJsonConfig = null;\n        if (pkgJsonPath) {\n            const pkgJsonContent = await _fs.promises.readFile(pkgJsonPath, {\n                encoding: 'utf8'\n            });\n            packageJsonConfig = _commentjson.parse(pkgJsonContent);\n        }\n        const config = await (0, _hasEslintConfiguration.hasEslintConfiguration)(eslintrcFile, packageJsonConfig);\n        let deps;\n        if (config.exists) {\n            // Run if ESLint config exists\n            return await lint(baseDir, lintDirs, eslintrcFile, pkgJsonPath, {\n                lintDuringBuild,\n                eslintOptions,\n                reportErrorsOnly,\n                maxWarnings,\n                formatter,\n                outputFile\n            });\n        } else {\n            // Display warning if no ESLint configuration is present inside\n            // config file during \"next build\", no warning is shown when\n            // no eslintrc file is present\n            if (lintDuringBuild) {\n                if (config.emptyPkgJsonConfig || config.emptyEslintrc) {\n                    _log.warn(`No ESLint configuration detected. Run ${(0, _picocolors.bold)((0, _picocolors.cyan)('next lint'))} to begin setup`);\n                }\n                return null;\n            } else {\n                // Ask user what config they would like to start with for first time \"next lint\" setup\n                const { config: selectedConfig } = strict ? await (0, _getESLintPromptValues.getESLintStrictValue)(baseDir) : await cliPrompt(baseDir);\n                if (selectedConfig == null) {\n                    // Show a warning if no option is selected in prompt\n                    _log.warn('If you set up ESLint yourself, we recommend adding the Next.js ESLint plugin. See https://nextjs.org/docs/app/api-reference/config/eslint#migrating-existing-config');\n                    return null;\n                } else {\n                    // Check if necessary deps installed, and install any that are missing\n                    deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(baseDir, requiredPackages);\n                    if (deps.missing.length > 0) {\n                        deps.missing.forEach((dep)=>{\n                            if (dep.pkg === 'eslint') {\n                                // pin to v9 to avoid breaking changes\n                                dep.pkg = 'eslint@^9';\n                            }\n                        });\n                        await (0, _installdependencies.installDependencies)(baseDir, deps.missing, true);\n                    }\n                    // Write default ESLint config.\n                    // Check for /pages and src/pages is to make sure this happens in Next.js folder\n                    if ([\n                        'app',\n                        'src/app',\n                        'pages',\n                        'src/pages'\n                    ].some((dir)=>(0, _fs.existsSync)(_path.default.join(baseDir, dir)))) {\n                        await (0, _writeDefaultConfig.writeDefaultConfig)(baseDir, config, selectedConfig, eslintrcFile, pkgJsonPath, packageJsonConfig);\n                    }\n                }\n                _log.ready(`ESLint has successfully been configured. Run ${(0, _picocolors.bold)((0, _picocolors.cyan)('next lint'))} again to view warnings and errors.`);\n                return null;\n            }\n        }\n    } catch (err) {\n        throw err;\n    }\n}\n\n//# sourceMappingURL=runLintCheck.js.map"
        }
    ]
}