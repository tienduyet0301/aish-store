{
    "sourceFile": "node_modules/next/dist/lib/patch-incorrect-lockfile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892863239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"patchIncorrectLockfile\", {\n    enumerable: true,\n    get: function() {\n        return patchIncorrectLockfile;\n    }\n});\nconst _fs = require(\"fs\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../build/output/log\"));\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _packagejson = /*#__PURE__*/ _interop_require_default(require(\"next/package.json\"));\nconst _ciinfo = require(\"../server/ci-info\");\nconst _getregistry = require(\"./helpers/get-registry\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nlet registry;\nasync function fetchPkgInfo(pkg) {\n    if (!registry) registry = (0, _getregistry.getRegistry)();\n    const res = await fetch(`${registry}${pkg}`);\n    if (!res.ok) {\n        throw Object.defineProperty(new Error(`Failed to fetch registry info for ${pkg}, got status ${res.status}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E172\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const data = await res.json();\n    const versionData = data.versions[_packagejson.default.version];\n    return {\n        os: versionData.os,\n        cpu: versionData.cpu,\n        engines: versionData.engines,\n        tarball: versionData.dist.tarball,\n        integrity: versionData.dist.integrity\n    };\n}\nasync function patchIncorrectLockfile(dir) {\n    if (process.env.NEXT_IGNORE_INCORRECT_LOCKFILE) {\n        return;\n    }\n    const lockfilePath = await (0, _findup.default)('package-lock.json', {\n        cwd: dir\n    });\n    if (!lockfilePath) {\n        // if no lockfile present there is no action to take\n        return;\n    }\n    const content = await _fs.promises.readFile(lockfilePath, 'utf8');\n    // maintain current line ending\n    const endingNewline = content.endsWith('\\r\\n') ? '\\r\\n' : content.endsWith('\\n') ? '\\n' : '';\n    const lockfileParsed = JSON.parse(content);\n    const lockfileVersion = parseInt(lockfileParsed == null ? void 0 : lockfileParsed.lockfileVersion, 10);\n    const expectedSwcPkgs = Object.keys(_packagejson.default['optionalDependencies'] || {}).filter((pkg)=>pkg.startsWith('@next/swc-'));\n    const patchDependency = (pkg, pkgData)=>{\n        lockfileParsed.dependencies[pkg] = {\n            version: _packagejson.default.version,\n            resolved: pkgData.tarball,\n            integrity: pkgData.integrity,\n            optional: true\n        };\n    };\n    const patchPackage = (pkg, pkgData)=>{\n        lockfileParsed.packages[pkg] = {\n            version: _packagejson.default.version,\n            resolved: pkgData.tarball,\n            integrity: pkgData.integrity,\n            cpu: pkgData.cpu,\n            optional: true,\n            os: pkgData.os,\n            engines: pkgData.engines\n        };\n    };\n    try {\n        const supportedVersions = [\n            1,\n            2,\n            3\n        ];\n        if (!supportedVersions.includes(lockfileVersion)) {\n            // bail on unsupported version\n            return;\n        }\n        // v1 only uses dependencies\n        // v2 uses dependencies and packages\n        // v3 only uses packages\n        const shouldPatchDependencies = lockfileVersion === 1 || lockfileVersion === 2;\n        const shouldPatchPackages = lockfileVersion === 2 || lockfileVersion === 3;\n        if (shouldPatchDependencies && !lockfileParsed.dependencies || shouldPatchPackages && !lockfileParsed.packages) {\n            // invalid lockfile so bail\n            return;\n        }\n        const missingSwcPkgs = [];\n        let pkgPrefix;\n        if (shouldPatchPackages) {\n            pkgPrefix = '';\n            for (const pkg of Object.keys(lockfileParsed.packages)){\n                if (pkg.endsWith('node_modules/next')) {\n                    pkgPrefix = pkg.substring(0, pkg.length - 4);\n                }\n            }\n            if (!pkgPrefix) {\n                // unable to locate the next package so bail\n                return;\n            }\n        }\n        for (const pkg of expectedSwcPkgs){\n            if (shouldPatchDependencies && !lockfileParsed.dependencies[pkg] || shouldPatchPackages && !lockfileParsed.packages[`${pkgPrefix}${pkg}`]) {\n                missingSwcPkgs.push(pkg);\n            }\n        }\n        if (missingSwcPkgs.length === 0) {\n            return;\n        }\n        _log.warn(`Found lockfile missing swc dependencies,`, _ciinfo.isCI ? 'run next locally to automatically patch' : 'patching...');\n        if (_ciinfo.isCI) {\n            // no point in updating in CI as the user can't save the patch\n            return;\n        }\n        const pkgsData = await Promise.all(missingSwcPkgs.map((pkg)=>fetchPkgInfo(pkg)));\n        for(let i = 0; i < pkgsData.length; i++){\n            const pkg = missingSwcPkgs[i];\n            const pkgData = pkgsData[i];\n            if (shouldPatchDependencies) {\n                patchDependency(pkg, pkgData);\n            }\n            if (shouldPatchPackages) {\n                patchPackage(`${pkgPrefix}${pkg}`, pkgData);\n            }\n        }\n        await _fs.promises.writeFile(lockfilePath, JSON.stringify(lockfileParsed, null, 2) + endingNewline);\n        _log.warn('Lockfile was successfully patched, please run \"npm install\" to ensure @next/swc dependencies are downloaded');\n    } catch (err) {\n        _log.error(`Failed to patch lockfile, please try uninstalling and reinstalling next in this workspace`);\n        console.error(err);\n    }\n}\n\n//# sourceMappingURL=patch-incorrect-lockfile.js.map"
        }
    ]
}