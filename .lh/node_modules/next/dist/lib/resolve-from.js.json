{
    "sourceFile": "node_modules/next/dist/lib/resolve-from.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892864059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// source: https://github.com/sindresorhus/resolve-from\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"resolveFrom\", {\n    enumerable: true,\n    get: function() {\n        return resolveFrom;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _iserror = /*#__PURE__*/ _interop_require_default(require(\"./is-error\"));\nconst _realpath = require(\"./realpath\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst Module = require('module');\nconst resolveFrom = (fromDirectory, moduleId, silent)=>{\n    if (typeof fromDirectory !== 'string') {\n        throw Object.defineProperty(new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDirectory}\\``), \"__NEXT_ERROR_CODE\", {\n            value: \"E537\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (typeof moduleId !== 'string') {\n        throw Object.defineProperty(new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``), \"__NEXT_ERROR_CODE\", {\n            value: \"E565\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    try {\n        fromDirectory = (0, _realpath.realpathSync)(fromDirectory);\n    } catch (error) {\n        if ((0, _iserror.default)(error) && error.code === 'ENOENT') {\n            fromDirectory = _path.default.resolve(fromDirectory);\n        } else if (silent) {\n            return;\n        } else {\n            throw error;\n        }\n    }\n    const fromFile = _path.default.join(fromDirectory, 'noop.js');\n    const resolveFileName = ()=>Module._resolveFilename(moduleId, {\n            id: fromFile,\n            filename: fromFile,\n            paths: Module._nodeModulePaths(fromDirectory)\n        });\n    if (silent) {\n        try {\n            return resolveFileName();\n        } catch (error) {\n            return;\n        }\n    }\n    return resolveFileName();\n};\n\n//# sourceMappingURL=resolve-from.js.map"
        }
    ]
}