{
    "sourceFile": "node_modules/next/dist/lib/fallback.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892857885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Describes the different fallback modes that a given page can have.\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    FallbackMode: null,\n    fallbackModeToFallbackField: null,\n    parseFallbackField: null,\n    parseStaticPathsResult: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    FallbackMode: function() {\n        return FallbackMode;\n    },\n    fallbackModeToFallbackField: function() {\n        return fallbackModeToFallbackField;\n    },\n    parseFallbackField: function() {\n        return parseFallbackField;\n    },\n    parseStaticPathsResult: function() {\n        return parseStaticPathsResult;\n    }\n});\nvar FallbackMode = /*#__PURE__*/ function(FallbackMode) {\n    /**\n   * A BLOCKING_STATIC_RENDER fallback will block the request until the page is\n   * generated. No fallback page will be rendered, and users will have to wait\n   * to render the page.\n   */ FallbackMode[\"BLOCKING_STATIC_RENDER\"] = \"BLOCKING_STATIC_RENDER\";\n    /**\n   * When set to PRERENDER, a fallback page will be sent to users in place of\n   * forcing them to wait for the page to be generated. This allows the user to\n   * see a rendered page earlier.\n   */ FallbackMode[\"PRERENDER\"] = \"PRERENDER\";\n    /**\n   * When set to NOT_FOUND, pages that are not already prerendered will result\n   * in a not found response.\n   */ FallbackMode[\"NOT_FOUND\"] = \"NOT_FOUND\";\n    return FallbackMode;\n}({});\nfunction parseFallbackField(fallbackField) {\n    if (typeof fallbackField === 'string') {\n        return \"PRERENDER\";\n    } else if (fallbackField === null) {\n        return \"BLOCKING_STATIC_RENDER\";\n    } else if (fallbackField === false) {\n        return \"NOT_FOUND\";\n    } else if (fallbackField === undefined) {\n        return undefined;\n    } else {\n        throw Object.defineProperty(new Error(`Invalid fallback option: ${fallbackField}. Fallback option must be a string, null, undefined, or false.`), \"__NEXT_ERROR_CODE\", {\n            value: \"E285\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nfunction fallbackModeToFallbackField(fallback, page) {\n    switch(fallback){\n        case \"BLOCKING_STATIC_RENDER\":\n            return null;\n        case \"NOT_FOUND\":\n            return false;\n        case \"PRERENDER\":\n            if (!page) {\n                throw Object.defineProperty(new Error(`Invariant: expected a page to be provided when fallback mode is \"${fallback}\"`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E422\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            return page;\n        default:\n            throw Object.defineProperty(new Error(`Invalid fallback mode: ${fallback}`), \"__NEXT_ERROR_CODE\", {\n                value: \"E254\",\n                enumerable: false,\n                configurable: true\n            });\n    }\n}\nfunction parseStaticPathsResult(result) {\n    if (result === true) {\n        return \"PRERENDER\";\n    } else if (result === 'blocking') {\n        return \"BLOCKING_STATIC_RENDER\";\n    } else {\n        return \"NOT_FOUND\";\n    }\n}\n\n//# sourceMappingURL=fallback.js.map"
        }
    ]
}