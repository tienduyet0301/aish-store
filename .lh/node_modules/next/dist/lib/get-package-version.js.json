{
    "sourceFile": "node_modules/next/dist/lib/get-package-version.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892858991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getDependencies: null,\n    getPackageVersion: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getDependencies: function() {\n        return getDependencies;\n    },\n    getPackageVersion: function() {\n        return getPackageVersion;\n    }\n});\nconst _fs = require(\"fs\");\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _json5 = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/json5\"));\nconst _path = /*#__PURE__*/ _interop_require_wildcard(require(\"path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nlet cachedDeps;\nfunction getDependencies({ cwd }) {\n    if (cachedDeps) {\n        return cachedDeps;\n    }\n    return cachedDeps = (async ()=>{\n        const configurationPath = await (0, _findup.default)('package.json', {\n            cwd\n        });\n        if (!configurationPath) {\n            return {\n                dependencies: {},\n                devDependencies: {}\n            };\n        }\n        const content = await _fs.promises.readFile(configurationPath, 'utf-8');\n        const packageJson = _json5.default.parse(content);\n        const { dependencies = {}, devDependencies = {} } = packageJson || {};\n        return {\n            dependencies,\n            devDependencies\n        };\n    })();\n}\nasync function getPackageVersion({ cwd, name }) {\n    const { dependencies, devDependencies } = await getDependencies({\n        cwd\n    });\n    if (!(dependencies[name] || devDependencies[name])) {\n        return null;\n    }\n    const cwd2 = cwd.endsWith(_path.posix.sep) || cwd.endsWith(_path.win32.sep) ? cwd : `${cwd}/`;\n    try {\n        const targetPath = require.resolve(`${name}/package.json`, {\n            paths: [\n                cwd2\n            ]\n        });\n        const targetContent = await _fs.promises.readFile(targetPath, 'utf-8');\n        return _json5.default.parse(targetContent).version ?? null;\n    } catch  {\n        return null;\n    }\n}\n\n//# sourceMappingURL=get-package-version.js.map"
        }
    ]
}