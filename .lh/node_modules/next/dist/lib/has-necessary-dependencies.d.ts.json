{
    "sourceFile": "node_modules/next/dist/lib/has-necessary-dependencies.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892859095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export interface MissingDependency {\n    file: string;\n    /**\n     * The package's package.json (e.g. require(`${pkg}/package.json`)) MUST resolve.\n     * If `exportsRestrict` is false, `${file}` MUST also resolve.\n     */\n    pkg: string;\n    /**\n     * If true, the pkg's package.json needs to be resolvable.\n     * If true, will resolve `file` relative to the real path of the package.json.\n     *\n     * For example, `{ file: '@types/react/index.d.ts', pkg: '@types/react', exportsRestrict: true }`\n     * will try to resolve '@types/react/package.json' first and then assume `@types/react/index.d.ts`\n     * resolves to `path.join(dirname(resolvedPackageJsonPath), 'index.d.ts')`.\n     *\n     * If false, will resolve `file` relative to the baseDir.\n     * ForFor example, `{ file: '@types/react/index.d.ts', pkg: '@types/react', exportsRestrict: true }`\n     * will try to resolve `@types/react/index.d.ts` directly.\n     */\n    exportsRestrict: boolean;\n}\nexport type NecessaryDependencies = {\n    resolved: Map<string, string>;\n    missing: MissingDependency[];\n};\nexport declare function hasNecessaryDependencies(baseDir: string, requiredPackages: MissingDependency[]): Promise<NecessaryDependencies>;\n"
        }
    ]
}