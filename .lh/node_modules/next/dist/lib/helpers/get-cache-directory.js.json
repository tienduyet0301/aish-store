{
    "sourceFile": "node_modules/next/dist/lib/helpers/get-cache-directory.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892859201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getCacheDirectory\", {\n    enumerable: true,\n    get: function() {\n        return getCacheDirectory;\n    }\n});\nconst _os = /*#__PURE__*/ _interop_require_default(require(\"os\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _fs = /*#__PURE__*/ _interop_require_default(require(\"fs\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction getCacheDirectory(fileDirectory, envPath) {\n    let result;\n    if (envPath) {\n        result = envPath;\n    } else {\n        let systemCacheDirectory;\n        if (process.platform === 'linux') {\n            systemCacheDirectory = process.env.XDG_CACHE_HOME || _path.default.join(_os.default.homedir(), '.cache');\n        } else if (process.platform === 'darwin') {\n            systemCacheDirectory = _path.default.join(_os.default.homedir(), 'Library', 'Caches');\n        } else if (process.platform === 'win32') {\n            systemCacheDirectory = process.env.LOCALAPPDATA || _path.default.join(_os.default.homedir(), 'AppData', 'Local');\n        } else {\n            /// Attempt to use generic tmp location for un-handled platform\n            if (!systemCacheDirectory) {\n                for (const dir of [\n                    _path.default.join(_os.default.homedir(), '.cache'),\n                    _path.default.join(_os.default.tmpdir())\n                ]){\n                    if (_fs.default.existsSync(dir)) {\n                        systemCacheDirectory = dir;\n                        break;\n                    }\n                }\n            }\n            if (!systemCacheDirectory) {\n                console.error(Object.defineProperty(new Error('Unsupported platform: ' + process.platform), \"__NEXT_ERROR_CODE\", {\n                    value: \"E141\",\n                    enumerable: false,\n                    configurable: true\n                }));\n                process.exit(0);\n            }\n        }\n        result = _path.default.join(systemCacheDirectory, fileDirectory);\n    }\n    if (!_path.default.isAbsolute(result)) {\n        // It is important to resolve to the absolute path:\n        //   - for unzipping to work correctly;\n        //   - so that registry directory matches between installation and execution.\n        // INIT_CWD points to the root of `npm/yarn install` and is probably what\n        // the user meant when typing the relative path.\n        result = _path.default.resolve(process.env['INIT_CWD'] || process.cwd(), result);\n    }\n    return result;\n}\n\n//# sourceMappingURL=get-cache-directory.js.map"
        }
    ]
}