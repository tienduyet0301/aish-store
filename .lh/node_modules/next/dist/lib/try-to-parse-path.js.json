{
    "sourceFile": "node_modules/next/dist/lib/try-to-parse-path.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892864384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"tryToParsePath\", {\n    enumerable: true,\n    get: function() {\n        return tryToParsePath;\n    }\n});\nconst _pathtoregexp = require(\"next/dist/compiled/path-to-regexp\");\nconst _url = require(\"url\");\nconst _iserror = /*#__PURE__*/ _interop_require_default(require(\"./is-error\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n * If there is an error show our error link but still show original error or\n * a formatted one if we can\n */ function reportError({ route, parsedPath }, err) {\n    let errMatches;\n    if ((0, _iserror.default)(err) && (errMatches = err.message.match(/at (\\d{0,})/))) {\n        const position = parseInt(errMatches[1], 10);\n        console.error(`\\nError parsing \\`${route}\\` ` + `https://nextjs.org/docs/messages/invalid-route-source\\n` + `Reason: ${err.message}\\n\\n` + `  ${parsedPath}\\n` + `  ${new Array(position).fill(' ').join('')}^\\n`);\n    } else {\n        console.error(`\\nError parsing ${route} https://nextjs.org/docs/messages/invalid-route-source`, err);\n    }\n}\nfunction tryToParsePath(route, options) {\n    const result = {\n        route,\n        parsedPath: route\n    };\n    try {\n        if (options == null ? void 0 : options.handleUrl) {\n            const parsed = (0, _url.parse)(route, true);\n            result.parsedPath = `${parsed.pathname}${parsed.hash || ''}`;\n        }\n        result.tokens = (0, _pathtoregexp.parse)(result.parsedPath);\n        result.regexStr = (0, _pathtoregexp.tokensToRegexp)(result.tokens).source;\n    } catch (err) {\n        reportError(result, err);\n        result.error = err;\n    }\n    return result;\n}\n\n//# sourceMappingURL=try-to-parse-path.js.map"
        }
    ]
}