{
    "sourceFile": "node_modules/next/dist/lib/find-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892858088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    findConfig: null,\n    findConfigPath: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    findConfig: function() {\n        return findConfig;\n    },\n    findConfigPath: function() {\n        return findConfigPath;\n    }\n});\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _promises = require(\"fs/promises\");\nconst _json5 = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/json5\"));\nconst _url = require(\"url\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction findConfigPath(dir, key) {\n    // If we didn't find the configuration in `package.json`, we should look for\n    // known filenames.\n    return (0, _findup.default)([\n        `.${key}rc.json`,\n        `${key}.config.json`,\n        `.${key}rc.js`,\n        `${key}.config.js`,\n        `${key}.config.mjs`,\n        `${key}.config.cjs`\n    ], {\n        cwd: dir\n    });\n}\nasync function findConfig(directory, key, _returnFile) {\n    // `package.json` configuration always wins. Let's check that first.\n    const packageJsonPath = await (0, _findup.default)('package.json', {\n        cwd: directory\n    });\n    let isESM = false;\n    if (packageJsonPath) {\n        try {\n            const packageJsonStr = await (0, _promises.readFile)(packageJsonPath, 'utf8');\n            const packageJson = JSON.parse(packageJsonStr);\n            if (typeof packageJson !== 'object') {\n                throw new Error() // Stop processing and continue\n                ;\n            }\n            if (packageJson.type === 'module') {\n                isESM = true;\n            }\n            if (packageJson[key] != null && typeof packageJson[key] === 'object') {\n                return packageJson[key];\n            }\n        } catch  {\n        // Ignore error and continue\n        }\n    }\n    const filePath = await findConfigPath(directory, key);\n    const esmImport = (path)=>{\n        // Skip mapping to absolute url with pathToFileURL on windows if it's jest\n        // https://github.com/nodejs/node/issues/31710#issuecomment-587345749\n        if (process.platform === 'win32' && !process.env.JEST_WORKER_ID) {\n            // on windows import(\"C:\\\\path\\\\to\\\\file\") is not valid, so we need to\n            // use file:// URLs\n            return import((0, _url.pathToFileURL)(path).toString());\n        } else {\n            return import(path);\n        }\n    };\n    if (filePath) {\n        if (filePath.endsWith('.js')) {\n            if (isESM) {\n                return (await esmImport(filePath)).default;\n            } else {\n                return require(filePath);\n            }\n        } else if (filePath.endsWith('.mjs')) {\n            return (await esmImport(filePath)).default;\n        } else if (filePath.endsWith('.cjs')) {\n            return require(filePath);\n        }\n        // We load JSON contents with JSON5 to allow users to comment in their\n        // configuration file. This pattern was popularized by TypeScript.\n        const fileContents = await (0, _promises.readFile)(filePath, 'utf8');\n        return _json5.default.parse(fileContents);\n    }\n    return null;\n}\n\n//# sourceMappingURL=find-config.js.map"
        }
    ]
}