{
    "sourceFile": "node_modules/next/dist/lib/multi-file-writer.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892862909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CacheFs } from '../shared/lib/utils';\n/**\n * MultiFileWriter is a utility for writing multiple files in parallel that\n * guarantees that all files will be written after their containing directory\n * is created, and that the directory will only be created once.\n */\nexport declare class MultiFileWriter {\n    /**\n     * The file system methods to use.\n     */\n    private readonly fs;\n    /**\n     * The tasks to be written.\n     */\n    private readonly tasks;\n    constructor(\n    /**\n     * The file system methods to use.\n     */\n    fs: Pick<CacheFs, 'mkdir' | 'writeFile'>);\n    /**\n     * Finds or creates a task for a directory.\n     *\n     * @param directory - The directory to find or create a task for.\n     * @returns The task for the directory.\n     */\n    private findOrCreateTask;\n    /**\n     * Appends a file to the writer to be written after its containing directory\n     * is created. The file writer should be awaited after all the files have been\n     * appended. Any async operation that occurs between appending and awaiting\n     * may cause an unhandled promise rejection warning and potentially crash the\n     * process.\n     *\n     * @param filePath - The path to the file to write.\n     * @param data - The data to write to the file.\n     */\n    append(filePath: string, data: Buffer | string): void;\n    /**\n     * Returns a promise that resolves when all the files have been written.\n     */\n    wait(): Promise<unknown>;\n}\n"
        }
    ]
}