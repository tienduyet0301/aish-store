{
    "sourceFile": "node_modules/next/dist/lib/metadata/resolve-metadata.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892861737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Metadata, ResolvedMetadata, ResolvedViewport, ResolvingMetadata, ResolvingViewport, Viewport } from './types/metadata-interface';\nimport type { GetDynamicParamFromSegment } from '../../server/app-render/app-render';\nimport type { MetadataContext } from './types/resolvers';\nimport type { LoaderTree } from '../../server/lib/app-dir-module';\nimport type { ParsedUrlQuery } from 'querystring';\nimport type { StaticMetadata } from './types/icons';\nimport type { WorkStore } from '../../server/app-render/work-async-storage.external';\nimport 'server-only';\ntype MetadataResolver = (parent: ResolvingMetadata) => Metadata | Promise<Metadata>;\ntype ViewportResolver = (parent: ResolvingViewport) => Viewport | Promise<Viewport>;\nexport type MetadataErrorType = 'not-found' | 'forbidden' | 'unauthorized';\nexport type MetadataItems = Array<[\n    Metadata | MetadataResolver | null,\n    StaticMetadata\n]>;\nexport type ViewportItems = Array<Viewport | ViewportResolver | null>;\nexport declare function accumulateMetadata(metadataItems: MetadataItems, metadataContext: MetadataContext): Promise<ResolvedMetadata>;\nexport declare function accumulateViewport(viewportItems: ViewportItems): Promise<ResolvedViewport>;\nexport declare function resolveMetadata(tree: LoaderTree, searchParams: Promise<ParsedUrlQuery>, errorConvention: MetadataErrorType | undefined, getDynamicParamFromSegment: GetDynamicParamFromSegment, workStore: WorkStore, metadataContext: MetadataContext): Promise<ResolvedMetadata>;\nexport declare function resolveViewport(tree: LoaderTree, searchParams: Promise<ParsedUrlQuery>, errorConvention: MetadataErrorType | undefined, getDynamicParamFromSegment: GetDynamicParamFromSegment, workStore: WorkStore): Promise<ResolvedViewport>;\nexport {};\n"
        }
    ]
}