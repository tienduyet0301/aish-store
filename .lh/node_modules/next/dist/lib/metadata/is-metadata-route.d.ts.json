{
    "sourceFile": "node_modules/next/dist/lib/metadata/is-metadata-route.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892861471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { PageExtensions } from '../../build/page-extensions-type';\nexport declare const STATIC_METADATA_IMAGES: {\n    readonly icon: {\n        readonly filename: \"icon\";\n        readonly extensions: readonly [\"ico\", \"jpg\", \"jpeg\", \"png\", \"svg\"];\n    };\n    readonly apple: {\n        readonly filename: \"apple-icon\";\n        readonly extensions: readonly [\"jpg\", \"jpeg\", \"png\"];\n    };\n    readonly favicon: {\n        readonly filename: \"favicon\";\n        readonly extensions: readonly [\"ico\"];\n    };\n    readonly openGraph: {\n        readonly filename: \"opengraph-image\";\n        readonly extensions: readonly [\"jpg\", \"jpeg\", \"png\", \"gif\"];\n    };\n    readonly twitter: {\n        readonly filename: \"twitter-image\";\n        readonly extensions: readonly [\"jpg\", \"jpeg\", \"png\", \"gif\"];\n    };\n};\nexport declare const DEFAULT_METADATA_ROUTE_EXTENSIONS: string[];\nexport declare const getExtensionRegexString: (staticExtensions: readonly string[], dynamicExtensions: readonly string[] | null) => string;\n/**\n * Determine if the file is a metadata route file entry\n * @param appDirRelativePath the relative file path to app/\n * @param pageExtensions the js extensions, such as ['js', 'jsx', 'ts', 'tsx']\n * @param strictlyMatchExtensions if it's true, match the file with page extension, otherwise match the file with default corresponding extension\n * @returns {boolean} if the file is a metadata route file\n */\nexport declare function isMetadataRouteFile(appDirRelativePath: string, pageExtensions: PageExtensions, strictlyMatchExtensions: boolean): boolean;\nexport declare function isStaticMetadataRoute(route: string): boolean;\n/**\n * Determine if a page or pathname is a metadata page.\n *\n * The input is a page or pathname, which can be with or without page suffix /foo/page or /foo.\n * But it will not contain the /route suffix.\n *\n * .e.g\n * /robots -> true\n * /sitemap -> true\n * /foo -> false\n */\nexport declare function isMetadataPage(page: string): boolean;\nexport declare function isMetadataRoute(route: string): boolean;\n"
        }
    ]
}