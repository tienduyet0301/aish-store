{
    "sourceFile": "node_modules/next/dist/lib/batcher.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892856376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { SchedulerFn } from './scheduler';\ntype CacheKeyFn<K, C extends string | number | null> = (key: K) => PromiseLike<C> | C;\ntype BatcherOptions<K, C extends string | number | null> = {\n    cacheKeyFn?: CacheKeyFn<K, C>;\n    schedulerFn?: SchedulerFn<void>;\n};\ntype WorkFn<V, C> = (key: C, resolve: (value: V | PromiseLike<V>) => void) => Promise<V>;\n/**\n * A wrapper for a function that will only allow one call to the function to\n * execute at a time.\n */\nexport declare class Batcher<K, V, C extends string | number | null> {\n    private readonly cacheKeyFn?;\n    /**\n     * A function that will be called to schedule the wrapped function to be\n     * executed. This defaults to a function that will execute the function\n     * immediately.\n     */\n    private readonly schedulerFn;\n    private readonly pending;\n    protected constructor(cacheKeyFn?: CacheKeyFn<K, C> | undefined, \n    /**\n     * A function that will be called to schedule the wrapped function to be\n     * executed. This defaults to a function that will execute the function\n     * immediately.\n     */\n    schedulerFn?: SchedulerFn<void>);\n    /**\n     * Creates a new instance of PendingWrapper. If the key extends a string or\n     * number, the key will be used as the cache key. If the key is an object, a\n     * cache key function must be provided.\n     */\n    static create<K extends string | number | null, V>(options?: BatcherOptions<K, K>): Batcher<K, V, K>;\n    static create<K, V, C extends string | number | null>(options: BatcherOptions<K, C> & Required<Pick<BatcherOptions<K, C>, 'cacheKeyFn'>>): Batcher<K, V, C>;\n    /**\n     * Wraps a function in a promise that will be resolved or rejected only once\n     * for a given key. This will allow multiple calls to the function to be\n     * made, but only one will be executed at a time. The result of the first\n     * call will be returned to all callers.\n     *\n     * @param key the key to use for the cache\n     * @param fn the function to wrap\n     * @returns a promise that resolves to the result of the function\n     */\n    batch(key: K, fn: WorkFn<V, C>): Promise<V>;\n}\nexport {};\n"
        }
    ]
}