{
    "sourceFile": "node_modules/next/dist/lib/load-custom-routes.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892860421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfig } from '../server/config';\nexport type RouteHas = {\n    type: string;\n    key: string;\n    value?: string;\n} | {\n    type: 'host';\n    key?: undefined;\n    value: string;\n};\nexport type Rewrite = {\n    source: string;\n    destination: string;\n    basePath?: false;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\nexport type Header = {\n    source: string;\n    basePath?: false;\n    locale?: false;\n    headers: Array<{\n        key: string;\n        value: string;\n    }>;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\nexport type Redirect = {\n    source: string;\n    destination: string;\n    basePath?: false;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n} & ({\n    statusCode?: never;\n    permanent: boolean;\n} | {\n    statusCode: number;\n    permanent?: never;\n});\nexport type Middleware = {\n    source: string;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\nexport declare function normalizeRouteRegex(regex: string): string;\nexport type RouteType = 'rewrite' | 'redirect' | 'header';\nexport declare function checkCustomRoutes(routes: Redirect[] | Header[] | Rewrite[] | Middleware[], type: RouteType | 'middleware'): void;\nexport interface CustomRoutes {\n    headers: Header[];\n    rewrites: {\n        fallback: Rewrite[];\n        afterFiles: Rewrite[];\n        beforeFiles: Rewrite[];\n    };\n    redirects: Redirect[];\n}\nexport default function loadCustomRoutes(config: NextConfig): Promise<CustomRoutes>;\n"
        }
    ]
}