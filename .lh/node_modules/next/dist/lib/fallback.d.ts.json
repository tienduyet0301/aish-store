{
    "sourceFile": "node_modules/next/dist/lib/fallback.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892857852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Describes the different fallback modes that a given page can have.\n */\nexport declare const enum FallbackMode {\n    /**\n     * A BLOCKING_STATIC_RENDER fallback will block the request until the page is\n     * generated. No fallback page will be rendered, and users will have to wait\n     * to render the page.\n     */\n    BLOCKING_STATIC_RENDER = \"BLOCKING_STATIC_RENDER\",\n    /**\n     * When set to PRERENDER, a fallback page will be sent to users in place of\n     * forcing them to wait for the page to be generated. This allows the user to\n     * see a rendered page earlier.\n     */\n    PRERENDER = \"PRERENDER\",\n    /**\n     * When set to NOT_FOUND, pages that are not already prerendered will result\n     * in a not found response.\n     */\n    NOT_FOUND = \"NOT_FOUND\"\n}\n/**\n * The fallback value returned from the `getStaticPaths` function.\n */\nexport type GetStaticPathsFallback = boolean | 'blocking';\n/**\n * Parses the fallback field from the prerender manifest.\n *\n * @param fallbackField The fallback field from the prerender manifest.\n * @returns The fallback mode.\n */\nexport declare function parseFallbackField(fallbackField: string | boolean | null | undefined): FallbackMode | undefined;\nexport declare function fallbackModeToFallbackField(fallback: FallbackMode, page: string | undefined): string | false | null;\n/**\n * Parses the fallback from the static paths result.\n *\n * @param result The result from the static paths function.\n * @returns The fallback mode.\n */\nexport declare function parseStaticPathsResult(result: GetStaticPathsFallback): FallbackMode;\n"
        }
    ]
}