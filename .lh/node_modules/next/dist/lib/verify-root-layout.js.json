{
    "sourceFile": "node_modules/next/dist/lib/verify-root-layout.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892865198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"verifyRootLayout\", {\n    enumerable: true,\n    get: function() {\n        return verifyRootLayout;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../build/output/log\"));\nconst _fs = require(\"fs\");\nconst _picocolors = require(\"./picocolors\");\nconst _constants = require(\"./constants\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst globOrig = require('next/dist/compiled/glob');\nconst glob = (cwd, pattern)=>{\n    return new Promise((resolve, reject)=>{\n        globOrig(pattern, {\n            cwd\n        }, (err, files)=>{\n            if (err) {\n                return reject(err);\n            }\n            resolve(files);\n        });\n    });\n};\nfunction getRootLayout(isTs) {\n    if (isTs) {\n        return `export const metadata = {\n  title: 'Next.js',\n  description: 'Generated by Next.js',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n`;\n    }\n    return `export const metadata = {\n  title: 'Next.js',\n  description: 'Generated by Next.js',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n`;\n}\nasync function verifyRootLayout({ dir, appDir, tsconfigPath, pagePath, pageExtensions }) {\n    let rootLayoutPath;\n    try {\n        const layoutFiles = await glob(appDir, `**/layout.{${pageExtensions.join(',')}}`);\n        const isFileUnderAppDir = pagePath.startsWith(`${_constants.APP_DIR_ALIAS}/`);\n        const normalizedPagePath = pagePath.replace(`${_constants.APP_DIR_ALIAS}/`, '');\n        const pagePathSegments = normalizedPagePath.split('/');\n        // Find an available dir to place the layout file in, the layout file can't affect any other layout.\n        // Place the layout as close to app/ as possible.\n        let availableDir;\n        if (isFileUnderAppDir) {\n            if (layoutFiles.length === 0) {\n                // If there's no other layout file we can place the layout file in the app dir.\n                // However, if the page is within a route group directly under app (e.g. app/(routegroup)/page.js)\n                // prefer creating the root layout in that route group.\n                const firstSegmentValue = pagePathSegments[0];\n                availableDir = firstSegmentValue.startsWith('(') ? firstSegmentValue : '';\n            } else {\n                pagePathSegments.pop() // remove the page from segments\n                ;\n                let currentSegments = [];\n                for (const segment of pagePathSegments){\n                    currentSegments.push(segment);\n                    // Find the dir closest to app/ where a layout can be created without affecting other layouts.\n                    if (!layoutFiles.some((file)=>file.startsWith(currentSegments.join('/')))) {\n                        availableDir = currentSegments.join('/');\n                        break;\n                    }\n                }\n            }\n        } else {\n            availableDir = '';\n        }\n        if (typeof availableDir === 'string') {\n            const resolvedTsConfigPath = _path.default.join(dir, tsconfigPath);\n            const hasTsConfig = await _fs.promises.access(resolvedTsConfigPath).then(()=>true, ()=>false);\n            rootLayoutPath = _path.default.join(appDir, availableDir, `layout.${hasTsConfig ? 'tsx' : 'js'}`);\n            await _fs.promises.writeFile(rootLayoutPath, getRootLayout(hasTsConfig));\n            _log.warn(`Your page ${(0, _picocolors.bold)(`app/${normalizedPagePath}`)} did not have a root layout. We created ${(0, _picocolors.bold)(`app${rootLayoutPath.replace(appDir, '')}`)} for you.`);\n            // Created root layout\n            return [\n                true,\n                rootLayoutPath\n            ];\n        }\n    } catch (e) {\n        console.error(e);\n    }\n    // Didn't create root layout\n    return [\n        false,\n        rootLayoutPath\n    ];\n}\n\n//# sourceMappingURL=verify-root-layout.js.map"
        }
    ]
}