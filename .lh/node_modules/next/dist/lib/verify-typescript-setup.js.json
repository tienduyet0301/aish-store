{
    "sourceFile": "node_modules/next/dist/lib/verify-typescript-setup.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892865287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"verifyTypeScriptSetup\", {\n    enumerable: true,\n    get: function() {\n        return verifyTypeScriptSetup;\n    }\n});\nconst _picocolors = require(\"./picocolors\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _hasnecessarydependencies = require(\"./has-necessary-dependencies\");\nconst _semver = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/semver\"));\nconst _compileerror = require(\"./compile-error\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../build/output/log\"));\nconst _getTypeScriptIntent = require(\"./typescript/getTypeScriptIntent\");\nconst _writeAppTypeDeclarations = require(\"./typescript/writeAppTypeDeclarations\");\nconst _writeConfigurationDefaults = require(\"./typescript/writeConfigurationDefaults\");\nconst _installdependencies = require(\"./install-dependencies\");\nconst _ciinfo = require(\"../server/ci-info\");\nconst _missingDependencyError = require(\"./typescript/missingDependencyError\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst requiredPackages = [\n    {\n        file: 'typescript/lib/typescript.js',\n        pkg: 'typescript',\n        exportsRestrict: true\n    },\n    {\n        file: '@types/react/index.d.ts',\n        pkg: '@types/react',\n        exportsRestrict: true\n    },\n    {\n        file: '@types/node/index.d.ts',\n        pkg: '@types/node',\n        exportsRestrict: true\n    }\n];\nasync function verifyTypeScriptSetup({ dir, distDir, cacheDir, intentDirs, tsconfigPath, typeCheckPreflight, disableStaticImages, hasAppDir, hasPagesDir }) {\n    const resolvedTsConfigPath = _path.default.join(dir, tsconfigPath);\n    try {\n        var _deps_missing;\n        // Check if the project uses TypeScript:\n        const intent = await (0, _getTypeScriptIntent.getTypeScriptIntent)(dir, intentDirs, tsconfigPath);\n        if (!intent) {\n            return {\n                version: null\n            };\n        }\n        // Ensure TypeScript and necessary `@types/*` are installed:\n        let deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(dir, requiredPackages);\n        if (((_deps_missing = deps.missing) == null ? void 0 : _deps_missing.length) > 0) {\n            if (_ciinfo.isCI) {\n                // we don't attempt auto install in CI to avoid side-effects\n                // and instead log the error for installing needed packages\n                (0, _missingDependencyError.missingDepsError)(dir, deps.missing);\n            }\n            console.log((0, _picocolors.bold)((0, _picocolors.yellow)(`It looks like you're trying to use TypeScript but do not have the required package(s) installed.`)) + '\\n' + 'Installing dependencies' + '\\n\\n' + (0, _picocolors.bold)('If you are not trying to use TypeScript, please remove the ' + (0, _picocolors.cyan)('tsconfig.json') + ' file from your package root (and any TypeScript files in your app and pages directories).') + '\\n');\n            await (0, _installdependencies.installDependencies)(dir, deps.missing, true).catch((err)=>{\n                if (err && typeof err === 'object' && 'command' in err) {\n                    console.error(`Failed to install required TypeScript dependencies, please install them manually to continue:\\n` + err.command + '\\n');\n                }\n                throw err;\n            });\n            deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(dir, requiredPackages);\n        }\n        // Load TypeScript after we're sure it exists:\n        const tsPath = deps.resolved.get('typescript');\n        const ts = await Promise.resolve(require(tsPath));\n        if (_semver.default.lt(ts.version, '4.5.2')) {\n            _log.warn(`Minimum recommended TypeScript version is v4.5.2, older versions can potentially be incompatible with Next.js. Detected: ${ts.version}`);\n        }\n        // Reconfigure (or create) the user's `tsconfig.json` for them:\n        await (0, _writeConfigurationDefaults.writeConfigurationDefaults)(ts, resolvedTsConfigPath, intent.firstTimeSetup, hasAppDir, distDir, hasPagesDir);\n        // Write out the necessary `next-env.d.ts` file to correctly register\n        // Next.js' types:\n        await (0, _writeAppTypeDeclarations.writeAppTypeDeclarations)({\n            baseDir: dir,\n            imageImportsEnabled: !disableStaticImages,\n            hasPagesDir,\n            hasAppDir\n        });\n        let result;\n        if (typeCheckPreflight) {\n            const { runTypeCheck } = require('./typescript/runTypeCheck');\n            // Verify the project passes type-checking before we go to webpack phase:\n            result = await runTypeCheck(ts, dir, distDir, resolvedTsConfigPath, cacheDir, hasAppDir);\n        }\n        return {\n            result,\n            version: ts.version\n        };\n    } catch (err) {\n        // These are special errors that should not show a stack trace:\n        if (err instanceof _compileerror.CompileError) {\n            console.error((0, _picocolors.red)('Failed to compile.\\n'));\n            console.error(err.message);\n            process.exit(1);\n        }\n        /**\n     * verifyTypeScriptSetup can be either invoked directly in the main thread (during next dev / next lint)\n     * or run in a worker (during next build). In the latter case, we need to print the error message, as the\n     * parent process will only receive an `Jest worker encountered 1 child process exceptions, exceeding retry limit`.\n     */ // we are in a worker, print the error message and exit the process\n        if (process.env.IS_NEXT_WORKER) {\n            if (err instanceof Error) {\n                console.error(err.message);\n            } else {\n                console.error(err);\n            }\n            process.exit(1);\n        }\n        // we are in the main thread, throw the error and it will be handled by the caller\n        throw err;\n    }\n}\n\n//# sourceMappingURL=verify-typescript-setup.js.map"
        }
    ]
}