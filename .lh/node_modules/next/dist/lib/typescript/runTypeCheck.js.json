{
    "sourceFile": "node_modules/next/dist/lib/typescript/runTypeCheck.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892864827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"runTypeCheck\", {\n    enumerable: true,\n    get: function() {\n        return runTypeCheck;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _diagnosticFormatter = require(\"./diagnosticFormatter\");\nconst _getTypeScriptConfiguration = require(\"./getTypeScriptConfiguration\");\nconst _writeConfigurationDefaults = require(\"./writeConfigurationDefaults\");\nconst _compileerror = require(\"../compile-error\");\nconst _log = require(\"../../build/output/log\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nasync function runTypeCheck(ts, baseDir, distDir, tsConfigPath, cacheDir, isAppDirEnabled) {\n    const effectiveConfiguration = await (0, _getTypeScriptConfiguration.getTypeScriptConfiguration)(ts, tsConfigPath);\n    if (effectiveConfiguration.fileNames.length < 1) {\n        return {\n            hasWarnings: false,\n            inputFilesCount: 0,\n            totalFilesCount: 0,\n            incremental: false\n        };\n    }\n    const requiredConfig = (0, _writeConfigurationDefaults.getRequiredConfiguration)(ts);\n    const options = {\n        ...requiredConfig,\n        ...effectiveConfiguration.options,\n        declarationMap: false,\n        emitDeclarationOnly: false,\n        noEmit: true\n    };\n    let program;\n    let incremental = false;\n    if ((options.incremental || options.composite) && cacheDir) {\n        if (options.composite) {\n            (0, _log.warn)('TypeScript project references are not fully supported. Attempting to build in incremental mode.');\n        }\n        incremental = true;\n        program = ts.createIncrementalProgram({\n            rootNames: effectiveConfiguration.fileNames,\n            options: {\n                ...options,\n                composite: false,\n                incremental: true,\n                tsBuildInfoFile: _path.default.join(cacheDir, '.tsbuildinfo')\n            }\n        });\n    } else {\n        program = ts.createProgram(effectiveConfiguration.fileNames, options);\n    }\n    const result = program.emit();\n    const ignoreRegex = [\n        // matches **/__(tests|mocks)__/**\n        /[\\\\/]__(?:tests|mocks)__[\\\\/]/,\n        // matches **/*.(spec|test).*\n        /(?<=[\\\\/.])(?:spec|test)\\.[^\\\\/]+$/\n    ];\n    const regexIgnoredFile = new RegExp(ignoreRegex.map((r)=>r.source).join('|'));\n    const allDiagnostics = ts.getPreEmitDiagnostics(program).concat(result.diagnostics).filter((d)=>!(d.file && regexIgnoredFile.test(d.file.fileName)));\n    const firstError = allDiagnostics.find((d)=>d.category === _diagnosticFormatter.DiagnosticCategory.Error && Boolean(d.file)) ?? allDiagnostics.find((d)=>d.category === _diagnosticFormatter.DiagnosticCategory.Error);\n    // In test mode, we want to check all diagnostics, not just the first one.\n    if (process.env.__NEXT_TEST_MODE) {\n        if (firstError) {\n            const allErrors = allDiagnostics.filter((d)=>d.category === _diagnosticFormatter.DiagnosticCategory.Error).map((d)=>'[Test Mode] ' + (0, _diagnosticFormatter.getFormattedDiagnostic)(ts, baseDir, distDir, d, isAppDirEnabled));\n            console.error('\\n\\n===== TS errors =====\\n\\n' + allErrors.join('\\n\\n') + '\\n\\n===== TS errors =====\\n\\n');\n            // Make sure all stdout is flushed before we exit.\n            await new Promise((resolve)=>setTimeout(resolve, 100));\n        }\n    }\n    if (firstError) {\n        throw Object.defineProperty(new _compileerror.CompileError((0, _diagnosticFormatter.getFormattedDiagnostic)(ts, baseDir, distDir, firstError, isAppDirEnabled)), \"__NEXT_ERROR_CODE\", {\n            value: \"E394\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const warnings = allDiagnostics.filter((d)=>d.category === _diagnosticFormatter.DiagnosticCategory.Warning).map((d)=>(0, _diagnosticFormatter.getFormattedDiagnostic)(ts, baseDir, distDir, d, isAppDirEnabled));\n    return {\n        hasWarnings: true,\n        warnings,\n        inputFilesCount: effectiveConfiguration.fileNames.length,\n        totalFilesCount: program.getSourceFiles().length,\n        incremental\n    };\n}\n\n//# sourceMappingURL=runTypeCheck.js.map"
        }
    ]
}