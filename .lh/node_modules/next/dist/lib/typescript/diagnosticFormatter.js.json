{
    "sourceFile": "node_modules/next/dist/lib/typescript/diagnosticFormatter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892864523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    DiagnosticCategory: null,\n    getFormattedDiagnostic: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DiagnosticCategory: function() {\n        return DiagnosticCategory;\n    },\n    getFormattedDiagnostic: function() {\n        return getFormattedDiagnostic;\n    }\n});\nconst _picocolors = require(\"../picocolors\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nvar DiagnosticCategory = /*#__PURE__*/ function(DiagnosticCategory) {\n    DiagnosticCategory[DiagnosticCategory[\"Warning\"] = 0] = \"Warning\";\n    DiagnosticCategory[DiagnosticCategory[\"Error\"] = 1] = \"Error\";\n    DiagnosticCategory[DiagnosticCategory[\"Suggestion\"] = 2] = \"Suggestion\";\n    DiagnosticCategory[DiagnosticCategory[\"Message\"] = 3] = \"Message\";\n    return DiagnosticCategory;\n}({});\nfunction getFormattedLinkDiagnosticMessageText(diagnostic) {\n    const message = diagnostic.messageText;\n    if (typeof message === 'string' && diagnostic.code === 2322) {\n        const match = message.match(/Type '\"(.+)\"' is not assignable to type 'RouteImpl<.+> \\| UrlObject'\\./) || message.match(/Type '\"(.+)\"' is not assignable to type 'UrlObject \\| RouteImpl<.+>'\\./);\n        if (match) {\n            const [, href] = match;\n            return `\"${(0, _picocolors.bold)(href)}\" is not an existing route. If it is intentional, please type it explicitly with \\`as Route\\`.`;\n        } else if (message === \"Type 'string' is not assignable to type 'UrlObject'.\") {\n            var _diagnostic_relatedInformation_, _diagnostic_relatedInformation;\n            const relatedMessage = (_diagnostic_relatedInformation = diagnostic.relatedInformation) == null ? void 0 : (_diagnostic_relatedInformation_ = _diagnostic_relatedInformation[0]) == null ? void 0 : _diagnostic_relatedInformation_.messageText;\n            if (typeof relatedMessage === 'string' && relatedMessage.match(/The expected type comes from property 'href' which is declared here on type 'IntrinsicAttributes & /)) {\n                return `Invalid \\`href\\` property of \\`Link\\`: the route does not exist. If it is intentional, please type it explicitly with \\`as Route\\`.`;\n            }\n        }\n    } else if (typeof message === 'string' && diagnostic.code === 2820) {\n        const match = message.match(/Type '\"(.+)\"' is not assignable to type 'RouteImpl<.+> \\| UrlObject'\\. Did you mean '\"(.+)\"'?/) || message.match(/Type '\"(.+)\"' is not assignable to type 'UrlObject \\| RouteImpl<.+>'\\. Did you mean '\"(.+)\"'?/);\n        if (match) {\n            const [, href, suggestion] = match;\n            return `\"${(0, _picocolors.bold)(href)}\" is not an existing route. Did you mean \"${(0, _picocolors.bold)(suggestion)}\" instead? If it is intentional, please type it explicitly with \\`as Route\\`.`;\n        }\n    }\n}\nfunction getFormattedLayoutAndPageDiagnosticMessageText(relativeSourceFilepath, diagnostic) {\n    const message = typeof diagnostic.messageText === 'string' ? diagnostic : diagnostic.messageText;\n    const messageText = message.messageText;\n    if (typeof messageText === 'string') {\n        const type = /page\\.[^.]+$/.test(relativeSourceFilepath) ? 'Page' : /route\\.[^.]+$/.test(relativeSourceFilepath) ? 'Route' : 'Layout';\n        // Reference of error codes:\n        // https://github.com/Microsoft/TypeScript/blob/main/src/compiler/diagnosticMessages.json\n        switch(message.code){\n            case 2344:\n                const filepathAndType = messageText.match(/typeof import\\(\"(.+)\"\\)/);\n                if (filepathAndType) {\n                    let main = `${type} \"${(0, _picocolors.bold)(relativeSourceFilepath)}\" does not match the required types of a Next.js ${type}.`;\n                    function processNext(indent, next) {\n                        if (!next) return;\n                        for (const item of next){\n                            switch(item.code){\n                                case 2200:\n                                    const mismatchedField = item.messageText.match(/The types of '(.+)'/);\n                                    if (mismatchedField) {\n                                        main += '\\n' + ' '.repeat(indent * 2);\n                                        main += `\"${(0, _picocolors.bold)(mismatchedField[1])}\" has the wrong type:`;\n                                    }\n                                    break;\n                                case 2322:\n                                    const types = item.messageText.match(/Type '(.+)' is not assignable to type '(.+)'./);\n                                    if (types) {\n                                        main += '\\n' + ' '.repeat(indent * 2);\n                                        if (types[2] === 'PageComponent' || types[2] === 'LayoutComponent') {\n                                            main += `The exported ${type} component isn't correctly typed.`;\n                                        } else {\n                                            main += `Expected \"${(0, _picocolors.bold)(types[2].replace('\"__invalid_negative_number__\"', 'number (>= 0)'))}\", got \"${(0, _picocolors.bold)(types[1])}\".`;\n                                        }\n                                    }\n                                    break;\n                                case 2326:\n                                    const invalidConfig = item.messageText.match(/Types of property '(.+)' are incompatible\\./);\n                                    main += '\\n' + ' '.repeat(indent * 2);\n                                    main += `Invalid configuration${invalidConfig ? ` \"${(0, _picocolors.bold)(invalidConfig[1])}\"` : ''}:`;\n                                    break;\n                                case 2530:\n                                    const invalidField = item.messageText.match(/Property '(.+)' is incompatible with index signature/);\n                                    if (invalidField) {\n                                        main += '\\n' + ' '.repeat(indent * 2);\n                                        main += `\"${(0, _picocolors.bold)(invalidField[1])}\" is not a valid ${type} export field.`;\n                                    }\n                                    return;\n                                case 2739:\n                                    const invalidProp = item.messageText.match(/Type '(.+)' is missing the following properties from type '(.+)'/);\n                                    if (invalidProp) {\n                                        if (invalidProp[1] === 'LayoutProps' || invalidProp[1] === 'PageProps') {\n                                            main += '\\n' + ' '.repeat(indent * 2);\n                                            main += `Prop \"${invalidProp[2]}\" is incompatible with the ${type}.`;\n                                        }\n                                    }\n                                    break;\n                                case 2559:\n                                    const invalid = item.messageText.match(/Type '(.+)' has/);\n                                    if (invalid) {\n                                        main += '\\n' + ' '.repeat(indent * 2);\n                                        main += `Type \"${(0, _picocolors.bold)(invalid[1])}\" isn't allowed.`;\n                                    }\n                                    break;\n                                case 2741:\n                                    const incompatPageProp = item.messageText.match(/Property '(.+)' is missing in type 'PageProps'/);\n                                    if (incompatPageProp) {\n                                        main += '\\n' + ' '.repeat(indent * 2);\n                                        main += `Prop \"${(0, _picocolors.bold)(incompatPageProp[1])}\" will never be passed. Remove it from the component's props.`;\n                                    } else {\n                                        const extraLayoutProp = item.messageText.match(/Property '(.+)' is missing in type 'LayoutProps' but required in type '(.+)'/);\n                                        if (extraLayoutProp) {\n                                            main += '\\n' + ' '.repeat(indent * 2);\n                                            main += `Prop \"${(0, _picocolors.bold)(extraLayoutProp[1])}\" is not valid for this Layout, remove it to fix.`;\n                                        }\n                                    }\n                                    break;\n                                default:\n                            }\n                            processNext(indent + 1, item.next);\n                        }\n                    }\n                    if ('next' in message) processNext(1, message.next);\n                    return main;\n                }\n                const invalidExportFnArg = messageText.match(/Type 'OmitWithTag<(.+), .+, \"(.+)\">' does not satisfy the constraint/);\n                if (invalidExportFnArg) {\n                    const main = `${type} \"${(0, _picocolors.bold)(relativeSourceFilepath)}\" has an invalid \"${(0, _picocolors.bold)(invalidExportFnArg[2])}\" export:\\n  Type \"${(0, _picocolors.bold)(invalidExportFnArg[1])}\" is not valid.`;\n                    return main;\n                }\n                function processNextItems(indent, next) {\n                    if (!next) return '';\n                    let result = '';\n                    for (const item of next){\n                        switch(item.code){\n                            case 2322:\n                                const types = item.messageText.match(/Type '(.+)' is not assignable to type '(.+)'./);\n                                if (types) {\n                                    result += '\\n' + ' '.repeat(indent * 2);\n                                    result += `Expected \"${(0, _picocolors.bold)(types[2])}\", got \"${(0, _picocolors.bold)(types[1])}\".`;\n                                }\n                                break;\n                            default:\n                        }\n                        result += processNextItems(indent + 1, item.next);\n                    }\n                    return result;\n                }\n                const invalidParamFn = messageText.match(/Type '{ __tag__: (.+); __param_position__: \"(.*)\"; __param_type__: (.+); }' does not satisfy/);\n                if (invalidParamFn) {\n                    let main = `${type} \"${(0, _picocolors.bold)(relativeSourceFilepath)}\" has an invalid ${invalidParamFn[1]} export:\\n  Type \"${(0, _picocolors.bold)(invalidParamFn[3])}\" is not a valid type for the function's ${invalidParamFn[2]} argument.`;\n                    if ('next' in message) main += processNextItems(1, message.next);\n                    return main;\n                }\n                const invalidExportFnReturn = messageText.match(/Type '{ __tag__: \"(.+)\"; __return_type__: (.+); }' does not satisfy/);\n                if (invalidExportFnReturn) {\n                    let main = `${type} \"${(0, _picocolors.bold)(relativeSourceFilepath)}\" has an invalid export:\\n  \"${(0, _picocolors.bold)(invalidExportFnReturn[2])}\" is not a valid ${invalidExportFnReturn[1]} return type:`;\n                    if ('next' in message) main += processNextItems(1, message.next);\n                    return main;\n                }\n                break;\n            case 2345:\n                const filepathAndInvalidExport = messageText.match(/'typeof import\\(\"(.+)\"\\)'.+Impossible<\"(.+)\">/);\n                if (filepathAndInvalidExport) {\n                    const main = `${type} \"${(0, _picocolors.bold)(relativeSourceFilepath)}\" exports an invalid \"${(0, _picocolors.bold)(filepathAndInvalidExport[2])}\" field. ${type} should only export a default React component and configuration options. Learn more: https://nextjs.org/docs/messages/invalid-segment-export`;\n                    return main;\n                }\n                break;\n            case 2559:\n                const invalid = messageText.match(/Type '(.+)' has no properties in common with type '(.+)'/);\n                if (invalid) {\n                    const main = `${type} \"${(0, _picocolors.bold)(relativeSourceFilepath)}\" contains an invalid type \"${(0, _picocolors.bold)(invalid[1])}\" as ${invalid[2]}.`;\n                    return main;\n                }\n                break;\n            default:\n        }\n    }\n}\nfunction getAppEntrySourceFilePath(baseDir, diagnostic) {\n    var _diagnostic_file_text_trim_match, _diagnostic_file;\n    const sourceFilepath = ((_diagnostic_file = diagnostic.file) == null ? void 0 : (_diagnostic_file_text_trim_match = _diagnostic_file.text.trim().match(/^\\/\\/ File: (.+)\\n/)) == null ? void 0 : _diagnostic_file_text_trim_match[1]) || '';\n    return _path.default.relative(baseDir, sourceFilepath);\n}\nfunction getFormattedDiagnostic(ts, baseDir, distDir, diagnostic, isAppDirEnabled) {\n    var _diagnostic_file;\n    // If the error comes from .next/types/, we handle it specially.\n    const isLayoutOrPageError = isAppDirEnabled && ((_diagnostic_file = diagnostic.file) == null ? void 0 : _diagnostic_file.fileName.startsWith(_path.default.join(baseDir, distDir, 'types')));\n    let message = '';\n    const appPath = isLayoutOrPageError ? getAppEntrySourceFilePath(baseDir, diagnostic) : null;\n    const linkReason = getFormattedLinkDiagnosticMessageText(diagnostic);\n    const appReason = !linkReason && isLayoutOrPageError && appPath ? getFormattedLayoutAndPageDiagnosticMessageText(appPath, diagnostic) : null;\n    const reason = linkReason || appReason || ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n    const category = diagnostic.category;\n    switch(category){\n        // Warning\n        case 0:\n            {\n                message += (0, _picocolors.yellow)((0, _picocolors.bold)('Type warning')) + ': ';\n                break;\n            }\n        // Error\n        case 1:\n            {\n                message += (0, _picocolors.red)((0, _picocolors.bold)('Type error')) + ': ';\n                break;\n            }\n        // 2 = Suggestion, 3 = Message\n        case 2:\n        case 3:\n        default:\n            {\n                message += (0, _picocolors.cyan)((0, _picocolors.bold)(category === 2 ? 'Suggestion' : 'Info')) + ': ';\n                break;\n            }\n    }\n    message += reason + '\\n';\n    if (!isLayoutOrPageError && diagnostic.file) {\n        const { codeFrameColumns } = require('next/dist/compiled/babel/code-frame');\n        const pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n        const line = pos.line + 1;\n        const character = pos.character + 1;\n        let fileName = _path.default.posix.normalize(_path.default.relative(baseDir, diagnostic.file.fileName).replace(/\\\\/g, '/'));\n        if (!fileName.startsWith('.')) {\n            fileName = './' + fileName;\n        }\n        message = (0, _picocolors.cyan)(fileName) + ':' + (0, _picocolors.yellow)(line.toString()) + ':' + (0, _picocolors.yellow)(character.toString()) + '\\n' + message;\n        message += '\\n' + codeFrameColumns(diagnostic.file.getFullText(diagnostic.file.getSourceFile()), {\n            start: {\n                line: line,\n                column: character\n            }\n        }, {\n            forceColor: true\n        });\n    } else if (isLayoutOrPageError && appPath) {\n        message = (0, _picocolors.cyan)(appPath) + '\\n' + message;\n    }\n    return message;\n}\n\n//# sourceMappingURL=diagnosticFormatter.js.map"
        }
    ]
}