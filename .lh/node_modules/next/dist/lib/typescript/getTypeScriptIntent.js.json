{
    "sourceFile": "node_modules/next/dist/lib/typescript/getTypeScriptIntent.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892864685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getTypeScriptIntent\", {\n    enumerable: true,\n    get: function() {\n        return getTypeScriptIntent;\n    }\n});\nconst _fs = require(\"fs\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _recursivereaddir = require(\"../recursive-readdir\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nasync function getTypeScriptIntent(baseDir, intentDirs, tsconfigPath) {\n    const resolvedTsConfigPath = _path.default.join(baseDir, tsconfigPath);\n    // The integration turns on if we find a `tsconfig.json` in the user's\n    // project.\n    const hasTypeScriptConfiguration = (0, _fs.existsSync)(resolvedTsConfigPath);\n    if (hasTypeScriptConfiguration) {\n        const content = await _fs.promises.readFile(resolvedTsConfigPath, {\n            encoding: 'utf8'\n        }).then((txt)=>txt.trim(), ()=>null);\n        return {\n            firstTimeSetup: content === '' || content === '{}'\n        };\n    }\n    // Next.js also offers a friendly setup mode that bootstraps a TypeScript\n    // project for the user when we detect TypeScript files. So, we need to check\n    // the `pages/` directory for a TypeScript file.\n    // Checking all directories is too slow, so this is a happy medium.\n    const tsFilesRegex = /.*\\.(ts|tsx)$/;\n    const excludedRegex = /(node_modules|.*\\.d\\.ts$)/;\n    for (const dir of intentDirs){\n        const typescriptFiles = await (0, _recursivereaddir.recursiveReadDir)(dir, {\n            pathnameFilter: (name)=>tsFilesRegex.test(name),\n            ignoreFilter: (name)=>excludedRegex.test(name)\n        });\n        if (typescriptFiles.length) {\n            return {\n                firstTimeSetup: true\n            };\n        }\n    }\n    return false;\n}\n\n//# sourceMappingURL=getTypeScriptIntent.js.map"
        }
    ]
}