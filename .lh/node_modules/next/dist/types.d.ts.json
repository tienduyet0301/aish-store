{
    "sourceFile": "node_modules/next/dist/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892912490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"node\" preserve=\"true\" />\n/// <reference types=\"react\" preserve=\"true\" />\n/// <reference types=\"react/experimental\" preserve=\"true\" />\n/// <reference types=\"react-dom\" preserve=\"true\" />\n/// <reference types=\"react-dom/experimental\" preserve=\"true\" />\nimport type { Agent as HttpAgent } from 'http';\nimport type { Agent as HttpsAgent } from 'https';\nimport type React from 'react';\nimport type { ParsedUrlQuery } from 'querystring';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type { NextPageContext, NextComponentType, NextApiResponse, NextApiRequest, NextApiHandler } from './shared/lib/utils';\nimport type { GetStaticPathsFallback } from './lib/fallback';\nimport type { NextApiRequestCookies } from './server/api-utils';\nimport next from './server/next';\nexport type ServerRuntime = 'nodejs' | 'experimental-edge' | 'edge' | undefined;\nexport { NextConfig } from './server/config';\nexport type { Metadata, MetadataRoute, ResolvedMetadata, ResolvingMetadata, Viewport, ResolvingViewport, ResolvedViewport, } from './lib/metadata/types/metadata-interface';\nexport type { Instrumentation } from './server/instrumentation/types';\n/**\n * Stub route type for typedRoutes before `next dev` or `next build` is run\n * @link https://nextjs.org/docs/app/api-reference/config/typescript#statically-typed-links\n * @example\n * ```ts\n * import type { Route } from 'next'\n * // ...\n * router.push(returnToPath as Route)\n * ```\n */\nexport type Route<RouteInferType = any> = string & {};\ndeclare module 'react' {\n    interface HtmlHTMLAttributes<T> extends React.HTMLAttributes<T> {\n        amp?: string;\n    }\n    interface ImgHTMLAttributes<T> {\n        fetchPriority?: 'high' | 'low' | 'auto' | undefined;\n    }\n}\nexport type Redirect = {\n    statusCode: 301 | 302 | 303 | 307 | 308;\n    destination: string;\n    basePath?: false;\n} | {\n    permanent: boolean;\n    destination: string;\n    basePath?: false;\n};\n/**\n * `NextPage` type, use it as a guide to create `pages`.\n */\nexport type NextPage<Props = {}, InitialProps = Props> = NextComponentType<NextPageContext, InitialProps, Props>;\nexport type FileSizeSuffix = `${'k' | 'K' | 'm' | 'M' | 'g' | 'G' | 't' | 'T' | 'p' | 'P'}${'b' | 'B'}`;\nexport type SizeLimit = number | `${number}${FileSizeSuffix}`;\nexport type ResponseLimit = SizeLimit | boolean;\n/**\n * `Config` type, use it for export const config\n */\nexport type PageConfig = {\n    amp?: boolean | 'hybrid';\n    api?: {\n        /**\n         * Configures or disables body size limit warning. Can take a number or\n         * any string format supported by `bytes`, for example `1000`, `'500kb'` or\n         * `'3mb'`.\n         */\n        responseLimit?: ResponseLimit;\n        /**\n         * The byte limit of the body. This is the number of bytes or any string\n         * format supported by `bytes`, for example `1000`, `'500kb'` or `'3mb'`.\n         */\n        bodyParser?: {\n            sizeLimit?: SizeLimit;\n        } | false;\n        /**\n         * Flag to disable warning \"API page resolved\n         * without sending a response\", due to explicitly\n         * using an external API resolver, like express\n         */\n        externalResolver?: true;\n    };\n    env?: Array<string>;\n    /**\n     * Configures the longest time in seconds a serverless function can process an HTTP\n     * request before responding.\n     */\n    maxDuration?: number;\n    runtime?: ServerRuntime;\n    unstable_runtimeJS?: false;\n    unstable_JsPreload?: false;\n};\nexport type { NextPageContext, NextComponentType, NextApiResponse, NextApiRequest, NextApiHandler, };\nexport type PreviewData = string | false | object | undefined;\n/**\n * Context object passed into `getStaticProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-props#context-parameter\n */\nexport type GetStaticPropsContext<Params extends ParsedUrlQuery = ParsedUrlQuery, Preview extends PreviewData = PreviewData> = {\n    params?: Params;\n    preview?: boolean;\n    previewData?: Preview;\n    draftMode?: boolean;\n    locale?: string;\n    locales?: string[];\n    defaultLocale?: string;\n    revalidateReason?: 'on-demand' | 'build' | 'stale';\n};\n/**\n * The return type of `getStaticProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-props#getstaticprops-return-values\n */\nexport type GetStaticPropsResult<Props> = {\n    props: Props;\n    revalidate?: number | boolean;\n} | {\n    redirect: Redirect;\n    revalidate?: number | boolean;\n} | {\n    notFound: true;\n    revalidate?: number | boolean;\n};\n/**\n * Static Site Generation feature for Next.js.\n * @link https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props\n * @link https://nextjs.org/docs/pages/api-reference/config/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getStaticProps: GetStaticProps = async (context) => {\n *   // ...\n * }\n * ```\n */\nexport type GetStaticProps<Props extends {\n    [key: string]: any;\n} = {\n    [key: string]: any;\n}, Params extends ParsedUrlQuery = ParsedUrlQuery, Preview extends PreviewData = PreviewData> = (context: GetStaticPropsContext<Params, Preview>) => Promise<GetStaticPropsResult<Props>> | GetStaticPropsResult<Props>;\nexport type InferGetStaticPropsType<T extends (args: any) => any> = Extract<Awaited<ReturnType<T>>, {\n    props: any;\n}>['props'];\nexport type GetStaticPathsContext = {\n    locales?: string[];\n    defaultLocale?: string;\n};\n/**\n * The return type of `getStaticPaths`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#getstaticpaths-return-values\n */\nexport type GetStaticPathsResult<Params extends ParsedUrlQuery = ParsedUrlQuery> = {\n    paths: Array<string | {\n        params: Params;\n        locale?: string;\n    }>;\n    fallback: GetStaticPathsFallback;\n};\n/**\n * Define a list of paths to be statically generated if dynamic routes exist.\n * @link https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-paths\n * @link https://nextjs.org/docs/pages/api-reference/config/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getStaticPaths: GetStaticPaths = async () => {\n *  // ...\n * }\n * ```\n */\nexport type GetStaticPaths<Params extends ParsedUrlQuery = ParsedUrlQuery> = (context: GetStaticPathsContext) => Promise<GetStaticPathsResult<Params>> | GetStaticPathsResult<Params>;\n/**\n * Context object passed into `getServerSideProps`.\n * @link https://nextjs.org/docs/pages/api-reference/functions/get-server-side-props#context-parameter\n */\nexport type GetServerSidePropsContext<Params extends ParsedUrlQuery = ParsedUrlQuery, Preview extends PreviewData = PreviewData> = {\n    req: IncomingMessage & {\n        cookies: NextApiRequestCookies;\n    };\n    res: ServerResponse;\n    params?: Params;\n    query: ParsedUrlQuery;\n    preview?: boolean;\n    previewData?: Preview;\n    draftMode?: boolean;\n    resolvedUrl: string;\n    locale?: string;\n    locales?: string[];\n    defaultLocale?: string;\n};\n/**\n * The return type of `getServerSideProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props#getserversideprops-return-values\n */\nexport type GetServerSidePropsResult<Props> = {\n    props: Props | Promise<Props>;\n} | {\n    redirect: Redirect;\n} | {\n    notFound: true;\n};\n/**\n * Server-side Rendering feature for Next.js.\n * @link https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props\n * @link https://nextjs.org/docs/pages/api-reference/config/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getServerSideProps: GetServerSideProps = async (context) => {\n *  // ...\n * }\n */\nexport type GetServerSideProps<Props extends {\n    [key: string]: any;\n} = {\n    [key: string]: any;\n}, Params extends ParsedUrlQuery = ParsedUrlQuery, Preview extends PreviewData = PreviewData> = (context: GetServerSidePropsContext<Params, Preview>) => Promise<GetServerSidePropsResult<Props>>;\nexport type InferGetServerSidePropsType<T extends (args: any) => any> = Awaited<Extract<Awaited<ReturnType<T>>, {\n    props: any;\n}>['props']>;\ndeclare global {\n    interface Crypto {\n        readonly subtle: SubtleCrypto;\n        getRandomValues<T extends Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Float32Array | Float64Array | DataView | null>(array: T): T;\n        randomUUID(): string;\n    }\n    var __NEXT_HTTP_AGENT_OPTIONS: {\n        keepAlive?: boolean;\n    } | undefined;\n    var __NEXT_UNDICI_AGENT_SET: boolean;\n    var __NEXT_HTTP_AGENT: HttpAgent;\n    var __NEXT_HTTPS_AGENT: HttpsAgent;\n}\nexport default next;\n"
        }
    ]
}