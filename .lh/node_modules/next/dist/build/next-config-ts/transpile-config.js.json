{
    "sourceFile": "node_modules/next/dist/build/next-config-ts/transpile-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892657238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"transpileConfig\", {\n    enumerable: true,\n    get: function() {\n        return transpileConfig;\n    }\n});\nconst _nodepath = require(\"node:path\");\nconst _promises = require(\"node:fs/promises\");\nconst _requirehook = require(\"./require-hook\");\nconst _loadjsconfig = require(\"../load-jsconfig\");\nfunction resolveSWCOptions(cwd, compilerOptions) {\n    const resolvedBaseUrl = (0, _nodepath.join)(cwd, compilerOptions.baseUrl ?? '.');\n    return {\n        jsc: {\n            target: 'es5',\n            parser: {\n                syntax: 'typescript'\n            },\n            paths: compilerOptions.paths,\n            baseUrl: resolvedBaseUrl\n        },\n        module: {\n            type: 'commonjs'\n        },\n        isModule: 'unknown'\n    };\n}\nasync function lazilyGetTSConfig(cwd) {\n    let tsConfig;\n    try {\n        tsConfig = (0, _loadjsconfig.parseJsonFile)((0, _nodepath.join)(cwd, 'tsconfig.json'));\n    } catch (error) {\n        // ignore if tsconfig.json does not exist\n        if (error.code !== 'ENOENT') {\n            throw error;\n        }\n        tsConfig = {\n            compilerOptions: {}\n        };\n    }\n    return tsConfig;\n}\nasync function transpileConfig({ nextConfigPath, cwd }) {\n    let hasRequire = false;\n    try {\n        const { compilerOptions } = await lazilyGetTSConfig(cwd);\n        const swcOptions = resolveSWCOptions(cwd, compilerOptions);\n        const nextConfigString = await (0, _promises.readFile)(nextConfigPath, 'utf8');\n        // lazy require swc since it loads React before even setting NODE_ENV\n        // resulting loading Development React on Production\n        const { transform } = require('../swc');\n        const { code } = await transform(nextConfigString, swcOptions);\n        // register require hook only if require exists\n        if (code.includes('require(')) {\n            (0, _requirehook.registerHook)(swcOptions);\n            hasRequire = true;\n        }\n        // filename & extension don't matter here\n        return (0, _requirehook.requireFromString)(code, (0, _nodepath.join)(cwd, 'next.config.compiled.js'));\n    } catch (error) {\n        throw error;\n    } finally{\n        if (hasRequire) {\n            (0, _requirehook.deregisterHook)();\n        }\n    }\n}\n\n//# sourceMappingURL=transpile-config.js.map"
        }
    ]
}