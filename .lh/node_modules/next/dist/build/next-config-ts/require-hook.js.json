{
    "sourceFile": "node_modules/next/dist/build/next-config-ts/require-hook.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892657152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    deregisterHook: null,\n    registerHook: null,\n    requireFromString: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    deregisterHook: function() {\n        return deregisterHook;\n    },\n    registerHook: function() {\n        return registerHook;\n    },\n    requireFromString: function() {\n        return requireFromString;\n    }\n});\nconst _nodemodule = /*#__PURE__*/ _interop_require_default(require(\"node:module\"));\nconst _nodefs = require(\"node:fs\");\nconst _nodepath = require(\"node:path\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst oldJSHook = require.extensions['.js'];\nconst extensions = [\n    '.ts',\n    '.cts',\n    '.mts',\n    '.cjs',\n    '.mjs'\n];\nfunction registerHook(swcOptions) {\n    // lazy require swc since it loads React before even setting NODE_ENV\n    // resulting loading Development React on Production\n    const { transformSync } = require('../swc');\n    require.extensions['.js'] = function(mod, oldFilename) {\n        try {\n            return oldJSHook(mod, oldFilename);\n        } catch (error) {\n            if (error.code !== 'ERR_REQUIRE_ESM') {\n                throw error;\n            }\n            // calling oldJSHook throws ERR_REQUIRE_ESM, so run _compile manually\n            // TODO: investigate if we can remove readFileSync\n            const content = (0, _nodefs.readFileSync)(oldFilename, 'utf8');\n            const { code } = transformSync(content, swcOptions);\n            mod._compile(code, oldFilename);\n        }\n    };\n    for (const ext of extensions){\n        const oldHook = require.extensions[ext] ?? oldJSHook;\n        require.extensions[ext] = function(mod, oldFilename) {\n            const _compile = mod._compile;\n            mod._compile = function(code, filename) {\n                const swc = transformSync(code, swcOptions);\n                return _compile.call(this, swc.code, filename);\n            };\n            return oldHook(mod, oldFilename);\n        };\n    }\n}\nfunction deregisterHook() {\n    require.extensions['.js'] = oldJSHook;\n    extensions.forEach((ext)=>delete require.extensions[ext]);\n}\nfunction requireFromString(code, filename) {\n    const paths = _nodemodule.default._nodeModulePaths((0, _nodepath.dirname)(filename));\n    const m = new _nodemodule.default(filename, module.parent);\n    m.paths = paths;\n    m._compile(code, filename);\n    return m.exports;\n}\n\n//# sourceMappingURL=require-hook.js.map"
        }
    ]
}