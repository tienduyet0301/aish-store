{
    "sourceFile": "node_modules/next/dist/build/jest/jest.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892656185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, /**\n * @example\n * ```ts\n * // Usage in jest.config.js\n * const nextJest = require('next/jest');\n *\n * // Optionally provide path to Next.js app which will enable loading next.config.js and .env files\n * const createJestConfig = nextJest({ dir })\n *\n * // Any custom config you want to pass to Jest\n * const customJestConfig = {\n *     setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n * }\n *\n * // createJestConfig is exported in this way to ensure that next/jest can load the Next.js config which is async\n * module.exports = createJestConfig(customJestConfig)\n * ```\n *\n * Read more: [Next.js Docs: Setting up Jest with Next.js](https://nextjs.org/docs/app/building-your-application/testing/jest)\n */ \"default\", {\n    enumerable: true,\n    get: function() {\n        return nextJest;\n    }\n});\nconst _env = require(\"@next/env\");\nconst _path = require(\"path\");\nconst _config = /*#__PURE__*/ _interop_require_default(require(\"../../server/config\"));\nconst _constants = require(\"../../shared/lib/constants\");\nconst _loadjsconfig = /*#__PURE__*/ _interop_require_default(require(\"../load-jsconfig\"));\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../output/log\"));\nconst _findpagesdir = require(\"../../lib/find-pages-dir\");\nconst _swc = require(\"../swc\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst DEFAULT_TRANSPILED_PACKAGES = require('../../lib/default-transpiled-packages.json');\nasync function getConfig(dir) {\n    const conf = await (0, _config.default)(_constants.PHASE_TEST, dir);\n    return conf;\n}\n/**\n * Loads closest package.json in the directory hierarchy\n */ function loadClosestPackageJson(dir, attempts = 1) {\n    if (attempts > 5) {\n        throw Object.defineProperty(new Error(\"Can't resolve main package.json file\"), \"__NEXT_ERROR_CODE\", {\n            value: \"E139\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    var mainPath = attempts === 1 ? './' : Array(attempts).join('../');\n    try {\n        return require((0, _path.join)(dir, mainPath + 'package.json'));\n    } catch (e) {\n        return loadClosestPackageJson(dir, attempts + 1);\n    }\n}\n/** Loads dotenv files and sets environment variables based on next config. */ function setUpEnv(dir) {\n    const dev = false;\n    (0, _env.loadEnvConfig)(dir, dev, _log);\n}\nfunction nextJest(options = {}) {\n    // createJestConfig\n    return (customJestConfig)=>{\n        // Function that is provided as the module.exports of jest.config.js\n        // Will be called and awaited by Jest\n        return async ()=>{\n            var _nextConfig_experimental, _nextConfig_experimental1;\n            let nextConfig;\n            let jsConfig;\n            let resolvedBaseUrl;\n            let isEsmProject = false;\n            let pagesDir;\n            let serverComponents;\n            if (options.dir) {\n                const resolvedDir = (0, _path.resolve)(options.dir);\n                const packageConfig = loadClosestPackageJson(resolvedDir);\n                isEsmProject = packageConfig.type === 'module';\n                nextConfig = await getConfig(resolvedDir);\n                const findPagesDirResult = (0, _findpagesdir.findPagesDir)(resolvedDir);\n                serverComponents = !!findPagesDirResult.appDir;\n                pagesDir = findPagesDirResult.pagesDir;\n                setUpEnv(resolvedDir);\n                // TODO: revisit when bug in SWC is fixed that strips `.css`\n                const result = await (0, _loadjsconfig.default)(resolvedDir, nextConfig);\n                jsConfig = result.jsConfig;\n                resolvedBaseUrl = result.resolvedBaseUrl;\n            }\n            // Ensure provided async config is supported\n            const resolvedJestConfig = (typeof customJestConfig === 'function' ? await customJestConfig() : customJestConfig) ?? {};\n            // eagerly load swc bindings instead of waiting for transform calls\n            await (0, _swc.loadBindings)(nextConfig == null ? void 0 : (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.useWasmBinary);\n            if (_swc.lockfilePatchPromise.cur) {\n                await _swc.lockfilePatchPromise.cur;\n            }\n            const transpiled = ((nextConfig == null ? void 0 : nextConfig.transpilePackages) ?? []).concat(DEFAULT_TRANSPILED_PACKAGES).join('|');\n            const jestTransformerConfig = {\n                modularizeImports: nextConfig == null ? void 0 : nextConfig.modularizeImports,\n                swcPlugins: nextConfig == null ? void 0 : (_nextConfig_experimental1 = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental1.swcPlugins,\n                compilerOptions: nextConfig == null ? void 0 : nextConfig.compiler,\n                jsConfig,\n                resolvedBaseUrl,\n                serverComponents,\n                isEsmProject,\n                pagesDir\n            };\n            return {\n                ...resolvedJestConfig,\n                moduleNameMapper: {\n                    // Handle CSS imports (with CSS modules)\n                    // https://jestjs.io/docs/webpack#mocking-css-modules\n                    '^.+\\\\.module\\\\.(css|sass|scss)$': require.resolve('./object-proxy.js'),\n                    // Handle CSS imports (without CSS modules)\n                    '^.+\\\\.(css|sass|scss)$': require.resolve('./__mocks__/styleMock.js'),\n                    // Handle image imports\n                    '^.+\\\\.(png|jpg|jpeg|gif|webp|avif|ico|bmp)$': require.resolve(`./__mocks__/fileMock.js`),\n                    // Keep .svg to it's own rule to make overriding easy\n                    '^.+\\\\.(svg)$': require.resolve(`./__mocks__/fileMock.js`),\n                    // Handle @next/font\n                    '@next/font/(.*)': require.resolve('./__mocks__/nextFontMock.js'),\n                    // Handle next/font\n                    'next/font/(.*)': require.resolve('./__mocks__/nextFontMock.js'),\n                    // Disable server-only\n                    '^server-only$': require.resolve('./__mocks__/empty.js'),\n                    // custom config comes last to ensure the above rules are matched,\n                    // fixes the case where @pages/(.*) -> src/pages/$! doesn't break\n                    // CSS/image mocks\n                    ...resolvedJestConfig.moduleNameMapper || {}\n                },\n                testPathIgnorePatterns: [\n                    // Don't look for tests in node_modules\n                    '/node_modules/',\n                    // Don't look for tests in the Next.js build output\n                    '/.next/',\n                    // Custom config can append to testPathIgnorePatterns but not modify it\n                    // This is to ensure `.next` and `node_modules` are always excluded\n                    ...resolvedJestConfig.testPathIgnorePatterns || []\n                ],\n                transform: {\n                    // Use SWC to compile tests\n                    '^.+\\\\.(js|jsx|ts|tsx|mjs)$': [\n                        require.resolve('../swc/jest-transformer'),\n                        jestTransformerConfig\n                    ],\n                    // Allow for appending/overriding the default transforms\n                    ...resolvedJestConfig.transform || {}\n                },\n                transformIgnorePatterns: [\n                    // To match Next.js behavior node_modules is not transformed, only `transpiledPackages`\n                    ...transpiled ? [\n                        `/node_modules/(?!.pnpm)(?!(${transpiled})/)`,\n                        `/node_modules/.pnpm/(?!(${transpiled.replace(/\\//g, '\\\\+')})@)`\n                    ] : [\n                        '/node_modules/'\n                    ],\n                    // CSS modules are mocked so they don't need to be transformed\n                    '^.+\\\\.module\\\\.(css|sass|scss)$',\n                    // Custom config can append to transformIgnorePatterns but not modify it\n                    // This is to ensure `node_modules` and .module.css/sass/scss are always excluded\n                    ...resolvedJestConfig.transformIgnorePatterns || []\n                ],\n                watchPathIgnorePatterns: [\n                    // Don't re-run tests when the Next.js build output changes\n                    '/.next/',\n                    ...resolvedJestConfig.watchPathIgnorePatterns || []\n                ]\n            };\n        };\n    };\n}\n\nif ((typeof exports.default === 'function' || (typeof exports.default === 'object' && exports.default !== null)) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', { value: true });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}\n\n//# sourceMappingURL=jest.js.map"
        }
    ]
}