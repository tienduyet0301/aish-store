{
    "sourceFile": "node_modules/next/dist/build/babel/loader/transform.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892653004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Partially adapted from @babel/core (MIT license).\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return transform;\n    }\n});\nconst _traverse = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/traverse\"));\nconst _generator = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/generator\"));\nconst _corelibnormalizefile = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/core-lib-normalize-file\"));\nconst _corelibnormalizeopts = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/core-lib-normalize-opts\"));\nconst _corelibblockhoistplugin = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/core-lib-block-hoist-plugin\"));\nconst _corelibpluginpass = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/core-lib-plugin-pass\"));\nconst _getconfig = /*#__PURE__*/ _interop_require_default(require(\"./get-config\"));\nconst _util = require(\"./util\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction getTraversalParams(file, pluginPairs) {\n    const passPairs = [];\n    const passes = [];\n    const visitors = [];\n    for (const plugin of pluginPairs.concat((0, _corelibblockhoistplugin.default)())){\n        const pass = new _corelibpluginpass.default(file, plugin.key, plugin.options);\n        passPairs.push([\n            plugin,\n            pass\n        ]);\n        passes.push(pass);\n        visitors.push(plugin.visitor);\n    }\n    return {\n        passPairs,\n        passes,\n        visitors\n    };\n}\nfunction invokePluginPre(file, passPairs) {\n    for (const [{ pre }, pass] of passPairs){\n        if (pre) {\n            pre.call(pass, file);\n        }\n    }\n}\nfunction invokePluginPost(file, passPairs) {\n    for (const [{ post }, pass] of passPairs){\n        if (post) {\n            post.call(pass, file);\n        }\n    }\n}\nfunction transformAstPass(file, pluginPairs, parentSpan) {\n    const { passPairs, passes, visitors } = getTraversalParams(file, pluginPairs);\n    invokePluginPre(file, passPairs);\n    const visitor = _traverse.default.visitors.merge(visitors, passes, // @ts-ignore - the exported types are incorrect here\n    file.opts.wrapPluginVisitorMethod);\n    parentSpan.traceChild('babel-turbo-traverse').traceFn(()=>(0, _traverse.default)(file.ast, visitor, file.scope));\n    invokePluginPost(file, passPairs);\n}\nfunction transformAst(file, babelConfig, parentSpan) {\n    for (const pluginPairs of babelConfig.passes){\n        transformAstPass(file, pluginPairs, parentSpan);\n    }\n}\nasync function transform(source, inputSourceMap, loaderOptions, filename, target, parentSpan) {\n    const getConfigSpan = parentSpan.traceChild('babel-turbo-get-config');\n    const babelConfig = await _getconfig.default.call(this, {\n        source,\n        loaderOptions,\n        inputSourceMap,\n        target,\n        filename\n    });\n    if (!babelConfig) {\n        return {\n            code: source,\n            map: inputSourceMap\n        };\n    }\n    getConfigSpan.stop();\n    const normalizeSpan = parentSpan.traceChild('babel-turbo-normalize-file');\n    const file = (0, _util.consumeIterator)((0, _corelibnormalizefile.default)(babelConfig.passes, (0, _corelibnormalizeopts.default)(babelConfig), source));\n    normalizeSpan.stop();\n    const transformSpan = parentSpan.traceChild('babel-turbo-transform');\n    transformAst(file, babelConfig, transformSpan);\n    transformSpan.stop();\n    const generateSpan = parentSpan.traceChild('babel-turbo-generate');\n    const { code, map } = (0, _generator.default)(file.ast, file.opts.generatorOpts, file.code);\n    generateSpan.stop();\n    return {\n        code,\n        map\n    };\n}\n\n//# sourceMappingURL=transform.js.map"
        }
    ]
}