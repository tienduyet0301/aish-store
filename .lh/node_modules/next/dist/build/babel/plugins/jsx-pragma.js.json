{
    "sourceFile": "node_modules/next/dist/build/babel/plugins/jsx-pragma.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892653733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _pluginsyntaxjsx = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/babel/plugin-syntax-jsx\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _default({ types: t }) {\n    return {\n        inherits: _pluginsyntaxjsx.default,\n        visitor: {\n            JSXElement (_path, state) {\n                state.set('jsx', true);\n            },\n            // Fragment syntax is still JSX since it compiles to createElement(),\n            // but JSXFragment is not a JSXElement\n            JSXFragment (_path, state) {\n                state.set('jsx', true);\n            },\n            Program: {\n                exit (path, state) {\n                    if (state.get('jsx')) {\n                        const pragma = t.identifier(state.opts.pragma);\n                        let importAs = pragma;\n                        // if there's already a React in scope, use that instead of adding an import\n                        const existingBinding = state.opts.reuseImport !== false && state.opts.importAs && path.scope.getBinding(state.opts.importAs);\n                        // var _jsx = _pragma.createElement;\n                        if (state.opts.property) {\n                            if (state.opts.importAs) {\n                                importAs = t.identifier(state.opts.importAs);\n                            } else {\n                                importAs = path.scope.generateUidIdentifier('pragma');\n                            }\n                            const mapping = t.variableDeclaration('var', [\n                                t.variableDeclarator(pragma, t.memberExpression(importAs, t.identifier(state.opts.property)))\n                            ]);\n                            // if the React binding came from a require('react'),\n                            // make sure that our usage comes after it.\n                            let newPath;\n                            if (existingBinding && t.isVariableDeclarator(existingBinding.path.node) && t.isCallExpression(existingBinding.path.node.init) && t.isIdentifier(existingBinding.path.node.init.callee) && existingBinding.path.node.init.callee.name === 'require') {\n                                ;\n                                [newPath] = existingBinding.path.parentPath.insertAfter(mapping);\n                            } else {\n                                ;\n                                [newPath] = path.unshiftContainer('body', mapping);\n                            }\n                            for (const declar of newPath.get('declarations')){\n                                path.scope.registerBinding(newPath.node.kind, declar);\n                            }\n                        }\n                        if (!existingBinding) {\n                            const importSpecifier = t.importDeclaration([\n                                state.opts.import ? t.importSpecifier(importAs, t.identifier(state.opts.import)) : state.opts.importNamespace ? t.importNamespaceSpecifier(importAs) : t.importDefaultSpecifier(importAs)\n                            ], t.stringLiteral(state.opts.module || 'react'));\n                            const [newPath] = path.unshiftContainer('body', importSpecifier);\n                            for (const specifier of newPath.get('specifiers')){\n                                path.scope.registerBinding('module', specifier);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n}\n\n//# sourceMappingURL=jsx-pragma.js.map"
        }
    ]
}