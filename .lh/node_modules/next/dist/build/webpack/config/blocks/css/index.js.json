{
    "sourceFile": "node_modules/next/dist/build/webpack/config/blocks/css/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892663854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    css: null,\n    lazyPostCSS: null,\n    regexLikeCss: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    css: function() {\n        return css;\n    },\n    lazyPostCSS: function() {\n        return lazyPostCSS;\n    },\n    regexLikeCss: function() {\n        return regexLikeCss;\n    }\n});\nconst _lodashcurry = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/lodash.curry\"));\nconst _helpers = require(\"../../helpers\");\nconst _utils = require(\"../../utils\");\nconst _loaders = require(\"./loaders\");\nconst _nextfont = require(\"./loaders/next-font\");\nconst _messages = require(\"./messages\");\nconst _plugins = require(\"./plugins\");\nconst _nonnullable = require(\"../../../../../lib/non-nullable\");\nconst _constants = require(\"../../../../../lib/constants\");\nconst _getrspack = require(\"../../../../../shared/lib/get-rspack\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst regexLikeCss = /\\.(css|scss|sass)$/;\n// RegExps for Style Sheets\nconst regexCssGlobal = /(?<!\\.module)\\.css$/;\nconst regexCssModules = /\\.module\\.css$/;\n// RegExps for Syntactically Awesome Style Sheets\nconst regexSassGlobal = /(?<!\\.module)\\.(scss|sass)$/;\nconst regexSassModules = /\\.module\\.(scss|sass)$/;\nconst APP_LAYER_RULE = {\n    or: [\n        _constants.WEBPACK_LAYERS.reactServerComponents,\n        _constants.WEBPACK_LAYERS.serverSideRendering,\n        _constants.WEBPACK_LAYERS.appPagesBrowser\n    ]\n};\nconst PAGES_LAYER_RULE = {\n    not: [\n        _constants.WEBPACK_LAYERS.reactServerComponents,\n        _constants.WEBPACK_LAYERS.serverSideRendering,\n        _constants.WEBPACK_LAYERS.appPagesBrowser\n    ]\n};\n/**\n * Mark a rule as removable if built-in CSS support is disabled\n */ function markRemovable(r) {\n    Object.defineProperty(r, Symbol.for('__next_css_remove'), {\n        enumerable: false,\n        value: true\n    });\n    return r;\n}\nlet postcssInstancePromise;\nasync function lazyPostCSS(rootDirectory, supportedBrowsers, disablePostcssPresetEnv, useLightningcss) {\n    if (!postcssInstancePromise) {\n        postcssInstancePromise = (async ()=>{\n            const postcss = require('postcss');\n            // @ts-ignore backwards compat\n            postcss.plugin = function postcssPlugin(name, initializer) {\n                function creator(...args) {\n                    let transformer = initializer(...args);\n                    transformer.postcssPlugin = name;\n                    // transformer.postcssVersion = new Processor().version\n                    return transformer;\n                }\n                let cache;\n                Object.defineProperty(creator, 'postcss', {\n                    get () {\n                        if (!cache) cache = creator();\n                        return cache;\n                    }\n                });\n                creator.process = function(css, processOpts, pluginOpts) {\n                    return postcss([\n                        creator(pluginOpts)\n                    ]).process(css, processOpts);\n                };\n                return creator;\n            };\n            // @ts-ignore backwards compat\n            postcss.vendor = {\n                /**\n         * Returns the vendor prefix extracted from an input string.\n         *\n         * @example\n         * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'\n         * postcss.vendor.prefix('tab-size')      //=> ''\n         */ prefix: function prefix(prop) {\n                    const match = prop.match(/^(-\\w+-)/);\n                    if (match) {\n                        return match[0];\n                    }\n                    return '';\n                },\n                /**\n         * Returns the input string stripped of its vendor prefix.\n         *\n         * @example\n         * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'\n         */ unprefixed: function unprefixed(/**\n           * String with or without vendor prefix.\n           */ prop) {\n                    return prop.replace(/^-\\w+-/, '');\n                }\n            };\n            const postCssPlugins = await (0, _plugins.getPostCssPlugins)(rootDirectory, supportedBrowsers, disablePostcssPresetEnv, useLightningcss);\n            return {\n                postcss,\n                postcssWithPlugins: postcss(postCssPlugins)\n            };\n        })();\n    }\n    return postcssInstancePromise;\n}\nconst css = (0, _lodashcurry.default)(async function css(ctx, config) {\n    const isRspack = Boolean(process.env.NEXT_RSPACK);\n    const { prependData: sassPrependData, additionalData: sassAdditionalData, implementation: sassImplementation, ...sassOptions } = ctx.sassOptions;\n    const lazyPostCSSInitializer = ()=>lazyPostCSS(ctx.rootDirectory, ctx.supportedBrowsers, ctx.experimental.disablePostcssPresetEnv, ctx.experimental.useLightningcss);\n    const sassPreprocessors = [\n        // First, process files with `sass-loader`: this inlines content, and\n        // compiles away the proprietary syntax.\n        {\n            loader: require.resolve('next/dist/compiled/sass-loader'),\n            options: {\n                implementation: sassImplementation,\n                // Source maps are required so that `resolve-url-loader` can locate\n                // files original to their source directory.\n                sourceMap: true,\n                sassOptions: {\n                    // The \"fibers\" option is not needed for Node.js 16+, but it's causing\n                    // problems for Node.js <= 14 users as you'll have to manually install\n                    // the `fibers` package:\n                    // https://github.com/webpack-contrib/sass-loader#:~:text=We%20automatically%20inject%20the%20fibers%20package\n                    // https://github.com/vercel/next.js/issues/45052\n                    // Since it's optional and not required, we'll disable it by default\n                    // to avoid the confusion.\n                    fibers: false,\n                    // TODO: Remove this once we upgrade to sass-loader 16\n                    silenceDeprecations: [\n                        'legacy-js-api'\n                    ],\n                    ...sassOptions\n                },\n                additionalData: sassPrependData || sassAdditionalData\n            }\n        },\n        // Then, `sass-loader` will have passed-through CSS imports as-is instead\n        // of inlining them. Because they were inlined, the paths are no longer\n        // correct.\n        // To fix this, we use `resolve-url-loader` to rewrite the CSS\n        // imports to real file paths.\n        {\n            loader: require.resolve('../../../loaders/resolve-url-loader/index'),\n            options: {\n                postcss: lazyPostCSSInitializer,\n                // Source maps are not required here, but we may as well emit\n                // them.\n                sourceMap: true\n            }\n        }\n    ];\n    const fns = [];\n    const googleLoader = require.resolve('next/dist/compiled/@next/font/google/loader');\n    const localLoader = require.resolve('next/dist/compiled/@next/font/local/loader');\n    const nextFontLoaders = [\n        [\n            require.resolve('next/font/google/target.css'),\n            googleLoader\n        ],\n        [\n            require.resolve('next/font/local/target.css'),\n            localLoader\n        ]\n    ];\n    nextFontLoaders.forEach(([fontLoaderTarget, fontLoaderPath])=>{\n        // Matches the resolved font loaders noop files to run next-font-loader\n        fns.push((0, _helpers.loader)({\n            oneOf: [\n                markRemovable({\n                    sideEffects: false,\n                    test: fontLoaderTarget,\n                    use: (0, _nextfont.getNextFontLoader)(ctx, lazyPostCSSInitializer, fontLoaderPath)\n                })\n            ]\n        }));\n    });\n    // CSS cannot be imported in _document. This comes before everything because\n    // global CSS nor CSS modules work in said file.\n    fns.push((0, _helpers.loader)({\n        oneOf: [\n            markRemovable({\n                test: regexLikeCss,\n                // Use a loose regex so we don't have to crawl the file system to\n                // find the real file name (if present).\n                issuer: /pages[\\\\/]_document\\./,\n                use: {\n                    loader: 'error-loader',\n                    options: {\n                        reason: (0, _messages.getCustomDocumentError)()\n                    }\n                }\n            })\n        ]\n    }));\n    const shouldIncludeExternalCSSImports = !!ctx.experimental.craCompat || !!ctx.transpilePackages;\n    // CSS modules & SASS modules support. They are allowed to be imported in anywhere.\n    fns.push(// CSS Modules should never have side effects. This setting will\n    // allow unused CSS to be removed from the production build.\n    // We ensure this by disallowing `:global()` CSS at the top-level\n    // via the `pure` mode in `css-loader`.\n    (0, _helpers.loader)({\n        oneOf: [\n            // For app dir, we need to match the specific app layer.\n            ctx.hasAppDir ? markRemovable({\n                sideEffects: true,\n                test: regexCssModules,\n                issuerLayer: APP_LAYER_RULE,\n                use: [\n                    {\n                        loader: require.resolve('../../../loaders/next-flight-css-loader'),\n                        options: {\n                            cssModules: true\n                        }\n                    },\n                    ...(0, _loaders.getCssModuleLoader)({\n                        ...ctx,\n                        isAppDir: true\n                    }, lazyPostCSSInitializer)\n                ]\n            }) : null,\n            markRemovable({\n                sideEffects: true,\n                test: regexCssModules,\n                issuerLayer: PAGES_LAYER_RULE,\n                use: (0, _loaders.getCssModuleLoader)({\n                    ...ctx,\n                    isAppDir: false\n                }, lazyPostCSSInitializer)\n            })\n        ].filter(_nonnullable.nonNullable)\n    }), // Opt-in support for Sass (using .scss or .sass extensions).\n    // Sass Modules should never have side effects. This setting will\n    // allow unused Sass to be removed from the production build.\n    // We ensure this by disallowing `:global()` Sass at the top-level\n    // via the `pure` mode in `css-loader`.\n    (0, _helpers.loader)({\n        oneOf: [\n            // For app dir, we need to match the specific app layer.\n            ctx.hasAppDir ? markRemovable({\n                sideEffects: true,\n                test: regexSassModules,\n                issuerLayer: APP_LAYER_RULE,\n                use: [\n                    {\n                        loader: require.resolve('../../../loaders/next-flight-css-loader'),\n                        options: {\n                            cssModules: true\n                        }\n                    },\n                    ...(0, _loaders.getCssModuleLoader)({\n                        ...ctx,\n                        isAppDir: true\n                    }, lazyPostCSSInitializer, sassPreprocessors)\n                ]\n            }) : null,\n            markRemovable({\n                sideEffects: true,\n                test: regexSassModules,\n                issuerLayer: PAGES_LAYER_RULE,\n                use: (0, _loaders.getCssModuleLoader)({\n                    ...ctx,\n                    isAppDir: false\n                }, lazyPostCSSInitializer, sassPreprocessors)\n            })\n        ].filter(_nonnullable.nonNullable)\n    }), // Throw an error for CSS Modules used outside their supported scope\n    (0, _helpers.loader)({\n        oneOf: [\n            markRemovable({\n                test: [\n                    regexCssModules,\n                    regexSassModules\n                ],\n                use: {\n                    loader: 'error-loader',\n                    options: {\n                        reason: (0, _messages.getLocalModuleImportError)()\n                    }\n                }\n            })\n        ]\n    }));\n    // Global CSS and SASS support.\n    if (ctx.isServer) {\n        fns.push((0, _helpers.loader)({\n            oneOf: [\n                ctx.hasAppDir && !ctx.isProduction ? markRemovable({\n                    sideEffects: true,\n                    test: [\n                        regexCssGlobal,\n                        regexSassGlobal\n                    ],\n                    issuerLayer: APP_LAYER_RULE,\n                    use: {\n                        loader: require.resolve('../../../loaders/next-flight-css-loader'),\n                        options: {\n                            cssModules: false\n                        }\n                    }\n                }) : null,\n                markRemovable({\n                    // CSS imports have side effects, even on the server side.\n                    sideEffects: true,\n                    test: [\n                        regexCssGlobal,\n                        regexSassGlobal\n                    ],\n                    use: require.resolve('next/dist/compiled/ignore-loader')\n                })\n            ].filter(_nonnullable.nonNullable)\n        }));\n    } else {\n        // External CSS files are allowed to be loaded when any of the following is true:\n        // - hasAppDir: all CSS files are allowed\n        // - If the CSS file is located in `node_modules`\n        // - If the CSS file is located in another package in a monorepo (outside of the current rootDir)\n        // - If the issuer is pages/_app (matched later)\n        const allowedPagesGlobalCSSPath = ctx.hasAppDir ? undefined : {\n            and: [\n                {\n                    or: [\n                        /node_modules/,\n                        {\n                            not: [\n                                ctx.rootDirectory\n                            ]\n                        }\n                    ]\n                }\n            ]\n        };\n        const allowedPagesGlobalCSSIssuer = ctx.hasAppDir ? undefined : shouldIncludeExternalCSSImports ? undefined : {\n            and: [\n                ctx.rootDirectory\n            ],\n            not: [\n                /node_modules/\n            ]\n        };\n        fns.push((0, _helpers.loader)({\n            oneOf: [\n                ...ctx.hasAppDir ? [\n                    markRemovable({\n                        sideEffects: true,\n                        test: regexCssGlobal,\n                        issuerLayer: APP_LAYER_RULE,\n                        use: [\n                            {\n                                loader: require.resolve('../../../loaders/next-flight-css-loader'),\n                                options: {\n                                    cssModules: false\n                                }\n                            },\n                            ...(0, _loaders.getGlobalCssLoader)({\n                                ...ctx,\n                                isAppDir: true\n                            }, lazyPostCSSInitializer)\n                        ]\n                    }),\n                    markRemovable({\n                        sideEffects: true,\n                        test: regexSassGlobal,\n                        issuerLayer: APP_LAYER_RULE,\n                        use: [\n                            {\n                                loader: require.resolve('../../../loaders/next-flight-css-loader'),\n                                options: {\n                                    cssModules: false\n                                }\n                            },\n                            ...(0, _loaders.getGlobalCssLoader)({\n                                ...ctx,\n                                isAppDir: true\n                            }, lazyPostCSSInitializer, sassPreprocessors)\n                        ]\n                    })\n                ] : [],\n                markRemovable({\n                    sideEffects: true,\n                    test: regexCssGlobal,\n                    include: allowedPagesGlobalCSSPath,\n                    issuer: allowedPagesGlobalCSSIssuer,\n                    issuerLayer: PAGES_LAYER_RULE,\n                    use: (0, _loaders.getGlobalCssLoader)({\n                        ...ctx,\n                        isAppDir: false\n                    }, lazyPostCSSInitializer)\n                }),\n                markRemovable({\n                    sideEffects: true,\n                    test: regexSassGlobal,\n                    include: allowedPagesGlobalCSSPath,\n                    issuer: allowedPagesGlobalCSSIssuer,\n                    issuerLayer: PAGES_LAYER_RULE,\n                    use: (0, _loaders.getGlobalCssLoader)({\n                        ...ctx,\n                        isAppDir: false\n                    }, lazyPostCSSInitializer, sassPreprocessors)\n                })\n            ].filter(_nonnullable.nonNullable)\n        }));\n        if (ctx.customAppFile) {\n            fns.push((0, _helpers.loader)({\n                oneOf: [\n                    markRemovable({\n                        sideEffects: true,\n                        test: regexCssGlobal,\n                        issuer: {\n                            and: [\n                                ctx.customAppFile\n                            ]\n                        },\n                        use: (0, _loaders.getGlobalCssLoader)({\n                            ...ctx,\n                            isAppDir: false\n                        }, lazyPostCSSInitializer)\n                    })\n                ]\n            }), (0, _helpers.loader)({\n                oneOf: [\n                    markRemovable({\n                        sideEffects: true,\n                        test: regexSassGlobal,\n                        issuer: {\n                            and: [\n                                ctx.customAppFile\n                            ]\n                        },\n                        use: (0, _loaders.getGlobalCssLoader)({\n                            ...ctx,\n                            isAppDir: false\n                        }, lazyPostCSSInitializer, sassPreprocessors)\n                    })\n                ]\n            }));\n        }\n    }\n    // Throw an error for Global CSS used inside of `node_modules`\n    if (!shouldIncludeExternalCSSImports) {\n        fns.push((0, _helpers.loader)({\n            oneOf: [\n                markRemovable({\n                    test: [\n                        regexCssGlobal,\n                        regexSassGlobal\n                    ],\n                    issuer: {\n                        and: [\n                            /node_modules/\n                        ]\n                    },\n                    use: {\n                        loader: 'error-loader',\n                        options: {\n                            reason: (0, _messages.getGlobalModuleImportError)()\n                        }\n                    }\n                })\n            ]\n        }));\n    }\n    // Throw an error for Global CSS used outside of our custom <App> file\n    fns.push((0, _helpers.loader)({\n        oneOf: [\n            markRemovable({\n                test: [\n                    regexCssGlobal,\n                    regexSassGlobal\n                ],\n                issuer: ctx.hasAppDir ? {\n                    // If it's inside the app dir, but not importing from a layout file,\n                    // throw an error.\n                    and: [\n                        ctx.rootDirectory\n                    ],\n                    not: [\n                        /layout\\.(js|mjs|jsx|ts|tsx)$/\n                    ]\n                } : undefined,\n                use: {\n                    loader: 'error-loader',\n                    options: {\n                        reason: (0, _messages.getGlobalImportError)()\n                    }\n                }\n            })\n        ]\n    }));\n    if (ctx.isClient) {\n        // Automatically transform references to files (i.e. url()) into URLs\n        // e.g. url(./logo.svg)\n        fns.push((0, _helpers.loader)({\n            oneOf: [\n                markRemovable({\n                    // This should only be applied to CSS files\n                    issuer: regexLikeCss,\n                    // Exclude extensions that webpack handles by default\n                    exclude: [\n                        /\\.(js|mjs|jsx|ts|tsx)$/,\n                        /\\.html$/,\n                        /\\.json$/,\n                        /\\.webpack\\[[^\\]]+\\]$/\n                    ],\n                    // `asset/resource` always emits a URL reference, where `asset`\n                    // might inline the asset as a data URI\n                    type: 'asset/resource'\n                })\n            ]\n        }));\n    }\n    // Enable full mini-css-extract-plugin hmr for prod mode pages or app dir\n    if (ctx.isClient && (ctx.isProduction || ctx.hasAppDir)) {\n        // Extract CSS as CSS file(s) in the client-side production bundle.\n        const MiniCssExtractPlugin = isRspack ? (0, _getrspack.getRspackCore)().CssExtractRspackPlugin : require('../../../plugins/mini-css-extract-plugin').default;\n        fns.push((0, _helpers.plugin)(// @ts-ignore webpack 5 compat\n        new MiniCssExtractPlugin({\n            filename: ctx.isProduction ? 'static/css/[contenthash].css' : 'static/css/[name].css',\n            chunkFilename: ctx.isProduction ? 'static/css/[contenthash].css' : 'static/css/[name].css',\n            // Next.js guarantees that CSS order \"doesn't matter\", due to imposed\n            // restrictions:\n            // 1. Global CSS can only be defined in a single entrypoint (_app)\n            // 2. CSS Modules generate scoped class names by default and cannot\n            //    include Global CSS (:global() selector).\n            //\n            // While not a perfect guarantee (e.g. liberal use of `:global()`\n            // selector), this assumption is required to code-split CSS.\n            //\n            // If this warning were to trigger, it'd be unactionable by the user,\n            // but likely not valid -- so we disable it.\n            ignoreOrder: true,\n            insert: function(linkTag) {\n                if (typeof _N_E_STYLE_LOAD === 'function') {\n                    const { href, onload, onerror } = linkTag;\n                    _N_E_STYLE_LOAD(href.indexOf(window.location.origin) === 0 ? new URL(href).pathname : href).then(()=>onload == null ? void 0 : onload.call(linkTag, {\n                            type: 'load'\n                        }), ()=>onerror == null ? void 0 : onerror.call(linkTag, {}));\n                } else {\n                    document.head.appendChild(linkTag);\n                }\n            }\n        })));\n    }\n    const fn = (0, _utils.pipe)(...fns);\n    return fn(config);\n});\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}