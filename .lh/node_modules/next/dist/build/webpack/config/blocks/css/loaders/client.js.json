{
    "sourceFile": "node_modules/next/dist/build/webpack/config/blocks/css/loaders/client.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892663936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getClientStyleLoader\", {\n    enumerable: true,\n    get: function() {\n        return getClientStyleLoader;\n    }\n});\nconst _getrspack = require(\"../../../../../../shared/lib/get-rspack\");\nfunction getClientStyleLoader({ hasAppDir, isAppDir, isDevelopment, assetPrefix }) {\n    const isRspack = Boolean(process.env.NEXT_RSPACK);\n    const shouldEnableApp = typeof isAppDir === 'boolean' ? isAppDir : hasAppDir;\n    // Keep next-style-loader for development mode in `pages/`\n    if (isDevelopment && !shouldEnableApp) {\n        return {\n            loader: 'next-style-loader',\n            options: {\n                insert: function(element) {\n                    // By default, style-loader injects CSS into the bottom\n                    // of <head>. This causes ordering problems between dev\n                    // and prod. To fix this, we render a <noscript> tag as\n                    // an anchor for the styles to be placed before. These\n                    // styles will be applied _before_ <style jsx global>.\n                    // These elements should always exist. If they do not,\n                    // this code should fail.\n                    var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');\n                    var parentNode = anchorElement.parentNode// Normally <head>\n                    ;\n                    // Each style tag should be placed right before our\n                    // anchor. By inserting before and not after, we do not\n                    // need to track the last inserted element.\n                    parentNode.insertBefore(element, anchorElement);\n                }\n            }\n        };\n    }\n    const MiniCssExtractPlugin = isRspack ? (0, _getrspack.getRspackCore)().rspack.CssExtractRspackPlugin : require('../../../../plugins/mini-css-extract-plugin').default;\n    return {\n        loader: MiniCssExtractPlugin.loader,\n        options: {\n            publicPath: `${assetPrefix}/_next/`,\n            esModule: false\n        }\n    };\n}\n\n//# sourceMappingURL=client.js.map"
        }
    ]
}