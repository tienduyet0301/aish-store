{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/next-flight-css-loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892667989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * For server-side CSS imports, we need to ignore the actual module content but\n * still trigger the hot-reloading diff mechanism. So here we put the content\n * inside a comment.\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _crypto = /*#__PURE__*/ _interop_require_default(require(\"crypto\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst NextServerCSSLoader = function(content) {\n    this.cacheable && this.cacheable();\n    const options = this.getOptions();\n    let isCSSModule = options.cssModules;\n    // Only add the checksum during development.\n    if (process.env.NODE_ENV !== 'production') {\n        // This check is only for backwards compatibility.\n        // TODO: Remove this in the next major version (next 14)\n        if (isCSSModule === undefined) {\n            this.emitWarning(Object.defineProperty(new Error(\"No 'cssModules' option was found for the next-flight-css-loader plugin.\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E8\",\n                enumerable: false,\n                configurable: true\n            }));\n            isCSSModule = this.resourcePath.match(/\\.module\\.(css|sass|scss)$/) !== null;\n        }\n        const checksum = _crypto.default.createHash('sha1').update(typeof content === 'string' ? Buffer.from(content) : content).digest().toString('hex').substring(0, 12);\n        if (isCSSModule) {\n            return `\\\n${content}\nmodule.exports.__checksum = ${JSON.stringify(checksum)}\n`;\n        }\n        // Server CSS imports are always available for HMR, so we attach\n        // `module.hot.accept()` to the generated module.\n        const hmrCode = 'if (module.hot) { module.hot.accept() }';\n        return `\\\nexport default ${JSON.stringify(checksum)}\n${hmrCode}\n`;\n    }\n    return content;\n};\nconst _default = NextServerCSSLoader;\n\n//# sourceMappingURL=next-flight-css-loader.js.map"
        }
    ]
}