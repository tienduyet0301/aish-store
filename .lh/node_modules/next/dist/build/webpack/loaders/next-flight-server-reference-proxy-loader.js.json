{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/next-flight-server-reference-proxy-loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892668482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\n// This is a virtual proxy loader that takes a Server Reference ID and a name,\n// creates a module that just re-exports the reference as that name.\nconst flightServerReferenceProxyLoader = function transformSource() {\n    const { id, name } = this.getOptions();\n    // Both the import and the `createServerReference` call are marked as side\n    // effect free:\n    // - private-next-rsc-action-client-wrapper is matched as `sideEffects: false` in\n    //   the Webpack loader\n    // - createServerReference is marked as /*#__PURE__*/\n    //\n    // Because of that, Webpack is able to concatenate the modules and inline the\n    // reference IDs recursively directly into the module that uses them.\n    return `\\\nimport { createServerReference, callServer, findSourceMapURL } from 'private-next-rsc-action-client-wrapper'\nexport ${name === 'default' ? 'default' : `const ${name} =`} /*#__PURE__*/createServerReference(${JSON.stringify(id)}, callServer, undefined, findSourceMapURL, ${JSON.stringify(name)})`;\n};\nconst _default = flightServerReferenceProxyLoader;\n\n//# sourceMappingURL=next-flight-server-reference-proxy-loader.js.map"
        }
    ]
}