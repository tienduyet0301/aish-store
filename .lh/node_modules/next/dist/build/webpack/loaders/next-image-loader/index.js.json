{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/next-image-loader/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892668780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    raw: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    raw: function() {\n        return raw;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _loaderutils3 = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/loader-utils3\"));\nconst _imageoptimizer = require(\"../../../../server/image-optimizer\");\nconst _blur = require(\"./blur\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction nextImageLoader(content) {\n    const imageLoaderSpan = this.currentTraceSpan.traceChild('next-image-loader');\n    return imageLoaderSpan.traceAsyncFn(async ()=>{\n        const options = this.getOptions();\n        const { compilerType, isDev, assetPrefix, basePath } = options;\n        const context = this.rootContext;\n        const opts = {\n            context,\n            content\n        };\n        const interpolatedName = _loaderutils3.default.interpolateName(this, '/static/media/[name].[hash:8].[ext]', opts);\n        const outputPath = assetPrefix + '/_next' + interpolatedName;\n        let extension = _loaderutils3.default.interpolateName(this, '[ext]', opts);\n        if (extension === 'jpg') {\n            extension = 'jpeg';\n        }\n        const imageSizeSpan = imageLoaderSpan.traceChild('image-size-calculation');\n        const imageSize = await imageSizeSpan.traceAsyncFn(()=>(0, _imageoptimizer.getImageSize)(content).catch((err)=>err));\n        if (imageSize instanceof Error) {\n            const err = imageSize;\n            err.name = 'InvalidImageFormatError';\n            throw err;\n        }\n        const { dataURL: blurDataURL, width: blurWidth, height: blurHeight } = await (0, _blur.getBlurImage)(content, extension, imageSize, {\n            basePath,\n            outputPath,\n            isDev,\n            tracing: imageLoaderSpan.traceChild.bind(imageLoaderSpan)\n        });\n        const stringifiedData = imageLoaderSpan.traceChild('image-data-stringify').traceFn(()=>JSON.stringify({\n                src: outputPath,\n                height: imageSize.height,\n                width: imageSize.width,\n                blurDataURL,\n                blurWidth,\n                blurHeight\n            }));\n        if (compilerType === 'client') {\n            this.emitFile(interpolatedName, content, null);\n        } else {\n            this.emitFile(_path.default.join('..', isDev || compilerType === 'edge-server' ? '' : '..', interpolatedName), content, null);\n        }\n        return `export default ${stringifiedData};`;\n    });\n}\nconst raw = true;\nconst _default = nextImageLoader;\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}