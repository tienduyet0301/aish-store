{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/next-image-loader/blur.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892668710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getBlurImage\", {\n    enumerable: true,\n    get: function() {\n        return getBlurImage;\n    }\n});\nconst _isanimated = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/is-animated\"));\nconst _imageoptimizer = require(\"../../../../server/image-optimizer\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst BLUR_IMG_SIZE = 8;\nconst BLUR_QUALITY = 70;\nconst VALID_BLUR_EXT = [\n    'jpeg',\n    'png',\n    'webp',\n    'avif'\n] // should match other usages\n;\nasync function getBlurImage(content, extension, imageSize, { basePath, outputPath, isDev, tracing = ()=>({\n        traceFn: (fn)=>(...args)=>fn(...args),\n        traceAsyncFn: (fn)=>(...args)=>fn(...args)\n    }) }) {\n    let blurDataURL;\n    let blurWidth = 0;\n    let blurHeight = 0;\n    if (VALID_BLUR_EXT.includes(extension) && !(0, _isanimated.default)(content)) {\n        // Shrink the image's largest dimension\n        if (imageSize.width >= imageSize.height) {\n            blurWidth = BLUR_IMG_SIZE;\n            blurHeight = Math.max(Math.round(imageSize.height / imageSize.width * BLUR_IMG_SIZE), 1);\n        } else {\n            blurWidth = Math.max(Math.round(imageSize.width / imageSize.height * BLUR_IMG_SIZE), 1);\n            blurHeight = BLUR_IMG_SIZE;\n        }\n        if (isDev) {\n            // During `next dev`, we don't want to generate blur placeholders with webpack\n            // because it can delay starting the dev server. Instead, we inline a\n            // special url to lazily generate the blur placeholder at request time.\n            const prefix = 'http://localhost';\n            const url = new URL(`${basePath || ''}/_next/image`, prefix);\n            url.searchParams.set('url', outputPath);\n            url.searchParams.set('w', String(blurWidth));\n            url.searchParams.set('q', String(BLUR_QUALITY));\n            blurDataURL = url.href.slice(prefix.length);\n        } else {\n            const resizeImageSpan = tracing('image-resize');\n            const resizedImage = await resizeImageSpan.traceAsyncFn(()=>(0, _imageoptimizer.optimizeImage)({\n                    buffer: content,\n                    width: blurWidth,\n                    height: blurHeight,\n                    contentType: `image/${extension}`,\n                    quality: BLUR_QUALITY\n                }));\n            const blurDataURLSpan = tracing('image-base64-tostring');\n            blurDataURL = blurDataURLSpan.traceFn(()=>`data:image/${extension};base64,${resizedImage.toString('base64')}`);\n        }\n    }\n    return {\n        dataURL: blurDataURL,\n        width: blurWidth,\n        height: blurHeight\n    };\n}\n\n//# sourceMappingURL=blur.js.map"
        }
    ]
}