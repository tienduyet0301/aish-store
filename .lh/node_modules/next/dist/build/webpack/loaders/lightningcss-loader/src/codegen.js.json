{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/codegen.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892666170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getExportCode: null,\n    getImportCode: null,\n    getModuleCode: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getExportCode: function() {\n        return getExportCode;\n    },\n    getImportCode: function() {\n        return getImportCode;\n    },\n    getModuleCode: function() {\n        return getModuleCode;\n    }\n});\nconst _camelcase = /*#__PURE__*/ _interop_require_default(require(\"../../css-loader/src/camelcase\"));\nconst _utils = require(\"../../css-loader/src/utils\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction getImportCode(imports, options) {\n    let code = '';\n    for (const item of imports){\n        const { importName, url, icss } = item;\n        if (options.esModule) {\n            if (icss && options.modules.namedExport) {\n                code += `import ${options.modules.exportOnlyLocals ? '' : `${importName}, `}* as ${importName}_NAMED___ from ${url};\\n`;\n            } else {\n                code += `import ${importName} from ${url};\\n`;\n            }\n        } else {\n            code += `var ${importName} = require(${url});\\n`;\n        }\n    }\n    return code ? `// Imports\\n${code}` : '';\n}\nfunction getModuleCode(result, api, replacements, options, loaderContext) {\n    if (options.modules.exportOnlyLocals === true) {\n        return '';\n    }\n    const sourceMapValue = options.sourceMap ? `,${(0, _utils.normalizeSourceMapForRuntime)(result.map, loaderContext)}` : '';\n    let code = JSON.stringify(result.css);\n    let beforeCode = `var ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(${options.sourceMap});\\n`;\n    for (const item of api){\n        const { url, media, dedupe } = item;\n        beforeCode += url ? `___CSS_LOADER_EXPORT___.push([module.id, ${JSON.stringify(`@import url(${url});`)}${media ? `, ${JSON.stringify(media)}` : ''}]);\\n` : `___CSS_LOADER_EXPORT___.i(${item.importName}${media ? `, ${JSON.stringify(media)}` : dedupe ? ', \"\"' : ''}${dedupe ? ', true' : ''});\\n`;\n    }\n    for (const item of replacements){\n        const { replacementName, importName, localName } = item;\n        if (localName) {\n            code = code.replace(new RegExp(replacementName, 'g'), ()=>options.modules.namedExport ? `\" + ${importName}_NAMED___[${JSON.stringify((0, _camelcase.default)(localName))}] + \"` : `\" + ${importName}.locals[${JSON.stringify(localName)}] + \"`);\n        } else {\n            const { hash, needQuotes } = item;\n            const getUrlOptions = [\n                ...hash ? [\n                    `hash: ${JSON.stringify(hash)}`\n                ] : [],\n                ...needQuotes ? 'needQuotes: true' : []\n            ];\n            const preparedOptions = getUrlOptions.length > 0 ? `, { ${getUrlOptions.join(', ')} }` : '';\n            beforeCode += `var ${replacementName} = ___CSS_LOADER_GET_URL_IMPORT___(${importName}${preparedOptions});\\n`;\n            code = code.replace(new RegExp(replacementName, 'g'), ()=>`\" + ${replacementName} + \"`);\n        }\n    }\n    return `${beforeCode}// Module\\n___CSS_LOADER_EXPORT___.push([module.id, ${code}, \"\"${sourceMapValue}]);\\n`;\n}\nfunction getExportCode(exports1, replacements, options) {\n    let code = '// Exports\\n';\n    let localsCode = '';\n    const addExportToLocalsCode = (name, value)=>{\n        if (options.modules.namedExport) {\n            localsCode += `export const ${(0, _camelcase.default)(name)} = ${JSON.stringify(value)};\\n`;\n        } else {\n            if (localsCode) {\n                localsCode += `,\\n`;\n            }\n            localsCode += `\\t${JSON.stringify(name)}: ${JSON.stringify(value)}`;\n        }\n    };\n    for (const { name, value } of exports1){\n        switch(options.modules.exportLocalsConvention){\n            case 'camelCase':\n                {\n                    addExportToLocalsCode(name, value);\n                    const modifiedName = (0, _camelcase.default)(name);\n                    if (modifiedName !== name) {\n                        addExportToLocalsCode(modifiedName, value);\n                    }\n                    break;\n                }\n            case 'camelCaseOnly':\n                {\n                    addExportToLocalsCode((0, _camelcase.default)(name), value);\n                    break;\n                }\n            case 'dashes':\n                {\n                    addExportToLocalsCode(name, value);\n                    const modifiedName = (0, _utils.dashesCamelCase)(name);\n                    if (modifiedName !== name) {\n                        addExportToLocalsCode(modifiedName, value);\n                    }\n                    break;\n                }\n            case 'dashesOnly':\n                {\n                    addExportToLocalsCode((0, _utils.dashesCamelCase)(name), value);\n                    break;\n                }\n            case 'asIs':\n            default:\n                addExportToLocalsCode(name, value);\n                break;\n        }\n    }\n    for (const item of replacements){\n        const { replacementName, localName } = item;\n        if (localName) {\n            const { importName } = item;\n            localsCode = localsCode.replace(new RegExp(replacementName, 'g'), ()=>{\n                if (options.modules.namedExport) {\n                    return `\" + ${importName}_NAMED___[${JSON.stringify((0, _camelcase.default)(localName))}] + \"`;\n                } else if (options.modules.exportOnlyLocals) {\n                    return `\" + ${importName}[${JSON.stringify(localName)}] + \"`;\n                }\n                return `\" + ${importName}.locals[${JSON.stringify(localName)}] + \"`;\n            });\n        } else {\n            localsCode = localsCode.replace(new RegExp(replacementName, 'g'), ()=>`\" + ${replacementName} + \"`);\n        }\n    }\n    if (options.modules.exportOnlyLocals) {\n        code += options.modules.namedExport ? localsCode : `${options.esModule ? 'export default' : 'module.exports ='} {\\n${localsCode}\\n};\\n`;\n        return code;\n    }\n    if (localsCode) {\n        code += options.modules.namedExport ? localsCode : `___CSS_LOADER_EXPORT___.locals = {\\n${localsCode}\\n};\\n`;\n    }\n    code += `${options.esModule ? 'export default' : 'module.exports ='} ___CSS_LOADER_EXPORT___;\\n`;\n    return code;\n}\n\n//# sourceMappingURL=codegen.js.map"
        }
    ]
}