{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/lightningcss-loader/src/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892666514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getTargets\", {\n    enumerable: true,\n    get: function() {\n        return getTargets;\n    }\n});\nlet targetsCache = {};\n/**\n * Convert a version number to a single 24-bit number\n *\n * https://github.com/lumeland/lume/blob/4cc75599006df423a14befc06d3ed8493c645b09/plugins/lightningcss.ts#L160\n */ function version(major, minor = 0, patch = 0) {\n    return major << 16 | minor << 8 | patch;\n}\nfunction parseVersion(v) {\n    return v.split('.').reduce((acc, val)=>{\n        if (!acc) {\n            return null;\n        }\n        const parsed = parseInt(val, 10);\n        if (isNaN(parsed)) {\n            return null;\n        }\n        acc.push(parsed);\n        return acc;\n    }, []);\n}\nfunction browserslistToTargets(targets) {\n    return targets.reduce((acc, value)=>{\n        const [name, v] = value.split(' ');\n        const parsedVersion = parseVersion(v);\n        if (!parsedVersion) {\n            return acc;\n        }\n        const versionDigit = version(parsedVersion[0], parsedVersion[1], parsedVersion[2]);\n        if (name === 'and_qq' || name === 'and_uc' || name === 'baidu' || name === 'bb' || name === 'kaios' || name === 'op_mini') {\n            return acc;\n        }\n        if (acc[name] == null || versionDigit < acc[name]) {\n            acc[name] = versionDigit;\n        }\n        return acc;\n    }, {});\n}\nconst getTargets = (opts)=>{\n    const cache = targetsCache[opts.key];\n    if (cache) {\n        return cache;\n    }\n    const result = browserslistToTargets(opts.targets ?? []);\n    return targetsCache[opts.key] = result;\n};\n\n//# sourceMappingURL=utils.js.map"
        }
    ]
}