{
    "sourceFile": "node_modules/next/dist/build/webpack/loaders/next-edge-ssr-loader/render.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892667574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfigComplete } from '../../../../server/config-shared';\nimport type { DocumentType } from '../../../../shared/lib/utils';\nimport type { BuildManifest } from '../../../../server/get-page-files';\nimport type { DynamicCssManifest, ReactLoadableManifest } from '../../../../server/load-components';\nimport type { ClientReferenceManifest } from '../../plugins/flight-manifest-plugin';\nimport type { NextFontManifest } from '../../plugins/next-font-manifest-plugin';\nimport type { NextFetchEvent } from '../../../../server/web/spec-extension/fetch-event';\nimport type { ManifestRewriteRoute } from '../../..';\nimport type { SizeLimit } from '../../../../types';\nimport type { PAGE_TYPES } from '../../../../lib/page-types';\nimport type { NextRequestHint } from '../../../../server/web/adapter';\nexport declare function getRender({ dev, page, appMod, pageMod, errorMod, error500Mod, pagesType, Document, buildManifest, reactLoadableManifest, dynamicCssManifest, interceptionRouteRewrites, renderToHTML, clientReferenceManifest, subresourceIntegrityManifest, serverActionsManifest, serverActions, config, buildId, nextFontManifest, incrementalCacheHandler, }: {\n    pagesType: PAGE_TYPES;\n    dev: boolean;\n    page: string;\n    appMod: any;\n    pageMod: any;\n    errorMod: any;\n    error500Mod: any;\n    renderToHTML?: any;\n    Document: DocumentType;\n    buildManifest: BuildManifest;\n    reactLoadableManifest: ReactLoadableManifest;\n    dynamicCssManifest?: DynamicCssManifest;\n    subresourceIntegrityManifest?: Record<string, string>;\n    interceptionRouteRewrites?: ManifestRewriteRoute[];\n    clientReferenceManifest?: ClientReferenceManifest;\n    serverActionsManifest?: any;\n    serverActions?: {\n        bodySizeLimit?: SizeLimit;\n        allowedOrigins?: string[];\n    };\n    config: NextConfigComplete;\n    buildId: string;\n    nextFontManifest: NextFontManifest;\n    incrementalCacheHandler?: any;\n}): (request: NextRequestHint, event?: NextFetchEvent) => Promise<Response>;\n"
        }
    ]
}