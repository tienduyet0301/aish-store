{
    "sourceFile": "node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892672695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"SubresourceIntegrityPlugin\", {\n    enumerable: true,\n    get: function() {\n        return SubresourceIntegrityPlugin;\n    }\n});\nconst _webpack = require(\"next/dist/compiled/webpack/webpack\");\nconst _crypto = /*#__PURE__*/ _interop_require_default(require(\"crypto\"));\nconst _constants = require(\"../../../shared/lib/constants\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst PLUGIN_NAME = 'SubresourceIntegrityPlugin';\nclass SubresourceIntegrityPlugin {\n    constructor(algorithm){\n        this.algorithm = algorithm;\n    }\n    apply(compiler) {\n        compiler.hooks.make.tap(PLUGIN_NAME, (compilation)=>{\n            compilation.hooks.afterProcessAssets.tap({\n                name: PLUGIN_NAME,\n                stage: _webpack.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n            }, ()=>{\n                // Collect all the assets.\n                let files = new Set();\n                for (const asset of compilation.getAssets()){\n                    files.add(asset.name);\n                }\n                // For each file, deduped, calculate the file hash.\n                const hashes = {};\n                for (const file of files.values()){\n                    // Get the buffer for the asset.\n                    const asset = compilation.getAsset(file);\n                    if (!asset) {\n                        throw Object.defineProperty(new Error(`could not get asset: ${file}`), \"__NEXT_ERROR_CODE\", {\n                            value: \"E349\",\n                            enumerable: false,\n                            configurable: true\n                        });\n                    }\n                    // Get the buffer for the asset.\n                    const buffer = asset.source.buffer();\n                    // Create the hash for the content.\n                    const hash = _crypto.default.createHash(this.algorithm).update(buffer).digest().toString('base64');\n                    hashes[file] = `${this.algorithm}-${hash}`;\n                }\n                const json = JSON.stringify(hashes, null, 2);\n                const file = 'server/' + _constants.SUBRESOURCE_INTEGRITY_MANIFEST;\n                compilation.emitAsset(file + '.js', new _webpack.sources.RawSource(`self.__SUBRESOURCE_INTEGRITY_MANIFEST=${JSON.stringify(json)}`));\n                compilation.emitAsset(file + '.json', new _webpack.sources.RawSource(json));\n            });\n        });\n    }\n}\n\n//# sourceMappingURL=subresource-integrity-plugin.js.map"
        }
    ]
}