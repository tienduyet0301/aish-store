{
    "sourceFile": "node_modules/next/dist/build/webpack/plugins/flight-client-entry-plugin.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892671067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CssImports, ClientComponentImports } from '../loaders/next-flight-client-entry-loader';\nimport { webpack } from 'next/dist/compiled/webpack/webpack';\ninterface Options {\n    dev: boolean;\n    appDir: string;\n    isEdgeServer: boolean;\n    encryptionKey: string;\n}\ntype Actions = {\n    [actionId: string]: {\n        workers: {\n            [name: string]: {\n                moduleId: string | number;\n                async: boolean;\n            };\n        };\n        layer: {\n            [name: string]: string;\n        };\n    };\n};\ntype ActionIdNamePair = {\n    id: string;\n    exportedName: string;\n};\nexport type ActionManifest = {\n    encryptionKey: string;\n    node: Actions;\n    edge: Actions;\n};\nexport interface ModuleInfo {\n    moduleId: string | number;\n    async: boolean;\n}\nexport declare class FlightClientEntryPlugin {\n    dev: boolean;\n    appDir: string;\n    encryptionKey: string;\n    isEdgeServer: boolean;\n    assetPrefix: string;\n    webpackRuntime: string;\n    constructor(options: Options);\n    apply(compiler: webpack.Compiler): void;\n    createClientEntries(compiler: webpack.Compiler, compilation: webpack.Compilation): Promise<void>;\n    collectClientActionsFromDependencies({ compilation, dependencies, }: {\n        compilation: webpack.Compilation;\n        dependencies: ReturnType<typeof webpack.EntryPlugin.createDependency>[];\n    }): Map<string, ActionIdNamePair[]>;\n    collectComponentInfoFromServerEntryDependency({ entryRequest, compilation, resolvedModule, }: {\n        entryRequest: string;\n        compilation: webpack.Compilation;\n        resolvedModule: any;\n    }): {\n        cssImports: CssImports;\n        clientComponentImports: ClientComponentImports;\n        actionImports: [string, ActionIdNamePair[]][];\n    };\n    injectClientEntryAndSSRModules({ compiler, compilation, entryName, clientImports, bundlePath, absolutePagePath, }: {\n        compiler: webpack.Compiler;\n        compilation: webpack.Compilation;\n        entryName: string;\n        clientImports: ClientComponentImports;\n        bundlePath: string;\n        absolutePagePath?: string;\n    }): [\n        shouldInvalidate: boolean,\n        addSSREntryPromise: Promise<void>,\n        addRSCEntryPromise: Promise<void>,\n        ssrDep: ReturnType<typeof webpack.EntryPlugin.createDependency>\n    ];\n    injectActionEntry({ compiler, compilation, actions, entryName, bundlePath, fromClient, createdActionIds, }: {\n        compiler: webpack.Compiler;\n        compilation: webpack.Compilation;\n        actions: Map<string, ActionIdNamePair[]>;\n        entryName: string;\n        bundlePath: string;\n        createdActionIds: Set<string>;\n        fromClient?: boolean;\n    }): Promise<any>;\n    addEntry(compilation: webpack.Compilation, context: string, dependency: webpack.Dependency, options: webpack.EntryOptions): Promise<any>;\n    createActionAssets(compilation: webpack.Compilation): Promise<void>;\n}\nexport {};\n"
        }
    ]
}