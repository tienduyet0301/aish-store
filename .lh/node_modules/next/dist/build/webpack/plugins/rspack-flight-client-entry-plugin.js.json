{
    "sourceFile": "node_modules/next/dist/build/webpack/plugins/rspack-flight-client-entry-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892672470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"RspackFlightClientEntryPlugin\", {\n    enumerable: true,\n    get: function() {\n        return RspackFlightClientEntryPlugin;\n    }\n});\nconst _ondemandentryhandler = require(\"../../../server/dev/on-demand-entry-handler\");\nconst _constants = require(\"../../../shared/lib/constants\");\nconst _buildcontext = require(\"../../build-context\");\nconst _pagetypes = require(\"../../../lib/page-types\");\nconst _getrspack = require(\"../../../shared/lib/get-rspack\");\nconst pluginState = (0, _buildcontext.getProxiedPluginState)({\n    // A map to track \"action\" -> \"list of bundles\".\n    serverActions: {},\n    edgeServerActions: {},\n    serverActionModules: {},\n    edgeServerActionModules: {},\n    ssrModules: {},\n    edgeSsrModules: {},\n    rscModules: {},\n    edgeRscModules: {},\n    injectedClientEntries: {}\n});\nclass RspackFlightClientEntryPlugin {\n    constructor(options){\n        const { FlightClientEntryPlugin } = (0, _getrspack.getRspackCore)();\n        this.plugin = new FlightClientEntryPlugin({\n            ...options,\n            builtinAppLoader: !!process.env.BUILTIN_SWC_LOADER,\n            shouldInvalidateCb: ({ bundlePath, entryName, absolutePagePath, clientBrowserLoader })=>{\n                let shouldInvalidate = false;\n                const compiler = this.compiler;\n                const entries = (0, _ondemandentryhandler.getEntries)(compiler.outputPath);\n                const pageKey = (0, _ondemandentryhandler.getEntryKey)(_constants.COMPILER_NAMES.client, _pagetypes.PAGE_TYPES.APP, bundlePath);\n                if (!entries[pageKey]) {\n                    entries[pageKey] = {\n                        type: _ondemandentryhandler.EntryTypes.CHILD_ENTRY,\n                        parentEntries: new Set([\n                            entryName\n                        ]),\n                        absoluteEntryFilePath: absolutePagePath,\n                        bundlePath,\n                        request: clientBrowserLoader,\n                        dispose: false,\n                        lastActiveTime: Date.now()\n                    };\n                    shouldInvalidate = true;\n                } else {\n                    const entryData = entries[pageKey];\n                    // New version of the client loader\n                    if (entryData.request !== clientBrowserLoader) {\n                        entryData.request = clientBrowserLoader;\n                        shouldInvalidate = true;\n                    }\n                    if (entryData.type === _ondemandentryhandler.EntryTypes.CHILD_ENTRY) {\n                        entryData.parentEntries.add(entryName);\n                    }\n                    entryData.dispose = false;\n                    entryData.lastActiveTime = Date.now();\n                }\n                return shouldInvalidate;\n            },\n            invalidateCb: ()=>{\n                const compiler = this.compiler;\n                // Invalidate in development to trigger recompilation\n                const invalidator = (0, _ondemandentryhandler.getInvalidator)(compiler.outputPath);\n                // Check if any of the entry injections need an invalidation\n                if (invalidator) {\n                    invalidator.invalidate([\n                        _constants.COMPILER_NAMES.client\n                    ]);\n                }\n            },\n            stateCb: (state)=>{\n                Object.assign(pluginState.serverActions, state.serverActions);\n                Object.assign(pluginState.edgeServerActions, state.edgeServerActions);\n                Object.assign(pluginState.serverActionModules, state.serverActionModules);\n                Object.assign(pluginState.edgeServerActionModules, state.edgeServerActionModules);\n                Object.assign(pluginState.ssrModules, state.ssrModules);\n                Object.assign(pluginState.edgeSsrModules, state.edgeSsrModules);\n                Object.assign(pluginState.rscModules, state.rscModules);\n                Object.assign(pluginState.edgeRscModules, state.edgeRscModules);\n                Object.assign(pluginState.injectedClientEntries, state.injectedClientEntries);\n            }\n        });\n    }\n    apply(compiler) {\n        this.compiler = compiler;\n        this.plugin.apply(compiler);\n    }\n}\n\n//# sourceMappingURL=rspack-flight-client-entry-plugin.js.map"
        }
    ]
}