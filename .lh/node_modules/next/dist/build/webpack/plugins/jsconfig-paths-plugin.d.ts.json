{
    "sourceFile": "node_modules/next/dist/build/webpack/plugins/jsconfig-paths-plugin.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892671242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { webpack } from 'next/dist/compiled/webpack/webpack';\nimport type { ResolvedBaseUrl } from '../../load-jsconfig';\nexport interface Pattern {\n    prefix: string;\n    suffix: string;\n}\nexport declare function hasZeroOrOneAsteriskCharacter(str: string): boolean;\n/**\n * Determines whether a path starts with a relative path component (i.e. `.` or `..`).\n */\nexport declare function pathIsRelative(testPath: string): boolean;\nexport declare function tryParsePattern(pattern: string): Pattern | undefined;\n/** Return the object corresponding to the best pattern to match `candidate`. */\nexport declare function findBestPatternMatch<T>(values: readonly T[], getPattern: (value: T) => Pattern, candidate: string): T | undefined;\n/**\n * patternStrings contains both pattern strings (containing \"*\") and regular strings.\n * Return an exact match if possible, or a pattern match, or undefined.\n * (These are verified by verifyCompilerOptions to have 0 or 1 \"*\" characters.)\n */\nexport declare function matchPatternOrExact(patternStrings: readonly string[], candidate: string): string | Pattern | undefined;\n/**\n * Tests whether a value is string\n */\nexport declare function isString(text: unknown): text is string;\n/**\n * Given that candidate matches pattern, returns the text matching the '*'.\n * E.g.: matchedText(tryParsePattern(\"foo*baz\"), \"foobarbaz\") === \"bar\"\n */\nexport declare function matchedText(pattern: Pattern, candidate: string): string;\nexport declare function patternText({ prefix, suffix }: Pattern): string;\ntype Paths = {\n    [match: string]: string[];\n};\n/**\n * Handles tsconfig.json or jsconfig.js \"paths\" option for webpack\n * Largely based on how the TypeScript compiler handles it:\n * https://github.com/microsoft/TypeScript/blob/1a9c8197fffe3dace5f8dca6633d450a88cba66d/src/compiler/moduleNameResolver.ts#L1362\n */\ntype NonFunction<T> = T extends Function ? never : T;\ntype ResolvePluginPlugin = NonFunction<webpack.ResolvePluginInstance>;\nexport declare class JsConfigPathsPlugin implements ResolvePluginPlugin {\n    paths: Paths;\n    resolvedBaseUrl: ResolvedBaseUrl;\n    jsConfigPlugin: true;\n    constructor(paths: Paths, resolvedBaseUrl: ResolvedBaseUrl);\n    apply(resolver: webpack.Resolver): void;\n}\nexport {};\n"
        }
    ]
}