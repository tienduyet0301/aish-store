{
    "sourceFile": "node_modules/next/dist/build/webpack/plugins/memory-with-gc-cache-plugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892671362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\nThis plugin is based on the internal one in webpack but heavily modified to use a different caching heuristic.\nhttps://github.com/webpack/webpack/blob/853bfda35a0080605c09e1bdeb0103bcb9367a10/lib/cache/MemoryWithGcCachePlugin.js#L15\n\nhttps://github.com/webpack/webpack/blob/main/LICENSE\nCopyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/ /*\nThe change in this plugin compared to the built-in one in webpack is that this plugin always cleans up after 5 compilations.\nThe built-in plugin only cleans up \"total modules / max generations\".\nThe default for max generations is 5, so 1/5th of the modules would be marked for deletion.\nThis plugin instead always checks the cache and decreases the time to live of all entries. That way memory is cleaned up earlier.\n*/ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"MemoryWithGcCachePlugin\", {\n    enumerable: true,\n    get: function() {\n        return MemoryWithGcCachePlugin;\n    }\n});\n// Used to hook into the memory stage of the webpack caching\nconst CACHE_STAGE_MEMORY = -10 // TODO: Somehow webpack.Cache.STAGE_MEMORY doesn't work.\n;\nconst PLUGIN_NAME = 'NextJsMemoryWithGcCachePlugin';\nclass MemoryWithGcCachePlugin {\n    constructor({ maxGenerations }){\n        this.maxGenerations = maxGenerations;\n    }\n    apply(compiler) {\n        const maxGenerations = this.maxGenerations;\n        /**\n     * The memory cache\n     */ const cache = new Map();\n        /**\n     * Cache cleanup implementation\n     */ function decreaseTTLAndEvict() {\n            for (const [identifier, entry] of cache){\n                // Decrease item time to live\n                entry.ttl--;\n                // if ttl is 0 or below, evict entry from the cache\n                if (entry.ttl <= 0) {\n                    cache.delete(identifier);\n                }\n            }\n        }\n        compiler.hooks.afterDone.tap(PLUGIN_NAME, decreaseTTLAndEvict);\n        compiler.cache.hooks.store.tap({\n            name: PLUGIN_NAME,\n            stage: CACHE_STAGE_MEMORY\n        }, (identifier, etag, data)=>{\n            cache.set(identifier, {\n                etag,\n                data,\n                ttl: maxGenerations\n            });\n        });\n        compiler.cache.hooks.get.tap({\n            name: PLUGIN_NAME,\n            stage: CACHE_STAGE_MEMORY\n        }, (identifier, etag, gotHandlers)=>{\n            const cacheEntry = cache.get(identifier);\n            // Item found\n            if (cacheEntry !== undefined) {\n                // When cache entry is hit we reset the counter.\n                cacheEntry.ttl = maxGenerations;\n                // Handles `null` separately as it doesn't have an etag.\n                if (cacheEntry.data === null) {\n                    return null;\n                }\n                return cacheEntry.etag === etag ? cacheEntry.data : null;\n            }\n            // Handle case where other cache does have the identifier, puts it into the memory cache\n            gotHandlers.push((result, callback)=>{\n                cache.set(identifier, {\n                    // Handles `null` separately as it doesn't have an etag.\n                    etag: result === null ? null : etag,\n                    data: result,\n                    ttl: maxGenerations\n                });\n                return callback();\n            });\n            // No item found\n            return undefined;\n        });\n        compiler.cache.hooks.shutdown.tap({\n            name: PLUGIN_NAME,\n            stage: CACHE_STAGE_MEMORY\n        }, ()=>{\n            cache.clear();\n        });\n    }\n}\n\n//# sourceMappingURL=memory-with-gc-cache-plugin.js.map"
        }
    ]
}