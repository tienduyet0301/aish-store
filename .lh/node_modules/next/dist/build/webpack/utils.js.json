{
    "sourceFile": "node_modules/next/dist/build/webpack/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892673938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    forEachEntryModule: null,\n    formatBarrelOptimizedResource: null,\n    getCompilationSpan: null,\n    getModuleReferencesInOrder: null,\n    traverseModules: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    forEachEntryModule: function() {\n        return forEachEntryModule;\n    },\n    formatBarrelOptimizedResource: function() {\n        return formatBarrelOptimizedResource;\n    },\n    getCompilationSpan: function() {\n        return getCompilationSpan;\n    },\n    getModuleReferencesInOrder: function() {\n        return getModuleReferencesInOrder;\n    },\n    traverseModules: function() {\n        return traverseModules;\n    }\n});\nconst _entries = require(\"../entries\");\nconst _profilingplugin = require(\"./plugins/profiling-plugin\");\nconst _rspackprofilingplugin = require(\"./plugins/rspack-profiling-plugin\");\nfunction traverseModules(compilation, callback, filterChunkGroup) {\n    compilation.chunkGroups.forEach((chunkGroup)=>{\n        if (filterChunkGroup && !filterChunkGroup(chunkGroup)) {\n            return;\n        }\n        chunkGroup.chunks.forEach((chunk)=>{\n            const chunkModules = compilation.chunkGraph.getChunkModulesIterable(chunk);\n            for (const mod of chunkModules){\n                var _compilation_chunkGraph_getModuleId;\n                const modId = (_compilation_chunkGraph_getModuleId = compilation.chunkGraph.getModuleId(mod)) == null ? void 0 : _compilation_chunkGraph_getModuleId.toString();\n                if (modId) callback(mod, chunk, chunkGroup, modId);\n                const anyModule = mod;\n                if (anyModule.modules) {\n                    for (const subMod of anyModule.modules)if (modId) callback(subMod, chunk, chunkGroup, modId);\n                }\n            }\n        });\n    });\n}\nfunction forEachEntryModule(compilation, callback) {\n    for (const [name, entry] of compilation.entries.entries()){\n        var _entry_dependencies;\n        // Skip for entries under pages/\n        if (name.startsWith('pages/')) {\n            continue;\n        }\n        // Check if the page entry is a server component or not.\n        const entryDependency = (_entry_dependencies = entry.dependencies) == null ? void 0 : _entry_dependencies[0];\n        // Ensure only next-app-loader entries are handled.\n        if (!entryDependency || !entryDependency.request) continue;\n        const request = entryDependency.request;\n        if (!request.startsWith('next-edge-ssr-loader?') && !request.startsWith('next-edge-app-route-loader?') && !request.startsWith(`${(0, _entries.getAppLoader)()}?`)) continue;\n        let entryModule = compilation.moduleGraph.getResolvedModule(entryDependency);\n        if (request.startsWith('next-edge-ssr-loader?') || request.startsWith('next-edge-app-route-loader?')) {\n            entryModule.dependencies.forEach((dependency)=>{\n                const modRequest = dependency.request;\n                if (modRequest == null ? void 0 : modRequest.includes((0, _entries.getAppLoader)())) {\n                    entryModule = compilation.moduleGraph.getResolvedModule(dependency);\n                }\n            });\n        }\n        callback({\n            name,\n            entryModule\n        });\n    }\n}\nfunction formatBarrelOptimizedResource(resource, matchResource) {\n    return `${resource}@${matchResource}`;\n}\nfunction getModuleReferencesInOrder(module1, moduleGraph) {\n    if ('getOutgoingConnectionsInOrder' in moduleGraph && typeof moduleGraph.getOutgoingConnectionsInOrder === 'function') {\n        return moduleGraph.getOutgoingConnectionsInOrder(module1);\n    }\n    const connections = [];\n    for (const connection of moduleGraph.getOutgoingConnections(module1)){\n        if (connection.dependency && connection.module) {\n            connections.push({\n                connection,\n                index: moduleGraph.getParentBlockIndex(connection.dependency)\n            });\n        }\n    }\n    connections.sort((a, b)=>a.index - b.index);\n    return connections.map((c)=>c.connection);\n}\nfunction getCompilationSpan(compilation) {\n    const compilationSpans = process.env.NEXT_RSPACK ? _rspackprofilingplugin.compilationSpans : _profilingplugin.spans;\n    return compilationSpans.get(compilation);\n}\n\n//# sourceMappingURL=utils.js.map"
        }
    ]
}