{
    "sourceFile": "node_modules/next/dist/build/analysis/get-page-static-info.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892652202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfig } from '../../server/config-shared';\nimport type { RouteHas } from '../../lib/load-custom-routes';\nimport type { RSCMeta } from '../webpack/loaders/get-module-build-info';\nimport { PAGE_TYPES } from '../../lib/page-types';\nimport { type AppSegmentConfig } from '../segment-config/app/app-segment-config';\nimport { type PagesSegmentConfig, type PagesSegmentConfigConfig } from '../segment-config/pages/pages-segment-config';\nexport type MiddlewareMatcher = {\n    regexp: string;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n    originalSource: string;\n};\nexport type MiddlewareConfig = {\n    /**\n     * The matcher for the middleware. Read more: [Next.js Docs: Middleware `matcher`](https://nextjs.org/docs/app/api-reference/file-conventions/middleware#matcher),\n     * [Next.js Docs: Middleware matching paths](https://nextjs.org/docs/app/building-your-application/routing/middleware#matching-paths)\n     */\n    matchers?: MiddlewareMatcher[];\n    /**\n     * The regions that the middleware should run in.\n     */\n    regions?: string | string[];\n    /**\n     * A glob, or an array of globs, ignoring dynamic code evaluation for specific\n     * files. The globs are relative to your application root folder.\n     */\n    unstable_allowDynamic?: string[];\n};\nexport interface AppPageStaticInfo {\n    type: PAGE_TYPES.APP;\n    ssg?: boolean;\n    ssr?: boolean;\n    rsc?: RSCModuleType;\n    generateStaticParams?: boolean;\n    generateSitemaps?: boolean;\n    generateImageMetadata?: boolean;\n    middleware?: MiddlewareConfig;\n    config: Omit<AppSegmentConfig, 'runtime' | 'maxDuration'> | undefined;\n    runtime: AppSegmentConfig['runtime'] | undefined;\n    preferredRegion: AppSegmentConfig['preferredRegion'] | undefined;\n    maxDuration: number | undefined;\n}\nexport interface PagesPageStaticInfo {\n    type: PAGE_TYPES.PAGES;\n    getStaticProps?: boolean;\n    getServerSideProps?: boolean;\n    rsc?: RSCModuleType;\n    generateStaticParams?: boolean;\n    generateSitemaps?: boolean;\n    generateImageMetadata?: boolean;\n    middleware?: MiddlewareConfig;\n    config: (Omit<PagesSegmentConfig, 'runtime' | 'config' | 'maxDuration'> & {\n        config?: Omit<PagesSegmentConfigConfig, 'runtime' | 'maxDuration'>;\n    }) | undefined;\n    runtime: PagesSegmentConfig['runtime'] | undefined;\n    preferredRegion: PagesSegmentConfigConfig['regions'] | undefined;\n    maxDuration: number | undefined;\n}\nexport type PageStaticInfo = AppPageStaticInfo | PagesPageStaticInfo;\nexport type RSCModuleType = 'server' | 'client';\nexport declare function getRSCModuleInformation(source: string, isReactServerLayer: boolean): RSCMeta;\nexport declare let hadUnsupportedValue: boolean;\ntype GetPageStaticInfoParams = {\n    pageFilePath: string;\n    nextConfig: Partial<NextConfig>;\n    isDev?: boolean;\n    page: string;\n    pageType: PAGE_TYPES;\n};\nexport declare function getAppPageStaticInfo({ pageFilePath, nextConfig, isDev, page, }: GetPageStaticInfoParams): Promise<AppPageStaticInfo>;\nexport declare function getPagesPageStaticInfo({ pageFilePath, nextConfig, isDev, page, }: GetPageStaticInfoParams): Promise<PagesPageStaticInfo>;\n/**\n * For a given pageFilePath and nextConfig, if the config supports it, this\n * function will read the file and return the runtime that should be used.\n * It will look into the file content only if the page *requires* a runtime\n * to be specified, that is, when gSSP or gSP is used.\n * Related discussion: https://github.com/vercel/next.js/discussions/34179\n */\nexport declare function getPageStaticInfo(params: GetPageStaticInfoParams): Promise<PageStaticInfo>;\nexport {};\n"
        }
    ]
}