{
    "sourceFile": "node_modules/next/dist/build/templates/app-route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892661951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    patchFetch: null,\n    routeModule: null,\n    serverHooks: null,\n    workAsyncStorage: null,\n    workUnitAsyncStorage: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    patchFetch: function() {\n        return patchFetch;\n    },\n    routeModule: function() {\n        return routeModule;\n    },\n    serverHooks: function() {\n        return serverHooks;\n    },\n    workAsyncStorage: function() {\n        return workAsyncStorage;\n    },\n    workUnitAsyncStorage: function() {\n        return workUnitAsyncStorage;\n    }\n});\nconst _modulecompiled = require(\"../../server/route-modules/app-route/module.compiled\");\nconst _routekind = require(\"../../server/route-kind\");\nconst _patchfetch = require(\"../../server/lib/patch-fetch\");\nconst _VAR_USERLAND = /*#__PURE__*/ _interop_require_wildcard(require(\"VAR_USERLAND\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\nconst routeModule = new _modulecompiled.AppRouteRouteModule({\n    definition: {\n        kind: _routekind.RouteKind.APP_ROUTE,\n        page: 'VAR_DEFINITION_PAGE',\n        pathname: 'VAR_DEFINITION_PATHNAME',\n        filename: 'VAR_DEFINITION_FILENAME',\n        bundlePath: 'VAR_DEFINITION_BUNDLE_PATH'\n    },\n    resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n    nextConfigOutput,\n    userland: _VAR_USERLAND\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0, _patchfetch.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n//# sourceMappingURL=app-route.js.map"
        }
    ]
}