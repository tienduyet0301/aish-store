{
    "sourceFile": "node_modules/next/dist/build/swc/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892661241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type DefineEnvPluginOptions } from '../webpack/plugins/define-env-plugin';\nimport type { Binding, DefineEnv } from './types';\n/**\n * Based on napi-rs's target triples, returns triples that have corresponding next-swc binaries.\n */\nexport declare function getSupportedArchTriples(): Record<string, any>;\nexport declare const lockfilePatchPromise: {\n    cur?: Promise<void>;\n};\nexport declare function loadBindings(useWasmBinary?: boolean): Promise<Binding>;\nexport declare function createDefineEnv({ isTurbopack, clientRouterFilters, config, dev, distDir, fetchCacheKeyPrefix, hasRewrites, middlewareMatchers, }: Omit<DefineEnvPluginOptions, 'isClient' | 'isNodeOrEdgeCompilation' | 'isEdgeServer' | 'isNodeServer'>): DefineEnv;\nexport declare function isWasm(): Promise<boolean>;\nexport declare function transform(src: string, options?: any): Promise<any>;\nexport declare function transformSync(src: string, options?: any): any;\nexport declare function minify(src: string, options: any): Promise<{\n    code: string;\n    map: any;\n}>;\nexport declare function isReactCompilerRequired(filename: string): Promise<boolean>;\nexport declare function parse(src: string, options: any): Promise<any>;\nexport declare function getBinaryMetadata(): {\n    target: string | undefined;\n};\n/**\n * Initialize trace subscriber to emit traces.\n *\n */\nexport declare function initCustomTraceSubscriber(traceFileName?: string): void;\n/**\n * Teardown swc's trace subscriber if there's an initialized flush guard exists.\n *\n * This is workaround to amend behavior with process.exit\n * (https://github.com/vercel/next.js/blob/4db8c49cc31e4fc182391fae6903fb5ef4e8c66e/packages/next/bin/next.ts#L134=)\n * seems preventing napi's cleanup hook execution (https://github.com/swc-project/swc/blob/main/crates/node/src/util.rs#L48-L51=),\n *\n * instead parent process manually drops guard when process gets signal to exit.\n */\nexport declare const teardownTraceSubscriber: () => void;\n"
        }
    ]
}