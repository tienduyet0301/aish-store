{
    "sourceFile": "node_modules/next/dist/build/swc/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892661545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfigComplete } from '../../server/config-shared';\nimport type { __ApiPreviewProps } from '../../server/api-utils';\nimport type { ExternalObject, RefCell, NapiTurboEngineOptions } from './generated-native';\nexport type { NapiTurboEngineOptions as TurboEngineOptions };\nexport interface Binding {\n    isWasm: boolean;\n    turbo: {\n        createProject(options: ProjectOptions, turboEngineOptions?: NapiTurboEngineOptions): Promise<Project>;\n        startTurbopackTraceServer(traceFilePath: string): void;\n        nextBuild?: any;\n    };\n    mdx: {\n        compile(src: string, options: any): any;\n        compileSync(src: string, options: any): any;\n    };\n    minify(src: string, options: any): Promise<any>;\n    minifySync(src: string, options: any): any;\n    transform(src: string, options: any): Promise<any>;\n    transformSync(src: string, options: any): any;\n    parse(src: string, options: any): Promise<string>;\n    getTargetTriple(): string | undefined;\n    initCustomTraceSubscriber?(traceOutFilePath?: string): ExternalObject<RefCell>;\n    teardownTraceSubscriber?(guardExternal: ExternalObject<RefCell>): void;\n    css: {\n        lightning: {\n            transform(transformOptions: any): Promise<any>;\n            transformStyleAttr(transformAttrOptions: any): Promise<any>;\n        };\n    };\n    reactCompiler: {\n        isReactCompilerRequired(filename: string): Promise<boolean>;\n    };\n}\nexport type StyledString = {\n    type: 'text';\n    value: string;\n} | {\n    type: 'code';\n    value: string;\n} | {\n    type: 'strong';\n    value: string;\n} | {\n    type: 'stack';\n    value: StyledString[];\n} | {\n    type: 'line';\n    value: StyledString[];\n};\nexport interface Issue {\n    severity: string;\n    stage: string;\n    filePath: string;\n    title: StyledString;\n    description?: StyledString;\n    detail?: StyledString;\n    source?: {\n        source: {\n            ident: string;\n            content?: string;\n        };\n        range?: {\n            start: {\n                line: number;\n                column: number;\n            };\n            end: {\n                line: number;\n                column: number;\n            };\n        };\n    };\n    documentationLink: string;\n    subIssues: Issue[];\n}\nexport interface Diagnostics {\n    category: string;\n    name: string;\n    payload: unknown;\n}\nexport type TurbopackResult<T = {}> = T & {\n    issues: Issue[];\n    diagnostics: Diagnostics[];\n};\nexport interface Middleware {\n    endpoint: Endpoint;\n}\nexport interface Instrumentation {\n    nodeJs: Endpoint;\n    edge: Endpoint;\n}\nexport interface RawEntrypoints {\n    routes: Map<string, Route>;\n    middleware?: Middleware;\n    instrumentation?: Instrumentation;\n    pagesDocumentEndpoint: Endpoint;\n    pagesAppEndpoint: Endpoint;\n    pagesErrorEndpoint: Endpoint;\n}\ninterface BaseUpdate {\n    resource: {\n        headers: unknown;\n        path: string;\n    };\n    diagnostics: unknown[];\n    issues: Issue[];\n}\ninterface IssuesUpdate extends BaseUpdate {\n    type: 'issues';\n}\ninterface EcmascriptMergedUpdate {\n    type: 'EcmascriptMergedUpdate';\n    chunks: {\n        [moduleName: string]: {\n            type: 'partial';\n        };\n    };\n    entries: {\n        [moduleName: string]: {\n            code: string;\n            map: string;\n            url: string;\n        };\n    };\n}\ninterface PartialUpdate extends BaseUpdate {\n    type: 'partial';\n    instruction: {\n        type: 'ChunkListUpdate';\n        merged: EcmascriptMergedUpdate[] | undefined;\n    };\n}\nexport type Update = IssuesUpdate | PartialUpdate;\nexport interface HmrIdentifiers {\n    identifiers: string[];\n}\n/** @see https://github.com/vercel/next.js/blob/415cd74b9a220b6f50da64da68c13043e9b02995/packages/next-swc/crates/napi/src/next_api/project.rs#L824-L833 */\nexport interface TurbopackStackFrame {\n    isServer: boolean;\n    isInternal?: boolean;\n    file: string;\n    originalFile?: string;\n    /** 1-indexed, unlike source map tokens */\n    line?: number;\n    /** 1-indexed, unlike source map tokens */\n    column?: number;\n    methodName?: string;\n}\nexport type UpdateMessage = {\n    updateType: 'start';\n} | {\n    updateType: 'end';\n    value: UpdateInfo;\n};\nexport interface UpdateInfo {\n    duration: number;\n    tasks: number;\n}\nexport interface Project {\n    update(options: Partial<ProjectOptions>): Promise<void>;\n    writeAllEntrypointsToDisk(appDirOnly: boolean): Promise<TurbopackResult<RawEntrypoints>>;\n    entrypointsSubscribe(): AsyncIterableIterator<TurbopackResult<RawEntrypoints>>;\n    hmrEvents(identifier: string): AsyncIterableIterator<TurbopackResult<Update>>;\n    hmrIdentifiersSubscribe(): AsyncIterableIterator<TurbopackResult<HmrIdentifiers>>;\n    getSourceForAsset(filePath: string): Promise<string | null>;\n    getSourceMap(filePath: string): Promise<string | null>;\n    getSourceMapSync(filePath: string): string | null;\n    traceSource(stackFrame: TurbopackStackFrame, currentDirectoryFileUrl: string): Promise<TurbopackStackFrame | null>;\n    updateInfoSubscribe(aggregationMs: number): AsyncIterableIterator<TurbopackResult<UpdateMessage>>;\n    shutdown(): Promise<void>;\n    onExit(): Promise<void>;\n}\nexport type Route = {\n    type: 'conflict';\n} | {\n    type: 'app-page';\n    pages: {\n        originalName: string;\n        htmlEndpoint: Endpoint;\n        rscEndpoint: Endpoint;\n    }[];\n} | {\n    type: 'app-route';\n    originalName: string;\n    endpoint: Endpoint;\n} | {\n    type: 'page';\n    htmlEndpoint: Endpoint;\n    dataEndpoint: Endpoint;\n} | {\n    type: 'page-api';\n    endpoint: Endpoint;\n};\nexport interface Endpoint {\n    /** Write files for the endpoint to disk. */\n    writeToDisk(): Promise<TurbopackResult<WrittenEndpoint>>;\n    /**\n     * Listen to client-side changes to the endpoint.\n     * After clientChanged() has been awaited it will listen to changes.\n     * The async iterator will yield for each change.\n     */\n    clientChanged(): Promise<AsyncIterableIterator<TurbopackResult>>;\n    /**\n     * Listen to server-side changes to the endpoint.\n     * After serverChanged() has been awaited it will listen to changes.\n     * The async iterator will yield for each change.\n     */\n    serverChanged(includeIssues: boolean): Promise<AsyncIterableIterator<TurbopackResult>>;\n}\ninterface EndpointConfig {\n    dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static';\n    dynamicParams?: boolean;\n    revalidate?: 'never' | 'force-cache' | number;\n    fetchCache?: 'auto' | 'default-cache' | 'only-cache' | 'force-cache' | 'default-no-store' | 'only-no-store' | 'force-no-store';\n    runtime?: 'nodejs' | 'edge';\n    preferredRegion?: string;\n}\nexport type ServerPath = {\n    path: string;\n    contentHash: string;\n};\nexport type WrittenEndpoint = {\n    type: 'nodejs';\n    /** The entry path for the endpoint. */\n    entryPath: string;\n    /** All client paths that have been written for the endpoint. */\n    clientPaths: string[];\n    /** All server paths that have been written for the endpoint. */\n    serverPaths: ServerPath[];\n    config: EndpointConfig;\n} | {\n    type: 'edge';\n    /** All client paths that have been written for the endpoint. */\n    clientPaths: string[];\n    /** All server paths that have been written for the endpoint. */\n    serverPaths: ServerPath[];\n    config: EndpointConfig;\n} | {\n    type: 'none';\n    clientPaths: [];\n    serverPaths: [];\n    config: EndpointConfig;\n};\nexport interface ProjectOptions {\n    /**\n     * A root path from which all files must be nested under. Trying to access\n     * a file outside this root will fail. Think of this as a chroot.\n     */\n    rootPath: string;\n    /**\n     * A path inside the root_path which contains the app/pages directories.\n     */\n    projectPath: string;\n    /**\n     * The path to the .next directory.\n     */\n    distDir: string;\n    /**\n     * The next.config.js contents.\n     */\n    nextConfig: NextConfigComplete;\n    /**\n     * Jsconfig, or tsconfig contents.\n     *\n     * Next.js implicitly requires to read it to support few options\n     * https://nextjs.org/docs/architecture/nextjs-compiler#legacy-decorators\n     * https://nextjs.org/docs/architecture/nextjs-compiler#importsource\n     */\n    jsConfig: {\n        compilerOptions: object;\n    };\n    /**\n     * A map of environment variables to use when compiling code.\n     */\n    env: Record<string, string>;\n    defineEnv: DefineEnv;\n    /**\n     * Whether to watch the filesystem for file changes.\n     */\n    watch: {\n        enable: boolean;\n        pollIntervalMs?: number;\n    };\n    /**\n     * The mode in which Next.js is running.\n     */\n    dev: boolean;\n    /**\n     * The server actions encryption key.\n     */\n    encryptionKey: string;\n    /**\n     * The build id.\n     */\n    buildId: string;\n    /**\n     * Options for draft mode.\n     */\n    previewProps: __ApiPreviewProps;\n    /**\n     * The browserslist query to use for targeting browsers.\n     */\n    browserslistQuery: string;\n    /**\n     * When the code is minified, this opts out of the default mangling of local\n     * names for variables, functions etc., which can be useful for\n     * debugging/profiling purposes.\n     */\n    noMangling: boolean;\n}\nexport interface DefineEnv {\n    client: RustifiedEnv;\n    edge: RustifiedEnv;\n    nodejs: RustifiedEnv;\n}\nexport type RustifiedEnv = {\n    name: string;\n    value: string;\n}[];\nexport interface GlobalEntrypoints {\n    app: Endpoint | undefined;\n    document: Endpoint | undefined;\n    error: Endpoint | undefined;\n    middleware: Middleware | undefined;\n    instrumentation: Instrumentation | undefined;\n}\nexport type PageRoute = {\n    type: 'page';\n    htmlEndpoint: Endpoint;\n    dataEndpoint: Endpoint;\n} | {\n    type: 'page-api';\n    endpoint: Endpoint;\n};\nexport type AppRoute = {\n    type: 'app-page';\n    htmlEndpoint: Endpoint;\n    rscEndpoint: Endpoint;\n} | {\n    type: 'app-route';\n    endpoint: Endpoint;\n};\nexport type PageEntrypoints = Map<string, PageRoute>;\nexport type AppEntrypoints = Map<string, AppRoute>;\nexport type Entrypoints = {\n    global: GlobalEntrypoints;\n    page: PageEntrypoints;\n    app: AppEntrypoints;\n};\n"
        }
    ]
}