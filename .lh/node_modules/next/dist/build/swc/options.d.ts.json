{
    "sourceFile": "node_modules/next/dist/build/swc/options.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892661440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type WebpackLayerName } from '../../lib/constants';\nimport type { NextConfig, ExperimentalConfig } from '../../server/config-shared';\nimport type { ResolvedBaseUrl } from '../load-jsconfig';\nexport declare function getParserOptions({ filename, jsConfig, ...rest }: any): any;\nexport declare function getJestSWCOptions({ isServer, filename, esm, modularizeImports, swcPlugins, compilerOptions, jsConfig, resolvedBaseUrl, pagesDir, serverReferenceHashSalt, }: {\n    isServer: boolean;\n    filename: string;\n    esm: boolean;\n    modularizeImports?: NextConfig['modularizeImports'];\n    swcPlugins: ExperimentalConfig['swcPlugins'];\n    compilerOptions: NextConfig['compiler'];\n    jsConfig: any;\n    resolvedBaseUrl?: ResolvedBaseUrl;\n    pagesDir?: string;\n    serverComponents?: boolean;\n    serverReferenceHashSalt: string;\n}): {\n    env: {\n        targets: {\n            node: string;\n        };\n    };\n    module: {\n        type: string;\n    };\n    disableNextSsg: boolean;\n    disablePageConfig: boolean;\n    pagesDir: string | undefined;\n    cssEnv?: {\n        targets: string[];\n    } | undefined;\n    serverComponents: {\n        isReactServerLayer: boolean;\n        dynamicIoEnabled: boolean | undefined;\n        useCacheEnabled: boolean | undefined;\n    } | undefined;\n    serverActions: {\n        isReactServerLayer: boolean;\n        isDevelopment: boolean;\n        useCacheEnabled: boolean | undefined;\n        hashSalt: string;\n        cacheKinds: string[];\n    } | undefined;\n    preferEsm: boolean;\n    lintCodemodComments: boolean;\n    debugFunctionName: boolean;\n    emotion?: {\n        importMap?: {\n            [importName: string]: {\n                [exportName: string]: {\n                    canonicalImport?: [string, string];\n                    styledBaseImport?: [string, string];\n                };\n            };\n        } | undefined;\n        labelFormat?: string | undefined;\n        sourcemap: boolean;\n        enabled: boolean;\n        autoLabel: boolean;\n    } | null | undefined;\n    styledComponents?: {\n        displayName: boolean;\n        topLevelImportPaths?: string[];\n        ssr?: boolean;\n        fileName?: boolean;\n        meaninglessFileNames?: string[];\n        minify?: boolean;\n        transpileTemplateLiterals?: boolean;\n        namespace?: string;\n        pure?: boolean;\n        cssProp?: boolean;\n    } | null | undefined;\n    jsc: {\n        externalHelpers: boolean;\n        parser: any;\n        experimental: {\n            keepImportAttributes: boolean;\n            emitAssertForImportAttributes: boolean;\n            plugins: any[][];\n            cacheRoot: string | undefined;\n        };\n        transform: {\n            legacyDecorator: boolean;\n            decoratorMetadata: boolean;\n            useDefineForClassFields: boolean;\n            react: {\n                importSource: any;\n                runtime: string;\n                pragmaFrag: string;\n                throwIfNamespace: boolean;\n                development: boolean;\n                useBuiltins: boolean;\n                refresh: boolean;\n            };\n            optimizer: {\n                simplify: boolean;\n                globals: {\n                    typeofs: {\n                        window: string;\n                    };\n                    envs: {\n                        NODE_ENV: string;\n                    };\n                } | null;\n            };\n            regenerator: {\n                importPath: string;\n            };\n            hidden?: {\n                jest: boolean;\n            } | undefined;\n        };\n        baseUrl?: string | undefined;\n        paths?: any;\n    };\n    sourceMaps: string | undefined;\n    removeConsole: boolean | {\n        exclude?: string[];\n    } | undefined;\n    reactRemoveProperties: boolean | {\n        properties?: string[];\n    } | undefined;\n    modularizeImports: {\n        [k: string]: {\n            transform: string | string[][];\n            preventFullImport?: boolean;\n            skipDefaultConversion?: boolean;\n        };\n    } | undefined;\n    relay: {\n        src: string;\n        artifactDirectory?: string;\n        language?: \"typescript\" | \"javascript\" | \"flow\";\n        eagerEsModules?: boolean;\n    } | undefined;\n    styledJsx: boolean | {\n        useLightningcss?: boolean;\n    } | {\n        useLightningcss: any;\n    };\n};\nexport declare function getLoaderSWCOptions({ filename, development, isServer, pagesDir, appDir, isPageFile, isDynamicIo, hasReactRefresh, modularizeImports, optimizeServerReact, optimizePackageImports, swcPlugins, compilerOptions, jsConfig, supportedBrowsers, swcCacheDir, relativeFilePathFromRoot, serverComponents, serverReferenceHashSalt, bundleLayer, esm, cacheHandlers, useCacheEnabled, }: {\n    filename: string;\n    development: boolean;\n    isServer: boolean;\n    pagesDir?: string;\n    appDir?: string;\n    isPageFile: boolean;\n    hasReactRefresh: boolean;\n    optimizeServerReact?: boolean;\n    modularizeImports: NextConfig['modularizeImports'];\n    isDynamicIo?: boolean;\n    optimizePackageImports?: NonNullable<NextConfig['experimental']>['optimizePackageImports'];\n    swcPlugins: ExperimentalConfig['swcPlugins'];\n    compilerOptions: NextConfig['compiler'];\n    jsConfig: any;\n    supportedBrowsers: string[] | undefined;\n    swcCacheDir: string;\n    relativeFilePathFromRoot: string;\n    esm?: boolean;\n    serverComponents?: boolean;\n    serverReferenceHashSalt: string;\n    bundleLayer?: WebpackLayerName;\n    cacheHandlers: ExperimentalConfig['cacheHandlers'];\n    useCacheEnabled?: boolean;\n}): any;\n"
        }
    ]
}