{
    "sourceFile": "node_modules/next/dist/build/output/format.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892657486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    formatExpire: null,\n    formatRevalidate: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    formatExpire: function() {\n        return formatExpire;\n    },\n    formatRevalidate: function() {\n        return formatRevalidate;\n    }\n});\nconst timeUnits = [\n    {\n        label: 'y',\n        seconds: 31536000\n    },\n    {\n        label: 'w',\n        seconds: 604800\n    },\n    {\n        label: 'd',\n        seconds: 86400\n    },\n    {\n        label: 'h',\n        seconds: 3600\n    },\n    {\n        label: 'm',\n        seconds: 60\n    },\n    {\n        label: 's',\n        seconds: 1\n    }\n];\nfunction humanReadableTimeRounded(seconds) {\n    // Find the largest fitting unit.\n    let candidateIndex = timeUnits.length - 1;\n    for(let i = 0; i < timeUnits.length; i++){\n        if (seconds >= timeUnits[i].seconds) {\n            candidateIndex = i;\n            break;\n        }\n    }\n    const candidate = timeUnits[candidateIndex];\n    const value = seconds / candidate.seconds;\n    const isExact = Number.isInteger(value);\n    // For days and weeks only, check if using the next smaller unit yields an\n    // exact result.\n    if (!isExact && (candidate.label === 'd' || candidate.label === 'w')) {\n        const nextUnit = timeUnits[candidateIndex + 1];\n        const nextValue = seconds / nextUnit.seconds;\n        if (Number.isInteger(nextValue)) {\n            return `${nextValue}${nextUnit.label}`;\n        }\n    }\n    if (isExact) {\n        return `${value}${candidate.label}`;\n    }\n    return `â‰ˆ${Math.round(value)}${candidate.label}`;\n}\nfunction formatRevalidate(cacheControl) {\n    const { revalidate } = cacheControl;\n    return revalidate ? humanReadableTimeRounded(revalidate) : '';\n}\nfunction formatExpire(cacheControl) {\n    const { expire } = cacheControl;\n    return expire ? humanReadableTimeRounded(expire) : '';\n}\n\n//# sourceMappingURL=format.js.map"
        }
    ]
}