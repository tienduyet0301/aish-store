{
    "sourceFile": "node_modules/next/dist/build/entries.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892655289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfigComplete } from '../server/config-shared';\nimport type { webpack } from 'next/dist/compiled/webpack/webpack';\nimport type { MiddlewareConfig, PageStaticInfo } from './analysis/get-page-static-info';\nimport type { LoadedEnvFiles } from '@next/env';\nimport type { AppLoaderOptions } from './webpack/loaders/next-app-loader';\nimport type { CompilerNameValues } from '../shared/lib/constants';\nimport type { __ApiPreviewProps } from '../server/api-utils';\nimport type { ServerRuntime } from '../types';\nimport type { PageExtensions } from './page-extensions-type';\nimport type { MappedPages } from './build-context';\nimport { PAGE_TYPES } from '../lib/page-types';\nexport declare function sortByPageExts(pageExtensions: PageExtensions): (a: string, b: string) => number;\nexport declare function getStaticInfoIncludingLayouts({ isInsideAppDir, pageExtensions, pageFilePath, appDir, config: nextConfig, isDev, page, }: {\n    isInsideAppDir: boolean;\n    pageExtensions: PageExtensions;\n    pageFilePath: string;\n    appDir: string | undefined;\n    config: NextConfigComplete;\n    isDev: boolean | undefined;\n    page: string;\n}): Promise<PageStaticInfo>;\ntype ObjectValue<T> = T extends {\n    [key: string]: infer V;\n} ? V : never;\n/**\n * For a given page path removes the provided extensions.\n */\nexport declare function getPageFromPath(pagePath: string, pageExtensions: PageExtensions): string;\nexport declare function getPageFilePath({ absolutePagePath, pagesDir, appDir, rootDir, }: {\n    absolutePagePath: string;\n    pagesDir: string | undefined;\n    appDir: string | undefined;\n    rootDir: string;\n}): string;\n/**\n * Creates a mapping of route to page file path for a given list of page paths.\n * For example ['/middleware.ts'] is turned into  { '/middleware': `${ROOT_DIR_ALIAS}/middleware.ts` }\n */\nexport declare function createPagesMapping({ isDev, pageExtensions, pagePaths, pagesType, pagesDir, appDir, }: {\n    isDev: boolean;\n    pageExtensions: PageExtensions;\n    pagePaths: string[];\n    pagesType: PAGE_TYPES;\n    pagesDir: string | undefined;\n    appDir: string | undefined;\n}): Promise<MappedPages>;\nexport interface CreateEntrypointsParams {\n    buildId: string;\n    config: NextConfigComplete;\n    envFiles: LoadedEnvFiles;\n    isDev?: boolean;\n    pages: MappedPages;\n    pagesDir?: string;\n    previewMode: __ApiPreviewProps;\n    rootDir: string;\n    rootPaths?: MappedPages;\n    appDir?: string;\n    appPaths?: MappedPages;\n    pageExtensions: PageExtensions;\n    hasInstrumentationHook?: boolean;\n}\nexport declare function getEdgeServerEntry(opts: {\n    rootDir: string;\n    absolutePagePath: string;\n    buildId: string;\n    bundlePath: string;\n    config: NextConfigComplete;\n    isDev: boolean;\n    isServerComponent: boolean;\n    page: string;\n    pages: MappedPages;\n    middleware?: Partial<MiddlewareConfig>;\n    pagesType: PAGE_TYPES;\n    appDirLoader?: string;\n    hasInstrumentationHook?: boolean;\n    preferredRegion: string | string[] | undefined;\n    middlewareConfig?: MiddlewareConfig;\n}): {\n    import: string;\n    layer: \"rsc\";\n} | {\n    import: string;\n    layer: \"middleware\";\n} | {\n    import: string;\n    layer: \"api-edge\";\n} | {\n    import: string;\n    layer: \"ssr\" | undefined;\n};\nexport declare function getInstrumentationEntry(opts: {\n    absolutePagePath: string;\n    isEdgeServer: boolean;\n    isDev: boolean;\n}): {\n    import: string;\n    filename: string;\n    layer: \"instrument\";\n};\nexport declare function getAppLoader(): \"builtin:next-app-loader\" | \"next-app-loader\";\nexport declare function getAppEntry(opts: Readonly<AppLoaderOptions>): {\n    import: string;\n    layer: \"rsc\";\n};\nexport declare function getClientEntry(opts: {\n    absolutePagePath: string;\n    page: string;\n}): string | string[];\nexport declare function runDependingOnPageType<T>(params: {\n    onClient: () => T;\n    onEdgeServer: () => T;\n    onServer: () => T;\n    page: string;\n    pageRuntime: ServerRuntime;\n    pageType?: PAGE_TYPES;\n}): void;\nexport declare function createEntrypoints(params: CreateEntrypointsParams): Promise<{\n    client: webpack.EntryObject;\n    server: webpack.EntryObject;\n    edgeServer: webpack.EntryObject;\n    middlewareMatchers: undefined;\n}>;\nexport declare function finalizeEntrypoint({ name, compilerType, value, isServerComponent, hasAppDir, }: {\n    compilerType?: CompilerNameValues;\n    name: string;\n    value: ObjectValue<webpack.EntryObject>;\n    isServerComponent?: boolean;\n    hasAppDir?: boolean;\n}): ObjectValue<webpack.EntryObject>;\nexport {};\n"
        }
    ]
}