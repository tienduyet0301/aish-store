{
    "sourceFile": "node_modules/next/dist/build/load-entrypoint.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892656736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"loadEntrypoint\", {\n    enumerable: true,\n    get: function() {\n        return loadEntrypoint;\n    }\n});\nconst _promises = /*#__PURE__*/ _interop_require_default(require(\"fs/promises\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n// NOTE: this should be updated if this loader file is moved.\nconst PACKAGE_ROOT = _path.default.normalize(_path.default.join(__dirname, '../../..'));\nconst TEMPLATE_FOLDER = _path.default.join(__dirname, 'templates');\nconst TEMPLATES_ESM_FOLDER = _path.default.normalize(_path.default.join(__dirname, '../../dist/esm/build/templates'));\nasync function loadEntrypoint(entrypoint, replacements, injections, imports) {\n    const filepath = _path.default.resolve(_path.default.join(TEMPLATES_ESM_FOLDER, `${entrypoint}.js`));\n    let file = await _promises.default.readFile(filepath, 'utf8');\n    // Update the relative imports to be absolute. This will update any relative\n    // imports to be relative to the root of the `next` package.\n    let count = 0;\n    file = file.replaceAll(/from '(\\..*)'|import '(\\..*)'/g, function(_, fromRequest, importRequest) {\n        count++;\n        const relative = _path.default.relative(PACKAGE_ROOT, _path.default.resolve(TEMPLATE_FOLDER, fromRequest ?? importRequest))// Ensure that we use linux style path separators for node.\n        .replace(/\\\\/g, '/');\n        // Verify that the relative import is relative to the `next` package. This\n        // will catch cases where the constants at the top of the file were not\n        // updated after the file was moved.\n        if (!relative.startsWith('next/')) {\n            throw Object.defineProperty(new Error(`Invariant: Expected relative import to start with \"next/\", found \"${relative}\"`), \"__NEXT_ERROR_CODE\", {\n                value: \"E214\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        return fromRequest ? `from ${JSON.stringify(relative)}` : `import ${JSON.stringify(relative)}`;\n    });\n    // Verify that at least one import was replaced. It's the case today where\n    // every template file has at least one import to update, so this ensures that\n    // we don't accidentally remove the import replacement code or use the wrong\n    // template file.\n    if (count === 0) {\n        throw Object.defineProperty(new Error('Invariant: Expected to replace at least one import'), \"__NEXT_ERROR_CODE\", {\n            value: \"E363\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const replaced = new Set();\n    // Replace all the template variables with the actual values. If a template\n    // variable is missing, throw an error.\n    file = file.replaceAll(new RegExp(`${Object.keys(replacements).map((k)=>`'${k}'`).join('|')}`, 'g'), (match)=>{\n        const key = JSON.parse(match.replace(/'/g, `\"`));\n        if (!(key in replacements)) {\n            throw Object.defineProperty(new Error(`Invariant: Unexpected template variable ${key}`), \"__NEXT_ERROR_CODE\", {\n                value: \"E9\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        replaced.add(key);\n        return JSON.stringify(replacements[key]);\n    });\n    // Check to see if there's any remaining template variables.\n    let matches = file.match(/VAR_[A-Z_]+/g);\n    if (matches) {\n        throw Object.defineProperty(new Error(`Invariant: Expected to replace all template variables, found ${matches.join(', ')}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E415\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // Check to see if any template variable was provided but not used.\n    if (replaced.size !== Object.keys(replacements).length) {\n        // Find the difference between the provided replacements and the replaced\n        // template variables. This will let us notify the user of any template\n        // variables that were not used but were provided.\n        const difference = Object.keys(replacements).filter((key)=>!replaced.has(key));\n        throw Object.defineProperty(new Error(`Invariant: Expected to replace all template variables, missing ${difference.join(', ')} in template`), \"__NEXT_ERROR_CODE\", {\n            value: \"E196\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // Replace the injections.\n    const injected = new Set();\n    if (injections) {\n        // Track all the injections to ensure that we're not missing any.\n        file = file.replaceAll(new RegExp(`// INJECT:(${Object.keys(injections).join('|')})`, 'g'), (_, key)=>{\n            if (!(key in injections)) {\n                throw Object.defineProperty(new Error(`Invariant: Unexpected injection ${key}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E26\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            injected.add(key);\n            return `const ${key} = ${injections[key]}`;\n        });\n    }\n    // Check to see if there's any remaining injections.\n    matches = file.match(/\\/\\/ INJECT:[A-Za-z0-9_]+/g);\n    if (matches) {\n        throw Object.defineProperty(new Error(`Invariant: Expected to inject all injections, found ${matches.join(', ')}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E84\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // Check to see if any injection was provided but not used.\n    if (injected.size !== Object.keys(injections ?? {}).length) {\n        // Find the difference between the provided injections and the injected\n        // injections. This will let us notify the user of any injections that were\n        // not used but were provided.\n        const difference = Object.keys(injections ?? {}).filter((key)=>!injected.has(key));\n        throw Object.defineProperty(new Error(`Invariant: Expected to inject all injections, missing ${difference.join(', ')} in template`), \"__NEXT_ERROR_CODE\", {\n            value: \"E382\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // Replace the optional imports.\n    const importsAdded = new Set();\n    if (imports) {\n        // Track all the imports to ensure that we're not missing any.\n        file = file.replaceAll(new RegExp(`// OPTIONAL_IMPORT:(\\\\* as )?(${Object.keys(imports).join('|')})`, 'g'), (_, asNamespace = '', key)=>{\n            if (!(key in imports)) {\n                throw Object.defineProperty(new Error(`Invariant: Unexpected optional import ${key}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E85\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            importsAdded.add(key);\n            if (imports[key]) {\n                return `import ${asNamespace}${key} from ${JSON.stringify(imports[key])}`;\n            } else {\n                return `const ${key} = null`;\n            }\n        });\n    }\n    // Check to see if there's any remaining imports.\n    matches = file.match(/\\/\\/ OPTIONAL_IMPORT:(\\* as )?[A-Za-z0-9_]+/g);\n    if (matches) {\n        throw Object.defineProperty(new Error(`Invariant: Expected to inject all imports, found ${matches.join(', ')}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E384\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // Check to see if any import was provided but not used.\n    if (importsAdded.size !== Object.keys(imports ?? {}).length) {\n        // Find the difference between the provided imports and the injected\n        // imports. This will let us notify the user of any imports that were\n        // not used but were provided.\n        const difference = Object.keys(imports ?? {}).filter((key)=>!importsAdded.has(key));\n        throw Object.defineProperty(new Error(`Invariant: Expected to inject all imports, missing ${difference.join(', ')} in template`), \"__NEXT_ERROR_CODE\", {\n            value: \"E150\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return file;\n}\n\n//# sourceMappingURL=load-entrypoint.js.map"
        }
    ]
}