{
    "sourceFile": "node_modules/next/dist/build/get-babel-loader-config.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892655526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ReactCompilerOptions } from '../server/config-shared';\ndeclare const getBabelLoader: (useSWCLoader: boolean | undefined, babelConfigFile: string | undefined, isServer: boolean, distDir: string, pagesDir: string | undefined, cwd: string, srcDir: string, dev: boolean, isClient: boolean, reactCompilerOptions: boolean | ReactCompilerOptions | undefined, reactCompilerExclude: ((excludePath: string) => boolean) | undefined) => {\n    loader: string;\n    options: {\n        transformMode: string;\n        configFile: string | undefined;\n        isServer: boolean;\n        distDir: string;\n        pagesDir: string | undefined;\n        cwd: string;\n        srcDir: string;\n        development: boolean;\n        hasReactRefresh: boolean;\n        hasJsxRuntime: boolean;\n        reactCompilerPlugins: (string | {\n            compilationMode?: \"infer\" | \"annotation\" | \"all\";\n            panicThreshold: string | undefined;\n        })[][] | undefined;\n        reactCompilerExclude: ((excludePath: string) => boolean) | undefined;\n    };\n} | undefined;\n/**\n * Get a separate babel loader for the react compiler, only used if Babel is not\n * configured through e.g. .babelrc. If user have babel config, this should be configured in the babel loader itself.\n * Note from react compiler:\n * > For best results, compiler must run as the first plugin in your Babel pipeline so it receives input as close to the original source as possible.\n */\ndeclare const getReactCompilerLoader: (options: boolean | ReactCompilerOptions | undefined, cwd: string, isDev: boolean, isServer: boolean, reactCompilerExclude: ((excludePath: string) => boolean) | undefined) => any;\nexport { getBabelLoader, getReactCompilerLoader };\n"
        }
    ]
}