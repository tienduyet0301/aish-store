{
    "sourceFile": "node_modules/next/dist/build/turborepo-access-trace/result.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892663203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"TurborepoAccessTraceResult\", {\n    enumerable: true,\n    get: function() {\n        return TurborepoAccessTraceResult;\n    }\n});\nclass TurborepoAccessTraceResult {\n    constructor(envVars = new Set([]), addresses = [], fsPaths = new Set([])){\n        this.envVars = envVars;\n        this.addresses = addresses;\n        this.fsPaths = fsPaths;\n    }\n    /**\n   * Merge another `TurborepoAccessTraceResult` into this one, mutating this `TurborepoAccessTraceResult`.\n   */ merge(other) {\n        other.envVars.forEach((envVar)=>this.envVars.add(envVar));\n        other.fsPaths.forEach((path)=>this.fsPaths.add(path));\n        this.addresses.push(...other.addresses);\n        return this;\n    }\n    /**\n   * Serialize this `TurborepoAccessTraceResult` into a serializable object. Used for passing\n   * the `TurborepoAccessTraceResult` between workers where Sets are not serializable.\n   */ serialize() {\n        return {\n            fs: Array.from(this.fsPaths).map(String),\n            addresses: this.addresses,\n            envVars: Array.from(this.envVars).map(String)\n        };\n    }\n    /**\n   * Squash this `TurborepoAccessTraceResult` into a public trace object that can be written to a file\n   */ toPublicTrace() {\n        return {\n            network: this.addresses.length > 0,\n            envVarKeys: Array.from(this.envVars).map(String),\n            filePaths: Array.from(this.fsPaths).map(String)\n        };\n    }\n    /**\n   * Create an `TurborepoAccessTraceResult` from a serialized `SerializableTurborepoAccessTraceResult`\n   */ static fromSerialized(serialized) {\n        return new TurborepoAccessTraceResult(new Set(serialized.envVars), serialized.addresses, new Set(serialized.fs));\n    }\n}\n\n//# sourceMappingURL=result.js.map"
        }
    ]
}