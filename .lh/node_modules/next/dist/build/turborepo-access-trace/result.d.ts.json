{
    "sourceFile": "node_modules/next/dist/build/turborepo-access-trace/result.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892663165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Addresses, EnvVars, FS, SerializableTurborepoAccessTraceResult, PublicTurborepoAccessTraceResult } from './types';\nexport declare class TurborepoAccessTraceResult {\n    private envVars;\n    private addresses;\n    private fsPaths;\n    constructor(envVars?: EnvVars, addresses?: Addresses, fsPaths?: FS);\n    /**\n     * Merge another `TurborepoAccessTraceResult` into this one, mutating this `TurborepoAccessTraceResult`.\n     */\n    merge(other: TurborepoAccessTraceResult): this;\n    /**\n     * Serialize this `TurborepoAccessTraceResult` into a serializable object. Used for passing\n     * the `TurborepoAccessTraceResult` between workers where Sets are not serializable.\n     */\n    serialize(): SerializableTurborepoAccessTraceResult;\n    /**\n     * Squash this `TurborepoAccessTraceResult` into a public trace object that can be written to a file\n     */\n    toPublicTrace(): PublicTurborepoAccessTraceResult;\n    /**\n     * Create an `TurborepoAccessTraceResult` from a serialized `SerializableTurborepoAccessTraceResult`\n     */\n    static fromSerialized(serialized: SerializableTurborepoAccessTraceResult): TurborepoAccessTraceResult;\n}\n"
        }
    ]
}