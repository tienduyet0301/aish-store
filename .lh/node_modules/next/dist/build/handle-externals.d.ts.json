{
    "sourceFile": "node_modules/next/dist/build/handle-externals.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892655711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { WebpackLayerName } from '../lib/constants';\nimport type { NextConfigComplete } from '../server/config-shared';\nimport type { ResolveOptions } from 'webpack';\nexport declare function isResourceInPackages(resource: string, packageNames?: string[], packageDirMapping?: Map<string, string>): boolean;\nexport declare function resolveExternal(dir: string, esmExternalsConfig: NextConfigComplete['experimental']['esmExternals'], context: string, request: string, isEsmRequested: boolean, getResolve: (options: ResolveOptions) => (resolveContext: string, resolveRequest: string) => Promise<[string | null, boolean]>, isLocalCallback?: (res: string) => any, baseResolveCheck?: boolean, esmResolveOptions?: any, nodeResolveOptions?: any, baseEsmResolveOptions?: any, baseResolveOptions?: any): Promise<{\n    localRes: any;\n    res?: undefined;\n    isEsm?: undefined;\n} | {\n    res: string | null;\n    isEsm: boolean;\n    localRes?: undefined;\n}>;\nexport declare function makeExternalHandler({ config, optOutBundlingPackageRegex, transpiledPackages, dir, }: {\n    config: NextConfigComplete;\n    optOutBundlingPackageRegex: RegExp;\n    transpiledPackages: string[];\n    dir: string;\n}): (context: string, request: string, dependencyType: string, layer: WebpackLayerName | null, getResolve: (options: any) => (resolveContext: string, resolveRequest: string) => Promise<[string | null, boolean]>) => Promise<any>;\n"
        }
    ]
}