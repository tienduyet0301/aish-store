{
    "sourceFile": "node_modules/next/dist/build/segment-config/app/app-segment-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892659490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    AppSegmentConfigSchemaKeys: null,\n    parseAppSegmentConfig: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    AppSegmentConfigSchemaKeys: function() {\n        return AppSegmentConfigSchemaKeys;\n    },\n    parseAppSegmentConfig: function() {\n        return parseAppSegmentConfig;\n    }\n});\nconst _zod = require(\"next/dist/compiled/zod\");\nconst _zod1 = require(\"../../../shared/lib/zod\");\n/**\n * The schema for configuration for a page.\n */ const AppSegmentConfigSchema = _zod.z.object({\n    /**\n   * The number of seconds to revalidate the page or false to disable revalidation.\n   */ revalidate: _zod.z.union([\n        _zod.z.number().int().nonnegative(),\n        _zod.z.literal(false)\n    ]).optional(),\n    /**\n   * Whether the page supports dynamic parameters.\n   */ dynamicParams: _zod.z.boolean().optional(),\n    /**\n   * The dynamic behavior of the page.\n   */ dynamic: _zod.z.enum([\n        'auto',\n        'error',\n        'force-static',\n        'force-dynamic'\n    ]).optional(),\n    /**\n   * The caching behavior of the page.\n   */ fetchCache: _zod.z.enum([\n        'auto',\n        'default-cache',\n        'only-cache',\n        'force-cache',\n        'force-no-store',\n        'default-no-store',\n        'only-no-store'\n    ]).optional(),\n    /**\n   * The preferred region for the page.\n   */ preferredRegion: _zod.z.union([\n        _zod.z.string(),\n        _zod.z.array(_zod.z.string())\n    ]).optional(),\n    /**\n   * Whether the page supports partial prerendering. When true, the page will be\n   * served using partial prerendering. This setting will only take affect if\n   * it's enabled via the `experimental.ppr = \"incremental\"` option.\n   */ experimental_ppr: _zod.z.boolean().optional(),\n    /**\n   * The runtime to use for the page.\n   */ runtime: _zod.z.enum([\n        'edge',\n        'nodejs'\n    ]).optional(),\n    /**\n   * The maximum duration for the page in seconds.\n   */ maxDuration: _zod.z.number().int().nonnegative().optional()\n});\nfunction parseAppSegmentConfig(data, route) {\n    const parsed = AppSegmentConfigSchema.safeParse(data, {\n        errorMap: (issue, ctx)=>{\n            if (issue.path.length === 1 && issue.path[0] === 'revalidate') {\n                return {\n                    message: `Invalid revalidate value ${JSON.stringify(ctx.data)} on \"${route}\", must be a non-negative number or false`\n                };\n            }\n            return {\n                message: ctx.defaultError\n            };\n        }\n    });\n    if (!parsed.success) {\n        throw (0, _zod1.formatZodError)(`Invalid segment configuration options detected for \"${route}\". Read more at https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config`, parsed.error);\n    }\n    return parsed.data;\n}\nconst AppSegmentConfigSchemaKeys = AppSegmentConfigSchema.keyof().options;\n\n//# sourceMappingURL=app-segment-config.js.map"
        }
    ]
}