{
    "sourceFile": "node_modules/next/dist/build/segment-config/middleware/middleware-config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892659750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    MiddlewareConfigInputSchema: null,\n    MiddlewareConfigInputSchemaKeys: null,\n    SourceSchema: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    MiddlewareConfigInputSchema: function() {\n        return MiddlewareConfigInputSchema;\n    },\n    MiddlewareConfigInputSchemaKeys: function() {\n        return MiddlewareConfigInputSchemaKeys;\n    },\n    SourceSchema: function() {\n        return SourceSchema;\n    }\n});\nconst _picomatch = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/picomatch\"));\nconst _zod = require(\"next/dist/compiled/zod\");\nconst _trytoparsepath = require(\"../../../lib/try-to-parse-path\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst RouteHasSchema = _zod.z.discriminatedUnion('type', [\n    _zod.z.object({\n        type: _zod.z.enum([\n            'header',\n            'query',\n            'cookie'\n        ]),\n        key: _zod.z.string({\n            required_error: 'key is required when type is header, query or cookie'\n        }),\n        value: _zod.z.string({\n            invalid_type_error: 'value must be a string'\n        }).optional()\n    }).strict(),\n    _zod.z.object({\n        type: _zod.z.literal('host'),\n        value: _zod.z.string({\n            required_error: 'host must have a value'\n        })\n    }).strict()\n]);\nconst SourceSchema = _zod.z.string({\n    required_error: 'source is required'\n}).max(4096, 'exceeds max built length of 4096 for route').superRefine((val, ctx)=>{\n    if (!val.startsWith('/')) {\n        return ctx.addIssue({\n            code: _zod.z.ZodIssueCode.custom,\n            message: `source must start with /`\n        });\n    }\n    const { error, regexStr } = (0, _trytoparsepath.tryToParsePath)(val);\n    if (error || !regexStr) {\n        ctx.addIssue({\n            code: _zod.z.ZodIssueCode.custom,\n            message: `Invalid source '${val}': ${error.message}`\n        });\n    }\n});\nconst MiddlewareMatcherInputSchema = _zod.z.object({\n    locale: _zod.z.union([\n        _zod.z.literal(false),\n        _zod.z.undefined()\n    ]).optional(),\n    has: _zod.z.array(RouteHasSchema).optional(),\n    missing: _zod.z.array(RouteHasSchema).optional(),\n    source: SourceSchema\n}).strict();\nconst MiddlewareConfigMatcherInputSchema = _zod.z.union([\n    SourceSchema,\n    _zod.z.array(_zod.z.union([\n        SourceSchema,\n        MiddlewareMatcherInputSchema\n    ], {\n        invalid_type_error: 'must be an array of strings or middleware matchers'\n    }))\n]);\nconst GlobSchema = _zod.z.string().superRefine((val, ctx)=>{\n    try {\n        (0, _picomatch.default)(val);\n    } catch (err) {\n        ctx.addIssue({\n            code: _zod.z.ZodIssueCode.custom,\n            message: `Invalid glob pattern '${val}': ${err.message}`\n        });\n    }\n});\nconst MiddlewareConfigInputSchema = _zod.z.object({\n    /**\n   * The matcher for the middleware.\n   */ matcher: MiddlewareConfigMatcherInputSchema.optional(),\n    /**\n   * The regions that the middleware should run in.\n   */ regions: _zod.z.union([\n        _zod.z.string(),\n        _zod.z.array(_zod.z.string())\n    ]).optional(),\n    /**\n   * A glob, or an array of globs, ignoring dynamic code evaluation for specific\n   * files. The globs are relative to your application root folder.\n   */ unstable_allowDynamic: _zod.z.union([\n        GlobSchema,\n        _zod.z.array(GlobSchema)\n    ]).optional()\n});\nconst MiddlewareConfigInputSchemaKeys = MiddlewareConfigInputSchema.keyof().options;\n\n//# sourceMappingURL=middleware-config.js.map"
        }
    ]
}