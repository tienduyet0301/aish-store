{
    "sourceFile": "node_modules/next/dist/build/collect-build-traces.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892654892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"collectBuildTraces\", {\n    enumerable: true,\n    get: function() {\n        return collectBuildTraces;\n    }\n});\nconst _trace = require(\"../trace\");\nconst _nexttraceentrypointsplugin = require(\"./webpack/plugins/next-trace-entrypoints-plugin\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _promises = /*#__PURE__*/ _interop_require_default(require(\"fs/promises\"));\nconst _nonnullable = require(\"../lib/non-nullable\");\nconst _ciinfo = /*#__PURE__*/ _interop_require_wildcard(require(\"../server/ci-info\"));\nconst _debug = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/debug\"));\nconst _picomatch = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/picomatch\"));\nconst _requirehook = require(\"../server/require-hook\");\nconst _nft = require(\"next/dist/compiled/@vercel/nft\");\nconst _normalizepagepath = require(\"../shared/lib/page-path/normalize-page-path\");\nconst _apppaths = require(\"../shared/lib/router/utils/app-paths\");\nconst _iserror = /*#__PURE__*/ _interop_require_default(require(\"../lib/is-error\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst debug = (0, _debug.default)('next:build:build-traces');\nfunction shouldIgnore(file, serverIgnoreFn, reasons, cachedIgnoreFiles, children = new Set()) {\n    if (cachedIgnoreFiles.has(file)) {\n        return cachedIgnoreFiles.get(file);\n    }\n    if (serverIgnoreFn(file)) {\n        cachedIgnoreFiles.set(file, true);\n        return true;\n    }\n    children.add(file);\n    const reason = reasons.get(file);\n    if (!reason || reason.parents.size === 0 || reason.type.includes('initial')) {\n        cachedIgnoreFiles.set(file, false);\n        return false;\n    }\n    // if all parents are ignored the child file\n    // should be ignored as well\n    let allParentsIgnored = true;\n    for (const parent of reason.parents.values()){\n        if (!children.has(parent)) {\n            children.add(parent);\n            if (!shouldIgnore(parent, serverIgnoreFn, reasons, cachedIgnoreFiles, children)) {\n                allParentsIgnored = false;\n                break;\n            }\n        }\n    }\n    cachedIgnoreFiles.set(file, allParentsIgnored);\n    return allParentsIgnored;\n}\nasync function collectBuildTraces({ dir, config, distDir, edgeRuntimeRoutes, staticPages, nextBuildSpan = new _trace.Span({\n    name: 'build'\n}), hasSsrAmpPages, buildTraceContext, outputFileTracingRoot }) {\n    const startTime = Date.now();\n    debug('starting build traces');\n    const { outputFileTracingIncludes = {}, outputFileTracingExcludes = {} } = config;\n    const excludeGlobKeys = Object.keys(outputFileTracingExcludes);\n    const includeGlobKeys = Object.keys(outputFileTracingIncludes);\n    await nextBuildSpan.traceChild('node-file-trace-build', {\n        isTurbotrace: 'false'\n    }).traceAsyncFn(async ()=>{\n        const nextServerTraceOutput = _path.default.join(distDir, 'next-server.js.nft.json');\n        const nextMinimalTraceOutput = _path.default.join(distDir, 'next-minimal-server.js.nft.json');\n        const root = outputFileTracingRoot;\n        // Under standalone mode, we need to trace the extra IPC server and\n        // worker files.\n        const isStandalone = config.output === 'standalone';\n        const sharedEntriesSet = Object.keys(_requirehook.defaultOverrides).map((value)=>require.resolve(value, {\n                paths: [\n                    require.resolve('next/dist/server/require-hook')\n                ]\n            }));\n        const { cacheHandler } = config;\n        const { cacheHandlers } = config.experimental;\n        // ensure we trace any dependencies needed for custom\n        // incremental cache handler\n        if (cacheHandler) {\n            sharedEntriesSet.push(require.resolve(_path.default.isAbsolute(cacheHandler) ? cacheHandler : _path.default.join(dir, cacheHandler)));\n        }\n        if (cacheHandlers) {\n            for (const handlerPath of Object.values(cacheHandlers)){\n                if (handlerPath) {\n                    sharedEntriesSet.push(require.resolve(_path.default.isAbsolute(handlerPath) ? handlerPath : _path.default.join(dir, handlerPath)));\n                }\n            }\n        }\n        const serverEntries = [\n            ...sharedEntriesSet,\n            ...isStandalone ? [\n                require.resolve('next/dist/server/lib/start-server'),\n                require.resolve('next/dist/server/next'),\n                require.resolve('next/dist/server/require-hook')\n            ] : [],\n            require.resolve('next/dist/server/next-server')\n        ].filter(Boolean);\n        const minimalServerEntries = [\n            ...sharedEntriesSet,\n            require.resolve('next/dist/compiled/next-server/server.runtime.prod')\n        ].filter(Boolean);\n        const additionalIgnores = new Set();\n        for (const glob of excludeGlobKeys){\n            if ((0, _picomatch.default)(glob)('next-server')) {\n                outputFileTracingExcludes[glob].forEach((exclude)=>{\n                    additionalIgnores.add(exclude);\n                });\n            }\n        }\n        const makeIgnoreFn = (ignores)=>{\n            // pre compile the ignore globs\n            const isMatch = (0, _picomatch.default)(ignores, {\n                contains: true,\n                dot: true\n            });\n            return (pathname)=>{\n                if (_path.default.isAbsolute(pathname) && !pathname.startsWith(root)) {\n                    return true;\n                }\n                return isMatch(pathname);\n            };\n        };\n        const sharedIgnores = [\n            '**/next/dist/compiled/next-server/**/*.dev.js',\n            ...isStandalone ? [] : [\n                '**/next/dist/compiled/jest-worker/**/*'\n            ],\n            '**/next/dist/compiled/webpack/*',\n            '**/node_modules/webpack5/**/*',\n            '**/next/dist/server/lib/route-resolver*',\n            'next/dist/compiled/semver/semver/**/*.js',\n            ..._ciinfo.hasNextSupport ? [\n                // only ignore image-optimizer code when\n                // this is being handled outside of next-server\n                '**/next/dist/server/image-optimizer.js'\n            ] : [],\n            ...!hasSsrAmpPages ? [\n                '**/next/dist/compiled/@ampproject/toolbox-optimizer/**/*'\n            ] : [],\n            ...isStandalone ? [] : _nexttraceentrypointsplugin.TRACE_IGNORES,\n            ...additionalIgnores\n        ];\n        const sharedIgnoresFn = makeIgnoreFn(sharedIgnores);\n        const serverIgnores = [\n            ...sharedIgnores,\n            '**/node_modules/react{,-dom,-dom-server-turbopack}/**/*.development.js',\n            '**/*.d.ts',\n            '**/*.map',\n            '**/next/dist/pages/**/*',\n            ..._ciinfo.hasNextSupport ? [\n                '**/node_modules/sharp/**/*',\n                '**/@img/sharp-libvips*/**/*'\n            ] : []\n        ].filter(_nonnullable.nonNullable);\n        const serverIgnoreFn = makeIgnoreFn(serverIgnores);\n        const minimalServerIgnores = [\n            ...serverIgnores,\n            '**/next/dist/compiled/edge-runtime/**/*',\n            '**/next/dist/server/web/sandbox/**/*',\n            '**/next/dist/server/post-process.js'\n        ];\n        const minimalServerIgnoreFn = makeIgnoreFn(minimalServerIgnores);\n        const routesIgnores = [\n            ...sharedIgnores,\n            // server chunks are provided via next-trace-entrypoints-plugin plugin\n            // as otherwise all chunks are traced here and included for all pages\n            // whether they are needed or not\n            '**/.next/server/chunks/**',\n            '**/next/dist/server/optimize-amp.js',\n            '**/next/dist/server/post-process.js'\n        ].filter(_nonnullable.nonNullable);\n        const routeIgnoreFn = makeIgnoreFn(routesIgnores);\n        const serverTracedFiles = new Set();\n        const minimalServerTracedFiles = new Set();\n        function addToTracedFiles(base, file, dest) {\n            dest.add(_path.default.relative(distDir, _path.default.join(base, file)).replace(/\\\\/g, '/'));\n        }\n        if (isStandalone) {\n            addToTracedFiles('', require.resolve('next/dist/compiled/jest-worker/processChild'), serverTracedFiles);\n            addToTracedFiles('', require.resolve('next/dist/compiled/jest-worker/threadChild'), serverTracedFiles);\n        }\n        {\n            var _buildTraceContext_chunksTrace;\n            const chunksToTrace = [\n                ...(buildTraceContext == null ? void 0 : (_buildTraceContext_chunksTrace = buildTraceContext.chunksTrace) == null ? void 0 : _buildTraceContext_chunksTrace.action.input) || [],\n                ...serverEntries,\n                ...minimalServerEntries\n            ];\n            const result = await (0, _nft.nodeFileTrace)(chunksToTrace, {\n                base: outputFileTracingRoot,\n                processCwd: dir,\n                mixedModules: true,\n                async readFile (p) {\n                    try {\n                        return await _promises.default.readFile(p, 'utf8');\n                    } catch (e) {\n                        if ((0, _iserror.default)(e) && (e.code === 'ENOENT' || e.code === 'EISDIR')) {\n                            // since tracing runs in parallel with static generation server\n                            // files might be removed from that step so tolerate ENOENT\n                            // errors gracefully\n                            return '';\n                        }\n                        throw e;\n                    }\n                },\n                async readlink (p) {\n                    try {\n                        return await _promises.default.readlink(p);\n                    } catch (e) {\n                        if ((0, _iserror.default)(e) && (e.code === 'EINVAL' || e.code === 'ENOENT' || e.code === 'UNKNOWN')) {\n                            return null;\n                        }\n                        throw e;\n                    }\n                },\n                async stat (p) {\n                    try {\n                        return await _promises.default.stat(p);\n                    } catch (e) {\n                        if ((0, _iserror.default)(e) && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) {\n                            return null;\n                        }\n                        throw e;\n                    }\n                },\n                // handle shared ignores at top-level as it\n                // avoids over-tracing when we don't need to\n                // and speeds up total trace time\n                ignore (p) {\n                    if (sharedIgnoresFn(p)) {\n                        return true;\n                    }\n                    // if a chunk is attempting to be traced that isn't\n                    // in our initial list we need to ignore it to prevent\n                    // over tracing as webpack needs to be the source of\n                    // truth for which chunks should be included for each entry\n                    if (p.includes('.next/server/chunks') && !chunksToTrace.includes(_path.default.join(outputFileTracingRoot, p))) {\n                        return true;\n                    }\n                    return false;\n                }\n            });\n            const reasons = result.reasons;\n            const fileList = result.fileList;\n            for (const file of result.esmFileList){\n                fileList.add(file);\n            }\n            const parentFilesMap = (0, _nexttraceentrypointsplugin.getFilesMapFromReasons)(fileList, reasons);\n            const cachedLookupIgnore = new Map();\n            const cachedLookupIgnoreMinimal = new Map();\n            for (const [entries, tracedFiles] of [\n                [\n                    serverEntries,\n                    serverTracedFiles\n                ],\n                [\n                    minimalServerEntries,\n                    minimalServerTracedFiles\n                ]\n            ]){\n                for (const file of entries){\n                    var _parentFilesMap_get;\n                    const curFiles = [\n                        ...((_parentFilesMap_get = parentFilesMap.get(_path.default.relative(outputFileTracingRoot, file))) == null ? void 0 : _parentFilesMap_get.keys()) || []\n                    ];\n                    tracedFiles.add(_path.default.relative(distDir, file).replace(/\\\\/g, '/'));\n                    for (const curFile of curFiles || []){\n                        const filePath = _path.default.join(outputFileTracingRoot, curFile);\n                        if (!shouldIgnore(curFile, tracedFiles === minimalServerTracedFiles ? minimalServerIgnoreFn : serverIgnoreFn, reasons, tracedFiles === minimalServerTracedFiles ? cachedLookupIgnoreMinimal : cachedLookupIgnore)) {\n                            tracedFiles.add(_path.default.relative(distDir, filePath).replace(/\\\\/g, '/'));\n                        }\n                    }\n                }\n            }\n            const { entryNameFilesMap } = (buildTraceContext == null ? void 0 : buildTraceContext.chunksTrace) || {};\n            const cachedLookupIgnoreRoutes = new Map();\n            await Promise.all([\n                ...entryNameFilesMap ? Object.entries(entryNameFilesMap) : new Map()\n            ].map(async ([entryName, entryNameFiles])=>{\n                const isApp = entryName.startsWith('app/');\n                const isPages = entryName.startsWith('pages/');\n                let route = entryName;\n                if (isApp) {\n                    route = (0, _apppaths.normalizeAppPath)(route.substring('app'.length));\n                }\n                if (isPages) {\n                    route = (0, _normalizepagepath.normalizePagePath)(route.substring('pages'.length));\n                }\n                // we don't need to trace for automatically statically optimized\n                // pages as they don't have server bundles, note there is\n                // the caveat with flying shuttle mode as it needs this for\n                // detecting changed entries\n                if (staticPages.includes(route)) {\n                    return;\n                }\n                const entryOutputPath = _path.default.join(distDir, 'server', `${entryName}.js`);\n                const traceOutputPath = `${entryOutputPath}.nft.json`;\n                const existingTrace = JSON.parse(await _promises.default.readFile(traceOutputPath, 'utf8'));\n                const traceOutputDir = _path.default.dirname(traceOutputPath);\n                const curTracedFiles = new Set();\n                for (const file of [\n                    ...entryNameFiles,\n                    entryOutputPath\n                ]){\n                    var _parentFilesMap_get;\n                    const curFiles = [\n                        ...((_parentFilesMap_get = parentFilesMap.get(_path.default.relative(outputFileTracingRoot, file))) == null ? void 0 : _parentFilesMap_get.keys()) || []\n                    ];\n                    for (const curFile of curFiles || []){\n                        if (!shouldIgnore(curFile, routeIgnoreFn, reasons, cachedLookupIgnoreRoutes)) {\n                            const filePath = _path.default.join(outputFileTracingRoot, curFile);\n                            const outputFile = _path.default.relative(traceOutputDir, filePath).replace(/\\\\/g, '/');\n                            curTracedFiles.add(outputFile);\n                        }\n                    }\n                }\n                for (const file of existingTrace.files || []){\n                    curTracedFiles.add(file);\n                }\n                await _promises.default.writeFile(traceOutputPath, JSON.stringify({\n                    ...existingTrace,\n                    files: [\n                        ...curTracedFiles\n                    ].sort()\n                }));\n            }));\n        }\n        const moduleTypes = [\n            'app-page',\n            'pages'\n        ];\n        for (const type of moduleTypes){\n            const modulePath = require.resolve(`next/dist/server/route-modules/${type}/module.compiled`);\n            const relativeModulePath = _path.default.relative(root, modulePath);\n            const contextDir = _path.default.join(_path.default.dirname(modulePath), 'vendored', 'contexts');\n            for (const item of (await _promises.default.readdir(contextDir))){\n                const itemPath = _path.default.relative(root, _path.default.join(contextDir, item));\n                if (!serverIgnoreFn(itemPath)) {\n                    addToTracedFiles(root, itemPath, serverTracedFiles);\n                    addToTracedFiles(root, itemPath, minimalServerTracedFiles);\n                }\n            }\n            addToTracedFiles(root, relativeModulePath, serverTracedFiles);\n            addToTracedFiles(root, relativeModulePath, minimalServerTracedFiles);\n        }\n        await Promise.all([\n            _promises.default.writeFile(nextServerTraceOutput, JSON.stringify({\n                version: 1,\n                files: Array.from(serverTracedFiles)\n            })),\n            _promises.default.writeFile(nextMinimalTraceOutput, JSON.stringify({\n                version: 1,\n                files: Array.from(minimalServerTracedFiles)\n            }))\n        ]);\n    });\n    // apply outputFileTracingIncludes/outputFileTracingExcludes after runTurbotrace\n    const includeExcludeSpan = nextBuildSpan.traceChild('apply-include-excludes');\n    await includeExcludeSpan.traceAsyncFn(async ()=>{\n        const globOrig = require('next/dist/compiled/glob');\n        const glob = (pattern)=>{\n            return new Promise((resolve, reject)=>{\n                globOrig(pattern, {\n                    cwd: dir,\n                    nodir: true,\n                    dot: true\n                }, (err, files)=>{\n                    if (err) {\n                        return reject(err);\n                    }\n                    resolve(files);\n                });\n            });\n        };\n        const { entryNameFilesMap } = (buildTraceContext == null ? void 0 : buildTraceContext.chunksTrace) || {};\n        await Promise.all([\n            ...entryNameFilesMap ? Object.entries(entryNameFilesMap) : new Map()\n        ].map(async ([entryName])=>{\n            const isApp = entryName.startsWith('app/');\n            const isPages = entryName.startsWith('pages/');\n            let route = entryName;\n            if (isApp) {\n                route = (0, _apppaths.normalizeAppPath)(entryName);\n            }\n            if (isPages) {\n                route = (0, _normalizepagepath.normalizePagePath)(entryName);\n            }\n            if (staticPages.includes(route)) {\n                return;\n            }\n            // edge routes have no trace files\n            if (edgeRuntimeRoutes.hasOwnProperty(route)) {\n                return;\n            }\n            const combinedIncludes = new Set();\n            const combinedExcludes = new Set();\n            for (const curGlob of includeGlobKeys){\n                const isMatch = (0, _picomatch.default)(curGlob, {\n                    dot: true,\n                    contains: true\n                });\n                if (isMatch(route)) {\n                    for (const include of outputFileTracingIncludes[curGlob]){\n                        combinedIncludes.add(include.replace(/\\\\/g, '/'));\n                    }\n                }\n            }\n            for (const curGlob of excludeGlobKeys){\n                const isMatch = (0, _picomatch.default)(curGlob, {\n                    dot: true,\n                    contains: true\n                });\n                if (isMatch(route)) {\n                    for (const exclude of outputFileTracingExcludes[curGlob]){\n                        combinedExcludes.add(exclude);\n                    }\n                }\n            }\n            if (!(combinedIncludes == null ? void 0 : combinedIncludes.size) && !(combinedExcludes == null ? void 0 : combinedExcludes.size)) {\n                return;\n            }\n            const traceFile = _path.default.join(distDir, `server`, `${entryName}.js.nft.json`);\n            const pageDir = _path.default.dirname(traceFile);\n            const traceContent = JSON.parse(await _promises.default.readFile(traceFile, 'utf8'));\n            const includes = [];\n            const resolvedTraceIncludes = new Map();\n            if (combinedIncludes == null ? void 0 : combinedIncludes.size) {\n                await Promise.all([\n                    ...combinedIncludes\n                ].map(async (includeGlob)=>{\n                    const results = await glob(includeGlob);\n                    const resolvedInclude = resolvedTraceIncludes.get(includeGlob) || [\n                        ...results.map((file)=>{\n                            return _path.default.relative(pageDir, _path.default.join(dir, file));\n                        })\n                    ];\n                    includes.push(...resolvedInclude);\n                    resolvedTraceIncludes.set(includeGlob, resolvedInclude);\n                }));\n            }\n            const combined = new Set([\n                ...traceContent.files,\n                ...includes\n            ]);\n            if (combinedExcludes == null ? void 0 : combinedExcludes.size) {\n                const resolvedGlobs = [\n                    ...combinedExcludes\n                ].map((exclude)=>_path.default.join(dir, exclude));\n                // pre compile before forEach\n                const isMatch = (0, _picomatch.default)(resolvedGlobs, {\n                    dot: true,\n                    contains: true\n                });\n                combined.forEach((file)=>{\n                    if (isMatch(_path.default.join(pageDir, file))) {\n                        combined.delete(file);\n                    }\n                });\n            }\n            // overwrite trace file with custom includes/excludes\n            await _promises.default.writeFile(traceFile, JSON.stringify({\n                version: traceContent.version,\n                files: [\n                    ...combined\n                ]\n            }));\n        }));\n    });\n    debug(`finished build tracing ${Date.now() - startTime}ms`);\n}\n\n//# sourceMappingURL=collect-build-traces.js.map"
        }
    ]
}