{
    "sourceFile": "node_modules/next/dist/build/load-jsconfig.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892656962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    parseJsonFile: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return loadJsConfig;\n    },\n    parseJsonFile: function() {\n        return parseJsonFile;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _fs = /*#__PURE__*/ _interop_require_wildcard(require(\"fs\"));\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"./output/log\"));\nconst _getTypeScriptConfiguration = require(\"../lib/typescript/getTypeScriptConfiguration\");\nconst _iserror = /*#__PURE__*/ _interop_require_default(require(\"../lib/is-error\"));\nconst _hasnecessarydependencies = require(\"../lib/has-necessary-dependencies\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nlet TSCONFIG_WARNED = false;\nfunction parseJsonFile(filePath) {\n    const JSON5 = require('next/dist/compiled/json5');\n    const contents = (0, _fs.readFileSync)(filePath, 'utf8');\n    // Special case an empty file\n    if (contents.trim() === '') {\n        return {};\n    }\n    try {\n        return JSON5.parse(contents);\n    } catch (err) {\n        if (!(0, _iserror.default)(err)) throw err;\n        const { codeFrameColumns } = require('next/dist/compiled/babel/code-frame');\n        const codeFrame = codeFrameColumns(String(contents), {\n            start: {\n                line: err.lineNumber || 0,\n                column: err.columnNumber || 0\n            }\n        }, {\n            message: err.message,\n            highlightCode: true\n        });\n        throw Object.defineProperty(new Error(`Failed to parse \"${filePath}\":\\n${codeFrame}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E232\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\nasync function loadJsConfig(dir, config) {\n    var _jsConfig_compilerOptions;\n    let typeScriptPath;\n    try {\n        const deps = await (0, _hasnecessarydependencies.hasNecessaryDependencies)(dir, [\n            {\n                pkg: 'typescript',\n                file: 'typescript/lib/typescript.js',\n                exportsRestrict: true\n            }\n        ]);\n        typeScriptPath = deps.resolved.get('typescript');\n    } catch  {}\n    const tsConfigPath = _path.default.join(dir, config.typescript.tsconfigPath);\n    const useTypeScript = Boolean(typeScriptPath && _fs.default.existsSync(tsConfigPath));\n    let implicitBaseurl;\n    let jsConfig;\n    // jsconfig is a subset of tsconfig\n    if (useTypeScript) {\n        if (config.typescript.tsconfigPath !== 'tsconfig.json' && TSCONFIG_WARNED === false) {\n            TSCONFIG_WARNED = true;\n            _log.info(`Using tsconfig file: ${config.typescript.tsconfigPath}`);\n        }\n        const ts = await Promise.resolve(require(typeScriptPath));\n        const tsConfig = await (0, _getTypeScriptConfiguration.getTypeScriptConfiguration)(ts, tsConfigPath, true);\n        jsConfig = {\n            compilerOptions: tsConfig.options\n        };\n        implicitBaseurl = _path.default.dirname(tsConfigPath);\n    }\n    const jsConfigPath = _path.default.join(dir, 'jsconfig.json');\n    if (!useTypeScript && _fs.default.existsSync(jsConfigPath)) {\n        jsConfig = parseJsonFile(jsConfigPath);\n        implicitBaseurl = _path.default.dirname(jsConfigPath);\n    }\n    let resolvedBaseUrl;\n    if (jsConfig == null ? void 0 : (_jsConfig_compilerOptions = jsConfig.compilerOptions) == null ? void 0 : _jsConfig_compilerOptions.baseUrl) {\n        resolvedBaseUrl = {\n            baseUrl: _path.default.resolve(dir, jsConfig.compilerOptions.baseUrl),\n            isImplicit: false\n        };\n    } else {\n        if (implicitBaseurl) {\n            resolvedBaseUrl = {\n                baseUrl: implicitBaseurl,\n                isImplicit: true\n            };\n        }\n    }\n    return {\n        useTypeScript,\n        jsConfig,\n        resolvedBaseUrl,\n        jsConfigPath: useTypeScript ? tsConfigPath : _fs.default.existsSync(jsConfigPath) ? jsConfigPath : undefined\n    };\n}\n\n//# sourceMappingURL=load-jsconfig.js.map"
        }
    ]
}