{
    "sourceFile": "node_modules/next/dist/build/webpack-build/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892674082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"webpackBuild\", {\n    enumerable: true,\n    get: function() {\n        return webpackBuild;\n    }\n});\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../output/log\"));\nconst _buildcontext = require(\"../build-context\");\nconst _worker = require(\"../../lib/worker\");\nconst _debug = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/debug\"));\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _trace = require(\"../../trace\");\nconst _utils = require(\"../../server/lib/utils\");\nconst _usecachetrackerutils = require(\"../webpack/plugins/telemetry-plugin/use-cache-tracker-utils\");\nconst _durationtostring = require(\"../duration-to-string\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst debug = (0, _debug.default)('next:build:webpack-build');\nconst ORDERED_COMPILER_NAMES = [\n    'server',\n    'edge-server',\n    'client'\n];\nlet pluginState = {};\nfunction deepMerge(target, source) {\n    const result = {\n        ...target,\n        ...source\n    };\n    for (const key of Object.keys(result)){\n        result[key] = Array.isArray(target[key]) ? target[key] = [\n            ...target[key],\n            ...source[key] || []\n        ] : typeof target[key] == 'object' && typeof source[key] == 'object' ? deepMerge(target[key], source[key]) : result[key];\n    }\n    return result;\n}\nasync function webpackBuildWithWorker(compilerNamesArg) {\n    const compilerNames = compilerNamesArg || ORDERED_COMPILER_NAMES;\n    const { nextBuildSpan, ...prunedBuildContext } = _buildcontext.NextBuildContext;\n    prunedBuildContext.pluginState = pluginState;\n    const combinedResult = {\n        duration: 0,\n        buildTraceContext: {}\n    };\n    const nodeOptions = (0, _utils.getParsedNodeOptionsWithoutInspect)();\n    for (const compilerName of compilerNames){\n        var _curResult_buildTraceContext;\n        const worker = new _worker.Worker(_path.default.join(__dirname, 'impl.js'), {\n            exposedMethods: [\n                'workerMain'\n            ],\n            numWorkers: 1,\n            maxRetries: 0,\n            forkOptions: {\n                env: {\n                    ...process.env,\n                    NEXT_PRIVATE_BUILD_WORKER: '1',\n                    NODE_OPTIONS: (0, _utils.formatNodeOptions)(nodeOptions)\n                }\n            }\n        });\n        const curResult = await worker.workerMain({\n            buildContext: prunedBuildContext,\n            compilerName,\n            traceState: {\n                ...(0, _trace.exportTraceState)(),\n                defaultParentSpanId: nextBuildSpan == null ? void 0 : nextBuildSpan.getId(),\n                shouldSaveTraceEvents: true\n            }\n        });\n        if (nextBuildSpan && curResult.debugTraceEvents) {\n            (0, _trace.recordTraceEvents)(curResult.debugTraceEvents);\n        }\n        // destroy worker so it's not sticking around using memory\n        await worker.end();\n        // Update plugin state\n        pluginState = deepMerge(pluginState, curResult.pluginState);\n        prunedBuildContext.pluginState = pluginState;\n        if (curResult.telemetryState) {\n            var _NextBuildContext_telemetryState;\n            _buildcontext.NextBuildContext.telemetryState = {\n                ...curResult.telemetryState,\n                useCacheTracker: (0, _usecachetrackerutils.mergeUseCacheTrackers)((_NextBuildContext_telemetryState = _buildcontext.NextBuildContext.telemetryState) == null ? void 0 : _NextBuildContext_telemetryState.useCacheTracker, curResult.telemetryState.useCacheTracker)\n            };\n        }\n        combinedResult.duration += curResult.duration;\n        if ((_curResult_buildTraceContext = curResult.buildTraceContext) == null ? void 0 : _curResult_buildTraceContext.entriesTrace) {\n            var _curResult_buildTraceContext1;\n            const { entryNameMap } = curResult.buildTraceContext.entriesTrace;\n            if (entryNameMap) {\n                combinedResult.buildTraceContext.entriesTrace = curResult.buildTraceContext.entriesTrace;\n                combinedResult.buildTraceContext.entriesTrace.entryNameMap = entryNameMap;\n            }\n            if ((_curResult_buildTraceContext1 = curResult.buildTraceContext) == null ? void 0 : _curResult_buildTraceContext1.chunksTrace) {\n                const { entryNameFilesMap } = curResult.buildTraceContext.chunksTrace;\n                if (entryNameFilesMap) {\n                    combinedResult.buildTraceContext.chunksTrace = curResult.buildTraceContext.chunksTrace;\n                    combinedResult.buildTraceContext.chunksTrace.entryNameFilesMap = entryNameFilesMap;\n                }\n            }\n        }\n    }\n    if (compilerNames.length === 3) {\n        const durationString = (0, _durationtostring.durationToString)(combinedResult.duration);\n        _log.event(`Compiled successfully in ${durationString}`);\n    }\n    return combinedResult;\n}\nasync function webpackBuild(withWorker, compilerNames) {\n    if (withWorker) {\n        debug('using separate compiler workers');\n        return await webpackBuildWithWorker(compilerNames);\n    } else {\n        debug('building all compilers in same process');\n        const webpackBuildImpl = require('./impl').webpackBuildImpl;\n        const curResult = await webpackBuildImpl(null, null);\n        // Mirror what happens in webpackBuildWithWorker\n        if (curResult.telemetryState) {\n            var _NextBuildContext_telemetryState;\n            _buildcontext.NextBuildContext.telemetryState = {\n                ...curResult.telemetryState,\n                useCacheTracker: (0, _usecachetrackerutils.mergeUseCacheTrackers)((_NextBuildContext_telemetryState = _buildcontext.NextBuildContext.telemetryState) == null ? void 0 : _NextBuildContext_telemetryState.useCacheTracker, curResult.telemetryState.useCacheTracker)\n            };\n        }\n        return curResult;\n    }\n}\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}