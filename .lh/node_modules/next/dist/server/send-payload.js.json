{
    "sourceFile": "node_modules/next/dist/server/send-payload.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892890523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    sendEtagResponse: null,\n    sendRenderResult: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    sendEtagResponse: function() {\n        return sendEtagResponse;\n    },\n    sendRenderResult: function() {\n        return sendRenderResult;\n    }\n});\nconst _utils = require(\"../shared/lib/utils\");\nconst _etag = require(\"./lib/etag\");\nconst _fresh = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/fresh\"));\nconst _cachecontrol = require(\"./lib/cache-control\");\nconst _approuterheaders = require(\"../client/components/app-router-headers\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction sendEtagResponse(req, res, etag) {\n    if (etag) {\n        /**\n     * The server generating a 304 response MUST generate any of the\n     * following header fields that would have been sent in a 200 (OK)\n     * response to the same request: Cache-Control, Content-Location, Date,\n     * ETag, Expires, and Vary. https://tools.ietf.org/html/rfc7232#section-4.1\n     */ res.setHeader('ETag', etag);\n    }\n    if ((0, _fresh.default)(req.headers, {\n        etag\n    })) {\n        res.statusCode = 304;\n        res.end();\n        return true;\n    }\n    return false;\n}\nasync function sendRenderResult({ req, res, result, type, generateEtags, poweredByHeader, cacheControl }) {\n    if ((0, _utils.isResSent)(res)) {\n        return;\n    }\n    if (poweredByHeader && type === 'html') {\n        res.setHeader('X-Powered-By', 'Next.js');\n    }\n    // If cache control is already set on the response we don't\n    // override it to allow users to customize it via next.config\n    if (cacheControl && !res.getHeader('Cache-Control')) {\n        res.setHeader('Cache-Control', (0, _cachecontrol.getCacheControlHeader)(cacheControl));\n    }\n    const payload = result.isDynamic ? null : result.toUnchunkedString();\n    if (generateEtags && payload !== null) {\n        const etag = (0, _etag.generateETag)(payload);\n        if (sendEtagResponse(req, res, etag)) {\n            return;\n        }\n    }\n    if (!res.getHeader('Content-Type')) {\n        res.setHeader('Content-Type', result.contentType ? result.contentType : type === 'rsc' ? _approuterheaders.RSC_CONTENT_TYPE_HEADER : type === 'json' ? 'application/json' : 'text/html; charset=utf-8');\n    }\n    if (payload) {\n        res.setHeader('Content-Length', Buffer.byteLength(payload));\n    }\n    if (req.method === 'HEAD') {\n        res.end(null);\n        return;\n    }\n    if (payload !== null) {\n        res.end(payload);\n        return;\n    }\n    // Pipe the render result to the response after we get a writer for it.\n    await result.pipeToNodeResponse(res);\n}\n\n//# sourceMappingURL=send-payload.js.map"
        }
    ]
}