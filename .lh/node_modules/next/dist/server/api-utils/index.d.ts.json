{
    "sourceFile": "node_modules/next/dist/server/api-utils/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892866511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage } from 'http';\nimport type { BaseNextRequest } from '../base-http';\nimport type { NextApiResponse } from '../../shared/lib/utils';\nexport type NextApiRequestCookies = Partial<{\n    [key: string]: string;\n}>;\nexport type NextApiRequestQuery = Partial<{\n    [key: string]: string | string[];\n}>;\nexport type __ApiPreviewProps = {\n    previewModeId: string;\n    previewModeEncryptionKey: string;\n    previewModeSigningKey: string;\n};\nexport declare function wrapApiHandler<T extends (...args: any[]) => any>(page: string, handler: T): T;\n/**\n *\n * @param res response object\n * @param statusCode `HTTP` status code of response\n */\nexport declare function sendStatusCode(res: NextApiResponse, statusCode: number): NextApiResponse<any>;\n/**\n *\n * @param res response object\n * @param [statusOrUrl] `HTTP` status code of redirect\n * @param url URL of redirect\n */\nexport declare function redirect(res: NextApiResponse, statusOrUrl: string | number, url?: string): NextApiResponse<any>;\nexport declare function checkIsOnDemandRevalidate(req: Request | IncomingMessage | BaseNextRequest, previewProps: __ApiPreviewProps): {\n    isOnDemandRevalidate: boolean;\n    revalidateOnlyGenerated: boolean;\n};\nexport declare const COOKIE_NAME_PRERENDER_BYPASS = \"__prerender_bypass\";\nexport declare const COOKIE_NAME_PRERENDER_DATA = \"__next_preview_data\";\nexport declare const RESPONSE_LIMIT_DEFAULT: number;\nexport declare const SYMBOL_PREVIEW_DATA: unique symbol;\nexport declare const SYMBOL_CLEARED_COOKIES: unique symbol;\nexport declare function clearPreviewData<T>(res: NextApiResponse<T>, options?: {\n    path?: string;\n}): NextApiResponse<T>;\n/**\n * Custom error class\n */\nexport declare class ApiError extends Error {\n    readonly statusCode: number;\n    constructor(statusCode: number, message: string);\n}\n/**\n * Sends error in `response`\n * @param res response object\n * @param statusCode of response\n * @param message of response\n */\nexport declare function sendError(res: NextApiResponse, statusCode: number, message: string): void;\ninterface LazyProps {\n    req: IncomingMessage;\n}\n/**\n * Execute getter function only if its needed\n * @param LazyProps `req` and `params` for lazyProp\n * @param prop name of property\n * @param getter function to get data\n */\nexport declare function setLazyProp<T>({ req }: LazyProps, prop: string, getter: () => T): void;\nexport {};\n"
        }
    ]
}