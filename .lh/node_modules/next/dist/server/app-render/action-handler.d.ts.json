{
    "sourceFile": "node_modules/next/dist/server/app-render/action-handler.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892867021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingHttpHeaders } from 'node:http';\nimport type { SizeLimit } from '../../types';\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external';\nimport type { AppRenderContext, GenerateFlight } from './app-render';\nimport type { AppPageModule } from '../route-modules/app-page/module';\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http';\nimport RenderResult from '../render-result';\nimport type { WorkStore } from '../app-render/work-async-storage.external';\ndeclare const enum HostType {\n    XForwardedHost = \"x-forwarded-host\",\n    Host = \"host\"\n}\nexport declare function parseHostHeader(headers: IncomingHttpHeaders, originDomain?: string): {\n    type: HostType;\n    value: string;\n} | undefined;\ntype ServerModuleMap = Record<string, {\n    id: string;\n    chunks: string[];\n    name: string;\n}>;\ntype ServerActionsConfig = {\n    bodySizeLimit?: SizeLimit;\n    allowedOrigins?: string[];\n};\nexport declare function handleAction({ req, res, ComponentMod, serverModuleMap, generateFlight, workStore, requestStore, serverActions, ctx, }: {\n    req: BaseNextRequest;\n    res: BaseNextResponse;\n    ComponentMod: AppPageModule;\n    serverModuleMap: ServerModuleMap;\n    generateFlight: GenerateFlight;\n    workStore: WorkStore;\n    requestStore: RequestStore;\n    serverActions?: ServerActionsConfig;\n    ctx: AppRenderContext;\n}): Promise<undefined | {\n    type: 'not-found';\n} | {\n    type: 'done';\n    result: RenderResult | undefined;\n    formState?: any;\n}>;\nexport {};\n"
        }
    ]
}