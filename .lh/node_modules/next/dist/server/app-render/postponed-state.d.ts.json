{
    "sourceFile": "node_modules/next/dist/server/app-render/postponed-state.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892869791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FallbackRouteParams } from '../../server/request/fallback-params';\nimport type { Params } from '../request/params';\nimport { type PrerenderResumeDataCache, type RenderResumeDataCache } from '../resume-data-cache/resume-data-cache';\nexport declare enum DynamicState {\n    /**\n     * The dynamic access occurred during the RSC render phase.\n     */\n    DATA = 1,\n    /**\n     * The dynamic access occurred during the HTML shell render phase.\n     */\n    HTML = 2\n}\n/**\n * The postponed state for dynamic data.\n */\nexport type DynamicDataPostponedState = {\n    /**\n     * The type of dynamic state.\n     */\n    readonly type: DynamicState.DATA;\n    /**\n     * The immutable resume data cache.\n     */\n    readonly renderResumeDataCache: RenderResumeDataCache;\n};\n/**\n * The postponed state for dynamic HTML.\n */\nexport type DynamicHTMLPostponedState = {\n    /**\n     * The type of dynamic state.\n     */\n    readonly type: DynamicState.HTML;\n    /**\n     * The postponed data used by React.\n     */\n    readonly data: object;\n    /**\n     * The immutable resume data cache.\n     */\n    readonly renderResumeDataCache: RenderResumeDataCache;\n};\nexport type PostponedState = DynamicDataPostponedState | DynamicHTMLPostponedState;\nexport declare function getDynamicHTMLPostponedState(data: object, fallbackRouteParams: FallbackRouteParams | null, prerenderResumeDataCache: PrerenderResumeDataCache): Promise<string>;\nexport declare function getDynamicDataPostponedState(prerenderResumeDataCache: PrerenderResumeDataCache): Promise<string>;\nexport declare function parsePostponedState(state: string, params: Params | undefined): PostponedState;\nexport declare function getPostponedFromState(state: PostponedState): any;\n"
        }
    ]
}