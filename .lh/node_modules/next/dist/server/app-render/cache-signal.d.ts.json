{
    "sourceFile": "node_modules/next/dist/server/app-render/cache-signal.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892867600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * This class is used to detect when all cache reads for a given render are settled.\n * We do this to allow for cache warming the prerender without having to continue rendering\n * the remainder of the page. This feature is really only useful when the dynamicIO flag is on\n * and should only be used in codepaths gated with this feature.\n */\nexport declare class CacheSignal {\n    private count;\n    private earlyListeners;\n    private listeners;\n    private tickPending;\n    private taskPending;\n    constructor();\n    private noMorePendingCaches;\n    /**\n     * This promise waits until there are no more in progress cache reads but no later.\n     * This allows for adding more cache reads after to delay cacheReady.\n     */\n    inputReady(): Promise<void>;\n    /**\n     * If there are inflight cache reads this Promise can resolve in a microtask however\n     * if there are no inflight cache reads then we wait at least one task to allow initial\n     * cache reads to be initiated.\n     */\n    cacheReady(): Promise<void>;\n    beginRead(): void;\n    endRead(): void;\n}\n"
        }
    ]
}