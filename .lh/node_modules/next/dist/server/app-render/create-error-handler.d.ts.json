{
    "sourceFile": "node_modules/next/dist/server/app-render/create-error-handler.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892868051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ErrorInfo } from 'react';\ndeclare global {\n    var __next_log_error__: undefined | ((err: unknown) => void);\n}\ntype RSCErrorHandler = (err: unknown) => string | undefined;\ntype SSRErrorHandler = (err: unknown, errorInfo?: ErrorInfo) => string | undefined;\nexport type DigestedError = Error & {\n    digest: string;\n};\n/**\n * Returns a digest for well-known Next.js errors, otherwise `undefined`. If a\n * digest is returned this also means that the error does not need to be\n * reported.\n */\nexport declare function getDigestForWellKnownError(error: unknown): string | undefined;\nexport declare function createFlightReactServerErrorHandler(shouldFormatError: boolean, onReactServerRenderError: (err: DigestedError) => void): RSCErrorHandler;\nexport declare function createHTMLReactServerErrorHandler(shouldFormatError: boolean, isNextExport: boolean, reactServerErrors: Map<string, DigestedError>, silenceLogger: boolean, onReactServerRenderError: undefined | ((err: DigestedError) => void)): RSCErrorHandler;\nexport declare function createHTMLErrorHandler(shouldFormatError: boolean, isNextExport: boolean, reactServerErrors: Map<string, DigestedError>, allCapturedErrors: Array<unknown>, silenceLogger: boolean, onHTMLRenderSSRError: (err: DigestedError, errorInfo?: ErrorInfo) => void): SSRErrorHandler;\nexport declare function isUserLandError(err: any): boolean;\nexport {};\n"
        }
    ]
}