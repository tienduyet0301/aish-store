{
    "sourceFile": "node_modules/next/dist/server/app-render/get-asset-query-string.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892868871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getAssetQueryString\", {\n    enumerable: true,\n    get: function() {\n        return getAssetQueryString;\n    }\n});\nconst isDev = process.env.NODE_ENV === 'development';\nconst isTurbopack = !!process.env.TURBOPACK;\nfunction getAssetQueryString(ctx, addTimestamp) {\n    let qs = '';\n    // In development we add the request timestamp to allow react to\n    // reload assets when a new RSC response is received.\n    // Turbopack handles HMR of assets itself and react doesn't need to reload them\n    // so this approach is not needed for Turbopack.\n    const shouldAddVersion = isDev && !isTurbopack && addTimestamp;\n    if (shouldAddVersion) {\n        qs += `?v=${ctx.requestTimestamp}`;\n    }\n    if (ctx.renderOpts.deploymentId) {\n        qs += `${shouldAddVersion ? '&' : '?'}dpl=${ctx.renderOpts.deploymentId}`;\n    }\n    return qs;\n}\n\n//# sourceMappingURL=get-asset-query-string.js.map"
        }
    ]
}