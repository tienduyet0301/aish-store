{
    "sourceFile": "node_modules/next/dist/server/app-render/get-layer-assets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892869029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getLayerAssets\", {\n    enumerable: true,\n    get: function() {\n        return getLayerAssets;\n    }\n});\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _react = /*#__PURE__*/ _interop_require_default(require(\"react\"));\nconst _getcssinlinedlinktags = require(\"./get-css-inlined-link-tags\");\nconst _getpreloadablefonts = require(\"./get-preloadable-fonts\");\nconst _getassetquerystring = require(\"./get-asset-query-string\");\nconst _encodeuripath = require(\"../../shared/lib/encode-uri-path\");\nconst _rendercssresource = require(\"./render-css-resource\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction getLayerAssets({ ctx, layoutOrPagePath, injectedCSS: injectedCSSWithCurrentLayout, injectedJS: injectedJSWithCurrentLayout, injectedFontPreloadTags: injectedFontPreloadTagsWithCurrentLayout, preloadCallbacks }) {\n    const { styles: styleTags, scripts: scriptTags } = layoutOrPagePath ? (0, _getcssinlinedlinktags.getLinkAndScriptTags)(ctx.clientReferenceManifest, layoutOrPagePath, injectedCSSWithCurrentLayout, injectedJSWithCurrentLayout, true) : {\n        styles: [],\n        scripts: []\n    };\n    const preloadedFontFiles = layoutOrPagePath ? (0, _getpreloadablefonts.getPreloadableFonts)(ctx.renderOpts.nextFontManifest, layoutOrPagePath, injectedFontPreloadTagsWithCurrentLayout) : null;\n    if (preloadedFontFiles) {\n        if (preloadedFontFiles.length) {\n            for(let i = 0; i < preloadedFontFiles.length; i++){\n                const fontFilename = preloadedFontFiles[i];\n                const ext = /\\.(woff|woff2|eot|ttf|otf)$/.exec(fontFilename)[1];\n                const type = `font/${ext}`;\n                const href = `${ctx.assetPrefix}/_next/${(0, _encodeuripath.encodeURIPath)(fontFilename)}`;\n                preloadCallbacks.push(()=>{\n                    ctx.componentMod.preloadFont(href, type, ctx.renderOpts.crossOrigin, ctx.nonce);\n                });\n            }\n        } else {\n            try {\n                let url = new URL(ctx.assetPrefix);\n                preloadCallbacks.push(()=>{\n                    ctx.componentMod.preconnect(url.origin, 'anonymous', ctx.nonce);\n                });\n            } catch (error) {\n                // assetPrefix must not be a fully qualified domain name. We assume\n                // we should preconnect to same origin instead\n                preloadCallbacks.push(()=>{\n                    ctx.componentMod.preconnect('/', 'anonymous', ctx.nonce);\n                });\n            }\n        }\n    }\n    const styles = (0, _rendercssresource.renderCssResource)(styleTags, ctx, preloadCallbacks);\n    const scripts = scriptTags ? scriptTags.map((href, index)=>{\n        const fullSrc = `${ctx.assetPrefix}/_next/${(0, _encodeuripath.encodeURIPath)(href)}${(0, _getassetquerystring.getAssetQueryString)(ctx, true)}`;\n        return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"script\", {\n            src: fullSrc,\n            async: true,\n            nonce: ctx.nonce\n        }, `script-${index}`);\n    }) : [];\n    return styles.length || scripts.length ? [\n        ...styles,\n        ...scripts\n    ] : null;\n}\n\n//# sourceMappingURL=get-layer-assets.js.map"
        }
    ]
}