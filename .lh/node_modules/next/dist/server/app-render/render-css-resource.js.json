{
    "sourceFile": "node_modules/next/dist/server/app-render/render-css-resource.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892870061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"renderCssResource\", {\n    enumerable: true,\n    get: function() {\n        return renderCssResource;\n    }\n});\nconst _jsxruntime = require(\"react/jsx-runtime\");\nconst _encodeuripath = require(\"../../shared/lib/encode-uri-path\");\nconst _getassetquerystring = require(\"./get-asset-query-string\");\nfunction renderCssResource(entryCssFiles, ctx, preloadCallbacks) {\n    return entryCssFiles.map((entryCssFile, index)=>{\n        // `Precedence` is an opt-in signal for React to handle resource\n        // loading and deduplication, etc. It's also used as the key to sort\n        // resources so they will be injected in the correct order.\n        // During HMR, it's critical to use different `precedence` values\n        // for different stylesheets, so their order will be kept.\n        // https://github.com/facebook/react/pull/25060\n        const precedence = process.env.NODE_ENV === 'development' ? 'next_' + entryCssFile.path : 'next';\n        // In dev, Safari and Firefox will cache the resource during HMR:\n        // - https://github.com/vercel/next.js/issues/5860\n        // - https://bugs.webkit.org/show_bug.cgi?id=187726\n        // Because of this, we add a `?v=` query to bypass the cache during\n        // development. We need to also make sure that the number is always\n        // increasing.\n        const fullHref = `${ctx.assetPrefix}/_next/${(0, _encodeuripath.encodeURIPath)(entryCssFile.path)}${(0, _getassetquerystring.getAssetQueryString)(ctx, true)}`;\n        if (entryCssFile.inlined && !ctx.parsedRequestHeaders.isRSCRequest) {\n            return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"style\", {\n                nonce: ctx.nonce,\n                // @ts-ignore\n                precedence: precedence,\n                href: fullHref,\n                children: entryCssFile.content\n            }, index);\n        }\n        preloadCallbacks == null ? void 0 : preloadCallbacks.push(()=>{\n            ctx.componentMod.preloadStyle(fullHref, ctx.renderOpts.crossOrigin, ctx.nonce);\n        });\n        return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"link\", {\n            rel: \"stylesheet\",\n            href: fullHref,\n            // @ts-ignore\n            precedence: precedence,\n            crossOrigin: ctx.renderOpts.crossOrigin,\n            nonce: ctx.nonce\n        }, index);\n    });\n}\n\n//# sourceMappingURL=render-css-resource.js.map"
        }
    ]
}