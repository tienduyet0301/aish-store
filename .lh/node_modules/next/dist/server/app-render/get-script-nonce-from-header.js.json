{
    "sourceFile": "node_modules/next/dist/server/app-render/get-script-nonce-from-header.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892869178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"getScriptNonceFromHeader\", {\n    enumerable: true,\n    get: function() {\n        return getScriptNonceFromHeader;\n    }\n});\nconst _htmlescape = require(\"../htmlescape\");\nfunction getScriptNonceFromHeader(cspHeaderValue) {\n    var _directive_split_slice_map_find;\n    const directives = cspHeaderValue// Directives are split by ';'.\n    .split(';').map((directive)=>directive.trim());\n    // First try to find the directive for the 'script-src', otherwise try to\n    // fallback to the 'default-src'.\n    const directive = directives.find((dir)=>dir.startsWith('script-src')) || directives.find((dir)=>dir.startsWith('default-src'));\n    // If no directive could be found, then we're done.\n    if (!directive) {\n        return;\n    }\n    // Extract the nonce from the directive\n    const nonce = (_directive_split_slice_map_find = directive.split(' ')// Remove the 'strict-src'/'default-src' string, this can't be the nonce.\n    .slice(1).map((source)=>source.trim())// Find the first source with the 'nonce-' prefix.\n    .find((source)=>source.startsWith(\"'nonce-\") && source.length > 8 && source.endsWith(\"'\"))) == null ? void 0 : _directive_split_slice_map_find.slice(7, -1);\n    // If we could't find the nonce, then we're done.\n    if (!nonce) {\n        return;\n    }\n    // Don't accept the nonce value if it contains HTML escape characters.\n    // Technically, the spec requires a base64'd value, but this is just an\n    // extra layer.\n    if (_htmlescape.ESCAPE_REGEX.test(nonce)) {\n        throw Object.defineProperty(new Error('Nonce value from Content-Security-Policy contained HTML escape characters.\\nLearn more: https://nextjs.org/docs/messages/nonce-contained-invalid-characters'), \"__NEXT_ERROR_CODE\", {\n            value: \"E440\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return nonce;\n}\n\n//# sourceMappingURL=get-script-nonce-from-header.js.map"
        }
    ]
}