{
    "sourceFile": "node_modules/next/dist/server/app-render/app-render.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892867432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ActionResult, DynamicParamTypesShort, FlightRouterState, RenderOpts, Segment, CacheNodeSeedData, PreloadCallbacks } from './types';\nimport { type WorkStore } from '../app-render/work-async-storage.external';\nimport type { RequestStore } from '../app-render/work-unit-async-storage.external';\nimport type { NextParsedUrlQuery } from '../request-meta';\nimport type { AppPageModule } from '../route-modules/app-page/module';\nimport type { ClientReferenceManifest } from '../../build/webpack/plugins/flight-manifest-plugin';\nimport type { DeepReadonly } from '../../shared/lib/deep-readonly';\nimport type { BaseNextRequest, BaseNextResponse } from '../base-http';\nimport RenderResult, { type AppPageRenderResultMetadata } from '../render-result';\nimport { type ImplicitTags } from '../lib/implicit-tags';\nimport { parseRelativeUrl } from '../../shared/lib/router/utils/parse-relative-url';\nimport type { ServerComponentsHmrCache } from '../response-cache';\nimport type { FallbackRouteParams } from '../request/fallback-params';\nimport './clean-async-snapshot.external';\nexport type GetDynamicParamFromSegment = (segment: string) => {\n    param: string;\n    value: string | string[] | null;\n    treeSegment: Segment;\n    type: DynamicParamTypesShort;\n} | null;\nexport type GenerateFlight = typeof generateDynamicFlightRenderResult;\nexport type AppSharedContext = {\n    buildId: string;\n};\nexport type AppRenderContext = {\n    sharedContext: AppSharedContext;\n    workStore: WorkStore;\n    url: ReturnType<typeof parseRelativeUrl>;\n    componentMod: AppPageModule;\n    renderOpts: RenderOpts;\n    parsedRequestHeaders: ParsedRequestHeaders;\n    getDynamicParamFromSegment: GetDynamicParamFromSegment;\n    query: NextParsedUrlQuery;\n    isPrefetch: boolean;\n    isPossibleServerAction: boolean;\n    requestTimestamp: number;\n    appUsingSizeAdjustment: boolean;\n    flightRouterState?: FlightRouterState;\n    requestId: string;\n    pagePath: string;\n    clientReferenceManifest: DeepReadonly<ClientReferenceManifest>;\n    assetPrefix: string;\n    isNotFoundPath: boolean;\n    nonce: string | undefined;\n    res: BaseNextResponse;\n    /**\n     * For now, the implicit tags are common for the whole route. If we ever start\n     * rendering/revalidating segments independently, they need to move to the\n     * work unit store.\n     */\n    implicitTags: ImplicitTags;\n};\ninterface ParsedRequestHeaders {\n    /**\n     * Router state provided from the client-side router. Used to handle rendering\n     * from the common layout down. This value will be undefined if the request is\n     * not a client-side navigation request, or if the request is a prefetch\n     * request.\n     */\n    readonly flightRouterState: FlightRouterState | undefined;\n    readonly isPrefetchRequest: boolean;\n    readonly isRouteTreePrefetchRequest: boolean;\n    readonly isDevWarmupRequest: boolean;\n    readonly isHmrRefresh: boolean;\n    readonly isRSCRequest: boolean;\n    readonly nonce: string | undefined;\n    readonly previouslyRevalidatedTags: string[];\n}\n/**\n * Produces a RenderResult containing the Flight data for the given request. See\n * `generateDynamicRSCPayload` for information on the contents of the render result.\n */\ndeclare function generateDynamicFlightRenderResult(req: BaseNextRequest, ctx: AppRenderContext, requestStore: RequestStore, options?: {\n    actionResult: ActionResult;\n    skipFlight: boolean;\n    componentTree?: CacheNodeSeedData;\n    preloadCallbacks?: PreloadCallbacks;\n    temporaryReferences?: WeakMap<any, string>;\n}): Promise<RenderResult>;\nexport type BinaryStreamOf<T> = ReadableStream<Uint8Array>;\nexport type AppPageRender = (req: BaseNextRequest, res: BaseNextResponse, pagePath: string, query: NextParsedUrlQuery, fallbackRouteParams: FallbackRouteParams | null, renderOpts: RenderOpts, serverComponentsHmrCache: ServerComponentsHmrCache | undefined, isDevWarmup: boolean, sharedContext: AppSharedContext) => Promise<RenderResult<AppPageRenderResultMetadata>>;\nexport declare const renderToHTMLOrFlight: AppPageRender;\nexport declare function warmFlightResponse(flightStream: ReadableStream<Uint8Array>, clientReferenceManifest: DeepReadonly<ClientReferenceManifest>): Promise<unknown>;\nexport {};\n"
        }
    ]
}