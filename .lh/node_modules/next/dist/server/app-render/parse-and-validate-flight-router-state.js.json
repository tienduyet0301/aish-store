{
    "sourceFile": "node_modules/next/dist/server/app-render/parse-and-validate-flight-router-state.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892869666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"parseAndValidateFlightRouterState\", {\n    enumerable: true,\n    get: function() {\n        return parseAndValidateFlightRouterState;\n    }\n});\nconst _types = require(\"./types\");\nconst _superstruct = require(\"next/dist/compiled/superstruct\");\nfunction parseAndValidateFlightRouterState(stateHeader) {\n    if (typeof stateHeader === 'undefined') {\n        return undefined;\n    }\n    if (Array.isArray(stateHeader)) {\n        throw Object.defineProperty(new Error('Multiple router state headers were sent. This is not allowed.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E418\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    // We limit the size of the router state header to ~40kb. This is to prevent\n    // a malicious user from sending a very large header and slowing down the\n    // resolving of the router state.\n    // This is around 2,000 nested or parallel route segment states:\n    // '{\"children\":[\"\",{}]}'.length === 20.\n    if (stateHeader.length > 20 * 2000) {\n        throw Object.defineProperty(new Error('The router state header was too large.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E142\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    try {\n        const state = JSON.parse(decodeURIComponent(stateHeader));\n        (0, _superstruct.assert)(state, _types.flightRouterStateSchema);\n        return state;\n    } catch  {\n        throw Object.defineProperty(new Error('The router state header was sent but could not be parsed.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E10\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n}\n\n//# sourceMappingURL=parse-and-validate-flight-router-state.js.map"
        }
    ]
}