{
    "sourceFile": "node_modules/next/dist/server/web/sandbox/context.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892895997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { EdgeFunctionDefinition } from '../../../build/webpack/plugins/middleware-plugin';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { EdgeRuntime } from 'next/dist/compiled/edge-runtime';\n/**\n * Same as clearModuleContext but for all module contexts.\n */\nexport declare function clearAllModuleContexts(): Promise<void>;\n/**\n * For a given path a context, this function checks if there is any module\n * context that contains the path with an older content and, if that's the\n * case, removes the context from the cache.\n *\n * This function also clears all intervals and timeouts created by the\n * module context.\n */\nexport declare function clearModuleContext(path: string): Promise<void>;\nexport declare const requestStore: AsyncLocalStorage<{\n    headers: Headers;\n}>;\nexport declare const edgeSandboxNextRequestContext: import(\"../../after/builtin-request-context\").RunnableBuiltinRequestContext;\ninterface ModuleContextOptions {\n    moduleName: string;\n    onError: (err: unknown) => void;\n    onWarning: (warn: Error) => void;\n    useCache: boolean;\n    distDir: string;\n    edgeFunctionEntry: Pick<EdgeFunctionDefinition, 'assets' | 'wasm' | 'env'>;\n}\n/**\n * For a given module name this function will get a cached module\n * context or create it. It will return the module context along\n * with a function that allows to run some code from a given\n * filepath within the context.\n */\nexport declare function getModuleContext(options: ModuleContextOptions): Promise<{\n    evaluateInContext: (filepath: string) => void;\n    runtime: EdgeRuntime;\n    paths: Map<string, string>;\n    warnedEvals: Set<string>;\n}>;\nexport {};\n"
        }
    ]
}