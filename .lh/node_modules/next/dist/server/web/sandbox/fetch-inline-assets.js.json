{
    "sourceFile": "node_modules/next/dist/server/web/sandbox/fetch-inline-assets.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892896136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"fetchInlineAsset\", {\n    enumerable: true,\n    get: function() {\n        return fetchInlineAsset;\n    }\n});\nconst _fs = require(\"fs\");\nconst _bodystreams = require(\"../../body-streams\");\nconst _path = require(\"path\");\nasync function fetchInlineAsset(options) {\n    const inputString = String(options.input);\n    if (!inputString.startsWith('blob:')) {\n        return;\n    }\n    const name = inputString.replace('blob:', '');\n    const asset = options.assets ? options.assets.find((x)=>x.name === name) : {\n        name,\n        filePath: name\n    };\n    if (!asset) {\n        return;\n    }\n    const filePath = (0, _path.resolve)(options.distDir, asset.filePath);\n    const fileIsReadable = await _fs.promises.access(filePath).then(()=>true, ()=>false);\n    if (fileIsReadable) {\n        const readStream = (0, _fs.createReadStream)(filePath);\n        return new options.context.Response((0, _bodystreams.requestToBodyStream)(options.context, Uint8Array, readStream));\n    }\n}\n\n//# sourceMappingURL=fetch-inline-assets.js.map"
        }
    ]
}