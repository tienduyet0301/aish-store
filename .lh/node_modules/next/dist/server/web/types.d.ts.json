{
    "sourceFile": "node_modules/next/dist/server/web/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892897717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ExperimentalConfig, I18NConfig } from '../config-shared';\nimport type { NextRequest } from './spec-extension/request';\nimport type { NextFetchEvent } from './spec-extension/fetch-event';\nimport type { NextResponse } from './spec-extension/response';\nimport type { CloneableBody } from '../body-streams';\nimport type { OutgoingHttpHeaders } from 'http';\nimport type { FetchMetrics } from '../base-http';\nexport type { MiddlewareConfigInput as MiddlewareConfig } from '../../build/segment-config/middleware/middleware-config';\nexport interface RequestData {\n    headers: OutgoingHttpHeaders;\n    method: string;\n    nextConfig?: {\n        basePath?: string;\n        i18n?: I18NConfig | null;\n        trailingSlash?: boolean;\n        experimental?: Pick<ExperimentalConfig, 'cacheLife' | 'authInterrupts'>;\n    };\n    page?: {\n        name?: string;\n        params?: {\n            [key: string]: string | string[] | undefined;\n        };\n    };\n    url: string;\n    body?: ReadableStream<Uint8Array>;\n    signal: AbortSignal;\n    /** passed in when running in edge runtime sandbox */\n    waitUntil?: (promise: Promise<any>) => void;\n}\nexport type NodejsRequestData = Omit<RequestData, 'body'> & {\n    body?: CloneableBody;\n};\nexport interface FetchEventResult {\n    response: Response;\n    waitUntil: Promise<any>;\n    fetchMetrics?: FetchMetrics;\n}\nexport type NextMiddlewareResult = NextResponse | Response | null | undefined | void;\n/**\n * Middleware allows you to run code before a request is completed.\n * Then, based on the incoming request, you can modify the response\n * by rewriting, redirecting, modifying the request or response headers,\n * or responding directly.\n *\n * Read more: [Next.js Docs: Middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)\n */\nexport type NextMiddleware = (request: NextRequest, event: NextFetchEvent) => NextMiddlewareResult | Promise<NextMiddlewareResult>;\n"
        }
    ]
}