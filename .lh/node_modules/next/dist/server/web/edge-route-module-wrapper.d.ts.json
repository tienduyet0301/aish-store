{
    "sourceFile": "node_modules/next/dist/server/web/edge-route-module-wrapper.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892895236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { AppRouteRouteModule } from '../route-modules/app-route/module';\nimport './globals';\nimport { type AdapterOptions } from './adapter';\nimport type { NextConfigComplete } from '../config-shared';\nexport interface WrapOptions {\n    nextConfig: NextConfigComplete;\n}\n/**\n * EdgeRouteModuleWrapper is a wrapper around a route module.\n *\n * Note that this class should only be used in the edge runtime.\n */\nexport declare class EdgeRouteModuleWrapper {\n    private readonly routeModule;\n    private readonly nextConfig;\n    private readonly matcher;\n    /**\n     * The constructor is wrapped with private to ensure that it can only be\n     * constructed by the static wrap method.\n     *\n     * @param routeModule the route module to wrap\n     */\n    private constructor();\n    /**\n     * This will wrap a module with the EdgeModuleWrapper and return a function\n     * that can be used as a handler for the edge runtime.\n     *\n     * @param module the module to wrap\n     * @param options any options that should be passed to the adapter and\n     *                override the ones passed from the runtime\n     * @returns a function that can be used as a handler for the edge runtime\n     */\n    static wrap(routeModule: AppRouteRouteModule, options: WrapOptions): (opts: AdapterOptions) => Promise<import(\"./types\").FetchEventResult>;\n    private handler;\n}\n"
        }
    ]
}