{
    "sourceFile": "node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892896821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { WaitUntil } from '../../after/builtin-request-context';\nimport type { NextRequest } from './request';\ndeclare const responseSymbol: unique symbol;\ndeclare const passThroughSymbol: unique symbol;\ndeclare const waitUntilSymbol: unique symbol;\ndeclare class FetchEvent {\n    readonly [waitUntilSymbol]: {\n        kind: 'internal';\n        promises: Promise<any>[];\n    } | {\n        kind: 'external';\n        function: WaitUntil;\n    };\n    [responseSymbol]?: Promise<Response>;\n    [passThroughSymbol]: boolean;\n    constructor(_request: Request, waitUntil?: WaitUntil);\n    respondWith(response: Response | Promise<Response>): void;\n    passThroughOnException(): void;\n    waitUntil(promise: Promise<any>): void;\n}\nexport declare function getWaitUntilPromiseFromEvent(event: FetchEvent): Promise<void> | undefined;\nexport declare class NextFetchEvent extends FetchEvent {\n    sourcePage: string;\n    constructor(params: {\n        request: NextRequest;\n        page: string;\n        context: {\n            waitUntil: WaitUntil;\n        } | undefined;\n    });\n    /**\n     * @deprecated The `request` is now the first parameter and the API is now async.\n     *\n     * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n     */\n    get request(): void;\n    /**\n     * @deprecated Using `respondWith` is no longer needed.\n     *\n     * Read more: https://nextjs.org/docs/messages/middleware-new-signature\n     */\n    respondWith(): void;\n}\nexport {};\n"
        }
    ]
}