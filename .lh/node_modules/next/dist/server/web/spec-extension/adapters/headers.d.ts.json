{
    "sourceFile": "node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892896457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingHttpHeaders } from 'http';\nexport type ReadonlyHeaders = Headers & {\n    /** @deprecated Method unavailable on `ReadonlyHeaders`. Read more: https://nextjs.org/docs/app/api-reference/functions/headers */\n    append(...args: any[]): void;\n    /** @deprecated Method unavailable on `ReadonlyHeaders`. Read more: https://nextjs.org/docs/app/api-reference/functions/headers */\n    set(...args: any[]): void;\n    /** @deprecated Method unavailable on `ReadonlyHeaders`. Read more: https://nextjs.org/docs/app/api-reference/functions/headers */\n    delete(...args: any[]): void;\n};\nexport declare class HeadersAdapter extends Headers {\n    private readonly headers;\n    constructor(headers: IncomingHttpHeaders);\n    /**\n     * Seals a Headers instance to prevent modification by throwing an error when\n     * any mutating method is called.\n     */\n    static seal(headers: Headers): ReadonlyHeaders;\n    /**\n     * Merges a header value into a string. This stores multiple values as an\n     * array, so we need to merge them into a string.\n     *\n     * @param value a header value\n     * @returns a merged header value (a string)\n     */\n    private merge;\n    /**\n     * Creates a Headers instance from a plain object or a Headers instance.\n     *\n     * @param headers a plain object or a Headers instance\n     * @returns a headers instance\n     */\n    static from(headers: IncomingHttpHeaders | Headers): Headers;\n    append(name: string, value: string): void;\n    delete(name: string): void;\n    get(name: string): string | null;\n    has(name: string): boolean;\n    set(name: string, value: string): void;\n    forEach(callbackfn: (value: string, name: string, parent: Headers) => void, thisArg?: any): void;\n    entries(): HeadersIterator<[string, string]>;\n    keys(): HeadersIterator<string>;\n    values(): HeadersIterator<string>;\n    [Symbol.iterator](): HeadersIterator<[string, string]>;\n}\n"
        }
    ]
}