{
    "sourceFile": "node_modules/next/dist/server/web/spec-extension/unstable-no-store.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892897460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"unstable_noStore\", {\n    enumerable: true,\n    get: function() {\n        return unstable_noStore;\n    }\n});\nconst _workasyncstorageexternal = require(\"../../app-render/work-async-storage.external\");\nconst _workunitasyncstorageexternal = require(\"../../app-render/work-unit-async-storage.external\");\nconst _dynamicrendering = require(\"../../app-render/dynamic-rendering\");\nfunction unstable_noStore() {\n    const callingExpression = 'unstable_noStore()';\n    const store = _workasyncstorageexternal.workAsyncStorage.getStore();\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (!store) {\n        // This generally implies we are being called in Pages router. We should probably not support\n        // unstable_noStore in contexts outside of `react-server` condition but since we historically\n        // have not errored here previously, we maintain that behavior for now.\n        return;\n    } else if (store.forceStatic) {\n        return;\n    } else {\n        store.isUnstableNoStore = true;\n        if (workUnitStore && workUnitStore.type === 'prerender') {\n        // unstable_noStore() is a noop in Dynamic I/O.\n        } else {\n            (0, _dynamicrendering.markCurrentScopeAsDynamic)(store, workUnitStore, callingExpression);\n        }\n    }\n}\n\n//# sourceMappingURL=unstable-no-store.js.map"
        }
    ]
}