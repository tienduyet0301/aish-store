{
    "sourceFile": "node_modules/next/dist/server/lib/start-server.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892877781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import '../next';\nimport '../require-hook';\nimport type { SelfSignedCertificate } from '../../lib/mkcert';\nimport { initialize } from './router-server';\nexport interface StartServerOptions {\n    dir: string;\n    port: number;\n    isDev: boolean;\n    hostname?: string;\n    allowRetry?: boolean;\n    customServer?: boolean;\n    minimalMode?: boolean;\n    keepAliveTimeout?: number;\n    selfSignedCertificate?: SelfSignedCertificate;\n}\nexport declare function getRequestHandlers({ dir, port, isDev, onDevServerCleanup, server, hostname, minimalMode, keepAliveTimeout, experimentalHttpsServer, quiet, }: {\n    dir: string;\n    port: number;\n    isDev: boolean;\n    onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined;\n    server?: import('http').Server;\n    hostname?: string;\n    minimalMode?: boolean;\n    keepAliveTimeout?: number;\n    experimentalHttpsServer?: boolean;\n    quiet?: boolean;\n}): ReturnType<typeof initialize>;\nexport declare function startServer(serverOptions: StartServerOptions): Promise<void>;\n"
        }
    ]
}