{
    "sourceFile": "node_modules/next/dist/server/lib/dev-bundler-service.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892875070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage } from 'http';\nimport type { DevBundler } from './router-utils/setup-dev-bundler';\nimport type { WorkerRequestHandler } from './types';\nimport { LRUCache } from './lru-cache';\n/**\n * The DevBundlerService provides an interface to perform tasks with the\n * bundler while in development.\n */\nexport declare class DevBundlerService {\n    private readonly bundler;\n    private readonly handler;\n    appIsrManifestInner: InstanceType<typeof LRUCache>;\n    constructor(bundler: DevBundler, handler: WorkerRequestHandler);\n    ensurePage: typeof this.bundler.hotReloader.ensurePage;\n    logErrorWithOriginalStack: (err: unknown, type?: \"unhandledRejection\" | \"uncaughtException\" | \"warning\" | \"app-dir\") => void;\n    getFallbackErrorComponents(url?: string): Promise<void>;\n    getCompilationError(page: string): Promise<any>;\n    revalidate({ urlPath, revalidateHeaders, opts: revalidateOpts, }: {\n        urlPath: string;\n        revalidateHeaders: IncomingMessage['headers'];\n        opts: any;\n    }): Promise<{}>;\n    get appIsrManifest(): Record<string, boolean>;\n    setIsrStatus(key: string, value: boolean | null): void;\n    close(): void;\n}\n"
        }
    ]
}