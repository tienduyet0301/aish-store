{
    "sourceFile": "node_modules/next/dist/server/lib/i18n-provider.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892875514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { DomainLocale, I18NConfig } from '../config-shared';\nimport { type NextIncomingMessage } from '../request-meta';\n/**\n * The result of matching a locale aware route.\n */\nexport interface LocaleAnalysisResult {\n    /**\n     * The pathname without the locale prefix (if any).\n     */\n    pathname: string;\n    /**\n     * The detected locale. If no locale was detected, this will be `undefined`.\n     */\n    detectedLocale?: string;\n    /**\n     * True if the locale was inferred from the default locale.\n     */\n    inferredFromDefault: boolean;\n}\ntype LocaleAnalysisOptions = {\n    /**\n     * When provided, it will be used as the default locale if the locale\n     * cannot be inferred from the pathname.\n     */\n    defaultLocale?: string;\n};\n/**\n * The I18NProvider is used to match locale aware routes, detect the locale from\n * the pathname and hostname and normalize the pathname by removing the locale\n * prefix.\n */\nexport declare class I18NProvider {\n    readonly config: Readonly<I18NConfig>;\n    private readonly lowerCaseLocales;\n    private readonly lowerCaseDomains?;\n    constructor(config: Readonly<I18NConfig>);\n    /**\n     * Detects the domain locale from the hostname and the detected locale if\n     * provided.\n     *\n     * @param hostname The hostname to detect the domain locale from, this must be lowercased.\n     * @param detectedLocale The detected locale to use if the hostname does not match.\n     * @returns The domain locale if found, `undefined` otherwise.\n     */\n    detectDomainLocale(hostname?: string, detectedLocale?: string): DomainLocale | undefined;\n    /**\n     * Pulls the pre-computed locale and inference results from the query\n     * object.\n     *\n     * @param req the request object\n     * @param pathname the pathname that could contain a locale prefix\n     * @returns the locale analysis result\n     */\n    fromRequest(req: NextIncomingMessage, pathname: string): LocaleAnalysisResult;\n    /**\n     * Analyzes the pathname for a locale and returns the pathname without it.\n     *\n     * @param pathname The pathname that could contain a locale prefix.\n     * @param options The options to use when matching the locale.\n     * @returns The matched locale and the pathname without the locale prefix\n     *          (if any).\n     */\n    analyze(pathname: string, options?: LocaleAnalysisOptions): LocaleAnalysisResult;\n}\nexport {};\n"
        }
    ]
}