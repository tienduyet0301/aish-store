{
    "sourceFile": "node_modules/next/dist/server/lib/utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892878266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export declare function printAndExit(message: string, code?: number): never;\n/**\n * Tokenizes the arguments string into an array of strings, supporting quoted\n * values and escaped characters.\n * Converted from: https://github.com/nodejs/node/blob/c29d53c5cfc63c5a876084e788d70c9e87bed880/src/node_options.cc#L1401\n *\n * @param input The arguments string to be tokenized.\n * @returns An array of strings with the tokenized arguments.\n */\nexport declare const tokenizeArgs: (input: string) => string[];\n/**\n * The debug address is in the form of `[host:]port`. The host is optional.\n */\ntype DebugAddress = {\n    host: string | undefined;\n    port: number;\n};\n/**\n * Formats the debug address into a string.\n */\nexport declare const formatDebugAddress: ({ host, port }: DebugAddress) => string;\n/**\n * Get's the debug address from the `NODE_OPTIONS` environment variable. If the\n * address is not found, it returns the default host (`undefined`) and port\n * (`9229`).\n *\n * @returns An object with the host and port of the debug address.\n */\nexport declare const getParsedDebugAddress: () => DebugAddress;\n/**\n * Get the debug address from the `NODE_OPTIONS` environment variable and format\n * it into a string.\n *\n * @returns A string with the formatted debug address.\n */\nexport declare const getFormattedDebugAddress: () => string;\n/**\n * Stringify the arguments to be used in a command line. It will ignore any\n * argument that has a value of `undefined`.\n *\n * @param args The arguments to be stringified.\n * @returns A string with the arguments.\n */\nexport declare function formatNodeOptions(args: Record<string, string | boolean | undefined>): string;\n/**\n * Get the node options from the `NODE_OPTIONS` environment variable and parse\n * them into an object without the inspect options.\n *\n * @returns An object with the parsed node options.\n */\nexport declare function getParsedNodeOptionsWithoutInspect(): {\n    [longOption: string]: string | boolean | undefined;\n};\n/**\n * Get the node options from the `NODE_OPTIONS` environment variable and format\n * them into a string without the inspect options.\n *\n * @returns A string with the formatted node options.\n */\nexport declare function getFormattedNodeOptionsWithoutInspect(): string;\n/**\n * Check if the value is a valid positive integer and parse it. If it's not, it will throw an error.\n *\n * @param value The value to be parsed.\n */\nexport declare function parseValidPositiveInteger(value: string): number;\nexport declare const RESTART_EXIT_CODE = 77;\nexport type NodeInspectType = 'inspect' | 'inspect-brk' | undefined;\n/**\n * Get the debug type from the `NODE_OPTIONS` environment variable.\n */\nexport declare function getNodeDebugType(): NodeInspectType;\n/**\n * Get the `max-old-space-size` value from the `NODE_OPTIONS` environment\n * variable.\n *\n * @returns The value of the `max-old-space-size` option as a number.\n */\nexport declare function getMaxOldSpaceSize(): number | undefined;\nexport {};\n"
        }
    ]
}