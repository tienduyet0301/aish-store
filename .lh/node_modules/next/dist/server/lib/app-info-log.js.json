{
    "sourceFile": "node_modules/next/dist/server/lib/app-info-log.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892874401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getStartServerInfo: null,\n    logStartInfo: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getStartServerInfo: function() {\n        return getStartServerInfo;\n    },\n    logStartInfo: function() {\n        return logStartInfo;\n    }\n});\nconst _env = require(\"@next/env\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../../build/output/log\"));\nconst _picocolors = require(\"../../lib/picocolors\");\nconst _constants = require(\"../../shared/lib/constants\");\nconst _config = /*#__PURE__*/ _interop_require_wildcard(require(\"../config\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction logStartInfo({ networkUrl, appUrl, envInfo, experimentalFeatures, maxExperimentalFeatures = Infinity }) {\n    let bundlerSuffix;\n    if (process.env.TURBOPACK) {\n        bundlerSuffix = ' (Turbopack)';\n    } else if (process.env.NEXT_RSPACK) {\n        bundlerSuffix = ' (Rspack)';\n    } else {\n        bundlerSuffix = '';\n    }\n    _log.bootstrap(`${(0, _picocolors.bold)((0, _picocolors.purple)(`${_log.prefixes.ready} Next.js ${\"15.3.1\"}`))}${bundlerSuffix}`);\n    if (appUrl) {\n        _log.bootstrap(`- Local:        ${appUrl}`);\n    }\n    if (networkUrl) {\n        _log.bootstrap(`- Network:      ${networkUrl}`);\n    }\n    if (envInfo == null ? void 0 : envInfo.length) _log.bootstrap(`- Environments: ${envInfo.join(', ')}`);\n    if (experimentalFeatures == null ? void 0 : experimentalFeatures.length) {\n        _log.bootstrap(`- Experiments (use with caution):`);\n        // only show a maximum number of flags\n        for (const exp of experimentalFeatures.slice(0, maxExperimentalFeatures)){\n            const symbol = exp.type === 'boolean' ? exp.value === true ? (0, _picocolors.bold)('✓') : (0, _picocolors.bold)('⨯') : '·';\n            const suffix = exp.type === 'number' ? `: ${exp.value}` : '';\n            _log.bootstrap(`  ${symbol} ${exp.name}${suffix}`);\n        }\n        /* indicate if there are more than the maximum shown no. flags */ if (experimentalFeatures.length > maxExperimentalFeatures) {\n            _log.bootstrap(`  · ...`);\n        }\n    }\n    // New line after the bootstrap info\n    _log.info('');\n}\nasync function getStartServerInfo(dir, dev) {\n    let experimentalFeatures = [];\n    await (0, _config.default)(dev ? _constants.PHASE_DEVELOPMENT_SERVER : _constants.PHASE_PRODUCTION_BUILD, dir, {\n        onLoadUserConfig (userConfig) {\n            const configuredExperimentalFeatures = (0, _config.getConfiguredExperimentalFeatures)(userConfig.experimental);\n            experimentalFeatures = configuredExperimentalFeatures.sort(({ name: a }, { name: b })=>a.length - b.length);\n        }\n    });\n    // we need to reset env if we are going to create\n    // the worker process with the esm loader so that the\n    // initial env state is correct\n    let envInfo = [];\n    const { loadedEnvFiles } = (0, _env.loadEnvConfig)(dir, true, console, false);\n    if (loadedEnvFiles.length > 0) {\n        envInfo = loadedEnvFiles.map((f)=>f.path);\n    }\n    return {\n        envInfo,\n        experimentalFeatures\n    };\n}\n\n//# sourceMappingURL=app-info-log.js.map"
        }
    ]
}