{
    "sourceFile": "node_modules/next/dist/server/lib/render-server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892876806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    clearAllModuleContexts: null,\n    clearModuleContext: null,\n    getServerField: null,\n    initialize: null,\n    propagateServerField: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    clearAllModuleContexts: function() {\n        return clearAllModuleContexts;\n    },\n    clearModuleContext: function() {\n        return clearModuleContext;\n    },\n    getServerField: function() {\n        return getServerField;\n    },\n    initialize: function() {\n        return initialize;\n    },\n    propagateServerField: function() {\n        return propagateServerField;\n    }\n});\nconst _next = /*#__PURE__*/ _interop_require_default(require(\"../next\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet initializations = {};\nlet sandboxContext;\nif (process.env.NODE_ENV !== 'production') {\n    sandboxContext = require('../web/sandbox/context');\n}\nfunction clearAllModuleContexts() {\n    return sandboxContext == null ? void 0 : sandboxContext.clearAllModuleContexts();\n}\nfunction clearModuleContext(target) {\n    return sandboxContext == null ? void 0 : sandboxContext.clearModuleContext(target);\n}\nasync function getServerField(dir, field) {\n    const initialization = await initializations[dir];\n    if (!initialization) {\n        throw Object.defineProperty(new Error('Invariant cant propagate server field, no app initialized'), \"__NEXT_ERROR_CODE\", {\n            value: \"E116\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const { server } = initialization;\n    let wrappedServer = server['server']// NextServer.server is private\n    ;\n    return wrappedServer[field];\n}\nasync function propagateServerField(dir, field, value) {\n    const initialization = await initializations[dir];\n    if (!initialization) {\n        throw Object.defineProperty(new Error('Invariant cant propagate server field, no app initialized'), \"__NEXT_ERROR_CODE\", {\n            value: \"E116\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const { server } = initialization;\n    let wrappedServer = server['server'];\n    const _field = field;\n    if (wrappedServer) {\n        if (typeof wrappedServer[_field] === 'function') {\n            // @ts-expect-error\n            await wrappedServer[_field].apply(wrappedServer, Array.isArray(value) ? value : []);\n        } else {\n            // @ts-expect-error\n            wrappedServer[_field] = value;\n        }\n    }\n}\nasync function initializeImpl(opts) {\n    const type = process.env.__NEXT_PRIVATE_RENDER_WORKER;\n    if (type) {\n        process.title = 'next-render-worker-' + type;\n    }\n    let requestHandler;\n    let upgradeHandler;\n    const server = (0, _next.default)({\n        ...opts,\n        hostname: opts.hostname || 'localhost',\n        customServer: false,\n        httpServer: opts.server,\n        port: opts.port\n    })// should return a NextServer when `customServer: false`\n    ;\n    requestHandler = server.getRequestHandler();\n    upgradeHandler = server.getUpgradeHandler();\n    await server.prepare(opts.serverFields);\n    return {\n        requestHandler,\n        upgradeHandler,\n        server,\n        closeUpgraded () {\n            var _opts_bundlerService;\n            (_opts_bundlerService = opts.bundlerService) == null ? void 0 : _opts_bundlerService.close();\n        }\n    };\n}\nasync function initialize(opts) {\n    // if we already setup the server return as we only need to do\n    // this on first worker boot\n    if (initializations[opts.dir]) {\n        return initializations[opts.dir];\n    }\n    return initializations[opts.dir] = initializeImpl(opts);\n}\n\n//# sourceMappingURL=render-server.js.map"
        }
    ]
}