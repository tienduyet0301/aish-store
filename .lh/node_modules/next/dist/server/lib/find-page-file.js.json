{
    "sourceFile": "node_modules/next/dist/server/lib/find-page-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892875390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    createValidFileMatcher: null,\n    findPageFile: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    createValidFileMatcher: function() {\n        return createValidFileMatcher;\n    },\n    findPageFile: function() {\n        return findPageFile;\n    }\n});\nconst _fileexists = require(\"../../lib/file-exists\");\nconst _getpagepaths = require(\"../../shared/lib/page-path/get-page-paths\");\nconst _nonnullable = require(\"../../lib/non-nullable\");\nconst _path = require(\"path\");\nconst _fs = require(\"fs\");\nconst _log = require(\"../../build/output/log\");\nconst _picocolors = require(\"../../lib/picocolors\");\nconst _ismetadataroute = require(\"../../lib/metadata/is-metadata-route\");\nasync function isTrueCasePagePath(pagePath, pagesDir) {\n    const pageSegments = (0, _path.normalize)(pagePath).split(_path.sep).filter(Boolean);\n    const segmentExistsPromises = pageSegments.map(async (segment, i)=>{\n        const segmentParentDir = (0, _path.join)(pagesDir, ...pageSegments.slice(0, i));\n        const parentDirEntries = await _fs.promises.readdir(segmentParentDir);\n        return parentDirEntries.includes(segment);\n    });\n    return (await Promise.all(segmentExistsPromises)).every(Boolean);\n}\nasync function findPageFile(pagesDir, normalizedPagePath, pageExtensions, isAppDir) {\n    const pagePaths = (0, _getpagepaths.getPagePaths)(normalizedPagePath, pageExtensions, isAppDir);\n    const [existingPath, ...others] = (await Promise.all(pagePaths.map(async (path)=>{\n        const filePath = (0, _path.join)(pagesDir, path);\n        try {\n            return await (0, _fileexists.fileExists)(filePath) ? path : null;\n        } catch (err) {\n            var _err_code;\n            if (!(err == null ? void 0 : (_err_code = err.code) == null ? void 0 : _err_code.includes('ENOTDIR'))) throw err;\n        }\n        return null;\n    }))).filter(_nonnullable.nonNullable);\n    if (!existingPath) {\n        return null;\n    }\n    if (!await isTrueCasePagePath(existingPath, pagesDir)) {\n        return null;\n    }\n    if (others.length > 0) {\n        (0, _log.warn)(`Duplicate page detected. ${(0, _picocolors.cyan)((0, _path.join)('pages', existingPath))} and ${(0, _picocolors.cyan)((0, _path.join)('pages', others[0]))} both resolve to ${(0, _picocolors.cyan)(normalizedPagePath)}.`);\n    }\n    return existingPath;\n}\nfunction createValidFileMatcher(pageExtensions, appDirPath) {\n    const getExtensionRegexString = (extensions)=>`(?:${extensions.join('|')})`;\n    const validExtensionFileRegex = new RegExp('\\\\.' + getExtensionRegexString(pageExtensions) + '$');\n    const leafOnlyPageFileRegex = new RegExp(`(^(page|route)|[\\\\\\\\/](page|route))\\\\.${getExtensionRegexString(pageExtensions)}$`);\n    const rootNotFoundFileRegex = new RegExp(`^not-found\\\\.${getExtensionRegexString(pageExtensions)}$`);\n    /** TODO-METADATA: support other metadata routes\n   *  regex for:\n   *\n   * /robots.txt|<ext>\n   * /sitemap.xml|<ext>\n   * /favicon.ico\n   * /manifest.json|<ext>\n   * <route>/icon.png|jpg|<ext>\n   * <route>/apple-touch-icon.png|jpg|<ext>\n   *\n   */ /**\n   * Match the file if it's a metadata route file, static: if the file is a static metadata file.\n   * It needs to be a file which doesn't match the custom metadata routes e.g. `app/robots.txt/route.js`\n   */ function isMetadataFile(filePath) {\n        const appDirRelativePath = appDirPath ? filePath.replace(appDirPath, '') : filePath;\n        return (0, _ismetadataroute.isMetadataRouteFile)(appDirRelativePath, pageExtensions, true);\n    }\n    // Determine if the file is leaf node page file or route file under layouts,\n    // 'page.<extension>' | 'route.<extension>'\n    function isAppRouterPage(filePath) {\n        return leafOnlyPageFileRegex.test(filePath) || isMetadataFile(filePath);\n    }\n    function isPageFile(filePath) {\n        return validExtensionFileRegex.test(filePath) || isMetadataFile(filePath);\n    }\n    function isRootNotFound(filePath) {\n        if (!appDirPath) {\n            return false;\n        }\n        if (!filePath.startsWith(appDirPath + _path.sep)) {\n            return false;\n        }\n        const rest = filePath.slice(appDirPath.length + 1);\n        return rootNotFoundFileRegex.test(rest);\n    }\n    return {\n        isPageFile,\n        isAppRouterPage,\n        isMetadataFile,\n        isRootNotFound\n    };\n}\n\n//# sourceMappingURL=find-page-file.js.map"
        }
    ]
}