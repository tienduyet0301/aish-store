{
    "sourceFile": "node_modules/next/dist/server/lib/mock-request.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892876289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ServerResponse, OutgoingHttpHeaders, OutgoingHttpHeader, IncomingMessage, IncomingHttpHeaders } from 'http';\nimport type { Socket } from 'net';\nimport Stream from 'stream';\ninterface MockedRequestOptions {\n    url: string;\n    headers: IncomingHttpHeaders;\n    method: string;\n    readable?: Stream.Readable;\n    socket?: Socket | null;\n}\nexport declare class MockedRequest extends Stream.Readable implements IncomingMessage {\n    url: string;\n    readonly statusCode?: number | undefined;\n    readonly statusMessage?: string | undefined;\n    readonly headers: IncomingHttpHeaders;\n    readonly method: string;\n    readonly httpVersion = \"1.0\";\n    readonly httpVersionMajor = 1;\n    readonly httpVersionMinor = 0;\n    private bodyReadable?;\n    socket: Socket;\n    constructor({ url, headers, method, socket, readable, }: MockedRequestOptions);\n    get headersDistinct(): NodeJS.Dict<string[]>;\n    _read(size: number): void;\n    /**\n     * The `connection` property is just an alias for the `socket` property.\n     *\n     * @deprecated — since v13.0.0 - Use socket instead.\n     */\n    get connection(): Socket;\n    get aborted(): boolean;\n    get complete(): boolean;\n    get trailers(): NodeJS.Dict<string>;\n    get trailersDistinct(): NodeJS.Dict<string[]>;\n    get rawTrailers(): string[];\n    get rawHeaders(): string[];\n    setTimeout(): this;\n}\nexport interface MockedResponseOptions {\n    statusCode?: number;\n    socket?: Socket | null;\n    headers?: OutgoingHttpHeaders;\n    resWriter?: (chunk: Uint8Array | Buffer | string) => boolean;\n}\nexport declare class MockedResponse extends Stream.Writable implements ServerResponse {\n    statusCode: number;\n    statusMessage: string;\n    finished: boolean;\n    headersSent: boolean;\n    readonly socket: Socket | null;\n    private resWriter;\n    readonly headPromise: Promise<void>;\n    private headPromiseResolve?;\n    constructor(res?: MockedResponseOptions);\n    appendHeader(name: string, value: string | string[]): this;\n    /**\n     * The `connection` property is just an alias for the `socket` property.\n     *\n     * @deprecated — since v13.0.0 - Use socket instead.\n     */\n    get connection(): Socket | null;\n    write(chunk: Uint8Array | Buffer | string): boolean;\n    end(): this;\n    /**\n     * This method is a no-op because the `MockedResponse` instance is not\n     * actually connected to a socket. This method is not specified on the\n     * interface type for `ServerResponse` but is called by Node.js.\n     *\n     * @see https://github.com/nodejs/node/pull/7949\n     */\n    _implicitHeader(): void;\n    _write(chunk: Buffer | string, _encoding: string, callback: () => void): void;\n    writeHead(statusCode: number, statusMessage?: string | undefined, headers?: OutgoingHttpHeaders | OutgoingHttpHeader[] | undefined): this;\n    writeHead(statusCode: number, headers?: OutgoingHttpHeaders | OutgoingHttpHeader[] | undefined): this;\n    hasHeader(name: string): boolean;\n    getHeader(name: string): string | undefined;\n    getHeaders(): OutgoingHttpHeaders;\n    getHeaderNames(): string[];\n    setHeader(name: string, value: OutgoingHttpHeader): this;\n    removeHeader(name: string): void;\n    flushHeaders(): void;\n    get strictContentLength(): boolean;\n    writeEarlyHints(): void;\n    get req(): IncomingMessage;\n    assignSocket(): void;\n    detachSocket(): void;\n    writeContinue(): void;\n    writeProcessing(): void;\n    get upgrading(): boolean;\n    get chunkedEncoding(): boolean;\n    get shouldKeepAlive(): boolean;\n    get useChunkedEncodingByDefault(): boolean;\n    get sendDate(): boolean;\n    setTimeout(): this;\n    addTrailers(): void;\n    setHeaders(): this;\n}\ninterface RequestResponseMockerOptions {\n    url: string;\n    headers?: IncomingHttpHeaders;\n    method?: string;\n    bodyReadable?: Stream.Readable;\n    resWriter?: (chunk: Uint8Array | Buffer | string) => boolean;\n    socket?: Socket | null;\n}\nexport declare function createRequestResponseMocks({ url, headers, method, bodyReadable, resWriter, socket, }: RequestResponseMockerOptions): {\n    req: MockedRequest;\n    res: MockedResponse;\n};\nexport {};\n"
        }
    ]
}