{
    "sourceFile": "node_modules/next/dist/server/lib/trace/constants.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892877979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Contains predefined constants for the trace span name in next/server.\n *\n * Currently, next/server/tracer is internal implementation only for tracking\n * next.js's implementation only with known span names defined here.\n **/\ndeclare enum BaseServerSpan {\n    handleRequest = \"BaseServer.handleRequest\",\n    run = \"BaseServer.run\",\n    pipe = \"BaseServer.pipe\",\n    getStaticHTML = \"BaseServer.getStaticHTML\",\n    render = \"BaseServer.render\",\n    renderToResponseWithComponents = \"BaseServer.renderToResponseWithComponents\",\n    renderToResponse = \"BaseServer.renderToResponse\",\n    renderToHTML = \"BaseServer.renderToHTML\",\n    renderError = \"BaseServer.renderError\",\n    renderErrorToResponse = \"BaseServer.renderErrorToResponse\",\n    renderErrorToHTML = \"BaseServer.renderErrorToHTML\",\n    render404 = \"BaseServer.render404\"\n}\ndeclare enum LoadComponentsSpan {\n    loadDefaultErrorComponents = \"LoadComponents.loadDefaultErrorComponents\",\n    loadComponents = \"LoadComponents.loadComponents\"\n}\ndeclare enum NextServerSpan {\n    getRequestHandler = \"NextServer.getRequestHandler\",\n    getServer = \"NextServer.getServer\",\n    getServerRequestHandler = \"NextServer.getServerRequestHandler\",\n    createServer = \"createServer.createServer\"\n}\ndeclare enum NextNodeServerSpan {\n    compression = \"NextNodeServer.compression\",\n    getBuildId = \"NextNodeServer.getBuildId\",\n    createComponentTree = \"NextNodeServer.createComponentTree\",\n    clientComponentLoading = \"NextNodeServer.clientComponentLoading\",\n    getLayoutOrPageModule = \"NextNodeServer.getLayoutOrPageModule\",\n    generateStaticRoutes = \"NextNodeServer.generateStaticRoutes\",\n    generateFsStaticRoutes = \"NextNodeServer.generateFsStaticRoutes\",\n    generatePublicRoutes = \"NextNodeServer.generatePublicRoutes\",\n    generateImageRoutes = \"NextNodeServer.generateImageRoutes.route\",\n    sendRenderResult = \"NextNodeServer.sendRenderResult\",\n    proxyRequest = \"NextNodeServer.proxyRequest\",\n    runApi = \"NextNodeServer.runApi\",\n    render = \"NextNodeServer.render\",\n    renderHTML = \"NextNodeServer.renderHTML\",\n    imageOptimizer = \"NextNodeServer.imageOptimizer\",\n    getPagePath = \"NextNodeServer.getPagePath\",\n    getRoutesManifest = \"NextNodeServer.getRoutesManifest\",\n    findPageComponents = \"NextNodeServer.findPageComponents\",\n    getFontManifest = \"NextNodeServer.getFontManifest\",\n    getServerComponentManifest = \"NextNodeServer.getServerComponentManifest\",\n    getRequestHandler = \"NextNodeServer.getRequestHandler\",\n    renderToHTML = \"NextNodeServer.renderToHTML\",\n    renderError = \"NextNodeServer.renderError\",\n    renderErrorToHTML = \"NextNodeServer.renderErrorToHTML\",\n    render404 = \"NextNodeServer.render404\",\n    startResponse = \"NextNodeServer.startResponse\",\n    route = \"route\",\n    onProxyReq = \"onProxyReq\",\n    apiResolver = \"apiResolver\",\n    internalFetch = \"internalFetch\"\n}\ndeclare enum StartServerSpan {\n    startServer = \"startServer.startServer\"\n}\ndeclare enum RenderSpan {\n    getServerSideProps = \"Render.getServerSideProps\",\n    getStaticProps = \"Render.getStaticProps\",\n    renderToString = \"Render.renderToString\",\n    renderDocument = \"Render.renderDocument\",\n    createBodyResult = \"Render.createBodyResult\"\n}\ndeclare enum AppRenderSpan {\n    renderToString = \"AppRender.renderToString\",\n    renderToReadableStream = \"AppRender.renderToReadableStream\",\n    getBodyResult = \"AppRender.getBodyResult\",\n    fetch = \"AppRender.fetch\"\n}\ndeclare enum RouterSpan {\n    executeRoute = \"Router.executeRoute\"\n}\ndeclare enum NodeSpan {\n    runHandler = \"Node.runHandler\"\n}\ndeclare enum AppRouteRouteHandlersSpan {\n    runHandler = \"AppRouteRouteHandlers.runHandler\"\n}\ndeclare enum ResolveMetadataSpan {\n    generateMetadata = \"ResolveMetadata.generateMetadata\",\n    generateViewport = \"ResolveMetadata.generateViewport\"\n}\ndeclare enum MiddlewareSpan {\n    execute = \"Middleware.execute\"\n}\ntype SpanTypes = `${BaseServerSpan}` | `${LoadComponentsSpan}` | `${NextServerSpan}` | `${StartServerSpan}` | `${NextNodeServerSpan}` | `${RenderSpan}` | `${RouterSpan}` | `${AppRenderSpan}` | `${NodeSpan}` | `${AppRouteRouteHandlersSpan}` | `${ResolveMetadataSpan}` | `${MiddlewareSpan}`;\nexport declare const NextVanillaSpanAllowlist: (BaseServerSpan | NextNodeServerSpan | RenderSpan | AppRenderSpan | NodeSpan | AppRouteRouteHandlersSpan | ResolveMetadataSpan | MiddlewareSpan)[];\nexport declare const LogSpanAllowList: NextNodeServerSpan[];\nexport { BaseServerSpan, LoadComponentsSpan, NextServerSpan, NextNodeServerSpan, StartServerSpan, RenderSpan, RouterSpan, AppRenderSpan, NodeSpan, AppRouteRouteHandlersSpan, ResolveMetadataSpan, MiddlewareSpan, };\nexport type { SpanTypes };\n"
        }
    ]
}