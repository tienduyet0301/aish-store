{
    "sourceFile": "node_modules/next/dist/server/lib/incremental-cache/shared-cache-controls.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892875800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { PrerenderManifest } from '../../../build';\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly';\nimport type { CacheControl } from '../cache-control';\n/**\n * A shared cache of cache controls for routes. This cache is used so we don't\n * have to modify the prerender manifest when we want to update the cache\n * control for a route.\n */\nexport declare class SharedCacheControls {\n    /**\n     * The prerender manifest that contains the initial cache controls for\n     * routes.\n     */\n    private readonly prerenderManifest;\n    /**\n     * The in-memory cache of cache lives for routes. This cache is populated when\n     * the cache is updated with new cache lives.\n     */\n    private static readonly cacheControls;\n    constructor(\n    /**\n     * The prerender manifest that contains the initial cache controls for\n     * routes.\n     */\n    prerenderManifest: DeepReadonly<Pick<PrerenderManifest, 'routes' | 'dynamicRoutes'>>);\n    /**\n     * Try to get the cache control value for a route. This will first try to get\n     * the value from the in-memory cache. If the value is not present in the\n     * in-memory cache, it will be sourced from the prerender manifest.\n     *\n     * @param route the route to get the cache control for\n     * @returns the cache control for the route, or undefined if the values\n     *          are not present in the in-memory cache or the prerender manifest\n     */\n    get(route: string): CacheControl | undefined;\n    /**\n     * Set the cache control for a route.\n     *\n     * @param route the route to set the cache control for\n     * @param cacheControl the cache control for the route\n     */\n    set(route: string, cacheControl: CacheControl): void;\n    /**\n     * Clear the in-memory cache of cache controls for routes.\n     */\n    clear(): void;\n}\n"
        }
    ]
}