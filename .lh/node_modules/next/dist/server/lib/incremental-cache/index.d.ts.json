{
    "sourceFile": "node_modules/next/dist/server/lib/incremental-cache/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892875729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CacheFs } from '../../../shared/lib/utils';\nimport type { PrerenderManifest } from '../../../build';\nimport { type IncrementalCacheValue, type IncrementalCache as IncrementalCacheType, type IncrementalResponseCacheEntry, type IncrementalFetchCacheEntry, type GetIncrementalFetchCacheContext, type GetIncrementalResponseCacheContext, type CachedFetchValue, type SetIncrementalFetchCacheContext, type SetIncrementalResponseCacheContext } from '../../response-cache';\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly';\nexport interface CacheHandlerContext {\n    fs?: CacheFs;\n    dev?: boolean;\n    flushToDisk?: boolean;\n    serverDistDir?: string;\n    maxMemoryCacheSize?: number;\n    fetchCacheKeyPrefix?: string;\n    prerenderManifest?: PrerenderManifest;\n    revalidatedTags: string[];\n    _requestHeaders: IncrementalCache['requestHeaders'];\n}\nexport interface CacheHandlerValue {\n    lastModified?: number;\n    age?: number;\n    cacheState?: string;\n    value: IncrementalCacheValue | null;\n}\nexport declare class CacheHandler {\n    constructor(_ctx: CacheHandlerContext);\n    get(_cacheKey: string, _ctx: GetIncrementalFetchCacheContext | GetIncrementalResponseCacheContext): Promise<CacheHandlerValue | null>;\n    set(_cacheKey: string, _data: IncrementalCacheValue | null, _ctx: SetIncrementalFetchCacheContext | SetIncrementalResponseCacheContext): Promise<void>;\n    revalidateTag(..._args: Parameters<IncrementalCache['revalidateTag']>): Promise<void>;\n    resetRequestCache(): void;\n}\nexport declare class IncrementalCache implements IncrementalCacheType {\n    readonly dev?: boolean;\n    readonly disableForTestmode?: boolean;\n    readonly cacheHandler?: CacheHandler;\n    readonly hasCustomCacheHandler: boolean;\n    readonly prerenderManifest: DeepReadonly<PrerenderManifest>;\n    readonly requestHeaders: Record<string, undefined | string | string[]>;\n    readonly requestProtocol?: 'http' | 'https';\n    readonly allowedRevalidateHeaderKeys?: string[];\n    readonly minimalMode?: boolean;\n    readonly fetchCacheKeyPrefix?: string;\n    readonly revalidatedTags?: string[];\n    readonly isOnDemandRevalidate?: boolean;\n    private readonly locks;\n    /**\n     * The cache controls for routes. This will source the values from the\n     * prerender manifest until the in-memory cache is updated with new values.\n     */\n    private readonly cacheControls;\n    constructor({ fs, dev, flushToDisk, minimalMode, serverDistDir, requestHeaders, requestProtocol, maxMemoryCacheSize, getPrerenderManifest, fetchCacheKeyPrefix, CurCacheHandler, allowedRevalidateHeaderKeys, }: {\n        fs?: CacheFs;\n        dev: boolean;\n        minimalMode?: boolean;\n        serverDistDir?: string;\n        flushToDisk?: boolean;\n        requestProtocol?: 'http' | 'https';\n        allowedRevalidateHeaderKeys?: string[];\n        requestHeaders: IncrementalCache['requestHeaders'];\n        maxMemoryCacheSize?: number;\n        getPrerenderManifest: () => DeepReadonly<PrerenderManifest>;\n        fetchCacheKeyPrefix?: string;\n        CurCacheHandler?: typeof CacheHandler;\n    });\n    private calculateRevalidate;\n    _getPathname(pathname: string, fetchCache?: boolean): string;\n    resetRequestCache(): void;\n    lock(cacheKey: string): Promise<() => Promise<void>>;\n    revalidateTag(tags: string | string[]): Promise<void>;\n    generateCacheKey(url: string, init?: RequestInit | Request): Promise<string>;\n    get(cacheKey: string, ctx: GetIncrementalFetchCacheContext): Promise<IncrementalFetchCacheEntry | null>;\n    get(cacheKey: string, ctx: GetIncrementalResponseCacheContext): Promise<IncrementalResponseCacheEntry | null>;\n    set(pathname: string, data: CachedFetchValue | null, ctx: SetIncrementalFetchCacheContext): Promise<void>;\n    set(pathname: string, data: Exclude<IncrementalCacheValue, CachedFetchValue> | null, ctx: SetIncrementalResponseCacheContext): Promise<void>;\n}\n"
        }
    ]
}