{
    "sourceFile": "node_modules/next/dist/server/lib/render-server.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892876776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextServer, RequestHandler, UpgradeHandler } from '../next';\nimport type { DevBundlerService } from './dev-bundler-service';\nimport type { PropagateToWorkersField } from './router-utils/types';\nimport type { Span } from '../../trace';\nexport type ServerInitResult = {\n    requestHandler: RequestHandler;\n    upgradeHandler: UpgradeHandler;\n    server: NextServer;\n    closeUpgraded: () => void;\n};\nexport declare function clearAllModuleContexts(): Promise<void> | undefined;\nexport declare function clearModuleContext(target: string): Promise<void> | undefined;\nexport declare function getServerField(dir: string, field: PropagateToWorkersField): Promise<string | number | import(\"../route-matcher-managers/route-matcher-manager\").RouteMatcherManager | ((prefix?: string) => void) | (() => Promise<void>) | ((err: Error) => void) | (() => import(\"../next-server\").NodeRequestHandler) | (() => Promise<void>) | ((req: import(\"../base-http/node\").NodeNextRequest | import(\"http\").IncomingMessage, res: import(\"../base-http/node\").NodeNextResponse | import(\"http\").ServerResponse, pathname: string, query?: import(\"../request-meta\").NextParsedUrlQuery, parsedUrl?: import(\"../request-meta\").NextUrlWithParsedQuery, internal?: boolean) => Promise<void>) | ((req: import(\"../base-http/node\").NodeNextRequest | import(\"http\").IncomingMessage, res: import(\"../base-http/node\").NodeNextResponse | import(\"http\").ServerResponse, pathname: string, query?: import(\"querystring\").ParsedUrlQuery) => Promise<string | null>) | ((err: Error | null, req: import(\"../base-http/node\").NodeNextRequest | import(\"http\").IncomingMessage, res: import(\"../base-http/node\").NodeNextResponse | import(\"http\").ServerResponse, pathname: string, query?: import(\"../request-meta\").NextParsedUrlQuery, setHeaders?: boolean) => Promise<void>) | ((err: Error | null, req: import(\"../base-http/node\").NodeNextRequest | import(\"http\").IncomingMessage, res: import(\"../base-http/node\").NodeNextResponse | import(\"http\").ServerResponse, pathname: string, query?: import(\"querystring\").ParsedUrlQuery) => Promise<string | null>) | ((req: import(\"../base-http/node\").NodeNextRequest | import(\"http\").IncomingMessage, res: import(\"../base-http/node\").NodeNextResponse | import(\"http\").ServerResponse, parsedUrl?: import(\"../request-meta\").NextUrlWithParsedQuery, setHeaders?: boolean) => Promise<void>) | (() => Promise<void>) | ((req: import(\"../base-http/node\").NodeNextRequest, res: import(\"../base-http/node\").NodeNextResponse, parsedUrl?: import(\"../request-meta\").NextUrlWithParsedQuery) => Promise<void>) | (({ urlPath, revalidateHeaders, opts, }: {\n    urlPath: string;\n    revalidateHeaders: {\n        [key: string]: string | string[];\n    };\n    opts: {\n        unstable_onlyGenerated?: boolean;\n    };\n}) => Promise<void>) | ((meta: import(\"../request-meta\").RequestMeta) => import(\"../base-server\").BaseRequestHandler<import(\"../base-http/node\").NodeNextRequest, import(\"../base-http/node\").NodeNextResponse>) | undefined>;\nexport declare function propagateServerField(dir: string, field: PropagateToWorkersField, value: any): Promise<void>;\ndeclare function initializeImpl(opts: {\n    dir: string;\n    port: number;\n    dev: boolean;\n    minimalMode?: boolean;\n    hostname?: string;\n    keepAliveTimeout?: number;\n    serverFields?: any;\n    server?: any;\n    experimentalTestProxy: boolean;\n    experimentalHttpsServer: boolean;\n    _ipcPort?: string;\n    _ipcKey?: string;\n    bundlerService: DevBundlerService | undefined;\n    startServerSpan: Span | undefined;\n    quiet?: boolean;\n    onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined;\n}): Promise<ServerInitResult>;\nexport declare function initialize(opts: Parameters<typeof initializeImpl>[0]): Promise<ServerInitResult>;\nexport {};\n"
        }
    ]
}