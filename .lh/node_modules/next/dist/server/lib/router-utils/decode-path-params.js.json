{
    "sourceFile": "node_modules/next/dist/server/lib/router-utils/decode-path-params.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892877156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"decodePathParams\", {\n    enumerable: true,\n    get: function() {\n        return decodePathParams;\n    }\n});\nconst _escapepathdelimiters = /*#__PURE__*/ _interop_require_default(require(\"../../../shared/lib/router/utils/escape-path-delimiters\"));\nconst _utils = require(\"../../../shared/lib/utils\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n * We only encode path delimiters for path segments from\n * getStaticPaths so we need to attempt decoding the URL\n * to match against and only escape the path delimiters\n * this allows non-ascii values to be handled e.g.\n * Japanese characters.\n * */ function decodePathParams(pathname) {\n    // TODO: investigate adding this handling for non-SSG\n    // pages so non-ascii names also work there.\n    return pathname.split('/').map((seg)=>{\n        try {\n            seg = (0, _escapepathdelimiters.default)(decodeURIComponent(seg), true);\n        } catch (_) {\n            // An improperly encoded URL was provided\n            throw Object.defineProperty(new _utils.DecodeError('Failed to decode path param(s).'), \"__NEXT_ERROR_CODE\", {\n                value: \"E539\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        return seg;\n    }).join('/');\n}\n\n//# sourceMappingURL=decode-path-params.js.map"
        }
    ]
}