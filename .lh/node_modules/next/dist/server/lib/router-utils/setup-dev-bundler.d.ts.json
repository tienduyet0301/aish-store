{
    "sourceFile": "node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892877492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfigComplete } from '../../config-shared';\nimport type { UnwrapPromise } from '../../../lib/coalesced-function';\nimport { type MiddlewareMatcher } from '../../../build/analysis/get-page-static-info';\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher';\nimport type { PropagateToWorkersField } from './types';\nimport type { NextJsHotReloaderInterface } from '../../dev/hot-reloader-types';\nimport type { Telemetry } from '../../../telemetry/storage';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type { LazyRenderServerInstance } from '../router-server';\nexport type SetupOpts = {\n    renderServer: LazyRenderServerInstance;\n    dir: string;\n    turbo?: boolean;\n    appDir?: string;\n    pagesDir?: string;\n    telemetry: Telemetry;\n    isCustomServer?: boolean;\n    fsChecker: UnwrapPromise<ReturnType<typeof import('./filesystem').setupFsCheck>>;\n    nextConfig: NextConfigComplete;\n    port: number;\n    onDevServerCleanup: ((listener: () => Promise<void>) => void) | undefined;\n    resetFetch: () => void;\n};\nexport type ServerFields = {\n    actualMiddlewareFile?: string | undefined;\n    actualInstrumentationHookFile?: string | undefined;\n    appPathRoutes?: Record<string, string | string[]>;\n    middleware?: {\n        page: string;\n        match: MiddlewareRouteMatch;\n        matchers?: MiddlewareMatcher[];\n    } | undefined;\n    hasAppNotFound?: boolean;\n    interceptionRoutes?: ReturnType<typeof import('./filesystem').buildCustomRoute>[];\n    setIsrStatus?: (key: string, value: boolean) => void;\n    resetFetch?: () => void;\n};\nexport declare function propagateServerField(opts: SetupOpts, field: PropagateToWorkersField, args: any): Promise<void>;\nexport declare function setupDevBundler(opts: SetupOpts): Promise<{\n    serverFields: ServerFields;\n    hotReloader: NextJsHotReloaderInterface;\n    requestHandler: (req: IncomingMessage, res: ServerResponse) => Promise<{\n        finished: boolean;\n    }>;\n    logErrorWithOriginalStack: (err: unknown, type?: \"unhandledRejection\" | \"uncaughtException\" | \"warning\" | \"app-dir\") => void;\n    ensureMiddleware(requestUrl?: string): Promise<void>;\n}>;\nexport type DevBundler = Awaited<ReturnType<typeof setupDevBundler>>;\n"
        }
    ]
}