{
    "sourceFile": "node_modules/next/dist/server/lib/router-utils/filesystem.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892877192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ManifestRoute, PrerenderManifest } from '../../../build';\nimport type { NextConfigComplete } from '../../config-shared';\nimport type { PatchMatcher } from '../../../shared/lib/router/utils/path-match';\nimport type { MiddlewareRouteMatch } from '../../../shared/lib/router/utils/middleware-route-matcher';\nimport { type Rewrite } from '../../../lib/load-custom-routes';\nexport type FsOutput = {\n    type: 'appFile' | 'pageFile' | 'nextImage' | 'publicFolder' | 'nextStaticFolder' | 'legacyStaticFolder' | 'devVirtualFsItem';\n    itemPath: string;\n    fsPath?: string;\n    itemsRoot?: string;\n    locale?: string;\n};\nexport type FilesystemDynamicRoute = ManifestRoute & {\n    /**\n     * The path matcher that can be used to match paths against this route.\n     */\n    match: PatchMatcher;\n};\nexport declare const buildCustomRoute: <T>(type: \"redirect\" | \"header\" | \"rewrite\" | \"before_files_rewrite\", item: T & {\n    source: string;\n}, basePath?: string, caseSensitive?: boolean) => T & {\n    match: PatchMatcher;\n    check?: boolean;\n};\nexport declare function setupFsCheck(opts: {\n    dir: string;\n    dev: boolean;\n    minimalMode?: boolean;\n    config: NextConfigComplete;\n    addDevWatcherCallback?: (arg: (files: Map<string, {\n        timestamp: number;\n    }>) => void) => void;\n}): Promise<{\n    headers: (import(\"../../../lib/load-custom-routes\").Header & {\n        match: PatchMatcher;\n        check?: boolean;\n    })[];\n    rewrites: {\n        beforeFiles: (Rewrite & {\n            match: PatchMatcher;\n            check?: boolean;\n        })[];\n        afterFiles: (Rewrite & {\n            match: PatchMatcher;\n            check?: boolean;\n        })[];\n        fallback: (Rewrite & {\n            match: PatchMatcher;\n            check?: boolean;\n        })[];\n    };\n    redirects: (import(\"../../../lib/load-custom-routes\").Redirect & {\n        match: PatchMatcher;\n        check?: boolean;\n    })[];\n    buildId: string;\n    handleLocale: (pathname: string, locales?: string[]) => {\n        locale: string | undefined;\n        pathname: string;\n    };\n    appFiles: Set<string>;\n    pageFiles: Set<string>;\n    dynamicRoutes: FilesystemDynamicRoute[];\n    nextDataRoutes: Set<string>;\n    exportPathMapRoutes: undefined | ReturnType<typeof buildCustomRoute<Rewrite>>[];\n    devVirtualFsItems: Set<string>;\n    prerenderManifest: PrerenderManifest;\n    middlewareMatcher: MiddlewareRouteMatch | undefined;\n    ensureCallback(fn: (item: FsOutput) => Promise<void> | undefined): void;\n    getItem(itemPath: string): Promise<FsOutput | null>;\n    getDynamicRoutes(): FilesystemDynamicRoute[];\n    getMiddlewareMatchers(): MiddlewareRouteMatch | undefined;\n}>;\n"
        }
    ]
}