{
    "sourceFile": "node_modules/next/dist/server/lib/lazy-result.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892876063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export type LazyResult<TValue> = PromiseLike<TValue> & {\n    value?: TValue;\n};\nexport type ResolvedLazyResult<TValue> = PromiseLike<TValue> & {\n    value: TValue;\n};\n/**\n * Calls the given async function only when the returned promise-like object is\n * awaited. Afterwards, it provides the resolved value synchronously as `value`\n * property.\n */\nexport declare function createLazyResult<TValue>(fn: () => Promise<TValue>): LazyResult<TValue>;\nexport declare function isResolvedLazyResult<TValue>(result: LazyResult<TValue>): result is ResolvedLazyResult<TValue>;\n"
        }
    ]
}