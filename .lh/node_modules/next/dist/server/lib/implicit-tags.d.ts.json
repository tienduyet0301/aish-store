{
    "sourceFile": "node_modules/next/dist/server/lib/implicit-tags.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892875584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FallbackRouteParams } from '../request/fallback-params';\nimport { type LazyResult } from './lazy-result';\nexport interface ImplicitTags {\n    /**\n     * For legacy usage, the implicit tags are passed to the incremental cache\n     * handler in `get` calls.\n     */\n    readonly tags: string[];\n    /**\n     * Modern cache handlers don't receive implicit tags. Instead, the implicit\n     * tags' expirations are stored in the work unit store, and used to compare\n     * with a cache entry's timestamp.\n     *\n     * Note: This map contains lazy results so that we can evaluate them when the\n     * first cache entry is read. It allows us to skip fetching the expiration\n     * values if no caches are read at all.\n     */\n    readonly expirationsByCacheKind: Map<string, LazyResult<number>>;\n}\nexport declare function getImplicitTags(page: string, url: {\n    pathname: string;\n    search?: string;\n}, fallbackRouteParams: null | FallbackRouteParams): Promise<ImplicitTags>;\n"
        }
    ]
}