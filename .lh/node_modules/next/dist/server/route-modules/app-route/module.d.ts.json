{
    "sourceFile": "node_modules/next/dist/server/route-modules/app-route/module.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892889116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfig } from '../../config-shared';\nimport type { AppRouteRouteDefinition } from '../../route-definitions/app-route-route-definition';\nimport type { AppSegmentConfig } from '../../../build/segment-config/app/app-segment-config';\nimport type { NextRequest } from '../../web/spec-extension/request';\nimport type { PrerenderManifest } from '../../../build';\nimport type { DeepReadonly } from '../../../shared/lib/deep-readonly';\nimport type { WorkUnitStore } from '../../app-render/work-unit-async-storage.external';\nimport { RouteModule, type RouteModuleHandleContext, type RouteModuleOptions } from '../route-module';\nimport { type WorkStoreContext } from '../../async-storage/work-store';\nimport { type HTTP_METHOD } from '../../web/http';\nimport * as serverHooks from '../../../client/components/hooks-server-context';\nimport { type WorkStore } from '../../app-render/work-async-storage.external';\nimport * as sharedModules from './shared-modules';\nimport type { RenderOptsPartial } from '../../app-render/types';\nimport type { AppSegment } from '../../../build/segment-config/app/app-segments';\nimport { type RedirectError } from '../../../client/components/redirect-error';\nexport declare class WrappedNextRouterError {\n    readonly error: RedirectError;\n    readonly headers?: Headers | undefined;\n    constructor(error: RedirectError, headers?: Headers | undefined);\n}\n/**\n * The AppRouteModule is the type of the module exported by the bundled App\n * Route module.\n */\nexport type AppRouteModule = typeof import('../../../build/templates/app-route');\nexport type AppRouteSharedContext = {\n    buildId: string;\n};\n/**\n * AppRouteRouteHandlerContext is the context that is passed to the route\n * handler for app routes.\n */\nexport interface AppRouteRouteHandlerContext extends RouteModuleHandleContext {\n    renderOpts: WorkStoreContext['renderOpts'] & Pick<RenderOptsPartial, 'onInstrumentationRequestError'> & CollectedCacheInfo;\n    prerenderManifest: DeepReadonly<PrerenderManifest>;\n    sharedContext: AppRouteSharedContext;\n}\ntype CollectedCacheInfo = {\n    collectedTags?: string;\n    collectedRevalidate?: number;\n    collectedExpire?: number;\n    collectedStale?: number;\n};\n/**\n * AppRouteHandlerFnContext is the context that is passed to the handler as the\n * second argument.\n */\ntype AppRouteHandlerFnContext = {\n    params?: Promise<Record<string, string | string[] | undefined>>;\n};\n/**\n * Handler function for app routes. If a non-Response value is returned, an error\n * will be thrown.\n */\nexport type AppRouteHandlerFn = (\n/**\n * Incoming request object.\n */\nreq: NextRequest, \n/**\n * Context properties on the request (including the parameters if this was a\n * dynamic route).\n */\nctx: AppRouteHandlerFnContext) => unknown;\n/**\n * AppRouteHandlers describes the handlers for app routes that is provided by\n * the userland module.\n */\nexport type AppRouteHandlers = {\n    [method in HTTP_METHOD]?: AppRouteHandlerFn;\n};\n/**\n * AppRouteUserlandModule is the userland module that is provided for app\n * routes. This contains all the user generated code.\n */\nexport type AppRouteUserlandModule = AppRouteHandlers & Pick<AppSegmentConfig, 'dynamic' | 'revalidate' | 'dynamicParams' | 'fetchCache'> & Pick<AppSegment, 'generateStaticParams'>;\n/**\n * AppRouteRouteModuleOptions is the options that are passed to the app route\n * module from the bundled code.\n */\nexport interface AppRouteRouteModuleOptions extends RouteModuleOptions<AppRouteRouteDefinition, AppRouteUserlandModule> {\n    readonly resolvedPagePath: string;\n    readonly nextConfigOutput: NextConfig['output'];\n}\n/**\n * AppRouteRouteHandler is the handler for app routes.\n */\nexport declare class AppRouteRouteModule extends RouteModule<AppRouteRouteDefinition, AppRouteUserlandModule> {\n    /**\n     * A reference to the request async storage.\n     */\n    readonly workUnitAsyncStorage: import(\"../../app-render/work-unit-async-storage.external\").WorkUnitAsyncStorage;\n    /**\n     * A reference to the static generation async storage.\n     */\n    readonly workAsyncStorage: import(\"../../app-render/work-async-storage.external\").WorkAsyncStorage;\n    /**\n     * An interface to call server hooks which interact with the underlying\n     * storage.\n     */\n    readonly serverHooks: typeof serverHooks;\n    static readonly sharedModules: typeof sharedModules;\n    /**\n     * A reference to the mutation related async storage, such as mutations of\n     * cookies.\n     */\n    readonly actionAsyncStorage: import(\"../../app-render/action-async-storage.external\").ActionAsyncStorage;\n    readonly resolvedPagePath: string;\n    readonly nextConfigOutput: NextConfig['output'] | undefined;\n    private readonly methods;\n    private readonly hasNonStaticMethods;\n    private readonly dynamic;\n    constructor({ userland, definition, resolvedPagePath, nextConfigOutput, }: AppRouteRouteModuleOptions);\n    /**\n     * Resolves the handler function for the given method.\n     *\n     * @param method the requested method\n     * @returns the handler function for the given method\n     */\n    private resolve;\n    private do;\n    handle(req: NextRequest, context: AppRouteRouteHandlerContext): Promise<Response>;\n}\nexport default AppRouteRouteModule;\n/**\n * Gets all the method names for handlers that are not considered static.\n *\n * @param handlers the handlers from the userland module\n * @returns the method names that are not considered static or false if all\n *          methods are static\n */\nexport declare function hasNonStaticMethods(handlers: AppRouteHandlers): boolean;\nexport declare function trackDynamic(store: WorkStore, workUnitStore: undefined | WorkUnitStore, expression: string): void;\n"
        }
    ]
}