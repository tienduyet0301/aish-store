{
    "sourceFile": "node_modules/next/dist/server/route-modules/app-route/helpers/auto-implement-methods.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892888282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"autoImplementMethods\", {\n    enumerable: true,\n    get: function() {\n        return autoImplementMethods;\n    }\n});\nconst _http = require(\"../../../web/http\");\nconst AUTOMATIC_ROUTE_METHODS = [\n    'HEAD',\n    'OPTIONS'\n];\nfunction handleMethodNotAllowedResponse() {\n    return new Response(null, {\n        status: 405\n    });\n}\nfunction autoImplementMethods(handlers) {\n    // Loop through all the HTTP methods to create the initial methods object.\n    // Each of the methods will be set to the 405 response handler.\n    const methods = _http.HTTP_METHODS.reduce((acc, method)=>({\n            ...acc,\n            // If the userland module implements the method, then use it. Otherwise,\n            // use the 405 response handler.\n            [method]: handlers[method] ?? handleMethodNotAllowedResponse\n        }), {});\n    // Get all the methods that could be automatically implemented that were not\n    // implemented by the userland module.\n    const implemented = new Set(_http.HTTP_METHODS.filter((method)=>handlers[method]));\n    const missing = AUTOMATIC_ROUTE_METHODS.filter((method)=>!implemented.has(method));\n    // Loop over the missing methods to automatically implement them if we can.\n    for (const method of missing){\n        // If the userland module doesn't implement the HEAD method, then\n        // we'll automatically implement it by calling the GET method (if it\n        // exists).\n        if (method === 'HEAD') {\n            if (handlers.GET) {\n                // Implement the HEAD method by calling the GET method.\n                methods.HEAD = handlers.GET;\n                // Mark it as implemented.\n                implemented.add('HEAD');\n            }\n            continue;\n        }\n        // If OPTIONS is not provided then implement it.\n        if (method === 'OPTIONS') {\n            // TODO: check if HEAD is implemented, if so, use it to add more headers\n            // Get all the methods that were implemented by the userland module.\n            const allow = [\n                'OPTIONS',\n                ...implemented\n            ];\n            // If the list of methods doesn't include HEAD, but it includes GET, then\n            // add HEAD as it's automatically implemented.\n            if (!implemented.has('HEAD') && implemented.has('GET')) {\n                allow.push('HEAD');\n            }\n            // Sort and join the list with commas to create the `Allow` header. See:\n            // https://httpwg.org/specs/rfc9110.html#field.allow\n            const headers = {\n                Allow: allow.sort().join(', ')\n            };\n            // Implement the OPTIONS method by returning a 204 response with the\n            // `Allow` header.\n            methods.OPTIONS = ()=>new Response(null, {\n                    status: 204,\n                    headers\n                });\n            // Mark this method as implemented.\n            implemented.add('OPTIONS');\n            continue;\n        }\n        throw Object.defineProperty(new Error(`Invariant: should handle all automatic implementable methods, got method: ${method}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E211\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return methods;\n}\n\n//# sourceMappingURL=auto-implement-methods.js.map"
        }
    ]
}