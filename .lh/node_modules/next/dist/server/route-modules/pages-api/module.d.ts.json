{
    "sourceFile": "node_modules/next/dist/server/route-modules/pages-api/module.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892890340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage, ServerResponse } from 'http';\nimport type { PagesAPIRouteDefinition } from '../../route-definitions/pages-api-route-definition';\nimport type { PageConfig } from '../../../types';\nimport type { ParsedUrlQuery } from 'querystring';\nimport { type __ApiPreviewProps } from '../../api-utils';\nimport type { RouteModuleOptions } from '../route-module';\nimport { RouteModule, type RouteModuleHandleContext } from '../route-module';\nimport { apiResolver } from '../../api-utils/node/api-resolver';\ntype PagesAPIHandleFn = (req: IncomingMessage, res: ServerResponse) => Promise<void>;\n/**\n * The PagesAPIModule is the type of the module exported by the bundled Pages\n * API module.\n */\nexport type PagesAPIModule = typeof import('../../../build/templates/pages-api');\ntype PagesAPIUserlandModule = {\n    /**\n     * The exported handler method.\n     */\n    readonly default: PagesAPIHandleFn;\n    /**\n     * The exported page config.\n     */\n    readonly config?: PageConfig;\n};\ntype PagesAPIRouteHandlerContext = RouteModuleHandleContext & {\n    /**\n     * The incoming server request in non-edge runtime.\n     */\n    req?: IncomingMessage;\n    /**\n     * The outgoing server response in non-edge runtime.\n     */\n    res?: ServerResponse;\n    /**\n     * The revalidate method used by the `revalidate` API.\n     *\n     * @param config the configuration for the revalidation\n     */\n    revalidate: (config: {\n        urlPath: string;\n        revalidateHeaders: {\n            [key: string]: string | string[];\n        };\n        opts: {\n            unstable_onlyGenerated?: boolean;\n        };\n    }) => Promise<void>;\n    /**\n     * The hostname for the request.\n     */\n    hostname?: string;\n    /**\n     * Keys allowed in the revalidate call.\n     */\n    allowedRevalidateHeaderKeys?: string[];\n    /**\n     * Whether to trust the host header.\n     */\n    trustHostHeader?: boolean;\n    /**\n     * The query for the request.\n     */\n    query: ParsedUrlQuery;\n    /**\n     * The preview props used by the `preview` API.\n     */\n    previewProps: __ApiPreviewProps;\n    /**\n     * True if the server is in development mode.\n     */\n    dev: boolean;\n    /**\n     * True if the server is in minimal mode.\n     */\n    minimalMode: boolean;\n    /**\n     * The page that's being rendered.\n     */\n    page: string;\n    /**\n     * The error handler for the request.\n     */\n    onError?: Parameters<typeof apiResolver>[8];\n    /**\n     * whether multi-zone flag is enabled for draft mode\n     */\n    multiZoneDraftMode?: boolean;\n};\nexport type PagesAPIRouteModuleOptions = RouteModuleOptions<PagesAPIRouteDefinition, PagesAPIUserlandModule>;\nexport declare class PagesAPIRouteModule extends RouteModule<PagesAPIRouteDefinition, PagesAPIUserlandModule> {\n    private apiResolverWrapped;\n    constructor(options: PagesAPIRouteModuleOptions);\n    /**\n     *\n     * @param req the incoming server request\n     * @param res the outgoing server response\n     * @param context the context for the render\n     */\n    render(req: IncomingMessage, res: ServerResponse, context: PagesAPIRouteHandlerContext): Promise<void>;\n}\nexport default PagesAPIRouteModule;\n"
        }
    ]
}