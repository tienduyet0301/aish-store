{
    "sourceFile": "node_modules/next/dist/server/route-modules/pages/module.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892889516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage, ServerResponse } from 'http';\nimport type { GetServerSideProps, GetStaticPaths, GetStaticProps, NextComponentType, PageConfig } from '../../../types';\nimport type { PagesRouteDefinition } from '../../route-definitions/pages-route-definition';\nimport type { NextParsedUrlQuery } from '../../request-meta';\nimport type { PagesRenderContext, PagesSharedContext, RenderOpts } from '../../render';\nimport type RenderResult from '../../render-result';\nimport type { AppType, DocumentType } from '../../../shared/lib/utils';\nimport { RouteModule, type RouteModuleHandleContext, type RouteModuleOptions } from '../route-module';\nimport { renderToHTML } from '../../render';\nimport * as vendoredContexts from './vendored/contexts/entrypoints';\n/**\n * The PagesModule is the type of the module exported by the bundled pages\n * module.\n */\nexport type PagesModule = typeof import('../../../build/templates/pages');\n/**\n * The userland module for a page. This is the module that is exported from the\n * page file that contains the page component, page config, and any page data\n * fetching functions.\n */\nexport type PagesUserlandModule = {\n    /**\n     * The exported page component.\n     */\n    readonly default: NextComponentType;\n    /**\n     * The exported page config.\n     */\n    readonly config?: PageConfig;\n    /**\n     * The exported `getStaticProps` function.\n     */\n    readonly getStaticProps?: GetStaticProps;\n    /**\n     * The exported `getStaticPaths` function.\n     */\n    readonly getStaticPaths?: GetStaticPaths;\n    /**\n     * The exported `getServerSideProps` function.\n     */\n    readonly getServerSideProps?: GetServerSideProps;\n};\n/**\n * The components that are used to render a page. These aren't tied to the\n * specific page being rendered, but rather are the components that are used to\n * render all pages.\n */\ntype PagesComponents = {\n    /**\n     * The `App` component. This could be exported by a user's custom `_app` page\n     * file, or it could be the default `App` component.\n     */\n    readonly App: AppType;\n    /**\n     * The `Document` component. This could be exported by a user's custom\n     * `_document` page file, or it could be the default `Document` component.\n     */\n    readonly Document: DocumentType;\n};\nexport interface PagesRouteModuleOptions extends RouteModuleOptions<PagesRouteDefinition, PagesUserlandModule> {\n    readonly components: PagesComponents;\n}\n/**\n * AppRouteRouteHandlerContext is the context that is passed to the route\n * handler for app routes.\n */\nexport interface PagesRouteHandlerContext extends RouteModuleHandleContext {\n    /**\n     * The page for the given route.\n     */\n    page: string;\n    /**\n     * The parsed URL query for the given request.\n     */\n    query: NextParsedUrlQuery;\n    /**\n     * The shared context used for all page renders.\n     */\n    sharedContext: PagesSharedContext;\n    /**\n     * The context for the given request.\n     */\n    renderContext: PagesRenderContext;\n    /**\n     * The arguments for the given request.\n    /**\n     * The RenderOpts for the given request which include the specific modules to\n     * use for rendering.\n     */\n    renderOpts: Omit<RenderOpts, 'Document' | 'App'>;\n}\nexport declare class PagesRouteModule extends RouteModule<PagesRouteDefinition, PagesUserlandModule> {\n    private readonly components;\n    constructor(options: PagesRouteModuleOptions);\n    render(req: IncomingMessage, res: ServerResponse, context: PagesRouteHandlerContext): Promise<RenderResult>;\n}\ndeclare const vendored: {\n    contexts: typeof vendoredContexts;\n};\nexport { renderToHTML, vendored };\nexport default PagesRouteModule;\n"
        }
    ]
}