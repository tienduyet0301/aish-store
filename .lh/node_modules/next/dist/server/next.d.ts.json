{
    "sourceFile": "node_modules/next/dist/server/next.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892878876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Options as DevServerOptions } from './dev/next-dev-server';\nimport type { Options as ServerOptions } from './next-server';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type { Duplex } from 'stream';\nimport type { NextUrlWithParsedQuery } from './request-meta';\nimport './require-hook';\nimport './node-polyfill-crypto';\nimport type { default as NextNodeServer } from './next-server';\nimport type { ServerFields } from './lib/router-utils/setup-dev-bundler';\nexport type NextServerOptions = Omit<ServerOptions | DevServerOptions, 'conf'> & Partial<Pick<ServerOptions | DevServerOptions, 'conf'>>;\nexport type RequestHandler = (req: IncomingMessage, res: ServerResponse, parsedUrl?: NextUrlWithParsedQuery | undefined) => Promise<void>;\nexport type UpgradeHandler = (req: IncomingMessage, socket: Duplex, head: Buffer) => Promise<void>;\ndeclare const SYMBOL_LOAD_CONFIG: unique symbol;\ninterface NextWrapperServer {\n    options: NextServerOptions;\n    hostname: string | undefined;\n    port: number | undefined;\n    getRequestHandler(): RequestHandler;\n    prepare(serverFields?: ServerFields): Promise<void>;\n    setAssetPrefix(assetPrefix: string): void;\n    close(): Promise<void>;\n    getUpgradeHandler(): UpgradeHandler;\n    logError(...args: Parameters<NextNodeServer['logError']>): void;\n    render(...args: Parameters<NextNodeServer['render']>): ReturnType<NextNodeServer['render']>;\n    renderToHTML(...args: Parameters<NextNodeServer['renderToHTML']>): ReturnType<NextNodeServer['renderToHTML']>;\n    renderError(...args: Parameters<NextNodeServer['renderError']>): ReturnType<NextNodeServer['renderError']>;\n    renderErrorToHTML(...args: Parameters<NextNodeServer['renderErrorToHTML']>): ReturnType<NextNodeServer['renderErrorToHTML']>;\n    render404(...args: Parameters<NextNodeServer['render404']>): ReturnType<NextNodeServer['render404']>;\n}\n/** The wrapper server used by `next start` */\nexport declare class NextServer implements NextWrapperServer {\n    private serverPromise?;\n    private server?;\n    private reqHandler?;\n    private reqHandlerPromise?;\n    private preparedAssetPrefix?;\n    options: NextServerOptions;\n    constructor(options: NextServerOptions);\n    get hostname(): string | undefined;\n    get port(): number | undefined;\n    getRequestHandler(): RequestHandler;\n    getUpgradeHandler(): UpgradeHandler;\n    setAssetPrefix(assetPrefix: string): void;\n    logError(...args: Parameters<NextWrapperServer['logError']>): void;\n    render(...args: Parameters<NextWrapperServer['render']>): Promise<void>;\n    renderToHTML(...args: Parameters<NextWrapperServer['renderToHTML']>): Promise<string | null>;\n    renderError(...args: Parameters<NextWrapperServer['renderError']>): Promise<void>;\n    renderErrorToHTML(...args: Parameters<NextWrapperServer['renderErrorToHTML']>): Promise<string | null>;\n    render404(...args: Parameters<NextWrapperServer['render404']>): Promise<void>;\n    prepare(serverFields?: ServerFields): Promise<void>;\n    close(): Promise<void>;\n    private createServer;\n    private [SYMBOL_LOAD_CONFIG];\n    private getServer;\n    private getServerRequestHandler;\n}\ndeclare function createServer(options: NextServerOptions & {\n    turbo?: boolean;\n    turbopack?: boolean;\n}): NextWrapperServer;\nexport default createServer;\n"
        }
    ]
}