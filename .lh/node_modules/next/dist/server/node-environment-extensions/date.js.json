{
    "sourceFile": "node_modules/next/dist/server/node-environment-extensions/date.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892879103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * We extend `Date` during builds and revalidates to ensure that prerenders don't observe the clock as a source of IO\n * When dynamicIO is enabled. The current time is a form of IO even though it resolves synchronously. When dyanmicIO is\n * enabled we need to ensure that clock time is excluded from prerenders unless it is cached.\n *\n * There is tension here because time is used for both output and introspection. While arbitrary we intend to reserve\n * `Date` for output use cases and `performance` for introspection use cases. If you want to measure\n * how long something takes use `performance.timeOrigin` and `performance.now()` rather than `Date.now()` for instance.\n *\n * The extensions here never error nor alter the underlying Date objects, strings, and numbers created and thus should be transparent to callers.\n */ \"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _utils = require(\"./utils\");\nfunction createNow(originalNow) {\n    return ({\n        now: function now() {\n            (0, _utils.io)('`Date.now()`', 'time');\n            return originalNow();\n        }\n    })['now'.slice()].bind(null);\n}\nfunction createDate(originalConstructor) {\n    const properties = Object.getOwnPropertyDescriptors(originalConstructor);\n    properties.now.value = createNow(originalConstructor.now);\n    const apply = Reflect.apply;\n    const construct = Reflect.construct;\n    const newConstructor = Object.defineProperties(// Ideally this should not minify the name.\n    function Date1() {\n        if (new.target === undefined) {\n            (0, _utils.io)('`Date()`', 'time');\n            return apply(originalConstructor, undefined, arguments);\n        }\n        if (arguments.length === 0) {\n            (0, _utils.io)('`new Date()`', 'time');\n        }\n        return construct(originalConstructor, arguments, new.target);\n    }, properties);\n    Object.defineProperty(originalConstructor.prototype, 'constructor', {\n        value: newConstructor\n    });\n    return newConstructor;\n}\ntry {\n    // eslint-disable-next-line no-native-reassign\n    Date = createDate(Date);\n} catch  {\n    console.error('Failed to install `Date` class extension. When using `experimental.dynamicIO`, APIs that read the current time will not correctly trigger dynamic behavior.');\n}\n\n//# sourceMappingURL=date.js.map"
        }
    ]
}