{
    "sourceFile": "node_modules/next/dist/server/render.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892881754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage, ServerResponse } from 'http';\nimport type { ParsedUrlQuery } from 'querystring';\nimport type { DomainLocale } from './config';\nimport type { AppType, DocumentType } from '../shared/lib/utils';\nimport type { ImageConfigComplete } from '../shared/lib/image-config';\nimport { type __ApiPreviewProps } from './api-utils';\nimport type { LoadComponentsReturnType } from './load-components';\nimport type { ServerRuntime, SizeLimit } from '../types';\nimport type { ClientReferenceManifest } from '../build/webpack/plugins/flight-manifest-plugin';\nimport type { NextFontManifest } from '../build/webpack/plugins/next-font-manifest-plugin';\nimport type { PagesModule } from './route-modules/pages/module';\nimport type { NextParsedUrlQuery } from './request-meta';\nimport RenderResult from './render-result';\nimport type { DeepReadonly } from '../shared/lib/deep-readonly';\nimport type { PagesDevOverlayType } from '../client/components/react-dev-overlay/pages/pages-dev-overlay';\nexport type RenderOptsPartial = {\n    canonicalBase: string;\n    runtimeConfig?: {\n        [key: string]: any;\n    };\n    assetPrefix?: string;\n    err?: Error | null;\n    nextExport?: boolean;\n    dev?: boolean;\n    ampPath?: string;\n    ErrorDebug?: PagesDevOverlayType;\n    ampValidator?: (html: string, pathname: string) => Promise<void>;\n    ampSkipValidation?: boolean;\n    ampOptimizerConfig?: {\n        [key: string]: any;\n    };\n    isNextDataRequest?: boolean;\n    params?: ParsedUrlQuery;\n    previewProps: __ApiPreviewProps | undefined;\n    basePath: string;\n    unstable_runtimeJS?: false;\n    unstable_JsPreload?: false;\n    optimizeCss: any;\n    nextConfigOutput?: 'standalone' | 'export';\n    nextScriptWorkers: any;\n    assetQueryString?: string;\n    resolvedUrl?: string;\n    resolvedAsPath?: string;\n    setIsrStatus?: (key: string, value: boolean | null) => void;\n    clientReferenceManifest?: DeepReadonly<ClientReferenceManifest>;\n    nextFontManifest?: DeepReadonly<NextFontManifest>;\n    distDir?: string;\n    locale?: string;\n    locales?: readonly string[];\n    defaultLocale?: string;\n    domainLocales?: readonly DomainLocale[];\n    disableOptimizedLoading?: boolean;\n    supportsDynamicResponse: boolean;\n    botType?: 'dom' | 'html' | undefined;\n    serveStreamingMetadata?: boolean;\n    runtime?: ServerRuntime;\n    serverComponents?: boolean;\n    serverActions?: {\n        bodySizeLimit?: SizeLimit;\n        allowedOrigins?: string[];\n    };\n    crossOrigin?: 'anonymous' | 'use-credentials' | '' | undefined;\n    images: ImageConfigComplete;\n    largePageDataBytes?: number;\n    isOnDemandRevalidate?: boolean;\n    strictNextHead: boolean;\n    isPossibleServerAction?: boolean;\n    isExperimentalCompile?: boolean;\n    isPrefetch?: boolean;\n    expireTime?: number;\n    experimental: {\n        clientTraceMetadata?: string[];\n    };\n};\nexport type RenderOpts = LoadComponentsReturnType<PagesModule> & RenderOptsPartial;\n/**\n * Shared context used for all page renders.\n */\nexport type PagesSharedContext = {\n    /**\n     * Used to facilitate caching of page bundles, we send it to the client so\n     * that pageloader knows where to load bundles.\n     */\n    buildId: string;\n    /**\n     * The deployment ID if the user is deploying to a platform that provides one.\n     */\n    deploymentId: string | undefined;\n    /**\n     * True if the user is using a custom server.\n     */\n    customServer: true | undefined;\n};\n/**\n * The context for the given request.\n */\nexport type PagesRenderContext = {\n    /**\n     * Whether this should be rendered as a fallback page.\n     */\n    isFallback: boolean;\n    /**\n     * Whether this is in draft mode.\n     */\n    isDraftMode: boolean | undefined;\n    /**\n     * In development, the original source page that returned a 404.\n     */\n    developmentNotFoundSourcePage: string | undefined;\n};\n/**\n * RenderOptsExtra is being used to split away functionality that's within the\n * renderOpts. Eventually we can have more explicit render options for each\n * route kind.\n */\nexport type RenderOptsExtra = {\n    App: AppType;\n    Document: DocumentType;\n};\nexport declare function errorToJSON(err: Error): {\n    name: string;\n    source: \"server\" | \"edge-server\";\n    message: string;\n    stack: string | undefined;\n    digest: any;\n};\nexport declare function renderToHTMLImpl(req: IncomingMessage, res: ServerResponse, pathname: string, query: NextParsedUrlQuery, renderOpts: Omit<RenderOpts, keyof RenderOptsExtra>, extra: RenderOptsExtra, sharedContext: PagesSharedContext, renderContext: PagesRenderContext): Promise<RenderResult>;\nexport type PagesRender = (req: IncomingMessage, res: ServerResponse, pathname: string, query: NextParsedUrlQuery, renderOpts: RenderOpts, sharedContext: PagesSharedContext, renderContext: PagesRenderContext) => Promise<RenderResult>;\nexport declare const renderToHTML: PagesRender;\n"
        }
    ]
}