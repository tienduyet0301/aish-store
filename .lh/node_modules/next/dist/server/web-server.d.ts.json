{
    "sourceFile": "node_modules/next/dist/server/web-server.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892897964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { WebNextRequest, WebNextResponse } from './base-http/web';\nimport type RenderResult from './render-result';\nimport type { NextParsedUrlQuery, NextUrlWithParsedQuery } from './request-meta';\nimport type { Params } from './request/params';\nimport type { LoadComponentsReturnType } from './load-components';\nimport type { LoadedRenderOpts, MiddlewareRoutingItem, NormalizedRouteManifest, Options, RouteHandler } from './base-server';\nimport type { CacheControl } from './lib/cache-control';\nimport BaseServer from './base-server';\nimport WebResponseCache from './response-cache/web';\nimport { IncrementalCache } from './lib/incremental-cache';\nimport type { PAGE_TYPES } from '../lib/page-types';\nimport type { Rewrite } from '../lib/load-custom-routes';\nimport type { ServerOnInstrumentationRequestError } from './app-render/types';\ninterface WebServerOptions extends Options {\n    buildId: string;\n    webServerConfig: {\n        page: string;\n        pathname: string;\n        pagesType: PAGE_TYPES;\n        loadComponent: (page: string) => Promise<LoadComponentsReturnType | null>;\n        extendRenderOpts: Partial<BaseServer['renderOpts']> & {\n            serverActionsManifest?: any;\n        };\n        renderToHTML: typeof import('./app-render/app-render').renderToHTMLOrFlight | undefined;\n        incrementalCacheHandler?: any;\n        interceptionRouteRewrites?: Rewrite[];\n    };\n}\ntype WebRouteHandler = RouteHandler<WebNextRequest, WebNextResponse>;\nexport default class NextWebServer extends BaseServer<WebServerOptions, WebNextRequest, WebNextResponse> {\n    constructor(options: WebServerOptions);\n    protected getIncrementalCache({ requestHeaders, }: {\n        requestHeaders: IncrementalCache['requestHeaders'];\n    }): Promise<IncrementalCache>;\n    protected getResponseCache(): WebResponseCache;\n    protected hasPage(page: string): Promise<boolean>;\n    protected getBuildId(): string;\n    protected getEnabledDirectories(): {\n        app: boolean;\n        pages: boolean;\n    };\n    protected getPagesManifest(): {\n        [x: string]: string;\n    };\n    protected getAppPathsManifest(): {\n        [x: string]: string;\n    };\n    protected attachRequestMeta(req: WebNextRequest, parsedUrl: NextUrlWithParsedQuery): void;\n    protected getPrerenderManifest(): {\n        version: any;\n        routes: {};\n        dynamicRoutes: {};\n        notFoundRoutes: never[];\n        preview: {\n            previewModeId: string;\n            previewModeSigningKey: string;\n            previewModeEncryptionKey: string;\n        };\n    };\n    protected getNextFontManifest(): {\n        readonly pages: {\n            readonly [x: string]: readonly string[];\n        };\n        readonly app: {\n            readonly [x: string]: readonly string[];\n        };\n        readonly appUsingSizeAdjust: boolean;\n        readonly pagesUsingSizeAdjust: boolean;\n    } | undefined;\n    protected handleCatchallRenderRequest: WebRouteHandler;\n    protected renderHTML(req: WebNextRequest, res: WebNextResponse, pathname: string, query: NextParsedUrlQuery, renderOpts: LoadedRenderOpts): Promise<RenderResult>;\n    protected sendRenderResult(_req: WebNextRequest, res: WebNextResponse, options: {\n        result: RenderResult;\n        type: 'html' | 'json';\n        generateEtags: boolean;\n        poweredByHeader: boolean;\n        cacheControl: CacheControl | undefined;\n    }): Promise<void>;\n    protected findPageComponents({ page, query, params, url: _url, }: {\n        page: string;\n        query: NextParsedUrlQuery;\n        params: Params | null;\n        isAppPath: boolean;\n        url?: string;\n    }): Promise<{\n        query: {\n            [x: string]: import(\"./request/params\").ParamValue;\n            _rsc?: string;\n            amp?: \"1\";\n        };\n        components: LoadComponentsReturnType;\n    } | null>;\n    protected runApi(): Promise<boolean>;\n    protected handleApiRequest(): Promise<boolean>;\n    protected loadEnvConfig(): void;\n    protected getPublicDir(): string;\n    protected getHasStaticDir(): boolean;\n    protected getFontManifest(): undefined;\n    protected handleCompression(): void;\n    protected handleUpgrade(): Promise<void>;\n    protected getFallbackErrorComponents(_url?: string): Promise<LoadComponentsReturnType | null>;\n    protected getRoutesManifest(): NormalizedRouteManifest | undefined;\n    protected getMiddleware(): Promise<MiddlewareRoutingItem | undefined>;\n    protected getFilesystemPaths(): Set<string>;\n    protected getinterceptionRoutePatterns(): RegExp[];\n    protected loadInstrumentationModule(): Promise<import(\"./instrumentation/types\").InstrumentationModule | undefined>;\n    protected instrumentationOnRequestError(...args: Parameters<ServerOnInstrumentationRequestError>): Promise<void>;\n}\nexport {};\n"
        }
    ]
}