{
    "sourceFile": "node_modules/next/dist/server/load-manifest.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892878559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { DeepReadonly } from '../shared/lib/deep-readonly';\n/**\n * Load a manifest file from the file system. Optionally cache the manifest in\n * memory to avoid reading the file multiple times using the provided cache or\n * defaulting to a shared module cache. The manifest is frozen to prevent\n * modifications if it is cached.\n *\n * @param path the path to the manifest file\n * @param shouldCache whether to cache the manifest in memory\n * @param cache the cache to use for storing the manifest\n * @returns the manifest object\n */\nexport declare function loadManifest<T extends object>(path: string, shouldCache: false): T;\nexport declare function loadManifest<T extends object>(path: string, shouldCache?: boolean, cache?: Map<string, unknown>): DeepReadonly<T>;\nexport declare function loadManifest<T extends object>(path: string, shouldCache?: true, cache?: Map<string, unknown>): DeepReadonly<T>;\nexport declare function evalManifest<T extends object>(path: string, shouldCache: false): T;\nexport declare function evalManifest<T extends object>(path: string, shouldCache?: boolean, cache?: Map<string, unknown>): DeepReadonly<T>;\nexport declare function evalManifest<T extends object>(path: string, shouldCache?: true, cache?: Map<string, unknown>): DeepReadonly<T>;\nexport declare function clearManifestCache(path: string, cache?: Map<string, unknown>): boolean;\n"
        }
    ]
}