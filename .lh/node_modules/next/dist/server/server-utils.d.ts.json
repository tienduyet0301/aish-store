{
    "sourceFile": "node_modules/next/dist/server/server-utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892890769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Rewrite } from '../lib/load-custom-routes';\nimport type { RouteMatchFn } from '../shared/lib/router/utils/route-matcher';\nimport type { NextConfig } from './config';\nimport type { BaseNextRequest } from './base-http';\nimport type { ParsedUrlQuery } from 'querystring';\nimport type { UrlWithParsedQuery } from 'url';\nimport { getNamedRouteRegex } from '../shared/lib/router/utils/route-regex';\nimport type { IncomingHttpHeaders } from 'http';\nexport declare function normalizeVercelUrl(req: BaseNextRequest, paramKeys: string[], defaultRouteRegex: ReturnType<typeof getNamedRouteRegex> | undefined): void;\nexport declare function interpolateDynamicPath(pathname: string, params: ParsedUrlQuery, defaultRouteRegex?: ReturnType<typeof getNamedRouteRegex> | undefined): string;\nexport declare function normalizeDynamicRouteParams(query: ParsedUrlQuery, defaultRouteRegex: ReturnType<typeof getNamedRouteRegex>, defaultRouteMatches: ParsedUrlQuery, ignoreMissingOptional: boolean): {\n    params: ParsedUrlQuery;\n    hasValidParams: boolean;\n};\nexport declare function getUtils({ page, i18n, basePath, rewrites, pageIsDynamic, trailingSlash, caseSensitive, }: {\n    page: string;\n    i18n?: NextConfig['i18n'];\n    basePath: string;\n    rewrites: {\n        fallback?: ReadonlyArray<Rewrite>;\n        afterFiles?: ReadonlyArray<Rewrite>;\n        beforeFiles?: ReadonlyArray<Rewrite>;\n    };\n    pageIsDynamic: boolean;\n    trailingSlash?: boolean;\n    caseSensitive: boolean;\n}): {\n    handleRewrites: (req: BaseNextRequest, parsedUrl: UrlWithParsedQuery) => {};\n    defaultRouteRegex: {\n        namedRegex: string;\n        routeKeys: {\n            [named: string]: string;\n        };\n        groups: {\n            [groupName: string]: import(\"../shared/lib/router/utils/route-regex\").Group;\n        };\n        re: RegExp;\n    } | undefined;\n    dynamicRouteMatcher: RouteMatchFn | undefined;\n    defaultRouteMatches: ParsedUrlQuery | undefined;\n    getParamsFromRouteMatches: (routeMatchesHeader: string) => import(\"./request/params\").Params | null;\n    /**\n     * Normalize dynamic route params.\n     *\n     * @param query - The query params to normalize.\n     * @param ignoreMissingOptional - Whether to ignore missing optional params.\n     * @returns The normalized params and whether they are valid.\n     */\n    normalizeDynamicRouteParams: (query: ParsedUrlQuery, ignoreMissingOptional: boolean) => {\n        params: ParsedUrlQuery;\n        hasValidParams: boolean;\n    };\n    normalizeVercelUrl: (req: BaseNextRequest, paramKeys: string[]) => void;\n    interpolateDynamicPath: (pathname: string, params: Record<string, undefined | string | string[]>) => string;\n};\nexport declare function getPreviouslyRevalidatedTags(headers: IncomingHttpHeaders, previewModeId: string | undefined): string[];\n"
        }
    ]
}