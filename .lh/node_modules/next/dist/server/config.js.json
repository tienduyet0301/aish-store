{
    "sourceFile": "node_modules/next/dist/server/config.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892872394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    getConfiguredExperimentalFeatures: null,\n    normalizeConfig: null,\n    warnOptionHasBeenDeprecated: null,\n    warnOptionHasBeenMovedOutOfExperimental: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return loadConfig;\n    },\n    getConfiguredExperimentalFeatures: function() {\n        return getConfiguredExperimentalFeatures;\n    },\n    normalizeConfig: function() {\n        return _configshared.normalizeConfig;\n    },\n    warnOptionHasBeenDeprecated: function() {\n        return warnOptionHasBeenDeprecated;\n    },\n    warnOptionHasBeenMovedOutOfExperimental: function() {\n        return warnOptionHasBeenMovedOutOfExperimental;\n    }\n});\nconst _fs = require(\"fs\");\nconst _path = require(\"path\");\nconst _url = require(\"url\");\nconst _findup = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/find-up\"));\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../build/output/log\"));\nconst _constants = require(\"../shared/lib/constants\");\nconst _configshared = require(\"./config-shared\");\nconst _configutils = require(\"./config-utils\");\nconst _imageconfig = require(\"../shared/lib/image-config\");\nconst _env = require(\"@next/env\");\nconst _flushandexit = require(\"../telemetry/flush-and-exit\");\nconst _findroot = require(\"../lib/find-root\");\nconst _setuphttpagentenv = require(\"./setup-http-agent-env\");\nconst _pathhasprefix = require(\"../shared/lib/router/utils/path-has-prefix\");\nconst _matchremotepattern = require(\"../shared/lib/match-remote-pattern\");\nconst _ciinfo = require(\"../server/ci-info\");\nconst _transpileconfig = require(\"../build/next-config-ts/transpile-config\");\nconst _dset = require(\"../shared/lib/dset\");\nconst _zod = require(\"../shared/lib/zod\");\nconst _isbot = require(\"../shared/lib/router/utils/is-bot\");\nconst _findpagesdir = require(\"../lib/find-pages-dir\");\nconst _canaryonly = require(\"../shared/lib/canary-only\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction normalizeNextConfigZodErrors(error) {\n    let shouldExit = false;\n    const issues = (0, _zod.normalizeZodErrors)(error);\n    return [\n        issues.flatMap(({ issue, message })=>{\n            if (issue.path[0] === 'images') {\n                // We exit the build when encountering an error in the images config\n                shouldExit = true;\n            }\n            return message;\n        }),\n        shouldExit\n    ];\n}\nfunction warnOptionHasBeenDeprecated(config, nestedPropertyKey, reason, silent) {\n    let hasWarned = false;\n    if (!silent) {\n        let current = config;\n        let found = true;\n        const nestedPropertyKeys = nestedPropertyKey.split('.');\n        for (const key of nestedPropertyKeys){\n            if (current[key] !== undefined) {\n                current = current[key];\n            } else {\n                found = false;\n                break;\n            }\n        }\n        if (found) {\n            _log.warnOnce(reason);\n            hasWarned = true;\n        }\n    }\n    return hasWarned;\n}\nfunction warnOptionHasBeenMovedOutOfExperimental(config, oldExperimentalKey, newKey, configFileName, silent) {\n    if (config.experimental && oldExperimentalKey in config.experimental) {\n        if (!silent) {\n            _log.warn(`\\`experimental.${oldExperimentalKey}\\` has been moved to \\`${newKey}\\`. ` + `Please update your ${configFileName} file accordingly.`);\n        }\n        let current = config;\n        const newKeys = newKey.split('.');\n        while(newKeys.length > 1){\n            const key = newKeys.shift();\n            current[key] = current[key] || {};\n            current = current[key];\n        }\n        current[newKeys.shift()] = config.experimental[oldExperimentalKey];\n    }\n    return config;\n}\nfunction warnCustomizedOption(config, key, defaultValue, customMessage, configFileName, silent) {\n    const segs = key.split('.');\n    let current = config;\n    while(segs.length >= 1){\n        const seg = segs.shift();\n        if (!(seg in current)) {\n            return;\n        }\n        current = current[seg];\n    }\n    if (!silent && current !== defaultValue) {\n        _log.warn(`The \"${key}\" option has been modified. ${customMessage ? customMessage + '. ' : ''}It should be removed from your ${configFileName}.`);\n    }\n}\nfunction assignDefaults(dir, userConfig, silent) {\n    var _defaultConfig_experimental, _result_experimental, _result_devIndicators, _result_experimental_serverActions, _result_experimental1, _result_turbopack, _result_turbopack1, _result_turbopack2, _result_devIndicators1, _result_experimental2, _result_experimental3;\n    const configFileName = userConfig.configFileName;\n    if (typeof userConfig.exportTrailingSlash !== 'undefined') {\n        if (!silent) {\n            _log.warn(`The \"exportTrailingSlash\" option has been renamed to \"trailingSlash\". Please update your ${configFileName}.`);\n        }\n        if (typeof userConfig.trailingSlash === 'undefined') {\n            userConfig.trailingSlash = userConfig.exportTrailingSlash;\n        }\n        delete userConfig.exportTrailingSlash;\n    }\n    const config = Object.keys(userConfig).reduce((currentConfig, key)=>{\n        const value = userConfig[key];\n        if (value === undefined || value === null) {\n            return currentConfig;\n        }\n        if (key === 'distDir') {\n            if (typeof value !== 'string') {\n                throw Object.defineProperty(new Error(`Specified distDir is not a string, found type \"${typeof value}\"`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E206\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            const userDistDir = value.trim();\n            // don't allow public as the distDir as this is a reserved folder for\n            // public files\n            if (userDistDir === 'public') {\n                throw Object.defineProperty(new Error(`The 'public' directory is reserved in Next.js and can not be set as the 'distDir'. https://nextjs.org/docs/messages/can-not-output-to-public`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E221\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            // make sure distDir isn't an empty string as it can result in the provided\n            // directory being deleted in development mode\n            if (userDistDir.length === 0) {\n                throw Object.defineProperty(new Error(`Invalid distDir provided, distDir can not be an empty string. Please remove this config or set it to undefined`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E391\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n        }\n        if (key === 'pageExtensions') {\n            if (!Array.isArray(value)) {\n                throw Object.defineProperty(new Error(`Specified pageExtensions is not an array of strings, found \"${value}\". Please update this config or remove it.`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E140\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!value.length) {\n                throw Object.defineProperty(new Error(`Specified pageExtensions is an empty array. Please update it with the relevant extensions or remove it.`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E43\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            value.forEach((ext)=>{\n                if (typeof ext !== 'string') {\n                    throw Object.defineProperty(new Error(`Specified pageExtensions is not an array of strings, found \"${ext}\" of type \"${typeof ext}\". Please update this config or remove it.`), \"__NEXT_ERROR_CODE\", {\n                        value: \"E108\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            });\n        }\n        if (!!value && value.constructor === Object) {\n            currentConfig[key] = {\n                ..._configshared.defaultConfig[key],\n                ...Object.keys(value).reduce((c, k)=>{\n                    const v = value[k];\n                    if (v !== undefined && v !== null) {\n                        c[k] = v;\n                    }\n                    return c;\n                }, {})\n            };\n        } else {\n            currentConfig[key] = value;\n        }\n        return currentConfig;\n    }, {});\n    // TODO: remove these once we've made PPR default\n    // If this was defaulted to true, it implies that the configuration was\n    // overridden for testing to be defaulted on.\n    if ((_defaultConfig_experimental = _configshared.defaultConfig.experimental) == null ? void 0 : _defaultConfig_experimental.ppr) {\n        _log.warn(`\\`experimental.ppr\\` has been defaulted to \\`true\\` because \\`__NEXT_EXPERIMENTAL_PPR\\` was set to \\`true\\` during testing.`);\n    }\n    const result = {\n        ..._configshared.defaultConfig,\n        ...config\n    };\n    if (((_result_experimental = result.experimental) == null ? void 0 : _result_experimental.allowDevelopmentBuild) && process.env.NODE_ENV !== 'development') {\n        throw Object.defineProperty(new Error(`The experimental.allowDevelopmentBuild option requires NODE_ENV to be explicitly set to 'development'.`), \"__NEXT_ERROR_CODE\", {\n            value: \"E195\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if ((0, _canaryonly.isStableBuild)()) {\n        var _result_experimental4, _result_experimental5, _result_experimental6, _result_experimental7;\n        // Prevents usage of certain experimental features outside of canary\n        if ((_result_experimental4 = result.experimental) == null ? void 0 : _result_experimental4.ppr) {\n            throw Object.defineProperty(new _canaryonly.CanaryOnlyError({\n                feature: 'experimental.ppr'\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        } else if ((_result_experimental5 = result.experimental) == null ? void 0 : _result_experimental5.dynamicIO) {\n            throw Object.defineProperty(new _canaryonly.CanaryOnlyError({\n                feature: 'experimental.dynamicIO'\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        } else if ((_result_experimental6 = result.experimental) == null ? void 0 : _result_experimental6.turbopackPersistentCaching) {\n            throw Object.defineProperty(new _canaryonly.CanaryOnlyError({\n                feature: 'experimental.turbopackPersistentCaching'\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        } else if ((_result_experimental7 = result.experimental) == null ? void 0 : _result_experimental7.nodeMiddleware) {\n            throw Object.defineProperty(new _canaryonly.CanaryOnlyError({\n                feature: 'experimental.nodeMiddleware'\n            }), \"__NEXT_ERROR_CODE\", {\n                value: \"E394\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (result.output === 'export') {\n        if (result.i18n) {\n            throw Object.defineProperty(new Error('Specified \"i18n\" cannot be used with \"output: export\". See more info here: https://nextjs.org/docs/messages/export-no-i18n'), \"__NEXT_ERROR_CODE\", {\n                value: \"E493\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!_ciinfo.hasNextSupport) {\n            if (result.rewrites) {\n                _log.warn('Specified \"rewrites\" will not automatically work with \"output: export\". See more info here: https://nextjs.org/docs/messages/export-no-custom-routes');\n            }\n            if (result.redirects) {\n                _log.warn('Specified \"redirects\" will not automatically work with \"output: export\". See more info here: https://nextjs.org/docs/messages/export-no-custom-routes');\n            }\n            if (result.headers) {\n                _log.warn('Specified \"headers\" will not automatically work with \"output: export\". See more info here: https://nextjs.org/docs/messages/export-no-custom-routes');\n            }\n        }\n    }\n    if (typeof result.assetPrefix !== 'string') {\n        throw Object.defineProperty(new Error(`Specified assetPrefix is not a string, found type \"${typeof result.assetPrefix}\" https://nextjs.org/docs/messages/invalid-assetprefix`), \"__NEXT_ERROR_CODE\", {\n            value: \"E68\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (typeof result.basePath !== 'string') {\n        throw Object.defineProperty(new Error(`Specified basePath is not a string, found type \"${typeof result.basePath}\"`), \"__NEXT_ERROR_CODE\", {\n            value: \"E326\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (result.basePath !== '') {\n        if (result.basePath === '/') {\n            throw Object.defineProperty(new Error(`Specified basePath /. basePath has to be either an empty string or a path prefix\"`), \"__NEXT_ERROR_CODE\", {\n                value: \"E95\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!result.basePath.startsWith('/')) {\n            throw Object.defineProperty(new Error(`Specified basePath has to start with a /, found \"${result.basePath}\"`), \"__NEXT_ERROR_CODE\", {\n                value: \"E105\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (result.basePath !== '/') {\n            var _result_amp;\n            if (result.basePath.endsWith('/')) {\n                throw Object.defineProperty(new Error(`Specified basePath should not end with /, found \"${result.basePath}\"`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E39\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (result.assetPrefix === '') {\n                result.assetPrefix = result.basePath;\n            }\n            if (((_result_amp = result.amp) == null ? void 0 : _result_amp.canonicalBase) === '') {\n                result.amp.canonicalBase = result.basePath;\n            }\n        }\n    }\n    if (result == null ? void 0 : result.images) {\n        const images = result.images;\n        if (typeof images !== 'object') {\n            throw Object.defineProperty(new Error(`Specified images should be an object received ${typeof images}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-images-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E171\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (images.localPatterns) {\n            if (!Array.isArray(images.localPatterns)) {\n                throw Object.defineProperty(new Error(`Specified images.localPatterns should be an Array received ${typeof images.localPatterns}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-images-config`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E118\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            // avoid double-pushing the same pattern if it already exists\n            const hasMatch = images.localPatterns.some((pattern)=>pattern.pathname === '/_next/static/media/**' && pattern.search === '');\n            if (!hasMatch) {\n                // static import images are automatically allowed\n                images.localPatterns.push({\n                    pathname: '/_next/static/media/**',\n                    search: ''\n                });\n            }\n        }\n        if (images.remotePatterns) {\n            var _config_assetPrefix;\n            if (!Array.isArray(images.remotePatterns)) {\n                throw Object.defineProperty(new Error(`Specified images.remotePatterns should be an Array received ${typeof images.remotePatterns}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-images-config`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E27\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            // We must convert URL to RemotePattern since URL has a colon in the protocol\n            // and also has additional properties we want to filter out. Also, new URL()\n            // accepts any protocol so we need manual validation here.\n            images.remotePatterns = images.remotePatterns.map(({ protocol, hostname, port, pathname, search })=>{\n                const proto = protocol == null ? void 0 : protocol.replace(/:$/, '');\n                if (![\n                    'http',\n                    'https',\n                    undefined\n                ].includes(proto)) {\n                    throw Object.defineProperty(new Error(`Specified images.remotePatterns must have protocol \"http\" or \"https\" received \"${proto}\".`), \"__NEXT_ERROR_CODE\", {\n                        value: \"E671\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                return {\n                    protocol: proto,\n                    hostname,\n                    port,\n                    pathname,\n                    search\n                };\n            });\n            // static images are automatically prefixed with assetPrefix\n            // so we need to ensure _next/image allows downloading from\n            // this resource\n            if ((_config_assetPrefix = config.assetPrefix) == null ? void 0 : _config_assetPrefix.startsWith('http')) {\n                try {\n                    const url = new URL(config.assetPrefix);\n                    const hasMatchForAssetPrefix = images.remotePatterns.some((pattern)=>(0, _matchremotepattern.matchRemotePattern)(pattern, url));\n                    // avoid double-pushing the same pattern if it already can be matched\n                    if (!hasMatchForAssetPrefix) {\n                        images.remotePatterns.push({\n                            hostname: url.hostname,\n                            protocol: url.protocol.replace(/:$/, ''),\n                            port: url.port\n                        });\n                    }\n                } catch (error) {\n                    throw Object.defineProperty(new Error(`Invalid assetPrefix provided. Original error: ${error}`), \"__NEXT_ERROR_CODE\", {\n                        value: \"E343\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (images.domains) {\n            if (!Array.isArray(images.domains)) {\n                throw Object.defineProperty(new Error(`Specified images.domains should be an Array received ${typeof images.domains}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-images-config`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E402\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n        }\n        if (!images.loader) {\n            images.loader = 'default';\n        }\n        if (images.loader !== 'default' && images.loader !== 'custom' && images.path === _imageconfig.imageConfigDefault.path) {\n            throw Object.defineProperty(new Error(`Specified images.loader property (${images.loader}) also requires images.path property to be assigned to a URL prefix.\\nSee more info here: https://nextjs.org/docs/api-reference/next/legacy/image#loader-configuration`), \"__NEXT_ERROR_CODE\", {\n                value: \"E228\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (images.path === _imageconfig.imageConfigDefault.path && result.basePath && !(0, _pathhasprefix.pathHasPrefix)(images.path, result.basePath)) {\n            images.path = `${result.basePath}${images.path}`;\n        }\n        // Append trailing slash for non-default loaders and when trailingSlash is set\n        if (images.path && !images.path.endsWith('/') && (images.loader !== 'default' || result.trailingSlash)) {\n            images.path += '/';\n        }\n        if (images.loaderFile) {\n            if (images.loader !== 'default' && images.loader !== 'custom') {\n                throw Object.defineProperty(new Error(`Specified images.loader property (${images.loader}) cannot be used with images.loaderFile property. Please set images.loader to \"custom\".`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E449\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            const absolutePath = (0, _path.join)(dir, images.loaderFile);\n            if (!(0, _fs.existsSync)(absolutePath)) {\n                throw Object.defineProperty(new Error(`Specified images.loaderFile does not exist at \"${absolutePath}\".`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E461\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            images.loaderFile = absolutePath;\n        }\n    }\n    warnCustomizedOption(result, 'experimental.esmExternals', true, 'experimental.esmExternals is not recommended to be modified as it may disrupt module resolution', configFileName, silent);\n    warnOptionHasBeenDeprecated(result, 'experimental.instrumentationHook', `\\`experimental.instrumentationHook\\` is no longer needed, because \\`instrumentation.js\\` is available by default. You can remove it from ${configFileName}.`, silent);\n    warnOptionHasBeenDeprecated(result, 'experimental.after', `\\`experimental.after\\` is no longer needed, because \\`after\\` is available by default. You can remove it from ${configFileName}.`, silent);\n    warnOptionHasBeenDeprecated(result, 'devIndicators.appIsrStatus', `\\`devIndicators.appIsrStatus\\` is deprecated and no longer configurable. Please remove it from ${configFileName}.`, silent);\n    warnOptionHasBeenDeprecated(result, 'devIndicators.buildActivity', `\\`devIndicators.buildActivity\\` is deprecated and no longer configurable. Please remove it from ${configFileName}.`, silent);\n    const hasWarnedBuildActivityPosition = warnOptionHasBeenDeprecated(result, 'devIndicators.buildActivityPosition', `\\`devIndicators.buildActivityPosition\\` has been renamed to \\`devIndicators.position\\`. Please update your ${configFileName} file accordingly.`, silent);\n    if (hasWarnedBuildActivityPosition && result.devIndicators !== false && ((_result_devIndicators = result.devIndicators) == null ? void 0 : _result_devIndicators.buildActivityPosition) && result.devIndicators.buildActivityPosition !== result.devIndicators.position) {\n        _log.warnOnce(`The \\`devIndicators\\` option \\`buildActivityPosition\\` (\"${result.devIndicators.buildActivityPosition}\") conflicts with \\`position\\` (\"${result.devIndicators.position}\"). Using \\`buildActivityPosition\\` (\"${result.devIndicators.buildActivityPosition}\") for backward compatibility.`);\n        result.devIndicators.position = result.devIndicators.buildActivityPosition;\n    }\n    warnOptionHasBeenMovedOutOfExperimental(result, 'bundlePagesExternals', 'bundlePagesRouterDependencies', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'serverComponentsExternalPackages', 'serverExternalPackages', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'relay', 'compiler.relay', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'styledComponents', 'compiler.styledComponents', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'emotion', 'compiler.emotion', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'reactRemoveProperties', 'compiler.reactRemoveProperties', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'removeConsole', 'compiler.removeConsole', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'swrDelta', 'expireTime', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'outputFileTracingRoot', 'outputFileTracingRoot', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'outputFileTracingIncludes', 'outputFileTracingIncludes', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'outputFileTracingExcludes', 'outputFileTracingExcludes', configFileName, silent);\n    if (result.experimental.outputStandalone) {\n        if (!silent) {\n            _log.warn(`experimental.outputStandalone has been renamed to \"output: 'standalone'\", please move the config.`);\n        }\n        result.output = 'standalone';\n    }\n    if (typeof ((_result_experimental1 = result.experimental) == null ? void 0 : (_result_experimental_serverActions = _result_experimental1.serverActions) == null ? void 0 : _result_experimental_serverActions.bodySizeLimit) !== 'undefined') {\n        var _result_experimental_serverActions1;\n        const value = parseInt((_result_experimental_serverActions1 = result.experimental.serverActions) == null ? void 0 : _result_experimental_serverActions1.bodySizeLimit.toString());\n        if (isNaN(value) || value < 1) {\n            throw Object.defineProperty(new Error('Server Actions Size Limit must be a valid number or filesize format larger than 1MB: https://nextjs.org/docs/app/api-reference/next-config-js/serverActions#bodysizelimit'), \"__NEXT_ERROR_CODE\", {\n                value: \"E100\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    warnOptionHasBeenMovedOutOfExperimental(result, 'transpilePackages', 'transpilePackages', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'skipMiddlewareUrlNormalize', 'skipMiddlewareUrlNormalize', configFileName, silent);\n    warnOptionHasBeenMovedOutOfExperimental(result, 'skipTrailingSlashRedirect', 'skipTrailingSlashRedirect', configFileName, silent);\n    if ((result == null ? void 0 : result.outputFileTracingRoot) && !(0, _path.isAbsolute)(result.outputFileTracingRoot)) {\n        result.outputFileTracingRoot = (0, _path.resolve)(result.outputFileTracingRoot);\n        if (!silent) {\n            _log.warn(`outputFileTracingRoot should be absolute, using: ${result.outputFileTracingRoot}`);\n        }\n    }\n    if ((result == null ? void 0 : (_result_turbopack = result.turbopack) == null ? void 0 : _result_turbopack.root) && !(0, _path.isAbsolute)(result.turbopack.root)) {\n        result.turbopack.root = (0, _path.resolve)(result.turbopack.root);\n        if (!silent) {\n            _log.warn(`turbopack.root should be absolute, using: ${result.turbopack.root}`);\n        }\n    }\n    // only leverage deploymentId\n    if (process.env.NEXT_DEPLOYMENT_ID) {\n        result.deploymentId = process.env.NEXT_DEPLOYMENT_ID;\n    }\n    if ((result == null ? void 0 : result.outputFileTracingRoot) && !(result == null ? void 0 : (_result_turbopack1 = result.turbopack) == null ? void 0 : _result_turbopack1.root)) {\n        (0, _dset.dset)(result, [\n            'turbopack',\n            'root'\n        ], result.outputFileTracingRoot);\n    }\n    // use the closest lockfile as tracing root\n    if (!(result == null ? void 0 : result.outputFileTracingRoot) || !(result == null ? void 0 : (_result_turbopack2 = result.turbopack) == null ? void 0 : _result_turbopack2.root)) {\n        let rootDir = (0, _findroot.findRootDir)(dir);\n        if (rootDir) {\n            var _result_turbopack3;\n            if (!(result == null ? void 0 : result.outputFileTracingRoot)) {\n                result.outputFileTracingRoot = rootDir;\n            }\n            if (!(result == null ? void 0 : (_result_turbopack3 = result.turbopack) == null ? void 0 : _result_turbopack3.root)) {\n                (0, _dset.dset)(result, [\n                    'turbopack',\n                    'root'\n                ], rootDir);\n            }\n        }\n    }\n    (0, _setuphttpagentenv.setHttpClientAndAgentOptions)(result || _configshared.defaultConfig);\n    if (result.i18n) {\n        const hasAppDir = Boolean((0, _findpagesdir.findDir)(dir, 'app'));\n        if (hasAppDir) {\n            warnOptionHasBeenDeprecated(result, 'i18n', `i18n configuration in ${configFileName} is unsupported in App Router.\\nLearn more about internationalization in App Router: https://nextjs.org/docs/app/building-your-application/routing/internationalization`, silent);\n        }\n        const { i18n } = result;\n        const i18nType = typeof i18n;\n        if (i18nType !== 'object') {\n            throw Object.defineProperty(new Error(`Specified i18n should be an object received ${i18nType}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E148\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!Array.isArray(i18n.locales)) {\n            throw Object.defineProperty(new Error(`Specified i18n.locales should be an Array received ${typeof i18n.locales}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E227\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (i18n.locales.length > 100 && !silent) {\n            _log.warn(`Received ${i18n.locales.length} i18n.locales items which exceeds the recommended max of 100.\\nSee more info here: https://nextjs.org/docs/advanced-features/i18n-routing#how-does-this-work-with-static-generation`);\n        }\n        const defaultLocaleType = typeof i18n.defaultLocale;\n        if (!i18n.defaultLocale || defaultLocaleType !== 'string') {\n            throw Object.defineProperty(new Error(`Specified i18n.defaultLocale should be a string.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E441\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (typeof i18n.domains !== 'undefined' && !Array.isArray(i18n.domains)) {\n            throw Object.defineProperty(new Error(`Specified i18n.domains must be an array of domain objects e.g. [ { domain: 'example.fr', defaultLocale: 'fr', locales: ['fr'] } ] received ${typeof i18n.domains}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E456\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (i18n.domains) {\n            const invalidDomainItems = i18n.domains.filter((item)=>{\n                var _i18n_domains;\n                if (!item || typeof item !== 'object') return true;\n                if (!item.defaultLocale) return true;\n                if (!item.domain || typeof item.domain !== 'string') return true;\n                if (item.domain.includes(':')) {\n                    console.warn(`i18n domain: \"${item.domain}\" is invalid it should be a valid domain without protocol (https://) or port (:3000) e.g. example.vercel.sh`);\n                    return true;\n                }\n                const defaultLocaleDuplicate = (_i18n_domains = i18n.domains) == null ? void 0 : _i18n_domains.find((altItem)=>altItem.defaultLocale === item.defaultLocale && altItem.domain !== item.domain);\n                if (!silent && defaultLocaleDuplicate) {\n                    console.warn(`Both ${item.domain} and ${defaultLocaleDuplicate.domain} configured the defaultLocale ${item.defaultLocale} but only one can. Change one item's default locale to continue`);\n                    return true;\n                }\n                let hasInvalidLocale = false;\n                if (Array.isArray(item.locales)) {\n                    for (const locale of item.locales){\n                        if (typeof locale !== 'string') hasInvalidLocale = true;\n                        for (const domainItem of i18n.domains || []){\n                            if (domainItem === item) continue;\n                            if (domainItem.locales && domainItem.locales.includes(locale)) {\n                                console.warn(`Both ${item.domain} and ${domainItem.domain} configured the locale (${locale}) but only one can. Remove it from one i18n.domains config to continue`);\n                                hasInvalidLocale = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n                return hasInvalidLocale;\n            });\n            if (invalidDomainItems.length > 0) {\n                throw Object.defineProperty(new Error(`Invalid i18n.domains values:\\n${invalidDomainItems.map((item)=>JSON.stringify(item)).join('\\n')}\\n\\ndomains value must follow format { domain: 'example.fr', defaultLocale: 'fr', locales: ['fr'] }.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E413\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n        }\n        if (!Array.isArray(i18n.locales)) {\n            throw Object.defineProperty(new Error(`Specified i18n.locales must be an array of locale strings e.g. [\"en-US\", \"nl-NL\"] received ${typeof i18n.locales}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E432\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const invalidLocales = i18n.locales.filter((locale)=>typeof locale !== 'string');\n        if (invalidLocales.length > 0) {\n            throw Object.defineProperty(new Error(`Specified i18n.locales contains invalid values (${invalidLocales.map(String).join(', ')}), locales must be valid locale tags provided as strings e.g. \"en-US\".\\n` + `See here for list of valid language sub-tags: http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry`), \"__NEXT_ERROR_CODE\", {\n                value: \"E71\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!i18n.locales.includes(i18n.defaultLocale)) {\n            throw Object.defineProperty(new Error(`Specified i18n.defaultLocale should be included in i18n.locales.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E515\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const normalizedLocales = new Set();\n        const duplicateLocales = new Set();\n        i18n.locales.forEach((locale)=>{\n            const localeLower = locale.toLowerCase();\n            if (normalizedLocales.has(localeLower)) {\n                duplicateLocales.add(locale);\n            }\n            normalizedLocales.add(localeLower);\n        });\n        if (duplicateLocales.size > 0) {\n            throw Object.defineProperty(new Error(`Specified i18n.locales contains the following duplicate locales:\\n` + `${[\n                ...duplicateLocales\n            ].join(', ')}\\n` + `Each locale should be listed only once.\\n` + `See more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E471\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        // make sure default Locale is at the front\n        i18n.locales = [\n            i18n.defaultLocale,\n            ...i18n.locales.filter((locale)=>locale !== i18n.defaultLocale)\n        ];\n        const localeDetectionType = typeof i18n.localeDetection;\n        if (localeDetectionType !== 'boolean' && localeDetectionType !== 'undefined') {\n            throw Object.defineProperty(new Error(`Specified i18n.localeDetection should be undefined or a boolean received ${localeDetectionType}.\\nSee more info here: https://nextjs.org/docs/messages/invalid-i18n-config`), \"__NEXT_ERROR_CODE\", {\n                value: \"E439\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (result.devIndicators !== false && ((_result_devIndicators1 = result.devIndicators) == null ? void 0 : _result_devIndicators1.position)) {\n        const { position } = result.devIndicators;\n        const allowedValues = [\n            'top-left',\n            'top-right',\n            'bottom-left',\n            'bottom-right'\n        ];\n        if (!allowedValues.includes(position)) {\n            throw Object.defineProperty(new Error(`Invalid \"devIndicator.position\" provided, expected one of ${allowedValues.join(', ')}, received ${position}`), \"__NEXT_ERROR_CODE\", {\n                value: \"E643\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (result.experimental) {\n        var _defaultConfig_experimental1, _defaultConfig_experimental_cacheLife, _defaultConfig_experimental2, _defaultConfig_experimental_staleTimes, _defaultConfig_experimental3;\n        result.experimental.cacheLife = {\n            ...(_defaultConfig_experimental1 = _configshared.defaultConfig.experimental) == null ? void 0 : _defaultConfig_experimental1.cacheLife,\n            ...result.experimental.cacheLife\n        };\n        const defaultDefault = (_defaultConfig_experimental2 = _configshared.defaultConfig.experimental) == null ? void 0 : (_defaultConfig_experimental_cacheLife = _defaultConfig_experimental2.cacheLife) == null ? void 0 : _defaultConfig_experimental_cacheLife['default'];\n        if (!defaultDefault || defaultDefault.revalidate === undefined || defaultDefault.expire === undefined || !((_defaultConfig_experimental3 = _configshared.defaultConfig.experimental) == null ? void 0 : (_defaultConfig_experimental_staleTimes = _defaultConfig_experimental3.staleTimes) == null ? void 0 : _defaultConfig_experimental_staleTimes.static)) {\n            throw Object.defineProperty(new Error('No default cacheLife profile.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E350\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const defaultCacheLifeProfile = result.experimental.cacheLife['default'];\n        if (!defaultCacheLifeProfile) {\n            result.experimental.cacheLife['default'] = defaultDefault;\n        } else {\n            if (defaultCacheLifeProfile.stale === undefined) {\n                var _result_experimental_staleTimes, _defaultConfig_experimental_staleTimes1, _defaultConfig_experimental4;\n                const staticStaleTime = (_result_experimental_staleTimes = result.experimental.staleTimes) == null ? void 0 : _result_experimental_staleTimes.static;\n                defaultCacheLifeProfile.stale = staticStaleTime ?? ((_defaultConfig_experimental4 = _configshared.defaultConfig.experimental) == null ? void 0 : (_defaultConfig_experimental_staleTimes1 = _defaultConfig_experimental4.staleTimes) == null ? void 0 : _defaultConfig_experimental_staleTimes1.static);\n            }\n            if (defaultCacheLifeProfile.revalidate === undefined) {\n                defaultCacheLifeProfile.revalidate = defaultDefault.revalidate;\n            }\n            if (defaultCacheLifeProfile.expire === undefined) {\n                defaultCacheLifeProfile.expire = result.expireTime ?? defaultDefault.expire;\n            }\n        }\n        // This is the most dynamic cache life profile.\n        const secondsCacheLifeProfile = result.experimental.cacheLife['seconds'];\n        if (secondsCacheLifeProfile && secondsCacheLifeProfile.stale === undefined) {\n            var _result_experimental_staleTimes1, _defaultConfig_experimental_staleTimes2, _defaultConfig_experimental5;\n            // We default this to whatever stale time you had configured for dynamic content.\n            // Since this is basically a dynamic cache life profile.\n            const dynamicStaleTime = (_result_experimental_staleTimes1 = result.experimental.staleTimes) == null ? void 0 : _result_experimental_staleTimes1.dynamic;\n            secondsCacheLifeProfile.stale = dynamicStaleTime ?? ((_defaultConfig_experimental5 = _configshared.defaultConfig.experimental) == null ? void 0 : (_defaultConfig_experimental_staleTimes2 = _defaultConfig_experimental5.staleTimes) == null ? void 0 : _defaultConfig_experimental_staleTimes2.dynamic);\n        }\n    }\n    if ((_result_experimental2 = result.experimental) == null ? void 0 : _result_experimental2.cacheHandlers) {\n        const allowedHandlerNameRegex = /[a-z-]/;\n        if (typeof result.experimental.cacheHandlers !== 'object') {\n            throw Object.defineProperty(new Error(`Invalid \"experimental.cacheHandlers\" provided, expected an object e.g. { default: '/my-handler.js' }, received ${JSON.stringify(result.experimental.cacheHandlers)}`), \"__NEXT_ERROR_CODE\", {\n                value: \"E197\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        const handlerKeys = Object.keys(result.experimental.cacheHandlers);\n        const invalidHandlerItems = [];\n        for (const key of handlerKeys){\n            if (!allowedHandlerNameRegex.test(key)) {\n                invalidHandlerItems.push({\n                    key,\n                    reason: 'key must only use characters a-z and -'\n                });\n            } else {\n                const handlerPath = result.experimental.cacheHandlers[key];\n                if (handlerPath && !(0, _fs.existsSync)(handlerPath)) {\n                    invalidHandlerItems.push({\n                        key,\n                        reason: `cache handler path provided does not exist, received ${handlerPath}`\n                    });\n                }\n            }\n            if (invalidHandlerItems.length) {\n                throw Object.defineProperty(new Error(`Invalid handler fields configured for \"experimental.cacheHandler\":\\n${invalidHandlerItems.map((item)=>`${key}: ${item.reason}`).join('\\n')}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E217\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n        }\n    }\n    const userProvidedModularizeImports = result.modularizeImports;\n    // Unfortunately these packages end up re-exporting 10600 modules, for example: https://unpkg.com/browse/@mui/icons-material@5.11.16/esm/index.js.\n    // Leveraging modularizeImports tremendously reduces compile times for these.\n    result.modularizeImports = {\n        ...userProvidedModularizeImports || {},\n        // This is intentionally added after the user-provided modularizeImports config.\n        '@mui/icons-material': {\n            transform: '@mui/icons-material/{{member}}'\n        },\n        lodash: {\n            transform: 'lodash/{{member}}'\n        }\n    };\n    const userProvidedOptimizePackageImports = ((_result_experimental3 = result.experimental) == null ? void 0 : _result_experimental3.optimizePackageImports) || [];\n    if (!result.experimental) {\n        result.experimental = {};\n    }\n    result.experimental.optimizePackageImports = [\n        ...new Set([\n            ...userProvidedOptimizePackageImports,\n            'lucide-react',\n            'date-fns',\n            'lodash-es',\n            'ramda',\n            'antd',\n            'react-bootstrap',\n            'ahooks',\n            '@ant-design/icons',\n            '@headlessui/react',\n            '@headlessui-float/react',\n            '@heroicons/react/20/solid',\n            '@heroicons/react/24/solid',\n            '@heroicons/react/24/outline',\n            '@visx/visx',\n            '@tremor/react',\n            'rxjs',\n            '@mui/material',\n            '@mui/icons-material',\n            'recharts',\n            'react-use',\n            'effect',\n            '@effect/schema',\n            '@effect/platform',\n            '@effect/platform-node',\n            '@effect/platform-browser',\n            '@effect/platform-bun',\n            '@effect/sql',\n            '@effect/sql-mssql',\n            '@effect/sql-mysql2',\n            '@effect/sql-pg',\n            '@effect/sql-squlite-node',\n            '@effect/sql-squlite-bun',\n            '@effect/sql-squlite-wasm',\n            '@effect/sql-squlite-react-native',\n            '@effect/sql-squlite-wasm',\n            '@effect/rpc',\n            '@effect/rpc-http',\n            '@effect/typeclass',\n            '@effect/experimental',\n            '@effect/opentelemetry',\n            '@material-ui/core',\n            '@material-ui/icons',\n            '@tabler/icons-react',\n            'mui-core',\n            // We don't support wildcard imports for these configs, e.g. `react-icons/*`\n            // so we need to add them manually.\n            // In the future, we should consider automatically detecting packages that\n            // need to be optimized.\n            'react-icons/ai',\n            'react-icons/bi',\n            'react-icons/bs',\n            'react-icons/cg',\n            'react-icons/ci',\n            'react-icons/di',\n            'react-icons/fa',\n            'react-icons/fa6',\n            'react-icons/fc',\n            'react-icons/fi',\n            'react-icons/gi',\n            'react-icons/go',\n            'react-icons/gr',\n            'react-icons/hi',\n            'react-icons/hi2',\n            'react-icons/im',\n            'react-icons/io',\n            'react-icons/io5',\n            'react-icons/lia',\n            'react-icons/lib',\n            'react-icons/lu',\n            'react-icons/md',\n            'react-icons/pi',\n            'react-icons/ri',\n            'react-icons/rx',\n            'react-icons/si',\n            'react-icons/sl',\n            'react-icons/tb',\n            'react-icons/tfi',\n            'react-icons/ti',\n            'react-icons/vsc',\n            'react-icons/wi'\n        ])\n    ];\n    if (!result.htmlLimitedBots) {\n        // @ts-expect-error: override the htmlLimitedBots with default string, type covert: RegExp -> string\n        result.htmlLimitedBots = _isbot.HTML_LIMITED_BOT_UA_RE_STRING;\n    }\n    // \"use cache\" was originally implicitly enabled with the dynamicIO flag, so\n    // we transfer the value for dynamicIO to the explicit useCache flag to ensure\n    // backwards compatibility.\n    if (result.experimental.useCache === undefined) {\n        result.experimental.useCache = result.experimental.dynamicIO;\n    }\n    return result;\n}\nasync function loadConfig(phase, dir, { customConfig, rawConfig, silent = true, onLoadUserConfig, reactProductionProfiling } = {}) {\n    if (!process.env.__NEXT_PRIVATE_RENDER_WORKER) {\n        try {\n            (0, _configutils.loadWebpackHook)();\n        } catch (err) {\n            // this can fail in standalone mode as the files\n            // aren't traced/included\n            if (!process.env.__NEXT_PRIVATE_STANDALONE_CONFIG) {\n                throw err;\n            }\n        }\n    }\n    if (process.env.__NEXT_PRIVATE_STANDALONE_CONFIG) {\n        return JSON.parse(process.env.__NEXT_PRIVATE_STANDALONE_CONFIG);\n    }\n    const curLog = silent ? {\n        warn: ()=>{},\n        info: ()=>{},\n        error: ()=>{}\n    } : _log;\n    (0, _env.loadEnvConfig)(dir, phase === _constants.PHASE_DEVELOPMENT_SERVER, curLog);\n    let configFileName = 'next.config.js';\n    if (customConfig) {\n        return assignDefaults(dir, {\n            configOrigin: 'server',\n            configFileName,\n            ...customConfig\n        }, silent);\n    }\n    const path = await (0, _findup.default)(_constants.CONFIG_FILES, {\n        cwd: dir\n    });\n    if (process.env.__NEXT_TEST_MODE) {\n        if (path) {\n            _log.info(`Loading config from ${path}`);\n        } else {\n            _log.info('No config file found');\n        }\n    }\n    // If config file was found\n    if (path == null ? void 0 : path.length) {\n        var _userConfig_amp, _userConfig_experimental_turbo, _userConfig_experimental, _userConfig_experimental_turbo1, _userConfig_experimental1, _userConfig_experimental2, _userConfig_experimental3;\n        configFileName = (0, _path.basename)(path);\n        let userConfigModule;\n        try {\n            const envBefore = Object.assign({}, process.env);\n            // `import()` expects url-encoded strings, so the path must be properly\n            // escaped and (especially on Windows) absolute paths must pe prefixed\n            // with the `file://` protocol\n            if (process.env.__NEXT_TEST_MODE === 'jest') {\n                // dynamic import does not currently work inside of vm which\n                // jest relies on so we fall back to require for this case\n                // https://github.com/nodejs/node/issues/35889\n                userConfigModule = require(path);\n            } else if (configFileName === 'next.config.ts') {\n                userConfigModule = await (0, _transpileconfig.transpileConfig)({\n                    nextConfigPath: path,\n                    cwd: dir\n                });\n            } else {\n                userConfigModule = await import((0, _url.pathToFileURL)(path).href);\n            }\n            const newEnv = {};\n            for (const key of Object.keys(process.env)){\n                if (envBefore[key] !== process.env[key]) {\n                    newEnv[key] = process.env[key];\n                }\n            }\n            (0, _env.updateInitialEnv)(newEnv);\n            if (rawConfig) {\n                return userConfigModule;\n            }\n        } catch (err) {\n            // TODO: Modify docs to add cases of failing next.config.ts transformation\n            curLog.error(`Failed to load ${configFileName}, see more info here https://nextjs.org/docs/messages/next-config-error`);\n            throw err;\n        }\n        const userConfig = await (0, _configshared.normalizeConfig)(phase, userConfigModule.default || userConfigModule);\n        if (!process.env.NEXT_MINIMAL) {\n            // We only validate the config against schema in non minimal mode\n            const { configSchema } = require('./config-schema');\n            const state = configSchema.safeParse(userConfig);\n            if (state.success === false) {\n                // error message header\n                const messages = [\n                    `Invalid ${configFileName} options detected: `\n                ];\n                const [errorMessages, shouldExit] = normalizeNextConfigZodErrors(state.error);\n                // ident list item\n                for (const error of errorMessages){\n                    messages.push(`    ${error}`);\n                }\n                // error message footer\n                messages.push('See more info here: https://nextjs.org/docs/messages/invalid-next-config');\n                if (shouldExit) {\n                    for (const message of messages){\n                        console.error(message);\n                    }\n                    await (0, _flushandexit.flushAndExit)(1);\n                } else {\n                    for (const message of messages){\n                        curLog.warn(message);\n                    }\n                }\n            }\n        }\n        if (userConfig.target && userConfig.target !== 'server') {\n            throw Object.defineProperty(new Error(`The \"target\" property is no longer supported in ${configFileName}.\\n` + 'See more info here https://nextjs.org/docs/messages/deprecated-target-config'), \"__NEXT_ERROR_CODE\", {\n                value: \"E478\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if ((_userConfig_amp = userConfig.amp) == null ? void 0 : _userConfig_amp.canonicalBase) {\n            const { canonicalBase } = userConfig.amp || {};\n            userConfig.amp = userConfig.amp || {};\n            userConfig.amp.canonicalBase = ((canonicalBase == null ? void 0 : canonicalBase.endsWith('/')) ? canonicalBase.slice(0, -1) : canonicalBase) || '';\n        }\n        if (reactProductionProfiling) {\n            userConfig.reactProductionProfiling = reactProductionProfiling;\n        }\n        if (((_userConfig_experimental = userConfig.experimental) == null ? void 0 : (_userConfig_experimental_turbo = _userConfig_experimental.turbo) == null ? void 0 : _userConfig_experimental_turbo.loaders) && !((_userConfig_experimental1 = userConfig.experimental) == null ? void 0 : (_userConfig_experimental_turbo1 = _userConfig_experimental1.turbo) == null ? void 0 : _userConfig_experimental_turbo1.rules)) {\n            curLog.warn('experimental.turbo.loaders is now deprecated. Please update next.config.js to use experimental.turbo.rules as soon as possible.\\n' + 'The new option is similar, but the key should be a glob instead of an extension.\\n' + 'Example: loaders: { \".mdx\": [\"mdx-loader\"] } -> rules: { \"*.mdx\": [\"mdx-loader\"] }\" }\\n' + 'See more info here https://nextjs.org/docs/app/api-reference/next-config-js/turbo');\n            const rules = {};\n            for (const [ext, loaders] of Object.entries(userConfig.experimental.turbo.loaders)){\n                rules['*' + ext] = loaders;\n            }\n            userConfig.experimental.turbo.rules = rules;\n        }\n        if ((_userConfig_experimental2 = userConfig.experimental) == null ? void 0 : _userConfig_experimental2.turbo) {\n            curLog.warn('The config property `experimental.turbo` is deprecated. Move this setting to `config.turbopack` as Turbopack is now stable.');\n            // Merge the two configs, preferring values in `config.turbopack`.\n            userConfig.turbopack = {\n                ...userConfig.experimental.turbo,\n                ...userConfig.turbopack\n            };\n            userConfig.experimental.turbopackMemoryLimit ??= userConfig.experimental.turbo.memoryLimit;\n            userConfig.experimental.turbopackMinify ??= userConfig.experimental.turbo.minify;\n            userConfig.experimental.turbopackTreeShaking ??= userConfig.experimental.turbo.treeShaking;\n            userConfig.experimental.turbopackSourceMaps ??= userConfig.experimental.turbo.sourceMaps;\n        }\n        if ((_userConfig_experimental3 = userConfig.experimental) == null ? void 0 : _userConfig_experimental3.useLightningcss) {\n            var _css, _this;\n            const { loadBindings } = require('next/dist/build/swc');\n            const isLightningSupported = (_this = await loadBindings()) == null ? void 0 : (_css = _this.css) == null ? void 0 : _css.lightning;\n            if (!isLightningSupported) {\n                curLog.warn(`experimental.useLightningcss is set, but the setting is disabled because next-swc/wasm does not support it yet.`);\n                userConfig.experimental.useLightningcss = false;\n            }\n        }\n        // serialize the regex config into string\n        if ((userConfig == null ? void 0 : userConfig.htmlLimitedBots) instanceof RegExp) {\n            // @ts-expect-error: override the htmlLimitedBots with default string, type covert: RegExp -> string\n            userConfig.htmlLimitedBots = userConfig.htmlLimitedBots.source;\n        }\n        onLoadUserConfig == null ? void 0 : onLoadUserConfig(userConfig);\n        const completeConfig = assignDefaults(dir, {\n            configOrigin: (0, _path.relative)(dir, path),\n            configFile: path,\n            configFileName,\n            ...userConfig\n        }, silent);\n        return completeConfig;\n    } else {\n        const configBaseName = (0, _path.basename)(_constants.CONFIG_FILES[0], (0, _path.extname)(_constants.CONFIG_FILES[0]));\n        const unsupportedConfig = _findup.default.sync([\n            `${configBaseName}.cjs`,\n            `${configBaseName}.cts`,\n            `${configBaseName}.mts`,\n            `${configBaseName}.json`,\n            `${configBaseName}.jsx`,\n            `${configBaseName}.tsx`\n        ], {\n            cwd: dir\n        });\n        if (unsupportedConfig == null ? void 0 : unsupportedConfig.length) {\n            throw Object.defineProperty(new Error(`Configuring Next.js via '${(0, _path.basename)(unsupportedConfig)}' is not supported. Please replace the file with 'next.config.js', 'next.config.mjs', or 'next.config.ts'.`), \"__NEXT_ERROR_CODE\", {\n                value: \"E203\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    // always call assignDefaults to ensure settings like\n    // reactRoot can be updated correctly even with no next.config.js\n    const completeConfig = assignDefaults(dir, _configshared.defaultConfig, silent);\n    completeConfig.configFileName = configFileName;\n    (0, _setuphttpagentenv.setHttpClientAndAgentOptions)(completeConfig);\n    return completeConfig;\n}\nfunction getConfiguredExperimentalFeatures(userNextConfigExperimental) {\n    const configuredExperimentalFeatures = [];\n    if (!userNextConfigExperimental) {\n        return configuredExperimentalFeatures;\n    }\n    // defaultConfig.experimental is predefined and will never be undefined\n    // This is only a type guard for the typescript\n    if (_configshared.defaultConfig.experimental) {\n        for (const name of Object.keys(userNextConfigExperimental)){\n            const value = userNextConfigExperimental[name];\n            if (name === 'turbo' && !process.env.TURBOPACK) {\n                continue;\n            }\n            if (name in _configshared.defaultConfig.experimental && value !== _configshared.defaultConfig.experimental[name]) {\n                configuredExperimentalFeatures.push(typeof value === 'boolean' ? {\n                    name,\n                    type: 'boolean',\n                    value\n                } : typeof value === 'number' ? {\n                    name,\n                    type: 'number',\n                    value\n                } : {\n                    name,\n                    type: 'other'\n                });\n            }\n        }\n    }\n    return configuredExperimentalFeatures;\n}\n\n//# sourceMappingURL=config.js.map"
        }
    ]
}