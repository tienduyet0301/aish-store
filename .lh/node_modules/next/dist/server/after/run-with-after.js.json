{
    "sourceFile": "node_modules/next/dist/server/after/run-with-after.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892866407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"AfterRunner\", {\n    enumerable: true,\n    get: function() {\n        return AfterRunner;\n    }\n});\nconst _detachedpromise = require(\"../../lib/detached-promise\");\nconst _webonclose = require(\"../web/web-on-close\");\nconst _awaiter = require(\"./awaiter\");\nclass AfterRunner {\n    async executeAfter() {\n        this.closeController.dispatchClose();\n        await this.awaiter.awaiting();\n        // if we got an error while running the callbacks,\n        // thenthis is a noop, because the promise is already rejected\n        this.finishedWithoutErrors.resolve();\n        return this.finishedWithoutErrors.promise;\n    }\n    constructor(){\n        this.awaiter = new _awaiter.AwaiterOnce();\n        this.closeController = new _webonclose.CloseController();\n        this.finishedWithoutErrors = new _detachedpromise.DetachedPromise();\n        this.context = {\n            waitUntil: this.awaiter.waitUntil.bind(this.awaiter),\n            onClose: this.closeController.onClose.bind(this.closeController),\n            onTaskError: (error)=>this.finishedWithoutErrors.reject(error)\n        };\n    }\n}\n\n//# sourceMappingURL=run-with-after.js.map"
        }
    ]
}