{
    "sourceFile": "node_modules/next/dist/server/after/awaiter.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892866189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Provides a `waitUntil` implementation which gathers promises to be awaited later (via {@link AwaiterMulti.awaiting}).\n * Unlike a simple `Promise.all`, {@link AwaiterMulti} works recursively --\n * if a promise passed to {@link AwaiterMulti.waitUntil} calls `waitUntil` again,\n * that second promise will also be awaited.\n */\nexport declare class AwaiterMulti {\n    private promises;\n    private onError;\n    constructor({ onError }?: {\n        onError?: (error: unknown) => void;\n    });\n    waitUntil: (promise: Promise<unknown>) => void;\n    awaiting(): Promise<void>;\n}\n/**\n * Like {@link AwaiterMulti}, but can only be awaited once.\n * If {@link AwaiterOnce.waitUntil} is called after that, it will throw.\n */\nexport declare class AwaiterOnce {\n    private awaiter;\n    private done;\n    private pending;\n    constructor(options?: {\n        onError?: (error: unknown) => void;\n    });\n    waitUntil: (promise: Promise<unknown>) => void;\n    awaiting(): Promise<void>;\n}\n"
        }
    ]
}