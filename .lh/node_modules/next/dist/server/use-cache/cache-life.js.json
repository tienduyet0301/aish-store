{
    "sourceFile": "node_modules/next/dist/server/use-cache/cache-life.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892893497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"cacheLife\", {\n    enumerable: true,\n    get: function() {\n        return cacheLife;\n    }\n});\nconst _workasyncstorageexternal = require(\"../app-render/work-async-storage.external\");\nconst _workunitasyncstorageexternal = require(\"../app-render/work-unit-async-storage.external\");\nfunction validateCacheLife(profile) {\n    if (profile.stale !== undefined) {\n        if (profile.stale === false) {\n            throw Object.defineProperty(new Error('Pass `Infinity` instead of `false` if you want to cache on the client forever ' + 'without checking with the server.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E407\",\n                enumerable: false,\n                configurable: true\n            });\n        } else if (typeof profile.stale !== 'number') {\n            throw Object.defineProperty(new Error('The stale option must be a number of seconds.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E308\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (profile.revalidate !== undefined) {\n        if (profile.revalidate === false) {\n            throw Object.defineProperty(new Error('Pass `Infinity` instead of `false` if you do not want to revalidate by time.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E104\",\n                enumerable: false,\n                configurable: true\n            });\n        } else if (typeof profile.revalidate !== 'number') {\n            throw Object.defineProperty(new Error('The revalidate option must be a number of seconds.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E233\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (profile.expire !== undefined) {\n        if (profile.expire === false) {\n            throw Object.defineProperty(new Error('Pass `Infinity` instead of `false` if you want to cache on the server forever ' + 'without checking with the origin.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E658\",\n                enumerable: false,\n                configurable: true\n            });\n        } else if (typeof profile.expire !== 'number') {\n            throw Object.defineProperty(new Error('The expire option must be a number of seconds.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E3\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (profile.revalidate !== undefined && profile.expire !== undefined) {\n        if (profile.revalidate > profile.expire) {\n            throw Object.defineProperty(new Error('If providing both the revalidate and expire options, ' + 'the expire option must be greater than the revalidate option. ' + 'The expire option indicates how many seconds from the start ' + 'until it can no longer be used.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E656\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    if (profile.stale !== undefined && profile.expire !== undefined) {\n        if (profile.stale > profile.expire) {\n            throw Object.defineProperty(new Error('If providing both the stale and expire options, ' + 'the expire option must be greater than the stale option. ' + 'The expire option indicates how many seconds from the start ' + 'until it can no longer be used.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E655\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n}\nfunction cacheLife(profile) {\n    if (!process.env.__NEXT_USE_CACHE) {\n        throw Object.defineProperty(new Error('cacheLife() is only available with the experimental.useCache config.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E627\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\n    if (!workUnitStore || workUnitStore.type !== 'cache') {\n        throw Object.defineProperty(new Error('cacheLife() can only be called inside a \"use cache\" function.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E250\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    if (typeof profile === 'string') {\n        const workStore = _workasyncstorageexternal.workAsyncStorage.getStore();\n        if (!workStore) {\n            throw Object.defineProperty(new Error('cacheLife() can only be called during App Router rendering at the moment.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E94\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!workStore.cacheLifeProfiles) {\n            throw Object.defineProperty(new Error('cacheLifeProfiles should always be provided. This is a bug in Next.js.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E294\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        // TODO: This should be globally available and not require an AsyncLocalStorage.\n        const configuredProfile = workStore.cacheLifeProfiles[profile];\n        if (configuredProfile === undefined) {\n            if (workStore.cacheLifeProfiles[profile.trim()]) {\n                throw Object.defineProperty(new Error(`Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` + `Did you mean \"${profile.trim()}\" without the spaces?`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E16\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            throw Object.defineProperty(new Error(`Unknown cacheLife profile \"${profile}\" is not configured in next.config.js\\n` + 'module.exports = {\\n' + '  experimental: {\\n' + '    cacheLife: {\\n' + `      \"${profile}\": ...\\n` + '    }\\n' + '  }\\n' + '}'), \"__NEXT_ERROR_CODE\", {\n                value: \"E137\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        profile = configuredProfile;\n    } else if (typeof profile !== 'object' || profile === null || Array.isArray(profile)) {\n        throw Object.defineProperty(new Error('Invalid cacheLife() option. Either pass a profile name or object.'), \"__NEXT_ERROR_CODE\", {\n            value: \"E110\",\n            enumerable: false,\n            configurable: true\n        });\n    } else {\n        validateCacheLife(profile);\n    }\n    if (profile.revalidate !== undefined) {\n        // Track the explicit revalidate time.\n        if (workUnitStore.explicitRevalidate === undefined || workUnitStore.explicitRevalidate > profile.revalidate) {\n            workUnitStore.explicitRevalidate = profile.revalidate;\n        }\n    }\n    if (profile.expire !== undefined) {\n        // Track the explicit expire time.\n        if (workUnitStore.explicitExpire === undefined || workUnitStore.explicitExpire > profile.expire) {\n            workUnitStore.explicitExpire = profile.expire;\n        }\n    }\n    if (profile.stale !== undefined) {\n        // Track the explicit stale time.\n        if (workUnitStore.explicitStale === undefined || workUnitStore.explicitStale > profile.stale) {\n            workUnitStore.explicitStale = profile.stale;\n        }\n    }\n}\n\n//# sourceMappingURL=cache-life.js.map"
        }
    ]
}