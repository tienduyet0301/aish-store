{
    "sourceFile": "node_modules/next/dist/server/require.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892882708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    getMaybePagePath: null,\n    getPagePath: null,\n    requirePage: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    getMaybePagePath: function() {\n        return getMaybePagePath;\n    },\n    getPagePath: function() {\n        return getPagePath;\n    },\n    requirePage: function() {\n        return requirePage;\n    }\n});\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _constants = require(\"../shared/lib/constants\");\nconst _normalizelocalepath = require(\"../shared/lib/i18n/normalize-locale-path\");\nconst _normalizepagepath = require(\"../shared/lib/page-path/normalize-page-path\");\nconst _denormalizepagepath = require(\"../shared/lib/page-path/denormalize-page-path\");\nconst _utils = require(\"../shared/lib/utils\");\nconst _lrucache = require(\"../server/lib/lru-cache\");\nconst _loadmanifest = require(\"./load-manifest\");\nconst _fs = require(\"fs\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst isDev = process.env.NODE_ENV === 'development';\nconst pagePathCache = !isDev ? new _lrucache.LRUCache(1000) : null;\nfunction getMaybePagePath(page, distDir, locales, isAppPath) {\n    const cacheKey = `${page}:${distDir}:${locales}:${isAppPath}`;\n    let pagePath = pagePathCache == null ? void 0 : pagePathCache.get(cacheKey);\n    // If we have a cached path, we can return it directly.\n    if (pagePath) return pagePath;\n    const serverBuildPath = _path.default.join(distDir, _constants.SERVER_DIRECTORY);\n    let appPathsManifest;\n    if (isAppPath) {\n        appPathsManifest = (0, _loadmanifest.loadManifest)(_path.default.join(serverBuildPath, _constants.APP_PATHS_MANIFEST), !isDev);\n    }\n    const pagesManifest = (0, _loadmanifest.loadManifest)(_path.default.join(serverBuildPath, _constants.PAGES_MANIFEST), !isDev);\n    try {\n        page = (0, _denormalizepagepath.denormalizePagePath)((0, _normalizepagepath.normalizePagePath)(page));\n    } catch (err) {\n        console.error(err);\n        throw new _utils.PageNotFoundError(page);\n    }\n    const checkManifest = (manifest)=>{\n        let curPath = manifest[page];\n        if (!manifest[curPath] && locales) {\n            const manifestNoLocales = {};\n            for (const key of Object.keys(manifest)){\n                manifestNoLocales[(0, _normalizelocalepath.normalizeLocalePath)(key, locales).pathname] = pagesManifest[key];\n            }\n            curPath = manifestNoLocales[page];\n        }\n        return curPath;\n    };\n    if (appPathsManifest) {\n        pagePath = checkManifest(appPathsManifest);\n    }\n    if (!pagePath) {\n        pagePath = checkManifest(pagesManifest);\n    }\n    if (!pagePath) {\n        pagePathCache == null ? void 0 : pagePathCache.set(cacheKey, null);\n        return null;\n    }\n    pagePath = _path.default.join(serverBuildPath, pagePath);\n    pagePathCache == null ? void 0 : pagePathCache.set(cacheKey, pagePath);\n    return pagePath;\n}\nfunction getPagePath(page, distDir, locales, isAppPath) {\n    const pagePath = getMaybePagePath(page, distDir, locales, isAppPath);\n    if (!pagePath) {\n        throw new _utils.PageNotFoundError(page);\n    }\n    return pagePath;\n}\nasync function requirePage(page, distDir, isAppPath) {\n    const pagePath = getPagePath(page, distDir, undefined, isAppPath);\n    if (pagePath.endsWith('.html')) {\n        return _fs.promises.readFile(pagePath, 'utf8').catch((err)=>{\n            throw new _utils.MissingStaticPage(page, err.message);\n        });\n    }\n    // since require is synchronous we can set the specific runtime\n    // we are requiring for the require-hook and then clear after\n    try {\n        process.env.__NEXT_PRIVATE_RUNTIME_TYPE = isAppPath ? 'app' : 'pages';\n        const mod = process.env.NEXT_MINIMAL ? __non_webpack_require__(pagePath) : require(pagePath);\n        return mod;\n    } finally{\n        process.env.__NEXT_PRIVATE_RUNTIME_TYPE = '';\n    }\n}\n\n//# sourceMappingURL=require.js.map"
        }
    ]
}