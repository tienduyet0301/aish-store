{
    "sourceFile": "node_modules/next/dist/server/normalizers/request/next-data.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892880696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"NextDataPathnameNormalizer\", {\n    enumerable: true,\n    get: function() {\n        return NextDataPathnameNormalizer;\n    }\n});\nconst _denormalizepagepath = require(\"../../../shared/lib/page-path/denormalize-page-path\");\nconst _prefix = require(\"./prefix\");\nconst _suffix = require(\"./suffix\");\nclass NextDataPathnameNormalizer {\n    constructor(buildID){\n        this.suffix = new _suffix.SuffixPathnameNormalizer('.json');\n        if (!buildID) {\n            throw Object.defineProperty(new Error('Invariant: buildID is required'), \"__NEXT_ERROR_CODE\", {\n                value: \"E200\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        this.prefix = new _prefix.PrefixPathnameNormalizer(`/_next/data/${buildID}`);\n    }\n    match(pathname) {\n        return this.prefix.match(pathname) && this.suffix.match(pathname);\n    }\n    normalize(pathname, matched) {\n        // If we're not matched and we don't match, we don't need to normalize.\n        if (!matched && !this.match(pathname)) return pathname;\n        pathname = this.prefix.normalize(pathname, true);\n        pathname = this.suffix.normalize(pathname, true);\n        return (0, _denormalizepagepath.denormalizePagePath)(pathname);\n    }\n}\n\n//# sourceMappingURL=next-data.js.map"
        }
    ]
}