{
    "sourceFile": "node_modules/next/dist/server/load-components.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892878411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { AppType, DocumentType, NextComponentType } from '../shared/lib/utils';\nimport type { ClientReferenceManifest } from '../build/webpack/plugins/flight-manifest-plugin';\nimport type { PageConfig, GetStaticPaths, GetServerSideProps, GetStaticProps } from '../types';\nimport type { RouteModule } from './route-modules/route-module';\nimport type { BuildManifest } from './get-page-files';\nimport type { DeepReadonly } from '../shared/lib/deep-readonly';\nexport type ManifestItem = {\n    id: number | string;\n    files: string[];\n};\nexport type ReactLoadableManifest = {\n    [moduleId: string]: ManifestItem;\n};\n/**\n * This manifest prevents removing server rendered <link> tags after client\n * navigation. This is only needed under `Pages dir && Production && Webpack`.\n * @see https://github.com/vercel/next.js/pull/72959\n */\nexport type DynamicCssManifest = string[];\n/**\n * A manifest entry type for the react-loadable-manifest.json.\n *\n * The whole manifest.json is a type of `Record<pathname, LoadableManifest>`\n * where pathname is a string-based key points to the path of the page contains\n * each dynamic imports.\n */\nexport interface LoadableManifest {\n    [k: string]: {\n        id: string | number;\n        files: string[];\n    };\n}\nexport type LoadComponentsReturnType<NextModule = any> = {\n    Component: NextComponentType;\n    pageConfig: PageConfig;\n    buildManifest: DeepReadonly<BuildManifest>;\n    subresourceIntegrityManifest?: DeepReadonly<Record<string, string>>;\n    reactLoadableManifest: DeepReadonly<ReactLoadableManifest>;\n    dynamicCssManifest?: DeepReadonly<DynamicCssManifest>;\n    clientReferenceManifest?: DeepReadonly<ClientReferenceManifest>;\n    serverActionsManifest?: any;\n    Document: DocumentType;\n    App: AppType;\n    getStaticProps?: GetStaticProps;\n    getStaticPaths?: GetStaticPaths;\n    getServerSideProps?: GetServerSideProps;\n    ComponentMod: NextModule;\n    routeModule: RouteModule;\n    isAppPath?: boolean;\n    page: string;\n    multiZoneDraftMode?: boolean;\n};\n/**\n * Load manifest file with retries, defaults to 3 attempts.\n */\nexport declare function loadManifestWithRetries<T extends object>(manifestPath: string, attempts?: number): Promise<DeepReadonly<T>>;\n/**\n * Load manifest file with retries, defaults to 3 attempts, or return undefined.\n */\nexport declare function tryLoadManifestWithRetries<T extends object>(manifestPath: string, attempts?: number): Promise<DeepReadonly<T> | undefined>;\n/**\n * Load manifest file with retries, defaults to 3 attempts.\n */\nexport declare function evalManifestWithRetries<T extends object>(manifestPath: string, attempts?: number): Promise<DeepReadonly<T>>;\ndeclare function loadComponentsImpl<N = any>({ distDir, page, isAppPath, isDev, sriEnabled, }: {\n    distDir: string;\n    page: string;\n    isAppPath: boolean;\n    isDev: boolean;\n    sriEnabled: boolean;\n}): Promise<LoadComponentsReturnType<N>>;\nexport declare const loadComponents: typeof loadComponentsImpl;\nexport {};\n"
        }
    ]
}