{
    "sourceFile": "node_modules/next/dist/server/request/params.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892882244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { WorkStore } from '../app-render/work-async-storage.external';\nexport type ParamValue = string | Array<string> | undefined;\nexport type Params = Record<string, ParamValue>;\n/**\n * In this version of Next.js the `params` prop passed to Layouts, Pages, and other Segments is a Promise.\n * However to facilitate migration to this new Promise type you can currently still access params directly on the Promise instance passed to these Segments.\n * The `UnsafeUnwrappedParams` type is available if you need to temporarily access the underlying params without first awaiting or `use`ing the Promise.\n *\n * In a future version of Next.js the `params` prop will be a plain Promise and this type will be removed.\n *\n * Typically instances of `params` can be updated automatically to be treated as a Promise by a codemod published alongside this Next.js version however if you\n * have not yet run the codemod of the codemod cannot detect certain instances of `params` usage you should first try to refactor your code to await `params`.\n *\n * If refactoring is not possible but you still want to be able to access params directly without typescript errors you can cast the params Promise to this type\n *\n * ```tsx\n * type Props = { params: Promise<{ id: string }>}\n *\n * export default async function Layout(props: Props) {\n *  const directParams = (props.params as unknown as UnsafeUnwrappedParams<typeof props.params>)\n *  return ...\n * }\n * ```\n *\n * This type is marked deprecated to help identify it as target for refactoring away.\n *\n * @deprecated\n */\nexport type UnsafeUnwrappedParams<P> = P extends Promise<infer U> ? Omit<U, 'then' | 'status' | 'value'> : never;\nexport declare function createParamsFromClient(underlyingParams: Params, workStore: WorkStore): Promise<Params>;\nexport type CreateServerParamsForMetadata = typeof createServerParamsForMetadata;\nexport declare const createServerParamsForMetadata: typeof createServerParamsForServerSegment;\nexport declare function createServerParamsForRoute(underlyingParams: Params, workStore: WorkStore): Promise<Params>;\nexport declare function createServerParamsForServerSegment(underlyingParams: Params, workStore: WorkStore): Promise<Params>;\nexport declare function createPrerenderParamsForClientSegment(underlyingParams: Params, workStore: WorkStore): Promise<Params>;\n"
        }
    ]
}