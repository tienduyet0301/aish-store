{
    "sourceFile": "node_modules/next/dist/server/dev/hot-reloader-types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892872860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage, ServerResponse } from 'http';\nimport type { UrlObject } from 'url';\nimport type { Duplex } from 'stream';\nimport type { webpack } from 'next/dist/compiled/webpack/webpack';\nimport type getBaseWebpackConfig from '../../build/webpack-config';\nimport type { RouteDefinition } from '../route-definitions/route-definition';\nimport type { Project, Update as TurbopackUpdate } from '../../build/swc/types';\nimport type { VersionInfo } from './parse-version-info';\nimport type { DebugInfo } from '../../client/components/react-dev-overlay/types';\nimport type { DevIndicatorServerState } from './dev-indicator-server-state';\nexport declare const enum HMR_ACTIONS_SENT_TO_BROWSER {\n    ADDED_PAGE = \"addedPage\",\n    REMOVED_PAGE = \"removedPage\",\n    RELOAD_PAGE = \"reloadPage\",\n    SERVER_COMPONENT_CHANGES = \"serverComponentChanges\",\n    MIDDLEWARE_CHANGES = \"middlewareChanges\",\n    CLIENT_CHANGES = \"clientChanges\",\n    SERVER_ONLY_CHANGES = \"serverOnlyChanges\",\n    SYNC = \"sync\",\n    BUILT = \"built\",\n    BUILDING = \"building\",\n    DEV_PAGES_MANIFEST_UPDATE = \"devPagesManifestUpdate\",\n    TURBOPACK_MESSAGE = \"turbopack-message\",\n    SERVER_ERROR = \"serverError\",\n    TURBOPACK_CONNECTED = \"turbopack-connected\",\n    ISR_MANIFEST = \"isrManifest\",\n    DEV_INDICATOR = \"devIndicator\"\n}\ninterface ServerErrorAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ERROR;\n    errorJSON: string;\n}\nexport interface TurbopackMessageAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE;\n    data: TurbopackUpdate | TurbopackUpdate[];\n}\ninterface BuildingAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.BUILDING;\n}\nexport interface CompilationError {\n    moduleName?: string;\n    message: string;\n    details?: string;\n    moduleTrace?: Array<{\n        moduleName?: string;\n    }>;\n    stack?: string;\n}\nexport interface SyncAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.SYNC;\n    hash: string;\n    errors: ReadonlyArray<CompilationError>;\n    warnings: ReadonlyArray<CompilationError>;\n    versionInfo: VersionInfo;\n    updatedModules?: ReadonlyArray<string>;\n    debug?: DebugInfo;\n    devIndicator: DevIndicatorServerState;\n}\ninterface BuiltAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.BUILT;\n    hash: string;\n    errors: ReadonlyArray<CompilationError>;\n    warnings: ReadonlyArray<CompilationError>;\n    updatedModules?: ReadonlyArray<string>;\n}\ninterface AddedPageAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.ADDED_PAGE;\n    data: [page: string | null];\n}\ninterface RemovedPageAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.REMOVED_PAGE;\n    data: [page: string | null];\n}\nexport interface ReloadPageAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.RELOAD_PAGE;\n    data: string;\n}\ninterface ServerComponentChangesAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES;\n    hash: string;\n}\ninterface MiddlewareChangesAction {\n    event: HMR_ACTIONS_SENT_TO_BROWSER.MIDDLEWARE_CHANGES;\n}\ninterface ClientChangesAction {\n    event: HMR_ACTIONS_SENT_TO_BROWSER.CLIENT_CHANGES;\n}\ninterface ServerOnlyChangesAction {\n    event: HMR_ACTIONS_SENT_TO_BROWSER.SERVER_ONLY_CHANGES;\n    pages: ReadonlyArray<string>;\n}\ninterface DevPagesManifestUpdateAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.DEV_PAGES_MANIFEST_UPDATE;\n    data: [\n        {\n            devPagesManifest: true;\n        }\n    ];\n}\nexport interface TurbopackConnectedAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED;\n    data: {\n        sessionId: number;\n    };\n}\nexport interface AppIsrManifestAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.ISR_MANIFEST;\n    data: Record<string, boolean>;\n}\nexport interface DevIndicatorAction {\n    action: HMR_ACTIONS_SENT_TO_BROWSER.DEV_INDICATOR;\n    devIndicator: DevIndicatorServerState;\n}\nexport type HMR_ACTION_TYPES = TurbopackMessageAction | TurbopackConnectedAction | BuildingAction | SyncAction | BuiltAction | AddedPageAction | RemovedPageAction | ReloadPageAction | ServerComponentChangesAction | ClientChangesAction | MiddlewareChangesAction | ServerOnlyChangesAction | DevPagesManifestUpdateAction | ServerErrorAction | AppIsrManifestAction | DevIndicatorAction;\nexport type TurbopackMsgToBrowser = {\n    type: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE;\n    data: any;\n} | {\n    type: HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED;\n    data: {\n        sessionId: number;\n    };\n};\nexport interface NextJsHotReloaderInterface {\n    turbopackProject?: Project;\n    activeWebpackConfigs?: Array<Awaited<ReturnType<typeof getBaseWebpackConfig>>>;\n    serverStats: webpack.Stats | null;\n    edgeServerStats: webpack.Stats | null;\n    run(req: IncomingMessage, res: ServerResponse, parsedUrl: UrlObject): Promise<{\n        finished?: true;\n    }>;\n    setHmrServerError(error: Error | null): void;\n    clearHmrServerError(): void;\n    start(): Promise<void>;\n    send(action: HMR_ACTION_TYPES): void;\n    getCompilationErrors(page: string): Promise<any[]>;\n    onHMR(req: IncomingMessage, _socket: Duplex, head: Buffer, onUpgrade: (client: {\n        send(data: string): void;\n    }) => void): void;\n    invalidate({ reloadAfterInvalidation, }: {\n        reloadAfterInvalidation: boolean;\n    }): Promise<void> | void;\n    buildFallbackError(): Promise<void>;\n    ensurePage({ page, clientOnly, appPaths, definition, isApp, url, }: {\n        page: string;\n        clientOnly: boolean;\n        appPaths?: ReadonlyArray<string> | null;\n        isApp?: boolean;\n        definition: RouteDefinition | undefined;\n        url?: string;\n    }): Promise<void>;\n    close(): void;\n}\nexport {};\n"
        }
    ]
}