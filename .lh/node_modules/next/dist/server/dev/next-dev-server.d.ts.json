{
    "sourceFile": "node_modules/next/dist/server/dev/next-dev-server.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892873146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FindComponentsResult, NodeRequestHandler } from '../next-server';\nimport type { LoadComponentsReturnType } from '../load-components';\nimport type { Options as ServerOptions } from '../next-server';\nimport type { Params } from '../request/params';\nimport type { ParsedUrl } from '../../shared/lib/router/utils/parse-url';\nimport type { ParsedUrlQuery } from 'querystring';\nimport type { UrlWithParsedQuery } from 'url';\nimport type { MiddlewareRoutingItem } from '../base-server';\nimport type { RouteDefinition } from '../route-definitions/route-definition';\nimport type { RouteMatcherManager } from '../route-matcher-managers/route-matcher-manager';\nimport { type NextParsedUrlQuery, type NextUrlWithParsedQuery } from '../request-meta';\nimport type { DevBundlerService } from '../lib/dev-bundler-service';\nimport type { IncrementalCache } from '../lib/incremental-cache';\nimport type { NodeNextResponse, NodeNextRequest } from '../base-http/node';\nimport type { PagesManifest } from '../../build/webpack/plugins/pages-manifest-plugin';\nimport Server from '../next-server';\nimport { type Span } from '../../trace';\nimport type { ServerOnInstrumentationRequestError } from '../app-render/types';\nimport type { ServerComponentsHmrCache } from '../response-cache';\nimport { FallbackMode } from '../../lib/fallback';\nexport interface Options extends ServerOptions {\n    /**\n     * Tells of Next.js is running from the `next dev` command\n     */\n    isNextDevCommand?: boolean;\n    /**\n     * Interface to the development bundler.\n     */\n    bundlerService: DevBundlerService;\n    /**\n     * Trace span for server startup.\n     */\n    startServerSpan: Span;\n}\nexport default class DevServer extends Server {\n    /**\n     * The promise that resolves when the server is ready. When this is unset\n     * the server is ready.\n     */\n    private ready?;\n    protected sortedRoutes?: string[];\n    private pagesDir?;\n    private appDir?;\n    private actualMiddlewareFile?;\n    private actualInstrumentationHookFile?;\n    private middleware?;\n    private originalFetch?;\n    private readonly bundlerService;\n    private staticPathsCache;\n    private startServerSpan;\n    private readonly serverComponentsHmrCache;\n    protected staticPathsWorker?: {\n        [key: string]: any;\n    } & {\n        loadStaticPaths: typeof import('./static-paths-worker').loadStaticPaths;\n    };\n    private getStaticPathsWorker;\n    constructor(options: Options);\n    protected getServerComponentsHmrCache(): ServerComponentsHmrCache | undefined;\n    protected getRouteMatchers(): RouteMatcherManager;\n    protected getBuildId(): string;\n    protected prepareImpl(): Promise<void>;\n    protected hasPage(pathname: string): Promise<boolean>;\n    runMiddleware(params: {\n        request: NodeNextRequest;\n        response: NodeNextResponse;\n        parsedUrl: ParsedUrl;\n        parsed: UrlWithParsedQuery;\n        middlewareList: MiddlewareRoutingItem[];\n    }): Promise<import(\"../web/types\").FetchEventResult | {\n        finished: boolean;\n    }>;\n    runEdgeFunction(params: {\n        req: NodeNextRequest;\n        res: NodeNextResponse;\n        query: ParsedUrlQuery;\n        params: Params | undefined;\n        page: string;\n        appPaths: string[] | null;\n        isAppPath: boolean;\n    }): Promise<import(\"../web/types\").FetchEventResult | null>;\n    getRequestHandler(): NodeRequestHandler;\n    handleRequest(req: NodeNextRequest, res: NodeNextResponse, parsedUrl?: NextUrlWithParsedQuery): Promise<void>;\n    run(req: NodeNextRequest, res: NodeNextResponse, parsedUrl: UrlWithParsedQuery): Promise<void>;\n    protected logErrorWithOriginalStack(err?: unknown, type?: 'unhandledRejection' | 'uncaughtException' | 'warning' | 'app-dir'): void;\n    protected getPagesManifest(): PagesManifest | undefined;\n    protected getAppPathsManifest(): PagesManifest | undefined;\n    protected getinterceptionRoutePatterns(): RegExp[];\n    protected getMiddleware(): Promise<MiddlewareRoutingItem | undefined>;\n    protected getNextFontManifest(): undefined;\n    protected hasMiddleware(): Promise<boolean>;\n    protected ensureMiddleware(url: string): Promise<void>;\n    protected loadInstrumentationModule(): Promise<any>;\n    protected runInstrumentationHookIfAvailable(): Promise<void>;\n    protected ensureEdgeFunction({ page, appPaths, url, }: {\n        page: string;\n        appPaths: string[] | null;\n        url: string;\n    }): Promise<void>;\n    generateRoutes(_dev?: boolean): void;\n    _filterAmpDevelopmentScript(html: string, event: {\n        line: number;\n        col: number;\n        code: string;\n    }): boolean;\n    protected getStaticPaths({ pathname, requestHeaders, page, isAppPath, }: {\n        pathname: string;\n        requestHeaders: IncrementalCache['requestHeaders'];\n        page: string;\n        isAppPath: boolean;\n    }): Promise<{\n        staticPaths?: string[];\n        fallbackMode?: FallbackMode;\n    }>;\n    protected ensurePage(opts: {\n        page: string;\n        clientOnly: boolean;\n        appPaths?: ReadonlyArray<string> | null;\n        definition: RouteDefinition | undefined;\n        url?: string;\n    }): Promise<void>;\n    protected findPageComponents({ locale, page, query, params, isAppPath, appPaths, shouldEnsure, url, }: {\n        locale: string | undefined;\n        page: string;\n        query: NextParsedUrlQuery;\n        params: Params;\n        isAppPath: boolean;\n        sriEnabled?: boolean;\n        appPaths?: ReadonlyArray<string> | null;\n        shouldEnsure: boolean;\n        url?: string;\n    }): Promise<FindComponentsResult | null>;\n    protected getFallbackErrorComponents(url?: string): Promise<LoadComponentsReturnType | null>;\n    getCompilationError(page: string): Promise<any>;\n    protected instrumentationOnRequestError(...args: Parameters<ServerOnInstrumentationRequestError>): Promise<void>;\n}\n"
        }
    ]
}