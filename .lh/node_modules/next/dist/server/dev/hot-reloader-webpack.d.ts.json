{
    "sourceFile": "node_modules/next/dist/server/dev/hot-reloader-webpack.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892872947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextConfigComplete } from '../config-shared';\nimport type { CustomRoutes } from '../../lib/load-custom-routes';\nimport type { Duplex } from 'stream';\nimport type { Telemetry } from '../../telemetry/storage';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type { UrlObject } from 'url';\nimport type { RouteDefinition } from '../route-definitions/route-definition';\nimport { type webpack } from 'next/dist/compiled/webpack/webpack';\nimport getBaseWebpackConfig from '../../build/webpack-config';\nimport type { __ApiPreviewProps } from '../api-utils';\nimport ws from 'next/dist/compiled/ws';\nimport type { UnwrapPromise } from '../../lib/coalesced-function';\nimport type { VersionInfo } from './parse-version-info';\nimport { type NextJsHotReloaderInterface } from './hot-reloader-types';\nimport type { HMR_ACTION_TYPES } from './hot-reloader-types';\nexport declare function renderScriptError(res: ServerResponse, error: Error, { verbose }?: {\n    verbose?: boolean | undefined;\n}): Promise<{\n    finished: true | undefined;\n}>;\nexport declare const matchNextPageBundleRequest: import(\"../../shared/lib/router/utils/path-match\").PatchMatcher;\nexport declare function getVersionInfo(): Promise<VersionInfo>;\nexport default class HotReloaderWebpack implements NextJsHotReloaderInterface {\n    private hasAmpEntrypoints;\n    private hasAppRouterEntrypoints;\n    private hasPagesRouterEntrypoints;\n    private dir;\n    private buildId;\n    private encryptionKey;\n    private middlewares;\n    private pagesDir?;\n    private distDir;\n    private webpackHotMiddleware?;\n    private config;\n    private clientStats;\n    private clientError;\n    private serverError;\n    private hmrServerError;\n    private serverPrevDocumentHash;\n    private serverChunkNames?;\n    private prevChunkNames?;\n    private onDemandEntries?;\n    private previewProps;\n    private watcher;\n    private rewrites;\n    private fallbackWatcher;\n    private hotReloaderSpan;\n    private pagesMapping;\n    private appDir?;\n    private telemetry;\n    private resetFetch;\n    private versionInfo;\n    private devtoolsFrontendUrl;\n    private reloadAfterInvalidation;\n    serverStats: webpack.Stats | null;\n    edgeServerStats: webpack.Stats | null;\n    multiCompiler?: webpack.MultiCompiler;\n    activeWebpackConfigs?: Array<UnwrapPromise<ReturnType<typeof getBaseWebpackConfig>>>;\n    constructor(dir: string, { config, pagesDir, distDir, buildId, encryptionKey, previewProps, rewrites, appDir, telemetry, resetFetch, }: {\n        config: NextConfigComplete;\n        pagesDir?: string;\n        distDir: string;\n        buildId: string;\n        encryptionKey: string;\n        previewProps: __ApiPreviewProps;\n        rewrites: CustomRoutes['rewrites'];\n        appDir?: string;\n        telemetry: Telemetry;\n        resetFetch: () => void;\n    });\n    run(req: IncomingMessage, res: ServerResponse, parsedUrl: UrlObject): Promise<{\n        finished?: true;\n    }>;\n    setHmrServerError(error: Error | null): void;\n    clearHmrServerError(): void;\n    protected refreshServerComponents(hash: string): Promise<void>;\n    onHMR(req: IncomingMessage, _socket: Duplex, head: Buffer, callback: (client: ws.WebSocket) => void): void;\n    private clean;\n    private getWebpackConfig;\n    buildFallbackError(): Promise<void>;\n    private tracedGetVersionInfo;\n    start(): Promise<void>;\n    invalidate({ reloadAfterInvalidation }?: {\n        reloadAfterInvalidation: boolean;\n    }): void;\n    getCompilationErrors(page: string): Promise<Error[]>;\n    send(action: HMR_ACTION_TYPES): void;\n    ensurePage({ page, clientOnly, appPaths, definition, isApp, url, }: {\n        page: string;\n        clientOnly: boolean;\n        appPaths?: ReadonlyArray<string> | null;\n        isApp?: boolean;\n        definition?: RouteDefinition;\n        url?: string;\n    }): Promise<void>;\n    close(): void;\n}\n"
        }
    ]
}