{
    "sourceFile": "node_modules/next/dist/server/dev/hot-middleware.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892872699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { webpack } from 'next/dist/compiled/webpack/webpack';\nimport type ws from 'next/dist/compiled/ws';\nimport type { VersionInfo } from './parse-version-info';\nimport type { HMR_ACTION_TYPES } from './hot-reloader-types';\ndeclare class EventStream {\n    clients: Set<ws>;\n    constructor();\n    close(): void;\n    handler(client: ws): void;\n    publish(payload: any): void;\n}\nexport declare class WebpackHotMiddleware {\n    eventStream: EventStream;\n    clientLatestStats: {\n        ts: number;\n        stats: webpack.Stats;\n    } | null;\n    middlewareLatestStats: {\n        ts: number;\n        stats: webpack.Stats;\n    } | null;\n    serverLatestStats: {\n        ts: number;\n        stats: webpack.Stats;\n    } | null;\n    closed: boolean;\n    versionInfo: VersionInfo;\n    devtoolsFrontendUrl: string | undefined;\n    constructor(compilers: webpack.Compiler[], versionInfo: VersionInfo, devtoolsFrontendUrl: string | undefined);\n    onClientInvalid: () => void;\n    onClientDone: (statsResult: webpack.Stats) => void;\n    onServerInvalid: () => void;\n    onServerDone: (statsResult: webpack.Stats) => void;\n    onEdgeServerInvalid: () => void;\n    onEdgeServerDone: (statsResult: webpack.Stats) => void;\n    /**\n     * To sync we use the most recent stats but also we append middleware\n     * errors. This is because it is possible that middleware fails to compile\n     * and we still want to show the client overlay with the error while\n     * the error page should be rendered just fine.\n     */\n    onHMR: (client: ws) => void;\n    publishStats: (statsResult: webpack.Stats) => void;\n    publish: (payload: HMR_ACTION_TYPES) => void;\n    close: () => void;\n}\nexport {};\n"
        }
    ]
}