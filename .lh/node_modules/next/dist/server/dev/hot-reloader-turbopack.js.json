{
    "sourceFile": "node_modules/next/dist/server/dev/hot-reloader-turbopack.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892872802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"createHotReloaderTurbopack\", {\n    enumerable: true,\n    get: function() {\n        return createHotReloaderTurbopack;\n    }\n});\nconst _promises = require(\"fs/promises\");\nconst _path = require(\"path\");\nconst _url = require(\"url\");\nconst _ws = /*#__PURE__*/ _interop_require_default(require(\"next/dist/compiled/ws\"));\nconst _store = require(\"../../build/output/store\");\nconst _hotreloadertypes = require(\"./hot-reloader-types\");\nconst _swc = require(\"../../build/swc\");\nconst _log = /*#__PURE__*/ _interop_require_wildcard(require(\"../../build/output/log\"));\nconst _hotreloaderwebpack = require(\"./hot-reloader-webpack\");\nconst _constants = require(\"../../shared/lib/constants\");\nconst _middlewareturbopack = require(\"../../client/components/react-dev-overlay/server/middleware-turbopack\");\nconst _utils = require(\"../../shared/lib/utils\");\nconst _utils1 = require(\"../utils\");\nconst _requirecache = require(\"./require-cache\");\nconst _renderserver = require(\"../lib/render-server\");\nconst _denormalizepagepath = require(\"../../shared/lib/page-path/denormalize-page-path\");\nconst _trace = require(\"../../trace\");\nconst _turbopackutils = require(\"./turbopack-utils\");\nconst _setupdevbundler = require(\"../lib/router-utils/setup-dev-bundler\");\nconst _manifestloader = require(\"../../shared/lib/turbopack/manifest-loader\");\nconst _ondemandentryhandler = require(\"./on-demand-entry-handler\");\nconst _entrykey = require(\"../../shared/lib/turbopack/entry-key\");\nconst _messages = require(\"./messages\");\nconst _encryptionutilsserver = require(\"../app-render/encryption-utils-server\");\nconst _apppageroutedefinition = require(\"../route-definitions/app-page-route-definition\");\nconst _apppaths = require(\"../../shared/lib/router/utils/app-paths\");\nconst _utils2 = require(\"../lib/utils\");\nconst _ismetadataroute = require(\"../../lib/metadata/is-metadata-route\");\nconst _patcherrorinspect = require(\"../patch-error-inspect\");\nconst _getnexterrorfeedbackmiddleware = require(\"../../client/components/react-dev-overlay/server/get-next-error-feedback-middleware\");\nconst _utils3 = require(\"../../shared/lib/turbopack/utils\");\nconst _getdevoverlayfontmiddleware = require(\"../../client/components/react-dev-overlay/font/get-dev-overlay-font-middleware\");\nconst _devindicatorserverstate = require(\"./dev-indicator-server-state\");\nconst _devindicatormiddleware = require(\"./dev-indicator-middleware\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\n// import { getSupportedBrowsers } from '../../build/utils'\nconst wsServer = new _ws.default.Server({\n    noServer: true\n});\nconst isTestMode = !!(process.env.NEXT_TEST_MODE || process.env.__NEXT_TEST_MODE || process.env.DEBUG);\nconst sessionId = Math.floor(Number.MAX_SAFE_INTEGER * Math.random());\n/**\n * Replaces turbopack:///[project] with the specified project in the `source` field.\n */ function rewriteTurbopackSources(projectRoot, sourceMap) {\n    if ('sections' in sourceMap) {\n        for (const section of sourceMap.sections){\n            rewriteTurbopackSources(projectRoot, section.map);\n        }\n    } else {\n        for(let i = 0; i < sourceMap.sources.length; i++){\n            sourceMap.sources[i] = (0, _url.pathToFileURL)((0, _path.join)(projectRoot, sourceMap.sources[i].replace(/turbopack:\\/\\/\\/\\[project\\]/, ''))).toString();\n        }\n    }\n}\nfunction getSourceMapFromTurbopack(project, projectRoot, sourceURL) {\n    let sourceMapJson = null;\n    try {\n        sourceMapJson = project.getSourceMapSync(sourceURL);\n    } catch (err) {}\n    if (sourceMapJson === null) {\n        return undefined;\n    } else {\n        const payload = JSON.parse(sourceMapJson);\n        // The sourcemap from Turbopack is not yet written to disk so its `sources`\n        // are not absolute paths yet. We need to rewrite them to be absolute paths.\n        rewriteTurbopackSources(projectRoot, payload);\n        return payload;\n    }\n}\nasync function createHotReloaderTurbopack(opts, serverFields, distDir, resetFetch) {\n    var _opts_nextConfig_turbopack, _nextConfig_watchOptions, _opts_nextConfig_experimental;\n    const dev = true;\n    const buildId = 'development';\n    const { nextConfig, dir: projectPath } = opts;\n    const { loadBindings } = require('../../build/swc');\n    let bindings = await loadBindings();\n    // For the debugging purpose, check if createNext or equivalent next instance setup in test cases\n    // works correctly. Normally `run-test` hides output so only will be visible when `--debug` flag is used.\n    if (isTestMode) {\n        require('console').log('Creating turbopack project', {\n            dir: projectPath,\n            testMode: isTestMode\n        });\n    }\n    const hasRewrites = opts.fsChecker.rewrites.afterFiles.length > 0 || opts.fsChecker.rewrites.beforeFiles.length > 0 || opts.fsChecker.rewrites.fallback.length > 0;\n    const hotReloaderSpan = (0, _trace.trace)('hot-reloader', undefined, {\n        version: \"15.3.1\"\n    });\n    // Ensure the hotReloaderSpan is flushed immediately as it's the parentSpan for all processing\n    // of the current `next dev` invocation.\n    hotReloaderSpan.stop();\n    const encryptionKey = await (0, _encryptionutilsserver.generateEncryptionKeyBase64)({\n        isBuild: false,\n        distDir\n    });\n    // TODO: Implement\n    let clientRouterFilters;\n    if (nextConfig.experimental.clientRouterFilter) {\n    // TODO this need to be set correctly for persistent caching to work\n    }\n    // const supportedBrowsers = await getSupportedBrowsers(dir, dev)\n    const supportedBrowsers = [\n        'last 1 Chrome versions, last 1 Firefox versions, last 1 Safari versions, last 1 Edge versions'\n    ];\n    const project = await bindings.turbo.createProject({\n        projectPath: projectPath,\n        rootPath: ((_opts_nextConfig_turbopack = opts.nextConfig.turbopack) == null ? void 0 : _opts_nextConfig_turbopack.root) || opts.nextConfig.outputFileTracingRoot || projectPath,\n        distDir,\n        nextConfig: opts.nextConfig,\n        jsConfig: await (0, _utils3.getTurbopackJsConfig)(projectPath, nextConfig),\n        watch: {\n            enable: dev,\n            pollIntervalMs: (_nextConfig_watchOptions = nextConfig.watchOptions) == null ? void 0 : _nextConfig_watchOptions.pollIntervalMs\n        },\n        dev,\n        env: process.env,\n        defineEnv: (0, _swc.createDefineEnv)({\n            isTurbopack: true,\n            clientRouterFilters,\n            config: nextConfig,\n            dev,\n            distDir,\n            fetchCacheKeyPrefix: opts.nextConfig.experimental.fetchCacheKeyPrefix,\n            hasRewrites,\n            // TODO: Implement\n            middlewareMatchers: undefined\n        }),\n        buildId,\n        encryptionKey,\n        previewProps: opts.fsChecker.prerenderManifest.preview,\n        browserslistQuery: supportedBrowsers.join(', '),\n        noMangling: false\n    }, {\n        persistentCaching: (0, _utils3.isPersistentCachingEnabled)(opts.nextConfig),\n        memoryLimit: (_opts_nextConfig_experimental = opts.nextConfig.experimental) == null ? void 0 : _opts_nextConfig_experimental.turbopackMemoryLimit\n    });\n    (0, _patcherrorinspect.setBundlerFindSourceMapImplementation)(getSourceMapFromTurbopack.bind(null, project, projectPath));\n    opts.onDevServerCleanup == null ? void 0 : opts.onDevServerCleanup.call(opts, async ()=>{\n        (0, _patcherrorinspect.setBundlerFindSourceMapImplementation)(()=>undefined);\n        await project.onExit();\n    });\n    const entrypointsSubscription = project.entrypointsSubscribe();\n    const currentWrittenEntrypoints = new Map();\n    const currentEntrypoints = {\n        global: {\n            app: undefined,\n            document: undefined,\n            error: undefined,\n            middleware: undefined,\n            instrumentation: undefined\n        },\n        page: new Map(),\n        app: new Map()\n    };\n    const currentTopLevelIssues = new Map();\n    const currentEntryIssues = new Map();\n    const manifestLoader = new _manifestloader.TurbopackManifestLoader({\n        buildId,\n        distDir,\n        encryptionKey\n    });\n    // Dev specific\n    const changeSubscriptions = new Map();\n    const serverPathState = new Map();\n    const readyIds = new Set();\n    let currentEntriesHandlingResolve;\n    let currentEntriesHandling = new Promise((resolve)=>currentEntriesHandlingResolve = resolve);\n    const assetMapper = new _turbopackutils.AssetMapper();\n    function clearRequireCache(key, writtenEndpoint, { force } = {}) {\n        if (force) {\n            for (const { path, contentHash } of writtenEndpoint.serverPaths){\n                serverPathState.set(path, contentHash);\n            }\n        } else {\n            // Figure out if the server files have changed\n            let hasChange = false;\n            for (const { path, contentHash } of writtenEndpoint.serverPaths){\n                // We ignore source maps\n                if (path.endsWith('.map')) continue;\n                const localKey = `${key}:${path}`;\n                const localHash = serverPathState.get(localKey);\n                const globalHash = serverPathState.get(path);\n                if (localHash && localHash !== contentHash || globalHash && globalHash !== contentHash) {\n                    hasChange = true;\n                    serverPathState.set(key, contentHash);\n                    serverPathState.set(path, contentHash);\n                } else {\n                    if (!localHash) {\n                        serverPathState.set(key, contentHash);\n                    }\n                    if (!globalHash) {\n                        serverPathState.set(path, contentHash);\n                    }\n                }\n            }\n            if (!hasChange) {\n                return false;\n            }\n        }\n        resetFetch();\n        const hasAppPaths = writtenEndpoint.serverPaths.some(({ path: p })=>p.startsWith('server/app'));\n        if (hasAppPaths) {\n            (0, _requirecache.deleteFromRequireCache)(require.resolve('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js'));\n            (0, _requirecache.deleteFromRequireCache)(require.resolve('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js'));\n        }\n        const serverPaths = writtenEndpoint.serverPaths.map(({ path: p })=>(0, _path.join)(distDir, p));\n        for (const file of serverPaths){\n            (0, _renderserver.clearModuleContext)(file);\n            (0, _requirecache.deleteCache)(file);\n        }\n        return true;\n    }\n    const buildingIds = new Set();\n    const startBuilding = (id, requestUrl, forceRebuild)=>{\n        if (!forceRebuild && readyIds.has(id)) {\n            return ()=>{};\n        }\n        if (buildingIds.size === 0) {\n            _store.store.setState({\n                loading: true,\n                trigger: id,\n                url: requestUrl\n            }, true);\n        }\n        buildingIds.add(id);\n        return function finishBuilding() {\n            if (buildingIds.size === 0) {\n                return;\n            }\n            readyIds.add(id);\n            buildingIds.delete(id);\n            if (buildingIds.size === 0) {\n                hmrEventHappened = false;\n                _store.store.setState({\n                    loading: false\n                }, true);\n            }\n        };\n    };\n    let hmrEventHappened = false;\n    let hmrHash = 0;\n    const clients = new Set();\n    const clientStates = new WeakMap();\n    function sendToClient(client, payload) {\n        client.send(JSON.stringify(payload));\n    }\n    function sendEnqueuedMessages() {\n        for (const [, issueMap] of currentEntryIssues){\n            if ([\n                ...issueMap.values()\n            ].filter((i)=>i.severity !== 'warning').length > 0) {\n                // During compilation errors we want to delay the HMR events until errors are fixed\n                return;\n            }\n        }\n        for (const client of clients){\n            const state = clientStates.get(client);\n            if (!state) {\n                continue;\n            }\n            for (const [, issueMap] of state.clientIssues){\n                if ([\n                    ...issueMap.values()\n                ].filter((i)=>i.severity !== 'warning').length > 0) {\n                    // During compilation errors we want to delay the HMR events until errors are fixed\n                    return;\n                }\n            }\n            for (const payload of state.hmrPayloads.values()){\n                sendToClient(client, payload);\n            }\n            state.hmrPayloads.clear();\n            if (state.turbopackUpdates.length > 0) {\n                sendToClient(client, {\n                    action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_MESSAGE,\n                    data: state.turbopackUpdates\n                });\n                state.turbopackUpdates.length = 0;\n            }\n        }\n    }\n    const sendEnqueuedMessagesDebounce = (0, _utils1.debounce)(sendEnqueuedMessages, 2);\n    const sendHmr = (id, payload)=>{\n        for (const client of clients){\n            var _clientStates_get;\n            (_clientStates_get = clientStates.get(client)) == null ? void 0 : _clientStates_get.hmrPayloads.set(id, payload);\n        }\n        hmrEventHappened = true;\n        sendEnqueuedMessagesDebounce();\n    };\n    function sendTurbopackMessage(payload) {\n        // TODO(PACK-2049): For some reason we end up emitting hundreds of issues messages on bigger apps,\n        //   a lot of which are duplicates.\n        //   They are currently not handled on the client at all, so might as well not send them for now.\n        payload.diagnostics = [];\n        payload.issues = [];\n        for (const client of clients){\n            var _clientStates_get;\n            (_clientStates_get = clientStates.get(client)) == null ? void 0 : _clientStates_get.turbopackUpdates.push(payload);\n        }\n        hmrEventHappened = true;\n        sendEnqueuedMessagesDebounce();\n    }\n    async function subscribeToChanges(key, includeIssues, endpoint, makePayload, onError) {\n        if (changeSubscriptions.has(key)) {\n            return;\n        }\n        const { side } = (0, _entrykey.splitEntryKey)(key);\n        const changedPromise = endpoint[`${side}Changed`](includeIssues);\n        changeSubscriptions.set(key, changedPromise);\n        try {\n            const changed = await changedPromise;\n            for await (const change of changed){\n                (0, _utils3.processIssues)(currentEntryIssues, key, change, false, true);\n                // TODO: Get an actual content hash from Turbopack.\n                const payload = await makePayload(change, String(++hmrHash));\n                if (payload) {\n                    sendHmr(key, payload);\n                }\n            }\n        } catch (e) {\n            changeSubscriptions.delete(key);\n            const payload = await (onError == null ? void 0 : onError(e));\n            if (payload) {\n                sendHmr(key, payload);\n            }\n            return;\n        }\n        changeSubscriptions.delete(key);\n    }\n    async function unsubscribeFromChanges(key) {\n        const subscription = await changeSubscriptions.get(key);\n        if (subscription) {\n            await (subscription.return == null ? void 0 : subscription.return.call(subscription));\n            changeSubscriptions.delete(key);\n        }\n        currentEntryIssues.delete(key);\n    }\n    async function subscribeToHmrEvents(client, id) {\n        const key = (0, _entrykey.getEntryKey)('assets', 'client', id);\n        if (!(0, _turbopackutils.hasEntrypointForKey)(currentEntrypoints, key, assetMapper)) {\n            // maybe throw an error / force the client to reload?\n            return;\n        }\n        const state = clientStates.get(client);\n        if (!state || state.subscriptions.has(id)) {\n            return;\n        }\n        const subscription = project.hmrEvents(id);\n        state.subscriptions.set(id, subscription);\n        // The subscription will always emit once, which is the initial\n        // computation. This is not a change, so swallow it.\n        try {\n            await subscription.next();\n            for await (const data of subscription){\n                (0, _utils3.processIssues)(state.clientIssues, key, data, false, true);\n                if (data.type !== 'issues') {\n                    sendTurbopackMessage(data);\n                }\n            }\n        } catch (e) {\n            // The client might be using an HMR session from a previous server, tell them\n            // to fully reload the page to resolve the issue. We can't use\n            // `hotReloader.send` since that would force every connected client to\n            // reload, only this client is out of date.\n            const reloadAction = {\n                action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.RELOAD_PAGE,\n                data: `error in HMR event subscription for ${id}: ${e}`\n            };\n            sendToClient(client, reloadAction);\n            client.close();\n            return;\n        }\n    }\n    function unsubscribeFromHmrEvents(client, id) {\n        const state = clientStates.get(client);\n        if (!state) {\n            return;\n        }\n        const subscription = state.subscriptions.get(id);\n        subscription == null ? void 0 : subscription.return();\n        const key = (0, _entrykey.getEntryKey)('assets', 'client', id);\n        state.clientIssues.delete(key);\n    }\n    async function handleEntrypointsSubscription() {\n        for await (const entrypoints of entrypointsSubscription){\n            if (!currentEntriesHandlingResolve) {\n                currentEntriesHandling = new Promise(// eslint-disable-next-line no-loop-func\n                (resolve)=>currentEntriesHandlingResolve = resolve);\n            }\n            (0, _turbopackutils.processTopLevelIssues)(currentTopLevelIssues, entrypoints);\n            await (0, _turbopackutils.handleEntrypoints)({\n                entrypoints,\n                currentEntrypoints,\n                currentEntryIssues,\n                manifestLoader,\n                devRewrites: opts.fsChecker.rewrites,\n                productionRewrites: undefined,\n                logErrors: true,\n                dev: {\n                    assetMapper,\n                    changeSubscriptions,\n                    clients,\n                    clientStates,\n                    serverFields,\n                    hooks: {\n                        handleWrittenEndpoint: (id, result, forceDeleteCache)=>{\n                            currentWrittenEntrypoints.set(id, result);\n                            return clearRequireCache(id, result, {\n                                force: forceDeleteCache\n                            });\n                        },\n                        propagateServerField: _setupdevbundler.propagateServerField.bind(null, opts),\n                        sendHmr,\n                        startBuilding,\n                        subscribeToChanges,\n                        unsubscribeFromChanges,\n                        unsubscribeFromHmrEvents\n                    }\n                }\n            });\n            currentEntriesHandlingResolve();\n            currentEntriesHandlingResolve = undefined;\n        }\n    }\n    await (0, _promises.mkdir)((0, _path.join)(distDir, 'server'), {\n        recursive: true\n    });\n    await (0, _promises.mkdir)((0, _path.join)(distDir, 'static', buildId), {\n        recursive: true\n    });\n    await (0, _promises.writeFile)((0, _path.join)(distDir, 'package.json'), JSON.stringify({\n        type: 'commonjs'\n    }, null, 2));\n    const middlewares = [\n        (0, _middlewareturbopack.getOverlayMiddleware)(project, projectPath),\n        (0, _middlewareturbopack.getSourceMapMiddleware)(project),\n        (0, _getnexterrorfeedbackmiddleware.getNextErrorFeedbackMiddleware)(opts.telemetry),\n        (0, _getdevoverlayfontmiddleware.getDevOverlayFontMiddleware)(),\n        (0, _devindicatormiddleware.getDisableDevIndicatorMiddleware)()\n    ];\n    const versionInfoPromise = (0, _hotreloaderwebpack.getVersionInfo)();\n    let devtoolsFrontendUrl;\n    const nodeDebugType = (0, _utils2.getNodeDebugType)();\n    if (nodeDebugType) {\n        const debugPort = process.debugPort;\n        let debugInfo;\n        try {\n            // It requires to use 127.0.0.1 instead of localhost for server-side fetching.\n            const debugInfoList = await fetch(`http://127.0.0.1:${debugPort}/json/list`).then((res)=>res.json());\n            debugInfo = debugInfoList[0];\n        } catch  {}\n        if (debugInfo) {\n            devtoolsFrontendUrl = debugInfo.devtoolsFrontendUrl;\n        }\n    }\n    const hotReloader = {\n        turbopackProject: project,\n        activeWebpackConfigs: undefined,\n        serverStats: null,\n        edgeServerStats: null,\n        async run (req, res, _parsedUrl) {\n            var _req_url;\n            // intercept page chunks request and ensure them with turbopack\n            if ((_req_url = req.url) == null ? void 0 : _req_url.startsWith('/_next/static/chunks/pages/')) {\n                const params = (0, _hotreloaderwebpack.matchNextPageBundleRequest)(req.url);\n                if (params) {\n                    const decodedPagePath = `/${params.path.map((param)=>decodeURIComponent(param)).join('/')}`;\n                    const denormalizedPagePath = (0, _denormalizepagepath.denormalizePagePath)(decodedPagePath);\n                    await hotReloader.ensurePage({\n                        page: denormalizedPagePath,\n                        clientOnly: false,\n                        definition: undefined,\n                        url: req.url\n                    }).catch(console.error);\n                }\n            }\n            for (const middleware of middlewares){\n                let calledNext = false;\n                await middleware(req, res, ()=>{\n                    calledNext = true;\n                });\n                if (!calledNext) {\n                    return {\n                        finished: true\n                    };\n                }\n            }\n            // Request was not finished.\n            return {\n                finished: undefined\n            };\n        },\n        // TODO: Figure out if socket type can match the NextJsHotReloaderInterface\n        onHMR (req, socket, head, onUpgrade) {\n            wsServer.handleUpgrade(req, socket, head, (client)=>{\n                onUpgrade(client);\n                const clientIssues = new Map();\n                const subscriptions = new Map();\n                clients.add(client);\n                clientStates.set(client, {\n                    clientIssues,\n                    hmrPayloads: new Map(),\n                    turbopackUpdates: [],\n                    subscriptions\n                });\n                client.on('close', ()=>{\n                    // Remove active subscriptions\n                    for (const subscription of subscriptions.values()){\n                        subscription.return == null ? void 0 : subscription.return.call(subscription);\n                    }\n                    clientStates.delete(client);\n                    clients.delete(client);\n                });\n                client.addEventListener('message', ({ data })=>{\n                    const parsedData = JSON.parse(typeof data !== 'string' ? data.toString() : data);\n                    // Next.js messages\n                    switch(parsedData.event){\n                        case 'span-end':\n                            {\n                                hotReloaderSpan.manualTraceChild(parsedData.spanName, (0, _turbopackutils.msToNs)(parsedData.startTime), (0, _turbopackutils.msToNs)(parsedData.endTime), parsedData.attributes);\n                                break;\n                            }\n                        case 'client-hmr-latency':\n                            hotReloaderSpan.manualTraceChild(parsedData.event, (0, _turbopackutils.msToNs)(parsedData.startTime), (0, _turbopackutils.msToNs)(parsedData.endTime), {\n                                updatedModules: parsedData.updatedModules,\n                                page: parsedData.page,\n                                isPageHidden: parsedData.isPageHidden\n                            });\n                            break;\n                        case 'client-error':\n                        case 'client-warning':\n                        case 'client-success':\n                        case 'server-component-reload-page':\n                        case 'client-reload-page':\n                        case 'client-removed-page':\n                        case 'client-full-reload':\n                            const { hadRuntimeError, dependencyChain } = parsedData;\n                            if (hadRuntimeError) {\n                                _log.warn(_messages.FAST_REFRESH_RUNTIME_RELOAD);\n                            }\n                            if (Array.isArray(dependencyChain) && typeof dependencyChain[0] === 'string') {\n                                const cleanedModulePath = dependencyChain[0].replace(/^\\[project\\]/, '.').replace(/ \\[.*\\] \\(.*\\)$/, '');\n                                _log.warn(`Fast Refresh had to perform a full reload when ${cleanedModulePath} changed. Read more: https://nextjs.org/docs/messages/fast-refresh-reload`);\n                            }\n                            break;\n                        case 'client-added-page':\n                            break;\n                        default:\n                            // Might be a Turbopack message...\n                            if (!parsedData.type) {\n                                throw Object.defineProperty(new Error(`unrecognized HMR message \"${data}\"`), \"__NEXT_ERROR_CODE\", {\n                                    value: \"E155\",\n                                    enumerable: false,\n                                    configurable: true\n                                });\n                            }\n                    }\n                    // Turbopack messages\n                    switch(parsedData.type){\n                        case 'turbopack-subscribe':\n                            subscribeToHmrEvents(client, parsedData.path);\n                            break;\n                        case 'turbopack-unsubscribe':\n                            unsubscribeFromHmrEvents(client, parsedData.path);\n                            break;\n                        default:\n                            if (!parsedData.event) {\n                                throw Object.defineProperty(new Error(`unrecognized Turbopack HMR message \"${data}\"`), \"__NEXT_ERROR_CODE\", {\n                                    value: \"E492\",\n                                    enumerable: false,\n                                    configurable: true\n                                });\n                            }\n                    }\n                });\n                const turbopackConnected = {\n                    action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.TURBOPACK_CONNECTED,\n                    data: {\n                        sessionId\n                    }\n                };\n                sendToClient(client, turbopackConnected);\n                const errors = [];\n                for (const entryIssues of currentEntryIssues.values()){\n                    for (const issue of entryIssues.values()){\n                        if (issue.severity !== 'warning') {\n                            errors.push({\n                                message: (0, _utils3.formatIssue)(issue)\n                            });\n                        } else {\n                            (0, _turbopackutils.printNonFatalIssue)(issue);\n                        }\n                    }\n                }\n                if (_devindicatorserverstate.devIndicatorServerState.disabledUntil < Date.now()) {\n                    _devindicatorserverstate.devIndicatorServerState.disabledUntil = 0;\n                }\n                ;\n                (async function() {\n                    const versionInfo = await versionInfoPromise;\n                    const sync = {\n                        action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.SYNC,\n                        errors,\n                        warnings: [],\n                        hash: '',\n                        versionInfo,\n                        debug: {\n                            devtoolsFrontendUrl\n                        },\n                        devIndicator: _devindicatorserverstate.devIndicatorServerState\n                    };\n                    sendToClient(client, sync);\n                })();\n            });\n        },\n        send (action) {\n            const payload = JSON.stringify(action);\n            for (const client of clients){\n                client.send(payload);\n            }\n        },\n        setHmrServerError (_error) {\n        // Not implemented yet.\n        },\n        clearHmrServerError () {\n        // Not implemented yet.\n        },\n        async start () {},\n        async getCompilationErrors (page) {\n            const appEntryKey = (0, _entrykey.getEntryKey)('app', 'server', page);\n            const pagesEntryKey = (0, _entrykey.getEntryKey)('pages', 'server', page);\n            const topLevelIssues = currentTopLevelIssues.values();\n            const thisEntryIssues = currentEntryIssues.get(appEntryKey) ?? currentEntryIssues.get(pagesEntryKey);\n            if (thisEntryIssues !== undefined && thisEntryIssues.size > 0) {\n                // If there is an error related to the requesting page we display it instead of the first error\n                return [\n                    ...topLevelIssues,\n                    ...thisEntryIssues.values()\n                ].map((issue)=>{\n                    const formattedIssue = (0, _utils3.formatIssue)(issue);\n                    if (issue.severity === 'warning') {\n                        (0, _turbopackutils.printNonFatalIssue)(issue);\n                        return null;\n                    } else if ((0, _utils3.isWellKnownError)(issue)) {\n                        _log.error(formattedIssue);\n                    }\n                    return Object.defineProperty(new Error(formattedIssue), \"__NEXT_ERROR_CODE\", {\n                        value: \"E394\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }).filter((error)=>error !== null);\n            }\n            // Otherwise, return all errors across pages\n            const errors = [];\n            for (const issue of topLevelIssues){\n                if (issue.severity !== 'warning') {\n                    errors.push(Object.defineProperty(new Error((0, _utils3.formatIssue)(issue)), \"__NEXT_ERROR_CODE\", {\n                        value: \"E394\",\n                        enumerable: false,\n                        configurable: true\n                    }));\n                }\n            }\n            for (const entryIssues of currentEntryIssues.values()){\n                for (const issue of entryIssues.values()){\n                    if (issue.severity !== 'warning') {\n                        const message = (0, _utils3.formatIssue)(issue);\n                        errors.push(Object.defineProperty(new Error(message), \"__NEXT_ERROR_CODE\", {\n                            value: \"E394\",\n                            enumerable: false,\n                            configurable: true\n                        }));\n                    } else {\n                        (0, _turbopackutils.printNonFatalIssue)(issue);\n                    }\n                }\n            }\n            return errors;\n        },\n        async invalidate ({ // .env files or tsconfig/jsconfig change\n        reloadAfterInvalidation }) {\n            if (reloadAfterInvalidation) {\n                for (const [key, entrypoint] of currentWrittenEntrypoints){\n                    clearRequireCache(key, entrypoint, {\n                        force: true\n                    });\n                }\n                await (0, _renderserver.clearAllModuleContexts)();\n                this.send({\n                    action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.SERVER_COMPONENT_CHANGES,\n                    hash: String(++hmrHash)\n                });\n            }\n        },\n        async buildFallbackError () {\n        // Not implemented yet.\n        },\n        async ensurePage ({ page: inputPage, // Unused parameters\n        // clientOnly,\n        appPaths, definition, isApp, url: requestUrl }) {\n            // When there is no route definition this is an internal file not a route the user added.\n            // Middleware and instrumentation are handled in turbpack-utils.ts handleEntrypoints instead.\n            if (!definition) {\n                if (inputPage === '/middleware') return;\n                if (inputPage === '/src/middleware') return;\n                if (inputPage === '/instrumentation') return;\n                if (inputPage === '/src/instrumentation') return;\n            }\n            return hotReloaderSpan.traceChild('ensure-page', {\n                inputPage\n            }).traceAsyncFn(async ()=>{\n                if (_constants.BLOCKED_PAGES.includes(inputPage) && inputPage !== '/_error') {\n                    return;\n                }\n                await currentEntriesHandling;\n                // TODO We shouldn't look into the filesystem again. This should use the information from entrypoints\n                let routeDef = definition ?? await (0, _ondemandentryhandler.findPagePathData)(projectPath, inputPage, nextConfig.pageExtensions, opts.pagesDir, opts.appDir);\n                // If the route is actually an app page route, then we should have access\n                // to the app route definition, and therefore, the appPaths from it.\n                if (!appPaths && definition && (0, _apppageroutedefinition.isAppPageRouteDefinition)(definition)) {\n                    appPaths = definition.appPaths;\n                }\n                let page = routeDef.page;\n                if (appPaths) {\n                    const normalizedPage = (0, _apppaths.normalizeAppPath)(page);\n                    // filter out paths that are not exact matches (e.g. catchall)\n                    const matchingAppPaths = appPaths.filter((path)=>(0, _apppaths.normalizeAppPath)(path) === normalizedPage);\n                    // the last item in the array is the root page, if there are parallel routes\n                    page = matchingAppPaths[matchingAppPaths.length - 1];\n                }\n                const pathname = (definition == null ? void 0 : definition.pathname) ?? inputPage;\n                if (page === '/_error') {\n                    let finishBuilding = startBuilding(pathname, requestUrl, false);\n                    try {\n                        await (0, _turbopackutils.handlePagesErrorRoute)({\n                            currentEntryIssues,\n                            entrypoints: currentEntrypoints,\n                            manifestLoader,\n                            devRewrites: opts.fsChecker.rewrites,\n                            productionRewrites: undefined,\n                            logErrors: true,\n                            hooks: {\n                                subscribeToChanges,\n                                handleWrittenEndpoint: (id, result, forceDeleteCache)=>{\n                                    currentWrittenEntrypoints.set(id, result);\n                                    assetMapper.setPathsForKey(id, result.clientPaths);\n                                    return clearRequireCache(id, result, {\n                                        force: forceDeleteCache\n                                    });\n                                }\n                            }\n                        });\n                    } finally{\n                        finishBuilding();\n                    }\n                    return;\n                }\n                const isInsideAppDir = routeDef.bundlePath.startsWith('app/');\n                const isEntryMetadataRouteFile = (0, _ismetadataroute.isMetadataRouteFile)(routeDef.filename.replace(opts.appDir || '', ''), nextConfig.pageExtensions, true);\n                const normalizedAppPage = isEntryMetadataRouteFile ? (0, _turbopackutils.normalizedPageToTurbopackStructureRoute)(page, (0, _path.extname)(routeDef.filename)) : page;\n                const route = isInsideAppDir ? currentEntrypoints.app.get(normalizedAppPage) : currentEntrypoints.page.get(page);\n                if (!route) {\n                    // TODO: why is this entry missing in turbopack?\n                    if (page === '/middleware') return;\n                    if (page === '/src/middleware') return;\n                    if (page === '/instrumentation') return;\n                    if (page === '/src/instrumentation') return;\n                    throw new _utils.PageNotFoundError(`route not found ${page}`);\n                }\n                // We don't throw on ensureOpts.isApp === true for page-api\n                // since this can happen when app pages make\n                // api requests to page API routes.\n                if (isApp && route.type === 'page') {\n                    throw Object.defineProperty(new Error(`mis-matched route type: isApp && page for ${page}`), \"__NEXT_ERROR_CODE\", {\n                        value: \"E373\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                const finishBuilding = startBuilding(pathname, requestUrl, false);\n                try {\n                    await (0, _turbopackutils.handleRouteType)({\n                        dev,\n                        page,\n                        pathname,\n                        route,\n                        currentEntryIssues,\n                        entrypoints: currentEntrypoints,\n                        manifestLoader,\n                        readyIds,\n                        devRewrites: opts.fsChecker.rewrites,\n                        productionRewrites: undefined,\n                        logErrors: true,\n                        hooks: {\n                            subscribeToChanges,\n                            handleWrittenEndpoint: (id, result, forceDeleteCache)=>{\n                                currentWrittenEntrypoints.set(id, result);\n                                assetMapper.setPathsForKey(id, result.clientPaths);\n                                return clearRequireCache(id, result, {\n                                    force: forceDeleteCache\n                                });\n                            }\n                        }\n                    });\n                } finally{\n                    finishBuilding();\n                }\n            });\n        },\n        close () {\n            for (const wsClient of clients){\n                // it's okay to not cleanly close these websocket connections, this is dev\n                wsClient.terminate();\n            }\n            clients.clear();\n        }\n    };\n    handleEntrypointsSubscription().catch((err)=>{\n        console.error(err);\n        process.exit(1);\n    });\n    // Write empty manifests\n    await currentEntriesHandling;\n    await manifestLoader.writeManifests({\n        devRewrites: opts.fsChecker.rewrites,\n        productionRewrites: undefined,\n        entrypoints: currentEntrypoints\n    });\n    async function handleProjectUpdates() {\n        for await (const updateMessage of project.updateInfoSubscribe(30)){\n            switch(updateMessage.updateType){\n                case 'start':\n                    {\n                        hotReloader.send({\n                            action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.BUILDING\n                        });\n                        break;\n                    }\n                case 'end':\n                    {\n                        sendEnqueuedMessages();\n                        function addErrors(errorsMap, issues) {\n                            for (const issueMap of issues.values()){\n                                for (const [key, issue] of issueMap){\n                                    if (issue.severity === 'warning') continue;\n                                    if (errorsMap.has(key)) continue;\n                                    const message = (0, _utils3.formatIssue)(issue);\n                                    errorsMap.set(key, {\n                                        message,\n                                        details: issue.detail ? (0, _utils3.renderStyledStringToErrorAnsi)(issue.detail) : undefined\n                                    });\n                                }\n                            }\n                        }\n                        const errors = new Map();\n                        addErrors(errors, currentEntryIssues);\n                        for (const client of clients){\n                            const state = clientStates.get(client);\n                            if (!state) {\n                                continue;\n                            }\n                            const clientErrors = new Map(errors);\n                            addErrors(clientErrors, state.clientIssues);\n                            sendToClient(client, {\n                                action: _hotreloadertypes.HMR_ACTIONS_SENT_TO_BROWSER.BUILT,\n                                hash: String(++hmrHash),\n                                errors: [\n                                    ...clientErrors.values()\n                                ],\n                                warnings: []\n                            });\n                        }\n                        if (hmrEventHappened) {\n                            const time = updateMessage.value.duration;\n                            const timeMessage = time > 2000 ? `${Math.round(time / 100) / 10}s` : `${time}ms`;\n                            _log.event(`Compiled in ${timeMessage}`);\n                            hmrEventHappened = false;\n                        }\n                        break;\n                    }\n                default:\n            }\n        }\n    }\n    handleProjectUpdates().catch((err)=>{\n        console.error(err);\n        process.exit(1);\n    });\n    return hotReloader;\n}\n\n//# sourceMappingURL=hot-reloader-turbopack.js.map"
        }
    ]
}