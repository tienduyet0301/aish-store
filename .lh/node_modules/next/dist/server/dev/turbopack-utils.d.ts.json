{
    "sourceFile": "node_modules/next/dist/server/dev/turbopack-utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892873498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ServerFields, SetupOpts } from '../lib/router-utils/setup-dev-bundler';\nimport type { Issue, TurbopackResult, Endpoint, RawEntrypoints, Update as TurbopackUpdate, WrittenEndpoint } from '../../build/swc/types';\nimport { type HMR_ACTION_TYPES } from './hot-reloader-types';\nimport type { PropagateToWorkersField } from '../lib/router-utils/types';\nimport type { TurbopackManifestLoader } from '../../shared/lib/turbopack/manifest-loader';\nimport type { AppRoute, Entrypoints, PageRoute } from '../../build/swc/types';\nimport { type EntryKey } from '../../shared/lib/turbopack/entry-key';\nimport type ws from 'next/dist/compiled/ws';\nimport type { CustomRoutes } from '../../lib/load-custom-routes';\nimport { type EntryIssuesMap, type TopLevelIssuesMap } from '../../shared/lib/turbopack/utils';\nexport declare function printNonFatalIssue(issue: Issue): void;\nexport declare function processTopLevelIssues(currentTopLevelIssues: TopLevelIssuesMap, result: TurbopackResult): void;\nexport declare function msToNs(ms: number): bigint;\nexport type ChangeSubscriptions = Map<EntryKey, Promise<AsyncIterableIterator<TurbopackResult>>>;\nexport type HandleWrittenEndpoint = (key: EntryKey, result: TurbopackResult<WrittenEndpoint>, forceDeleteCache: boolean) => boolean;\nexport type StartChangeSubscription = (key: EntryKey, includeIssues: boolean, endpoint: Endpoint, makePayload: (change: TurbopackResult, hash: string) => Promise<HMR_ACTION_TYPES> | HMR_ACTION_TYPES | void, onError?: (e: Error) => Promise<HMR_ACTION_TYPES> | HMR_ACTION_TYPES | void) => Promise<void>;\nexport type StopChangeSubscription = (key: EntryKey) => Promise<void>;\nexport type SendHmr = (id: string, payload: HMR_ACTION_TYPES) => void;\nexport type StartBuilding = (id: string, requestUrl: string | undefined, forceRebuild: boolean) => () => void;\nexport type ReadyIds = Set<string>;\nexport type ClientState = {\n    clientIssues: EntryIssuesMap;\n    hmrPayloads: Map<string, HMR_ACTION_TYPES>;\n    turbopackUpdates: TurbopackUpdate[];\n    subscriptions: Map<string, AsyncIterator<any>>;\n};\nexport type ClientStateMap = WeakMap<ws, ClientState>;\ntype HandleRouteTypeHooks = {\n    handleWrittenEndpoint: HandleWrittenEndpoint;\n    subscribeToChanges: StartChangeSubscription;\n};\nexport declare function handleRouteType({ dev, page, pathname, route, currentEntryIssues, entrypoints, manifestLoader, readyIds, devRewrites, productionRewrites, hooks, logErrors, }: {\n    dev: boolean;\n    page: string;\n    pathname: string;\n    route: PageRoute | AppRoute;\n    currentEntryIssues: EntryIssuesMap;\n    entrypoints: Entrypoints;\n    manifestLoader: TurbopackManifestLoader;\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined;\n    productionRewrites: CustomRoutes['rewrites'] | undefined;\n    logErrors: boolean;\n    readyIds?: ReadyIds;\n    hooks?: HandleRouteTypeHooks;\n}): Promise<void>;\n/**\n * Maintains a mapping between entrypoins and the corresponding client asset paths.\n */\nexport declare class AssetMapper {\n    private entryMap;\n    private assetMap;\n    /**\n     * Overrides asset paths for a key and updates the mapping from path to key.\n     *\n     * @param key\n     * @param assetPaths asset paths relative to the .next directory\n     */\n    setPathsForKey(key: EntryKey, assetPaths: string[]): void;\n    /**\n     * Deletes the key and any asset only referenced by this key.\n     *\n     * @param key\n     */\n    delete(key: EntryKey): void;\n    getAssetPathsByKey(key: EntryKey): string[];\n    getKeysByAsset(path: string): EntryKey[];\n    keys(): IterableIterator<EntryKey>;\n}\nexport declare function hasEntrypointForKey(entrypoints: Entrypoints, key: EntryKey, assetMapper: AssetMapper | undefined): boolean;\ntype HandleEntrypointsHooks = {\n    handleWrittenEndpoint: HandleWrittenEndpoint;\n    propagateServerField: (field: PropagateToWorkersField, args: any) => Promise<void>;\n    sendHmr: SendHmr;\n    startBuilding: StartBuilding;\n    subscribeToChanges: StartChangeSubscription;\n    unsubscribeFromChanges: StopChangeSubscription;\n    unsubscribeFromHmrEvents: (client: ws, id: string) => void;\n};\ntype HandleEntrypointsDevOpts = {\n    assetMapper: AssetMapper;\n    changeSubscriptions: ChangeSubscriptions;\n    clients: Set<ws>;\n    clientStates: ClientStateMap;\n    serverFields: ServerFields;\n    hooks: HandleEntrypointsHooks;\n};\nexport declare function handleEntrypoints({ entrypoints, currentEntrypoints, currentEntryIssues, manifestLoader, devRewrites, logErrors, dev, }: {\n    entrypoints: TurbopackResult<RawEntrypoints>;\n    currentEntrypoints: Entrypoints;\n    currentEntryIssues: EntryIssuesMap;\n    manifestLoader: TurbopackManifestLoader;\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined;\n    productionRewrites: CustomRoutes['rewrites'] | undefined;\n    logErrors: boolean;\n    dev: HandleEntrypointsDevOpts;\n}): Promise<void>;\nexport declare function handlePagesErrorRoute({ currentEntryIssues, entrypoints, manifestLoader, devRewrites, productionRewrites, logErrors, hooks, }: {\n    currentEntryIssues: EntryIssuesMap;\n    entrypoints: Entrypoints;\n    manifestLoader: TurbopackManifestLoader;\n    devRewrites: SetupOpts['fsChecker']['rewrites'] | undefined;\n    productionRewrites: CustomRoutes['rewrites'] | undefined;\n    logErrors: boolean;\n    hooks: HandleRouteTypeHooks;\n}): Promise<void>;\nexport declare function removeRouteSuffix(route: string): string;\nexport declare function addRouteSuffix(route: string): string;\nexport declare function addMetadataIdToRoute(route: string): string;\nexport declare function normalizedPageToTurbopackStructureRoute(route: string, ext: string | false): string;\nexport {};\n"
        }
    ]
}