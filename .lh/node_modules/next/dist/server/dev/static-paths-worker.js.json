{
    "sourceFile": "node_modules/next/dist/server/dev/static-paths-worker.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892873460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"loadStaticPaths\", {\n    enumerable: true,\n    get: function() {\n        return loadStaticPaths;\n    }\n});\nrequire(\"../require-hook\");\nrequire(\"../node-environment\");\nconst _utils = require(\"../../build/utils\");\nconst _appsegments = require(\"../../build/segment-config/app/app-segments\");\nconst _loadcomponents = require(\"../load-components\");\nconst _setuphttpagentenv = require(\"../setup-http-agent-env\");\nconst _checks = require(\"../route-modules/checks\");\nconst _ppr = require(\"../lib/experimental/ppr\");\nconst _invarianterror = require(\"../../shared/lib/invariant-error\");\nconst _collectrootparamkeys = require(\"../../build/segment-config/app/collect-root-param-keys\");\nconst _app = require(\"../../build/static-paths/app\");\nconst _pages = require(\"../../build/static-paths/pages\");\nconst _createincrementalcache = require(\"../../export/helpers/create-incremental-cache\");\nasync function loadStaticPaths({ dir, distDir, pathname, config, httpAgentOptions, locales, defaultLocale, isAppPath, page, isrFlushToDisk, fetchCacheKeyPrefix, maxMemoryCacheSize, requestHeaders, cacheHandler, cacheHandlers, cacheLifeProfiles, nextConfigOutput, buildId, authInterrupts, sriEnabled }) {\n    // this needs to be initialized before loadComponents otherwise\n    // \"use cache\" could be missing it's cache handlers\n    await (0, _createincrementalcache.createIncrementalCache)({\n        dir,\n        distDir,\n        cacheHandler,\n        cacheHandlers,\n        requestHeaders,\n        fetchCacheKeyPrefix,\n        flushToDisk: isrFlushToDisk,\n        cacheMaxMemorySize: maxMemoryCacheSize\n    });\n    // update work memory runtime-config\n    require('../../shared/lib/runtime-config.external').setConfig(config);\n    (0, _setuphttpagentenv.setHttpClientAndAgentOptions)({\n        httpAgentOptions\n    });\n    const components = await (0, _loadcomponents.loadComponents)({\n        distDir,\n        // In `pages/`, the page is the same as the pathname.\n        page: page || pathname,\n        isAppPath,\n        isDev: true,\n        sriEnabled\n    });\n    if (isAppPath) {\n        const segments = await (0, _appsegments.collectSegments)(components);\n        const isRoutePPREnabled = (0, _checks.isAppPageRouteModule)(components.routeModule) && (0, _ppr.checkIsRoutePPREnabled)(config.pprConfig, (0, _utils.reduceAppConfig)(segments));\n        const rootParamKeys = (0, _collectrootparamkeys.collectRootParamKeys)(components);\n        return (0, _app.buildAppStaticPaths)({\n            dir,\n            page: pathname,\n            dynamicIO: config.dynamicIO,\n            segments,\n            distDir,\n            requestHeaders,\n            cacheHandler,\n            cacheLifeProfiles,\n            isrFlushToDisk,\n            fetchCacheKeyPrefix,\n            maxMemoryCacheSize,\n            ComponentMod: components.ComponentMod,\n            nextConfigOutput,\n            isRoutePPREnabled,\n            buildId,\n            authInterrupts,\n            rootParamKeys\n        });\n    } else if (!components.getStaticPaths) {\n        // We shouldn't get to this point since the worker should only be called for\n        // SSG pages with getStaticPaths.\n        throw Object.defineProperty(new _invarianterror.InvariantError(`Failed to load page with getStaticPaths for ${pathname}`), \"__NEXT_ERROR_CODE\", {\n            value: \"E605\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    return (0, _pages.buildPagesStaticPaths)({\n        page: pathname,\n        getStaticPaths: components.getStaticPaths,\n        configFileName: config.configFileName,\n        locales,\n        defaultLocale\n    });\n}\n\n//# sourceMappingURL=static-paths-worker.js.map"
        }
    ]
}