{
    "sourceFile": "node_modules/next/dist/server/dev/parse-version-info.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892873314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"parseVersionInfo\", {\n    enumerable: true,\n    get: function() {\n        return parseVersionInfo;\n    }\n});\nconst _semver = /*#__PURE__*/ _interop_require_wildcard(require(\"next/dist/compiled/semver\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction parseVersionInfo(o) {\n    const latest = _semver.parse(o.latest);\n    const canary = _semver.parse(o.canary);\n    const installedParsed = _semver.parse(o.installed);\n    const installed = o.installed;\n    if (installedParsed && latest && canary) {\n        if (installedParsed.major < latest.major) {\n            // Old major version\n            return {\n                staleness: 'stale-major',\n                expected: latest.raw,\n                installed\n            };\n        } else if (installedParsed.prerelease[0] === 'canary' && _semver.lt(installedParsed, canary)) {\n            // Matching major, but old canary\n            return {\n                staleness: 'stale-prerelease',\n                expected: canary.raw,\n                installed\n            };\n        } else if (!installedParsed.prerelease.length && _semver.lt(installedParsed, latest)) {\n            // Stable, but not the latest\n            if (installedParsed.minor === latest.minor) {\n                // Same major and minor, but not the latest patch\n                return {\n                    staleness: 'stale-patch',\n                    expected: latest.raw,\n                    installed\n                };\n            }\n            return {\n                staleness: 'stale-minor',\n                expected: latest.raw,\n                installed\n            };\n        } else if (_semver.gt(installedParsed, latest) && installedParsed.version !== canary.version) {\n            // Newer major version\n            return {\n                staleness: 'newer-than-npm',\n                installed\n            };\n        } else {\n            // Latest and greatest\n            return {\n                staleness: 'fresh',\n                installed\n            };\n        }\n    }\n    return {\n        installed: (installedParsed == null ? void 0 : installedParsed.raw) ?? '0.0.0',\n        staleness: 'unknown'\n    };\n}\n\n//# sourceMappingURL=parse-version-info.js.map"
        }
    ]
}