{
    "sourceFile": "node_modules/next/dist/server/dev/on-demand-entry-handler.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892873218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type ws from 'next/dist/compiled/ws';\nimport type { webpack } from 'next/dist/compiled/webpack/webpack';\nimport type { NextConfigComplete } from '../config-shared';\nimport type { CompilerNameValues } from '../../shared/lib/constants';\nimport type { RouteDefinition } from '../route-definitions/route-definition';\nimport type HotReloaderWebpack from './hot-reloader-webpack';\nimport { COMPILER_INDEXES } from '../../shared/lib/constants';\nimport { PAGE_TYPES } from '../../lib/page-types';\ndeclare const COMPILER_KEYS: CompilerNameValues[];\n/**\n * format: {compiler type}@{page type}@{page path}\n * e.g. client@pages@/index\n * e.g. server@app@app/page\n *\n * This guarantees the uniqueness for each page, to avoid conflicts between app/ and pages/\n */\nexport declare function getEntryKey(compilerType: CompilerNameValues, pageBundleType: PAGE_TYPES, page: string): string;\nexport declare const ADDED: unique symbol;\nexport declare const BUILDING: unique symbol;\nexport declare const BUILT: unique symbol;\ninterface EntryType {\n    /**\n     * Tells if a page is scheduled to be disposed.\n     */\n    dispose?: boolean;\n    /**\n     * Timestamp with the last time the page was active.\n     */\n    lastActiveTime?: number;\n    /**\n     * Page build status.\n     */\n    status?: typeof ADDED | typeof BUILDING | typeof BUILT;\n    /**\n     * Path to the page file relative to the dist folder with no extension.\n     * For example: `pages/about/index`\n     */\n    bundlePath: string;\n    /**\n     * Webpack request to create a dependency for.\n     */\n    request: string;\n}\nexport declare const enum EntryTypes {\n    ENTRY = 0,\n    CHILD_ENTRY = 1\n}\ninterface Entry extends EntryType {\n    type: EntryTypes.ENTRY;\n    /**\n     * The absolute page to the page file. Used for detecting if the file was removed. For example:\n     * `/Users/Rick/project/pages/about/index.js`\n     */\n    absolutePagePath: string;\n    /**\n     * All parallel pages that match the same entry, for example:\n     * ['/parallel/@bar/nested/@a/page', '/parallel/@bar/nested/@b/page', '/parallel/@foo/nested/@a/page', '/parallel/@foo/nested/@b/page']\n     */\n    appPaths: ReadonlyArray<string> | null;\n}\ninterface ChildEntry extends EntryType {\n    type: EntryTypes.CHILD_ENTRY;\n    /**\n     * Which parent entries use this childEntry.\n     */\n    parentEntries: Set<string>;\n    /**\n     * The absolute page to the entry file. Used for detecting if the file was removed. For example:\n     * `/Users/Rick/project/app/about/layout.js`\n     */\n    absoluteEntryFilePath?: string;\n}\ndeclare const entriesMap: Map<string, {\n    /**\n     * The key composed of the compiler name and the page. For example:\n     * `edge-server/about`\n     */\n    [entryName: string]: Entry | ChildEntry;\n}>;\nexport declare const getEntries: (dir: string) => NonNullable<ReturnType<(typeof entriesMap)[\"get\"]>>;\nexport declare const getInvalidator: (dir: string) => Invalidator | undefined;\ndeclare class Invalidator {\n    private multiCompiler;\n    private building;\n    private rebuildAgain;\n    constructor(multiCompiler: webpack.MultiCompiler);\n    shouldRebuildAll(): boolean;\n    invalidate(compilerKeys?: typeof COMPILER_KEYS): void;\n    startBuilding(compilerKey: keyof typeof COMPILER_INDEXES): void;\n    doneBuilding(compilerKeys?: typeof COMPILER_KEYS): void;\n    willRebuild(compilerKey: keyof typeof COMPILER_INDEXES): boolean;\n}\ninterface PagePathData {\n    filename: string;\n    bundlePath: string;\n    page: string;\n}\n/**\n * Attempts to find a page file path from the given pages absolute directory,\n * a page and allowed extensions. If the page can't be found it will throw an\n * error. It defaults the `/_error` page to Next.js internal error page.\n *\n * @param rootDir Absolute path to the project root.\n * @param page The page normalized (it will be denormalized).\n * @param extensions Array of page extensions.\n * @param pagesDir Absolute path to the pages folder with trailing `/pages`.\n * @param appDir Absolute path to the app folder with trailing `/app`.\n */\nexport declare function findPagePathData(rootDir: string, page: string, extensions: string[], pagesDir?: string, appDir?: string): Promise<PagePathData>;\nexport declare function onDemandEntryHandler({ hotReloader, maxInactiveAge, multiCompiler, nextConfig, pagesBufferLength, pagesDir, rootDir, appDir, }: {\n    hotReloader: HotReloaderWebpack;\n    maxInactiveAge: number;\n    multiCompiler: webpack.MultiCompiler;\n    nextConfig: NextConfigComplete;\n    pagesBufferLength: number;\n    pagesDir?: string;\n    rootDir: string;\n    appDir?: string;\n}): {\n    ensurePage({ page, appPaths, definition, isApp, url, }: {\n        page: string;\n        appPaths?: ReadonlyArray<string> | null;\n        definition?: RouteDefinition;\n        isApp?: boolean;\n        url?: string;\n    }): Promise<void>;\n    onHMR(client: ws, getHmrServerError: () => Error | null): void;\n};\nexport {};\n"
        }
    ]
}