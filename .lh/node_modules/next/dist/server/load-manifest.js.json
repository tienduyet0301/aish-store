{
    "sourceFile": "node_modules/next/dist/server/load-manifest.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892878585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    clearManifestCache: null,\n    evalManifest: null,\n    loadManifest: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    clearManifestCache: function() {\n        return clearManifestCache;\n    },\n    evalManifest: function() {\n        return evalManifest;\n    },\n    loadManifest: function() {\n        return loadManifest;\n    }\n});\nconst _fs = require(\"fs\");\nconst _vm = require(\"vm\");\nconst _deepfreeze = require(\"../shared/lib/deep-freeze\");\nconst sharedCache = new Map();\nfunction loadManifest(path, shouldCache = true, cache = sharedCache) {\n    const cached = shouldCache && cache.get(path);\n    if (cached) {\n        return cached;\n    }\n    let manifest = JSON.parse((0, _fs.readFileSync)(path, 'utf8'));\n    // Freeze the manifest so it cannot be modified if we're caching it.\n    if (shouldCache) {\n        manifest = (0, _deepfreeze.deepFreeze)(manifest);\n    }\n    if (shouldCache) {\n        cache.set(path, manifest);\n    }\n    return manifest;\n}\nfunction evalManifest(path, shouldCache = true, cache = sharedCache) {\n    const cached = shouldCache && cache.get(path);\n    if (cached) {\n        return cached;\n    }\n    const content = (0, _fs.readFileSync)(path, 'utf8');\n    if (content.length === 0) {\n        throw Object.defineProperty(new Error('Manifest file is empty'), \"__NEXT_ERROR_CODE\", {\n            value: \"E328\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    let contextObject = {};\n    (0, _vm.runInNewContext)(content, contextObject);\n    // Freeze the context object so it cannot be modified if we're caching it.\n    if (shouldCache) {\n        contextObject = (0, _deepfreeze.deepFreeze)(contextObject);\n    }\n    if (shouldCache) {\n        cache.set(path, contextObject);\n    }\n    return contextObject;\n}\nfunction clearManifestCache(path, cache = sharedCache) {\n    return cache.delete(path);\n}\n\n//# sourceMappingURL=load-manifest.js.map"
        }
    ]
}