{
    "sourceFile": "node_modules/next/dist/server/route-matcher-managers/route-matcher-manager.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892883980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { RouteMatch } from '../route-matches/route-match';\nimport type { RouteMatcherProvider } from '../route-matcher-providers/route-matcher-provider';\nimport type { LocaleAnalysisResult } from '../lib/i18n-provider';\nexport type MatchOptions = {\n    skipDynamic?: boolean;\n    /**\n     * If defined, this indicates to the matcher that the request should be\n     * treated as locale-aware. If this is undefined, it means that this\n     * application was not configured for additional locales.\n     */\n    i18n?: LocaleAnalysisResult | undefined;\n};\nexport interface RouteMatcherManager {\n    /**\n     * Returns a promise that resolves when the matcher manager has finished\n     * reloading.\n     */\n    waitTillReady(): Promise<void>;\n    /**\n     * Pushes in a new matcher for this manager to manage. After all the\n     * providers have been pushed, the manager must be reloaded.\n     *\n     * @param provider the provider for this manager to also manage\n     */\n    push(provider: RouteMatcherProvider): void;\n    /**\n     * Reloads the matchers from the providers. This should be done after all the\n     * providers have been added or the underlying providers should be refreshed.\n     */\n    reload(): Promise<void>;\n    /**\n     * Tests the underlying matchers to find a match. It does not return the\n     * match.\n     *\n     * @param pathname the pathname to test for matches\n     * @param options the options for the testing\n     */\n    test(pathname: string, options: MatchOptions): Promise<boolean>;\n    /**\n     * Returns the first match for a given request.\n     *\n     * @param pathname the pathname to match against\n     * @param options the options for the matching\n     */\n    match(pathname: string, options: MatchOptions): Promise<RouteMatch | null>;\n    /**\n     * Returns a generator for each match for a given request. This should be\n     * consumed in a `for await (...)` loop, when finished, breaking or returning\n     * from the loop will terminate the matching operation.\n     *\n     * @param pathname the pathname to match against\n     * @param options the options for the matching\n     */\n    matchAll(pathname: string, options: MatchOptions): AsyncGenerator<RouteMatch, null, undefined>;\n}\n"
        }
    ]
}