{
    "sourceFile": "node_modules/next/dist/server/route-matcher-managers/default-route-matcher-manager.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892883770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { RouteKind } from '../route-kind';\nimport type { RouteMatch } from '../route-matches/route-match';\nimport type { RouteDefinition } from '../route-definitions/route-definition';\nimport type { RouteMatcherProvider } from '../route-matcher-providers/route-matcher-provider';\nimport type { RouteMatcher } from '../route-matchers/route-matcher';\nimport type { MatchOptions, RouteMatcherManager } from './route-matcher-manager';\ninterface RouteMatchers {\n    static: ReadonlyArray<RouteMatcher>;\n    dynamic: ReadonlyArray<RouteMatcher>;\n    duplicates: Record<string, ReadonlyArray<RouteMatcher>>;\n}\nexport declare class DefaultRouteMatcherManager implements RouteMatcherManager {\n    private readonly providers;\n    protected readonly matchers: RouteMatchers;\n    private lastCompilationID;\n    /**\n     * When this value changes, it indicates that a change has been introduced\n     * that requires recompilation.\n     */\n    private get compilationID();\n    private waitTillReadyPromise?;\n    waitTillReady(): Promise<void>;\n    private previousMatchers;\n    reload(): Promise<void>;\n    push(provider: RouteMatcherProvider): void;\n    test(pathname: string, options: MatchOptions): Promise<boolean>;\n    match(pathname: string, options: MatchOptions): Promise<RouteMatch<RouteDefinition<RouteKind>> | null>;\n    /**\n     * This is a point for other managers to override to inject other checking\n     * behavior like duplicate route checking on a per-request basis.\n     *\n     * @param pathname the pathname to validate against\n     * @param matcher the matcher to validate/test with\n     * @returns the match if found\n     */\n    protected validate(pathname: string, matcher: RouteMatcher, options: MatchOptions): RouteMatch | null;\n    matchAll(pathname: string, options: MatchOptions): AsyncGenerator<RouteMatch<RouteDefinition<RouteKind>>, null, undefined>;\n}\nexport {};\n"
        }
    ]
}