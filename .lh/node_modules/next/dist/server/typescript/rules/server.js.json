{
    "sourceFile": "node_modules/next/dist/server/typescript/rules/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892893129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n});\nconst _constant = require(\"../constant\");\nconst _utils = require(\"../utils\");\nconst serverLayer = {\n    // On the server layer we need to filter out some invalid completion results.\n    filterCompletionsAtPosition (entries) {\n        return entries.filter((e)=>{\n            // Remove disallowed React APIs.\n            if (_constant.DISALLOWED_SERVER_REACT_APIS.includes(e.name) && e.source === 'react') {\n                return false;\n            }\n            return true;\n        });\n    },\n    // Filter out quick info for some React APIs.\n    hasDisallowedReactAPIDefinition (definitions) {\n        return definitions == null ? void 0 : definitions.some((d)=>_constant.DISALLOWED_SERVER_REACT_APIS.includes(d.name) && d.containerName === 'React');\n    },\n    // Give errors about disallowed imports such as `useState`.\n    getSemanticDiagnosticsForImportDeclaration (source, node) {\n        const ts = (0, _utils.getTs)();\n        const diagnostics = [];\n        const importPath = node.moduleSpecifier.getText(source);\n        const importClause = node.importClause;\n        const namedBindings = importClause == null ? void 0 : importClause.namedBindings;\n        if (importClause) {\n            if (/^['\"]react['\"]$/.test(importPath)) {\n                // Check if it imports \"useState\"\n                if (namedBindings && ts.isNamedImports(namedBindings)) {\n                    const elements = namedBindings.elements;\n                    for (const element of elements){\n                        const name = element.name.getText(source);\n                        if (_constant.DISALLOWED_SERVER_REACT_APIS.includes(name)) {\n                            diagnostics.push({\n                                file: source,\n                                category: ts.DiagnosticCategory.Error,\n                                code: _constant.NEXT_TS_ERRORS.INVALID_SERVER_API,\n                                messageText: `\"${name}\" is not allowed in Server Components.`,\n                                start: element.name.getStart(),\n                                length: element.name.getWidth()\n                            });\n                        }\n                    }\n                }\n            } else if (/^['\"]react-dom['\"]$/.test(importPath)) {\n                // Check if it imports \"useFormState\"\n                if (namedBindings && ts.isNamedImports(namedBindings)) {\n                    const elements = namedBindings.elements;\n                    for (const element of elements){\n                        const name = element.name.getText(source);\n                        if (_constant.DISALLOWED_SERVER_REACT_DOM_APIS.includes(name)) {\n                            diagnostics.push({\n                                file: source,\n                                category: ts.DiagnosticCategory.Error,\n                                code: _constant.NEXT_TS_ERRORS.INVALID_SERVER_API,\n                                messageText: `\"${name}\" is not allowed in Server Components.`,\n                                start: element.name.getStart(),\n                                length: element.name.getWidth()\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return diagnostics;\n    }\n};\nconst _default = serverLayer;\n\n//# sourceMappingURL=server.js.map"
        }
    ]
}