{
    "sourceFile": "node_modules/next/dist/server/async-storage/work-store.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892871335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { WorkStore } from '../app-render/work-async-storage.external';\nimport type { IncrementalCache } from '../lib/incremental-cache';\nimport type { RenderOpts } from '../app-render/types';\nimport type { FetchMetric } from '../base-http';\nimport type { RequestLifecycleOpts } from '../base-server';\nimport type { FallbackRouteParams } from '../request/fallback-params';\nimport type { AppSegmentConfig } from '../../build/segment-config/app/app-segment-config';\nimport type { CacheLife } from '../use-cache/cache-life';\nexport type WorkStoreContext = {\n    /**\n     * The page that is being rendered. This relates to the path to the page file.\n     */\n    page: string;\n    /**\n     * The route parameters that are currently unknown.\n     */\n    fallbackRouteParams: FallbackRouteParams | null;\n    requestEndedState?: {\n        ended?: boolean;\n    };\n    isPrefetchRequest?: boolean;\n    renderOpts: {\n        cacheLifeProfiles?: {\n            [profile: string]: CacheLife;\n        };\n        incrementalCache?: IncrementalCache;\n        isOnDemandRevalidate?: boolean;\n        fetchCache?: AppSegmentConfig['fetchCache'];\n        isPossibleServerAction?: boolean;\n        pendingWaitUntil?: Promise<any>;\n        experimental: Pick<RenderOpts['experimental'], 'isRoutePPREnabled' | 'dynamicIO' | 'authInterrupts'>;\n        /**\n         * Fetch metrics attached in patch-fetch.ts\n         **/\n        fetchMetrics?: FetchMetric[];\n    } & Pick<RenderOpts, 'assetPrefix' | 'supportsDynamicResponse' | 'shouldWaitOnAllReady' | 'isRevalidate' | 'nextExport' | 'isDraftMode' | 'isDebugDynamicAccesses' | 'dev'> & RequestLifecycleOpts & Partial<Pick<RenderOpts, 'reactLoadableManifest'>>;\n    /**\n     * The build ID of the current build.\n     */\n    buildId: string;\n    previouslyRevalidatedTags: string[];\n};\nexport declare function createWorkStore({ page, fallbackRouteParams, renderOpts, requestEndedState, isPrefetchRequest, buildId, previouslyRevalidatedTags, }: WorkStoreContext): WorkStore;\n"
        }
    ]
}