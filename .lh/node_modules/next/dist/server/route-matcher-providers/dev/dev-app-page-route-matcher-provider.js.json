{
    "sourceFile": "node_modules/next/dist/server/route-matcher-providers/dev/dev-app-page-route-matcher-provider.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892884207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"DevAppPageRouteMatcherProvider\", {\n    enumerable: true,\n    get: function() {\n        return DevAppPageRouteMatcherProvider;\n    }\n});\nconst _apppageroutematcher = require(\"../../route-matchers/app-page-route-matcher\");\nconst _routekind = require(\"../../route-kind\");\nconst _filecacheroutematcherprovider = require(\"./file-cache-route-matcher-provider\");\nconst _app = require(\"../../normalizers/built/app\");\nconst _normalizecatchallroutes = require(\"../../../build/normalize-catchall-routes\");\nclass DevAppPageRouteMatcherProvider extends _filecacheroutematcherprovider.FileCacheRouteMatcherProvider {\n    constructor(appDir, extensions, reader){\n        super(appDir, reader);\n        this.normalizers = new _app.DevAppNormalizers(appDir, extensions);\n        // Match any page file that ends with `/page.${extension}` or `/default.${extension}` under the app\n        // directory.\n        this.expression = new RegExp(`[/\\\\\\\\](page|default)\\\\.(?:${extensions.join('|')})$`);\n    }\n    async transform(files) {\n        // Collect all the app paths for each page. This could include any parallel\n        // routes.\n        const cache = new Map();\n        const routeFilenames = new Array();\n        let appPaths = {};\n        for (const filename of files){\n            // If the file isn't a match for this matcher, then skip it.\n            if (!this.expression.test(filename)) continue;\n            const page = this.normalizers.page.normalize(filename);\n            // Validate that this is not an ignored page.\n            if (page.includes('/_')) continue;\n            // This is a valid file that we want to create a matcher for.\n            routeFilenames.push(filename);\n            const pathname = this.normalizers.pathname.normalize(filename);\n            const bundlePath = this.normalizers.bundlePath.normalize(filename);\n            // Save the normalization results.\n            cache.set(filename, {\n                page,\n                pathname,\n                bundlePath\n            });\n            if (pathname in appPaths) appPaths[pathname].push(page);\n            else appPaths[pathname] = [\n                page\n            ];\n        }\n        (0, _normalizecatchallroutes.normalizeCatchAllRoutes)(appPaths);\n        // Make sure to sort parallel routes to make the result deterministic.\n        appPaths = Object.fromEntries(Object.entries(appPaths).map(([k, v])=>[\n                k,\n                v.sort()\n            ]));\n        const matchers = [];\n        for (const filename of routeFilenames){\n            // Grab the cached values (and the appPaths).\n            const cached = cache.get(filename);\n            if (!cached) {\n                throw Object.defineProperty(new Error('Invariant: expected filename to exist in cache'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E190\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            const { pathname, page, bundlePath } = cached;\n            matchers.push(new _apppageroutematcher.AppPageRouteMatcher({\n                kind: _routekind.RouteKind.APP_PAGE,\n                pathname,\n                page,\n                bundlePath,\n                filename,\n                appPaths: appPaths[pathname]\n            }));\n        }\n        return matchers;\n    }\n}\n\n//# sourceMappingURL=dev-app-page-route-matcher-provider.js.map"
        }
    ]
}