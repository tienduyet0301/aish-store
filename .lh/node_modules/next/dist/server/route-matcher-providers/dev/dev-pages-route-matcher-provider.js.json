{
    "sourceFile": "node_modules/next/dist/server/route-matcher-providers/dev/dev-pages-route-matcher-provider.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892884423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"DevPagesRouteMatcherProvider\", {\n    enumerable: true,\n    get: function() {\n        return DevPagesRouteMatcherProvider;\n    }\n});\nconst _pagesroutematcher = require(\"../../route-matchers/pages-route-matcher\");\nconst _routekind = require(\"../../route-kind\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"path\"));\nconst _filecacheroutematcherprovider = require(\"./file-cache-route-matcher-provider\");\nconst _pages = require(\"../../normalizers/built/pages\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass DevPagesRouteMatcherProvider extends _filecacheroutematcherprovider.FileCacheRouteMatcherProvider {\n    constructor(pagesDir, extensions, reader, localeNormalizer){\n        super(pagesDir, reader), this.pagesDir = pagesDir, this.extensions = extensions, this.localeNormalizer = localeNormalizer;\n        // Match any route file that ends with `/${filename}.${extension}` under the\n        // pages directory.\n        this.expression = new RegExp(`\\\\.(?:${extensions.join('|')})$`);\n        this.normalizers = new _pages.DevPagesNormalizers(pagesDir, extensions);\n    }\n    test(filename) {\n        // If the file does not end in the correct extension it's not a match.\n        if (!this.expression.test(filename)) return false;\n        // Pages routes must exist in the pages directory without the `/api/`\n        // prefix. The pathnames being tested here though are the full filenames,\n        // so we need to include the pages directory.\n        // TODO: could path separator normalization be needed here?\n        if (filename.startsWith(_path.default.join(this.pagesDir, '/api/'))) return false;\n        for (const extension of this.extensions){\n            // We can also match if we have `pages/api.${extension}`, so check to\n            // see if it's a match.\n            if (filename === _path.default.join(this.pagesDir, `api.${extension}`)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async transform(files) {\n        const matchers = [];\n        for (const filename of files){\n            // If the file isn't a match for this matcher, then skip it.\n            if (!this.test(filename)) continue;\n            const pathname = this.normalizers.pathname.normalize(filename);\n            const page = this.normalizers.page.normalize(filename);\n            const bundlePath = this.normalizers.bundlePath.normalize(filename);\n            if (this.localeNormalizer) {\n                matchers.push(new _pagesroutematcher.PagesLocaleRouteMatcher({\n                    kind: _routekind.RouteKind.PAGES,\n                    pathname,\n                    page,\n                    bundlePath,\n                    filename,\n                    i18n: {}\n                }));\n            } else {\n                matchers.push(new _pagesroutematcher.PagesRouteMatcher({\n                    kind: _routekind.RouteKind.PAGES,\n                    pathname,\n                    page,\n                    bundlePath,\n                    filename\n                }));\n            }\n        }\n        return matchers;\n    }\n}\n\n//# sourceMappingURL=dev-pages-route-matcher-provider.js.map"
        }
    ]
}