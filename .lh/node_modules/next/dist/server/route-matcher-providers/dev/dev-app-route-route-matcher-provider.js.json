{
    "sourceFile": "node_modules/next/dist/server/route-matcher-providers/dev/dev-app-route-route-matcher-provider.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892884280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"DevAppRouteRouteMatcherProvider\", {\n    enumerable: true,\n    get: function() {\n        return DevAppRouteRouteMatcherProvider;\n    }\n});\nconst _approuteroutematcher = require(\"../../route-matchers/app-route-route-matcher\");\nconst _routekind = require(\"../../route-kind\");\nconst _filecacheroutematcherprovider = require(\"./file-cache-route-matcher-provider\");\nconst _isapprouteroute = require(\"../../../lib/is-app-route-route\");\nconst _app = require(\"../../normalizers/built/app\");\nconst _ismetadataroute = require(\"../../../lib/metadata/is-metadata-route\");\nconst _getmetadataroute = require(\"../../../lib/metadata/get-metadata-route\");\nconst _path = /*#__PURE__*/ _interop_require_default(require(\"../../../shared/lib/isomorphic/path\"));\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass DevAppRouteRouteMatcherProvider extends _filecacheroutematcherprovider.FileCacheRouteMatcherProvider {\n    constructor(appDir, extensions, reader){\n        super(appDir, reader);\n        this.appDir = appDir;\n        this.normalizers = new _app.DevAppNormalizers(appDir, extensions);\n    }\n    async transform(files) {\n        const matchers = [];\n        for (const filename of files){\n            const page = this.normalizers.page.normalize(filename);\n            // If the file isn't a match for this matcher, then skip it.\n            if (!(0, _isapprouteroute.isAppRouteRoute)(page)) continue;\n            // Validate that this is not an ignored page.\n            if (page.includes('/_')) continue;\n            const pathname = this.normalizers.pathname.normalize(filename);\n            const bundlePath = this.normalizers.bundlePath.normalize(filename);\n            const ext = _path.default.extname(filename).slice(1);\n            const isEntryMetadataRouteFile = (0, _ismetadataroute.isMetadataRouteFile)(filename.replace(this.appDir, ''), [\n                ext\n            ], true);\n            if (isEntryMetadataRouteFile && !(0, _ismetadataroute.isStaticMetadataRoute)(page)) {\n                // Matching dynamic metadata routes.\n                // Add 2 possibilities for both single and multiple routes:\n                {\n                    // single:\n                    // /sitemap.ts -> /sitemap.xml/route\n                    // /icon.ts -> /icon/route\n                    // We'll map the filename before normalization:\n                    // sitemap.ts -> sitemap.xml/route.ts\n                    // icon.ts -> icon/route.ts\n                    const metadataPage = (0, _getmetadataroute.normalizeMetadataPageToRoute)(page, false);\n                    const metadataPathname = (0, _getmetadataroute.normalizeMetadataPageToRoute)(pathname, false);\n                    const metadataBundlePath = (0, _getmetadataroute.normalizeMetadataPageToRoute)(bundlePath, false);\n                    const matcher = new _approuteroutematcher.AppRouteRouteMatcher({\n                        kind: _routekind.RouteKind.APP_ROUTE,\n                        page: metadataPage,\n                        pathname: metadataPathname,\n                        bundlePath: metadataBundlePath,\n                        filename\n                    });\n                    matchers.push(matcher);\n                }\n                {\n                    // multiple:\n                    // /sitemap.ts -> /sitemap/[__metadata_id__]/route\n                    // /icon.ts -> /icon/[__metadata_id__]/route\n                    // We'll map the filename before normalization:\n                    // sitemap.ts -> sitemap.xml/[__metadata_id__].ts\n                    // icon.ts -> icon/[__metadata_id__].ts\n                    const metadataPage = (0, _getmetadataroute.normalizeMetadataPageToRoute)(page, true);\n                    const metadataPathname = (0, _getmetadataroute.normalizeMetadataPageToRoute)(pathname, true);\n                    const metadataBundlePath = (0, _getmetadataroute.normalizeMetadataPageToRoute)(bundlePath, true);\n                    const matcher = new _approuteroutematcher.AppRouteRouteMatcher({\n                        kind: _routekind.RouteKind.APP_ROUTE,\n                        page: metadataPage,\n                        pathname: metadataPathname,\n                        bundlePath: metadataBundlePath,\n                        filename\n                    });\n                    matchers.push(matcher);\n                }\n            } else {\n                // Normal app routes and static metadata routes.\n                matchers.push(new _approuteroutematcher.AppRouteRouteMatcher({\n                    kind: _routekind.RouteKind.APP_ROUTE,\n                    page,\n                    pathname,\n                    bundlePath,\n                    filename\n                }));\n            }\n        }\n        return matchers;\n    }\n}\n\n//# sourceMappingURL=dev-app-route-route-matcher-provider.js.map"
        }
    ]
}