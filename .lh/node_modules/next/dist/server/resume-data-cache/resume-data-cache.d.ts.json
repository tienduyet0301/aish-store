{
    "sourceFile": "node_modules/next/dist/server/resume-data-cache/resume-data-cache.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892883136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type UseCacheCacheStore, type FetchCacheStore, type EncryptedBoundArgsCacheStore, type DecryptedBoundArgsCacheStore } from './cache-store';\n/**\n * An immutable version of the resume data cache used during rendering.\n * This cache is read-only and cannot be modified once created.\n */\nexport interface RenderResumeDataCache {\n    /**\n     * A read-only Map store for values cached by the 'use cache' React hook.\n     * The 'set' operation is omitted to enforce immutability.\n     */\n    readonly cache: Omit<UseCacheCacheStore, 'set'>;\n    /**\n     * A read-only Map store for cached fetch responses.\n     * The 'set' operation is omitted to enforce immutability.\n     */\n    readonly fetch: Omit<FetchCacheStore, 'set'>;\n    /**\n     * A read-only Map store for encrypted bound args of inline server functions.\n     * The 'set' operation is omitted to enforce immutability.\n     */\n    readonly encryptedBoundArgs: Omit<EncryptedBoundArgsCacheStore, 'set'>;\n    /**\n     * A read-only Map store for decrypted bound args of inline server functions.\n     * This is only intended for in-memory usage during pre-rendering, and must\n     * not be persisted in the resume store. The 'set' operation is omitted to\n     * enforce immutability.\n     */\n    readonly decryptedBoundArgs: Omit<DecryptedBoundArgsCacheStore, 'set'>;\n}\n/**\n * A mutable version of the resume data cache used during pre-rendering.\n * This cache allows both reading and writing of cached values.\n */\nexport interface PrerenderResumeDataCache {\n    /**\n     * A mutable Map store for values cached by the 'use cache' React hook.\n     * Supports both 'get' and 'set' operations to build the cache during\n     * pre-rendering.\n     */\n    readonly cache: UseCacheCacheStore;\n    /**\n     * A mutable Map store for cached fetch responses.\n     * Supports both 'get' and 'set' operations to build the cache during\n     * pre-rendering.\n     */\n    readonly fetch: FetchCacheStore;\n    /**\n     * A mutable Map store for encrypted bound args of inline server functions.\n     * Supports both 'get' and 'set' operations to build the cache during\n     * pre-rendering.\n     */\n    readonly encryptedBoundArgs: EncryptedBoundArgsCacheStore;\n    /**\n     * A mutable Map store for decrypted bound args of inline server functions.\n     * This is only intended for in-memory usage during pre-rendering, and must\n     * not be persisted in the resume store. Supports both 'get' and 'set'\n     * operations to build the cache during pre-rendering.\n     */\n    readonly decryptedBoundArgs: DecryptedBoundArgsCacheStore;\n}\n/**\n * Serializes a resume data cache into a JSON string for storage or\n * transmission. Handles 'use cache' values, fetch responses, and encrypted\n * bound args for inline server functions.\n *\n * @param resumeDataCache - The immutable cache to serialize\n * @returns A Promise that resolves to the serialized cache as a JSON string, or\n * 'null' if empty\n */\nexport declare function stringifyResumeDataCache(resumeDataCache: RenderResumeDataCache | PrerenderResumeDataCache): Promise<string>;\n/**\n * Creates a new empty mutable resume data cache for pre-rendering.\n * Initializes fresh Map instances for both the 'use cache' and fetch caches.\n * Used at the start of pre-rendering to begin collecting cached values.\n *\n * @returns A new empty PrerenderResumeDataCache instance\n */\nexport declare function createPrerenderResumeDataCache(): PrerenderResumeDataCache;\n/**\n * Creates an immutable render resume data cache from either:\n * 1. An existing prerender cache instance\n * 2. A serialized cache string\n *\n * @param prerenderResumeDataCache - A PrerenderResumeDataCache instance to convert to immutable\n * @param persistedCache - A serialized cache string to parse\n * @returns An immutable RenderResumeDataCache instance\n */\nexport declare function createRenderResumeDataCache(prerenderResumeDataCache: PrerenderResumeDataCache): RenderResumeDataCache;\nexport declare function createRenderResumeDataCache(persistedCache: string): RenderResumeDataCache;\n"
        }
    ]
}