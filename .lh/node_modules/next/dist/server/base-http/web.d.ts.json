{
    "sourceFile": "node_modules/next/dist/server/base-http/web.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892871625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';\nimport type { FetchMetrics } from './index';\nimport { BaseNextRequest, BaseNextResponse } from './index';\nimport type { NextRequestHint } from '../web/adapter';\nexport declare class WebNextRequest extends BaseNextRequest<ReadableStream | null> {\n    request: Request;\n    headers: IncomingHttpHeaders;\n    fetchMetrics: FetchMetrics | undefined;\n    constructor(request: NextRequestHint);\n    parseBody(_limit: string | number): Promise<any>;\n}\nexport declare class WebNextResponse extends BaseNextResponse<WritableStream> {\n    transformStream: TransformStream<any, any>;\n    private headers;\n    private textBody;\n    private closeController;\n    statusCode: number | undefined;\n    statusMessage: string | undefined;\n    constructor(transformStream?: TransformStream<any, any>);\n    setHeader(name: string, value: string | string[]): this;\n    removeHeader(name: string): this;\n    getHeaderValues(name: string): string[] | undefined;\n    getHeader(name: string): string | undefined;\n    getHeaders(): OutgoingHttpHeaders;\n    hasHeader(name: string): boolean;\n    appendHeader(name: string, value: string): this;\n    body(value: string): this;\n    private readonly sendPromise;\n    private _sent;\n    send(): void;\n    get sent(): boolean;\n    toResponse(): Promise<Response>;\n    onClose(callback: () => void): void;\n}\n"
        }
    ]
}