{
    "sourceFile": "node_modules/next/dist/server/base-http/node.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892871563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ServerResponse, IncomingMessage } from 'http';\nimport type { Writable, Readable } from 'stream';\nimport { SYMBOL_CLEARED_COOKIES } from '../api-utils';\nimport type { NextApiRequestCookies } from '../api-utils';\nimport { NEXT_REQUEST_META } from '../request-meta';\nimport type { RequestMeta } from '../request-meta';\nimport { BaseNextRequest, BaseNextResponse, type FetchMetric } from './index';\nimport type { OutgoingHttpHeaders } from 'node:http';\ntype Req = IncomingMessage & {\n    [NEXT_REQUEST_META]?: RequestMeta;\n    cookies?: NextApiRequestCookies;\n    fetchMetrics?: FetchMetric[];\n};\nexport declare class NodeNextRequest extends BaseNextRequest<Readable> {\n    private _req;\n    headers: import(\"http\").IncomingHttpHeaders;\n    fetchMetrics: FetchMetric[] | undefined;\n    [NEXT_REQUEST_META]: RequestMeta;\n    constructor(_req: Req);\n    get originalRequest(): Req;\n    set originalRequest(value: Req);\n    private streaming;\n}\nexport declare class NodeNextResponse extends BaseNextResponse<Writable> {\n    private _res;\n    private textBody;\n    [SYMBOL_CLEARED_COOKIES]?: boolean;\n    get originalResponse(): ServerResponse<IncomingMessage> & {\n        [SYMBOL_CLEARED_COOKIES]?: boolean;\n    };\n    constructor(_res: ServerResponse & {\n        [SYMBOL_CLEARED_COOKIES]?: boolean;\n    });\n    get sent(): boolean;\n    get statusCode(): number;\n    set statusCode(value: number);\n    get statusMessage(): string;\n    set statusMessage(value: string);\n    setHeader(name: string, value: string | string[]): this;\n    removeHeader(name: string): this;\n    getHeaderValues(name: string): string[] | undefined;\n    hasHeader(name: string): boolean;\n    getHeader(name: string): string | undefined;\n    getHeaders(): OutgoingHttpHeaders;\n    appendHeader(name: string, value: string): this;\n    body(value: string): this;\n    send(): void;\n    onClose(callback: () => void): void;\n}\nexport {};\n"
        }
    ]
}