{
    "sourceFile": "node_modules/next/dist/server/base-http/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892871481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';\nimport type { I18NConfig } from '../config-shared';\nimport type { NextApiRequestCookies } from '../api-utils';\nexport interface BaseNextRequestConfig {\n    basePath: string | undefined;\n    i18n?: I18NConfig;\n    trailingSlash?: boolean | undefined;\n}\nexport type FetchMetric = {\n    url: string;\n    idx: number;\n    end: number;\n    start: number;\n    method: string;\n    status: number;\n    cacheReason: string;\n    cacheStatus: 'hit' | 'miss' | 'skip' | 'hmr';\n    cacheWarning?: string;\n};\nexport type FetchMetrics = Array<FetchMetric>;\nexport declare abstract class BaseNextRequest<Body = any> {\n    method: string;\n    url: string;\n    body: Body;\n    protected _cookies: NextApiRequestCookies | undefined;\n    abstract headers: IncomingHttpHeaders;\n    abstract fetchMetrics: FetchMetric[] | undefined;\n    constructor(method: string, url: string, body: Body);\n    get cookies(): Partial<{\n        [key: string]: string;\n    }>;\n}\nexport declare abstract class BaseNextResponse<Destination = any> {\n    destination: Destination;\n    abstract statusCode: number | undefined;\n    abstract statusMessage: string | undefined;\n    abstract get sent(): boolean;\n    constructor(destination: Destination);\n    /**\n     * Sets a value for the header overwriting existing values\n     */\n    abstract setHeader(name: string, value: string | string[]): this;\n    /**\n     * Removes a header\n     */\n    abstract removeHeader(name: string): this;\n    /**\n     * Appends value for the given header name\n     */\n    abstract appendHeader(name: string, value: string): this;\n    /**\n     * Get all values for a header as an array or undefined if no value is present\n     */\n    abstract getHeaderValues(name: string): string[] | undefined;\n    abstract hasHeader(name: string): boolean;\n    /**\n     * Get values for a header concatenated using `,` or undefined if no value is present\n     */\n    abstract getHeader(name: string): string | undefined;\n    abstract getHeaders(): OutgoingHttpHeaders;\n    abstract body(value: string): this;\n    abstract send(): void;\n    abstract onClose(callback: () => void): void;\n    redirect(destination: string, statusCode: number): this;\n}\n"
        }
    ]
}