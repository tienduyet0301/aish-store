{
    "sourceFile": "node_modules/next/dist/server/stream-utils/node-web-streams-helper.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892890992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export type ReactReadableStream = ReadableStream<Uint8Array> & {\n    allReady?: Promise<void> | undefined;\n};\nexport declare function chainStreams<T>(...streams: ReadableStream<T>[]): ReadableStream<T>;\nexport declare function streamFromString(str: string): ReadableStream<Uint8Array>;\nexport declare function streamFromBuffer(chunk: Buffer): ReadableStream<Uint8Array>;\nexport declare function streamToBuffer(stream: ReadableStream<Uint8Array>): Promise<Buffer>;\nexport declare function streamToString(stream: ReadableStream<Uint8Array>, signal?: AbortSignal): Promise<string>;\nexport declare function createBufferedTransformStream(): TransformStream<Uint8Array, Uint8Array>;\nexport declare function renderToInitialFizzStream({ ReactDOMServer, element, streamOptions, }: {\n    ReactDOMServer: typeof import('react-dom/server.edge');\n    element: React.ReactElement;\n    streamOptions?: Parameters<typeof ReactDOMServer.renderToReadableStream>[1];\n}): Promise<ReactReadableStream>;\nexport declare function createRootLayoutValidatorStream(): TransformStream<Uint8Array, Uint8Array>;\nexport type ContinueStreamOptions = {\n    inlinedDataStream: ReadableStream<Uint8Array> | undefined;\n    isStaticGeneration: boolean;\n    getServerInsertedHTML: () => Promise<string>;\n    getServerInsertedMetadata: () => Promise<string>;\n    validateRootLayout?: boolean;\n    /**\n     * Suffix to inject after the buffered data, but before the close tags.\n     */\n    suffix?: string | undefined;\n};\nexport declare function continueFizzStream(renderStream: ReactReadableStream, { suffix, inlinedDataStream, isStaticGeneration, getServerInsertedHTML, getServerInsertedMetadata, validateRootLayout, }: ContinueStreamOptions): Promise<ReadableStream<Uint8Array>>;\ntype ContinueDynamicPrerenderOptions = {\n    getServerInsertedHTML: () => Promise<string>;\n    getServerInsertedMetadata: () => Promise<string>;\n};\nexport declare function continueDynamicPrerender(prerenderStream: ReadableStream<Uint8Array>, { getServerInsertedHTML, getServerInsertedMetadata, }: ContinueDynamicPrerenderOptions): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;\ntype ContinueStaticPrerenderOptions = {\n    inlinedDataStream: ReadableStream<Uint8Array>;\n    getServerInsertedHTML: () => Promise<string>;\n    getServerInsertedMetadata: () => Promise<string>;\n};\nexport declare function continueStaticPrerender(prerenderStream: ReadableStream<Uint8Array>, { inlinedDataStream, getServerInsertedHTML, getServerInsertedMetadata, }: ContinueStaticPrerenderOptions): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;\ntype ContinueResumeOptions = {\n    inlinedDataStream: ReadableStream<Uint8Array>;\n    getServerInsertedHTML: () => Promise<string>;\n    getServerInsertedMetadata: () => Promise<string>;\n};\nexport declare function continueDynamicHTMLResume(renderStream: ReadableStream<Uint8Array>, { inlinedDataStream, getServerInsertedHTML, getServerInsertedMetadata, }: ContinueResumeOptions): Promise<ReadableStream<Uint8Array<ArrayBufferLike>>>;\nexport declare function createDocumentClosingStream(): ReadableStream<Uint8Array>;\nexport {};\n"
        }
    ]
}