{
    "sourceFile": "node_modules/next/dist/experimental/testing/server/utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892853917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    constructRequest: null,\n    getRedirectUrl: null,\n    getRewrittenUrl: null,\n    isRewrite: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    constructRequest: function() {\n        return constructRequest;\n    },\n    getRedirectUrl: function() {\n        return getRedirectUrl;\n    },\n    getRewrittenUrl: function() {\n        return getRewrittenUrl;\n    },\n    isRewrite: function() {\n        return isRewrite;\n    }\n});\nconst _mockrequest = require(\"../../../server/lib/mock-request\");\nconst _node = require(\"../../../server/base-http/node\");\nconst _url = require(\"../../../lib/url\");\nfunction constructRequest({ url, headers = {}, cookies = {} }) {\n    if (!headers) {\n        headers = {};\n    }\n    if (!headers.host) {\n        var _parseUrl;\n        headers.host = (_parseUrl = (0, _url.parseUrl)(url)) == null ? void 0 : _parseUrl.host;\n    }\n    if (cookies) {\n        headers = {\n            ...headers,\n            cookie: Object.entries(cookies).map(([name, value])=>`${name}=${value}`).join(';')\n        };\n    }\n    return new _node.NodeNextRequest(new _mockrequest.MockedRequest({\n        url,\n        headers,\n        method: 'GET'\n    }));\n}\nfunction getRedirectUrl(response) {\n    return response.headers.get('location');\n}\nfunction isRewrite(response) {\n    return Boolean(getRewrittenUrl(response));\n}\nfunction getRewrittenUrl(response) {\n    return response.headers.get('x-middleware-rewrite');\n}\n\n//# sourceMappingURL=utils.js.map"
        }
    ]
}