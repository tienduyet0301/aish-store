{
    "sourceFile": "node_modules/next/dist/experimental/testing/server/config-testing-utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892853547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingHttpHeaders } from 'node:http';\nimport type { NextConfig } from '../../../server/config-shared';\nimport { NextResponse } from '../../../server/web/exports';\n/**\n * Tests the logic of `headers`, `redirects`, and `rewrites` in `next.config.js`.\n * Given the provided next config, this function will return a `NextResponse`\n * with the result of running the request through the custom routes.\n *\n * @example Test whether a given URL results in a redirect.\n * ```\n * import { unstable_getResponseFromNextConfig, getRedirectUrl } from 'next/server/testing'\n * const response = await unstable_getResponseFromNextConfig({\n *   url: 'https://nextjs.org/test',\n *   nextConfig: {\n *    async redirects() {\n *     return [\n *       { source: '/test', destination: '/test2', permanent: false },\n *     ]\n *    },\n *   }\n * });\n * expect(response.status).toEqual(307);\n * expect(getRedirectUrl(response)).toEqual('https://nextjs.org/test2');\n * ```\n */\nexport declare function unstable_getResponseFromNextConfig({ url, nextConfig, headers, cookies, }: {\n    url: string;\n    nextConfig: NextConfig;\n    headers?: IncomingHttpHeaders;\n    cookies?: Record<string, string>;\n}): Promise<NextResponse>;\n"
        }
    ]
}