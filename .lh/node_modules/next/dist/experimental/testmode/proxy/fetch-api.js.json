{
    "sourceFile": "node_modules/next/dist/experimental/testmode/proxy/fetch-api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892855017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"handleFetch\", {\n    enumerable: true,\n    get: function() {\n        return handleFetch;\n    }\n});\nconst _types = require(\"./types\");\nfunction buildRequest(req) {\n    const { request: proxyRequest } = req;\n    const { url, headers, body, ...options } = proxyRequest;\n    return new Request(url, {\n        ...options,\n        headers: new Headers(headers),\n        body: body ? Buffer.from(body, 'base64') : null\n    });\n}\nasync function buildResponse(response) {\n    if (!response) {\n        return _types.UNHANDLED;\n    }\n    if (response === 'abort') {\n        return _types.ABORT;\n    }\n    if (response === 'continue') {\n        return _types.CONTINUE;\n    }\n    const { status, headers, body } = response;\n    return {\n        api: 'fetch',\n        response: {\n            status,\n            headers: Array.from(headers),\n            body: body ? Buffer.from(await response.arrayBuffer()).toString('base64') : null\n        }\n    };\n}\nasync function handleFetch(req, onFetch) {\n    const { testData } = req;\n    const request = buildRequest(req);\n    const response = await onFetch(testData, request);\n    return buildResponse(response);\n}\n\n//# sourceMappingURL=fetch-api.js.map"
        }
    ]
}