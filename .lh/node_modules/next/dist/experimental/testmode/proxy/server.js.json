{
    "sourceFile": "node_modules/next/dist/experimental/testmode/proxy/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892855136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"createProxyServer\", {\n    enumerable: true,\n    get: function() {\n        return createProxyServer;\n    }\n});\nconst _http = /*#__PURE__*/ _interop_require_default(require(\"http\"));\nconst _types = require(\"./types\");\nconst _fetchapi = require(\"./fetch-api\");\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nasync function readBody(req) {\n    const acc = [];\n    for await (const chunk of req){\n        acc.push(chunk);\n    }\n    return Buffer.concat(acc);\n}\nasync function createProxyServer({ onFetch }) {\n    const server = _http.default.createServer(async (req, res)=>{\n        if (req.url !== '/') {\n            res.writeHead(404);\n            res.end();\n            return;\n        }\n        let json;\n        try {\n            json = JSON.parse((await readBody(req)).toString('utf-8'));\n        } catch (e) {\n            res.writeHead(400);\n            res.end();\n            return;\n        }\n        const { api } = json;\n        let response;\n        switch(api){\n            case 'fetch':\n                if (onFetch) {\n                    response = await (0, _fetchapi.handleFetch)(json, onFetch);\n                }\n                break;\n            default:\n                break;\n        }\n        if (!response) {\n            response = _types.UNHANDLED;\n        }\n        res.writeHead(200, {\n            'Content-Type': 'application/json'\n        });\n        res.write(JSON.stringify(response));\n        res.end();\n    });\n    await new Promise((resolve)=>{\n        server.listen(0, '::', ()=>{\n            resolve(undefined);\n        });\n    });\n    const address = server.address();\n    if (!address || typeof address !== 'object') {\n        server.close();\n        throw Object.defineProperty(new Error('Failed to create a proxy server'), \"__NEXT_ERROR_CODE\", {\n            value: \"E107\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    const port = address.port;\n    const fetchWith = (input, init, testData)=>{\n        const request = new Request(input, init);\n        request.headers.set('Next-Test-Proxy-Port', String(port));\n        request.headers.set('Next-Test-Data', testData ?? '');\n        return fetch(request);\n    };\n    return {\n        port,\n        close: ()=>server.close(),\n        fetchWith\n    };\n}\n\n//# sourceMappingURL=server.js.map"
        }
    ]
}