{
    "sourceFile": "node_modules/next/dist/experimental/testmode/playwright/page-route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892854804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"handleRoute\", {\n    enumerable: true,\n    get: function() {\n        return handleRoute;\n    }\n});\nfunction continueRoute(route, request, testHeaders) {\n    return route.continue({\n        headers: {\n            ...request.headers(),\n            ...testHeaders\n        }\n    });\n}\nasync function handleRoute(route, page, testHeaders, fetchHandler) {\n    const request = route.request();\n    // Continue the navigation and non-fetch requests.\n    if (request.isNavigationRequest() || request.resourceType() !== 'fetch') {\n        return continueRoute(route, request, testHeaders);\n    }\n    // Continue the local requests. The followup requests will be intercepted\n    // on the server.\n    const pageOrigin = new URL(page.url()).origin;\n    const requestOrigin = new URL(request.url()).origin;\n    if (pageOrigin === requestOrigin) {\n        return continueRoute(route, request, testHeaders);\n    }\n    if (!fetchHandler) {\n        return route.abort();\n    }\n    const postData = request.postDataBuffer();\n    const fetchRequest = new Request(request.url(), {\n        method: request.method(),\n        headers: Object.fromEntries(Object.entries(request.headers()).filter(([name])=>!name.toLowerCase().startsWith('next-test-'))),\n        body: postData ?? null\n    });\n    const proxyResponse = await fetchHandler(fetchRequest);\n    if (!proxyResponse) {\n        return route.abort();\n    }\n    if (proxyResponse === 'abort') {\n        return route.abort();\n    }\n    if (proxyResponse === 'continue') {\n        return continueRoute(route, request, testHeaders);\n    }\n    const { status, headers, body } = proxyResponse;\n    return route.fulfill({\n        status,\n        headers: Object.fromEntries(headers),\n        body: body ? Buffer.from(await proxyResponse.arrayBuffer()) : undefined\n    });\n}\n\n//# sourceMappingURL=page-route.js.map"
        }
    ]
}