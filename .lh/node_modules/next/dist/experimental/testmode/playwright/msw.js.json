{
    "sourceFile": "node_modules/next/dist/experimental/testmode/playwright/msw.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892854530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    defineConfig: null,\n    test: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    defineConfig: function() {\n        return _index.defineConfig;\n    },\n    test: function() {\n        return test;\n    }\n});\n0 && __export(require(\"msw\")) && __export(require(\"@playwright/test\"));\nconst _index = require(\"./index\");\nconst _msw = _export_star(require(\"msw\"), exports);\nconst _stricteventemitter = require(\"strict-event-emitter\");\n_export_star(require(\"@playwright/test\"), exports);\nfunction _export_star(from, to) {\n    Object.keys(from).forEach(function(k) {\n        if (k !== \"default\" && !Object.prototype.hasOwnProperty.call(to, k)) {\n            Object.defineProperty(to, k, {\n                enumerable: true,\n                get: function() {\n                    return from[k];\n                }\n            });\n        }\n    });\n    return from;\n}\nconst test = _index.test.extend({\n    mswHandlers: [\n        [],\n        {\n            option: true\n        }\n    ],\n    msw: [\n        async ({ next, mswHandlers }, use)=>{\n            const handlers = [\n                ...mswHandlers\n            ];\n            const emitter = new _stricteventemitter.Emitter();\n            next.onFetch(async (request)=>{\n                const requestId = Math.random().toString(16).slice(2);\n                let isUnhandled = false;\n                let isPassthrough = false;\n                let mockedResponse;\n                await (0, _msw.handleRequest)(request.clone(), requestId, handlers.slice(0), {\n                    onUnhandledRequest: ()=>{\n                        isUnhandled = true;\n                    }\n                }, emitter, {\n                    onPassthroughResponse: ()=>{\n                        isPassthrough = true;\n                    },\n                    onMockedResponse: (r)=>{\n                        mockedResponse = r;\n                    }\n                });\n                if (isUnhandled) {\n                    return undefined;\n                }\n                if (isPassthrough) {\n                    return 'continue';\n                }\n                if (mockedResponse) {\n                    return mockedResponse;\n                }\n                return 'abort';\n            });\n            await use({\n                use: (...newHandlers)=>{\n                    handlers.unshift(...newHandlers);\n                }\n            });\n            handlers.length = 0;\n        },\n        {\n            auto: true\n        }\n    ]\n});\nconst _default = test;\n\n//# sourceMappingURL=msw.js.map"
        }
    ]
}