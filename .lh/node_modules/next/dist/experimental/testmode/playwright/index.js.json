{
    "sourceFile": "node_modules/next/dist/experimental/testmode/playwright/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892854465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// eslint-disable-next-line import/no-extraneous-dependencies\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    default: null,\n    defaultPlaywrightConfig: null,\n    defineConfig: null,\n    test: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    defaultPlaywrightConfig: function() {\n        return _defaultconfig.defaultPlaywrightConfig;\n    },\n    defineConfig: function() {\n        return defineConfig;\n    },\n    test: function() {\n        return test;\n    }\n});\n0 && __export(require(\"@playwright/test\"));\nconst _test = /*#__PURE__*/ _interop_require_wildcard(_export_star(require(\"@playwright/test\"), exports));\nconst _nextworkerfixture = require(\"./next-worker-fixture\");\nconst _nextfixture = require(\"./next-fixture\");\nconst _defaultconfig = require(\"./default-config\");\nfunction _export_star(from, to) {\n    Object.keys(from).forEach(function(k) {\n        if (k !== \"default\" && !Object.prototype.hasOwnProperty.call(to, k)) {\n            Object.defineProperty(to, k, {\n                enumerable: true,\n                get: function() {\n                    return from[k];\n                }\n            });\n        }\n    });\n    return from;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n    if (typeof WeakMap !== \"function\") return null;\n    var cacheBabelInterop = new WeakMap();\n    var cacheNodeInterop = new WeakMap();\n    return (_getRequireWildcardCache = function(nodeInterop) {\n        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n    })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n    if (!nodeInterop && obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache(nodeInterop);\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {\n        __proto__: null\n    };\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction defineConfig(config) {\n    if (config.webServer !== undefined) {\n        // Playwright doesn't merge the `webServer` field as we'd expect, so remove our default if the user specifies one.\n        const { webServer, ...partialDefaultPlaywrightConfig } = _defaultconfig.defaultPlaywrightConfig;\n        return _test.defineConfig(partialDefaultPlaywrightConfig, config);\n    } else {\n        return _test.defineConfig(_defaultconfig.defaultPlaywrightConfig, config);\n    }\n}\nconst test = _test.test.extend({\n    nextOptions: [\n        {\n            fetchLoopback: false\n        },\n        {\n            option: true\n        }\n    ],\n    _nextWorker: [\n        // eslint-disable-next-line no-empty-pattern\n        async ({}, use)=>{\n            await (0, _nextworkerfixture.applyNextWorkerFixture)(use);\n        },\n        {\n            scope: 'worker',\n            auto: true\n        }\n    ],\n    next: async ({ nextOptions, _nextWorker, page }, use, testInfo)=>{\n        await (0, _nextfixture.applyNextFixture)(use, {\n            testInfo,\n            nextWorker: _nextWorker,\n            page,\n            nextOptions\n        });\n    }\n});\nconst _default = test;\n\n//# sourceMappingURL=index.js.map"
        }
    ]
}