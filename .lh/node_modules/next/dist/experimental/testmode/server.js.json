{
    "sourceFile": "node_modules/next/dist/experimental/testmode/server.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892855381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    interceptTestApis: null,\n    wrapRequestHandlerNode: null,\n    wrapRequestHandlerWorker: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    interceptTestApis: function() {\n        return interceptTestApis;\n    },\n    wrapRequestHandlerNode: function() {\n        return wrapRequestHandlerNode;\n    },\n    wrapRequestHandlerWorker: function() {\n        return wrapRequestHandlerWorker;\n    }\n});\nconst _context = require(\"./context\");\nconst _fetch = require(\"./fetch\");\nconst _httpget = require(\"./httpget\");\nconst reader = {\n    url (req) {\n        return req.url ?? '';\n    },\n    header (req, name) {\n        const h = req.headers[name];\n        if (h === undefined || h === null) {\n            return null;\n        }\n        if (typeof h === 'string') {\n            return h;\n        }\n        return h[0] ?? null;\n    }\n};\nfunction interceptTestApis() {\n    const originalFetch = global.fetch;\n    const restoreFetch = (0, _fetch.interceptFetch)(originalFetch);\n    const restoreHttpGet = (0, _httpget.interceptHttpGet)(originalFetch);\n    // Cleanup.\n    return ()=>{\n        restoreFetch();\n        restoreHttpGet();\n    };\n}\nfunction wrapRequestHandlerWorker(handler) {\n    return (req, res)=>(0, _context.withRequest)(req, reader, ()=>handler(req, res));\n}\nfunction wrapRequestHandlerNode(handler) {\n    return (req, res, parsedUrl)=>(0, _context.withRequest)(req, reader, ()=>handler(req, res, parsedUrl));\n}\n\n//# sourceMappingURL=server.js.map"
        }
    ]
}