{
    "sourceFile": "node_modules/ast-types-flow/lib/types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892038482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @flow\n */\n\n'use strict';\n\n/*\n * Flow types for the Babylon AST.\n */\n\n// Abstract types. Something must extend these.\n\nexport type Comment = {\n  type: 'CommentLine',\n  _CommentLine?: void,\n  value: string,\n  end: number,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n} | {\n  type: 'CommentBlock',\n  _CommentBlock?: void,\n  value: string,\n  end: number,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n};\n\nexport type Declaration = {\n  type: 'ClassBody',\n  _ClassBody?: void,\n  body: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassDeclaration',\n  _ClassDeclaration?: void,\n  body: ClassBody,\n  id: ?Identifier,\n  superClass: ?Expression,\n  decorators: any,\n  superTypeParameters: any,\n  typeParameters: any,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'FunctionDeclaration',\n  _FunctionDeclaration?: void,\n  body: BlockStatement,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'MethodDefinition',\n  _MethodDefinition?: void,\n  computed: boolean,\n  key: Node,\n  kind: 'constructor' | 'method' | 'get' | 'set',\n  static: boolean,\n  value: FunctionExpression,\n  decorators: ?Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'VariableDeclaration',\n  _VariableDeclaration?: void,\n  declarations: Array<VariableDeclarator>,\n  kind: 'var' | 'let' | 'const',\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassProperty',\n  _ClassProperty?: void,\n  computed: boolean,\n  key: Node,\n  static: boolean,\n  typeAnnotation: ?TypeAnnotation,\n  value: ?Expression,\n  decorators: Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Expression = {\n  type: 'ArrayExpression',\n  _ArrayExpression?: void,\n  elements: Array<?Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'AssignmentExpression',\n  _AssignmentExpression?: void,\n  left: Pattern,\n  operator: AssignmentOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'AwaitExpression',\n  _AwaitExpression?: void,\n  all: boolean,\n  argument: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BinaryExpression',\n  _BinaryExpression?: void,\n  left: Expression,\n  operator: BinaryOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BindExpression',\n  _BindExpression?: void,\n  callee: Node,\n  object: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'CallExpression',\n  _CallExpression?: void,\n  arguments: Array<Node>,\n  callee: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassExpression',\n  _ClassExpression?: void,\n  body: ClassBody,\n  id: ?Identifier,\n  superClass: ?Expression,\n  decorators: any,\n  superTypeParameters: any,\n  typeParameters: any,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ComprehensionExpression',\n  _ComprehensionExpression?: void,\n  body: Expression,\n  blocks: Array<ComprehensionBlock>,\n  filter: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ConditionalExpression',\n  _ConditionalExpression?: void,\n  alternate: Expression,\n  consequent: Expression,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DoExpression',\n  _DoExpression?: void,\n  body: Statement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'FunctionExpression',\n  _FunctionExpression?: void,\n  body: BlockStatement,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'Identifier',\n  _Identifier?: void,\n  name: string,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Literal',\n  _Literal?: void,\n  raw: string,\n  regex: ?{pattern: string, flags: string},\n  value: ?(string | boolean | number | RegExp),\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'LogicalExpression',\n  _LogicalExpression?: void,\n  left: Expression,\n  operator: LogicalOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'MemberExpression',\n  _MemberExpression?: void,\n  computed: boolean,\n  object: Expression,\n  property: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NewExpression',\n  _NewExpression?: void,\n  arguments: Array<Node>,\n  callee: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectExpression',\n  _ObjectExpression?: void,\n  properties: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SequenceExpression',\n  _SequenceExpression?: void,\n  expression: Array<Expression>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TaggedTemplateExpression',\n  _TaggedTemplateExpression?: void,\n  quasi: TemplateLiteral,\n  tag: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TemplateLiteral',\n  _TemplateLiteral?: void,\n  expressions: Array<Expression>,\n  quasis: Array<TemplateElement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ThisExpression',\n  _ThisExpression?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'UnaryExpression',\n  _UnaryExpression?: void,\n  argument: Expression,\n  operator: UnaryOperator,\n  prefix: true,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'UpdateExpression',\n  _UpdateExpression?: void,\n  argument: Expression,\n  operator: UpdateOperator,\n  prefix: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'YieldExpression',\n  _YieldExpression?: void,\n  argument: ?Expression,\n  delegate: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeCastExpression',\n  _TypeCastExpression?: void,\n  expression: Expression,\n  typeAnnotation: TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXElement',\n  _JSXElement?: void,\n  children: Array<Node>,\n  closingElement: ?JSXClosingElement,\n  openingElement: JSXOpeningElement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXEmptyExpression',\n  _JSXEmptyExpression?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXExpressionContainer',\n  _JSXExpressionContainer?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXMemberExpression',\n  _JSXMemberExpression?: void,\n  computed: boolean,\n  object: Node,\n  property: JSXIdentifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Function = {\n  type: 'ArrowFunctionExpression',\n  _ArrowFunctionExpression?: void,\n  body: Node,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'FunctionDeclaration',\n  _FunctionDeclaration?: void,\n  body: BlockStatement,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'FunctionExpression',\n  _FunctionExpression?: void,\n  body: BlockStatement,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n};\n\nexport type Node = {\n  type: 'ArrayExpression',\n  _ArrayExpression?: void,\n  elements: Array<?Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ArrayPattern',\n  _ArrayPattern?: void,\n  elements: Array<?Node>,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ArrowFunctionExpression',\n  _ArrowFunctionExpression?: void,\n  body: Node,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'AssignmentExpression',\n  _AssignmentExpression?: void,\n  left: Pattern,\n  operator: AssignmentOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'AssignmentPattern',\n  _AssignmentPattern?: void,\n  left: Pattern,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'AwaitExpression',\n  _AwaitExpression?: void,\n  all: boolean,\n  argument: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BinaryExpression',\n  _BinaryExpression?: void,\n  left: Expression,\n  operator: BinaryOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BindExpression',\n  _BindExpression?: void,\n  callee: Node,\n  object: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BlockStatement',\n  _BlockStatement?: void,\n  body: Array<Statement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BreakStatement',\n  _BreakStatement?: void,\n  label: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'CallExpression',\n  _CallExpression?: void,\n  arguments: Array<Node>,\n  callee: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'CatchClause',\n  _CatchClause?: void,\n  body: BlockStatement,\n  param: Pattern,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassBody',\n  _ClassBody?: void,\n  body: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassDeclaration',\n  _ClassDeclaration?: void,\n  body: ClassBody,\n  id: ?Identifier,\n  superClass: ?Expression,\n  decorators: any,\n  superTypeParameters: any,\n  typeParameters: any,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassExpression',\n  _ClassExpression?: void,\n  body: ClassBody,\n  id: ?Identifier,\n  superClass: ?Expression,\n  decorators: any,\n  superTypeParameters: any,\n  typeParameters: any,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ComprehensionBlock',\n  _ComprehensionBlock?: void,\n  each: boolean,\n  left: Pattern,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ComprehensionExpression',\n  _ComprehensionExpression?: void,\n  body: Expression,\n  blocks: Array<ComprehensionBlock>,\n  filter: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ConditionalExpression',\n  _ConditionalExpression?: void,\n  alternate: Expression,\n  consequent: Expression,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ContinueStatement',\n  _ContinueStatement?: void,\n  label: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Decorator',\n  _Decorator?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DebuggerStatement',\n  _DebuggerStatement?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DoWhileStatement',\n  _DoWhileStatement?: void,\n  body: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DoExpression',\n  _DoExpression?: void,\n  body: Statement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'EmptyStatement',\n  _EmptyStatement?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExpressionStatement',\n  _ExpressionStatement?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'File',\n  _File?: void,\n  program: Program,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ForInStatement',\n  _ForInStatement?: void,\n  body: Statement,\n  left: Node,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ForOfStatement',\n  _ForOfStatement?: void,\n  body: Statement,\n  left: Node,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ForStatement',\n  _ForStatement?: void,\n  init: ?Node,\n  test: ?Expression,\n  update: ?Expression,\n  body: Statement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'FunctionDeclaration',\n  _FunctionDeclaration?: void,\n  body: BlockStatement,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'FunctionExpression',\n  _FunctionExpression?: void,\n  body: BlockStatement,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n} | {\n  type: 'Identifier',\n  _Identifier?: void,\n  name: string,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'IfStatement',\n  _IfStatement?: void,\n  alternate: ?Statement,\n  consequent: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ImportDefaultSpecifier',\n  _ImportDefaultSpecifier?: void,\n  local: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ImportNamespaceSpecifier',\n  _ImportNamespaceSpecifier?: void,\n  local: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ImportDeclaration',\n  _ImportDeclaration?: void,\n  specifiers: Array<Node>,\n  source: Literal,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ImportSpecifier',\n  _ImportSpecifier?: void,\n  imported: Node,\n  local: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'LabeledStatement',\n  _LabeledStatement?: void,\n  body: Statement,\n  label: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Literal',\n  _Literal?: void,\n  raw: string,\n  regex: ?{pattern: string, flags: string},\n  value: ?(string | boolean | number | RegExp),\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'LogicalExpression',\n  _LogicalExpression?: void,\n  left: Expression,\n  operator: LogicalOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'MemberExpression',\n  _MemberExpression?: void,\n  computed: boolean,\n  object: Expression,\n  property: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'MetaProperty',\n  _MetaProperty?: void,\n  meta: Node,\n  property: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'MethodDefinition',\n  _MethodDefinition?: void,\n  computed: boolean,\n  key: Node,\n  kind: 'constructor' | 'method' | 'get' | 'set',\n  static: boolean,\n  value: FunctionExpression,\n  decorators: ?Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NewExpression',\n  _NewExpression?: void,\n  arguments: Array<Node>,\n  callee: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Noop',\n  _Noop?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectExpression',\n  _ObjectExpression?: void,\n  properties: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectPattern',\n  _ObjectPattern?: void,\n  properties: Array<Node>,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Program',\n  _Program?: void,\n  body: Array<Statement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Property',\n  _Property?: void,\n  computed: boolean,\n  key: Node,\n  kind: 'init' | 'get' | 'set',\n  method: boolean,\n  shorthand: boolean,\n  value: Node,\n  decorators: ?Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'RestElement',\n  _RestElement?: void,\n  argument: Pattern,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ReturnStatement',\n  _ReturnStatement?: void,\n  argument: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SequenceExpression',\n  _SequenceExpression?: void,\n  expression: Array<Expression>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SpreadElement',\n  _SpreadElement?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SpreadProperty',\n  _SpreadProperty?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Super',\n  _Super?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SwitchCase',\n  _SwitchCase?: void,\n  consequent: Array<Statement>,\n  test: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SwitchStatement',\n  _SwitchStatement?: void,\n  cases: Array<SwitchCase>,\n  discriminant: Expression,\n  lexical: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TaggedTemplateExpression',\n  _TaggedTemplateExpression?: void,\n  quasi: TemplateLiteral,\n  tag: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TemplateElement',\n  _TemplateElement?: void,\n  tail: boolean,\n  value: {cooked: string, raw: string},\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TemplateLiteral',\n  _TemplateLiteral?: void,\n  expressions: Array<Expression>,\n  quasis: Array<TemplateElement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ThisExpression',\n  _ThisExpression?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ThrowStatement',\n  _ThrowStatement?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TryStatement',\n  _TryStatement?: void,\n  block: BlockStatement,\n  finalizer: ?BlockStatement,\n  guardedHandlers: Array<CatchClause>,\n  handler: ?CatchClause,\n  handlers: ?Array<CatchClause>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'UnaryExpression',\n  _UnaryExpression?: void,\n  argument: Expression,\n  operator: UnaryOperator,\n  prefix: true,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'UpdateExpression',\n  _UpdateExpression?: void,\n  argument: Expression,\n  operator: UpdateOperator,\n  prefix: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'VariableDeclaration',\n  _VariableDeclaration?: void,\n  declarations: Array<VariableDeclarator>,\n  kind: 'var' | 'let' | 'const',\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'VariableDeclarator',\n  _VariableDeclarator?: void,\n  id: Pattern,\n  init: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'WhileStatement',\n  _WhileStatement?: void,\n  body: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'WithStatement',\n  _WithStatement?: void,\n  body: Statement,\n  object: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'YieldExpression',\n  _YieldExpression?: void,\n  argument: ?Expression,\n  delegate: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExportAllDeclaration',\n  _ExportAllDeclaration?: void,\n  exported: Node,\n  source: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExportDefaultDeclaration',\n  _ExportDefaultDeclaration?: void,\n  declaration: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExportNamedDeclaration',\n  _ExportNamedDeclaration?: void,\n  declaration: Node,\n  source: Literal,\n  specifiers: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExportDefaultSpecifier',\n  _ExportDefaultSpecifier?: void,\n  exported: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExportNamespaceSpecifier',\n  _ExportNamespaceSpecifier?: void,\n  exported: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExportSpecifier',\n  _ExportSpecifier?: void,\n  local: Node,\n  exported: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'AnyTypeAnnotation',\n  _AnyTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ArrayTypeAnnotation',\n  _ArrayTypeAnnotation?: void,\n  elementType: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BooleanLiteralTypeAnnotation',\n  _BooleanLiteralTypeAnnotation?: void,\n  raw: string,\n  value: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BooleanTypeAnnotation',\n  _BooleanTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassImplements',\n  _ClassImplements?: void,\n  id: Identifier,\n  typeParameters: ?TypeParameterInstantiation,\n  superClass: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ClassProperty',\n  _ClassProperty?: void,\n  computed: boolean,\n  key: Node,\n  static: boolean,\n  typeAnnotation: ?TypeAnnotation,\n  value: ?Expression,\n  decorators: Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareClass',\n  _DeclareClass?: void,\n  body: ObjectTypeAnnotation,\n  extends: Array<InterfaceExtends>,\n  id: Identifier,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareFunction',\n  _DeclareFunction?: void,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareModule',\n  _DeclareModule?: void,\n  body: BlockStatement,\n  id: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareVariable',\n  _DeclareVariable?: void,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'FunctionTypeAnnotation',\n  _FunctionTypeAnnotation?: void,\n  params: Array<FunctionTypeParam>,\n  rest: ?FunctionTypeParam,\n  returnType: Type,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'FunctionTypeParam',\n  _FunctionTypeParam?: void,\n  name: Identifier,\n  optional: boolean,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'GenericTypeAnnotation',\n  _GenericTypeAnnotation?: void,\n  id: Node,\n  typeParameters: ?TypeParameterInstantiation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'InterfaceExtends',\n  _InterfaceExtends?: void,\n  id: Identifier,\n  typeParameters: ?TypeParameterInstantiation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'InterfaceDeclaration',\n  _InterfaceDeclaration?: void,\n  body: ObjectTypeAnnotation,\n  extends: Array<InterfaceExtends>,\n  id: Identifier,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'IntersectionTypeAnnotation',\n  _IntersectionTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'MixedTypeAnnotation',\n  _MixedTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NullableTypeAnnotation',\n  _NullableTypeAnnotation?: void,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NumberLiteralTypeAnnotation',\n  _NumberLiteralTypeAnnotation?: void,\n  raw: string,\n  value: number,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NumberTypeAnnotation',\n  _NumberTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'StringLiteralTypeAnnotation',\n  _StringLiteralTypeAnnotation?: void,\n  raw: string,\n  value: string,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'StringTypeAnnotation',\n  _StringTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TupleTypeAnnotation',\n  _TupleTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeofTypeAnnotation',\n  _TypeofTypeAnnotation?: void,\n  argument: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeAlias',\n  _TypeAlias?: void,\n  id: Identifier,\n  right: Type,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeAnnotation',\n  _TypeAnnotation?: void,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeCastExpression',\n  _TypeCastExpression?: void,\n  expression: Expression,\n  typeAnnotation: TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeParameterDeclaration',\n  _TypeParameterDeclaration?: void,\n  params: Array<Identifier>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeParameterInstantiation',\n  _TypeParameterInstantiation?: void,\n  params: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectTypeAnnotation',\n  _ObjectTypeAnnotation?: void,\n  callProperties: Array<ObjectTypeCallProperty>,\n  indexers: Array<ObjectTypeIndexer>,\n  properties: Array<ObjectTypeProperty>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectTypeCallProperty',\n  _ObjectTypeCallProperty?: void,\n  static: boolean,\n  value: FunctionTypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectTypeIndexer',\n  _ObjectTypeIndexer?: void,\n  id: Identifier,\n  key: Type,\n  value: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectTypeProperty',\n  _ObjectTypeProperty?: void,\n  key: Node,\n  optional: boolean,\n  value: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'QualifiedTypeIdentifier',\n  _QualifiedTypeIdentifier?: void,\n  id: Identifier,\n  qualification: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'UnionTypeAnnotation',\n  _UnionTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'VoidTypeAnnotation',\n  _VoidTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXAttribute',\n  _JSXAttribute?: void,\n  name: Node,\n  value: ?Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXClosingElement',\n  _JSXClosingElement?: void,\n  name: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXElement',\n  _JSXElement?: void,\n  children: Array<Node>,\n  closingElement: ?JSXClosingElement,\n  openingElement: JSXOpeningElement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXEmptyExpression',\n  _JSXEmptyExpression?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXExpressionContainer',\n  _JSXExpressionContainer?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXIdentifier',\n  _JSXIdentifier?: void,\n  name: string,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXMemberExpression',\n  _JSXMemberExpression?: void,\n  computed: boolean,\n  object: Node,\n  property: JSXIdentifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXNamespacedName',\n  _JSXNamespacedName?: void,\n  name: JSXIdentifier,\n  namespace: JSXIdentifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXOpeningElement',\n  _JSXOpeningElement?: void,\n  attributes: Array<Node>,\n  name: Array<Node>,\n  selfClosing: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'JSXSpreadAttribute',\n  _JSXSpreadAttribute?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Pattern = {\n  type: 'ArrayPattern',\n  _ArrayPattern?: void,\n  elements: Array<?Node>,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'AssignmentPattern',\n  _AssignmentPattern?: void,\n  left: Pattern,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'Identifier',\n  _Identifier?: void,\n  name: string,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectPattern',\n  _ObjectPattern?: void,\n  properties: Array<Node>,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'RestElement',\n  _RestElement?: void,\n  argument: Pattern,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Statement = {\n  type: 'BlockStatement',\n  _BlockStatement?: void,\n  body: Array<Statement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BreakStatement',\n  _BreakStatement?: void,\n  label: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ContinueStatement',\n  _ContinueStatement?: void,\n  label: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DoWhileStatement',\n  _DoWhileStatement?: void,\n  body: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'EmptyStatement',\n  _EmptyStatement?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ExpressionStatement',\n  _ExpressionStatement?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ForInStatement',\n  _ForInStatement?: void,\n  body: Statement,\n  left: Node,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ForOfStatement',\n  _ForOfStatement?: void,\n  body: Statement,\n  left: Node,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ForStatement',\n  _ForStatement?: void,\n  init: ?Node,\n  test: ?Expression,\n  update: ?Expression,\n  body: Statement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'IfStatement',\n  _IfStatement?: void,\n  alternate: ?Statement,\n  consequent: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'LabeledStatement',\n  _LabeledStatement?: void,\n  body: Statement,\n  label: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ReturnStatement',\n  _ReturnStatement?: void,\n  argument: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'SwitchStatement',\n  _SwitchStatement?: void,\n  cases: Array<SwitchCase>,\n  discriminant: Expression,\n  lexical: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ThrowStatement',\n  _ThrowStatement?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TryStatement',\n  _TryStatement?: void,\n  block: BlockStatement,\n  finalizer: ?BlockStatement,\n  guardedHandlers: Array<CatchClause>,\n  handler: ?CatchClause,\n  handlers: ?Array<CatchClause>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'WhileStatement',\n  _WhileStatement?: void,\n  body: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'WithStatement',\n  _WithStatement?: void,\n  body: Statement,\n  object: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareClass',\n  _DeclareClass?: void,\n  body: ObjectTypeAnnotation,\n  extends: Array<InterfaceExtends>,\n  id: Identifier,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareFunction',\n  _DeclareFunction?: void,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareModule',\n  _DeclareModule?: void,\n  body: BlockStatement,\n  id: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'DeclareVariable',\n  _DeclareVariable?: void,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'InterfaceDeclaration',\n  _InterfaceDeclaration?: void,\n  body: ObjectTypeAnnotation,\n  extends: Array<InterfaceExtends>,\n  id: Identifier,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TypeAlias',\n  _TypeAlias?: void,\n  id: Identifier,\n  right: Type,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Type = {\n  type: 'AnyTypeAnnotation',\n  _AnyTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ArrayTypeAnnotation',\n  _ArrayTypeAnnotation?: void,\n  elementType: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BooleanLiteralTypeAnnotation',\n  _BooleanLiteralTypeAnnotation?: void,\n  raw: string,\n  value: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'BooleanTypeAnnotation',\n  _BooleanTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'FunctionTypeAnnotation',\n  _FunctionTypeAnnotation?: void,\n  params: Array<FunctionTypeParam>,\n  rest: ?FunctionTypeParam,\n  returnType: Type,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'GenericTypeAnnotation',\n  _GenericTypeAnnotation?: void,\n  id: Node,\n  typeParameters: ?TypeParameterInstantiation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'IntersectionTypeAnnotation',\n  _IntersectionTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'MixedTypeAnnotation',\n  _MixedTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NullableTypeAnnotation',\n  _NullableTypeAnnotation?: void,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NumberLiteralTypeAnnotation',\n  _NumberLiteralTypeAnnotation?: void,\n  raw: string,\n  value: number,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'NumberTypeAnnotation',\n  _NumberTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'StringLiteralTypeAnnotation',\n  _StringLiteralTypeAnnotation?: void,\n  raw: string,\n  value: string,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'StringTypeAnnotation',\n  _StringTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'TupleTypeAnnotation',\n  _TupleTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'ObjectTypeAnnotation',\n  _ObjectTypeAnnotation?: void,\n  callProperties: Array<ObjectTypeCallProperty>,\n  indexers: Array<ObjectTypeIndexer>,\n  properties: Array<ObjectTypeProperty>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'UnionTypeAnnotation',\n  _UnionTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n} | {\n  type: 'VoidTypeAnnotation',\n  _VoidTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// Concrete Types. Nothing can extend these.\n\nexport type CommentLine = {\n  type: 'CommentLine',\n  _CommentLine?: void,\n  value: string,\n  end: number,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n};\n\nexport type CommentBlock = {\n  type: 'CommentBlock',\n  _CommentBlock?: void,\n  value: string,\n  end: number,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n};\n\n// Babel concrete types.\n\nexport type ArrayExpression = {\n  type: 'ArrayExpression',\n  _ArrayExpression?: void,\n  elements: Array<?Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ArrayPattern = {\n  type: 'ArrayPattern',\n  _ArrayPattern?: void,\n  elements: Array<?Node>,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ArrowFunctionExpression = {\n  type: 'ArrowFunctionExpression',\n  _ArrowFunctionExpression?: void,\n  body: Node,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n};\n\ntype AssignmentOperator =\n  '=' |\n  '+=' |\n  '-=' |\n  '*=' |\n  '/=' |\n  '%=' |\n  '<<=' |\n  '>>=' |\n  '>>>=' |\n  '|=' |\n  '^=' |\n  '&=';\n\nexport type AssignmentExpression = {\n  type: 'AssignmentExpression',\n  _AssignmentExpression?: void,\n  left: Pattern,\n  operator: AssignmentOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type AssignmentPattern = {\n  type: 'AssignmentPattern',\n  _AssignmentPattern?: void,\n  left: Pattern,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type AwaitExpression = {\n  type: 'AwaitExpression',\n  _AwaitExpression?: void,\n  all: boolean,\n  argument: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\ntype BinaryOperator =\n  '==' |\n  '!=' |\n  '===' |\n  '!==' |\n  '<' |\n  '<=' |\n  '>' |\n  '>=' |\n  '<<' |\n  '>>' |\n  '>>>' |\n  '+' |\n  '-' |\n  '*' |\n  '/' |\n  '%' |\n  '&' |\n  '|' |\n  '^' |\n  'in' |\n  'instanceof' |\n  '..';\n\nexport type BinaryExpression = {\n  type: 'BinaryExpression',\n  _BinaryExpression?: void,\n  left: Expression,\n  operator: BinaryOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: What is this?\nexport type BindExpression = {\n  type: 'BindExpression',\n  _BindExpression?: void,\n  callee: Node,\n  object: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type BlockStatement = {\n  type: 'BlockStatement',\n  _BlockStatement?: void,\n  body: Array<Statement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type BreakStatement = {\n  type: 'BreakStatement',\n  _BreakStatement?: void,\n  label: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type CallExpression = {\n  type: 'CallExpression',\n  _CallExpression?: void,\n  arguments: Array<Node>,\n  callee: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type CatchClause = {\n  type: 'CatchClause',\n  _CatchClause?: void,\n  body: BlockStatement,\n  param: Pattern,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ClassBody = {\n  type: 'ClassBody',\n  _ClassBody?: void,\n  body: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ClassDeclaration = {\n  type: 'ClassDeclaration',\n  _ClassDeclaration?: void,\n  body: ClassBody,\n  id: ?Identifier,\n  superClass: ?Expression,\n  decorators: any,\n  superTypeParameters: any,\n  typeParameters: any,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ClassExpression = {\n  type: 'ClassExpression',\n  _ClassExpression?: void,\n  body: ClassBody,\n  id: ?Identifier,\n  superClass: ?Expression,\n  decorators: any,\n  superTypeParameters: any,\n  typeParameters: any,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ComprehensionBlock = {\n  type: 'ComprehensionBlock',\n  _ComprehensionBlock?: void,\n  each: boolean,\n  left: Pattern,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ComprehensionExpression = {\n  type: 'ComprehensionExpression',\n  _ComprehensionExpression?: void,\n  body: Expression,\n  blocks: Array<ComprehensionBlock>,\n  filter: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ConditionalExpression = {\n  type: 'ConditionalExpression',\n  _ConditionalExpression?: void,\n  alternate: Expression,\n  consequent: Expression,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ContinueStatement = {\n  type: 'ContinueStatement',\n  _ContinueStatement?: void,\n  label: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type Decorator = {\n  type: 'Decorator',\n  _Decorator?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type DebuggerStatement = {\n  type: 'DebuggerStatement',\n  _DebuggerStatement?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type DoWhileStatement = {\n  type: 'DoWhileStatement',\n  _DoWhileStatement?: void,\n  body: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type DoExpression = {\n  type: 'DoExpression',\n  _DoExpression?: void,\n  body: Statement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type EmptyStatement = {\n  type: 'EmptyStatement',\n  _EmptyStatement?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ExpressionStatement = {\n  type: 'ExpressionStatement',\n  _ExpressionStatement?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type File = {\n  type: 'File',\n  _File?: void,\n  program: Program,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ForInStatement = {\n  type: 'ForInStatement',\n  _ForInStatement?: void,\n  body: Statement,\n  left: Node,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ForOfStatement = {\n  type: 'ForOfStatement',\n  _ForOfStatement?: void,\n  body: Statement,\n  left: Node,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ForStatement = {\n  type: 'ForStatement',\n  _ForStatement?: void,\n  init: ?Node,\n  test: ?Expression,\n  update: ?Expression,\n  body: Statement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type FunctionDeclaration = {\n  type: 'FunctionDeclaration',\n  _FunctionDeclaration?: void,\n  body: BlockStatement,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n};\n\nexport type FunctionExpression = {\n  type: 'FunctionExpression',\n  _FunctionExpression?: void,\n  body: BlockStatement,\n  id: ?Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n  async: boolean,\n  defaults: Array<?Expression>,\n  expression: boolean,\n  generator: boolean,\n  params: Array<Pattern>,\n  rest: ?Identifier,\n  returnType: ?TypeAnnotation,\n  typeParameters: ?TypeParameterDeclaration,\n};\n\nexport type Identifier = {\n  type: 'Identifier',\n  _Identifier?: void,\n  name: string,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type IfStatement = {\n  type: 'IfStatement',\n  _IfStatement?: void,\n  alternate: ?Statement,\n  consequent: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ImportDefaultSpecifier = {\n  type: 'ImportDefaultSpecifier',\n  _ImportDefaultSpecifier?: void,\n  local: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ImportNamespaceSpecifier = {\n  type: 'ImportNamespaceSpecifier',\n  _ImportNamespaceSpecifier?: void,\n  local: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ImportDeclaration = {\n  type: 'ImportDeclaration',\n  _ImportDeclaration?: void,\n  specifiers: Array<Node>,\n  source: Literal,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ImportSpecifier = {\n  type: 'ImportSpecifier',\n  _ImportSpecifier?: void,\n  imported: Node,\n  local: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type LabeledStatement = {\n  type: 'LabeledStatement',\n  _LabeledStatement?: void,\n  body: Statement,\n  label: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Literal = {\n  type: 'Literal',\n  _Literal?: void,\n  raw: string,\n  regex: ?{pattern: string, flags: string},\n  value: ?(string | boolean | number | RegExp),\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\ntype LogicalOperator = '||' | '&&';\n\nexport type LogicalExpression = {\n  type: 'LogicalExpression',\n  _LogicalExpression?: void,\n  left: Expression,\n  operator: LogicalOperator,\n  right: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type MemberExpression = {\n  type: 'MemberExpression',\n  _MemberExpression?: void,\n  computed: boolean,\n  object: Expression,\n  property: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type MetaProperty = {\n  type: 'MetaProperty',\n  _MetaProperty?: void,\n  meta: Node,\n  property: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type MethodDefinition = {\n  type: 'MethodDefinition',\n  _MethodDefinition?: void,\n  computed: boolean,\n  key: Node,\n  kind: 'constructor' | 'method' | 'get' | 'set',\n  static: boolean,\n  value: FunctionExpression,\n  decorators: ?Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type NewExpression = {\n  type: 'NewExpression',\n  _NewExpression?: void,\n  arguments: Array<Node>,\n  callee: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Noop = {\n  type: 'Noop',\n  _Noop?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ObjectExpression = {\n  type: 'ObjectExpression',\n  _ObjectExpression?: void,\n  properties: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ObjectPattern = {\n  type: 'ObjectPattern',\n  _ObjectPattern?: void,\n  properties: Array<Node>,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Program = {\n  type: 'Program',\n  _Program?: void,\n  body: Array<Statement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Property = {\n  type: 'Property',\n  _Property?: void,\n  computed: boolean,\n  key: Node,\n  kind: 'init' | 'get' | 'set',\n  method: boolean,\n  shorthand: boolean,\n  value: Node,\n  decorators: ?Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type RestElement = {\n  type: 'RestElement',\n  _RestElement?: void,\n  argument: Pattern,\n  typeAnnotation: ?TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ReturnStatement = {\n  type: 'ReturnStatement',\n  _ReturnStatement?: void,\n  argument: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type SequenceExpression = {\n  type: 'SequenceExpression',\n  _SequenceExpression?: void,\n  expression: Array<Expression>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type SpreadElement = {\n  type: 'SpreadElement',\n  _SpreadElement?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type SpreadProperty = {\n  type: 'SpreadProperty',\n  _SpreadProperty?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type Super = {\n  type: 'Super',\n  _Super?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type SwitchCase = {\n  type: 'SwitchCase',\n  _SwitchCase?: void,\n  consequent: Array<Statement>,\n  test: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type SwitchStatement = {\n  type: 'SwitchStatement',\n  _SwitchStatement?: void,\n  cases: Array<SwitchCase>,\n  discriminant: Expression,\n  lexical: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TaggedTemplateExpression = {\n  type: 'TaggedTemplateExpression',\n  _TaggedTemplateExpression?: void,\n  quasi: TemplateLiteral,\n  tag: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TemplateElement = {\n  type: 'TemplateElement',\n  _TemplateElement?: void,\n  tail: boolean,\n  value: {cooked: string, raw: string},\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TemplateLiteral = {\n  type: 'TemplateLiteral',\n  _TemplateLiteral?: void,\n  expressions: Array<Expression>,\n  quasis: Array<TemplateElement>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ThisExpression = {\n  type: 'ThisExpression',\n  _ThisExpression?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ThrowStatement = {\n  type: 'ThrowStatement',\n  _ThrowStatement?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TryStatement = {\n  type: 'TryStatement',\n  _TryStatement?: void,\n  block: BlockStatement,\n  finalizer: ?BlockStatement,\n  guardedHandlers: Array<CatchClause>,\n  handler: ?CatchClause,\n  handlers: ?Array<CatchClause>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\ntype UnaryOperator = '-' | '+' | '!' | '~' | 'typeof' | 'void' | 'delete';\n\nexport type UnaryExpression = {\n  type: 'UnaryExpression',\n  _UnaryExpression?: void,\n  argument: Expression,\n  operator: UnaryOperator,\n  prefix: true,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\ntype UpdateOperator = '++' | '--';\n\nexport type UpdateExpression = {\n  type: 'UpdateExpression',\n  _UpdateExpression?: void,\n  argument: Expression,\n  operator: UpdateOperator,\n  prefix: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type VariableDeclaration = {\n  type: 'VariableDeclaration',\n  _VariableDeclaration?: void,\n  declarations: Array<VariableDeclarator>,\n  kind: 'var' | 'let' | 'const',\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type VariableDeclarator = {\n  type: 'VariableDeclarator',\n  _VariableDeclarator?: void,\n  id: Pattern,\n  init: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type WhileStatement = {\n  type: 'WhileStatement',\n  _WhileStatement?: void,\n  body: Statement,\n  test: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type WithStatement = {\n  type: 'WithStatement',\n  _WithStatement?: void,\n  body: Statement,\n  object: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type YieldExpression = {\n  type: 'YieldExpression',\n  _YieldExpression?: void,\n  argument: ?Expression,\n  delegate: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ExportAllDeclaration = {\n  type: 'ExportAllDeclaration',\n  _ExportAllDeclaration?: void,\n  exported: Node,\n  source: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ExportDefaultDeclaration = {\n  type: 'ExportDefaultDeclaration',\n  _ExportDefaultDeclaration?: void,\n  declaration: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ExportNamedDeclaration = {\n  type: 'ExportNamedDeclaration',\n  _ExportNamedDeclaration?: void,\n  declaration: Node,\n  source: Literal,\n  specifiers: Array<Node>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ExportDefaultSpecifier = {\n  type: 'ExportDefaultSpecifier',\n  _ExportDefaultSpecifier?: void,\n  exported: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ExportNamespaceSpecifier = {\n  type: 'ExportNamespaceSpecifier',\n  _ExportNamespaceSpecifier?: void,\n  exported: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type ExportSpecifier = {\n  type: 'ExportSpecifier',\n  _ExportSpecifier?: void,\n  local: Node,\n  exported: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type AnyTypeAnnotation = {\n  type: 'AnyTypeAnnotation',\n  _AnyTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ArrayTypeAnnotation = {\n  type: 'ArrayTypeAnnotation',\n  _ArrayTypeAnnotation?: void,\n  elementType: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type BooleanLiteralTypeAnnotation = {\n  type: 'BooleanLiteralTypeAnnotation',\n  _BooleanLiteralTypeAnnotation?: void,\n  raw: string,\n  value: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type BooleanTypeAnnotation = {\n  type: 'BooleanTypeAnnotation',\n  _BooleanTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ClassImplements = {\n  type: 'ClassImplements',\n  _ClassImplements?: void,\n  id: Identifier,\n  typeParameters: ?TypeParameterInstantiation,\n  superClass: ?Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ClassProperty = {\n  type: 'ClassProperty',\n  _ClassProperty?: void,\n  computed: boolean,\n  key: Node,\n  static: boolean,\n  typeAnnotation: ?TypeAnnotation,\n  value: ?Expression,\n  decorators: Array<Decorator>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type DeclareClass = {\n  type: 'DeclareClass',\n  _DeclareClass?: void,\n  body: ObjectTypeAnnotation,\n  extends: Array<InterfaceExtends>,\n  id: Identifier,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type DeclareFunction = {\n  type: 'DeclareFunction',\n  _DeclareFunction?: void,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type DeclareModule = {\n  type: 'DeclareModule',\n  _DeclareModule?: void,\n  body: BlockStatement,\n  id: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\n// TODO: Make this correct.\nexport type DeclareVariable = {\n  type: 'DeclareVariable',\n  _DeclareVariable?: void,\n  id: Identifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type FunctionTypeAnnotation = {\n  type: 'FunctionTypeAnnotation',\n  _FunctionTypeAnnotation?: void,\n  params: Array<FunctionTypeParam>,\n  rest: ?FunctionTypeParam,\n  returnType: Type,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type FunctionTypeParam = {\n  type: 'FunctionTypeParam',\n  _FunctionTypeParam?: void,\n  name: Identifier,\n  optional: boolean,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type GenericTypeAnnotation = {\n  type: 'GenericTypeAnnotation',\n  _GenericTypeAnnotation?: void,\n  id: Node,\n  typeParameters: ?TypeParameterInstantiation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type InterfaceExtends = {\n  type: 'InterfaceExtends',\n  _InterfaceExtends?: void,\n  id: Identifier,\n  typeParameters: ?TypeParameterInstantiation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type InterfaceDeclaration = {\n  type: 'InterfaceDeclaration',\n  _InterfaceDeclaration?: void,\n  body: ObjectTypeAnnotation,\n  extends: Array<InterfaceExtends>,\n  id: Identifier,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type IntersectionTypeAnnotation = {\n  type: 'IntersectionTypeAnnotation',\n  _IntersectionTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type MixedTypeAnnotation = {\n  type: 'MixedTypeAnnotation',\n  _MixedTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type NullableTypeAnnotation = {\n  type: 'NullableTypeAnnotation',\n  _NullableTypeAnnotation?: void,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type NumberLiteralTypeAnnotation = {\n  type: 'NumberLiteralTypeAnnotation',\n  _NumberLiteralTypeAnnotation?: void,\n  raw: string,\n  value: number,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type NumberTypeAnnotation = {\n  type: 'NumberTypeAnnotation',\n  _NumberTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type StringLiteralTypeAnnotation = {\n  type: 'StringLiteralTypeAnnotation',\n  _StringLiteralTypeAnnotation?: void,\n  raw: string,\n  value: string,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type StringTypeAnnotation = {\n  type: 'StringTypeAnnotation',\n  _StringTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TupleTypeAnnotation = {\n  type: 'TupleTypeAnnotation',\n  _TupleTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TypeofTypeAnnotation = {\n  type: 'TypeofTypeAnnotation',\n  _TypeofTypeAnnotation?: void,\n  argument: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TypeAlias = {\n  type: 'TypeAlias',\n  _TypeAlias?: void,\n  id: Identifier,\n  right: Type,\n  typeParameters: ?TypeParameterDeclaration,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TypeAnnotation = {\n  type: 'TypeAnnotation',\n  _TypeAnnotation?: void,\n  typeAnnotation: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TypeCastExpression = {\n  type: 'TypeCastExpression',\n  _TypeCastExpression?: void,\n  expression: Expression,\n  typeAnnotation: TypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TypeParameterDeclaration = {\n  type: 'TypeParameterDeclaration',\n  _TypeParameterDeclaration?: void,\n  params: Array<Identifier>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type TypeParameterInstantiation = {\n  type: 'TypeParameterInstantiation',\n  _TypeParameterInstantiation?: void,\n  params: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ObjectTypeAnnotation = {\n  type: 'ObjectTypeAnnotation',\n  _ObjectTypeAnnotation?: void,\n  callProperties: Array<ObjectTypeCallProperty>,\n  indexers: Array<ObjectTypeIndexer>,\n  properties: Array<ObjectTypeProperty>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ObjectTypeCallProperty = {\n  type: 'ObjectTypeCallProperty',\n  _ObjectTypeCallProperty?: void,\n  static: boolean,\n  value: FunctionTypeAnnotation,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ObjectTypeIndexer = {\n  type: 'ObjectTypeIndexer',\n  _ObjectTypeIndexer?: void,\n  id: Identifier,\n  key: Type,\n  value: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type ObjectTypeProperty = {\n  type: 'ObjectTypeProperty',\n  _ObjectTypeProperty?: void,\n  key: Node,\n  optional: boolean,\n  value: Type,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type QualifiedTypeIdentifier = {\n  type: 'QualifiedTypeIdentifier',\n  _QualifiedTypeIdentifier?: void,\n  id: Identifier,\n  qualification: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type UnionTypeAnnotation = {\n  type: 'UnionTypeAnnotation',\n  _UnionTypeAnnotation?: void,\n  types: Array<Type>,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type VoidTypeAnnotation = {\n  type: 'VoidTypeAnnotation',\n  _VoidTypeAnnotation?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXAttribute = {\n  type: 'JSXAttribute',\n  _JSXAttribute?: void,\n  name: Node,\n  value: ?Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXClosingElement = {\n  type: 'JSXClosingElement',\n  _JSXClosingElement?: void,\n  name: Node,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXElement = {\n  type: 'JSXElement',\n  _JSXElement?: void,\n  children: Array<Node>,\n  closingElement: ?JSXClosingElement,\n  openingElement: JSXOpeningElement,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXEmptyExpression = {\n  type: 'JSXEmptyExpression',\n  _JSXEmptyExpression?: void,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXExpressionContainer = {\n  type: 'JSXExpressionContainer',\n  _JSXExpressionContainer?: void,\n  expression: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXIdentifier = {\n  type: 'JSXIdentifier',\n  _JSXIdentifier?: void,\n  name: string,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXMemberExpression = {\n  type: 'JSXMemberExpression',\n  _JSXMemberExpression?: void,\n  computed: boolean,\n  object: Node,\n  property: JSXIdentifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXNamespacedName = {\n  type: 'JSXNamespacedName',\n  _JSXNamespacedName?: void,\n  name: JSXIdentifier,\n  namespace: JSXIdentifier,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXOpeningElement = {\n  type: 'JSXOpeningElement',\n  _JSXOpeningElement?: void,\n  attributes: Array<Node>,\n  name: Array<Node>,\n  selfClosing: boolean,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n\nexport type JSXSpreadAttribute = {\n  type: 'JSXSpreadAttribute',\n  _JSXSpreadAttribute?: void,\n  argument: Expression,\n  end: number,\n  innerComments: ?Array<Comment>,\n  leadingComments: ?Array<Comment>,\n  loc: {\n    end: {column: number, line: number},\n    start: {column: number, line: number},\n  },\n  start: number,\n  trailingComments: ?Array<Comment>,\n};\n"
        }
    ]
}