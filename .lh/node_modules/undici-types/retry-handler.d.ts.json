{
    "sourceFile": "node_modules/undici-types/retry-handler.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893087397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Dispatcher from \"./dispatcher\";\n\nexport default RetryHandler;\n\ndeclare class RetryHandler implements Dispatcher.DispatchHandlers {\n  constructor(\n    options: Dispatcher.DispatchOptions & {\n      retryOptions?: RetryHandler.RetryOptions;\n    },\n    retryHandlers: RetryHandler.RetryHandlers\n  );\n}\n\ndeclare namespace RetryHandler {\n  export type RetryState = { counter: number; };\n\n  export type RetryContext = {\n    state: RetryState;\n    opts: Dispatcher.DispatchOptions & {\n      retryOptions?: RetryHandler.RetryOptions;\n    };\n  }\n\n  export type OnRetryCallback = (result?: Error | null) => void;\n\n  export type RetryCallback = (\n    err: Error,\n    context: {\n      state: RetryState;\n      opts: Dispatcher.DispatchOptions & {\n        retryOptions?: RetryHandler.RetryOptions;\n      };\n    },\n    callback: OnRetryCallback\n  ) => number | null;\n\n  export interface RetryOptions {\n    /**\n     * Callback to be invoked on every retry iteration.\n     * It receives the error, current state of the retry object and the options object\n     * passed when instantiating the retry handler.\n     *\n     * @type {RetryCallback}\n     * @memberof RetryOptions\n     */\n    retry?: RetryCallback;\n    /**\n     * Maximum number of retries to allow.\n     *\n     * @type {number}\n     * @memberof RetryOptions\n     * @default 5\n     */\n    maxRetries?: number;\n    /**\n     * Max number of milliseconds allow between retries\n     *\n     * @type {number}\n     * @memberof RetryOptions\n     * @default 30000\n     */\n    maxTimeout?: number;\n    /**\n     * Initial number of milliseconds to wait before retrying for the first time.\n     *\n     * @type {number}\n     * @memberof RetryOptions\n     * @default 500\n     */\n    minTimeout?: number;\n    /**\n     * Factior to multiply the timeout factor between retries.\n     *\n     * @type {number}\n     * @memberof RetryOptions\n     * @default 2\n     */\n    timeoutFactor?: number;\n    /**\n     * It enables to automatically infer timeout between retries based on the `Retry-After` header.\n     *\n     * @type {boolean}\n     * @memberof RetryOptions\n     * @default true\n     */\n    retryAfter?: boolean;\n    /**\n     * HTTP methods to retry.\n     *\n     * @type {Dispatcher.HttpMethod[]}\n     * @memberof RetryOptions\n     * @default ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],\n     */\n    methods?: Dispatcher.HttpMethod[];\n    /**\n     * Error codes to be retried. e.g. `ECONNRESET`, `ENOTFOUND`, `ETIMEDOUT`, `ECONNREFUSED`, etc.\n     *\n     * @type {string[]}\n     * @default ['ECONNRESET','ECONNREFUSED','ENOTFOUND','ENETDOWN','ENETUNREACH','EHOSTDOWN','EHOSTUNREACH','EPIPE']\n     */\n    errorCodes?: string[];\n    /**\n     * HTTP status codes to be retried.\n     *\n     * @type {number[]}\n     * @memberof RetryOptions\n     * @default [500, 502, 503, 504, 429],\n     */\n    statusCodes?: number[];\n  }\n\n  export interface RetryHandlers {\n    dispatch: Dispatcher[\"dispatch\"];\n    handler: Dispatcher.DispatchHandlers;\n  }\n}\n"
        }
    ]
}