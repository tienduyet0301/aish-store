{
    "sourceFile": "node_modules/undici-types/mock-agent.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893086219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Agent from './agent'\nimport Dispatcher from './dispatcher'\nimport { Interceptable, MockInterceptor } from './mock-interceptor'\nimport MockDispatch = MockInterceptor.MockDispatch;\n\nexport default MockAgent\n\ninterface PendingInterceptor extends MockDispatch {\n  origin: string;\n}\n\n/** A mocked Agent class that implements the Agent API. It allows one to intercept HTTP requests made through undici and return mocked responses instead. */\ndeclare class MockAgent<TMockAgentOptions extends MockAgent.Options = MockAgent.Options> extends Dispatcher {\n  constructor(options?: MockAgent.Options)\n  /** Creates and retrieves mock Dispatcher instances which can then be used to intercept HTTP requests. If the number of connections on the mock agent is set to 1, a MockClient instance is returned. Otherwise a MockPool instance is returned. */\n  get<TInterceptable extends Interceptable>(origin: string): TInterceptable;\n  get<TInterceptable extends Interceptable>(origin: RegExp): TInterceptable;\n  get<TInterceptable extends Interceptable>(origin: ((origin: string) => boolean)): TInterceptable;\n  /** Dispatches a mocked request. */\n  dispatch(options: Agent.DispatchOptions, handler: Dispatcher.DispatchHandlers): boolean;\n  /** Closes the mock agent and waits for registered mock pools and clients to also close before resolving. */\n  close(): Promise<void>;\n  /** Disables mocking in MockAgent. */\n  deactivate(): void;\n  /** Enables mocking in a MockAgent instance. When instantiated, a MockAgent is automatically activated. Therefore, this method is only effective after `MockAgent.deactivate` has been called. */\n  activate(): void;\n  /** Define host matchers so only matching requests that aren't intercepted by the mock dispatchers will be attempted. */\n  enableNetConnect(): void;\n  enableNetConnect(host: string): void;\n  enableNetConnect(host: RegExp): void;\n  enableNetConnect(host: ((host: string) => boolean)): void;\n  /** Causes all requests to throw when requests are not matched in a MockAgent intercept. */\n  disableNetConnect(): void;\n  pendingInterceptors(): PendingInterceptor[];\n  assertNoPendingInterceptors(options?: {\n    pendingInterceptorsFormatter?: PendingInterceptorsFormatter;\n  }): void;\n}\n\ninterface PendingInterceptorsFormatter {\n  format(pendingInterceptors: readonly PendingInterceptor[]): string;\n}\n\ndeclare namespace MockAgent {\n  /** MockAgent options. */\n  export interface Options extends Agent.Options {\n    /** A custom agent to be encapsulated by the MockAgent. */\n    agent?: Agent;\n  }\n}\n"
        }
    ]
}