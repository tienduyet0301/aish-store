{
    "sourceFile": "node_modules/undici-types/errors.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893082551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { IncomingHttpHeaders } from \"./header\";\nimport Client from './client'\n\nexport default Errors\n\ndeclare namespace Errors {\n  export class UndiciError extends Error {\n    name: string;\n    code: string;\n  }\n\n  /** Connect timeout error. */\n  export class ConnectTimeoutError extends UndiciError {\n    name: 'ConnectTimeoutError';\n    code: 'UND_ERR_CONNECT_TIMEOUT';\n  }\n\n  /** A header exceeds the `headersTimeout` option. */\n  export class HeadersTimeoutError extends UndiciError {\n    name: 'HeadersTimeoutError';\n    code: 'UND_ERR_HEADERS_TIMEOUT';\n  }\n\n  /** Headers overflow error. */\n  export class HeadersOverflowError extends UndiciError {\n    name: 'HeadersOverflowError'\n    code: 'UND_ERR_HEADERS_OVERFLOW'\n  }\n\n  /** A body exceeds the `bodyTimeout` option. */\n  export class BodyTimeoutError extends UndiciError {\n    name: 'BodyTimeoutError';\n    code: 'UND_ERR_BODY_TIMEOUT';\n  }\n\n  export class ResponseStatusCodeError extends UndiciError {\n    constructor (\n      message?: string,\n      statusCode?: number,\n      headers?: IncomingHttpHeaders | string[] | null,\n      body?: null | Record<string, any> | string\n    );\n    name: 'ResponseStatusCodeError';\n    code: 'UND_ERR_RESPONSE_STATUS_CODE';\n    body: null | Record<string, any> | string\n    status: number\n    statusCode: number\n    headers: IncomingHttpHeaders | string[] | null;\n  }\n\n  /** Passed an invalid argument. */\n  export class InvalidArgumentError extends UndiciError {\n    name: 'InvalidArgumentError';\n    code: 'UND_ERR_INVALID_ARG';\n  }\n\n  /** Returned an invalid value. */\n  export class InvalidReturnValueError extends UndiciError {\n    name: 'InvalidReturnValueError';\n    code: 'UND_ERR_INVALID_RETURN_VALUE';\n  }\n\n  /** The request has been aborted by the user. */\n  export class RequestAbortedError extends UndiciError {\n    name: 'AbortError';\n    code: 'UND_ERR_ABORTED';\n  }\n\n  /** Expected error with reason. */\n  export class InformationalError extends UndiciError {\n    name: 'InformationalError';\n    code: 'UND_ERR_INFO';\n  }\n\n  /** Request body length does not match content-length header. */\n  export class RequestContentLengthMismatchError extends UndiciError {\n    name: 'RequestContentLengthMismatchError';\n    code: 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';\n  }\n\n  /** Response body length does not match content-length header. */\n  export class ResponseContentLengthMismatchError extends UndiciError {\n    name: 'ResponseContentLengthMismatchError';\n    code: 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';\n  }\n\n  /** Trying to use a destroyed client. */\n  export class ClientDestroyedError extends UndiciError {\n    name: 'ClientDestroyedError';\n    code: 'UND_ERR_DESTROYED';\n  }\n\n  /** Trying to use a closed client. */\n  export class ClientClosedError extends UndiciError {\n    name: 'ClientClosedError';\n    code: 'UND_ERR_CLOSED';\n  }\n\n  /** There is an error with the socket. */\n  export class SocketError extends UndiciError {\n    name: 'SocketError';\n    code: 'UND_ERR_SOCKET';\n    socket: Client.SocketInfo | null\n  }\n\n  /** Encountered unsupported functionality. */\n  export class NotSupportedError extends UndiciError {\n    name: 'NotSupportedError';\n    code: 'UND_ERR_NOT_SUPPORTED';\n  }\n\n  /** No upstream has been added to the BalancedPool. */\n  export class BalancedPoolMissingUpstreamError extends UndiciError {\n    name: 'MissingUpstreamError';\n    code: 'UND_ERR_BPL_MISSING_UPSTREAM';\n  }\n\n  export class HTTPParserError extends UndiciError {\n    name: 'HTTPParserError';\n    code: string;\n  }\n\n  /** The response exceed the length allowed. */\n  export class ResponseExceededMaxSizeError extends UndiciError {\n    name: 'ResponseExceededMaxSizeError';\n    code: 'UND_ERR_RES_EXCEEDED_MAX_SIZE';\n  }\n\n  export class RequestRetryError extends UndiciError {\n    constructor (\n      message: string,\n      statusCode: number,\n      headers?: IncomingHttpHeaders | string[] | null,\n      body?: null | Record<string, any> | string\n    );\n    name: 'RequestRetryError';\n    code: 'UND_ERR_REQ_RETRY';\n    statusCode: number;\n    data: {\n      count: number;\n    };\n    headers: Record<string, string | string[]>;\n  }\n\n  export class SecureProxyConnectionError extends UndiciError {\n    name: 'SecureProxyConnectionError';\n    code: 'UND_ERR_PRX_TLS';\n  }\n}\n"
        }
    ]
}