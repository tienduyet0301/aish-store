{
    "sourceFile": "node_modules/undici-types/client.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893080808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { URL } from 'url'\nimport { TlsOptions } from 'tls'\nimport Dispatcher from './dispatcher'\nimport buildConnector from \"./connector\";\n\ntype ClientConnectOptions = Omit<Dispatcher.ConnectOptions, \"origin\">;\n\n/**\n * A basic HTTP/1.1 client, mapped on top a single TCP/TLS connection. Pipelining is disabled by default.\n */\nexport class Client extends Dispatcher {\n  constructor(url: string | URL, options?: Client.Options);\n  /** Property to get and set the pipelining factor. */\n  pipelining: number;\n  /** `true` after `client.close()` has been called. */\n  closed: boolean;\n  /** `true` after `client.destroyed()` has been called or `client.close()` has been called and the client shutdown has completed. */\n  destroyed: boolean;\n\n  // Override dispatcher APIs.\n  override connect(\n    options: ClientConnectOptions\n  ): Promise<Dispatcher.ConnectData>;\n  override connect(\n    options: ClientConnectOptions,\n    callback: (err: Error | null, data: Dispatcher.ConnectData) => void\n  ): void;\n}\n\nexport declare namespace Client {\n  export interface OptionsInterceptors {\n    Client: readonly Dispatcher.DispatchInterceptor[];\n  }\n  export interface Options {\n    /** TODO */\n    interceptors?: OptionsInterceptors;\n    /** The maximum length of request headers in bytes. Default: Node.js' `--max-http-header-size` or `16384` (16KiB). */\n    maxHeaderSize?: number;\n    /** The amount of time, in milliseconds, the parser will wait to receive the complete HTTP headers (Node 14 and above only). Default: `300e3` milliseconds (300s). */\n    headersTimeout?: number;\n    /** @deprecated unsupported socketTimeout, use headersTimeout & bodyTimeout instead */\n    socketTimeout?: never;\n    /** @deprecated unsupported requestTimeout, use headersTimeout & bodyTimeout instead */\n    requestTimeout?: never;\n    /** TODO */\n    connectTimeout?: number;\n    /** The timeout after which a request will time out, in milliseconds. Monitors time between receiving body data. Use `0` to disable it entirely. Default: `300e3` milliseconds (300s). */\n    bodyTimeout?: number;\n    /** @deprecated unsupported idleTimeout, use keepAliveTimeout instead */\n    idleTimeout?: never;\n    /** @deprecated unsupported keepAlive, use pipelining=0 instead */\n    keepAlive?: never;\n    /** the timeout, in milliseconds, after which a socket without active requests will time out. Monitors time between activity on a connected socket. This value may be overridden by *keep-alive* hints from the server. Default: `4e3` milliseconds (4s). */\n    keepAliveTimeout?: number;\n    /** @deprecated unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead */\n    maxKeepAliveTimeout?: never;\n    /** the maximum allowed `idleTimeout`, in milliseconds, when overridden by *keep-alive* hints from the server. Default: `600e3` milliseconds (10min). */\n    keepAliveMaxTimeout?: number;\n    /** A number of milliseconds subtracted from server *keep-alive* hints when overriding `idleTimeout` to account for timing inaccuracies caused by e.g. transport latency. Default: `1e3` milliseconds (1s). */\n    keepAliveTimeoutThreshold?: number;\n    /** TODO */\n    socketPath?: string;\n    /** The amount of concurrent requests to be sent over the single TCP/TLS connection according to [RFC7230](https://tools.ietf.org/html/rfc7230#section-6.3.2). Default: `1`. */\n    pipelining?: number;\n    /** @deprecated use the connect option instead */\n    tls?: never;\n    /** If `true`, an error is thrown when the request content-length header doesn't match the length of the request body. Default: `true`. */\n    strictContentLength?: boolean;\n    /** TODO */\n    maxCachedSessions?: number;\n    /** TODO */\n    maxRedirections?: number;\n    /** TODO */\n    connect?: buildConnector.BuildOptions | buildConnector.connector;\n    /** TODO */\n    maxRequestsPerClient?: number;\n    /** TODO */\n    localAddress?: string;\n    /** Max response body size in bytes, -1 is disabled */\n    maxResponseSize?: number;\n    /** Enables a family autodetection algorithm that loosely implements section 5 of RFC 8305. */\n    autoSelectFamily?: boolean;\n    /** The amount of time in milliseconds to wait for a connection attempt to finish before trying the next address when using the `autoSelectFamily` option. */\n    autoSelectFamilyAttemptTimeout?: number;\n    /**\n     * @description Enables support for H2 if the server has assigned bigger priority to it through ALPN negotiation.\n     * @default false\n    */\n    allowH2?: boolean;\n    /**\n     * @description Dictates the maximum number of concurrent streams for a single H2 session. It can be overridden by a SETTINGS remote frame.\n     * @default 100\n    */\n    maxConcurrentStreams?: number\n  }\n  export interface SocketInfo {\n    localAddress?: string\n    localPort?: number\n    remoteAddress?: string\n    remotePort?: number\n    remoteFamily?: string\n    timeout?: number\n    bytesWritten?: number\n    bytesRead?: number\n  }\n}\n\nexport default Client;\n"
        }
    ]
}