{
    "sourceFile": "node_modules/undici-types/pool.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893086888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import Client from './client'\nimport TPoolStats from './pool-stats'\nimport { URL } from 'url'\nimport Dispatcher from \"./dispatcher\";\n\nexport default Pool\n\ntype PoolConnectOptions = Omit<Dispatcher.ConnectOptions, \"origin\">;\n\ndeclare class Pool extends Dispatcher {\n  constructor(url: string | URL, options?: Pool.Options)\n  /** `true` after `pool.close()` has been called. */\n  closed: boolean;\n  /** `true` after `pool.destroyed()` has been called or `pool.close()` has been called and the pool shutdown has completed. */\n  destroyed: boolean;\n  /** Aggregate stats for a Pool. */\n  readonly stats: TPoolStats;\n\n  // Override dispatcher APIs.\n  override connect(\n    options: PoolConnectOptions\n  ): Promise<Dispatcher.ConnectData>;\n  override connect(\n    options: PoolConnectOptions,\n    callback: (err: Error | null, data: Dispatcher.ConnectData) => void\n  ): void;\n}\n\ndeclare namespace Pool {\n  export type PoolStats = TPoolStats;\n  export interface Options extends Client.Options {\n    /** Default: `(origin, opts) => new Client(origin, opts)`. */\n    factory?(origin: URL, opts: object): Dispatcher;\n    /** The max number of clients to create. `null` if no limit. Default `null`. */\n    connections?: number | null;\n\n    interceptors?: { Pool?: readonly Dispatcher.DispatchInterceptor[] } & Client.Options[\"interceptors\"]\n  }\n}\n"
        }
    ]
}