{
    "sourceFile": "node_modules/undici-types/webidl.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893087633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// These types are not exported, and are only used internally\n\n/**\n * Take in an unknown value and return one that is of type T\n */\ntype Converter<T> = (object: unknown) => T\n\ntype SequenceConverter<T> = (object: unknown, iterable?: IterableIterator<T>) => T[]\n\ntype RecordConverter<K extends string, V> = (object: unknown) => Record<K, V>\n\ninterface ConvertToIntOpts {\n  clamp?: boolean\n  enforceRange?: boolean\n}\n\ninterface WebidlErrors {\n  exception (opts: { header: string, message: string }): TypeError\n  /**\n   * @description Throw an error when conversion from one type to another has failed\n   */\n  conversionFailed (opts: {\n    prefix: string\n    argument: string\n    types: string[]\n  }): TypeError\n  /**\n   * @description Throw an error when an invalid argument is provided\n   */\n  invalidArgument (opts: {\n    prefix: string\n    value: string\n    type: string\n  }): TypeError\n}\n\ninterface WebidlUtil {\n  /**\n   * @see https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\n   */\n  Type (object: unknown):\n    | 'Undefined'\n    | 'Boolean'\n    | 'String'\n    | 'Symbol'\n    | 'Number'\n    | 'BigInt'\n    | 'Null'\n    | 'Object'\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\n   */\n  ConvertToInt (\n    V: unknown,\n    bitLength: number,\n    signedness: 'signed' | 'unsigned',\n    opts?: ConvertToIntOpts\n  ): number\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\n   */\n  IntegerPart (N: number): number\n\n  /**\n   * Stringifies {@param V}\n   */\n  Stringify (V: any): string\n\n  /**\n   * Mark a value as uncloneable for Node.js.\n   * This is only effective in some newer Node.js versions.\n   */\n  markAsUncloneable (V: any): void\n}\n\ninterface WebidlConverters {\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-DOMString\n   */\n  DOMString (V: unknown, prefix: string, argument: string, opts?: {\n    legacyNullToEmptyString: boolean\n  }): string\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-ByteString\n   */\n  ByteString (V: unknown, prefix: string, argument: string): string\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-USVString\n   */\n  USVString (V: unknown): string\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-boolean\n   */\n  boolean (V: unknown): boolean\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-any\n   */\n  any <Value>(V: Value): Value\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-long-long\n   */\n  ['long long'] (V: unknown): number\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-unsigned-long-long\n   */\n  ['unsigned long long'] (V: unknown): number\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-unsigned-long\n   */\n  ['unsigned long'] (V: unknown): number\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-unsigned-short\n   */\n  ['unsigned short'] (V: unknown, opts?: ConvertToIntOpts): number\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#idl-ArrayBuffer\n   */\n  ArrayBuffer (V: unknown): ArrayBufferLike\n  ArrayBuffer (V: unknown, opts: { allowShared: false }): ArrayBuffer\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-buffer-source-types\n   */\n  TypedArray (\n    V: unknown,\n    TypedArray: NodeJS.TypedArray | ArrayBufferLike\n  ): NodeJS.TypedArray | ArrayBufferLike\n  TypedArray (\n    V: unknown,\n    TypedArray: NodeJS.TypedArray | ArrayBufferLike,\n    opts?: { allowShared: false }\n  ): NodeJS.TypedArray | ArrayBuffer\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-buffer-source-types\n   */\n  DataView (V: unknown, opts?: { allowShared: boolean }): DataView\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#BufferSource\n   */\n  BufferSource (\n    V: unknown,\n    opts?: { allowShared: boolean }\n  ): NodeJS.TypedArray | ArrayBufferLike | DataView\n\n  ['sequence<ByteString>']: SequenceConverter<string>\n  \n  ['sequence<sequence<ByteString>>']: SequenceConverter<string[]>\n\n  ['record<ByteString, ByteString>']: RecordConverter<string, string>\n\n  [Key: string]: (...args: any[]) => unknown\n}\n\nexport interface Webidl {\n  errors: WebidlErrors\n  util: WebidlUtil\n  converters: WebidlConverters\n\n  /**\n   * @description Performs a brand-check on {@param V} to ensure it is a\n   * {@param cls} object.\n   */\n  brandCheck <Interface>(V: unknown, cls: Interface, opts?: { strict?: boolean }): asserts V is Interface\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-sequence\n   * @description Convert a value, V, to a WebIDL sequence type.\n   */\n  sequenceConverter <Type>(C: Converter<Type>): SequenceConverter<Type>\n\n  illegalConstructor (): never\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#es-to-record\n   * @description Convert a value, V, to a WebIDL record type.\n   */\n  recordConverter <K extends string, V>(\n    keyConverter: Converter<K>,\n    valueConverter: Converter<V>\n  ): RecordConverter<K, V>\n\n  /**\n   * Similar to {@link Webidl.brandCheck} but allows skipping the check if third party\n   * interfaces are allowed.\n   */\n  interfaceConverter <Interface>(cls: Interface): (\n    V: unknown,\n    opts?: { strict: boolean }\n  ) => asserts V is typeof cls\n\n  // TODO(@KhafraDev): a type could likely be implemented that can infer the return type\n  // from the converters given?\n  /**\n   * Converts a value, V, to a WebIDL dictionary types. Allows limiting which keys are\n   * allowed, values allowed, optional and required keys. Auto converts the value to\n   * a type given a converter.\n   */\n  dictionaryConverter (converters: {\n    key: string,\n    defaultValue?: () => unknown,\n    required?: boolean,\n    converter: (...args: unknown[]) => unknown,\n    allowedValues?: unknown[]\n  }[]): (V: unknown) => Record<string, unknown>\n\n  /**\n   * @see https://webidl.spec.whatwg.org/#idl-nullable-type\n   * @description allows a type, V, to be null\n   */\n  nullableConverter <T>(\n    converter: Converter<T>\n  ): (V: unknown) => ReturnType<typeof converter> | null\n\n  argumentLengthCheck (args: { length: number }, min: number, context: string): void\n}\n"
        }
    ]
}