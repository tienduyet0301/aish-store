{
    "sourceFile": "node_modules/undici-types/agent.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893079871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { URL } from 'url'\nimport Pool from './pool'\nimport Dispatcher from \"./dispatcher\";\n\nexport default Agent\n\ndeclare class Agent extends Dispatcher{\n  constructor(opts?: Agent.Options)\n  /** `true` after `dispatcher.close()` has been called. */\n  closed: boolean;\n  /** `true` after `dispatcher.destroyed()` has been called or `dispatcher.close()` has been called and the dispatcher shutdown has completed. */\n  destroyed: boolean;\n  /** Dispatches a request. */\n  dispatch(options: Agent.DispatchOptions, handler: Dispatcher.DispatchHandlers): boolean;\n}\n\ndeclare namespace Agent {\n  export interface Options extends Pool.Options {\n    /** Default: `(origin, opts) => new Pool(origin, opts)`. */\n    factory?(origin: string | URL, opts: Object): Dispatcher;\n    /** Integer. Default: `0` */\n    maxRedirections?: number;\n\n    interceptors?: { Agent?: readonly Dispatcher.DispatchInterceptor[] } & Pool.Options[\"interceptors\"]\n  }\n\n  export interface DispatchOptions extends Dispatcher.DispatchOptions {\n    /** Integer. */\n    maxRedirections?: number;\n  }\n}\n"
        }
    ]
}