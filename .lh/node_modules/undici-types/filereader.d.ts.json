{
    "sourceFile": "node_modules/undici-types/filereader.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893083102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"node\" />\n\nimport { Blob } from 'buffer'\nimport { DOMException, EventInit } from './patch'\n\nexport declare class FileReader {\n  __proto__: EventTarget & FileReader\n\n  constructor ()\n\n  readAsArrayBuffer (blob: Blob): void\n  readAsBinaryString (blob: Blob): void\n  readAsText (blob: Blob, encoding?: string): void\n  readAsDataURL (blob: Blob): void\n\n  abort (): void\n\n  static readonly EMPTY = 0\n  static readonly LOADING = 1\n  static readonly DONE = 2\n\n  readonly EMPTY = 0\n  readonly LOADING = 1\n  readonly DONE = 2\n\n  readonly readyState: number\n\n  readonly result: string | ArrayBuffer | null\n\n  readonly error: DOMException | null\n\n  onloadstart: null | ((this: FileReader, event: ProgressEvent) => void)\n  onprogress: null | ((this: FileReader, event: ProgressEvent) => void)\n  onload: null | ((this: FileReader, event: ProgressEvent) => void)\n  onabort: null |  ((this: FileReader, event: ProgressEvent) => void)\n  onerror: null | ((this: FileReader, event: ProgressEvent) => void)\n  onloadend: null | ((this: FileReader, event: ProgressEvent) => void)\n}\n\nexport interface ProgressEventInit extends EventInit {\n  lengthComputable?: boolean\n  loaded?: number\n  total?: number\n}\n\nexport declare class ProgressEvent {\n  __proto__: Event & ProgressEvent\n\n  constructor (type: string, eventInitDict?: ProgressEventInit)\n\n  readonly lengthComputable: boolean\n  readonly loaded: number\n  readonly total: number\n}\n"
        }
    ]
}