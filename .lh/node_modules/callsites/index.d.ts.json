{
    "sourceFile": "node_modules/callsites/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892069802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare namespace callsites {\n\tinterface CallSite {\n\t\t/**\n\t\tReturns the value of `this`.\n\t\t*/\n\t\tgetThis(): unknown | undefined;\n\n\t\t/**\n\t\tReturns the type of `this` as a string. This is the name of the function stored in the constructor field of `this`, if available, otherwise the object's `[[Class]]` internal property.\n\t\t*/\n\t\tgetTypeName(): string | null;\n\n\t\t/**\n\t\tReturns the current function.\n\t\t*/\n\t\tgetFunction(): Function | undefined;\n\n\t\t/**\n\t\tReturns the name of the current function, typically its `name` property. If a name property is not available an attempt will be made to try to infer a name from the function's context.\n\t\t*/\n\t\tgetFunctionName(): string | null;\n\n\t\t/**\n\t\tReturns the name of the property of `this` or one of its prototypes that holds the current function.\n\t\t*/\n\t\tgetMethodName(): string | undefined;\n\n\t\t/**\n\t\tReturns the name of the script if this function was defined in a script.\n\t\t*/\n\t\tgetFileName(): string | null;\n\n\t\t/**\n\t\tReturns the current line number if this function was defined in a script.\n\t\t*/\n\t\tgetLineNumber(): number | null;\n\n\t\t/**\n\t\tReturns the current column number if this function was defined in a script.\n\t\t*/\n\t\tgetColumnNumber(): number | null;\n\n\t\t/**\n\t\tReturns a string representing the location where `eval` was called if this function was created using a call to `eval`.\n\t\t*/\n\t\tgetEvalOrigin(): string | undefined;\n\n\t\t/**\n\t\tReturns `true` if this is a top-level invocation, that is, if it's a global object.\n\t\t*/\n\t\tisToplevel(): boolean;\n\n\t\t/**\n\t\tReturns `true` if this call takes place in code defined by a call to `eval`.\n\t\t*/\n\t\tisEval(): boolean;\n\n\t\t/**\n\t\tReturns `true` if this call is in native V8 code.\n\t\t*/\n\t\tisNative(): boolean;\n\n\t\t/**\n\t\tReturns `true` if this is a constructor call.\n\t\t*/\n\t\tisConstructor(): boolean;\n\t}\n}\n\ndeclare const callsites: {\n\t/**\n\tGet callsites from the V8 stack trace API.\n\n\t@returns An array of `CallSite` objects.\n\n\t@example\n\t```\n\timport callsites = require('callsites');\n\n\tfunction unicorn() {\n\t\tconsole.log(callsites()[0].getFileName());\n\t\t//=> '/Users/sindresorhus/dev/callsites/test.js'\n\t}\n\n\tunicorn();\n\t```\n\t*/\n\t(): callsites.CallSite[];\n\n\t// TODO: Remove this for the next major release, refactor the whole definition to:\n\t// declare function callsites(): callsites.CallSite[];\n\t// export = callsites;\n\tdefault: typeof callsites;\n};\n\nexport = callsites;\n"
        }
    ]
}