{
    "sourceFile": "node_modules/unbox-primitive/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893079618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar whichBoxedPrimitive = require('which-boxed-primitive');\nvar callBound = require('call-bound');\nvar hasSymbols = require('has-symbols')();\nvar hasBigInts = require('has-bigints')();\n\nvar stringToString = callBound('String.prototype.toString');\nvar numberValueOf = callBound('Number.prototype.valueOf');\nvar booleanValueOf = callBound('Boolean.prototype.valueOf');\nvar symbolValueOf = hasSymbols && callBound('Symbol.prototype.valueOf');\nvar bigIntValueOf = hasBigInts && callBound('BigInt.prototype.valueOf');\n\n/** @type {import('.')} */\nmodule.exports = function unboxPrimitive(value) {\n\tvar which = whichBoxedPrimitive(value);\n\tif (typeof which !== 'string') {\n\t\tthrow new TypeError(which === null ? 'value is an unboxed primitive' : 'value is a non-boxed-primitive object');\n\t}\n\n\tif (which === 'String') {\n\t\treturn stringToString(value);\n\t}\n\tif (which === 'Number') {\n\t\treturn numberValueOf(value);\n\t}\n\tif (which === 'Boolean') {\n\t\treturn booleanValueOf(value);\n\t}\n\tif (which === 'Symbol') {\n\t\tif (!hasSymbols) {\n\t\t\tthrow new EvalError('somehow this environment does not have Symbols, but you have a boxed Symbol value. Please report this!');\n\t\t}\n\t\t// eslint-disable-next-line no-extra-parens\n\t\treturn /** @type {Exclude<typeof symbolValueOf, false>} */ (symbolValueOf)(value);\n\t}\n\tif (which === 'BigInt') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\treturn /** @type {Exclude<typeof bigIntValueOf, false>} */ (bigIntValueOf)(value);\n\t}\n\tthrow new RangeError('unknown boxed primitive found: ' + which);\n};\n"
        }
    ]
}