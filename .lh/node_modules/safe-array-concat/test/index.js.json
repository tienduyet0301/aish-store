{
    "sourceFile": "node_modules/safe-array-concat/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893017281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar mockProperty = require('mock-property');\nvar hasSymbols = require('has-symbols/shams')();\nvar isConcatSpreadable = hasSymbols && Symbol.isConcatSpreadable;\nvar species = hasSymbols && Symbol.species;\n\nvar boundFnsHaveConfigurableLengths = require('set-function-length/env').boundFnsHaveConfigurableLengths;\n\nvar safeConcat = require('../');\n\ntest('safe-array-concat', function (t) {\n\tt.equal(typeof safeConcat, 'function', 'is a function');\n\tt.equal(\n\t\tsafeConcat.length,\n\t\tboundFnsHaveConfigurableLengths ? 1 : 0,\n\t\t'has a length of ' + (boundFnsHaveConfigurableLengths ? 1 : '0 (function lengths are not configurable)')\n\t);\n\n\tt.deepEqual(\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tsafeConcat(/** @type {(string | number | number[])[]} */ ([1, 2]), [3, 4], 'foo', 5, 6, [[7]]),\n\t\t[1, 2, 3, 4, 'foo', 5, 6, [7]],\n\t\t'works with flat and nested arrays'\n\t);\n\n\tt.deepEqual(\n\t\tsafeConcat(undefined, 1, 2),\n\t\t[undefined, 1, 2],\n\t\t'first item as undefined is not the concat receiver, which would throw via ToObject'\n\t);\n\tt.deepEqual(\n\t\tsafeConcat(null, 1, 2),\n\t\t[null, 1, 2],\n\t\t'first item as null is not the concat receiver, which would throw via ToObject'\n\t);\n\n\tvar arr = [1, 2];\n\tarr.constructor = function C() {\n\t\treturn { args: arguments };\n\t};\n\tt.deepEqual(\n\t\tsafeConcat(arr, 3, 4),\n\t\t[1, 2, 3, 4],\n\t\t'first item as an array with a nonArray .constructor; ignores constructor'\n\t);\n\n\tt.test('has Symbol.species', { skip: !species }, function (st) {\n\t\tvar speciesArr = [1, 2];\n\t\t// @ts-expect-error ts(2740) TS's `constructor` type requires a function\n\t\tspeciesArr.constructor = {};\n\t\t// @ts-expect-error ts(2538) TS can't type narrow from tape's `skip`\n\t\tspeciesArr.constructor[species] = function Species() {\n\t\t\treturn { args: arguments };\n\t\t};\n\n\t\tst.deepEqual(\n\t\t\tsafeConcat(speciesArr, 3, 4),\n\t\t\t[1, 2, 3, 4],\n\t\t\t'first item as an array with a .constructor object with a Symbol.species; ignores constructor and species'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('has isConcatSpreadable', { skip: !isConcatSpreadable }, function (st) {\n\t\t// TS can't type narrow from tape's `skip`\n\t\tif (isConcatSpreadable) {\n\t\t\tst.teardown(mockProperty(\n\t\t\t\t// eslint-disable-next-line no-extra-parens\n\t\t\t\t/** @type {Record<PropertyKey, unknown>} */ (/** @type {unknown} */ (String.prototype)),\n\t\t\t\tisConcatSpreadable,\n\t\t\t\t{ value: true }\n\t\t\t));\n\n\t\t\tvar nonSpreadable = [1, 2];\n\t\t\t// @ts-expect-error ts(7015) TS can't handle expandos on an array\n\t\t\tnonSpreadable[isConcatSpreadable] = false;\n\n\t\t\tst.deepEqual(\n\t\t\t\tsafeConcat(nonSpreadable, 3, 4, 'foo', Object('bar')),\n\t\t\t\t[1, 2, 3, 4, 'foo', Object('bar')],\n\t\t\t\t'a non-concat-spreadable array is spreaded, and a concat-spreadable String is not spreaded'\n\t\t\t);\n\n\t\t\tst.teardown(mockProperty(Array.prototype, isConcatSpreadable, { value: false }));\n\n\t\t\tst.deepEqual(\n\t\t\t\tsafeConcat([1, 2], 3, 4, 'foo', Object('bar')),\n\t\t\t\t[1, 2, 3, 4, 'foo', Object('bar')],\n\t\t\t\t'all arrays marked non-concat-spreadable are still spreaded, and a concat-spreadable String is not spreaded'\n\t\t\t);\n\t\t}\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}