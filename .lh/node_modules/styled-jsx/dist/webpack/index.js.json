{
    "sourceFile": "node_modules/styled-jsx/dist/webpack/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893042624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var require$$0$1 = require('path');\nvar require$$1 = require('crypto');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);\nvar require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);\n\nfunction getAugmentedNamespace(n) {\n  var f = n.default;\n\tif (typeof f == \"function\") {\n\t\tvar a = function () {\n\t\t\treturn f.apply(this, arguments);\n\t\t};\n\t\ta.prototype = f.prototype;\n  } else a = {};\n  Object.defineProperty(a, '__esModule', {value: true});\n\tObject.keys(n).forEach(function (k) {\n\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\tenumerable: true,\n\t\t\tget: function () {\n\t\t\t\treturn n[k];\n\t\t\t}\n\t\t});\n\t});\n\treturn a;\n}\n\nvar lib$1 = {};\n\nvar lib = {exports: {}};\n\nvar parse$1 = {exports: {}};\n\nvar util = {};\n\nvar unicode$1 = {};\n\nObject.defineProperty(unicode$1, \"__esModule\", {\n    value: true\n});\nunicode$1.Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\nunicode$1.ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/;\nunicode$1.ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\nObject.defineProperty(util, \"__esModule\", {\n    value: true\n});\nutil.isSpaceSeparator = isSpaceSeparator;\nutil.isIdStartChar = isIdStartChar;\nutil.isIdContinueChar = isIdContinueChar;\nutil.isDigit = isDigit;\nutil.isHexDigit = isHexDigit;\nvar _unicode = unicode$1;\nvar unicode = _interopRequireWildcard(_unicode);\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    } else {\n        var newObj = {};\n        if (obj != null) {\n            for(var key in obj){\n                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n            }\n        }\n        newObj.default = obj;\n        return newObj;\n    }\n}\nfunction isSpaceSeparator(c) {\n    return unicode.Space_Separator.test(c);\n}\nfunction isIdStartChar(c) {\n    return c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c === \"$\" || c === \"_\" || unicode.ID_Start.test(c);\n}\nfunction isIdContinueChar(c) {\n    return c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\" || c >= \"0\" && c <= \"9\" || c === \"$\" || c === \"_\" || c === \"‌\" || c === \"‍\" || unicode.ID_Continue.test(c);\n}\nfunction isDigit(c) {\n    return /[0-9]/.test(c);\n}\nfunction isHexDigit(c) {\n    return /[0-9A-Fa-f]/.test(c);\n}\n\nvar _typeof$2 = function(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n(function(module, exports) {\n    var _interopRequireWildcard = function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};\n            if (obj != null) {\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }\n            newObj.default = obj;\n            return newObj;\n        }\n    };\n    var parse = function parse(text, reviver) {\n        source = String(text);\n        parseState = \"start\";\n        stack = [];\n        pos = 0;\n        line = 1;\n        column = 0;\n        token = undefined;\n        key = undefined;\n        root = undefined;\n        do {\n            token = lex();\n            parseStates[parseState]();\n        }while (token.type !== \"eof\");\n        if (typeof reviver === \"function\") {\n            return internalize({\n                \"\": root\n            }, \"\", reviver);\n        }\n        return root;\n    };\n    var lex = function lex() {\n        lexState = \"default\";\n        buffer = \"\";\n        doubleQuote = false;\n        _sign = 1;\n        for(;;){\n            c = peek();\n            var _token = lexStates[lexState]();\n            if (_token) {\n                return _token;\n            }\n        }\n    };\n    var peek = function peek() {\n        if (source[pos]) {\n            return String.fromCodePoint(source.codePointAt(pos));\n        }\n    };\n    var read = function read() {\n        var c = peek();\n        if (c === \"\\n\") {\n            line++;\n            column = 0;\n        } else if (c) {\n            column += c.length;\n        } else {\n            column++;\n        }\n        if (c) {\n            pos += c.length;\n        }\n        return c;\n    };\n    var newToken = function newToken(type, value) {\n        return {\n            type: type,\n            value: value,\n            line: line,\n            column: column\n        };\n    };\n    var literal = function literal(s) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n        try {\n            for(var _iterator = s[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var _c = _step.value;\n                var p = peek();\n                if (p !== _c) {\n                    throw invalidChar(read());\n                }\n                read();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n    };\n    var escape = function escape() {\n        var c = peek();\n        switch(c){\n            case \"b\":\n                read();\n                return \"\\b\";\n            case \"f\":\n                read();\n                return \"\\f\";\n            case \"n\":\n                read();\n                return \"\\n\";\n            case \"r\":\n                read();\n                return \"\\r\";\n            case \"t\":\n                read();\n                return \"\t\";\n            case \"v\":\n                read();\n                return \"\\v\";\n            case \"0\":\n                read();\n                if (util$1.isDigit(peek())) {\n                    throw invalidChar(read());\n                }\n                return \"\\0\";\n            case \"x\":\n                read();\n                return hexEscape();\n            case \"u\":\n                read();\n                return unicodeEscape();\n            case \"\\n\":\n            case \"\\u2028\":\n            case \"\\u2029\":\n                read();\n                return \"\";\n            case \"\\r\":\n                read();\n                if (peek() === \"\\n\") {\n                    read();\n                }\n                return \"\";\n            case \"1\":\n            case \"2\":\n            case \"3\":\n            case \"4\":\n            case \"5\":\n            case \"6\":\n            case \"7\":\n            case \"8\":\n            case \"9\":\n                throw invalidChar(read());\n            case undefined:\n                throw invalidChar(read());\n        }\n        return read();\n    };\n    var hexEscape = function hexEscape() {\n        var buffer = \"\";\n        var c = peek();\n        if (!util$1.isHexDigit(c)) {\n            throw invalidChar(read());\n        }\n        buffer += read();\n        c = peek();\n        if (!util$1.isHexDigit(c)) {\n            throw invalidChar(read());\n        }\n        buffer += read();\n        return String.fromCodePoint(parseInt(buffer, 16));\n    };\n    var unicodeEscape = function unicodeEscape() {\n        var buffer = \"\";\n        var count = 4;\n        while(count-- > 0){\n            var _c2 = peek();\n            if (!util$1.isHexDigit(_c2)) {\n                throw invalidChar(read());\n            }\n            buffer += read();\n        }\n        return String.fromCodePoint(parseInt(buffer, 16));\n    };\n    var push = function push() {\n        var value = void 0;\n        switch(token.type){\n            case \"punctuator\":\n                switch(token.value){\n                    case \"{\":\n                        value = {};\n                        break;\n                    case \"[\":\n                        value = [];\n                        break;\n                }\n                break;\n            case \"null\":\n            case \"boolean\":\n            case \"numeric\":\n            case \"string\":\n                value = token.value;\n                break;\n        }\n        if (root === undefined) {\n            root = value;\n        } else {\n            var parent = stack[stack.length - 1];\n            if (Array.isArray(parent)) {\n                parent.push(value);\n            } else {\n                parent[key] = value;\n            }\n        }\n        if (value !== null && (typeof value === \"undefined\" ? \"undefined\" : _$_typeof(value)) === \"object\") {\n            stack.push(value);\n            if (Array.isArray(value)) {\n                parseState = \"beforeArrayValue\";\n            } else {\n                parseState = \"beforePropertyName\";\n            }\n        } else {\n            var current = stack[stack.length - 1];\n            if (current == null) {\n                parseState = \"end\";\n            } else if (Array.isArray(current)) {\n                parseState = \"afterArrayValue\";\n            } else {\n                parseState = \"afterPropertyValue\";\n            }\n        }\n    };\n    var pop = function pop() {\n        stack.pop();\n        var current = stack[stack.length - 1];\n        if (current == null) {\n            parseState = \"end\";\n        } else if (Array.isArray(current)) {\n            parseState = \"afterArrayValue\";\n        } else {\n            parseState = \"afterPropertyValue\";\n        }\n    };\n    var invalidChar = function invalidChar(c) {\n        if (c === undefined) {\n            return syntaxError(\"JSON5: invalid end of input at \" + line + \":\" + column);\n        }\n        return syntaxError(\"JSON5: invalid character '\" + formatChar(c) + \"' at \" + line + \":\" + column);\n    };\n    var invalidEOF = function invalidEOF() {\n        return syntaxError(\"JSON5: invalid end of input at \" + line + \":\" + column);\n    };\n    var invalidIdentifier = function invalidIdentifier() {\n        column -= 5;\n        return syntaxError(\"JSON5: invalid identifier character at \" + line + \":\" + column);\n    };\n    var separatorChar = function separatorChar(c) {\n        console.warn(\"JSON5: '\" + c + \"' is not valid ECMAScript; consider escaping\");\n    };\n    var formatChar = function formatChar(c) {\n        var replacements = {\n            \"'\": \"\\\\'\",\n            '\"': '\\\\\"',\n            \"\\\\\": \"\\\\\\\\\",\n            \"\\b\": \"\\\\b\",\n            \"\\f\": \"\\\\f\",\n            \"\\n\": \"\\\\n\",\n            \"\\r\": \"\\\\r\",\n            \"\t\": \"\\\\t\",\n            \"\\v\": \"\\\\v\",\n            \"\\0\": \"\\\\0\",\n            \"\\u2028\": \"\\\\u2028\",\n            \"\\u2029\": \"\\\\u2029\"\n        };\n        if (replacements[c]) {\n            return replacements[c];\n        }\n        if (c < \" \") {\n            var hexString = c.charCodeAt(0).toString(16);\n            return \"\\\\x\" + (\"00\" + hexString).substring(hexString.length);\n        }\n        return c;\n    };\n    var syntaxError = function syntaxError(message) {\n        var err = new SyntaxError(message);\n        err.lineNumber = line;\n        err.columnNumber = column;\n        return err;\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    var _$_typeof = typeof Symbol === \"function\" && _typeof$2(Symbol.iterator) === \"symbol\" ? function _$_typeof(obj) {\n        return typeof obj === \"undefined\" ? \"undefined\" : _typeof$2(obj);\n    } : function(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof$2(obj);\n    };\n    exports.default = parse;\n    var _util = util;\n    var util$1 = _interopRequireWildcard(_util);\n    var source = void 0;\n    var parseState = void 0;\n    var stack = void 0;\n    var pos = void 0;\n    var line = void 0;\n    var column = void 0;\n    var token = void 0;\n    var key = void 0;\n    var root = void 0;\n    function internalize(holder, name, reviver) {\n        var value = holder[name];\n        if (value != null && (typeof value === \"undefined\" ? \"undefined\" : _$_typeof(value)) === \"object\") {\n            for(var _key in value){\n                var replacement = internalize(value, _key, reviver);\n                if (replacement === undefined) {\n                    delete value[_key];\n                } else {\n                    value[_key] = replacement;\n                }\n            }\n        }\n        return reviver.call(holder, name, value);\n    }\n    var lexState = void 0;\n    var buffer = void 0;\n    var doubleQuote = void 0;\n    var _sign = void 0;\n    var c = void 0;\n    var lexStates = {\n        default: function _default() {\n            switch(c){\n                case \"\t\":\n                case \"\\v\":\n                case \"\\f\":\n                case \" \":\n                case \"\\xa0\":\n                case \"\\uFEFF\":\n                case \"\\n\":\n                case \"\\r\":\n                case \"\\u2028\":\n                case \"\\u2029\":\n                    read();\n                    return;\n                case \"/\":\n                    read();\n                    lexState = \"comment\";\n                    return;\n                case undefined:\n                    read();\n                    return newToken(\"eof\");\n            }\n            if (util$1.isSpaceSeparator(c)) {\n                read();\n                return;\n            }\n            return lexStates[parseState]();\n        },\n        comment: function comment() {\n            switch(c){\n                case \"*\":\n                    read();\n                    lexState = \"multiLineComment\";\n                    return;\n                case \"/\":\n                    read();\n                    lexState = \"singleLineComment\";\n                    return;\n            }\n            throw invalidChar(read());\n        },\n        multiLineComment: function multiLineComment() {\n            switch(c){\n                case \"*\":\n                    read();\n                    lexState = \"multiLineCommentAsterisk\";\n                    return;\n                case undefined:\n                    throw invalidChar(read());\n            }\n            read();\n        },\n        multiLineCommentAsterisk: function multiLineCommentAsterisk() {\n            switch(c){\n                case \"*\":\n                    read();\n                    return;\n                case \"/\":\n                    read();\n                    lexState = \"default\";\n                    return;\n                case undefined:\n                    throw invalidChar(read());\n            }\n            read();\n            lexState = \"multiLineComment\";\n        },\n        singleLineComment: function singleLineComment() {\n            switch(c){\n                case \"\\n\":\n                case \"\\r\":\n                case \"\\u2028\":\n                case \"\\u2029\":\n                    read();\n                    lexState = \"default\";\n                    return;\n                case undefined:\n                    read();\n                    return newToken(\"eof\");\n            }\n            read();\n        },\n        value: function value() {\n            switch(c){\n                case \"{\":\n                case \"[\":\n                    return newToken(\"punctuator\", read());\n                case \"n\":\n                    read();\n                    literal(\"ull\");\n                    return newToken(\"null\", null);\n                case \"t\":\n                    read();\n                    literal(\"rue\");\n                    return newToken(\"boolean\", true);\n                case \"f\":\n                    read();\n                    literal(\"alse\");\n                    return newToken(\"boolean\", false);\n                case \"-\":\n                case \"+\":\n                    if (read() === \"-\") {\n                        _sign = -1;\n                    }\n                    lexState = \"sign\";\n                    return;\n                case \".\":\n                    buffer = read();\n                    lexState = \"decimalPointLeading\";\n                    return;\n                case \"0\":\n                    buffer = read();\n                    lexState = \"zero\";\n                    return;\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    buffer = read();\n                    lexState = \"decimalInteger\";\n                    return;\n                case \"I\":\n                    read();\n                    literal(\"nfinity\");\n                    return newToken(\"numeric\", Infinity);\n                case \"N\":\n                    read();\n                    literal(\"aN\");\n                    return newToken(\"numeric\", NaN);\n                case '\"':\n                case \"'\":\n                    doubleQuote = read() === '\"';\n                    buffer = \"\";\n                    lexState = \"string\";\n                    return;\n            }\n            throw invalidChar(read());\n        },\n        identifierNameStartEscape: function identifierNameStartEscape() {\n            if (c !== \"u\") {\n                throw invalidChar(read());\n            }\n            read();\n            var u = unicodeEscape();\n            switch(u){\n                case \"$\":\n                case \"_\":\n                    break;\n                default:\n                    if (!util$1.isIdStartChar(u)) {\n                        throw invalidIdentifier();\n                    }\n                    break;\n            }\n            buffer += u;\n            lexState = \"identifierName\";\n        },\n        identifierName: function identifierName() {\n            switch(c){\n                case \"$\":\n                case \"_\":\n                case \"‌\":\n                case \"‍\":\n                    buffer += read();\n                    return;\n                case \"\\\\\":\n                    read();\n                    lexState = \"identifierNameEscape\";\n                    return;\n            }\n            if (util$1.isIdContinueChar(c)) {\n                buffer += read();\n                return;\n            }\n            return newToken(\"identifier\", buffer);\n        },\n        identifierNameEscape: function identifierNameEscape() {\n            if (c !== \"u\") {\n                throw invalidChar(read());\n            }\n            read();\n            var u = unicodeEscape();\n            switch(u){\n                case \"$\":\n                case \"_\":\n                case \"‌\":\n                case \"‍\":\n                    break;\n                default:\n                    if (!util$1.isIdContinueChar(u)) {\n                        throw invalidIdentifier();\n                    }\n                    break;\n            }\n            buffer += u;\n            lexState = \"identifierName\";\n        },\n        sign: function sign() {\n            switch(c){\n                case \".\":\n                    buffer = read();\n                    lexState = \"decimalPointLeading\";\n                    return;\n                case \"0\":\n                    buffer = read();\n                    lexState = \"zero\";\n                    return;\n                case \"1\":\n                case \"2\":\n                case \"3\":\n                case \"4\":\n                case \"5\":\n                case \"6\":\n                case \"7\":\n                case \"8\":\n                case \"9\":\n                    buffer = read();\n                    lexState = \"decimalInteger\";\n                    return;\n                case \"I\":\n                    read();\n                    literal(\"nfinity\");\n                    return newToken(\"numeric\", _sign * Infinity);\n                case \"N\":\n                    read();\n                    literal(\"aN\");\n                    return newToken(\"numeric\", NaN);\n            }\n            throw invalidChar(read());\n        },\n        zero: function zero() {\n            switch(c){\n                case \".\":\n                    buffer += read();\n                    lexState = \"decimalPoint\";\n                    return;\n                case \"e\":\n                case \"E\":\n                    buffer += read();\n                    lexState = \"decimalExponent\";\n                    return;\n                case \"x\":\n                case \"X\":\n                    buffer += read();\n                    lexState = \"hexadecimal\";\n                    return;\n            }\n            return newToken(\"numeric\", _sign * 0);\n        },\n        decimalInteger: function decimalInteger() {\n            switch(c){\n                case \".\":\n                    buffer += read();\n                    lexState = \"decimalPoint\";\n                    return;\n                case \"e\":\n                case \"E\":\n                    buffer += read();\n                    lexState = \"decimalExponent\";\n                    return;\n            }\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                return;\n            }\n            return newToken(\"numeric\", _sign * Number(buffer));\n        },\n        decimalPointLeading: function decimalPointLeading() {\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                lexState = \"decimalFraction\";\n                return;\n            }\n            throw invalidChar(read());\n        },\n        decimalPoint: function decimalPoint() {\n            switch(c){\n                case \"e\":\n                case \"E\":\n                    buffer += read();\n                    lexState = \"decimalExponent\";\n                    return;\n            }\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                lexState = \"decimalFraction\";\n                return;\n            }\n            return newToken(\"numeric\", _sign * Number(buffer));\n        },\n        decimalFraction: function decimalFraction() {\n            switch(c){\n                case \"e\":\n                case \"E\":\n                    buffer += read();\n                    lexState = \"decimalExponent\";\n                    return;\n            }\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                return;\n            }\n            return newToken(\"numeric\", _sign * Number(buffer));\n        },\n        decimalExponent: function decimalExponent() {\n            switch(c){\n                case \"+\":\n                case \"-\":\n                    buffer += read();\n                    lexState = \"decimalExponentSign\";\n                    return;\n            }\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                lexState = \"decimalExponentInteger\";\n                return;\n            }\n            throw invalidChar(read());\n        },\n        decimalExponentSign: function decimalExponentSign() {\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                lexState = \"decimalExponentInteger\";\n                return;\n            }\n            throw invalidChar(read());\n        },\n        decimalExponentInteger: function decimalExponentInteger() {\n            if (util$1.isDigit(c)) {\n                buffer += read();\n                return;\n            }\n            return newToken(\"numeric\", _sign * Number(buffer));\n        },\n        hexadecimal: function hexadecimal() {\n            if (util$1.isHexDigit(c)) {\n                buffer += read();\n                lexState = \"hexadecimalInteger\";\n                return;\n            }\n            throw invalidChar(read());\n        },\n        hexadecimalInteger: function hexadecimalInteger() {\n            if (util$1.isHexDigit(c)) {\n                buffer += read();\n                return;\n            }\n            return newToken(\"numeric\", _sign * Number(buffer));\n        },\n        string: function string() {\n            switch(c){\n                case \"\\\\\":\n                    read();\n                    buffer += escape();\n                    return;\n                case '\"':\n                    if (doubleQuote) {\n                        read();\n                        return newToken(\"string\", buffer);\n                    }\n                    buffer += read();\n                    return;\n                case \"'\":\n                    if (!doubleQuote) {\n                        read();\n                        return newToken(\"string\", buffer);\n                    }\n                    buffer += read();\n                    return;\n                case \"\\n\":\n                case \"\\r\":\n                    throw invalidChar(read());\n                case \"\\u2028\":\n                case \"\\u2029\":\n                    separatorChar(c);\n                    break;\n                case undefined:\n                    throw invalidChar(read());\n            }\n            buffer += read();\n        },\n        start: function start() {\n            switch(c){\n                case \"{\":\n                case \"[\":\n                    return newToken(\"punctuator\", read());\n            }\n            lexState = \"value\";\n        },\n        beforePropertyName: function beforePropertyName() {\n            switch(c){\n                case \"$\":\n                case \"_\":\n                    buffer = read();\n                    lexState = \"identifierName\";\n                    return;\n                case \"\\\\\":\n                    read();\n                    lexState = \"identifierNameStartEscape\";\n                    return;\n                case \"}\":\n                    return newToken(\"punctuator\", read());\n                case '\"':\n                case \"'\":\n                    doubleQuote = read() === '\"';\n                    lexState = \"string\";\n                    return;\n            }\n            if (util$1.isIdStartChar(c)) {\n                buffer += read();\n                lexState = \"identifierName\";\n                return;\n            }\n            throw invalidChar(read());\n        },\n        afterPropertyName: function afterPropertyName() {\n            if (c === \":\") {\n                return newToken(\"punctuator\", read());\n            }\n            throw invalidChar(read());\n        },\n        beforePropertyValue: function beforePropertyValue() {\n            lexState = \"value\";\n        },\n        afterPropertyValue: function afterPropertyValue() {\n            switch(c){\n                case \",\":\n                case \"}\":\n                    return newToken(\"punctuator\", read());\n            }\n            throw invalidChar(read());\n        },\n        beforeArrayValue: function beforeArrayValue() {\n            if (c === \"]\") {\n                return newToken(\"punctuator\", read());\n            }\n            lexState = \"value\";\n        },\n        afterArrayValue: function afterArrayValue() {\n            switch(c){\n                case \",\":\n                case \"]\":\n                    return newToken(\"punctuator\", read());\n            }\n            throw invalidChar(read());\n        },\n        end: function end() {\n            throw invalidChar(read());\n        }\n    };\n    var parseStates = {\n        start: function start() {\n            if (token.type === \"eof\") {\n                throw invalidEOF();\n            }\n            push();\n        },\n        beforePropertyName: function beforePropertyName() {\n            switch(token.type){\n                case \"identifier\":\n                case \"string\":\n                    key = token.value;\n                    parseState = \"afterPropertyName\";\n                    return;\n                case \"punctuator\":\n                    pop();\n                    return;\n                case \"eof\":\n                    throw invalidEOF();\n            }\n        },\n        afterPropertyName: function afterPropertyName() {\n            if (token.type === \"eof\") {\n                throw invalidEOF();\n            }\n            parseState = \"beforePropertyValue\";\n        },\n        beforePropertyValue: function beforePropertyValue() {\n            if (token.type === \"eof\") {\n                throw invalidEOF();\n            }\n            push();\n        },\n        beforeArrayValue: function beforeArrayValue() {\n            if (token.type === \"eof\") {\n                throw invalidEOF();\n            }\n            if (token.type === \"punctuator\" && token.value === \"]\") {\n                pop();\n                return;\n            }\n            push();\n        },\n        afterPropertyValue: function afterPropertyValue() {\n            if (token.type === \"eof\") {\n                throw invalidEOF();\n            }\n            switch(token.value){\n                case \",\":\n                    parseState = \"beforePropertyName\";\n                    return;\n                case \"}\":\n                    pop();\n            }\n        },\n        afterArrayValue: function afterArrayValue() {\n            if (token.type === \"eof\") {\n                throw invalidEOF();\n            }\n            switch(token.value){\n                case \",\":\n                    parseState = \"beforeArrayValue\";\n                    return;\n                case \"]\":\n                    pop();\n            }\n        },\n        end: function end() {}\n    };\n    module.exports = exports[\"default\"];\n})(parse$1, parse$1.exports);\n\nvar stringify$1 = {exports: {}};\n\nfunction _instanceof$1(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\nvar _typeof$1 = function(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n(function(module, exports) {\n    var _interopRequireWildcard = function _interopRequireWildcard(obj) {\n        if (obj && obj.__esModule) {\n            return obj;\n        } else {\n            var newObj = {};\n            if (obj != null) {\n                for(var key in obj){\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n                }\n            }\n            newObj.default = obj;\n            return newObj;\n        }\n    };\n    var stringify = function stringify(value, replacer, space) {\n        var stack = [];\n        var indent = \"\";\n        var propertyList = void 0;\n        var replacerFunc = void 0;\n        var gap = \"\";\n        var quote = void 0;\n        if (replacer != null && (typeof replacer === \"undefined\" ? \"undefined\" : _$_typeof(replacer)) === \"object\" && !Array.isArray(replacer)) {\n            space = replacer.space;\n            quote = replacer.quote;\n            replacer = replacer.replacer;\n        }\n        if (typeof replacer === \"function\") {\n            replacerFunc = replacer;\n        } else if (Array.isArray(replacer)) {\n            propertyList = [];\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n            try {\n                for(var _iterator = replacer[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var v = _step.value;\n                    var item = void 0;\n                    if (typeof v === \"string\") {\n                        item = v;\n                    } else if (typeof v === \"number\" || _instanceof$1(v, String) || _instanceof$1(v, Number)) {\n                        item = String(v);\n                    }\n                    if (item !== undefined && propertyList.indexOf(item) < 0) {\n                        propertyList.push(item);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n        if (_instanceof$1(space, Number)) {\n            space = Number(space);\n        } else if (_instanceof$1(space, String)) {\n            space = String(space);\n        }\n        if (typeof space === \"number\") {\n            if (space > 0) {\n                space = Math.min(10, Math.floor(space));\n                gap = \"          \".substr(0, space);\n            }\n        } else if (typeof space === \"string\") {\n            gap = space.substr(0, 10);\n        }\n        return serializeProperty(\"\", {\n            \"\": value\n        });\n        function serializeProperty(key, holder) {\n            var _$value = holder[key];\n            if (_$value != null) {\n                if (typeof _$value.toJSON5 === \"function\") {\n                    _$value = _$value.toJSON5(key);\n                } else if (typeof _$value.toJSON === \"function\") {\n                    _$value = _$value.toJSON(key);\n                }\n            }\n            if (replacerFunc) {\n                _$value = replacerFunc.call(holder, key, _$value);\n            }\n            if (_instanceof$1(_$value, Number)) {\n                _$value = Number(_$value);\n            } else if (_instanceof$1(_$value, String)) {\n                _$value = String(_$value);\n            } else if (_instanceof$1(_$value, Boolean)) {\n                _$value = _$value.valueOf();\n            }\n            switch(_$value){\n                case null:\n                    return \"null\";\n                case true:\n                    return \"true\";\n                case false:\n                    return \"false\";\n            }\n            if (typeof _$value === \"string\") {\n                return quoteString(_$value);\n            }\n            if (typeof _$value === \"number\") {\n                return String(_$value);\n            }\n            if ((typeof _$value === \"undefined\" ? \"undefined\" : _$_typeof(_$value)) === \"object\") {\n                return Array.isArray(_$value) ? serializeArray(_$value) : serializeObject(_$value);\n            }\n            return undefined;\n        }\n        function quoteString(value) {\n            var quotes = {\n                \"'\": 0.1,\n                '\"': 0.2\n            };\n            var replacements = {\n                \"'\": \"\\\\'\",\n                '\"': '\\\\\"',\n                \"\\\\\": \"\\\\\\\\\",\n                \"\\b\": \"\\\\b\",\n                \"\\f\": \"\\\\f\",\n                \"\\n\": \"\\\\n\",\n                \"\\r\": \"\\\\r\",\n                \"\t\": \"\\\\t\",\n                \"\\v\": \"\\\\v\",\n                \"\\0\": \"\\\\0\",\n                \"\\u2028\": \"\\\\u2028\",\n                \"\\u2029\": \"\\\\u2029\"\n            };\n            var product = \"\";\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n            try {\n                for(var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n                    var c = _step2.value;\n                    switch(c){\n                        case \"'\":\n                        case '\"':\n                            quotes[c]++;\n                            product += c;\n                            continue;\n                    }\n                    if (replacements[c]) {\n                        product += replacements[c];\n                        continue;\n                    }\n                    if (c < \" \") {\n                        var hexString = c.charCodeAt(0).toString(16);\n                        product += \"\\\\x\" + (\"00\" + hexString).substring(hexString.length);\n                        continue;\n                    }\n                    product += c;\n                }\n            } catch (err) {\n                _didIteratorError2 = true;\n                _iteratorError2 = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                        _iterator2.return();\n                    }\n                } finally{\n                    if (_didIteratorError2) {\n                        throw _iteratorError2;\n                    }\n                }\n            }\n            var quoteChar = quote || Object.keys(quotes).reduce(function(a, b) {\n                return quotes[a] < quotes[b] ? a : b;\n            });\n            product = product.replace(new RegExp(quoteChar, \"g\"), replacements[quoteChar]);\n            return quoteChar + product + quoteChar;\n        }\n        function serializeObject(value) {\n            if (stack.indexOf(value) >= 0) {\n                throw TypeError(\"Converting circular structure to JSON5\");\n            }\n            stack.push(value);\n            var stepback = indent;\n            indent = indent + gap;\n            var keys = propertyList || Object.keys(value);\n            var partial = [];\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n            try {\n                for(var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true){\n                    var key = _step3.value;\n                    var propertyString = serializeProperty(key, value);\n                    if (propertyString !== undefined) {\n                        var member = serializeKey(key) + \":\";\n                        if (gap !== \"\") {\n                            member += \" \";\n                        }\n                        member += propertyString;\n                        partial.push(member);\n                    }\n                }\n            } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                        _iterator3.return();\n                    }\n                } finally{\n                    if (_didIteratorError3) {\n                        throw _iteratorError3;\n                    }\n                }\n            }\n            var final = void 0;\n            if (partial.length === 0) {\n                final = \"{}\";\n            } else {\n                var properties = void 0;\n                if (gap === \"\") {\n                    properties = partial.join(\",\");\n                    final = \"{\" + properties + \"}\";\n                } else {\n                    var separator = \",\\n\" + indent;\n                    properties = partial.join(separator);\n                    final = \"{\\n\" + indent + properties + \",\\n\" + stepback + \"}\";\n                }\n            }\n            stack.pop();\n            indent = stepback;\n            return final;\n        }\n        function serializeKey(key) {\n            if (key.length === 0) {\n                return quoteString(key);\n            }\n            var firstChar = String.fromCodePoint(key.codePointAt(0));\n            if (!util$1.isIdStartChar(firstChar)) {\n                return quoteString(key);\n            }\n            for(var i = firstChar.length; i < key.length; i++){\n                if (!util$1.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n                    return quoteString(key);\n                }\n            }\n            return key;\n        }\n        function serializeArray(value) {\n            if (stack.indexOf(value) >= 0) {\n                throw TypeError(\"Converting circular structure to JSON5\");\n            }\n            stack.push(value);\n            var stepback = indent;\n            indent = indent + gap;\n            var partial = [];\n            for(var i = 0; i < value.length; i++){\n                var propertyString = serializeProperty(String(i), value);\n                partial.push(propertyString !== undefined ? propertyString : \"null\");\n            }\n            var final = void 0;\n            if (partial.length === 0) {\n                final = \"[]\";\n            } else {\n                if (gap === \"\") {\n                    var properties = partial.join(\",\");\n                    final = \"[\" + properties + \"]\";\n                } else {\n                    var separator = \",\\n\" + indent;\n                    var _properties = partial.join(separator);\n                    final = \"[\\n\" + indent + _properties + \",\\n\" + stepback + \"]\";\n                }\n            }\n            stack.pop();\n            indent = stepback;\n            return final;\n        }\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    var _$_typeof = typeof Symbol === \"function\" && _typeof$1(Symbol.iterator) === \"symbol\" ? function _$_typeof(obj) {\n        return typeof obj === \"undefined\" ? \"undefined\" : _typeof$1(obj);\n    } : function(obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof$1(obj);\n    };\n    exports.default = stringify;\n    var _util = util;\n    var util$1 = _interopRequireWildcard(_util);\n    module.exports = exports[\"default\"];\n})(stringify$1, stringify$1.exports);\n\n(function(module, exports) {\n    var _interopRequireDefault = function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n            default: obj\n        };\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    var _parse = parse$1.exports;\n    var _parse2 = _interopRequireDefault(_parse);\n    var _stringify = stringify$1.exports;\n    var _stringify2 = _interopRequireDefault(_stringify);\n    exports.default = {\n        parse: _parse2.default,\n        stringify: _stringify2.default\n    };\n    module.exports = exports[\"default\"];\n})(lib, lib.exports);\n\nvar JSON5 = lib.exports;\nvar specialValues = {\n    null: null,\n    true: true,\n    false: false\n};\nfunction parseQuery$2(query) {\n    if (query.substr(0, 1) !== \"?\") {\n        throw new Error(\"A valid query string passed to parseQuery should begin with '?'\");\n    }\n    query = query.substr(1);\n    if (!query) {\n        return {};\n    }\n    if (query.substr(0, 1) === \"{\" && query.substr(-1) === \"}\") {\n        return JSON5.parse(query);\n    }\n    var queryArgs = query.split(/[,&]/g);\n    var result = Object.create(null);\n    queryArgs.forEach(function(arg) {\n        var idx = arg.indexOf(\"=\");\n        if (idx >= 0) {\n            var name = arg.substr(0, idx);\n            var value = decodeURIComponent(arg.substr(idx + 1));\n            if (specialValues.hasOwnProperty(value)) {\n                value = specialValues[value];\n            }\n            if (name.substr(-2) === \"[]\") {\n                name = decodeURIComponent(name.substr(0, name.length - 2));\n                if (!Array.isArray(result[name])) {\n                    result[name] = [];\n                }\n                result[name].push(value);\n            } else {\n                name = decodeURIComponent(name);\n                result[name] = value;\n            }\n        } else {\n            if (arg.substr(0, 1) === \"-\") {\n                result[decodeURIComponent(arg.substr(1))] = false;\n            } else if (arg.substr(0, 1) === \"+\") {\n                result[decodeURIComponent(arg.substr(1))] = true;\n            } else {\n                result[decodeURIComponent(arg)] = true;\n            }\n        }\n    });\n    return result;\n}\nvar parseQuery_1 = parseQuery$2;\n\nvar parseQuery$1 = parseQuery_1;\nfunction getOptions$1(loaderContext) {\n    var query = loaderContext.query;\n    if (typeof query === \"string\" && query !== \"\") {\n        return parseQuery$1(loaderContext.query);\n    }\n    if (!query || typeof query !== \"object\") {\n        // Not object-like queries are not supported.\n        return null;\n    }\n    return query;\n}\nvar getOptions_1 = getOptions$1;\n\nvar path$2 = require$$0__default[\"default\"];\nvar matchRelativePath = /^\\.\\.?[/\\\\]/;\nfunction isAbsolutePath(str) {\n    return path$2.posix.isAbsolute(str) || path$2.win32.isAbsolute(str);\n}\nfunction isRelativePath(str) {\n    return matchRelativePath.test(str);\n}\nfunction stringifyRequest$1(loaderContext, request) {\n    var splitted = request.split(\"!\");\n    var context = loaderContext.context || loaderContext.options && loaderContext.options.context;\n    return JSON.stringify(splitted.map(function(part) {\n        // First, separate singlePath from query, because the query might contain paths again\n        var splittedPart = part.match(/^(.*?)(\\?.*)/);\n        var query = splittedPart ? splittedPart[2] : \"\";\n        var singlePath = splittedPart ? splittedPart[1] : part;\n        if (isAbsolutePath(singlePath) && context) {\n            singlePath = path$2.relative(context, singlePath);\n            if (isAbsolutePath(singlePath)) {\n                // If singlePath still matches an absolute path, singlePath was on a different drive than context.\n                // In this case, we leave the path platform-specific without replacing any separators.\n                // @see https://github.com/webpack/loader-utils/pull/14\n                return singlePath + query;\n            }\n            if (isRelativePath(singlePath) === false) {\n                // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).\n                singlePath = \"./\" + singlePath;\n            }\n        }\n        return singlePath.replace(/\\\\/g, \"/\") + query;\n    }).join(\"!\"));\n}\nvar stringifyRequest_1 = stringifyRequest$1;\n\nfunction getRemainingRequest$1(loaderContext) {\n    if (loaderContext.remainingRequest) {\n        return loaderContext.remainingRequest;\n    }\n    var request = loaderContext.loaders.slice(loaderContext.loaderIndex + 1).map(function(obj) {\n        return obj.request;\n    }).concat([\n        loaderContext.resource\n    ]);\n    return request.join(\"!\");\n}\nvar getRemainingRequest_1 = getRemainingRequest$1;\n\nfunction getCurrentRequest$1(loaderContext) {\n    if (loaderContext.currentRequest) {\n        return loaderContext.currentRequest;\n    }\n    var request = loaderContext.loaders.slice(loaderContext.loaderIndex).map(function(obj) {\n        return obj.request;\n    }).concat([\n        loaderContext.resource\n    ]);\n    return request.join(\"!\");\n}\nvar getCurrentRequest_1 = getCurrentRequest$1;\n\nvar path$1 = require$$0__default[\"default\"];\nfunction isUrlRequest$1(url, root) {\n    // An URL is not an request if\n    // 1. It's an absolute url and it is not `windows` path like `C:\\dir\\file`\n    if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !path$1.win32.isAbsolute(url)) {\n        return false;\n    }\n    // 2. It's a protocol-relative\n    if (/^\\/\\//.test(url)) {\n        return false;\n    }\n    // 3. It's some kind of url for a template\n    if (/^[{}[\\]#*;,'§$%&(=?`´^°<>]/.test(url)) {\n        return false;\n    }\n    // 4. It's also not an request if root isn't set and it's a root-relative url\n    if ((root === undefined || root === false) && /^\\//.test(url)) {\n        return false;\n    }\n    return true;\n}\nvar isUrlRequest_1 = isUrlRequest$1;\n\nvar _typeof = function(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash\nvar matchNativeWin32Path = /^[A-Z]:[/\\\\]|^\\\\\\\\/i;\nfunction urlToRequest$1(url, root) {\n    // Do not rewrite an empty url\n    if (url === \"\") {\n        return \"\";\n    }\n    var moduleRequestRegex = /^[^?]*~/;\n    var request;\n    if (matchNativeWin32Path.test(url)) {\n        // absolute windows path, keep it\n        request = url;\n    } else if (root !== undefined && root !== false && /^\\//.test(url)) {\n        // if root is set and the url is root-relative\n        switch(typeof root === \"undefined\" ? \"undefined\" : _typeof(root)){\n            // 1. root is a string: root is prefixed to the url\n            case \"string\":\n                // special case: `~` roots convert to module request\n                if (moduleRequestRegex.test(root)) {\n                    request = root.replace(/([^~/])$/, \"$1/\") + url.slice(1);\n                } else {\n                    request = root + url;\n                }\n                break;\n            // 2. root is `true`: absolute paths are allowed\n            //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`\n            case \"boolean\":\n                request = url;\n                break;\n            default:\n                throw new Error(\"Unexpected parameters to loader-utils 'urlToRequest': url = \" + url + \", root = \" + root + \".\");\n        }\n    } else if (/^\\.\\.?\\//.test(url)) {\n        // A relative url stays\n        request = url;\n    } else {\n        // every other url is threaded like a relative url\n        request = \"./\" + url;\n    }\n    // A `~` makes the url an module\n    if (moduleRequestRegex.test(request)) {\n        request = request.replace(moduleRequestRegex, \"\");\n    }\n    return request;\n}\nvar urlToRequest_1 = urlToRequest$1;\n\nfunction parseString$1(str) {\n    try {\n        if (str[0] === '\"') {\n            return JSON.parse(str);\n        }\n        if (str[0] === \"'\" && str.substr(str.length - 1) === \"'\") {\n            return parseString$1(str.replace(/\\\\.|\"/g, function(x) {\n                return x === '\"' ? '\\\\\"' : x;\n            }).replace(/^'|'$/g, '\"'));\n        }\n        return JSON.parse('\"' + str + '\"');\n    } catch (e) {\n        return str;\n    }\n}\nvar parseString_1 = parseString$1;\n\n/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */ /************************************** EDITABLE DEFAULTS *****************************************/ // The default values below must be integers within the stated ranges.\n/*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */ function _instanceof(left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n        return !!right[Symbol.hasInstance](left);\n    } else {\n        return left instanceof right;\n    }\n}\nvar DP = 20, /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */ RM = 1, // The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */ NE = -7, /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */ PE = 21, /**************************************************************************************************/ // Error messages.\nNAME = \"[big.js] \", INVALID = NAME + \"Invalid \", INVALID_DP = INVALID + \"decimal places\", INVALID_RM = INVALID + \"rounding mode\", DIV_BY_ZERO = NAME + \"Division by zero\", // The shared prototype object.\nP = {}, UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */ function _Big_() {\n    /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */ function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!_instanceof(x, Big)) return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (_instanceof(n, Big)) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n        } else {\n            parse(x, n);\n        }\n        /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */ x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = \"5.2.2\";\n    return Big;\n}\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */ function parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0) n = \"-0\";\n    else if (!NUMERIC.test(n += \"\")) throw Error(INVALID + \"number\");\n    // Determine sign.\n    x.s = n.charAt(0) == \"-\" ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf(\".\")) > -1) n = n.replace(\".\", \"\");\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    } else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros.\n    for(i = 0; i < nl && n.charAt(i) == \"0\";)++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [\n            x.e = 0\n        ];\n    } else {\n        // Determine trailing zeros.\n        for(; nl > 0 && n.charAt(--nl) == \"0\";);\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading/trailing zeros.\n        for(e = 0; i <= nl;)x.c[e++] = +n.charAt(i++);\n    }\n    return x;\n}\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */ function round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        } else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 && (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        } else if (rm === 3) {\n            more = more || !!xc[0];\n        } else {\n            more = false;\n            if (rm !== 0) throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            } else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        } else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for(; ++xc[i] > 9;){\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for(i = xc.length; !xc[--i];)xc.pop();\n        }\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */ function stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + \"precision\" : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k) round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2) k = x.e + n + 1;\n        // Append zeros?\n        for(; x.c.length < k;)x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join(\"\");\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? \".\" + s.slice(1) : \"\") + (e < 0 ? \"e\" : \"e+\") + e;\n    // Normal notation.\n    } else if (e < 0) {\n        for(; ++e;)s = \"0\" + s;\n        s = \"0.\" + s;\n    } else if (e > 0) {\n        if (++e > n) for(e -= n; e--;)s += \"0\";\n        else if (e < n) s = s.slice(0, e) + \".\" + s.slice(e);\n    } else if (n > 1) {\n        s = s.charAt(0) + \".\" + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? \"-\" + s : s;\n}\n// Prototype/instance methods\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */ P.abs = function() {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/ P.cmp = function(y) {\n    var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j) return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l) return k > l ^ isneg ? 1 : -1;\n    j = (k = xc.length) < (l = yc.length) ? k : l;\n    // Compare digit by digit.\n    for(i = -1; ++i < j;){\n        if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    }\n    // Compare lengths.\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */ P.div = function(y) {\n    var x = this, Big = x.constructor, a = x.c, b = (y = new Big(y)).c, k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0]) throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0]) return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for(; rl++ < bl;)r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for(n = 0; n < 10; n++){\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            } else {\n                for(ri = -1, cmp = 0; ++ri < bl;){\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for(bt = rl == bl ? b : bz; rl;){\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for(; ri && !r[--ri];)r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for(; !r[0];)r.shift();\n            } else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp) r[rl] = a[ai] || 0;\n        else r = [\n            a[ai]\n        ];\n    }while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */ P.eq = function(y) {\n    return !this.cmp(y);\n};\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */ P.gt = function(y) {\n    return this.cmp(y) > 0;\n};\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */ P.gte = function(y) {\n    return this.cmp(y) > -1;\n};\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */ P.lt = function(y) {\n    return this.cmp(y) < 0;\n};\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */ P.lte = function(y) {\n    return this.cmp(y) < 1;\n};\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */ P.minus = P.sub = function(y) {\n    var i, j, t, xlty, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        } else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for(b = a; b--;)t.push(0);\n        t.reverse();\n    } else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for(a = b = 0; b < j; b++){\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */ if ((b = (j = yc.length) - (i = xc.length)) > 0) for(; b--;)xc[i++] = 0;\n    // Subtract yc from xc.\n    for(b = i; j > a;){\n        if (xc[--j] < yc[j]) {\n            for(i = j; i && !xc[--i];)xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for(; xc[--b] === 0;)xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for(; xc[0] === 0;){\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [\n            ye = 0\n        ];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */ P.mod = function(y) {\n    var ygtx, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx) return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */ P.plus = P.add = function(y) {\n    var t, x = this, Big = x.constructor, a = x.s, b = (y = new Big(y)).s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        } else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for(; a--;)t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for(b = 0; a; xc[a] %= 10)b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for(a = xc.length; xc[--a] === 0;)xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */ P.pow = function(n) {\n    var x = this, one = new x.constructor(1), y = one, isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + \"exponent\");\n    if (isneg) n = -n;\n    for(;;){\n        if (n & 1) y = y.times(x);\n        n >>= 1;\n        if (!n) break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */ P.round = function(dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED) dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */ P.sqrt = function() {\n    var r, c, t, x = this, Big = x.constructor, s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0]) return new Big(x);\n    // Negative?\n    if (s < 0) throw Error(NAME + \"No square root\");\n    // Estimate.\n    s = Math.sqrt(x + \"\");\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join(\"\");\n        if (!(c.length + e & 1)) c += \"0\";\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? \"1e\" : (s = s.toExponential()).slice(0, s.indexOf(\"e\") + 1)) + e);\n    } else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    }while (t.c.slice(0, e).join(\"\") !== r.c.slice(0, e).join(\"\"));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */ P.times = P.mul = function(y) {\n    var c, x = this, Big = x.constructor, xc = x.c, yc = (y = new Big(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for(c = new Array(j = a + b); j--;)c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for(i = b; i--;){\n        b = 0;\n        // a is yc.length.\n        for(j = a + i; j > i;){\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b) ++y.e;\n    else c.shift();\n    // Remove trailing zeros.\n    for(i = c.length; !c[--i];)c.pop();\n    y.c = c;\n    return y;\n};\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */ P.toExponential = function(dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */ P.toFixed = function(dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */ P.toPrecision = function(sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */ P.toString = function() {\n    return stringify(this);\n};\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */ P.valueOf = P.toJSON = function() {\n    return stringify(this, 4);\n};\n// Export\nvar Big = _Big_();\n\nvar big = {\n\t__proto__: null,\n\tBig: Big,\n\t'default': Big\n};\n\nvar require$$0 = /*@__PURE__*/getAugmentedNamespace(big);\n\nvar baseEncodeTables = {\n    26: \"abcdefghijklmnopqrstuvwxyz\",\n    32: \"123456789abcdefghjkmnpqrstuvwxyz\",\n    36: \"0123456789abcdefghijklmnopqrstuvwxyz\",\n    49: \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\",\n    52: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    58: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\",\n    62: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    64: \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_\"\n};\nfunction encodeBufferToBase(buffer, base) {\n    var encodeTable = baseEncodeTables[base];\n    if (!encodeTable) {\n        throw new Error(\"Unknown encoding base\" + base);\n    }\n    var readLength = buffer.length;\n    var Big = require$$0;\n    Big.RM = Big.DP = 0;\n    var b = new Big(0);\n    for(var i = readLength - 1; i >= 0; i--){\n        b = b.times(256).plus(buffer[i]);\n    }\n    var output = \"\";\n    while(b.gt(0)){\n        output = encodeTable[b.mod(base)] + output;\n        b = b.div(base);\n    }\n    Big.DP = 20;\n    Big.RM = 1;\n    return output;\n}\nfunction getHashDigest$2(buffer, hashType, digestType, maxLength) {\n    hashType = hashType || \"md5\";\n    maxLength = maxLength || 9999;\n    var hash = require$$1__default[\"default\"].createHash(hashType);\n    hash.update(buffer);\n    if (digestType === \"base26\" || digestType === \"base32\" || digestType === \"base36\" || digestType === \"base49\" || digestType === \"base52\" || digestType === \"base58\" || digestType === \"base62\" || digestType === \"base64\") {\n        return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);\n    } else {\n        return hash.digest(digestType || \"hex\").substr(0, maxLength);\n    }\n}\nvar getHashDigest_1 = getHashDigest$2;\n\nvar emojisList$1 = [\n    \"\\uD83C\\uDC04️\",\n    \"\\uD83C\\uDCCF\",\n    \"\\uD83C\\uDD70️\",\n    \"\\uD83C\\uDD71️\",\n    \"\\uD83C\\uDD7E️\",\n    \"\\uD83C\\uDD7F️\",\n    \"\\uD83C\\uDD8E\",\n    \"\\uD83C\\uDD91\",\n    \"\\uD83C\\uDD92\",\n    \"\\uD83C\\uDD93\",\n    \"\\uD83C\\uDD94\",\n    \"\\uD83C\\uDD95\",\n    \"\\uD83C\\uDD96\",\n    \"\\uD83C\\uDD97\",\n    \"\\uD83C\\uDD98\",\n    \"\\uD83C\\uDD99\",\n    \"\\uD83C\\uDD9A\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF6\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDFD\",\n    \"\\uD83C\\uDDE6\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDE7\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDEF\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF6\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDE7\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDE7\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDFD\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDE8\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDEF\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDE9\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDEA\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDEB\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDEB\\uD83C\\uDDEF\",\n    \"\\uD83C\\uDDEB\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDEB\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDEB\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDEB\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDE7\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF6\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDEC\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDED\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDED\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDED\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDED\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDED\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDED\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF6\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDEE\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDEF\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDEF\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDEF\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDEF\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDEF\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDF0\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDE7\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDF1\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF6\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDFD\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDF2\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDF3\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDF4\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDF5\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDF5\",\n    \"\\uD83C\\uDDF6\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF6\",\n    \"\\uD83C\\uDDF7\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDF7\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDF7\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDF7\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDF7\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDE7\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDEF\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDFD\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDF8\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDE9\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDED\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDEF\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF1\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF4\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF7\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDF9\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDFA\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDE8\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDEC\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDEE\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDF3\",\n    \"\\uD83C\\uDDFB\\uD83C\\uDDFA\",\n    \"\\uD83C\\uDDFB\",\n    \"\\uD83C\\uDDFC\\uD83C\\uDDEB\",\n    \"\\uD83C\\uDDFC\\uD83C\\uDDF8\",\n    \"\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDFD\\uD83C\\uDDF0\",\n    \"\\uD83C\\uDDFD\",\n    \"\\uD83C\\uDDFE\\uD83C\\uDDEA\",\n    \"\\uD83C\\uDDFE\\uD83C\\uDDF9\",\n    \"\\uD83C\\uDDFE\",\n    \"\\uD83C\\uDDFF\\uD83C\\uDDE6\",\n    \"\\uD83C\\uDDFF\\uD83C\\uDDF2\",\n    \"\\uD83C\\uDDFF\\uD83C\\uDDFC\",\n    \"\\uD83C\\uDDFF\",\n    \"\\uD83C\\uDE01\",\n    \"\\uD83C\\uDE02️\",\n    \"\\uD83C\\uDE1A️\",\n    \"\\uD83C\\uDE2F️\",\n    \"\\uD83C\\uDE32\",\n    \"\\uD83C\\uDE33\",\n    \"\\uD83C\\uDE34\",\n    \"\\uD83C\\uDE35\",\n    \"\\uD83C\\uDE36\",\n    \"\\uD83C\\uDE37️\",\n    \"\\uD83C\\uDE38\",\n    \"\\uD83C\\uDE39\",\n    \"\\uD83C\\uDE3A\",\n    \"\\uD83C\\uDE50\",\n    \"\\uD83C\\uDE51\",\n    \"\\uD83C\\uDF00\",\n    \"\\uD83C\\uDF01\",\n    \"\\uD83C\\uDF02\",\n    \"\\uD83C\\uDF03\",\n    \"\\uD83C\\uDF04\",\n    \"\\uD83C\\uDF05\",\n    \"\\uD83C\\uDF06\",\n    \"\\uD83C\\uDF07\",\n    \"\\uD83C\\uDF08\",\n    \"\\uD83C\\uDF09\",\n    \"\\uD83C\\uDF0A\",\n    \"\\uD83C\\uDF0B\",\n    \"\\uD83C\\uDF0C\",\n    \"\\uD83C\\uDF0D\",\n    \"\\uD83C\\uDF0E\",\n    \"\\uD83C\\uDF0F\",\n    \"\\uD83C\\uDF10\",\n    \"\\uD83C\\uDF11\",\n    \"\\uD83C\\uDF12\",\n    \"\\uD83C\\uDF13\",\n    \"\\uD83C\\uDF14\",\n    \"\\uD83C\\uDF15\",\n    \"\\uD83C\\uDF16\",\n    \"\\uD83C\\uDF17\",\n    \"\\uD83C\\uDF18\",\n    \"\\uD83C\\uDF19\",\n    \"\\uD83C\\uDF1A\",\n    \"\\uD83C\\uDF1B\",\n    \"\\uD83C\\uDF1C\",\n    \"\\uD83C\\uDF1D\",\n    \"\\uD83C\\uDF1E\",\n    \"\\uD83C\\uDF1F\",\n    \"\\uD83C\\uDF20\",\n    \"\\uD83C\\uDF21️\",\n    \"\\uD83C\\uDF24️\",\n    \"\\uD83C\\uDF25️\",\n    \"\\uD83C\\uDF26️\",\n    \"\\uD83C\\uDF27️\",\n    \"\\uD83C\\uDF28️\",\n    \"\\uD83C\\uDF29️\",\n    \"\\uD83C\\uDF2A️\",\n    \"\\uD83C\\uDF2B️\",\n    \"\\uD83C\\uDF2C️\",\n    \"\\uD83C\\uDF2D\",\n    \"\\uD83C\\uDF2E\",\n    \"\\uD83C\\uDF2F\",\n    \"\\uD83C\\uDF30\",\n    \"\\uD83C\\uDF31\",\n    \"\\uD83C\\uDF32\",\n    \"\\uD83C\\uDF33\",\n    \"\\uD83C\\uDF34\",\n    \"\\uD83C\\uDF35\",\n    \"\\uD83C\\uDF36️\",\n    \"\\uD83C\\uDF37\",\n    \"\\uD83C\\uDF38\",\n    \"\\uD83C\\uDF39\",\n    \"\\uD83C\\uDF3A\",\n    \"\\uD83C\\uDF3B\",\n    \"\\uD83C\\uDF3C\",\n    \"\\uD83C\\uDF3D\",\n    \"\\uD83C\\uDF3E\",\n    \"\\uD83C\\uDF3F\",\n    \"\\uD83C\\uDF40\",\n    \"\\uD83C\\uDF41\",\n    \"\\uD83C\\uDF42\",\n    \"\\uD83C\\uDF43\",\n    \"\\uD83C\\uDF44\",\n    \"\\uD83C\\uDF45\",\n    \"\\uD83C\\uDF46\",\n    \"\\uD83C\\uDF47\",\n    \"\\uD83C\\uDF48\",\n    \"\\uD83C\\uDF49\",\n    \"\\uD83C\\uDF4A\",\n    \"\\uD83C\\uDF4B\",\n    \"\\uD83C\\uDF4C\",\n    \"\\uD83C\\uDF4D\",\n    \"\\uD83C\\uDF4E\",\n    \"\\uD83C\\uDF4F\",\n    \"\\uD83C\\uDF50\",\n    \"\\uD83C\\uDF51\",\n    \"\\uD83C\\uDF52\",\n    \"\\uD83C\\uDF53\",\n    \"\\uD83C\\uDF54\",\n    \"\\uD83C\\uDF55\",\n    \"\\uD83C\\uDF56\",\n    \"\\uD83C\\uDF57\",\n    \"\\uD83C\\uDF58\",\n    \"\\uD83C\\uDF59\",\n    \"\\uD83C\\uDF5A\",\n    \"\\uD83C\\uDF5B\",\n    \"\\uD83C\\uDF5C\",\n    \"\\uD83C\\uDF5D\",\n    \"\\uD83C\\uDF5E\",\n    \"\\uD83C\\uDF5F\",\n    \"\\uD83C\\uDF60\",\n    \"\\uD83C\\uDF61\",\n    \"\\uD83C\\uDF62\",\n    \"\\uD83C\\uDF63\",\n    \"\\uD83C\\uDF64\",\n    \"\\uD83C\\uDF65\",\n    \"\\uD83C\\uDF66\",\n    \"\\uD83C\\uDF67\",\n    \"\\uD83C\\uDF68\",\n    \"\\uD83C\\uDF69\",\n    \"\\uD83C\\uDF6A\",\n    \"\\uD83C\\uDF6B\",\n    \"\\uD83C\\uDF6C\",\n    \"\\uD83C\\uDF6D\",\n    \"\\uD83C\\uDF6E\",\n    \"\\uD83C\\uDF6F\",\n    \"\\uD83C\\uDF70\",\n    \"\\uD83C\\uDF71\",\n    \"\\uD83C\\uDF72\",\n    \"\\uD83C\\uDF73\",\n    \"\\uD83C\\uDF74\",\n    \"\\uD83C\\uDF75\",\n    \"\\uD83C\\uDF76\",\n    \"\\uD83C\\uDF77\",\n    \"\\uD83C\\uDF78\",\n    \"\\uD83C\\uDF79\",\n    \"\\uD83C\\uDF7A\",\n    \"\\uD83C\\uDF7B\",\n    \"\\uD83C\\uDF7C\",\n    \"\\uD83C\\uDF7D️\",\n    \"\\uD83C\\uDF7E\",\n    \"\\uD83C\\uDF7F\",\n    \"\\uD83C\\uDF80\",\n    \"\\uD83C\\uDF81\",\n    \"\\uD83C\\uDF82\",\n    \"\\uD83C\\uDF83\",\n    \"\\uD83C\\uDF84\",\n    \"\\uD83C\\uDF85\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDF85\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDF85\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDF85\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDF85\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDF85\",\n    \"\\uD83C\\uDF86\",\n    \"\\uD83C\\uDF87\",\n    \"\\uD83C\\uDF88\",\n    \"\\uD83C\\uDF89\",\n    \"\\uD83C\\uDF8A\",\n    \"\\uD83C\\uDF8B\",\n    \"\\uD83C\\uDF8C\",\n    \"\\uD83C\\uDF8D\",\n    \"\\uD83C\\uDF8E\",\n    \"\\uD83C\\uDF8F\",\n    \"\\uD83C\\uDF90\",\n    \"\\uD83C\\uDF91\",\n    \"\\uD83C\\uDF92\",\n    \"\\uD83C\\uDF93\",\n    \"\\uD83C\\uDF96️\",\n    \"\\uD83C\\uDF97️\",\n    \"\\uD83C\\uDF99️\",\n    \"\\uD83C\\uDF9A️\",\n    \"\\uD83C\\uDF9B️\",\n    \"\\uD83C\\uDF9E️\",\n    \"\\uD83C\\uDF9F️\",\n    \"\\uD83C\\uDFA0\",\n    \"\\uD83C\\uDFA1\",\n    \"\\uD83C\\uDFA2\",\n    \"\\uD83C\\uDFA3\",\n    \"\\uD83C\\uDFA4\",\n    \"\\uD83C\\uDFA5\",\n    \"\\uD83C\\uDFA6\",\n    \"\\uD83C\\uDFA7\",\n    \"\\uD83C\\uDFA8\",\n    \"\\uD83C\\uDFA9\",\n    \"\\uD83C\\uDFAA\",\n    \"\\uD83C\\uDFAB\",\n    \"\\uD83C\\uDFAC\",\n    \"\\uD83C\\uDFAD\",\n    \"\\uD83C\\uDFAE\",\n    \"\\uD83C\\uDFAF\",\n    \"\\uD83C\\uDFB0\",\n    \"\\uD83C\\uDFB1\",\n    \"\\uD83C\\uDFB2\",\n    \"\\uD83C\\uDFB3\",\n    \"\\uD83C\\uDFB4\",\n    \"\\uD83C\\uDFB5\",\n    \"\\uD83C\\uDFB6\",\n    \"\\uD83C\\uDFB7\",\n    \"\\uD83C\\uDFB8\",\n    \"\\uD83C\\uDFB9\",\n    \"\\uD83C\\uDFBA\",\n    \"\\uD83C\\uDFBB\",\n    \"\\uD83C\\uDFBC\",\n    \"\\uD83C\\uDFBD\",\n    \"\\uD83C\\uDFBE\",\n    \"\\uD83C\\uDFBF\",\n    \"\\uD83C\\uDFC0\",\n    \"\\uD83C\\uDFC1\",\n    \"\\uD83C\\uDFC2\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFC2\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFC2\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFC2\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFC2\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFC2\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83C\\uDFC3\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFC3‍♀️\",\n    \"\\uD83C\\uDFC3‍♂️\",\n    \"\\uD83C\\uDFC3\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83C\\uDFC4\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFC4‍♀️\",\n    \"\\uD83C\\uDFC4‍♂️\",\n    \"\\uD83C\\uDFC4\",\n    \"\\uD83C\\uDFC5\",\n    \"\\uD83C\\uDFC6\",\n    \"\\uD83C\\uDFC7\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFC7\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFC7\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFC7\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFC7\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFC7\",\n    \"\\uD83C\\uDFC8\",\n    \"\\uD83C\\uDFC9\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83C\\uDFCA\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFCA‍♀️\",\n    \"\\uD83C\\uDFCA‍♂️\",\n    \"\\uD83C\\uDFCA\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83C\\uDFCB\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFCB️‍♀️\",\n    \"\\uD83C\\uDFCB️‍♂️\",\n    \"\\uD83C\\uDFCB️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83C\\uDFCC\\uD83C\\uDFFF\",\n    \"\\uD83C\\uDFCC️‍♀️\",\n    \"\\uD83C\\uDFCC️‍♂️\",\n    \"\\uD83C\\uDFCC️\",\n    \"\\uD83C\\uDFCD️\",\n    \"\\uD83C\\uDFCE️\",\n    \"\\uD83C\\uDFCF\",\n    \"\\uD83C\\uDFD0\",\n    \"\\uD83C\\uDFD1\",\n    \"\\uD83C\\uDFD2\",\n    \"\\uD83C\\uDFD3\",\n    \"\\uD83C\\uDFD4️\",\n    \"\\uD83C\\uDFD5️\",\n    \"\\uD83C\\uDFD6️\",\n    \"\\uD83C\\uDFD7️\",\n    \"\\uD83C\\uDFD8️\",\n    \"\\uD83C\\uDFD9️\",\n    \"\\uD83C\\uDFDA️\",\n    \"\\uD83C\\uDFDB️\",\n    \"\\uD83C\\uDFDC️\",\n    \"\\uD83C\\uDFDD️\",\n    \"\\uD83C\\uDFDE️\",\n    \"\\uD83C\\uDFDF️\",\n    \"\\uD83C\\uDFE0\",\n    \"\\uD83C\\uDFE1\",\n    \"\\uD83C\\uDFE2\",\n    \"\\uD83C\\uDFE3\",\n    \"\\uD83C\\uDFE4\",\n    \"\\uD83C\\uDFE5\",\n    \"\\uD83C\\uDFE6\",\n    \"\\uD83C\\uDFE7\",\n    \"\\uD83C\\uDFE8\",\n    \"\\uD83C\\uDFE9\",\n    \"\\uD83C\\uDFEA\",\n    \"\\uD83C\\uDFEB\",\n    \"\\uD83C\\uDFEC\",\n    \"\\uD83C\\uDFED\",\n    \"\\uD83C\\uDFEE\",\n    \"\\uD83C\\uDFEF\",\n    \"\\uD83C\\uDFF0\",\n    \"\\uD83C\\uDFF3️‍\\uD83C\\uDF08\",\n    \"\\uD83C\\uDFF3️\",\n    \"\\uD83C\\uDFF4‍☠️\",\n    \"\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67\\uDB40\\uDC7F\",\n    \"\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74\\uDB40\\uDC7F\",\n    \"\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73\\uDB40\\uDC7F\",\n    \"\\uD83C\\uDFF4\",\n    \"\\uD83C\\uDFF5️\",\n    \"\\uD83C\\uDFF7️\",\n    \"\\uD83C\\uDFF8\",\n    \"\\uD83C\\uDFF9\",\n    \"\\uD83C\\uDFFA\",\n    \"\\uD83C\\uDFFB\",\n    \"\\uD83C\\uDFFC\",\n    \"\\uD83C\\uDFFD\",\n    \"\\uD83C\\uDFFE\",\n    \"\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC00\",\n    \"\\uD83D\\uDC01\",\n    \"\\uD83D\\uDC02\",\n    \"\\uD83D\\uDC03\",\n    \"\\uD83D\\uDC04\",\n    \"\\uD83D\\uDC05\",\n    \"\\uD83D\\uDC06\",\n    \"\\uD83D\\uDC07\",\n    \"\\uD83D\\uDC08\",\n    \"\\uD83D\\uDC09\",\n    \"\\uD83D\\uDC0A\",\n    \"\\uD83D\\uDC0B\",\n    \"\\uD83D\\uDC0C\",\n    \"\\uD83D\\uDC0D\",\n    \"\\uD83D\\uDC0E\",\n    \"\\uD83D\\uDC0F\",\n    \"\\uD83D\\uDC10\",\n    \"\\uD83D\\uDC11\",\n    \"\\uD83D\\uDC12\",\n    \"\\uD83D\\uDC13\",\n    \"\\uD83D\\uDC14\",\n    \"\\uD83D\\uDC15‍\\uD83E\\uDDBA\",\n    \"\\uD83D\\uDC15\",\n    \"\\uD83D\\uDC16\",\n    \"\\uD83D\\uDC17\",\n    \"\\uD83D\\uDC18\",\n    \"\\uD83D\\uDC19\",\n    \"\\uD83D\\uDC1A\",\n    \"\\uD83D\\uDC1B\",\n    \"\\uD83D\\uDC1C\",\n    \"\\uD83D\\uDC1D\",\n    \"\\uD83D\\uDC1E\",\n    \"\\uD83D\\uDC1F\",\n    \"\\uD83D\\uDC20\",\n    \"\\uD83D\\uDC21\",\n    \"\\uD83D\\uDC22\",\n    \"\\uD83D\\uDC23\",\n    \"\\uD83D\\uDC24\",\n    \"\\uD83D\\uDC25\",\n    \"\\uD83D\\uDC26\",\n    \"\\uD83D\\uDC27\",\n    \"\\uD83D\\uDC28\",\n    \"\\uD83D\\uDC29\",\n    \"\\uD83D\\uDC2A\",\n    \"\\uD83D\\uDC2B\",\n    \"\\uD83D\\uDC2C\",\n    \"\\uD83D\\uDC2D\",\n    \"\\uD83D\\uDC2E\",\n    \"\\uD83D\\uDC2F\",\n    \"\\uD83D\\uDC30\",\n    \"\\uD83D\\uDC31\",\n    \"\\uD83D\\uDC32\",\n    \"\\uD83D\\uDC33\",\n    \"\\uD83D\\uDC34\",\n    \"\\uD83D\\uDC35\",\n    \"\\uD83D\\uDC36\",\n    \"\\uD83D\\uDC37\",\n    \"\\uD83D\\uDC38\",\n    \"\\uD83D\\uDC39\",\n    \"\\uD83D\\uDC3A\",\n    \"\\uD83D\\uDC3B\",\n    \"\\uD83D\\uDC3C\",\n    \"\\uD83D\\uDC3D\",\n    \"\\uD83D\\uDC3E\",\n    \"\\uD83D\\uDC3F️\",\n    \"\\uD83D\\uDC40\",\n    \"\\uD83D\\uDC41‍\\uD83D\\uDDE8\",\n    \"\\uD83D\\uDC41️\",\n    \"\\uD83D\\uDC42\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC42\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC42\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC42\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC42\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC42\",\n    \"\\uD83D\\uDC43\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC43\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC43\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC43\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC43\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC43\",\n    \"\\uD83D\\uDC44\",\n    \"\\uD83D\\uDC45\",\n    \"\\uD83D\\uDC46\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC46\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC46\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC46\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC46\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC46\",\n    \"\\uD83D\\uDC47\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC47\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC47\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC47\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC47\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC47\",\n    \"\\uD83D\\uDC48\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC48\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC48\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC48\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC48\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC48\",\n    \"\\uD83D\\uDC49\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC49\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC49\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC49\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC49\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC49\",\n    \"\\uD83D\\uDC4A\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC4A\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC4A\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC4A\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC4A\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC4A\",\n    \"\\uD83D\\uDC4B\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC4B\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC4B\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC4B\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC4B\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC4B\",\n    \"\\uD83D\\uDC4C\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC4C\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC4C\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC4C\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC4C\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC4C\",\n    \"\\uD83D\\uDC4D\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC4D\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC4D\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC4D\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC4D\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC4D\",\n    \"\\uD83D\\uDC4E\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC4E\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC4E\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC4E\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC4E\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC4E\",\n    \"\\uD83D\\uDC4F\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC4F\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC4F\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC4F\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC4F\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC4F\",\n    \"\\uD83D\\uDC50\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC50\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC50\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC50\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC50\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC50\",\n    \"\\uD83D\\uDC51\",\n    \"\\uD83D\\uDC52\",\n    \"\\uD83D\\uDC53\",\n    \"\\uD83D\\uDC54\",\n    \"\\uD83D\\uDC55\",\n    \"\\uD83D\\uDC56\",\n    \"\\uD83D\\uDC57\",\n    \"\\uD83D\\uDC58\",\n    \"\\uD83D\\uDC59\",\n    \"\\uD83D\\uDC5A\",\n    \"\\uD83D\\uDC5B\",\n    \"\\uD83D\\uDC5C\",\n    \"\\uD83D\\uDC5D\",\n    \"\\uD83D\\uDC5E\",\n    \"\\uD83D\\uDC5F\",\n    \"\\uD83D\\uDC60\",\n    \"\\uD83D\\uDC61\",\n    \"\\uD83D\\uDC62\",\n    \"\\uD83D\\uDC63\",\n    \"\\uD83D\\uDC64\",\n    \"\\uD83D\\uDC65\",\n    \"\\uD83D\\uDC66\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC66\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC66\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC66\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC66\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC67\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC67\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC67\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC67\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC67\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍⚕️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍⚖️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB‍✈️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍⚕️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍⚖️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC‍✈️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍⚕️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍⚖️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD‍✈️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍⚕️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍⚖️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE‍✈️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍⚕️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍⚖️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF‍✈️\",\n    \"\\uD83D\\uDC68\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC68‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC66‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC67‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC67‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC68‍\\uD83D\\uDC66‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC68‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC68‍\\uD83D\\uDC67‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC68‍\\uD83D\\uDC67‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC68‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC69‍\\uD83D\\uDC66‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC69‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC69‍\\uD83D\\uDC67‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC69‍\\uD83D\\uDC67‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDC69‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC68‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC68‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC68‍⚕️\",\n    \"\\uD83D\\uDC68‍⚖️\",\n    \"\\uD83D\\uDC68‍✈️\",\n    \"\\uD83D\\uDC68‍❤️‍\\uD83D\\uDC68\",\n    \"\\uD83D\\uDC68‍❤️‍\\uD83D\\uDC8B‍\\uD83D\\uDC68\",\n    \"\\uD83D\\uDC68\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍⚕️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍⚖️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB‍✈️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍⚕️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍⚖️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC‍✈️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍⚕️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍⚖️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD‍✈️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍⚕️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍⚖️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE‍✈️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC68\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83D\\uDC69\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍⚕️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍⚖️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF‍✈️\",\n    \"\\uD83D\\uDC69\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDF3E\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDF73\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDF93\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDFA4\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDFA8\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDFEB\",\n    \"\\uD83D\\uDC69‍\\uD83C\\uDFED\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC66‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC67‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC67‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC69‍\\uD83D\\uDC66‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC69‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC69‍\\uD83D\\uDC67‍\\uD83D\\uDC66\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC69‍\\uD83D\\uDC67‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDC69‍\\uD83D\\uDC67\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDD27\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDE80\",\n    \"\\uD83D\\uDC69‍\\uD83D\\uDE92\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDAF\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDB0\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDB1\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDB2\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDB3\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDBC\",\n    \"\\uD83D\\uDC69‍\\uD83E\\uDDBD\",\n    \"\\uD83D\\uDC69‍⚕️\",\n    \"\\uD83D\\uDC69‍⚖️\",\n    \"\\uD83D\\uDC69‍✈️\",\n    \"\\uD83D\\uDC69‍❤️‍\\uD83D\\uDC68\",\n    \"\\uD83D\\uDC69‍❤️‍\\uD83D\\uDC69\",\n    \"\\uD83D\\uDC69‍❤️‍\\uD83D\\uDC8B‍\\uD83D\\uDC68\",\n    \"\\uD83D\\uDC69‍❤️‍\\uD83D\\uDC8B‍\\uD83D\\uDC69\",\n    \"\\uD83D\\uDC69\",\n    \"\\uD83D\\uDC6A\",\n    \"\\uD83D\\uDC6B\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC6B\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC6B\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC6B\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC6B\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC6B\",\n    \"\\uD83D\\uDC6C\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC6C\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC6C\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC6C\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC6C\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC6C\",\n    \"\\uD83D\\uDC6D\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC6D\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC6D\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC6D\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC6D\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC6D\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC6E\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC6E‍♀️\",\n    \"\\uD83D\\uDC6E‍♂️\",\n    \"\\uD83D\\uDC6E\",\n    \"\\uD83D\\uDC6F‍♀️\",\n    \"\\uD83D\\uDC6F‍♂️\",\n    \"\\uD83D\\uDC6F\",\n    \"\\uD83D\\uDC70\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC70\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC70\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC70\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC70\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC70\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC71\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC71‍♀️\",\n    \"\\uD83D\\uDC71‍♂️\",\n    \"\\uD83D\\uDC71\",\n    \"\\uD83D\\uDC72\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC72\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC72\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC72\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC72\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC72\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC73\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC73‍♀️\",\n    \"\\uD83D\\uDC73‍♂️\",\n    \"\\uD83D\\uDC73\",\n    \"\\uD83D\\uDC74\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC74\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC74\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC74\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC74\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC74\",\n    \"\\uD83D\\uDC75\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC75\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC75\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC75\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC75\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC75\",\n    \"\\uD83D\\uDC76\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC76\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC76\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC76\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC76\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC76\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC77\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC77‍♀️\",\n    \"\\uD83D\\uDC77‍♂️\",\n    \"\\uD83D\\uDC77\",\n    \"\\uD83D\\uDC78\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC78\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC78\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC78\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC78\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC78\",\n    \"\\uD83D\\uDC79\",\n    \"\\uD83D\\uDC7A\",\n    \"\\uD83D\\uDC7B\",\n    \"\\uD83D\\uDC7C\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC7C\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC7C\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC7C\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC7C\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC7C\",\n    \"\\uD83D\\uDC7D\",\n    \"\\uD83D\\uDC7E\",\n    \"\\uD83D\\uDC7F\",\n    \"\\uD83D\\uDC80\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC81\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC81‍♀️\",\n    \"\\uD83D\\uDC81‍♂️\",\n    \"\\uD83D\\uDC81\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC82\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC82‍♀️\",\n    \"\\uD83D\\uDC82‍♂️\",\n    \"\\uD83D\\uDC82\",\n    \"\\uD83D\\uDC83\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC83\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC83\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC83\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC83\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC83\",\n    \"\\uD83D\\uDC84\",\n    \"\\uD83D\\uDC85\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC85\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC85\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC85\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC85\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC85\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC86\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC86‍♀️\",\n    \"\\uD83D\\uDC86‍♂️\",\n    \"\\uD83D\\uDC86\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDC87\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDC87‍♀️\",\n    \"\\uD83D\\uDC87‍♂️\",\n    \"\\uD83D\\uDC87\",\n    \"\\uD83D\\uDC88\",\n    \"\\uD83D\\uDC89\",\n    \"\\uD83D\\uDC8A\",\n    \"\\uD83D\\uDC8B\",\n    \"\\uD83D\\uDC8C\",\n    \"\\uD83D\\uDC8D\",\n    \"\\uD83D\\uDC8E\",\n    \"\\uD83D\\uDC8F\",\n    \"\\uD83D\\uDC90\",\n    \"\\uD83D\\uDC91\",\n    \"\\uD83D\\uDC92\",\n    \"\\uD83D\\uDC93\",\n    \"\\uD83D\\uDC94\",\n    \"\\uD83D\\uDC95\",\n    \"\\uD83D\\uDC96\",\n    \"\\uD83D\\uDC97\",\n    \"\\uD83D\\uDC98\",\n    \"\\uD83D\\uDC99\",\n    \"\\uD83D\\uDC9A\",\n    \"\\uD83D\\uDC9B\",\n    \"\\uD83D\\uDC9C\",\n    \"\\uD83D\\uDC9D\",\n    \"\\uD83D\\uDC9E\",\n    \"\\uD83D\\uDC9F\",\n    \"\\uD83D\\uDCA0\",\n    \"\\uD83D\\uDCA1\",\n    \"\\uD83D\\uDCA2\",\n    \"\\uD83D\\uDCA3\",\n    \"\\uD83D\\uDCA4\",\n    \"\\uD83D\\uDCA5\",\n    \"\\uD83D\\uDCA6\",\n    \"\\uD83D\\uDCA7\",\n    \"\\uD83D\\uDCA8\",\n    \"\\uD83D\\uDCA9\",\n    \"\\uD83D\\uDCAA\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDCAA\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDCAA\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDCAA\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDCAA\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDCAA\",\n    \"\\uD83D\\uDCAB\",\n    \"\\uD83D\\uDCAC\",\n    \"\\uD83D\\uDCAD\",\n    \"\\uD83D\\uDCAE\",\n    \"\\uD83D\\uDCAF\",\n    \"\\uD83D\\uDCB0\",\n    \"\\uD83D\\uDCB1\",\n    \"\\uD83D\\uDCB2\",\n    \"\\uD83D\\uDCB3\",\n    \"\\uD83D\\uDCB4\",\n    \"\\uD83D\\uDCB5\",\n    \"\\uD83D\\uDCB6\",\n    \"\\uD83D\\uDCB7\",\n    \"\\uD83D\\uDCB8\",\n    \"\\uD83D\\uDCB9\",\n    \"\\uD83D\\uDCBA\",\n    \"\\uD83D\\uDCBB\",\n    \"\\uD83D\\uDCBC\",\n    \"\\uD83D\\uDCBD\",\n    \"\\uD83D\\uDCBE\",\n    \"\\uD83D\\uDCBF\",\n    \"\\uD83D\\uDCC0\",\n    \"\\uD83D\\uDCC1\",\n    \"\\uD83D\\uDCC2\",\n    \"\\uD83D\\uDCC3\",\n    \"\\uD83D\\uDCC4\",\n    \"\\uD83D\\uDCC5\",\n    \"\\uD83D\\uDCC6\",\n    \"\\uD83D\\uDCC7\",\n    \"\\uD83D\\uDCC8\",\n    \"\\uD83D\\uDCC9\",\n    \"\\uD83D\\uDCCA\",\n    \"\\uD83D\\uDCCB\",\n    \"\\uD83D\\uDCCC\",\n    \"\\uD83D\\uDCCD\",\n    \"\\uD83D\\uDCCE\",\n    \"\\uD83D\\uDCCF\",\n    \"\\uD83D\\uDCD0\",\n    \"\\uD83D\\uDCD1\",\n    \"\\uD83D\\uDCD2\",\n    \"\\uD83D\\uDCD3\",\n    \"\\uD83D\\uDCD4\",\n    \"\\uD83D\\uDCD5\",\n    \"\\uD83D\\uDCD6\",\n    \"\\uD83D\\uDCD7\",\n    \"\\uD83D\\uDCD8\",\n    \"\\uD83D\\uDCD9\",\n    \"\\uD83D\\uDCDA\",\n    \"\\uD83D\\uDCDB\",\n    \"\\uD83D\\uDCDC\",\n    \"\\uD83D\\uDCDD\",\n    \"\\uD83D\\uDCDE\",\n    \"\\uD83D\\uDCDF\",\n    \"\\uD83D\\uDCE0\",\n    \"\\uD83D\\uDCE1\",\n    \"\\uD83D\\uDCE2\",\n    \"\\uD83D\\uDCE3\",\n    \"\\uD83D\\uDCE4\",\n    \"\\uD83D\\uDCE5\",\n    \"\\uD83D\\uDCE6\",\n    \"\\uD83D\\uDCE7\",\n    \"\\uD83D\\uDCE8\",\n    \"\\uD83D\\uDCE9\",\n    \"\\uD83D\\uDCEA\",\n    \"\\uD83D\\uDCEB\",\n    \"\\uD83D\\uDCEC\",\n    \"\\uD83D\\uDCED\",\n    \"\\uD83D\\uDCEE\",\n    \"\\uD83D\\uDCEF\",\n    \"\\uD83D\\uDCF0\",\n    \"\\uD83D\\uDCF1\",\n    \"\\uD83D\\uDCF2\",\n    \"\\uD83D\\uDCF3\",\n    \"\\uD83D\\uDCF4\",\n    \"\\uD83D\\uDCF5\",\n    \"\\uD83D\\uDCF6\",\n    \"\\uD83D\\uDCF7\",\n    \"\\uD83D\\uDCF8\",\n    \"\\uD83D\\uDCF9\",\n    \"\\uD83D\\uDCFA\",\n    \"\\uD83D\\uDCFB\",\n    \"\\uD83D\\uDCFC\",\n    \"\\uD83D\\uDCFD️\",\n    \"\\uD83D\\uDCFF\",\n    \"\\uD83D\\uDD00\",\n    \"\\uD83D\\uDD01\",\n    \"\\uD83D\\uDD02\",\n    \"\\uD83D\\uDD03\",\n    \"\\uD83D\\uDD04\",\n    \"\\uD83D\\uDD05\",\n    \"\\uD83D\\uDD06\",\n    \"\\uD83D\\uDD07\",\n    \"\\uD83D\\uDD08\",\n    \"\\uD83D\\uDD09\",\n    \"\\uD83D\\uDD0A\",\n    \"\\uD83D\\uDD0B\",\n    \"\\uD83D\\uDD0C\",\n    \"\\uD83D\\uDD0D\",\n    \"\\uD83D\\uDD0E\",\n    \"\\uD83D\\uDD0F\",\n    \"\\uD83D\\uDD10\",\n    \"\\uD83D\\uDD11\",\n    \"\\uD83D\\uDD12\",\n    \"\\uD83D\\uDD13\",\n    \"\\uD83D\\uDD14\",\n    \"\\uD83D\\uDD15\",\n    \"\\uD83D\\uDD16\",\n    \"\\uD83D\\uDD17\",\n    \"\\uD83D\\uDD18\",\n    \"\\uD83D\\uDD19\",\n    \"\\uD83D\\uDD1A\",\n    \"\\uD83D\\uDD1B\",\n    \"\\uD83D\\uDD1C\",\n    \"\\uD83D\\uDD1D\",\n    \"\\uD83D\\uDD1E\",\n    \"\\uD83D\\uDD1F\",\n    \"\\uD83D\\uDD20\",\n    \"\\uD83D\\uDD21\",\n    \"\\uD83D\\uDD22\",\n    \"\\uD83D\\uDD23\",\n    \"\\uD83D\\uDD24\",\n    \"\\uD83D\\uDD25\",\n    \"\\uD83D\\uDD26\",\n    \"\\uD83D\\uDD27\",\n    \"\\uD83D\\uDD28\",\n    \"\\uD83D\\uDD29\",\n    \"\\uD83D\\uDD2A\",\n    \"\\uD83D\\uDD2B\",\n    \"\\uD83D\\uDD2C\",\n    \"\\uD83D\\uDD2D\",\n    \"\\uD83D\\uDD2E\",\n    \"\\uD83D\\uDD2F\",\n    \"\\uD83D\\uDD30\",\n    \"\\uD83D\\uDD31\",\n    \"\\uD83D\\uDD32\",\n    \"\\uD83D\\uDD33\",\n    \"\\uD83D\\uDD34\",\n    \"\\uD83D\\uDD35\",\n    \"\\uD83D\\uDD36\",\n    \"\\uD83D\\uDD37\",\n    \"\\uD83D\\uDD38\",\n    \"\\uD83D\\uDD39\",\n    \"\\uD83D\\uDD3A\",\n    \"\\uD83D\\uDD3B\",\n    \"\\uD83D\\uDD3C\",\n    \"\\uD83D\\uDD3D\",\n    \"\\uD83D\\uDD49️\",\n    \"\\uD83D\\uDD4A️\",\n    \"\\uD83D\\uDD4B\",\n    \"\\uD83D\\uDD4C\",\n    \"\\uD83D\\uDD4D\",\n    \"\\uD83D\\uDD4E\",\n    \"\\uD83D\\uDD50\",\n    \"\\uD83D\\uDD51\",\n    \"\\uD83D\\uDD52\",\n    \"\\uD83D\\uDD53\",\n    \"\\uD83D\\uDD54\",\n    \"\\uD83D\\uDD55\",\n    \"\\uD83D\\uDD56\",\n    \"\\uD83D\\uDD57\",\n    \"\\uD83D\\uDD58\",\n    \"\\uD83D\\uDD59\",\n    \"\\uD83D\\uDD5A\",\n    \"\\uD83D\\uDD5B\",\n    \"\\uD83D\\uDD5C\",\n    \"\\uD83D\\uDD5D\",\n    \"\\uD83D\\uDD5E\",\n    \"\\uD83D\\uDD5F\",\n    \"\\uD83D\\uDD60\",\n    \"\\uD83D\\uDD61\",\n    \"\\uD83D\\uDD62\",\n    \"\\uD83D\\uDD63\",\n    \"\\uD83D\\uDD64\",\n    \"\\uD83D\\uDD65\",\n    \"\\uD83D\\uDD66\",\n    \"\\uD83D\\uDD67\",\n    \"\\uD83D\\uDD6F️\",\n    \"\\uD83D\\uDD70️\",\n    \"\\uD83D\\uDD73️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDD74\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDD74️‍♀️\",\n    \"\\uD83D\\uDD74️‍♂️\",\n    \"\\uD83D\\uDD74️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDD75\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDD75️‍♀️\",\n    \"\\uD83D\\uDD75️‍♂️\",\n    \"\\uD83D\\uDD75️\",\n    \"\\uD83D\\uDD76️\",\n    \"\\uD83D\\uDD77️\",\n    \"\\uD83D\\uDD78️\",\n    \"\\uD83D\\uDD79️\",\n    \"\\uD83D\\uDD7A\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDD7A\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDD7A\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDD7A\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDD7A\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDD7A\",\n    \"\\uD83D\\uDD87️\",\n    \"\\uD83D\\uDD8A️\",\n    \"\\uD83D\\uDD8B️\",\n    \"\\uD83D\\uDD8C️\",\n    \"\\uD83D\\uDD8D️\",\n    \"\\uD83D\\uDD90\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDD90\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDD90\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDD90\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDD90\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDD90️\",\n    \"\\uD83D\\uDD95\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDD95\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDD95\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDD95\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDD95\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDD95\",\n    \"\\uD83D\\uDD96\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDD96\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDD96\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDD96\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDD96\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDD96\",\n    \"\\uD83D\\uDDA4\",\n    \"\\uD83D\\uDDA5️\",\n    \"\\uD83D\\uDDA8️\",\n    \"\\uD83D\\uDDB1️\",\n    \"\\uD83D\\uDDB2️\",\n    \"\\uD83D\\uDDBC️\",\n    \"\\uD83D\\uDDC2️\",\n    \"\\uD83D\\uDDC3️\",\n    \"\\uD83D\\uDDC4️\",\n    \"\\uD83D\\uDDD1️\",\n    \"\\uD83D\\uDDD2️\",\n    \"\\uD83D\\uDDD3️\",\n    \"\\uD83D\\uDDDC️\",\n    \"\\uD83D\\uDDDD️\",\n    \"\\uD83D\\uDDDE️\",\n    \"\\uD83D\\uDDE1️\",\n    \"\\uD83D\\uDDE3️\",\n    \"\\uD83D\\uDDE8️\",\n    \"\\uD83D\\uDDEF️\",\n    \"\\uD83D\\uDDF3️\",\n    \"\\uD83D\\uDDFA️\",\n    \"\\uD83D\\uDDFB\",\n    \"\\uD83D\\uDDFC\",\n    \"\\uD83D\\uDDFD\",\n    \"\\uD83D\\uDDFE\",\n    \"\\uD83D\\uDDFF\",\n    \"\\uD83D\\uDE00\",\n    \"\\uD83D\\uDE01\",\n    \"\\uD83D\\uDE02\",\n    \"\\uD83D\\uDE03\",\n    \"\\uD83D\\uDE04\",\n    \"\\uD83D\\uDE05\",\n    \"\\uD83D\\uDE06\",\n    \"\\uD83D\\uDE07\",\n    \"\\uD83D\\uDE08\",\n    \"\\uD83D\\uDE09\",\n    \"\\uD83D\\uDE0A\",\n    \"\\uD83D\\uDE0B\",\n    \"\\uD83D\\uDE0C\",\n    \"\\uD83D\\uDE0D\",\n    \"\\uD83D\\uDE0E\",\n    \"\\uD83D\\uDE0F\",\n    \"\\uD83D\\uDE10\",\n    \"\\uD83D\\uDE11\",\n    \"\\uD83D\\uDE12\",\n    \"\\uD83D\\uDE13\",\n    \"\\uD83D\\uDE14\",\n    \"\\uD83D\\uDE15\",\n    \"\\uD83D\\uDE16\",\n    \"\\uD83D\\uDE17\",\n    \"\\uD83D\\uDE18\",\n    \"\\uD83D\\uDE19\",\n    \"\\uD83D\\uDE1A\",\n    \"\\uD83D\\uDE1B\",\n    \"\\uD83D\\uDE1C\",\n    \"\\uD83D\\uDE1D\",\n    \"\\uD83D\\uDE1E\",\n    \"\\uD83D\\uDE1F\",\n    \"\\uD83D\\uDE20\",\n    \"\\uD83D\\uDE21\",\n    \"\\uD83D\\uDE22\",\n    \"\\uD83D\\uDE23\",\n    \"\\uD83D\\uDE24\",\n    \"\\uD83D\\uDE25\",\n    \"\\uD83D\\uDE26\",\n    \"\\uD83D\\uDE27\",\n    \"\\uD83D\\uDE28\",\n    \"\\uD83D\\uDE29\",\n    \"\\uD83D\\uDE2A\",\n    \"\\uD83D\\uDE2B\",\n    \"\\uD83D\\uDE2C\",\n    \"\\uD83D\\uDE2D\",\n    \"\\uD83D\\uDE2E\",\n    \"\\uD83D\\uDE2F\",\n    \"\\uD83D\\uDE30\",\n    \"\\uD83D\\uDE31\",\n    \"\\uD83D\\uDE32\",\n    \"\\uD83D\\uDE33\",\n    \"\\uD83D\\uDE34\",\n    \"\\uD83D\\uDE35\",\n    \"\\uD83D\\uDE36\",\n    \"\\uD83D\\uDE37\",\n    \"\\uD83D\\uDE38\",\n    \"\\uD83D\\uDE39\",\n    \"\\uD83D\\uDE3A\",\n    \"\\uD83D\\uDE3B\",\n    \"\\uD83D\\uDE3C\",\n    \"\\uD83D\\uDE3D\",\n    \"\\uD83D\\uDE3E\",\n    \"\\uD83D\\uDE3F\",\n    \"\\uD83D\\uDE40\",\n    \"\\uD83D\\uDE41\",\n    \"\\uD83D\\uDE42\",\n    \"\\uD83D\\uDE43\",\n    \"\\uD83D\\uDE44\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDE45\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE45‍♀️\",\n    \"\\uD83D\\uDE45‍♂️\",\n    \"\\uD83D\\uDE45\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDE46\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE46‍♀️\",\n    \"\\uD83D\\uDE46‍♂️\",\n    \"\\uD83D\\uDE46\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDE47\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE47‍♀️\",\n    \"\\uD83D\\uDE47‍♂️\",\n    \"\\uD83D\\uDE47\",\n    \"\\uD83D\\uDE48\",\n    \"\\uD83D\\uDE49\",\n    \"\\uD83D\\uDE4A\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDE4B\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE4B‍♀️\",\n    \"\\uD83D\\uDE4B‍♂️\",\n    \"\\uD83D\\uDE4B\",\n    \"\\uD83D\\uDE4C\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE4C\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE4C\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE4C\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE4C\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE4C\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDE4D\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE4D‍♀️\",\n    \"\\uD83D\\uDE4D‍♂️\",\n    \"\\uD83D\\uDE4D\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDE4E\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE4E‍♀️\",\n    \"\\uD83D\\uDE4E‍♂️\",\n    \"\\uD83D\\uDE4E\",\n    \"\\uD83D\\uDE4F\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDE4F\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDE4F\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDE4F\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDE4F\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDE4F\",\n    \"\\uD83D\\uDE80\",\n    \"\\uD83D\\uDE81\",\n    \"\\uD83D\\uDE82\",\n    \"\\uD83D\\uDE83\",\n    \"\\uD83D\\uDE84\",\n    \"\\uD83D\\uDE85\",\n    \"\\uD83D\\uDE86\",\n    \"\\uD83D\\uDE87\",\n    \"\\uD83D\\uDE88\",\n    \"\\uD83D\\uDE89\",\n    \"\\uD83D\\uDE8A\",\n    \"\\uD83D\\uDE8B\",\n    \"\\uD83D\\uDE8C\",\n    \"\\uD83D\\uDE8D\",\n    \"\\uD83D\\uDE8E\",\n    \"\\uD83D\\uDE8F\",\n    \"\\uD83D\\uDE90\",\n    \"\\uD83D\\uDE91\",\n    \"\\uD83D\\uDE92\",\n    \"\\uD83D\\uDE93\",\n    \"\\uD83D\\uDE94\",\n    \"\\uD83D\\uDE95\",\n    \"\\uD83D\\uDE96\",\n    \"\\uD83D\\uDE97\",\n    \"\\uD83D\\uDE98\",\n    \"\\uD83D\\uDE99\",\n    \"\\uD83D\\uDE9A\",\n    \"\\uD83D\\uDE9B\",\n    \"\\uD83D\\uDE9C\",\n    \"\\uD83D\\uDE9D\",\n    \"\\uD83D\\uDE9E\",\n    \"\\uD83D\\uDE9F\",\n    \"\\uD83D\\uDEA0\",\n    \"\\uD83D\\uDEA1\",\n    \"\\uD83D\\uDEA2\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDEA3\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDEA3‍♀️\",\n    \"\\uD83D\\uDEA3‍♂️\",\n    \"\\uD83D\\uDEA3\",\n    \"\\uD83D\\uDEA4\",\n    \"\\uD83D\\uDEA5\",\n    \"\\uD83D\\uDEA6\",\n    \"\\uD83D\\uDEA7\",\n    \"\\uD83D\\uDEA8\",\n    \"\\uD83D\\uDEA9\",\n    \"\\uD83D\\uDEAA\",\n    \"\\uD83D\\uDEAB\",\n    \"\\uD83D\\uDEAC\",\n    \"\\uD83D\\uDEAD\",\n    \"\\uD83D\\uDEAE\",\n    \"\\uD83D\\uDEAF\",\n    \"\\uD83D\\uDEB0\",\n    \"\\uD83D\\uDEB1\",\n    \"\\uD83D\\uDEB2\",\n    \"\\uD83D\\uDEB3\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDEB4\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDEB4‍♀️\",\n    \"\\uD83D\\uDEB4‍♂️\",\n    \"\\uD83D\\uDEB4\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDEB5\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDEB5‍♀️\",\n    \"\\uD83D\\uDEB5‍♂️\",\n    \"\\uD83D\\uDEB5\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83D\\uDEB6\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDEB6‍♀️\",\n    \"\\uD83D\\uDEB6‍♂️\",\n    \"\\uD83D\\uDEB6\",\n    \"\\uD83D\\uDEB7\",\n    \"\\uD83D\\uDEB8\",\n    \"\\uD83D\\uDEB9\",\n    \"\\uD83D\\uDEBA\",\n    \"\\uD83D\\uDEBB\",\n    \"\\uD83D\\uDEBC\",\n    \"\\uD83D\\uDEBD\",\n    \"\\uD83D\\uDEBE\",\n    \"\\uD83D\\uDEBF\",\n    \"\\uD83D\\uDEC0\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDEC0\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDEC0\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDEC0\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDEC0\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDEC0\",\n    \"\\uD83D\\uDEC1\",\n    \"\\uD83D\\uDEC2\",\n    \"\\uD83D\\uDEC3\",\n    \"\\uD83D\\uDEC4\",\n    \"\\uD83D\\uDEC5\",\n    \"\\uD83D\\uDECB️\",\n    \"\\uD83D\\uDECC\\uD83C\\uDFFB\",\n    \"\\uD83D\\uDECC\\uD83C\\uDFFC\",\n    \"\\uD83D\\uDECC\\uD83C\\uDFFD\",\n    \"\\uD83D\\uDECC\\uD83C\\uDFFE\",\n    \"\\uD83D\\uDECC\\uD83C\\uDFFF\",\n    \"\\uD83D\\uDECC\",\n    \"\\uD83D\\uDECD️\",\n    \"\\uD83D\\uDECE️\",\n    \"\\uD83D\\uDECF️\",\n    \"\\uD83D\\uDED0\",\n    \"\\uD83D\\uDED1\",\n    \"\\uD83D\\uDED2\",\n    \"\\uD83D\\uDED5\",\n    \"\\uD83D\\uDEE0️\",\n    \"\\uD83D\\uDEE1️\",\n    \"\\uD83D\\uDEE2️\",\n    \"\\uD83D\\uDEE3️\",\n    \"\\uD83D\\uDEE4️\",\n    \"\\uD83D\\uDEE5️\",\n    \"\\uD83D\\uDEE9️\",\n    \"\\uD83D\\uDEEB\",\n    \"\\uD83D\\uDEEC\",\n    \"\\uD83D\\uDEF0️\",\n    \"\\uD83D\\uDEF3️\",\n    \"\\uD83D\\uDEF4\",\n    \"\\uD83D\\uDEF5\",\n    \"\\uD83D\\uDEF6\",\n    \"\\uD83D\\uDEF7\",\n    \"\\uD83D\\uDEF8\",\n    \"\\uD83D\\uDEF9\",\n    \"\\uD83D\\uDEFA\",\n    \"\\uD83D\\uDFE0\",\n    \"\\uD83D\\uDFE1\",\n    \"\\uD83D\\uDFE2\",\n    \"\\uD83D\\uDFE3\",\n    \"\\uD83D\\uDFE4\",\n    \"\\uD83D\\uDFE5\",\n    \"\\uD83D\\uDFE6\",\n    \"\\uD83D\\uDFE7\",\n    \"\\uD83D\\uDFE8\",\n    \"\\uD83D\\uDFE9\",\n    \"\\uD83D\\uDFEA\",\n    \"\\uD83D\\uDFEB\",\n    \"\\uD83E\\uDD0D\",\n    \"\\uD83E\\uDD0E\",\n    \"\\uD83E\\uDD0F\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD0F\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD0F\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD0F\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD0F\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD0F\",\n    \"\\uD83E\\uDD10\",\n    \"\\uD83E\\uDD11\",\n    \"\\uD83E\\uDD12\",\n    \"\\uD83E\\uDD13\",\n    \"\\uD83E\\uDD14\",\n    \"\\uD83E\\uDD15\",\n    \"\\uD83E\\uDD16\",\n    \"\\uD83E\\uDD17\",\n    \"\\uD83E\\uDD18\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD18\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD18\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD18\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD18\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD18\",\n    \"\\uD83E\\uDD19\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD19\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD19\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD19\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD19\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD19\",\n    \"\\uD83E\\uDD1A\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD1A\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD1A\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD1A\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD1A\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD1A\",\n    \"\\uD83E\\uDD1B\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD1B\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD1B\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD1B\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD1B\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD1B\",\n    \"\\uD83E\\uDD1C\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD1C\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD1C\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD1C\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD1C\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD1C\",\n    \"\\uD83E\\uDD1D\",\n    \"\\uD83E\\uDD1E\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD1E\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD1E\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD1E\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD1E\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD1E\",\n    \"\\uD83E\\uDD1F\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD1F\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD1F\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD1F\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD1F\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD1F\",\n    \"\\uD83E\\uDD20\",\n    \"\\uD83E\\uDD21\",\n    \"\\uD83E\\uDD22\",\n    \"\\uD83E\\uDD23\",\n    \"\\uD83E\\uDD24\",\n    \"\\uD83E\\uDD25\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD26\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD26‍♀️\",\n    \"\\uD83E\\uDD26‍♂️\",\n    \"\\uD83E\\uDD26\",\n    \"\\uD83E\\uDD27\",\n    \"\\uD83E\\uDD28\",\n    \"\\uD83E\\uDD29\",\n    \"\\uD83E\\uDD2A\",\n    \"\\uD83E\\uDD2B\",\n    \"\\uD83E\\uDD2C\",\n    \"\\uD83E\\uDD2D\",\n    \"\\uD83E\\uDD2E\",\n    \"\\uD83E\\uDD2F\",\n    \"\\uD83E\\uDD30\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD30\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD30\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD30\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD30\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD30\",\n    \"\\uD83E\\uDD31\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD31\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD31\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD31\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD31\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD31\",\n    \"\\uD83E\\uDD32\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD32\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD32\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD32\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD32\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD32\",\n    \"\\uD83E\\uDD33\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD33\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD33\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD33\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD33\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD33\",\n    \"\\uD83E\\uDD34\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD34\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD34\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD34\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD34\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD34\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD35\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD35‍♀️\",\n    \"\\uD83E\\uDD35‍♂️\",\n    \"\\uD83E\\uDD35\",\n    \"\\uD83E\\uDD36\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD36\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD36\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD36\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD36\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD36\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD37\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD37‍♀️\",\n    \"\\uD83E\\uDD37‍♂️\",\n    \"\\uD83E\\uDD37\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD38\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD38‍♀️\",\n    \"\\uD83E\\uDD38‍♂️\",\n    \"\\uD83E\\uDD38\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD39\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD39‍♀️\",\n    \"\\uD83E\\uDD39‍♂️\",\n    \"\\uD83E\\uDD39\",\n    \"\\uD83E\\uDD3A\",\n    \"\\uD83E\\uDD3C‍♀️\",\n    \"\\uD83E\\uDD3C‍♂️\",\n    \"\\uD83E\\uDD3C\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD3D\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD3D‍♀️\",\n    \"\\uD83E\\uDD3D‍♂️\",\n    \"\\uD83E\\uDD3D\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDD3E\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDD3E‍♀️\",\n    \"\\uD83E\\uDD3E‍♂️\",\n    \"\\uD83E\\uDD3E\",\n    \"\\uD83E\\uDD3F\",\n    \"\\uD83E\\uDD40\",\n    \"\\uD83E\\uDD41\",\n    \"\\uD83E\\uDD42\",\n    \"\\uD83E\\uDD43\",\n    \"\\uD83E\\uDD44\",\n    \"\\uD83E\\uDD45\",\n    \"\\uD83E\\uDD47\",\n    \"\\uD83E\\uDD48\",\n    \"\\uD83E\\uDD49\",\n    \"\\uD83E\\uDD4A\",\n    \"\\uD83E\\uDD4B\",\n    \"\\uD83E\\uDD4C\",\n    \"\\uD83E\\uDD4D\",\n    \"\\uD83E\\uDD4E\",\n    \"\\uD83E\\uDD4F\",\n    \"\\uD83E\\uDD50\",\n    \"\\uD83E\\uDD51\",\n    \"\\uD83E\\uDD52\",\n    \"\\uD83E\\uDD53\",\n    \"\\uD83E\\uDD54\",\n    \"\\uD83E\\uDD55\",\n    \"\\uD83E\\uDD56\",\n    \"\\uD83E\\uDD57\",\n    \"\\uD83E\\uDD58\",\n    \"\\uD83E\\uDD59\",\n    \"\\uD83E\\uDD5A\",\n    \"\\uD83E\\uDD5B\",\n    \"\\uD83E\\uDD5C\",\n    \"\\uD83E\\uDD5D\",\n    \"\\uD83E\\uDD5E\",\n    \"\\uD83E\\uDD5F\",\n    \"\\uD83E\\uDD60\",\n    \"\\uD83E\\uDD61\",\n    \"\\uD83E\\uDD62\",\n    \"\\uD83E\\uDD63\",\n    \"\\uD83E\\uDD64\",\n    \"\\uD83E\\uDD65\",\n    \"\\uD83E\\uDD66\",\n    \"\\uD83E\\uDD67\",\n    \"\\uD83E\\uDD68\",\n    \"\\uD83E\\uDD69\",\n    \"\\uD83E\\uDD6A\",\n    \"\\uD83E\\uDD6B\",\n    \"\\uD83E\\uDD6C\",\n    \"\\uD83E\\uDD6D\",\n    \"\\uD83E\\uDD6E\",\n    \"\\uD83E\\uDD6F\",\n    \"\\uD83E\\uDD70\",\n    \"\\uD83E\\uDD71\",\n    \"\\uD83E\\uDD73\",\n    \"\\uD83E\\uDD74\",\n    \"\\uD83E\\uDD75\",\n    \"\\uD83E\\uDD76\",\n    \"\\uD83E\\uDD7A\",\n    \"\\uD83E\\uDD7B\",\n    \"\\uD83E\\uDD7C\",\n    \"\\uD83E\\uDD7D\",\n    \"\\uD83E\\uDD7E\",\n    \"\\uD83E\\uDD7F\",\n    \"\\uD83E\\uDD80\",\n    \"\\uD83E\\uDD81\",\n    \"\\uD83E\\uDD82\",\n    \"\\uD83E\\uDD83\",\n    \"\\uD83E\\uDD84\",\n    \"\\uD83E\\uDD85\",\n    \"\\uD83E\\uDD86\",\n    \"\\uD83E\\uDD87\",\n    \"\\uD83E\\uDD88\",\n    \"\\uD83E\\uDD89\",\n    \"\\uD83E\\uDD8A\",\n    \"\\uD83E\\uDD8B\",\n    \"\\uD83E\\uDD8C\",\n    \"\\uD83E\\uDD8D\",\n    \"\\uD83E\\uDD8E\",\n    \"\\uD83E\\uDD8F\",\n    \"\\uD83E\\uDD90\",\n    \"\\uD83E\\uDD91\",\n    \"\\uD83E\\uDD92\",\n    \"\\uD83E\\uDD93\",\n    \"\\uD83E\\uDD94\",\n    \"\\uD83E\\uDD95\",\n    \"\\uD83E\\uDD96\",\n    \"\\uD83E\\uDD97\",\n    \"\\uD83E\\uDD98\",\n    \"\\uD83E\\uDD99\",\n    \"\\uD83E\\uDD9A\",\n    \"\\uD83E\\uDD9B\",\n    \"\\uD83E\\uDD9C\",\n    \"\\uD83E\\uDD9D\",\n    \"\\uD83E\\uDD9E\",\n    \"\\uD83E\\uDD9F\",\n    \"\\uD83E\\uDDA0\",\n    \"\\uD83E\\uDDA1\",\n    \"\\uD83E\\uDDA2\",\n    \"\\uD83E\\uDDA5\",\n    \"\\uD83E\\uDDA6\",\n    \"\\uD83E\\uDDA7\",\n    \"\\uD83E\\uDDA8\",\n    \"\\uD83E\\uDDA9\",\n    \"\\uD83E\\uDDAA\",\n    \"\\uD83E\\uDDAE\",\n    \"\\uD83E\\uDDAF\",\n    \"\\uD83E\\uDDB0\",\n    \"\\uD83E\\uDDB1\",\n    \"\\uD83E\\uDDB2\",\n    \"\\uD83E\\uDDB3\",\n    \"\\uD83E\\uDDB4\",\n    \"\\uD83E\\uDDB5\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDB5\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDB5\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDB5\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDB5\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDB5\",\n    \"\\uD83E\\uDDB6\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDB6\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDB6\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDB6\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDB6\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDB6\",\n    \"\\uD83E\\uDDB7\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDB8\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDB8‍♀️\",\n    \"\\uD83E\\uDDB8‍♂️\",\n    \"\\uD83E\\uDDB8\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDB9\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDB9‍♀️\",\n    \"\\uD83E\\uDDB9‍♂️\",\n    \"\\uD83E\\uDDB9\",\n    \"\\uD83E\\uDDBA\",\n    \"\\uD83E\\uDDBB\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDBB\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDBB\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDBB\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDBB\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDBB\",\n    \"\\uD83E\\uDDBC\",\n    \"\\uD83E\\uDDBD\",\n    \"\\uD83E\\uDDBE\",\n    \"\\uD83E\\uDDBF\",\n    \"\\uD83E\\uDDC0\",\n    \"\\uD83E\\uDDC1\",\n    \"\\uD83E\\uDDC2\",\n    \"\\uD83E\\uDDC3\",\n    \"\\uD83E\\uDDC4\",\n    \"\\uD83E\\uDDC5\",\n    \"\\uD83E\\uDDC6\",\n    \"\\uD83E\\uDDC7\",\n    \"\\uD83E\\uDDC8\",\n    \"\\uD83E\\uDDC9\",\n    \"\\uD83E\\uDDCA\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDCD\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDCD‍♀️\",\n    \"\\uD83E\\uDDCD‍♂️\",\n    \"\\uD83E\\uDDCD\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDCE\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDCE‍♀️\",\n    \"\\uD83E\\uDDCE‍♂️\",\n    \"\\uD83E\\uDDCE\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDCF\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDCF‍♀️\",\n    \"\\uD83E\\uDDCF‍♂️\",\n    \"\\uD83E\\uDDCF\",\n    \"\\uD83E\\uDDD0\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFB‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFC‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFD‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFE‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFF‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD1\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD1‍\\uD83E\\uDD1D‍\\uD83E\\uDDD1\",\n    \"\\uD83E\\uDDD1\",\n    \"\\uD83E\\uDDD2\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD2\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD2\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD2\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD2\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD2\",\n    \"\\uD83E\\uDDD3\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD3\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD3\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD3\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD3\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD3\",\n    \"\\uD83E\\uDDD4\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD4\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD4\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD4\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD4\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD4\",\n    \"\\uD83E\\uDDD5\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD5\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD5\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD5\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD5\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD5\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDD6\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD6‍♀️\",\n    \"\\uD83E\\uDDD6‍♂️\",\n    \"\\uD83E\\uDDD6\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDD7\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD7‍♀️\",\n    \"\\uD83E\\uDDD7‍♂️\",\n    \"\\uD83E\\uDDD7\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDD8\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD8‍♀️\",\n    \"\\uD83E\\uDDD8‍♂️\",\n    \"\\uD83E\\uDDD8\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDD9\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDD9‍♀️\",\n    \"\\uD83E\\uDDD9‍♂️\",\n    \"\\uD83E\\uDDD9\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDDA\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDDA‍♀️\",\n    \"\\uD83E\\uDDDA‍♂️\",\n    \"\\uD83E\\uDDDA\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDDB\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDDB‍♀️\",\n    \"\\uD83E\\uDDDB‍♂️\",\n    \"\\uD83E\\uDDDB\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDDC\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDDC‍♀️\",\n    \"\\uD83E\\uDDDC‍♂️\",\n    \"\\uD83E\\uDDDC\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFB‍♀️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFB‍♂️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFB\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFC‍♀️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFC‍♂️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFC\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFD‍♀️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFD‍♂️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFD\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFE‍♀️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFE‍♂️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFE\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFF‍♀️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFF‍♂️\",\n    \"\\uD83E\\uDDDD\\uD83C\\uDFFF\",\n    \"\\uD83E\\uDDDD‍♀️\",\n    \"\\uD83E\\uDDDD‍♂️\",\n    \"\\uD83E\\uDDDD\",\n    \"\\uD83E\\uDDDE‍♀️\",\n    \"\\uD83E\\uDDDE‍♂️\",\n    \"\\uD83E\\uDDDE\",\n    \"\\uD83E\\uDDDF‍♀️\",\n    \"\\uD83E\\uDDDF‍♂️\",\n    \"\\uD83E\\uDDDF\",\n    \"\\uD83E\\uDDE0\",\n    \"\\uD83E\\uDDE1\",\n    \"\\uD83E\\uDDE2\",\n    \"\\uD83E\\uDDE3\",\n    \"\\uD83E\\uDDE4\",\n    \"\\uD83E\\uDDE5\",\n    \"\\uD83E\\uDDE6\",\n    \"\\uD83E\\uDDE7\",\n    \"\\uD83E\\uDDE8\",\n    \"\\uD83E\\uDDE9\",\n    \"\\uD83E\\uDDEA\",\n    \"\\uD83E\\uDDEB\",\n    \"\\uD83E\\uDDEC\",\n    \"\\uD83E\\uDDED\",\n    \"\\uD83E\\uDDEE\",\n    \"\\uD83E\\uDDEF\",\n    \"\\uD83E\\uDDF0\",\n    \"\\uD83E\\uDDF1\",\n    \"\\uD83E\\uDDF2\",\n    \"\\uD83E\\uDDF3\",\n    \"\\uD83E\\uDDF4\",\n    \"\\uD83E\\uDDF5\",\n    \"\\uD83E\\uDDF6\",\n    \"\\uD83E\\uDDF7\",\n    \"\\uD83E\\uDDF8\",\n    \"\\uD83E\\uDDF9\",\n    \"\\uD83E\\uDDFA\",\n    \"\\uD83E\\uDDFB\",\n    \"\\uD83E\\uDDFC\",\n    \"\\uD83E\\uDDFD\",\n    \"\\uD83E\\uDDFE\",\n    \"\\uD83E\\uDDFF\",\n    \"\\uD83E\\uDE70\",\n    \"\\uD83E\\uDE71\",\n    \"\\uD83E\\uDE72\",\n    \"\\uD83E\\uDE73\",\n    \"\\uD83E\\uDE78\",\n    \"\\uD83E\\uDE79\",\n    \"\\uD83E\\uDE7A\",\n    \"\\uD83E\\uDE80\",\n    \"\\uD83E\\uDE81\",\n    \"\\uD83E\\uDE82\",\n    \"\\uD83E\\uDE90\",\n    \"\\uD83E\\uDE91\",\n    \"\\uD83E\\uDE92\",\n    \"\\uD83E\\uDE93\",\n    \"\\uD83E\\uDE94\",\n    \"\\uD83E\\uDE95\",\n    \"‼️\",\n    \"⁉️\",\n    \"™️\",\n    \"ℹ️\",\n    \"↔️\",\n    \"↕️\",\n    \"↖️\",\n    \"↗️\",\n    \"↘️\",\n    \"↙️\",\n    \"↩️\",\n    \"↪️\",\n    \"#⃣\",\n    \"⌚️\",\n    \"⌛️\",\n    \"⌨️\",\n    \"⏏️\",\n    \"⏩\",\n    \"⏪\",\n    \"⏫\",\n    \"⏬\",\n    \"⏭️\",\n    \"⏮️\",\n    \"⏯️\",\n    \"⏰\",\n    \"⏱️\",\n    \"⏲️\",\n    \"⏳\",\n    \"⏸️\",\n    \"⏹️\",\n    \"⏺️\",\n    \"Ⓜ️\",\n    \"▪️\",\n    \"▫️\",\n    \"▶️\",\n    \"◀️\",\n    \"◻️\",\n    \"◼️\",\n    \"◽️\",\n    \"◾️\",\n    \"☀️\",\n    \"☁️\",\n    \"☂️\",\n    \"☃️\",\n    \"☄️\",\n    \"☎️\",\n    \"☑️\",\n    \"☔️\",\n    \"☕️\",\n    \"☘️\",\n    \"☝\\uD83C\\uDFFB\",\n    \"☝\\uD83C\\uDFFC\",\n    \"☝\\uD83C\\uDFFD\",\n    \"☝\\uD83C\\uDFFE\",\n    \"☝\\uD83C\\uDFFF\",\n    \"☝️\",\n    \"☠️\",\n    \"☢️\",\n    \"☣️\",\n    \"☦️\",\n    \"☪️\",\n    \"☮️\",\n    \"☯️\",\n    \"☸️\",\n    \"☹️\",\n    \"☺️\",\n    \"♀️\",\n    \"♂️\",\n    \"♈️\",\n    \"♉️\",\n    \"♊️\",\n    \"♋️\",\n    \"♌️\",\n    \"♍️\",\n    \"♎️\",\n    \"♏️\",\n    \"♐️\",\n    \"♑️\",\n    \"♒️\",\n    \"♓️\",\n    \"♟️\",\n    \"♠️\",\n    \"♣️\",\n    \"♥️\",\n    \"♦️\",\n    \"♨️\",\n    \"♻️\",\n    \"♾\",\n    \"♿️\",\n    \"⚒️\",\n    \"⚓️\",\n    \"⚔️\",\n    \"⚕️\",\n    \"⚖️\",\n    \"⚗️\",\n    \"⚙️\",\n    \"⚛️\",\n    \"⚜️\",\n    \"⚠️\",\n    \"⚡️\",\n    \"⚪️\",\n    \"⚫️\",\n    \"⚰️\",\n    \"⚱️\",\n    \"⚽️\",\n    \"⚾️\",\n    \"⛄️\",\n    \"⛅️\",\n    \"⛈️\",\n    \"⛎\",\n    \"⛏️\",\n    \"⛑️\",\n    \"⛓️\",\n    \"⛔️\",\n    \"⛩️\",\n    \"⛪️\",\n    \"⛰️\",\n    \"⛱️\",\n    \"⛲️\",\n    \"⛳️\",\n    \"⛴️\",\n    \"⛵️\",\n    \"⛷\\uD83C\\uDFFB\",\n    \"⛷\\uD83C\\uDFFC\",\n    \"⛷\\uD83C\\uDFFD\",\n    \"⛷\\uD83C\\uDFFE\",\n    \"⛷\\uD83C\\uDFFF\",\n    \"⛷️\",\n    \"⛸️\",\n    \"⛹\\uD83C\\uDFFB‍♀️\",\n    \"⛹\\uD83C\\uDFFB‍♂️\",\n    \"⛹\\uD83C\\uDFFB\",\n    \"⛹\\uD83C\\uDFFC‍♀️\",\n    \"⛹\\uD83C\\uDFFC‍♂️\",\n    \"⛹\\uD83C\\uDFFC\",\n    \"⛹\\uD83C\\uDFFD‍♀️\",\n    \"⛹\\uD83C\\uDFFD‍♂️\",\n    \"⛹\\uD83C\\uDFFD\",\n    \"⛹\\uD83C\\uDFFE‍♀️\",\n    \"⛹\\uD83C\\uDFFE‍♂️\",\n    \"⛹\\uD83C\\uDFFE\",\n    \"⛹\\uD83C\\uDFFF‍♀️\",\n    \"⛹\\uD83C\\uDFFF‍♂️\",\n    \"⛹\\uD83C\\uDFFF\",\n    \"⛹️‍♀️\",\n    \"⛹️‍♂️\",\n    \"⛹️\",\n    \"⛺️\",\n    \"⛽️\",\n    \"✂️\",\n    \"✅\",\n    \"✈️\",\n    \"✉️\",\n    \"✊\\uD83C\\uDFFB\",\n    \"✊\\uD83C\\uDFFC\",\n    \"✊\\uD83C\\uDFFD\",\n    \"✊\\uD83C\\uDFFE\",\n    \"✊\\uD83C\\uDFFF\",\n    \"✊\",\n    \"✋\\uD83C\\uDFFB\",\n    \"✋\\uD83C\\uDFFC\",\n    \"✋\\uD83C\\uDFFD\",\n    \"✋\\uD83C\\uDFFE\",\n    \"✋\\uD83C\\uDFFF\",\n    \"✋\",\n    \"✌\\uD83C\\uDFFB\",\n    \"✌\\uD83C\\uDFFC\",\n    \"✌\\uD83C\\uDFFD\",\n    \"✌\\uD83C\\uDFFE\",\n    \"✌\\uD83C\\uDFFF\",\n    \"✌️\",\n    \"✍\\uD83C\\uDFFB\",\n    \"✍\\uD83C\\uDFFC\",\n    \"✍\\uD83C\\uDFFD\",\n    \"✍\\uD83C\\uDFFE\",\n    \"✍\\uD83C\\uDFFF\",\n    \"✍️\",\n    \"✏️\",\n    \"✒️\",\n    \"✔️\",\n    \"✖️\",\n    \"✝️\",\n    \"✡️\",\n    \"✨\",\n    \"✳️\",\n    \"✴️\",\n    \"❄️\",\n    \"❇️\",\n    \"❌\",\n    \"❎\",\n    \"❓\",\n    \"❔\",\n    \"❕\",\n    \"❗️\",\n    \"❣️\",\n    \"❤️\",\n    \"➕\",\n    \"➖\",\n    \"➗\",\n    \"➡️\",\n    \"➰\",\n    \"➿\",\n    \"⤴️\",\n    \"⤵️\",\n    \"*⃣\",\n    \"⬅️\",\n    \"⬆️\",\n    \"⬇️\",\n    \"⬛️\",\n    \"⬜️\",\n    \"⭐️\",\n    \"⭕️\",\n    \"0⃣\",\n    \"〰️\",\n    \"〽️\",\n    \"1⃣\",\n    \"2⃣\",\n    \"㊗️\",\n    \"㊙️\",\n    \"3⃣\",\n    \"4⃣\",\n    \"5⃣\",\n    \"6⃣\",\n    \"7⃣\",\n    \"8⃣\",\n    \"9⃣\",\n    \"\\xa9️\",\n    \"\\xae️\",\n    \"\"\n];\n\nvar path = require$$0__default[\"default\"];\nvar emojisList = emojisList$1;\nvar getHashDigest$1 = getHashDigest_1;\nvar emojiRegex = /[\\uD800-\\uDFFF]./;\nvar emojiList = emojisList.filter(function(emoji) {\n    return emojiRegex.test(emoji);\n});\nvar emojiCache = {};\nfunction encodeStringToEmoji(content, length) {\n    if (emojiCache[content]) {\n        return emojiCache[content];\n    }\n    length = length || 1;\n    var emojis = [];\n    do {\n        if (!emojiList.length) {\n            throw new Error(\"Ran out of emoji\");\n        }\n        var index = Math.floor(Math.random() * emojiList.length);\n        emojis.push(emojiList[index]);\n        emojiList.splice(index, 1);\n    }while (--length > 0);\n    var emojiEncoding = emojis.join(\"\");\n    emojiCache[content] = emojiEncoding;\n    return emojiEncoding;\n}\nfunction interpolateName$1(loaderContext, name, options) {\n    var filename;\n    var hasQuery = loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n    if (typeof name === \"function\") {\n        filename = name(loaderContext.resourcePath, hasQuery ? loaderContext.resourceQuery : undefined);\n    } else {\n        filename = name || \"[hash].[ext]\";\n    }\n    var context = options.context;\n    var content = options.content;\n    var regExp = options.regExp;\n    var ext = \"bin\";\n    var basename = \"file\";\n    var directory = \"\";\n    var folder = \"\";\n    var query = \"\";\n    if (loaderContext.resourcePath) {\n        var parsed = path.parse(loaderContext.resourcePath);\n        var resourcePath = loaderContext.resourcePath;\n        if (parsed.ext) {\n            ext = parsed.ext.substr(1);\n        }\n        if (parsed.dir) {\n            basename = parsed.name;\n            resourcePath = parsed.dir + path.sep;\n        }\n        if (typeof context !== \"undefined\") {\n            directory = path.relative(context, resourcePath + \"_\").replace(/\\\\/g, \"/\").replace(/\\.\\.(\\/)?/g, \"_$1\");\n            directory = directory.substr(0, directory.length - 1);\n        } else {\n            directory = resourcePath.replace(/\\\\/g, \"/\").replace(/\\.\\.(\\/)?/g, \"_$1\");\n        }\n        if (directory.length === 1) {\n            directory = \"\";\n        } else if (directory.length > 1) {\n            folder = path.basename(directory);\n        }\n    }\n    if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n        query = loaderContext.resourceQuery;\n        var hashIdx = query.indexOf(\"#\");\n        if (hashIdx >= 0) {\n            query = query.substr(0, hashIdx);\n        }\n    }\n    var url = filename;\n    if (content) {\n        // Match hash template\n        url = url// `hash` and `contenthash` are same in `loader-utils` context\n        // let's keep `hash` for backward compatibility\n        .replace(/\\[(?:([^[:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi, function(all, hashType, digestType, maxLength) {\n            return getHashDigest$1(content, hashType, digestType, parseInt(maxLength, 10));\n        }).replace(/\\[emoji(?::(\\d+))?\\]/gi, function(all, length) {\n            return encodeStringToEmoji(content, parseInt(length, 10));\n        });\n    }\n    url = url.replace(/\\[ext\\]/gi, function() {\n        return ext;\n    }).replace(/\\[name\\]/gi, function() {\n        return basename;\n    }).replace(/\\[path\\]/gi, function() {\n        return directory;\n    }).replace(/\\[folder\\]/gi, function() {\n        return folder;\n    }).replace(/\\[query\\]/gi, function() {\n        return query;\n    });\n    if (regExp && loaderContext.resourcePath) {\n        var match = loaderContext.resourcePath.match(new RegExp(regExp));\n        match && match.forEach(function(matched, i) {\n            url = url.replace(new RegExp(\"\\\\[\" + i + \"\\\\]\", \"ig\"), matched);\n        });\n    }\n    if (typeof loaderContext.options === \"object\" && typeof loaderContext.options.customInterpolateName === \"function\") {\n        url = loaderContext.options.customInterpolateName.call(loaderContext, url, name, options);\n    }\n    return url;\n}\nvar interpolateName_1 = interpolateName$1;\n\nvar getOptions = getOptions_1;\nvar parseQuery = parseQuery_1;\nvar stringifyRequest = stringifyRequest_1;\nvar getRemainingRequest = getRemainingRequest_1;\nvar getCurrentRequest = getCurrentRequest_1;\nvar isUrlRequest = isUrlRequest_1;\nvar urlToRequest = urlToRequest_1;\nvar parseString = parseString_1;\nvar getHashDigest = getHashDigest_1;\nvar interpolateName = interpolateName_1;\nlib$1.getOptions = getOptions;\nlib$1.parseQuery = parseQuery;\nlib$1.stringifyRequest = stringifyRequest;\nlib$1.getRemainingRequest = getRemainingRequest;\nlib$1.getCurrentRequest = getCurrentRequest;\nlib$1.isUrlRequest = isUrlRequest;\nlib$1.urlToRequest = urlToRequest;\nlib$1.parseString = parseString;\nlib$1.getHashDigest = getHashDigest;\nlib$1.interpolateName = interpolateName;\n\nvar types = [\n    \"scoped\",\n    \"global\",\n    \"resolve\"\n];\nfunction webpack(content) {\n    if (this.cacheable) this.cacheable();\n    this.addDependency(this.resourcePath);\n    var options = Object.assign({}, lib$1.getOptions(this));\n    if (!options.type) {\n        options.type = \"scoped\";\n    }\n    // Calls type with the current file name.\n    if (typeof options.type === \"function\") {\n        options.type = options.type(this.resourcePath, {\n            query: lib$1.parseQuery(this.resourceQuery || \"?\") || {}\n        });\n    }\n    if (!types.includes(options.type)) {\n        return this.callback(\"The given `type` option is invalid. \\n\\n\" + \"Expected:\\n One of scoped|global|resolve \\n\\n\" + \"Actual:\\n \" + options.type);\n    }\n    // Allows to define the type for each individual file using a CSS comment.\n    var commentType = content.match(/\\/*\\s*@styled-jsx=(scoped|global|resolve)/);\n    if (commentType) {\n        options.type = commentType[1];\n    }\n    var output = \"import css from 'styled-jsx/css';\\n\\nconst styles = css\";\n    if (options.type === \"global\") {\n        // css.global``\n        output += \".global\";\n    } else if (options.type === \"resolve\") {\n        // css.resolve``\n        output += \".resolve\";\n    }\n    // default css``\n    // Escape backticks and backslashes: “`” ⇒ “\\`”, “\\” ⇒ “\\\\”\n    // (c) https://github.com/coox/styled-jsx-css-loader/blob/97a38e90dddf2c4b066e9247db0612c8f95302de/index.js#L6\n    output += \"`\" + content.replace(/[`\\\\]/g, function(match) {\n        return \"\\\\\" + match;\n    }) + \"`;\\n\\nexport default styles;\";\n    this.callback(null, output);\n}\n\nexports[\"default\"] = webpack;\n"
        }
    ]
}