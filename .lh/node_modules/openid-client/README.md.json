{
    "sourceFile": "node_modules/openid-client/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892952036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# openid-client\n\nopenid-client is a server side [OpenID][openid-connect] Relying Party (RP, Client) implementation for\nNode.js runtime, supports [passport][passport-url].\n\n## Implemented specs & features\n\nThe following client/RP features from OpenID Connect/OAuth2.0 specifications are implemented by\nopenid-client.\n\n- [OpenID Connect Core 1.0][feature-core]\n  - Authorization Callback\n    - Authorization Code Flow\n    - Implicit Flow\n    - Hybrid Flow\n  - UserInfo Request\n  - Offline Access / Refresh Token Grant\n  - Client Credentials Grant\n  - Client Authentication\n    - none\n    - client_secret_basic\n    - client_secret_post\n    - client_secret_jwt\n    - private_key_jwt\n  - Consuming Self-Issued OpenID Provider ID Token response\n- [OpenID Connect Discovery 1.0][feature-discovery]\n  - Discovery of OpenID Provider (Issuer) Metadata\n  - Discovery of OpenID Provider (Issuer) Metadata via user provided inputs (via [webfinger][documentation-webfinger])\n- [OpenID Connect Dynamic Client Registration 1.0][feature-registration]\n  - Dynamic Client Registration request\n  - Client initialization via registration client uri\n- [RFC7009 - OAuth 2.0 Token revocation][feature-revocation]\n  - Client Authenticated request to token revocation\n- [RFC7662 - OAuth 2.0 Token introspection][feature-introspection]\n  - Client Authenticated request to token introspection\n- [RFC8628 - OAuth 2.0 Device Authorization Grant (Device Flow)][feature-device-flow]\n- [RFC8705 - OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens][feature-mtls]\n  - Mutual TLS Client Certificate-Bound Access Tokens\n  - Metadata for Mutual TLS Endpoint Aliases\n  - Client Authentication\n    - tls_client_auth\n    - self_signed_tls_client_auth\n- [RFC9101 - OAuth 2.0 JWT-Secured Authorization Request (JAR)][feature-jar]\n- [RFC9126 - OAuth 2.0 Pushed Authorization Requests (PAR)][feature-par]\n- [RFC9449 - OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)][feature-dpop]\n- [OpenID Connect RP-Initiated Logout 1.0][feature-rp-logout]\n- [Financial-grade API Security Profile 1.0 - Part 2: Advanced (FAPI)][feature-fapi]\n- [JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)][feature-jarm]\n- [OAuth 2.0 Authorization Server Issuer Identification][feature-iss]\n\nUpdates to draft specifications are released as MINOR library versions,\nif you utilize these specification implementations consider using the tilde `~` operator in your\npackage.json since breaking changes may be introduced as part of these version updates. \n\n## [Certification](https://openid.net/certification/faq/)\n\n[<img width=\"96\" height=\"50\" align=\"right\" src=\"https://user-images.githubusercontent.com/241506/166977513-7cd710a9-7f60-4944-aebe-a658e9f36375.png\" alt=\"OpenID Certification\">](#certification)\n\n[Filip Skokan](https://github.com/panva) has [certified](https://openid.net/certification) that [this software](https://github.com/panva/node-openid-client) conforms to the Basic, Implicit, Hybrid, Config, Dynamic, FAPI 1.0, and FAPI 2.0 Relying Party Conformance Profiles of the OpenID Connectâ„¢ protocol.\n\n## Sponsor\n\n[<img height=\"65\" align=\"left\" src=\"https://cdn.auth0.com/blog/github-sponsorships/brand-evolution-logo-Auth0-horizontal-Indigo.png\" alt=\"auth0-logo\">][sponsor-auth0] If you want to quickly add OpenID Connect authentication to Node.js apps, feel free to check out Auth0's Node.js SDK and free plan. [Create an Auth0 account; it's free!][sponsor-auth0]<br><br>\n\n## Support\n\nIf you or your business use openid-client, please consider becoming a [sponsor][support-sponsor] so I can continue maintaining it and adding new features carefree.\n\n\n## Documentation\n\nThe library exposes what are essentially steps necessary to be done by a relying party consuming\nOpenID Connect Authorization Server responses or wrappers around requests to its endpoints. Aside\nfrom a generic OpenID Connect [passport][passport-url] strategy it does not expose any framework\nspecific middlewares. Those can however be built using the exposed API, one such example is [express-openid-connect][]\n\n- [openid-client API Documentation][documentation]\n  - [Issuer][documentation-issuer]\n  - [Client][documentation-client]\n  - [Customizing][documentation-customizing]\n  - [TokenSet][documentation-tokenset]\n  - [Strategy][documentation-strategy]\n  - [generators][documentation-generators]\n  - [errors][documentation-errors]\n\n## Install\n\nNode.js LTS releases Codename Erbium and newer LTS releases are supported.\n\n```console\nnpm install openid-client\n```\n\nNote: Other javascript runtimes are not supported.\nI recommend [panva/oauth4webapi][oauth4webapi], or a derivate thereof, if you're \nlooking for a similarly compliant and certified client software that's not dependent \non the Node.js runtime builtins.\n\n## Quick start\n\nDiscover an Issuer configuration using its published .well-known endpoints\n```js\nimport { Issuer } from 'openid-client';\n\nconst googleIssuer = await Issuer.discover('https://accounts.google.com');\nconsole.log('Discovered issuer %s %O', googleIssuer.issuer, googleIssuer.metadata);\n```\n\n### Authorization Code Flow\n\nAuthorization Code flow is for obtaining Access Tokens (and optionally Refresh Tokens) to use with\nthird party APIs securely as well as Refresh Tokens. In this quick start your application also uses\nPKCE instead of `state` parameter for CSRF protection.\n\nCreate a Client instance for that issuer's authorization server intended for Authorization Code\nflow.\n\n**See the [documentation][] for full API details.**\n\n```js\nconst client = new googleIssuer.Client({\n  client_id: 'zELcpfANLqY7Oqas',\n  client_secret: 'TQV5U29k1gHibH5bx1layBo0OSAvAbRT3UYW3EWrSYBB5swxjVfWUa1BS8lqzxG/0v9wruMcrGadany3',\n  redirect_uris: ['http://localhost:3000/cb'],\n  response_types: ['code'],\n  // id_token_signed_response_alg (default \"RS256\")\n  // token_endpoint_auth_method (default \"client_secret_basic\")\n}); // => Client\n```\n\nWhen you want to have your end-users authorize you need to send them to the issuer's\n`authorization_endpoint`. Consult the web framework of your choice on how to redirect but here's how\nto get the authorization endpoint's URL with parameters already encoded in the query to redirect\nto.\n\n```js\nimport { generators } from 'openid-client';\nconst code_verifier = generators.codeVerifier();\n// store the code_verifier in your framework's session mechanism, if it is a cookie based solution\n// it should be httpOnly (not readable by javascript) and encrypted.\n\nconst code_challenge = generators.codeChallenge(code_verifier);\n\nclient.authorizationUrl({\n  scope: 'openid email profile',\n  resource: 'https://my.api.example.com/resource/32178',\n  code_challenge,\n  code_challenge_method: 'S256',\n});\n```\n\nWhen end-users are redirected back to your `redirect_uri` your application consumes the callback and\npasses in the `code_verifier` to include it in the authorization code grant token exchange.\n```js\nconst params = client.callbackParams(req);\nconst tokenSet = await client.callback('https://client.example.com/callback', params, { code_verifier });\nconsole.log('received and validated tokens %j', tokenSet);\nconsole.log('validated ID Token claims %j', tokenSet.claims());\n```\n\nYou can then call the `userinfo_endpoint`.\n```js\nconst userinfo = await client.userinfo(access_token);\nconsole.log('userinfo %j', userinfo);\n```\n\nAnd later refresh the tokenSet if it had a `refresh_token`.\n```js\nconst tokenSet = await client.refresh(refresh_token);\nconsole.log('refreshed and validated tokens %j', tokenSet);\nconsole.log('refreshed ID Token claims %j', tokenSet.claims());\n```\n\n### Implicit ID Token Flow\n\nImplicit `response_type=id_token` flow is perfect for simply authenticating your end-users, assuming\nthe only job you want done is authenticating the user and then relying on your own session mechanism\nwith no need for accessing any third party APIs with an Access Token from the Authorization Server.\n\nCreate a Client instance for that issuer's authorization server intended for ID Token implicit flow.\n\n**See the [documentation][] for full API details.**\n```js\nconst client = new googleIssuer.Client({\n  client_id: 'zELcpfANLqY7Oqas',\n  redirect_uris: ['http://localhost:3000/cb'],\n  response_types: ['id_token'],\n  // id_token_signed_response_alg (default \"RS256\")\n}); // => Client\n```\n\nWhen you want to have your end-users authorize you need to send them to the issuer's\n`authorization_endpoint`. Consult the web framework of your choice on how to redirect but here's how\nto get the authorization endpoint's URL with parameters already encoded in the query to redirect\nto.\n\n```js\nimport { generators } from 'openid-client';\nconst nonce = generators.nonce();\n// store the nonce in your framework's session mechanism, if it is a cookie based solution\n// it should be httpOnly (not readable by javascript) and encrypted.\n\nclient.authorizationUrl({\n  scope: 'openid email profile',\n  response_mode: 'form_post',\n  nonce,\n});\n```\n\nWhen end-users hit back your `redirect_uri` with a POST (authorization request included `form_post`\nresponse mode) your application consumes the callback and passes the `nonce` in to include it in the\nID Token verification steps.\n```js\n// assumes req.body is populated from your web framework's body parser\nconst params = client.callbackParams(req);\nconst tokenSet = await client.callback('https://client.example.com/callback', params, { nonce });\nconsole.log('received and validated tokens %j', tokenSet);\nconsole.log('validated ID Token claims %j', tokenSet.claims());\n```\n\n### Device Authorization Grant (Device Flow)\n\n[RFC8628 - OAuth 2.0 Device Authorization Grant (Device Flow)](https://tools.ietf.org/html/rfc8628)\nis started by starting a Device Authorization Request.\n\n```js\nconst handle = await client.deviceAuthorization();\nconsole.log('User Code: ', handle.user_code);\nconsole.log('Verification URI: ', handle.verification_uri);\nconsole.log('Verification URI (complete): ', handle.verification_uri_complete);\n```\n\nThe handle represents a Device Authorization Response with the `verification_uri`, `user_code` and\nother defined response properties.\n\nYou will display the instructions to the end-user and have him directed at `verification_uri` or\n`verification_uri_complete`, afterwards you can start polling for the Device Access Token Response.\n```js\nconst tokenSet = await handle.poll();\nconsole.log('received tokens %j', tokenSet);\n```\n\nThis will poll in the defined interval and only resolve with a TokenSet once one is received. This\nwill handle the defined `authorization_pending` and `slow_down` \"soft\" errors and continue polling\nbut upon any other error it will reject. With tokenSet received you can throw away the handle.\n\n### Client Credentials Grant Flow\n\nClient Credentials flow is for obtaining Access Tokens to use with third party APIs on behalf of your application, rather than an end-user which was the case in previous examples.\n\n**See the [documentation](./docs/README.md#clientgrantbody-extras) for full API details.**\n\n```js\nconst client = new issuer.Client({\n  client_id: 'zELcpfANLqY7Oqas',\n  client_secret: 'TQV5U29k1gHibH5bx1layBo0OSAvAbRT3UYW3EWrSYBB5swxjVfWUa1BS8lqzxG/0v9wruMcrGadany3',\n});\n\nconst tokenSet = await client.grant({\n  resource: 'urn:example:third-party-api',\n  grant_type: 'client_credentials'\n});\n```\n\n## FAQ\n\n#### Semver?\n\n**Yes.** Everything that's either exported in the TypeScript definitions file or\n[documented][documentation] is subject to\n[Semantic Versioning 2.0.0](https://semver.org/spec/v2.0.0.html). The rest is to be considered\nprivate API and is subject to change between any versions.\n\n#### How do I use it outside of Node.js\n\nIt is **only built for Node.js**. Other javascript runtimes are not supported.\nI recommend [panva/oauth4webapi][oauth4webapi], or a derivate thereof, if you're \nlooking for a similarly compliant and certified client software that's not dependent \non the Node.js runtime builtins.\n\n#### How to make the client send client_id and client_secret in the body?\n\nSee [Client Authentication Methods (docs)][documentation-methods].\n\n#### Can I adjust the HTTP timeout?\n\nSee [Customizing (docs)][documentation-customizing].\n\n\n[openid-connect]: https://openid.net/connect/\n[feature-core]: https://openid.net/specs/openid-connect-core-1_0.html\n[feature-discovery]: https://openid.net/specs/openid-connect-discovery-1_0.html\n[feature-registration]: https://openid.net/specs/openid-connect-registration-1_0.html\n[feature-revocation]: https://tools.ietf.org/html/rfc7009\n[feature-introspection]: https://tools.ietf.org/html/rfc7662\n[feature-mtls]: https://tools.ietf.org/html/rfc8705\n[feature-device-flow]: https://tools.ietf.org/html/rfc8628\n[feature-rp-logout]: https://openid.net/specs/openid-connect-rpinitiated-1_0.html\n[feature-jarm]: https://openid.net/specs/oauth-v2-jarm.html\n[feature-fapi]: https://openid.net/specs/openid-financial-api-part-2-1_0.html\n[feature-dpop]: https://www.rfc-editor.org/rfc/rfc9449.html\n[feature-par]: https://www.rfc-editor.org/rfc/rfc9126.html\n[feature-jar]: https://www.rfc-editor.org/rfc/rfc9101.html\n[feature-iss]: https://www.rfc-editor.org/rfc/rfc9207.html\n[passport-url]: http://passportjs.org\n[npm-url]: https://www.npmjs.com/package/openid-client\n[sponsor-auth0]: https://a0.to/try-auth0\n[support-sponsor]: https://github.com/sponsors/panva\n[documentation]: https://github.com/panva/node-openid-client/blob/main/docs/README.md\n[documentation-issuer]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#issuer\n[documentation-client]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#client\n[documentation-customizing]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#customizing\n[documentation-tokenset]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#tokenset\n[documentation-strategy]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#strategy\n[documentation-errors]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#errors\n[documentation-generators]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#generators\n[documentation-methods]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#client-authentication-methods\n[documentation-webfinger]: https://github.com/panva/node-openid-client/blob/main/docs/README.md#issuerwebfingerinput\n[express-openid-connect]: https://www.npmjs.com/package/express-openid-connect\n[oauth4webapi]: https://github.com/panva/oauth4webapi#readme\n"
        }
    ]
}