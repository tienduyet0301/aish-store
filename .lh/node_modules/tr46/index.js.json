{
    "sourceFile": "node_modules/tr46/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893059048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nconst punycode = require(\"punycode/\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst { STATUS_MAPPING } = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { transitionalProcessing }) {\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0));\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        if (transitionalProcessing && ch === \"ẞ\") {\n          processed += \"ss\";\n        } else {\n          processed += mapping;\n        }\n        break;\n      case STATUS_MAPPING.deviation:\n        if (transitionalProcessing) {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return processed;\n}\n\nfunction validateLabel(label, {\n  checkHyphens,\n  checkBidi,\n  checkJoiners,\n  transitionalProcessing,\n  useSTD3ASCIIRules,\n  isBidi\n}) {\n  // \"must be satisfied for a non-empty label\"\n  if (label.length === 0) {\n    return true;\n  }\n\n  // \"1. The label must be in Unicode Normalization Form NFC.\"\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  // \"2. If CheckHyphens, the label must not contain a U+002D HYPHEN-MINUS character in both the\n  // third and fourth positions.\"\n  //\n  // \"3. If CheckHyphens, the label must neither begin nor end with a U+002D HYPHEN-MINUS character.\"\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  // \"4. If not CheckHyphens, the label must not begin with “xn--”.\"\n  if (!checkHyphens) {\n    if (label.startsWith(\"xn--\")) {\n      return false;\n    }\n  }\n\n  // \"5. The label must not contain a U+002E ( . ) FULL STOP.\"\n  if (label.includes(\".\")) {\n    return false;\n  }\n\n  // \"6. The label must not begin with a combining mark, that is: General_Category=Mark.\"\n  if (regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  // \"7. Each code point in the label must only have certain Status values according to Section 5\"\n  for (const ch of codePoints) {\n    const codePoint = ch.codePointAt(0);\n    const [status] = findStatus(codePoint);\n    if (transitionalProcessing) {\n      // \"For Transitional Processing (deprecated), each value must be valid.\"\n      if (status !== STATUS_MAPPING.valid) {\n        return false;\n      }\n    } else if (status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      // \"For Nontransitional Processing, each value must be either valid or deviation.\"\n      return false;\n    }\n    // \"In addition, if UseSTD3ASCIIRules=true and the code point is an ASCII code point (U+0000..U+007F), then it must\n    // be a lowercase letter (a-z), a digit (0-9), or a hyphen-minus (U+002D). (Note: This excludes uppercase ASCII\n    // A-Z which are mapped in UTS #46 and disallowed in IDNA2008.)\"\n    if (useSTD3ASCIIRules && codePoint <= 0x7F) {\n      if (!/^(?:[a-z]|[0-9]|-)$/u.test(ch)) {\n        return false;\n      }\n    }\n  }\n\n  // \"8. If CheckJoiners, the label must satisify the ContextJ rules\"\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // \"9. If CheckBidi, and if the domain name is a Bidi domain name, then the label must satisfy...\"\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi && isBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  // 1. Map.\n  let string = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  let error = false;\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let transitionalProcessingForThisLabel = options.transitionalProcessing;\n    if (label.startsWith(\"xn--\")) {\n      if (containsNonASCII(label)) {\n        error = true;\n        continue;\n      }\n\n      try {\n        label = punycode.decode(label.substring(4));\n      } catch {\n        if (!options.ignoreInvalidPunycode) {\n          error = true;\n          continue;\n        }\n      }\n      labels[i] = label;\n\n      if (label === \"\" || !containsNonASCII(label)) {\n        error = true;\n      }\n\n      transitionalProcessingForThisLabel = false;\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      transitionalProcessing: transitionalProcessingForThisLabel,\n      isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  verifyDNSLength = false,\n  transitionalProcessing = false,\n  ignoreInvalidPunycode = false\n} = {}) {\n  const result = processing(domainName, {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules,\n    transitionalProcessing,\n    ignoreInvalidPunycode\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  transitionalProcessing = false,\n  ignoreInvalidPunycode = false\n} = {}) {\n  const result = processing(domainName, {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules,\n    transitionalProcessing,\n    ignoreInvalidPunycode\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"
        }
    ]
}