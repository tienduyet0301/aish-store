{
    "sourceFile": "node_modules/preact/compat/src/internal.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892962148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {\n\tComponent as PreactComponent,\n\tVNode as PreactVNode,\n\tFunctionComponent as PreactFunctionComponent,\n\tPreactElement\n} from '../../src/internal';\nimport { SuspenseProps } from './suspense';\n\nexport { ComponentChildren } from '../..';\n\nexport { PreactElement };\n\nexport interface Component<P = {}, S = {}> extends PreactComponent<P, S> {\n\tisReactComponent?: object;\n\tisPureReactComponent?: true;\n\t_patchedLifecycles?: true;\n\n\t// Suspense internal properties\n\t_childDidSuspend?(error: Promise<void>, suspendingVNode: VNode): void;\n\t_suspended: (vnode: VNode) => (unsuspend: () => void) => void;\n\t_onResolve?(): void;\n\n\t// Portal internal properties\n\t_temp: any;\n\t_container: PreactElement;\n}\n\nexport interface FunctionComponent<P = {}> extends PreactFunctionComponent<P> {\n\tshouldComponentUpdate?(nextProps: Readonly<P>): boolean;\n\t_forwarded?: boolean;\n\t_patchedLifecycles?: true;\n}\n\nexport interface VNode<T = any> extends PreactVNode<T> {\n\t$$typeof?: symbol | string;\n\tpreactCompatNormalized?: boolean;\n}\n\nexport interface SuspenseState {\n\t_suspended?: null | VNode<any>;\n}\n\nexport interface SuspenseComponent\n\textends PreactComponent<SuspenseProps, SuspenseState> {\n\t_pendingSuspensionCount: number;\n\t_suspenders: Component[];\n\t_detachOnNextRender: null | VNode<any>;\n}\n"
        }
    ]
}