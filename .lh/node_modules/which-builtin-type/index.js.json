{
    "sourceFile": "node_modules/which-builtin-type/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893111664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar whichBoxedPrimitive = require('which-boxed-primitive');\nvar whichCollection = require('which-collection');\nvar whichTypedArray = require('which-typed-array');\nvar isArray = require('isarray');\nvar isDate = require('is-date-object');\nvar isRegex = require('is-regex');\nvar isWeakRef = require('is-weakref');\nvar isFinalizationRegistry = require('is-finalizationregistry');\nvar name = require('function.prototype.name');\nvar isGeneratorFunction = require('is-generator-function');\nvar isAsyncFunction = require('is-async-function');\nvar callBound = require('call-bound');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar toStringTag = hasToStringTag && Symbol.toStringTag;\n\nvar $Object = Object;\n\n/** @type {undefined | ((value: ThisParameterType<typeof Promise.prototype.then>, ...args: Parameters<typeof Promise.prototype.then>) => ReturnType<typeof Promise.prototype.then>)} */\nvar promiseThen = callBound('Promise.prototype.then', true);\n/** @type {<T = unknown>(value: unknown) => value is Promise<T>} */\nvar isPromise = function isPromise(value) {\n\tif (!value || typeof value !== 'object' || !promiseThen) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tpromiseThen(value, null, function () {});\n\t\treturn true;\n\t} catch (e) {}\n\treturn false;\n};\n\n/** @type {(builtinName: unknown) => boolean} */\nvar isKnownBuiltin = function isKnownBuiltin(builtinName) {\n\treturn !!builtinName\n\t\t// primitives\n\t\t&& builtinName !== 'BigInt'\n\t\t&& builtinName !== 'Boolean'\n\t\t&& builtinName !== 'Null'\n\t\t&& builtinName !== 'Number'\n\t\t&& builtinName !== 'String'\n\t\t&& builtinName !== 'Symbol'\n\t\t&& builtinName !== 'Undefined'\n\t\t// namespaces\n\t\t&& builtinName !== 'Math'\n\t\t&& builtinName !== 'JSON'\n\t\t&& builtinName !== 'Reflect'\n\t\t&& builtinName !== 'Atomics'\n\t\t// collections\n\t\t&& builtinName !== 'Map'\n\t\t&& builtinName !== 'Set'\n\t\t&& builtinName !== 'WeakMap'\n\t\t&& builtinName !== 'WeakSet'\n\t\t// typed arrays\n\t\t&& builtinName !== 'BigInt64Array'\n\t\t&& builtinName !== 'BigUint64Array'\n\t\t&& builtinName !== 'Float32Array'\n\t\t&& builtinName !== 'Float64Array'\n\t\t&& builtinName !== 'Int16Array'\n\t\t&& builtinName !== 'Int32Array'\n\t\t&& builtinName !== 'Int8Array'\n\t\t&& builtinName !== 'Uint16Array'\n\t\t&& builtinName !== 'Uint32Array'\n\t\t&& builtinName !== 'Uint8Array'\n\t\t&& builtinName !== 'Uint8ClampedArray'\n\t\t// checked explicitly\n\t\t&& builtinName !== 'Array'\n\t\t&& builtinName !== 'Date'\n\t\t&& builtinName !== 'FinalizationRegistry'\n\t\t&& builtinName !== 'Promise'\n\t\t&& builtinName !== 'RegExp'\n\t\t&& builtinName !== 'WeakRef'\n\t\t// functions\n\t\t&& builtinName !== 'Function'\n\t\t&& builtinName !== 'GeneratorFunction'\n\t\t&& builtinName !== 'AsyncFunction';\n};\n\n/** @type {import('.')} */\nmodule.exports = function whichBuiltinType(value) {\n\tif (value == null) {\n\t\treturn value;\n\t}\n\t// covers: primitives, {,Weak}Map/Set, typed arrays\n\tvar which = whichBoxedPrimitive($Object(value)) || whichCollection(value) || whichTypedArray(value);\n\tif (which) {\n\t\treturn which;\n\t}\n\tif (isArray(value)) {\n\t\treturn 'Array';\n\t}\n\tif (isDate(value)) {\n\t\treturn 'Date';\n\t}\n\tif (isRegex(value)) {\n\t\treturn 'RegExp';\n\t}\n\tif (isWeakRef(value)) {\n\t\treturn 'WeakRef';\n\t}\n\tif (isFinalizationRegistry(value)) {\n\t\treturn 'FinalizationRegistry';\n\t}\n\tif (typeof value === 'function') {\n\t\tif (isGeneratorFunction(value)) {\n\t\t\treturn 'GeneratorFunction';\n\t\t}\n\t\tif (isAsyncFunction(value)) {\n\t\t\treturn 'AsyncFunction';\n\t\t}\n\t\treturn 'Function';\n\t}\n\tif (isPromise(value)) {\n\t\treturn 'Promise';\n\t}\n\t// @ts-expect-error TS can't figure out that `value` is an `object` after the `which` check above\n\tif (toStringTag && toStringTag in value) {\n\t\tvar tag = value[toStringTag];\n\t\tif (isKnownBuiltin(tag)) {\n\t\t\treturn tag;\n\t\t}\n\t}\n\tif (typeof value.constructor === 'function') {\n\t\t// eslint-disable-next-line no-extra-parens\n\t\tvar constructorName = name(/** @type {Parameters<name>[0]} */ (value.constructor));\n\t\tif (isKnownBuiltin(constructorName)) {\n\t\t\treturn constructorName;\n\t\t}\n\t}\n\treturn 'Object';\n};\n"
        }
    ]
}