{
    "sourceFile": "node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892283213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as estree from 'estree';\nimport { Rule, ESLint } from 'eslint';\n\ndeclare const rules: {\n    'rules-of-hooks': {\n        meta: {\n            type: \"problem\";\n            docs: {\n                description: string;\n                recommended: true;\n                url: string;\n            };\n        };\n        create(context: Rule.RuleContext): {\n            onCodePathSegmentStart: (segment: Rule.CodePathSegment) => number;\n            onCodePathSegmentEnd: () => Rule.CodePathSegment | undefined;\n            onCodePathStart: () => number;\n            onCodePathEnd(codePath: Rule.CodePath, codePathNode: Rule.Node): void;\n            CallExpression(node: estree.CallExpression & Rule.NodeParentExtension): void;\n            Identifier(node: estree.Identifier & Rule.NodeParentExtension): void;\n            'CallExpression:exit'(node: estree.CallExpression & Rule.NodeParentExtension): void;\n            FunctionDeclaration(node: estree.FunctionDeclaration & Rule.NodeParentExtension): void;\n            ArrowFunctionExpression(node: estree.ArrowFunctionExpression & Rule.NodeParentExtension): void;\n        };\n    };\n    'exhaustive-deps': {\n        meta: {\n            type: \"suggestion\";\n            docs: {\n                description: string;\n                recommended: true;\n                url: string;\n            };\n            fixable: \"code\";\n            hasSuggestions: true;\n            schema: {\n                type: \"object\";\n                additionalProperties: false;\n                enableDangerousAutofixThisMayCauseInfiniteLoops: boolean;\n                properties: {\n                    additionalHooks: {\n                        type: \"string\";\n                    };\n                    enableDangerousAutofixThisMayCauseInfiniteLoops: {\n                        type: \"boolean\";\n                    };\n                };\n            }[];\n        };\n        create(context: Rule.RuleContext): {\n            CallExpression: (node: estree.CallExpression) => void;\n        };\n    };\n};\ndeclare const configs: {\n    /** Legacy recommended config, to be used with rc-based configurations */\n    'recommended-legacy': {\n        plugins: string[];\n        rules: {\n            'react-hooks/rules-of-hooks': \"error\";\n            'react-hooks/exhaustive-deps': \"warn\";\n        };\n    };\n    /**\n     * 'recommended' is currently aliased to the legacy / rc recommended config) to maintain backwards compatibility.\n     * This is deprecated and in v6, it will switch to alias the flat recommended config.\n     */\n    recommended: {\n        plugins: string[];\n        rules: {\n            'react-hooks/rules-of-hooks': \"error\";\n            'react-hooks/exhaustive-deps': \"warn\";\n        };\n    };\n    /** Latest recommended config, to be used with flat configurations */\n    'recommended-latest': {\n        name: string;\n        plugins: {\n            readonly 'react-hooks': ESLint.Plugin;\n        };\n        rules: {\n            'react-hooks/rules-of-hooks': \"error\";\n            'react-hooks/exhaustive-deps': \"warn\";\n        };\n    };\n};\ndeclare const meta: {\n    name: string;\n};\n\nexport { configs, meta, rules };\n"
        }
    ]
}