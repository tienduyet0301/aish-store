{
    "sourceFile": "node_modules/arraybuffer.prototype.slice/test/shimmed.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892036804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nrequire('../auto');\n\nvar test = require('tape');\nvar defineProperties = require('define-properties');\nvar callBind = require('call-bind');\n\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar functionsHaveNames = require('functions-have-names')();\nvar hasStrictMode = require('has-strict-mode')();\n\nvar runTests = require('./tests');\n\ntest('shimmed', function (t) {\n\tt.test('ArrayBuffer support', { skip: typeof ArrayBuffer === 'undefined' }, function (st) {\n\t\tvar method = ArrayBuffer.prototype.slice;\n\n\t\tst.equal(method.length, 2, 'ArrayBuffer#slice has a length of 2');\n\n\t\tst.test('Function name', { skip: !functionsHaveNames }, function (s2t) {\n\t\t\ts2t.equal(method.name, 'slice', 'ArrayBuffer#slice name \"slice\"');\n\t\t\ts2t.end();\n\t\t});\n\n\t\tst.test('enumerability', { skip: !defineProperties.supportsDescriptors }, function (et) {\n\t\t\tet.equal(false, isEnumerable.call(ArrayBuffer.prototype, 'slice'), 'ArrayBuffer#slice is not enumerable');\n\t\t\tet.end();\n\t\t});\n\n\t\tst.test('bad array/this value', { skip: !hasStrictMode }, function (s2t) {\n\t\t\t/* eslint no-useless-call: 0 */\n\t\t\ts2t['throws'](function () { return method.call(undefined); }, TypeError, 'undefined is not an object');\n\t\t\ts2t['throws'](function () { return method.call(null); }, TypeError, 'null is not an object');\n\t\t\ts2t.end();\n\t\t});\n\n\t\tt.test('has the correct descriptor', { skip: !Object.getOwnPropertyDescriptor }, function (s2t) {\n\t\t\tvar descriptor = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'slice');\n\n\t\t\ts2t.equal(descriptor.configurable, true);\n\t\t\ts2t.equal(descriptor.enumerable, false);\n\t\t\ts2t.equal(typeof descriptor.value, 'function');\n\t\t\ts2t.equal(descriptor.writable, true);\n\t\t\ts2t.end();\n\t\t});\n\n\t\trunTests(callBind(method), st);\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}