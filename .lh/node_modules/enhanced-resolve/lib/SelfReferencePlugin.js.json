{
    "sourceFile": "node_modules/enhanced-resolve/lib/SelfReferencePlugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892117726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").JsonObject} JsonObject */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nconst slashCode = \"/\".charCodeAt(0);\n\nmodule.exports = class SelfReferencePlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | string[]} fieldNamePath name path\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, fieldNamePath, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t\tthis.fieldName = fieldNamePath;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SelfReferencePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (!request.descriptionFilePath) return callback();\n\n\t\t\t\tconst req = request.request;\n\t\t\t\tif (!req) return callback();\n\n\t\t\t\t// Feature is only enabled when an exports field is present\n\t\t\t\tconst exportsField = DescriptionFileUtils.getField(\n\t\t\t\t\t/** @type {JsonObject} */ (request.descriptionFileData),\n\t\t\t\t\tthis.fieldName\n\t\t\t\t);\n\t\t\t\tif (!exportsField) return callback();\n\n\t\t\t\tconst name = DescriptionFileUtils.getField(\n\t\t\t\t\t/** @type {JsonObject} */ (request.descriptionFileData),\n\t\t\t\t\t\"name\"\n\t\t\t\t);\n\t\t\t\tif (typeof name !== \"string\") return callback();\n\n\t\t\t\tif (\n\t\t\t\t\treq.startsWith(name) &&\n\t\t\t\t\t(req.length === name.length ||\n\t\t\t\t\t\treq.charCodeAt(name.length) === slashCode)\n\t\t\t\t) {\n\t\t\t\t\tconst remainingRequest = `.${req.slice(name.length)}`;\n\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t...request,\n\t\t\t\t\t\trequest: remainingRequest,\n\t\t\t\t\t\tpath: /** @type {string} */ (request.descriptionFileRoot),\n\t\t\t\t\t\trelativePath: \".\"\n\t\t\t\t\t};\n\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\"self reference\",\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn callback();\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"
        }
    ]
}