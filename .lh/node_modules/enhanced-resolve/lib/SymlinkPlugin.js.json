{
    "sourceFile": "node_modules/enhanced-resolve/lib/SymlinkPlugin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892117764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\nconst { getType, PathType } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class SymlinkPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tif (request.ignoreSymlinks) return callback();\n\t\t\t\tconst pathsResult = getPaths(/** @type {string} */ (request.path));\n\t\t\t\tconst pathSegments = pathsResult.segments;\n\t\t\t\tconst paths = pathsResult.paths;\n\n\t\t\t\tlet containsSymlink = false;\n\t\t\t\tlet idx = -1;\n\t\t\t\tforEachBail(\n\t\t\t\t\tpaths,\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {string} path path\n\t\t\t\t\t * @param {(err?: null|Error, result?: null|number) => void} callback callback\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\t(path, callback) => {\n\t\t\t\t\t\tidx++;\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(path);\n\t\t\t\t\t\tfs.readlink(path, (err, result) => {\n\t\t\t\t\t\t\tif (!err && result) {\n\t\t\t\t\t\t\t\tpathSegments[idx] = /** @type {string} */ (result);\n\t\t\t\t\t\t\t\tcontainsSymlink = true;\n\t\t\t\t\t\t\t\t// Shortcut when absolute symlink found\n\t\t\t\t\t\t\t\tconst resultType = getType(result.toString());\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsoluteWin ||\n\t\t\t\t\t\t\t\t\tresultType === PathType.AbsolutePosix\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\treturn callback(null, idx);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t/**\n\t\t\t\t\t * @param {null|Error} [err] error\n\t\t\t\t\t * @param {null|number} [idx] result\n\t\t\t\t\t * @returns {void}\n\t\t\t\t\t */\n\t\t\t\t\t(err, idx) => {\n\t\t\t\t\t\tif (!containsSymlink) return callback();\n\t\t\t\t\t\tconst resultSegments =\n\t\t\t\t\t\t\ttypeof idx === \"number\"\n\t\t\t\t\t\t\t\t? pathSegments.slice(0, idx + 1)\n\t\t\t\t\t\t\t\t: pathSegments.slice();\n\t\t\t\t\t\tconst result = resultSegments.reduceRight((a, b) => {\n\t\t\t\t\t\t\treturn resolver.join(a, b);\n\t\t\t\t\t\t});\n\t\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\tpath: result\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\"resolved symlink to \" + result,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"
        }
    ]
}