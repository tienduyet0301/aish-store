{
    "sourceFile": "node_modules/enhanced-resolve/lib/CachedInputFileSystem.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892116062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst nextTick = require(\"process\").nextTick;\n\n/** @typedef {import(\"./Resolver\").FileSystem} FileSystem */\n/** @typedef {import(\"./Resolver\").PathLike} PathLike */\n/** @typedef {import(\"./Resolver\").PathOrFileDescriptor} PathOrFileDescriptor */\n/** @typedef {import(\"./Resolver\").SyncFileSystem} SyncFileSystem */\n/** @typedef {FileSystem & SyncFileSystem} BaseFileSystem */\n\n/**\n * @template T\n * @typedef {import(\"./Resolver\").FileSystemCallback<T>} FileSystemCallback<T>\n */\n\n/**\n * @param {string} path path\n * @returns {string} dirname\n */\nconst dirname = path => {\n\tlet idx = path.length - 1;\n\twhile (idx >= 0) {\n\t\tconst c = path.charCodeAt(idx);\n\t\t// slash or backslash\n\t\tif (c === 47 || c === 92) break;\n\t\tidx--;\n\t}\n\tif (idx < 0) return \"\";\n\treturn path.slice(0, idx);\n};\n\n/**\n * @template T\n * @param {FileSystemCallback<T>[]} callbacks callbacks\n * @param {Error | null} err error\n * @param {T} result result\n */\nconst runCallbacks = (callbacks, err, result) => {\n\tif (callbacks.length === 1) {\n\t\tcallbacks[0](err, result);\n\t\tcallbacks.length = 0;\n\t\treturn;\n\t}\n\tlet error;\n\tfor (const callback of callbacks) {\n\t\ttry {\n\t\t\tcallback(err, result);\n\t\t} catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t}\n\tcallbacks.length = 0;\n\tif (error) throw error;\n};\n\nclass OperationMergerBackend {\n\t/**\n\t * @param {Function | undefined} provider async method in filesystem\n\t * @param {Function | undefined} syncProvider sync method in filesystem\n\t * @param {BaseFileSystem} providerContext call context for the provider methods\n\t */\n\tconstructor(provider, syncProvider, providerContext) {\n\t\tthis._provider = provider;\n\t\tthis._syncProvider = syncProvider;\n\t\tthis._providerContext = providerContext;\n\t\tthis._activeAsyncOperations = new Map();\n\n\t\tthis.provide = this._provider\n\t\t\t? /**\n\t\t\t   * @param {PathLike | PathOrFileDescriptor} path path\n\t\t\t   * @param {object | FileSystemCallback<any> | undefined} options options\n\t\t\t   * @param {FileSystemCallback<any>=} callback callback\n\t\t\t   * @returns {any} result\n\t\t\t   */\n\t\t\t  (path, options, callback) => {\n\t\t\t\t\tif (typeof options === \"function\") {\n\t\t\t\t\t\tcallback = /** @type {FileSystemCallback<any>} */ (options);\n\t\t\t\t\t\toptions = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (\n\t\t\t\t\t\ttypeof path !== \"string\" &&\n\t\t\t\t\t\t!Buffer.isBuffer(path) &&\n\t\t\t\t\t\t!(path instanceof URL) &&\n\t\t\t\t\t\ttypeof path !== \"number\"\n\t\t\t\t\t) {\n\t\t\t\t\t\t/** @type {Function} */\n\t\t\t\t\t\t(callback)(\n\t\t\t\t\t\t\tnew TypeError(\"path must be a string, Buffer, URL or number\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (options) {\n\t\t\t\t\t\treturn /** @type {Function} */ (this._provider).call(\n\t\t\t\t\t\t\tthis._providerContext,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tlet callbacks = this._activeAsyncOperations.get(path);\n\t\t\t\t\tif (callbacks) {\n\t\t\t\t\t\tcallbacks.push(callback);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._activeAsyncOperations.set(path, (callbacks = [callback]));\n\t\t\t\t\t/** @type {Function} */\n\t\t\t\t\t(provider)(\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {Error} err error\n\t\t\t\t\t\t * @param {any} result result\n\t\t\t\t\t\t */\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\tthis._activeAsyncOperations.delete(path);\n\t\t\t\t\t\t\trunCallbacks(callbacks, err, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t  }\n\t\t\t: null;\n\t\tthis.provideSync = this._syncProvider\n\t\t\t? /**\n\t\t\t   * @param {PathLike | PathOrFileDescriptor} path path\n\t\t\t   * @param {object=} options options\n\t\t\t   * @returns {any} result\n\t\t\t   */\n\t\t\t  (path, options) => {\n\t\t\t\t\treturn /** @type {Function} */ (this._syncProvider).call(\n\t\t\t\t\t\tthis._providerContext,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\toptions\n\t\t\t\t\t);\n\t\t\t  }\n\t\t\t: null;\n\t}\n\n\tpurge() {}\n\tpurgeParent() {}\n}\n\n/*\n\nIDLE:\n\tinsert data: goto SYNC\n\nSYNC:\n\tbefore provide: run ticks\n\tevent loop tick: goto ASYNC_ACTIVE\n\nASYNC:\n\ttimeout: run tick, goto ASYNC_PASSIVE\n\nASYNC_PASSIVE:\n\tbefore provide: run ticks\n\nIDLE --[insert data]--> SYNC --[event loop tick]--> ASYNC_ACTIVE --[interval tick]-> ASYNC_PASSIVE\n                                                          ^                             |\n                                                          +---------[insert data]-------+\n*/\n\nconst STORAGE_MODE_IDLE = 0;\nconst STORAGE_MODE_SYNC = 1;\nconst STORAGE_MODE_ASYNC = 2;\n\n/**\n * @callback Provide\n * @param {PathLike | PathOrFileDescriptor} path path\n * @param {any} options options\n * @param {FileSystemCallback<any>} callback callback\n * @returns {void}\n */\n\nclass CacheBackend {\n\t/**\n\t * @param {number} duration max cache duration of items\n\t * @param {function | undefined} provider async method\n\t * @param {function | undefined} syncProvider sync method\n\t * @param {BaseFileSystem} providerContext call context for the provider methods\n\t */\n\tconstructor(duration, provider, syncProvider, providerContext) {\n\t\tthis._duration = duration;\n\t\tthis._provider = provider;\n\t\tthis._syncProvider = syncProvider;\n\t\tthis._providerContext = providerContext;\n\t\t/** @type {Map<string, FileSystemCallback<any>[]>} */\n\t\tthis._activeAsyncOperations = new Map();\n\t\t/** @type {Map<string, { err: Error | null, result?: any, level: Set<string> }>} */\n\t\tthis._data = new Map();\n\t\t/** @type {Set<string>[]} */\n\t\tthis._levels = [];\n\t\tfor (let i = 0; i < 10; i++) this._levels.push(new Set());\n\t\tfor (let i = 5000; i < duration; i += 500) this._levels.push(new Set());\n\t\tthis._currentLevel = 0;\n\t\tthis._tickInterval = Math.floor(duration / this._levels.length);\n\t\t/** @type {STORAGE_MODE_IDLE | STORAGE_MODE_SYNC | STORAGE_MODE_ASYNC} */\n\t\tthis._mode = STORAGE_MODE_IDLE;\n\n\t\t/** @type {NodeJS.Timeout | undefined} */\n\t\tthis._timeout = undefined;\n\t\t/** @type {number | undefined} */\n\t\tthis._nextDecay = undefined;\n\n\t\t// @ts-ignore\n\t\tthis.provide = provider ? this.provide.bind(this) : null;\n\t\t// @ts-ignore\n\t\tthis.provideSync = syncProvider ? this.provideSync.bind(this) : null;\n\t}\n\n\t/**\n\t * @param {PathLike | PathOrFileDescriptor} path path\n\t * @param {any} options options\n\t * @param {FileSystemCallback<any>} callback callback\n\t * @returns {void}\n\t */\n\tprovide(path, options, callback) {\n\t\tif (typeof options === \"function\") {\n\t\t\tcallback = options;\n\t\t\toptions = undefined;\n\t\t}\n\t\tif (\n\t\t\ttypeof path !== \"string\" &&\n\t\t\t!Buffer.isBuffer(path) &&\n\t\t\t!(path instanceof URL) &&\n\t\t\ttypeof path !== \"number\"\n\t\t) {\n\t\t\tcallback(new TypeError(\"path must be a string, Buffer, URL or number\"));\n\t\t\treturn;\n\t\t}\n\t\tconst strPath = typeof path !== \"string\" ? path.toString() : path;\n\t\tif (options) {\n\t\t\treturn /** @type {Function} */ (this._provider).call(\n\t\t\t\tthis._providerContext,\n\t\t\t\tpath,\n\t\t\t\toptions,\n\t\t\t\tcallback\n\t\t\t);\n\t\t}\n\n\t\t// When in sync mode we can move to async mode\n\t\tif (this._mode === STORAGE_MODE_SYNC) {\n\t\t\tthis._enterAsyncMode();\n\t\t}\n\n\t\t// Check in cache\n\t\tlet cacheEntry = this._data.get(strPath);\n\t\tif (cacheEntry !== undefined) {\n\t\t\tif (cacheEntry.err) return nextTick(callback, cacheEntry.err);\n\t\t\treturn nextTick(callback, null, cacheEntry.result);\n\t\t}\n\n\t\t// Check if there is already the same operation running\n\t\tlet callbacks = this._activeAsyncOperations.get(strPath);\n\t\tif (callbacks !== undefined) {\n\t\t\tcallbacks.push(callback);\n\t\t\treturn;\n\t\t}\n\t\tthis._activeAsyncOperations.set(strPath, (callbacks = [callback]));\n\n\t\t// Run the operation\n\t\t/** @type {Function} */\n\t\t(this._provider).call(\n\t\t\tthis._providerContext,\n\t\t\tpath,\n\t\t\t/**\n\t\t\t * @param {Error | null} err error\n\t\t\t * @param {any} [result] result\n\t\t\t */\n\t\t\t(err, result) => {\n\t\t\t\tthis._activeAsyncOperations.delete(strPath);\n\t\t\t\tthis._storeResult(strPath, err, result);\n\n\t\t\t\t// Enter async mode if not yet done\n\t\t\t\tthis._enterAsyncMode();\n\n\t\t\t\trunCallbacks(\n\t\t\t\t\t/** @type {FileSystemCallback<any>[]} */ (callbacks),\n\t\t\t\t\terr,\n\t\t\t\t\tresult\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {PathLike | PathOrFileDescriptor} path path\n\t * @param {any} options options\n\t * @returns {any} result\n\t */\n\tprovideSync(path, options) {\n\t\tif (\n\t\t\ttypeof path !== \"string\" &&\n\t\t\t!Buffer.isBuffer(path) &&\n\t\t\t!(path instanceof URL) &&\n\t\t\ttypeof path !== \"number\"\n\t\t) {\n\t\t\tthrow new TypeError(\"path must be a string\");\n\t\t}\n\t\tconst strPath = typeof path !== \"string\" ? path.toString() : path;\n\t\tif (options) {\n\t\t\treturn /** @type {Function} */ (this._syncProvider).call(\n\t\t\t\tthis._providerContext,\n\t\t\t\tpath,\n\t\t\t\toptions\n\t\t\t);\n\t\t}\n\n\t\t// In sync mode we may have to decay some cache items\n\t\tif (this._mode === STORAGE_MODE_SYNC) {\n\t\t\tthis._runDecays();\n\t\t}\n\n\t\t// Check in cache\n\t\tlet cacheEntry = this._data.get(strPath);\n\t\tif (cacheEntry !== undefined) {\n\t\t\tif (cacheEntry.err) throw cacheEntry.err;\n\t\t\treturn cacheEntry.result;\n\t\t}\n\n\t\t// Get all active async operations\n\t\t// This sync operation will also complete them\n\t\tconst callbacks = this._activeAsyncOperations.get(strPath);\n\t\tthis._activeAsyncOperations.delete(strPath);\n\n\t\t// Run the operation\n\t\t// When in idle mode, we will enter sync mode\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = /** @type {Function} */ (this._syncProvider).call(\n\t\t\t\tthis._providerContext,\n\t\t\t\tpath\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tthis._storeResult(strPath, /** @type {Error} */ (err), undefined);\n\t\t\tthis._enterSyncModeWhenIdle();\n\t\t\tif (callbacks) {\n\t\t\t\trunCallbacks(callbacks, /** @type {Error} */ (err), undefined);\n\t\t\t}\n\t\t\tthrow err;\n\t\t}\n\t\tthis._storeResult(strPath, null, result);\n\t\tthis._enterSyncModeWhenIdle();\n\t\tif (callbacks) {\n\t\t\trunCallbacks(callbacks, null, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * @param {string | Buffer | URL | number | (string | URL | Buffer | number)[] | Set<string | URL | Buffer | number>} [what] what to purge\n\t */\n\tpurge(what) {\n\t\tif (!what) {\n\t\t\tif (this._mode !== STORAGE_MODE_IDLE) {\n\t\t\t\tthis._data.clear();\n\t\t\t\tfor (const level of this._levels) {\n\t\t\t\t\tlevel.clear();\n\t\t\t\t}\n\t\t\t\tthis._enterIdleMode();\n\t\t\t}\n\t\t} else if (\n\t\t\ttypeof what === \"string\" ||\n\t\t\tBuffer.isBuffer(what) ||\n\t\t\twhat instanceof URL ||\n\t\t\ttypeof what === \"number\"\n\t\t) {\n\t\t\tconst strWhat = typeof what !== \"string\" ? what.toString() : what;\n\t\t\tfor (let [key, data] of this._data) {\n\t\t\t\tif (key.startsWith(strWhat)) {\n\t\t\t\t\tthis._data.delete(key);\n\t\t\t\t\tdata.level.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._data.size === 0) {\n\t\t\t\tthis._enterIdleMode();\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let [key, data] of this._data) {\n\t\t\t\tfor (const item of what) {\n\t\t\t\t\tconst strItem = typeof item !== \"string\" ? item.toString() : item;\n\t\t\t\t\tif (key.startsWith(strItem)) {\n\t\t\t\t\t\tthis._data.delete(key);\n\t\t\t\t\t\tdata.level.delete(key);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._data.size === 0) {\n\t\t\t\tthis._enterIdleMode();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {string | Buffer | URL | number | (string | URL | Buffer | number)[] | Set<string | URL | Buffer | number>} [what] what to purge\n\t */\n\tpurgeParent(what) {\n\t\tif (!what) {\n\t\t\tthis.purge();\n\t\t} else if (\n\t\t\ttypeof what === \"string\" ||\n\t\t\tBuffer.isBuffer(what) ||\n\t\t\twhat instanceof URL ||\n\t\t\ttypeof what === \"number\"\n\t\t) {\n\t\t\tconst strWhat = typeof what !== \"string\" ? what.toString() : what;\n\t\t\tthis.purge(dirname(strWhat));\n\t\t} else {\n\t\t\tconst set = new Set();\n\t\t\tfor (const item of what) {\n\t\t\t\tconst strItem = typeof item !== \"string\" ? item.toString() : item;\n\t\t\t\tset.add(dirname(strItem));\n\t\t\t}\n\t\t\tthis.purge(set);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} path path\n\t * @param {Error | null} err error\n\t * @param {any} result result\n\t */\n\t_storeResult(path, err, result) {\n\t\tif (this._data.has(path)) return;\n\t\tconst level = this._levels[this._currentLevel];\n\t\tthis._data.set(path, { err, result, level });\n\t\tlevel.add(path);\n\t}\n\n\t_decayLevel() {\n\t\tconst nextLevel = (this._currentLevel + 1) % this._levels.length;\n\t\tconst decay = this._levels[nextLevel];\n\t\tthis._currentLevel = nextLevel;\n\t\tfor (let item of decay) {\n\t\t\tthis._data.delete(item);\n\t\t}\n\t\tdecay.clear();\n\t\tif (this._data.size === 0) {\n\t\t\tthis._enterIdleMode();\n\t\t} else {\n\t\t\t/** @type {number} */\n\t\t\t(this._nextDecay) += this._tickInterval;\n\t\t}\n\t}\n\n\t_runDecays() {\n\t\twhile (\n\t\t\t/** @type {number} */ (this._nextDecay) <= Date.now() &&\n\t\t\tthis._mode !== STORAGE_MODE_IDLE\n\t\t) {\n\t\t\tthis._decayLevel();\n\t\t}\n\t}\n\n\t_enterAsyncMode() {\n\t\tlet timeout = 0;\n\t\tswitch (this._mode) {\n\t\t\tcase STORAGE_MODE_ASYNC:\n\t\t\t\treturn;\n\t\t\tcase STORAGE_MODE_IDLE:\n\t\t\t\tthis._nextDecay = Date.now() + this._tickInterval;\n\t\t\t\ttimeout = this._tickInterval;\n\t\t\t\tbreak;\n\t\t\tcase STORAGE_MODE_SYNC:\n\t\t\t\tthis._runDecays();\n\t\t\t\t// _runDecays may change the mode\n\t\t\t\tif (\n\t\t\t\t\t/** @type {STORAGE_MODE_IDLE | STORAGE_MODE_SYNC | STORAGE_MODE_ASYNC}*/\n\t\t\t\t\t(this._mode) === STORAGE_MODE_IDLE\n\t\t\t\t)\n\t\t\t\t\treturn;\n\t\t\t\ttimeout = Math.max(\n\t\t\t\t\t0,\n\t\t\t\t\t/** @type {number} */ (this._nextDecay) - Date.now()\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis._mode = STORAGE_MODE_ASYNC;\n\t\tconst ref = setTimeout(() => {\n\t\t\tthis._mode = STORAGE_MODE_SYNC;\n\t\t\tthis._runDecays();\n\t\t}, timeout);\n\t\tif (ref.unref) ref.unref();\n\t\tthis._timeout = ref;\n\t}\n\n\t_enterSyncModeWhenIdle() {\n\t\tif (this._mode === STORAGE_MODE_IDLE) {\n\t\t\tthis._mode = STORAGE_MODE_SYNC;\n\t\t\tthis._nextDecay = Date.now() + this._tickInterval;\n\t\t}\n\t}\n\n\t_enterIdleMode() {\n\t\tthis._mode = STORAGE_MODE_IDLE;\n\t\tthis._nextDecay = undefined;\n\t\tif (this._timeout) clearTimeout(this._timeout);\n\t}\n}\n\n/**\n * @template {function} Provider\n * @template {function} AsyncProvider\n * @template FileSystem\n * @param {number} duration duration in ms files are cached\n * @param {Provider | undefined} provider provider\n * @param {AsyncProvider | undefined} syncProvider sync provider\n * @param {BaseFileSystem} providerContext provider context\n * @returns {OperationMergerBackend | CacheBackend} backend\n */\nconst createBackend = (duration, provider, syncProvider, providerContext) => {\n\tif (duration > 0) {\n\t\treturn new CacheBackend(duration, provider, syncProvider, providerContext);\n\t}\n\treturn new OperationMergerBackend(provider, syncProvider, providerContext);\n};\n\nmodule.exports = class CachedInputFileSystem {\n\t/**\n\t * @param {BaseFileSystem} fileSystem file system\n\t * @param {number} duration duration in ms files are cached\n\t */\n\tconstructor(fileSystem, duration) {\n\t\tthis.fileSystem = fileSystem;\n\n\t\tthis._lstatBackend = createBackend(\n\t\t\tduration,\n\t\t\tthis.fileSystem.lstat,\n\t\t\tthis.fileSystem.lstatSync,\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst lstat = this._lstatBackend.provide;\n\t\tthis.lstat = /** @type {FileSystem[\"lstat\"]} */ (lstat);\n\t\tconst lstatSync = this._lstatBackend.provideSync;\n\t\tthis.lstatSync = /** @type {SyncFileSystem[\"lstatSync\"]} */ (lstatSync);\n\n\t\tthis._statBackend = createBackend(\n\t\t\tduration,\n\t\t\tthis.fileSystem.stat,\n\t\t\tthis.fileSystem.statSync,\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst stat = this._statBackend.provide;\n\t\tthis.stat = /** @type {FileSystem[\"stat\"]} */ (stat);\n\t\tconst statSync = this._statBackend.provideSync;\n\t\tthis.statSync = /** @type {SyncFileSystem[\"statSync\"]} */ (statSync);\n\n\t\tthis._readdirBackend = createBackend(\n\t\t\tduration,\n\t\t\tthis.fileSystem.readdir,\n\t\t\tthis.fileSystem.readdirSync,\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst readdir = this._readdirBackend.provide;\n\t\tthis.readdir = /** @type {FileSystem[\"readdir\"]} */ (readdir);\n\t\tconst readdirSync = this._readdirBackend.provideSync;\n\t\tthis.readdirSync = /** @type {SyncFileSystem[\"readdirSync\"]} */ (\n\t\t\treaddirSync\n\t\t);\n\n\t\tthis._readFileBackend = createBackend(\n\t\t\tduration,\n\t\t\tthis.fileSystem.readFile,\n\t\t\tthis.fileSystem.readFileSync,\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst readFile = this._readFileBackend.provide;\n\t\tthis.readFile = /** @type {FileSystem[\"readFile\"]} */ (readFile);\n\t\tconst readFileSync = this._readFileBackend.provideSync;\n\t\tthis.readFileSync = /** @type {SyncFileSystem[\"readFileSync\"]} */ (\n\t\t\treadFileSync\n\t\t);\n\n\t\tthis._readJsonBackend = createBackend(\n\t\t\tduration,\n\t\t\t// prettier-ignore\n\t\t\tthis.fileSystem.readJson ||\n\t\t\t\t(this.readFile &&\n\t\t\t\t\t(\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string} path path\n\t\t\t\t\t\t * @param {FileSystemCallback<any>} callback\n\t\t\t\t\t\t */\n\t\t\t\t\t\t(path, callback) => {\n\t\t\t\t\t\t\tthis.readFile(path, (err, buffer) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\tif (!buffer || buffer.length === 0)\n\t\t\t\t\t\t\t\t\treturn callback(new Error(\"No file content\"));\n\t\t\t\t\t\t\t\tlet data;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tdata = JSON.parse(buffer.toString(\"utf-8\"));\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\treturn callback(/** @type {Error} */ (e));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcallback(null, data);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t),\n\t\t\t// prettier-ignore\n\t\t\tthis.fileSystem.readJsonSync ||\n\t\t\t\t(this.readFileSync &&\n\t\t\t\t\t(\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string} path path\n\t\t\t\t\t\t * @returns {any} result\n\t\t\t\t\t\t */\n\t\t\t\t\t\t(path) => {\n\t\t\t\t\t\t\tconst buffer = this.readFileSync(path);\n\t\t\t\t\t\t\tconst data = JSON.parse(buffer.toString(\"utf-8\"));\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t}\n\t\t\t\t )),\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst readJson = this._readJsonBackend.provide;\n\t\tthis.readJson = /** @type {FileSystem[\"readJson\"]} */ (readJson);\n\t\tconst readJsonSync = this._readJsonBackend.provideSync;\n\t\tthis.readJsonSync = /** @type {SyncFileSystem[\"readJsonSync\"]} */ (\n\t\t\treadJsonSync\n\t\t);\n\n\t\tthis._readlinkBackend = createBackend(\n\t\t\tduration,\n\t\t\tthis.fileSystem.readlink,\n\t\t\tthis.fileSystem.readlinkSync,\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst readlink = this._readlinkBackend.provide;\n\t\tthis.readlink = /** @type {FileSystem[\"readlink\"]} */ (readlink);\n\t\tconst readlinkSync = this._readlinkBackend.provideSync;\n\t\tthis.readlinkSync = /** @type {SyncFileSystem[\"readlinkSync\"]} */ (\n\t\t\treadlinkSync\n\t\t);\n\n\t\tthis._realpathBackend = createBackend(\n\t\t\tduration,\n\t\t\tthis.fileSystem.realpath,\n\t\t\tthis.fileSystem.realpathSync,\n\t\t\tthis.fileSystem\n\t\t);\n\t\tconst realpath = this._realpathBackend.provide;\n\t\tthis.realpath = /** @type {FileSystem[\"realpath\"]} */ (realpath);\n\t\tconst realpathSync = this._realpathBackend.provideSync;\n\t\tthis.realpathSync = /** @type {SyncFileSystem[\"realpathSync\"]} */ (\n\t\t\trealpathSync\n\t\t);\n\t}\n\n\t/**\n\t * @param {string | Buffer | URL | number | (string | URL | Buffer | number)[] | Set<string | URL | Buffer | number>} [what] what to purge\n\t */\n\tpurge(what) {\n\t\tthis._statBackend.purge(what);\n\t\tthis._lstatBackend.purge(what);\n\t\tthis._readdirBackend.purgeParent(what);\n\t\tthis._readFileBackend.purge(what);\n\t\tthis._readlinkBackend.purge(what);\n\t\tthis._readJsonBackend.purge(what);\n\t\tthis._realpathBackend.purge(what);\n\t}\n};\n"
        }
    ]
}