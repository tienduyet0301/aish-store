{
    "sourceFile": "node_modules/enhanced-resolve/lib/DescriptionFileUtils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892116361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").JsonObject} JsonObject */\n/** @typedef {import(\"./Resolver\").JsonValue} JsonValue */\n/** @typedef {import(\"./Resolver\").ResolveContext} ResolveContext */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/**\n * @typedef {Object} DescriptionFileInfo\n * @property {JsonObject=} content\n * @property {string} path\n * @property {string} directory\n */\n\n/**\n * @callback ErrorFirstCallback\n * @param {Error|null=} error\n * @param {DescriptionFileInfo=} result\n */\n\n/**\n * @typedef {Object} Result\n * @property {string} path path to description file\n * @property {string} directory directory of description file\n * @property {JsonObject} content content of description file\n */\n\n/**\n * @param {Resolver} resolver resolver\n * @param {string} directory directory\n * @param {string[]} filenames filenames\n * @param {DescriptionFileInfo|undefined} oldInfo oldInfo\n * @param {ResolveContext} resolveContext resolveContext\n * @param {ErrorFirstCallback} callback callback\n */\nfunction loadDescriptionFile(\n\tresolver,\n\tdirectory,\n\tfilenames,\n\toldInfo,\n\tresolveContext,\n\tcallback\n) {\n\t(function findDescriptionFile() {\n\t\tif (oldInfo && oldInfo.directory === directory) {\n\t\t\t// We already have info for this directory and can reuse it\n\t\t\treturn callback(null, oldInfo);\n\t\t}\n\t\tforEachBail(\n\t\t\tfilenames,\n\t\t\t/**\n\t\t\t * @param {string} filename filename\n\t\t\t * @param {(err?: null|Error, result?: null|Result) => void} callback callback\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\t(filename, callback) => {\n\t\t\t\tconst descriptionFilePath = resolver.join(directory, filename);\n\t\t\t\tif (resolver.fileSystem.readJson) {\n\t\t\t\t\tresolver.fileSystem.readJson(descriptionFilePath, (err, content) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttypeof (/** @type {NodeJS.ErrnoException} */ (err).code) !==\n\t\t\t\t\t\t\t\t\"undefined\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn onJson(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonJson(null, content);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tresolver.fileSystem.readFile(descriptionFilePath, (err, content) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies) {\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(descriptionFilePath);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/** @type {JsonObject | undefined} */\n\t\t\t\t\t\tlet json;\n\n\t\t\t\t\t\tif (content) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tjson = JSON.parse(content.toString());\n\t\t\t\t\t\t\t} catch (/** @type {unknown} */ e) {\n\t\t\t\t\t\t\t\treturn onJson(/** @type {Error} */ (e));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn onJson(new Error(\"No content in file\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tonJson(null, json);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * @param {null|Error} [err] error\n\t\t\t\t * @param {JsonObject} [content] content\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\tfunction onJson(err, content) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\tdescriptionFilePath + \" (directory description file): \" + err\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\terr.message =\n\t\t\t\t\t\t\t\tdescriptionFilePath + \" (directory description file): \" + err;\n\t\t\t\t\t\treturn callback(err);\n\t\t\t\t\t}\n\t\t\t\t\tcallback(null, {\n\t\t\t\t\t\tcontent: /** @type {JsonObject} */ (content),\n\t\t\t\t\t\tdirectory,\n\t\t\t\t\t\tpath: descriptionFilePath\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t\t/**\n\t\t\t * @param {null|Error} [err] error\n\t\t\t * @param {null|Result} [result] result\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\t(err, result) => {\n\t\t\t\tif (err) return callback(err);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn callback(null, result);\n\t\t\t\t} else {\n\t\t\t\t\tconst dir = cdUp(directory);\n\t\t\t\t\tif (!dir) {\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdirectory = dir;\n\t\t\t\t\t\treturn findDescriptionFile();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t})();\n}\n\n/**\n * @param {JsonObject} content content\n * @param {string|string[]} field field\n * @returns {JsonValue | undefined} field data\n */\nfunction getField(content, field) {\n\tif (!content) return undefined;\n\tif (Array.isArray(field)) {\n\t\t/** @type {JsonValue} */\n\t\tlet current = content;\n\t\tfor (let j = 0; j < field.length; j++) {\n\t\t\tif (current === null || typeof current !== \"object\") {\n\t\t\t\tcurrent = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = /** @type {JsonObject} */ (current)[field[j]];\n\t\t}\n\t\treturn current;\n\t} else {\n\t\treturn content[field];\n\t}\n}\n\n/**\n * @param {string} directory directory\n * @returns {string|null} parent directory or null\n */\nfunction cdUp(directory) {\n\tif (directory === \"/\") return null;\n\tconst i = directory.lastIndexOf(\"/\"),\n\t\tj = directory.lastIndexOf(\"\\\\\");\n\tconst p = i < 0 ? j : j < 0 ? i : i < j ? j : i;\n\tif (p < 0) return null;\n\treturn directory.slice(0, p || 1);\n}\n\nexports.loadDescriptionFile = loadDescriptionFile;\nexports.getField = getField;\nexports.cdUp = cdUp;\n"
        }
    ]
}