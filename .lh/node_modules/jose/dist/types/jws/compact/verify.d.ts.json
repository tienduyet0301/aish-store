{
    "sourceFile": "node_modules/jose/dist/types/jws/compact/verify.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CompactVerifyResult, FlattenedJWSInput, GetKeyFunction, CompactJWSHeaderParameters, KeyLike, VerifyOptions, ResolvedKey } from '../../types';\n/**\n * Interface for Compact JWS Verification dynamic key resolution. No token components have been\n * verified at the time of this function call.\n *\n * @see [createRemoteJWKSet](../functions/jwks_remote.createRemoteJWKSet.md#function-createremotejwkset) to verify using a remote JSON Web Key Set.\n */\nexport interface CompactVerifyGetKey extends GetKeyFunction<CompactJWSHeaderParameters, FlattenedJWSInput> {\n}\n/**\n * Verifies the signature and format of and afterwards decodes the Compact JWS.\n *\n * @param jws Compact JWS.\n * @param key Key to verify the JWS with. See\n *   {@link https://github.com/panva/jose/issues/210#jws-alg Algorithm Key Requirements}.\n * @param options JWS Verify options.\n */\nexport declare function compactVerify(jws: string | Uint8Array, key: KeyLike | Uint8Array, options?: VerifyOptions): Promise<CompactVerifyResult>;\n/**\n * @param jws Compact JWS.\n * @param getKey Function resolving a key to verify the JWS with. See\n *   {@link https://github.com/panva/jose/issues/210#jws-alg Algorithm Key Requirements}.\n * @param options JWS Verify options.\n */\nexport declare function compactVerify<T extends KeyLike = KeyLike>(jws: string | Uint8Array, getKey: CompactVerifyGetKey, options?: VerifyOptions): Promise<CompactVerifyResult & ResolvedKey<T>>;\n"
        }
    ]
}