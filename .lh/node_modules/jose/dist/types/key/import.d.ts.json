{
    "sourceFile": "node_modules/jose/dist/types/key/import.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { JWK, KeyLike } from '../types';\nexport interface PEMImportOptions {\n    /**\n     * (Only effective in Web Crypto API runtimes) The value to use as\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey SubtleCrypto.importKey()}\n     * `extractable` argument. Default is false.\n     */\n    extractable?: boolean;\n}\n/**\n * Imports a PEM-encoded SPKI string as a runtime-specific public key representation (KeyObject or\n * CryptoKey).\n *\n * @param pem PEM-encoded SPKI string\n * @param alg (Only effective in Web Crypto API runtimes) JSON Web Algorithm identifier to be used\n *   with the imported key, its presence is only enforced in Web Crypto API runtimes. See\n *   {@link https://github.com/panva/jose/issues/210 Algorithm Key Requirements}.\n */\nexport declare function importSPKI<T extends KeyLike = KeyLike>(spki: string, alg: string, options?: PEMImportOptions): Promise<T>;\n/**\n * Imports the SPKI from an X.509 string certificate as a runtime-specific public key representation\n * (KeyObject or CryptoKey).\n *\n * @param pem X.509 certificate string\n * @param alg (Only effective in Web Crypto API runtimes) JSON Web Algorithm identifier to be used\n *   with the imported key, its presence is only enforced in Web Crypto API runtimes. See\n *   {@link https://github.com/panva/jose/issues/210 Algorithm Key Requirements}.\n */\nexport declare function importX509<T extends KeyLike = KeyLike>(x509: string, alg: string, options?: PEMImportOptions): Promise<T>;\n/**\n * Imports a PEM-encoded PKCS#8 string as a runtime-specific private key representation (KeyObject\n * or CryptoKey).\n *\n * @param pem PEM-encoded PKCS#8 string\n * @param alg (Only effective in Web Crypto API runtimes) JSON Web Algorithm identifier to be used\n *   with the imported key, its presence is only enforced in Web Crypto API runtimes. See\n *   {@link https://github.com/panva/jose/issues/210 Algorithm Key Requirements}.\n */\nexport declare function importPKCS8<T extends KeyLike = KeyLike>(pkcs8: string, alg: string, options?: PEMImportOptions): Promise<T>;\n/**\n * Imports a JWK to a runtime-specific key representation (KeyLike). Either JWK \"alg\" (Algorithm)\n * Parameter must be present or the optional \"alg\" argument. When running on a runtime using\n * {@link https://www.w3.org/TR/WebCryptoAPI/ Web Cryptography API} the jwk parameters \"use\",\n * \"key_ops\", and \"ext\" are also used in the resulting `CryptoKey`.\n *\n * @param jwk JSON Web Key.\n * @param alg (Only effective in Web Crypto API runtimes) JSON Web Algorithm identifier to be used\n *   with the imported key. Default is the \"alg\" property on the JWK, its presence is only enforced\n *   in Web Crypto API runtimes. See\n *   {@link https://github.com/panva/jose/issues/210 Algorithm Key Requirements}.\n * @param octAsKeyObject Forces a symmetric key to be imported to a KeyObject or CryptoKey. Default\n *   is true unless JWK \"ext\" (Extractable) is true.\n */\nexport declare function importJWK<T extends KeyLike = KeyLike>(jwk: JWK, alg?: string, octAsKeyObject?: boolean): Promise<T | Uint8Array>;\n"
        }
    ]
}