{
    "sourceFile": "node_modules/jose/dist/types/key/generate_key_pair.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { KeyLike } from '../types';\nexport interface GenerateKeyPairResult<T extends KeyLike = KeyLike> {\n    /** The generated Private Key. */\n    privateKey: T;\n    /** Public Key corresponding to the generated Private Key. */\n    publicKey: T;\n}\nexport interface GenerateKeyPairOptions {\n    /**\n     * The EC \"crv\" (Curve) or OKP \"crv\" (Subtype of Key Pair) value to generate. The curve must be\n     * both supported on the runtime as well as applicable for the given JWA algorithm identifier.\n     */\n    crv?: string;\n    /**\n     * A hint for RSA algorithms to generate an RSA key of a given `modulusLength` (Key size in bits).\n     * JOSE requires 2048 bits or larger. Default is 2048.\n     */\n    modulusLength?: number;\n    /**\n     * (Only effective in Web Crypto API runtimes) The value to use as\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey SubtleCrypto.generateKey()}\n     * `extractable` argument. Default is false.\n     */\n    extractable?: boolean;\n}\n/**\n * Generates a private and a public key for a given JWA algorithm identifier. This can only generate\n * asymmetric key pairs. For symmetric secrets use the `generateSecret` function.\n *\n * Note: Under Web Crypto API runtime the `privateKey` is generated with `extractable` set to\n * `false` by default.\n *\n * @param alg JWA Algorithm Identifier to be used with the generated key pair.\n * @param options Additional options passed down to the key pair generation.\n */\nexport declare function generateKeyPair<T extends KeyLike = KeyLike>(alg: string, options?: GenerateKeyPairOptions): Promise<GenerateKeyPairResult<T>>;\n"
        }
    ]
}