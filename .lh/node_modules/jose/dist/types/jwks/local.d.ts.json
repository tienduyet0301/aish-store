{
    "sourceFile": "node_modules/jose/dist/types/jwks/local.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { KeyLike, JWSHeaderParameters, JSONWebKeySet, FlattenedJWSInput } from '../types';\n/** @private */\nexport declare function isJWKSLike(jwks: unknown): jwks is JSONWebKeySet;\n/** @private */\nexport declare class LocalJWKSet<T extends KeyLike = KeyLike> {\n    protected _jwks?: JSONWebKeySet;\n    private _cached;\n    constructor(jwks: unknown);\n    getKey(protectedHeader?: JWSHeaderParameters, token?: FlattenedJWSInput): Promise<T>;\n}\n/**\n * Returns a function that resolves to a key object from a locally stored, or otherwise available,\n * JSON Web Key Set.\n *\n * It uses the \"alg\" (JWS Algorithm) Header Parameter to determine the right JWK \"kty\" (Key Type),\n * then proceeds to match the JWK \"kid\" (Key ID) with one found in the JWS Header Parameters (if\n * there is one) while also respecting the JWK \"use\" (Public Key Use) and JWK \"key_ops\" (Key\n * Operations) Parameters (if they are present on the JWK).\n *\n * Only a single public key must match the selection process. As shown in the example below when\n * multiple keys get matched it is possible to opt-in to iterate over the matched keys and attempt\n * verification in an iterative manner.\n *\n * @param jwks JSON Web Key Set formatted object.\n */\nexport declare function createLocalJWKSet<T extends KeyLike = KeyLike>(jwks: JSONWebKeySet): (protectedHeader?: JWSHeaderParameters, token?: FlattenedJWSInput) => Promise<T>;\n"
        }
    ]
}