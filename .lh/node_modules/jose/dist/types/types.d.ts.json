{
    "sourceFile": "node_modules/jose/dist/types/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * KeyLike are runtime-specific classes representing asymmetric keys or symmetric secrets. These are\n * instances of {@link https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey CryptoKey} and\n * additionally {@link https://nodejs.org/api/crypto.html#class-keyobject KeyObject} in Node.js\n * runtime.\n * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array Uint8Array}\n * instances are also accepted as symmetric secret representation only.\n *\n * [Key Import Functions](../modules/key_import.md) can be used to import PEM, or JWK formatted\n * asymmetric keys and certificates to these runtime-specific representations.\n *\n * In Node.js the {@link https://nodejs.org/api/buffer.html#buffer Buffer} class is a subclass of\n * Uint8Array and so Buffer can be provided for symmetric secrets as well.\n *\n * {@link https://nodejs.org/api/crypto.html#class-keyobject KeyObject} is a representation of a\n * key/secret available in the Node.js runtime. In addition to the import functions of this library\n * you may use the runtime APIs\n * {@link https://nodejs.org/api/crypto.html#cryptocreatepublickeykey crypto.createPublicKey},\n * {@link https://nodejs.org/api/crypto.html#cryptocreateprivatekeykey crypto.createPrivateKey}, and\n * {@link https://nodejs.org/api/crypto.html#cryptocreatesecretkeykey-encoding crypto.createSecretKey}\n * to obtain a `KeyObject` from your existing key material.\n *\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey CryptoKey} is a representation\n * of a key/secret available in the Browser and Web-interoperable runtimes. In addition to the\n * import functions of this library you may use the\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey SubtleCrypto.importKey}\n * API to obtain a CryptoKey from your existing key material.\n *\n */\nexport type KeyLike = { type: string }\n\n/**\n * JSON Web Key ({@link https://www.rfc-editor.org/rfc/rfc7517 JWK}). \"RSA\", \"EC\", \"OKP\", and \"oct\"\n * key types are supported.\n */\nexport interface JWK {\n  /** JWK \"alg\" (Algorithm) Parameter. */\n  alg?: string\n  crv?: string\n  d?: string\n  dp?: string\n  dq?: string\n  e?: string\n  /** JWK \"ext\" (Extractable) Parameter. */\n  ext?: boolean\n  k?: string\n  /** JWK \"key_ops\" (Key Operations) Parameter. */\n  key_ops?: string[]\n  /** JWK \"kid\" (Key ID) Parameter. */\n  kid?: string\n  /** JWK \"kty\" (Key Type) Parameter. */\n  kty?: string\n  n?: string\n  oth?: Array<{\n    d?: string\n    r?: string\n    t?: string\n  }>\n  p?: string\n  q?: string\n  qi?: string\n  /** JWK \"use\" (Public Key Use) Parameter. */\n  use?: string\n  x?: string\n  y?: string\n  /** JWK \"x5c\" (X.509 Certificate Chain) Parameter. */\n  x5c?: string[]\n  /** JWK \"x5t\" (X.509 Certificate SHA-1 Thumbprint) Parameter. */\n  x5t?: string\n  /** \"x5t#S256\" (X.509 Certificate SHA-256 Thumbprint) Parameter. */\n  'x5t#S256'?: string\n  /** JWK \"x5u\" (X.509 URL) Parameter. */\n  x5u?: string\n\n  [propName: string]: unknown\n}\n\n/**\n * Generic Interface for consuming operations dynamic key resolution.\n *\n * @param IProtectedHeader Type definition of the JWE or JWS Protected Header.\n * @param IToken Type definition of the consumed JWE or JWS token.\n */\nexport interface GetKeyFunction<IProtectedHeader, IToken> {\n  /**\n   * Dynamic key resolution function. No token components have been verified at the time of this\n   * function call.\n   *\n   * If you cannot match a key suitable for the token, throw an error instead.\n   *\n   * @param protectedHeader JWE or JWS Protected Header.\n   * @param token The consumed JWE or JWS token.\n   */\n  (\n    protectedHeader: IProtectedHeader,\n    token: IToken,\n  ): Promise<KeyLike | Uint8Array> | KeyLike | Uint8Array\n}\n\n/**\n * Flattened JWS definition for verify function inputs, allows payload as Uint8Array for detached\n * signature validation.\n */\nexport interface FlattenedJWSInput {\n  /**\n   * The \"header\" member MUST be present and contain the value JWS Unprotected Header when the JWS\n   * Unprotected Header value is non- empty; otherwise, it MUST be absent. This value is represented\n   * as an unencoded JSON object, rather than as a string. These Header Parameter values are not\n   * integrity protected.\n   */\n  header?: JWSHeaderParameters\n\n  /**\n   * The \"payload\" member MUST be present and contain the value BASE64URL(JWS Payload). When RFC7797\n   * \"b64\": false is used the value passed may also be a Uint8Array.\n   */\n  payload: string | Uint8Array\n\n  /**\n   * The \"protected\" member MUST be present and contain the value BASE64URL(UTF8(JWS Protected\n   * Header)) when the JWS Protected Header value is non-empty; otherwise, it MUST be absent. These\n   * Header Parameter values are integrity protected.\n   */\n  protected?: string\n\n  /** The \"signature\" member MUST be present and contain the value BASE64URL(JWS Signature). */\n  signature: string\n}\n\n/**\n * General JWS definition for verify function inputs, allows payload as Uint8Array for detached\n * signature validation.\n */\nexport interface GeneralJWSInput {\n  /**\n   * The \"payload\" member MUST be present and contain the value BASE64URL(JWS Payload). When when\n   * JWS Unencoded Payload ({@link https://www.rfc-editor.org/rfc/rfc7797 RFC7797}) \"b64\": false is\n   * used the value passed may also be a Uint8Array.\n   */\n  payload: string | Uint8Array\n\n  /**\n   * The \"signatures\" member value MUST be an array of JSON objects. Each object represents a\n   * signature or MAC over the JWS Payload and the JWS Protected Header.\n   */\n  signatures: Omit<FlattenedJWSInput, 'payload'>[]\n}\n\n/**\n * Flattened JWS definition. Payload is returned as an empty string when JWS Unencoded Payload\n * ({@link https://www.rfc-editor.org/rfc/rfc7797 RFC7797}) is used.\n */\nexport interface FlattenedJWS extends Partial<FlattenedJWSInput> {\n  payload: string\n  signature: string\n}\n\n/**\n * General JWS definition. Payload is returned as an empty string when JWS Unencoded Payload\n * ({@link https://www.rfc-editor.org/rfc/rfc7797 RFC7797}) is used.\n */\nexport interface GeneralJWS {\n  payload: string\n  signatures: Omit<FlattenedJWSInput, 'payload'>[]\n}\n\nexport interface JoseHeaderParameters {\n  /** \"kid\" (Key ID) Header Parameter. */\n  kid?: string\n\n  /** \"x5t\" (X.509 Certificate SHA-1 Thumbprint) Header Parameter. */\n  x5t?: string\n\n  /** \"x5c\" (X.509 Certificate Chain) Header Parameter. */\n  x5c?: string[]\n\n  /** \"x5u\" (X.509 URL) Header Parameter. */\n  x5u?: string\n\n  /** \"jku\" (JWK Set URL) Header Parameter. */\n  jku?: string\n\n  /** \"jwk\" (JSON Web Key) Header Parameter. */\n  jwk?: Pick<JWK, 'kty' | 'crv' | 'x' | 'y' | 'e' | 'n'>\n\n  /** \"typ\" (Type) Header Parameter. */\n  typ?: string\n\n  /** \"cty\" (Content Type) Header Parameter. */\n  cty?: string\n}\n\n/** Recognized JWS Header Parameters, any other Header Members may also be present. */\nexport interface JWSHeaderParameters extends JoseHeaderParameters {\n  /** JWS \"alg\" (Algorithm) Header Parameter. */\n  alg?: string\n\n  /**\n   * This JWS Extension Header Parameter modifies the JWS Payload representation and the JWS Signing\n   * Input computation as per {@link https://www.rfc-editor.org/rfc/rfc7797 RFC7797}.\n   */\n  b64?: boolean\n\n  /** JWS \"crit\" (Critical) Header Parameter. */\n  crit?: string[]\n\n  /** Any other JWS Header member. */\n  [propName: string]: unknown\n}\n\n/** Recognized JWE Key Management-related Header Parameters. */\nexport interface JWEKeyManagementHeaderParameters {\n  apu?: Uint8Array\n  apv?: Uint8Array\n  /**\n   * @deprecated You should not use this parameter. It is only really intended for test and vector\n   *   validation purposes.\n   */\n  p2c?: number\n  /**\n   * @deprecated You should not use this parameter. It is only really intended for test and vector\n   *   validation purposes.\n   */\n  p2s?: Uint8Array\n  /**\n   * @deprecated You should not use this parameter. It is only really intended for test and vector\n   *   validation purposes.\n   */\n  iv?: Uint8Array\n  /**\n   * @deprecated You should not use this parameter. It is only really intended for test and vector\n   *   validation purposes.\n   */\n  epk?: KeyLike\n}\n\n/** Flattened JWE definition. */\nexport interface FlattenedJWE {\n  /**\n   * The \"aad\" member MUST be present and contain the value BASE64URL(JWE AAD)) when the JWE AAD\n   * value is non-empty; otherwise, it MUST be absent. A JWE AAD value can be included to supply a\n   * base64url-encoded value to be integrity protected but not encrypted.\n   */\n  aad?: string\n\n  /** The \"ciphertext\" member MUST be present and contain the value BASE64URL(JWE Ciphertext). */\n  ciphertext: string\n\n  /**\n   * The \"encrypted_key\" member MUST be present and contain the value BASE64URL(JWE Encrypted Key)\n   * when the JWE Encrypted Key value is non-empty; otherwise, it MUST be absent.\n   */\n  encrypted_key?: string\n\n  /**\n   * The \"header\" member MUST be present and contain the value JWE Per- Recipient Unprotected Header\n   * when the JWE Per-Recipient Unprotected Header value is non-empty; otherwise, it MUST be absent.\n   * This value is represented as an unencoded JSON object, rather than as a string. These Header\n   * Parameter values are not integrity protected.\n   */\n  header?: JWEHeaderParameters\n\n  /**\n   * The \"iv\" member MUST be present and contain the value BASE64URL(JWE Initialization Vector) when\n   * the JWE Initialization Vector value is non-empty; otherwise, it MUST be absent.\n   */\n  iv: string\n\n  /**\n   * The \"protected\" member MUST be present and contain the value BASE64URL(UTF8(JWE Protected\n   * Header)) when the JWE Protected Header value is non-empty; otherwise, it MUST be absent. These\n   * Header Parameter values are integrity protected.\n   */\n  protected?: string\n\n  /**\n   * The \"tag\" member MUST be present and contain the value BASE64URL(JWE Authentication Tag) when\n   * the JWE Authentication Tag value is non-empty; otherwise, it MUST be absent.\n   */\n  tag: string\n\n  /**\n   * The \"unprotected\" member MUST be present and contain the value JWE Shared Unprotected Header\n   * when the JWE Shared Unprotected Header value is non-empty; otherwise, it MUST be absent. This\n   * value is represented as an unencoded JSON object, rather than as a string. These Header\n   * Parameter values are not integrity protected.\n   */\n  unprotected?: JWEHeaderParameters\n}\n\nexport interface GeneralJWE extends Omit<FlattenedJWE, 'encrypted_key' | 'header'> {\n  recipients: Pick<FlattenedJWE, 'encrypted_key' | 'header'>[]\n}\n\n/** Recognized JWE Header Parameters, any other Header members may also be present. */\nexport interface JWEHeaderParameters extends JoseHeaderParameters {\n  /** JWE \"alg\" (Algorithm) Header Parameter. */\n  alg?: string\n\n  /** JWE \"enc\" (Encryption Algorithm) Header Parameter. */\n  enc?: string\n\n  /** JWE \"crit\" (Critical) Header Parameter. */\n  crit?: string[]\n\n  /**\n   * JWE \"zip\" (Compression Algorithm) Header Parameter.\n   *\n   * @deprecated Compression of data SHOULD NOT be done before encryption, because such compressed\n   *   data often reveals information about the plaintext.\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc8725#name-avoid-compression-of-encryp Avoid Compression of Encryption Inputs}\n   */\n  zip?: string\n\n  /** Any other JWE Header member. */\n  [propName: string]: unknown\n}\n\n/** Shared Interface with a \"crit\" property for all sign, verify, encrypt and decrypt operations. */\nexport interface CritOption {\n  /**\n   * An object with keys representing recognized \"crit\" (Critical) Header Parameter names. The value\n   * for those is either `true` or `false`. `true` when the Header Parameter MUST be integrity\n   * protected, `false` when it's irrelevant.\n   *\n   * This makes the \"Extension Header Parameter \"...\" is not recognized\" error go away.\n   *\n   * Use this when a given JWS/JWT/JWE profile requires the use of proprietary non-registered \"crit\"\n   * (Critical) Header Parameters. This will only make sure the Header Parameter is syntactically\n   * correct when provided and that it is optionally integrity protected. It will not process the\n   * Header Parameter in any way or reject the operation if it is missing. You MUST still verify the\n   * Header Parameter was present and process it according to the profile's validation steps after\n   * the operation succeeds.\n   *\n   * The JWS extension Header Parameter `b64` is always recognized and processed properly. No other\n   * registered Header Parameters that need this kind of default built-in treatment are currently\n   * available.\n   */\n  crit?: {\n    [propName: string]: boolean\n  }\n}\n\n/** JWE Decryption options. */\nexport interface DecryptOptions extends CritOption {\n  /** A list of accepted JWE \"alg\" (Algorithm) Header Parameter values. */\n  keyManagementAlgorithms?: string[]\n\n  /**\n   * A list of accepted JWE \"enc\" (Encryption Algorithm) Header Parameter values. By default all\n   * \"enc\" (Encryption Algorithm) values applicable for the used key/secret are allowed.\n   */\n  contentEncryptionAlgorithms?: string[]\n\n  /**\n   * In a browser runtime you have to provide an implementation for Inflate Raw when you expect JWEs\n   * with compressed plaintext.\n   */\n  inflateRaw?: InflateFunction\n\n  /**\n   * (PBES2 Key Management Algorithms only) Maximum allowed \"p2c\" (PBES2 Count) Header Parameter\n   * value. The PBKDF2 iteration count defines the algorithm's computational expense. By default\n   * this value is set to 10000.\n   */\n  maxPBES2Count?: number\n}\n\n/** JWE Deflate option. */\nexport interface DeflateOption {\n  /**\n   * In a browser runtime you have to provide an implementation for Deflate Raw when you will be\n   * producing JWEs with compressed plaintext.\n   */\n  deflateRaw?: DeflateFunction\n}\n\n/** JWE Encryption options. */\nexport interface EncryptOptions extends CritOption, DeflateOption {}\n\n/** JWT Claims Set verification options. */\nexport interface JWTClaimVerificationOptions {\n  /** Expected JWT \"aud\" (Audience) Claim value(s). */\n  audience?: string | string[]\n\n  /**\n   * Expected clock tolerance\n   *\n   * - In seconds when number (e.g. 5)\n   * - Parsed as seconds when a string (e.g. \"5 seconds\", \"10 minutes\", \"2 hours\").\n   */\n  clockTolerance?: string | number\n\n  /** Expected JWT \"iss\" (Issuer) Claim value(s). */\n  issuer?: string | string[]\n\n  /**\n   * Maximum time elapsed (in seconds) from the JWT \"iat\" (Issued At) Claim value.\n   *\n   * - In seconds when number (e.g. 5)\n   * - Parsed as seconds when a string (e.g. \"5 seconds\", \"10 minutes\", \"2 hours\").\n   */\n  maxTokenAge?: string | number\n\n  /** Expected JWT \"sub\" (Subject) Claim value. */\n  subject?: string\n\n  /** Expected JWT \"typ\" (Type) Header Parameter value. */\n  typ?: string\n\n  /** Date to use when comparing NumericDate claims, defaults to `new Date()`. */\n  currentDate?: Date\n\n  /**\n   * Array of required Claim Names that must be present in the JWT Claims Set. Default is that: if\n   * the {@link JWTClaimVerificationOptions.issuer issuer option} is set, then \"iss\" must be present;\n   * if the {@link JWTClaimVerificationOptions.audience audience option} is set, then \"aud\" must be\n   * present; if the {@link JWTClaimVerificationOptions.subject subject option} is set, then \"sub\"\n   * must be present; if the {@link JWTClaimVerificationOptions.maxTokenAge maxTokenAge option} is\n   * set, then \"iat\" must be present.\n   */\n  requiredClaims?: string[]\n}\n\n/** JWS Verification options. */\nexport interface VerifyOptions extends CritOption {\n  /**\n   * A list of accepted JWS \"alg\" (Algorithm) Header Parameter values. By default all \"alg\"\n   * (Algorithm) values applicable for the used key/secret are allowed. Note: \"none\" is never\n   * accepted.\n   */\n  algorithms?: string[]\n}\n\n/** JWS Signing options. */\nexport interface SignOptions extends CritOption {}\n\n/** Recognized JWT Claims Set members, any other members may also be present. */\nexport interface JWTPayload {\n  /**\n   * JWT Issuer\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.1 RFC7519#section-4.1.1}\n   */\n  iss?: string\n\n  /**\n   * JWT Subject\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.2 RFC7519#section-4.1.2}\n   */\n  sub?: string\n\n  /**\n   * JWT Audience\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.3 RFC7519#section-4.1.3}\n   */\n  aud?: string | string[]\n\n  /**\n   * JWT ID\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.7 RFC7519#section-4.1.7}\n   */\n  jti?: string\n\n  /**\n   * JWT Not Before\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.5 RFC7519#section-4.1.5}\n   */\n  nbf?: number\n\n  /**\n   * JWT Expiration Time\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.4 RFC7519#section-4.1.4}\n   */\n  exp?: number\n\n  /**\n   * JWT Issued At\n   *\n   * @see {@link https://www.rfc-editor.org/rfc/rfc7519#section-4.1.6 RFC7519#section-4.1.6}\n   */\n  iat?: number\n\n  /** Any other JWT Claim Set member. */\n  [propName: string]: unknown\n}\n\n/**\n * Deflate Raw implementation, e.g. promisified\n * {@link https://nodejs.org/api/zlib.html#zlibdeflaterawbuffer-options-callback zlib.deflateRaw}.\n *\n * @deprecated Compression of data SHOULD NOT be done before encryption, because such compressed\n *   data often reveals information about the plaintext.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc8725#name-avoid-compression-of-encryp Avoid Compression of Encryption Inputs}\n */\nexport interface DeflateFunction {\n  (input: Uint8Array): Promise<Uint8Array>\n}\n\n/**\n * Inflate Raw implementation, e.g. promisified\n * {@link https://nodejs.org/api/zlib.html#zlibinflaterawbuffer-options-callback zlib.inflateRaw}.\n *\n * @deprecated Compression of data SHOULD NOT be done before encryption, because such compressed\n *   data often reveals information about the plaintext.\n *\n * @see {@link https://www.rfc-editor.org/rfc/rfc8725#name-avoid-compression-of-encryp Avoid Compression of Encryption Inputs}\n */\nexport interface InflateFunction {\n  (input: Uint8Array): Promise<Uint8Array>\n}\n\nexport interface FlattenedDecryptResult {\n  /** JWE AAD. */\n  additionalAuthenticatedData?: Uint8Array\n\n  /** Plaintext. */\n  plaintext: Uint8Array\n\n  /** JWE Protected Header. */\n  protectedHeader?: JWEHeaderParameters\n\n  /** JWE Shared Unprotected Header. */\n  sharedUnprotectedHeader?: JWEHeaderParameters\n\n  /** JWE Per-Recipient Unprotected Header. */\n  unprotectedHeader?: JWEHeaderParameters\n}\n\nexport interface GeneralDecryptResult extends FlattenedDecryptResult {}\n\nexport interface CompactDecryptResult {\n  /** Plaintext. */\n  plaintext: Uint8Array\n\n  /** JWE Protected Header. */\n  protectedHeader: CompactJWEHeaderParameters\n}\n\nexport interface FlattenedVerifyResult {\n  /** JWS Payload. */\n  payload: Uint8Array\n\n  /** JWS Protected Header. */\n  protectedHeader?: JWSHeaderParameters\n\n  /** JWS Unprotected Header. */\n  unprotectedHeader?: JWSHeaderParameters\n}\n\nexport interface GeneralVerifyResult extends FlattenedVerifyResult {}\n\nexport interface CompactVerifyResult {\n  /** JWS Payload. */\n  payload: Uint8Array\n\n  /** JWS Protected Header. */\n  protectedHeader: CompactJWSHeaderParameters\n}\n\nexport interface JWTVerifyResult {\n  /** JWT Claims Set. */\n  payload: JWTPayload\n\n  /** JWS Protected Header. */\n  protectedHeader: JWTHeaderParameters\n}\n\nexport interface JWTDecryptResult {\n  /** JWT Claims Set. */\n  payload: JWTPayload\n\n  /** JWE Protected Header. */\n  protectedHeader: CompactJWEHeaderParameters\n}\n\nexport interface ResolvedKey<T extends KeyLike = KeyLike> {\n  /** Key resolved from the key resolver function. */\n  key: T | Uint8Array\n}\n\n/** Recognized Compact JWS Header Parameters, any other Header Members may also be present. */\nexport interface CompactJWSHeaderParameters extends JWSHeaderParameters {\n  alg: string\n}\n\n/** Recognized Signed JWT Header Parameters, any other Header Members may also be present. */\nexport interface JWTHeaderParameters extends CompactJWSHeaderParameters {\n  b64?: true\n}\n\n/** Recognized Compact JWE Header Parameters, any other Header Members may also be present. */\nexport interface CompactJWEHeaderParameters extends JWEHeaderParameters {\n  alg: string\n  enc: string\n}\n\n/** JSON Web Key Set */\nexport interface JSONWebKeySet {\n  keys: JWK[]\n}\n\nexport type CryptoRuntime = 'WebCryptoAPI' | 'node:crypto'\n"
        }
    ]
}