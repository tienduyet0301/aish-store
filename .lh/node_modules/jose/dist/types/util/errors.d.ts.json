{
    "sourceFile": "node_modules/jose/dist/types/util/errors.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { KeyLike } from '../types';\n/**\n * A generic Error that all other JOSE specific Error subclasses extend.\n *\n */\nexport declare class JOSEError extends Error {\n    /** A unique error code for the particular error subclass. */\n    static get code(): string;\n    /** A unique error code for the particular error subclass. */\n    code: string;\n    constructor(message?: string);\n}\n/**\n * An error subclass thrown when a JWT Claim Set member validation fails.\n *\n */\nexport declare class JWTClaimValidationFailed extends JOSEError {\n    static get code(): 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n    code: string;\n    /** The Claim for which the validation failed. */\n    claim: string;\n    /** Reason code for the validation failure. */\n    reason: string;\n    constructor(message: string, claim?: string, reason?: string);\n}\n/**\n * An error subclass thrown when a JWT is expired.\n *\n */\nexport declare class JWTExpired extends JOSEError implements JWTClaimValidationFailed {\n    static get code(): 'ERR_JWT_EXPIRED';\n    code: string;\n    /** The Claim for which the validation failed. */\n    claim: string;\n    /** Reason code for the validation failure. */\n    reason: string;\n    constructor(message: string, claim?: string, reason?: string);\n}\n/**\n * An error subclass thrown when a JOSE Algorithm is not allowed per developer preference.\n *\n */\nexport declare class JOSEAlgNotAllowed extends JOSEError {\n    static get code(): 'ERR_JOSE_ALG_NOT_ALLOWED';\n    code: string;\n}\n/**\n * An error subclass thrown when a particular feature or algorithm is not supported by this\n * implementation or JOSE in general.\n *\n */\nexport declare class JOSENotSupported extends JOSEError {\n    static get code(): 'ERR_JOSE_NOT_SUPPORTED';\n    code: string;\n}\n/**\n * An error subclass thrown when a JWE ciphertext decryption fails.\n *\n */\nexport declare class JWEDecryptionFailed extends JOSEError {\n    static get code(): 'ERR_JWE_DECRYPTION_FAILED';\n    code: string;\n    message: string;\n}\n/**\n * An error subclass thrown when a JWE ciphertext decompression fails.\n *\n */\nexport declare class JWEDecompressionFailed extends JOSEError {\n    static get code(): 'ERR_JWE_DECOMPRESSION_FAILED';\n    code: string;\n    message: string;\n}\n/**\n * An error subclass thrown when a JWE is invalid.\n *\n */\nexport declare class JWEInvalid extends JOSEError {\n    static get code(): 'ERR_JWE_INVALID';\n    code: string;\n}\n/**\n * An error subclass thrown when a JWS is invalid.\n *\n */\nexport declare class JWSInvalid extends JOSEError {\n    static get code(): 'ERR_JWS_INVALID';\n    code: string;\n}\n/**\n * An error subclass thrown when a JWT is invalid.\n *\n */\nexport declare class JWTInvalid extends JOSEError {\n    static get code(): 'ERR_JWT_INVALID';\n    code: string;\n}\n/**\n * An error subclass thrown when a JWK is invalid.\n *\n */\nexport declare class JWKInvalid extends JOSEError {\n    static get code(): 'ERR_JWK_INVALID';\n    code: string;\n}\n/**\n * An error subclass thrown when a JWKS is invalid.\n *\n */\nexport declare class JWKSInvalid extends JOSEError {\n    static get code(): 'ERR_JWKS_INVALID';\n    code: string;\n}\n/**\n * An error subclass thrown when no keys match from a JWKS.\n *\n */\nexport declare class JWKSNoMatchingKey extends JOSEError {\n    static get code(): 'ERR_JWKS_NO_MATCHING_KEY';\n    code: string;\n    message: string;\n}\n/**\n * An error subclass thrown when multiple keys match from a JWKS.\n *\n */\nexport declare class JWKSMultipleMatchingKeys extends JOSEError {\n    /** @ignore */\n    [Symbol.asyncIterator]: () => AsyncIterableIterator<KeyLike>;\n    static get code(): 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n    code: string;\n    message: string;\n}\n/**\n * Timeout was reached when retrieving the JWKS response.\n *\n */\nexport declare class JWKSTimeout extends JOSEError {\n    static get code(): 'ERR_JWKS_TIMEOUT';\n    code: string;\n    message: string;\n}\n/**\n * An error subclass thrown when JWS signature verification fails.\n *\n */\nexport declare class JWSSignatureVerificationFailed extends JOSEError {\n    static get code(): 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n    code: string;\n    message: string;\n}\n"
        }
    ]
}