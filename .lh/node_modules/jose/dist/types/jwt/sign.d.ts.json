{
    "sourceFile": "node_modules/jose/dist/types/jwt/sign.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { JWTHeaderParameters, KeyLike, SignOptions } from '../types';\nimport { ProduceJWT } from './produce';\n/**\n * The SignJWT class is used to build and sign Compact JWS formatted JSON Web Tokens.\n *\n */\nexport declare class SignJWT extends ProduceJWT {\n    private _protectedHeader;\n    /**\n     * Sets the JWS Protected Header on the SignJWT object.\n     *\n     * @param protectedHeader JWS Protected Header. Must contain an \"alg\" (JWS Algorithm) property.\n     */\n    setProtectedHeader(protectedHeader: JWTHeaderParameters): this;\n    /**\n     * Signs and returns the JWT.\n     *\n     * @param key Private Key or Secret to sign the JWT with. See\n     *   {@link https://github.com/panva/jose/issues/210#jws-alg Algorithm Key Requirements}.\n     * @param options JWT Sign options.\n     */\n    sign(key: KeyLike | Uint8Array, options?: SignOptions): Promise<string>;\n}\n"
        }
    ]
}