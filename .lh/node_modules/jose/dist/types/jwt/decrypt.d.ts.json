{
    "sourceFile": "node_modules/jose/dist/types/jwt/decrypt.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { KeyLike, DecryptOptions, JWTClaimVerificationOptions, GetKeyFunction, CompactJWEHeaderParameters, FlattenedJWE, JWTDecryptResult, ResolvedKey } from '../types';\n/** Combination of JWE Decryption options and JWT Claims Set verification options. */\nexport interface JWTDecryptOptions extends DecryptOptions, JWTClaimVerificationOptions {\n}\n/**\n * Interface for JWT Decryption dynamic key resolution. No token components have been verified at\n * the time of this function call.\n */\nexport interface JWTDecryptGetKey extends GetKeyFunction<CompactJWEHeaderParameters, FlattenedJWE> {\n}\n/**\n * Verifies the JWT format (to be a JWE Compact format), decrypts the ciphertext, validates the JWT\n * Claims Set.\n *\n * @param jwt JSON Web Token value (encoded as JWE).\n * @param key Private Key or Secret to decrypt and verify the JWT with. See\n *   {@link https://github.com/panva/jose/issues/210#jwe-alg Algorithm Key Requirements}.\n * @param options JWT Decryption and JWT Claims Set validation options.\n */\nexport declare function jwtDecrypt(jwt: string | Uint8Array, key: KeyLike | Uint8Array, options?: JWTDecryptOptions): Promise<JWTDecryptResult>;\n/**\n * @param jwt JSON Web Token value (encoded as JWE).\n * @param getKey Function resolving Private Key or Secret to decrypt and verify the JWT with. See\n *   {@link https://github.com/panva/jose/issues/210#jwe-alg Algorithm Key Requirements}.\n * @param options JWT Decryption and JWT Claims Set validation options.\n */\nexport declare function jwtDecrypt<T extends KeyLike = KeyLike>(jwt: string | Uint8Array, getKey: JWTDecryptGetKey, options?: JWTDecryptOptions): Promise<JWTDecryptResult & ResolvedKey<T>>;\n"
        }
    ]
}