{
    "sourceFile": "node_modules/jose/dist/types/jwt/verify.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892370542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { KeyLike, VerifyOptions, JWTClaimVerificationOptions, JWTHeaderParameters, GetKeyFunction, FlattenedJWSInput, JWTVerifyResult, ResolvedKey } from '../types';\n/** Combination of JWS Verification options and JWT Claims Set verification options. */\nexport interface JWTVerifyOptions extends VerifyOptions, JWTClaimVerificationOptions {\n}\n/**\n * Interface for JWT Verification dynamic key resolution. No token components have been verified at\n * the time of this function call.\n *\n * @see [createRemoteJWKSet](../functions/jwks_remote.createRemoteJWKSet.md#function-createremotejwkset) to verify using a remote JSON Web Key Set.\n */\nexport interface JWTVerifyGetKey extends GetKeyFunction<JWTHeaderParameters, FlattenedJWSInput> {\n}\n/**\n * Verifies the JWT format (to be a JWS Compact format), verifies the JWS signature, validates the\n * JWT Claims Set.\n *\n * @param jwt JSON Web Token value (encoded as JWS).\n * @param key Key to verify the JWT with. See\n *   {@link https://github.com/panva/jose/issues/210#jws-alg Algorithm Key Requirements}.\n * @param options JWT Decryption and JWT Claims Set validation options.\n */\nexport declare function jwtVerify(jwt: string | Uint8Array, key: KeyLike | Uint8Array, options?: JWTVerifyOptions): Promise<JWTVerifyResult>;\n/**\n * @param jwt JSON Web Token value (encoded as JWS).\n * @param getKey Function resolving a key to verify the JWT with. See\n *   {@link https://github.com/panva/jose/issues/210#jws-alg Algorithm Key Requirements}.\n * @param options JWT Decryption and JWT Claims Set validation options.\n */\nexport declare function jwtVerify<T extends KeyLike = KeyLike>(jwt: string | Uint8Array, getKey: JWTVerifyGetKey, options?: JWTVerifyOptions): Promise<JWTVerifyResult & ResolvedKey<T>>;\n"
        }
    ]
}