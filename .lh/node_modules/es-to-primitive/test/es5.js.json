{
    "sourceFile": "node_modules/es-to-primitive/test/es5.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892206598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar toPrimitive = require('../es5');\nvar is = require('object-is');\nvar forEach = require('for-each');\nvar functionName = require('function.prototype.name');\nvar debug = require('object-inspect');\nvar v = require('es-value-fixtures');\n\ntest('function properties', function (t) {\n\tt.equal(toPrimitive.length, 1, 'length is 1');\n\tt.equal(functionName(toPrimitive), 'ToPrimitive', 'name is ToPrimitive');\n\n\tt.end();\n});\n\ntest('primitives', function (t) {\n\tforEach(v.primitives, function (i) {\n\t\tt.ok(is(toPrimitive(i), i), 'toPrimitive(' + debug(i) + ') returns the same value');\n\t\tt.ok(is(toPrimitive(i, String), i), 'toPrimitive(' + debug(i) + ', String) returns the same value');\n\t\tt.ok(is(toPrimitive(i, Number), i), 'toPrimitive(' + debug(i) + ', Number) returns the same value');\n\t});\n\tt.end();\n});\n\ntest('Symbols', { skip: !v.hasSymbols }, function (t) {\n\tforEach(v.symbols, function (sym) {\n\t\tt.equal(toPrimitive(sym), sym, 'toPrimitive(' + debug(sym) + ') returns the same value');\n\t\tt.equal(toPrimitive(sym, String), sym, 'toPrimitive(' + debug(sym) + ', String) returns the same value');\n\t\tt.equal(toPrimitive(sym, Number), sym, 'toPrimitive(' + debug(sym) + ', Number) returns the same value');\n\t});\n\n\tvar primitiveSym = Symbol('primitiveSym');\n\tvar stringSym = Symbol.prototype.toString.call(primitiveSym);\n\tvar objectSym = Object(primitiveSym);\n\tt.equal(toPrimitive(objectSym), primitiveSym, 'toPrimitive(' + debug(objectSym) + ') returns ' + debug(primitiveSym));\n\n\t// This is different from ES2015, as the ES5 algorithm doesn't account for the existence of Symbols:\n\tt.equal(toPrimitive(objectSym, String), stringSym, 'toPrimitive(' + debug(objectSym) + ', String) returns ' + debug(stringSym));\n\tt.equal(toPrimitive(objectSym, Number), primitiveSym, 'toPrimitive(' + debug(objectSym) + ', Number) returns ' + debug(primitiveSym));\n\tt.end();\n});\n\ntest('Arrays', function (t) {\n\tvar arrays = [[], ['a', 'b'], [1, 2]];\n\tforEach(arrays, function (arr) {\n\t\tt.ok(is(toPrimitive(arr), arr.toString()), 'toPrimitive(' + debug(arr) + ') returns toString of the array');\n\t\tt.equal(toPrimitive(arr, String), arr.toString(), 'toPrimitive(' + debug(arr) + ') returns toString of the array');\n\t\tt.ok(is(toPrimitive(arr, Number), arr.toString()), 'toPrimitive(' + debug(arr) + ') returns toString of the array');\n\t});\n\tt.end();\n});\n\ntest('Dates', function (t) {\n\tvar dates = [new Date(), new Date(0), new Date(NaN)];\n\tforEach(dates, function (date) {\n\t\tt.equal(toPrimitive(date), date.toString(), 'toPrimitive(' + debug(date) + ') returns toString of the date');\n\t\tt.equal(toPrimitive(date, String), date.toString(), 'toPrimitive(' + debug(date) + ') returns toString of the date');\n\t\tt.ok(is(toPrimitive(date, Number), date.valueOf()), 'toPrimitive(' + debug(date) + ') returns valueOf of the date');\n\t});\n\tt.end();\n});\n\ntest('Objects', function (t) {\n\tt.equal(toPrimitive(v.coercibleObject), v.coercibleObject.valueOf(), 'coercibleObject with no hint coerces to valueOf');\n\tt.equal(toPrimitive(v.coercibleObject, String), v.coercibleObject.toString(), 'coercibleObject with hint String coerces to toString');\n\tt.equal(toPrimitive(v.coercibleObject, Number), v.coercibleObject.valueOf(), 'coercibleObject with hint Number coerces to valueOf');\n\n\tt.equal(toPrimitive(v.coercibleFnObject), v.coercibleFnObject.toString(), 'coercibleFnObject coerces to toString');\n\tt.equal(toPrimitive(v.coercibleFnObject, String), v.coercibleFnObject.toString(), 'coercibleFnObject with hint String coerces to toString');\n\tt.equal(toPrimitive(v.coercibleFnObject, Number), v.coercibleFnObject.toString(), 'coercibleFnObject with hint Number coerces to toString');\n\n\tt.ok(is(toPrimitive({}), '[object Object]'), '{} with no hint coerces to Object#toString');\n\tt.equal(toPrimitive({}, String), '[object Object]', '{} with hint String coerces to Object#toString');\n\tt.ok(is(toPrimitive({}, Number), '[object Object]'), '{} with hint Number coerces to Object#toString');\n\n\tt.equal(toPrimitive(v.toStringOnlyObject), v.toStringOnlyObject.toString(), 'toStringOnlyObject returns toString');\n\tt.equal(toPrimitive(v.toStringOnlyObject, String), v.toStringOnlyObject.toString(), 'toStringOnlyObject with hint String returns toString');\n\tt.equal(toPrimitive(v.toStringOnlyObject, Number), v.toStringOnlyObject.toString(), 'toStringOnlyObject with hint Number returns toString');\n\n\tt.equal(toPrimitive(v.valueOfOnlyObject), v.valueOfOnlyObject.valueOf(), 'valueOfOnlyObject returns valueOf');\n\tt.equal(toPrimitive(v.valueOfOnlyObject, String), v.valueOfOnlyObject.valueOf(), 'valueOfOnlyObject with hint String returns valueOf');\n\tt.equal(toPrimitive(v.valueOfOnlyObject, Number), v.valueOfOnlyObject.valueOf(), 'valueOfOnlyObject with hint Number returns valueOf');\n\n\tt.test('exceptions', function (st) {\n\t\tst['throws'](toPrimitive.bind(null, v.uncoercibleObject), TypeError, 'uncoercibleObject throws a TypeError');\n\t\tst['throws'](toPrimitive.bind(null, v.uncoercibleObject, String), TypeError, 'uncoercibleObject with hint String throws a TypeError');\n\t\tst['throws'](toPrimitive.bind(null, v.uncoercibleObject, Number), TypeError, 'uncoercibleObject with hint Number throws a TypeError');\n\n\t\tst['throws'](toPrimitive.bind(null, v.uncoercibleFnObject), TypeError, 'uncoercibleFnObject throws a TypeError');\n\t\tst['throws'](toPrimitive.bind(null, v.uncoercibleFnObject, String), TypeError, 'uncoercibleFnObject with hint String throws a TypeError');\n\t\tst['throws'](toPrimitive.bind(null, v.uncoercibleFnObject, Number), TypeError, 'uncoercibleFnObject with hint Number throws a TypeError');\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}