{
    "sourceFile": "node_modules/eslint/lib/options.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892213352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Options configuration for optionator.\n * @author George Zahariev\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst optionator = require(\"optionator\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * The options object parsed by Optionator.\n * @typedef {Object} ParsedCLIOptions\n * @property {boolean} cache Only check changed files\n * @property {string} cacheFile Path to the cache file. Deprecated: use --cache-location\n * @property {string} [cacheLocation] Path to the cache file or directory\n * @property {\"metadata\" | \"content\"} cacheStrategy Strategy to use for detecting changed files in the cache\n * @property {boolean} [color] Force enabling/disabling of color\n * @property {string} [config] Use this configuration, overriding .eslintrc.* config options if present\n * @property {boolean} debug Output debugging information\n * @property {string[]} [env] Specify environments\n * @property {boolean} envInfo Output execution environment information\n * @property {boolean} errorOnUnmatchedPattern Prevent errors when pattern is unmatched\n * @property {boolean} eslintrc Disable use of configuration from .eslintrc.*\n * @property {string[]} [ext] Specify JavaScript file extensions\n * @property {string[]} [flag] Feature flags\n * @property {boolean} fix Automatically fix problems\n * @property {boolean} fixDryRun Automatically fix problems without saving the changes to the file system\n * @property {(\"directive\" | \"problem\" | \"suggestion\" | \"layout\")[]} [fixType] Specify the types of fixes to apply (directive, problem, suggestion, layout)\n * @property {string} format Use a specific output format\n * @property {string[]} [global] Define global variables\n * @property {boolean} [help] Show help\n * @property {boolean} ignore Disable use of ignore files and patterns\n * @property {string} [ignorePath] Specify path of ignore file\n * @property {string[]} [ignorePattern] Patterns of files to ignore. In eslintrc mode, these are in addition to `.eslintignore`\n * @property {boolean} init Run config initialization wizard\n * @property {boolean} inlineConfig Prevent comments from changing config or rules\n * @property {number} maxWarnings Number of warnings to trigger nonzero exit code\n * @property {string} [outputFile] Specify file to write report to\n * @property {string} [parser] Specify the parser to be used\n * @property {Object} [parserOptions] Specify parser options\n * @property {string[]} [plugin] Specify plugins\n * @property {string} [printConfig] Print the configuration for the given file\n * @property {boolean | undefined} reportUnusedDisableDirectives Adds reported errors for unused eslint-disable and eslint-enable directives\n * @property {string | undefined} reportUnusedDisableDirectivesSeverity A severity string indicating if and how unused disable and enable directives should be tracked and reported.\n * @property {string} [resolvePluginsRelativeTo] A folder where plugins should be resolved from, CWD by default\n * @property {Object} [rule] Specify rules\n * @property {string[]} [rulesdir] Load additional rules from this directory. Deprecated: Use rules from plugins\n * @property {boolean} stdin Lint code provided on <STDIN>\n * @property {string} [stdinFilename] Specify filename to process STDIN as\n * @property {boolean} quiet Report errors only\n * @property {boolean} [version] Output the version number\n * @property {boolean} warnIgnored Show warnings when the file list includes ignored files\n * @property {boolean} [passOnNoPatterns=false] When set to true, missing patterns cause\n *      the linting operation to short circuit and not report any failures.\n * @property {string[]} _ Positional filenames or patterns\n * @property {boolean} [stats] Report additional statistics\n */\n\n//------------------------------------------------------------------------------\n// Initialization and Public Interface\n//------------------------------------------------------------------------------\n\n// exports \"parse(args)\", \"generateHelp()\", and \"generateHelpForOption(optionName)\"\n\n/**\n * Creates the CLI options for ESLint.\n * @param {boolean} usingFlatConfig Indicates if flat config is being used.\n * @returns {Object} The optionator instance.\n */\nmodule.exports = function(usingFlatConfig) {\n\n    let lookupFlag;\n\n    if (usingFlatConfig) {\n        lookupFlag = {\n            option: \"config-lookup\",\n            type: \"Boolean\",\n            default: \"true\",\n            description: \"Disable look up for eslint.config.js\"\n        };\n    } else {\n        lookupFlag = {\n            option: \"eslintrc\",\n            type: \"Boolean\",\n            default: \"true\",\n            description: \"Disable use of configuration from .eslintrc.*\"\n        };\n    }\n\n    let envFlag;\n\n    if (!usingFlatConfig) {\n        envFlag = {\n            option: \"env\",\n            type: \"[String]\",\n            description: \"Specify environments\"\n        };\n    }\n\n    let inspectConfigFlag;\n\n    if (usingFlatConfig) {\n        inspectConfigFlag = {\n            option: \"inspect-config\",\n            type: \"Boolean\",\n            description: \"Open the config inspector with the current configuration\"\n        };\n    }\n\n    let extFlag;\n\n    if (!usingFlatConfig) {\n        extFlag = {\n            option: \"ext\",\n            type: \"[String]\",\n            description: \"Specify JavaScript file extensions\"\n        };\n    } else {\n        extFlag = {\n            option: \"ext\",\n            type: \"[String]\",\n            description: \"Specify additional file extensions to lint\"\n        };\n    }\n\n    let resolvePluginsFlag;\n\n    if (!usingFlatConfig) {\n        resolvePluginsFlag = {\n            option: \"resolve-plugins-relative-to\",\n            type: \"path::String\",\n            description: \"A folder where plugins should be resolved from, CWD by default\"\n        };\n    }\n\n    let rulesDirFlag;\n\n    if (!usingFlatConfig) {\n        rulesDirFlag = {\n            option: \"rulesdir\",\n            type: \"[path::String]\",\n            description: \"Load additional rules from this directory. Deprecated: Use rules from plugins\"\n        };\n    }\n\n    let ignorePathFlag;\n\n    if (!usingFlatConfig) {\n        ignorePathFlag = {\n            option: \"ignore-path\",\n            type: \"path::String\",\n            description: \"Specify path of ignore file\"\n        };\n    }\n\n    let statsFlag;\n\n    if (usingFlatConfig) {\n        statsFlag = {\n            option: \"stats\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Add statistics to the lint report\"\n        };\n    }\n\n    let warnIgnoredFlag;\n\n    if (usingFlatConfig) {\n        warnIgnoredFlag = {\n            option: \"warn-ignored\",\n            type: \"Boolean\",\n            default: \"true\",\n            description: \"Suppress warnings when the file list includes ignored files\"\n        };\n    }\n\n    let flagFlag;\n\n    if (usingFlatConfig) {\n        flagFlag = {\n            option: \"flag\",\n            type: \"[String]\",\n            description: \"Enable a feature flag\"\n        };\n    }\n\n    let reportUnusedInlineConfigsFlag;\n\n    if (usingFlatConfig) {\n        reportUnusedInlineConfigsFlag = {\n            option: \"report-unused-inline-configs\",\n            type: \"String\",\n            default: void 0,\n            description: \"Adds reported errors for unused eslint inline config comments\",\n            enum: [\"off\", \"warn\", \"error\", \"0\", \"1\", \"2\"]\n        };\n    }\n\n    return optionator({\n        prepend: \"eslint [options] file.js [file.js] [dir]\",\n        defaults: {\n            concatRepeatedArrays: true,\n            mergeRepeatedObjects: true\n        },\n        options: [\n            {\n                heading: \"Basic configuration\"\n            },\n            lookupFlag,\n            {\n                option: \"config\",\n                alias: \"c\",\n                type: \"path::String\",\n                description: usingFlatConfig\n                    ? \"Use this configuration instead of eslint.config.js, eslint.config.mjs, or eslint.config.cjs\"\n                    : \"Use this configuration, overriding .eslintrc.* config options if present\"\n            },\n            inspectConfigFlag,\n            envFlag,\n            extFlag,\n            {\n                option: \"global\",\n                type: \"[String]\",\n                description: \"Define global variables\"\n            },\n            {\n                option: \"parser\",\n                type: \"String\",\n                description: \"Specify the parser to be used\"\n            },\n            {\n                option: \"parser-options\",\n                type: \"Object\",\n                description: \"Specify parser options\"\n            },\n            resolvePluginsFlag,\n            {\n                heading: \"Specify Rules and Plugins\"\n            },\n            {\n                option: \"plugin\",\n                type: \"[String]\",\n                description: \"Specify plugins\"\n            },\n            {\n                option: \"rule\",\n                type: \"Object\",\n                description: \"Specify rules\"\n            },\n            rulesDirFlag,\n            {\n                heading: \"Fix Problems\"\n            },\n            {\n                option: \"fix\",\n                type: \"Boolean\",\n                default: false,\n                description: \"Automatically fix problems\"\n            },\n            {\n                option: \"fix-dry-run\",\n                type: \"Boolean\",\n                default: false,\n                description: \"Automatically fix problems without saving the changes to the file system\"\n            },\n            {\n                option: \"fix-type\",\n                type: \"Array\",\n                description: \"Specify the types of fixes to apply (directive, problem, suggestion, layout)\"\n            },\n            {\n                heading: \"Ignore Files\"\n            },\n            ignorePathFlag,\n            {\n                option: \"ignore\",\n                type: \"Boolean\",\n                default: \"true\",\n                description: \"Disable use of ignore files and patterns\"\n            },\n            {\n                option: \"ignore-pattern\",\n                type: \"[String]\",\n                description: `Patterns of files to ignore${usingFlatConfig ? \"\" : \" (in addition to those in .eslintignore)\"}`,\n                concatRepeatedArrays: [true, {\n                    oneValuePerFlag: true\n                }]\n            },\n            {\n                heading: \"Use stdin\"\n            },\n            {\n                option: \"stdin\",\n                type: \"Boolean\",\n                default: \"false\",\n                description: \"Lint code provided on <STDIN>\"\n            },\n            {\n                option: \"stdin-filename\",\n                type: \"String\",\n                description: \"Specify filename to process STDIN as\"\n            },\n            {\n                heading: \"Handle Warnings\"\n            },\n            {\n                option: \"quiet\",\n                type: \"Boolean\",\n                default: \"false\",\n                description: \"Report errors only\"\n            },\n            {\n                option: \"max-warnings\",\n                type: \"Int\",\n                default: \"-1\",\n                description: \"Number of warnings to trigger nonzero exit code\"\n            },\n            {\n                heading: \"Output\"\n            },\n            {\n                option: \"output-file\",\n                alias: \"o\",\n                type: \"path::String\",\n                description: \"Specify file to write report to\"\n            },\n            {\n                option: \"format\",\n                alias: \"f\",\n                type: \"String\",\n                default: \"stylish\",\n                description: \"Use a specific output format\"\n            },\n            {\n                option: \"color\",\n                type: \"Boolean\",\n                alias: \"no-color\",\n                description: \"Force enabling/disabling of color\"\n            },\n            {\n                heading: \"Inline configuration comments\"\n            },\n            {\n                option: \"inline-config\",\n                type: \"Boolean\",\n                default: \"true\",\n                description: \"Prevent comments from changing config or rules\"\n            },\n            {\n                option: \"report-unused-disable-directives\",\n                type: \"Boolean\",\n                default: void 0,\n                description: \"Adds reported errors for unused eslint-disable and eslint-enable directives\"\n            },\n            {\n                option: \"report-unused-disable-directives-severity\",\n                type: \"String\",\n                default: void 0,\n                description: \"Chooses severity level for reporting unused eslint-disable and eslint-enable directives\",\n                enum: [\"off\", \"warn\", \"error\", \"0\", \"1\", \"2\"]\n            },\n            reportUnusedInlineConfigsFlag,\n            {\n                heading: \"Caching\"\n            },\n            {\n                option: \"cache\",\n                type: \"Boolean\",\n                default: \"false\",\n                description: \"Only check changed files\"\n            },\n            {\n                option: \"cache-file\",\n                type: \"path::String\",\n                default: \".eslintcache\",\n                description: \"Path to the cache file. Deprecated: use --cache-location\"\n            },\n            {\n                option: \"cache-location\",\n                type: \"path::String\",\n                description: \"Path to the cache file or directory\"\n            },\n            {\n                option: \"cache-strategy\",\n                dependsOn: [\"cache\"],\n                type: \"String\",\n                default: \"metadata\",\n                enum: [\"metadata\", \"content\"],\n                description: \"Strategy to use for detecting changed files in the cache\"\n            },\n            {\n                heading: \"Miscellaneous\"\n            },\n            {\n                option: \"init\",\n                type: \"Boolean\",\n                default: \"false\",\n                description: \"Run config initialization wizard\"\n            },\n            {\n                option: \"env-info\",\n                type: \"Boolean\",\n                default: \"false\",\n                description: \"Output execution environment information\"\n            },\n            {\n                option: \"error-on-unmatched-pattern\",\n                type: \"Boolean\",\n                default: \"true\",\n                description: \"Prevent errors when pattern is unmatched\"\n            },\n            {\n                option: \"exit-on-fatal-error\",\n                type: \"Boolean\",\n                default: \"false\",\n                description: \"Exit with exit code 2 in case of fatal error\"\n            },\n            warnIgnoredFlag,\n            {\n                option: \"pass-on-no-patterns\",\n                type: \"Boolean\",\n                default: false,\n                description: \"Exit with exit code 0 in case no file patterns are passed\"\n            },\n            {\n                option: \"debug\",\n                type: \"Boolean\",\n                default: false,\n                description: \"Output debugging information\"\n            },\n            {\n                option: \"help\",\n                alias: \"h\",\n                type: \"Boolean\",\n                description: \"Show help\"\n            },\n            {\n                option: \"version\",\n                alias: \"v\",\n                type: \"Boolean\",\n                description: \"Output the version number\"\n            },\n            {\n                option: \"print-config\",\n                type: \"path::String\",\n                description: \"Print the configuration for the given file\"\n            },\n            statsFlag,\n            flagFlag\n        ].filter(value => !!value)\n    });\n};\n"
        }
    ]
}