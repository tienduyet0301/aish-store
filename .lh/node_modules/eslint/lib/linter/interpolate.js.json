{
    "sourceFile": "node_modules/eslint/lib/linter/interpolate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892212554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Interpolate keys from an object into a string with {{ }} markers.\n * @author Jed Fox\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Returns a global expression matching placeholders in messages.\n * @returns {RegExp} Global regular expression matching placeholders\n */\nfunction getPlaceholderMatcher() {\n    return /\\{\\{([^{}]+?)\\}\\}/gu;\n}\n\n/**\n * Replaces {{ placeholders }} in the message with the provided data.\n * Does not replace placeholders not available in the data.\n * @param {string} text Original message with potential placeholders\n * @param {Record<string, string>} data Map of placeholder name to its value\n * @returns {string} Message with replaced placeholders\n */\nfunction interpolate(text, data) {\n    if (!data) {\n        return text;\n    }\n\n    const matcher = getPlaceholderMatcher();\n\n    // Substitution content for any {{ }} markers.\n    return text.replace(matcher, (fullMatch, termWithWhitespace) => {\n        const term = termWithWhitespace.trim();\n\n        if (term in data) {\n            return data[term];\n        }\n\n        // Preserve old behavior: If parameter name not provided, don't replace it.\n        return fullMatch;\n    });\n}\n\nmodule.exports = {\n    getPlaceholderMatcher,\n    interpolate\n};\n"
        }
    ]
}