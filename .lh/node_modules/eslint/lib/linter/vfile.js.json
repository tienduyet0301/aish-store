{
    "sourceFile": "node_modules/eslint/lib/linter/vfile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892213301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Virtual file\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Type Definitions\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"@eslint/core\").File} File */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines if a given value has a byte order mark (BOM).\n * @param {string|Uint8Array} value The value to check.\n * @returns {boolean} `true` if the value has a BOM, `false` otherwise.\n */\nfunction hasUnicodeBOM(value) {\n    return typeof value === \"string\"\n        ? value.charCodeAt(0) === 0xFEFF\n        : value[0] === 0xEF && value[1] === 0xBB && value[2] === 0xBF;\n}\n\n/**\n * Strips Unicode BOM from the given value.\n * @param {string|Uint8Array} value The value to remove the BOM from.\n * @returns {string|Uint8Array} The stripped value.\n */\nfunction stripUnicodeBOM(value) {\n\n    if (!hasUnicodeBOM(value)) {\n        return value;\n    }\n\n    if (typeof value === \"string\") {\n\n        /*\n         * Check Unicode BOM.\n         * In JavaScript, string data is stored as UTF-16, so BOM is 0xFEFF.\n         * http://www.ecma-international.org/ecma-262/6.0/#sec-unicode-format-control-characters\n         */\n        return value.slice(1);\n    }\n\n    /*\n     * In a Uint8Array, the BOM is represented by three bytes: 0xEF, 0xBB, and 0xBF,\n     * so we can just remove the first three bytes.\n     */\n    return value.slice(3);\n}\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * Represents a virtual file inside of ESLint.\n * @implements {File}\n */\nclass VFile {\n\n    /**\n     * The file path including any processor-created virtual path.\n     * @type {string}\n     * @readonly\n     */\n    path;\n\n    /**\n     * The file path on disk.\n     * @type {string}\n     * @readonly\n     */\n    physicalPath;\n\n    /**\n     * The file contents.\n     * @type {string|Uint8Array}\n     * @readonly\n     */\n    body;\n\n    /**\n     * The raw body of the file, including a BOM if present.\n     * @type {string|Uint8Array}\n     * @readonly\n     */\n    rawBody;\n\n    /**\n     * Indicates whether the file has a byte order mark (BOM).\n     * @type {boolean}\n     * @readonly\n     */\n    bom;\n\n    /**\n     * Creates a new instance.\n     * @param {string} path The file path.\n     * @param {string|Uint8Array} body The file contents.\n     * @param {Object} [options] Additional options.\n     * @param {string} [options.physicalPath] The file path on disk.\n     */\n    constructor(path, body, { physicalPath } = {}) {\n        this.path = path;\n        this.physicalPath = physicalPath ?? path;\n        this.bom = hasUnicodeBOM(body);\n        this.body = stripUnicodeBOM(body);\n        this.rawBody = body;\n    }\n}\n\nmodule.exports = { VFile };\n"
        }
    ]
}