{
    "sourceFile": "node_modules/eslint/lib/linter/code-path-analysis/code-path.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892211982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview A class of the code path.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst CodePathState = require(\"./code-path-state\");\nconst IdGenerator = require(\"./id-generator\");\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A code path.\n */\nclass CodePath {\n\n    /**\n     * Creates a new instance.\n     * @param {Object} options Options for the function (see below).\n     * @param {string} options.id An identifier.\n     * @param {string} options.origin The type of code path origin.\n     * @param {CodePath|null} options.upper The code path of the upper function scope.\n     * @param {Function} options.onLooped A callback function to notify looping.\n     */\n    constructor({ id, origin, upper, onLooped }) {\n\n        /**\n         * The identifier of this code path.\n         * Rules use it to store additional information of each rule.\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * The reason that this code path was started. May be \"program\",\n         * \"function\", \"class-field-initializer\", or \"class-static-block\".\n         * @type {string}\n         */\n        this.origin = origin;\n\n        /**\n         * The code path of the upper function scope.\n         * @type {CodePath|null}\n         */\n        this.upper = upper;\n\n        /**\n         * The code paths of nested function scopes.\n         * @type {CodePath[]}\n         */\n        this.childCodePaths = [];\n\n        // Initializes internal state.\n        Object.defineProperty(\n            this,\n            \"internal\",\n            { value: new CodePathState(new IdGenerator(`${id}_`), onLooped) }\n        );\n\n        // Adds this into `childCodePaths` of `upper`.\n        if (upper) {\n            upper.childCodePaths.push(this);\n        }\n    }\n\n    /**\n     * Gets the state of a given code path.\n     * @param {CodePath} codePath A code path to get.\n     * @returns {CodePathState} The state of the code path.\n     */\n    static getState(codePath) {\n        return codePath.internal;\n    }\n\n    /**\n     * The initial code path segment. This is the segment that is at the head\n     * of the code path.\n     * This is a passthrough to the underlying `CodePathState`.\n     * @type {CodePathSegment}\n     */\n    get initialSegment() {\n        return this.internal.initialSegment;\n    }\n\n    /**\n     * Final code path segments. These are the terminal (tail) segments in the\n     * code path, which is the combination of `returnedSegments` and `thrownSegments`.\n     * All segments in this array are reachable.\n     * This is a passthrough to the underlying `CodePathState`.\n     * @type {CodePathSegment[]}\n     */\n    get finalSegments() {\n        return this.internal.finalSegments;\n    }\n\n    /**\n     * Final code path segments that represent normal completion of the code path.\n     * For functions, this means both explicit `return` statements and implicit returns,\n     * such as the last reachable segment in a function that does not have an\n     * explicit `return` as this implicitly returns `undefined`. For scripts,\n     * modules, class field initializers, and class static blocks, this means\n     * all lines of code have been executed.\n     * These segments are also present in `finalSegments`.\n     * This is a passthrough to the underlying `CodePathState`.\n     * @type {CodePathSegment[]}\n     */\n    get returnedSegments() {\n        return this.internal.returnedForkContext;\n    }\n\n    /**\n     * Final code path segments that represent `throw` statements.\n     * This is a passthrough to the underlying `CodePathState`.\n     * These segments are also present in `finalSegments`.\n     * @type {CodePathSegment[]}\n     */\n    get thrownSegments() {\n        return this.internal.thrownForkContext;\n    }\n\n    /**\n     * Traverses all segments in this code path.\n     *\n     *     codePath.traverseSegments((segment, controller) => {\n     *         // do something.\n     *     });\n     *\n     * This method enumerates segments in order from the head.\n     *\n     * The `controller` argument has two methods:\n     *\n     * - `skip()` - skips the following segments in this branch\n     * - `break()` - skips all following segments in the traversal\n     *\n     * A note on the parameters: the `options` argument is optional. This means\n     * the first argument might be an options object or the callback function.\n     * @param {Object} [optionsOrCallback] Optional first and last segments to traverse.\n     * @param {CodePathSegment} [optionsOrCallback.first] The first segment to traverse.\n     * @param {CodePathSegment} [optionsOrCallback.last] The last segment to traverse.\n     * @param {Function} callback A callback function.\n     * @returns {void}\n     */\n    traverseSegments(optionsOrCallback, callback) {\n\n        // normalize the arguments into a callback and options\n        let resolvedOptions;\n        let resolvedCallback;\n\n        if (typeof optionsOrCallback === \"function\") {\n            resolvedCallback = optionsOrCallback;\n            resolvedOptions = {};\n        } else {\n            resolvedOptions = optionsOrCallback || {};\n            resolvedCallback = callback;\n        }\n\n        // determine where to start traversing from based on the options\n        const startSegment = resolvedOptions.first || this.internal.initialSegment;\n        const lastSegment = resolvedOptions.last;\n\n        // set up initial location information\n        let record;\n        let index;\n        let end;\n        let segment = null;\n\n        // segments that have already been visited during traversal\n        const visited = new Set();\n\n        // tracks the traversal steps\n        const stack = [[startSegment, 0]];\n\n        // segments that have been skipped during traversal\n        const skipped = new Set();\n\n        // indicates if we exited early from the traversal\n        let broken = false;\n\n        /**\n         * Maintains traversal state.\n         */\n        const controller = {\n\n            /**\n             * Skip the following segments in this branch.\n             * @returns {void}\n             */\n            skip() {\n                skipped.add(segment);\n            },\n\n            /**\n             * Stop traversal completely - do not traverse to any\n             * other segments.\n             * @returns {void}\n             */\n            break() {\n                broken = true;\n            }\n        };\n\n        /**\n         * Checks if a given previous segment has been visited.\n         * @param {CodePathSegment} prevSegment A previous segment to check.\n         * @returns {boolean} `true` if the segment has been visited.\n         */\n        function isVisited(prevSegment) {\n            return (\n                visited.has(prevSegment) ||\n                segment.isLoopedPrevSegment(prevSegment)\n            );\n        }\n\n        /**\n         * Checks if a given previous segment has been skipped.\n         * @param {CodePathSegment} prevSegment A previous segment to check.\n         * @returns {boolean} `true` if the segment has been skipped.\n         */\n        function isSkipped(prevSegment) {\n            return (\n                skipped.has(prevSegment) ||\n                segment.isLoopedPrevSegment(prevSegment)\n            );\n        }\n\n        // the traversal\n        while (stack.length > 0) {\n\n            /*\n             * This isn't a pure stack. We use the top record all the time\n             * but don't always pop it off. The record is popped only if\n             * one of the following is true:\n             *\n             * 1) We have already visited the segment.\n             * 2) We have not visited *all* of the previous segments.\n             * 3) We have traversed past the available next segments.\n             *\n             * Otherwise, we just read the value and sometimes modify the\n             * record as we traverse.\n             */\n            record = stack.at(-1);\n            segment = record[0];\n            index = record[1];\n\n            if (index === 0) {\n\n                // Skip if this segment has been visited already.\n                if (visited.has(segment)) {\n                    stack.pop();\n                    continue;\n                }\n\n                // Skip if all previous segments have not been visited.\n                if (segment !== startSegment &&\n                    segment.prevSegments.length > 0 &&\n                    !segment.prevSegments.every(isVisited)\n                ) {\n                    stack.pop();\n                    continue;\n                }\n\n                visited.add(segment);\n\n\n                // Skips the segment if all previous segments have been skipped.\n                const shouldSkip = (\n                    skipped.size > 0 &&\n                    segment.prevSegments.length > 0 &&\n                    segment.prevSegments.every(isSkipped)\n                );\n\n                /*\n                 * If the most recent segment hasn't been skipped, then we call\n                 * the callback, passing in the segment and the controller.\n                 */\n                if (!shouldSkip) {\n                    resolvedCallback.call(this, segment, controller);\n\n                    // exit if we're at the last segment\n                    if (segment === lastSegment) {\n                        controller.skip();\n                    }\n\n                    /*\n                     * If the previous statement was executed, or if the callback\n                     * called a method on the controller, we might need to exit the\n                     * loop, so check for that and break accordingly.\n                     */\n                    if (broken) {\n                        break;\n                    }\n                } else {\n\n                    // If the most recent segment has been skipped, then mark it as skipped.\n                    skipped.add(segment);\n                }\n            }\n\n            // Update the stack.\n            end = segment.nextSegments.length - 1;\n            if (index < end) {\n\n                /*\n                 * If we haven't yet visited all of the next segments, update\n                 * the current top record on the stack to the next index to visit\n                 * and then push a record for the current segment on top.\n                 *\n                 * Setting the current top record's index lets us know how many\n                 * times we've been here and ensures that the segment won't be\n                 * reprocessed (because we only process segments with an index\n                 * of 0).\n                 */\n                record[1] += 1;\n                stack.push([segment.nextSegments[index], 0]);\n            } else if (index === end) {\n\n                /*\n                 * If we are at the last next segment, then reset the top record\n                 * in the stack to next segment and set its index to 0 so it will\n                 * be processed next.\n                 */\n                record[0] = segment.nextSegments[index];\n                record[1] = 0;\n            } else {\n\n                /*\n                 * If index > end, that means we have no more segments that need\n                 * processing. So, we pop that record off of the stack in order to\n                 * continue traversing at the next level up.\n                 */\n                stack.pop();\n            }\n        }\n    }\n}\n\nmodule.exports = CodePath;\n"
        }
    ]
}