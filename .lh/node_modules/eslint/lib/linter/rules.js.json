{
    "sourceFile": "node_modules/eslint/lib/linter/rules.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892212846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Defines a storage for rules.\n * @author Nicholas C. Zakas\n * @author aladdin-add\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst builtInRules = require(\"../rules\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A storage for rules.\n */\nclass Rules {\n    constructor() {\n        this._rules = Object.create(null);\n    }\n\n    /**\n     * Registers a rule module for rule id in storage.\n     * @param {string} ruleId Rule id (file name).\n     * @param {Rule} rule Rule object.\n     * @returns {void}\n     */\n    define(ruleId, rule) {\n        this._rules[ruleId] = rule;\n    }\n\n    /**\n     * Access rule handler by id (file name).\n     * @param {string} ruleId Rule id (file name).\n     * @returns {Rule} Rule object.\n     */\n    get(ruleId) {\n        if (typeof this._rules[ruleId] === \"string\") {\n            this.define(ruleId, require(this._rules[ruleId]));\n        }\n        if (this._rules[ruleId]) {\n            return this._rules[ruleId];\n        }\n        if (builtInRules.has(ruleId)) {\n            return builtInRules.get(ruleId);\n        }\n\n        return null;\n    }\n\n    *[Symbol.iterator]() {\n        yield* builtInRules;\n\n        for (const ruleId of Object.keys(this._rules)) {\n            yield [ruleId, this.get(ruleId)];\n        }\n    }\n}\n\nmodule.exports = Rules;\n"
        }
    ]
}