{
    "sourceFile": "node_modules/eslint/lib/linter/file-context.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892212442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview The FileContext class.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/**\n * Represents a file context that the linter can use to lint a file.\n */\nclass FileContext {\n\n    /**\n     * The current working directory.\n     * @type {string}\n     */\n    cwd;\n\n    /**\n     * The filename of the file being linted.\n     * @type {string}\n     */\n    filename;\n\n    /**\n     * The physical filename of the file being linted.\n     * @type {string}\n     */\n    physicalFilename;\n\n    /**\n     * The source code of the file being linted.\n     * @type {SourceCode}\n     */\n    sourceCode;\n\n    /**\n     * The parser options for the file being linted.\n     * @type {Record<string, unknown>}\n     * @deprecated Use `languageOptions` instead.\n     */\n    parserOptions;\n\n    /**\n     * The path to the parser used to parse this file.\n     * @type {string}\n     * @deprecated No longer supported.\n     */\n    parserPath;\n\n    /**\n     * The language options used when parsing this file.\n     * @type {Record<string, unknown>}\n     */\n    languageOptions;\n\n    /**\n     * The settings for the file being linted.\n     * @type {Record<string, unknown>}\n     */\n    settings;\n\n    /**\n     * Creates a new instance.\n     * @param {Object} config The configuration object for the file context.\n     * @param {string} config.cwd The current working directory.\n     * @param {string} config.filename The filename of the file being linted.\n     * @param {string} config.physicalFilename The physical filename of the file being linted.\n     * @param {SourceCode} config.sourceCode The source code of the file being linted.\n     * @param {Record<string, unknown>} config.parserOptions The parser options for the file being linted.\n     * @param {string} config.parserPath The path to the parser used to parse this file.\n     * @param {Record<string, unknown>} config.languageOptions The language options used when parsing this file.\n     * @param {Record<string, unknown>} config.settings The settings for the file being linted.\n     */\n    constructor({\n        cwd,\n        filename,\n        physicalFilename,\n        sourceCode,\n        parserOptions,\n        parserPath,\n        languageOptions,\n        settings\n    }) {\n        this.cwd = cwd;\n        this.filename = filename;\n        this.physicalFilename = physicalFilename;\n        this.sourceCode = sourceCode;\n        this.parserOptions = parserOptions;\n        this.parserPath = parserPath;\n        this.languageOptions = languageOptions;\n        this.settings = settings;\n\n        Object.freeze(this);\n    }\n\n    /**\n     * Gets the current working directory.\n     * @returns {string} The current working directory.\n     * @deprecated Use `cwd` instead.\n     */\n    getCwd() {\n        return this.cwd;\n    }\n\n    /**\n     * Gets the filename of the file being linted.\n     * @returns {string} The filename of the file being linted.\n     * @deprecated Use `filename` instead.\n     */\n    getFilename() {\n        return this.filename;\n    }\n\n    /**\n     * Gets the physical filename of the file being linted.\n     * @returns {string} The physical filename of the file being linted.\n     * @deprecated Use `physicalFilename` instead.\n     */\n    getPhysicalFilename() {\n        return this.physicalFilename;\n    }\n\n    /**\n     * Gets the source code of the file being linted.\n     * @returns {SourceCode} The source code of the file being linted.\n     * @deprecated Use `sourceCode` instead.\n     */\n    getSourceCode() {\n        return this.sourceCode;\n    }\n}\n\nexports.FileContext = FileContext;\n"
        }
    ]
}