{
    "sourceFile": "node_modules/eslint/lib/types/use-at-your-own-risk.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the types for the use-at-your-own-risk\n * entrypoint. It was initially extracted from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\n\nimport { ESLint, Rule } from \"./index.js\";\n\n/** @deprecated */\nexport const builtinRules: Map<string, Rule.RuleModule>;\n\n/** @deprecated */\nexport class FileEnumerator {\n    constructor(\n        params?: {\n            cwd?: string;\n            configArrayFactory?: any;\n            extensions?: any;\n            globInputPaths?: boolean;\n            errorOnUnmatchedPattern?: boolean;\n            ignore?: boolean;\n        },\n    );\n    isTargetPath(filePath: string, providedConfig?: any): boolean;\n    iterateFiles(\n        patternOrPatterns: string | string[],\n    ): IterableIterator<{ config: any; filePath: string; ignored: boolean }>;\n}\n\nexport { /** @deprecated */ ESLint as FlatESLint };\n\n/** @deprecated */\nexport class LegacyESLint {\n    static configType: \"eslintrc\";\n\n    static readonly version: string;\n\n    static outputFixes(results: ESLint.LintResult[]): Promise<void>;\n\n    static getErrorResults(results: ESLint.LintResult[]): ESLint.LintResult[];\n\n    constructor(options?: ESLint.LegacyOptions);\n\n    lintFiles(patterns: string | string[]): Promise<ESLint.LintResult[]>;\n\n    lintText(\n        code: string,\n        options?: { filePath?: string | undefined; warnIgnored?: boolean | undefined },\n    ): Promise<ESLint.LintResult[]>;\n\n    getRulesMetaForResults(results: ESLint.LintResult[]): ESLint.LintResultData[\"rulesMeta\"];\n\n    hasFlag(flag: string): false;\n\n    calculateConfigForFile(filePath: string): Promise<any>;\n\n    isPathIgnored(filePath: string): Promise<boolean>;\n\n    loadFormatter(nameOrPath?: string): Promise<ESLint.Formatter>;\n}\n\n/** @deprecated */\nexport function shouldUseFlatConfig(): Promise<boolean>;\n"
        }
    ]
}