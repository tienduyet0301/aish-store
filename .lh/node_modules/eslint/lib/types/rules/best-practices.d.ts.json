{
    "sourceFile": "node_modules/eslint/lib/types/rules/best-practices.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface BestPractices extends Linter.RulesRecord {\n    /**\n     * Rule to enforce getter and setter pairs in objects and classes.\n     *\n     * @since 0.22.0\n     * @see https://eslint.org/docs/latest/rules/accessor-pairs\n     */\n    \"accessor-pairs\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                setWithoutGet: boolean;\n                /**\n                 * @default false\n                 */\n                getWithoutSet: boolean;\n                /**\n                 * @default true\n                 */\n                enforceForClassMembers: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce `return` statements in callbacks of array methods.\n     *\n     * @since 2.0.0-alpha-1\n     * @see https://eslint.org/docs/latest/rules/array-callback-return\n     */\n    \"array-callback-return\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowImplicit: boolean;\n                /**\n                 * @default false\n                 */\n                checkForEach: boolean;\n                /**\n                 * @default false\n                 */\n                allowVoid: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce the use of variables within the scope they are defined.\n     *\n     * @since 0.1.0\n     * @see https://eslint.org/docs/latest/rules/block-scoped-var\n     */\n    \"block-scoped-var\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce that class methods utilize `this`.\n     *\n     * @since 3.4.0\n     * @see https://eslint.org/docs/latest/rules/class-methods-use-this\n     */\n    \"class-methods-use-this\": Linter.RuleEntry<\n        [\n            Partial<{\n                exceptMethods: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum cyclomatic complexity allowed in a program.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/complexity\n     */\n    complexity: Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 20\n                 */\n                max: number;\n                /**\n                 * @deprecated\n                 * @default 20\n                 */\n                maximum: number;\n                /**\n                 * @default \"classic\"\n                 * @since 9.12.0\n                 */\n                variant: \"classic\" | \"modified\";\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to require `return` statements to either always or never specify values.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/consistent-return\n     */\n    \"consistent-return\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                treatUndefinedAsUnspecified: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent brace style for all control statements.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/curly\n     */\n    curly: Linter.RuleEntry<[\"all\" | \"multi\" | \"multi-line\" | \"multi-or-nest\" | \"consistent\"]>;\n\n    /**\n     * Rule to require `default` cases in `switch` statements.\n     *\n     * @since 0.6.0\n     * @see https://eslint.org/docs/latest/rules/default-case\n     */\n    \"default-case\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default '^no default$'\n                 */\n                commentPattern: string;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce `default` clauses in `switch` statements to be last.\n     *\n     * @since 7.0.0-alpha.0\n     * @see https://eslint.org/docs/latest/rules/default-case-last\n     */\n    \"default-case-last\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce default parameters to be last.\n     *\n     * @since 6.4.0\n     * @see https://eslint.org/docs/latest/rules/default-param-last\n     */\n    \"default-param-last\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce consistent newlines before and after dots.\n     *\n     * @since 0.21.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/dot-location) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/dot-location\n     */\n    \"dot-location\": Linter.RuleEntry<[\"object\" | \"property\"]>;\n\n    /**\n     * Rule to enforce dot notation whenever possible.\n     *\n     * @since 0.0.7\n     * @see https://eslint.org/docs/latest/rules/dot-notation\n     */\n    \"dot-notation\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                allowKeywords: boolean;\n                allowPattern: string;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require the use of `===` and `!==`.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/eqeqeq\n     */\n    eqeqeq:\n        | Linter.RuleEntry<\n            [\n                \"always\",\n                Partial<{\n                    /**\n                     * @default 'always'\n                     */\n                    null: \"always\" | \"never\" | \"ignore\";\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<[\"smart\" | \"allow-null\"]>;\n\n    /**\n     * Rule to require grouped accessor pairs in object literals and classes.\n     *\n     * @since 6.7.0\n     * @see https://eslint.org/docs/latest/rules/grouped-accessor-pairs\n     */\n    \"grouped-accessor-pairs\": Linter.RuleEntry<[\"anyOrder\" | \"getBeforeSet\" | \"setBeforeGet\"]>;\n\n    /**\n     * Rule to require `for-in` loops to include an `if` statement.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/guard-for-in\n     */\n    \"guard-for-in\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce a maximum number of classes per file.\n     *\n     * @since 5.0.0-alpha.3\n     * @see https://eslint.org/docs/latest/rules/max-classes-per-file\n     */\n    \"max-classes-per-file\": Linter.RuleEntry<[number]>;\n\n    /**\n     * Rule to disallow the use of `alert`, `confirm`, and `prompt`.\n     *\n     * @since 0.0.5\n     * @see https://eslint.org/docs/latest/rules/no-alert\n     */\n    \"no-alert\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `arguments.caller` or `arguments.callee`.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/no-caller\n     */\n    \"no-caller\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow lexical declarations in case clauses.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 1.9.0\n     * @see https://eslint.org/docs/latest/rules/no-case-declarations\n     */\n    \"no-case-declarations\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow equal signs explicitly at the beginning of regular expressions.\n     *\n     * @since 0.1.0\n     * @see https://eslint.org/docs/latest/rules/no-div-regex\n     */\n    \"no-div-regex\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `else` blocks after `return` statements in `if` statements.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-else-return\n     */\n    \"no-else-return\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                allowElseIf: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow empty functions.\n     *\n     * @since 2.0.0\n     * @see https://eslint.org/docs/latest/rules/no-empty-function\n     */\n    \"no-empty-function\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default []\n                 */\n                allow: Array<\n                    | \"functions\"\n                    | \"arrowFunctions\"\n                    | \"generatorFunctions\"\n                    | \"methods\"\n                    | \"generatorMethods\"\n                    | \"getters\"\n                    | \"setters\"\n                    | \"constructors\"\n                    | \"asyncFunctions\"\n                    | \"asyncMethods\"\n                >;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow empty destructuring patterns.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 1.7.0\n     * @see https://eslint.org/docs/latest/rules/no-empty-pattern\n     */\n    \"no-empty-pattern\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow empty static blocks.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 8.27.0\n     * @see https://eslint.org/docs/latest/rules/no-empty-static-block\n     */\n    \"no-empty-static-block\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `null` comparisons without type-checking operators.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-eq-null\n     */\n    \"no-eq-null\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `eval()`.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/no-eval\n     */\n    \"no-eval\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowIndirect: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow extending native types.\n     *\n     * @since 0.1.4\n     * @see https://eslint.org/docs/latest/rules/no-extend-native\n     */\n    \"no-extend-native\": Linter.RuleEntry<\n        [\n            Partial<{\n                exceptions: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow unnecessary calls to `.bind()`.\n     *\n     * @since 0.8.0\n     * @see https://eslint.org/docs/latest/rules/no-extra-bind\n     */\n    \"no-extra-bind\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary labels.\n     *\n     * @since 2.0.0-rc.0\n     * @see https://eslint.org/docs/latest/rules/no-extra-label\n     */\n    \"no-extra-label\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow fallthrough of `case` statements.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.7\n     * @see https://eslint.org/docs/latest/rules/no-fallthrough\n     */\n    \"no-fallthrough\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 'falls?\\s?through'\n                 */\n                commentPattern: string;\n                /**\n                 * @default false\n                 */\n                allowEmptyCase: boolean;\n                /**\n                 * @default false\n                 */\n                reportUnusedFallthroughComment: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow leading or trailing decimal points in numeric literals.\n     *\n     * @since 0.0.6\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-floating-decimal) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-floating-decimal\n     */\n    \"no-floating-decimal\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow assignments to native objects or read-only global variables.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 3.3.0\n     * @see https://eslint.org/docs/latest/rules/no-global-assign\n     */\n    \"no-global-assign\": Linter.RuleEntry<\n        [\n            Partial<{\n                exceptions: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow shorthand type conversions.\n     *\n     * @since 1.0.0-rc-2\n     * @see https://eslint.org/docs/latest/rules/no-implicit-coercion\n     */\n    \"no-implicit-coercion\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                boolean: boolean;\n                /**\n                 * @default true\n                 */\n                number: boolean;\n                /**\n                 * @default true\n                 */\n                string: boolean;\n                /**\n                 * @default false\n                 */\n                disallowTemplateShorthand: boolean;\n                /**\n                 * @default []\n                 */\n                allow: Array<\"~\" | \"!!\" | \"+\" | \"- -\" | \"-\" | \"*\">;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow declarations in the global scope.\n     *\n     * @since 2.0.0-alpha-1\n     * @see https://eslint.org/docs/latest/rules/no-implicit-globals\n     */\n    \"no-implicit-globals\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `eval()`-like methods.\n     *\n     * @since 0.0.7\n     * @see https://eslint.org/docs/latest/rules/no-implied-eval\n     */\n    \"no-implied-eval\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow assigning to imported bindings.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 6.4.0\n     * @see https://eslint.org/docs/latest/rules/no-import-assign\n     */\n    \"no-import-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow use of `this` in contexts where the value of `this` is `undefined`.\n     *\n     * @since 1.0.0-rc-2\n     * @see https://eslint.org/docs/latest/rules/no-invalid-this\n     */\n    \"no-invalid-this\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                capIsConstructor: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow the use of the `__iterator__` property.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-iterator\n     */\n    \"no-iterator\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow labeled statements.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/no-labels\n     */\n    \"no-labels\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowLoop: boolean;\n                /**\n                 * @default false\n                 */\n                allowSwitch: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow unnecessary nested blocks.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/no-lone-blocks\n     */\n    \"no-lone-blocks\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow function declarations that contain unsafe references inside loop statements.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-loop-func\n     */\n    \"no-loop-func\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow magic numbers.\n     *\n     * @since 1.7.0\n     * @see https://eslint.org/docs/latest/rules/no-magic-numbers\n     */\n    \"no-magic-numbers\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default []\n                 */\n                ignore: number[];\n                /**\n                 * @default false\n                 */\n                ignoreArrayIndexes: boolean;\n                /**\n                 * @default false\n                 */\n                enforceConst: boolean;\n                /**\n                 * @default false\n                 */\n                detectObjects: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow multiple spaces.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-multi-spaces) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-multi-spaces\n     */\n    \"no-multi-spaces\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                ignoreEOLComments: boolean;\n                /**\n                 * @default { Property: true }\n                 */\n                exceptions: Record<string, boolean>;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow multiline strings.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-multi-str\n     */\n    \"no-multi-str\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `new` operators outside of assignments or comparisons.\n     *\n     * @since 0.0.7\n     * @see https://eslint.org/docs/latest/rules/no-new\n     */\n    \"no-new\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `new` operators with the `Function` object.\n     *\n     * @since 0.0.7\n     * @see https://eslint.org/docs/latest/rules/no-new-func\n     */\n    \"no-new-func\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `new` operators with the `String`, `Number`, and `Boolean` objects.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/no-new-wrappers\n     */\n    \"no-new-wrappers\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `\\8` and `\\9` escape sequences in string literals.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 7.14.0\n     * @see https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape\n     */\n    \"no-nonoctal-decimal-escape\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow octal literals.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/no-octal\n     */\n    \"no-octal\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow octal escape sequences in string literals.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-octal-escape\n     */\n    \"no-octal-escape\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow reassigning function parameters.\n     *\n     * @since 0.18.0\n     * @see https://eslint.org/docs/latest/rules/no-param-reassign\n     */\n    \"no-param-reassign\": Linter.RuleEntry<\n        [\n            | {\n                  props?: false;\n              }\n            | ({\n                  props: true;\n              } & Partial<{\n                  /**\n                   * @default []\n                   */\n                  ignorePropertyModificationsFor: string[];\n                  /**\n                   * @since 6.6.0\n                   * @default []\n                   */\n                  ignorePropertyModificationsForRegex: string[];\n              }>),\n        ]\n    >;\n\n    /**\n     * Rule to disallow the use of the `__proto__` property.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-proto\n     */\n    \"no-proto\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow variable redeclaration.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-redeclare\n     */\n    \"no-redeclare\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                builtinGlobals: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow certain properties on certain objects.\n     *\n     * @since 3.5.0\n     * @see https://eslint.org/docs/latest/rules/no-restricted-properties\n     */\n    \"no-restricted-properties\": Linter.RuleEntry<\n        [\n            ...Array<\n                | {\n                    object: string;\n                    property?: string | undefined;\n                    message?: string | undefined;\n                }\n                | {\n                    property: string;\n                    message?: string | undefined;\n                }\n            >,\n        ]\n    >;\n\n    /**\n     * Rule to disallow assignment operators in `return` statements.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-return-assign\n     */\n    \"no-return-assign\": Linter.RuleEntry<[\"except-parens\" | \"always\"]>;\n\n    /**\n     * Rule to disallow unnecessary `return await`.\n     *\n     * @since 3.10.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-return-await\n     */\n    \"no-return-await\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `javascript:` URLs.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-script-url\n     */\n    \"no-script-url\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow assignments where both sides are exactly the same.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 2.0.0-rc.0\n     * @see https://eslint.org/docs/latest/rules/no-self-assign\n     */\n    \"no-self-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow comparisons where both sides are exactly the same.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-self-compare\n     */\n    \"no-self-compare\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow comma operators.\n     *\n     * @since 0.5.1\n     * @see https://eslint.org/docs/latest/rules/no-sequences\n     */\n    \"no-sequences\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @since 7.23.0\n                 * @default true\n                 */\n                allowInParentheses: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow throwing literals as exceptions.\n     *\n     * @since 0.15.0\n     * @see https://eslint.org/docs/latest/rules/no-throw-literal\n     */\n    \"no-throw-literal\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unmodified loop conditions.\n     *\n     * @since 2.0.0-alpha-2\n     * @see https://eslint.org/docs/latest/rules/no-unmodified-loop-condition\n     */\n    \"no-unmodified-loop-condition\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unused expressions.\n     *\n     * @since 0.1.0\n     * @see https://eslint.org/docs/latest/rules/no-unused-expressions\n     */\n    \"no-unused-expressions\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowShortCircuit: boolean;\n                /**\n                 * @default false\n                 */\n                allowTernary: boolean;\n                /**\n                 * @default false\n                 */\n                allowTaggedTemplates: boolean;\n                /**\n                 * @since 7.20.0\n                 * @default false\n                 */\n                enforceForJSX: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow unused labels.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 2.0.0-rc.0\n     * @see https://eslint.org/docs/latest/rules/no-unused-labels\n     */\n    \"no-unused-labels\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow variable assignments when the value is not used.\n     *\n     * @since 9.0.0-alpha.1\n     * @see https://eslint.org/docs/latest/rules/no-useless-assignment\n     */\n    \"no-useless-assignment\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow useless backreferences in regular expressions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 7.0.0-alpha.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-backreference\n     */\n    \"no-useless-backreference\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary calls to `.call()` and `.apply()`.\n     *\n     * @since 1.0.0-rc-1\n     * @see https://eslint.org/docs/latest/rules/no-useless-call\n     */\n    \"no-useless-call\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary `catch` clauses.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 5.11.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-catch\n     */\n    \"no-useless-catch\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary concatenation of literals or template literals.\n     *\n     * @since 1.3.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-concat\n     */\n    \"no-useless-concat\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary escape characters.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 2.5.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-escape\n     */\n    \"no-useless-escape\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow redundant return statements.\n     *\n     * @since 3.9.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-return\n     */\n    \"no-useless-return\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `void` operators.\n     *\n     * @since 0.8.0\n     * @see https://eslint.org/docs/latest/rules/no-void\n     */\n    \"no-void\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowAsStatement: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow specified warning terms in comments.\n     *\n     * @since 0.4.4\n     * @see https://eslint.org/docs/latest/rules/no-warning-comments\n     */\n    \"no-warning-comments\": Linter.RuleEntry<\n        [\n            {\n                /**\n                 * @default [\"todo\", \"fixme\", \"xxx\"]\n                 */\n                terms: string[];\n                /**\n                 * @default 'start'\n                 */\n                location: \"start\" | \"anywhere\";\n            },\n        ]\n    >;\n\n    /**\n     * Rule to disallow `with` statements.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/no-with\n     */\n    \"no-with\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce using named capture group in regular expression.\n     *\n     * @since 5.15.0\n     * @see https://eslint.org/docs/latest/rules/prefer-named-capture-group\n     */\n    \"prefer-named-capture-group\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`.\n     *\n     * @since 8.5.0\n     * @see https://eslint.org/docs/latest/rules/prefer-object-has-own\n     */\n    \"prefer-object-has-own\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require using Error objects as Promise rejection reasons.\n     *\n     * @since 3.14.0\n     * @see https://eslint.org/docs/latest/rules/prefer-promise-reject-errors\n     */\n    \"prefer-promise-reject-errors\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowEmptyReject: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow use of the `RegExp` constructor in favor of regular expression literals.\n     *\n     * @since 6.4.0\n     * @see https://eslint.org/docs/latest/rules/prefer-regex-literals\n     */\n    \"prefer-regex-literals\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                disallowRedundantWrapping: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce the consistent use of the radix argument when using `parseInt()`.\n     *\n     * @since 0.0.7\n     * @see https://eslint.org/docs/latest/rules/radix\n     */\n    radix: Linter.RuleEntry<[\"always\" | \"as-needed\"]>;\n\n    /**\n     * Rule to disallow async functions which have no `await` expression.\n     *\n     * @since 3.11.0\n     * @see https://eslint.org/docs/latest/rules/require-await\n     */\n    \"require-await\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce the use of `u` or `v` flag on regular expressions.\n     *\n     * @since 5.3.0\n     * @see https://eslint.org/docs/latest/rules/require-unicode-regexp\n     */\n    \"require-unicode-regexp\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                requireFlag: \"u\" | \"v\";\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require `var` declarations be placed at the top of their containing scope.\n     *\n     * @since 0.8.0\n     * @see https://eslint.org/docs/latest/rules/vars-on-top\n     */\n    \"vars-on-top\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require parentheses around immediate `function` invocations.\n     *\n     * @since 0.0.9\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/wrap-iife) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/wrap-iife\n     */\n    \"wrap-iife\": Linter.RuleEntry<\n        [\n            \"outside\" | \"inside\" | \"any\",\n            Partial<{\n                /**\n                 * @default false\n                 */\n                functionPrototypeMethods: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow \"Yoda\" conditions.\n     *\n     * @since 0.7.1\n     * @see https://eslint.org/docs/latest/rules/yoda\n     */\n    yoda:\n        | Linter.RuleEntry<\n            [\n                \"never\",\n                Partial<{\n                    exceptRange: boolean;\n                    onlyEquality: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<[\"always\"]>;\n}\n"
        }
    ]
}