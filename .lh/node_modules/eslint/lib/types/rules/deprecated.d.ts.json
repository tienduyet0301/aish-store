{
    "sourceFile": "node_modules/eslint/lib/types/rules/deprecated.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface Deprecated extends Linter.RulesRecord {\n\n    /**\n     * Rule to enforce line breaks between arguments of a function call.\n     *\n     * @since 6.2.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/function-call-argument-newline) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/function-call-argument-newline\n     */\n    \"function-call-argument-newline\": Linter.RuleEntry<\n        [\n            /**\n             * @default \"always\"\n             */\n            \"always\" | \"never\" | \"consistent\"\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent indentation.\n     *\n     * @since 4.0.0-alpha.0\n     * @deprecated since 4.0.0, use [`indent`](https://eslint.org/docs/rules/indent) instead.\n     * @see https://eslint.org/docs/latest/rules/indent-legacy\n     */\n    \"indent-legacy\": Linter.RuleEntry<\n        [\n            number | \"tab\",\n            Partial<{\n                /**\n                 * @default 0\n                 */\n                SwitchCase: number;\n                /**\n                 * @default 1\n                 */\n                VariableDeclarator:\n                    | Partial<{\n                        /**\n                         * @default 1\n                         */\n                        var: number | \"first\";\n                        /**\n                         * @default 1\n                         */\n                        let: number | \"first\";\n                        /**\n                         * @default 1\n                         */\n                        const: number | \"first\";\n                    }>\n                    | number\n                    | \"first\";\n                /**\n                 * @default 1\n                 */\n                outerIIFEBody: number;\n                /**\n                 * @default 1\n                 */\n                MemberExpression: number | \"off\";\n                /**\n                 * @default { parameters: 1, body: 1 }\n                 */\n                FunctionDeclaration: Partial<{\n                    /**\n                     * @default 1\n                     */\n                    parameters: number | \"first\" | \"off\";\n                    /**\n                     * @default 1\n                     */\n                    body: number;\n                }>;\n                /**\n                 * @default { parameters: 1, body: 1 }\n                 */\n                FunctionExpression: Partial<{\n                    /**\n                     * @default 1\n                     */\n                    parameters: number | \"first\" | \"off\";\n                    /**\n                     * @default 1\n                     */\n                    body: number;\n                }>;\n                /**\n                 * @default { arguments: 1 }\n                 */\n                CallExpression: Partial<{\n                    /**\n                     * @default 1\n                     */\n                    arguments: number | \"first\" | \"off\";\n                }>;\n                /**\n                 * @default 1\n                 */\n                ArrayExpression: number | \"first\" | \"off\";\n                /**\n                 * @default 1\n                 */\n                ObjectExpression: number | \"first\" | \"off\";\n                /**\n                 * @default 1\n                 */\n                ImportDeclaration: number | \"first\" | \"off\";\n                /**\n                 * @default false\n                 */\n                flatTernaryExpressions: boolean;\n                ignoredNodes: string[];\n                /**\n                 * @default false\n                 */\n                ignoreComments: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow newlines around directives.\n     *\n     * @since 3.5.0\n     * @deprecated since 4.0.0, use [`padding-line-between-statements`](https://eslint.org/docs/rules/padding-line-between-statements) instead.\n     * @see https://eslint.org/docs/latest/rules/lines-around-directive\n     */\n    \"lines-around-directive\": Linter.RuleEntry<[\"always\" | \"never\"]>;\n\n    /**\n     * Rule to require or disallow an empty line after variable declarations.\n     *\n     * @since 0.18.0\n     * @deprecated since 4.0.0, use [`padding-line-between-statements`](https://eslint.org/docs/rules/padding-line-between-statements) instead.\n     * @see https://eslint.org/docs/latest/rules/newline-after-var\n     */\n    \"newline-after-var\": Linter.RuleEntry<[\"always\" | \"never\"]>;\n\n    /**\n     * Rule to require an empty line before `return` statements.\n     *\n     * @since 2.3.0\n     * @deprecated since 4.0.0, use [`padding-line-between-statements`](https://eslint.org/docs/rules/padding-line-between-statements) instead.\n     * @see https://eslint.org/docs/latest/rules/newline-before-return\n     */\n    \"newline-before-return\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `catch` clause parameters from shadowing variables in the outer scope.\n     *\n     * @since 0.0.9\n     * @deprecated since 5.1.0, use [`no-shadow`](https://eslint.org/docs/rules/no-shadow) instead.\n     * @see https://eslint.org/docs/latest/rules/no-catch-shadow\n     */\n    \"no-catch-shadow\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow assignments to native objects or read-only global variables.\n     *\n     * @since 0.0.9\n     * @deprecated since 3.3.0, use [`no-global-assign`](https://eslint.org/docs/rules/no-global-assign) instead.\n     * @see https://eslint.org/docs/latest/rules/no-native-reassign\n     */\n    \"no-native-reassign\": Linter.RuleEntry<\n        [\n            Partial<{\n                exceptions: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow negating the left operand in `in` expressions.\n     *\n     * @since 0.1.2\n     * @deprecated since 3.3.0, use [`no-unsafe-negation`](https://eslint.org/docs/rules/no-unsafe-negation) instead.\n     * @see https://eslint.org/docs/latest/rules/no-negated-in-lhs\n     */\n    \"no-negated-in-lhs\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `Object` constructors.\n     *\n     * @since 0.0.9\n     * @deprecated since 8.50.0, use [`no-object-constructor`](https://eslint.org/docs/rules/no-object-constructor) instead.\n     * @see https://eslint.org/docs/latest/rules/no-new-object\n     */\n    \"no-new-object\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `new` operators with the `Symbol` object.\n     *\n     * @since 2.0.0-beta.1\n     * @deprecated since 8.27.0, use [`no-new-native-nonconstructor`](https://eslint.org/docs/rules/no-new-native-nonconstructor) instead.\n     * @see https://eslint.org/docs/latest/rules/no-new-symbol\n     */\n    \"no-new-symbol\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow spacing between function identifiers and their applications (deprecated).\n     *\n     * @since 0.1.2\n     * @deprecated since 3.3.0, use [`func-call-spacing`](https://eslint.org/docs/rules/func-call-spacing) instead.\n     * @see https://eslint.org/docs/latest/rules/no-spaced-func\n     */\n    \"no-spaced-func\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require `Reflect` methods where applicable.\n     *\n     * @since 1.0.0-rc-2\n     * @deprecated since 3.9.0\n     * @see https://eslint.org/docs/latest/rules/prefer-reflect\n     */\n    \"prefer-reflect\": Linter.RuleEntry<\n        [\n            Partial<{\n                exceptions: string[];\n            }>,\n        ]\n    >;\n}\n"
        }
    ]
}