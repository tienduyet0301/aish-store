{
    "sourceFile": "node_modules/eslint/lib/types/rules/ecmascript-6.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface NoRestrictedImportPathCommonOptions {\n    name: string;\n    message?: string;\n}\n\nexport type EitherImportNamesOrAllowImportName =\n  | { importNames?: string[]; allowImportNames?: never }\n  | { allowImportNames?: string[]; importNames?: never }\n\nexport type ValidNoRestrictedImportPathOptions = NoRestrictedImportPathCommonOptions & EitherImportNamesOrAllowImportName;\n\nexport interface NoRestrictedImportPatternCommonOptions {\n    message?: string;\n    caseSensitive?: boolean;\n}\n\n// Base type for group or regex constraint, ensuring mutual exclusivity\nexport type EitherGroupOrRegEx =\n  | { group: string[]; regex?: never }\n  | { regex: string; group?: never };\n\n// Base type for import name specifiers, ensuring mutual exclusivity\nexport type EitherNameSpecifiers = \n    | { importNames: string[]; allowImportNames?: never; importNamePattern?: never; allowImportNamePattern?: never }\n    | { importNamePattern: string; allowImportNames?: never; importNames?: never; allowImportNamePattern?: never }\n    | { allowImportNames: string[]; importNames?: never; importNamePattern?: never; allowImportNamePattern?: never }\n    | { allowImportNamePattern: string; importNames?: never; allowImportNames?: never; importNamePattern?: never }\n\n// Adds oneOf and not constraints, ensuring group or regex are present and mutually exclusive sets for importNames, allowImportNames, etc., as per the schema.\nexport type ValidNoRestrictedImportPatternOptions = NoRestrictedImportPatternCommonOptions & EitherGroupOrRegEx & EitherNameSpecifiers;\n\nexport interface ECMAScript6 extends Linter.RulesRecord {\n    /**\n     * Rule to require braces around arrow function bodies.\n     *\n     * @since 1.8.0\n     * @see https://eslint.org/docs/latest/rules/arrow-body-style\n     */\n    \"arrow-body-style\":\n        | Linter.RuleEntry<\n            [\n                \"as-needed\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    requireReturnForObjectLiteral: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<[\"always\" | \"never\"]>;\n\n    /**\n     * Rule to require parentheses around arrow function arguments.\n     *\n     * @since 1.0.0-rc-1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/arrow-parens) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/arrow-parens\n     */\n    \"arrow-parens\":\n        | Linter.RuleEntry<[\"always\"]>\n        | Linter.RuleEntry<\n            [\n                \"as-needed\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    requireForBlockBody: boolean;\n                }>,\n            ]\n        >;\n\n    /**\n     * Rule to enforce consistent spacing before and after the arrow in arrow functions.\n     *\n     * @since 1.0.0-rc-1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/arrow-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/arrow-spacing\n     */\n    \"arrow-spacing\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require `super()` calls in constructors.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.24.0\n     * @see https://eslint.org/docs/latest/rules/constructor-super\n     */\n    \"constructor-super\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce consistent spacing around `*` operators in generator functions.\n     *\n     * @since 0.17.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/generator-star-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/generator-star-spacing\n     */\n    \"generator-star-spacing\": Linter.RuleEntry<\n        [\n            | Partial<{\n                before: boolean;\n                after: boolean;\n                named:\n                    | Partial<{\n                        before: boolean;\n                        after: boolean;\n                    }>\n                    | \"before\"\n                    | \"after\"\n                    | \"both\"\n                    | \"neither\";\n                anonymous:\n                    | Partial<{\n                        before: boolean;\n                        after: boolean;\n                    }>\n                    | \"before\"\n                    | \"after\"\n                    | \"both\"\n                    | \"neither\";\n                method:\n                    | Partial<{\n                        before: boolean;\n                        after: boolean;\n                    }>\n                    | \"before\"\n                    | \"after\"\n                    | \"both\"\n                    | \"neither\";\n            }>\n            | \"before\"\n            | \"after\"\n            | \"both\"\n            | \"neither\",\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow logical assignment operator shorthand.\n     *\n     * @since 8.24.0\n     * @see https://eslint.org/docs/latest/rules/logical-assignment-operators\n     */\n    \"logical-assignment-operators\":\n        | Linter.RuleEntry<\n            [\n                \"always\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    enforceForIfStatements: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<[\"never\"]>;\n\n    /**\n     * Rule to disallow reassigning class members.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 1.0.0-rc-1\n     * @see https://eslint.org/docs/latest/rules/no-class-assign\n     */\n    \"no-class-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow arrow functions where they could be confused with comparisons.\n     *\n     * @since 2.0.0-alpha-2\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-confusing-arrow) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-confusing-arrow\n     */\n    \"no-confusing-arrow\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                allowParens: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow reassigning `const` variables.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 1.0.0-rc-1\n     * @see https://eslint.org/docs/latest/rules/no-const-assign\n     */\n    \"no-const-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow duplicate class members.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 1.2.0\n     * @see https://eslint.org/docs/latest/rules/no-dupe-class-members\n     */\n    \"no-dupe-class-members\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow duplicate module imports.\n     *\n     * @since 2.5.0\n     * @see https://eslint.org/docs/latest/rules/no-duplicate-imports\n     */\n    \"no-duplicate-imports\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                includeExports: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow `new` operators with global non-constructor functions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 8.27.0\n     * @see https://eslint.org/docs/latest/rules/no-new-native-nonconstructor\n     */\n    \"no-new-native-nonconstructor\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow specified names in exports.\n     *\n     * @since 7.0.0-alpha.0\n     * @see https://eslint.org/docs/latest/rules/no-restricted-exports\n     */\n    \"no-restricted-exports\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default []\n                 */\n                restrictedNamedExports: string[];\n                /**\n                 * @since 9.3.0\n                 */\n                restrictedNamedExportsPattern: string;\n                /**\n                 * @since 8.33.0\n                 */\n                restrictDefaultExports: Partial<{\n                    /**\n                     * @default false\n                     */\n                    direct: boolean;\n                    /**\n                     * @default false\n                     */\n                    named: boolean;\n                    /**\n                     * @default false\n                     */\n                    defaultFrom: boolean;\n                    /**\n                     * @default false\n                     */\n                    namedFrom: boolean;\n                    /**\n                     * @default false\n                     */\n                    namespaceFrom: boolean;\n                }>;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow specified modules when loaded by `import`.\n     *\n     * @since 2.0.0-alpha-1\n     * @see https://eslint.org/docs/latest/rules/no-restricted-imports\n     */\n    \"no-restricted-imports\": Linter.RuleEntry<\n        [\n            ...Array<\n                | string\n                | ValidNoRestrictedImportPathOptions\n                | Partial<{\n                      paths: Array<string | ValidNoRestrictedImportPathOptions>;\n                      patterns: Array<string | ValidNoRestrictedImportPatternOptions>;\n                  }>\n            >\n        ]\n    >;\n\n    /**\n     * Rule to disallow `this`/`super` before calling `super()` in constructors.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.24.0\n     * @see https://eslint.org/docs/latest/rules/no-this-before-super\n     */\n    \"no-this-before-super\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary computed property keys in objects and classes.\n     *\n     * @since 2.9.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-computed-key\n     */\n    \"no-useless-computed-key\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                enforceForClassMembers: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow unnecessary constructors.\n     *\n     * @since 2.0.0-beta.1\n     * @see https://eslint.org/docs/latest/rules/no-useless-constructor\n     */\n    \"no-useless-constructor\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow renaming import, export, and destructured assignments to the same name.\n     *\n     * @since 2.11.0\n     * @see https://eslint.org/docs/latest/rules/no-useless-rename\n     */\n    \"no-useless-rename\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                ignoreImport: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreExport: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreDestructuring: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require `let` or `const` instead of `var`.\n     *\n     * @since 0.12.0\n     * @see https://eslint.org/docs/latest/rules/no-var\n     */\n    \"no-var\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require or disallow method and property shorthand syntax for object literals.\n     *\n     * @since 0.20.0\n     * @see https://eslint.org/docs/latest/rules/object-shorthand\n     */\n    \"object-shorthand\":\n        | Linter.RuleEntry<\n            [\n                \"always\" | \"methods\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    avoidQuotes: boolean;\n                    /**\n                     * @default false\n                     */\n                    ignoreConstructors: boolean;\n                    /**\n                     * @since 8.22.0\n                     */\n                    methodsIgnorePattern: string;\n                    /**\n                     * @default false\n                     */\n                    avoidExplicitReturnArrows: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<\n            [\n                \"properties\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    avoidQuotes: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<[\"never\" | \"consistent\" | \"consistent-as-needed\"]>;\n\n    /**\n     * Rule to require using arrow functions for callbacks.\n     *\n     * @since 1.2.0\n     * @see https://eslint.org/docs/latest/rules/prefer-arrow-callback\n     */\n    \"prefer-arrow-callback\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowNamedFunctions: boolean;\n                /**\n                 * @default true\n                 */\n                allowUnboundThis: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require `const` declarations for variables that are never reassigned after declared.\n     *\n     * @since 0.23.0\n     * @see https://eslint.org/docs/latest/rules/prefer-const\n     */\n    \"prefer-const\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 'any'\n                 */\n                destructuring: \"any\" | \"all\";\n                /**\n                 * @default false\n                 */\n                ignoreReadBeforeAssign: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require destructuring from arrays and/or objects.\n     *\n     * @since 3.13.0\n     * @see https://eslint.org/docs/latest/rules/prefer-destructuring\n     */\n    \"prefer-destructuring\": Linter.RuleEntry<\n        [\n            Partial<\n                | {\n                    VariableDeclarator: Partial<{\n                        array: boolean;\n                        object: boolean;\n                    }>;\n                    AssignmentExpression: Partial<{\n                        array: boolean;\n                        object: boolean;\n                    }>;\n                }\n                | {\n                    array: boolean;\n                    object: boolean;\n                }\n            >,\n            Partial<{\n                enforceForRenamedProperties: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow the use of `Math.pow` in favor of the `**` operator.\n     *\n     * @since 6.7.0\n     * @see https://eslint.org/docs/latest/rules/prefer-exponentiation-operator\n     */\n    \"prefer-exponentiation-operator\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals.\n     *\n     * @since 3.5.0\n     * @see https://eslint.org/docs/latest/rules/prefer-numeric-literals\n     */\n    \"prefer-numeric-literals\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require rest parameters instead of `arguments`.\n     *\n     * @since 2.0.0-alpha-1\n     * @see https://eslint.org/docs/latest/rules/prefer-rest-params\n     */\n    \"prefer-rest-params\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require spread operators instead of `.apply()`.\n     *\n     * @since 1.0.0-rc-1\n     * @see https://eslint.org/docs/latest/rules/prefer-spread\n     */\n    \"prefer-spread\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require template literals instead of string concatenation.\n     *\n     * @since 1.2.0\n     * @see https://eslint.org/docs/latest/rules/prefer-template\n     */\n    \"prefer-template\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require generator functions to contain `yield`.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 1.0.0-rc-1\n     * @see https://eslint.org/docs/latest/rules/require-yield\n     */\n    \"require-yield\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce spacing between rest and spread operators and their expressions.\n     *\n     * @since 2.12.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/rest-spread-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/rest-spread-spacing\n     */\n    \"rest-spread-spacing\": Linter.RuleEntry<[\"never\" | \"always\"]>;\n\n    /**\n     * Rule to enforce sorted `import` declarations within modules.\n     *\n     * @since 2.0.0-beta.1\n     * @see https://eslint.org/docs/latest/rules/sort-imports\n     */\n    \"sort-imports\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                ignoreCase: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreDeclarationSort: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreMemberSort: boolean;\n                /**\n                 * @default ['none', 'all', 'multiple', 'single']\n                 */\n                memberSyntaxSortOrder: Array<\"none\" | \"all\" | \"multiple\" | \"single\">;\n                /**\n                 * @default false\n                 */\n                allowSeparatedGroups: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require symbol descriptions.\n     *\n     * @since 3.4.0\n     * @see https://eslint.org/docs/latest/rules/symbol-description\n     */\n    \"symbol-description\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require or disallow spacing around embedded expressions of template strings.\n     *\n     * @since 2.0.0-rc.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/template-curly-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/template-curly-spacing\n     */\n    \"template-curly-spacing\": Linter.RuleEntry<[\"never\" | \"always\"]>;\n\n    /**\n     * Rule to require or disallow spacing around the `*` in `yield*` expressions.\n     *\n     * @since 2.0.0-alpha-1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/yield-star-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/yield-star-spacing\n     */\n    \"yield-star-spacing\": Linter.RuleEntry<\n        [\n            | Partial<{\n                before: boolean;\n                after: boolean;\n            }>\n            | \"before\"\n            | \"after\"\n            | \"both\"\n            | \"neither\",\n        ]\n    >;\n}\n"
        }
    ]
}