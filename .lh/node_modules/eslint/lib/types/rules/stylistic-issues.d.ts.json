{
    "sourceFile": "node_modules/eslint/lib/types/rules/stylistic-issues.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface StylisticIssues extends Linter.RulesRecord {\n    /**\n     * Rule to enforce linebreaks after opening and before closing array brackets.\n     *\n     * @since 4.0.0-alpha.1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/array-bracket-newline) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/array-bracket-newline\n     */\n    \"array-bracket-newline\": Linter.RuleEntry<\n        [\n            | \"always\"\n            | \"never\"\n            | \"consistent\"\n            | Partial<{\n                /**\n                 * @default true\n                 */\n                multiline: boolean;\n                /**\n                 * @default null\n                 */\n                minItems: number | null;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing inside array brackets.\n     *\n     * @since 0.24.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/array-bracket-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/array-bracket-spacing\n     */\n    \"array-bracket-spacing\":\n        | Linter.RuleEntry<\n            [\n                \"never\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    singleValue: boolean;\n                    /**\n                     * @default false\n                     */\n                    objectsInArrays: boolean;\n                    /**\n                     * @default false\n                     */\n                    arraysInArrays: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<\n            [\n                \"always\",\n                Partial<{\n                    /**\n                     * @default true\n                     */\n                    singleValue: boolean;\n                    /**\n                     * @default true\n                     */\n                    objectsInArrays: boolean;\n                    /**\n                     * @default true\n                     */\n                    arraysInArrays: boolean;\n                }>,\n            ]\n        >;\n\n    /**\n     * Rule to enforce line breaks after each array element.\n     *\n     * @since 4.0.0-rc.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/array-element-newline) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/array-element-newline\n     */\n    \"array-element-newline\": Linter.RuleEntry<\n        [\n            | \"always\"\n            | \"never\"\n            | \"consistent\"\n            | Partial<{\n                /**\n                 * @default true\n                 */\n                multiline: boolean;\n                /**\n                 * @default null\n                 */\n                minItems: number | null;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow or enforce spaces inside of blocks after opening block and before closing block.\n     *\n     * @since 1.2.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/block-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/block-spacing\n     */\n    \"block-spacing\": Linter.RuleEntry<[\"always\" | \"never\"]>;\n\n    /**\n     * Rule to enforce consistent brace style for blocks.\n     *\n     * @since 0.0.7\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/brace-style) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/brace-style\n     */\n    \"brace-style\": Linter.RuleEntry<\n        [\n            \"1tbs\" | \"stroustrup\" | \"allman\",\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowSingleLine: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce camelcase naming convention.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/camelcase\n     */\n    camelcase: Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 'always'\n                 */\n                properties: \"always\" | \"never\";\n                /**\n                 * @default false\n                 */\n                ignoreDestructuring: boolean;\n                /**\n                 * @since 6.7.0\n                 * @default false\n                 */\n                ignoreImports: boolean;\n                /**\n                 * @since 7.4.0\n                 * @default false\n                 */\n                ignoreGlobals: boolean;\n                /**\n                 * @remarks\n                 * Also accept for regular expression patterns\n                 */\n                allow: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce or disallow capitalization of the first letter of a comment.\n     *\n     * @since 3.11.0\n     * @see https://eslint.org/docs/latest/rules/capitalized-comments\n     */\n    \"capitalized-comments\": Linter.RuleEntry<\n        [\n            \"always\" | \"never\",\n            Partial<{\n                ignorePattern: string;\n                /**\n                 * @default false\n                 */\n                ignoreInlineComments: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreConsecutiveComments: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow trailing commas.\n     *\n     * @since 0.16.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/comma-dangle) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/comma-dangle\n     */\n    \"comma-dangle\": Linter.RuleEntry<\n        [\n            | \"never\"\n            | \"always\"\n            | \"always-multiline\"\n            | \"only-multiline\"\n            | Partial<{\n                /**\n                 * @default 'never'\n                 */\n                arrays: \"never\" | \"always\" | \"always-multiline\" | \"only-multiline\";\n                /**\n                 * @default 'never'\n                 */\n                objects: \"never\" | \"always\" | \"always-multiline\" | \"only-multiline\";\n                /**\n                 * @default 'never'\n                 */\n                imports: \"never\" | \"always\" | \"always-multiline\" | \"only-multiline\";\n                /**\n                 * @default 'never'\n                 */\n                exports: \"never\" | \"always\" | \"always-multiline\" | \"only-multiline\";\n                /**\n                 * @default 'never'\n                 */\n                functions: \"never\" | \"always\" | \"always-multiline\" | \"only-multiline\";\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing before and after commas.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/comma-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/comma-spacing\n     */\n    \"comma-spacing\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                before: boolean;\n                /**\n                 * @default true\n                 */\n                after: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent comma style.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/comma-style) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/comma-style\n     */\n    \"comma-style\": Linter.RuleEntry<\n        [\n            \"last\" | \"first\",\n            Partial<{\n                exceptions: Record<string, boolean>;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing inside computed property brackets.\n     *\n     * @since 0.23.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/computed-property-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/computed-property-spacing\n     */\n    \"computed-property-spacing\": Linter.RuleEntry<[\"never\" | \"always\"]>;\n\n    /**\n     * Rule to enforce consistent naming when capturing the current execution context.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/consistent-this\n     */\n    \"consistent-this\": Linter.RuleEntry<[...string[]]>;\n\n    /**\n     * Rule to require or disallow newline at the end of files.\n     *\n     * @since 0.7.1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/eol-last) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/eol-last\n     */\n    \"eol-last\": Linter.RuleEntry<\n        [\n            \"always\" | \"never\", // | 'unix' | 'windows'\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow spacing between function identifiers and their invocations.\n     *\n     * @since 3.3.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/function-call-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/func-call-spacing\n     */\n    \"func-call-spacing\": Linter.RuleEntry<[\"never\" | \"always\"]>;\n\n    /**\n     * Rule to require function names to match the name of the variable or property to which they are assigned.\n     *\n     * @since 3.8.0\n     * @see https://eslint.org/docs/latest/rules/func-name-matching\n     */\n    \"func-name-matching\":\n        | Linter.RuleEntry<\n            [\n                \"always\" | \"never\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    considerPropertyDescriptor: boolean;\n                    /**\n                     * @default false\n                     */\n                    includeCommonJSModuleExports: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<\n            [\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    considerPropertyDescriptor: boolean;\n                    /**\n                     * @default false\n                     */\n                    includeCommonJSModuleExports: boolean;\n                }>,\n            ]\n        >;\n\n    /**\n     * Rule to require or disallow named `function` expressions.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/func-names\n     */\n    \"func-names\": Linter.RuleEntry<\n        [\n            \"always\" | \"as-needed\" | \"never\",\n            Partial<{\n                generators: \"always\" | \"as-needed\" | \"never\";\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce the consistent use of either `function` declarations or expressions assigned to variables.\n     *\n     * @since 0.2.0\n     * @see https://eslint.org/docs/latest/rules/func-style\n     */\n    \"func-style\": Linter.RuleEntry<\n        [\n            \"expression\" | \"declaration\",\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowArrowFunctions: boolean;\n                overrides: {\n                    namedExports: \"declaration\" | \"expression\" | \"ignore\";\n                }\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent line breaks inside function parentheses.\n     *\n     * @since 4.6.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/function-paren-newline) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/function-paren-newline\n     */\n    \"function-paren-newline\": Linter.RuleEntry<\n        [\n            | \"always\"\n            | \"never\"\n            | \"multiline\"\n            | \"multiline-arguments\"\n            | \"consistent\"\n            | Partial<{\n                minItems: number;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow specified identifiers.\n     *\n     * @since 2.0.0-beta.2\n     * @deprecated please use [`id-denylist`](https://eslint.org/docs/latest/rules/id-denylist).\n     * @see https://eslint.org/docs/latest/rules/id-blacklist\n     */\n    \"id-blacklist\": Linter.RuleEntry<[...string[]]>;\n\n    /**\n     * Rule to disallow specified identifiers.\n     *\n     * @since 7.4.0\n     * @see https://eslint.org/docs/latest/rules/id-denylist\n     */\n    \"id-denylist\": Linter.RuleEntry<string[]>;\n\n    /**\n     * Rule to enforce minimum and maximum identifier lengths.\n     *\n     * @since 1.0.0\n     * @see https://eslint.org/docs/latest/rules/id-length\n     */\n    \"id-length\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 2\n                 */\n                min: number;\n                /**\n                 * @default Infinity\n                 */\n                max: number;\n                /**\n                 * @default 'always'\n                 */\n                properties: \"always\" | \"never\";\n                exceptions: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require identifiers to match a specified regular expression.\n     *\n     * @since 1.0.0\n     * @see https://eslint.org/docs/latest/rules/id-match\n     */\n    \"id-match\": Linter.RuleEntry<\n        [\n            string,\n            Partial<{\n                /**\n                 * @default false\n                 */\n                properties: boolean;\n                /**\n                 * @default false\n                 */\n                onlyDeclarations: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreDestructuring: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce the location of arrow function bodies.\n     *\n     * @since 4.12.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/implicit-arrow-linebreak) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/implicit-arrow-linebreak\n     */\n    \"implicit-arrow-linebreak\": Linter.RuleEntry<[\"beside\" | \"below\"]>;\n\n    /**\n     * Rule to enforce consistent indentation.\n     *\n     * @since 0.14.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/indent) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/indent\n     */\n    indent: Linter.RuleEntry<\n        [\n            number | \"tab\",\n            Partial<{\n                /**\n                 * @default 0\n                 */\n                SwitchCase: number;\n                /**\n                 * @default 1\n                 */\n                VariableDeclarator:\n                    | Partial<{\n                        /**\n                         * @default 1\n                         */\n                        var: number | \"first\";\n                        /**\n                         * @default 1\n                         */\n                        let: number | \"first\";\n                        /**\n                         * @default 1\n                         */\n                        const: number | \"first\";\n                    }>\n                    | number\n                    | \"first\";\n                /**\n                 * @default 1\n                 */\n                outerIIFEBody: number;\n                /**\n                 * @default 1\n                 */\n                MemberExpression: number | \"off\";\n                /**\n                 * @default { parameters: 1, body: 1 }\n                 */\n                FunctionDeclaration: Partial<{\n                    /**\n                     * @default 1\n                     */\n                    parameters: number | \"first\" | \"off\";\n                    /**\n                     * @default 1\n                     */\n                    body: number;\n                }>;\n                /**\n                 * @default { parameters: 1, body: 1 }\n                 */\n                FunctionExpression: Partial<{\n                    /**\n                     * @default 1\n                     */\n                    parameters: number | \"first\" | \"off\";\n                    /**\n                     * @default 1\n                     */\n                    body: number;\n                }>;\n                /**\n                 * @default { arguments: 1 }\n                 */\n                CallExpression: Partial<{\n                    /**\n                     * @default 1\n                     */\n                    arguments: number | \"first\" | \"off\";\n                }>;\n                /**\n                 * @default 1\n                 */\n                ArrayExpression: number | \"first\" | \"off\";\n                /**\n                 * @default 1\n                 */\n                ObjectExpression: number | \"first\" | \"off\";\n                /**\n                 * @default 1\n                 */\n                ImportDeclaration: number | \"first\" | \"off\";\n                /**\n                 * @default false\n                 */\n                flatTernaryExpressions: boolean;\n                ignoredNodes: string[];\n                /**\n                 * @default false\n                 */\n                ignoreComments: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce the consistent use of either double or single quotes in JSX attributes.\n     *\n     * @since 1.4.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/jsx-quotes) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/jsx-quotes\n     */\n    \"jsx-quotes\": Linter.RuleEntry<[\"prefer-double\" | \"prefer-single\"]>;\n\n    /**\n     * Rule to enforce consistent spacing between keys and values in object literal properties.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/key-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/key-spacing\n     */\n    \"key-spacing\": Linter.RuleEntry<\n        [\n            | Partial<\n                | {\n                    /**\n                     * @default false\n                     */\n                    beforeColon: boolean;\n                    /**\n                     * @default true\n                     */\n                    afterColon: boolean;\n                    /**\n                     * @default 'strict'\n                     */\n                    mode: \"strict\" | \"minimum\";\n                    align:\n                        | Partial<{\n                            /**\n                             * @default false\n                             */\n                            beforeColon: boolean;\n                            /**\n                             * @default true\n                             */\n                            afterColon: boolean;\n                            /**\n                             * @default 'colon'\n                             */\n                            on: \"value\" | \"colon\";\n                            /**\n                             * @default 'strict'\n                             */\n                            mode: \"strict\" | \"minimum\";\n                        }>\n                        | \"value\"\n                        | \"colon\";\n                }\n                | {\n                    singleLine?:\n                        | Partial<{\n                            /**\n                             * @default false\n                             */\n                            beforeColon: boolean;\n                            /**\n                             * @default true\n                             */\n                            afterColon: boolean;\n                            /**\n                             * @default 'strict'\n                             */\n                            mode: \"strict\" | \"minimum\";\n                        }>\n                        | undefined;\n                    multiLine?:\n                        | Partial<{\n                            /**\n                             * @default false\n                             */\n                            beforeColon: boolean;\n                            /**\n                             * @default true\n                             */\n                            afterColon: boolean;\n                            /**\n                             * @default 'strict'\n                             */\n                            mode: \"strict\" | \"minimum\";\n                            align:\n                                | Partial<{\n                                    /**\n                                     * @default false\n                                     */\n                                    beforeColon: boolean;\n                                    /**\n                                     * @default true\n                                     */\n                                    afterColon: boolean;\n                                    /**\n                                     * @default 'colon'\n                                     */\n                                    on: \"value\" | \"colon\";\n                                    /**\n                                     * @default 'strict'\n                                     */\n                                    mode: \"strict\" | \"minimum\";\n                                }>\n                                | \"value\"\n                                | \"colon\";\n                        }>\n                        | undefined;\n                }\n            >\n            | {\n                align: Partial<{\n                    /**\n                     * @default false\n                     */\n                    beforeColon: boolean;\n                    /**\n                     * @default true\n                     */\n                    afterColon: boolean;\n                    /**\n                     * @default 'colon'\n                     */\n                    on: \"value\" | \"colon\";\n                    /**\n                     * @default 'strict'\n                     */\n                    mode: \"strict\" | \"minimum\";\n                }>;\n                singleLine?:\n                    | Partial<{\n                        /**\n                         * @default false\n                         */\n                        beforeColon: boolean;\n                        /**\n                         * @default true\n                         */\n                        afterColon: boolean;\n                        /**\n                         * @default 'strict'\n                         */\n                        mode: \"strict\" | \"minimum\";\n                    }>\n                    | undefined;\n                multiLine?:\n                    | Partial<{\n                        /**\n                         * @default false\n                         */\n                        beforeColon: boolean;\n                        /**\n                         * @default true\n                         */\n                        afterColon: boolean;\n                        /**\n                         * @default 'strict'\n                         */\n                        mode: \"strict\" | \"minimum\";\n                    }>\n                    | undefined;\n            },\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing before and after keywords.\n     *\n     * @since 2.0.0-beta.1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/keyword-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/keyword-spacing\n     */\n    \"keyword-spacing\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                before: boolean;\n                /**\n                 * @default true\n                 */\n                after: boolean;\n                overrides: Record<\n                    string,\n                    Partial<{\n                        before: boolean;\n                        after: boolean;\n                    }>\n                >;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce position of line comments.\n     *\n     * @since 3.5.0\n     * @deprecated since 9.3.0, please use the [corresponding rule](https://eslint.style/rules/js/line-comment-position) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/line-comment-position\n     */\n    \"line-comment-position\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 'above'\n                 */\n                position: \"above\" | \"beside\";\n                ignorePattern: string;\n                /**\n                 * @default true\n                 */\n                applyDefaultIgnorePatterns: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent linebreak style.\n     *\n     * @since 0.21.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/linebreak-style) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/linebreak-style\n     */\n    \"linebreak-style\": Linter.RuleEntry<[\"unix\" | \"windows\"]>;\n\n    /**\n     * Rule to require empty lines around comments.\n     *\n     * @since 0.22.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/lines-around-comment) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/lines-around-comment\n     */\n    \"lines-around-comment\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                beforeBlockComment: boolean;\n                /**\n                 * @default false\n                 */\n                afterBlockComment: boolean;\n                /**\n                 * @default false\n                 */\n                beforeLineComment: boolean;\n                /**\n                 * @default false\n                 */\n                afterLineComment: boolean;\n                /**\n                 * @default false\n                 */\n                allowBlockStart: boolean;\n                /**\n                 * @default false\n                 */\n                allowBlockEnd: boolean;\n                /**\n                 * @default false\n                 */\n                allowObjectStart: boolean;\n                /**\n                 * @default false\n                 */\n                allowObjectEnd: boolean;\n                /**\n                 * @default false\n                 */\n                allowArrayStart: boolean;\n                /**\n                 * @default false\n                 */\n                allowArrayEnd: boolean;\n                /**\n                 * @default false\n                 */\n                allowClassStart: boolean;\n                /**\n                 * @default false\n                 */\n                allowClassEnd: boolean;\n                ignorePattern: string;\n                /**\n                 * @default true\n                 */\n                applyDefaultIgnorePatterns: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow an empty line between class members.\n     *\n     * @since 4.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/lines-between-class-members) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/lines-between-class-members\n     */\n    \"lines-between-class-members\": Linter.RuleEntry<\n        [\n            \"always\" | \"never\" | {\n                enforce: Array<\n                    {\n                        blankLine: \"always\" | \"never\";\n                        prev: \"method\" | \"field\" | \"*\";\n                        next: \"method\" | \"field\" | \"*\";\n                    }\n                >\n            },\n            Partial<{\n                /**\n                 * @default false\n                 */\n                exceptAfterSingleLine: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum depth that blocks can be nested.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/max-depth\n     */\n    \"max-depth\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 4\n                 */\n                max: number;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum line length.\n     *\n     * @since 0.0.9\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/max-len) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/max-len\n     */\n    \"max-len\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 80\n                 */\n                code: number;\n                /**\n                 * @default 4\n                 */\n                tabWidth: number;\n                comments: number;\n                ignorePattern: string;\n                /**\n                 * @default false\n                 */\n                ignoreComments: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreTrailingComments: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreUrls: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreStrings: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreTemplateLiterals: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreRegExpLiterals: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum number of lines per file.\n     *\n     * @since 2.12.0\n     * @see https://eslint.org/docs/latest/rules/max-lines\n     */\n    \"max-lines\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 300\n                 */\n                max: number;\n                /**\n                 * @default false\n                 */\n                skipBlankLines: boolean;\n                /**\n                 * @default false\n                 */\n                skipComments: boolean;\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum number of lines of code in a function.\n     *\n     * @since 5.0.0\n     * @see https://eslint.org/docs/latest/rules/max-lines-per-function\n     */\n    \"max-lines-per-function\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default 50\n                 */\n                max: number;\n                /**\n                 * @default false\n                 */\n                skipBlankLines: boolean;\n                /**\n                 * @default false\n                 */\n                skipComments: boolean;\n                /**\n                 * @default false\n                 */\n                IIFEs: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum depth that callbacks can be nested.\n     *\n     * @since 0.2.0\n     * @see https://eslint.org/docs/latest/rules/max-nested-callbacks\n     */\n    \"max-nested-callbacks\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 10\n                 */\n                max: number;\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum number of parameters in function definitions.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/max-params\n     */\n    \"max-params\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 3\n                 */\n                max: number;\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum number of statements allowed in function blocks.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/max-statements\n     */\n    \"max-statements\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 10\n                 */\n                max: number;\n                /**\n                 * @default false\n                 */\n                ignoreTopLevelFunctions: boolean;\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a maximum number of statements allowed per line.\n     *\n     * @since 2.5.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/max-statements-per-line) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/max-statements-per-line\n     */\n    \"max-statements-per-line\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 1\n                 */\n                max: number;\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to enforce a particular style for multiline comments.\n     *\n     * @since 4.10.0\n     * @deprecated since 9.3.0, please use the [corresponding rule](https://eslint.style/rules/js/multiline-comment-style) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/multiline-comment-style\n     */\n    \"multiline-comment-style\": Linter.RuleEntry<[\"starred-block\" | \"bare-block\" | \"separate-lines\"]>;\n\n    /**\n     * Rule to enforce newlines between operands of ternary expressions.\n     *\n     * @since 3.1.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/multiline-ternary) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/multiline-ternary\n     */\n    \"multiline-ternary\": Linter.RuleEntry<[\"always\" | \"always-multiline\" | \"never\"]>;\n\n    /**\n     * Rule to require constructor names to begin with a capital letter.\n     *\n     * @since 0.0.3-0\n     * @see https://eslint.org/docs/latest/rules/new-cap\n     */\n    \"new-cap\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                newIsCap: boolean;\n                /**\n                 * @default true\n                 */\n                capIsNew: boolean;\n                newIsCapExceptions: string[];\n                newIsCapExceptionPattern: string;\n                capIsNewExceptions: string[];\n                capIsNewExceptionPattern: string;\n                /**\n                 * @default true\n                 */\n                properties: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce or disallow parentheses when invoking a constructor with no arguments.\n     *\n     * @since 0.0.6\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/new-parens) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/new-parens\n     */\n    \"new-parens\": Linter.RuleEntry<[\"always\" | \"never\"]>;\n\n    /**\n     * Rule to require a newline after each call in a method chain.\n     *\n     * @since 2.0.0-rc.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/newline-per-chained-call) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/newline-per-chained-call\n     */\n    \"newline-per-chained-call\": Linter.RuleEntry<\n        [\n            {\n                /**\n                 * @default 2\n                 */\n                ignoreChainWithDepth: number;\n            },\n        ]\n    >;\n\n    /**\n     * Rule to disallow `Array` constructors.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/no-array-constructor\n     */\n    \"no-array-constructor\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow bitwise operators.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/no-bitwise\n     */\n    \"no-bitwise\": Linter.RuleEntry<\n        [\n            Partial<{\n                allow: string[];\n                /**\n                 * @default false\n                 */\n                int32Hint: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow `continue` statements.\n     *\n     * @since 0.19.0\n     * @see https://eslint.org/docs/latest/rules/no-continue\n     */\n    \"no-continue\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow inline comments after code.\n     *\n     * @since 0.10.0\n     * @see https://eslint.org/docs/latest/rules/no-inline-comments\n     */\n    \"no-inline-comments\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `if` statements as the only statement in `else` blocks.\n     *\n     * @since 0.6.0\n     * @see https://eslint.org/docs/latest/rules/no-lonely-if\n     */\n    \"no-lonely-if\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow mixed binary operators.\n     *\n     * @since 2.12.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-mixed-operators) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-mixed-operators\n     */\n    \"no-mixed-operators\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default\n                 * [\n                 *     [\"+\", \"-\", \"*\", \"/\", \"%\", \"**\"],\n                 *     [\"&\", \"|\", \"^\", \"~\", \"<<\", \">>\", \">>>\"],\n                 *     [\"==\", \"!=\", \"===\", \"!==\", \">\", \">=\", \"<\", \"<=\"],\n                 *     [\"&&\", \"||\"],\n                 *     [\"in\", \"instanceof\"]\n                 * ]\n                 */\n                groups: string[][];\n                /**\n                 * @default true\n                 */\n                allowSamePrecedence: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow mixed spaces and tabs for indentation.\n     *\n     * @since 0.7.1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-mixed-spaces-and-tabs) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs\n     */\n    \"no-mixed-spaces-and-tabs\": Linter.RuleEntry<[\"smart-tabs\"]>;\n\n    /**\n     * Rule to disallow use of chained assignment expressions.\n     *\n     * @since 3.14.0\n     * @see https://eslint.org/docs/latest/rules/no-multi-assign\n     */\n    \"no-multi-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow multiple empty lines.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-multiple-empty-lines) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-multiple-empty-lines\n     */\n    \"no-multiple-empty-lines\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default 2\n                 */\n                max: number;\n                maxEOF: number;\n                maxBOF: number;\n            }>\n            | number,\n        ]\n    >;\n\n    /**\n     * Rule to disallow negated conditions.\n     *\n     * @since 1.6.0\n     * @see https://eslint.org/docs/latest/rules/no-negated-condition\n     */\n    \"no-negated-condition\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow nested ternary expressions.\n     *\n     * @since 0.2.0\n     * @see https://eslint.org/docs/latest/rules/no-nested-ternary\n     */\n    \"no-nested-ternary\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow calls to the `Object` constructor without an argument.\n     *\n     * @since 8.50.0\n     * @see https://eslint.org/docs/latest/rules/no-object-constructor\n     */\n    \"no-object-constructor\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the unary operators `++` and `--`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-plusplus\n     */\n    \"no-plusplus\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowForLoopAfterthoughts: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow specified syntax.\n     *\n     * @since 1.4.0\n     * @see https://eslint.org/docs/latest/rules/no-restricted-syntax\n     */\n    \"no-restricted-syntax\": Linter.RuleEntry<\n        [\n            ...Array<\n                | string\n                | {\n                    selector: string;\n                    message?: string | undefined;\n                }\n            >,\n        ]\n    >;\n\n    /**\n     * Rule to disallow all tabs.\n     *\n     * @since 3.2.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-tabs) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-tabs\n     */\n    \"no-tabs\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowIndentationTabs: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow ternary operators.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-ternary\n     */\n    \"no-ternary\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow trailing whitespace at the end of lines.\n     *\n     * @since 0.7.1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-trailing-spaces) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-trailing-spaces\n     */\n    \"no-trailing-spaces\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                skipBlankLines: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreComments: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow dangling underscores in identifiers.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-underscore-dangle\n     */\n    \"no-underscore-dangle\": Linter.RuleEntry<\n        [\n            Partial<{\n                allow: string[];\n                /**\n                 * @default false\n                 */\n                allowAfterThis: boolean;\n                /**\n                 * @default false\n                 */\n                allowAfterSuper: boolean;\n                /**\n                 * @since 6.7.0\n                 * @default false\n                 */\n                allowAfterThisConstructor: boolean;\n                /**\n                 * @default false\n                 */\n                enforceInMethodNames: boolean;\n                /**\n                 * @since 8.15.0\n                 * @default false\n                 */\n                enforceInClassFields: boolean;\n                /**\n                 * @since 8.31.0\n                 * @default true\n                 */\n                allowInArrayDestructuring: boolean;\n                /**\n                 * @since 8.31.0\n                 * @default true\n                 */\n                allowInObjectDestructuring: boolean;\n                /**\n                 * @since 7.7.0\n                 * @default true\n                 */\n                allowFunctionParams: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow ternary operators when simpler alternatives exist.\n     *\n     * @since 0.21.0\n     * @see https://eslint.org/docs/latest/rules/no-unneeded-ternary\n     */\n    \"no-unneeded-ternary\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                defaultAssignment: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow whitespace before properties.\n     *\n     * @since 2.0.0-beta.1\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-whitespace-before-property) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-whitespace-before-property\n     */\n    \"no-whitespace-before-property\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce the location of single-line statements.\n     *\n     * @since 3.17.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/nonblock-statement-body-position) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/nonblock-statement-body-position\n     */\n    \"nonblock-statement-body-position\": Linter.RuleEntry<\n        [\n            \"beside\" | \"below\" | \"any\",\n            Partial<{\n                overrides: Record<string, \"beside\" | \"below\" | \"any\">;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent line breaks after opening and before closing braces.\n     *\n     * @since 2.12.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/object-curly-newline) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/object-curly-newline\n     */\n    \"object-curly-newline\": Linter.RuleEntry<\n        [\n            | \"always\"\n            | \"never\"\n            | Partial<{\n                /**\n                 * @default false\n                 */\n                multiline: boolean;\n                minProperties: number;\n                /**\n                 * @default true\n                 */\n                consistent: boolean;\n            }>\n            | Partial<\n                Record<\n                    \"ObjectExpression\" | \"ObjectPattern\" | \"ImportDeclaration\" | \"ExportDeclaration\",\n                    | \"always\"\n                    | \"never\"\n                    | Partial<{\n                        /**\n                         * @default false\n                         */\n                        multiline: boolean;\n                        minProperties: number;\n                        /**\n                         * @default true\n                         */\n                        consistent: boolean;\n                    }>\n                >\n            >,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing inside braces.\n     *\n     * @since 0.22.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/object-curly-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/object-curly-spacing\n     */\n    \"object-curly-spacing\":\n        | Linter.RuleEntry<\n            [\n                \"never\",\n                {\n                    /**\n                     * @default false\n                     */\n                    arraysInObjects: boolean;\n                    /**\n                     * @default false\n                     */\n                    objectsInObjects: boolean;\n                },\n            ]\n        >\n        | Linter.RuleEntry<\n            [\n                \"always\",\n                {\n                    /**\n                     * @default true\n                     */\n                    arraysInObjects: boolean;\n                    /**\n                     * @default true\n                     */\n                    objectsInObjects: boolean;\n                },\n            ]\n        >;\n\n    /**\n     * Rule to enforce placing object properties on separate lines.\n     *\n     * @since 2.10.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/object-property-newline) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/object-property-newline\n     */\n    \"object-property-newline\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowAllPropertiesOnSameLine: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce variables to be declared either together or separately in functions.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/one-var\n     */\n    \"one-var\": Linter.RuleEntry<\n        [\n            | \"always\"\n            | \"never\"\n            | \"consecutive\"\n            | Partial<\n                {\n                    /**\n                     * @default false\n                     */\n                    separateRequires: boolean;\n                } & Record<\"var\" | \"let\" | \"const\", \"always\" | \"never\" | \"consecutive\">\n            >\n            | Partial<Record<\"initialized\" | \"uninitialized\", \"always\" | \"never\" | \"consecutive\">>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow newlines around variable declarations.\n     *\n     * @since 2.0.0-beta.3\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/one-var-declaration-per-line) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/one-var-declaration-per-line\n     */\n    \"one-var-declaration-per-line\": Linter.RuleEntry<[\"initializations\" | \"always\"]>;\n\n    /**\n     * Rule to require or disallow assignment operator shorthand where possible.\n     *\n     * @since 0.10.0\n     * @see https://eslint.org/docs/latest/rules/operator-assignment\n     */\n    \"operator-assignment\": Linter.RuleEntry<[\"always\" | \"never\"]>;\n\n    /**\n     * Rule to enforce consistent linebreak style for operators.\n     *\n     * @since 0.19.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/operator-linebreak) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/operator-linebreak\n     */\n    \"operator-linebreak\": Linter.RuleEntry<\n        [\n            \"after\" | \"before\" | \"none\",\n            Partial<{\n                overrides: Record<string, \"after\" | \"before\" | \"none\">;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow padding within blocks.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/padded-blocks) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/padded-blocks\n     */\n    \"padded-blocks\": Linter.RuleEntry<\n        [\n            \"always\" | \"never\" | Partial<Record<\"blocks\" | \"classes\" | \"switches\", \"always\" | \"never\">>,\n            {\n                /**\n                 * @default false\n                 */\n                allowSingleLineBlocks: boolean;\n            },\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow padding lines between statements.\n     *\n     * @since 4.0.0-beta.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/padding-line-between-statements) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/padding-line-between-statements\n     */\n    \"padding-line-between-statements\": Linter.RuleEntry<\n        [\n            ...Array<\n                {\n                    blankLine: \"any\" | \"never\" | \"always\";\n                } & Record<\"prev\" | \"next\", string | string[]>\n            >,\n        ]\n    >;\n\n    /**\n     * Rule to disallow using `Object.assign` with an object literal as the first argument and prefer the use of object spread instead.\n     *\n     * @since 5.0.0-alpha.3\n     * @see https://eslint.org/docs/latest/rules/prefer-object-spread\n     */\n    \"prefer-object-spread\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require quotes around object literal property names.\n     *\n     * @since 0.0.6\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/quote-props) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/quote-props\n     */\n    \"quote-props\":\n        | Linter.RuleEntry<[\"always\" | \"consistent\"]>\n        | Linter.RuleEntry<\n            [\n                \"as-needed\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    keywords: boolean;\n                    /**\n                     * @default true\n                     */\n                    unnecessary: boolean;\n                    /**\n                     * @default false\n                     */\n                    numbers: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<\n            [\n                \"consistent-as-needed\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    keywords: boolean;\n                }>,\n            ]\n        >;\n\n    /**\n     * Rule to enforce the consistent use of either backticks, double, or single quotes.\n     *\n     * @since 0.0.7\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/quotes) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/quotes\n     */\n    quotes: Linter.RuleEntry<\n        [\n            \"double\" | \"single\" | \"backtick\",\n            Partial<{\n                /**\n                 * @default false\n                 */\n                avoidEscape: boolean;\n                /**\n                 * @default false\n                 */\n                allowTemplateLiterals: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow semicolons instead of ASI.\n     *\n     * @since 0.0.6\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/semi) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/semi\n     */\n    semi:\n        | Linter.RuleEntry<\n            [\n                \"always\",\n                Partial<{\n                    /**\n                     * @default false\n                     */\n                    omitLastInOneLineBlock: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<\n            [\n                \"never\",\n                Partial<{\n                    /**\n                     * @default 'any'\n                     */\n                    beforeStatementContinuationChars: \"any\" | \"always\" | \"never\";\n                }>,\n            ]\n        >;\n\n    /**\n     * Rule to enforce consistent spacing before and after semicolons.\n     *\n     * @since 0.16.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/semi-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/semi-spacing\n     */\n    \"semi-spacing\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                before: boolean;\n                /**\n                 * @default true\n                 */\n                after: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce location of semicolons.\n     *\n     * @since 4.0.0-beta.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/semi-style) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/semi-style\n     */\n    \"semi-style\": Linter.RuleEntry<[\"last\" | \"first\"]>;\n\n    /**\n     * Rule to require object keys to be sorted.\n     *\n     * @since 3.3.0\n     * @see https://eslint.org/docs/latest/rules/sort-keys\n     */\n    \"sort-keys\": Linter.RuleEntry<\n        [\n            \"asc\" | \"desc\",\n            Partial<{\n                /**\n                 * @default true\n                 */\n                caseSensitive: boolean;\n                /**\n                 * @default 2\n                 */\n                minKeys: number;\n                /**\n                 * @default false\n                 */\n                natural: boolean;\n                /**\n                 * @default false\n                 */\n                allowLineSeparatedGroups: boolean;\n                /**\n                 * @default false\n                 */\n                ignoreComputedKeys: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require variables within the same declaration block to be sorted.\n     *\n     * @since 0.2.0\n     * @see https://eslint.org/docs/latest/rules/sort-vars\n     */\n    \"sort-vars\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                ignoreCase: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing before blocks.\n     *\n     * @since 0.9.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/space-before-blocks) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/space-before-blocks\n     */\n    \"space-before-blocks\": Linter.RuleEntry<\n        [\"always\" | \"never\" | Partial<Record<\"functions\" | \"keywords\" | \"classes\", \"always\" | \"never\" | \"off\">>]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing before `function` definition opening parenthesis.\n     *\n     * @since 0.18.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/space-before-function-paren) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/space-before-function-paren\n     */\n    \"space-before-function-paren\": Linter.RuleEntry<\n        [\"always\" | \"never\" | Partial<Record<\"anonymous\" | \"named\" | \"asyncArrow\", \"always\" | \"never\" | \"ignore\">>]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing inside parentheses.\n     *\n     * @since 0.8.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/space-in-parens) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/space-in-parens\n     */\n    \"space-in-parens\": Linter.RuleEntry<\n        [\n            \"never\" | \"always\",\n            Partial<{\n                exceptions: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require spacing around infix operators.\n     *\n     * @since 0.2.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/space-infix-ops) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/space-infix-ops\n     */\n    \"space-infix-ops\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                int32Hint: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing before or after unary operators.\n     *\n     * @since 0.10.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/space-unary-ops) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/space-unary-ops\n     */\n    \"space-unary-ops\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                words: boolean;\n                /**\n                 * @default false\n                 */\n                nonwords: boolean;\n                overrides: Record<string, boolean>;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce consistent spacing after the `//` or `/*` in a comment.\n     *\n     * @since 0.23.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/spaced-comment) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/spaced-comment\n     */\n    \"spaced-comment\": Linter.RuleEntry<\n        [\n            \"always\" | \"never\",\n            {\n                exceptions: string[];\n                markers: string[];\n                line: {\n                    exceptions: string[];\n                    markers: string[];\n                };\n                block: {\n                    exceptions: string[];\n                    markers: string[];\n                    /**\n                     * @default false\n                     */\n                    balanced: boolean;\n                };\n            },\n        ]\n    >;\n\n    /**\n     * Rule to enforce spacing around colons of switch statements.\n     *\n     * @since 4.0.0-beta.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/switch-colon-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/switch-colon-spacing\n     */\n    \"switch-colon-spacing\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                before: boolean;\n                /**\n                 * @default true\n                 */\n                after: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require or disallow spacing between template tags and their literals.\n     *\n     * @since 3.15.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/template-tag-spacing) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/template-tag-spacing\n     */\n    \"template-tag-spacing\": Linter.RuleEntry<[\"never\" | \"always\"]>;\n\n    /**\n     * Rule to require or disallow Unicode byte order mark (BOM).\n     *\n     * @since 2.11.0\n     * @see https://eslint.org/docs/latest/rules/unicode-bom\n     */\n    \"unicode-bom\": Linter.RuleEntry<[\"never\" | \"always\"]>;\n\n    /**\n     * Rule to require parenthesis around regex literals.\n     *\n     * @since 0.1.0\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/wrap-regex) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/wrap-regex\n     */\n    \"wrap-regex\": Linter.RuleEntry<[]>;\n}\n"
        }
    ]
}