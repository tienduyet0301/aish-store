{
    "sourceFile": "node_modules/eslint/lib/types/rules/node-commonjs.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface NodeJSAndCommonJS extends Linter.RulesRecord {\n    /**\n     * Rule to require `return` statements after callbacks.\n     *\n     * @since 1.0.0-rc-1\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/callback-return\n     */\n    \"callback-return\": Linter.RuleEntry<[string[]]>;\n\n    /**\n     * Rule to require `require()` calls to be placed at top-level module scope.\n     *\n     * @since 1.4.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/global-require\n     */\n    \"global-require\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to require error handling in callbacks.\n     *\n     * @since 0.4.5\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/handle-callback-err\n     */\n    \"handle-callback-err\": Linter.RuleEntry<[string]>;\n\n    /**\n     * Rule to disallow use of the `Buffer()` constructor.\n     *\n     * @since 4.0.0-alpha.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-buffer-constructor\n     */\n    \"no-buffer-constructor\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `require` calls to be mixed with regular variable declarations.\n     *\n     * @since 0.0.9\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-mixed-requires\n     */\n    \"no-mixed-requires\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                grouping: boolean;\n                /**\n                 * @default false\n                 */\n                allowCall: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow `new` operators with calls to `require`.\n     *\n     * @since 0.6.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-new-require\n     */\n    \"no-new-require\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow string concatenation with `__dirname` and `__filename`.\n     *\n     * @since 0.4.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-path-concat\n     */\n    \"no-path-concat\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `process.env`.\n     *\n     * @since 0.9.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-process-env\n     */\n    \"no-process-env\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `process.exit()`.\n     *\n     * @since 0.4.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-process-exit\n     */\n    \"no-process-exit\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow specified modules when loaded by `require`.\n     *\n     * @since 0.6.0\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-restricted-modules\n     */\n    \"no-restricted-modules\": Linter.RuleEntry<\n        [\n            ...Array<\n                | string\n                | {\n                    name: string;\n                    message?: string | undefined;\n                }\n                | Partial<{\n                    paths: Array<\n                        | string\n                        | {\n                            name: string;\n                            message?: string | undefined;\n                        }\n                    >;\n                    patterns: string[];\n                }>\n            >,\n        ]\n    >;\n\n    /**\n     * Rule to disallow synchronous methods.\n     *\n     * @since 0.0.9\n     * @deprecated\n     * @see https://eslint.org/docs/latest/rules/no-sync\n     */\n    \"no-sync\": Linter.RuleEntry<\n        [\n            {\n                /**\n                 * @default false\n                 */\n                allowAtRootLevel: boolean;\n            },\n        ]\n    >;\n}\n"
        }
    ]
}