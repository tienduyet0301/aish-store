{
    "sourceFile": "node_modules/eslint/lib/types/rules/variables.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface Variables extends Linter.RulesRecord {\n    /**\n     * Rule to require or disallow initialization in variable declarations.\n     *\n     * @since 1.0.0-rc-1\n     * @see https://eslint.org/docs/latest/rules/init-declarations\n     */\n    \"init-declarations\":\n        | Linter.RuleEntry<[\"always\"]>\n        | Linter.RuleEntry<\n            [\n                \"never\",\n                Partial<{\n                    ignoreForLoopInit: boolean;\n                }>,\n            ]\n        >;\n\n    /**\n     * Rule to disallow deleting variables.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-delete-var\n     */\n    \"no-delete-var\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow labels that share a name with a variable.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-label-var\n     */\n    \"no-label-var\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow specified global variables.\n     *\n     * @since 2.3.0\n     * @see https://eslint.org/docs/latest/rules/no-restricted-globals\n     */\n    \"no-restricted-globals\": Linter.RuleEntry<\n        [\n            ...Array<\n                | string\n                | {\n                    name: string;\n                    message?: string | undefined;\n                }\n            >,\n        ]\n    >;\n\n    /**\n     * Rule to disallow variable declarations from shadowing variables declared in the outer scope.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-shadow\n     */\n    \"no-shadow\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                builtinGlobals: boolean;\n                /**\n                 * @default 'functions'\n                 */\n                hoist: \"functions\" | \"all\" | \"never\";\n                allow: string[];\n                /**\n                 * @since 8.10.0\n                 * @default false\n                 */\n                ignoreOnInitialization: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow identifiers from shadowing restricted names.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.1.4\n     * @see https://eslint.org/docs/latest/rules/no-shadow-restricted-names\n     */\n    \"no-shadow-restricted-names\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of undeclared variables unless mentioned in \\/*global *\\/ comments.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-undef\n     */\n    \"no-undef\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                typeof: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow initializing variables to `undefined`.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/no-undef-init\n     */\n    \"no-undef-init\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `undefined` as an identifier.\n     *\n     * @since 0.7.1\n     * @see https://eslint.org/docs/latest/rules/no-undefined\n     */\n    \"no-undefined\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unused variables.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-unused-vars\n     */\n    \"no-unused-vars\": Linter.RuleEntry<\n        [\n            | \"all\"\n            | \"local\"\n            | Partial<{\n                /**\n                 * @default 'all'\n                 */\n                vars: \"all\" | \"local\";\n                varsIgnorePattern: string;\n                /**\n                 * @default 'after-used'\n                 */\n                args: \"after-used\" | \"all\" | \"none\";\n                /**\n                 * @default false\n                 */\n                ignoreRestSiblings: boolean;\n                argsIgnorePattern: string;\n                /**\n                 * @default 'all'\n                 */\n                caughtErrors: \"none\" | \"all\";\n                caughtErrorsIgnorePattern: string;\n                destructuredArrayIgnorePattern: string;\n                /**\n                 * @default false\n                 */\n                ignoreClassWithStaticInitBlock: boolean;\n                /**\n                 * @default false\n                 */\n                reportUsedIgnorePattern: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow the use of variables before they are defined.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-use-before-define\n     */\n    \"no-use-before-define\": Linter.RuleEntry<\n        [\n            | Partial<{\n                /**\n                 * @default true\n                 */\n                functions: boolean;\n                /**\n                 * @default true\n                 */\n                classes: boolean;\n                /**\n                 * @default true\n                 */\n                variables: boolean;\n                /**\n                 * @default false\n                 */\n                allowNamedExports: boolean;\n            }>\n            | \"nofunc\",\n        ]\n    >;\n}\n"
        }
    ]
}