{
    "sourceFile": "node_modules/eslint/lib/types/rules/possible-errors.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the rule types for ESLint. It was initially extracted\n * from the `@types/eslint` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport { Linter } from \"../index\";\n\nexport interface PossibleErrors extends Linter.RulesRecord {\n    /**\n     * Rule to enforce `for` loop update clause moving the counter in the right direction.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 4.0.0-beta.0\n     * @see https://eslint.org/docs/latest/rules/for-direction\n     */\n    \"for-direction\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to enforce `return` statements in getters.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 4.2.0\n     * @see https://eslint.org/docs/latest/rules/getter-return\n     */\n    \"getter-return\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowImplicit: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow using an async function as a Promise executor.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 5.3.0\n     * @see https://eslint.org/docs/latest/rules/no-async-promise-executor\n     */\n    \"no-async-promise-executor\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow `await` inside of loops.\n     *\n     * @since 3.12.0\n     * @see https://eslint.org/docs/latest/rules/no-await-in-loop\n     */\n    \"no-await-in-loop\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow comparing against `-0`.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 3.17.0\n     * @see https://eslint.org/docs/latest/rules/no-compare-neg-zero\n     */\n    \"no-compare-neg-zero\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow assignment operators in conditional expressions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-cond-assign\n     */\n    \"no-cond-assign\": Linter.RuleEntry<[\"except-parens\" | \"always\"]>;\n\n    /**\n     * Rule to disallow the use of `console`.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/no-console\n     */\n    \"no-console\": Linter.RuleEntry<\n        [\n            Partial<{\n                allow: Array<keyof Console>;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow expressions where the operation doesn't affect the value.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 8.14.0\n     * @see https://eslint.org/docs/latest/rules/no-constant-binary-expression\n     */\n    \"no-constant-binary-expression\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow constant expressions in conditions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.4.1\n     * @see https://eslint.org/docs/latest/rules/no-constant-condition\n     */\n    \"no-constant-condition\": Linter.RuleEntry<\n        [\n            {\n                /**\n                 * @default true\n                 */\n                checkLoops: boolean;\n            },\n        ]\n    >;\n\n    /**\n     * Rule to disallow returning value from constructor.\n     *\n     * @since 6.7.0\n     * @see https://eslint.org/docs/latest/rules/no-constructor-return\n     */\n    \"no-constructor-return\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow control characters in regular expressions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.1.0\n     * @see https://eslint.org/docs/latest/rules/no-control-regex\n     */\n    \"no-control-regex\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow the use of `debugger`.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/no-debugger\n     */\n    \"no-debugger\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow duplicate arguments in `function` definitions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.16.0\n     * @see https://eslint.org/docs/latest/rules/no-dupe-args\n     */\n    \"no-dupe-args\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow duplicate conditions in if-else-if chains.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 6.7.0\n     * @see https://eslint.org/docs/latest/rules/no-dupe-else-if\n     */\n    \"no-dupe-else-if\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow duplicate keys in object literals.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-dupe-keys\n     */\n    \"no-dupe-keys\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow duplicate case labels.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.17.0\n     * @see https://eslint.org/docs/latest/rules/no-duplicate-case\n     */\n    \"no-duplicate-case\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow empty block statements.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.2\n     * @see https://eslint.org/docs/latest/rules/no-empty\n     */\n    \"no-empty\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                allowEmptyCatch: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow empty character classes in regular expressions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.22.0\n     * @see https://eslint.org/docs/latest/rules/no-empty-character-class\n     */\n    \"no-empty-character-class\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow reassigning exceptions in `catch` clauses.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-ex-assign\n     */\n    \"no-ex-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unnecessary boolean casts.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/no-extra-boolean-cast\n     */\n    \"no-extra-boolean-cast\": Linter.RuleEntry<\n        [\n            | Partial<{\n                  /**\n                   * @since 9.3.0\n                   * @default false\n                   */\n                  enforceForInnerExpressions: boolean;\n                  /**\n                   * @deprecated\n                   */\n                  enforceForLogicalOperands: never;\n              }>\n            | Partial<{\n                  /**\n                   * @deprecated\n                   * @since 7.0.0-alpha.2\n                   * @default false\n                   */\n                  enforceForLogicalOperands: boolean;\n                  enforceForInnerExpressions: never;\n              }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow unnecessary parentheses.\n     *\n     * @since 0.1.4\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-extra-parens) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-extra-parens\n     */\n    \"no-extra-parens\":\n        | Linter.RuleEntry<\n            [\n                \"all\",\n                Partial<{\n                    /**\n                     * @default true,\n                     */\n                    conditionalAssign: boolean;\n                    /**\n                     * @default true\n                     */\n                    returnAssign: boolean;\n                    /**\n                     * @default true\n                     */\n                    nestedBinaryExpressions: boolean;\n                    /**\n                     * @default 'none'\n                     */\n                    ignoreJSX: \"none\" | \"all\" | \"multi-line\" | \"single-line\";\n                    /**\n                     * @default true\n                     */\n                    enforceForArrowConditionals: boolean;\n                }>,\n            ]\n        >\n        | Linter.RuleEntry<[\"functions\"]>;\n\n    /**\n     * Rule to disallow unnecessary semicolons.\n     *\n     * @since 0.0.9\n     * @deprecated since 8.53.0, please use the [corresponding rule](https://eslint.style/rules/js/no-extra-semi) in `@stylistic/eslint-plugin-js`.\n     * @see https://eslint.org/docs/latest/rules/no-extra-semi\n     */\n    \"no-extra-semi\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow reassigning `function` declarations.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-func-assign\n     */\n    \"no-func-assign\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow variable or `function` declarations in nested blocks.\n     *\n     * @since 0.6.0\n     * @see https://eslint.org/docs/latest/rules/no-inner-declarations\n     */\n    \"no-inner-declarations\": Linter.RuleEntry<[\"functions\" | \"both\"]>;\n\n    /**\n     * Rule to disallow invalid regular expression strings in `RegExp` constructors.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.1.4\n     * @see https://eslint.org/docs/latest/rules/no-invalid-regexp\n     */\n    \"no-invalid-regexp\": Linter.RuleEntry<\n        [\n            Partial<{\n                allowConstructorFlags: string[];\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow irregular whitespace.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.9.0\n     * @see https://eslint.org/docs/latest/rules/no-irregular-whitespace\n     */\n    \"no-irregular-whitespace\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                skipStrings: boolean;\n                /**\n                 * @default false\n                 */\n                skipComments: boolean;\n                /**\n                 * @default false\n                 */\n                skipRegExps: boolean;\n                /**\n                 * @default false\n                 */\n                skipTemplates: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow literal numbers that lose precision.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 7.1.0\n     * @see https://eslint.org/docs/latest/rules/no-loss-of-precision\n     */\n    \"no-loss-of-precision\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow characters which are made with multiple code points in character class syntax.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 5.3.0\n     * @see https://eslint.org/docs/latest/rules/no-misleading-character-class\n     */\n    \"no-misleading-character-class\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @since 9.3.0\n                 * @default false\n                 */\n                allowEscape: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow calling global object properties as functions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.9\n     * @see https://eslint.org/docs/latest/rules/no-obj-calls\n     */\n    \"no-obj-calls\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow returning values from Promise executor functions.\n     *\n     * @since 7.3.0\n     * @see https://eslint.org/docs/latest/rules/no-promise-executor-return\n     */\n    \"no-promise-executor-return\": Linter.RuleEntry<[\n        {\n            /**\n             * @default false\n             */\n            allowVoid?: boolean;\n        },\n    ]>;\n\n    /**\n     * Rule to disallow calling some `Object.prototype` methods directly on objects.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 2.11.0\n     * @see https://eslint.org/docs/latest/rules/no-prototype-builtins\n     */\n    \"no-prototype-builtins\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow multiple spaces in regular expressions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/no-regex-spaces\n     */\n    \"no-regex-spaces\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow returning values from setters.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 6.7.0\n     * @see https://eslint.org/docs/latest/rules/no-setter-return\n     */\n    \"no-setter-return\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow sparse arrays.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.4.0\n     * @see https://eslint.org/docs/latest/rules/no-sparse-arrays\n     */\n    \"no-sparse-arrays\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow template literal placeholder syntax in regular strings.\n     *\n     * @since 3.3.0\n     * @see https://eslint.org/docs/latest/rules/no-template-curly-in-string\n     */\n    \"no-template-curly-in-string\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow confusing multiline expressions.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.24.0\n     * @see https://eslint.org/docs/latest/rules/no-unexpected-multiline\n     */\n    \"no-unexpected-multiline\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow unreachable code after `return`, `throw`, `continue`, and `break` statements.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/no-unreachable\n     */\n    \"no-unreachable\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow loops with a body that allows only one iteration.\n     *\n     * @since 7.3.0\n     * @see https://eslint.org/docs/latest/rules/no-unreachable-loop\n     */\n    \"no-unreachable-loop\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default []\n                 */\n                ignore: \"WhileStatement\" | \"DoWhileStatement\" | \"ForStatement\" | \"ForInStatement\" | \"ForOfStatement\";\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow control flow statements in `finally` blocks.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 2.9.0\n     * @see https://eslint.org/docs/latest/rules/no-unsafe-finally\n     */\n    \"no-unsafe-finally\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow negating the left operand of relational operators.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 3.3.0\n     * @see https://eslint.org/docs/latest/rules/no-unsafe-negation\n     */\n    \"no-unsafe-negation\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @since 6.6.0\n                 * @default false\n                 */\n                enforceForOrderingRelations: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow use of optional chaining in contexts where the `undefined` value is not allowed.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 7.15.0\n     * @see https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining\n     */\n    \"no-unsafe-optional-chaining\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                disallowArithmeticOperators: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to disallow unused private class members.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 8.1.0\n     * @see https://eslint.org/docs/latest/rules/no-unused-private-class-members\n     */\n    \"no-unused-private-class-members\": Linter.RuleEntry<[]>;\n\n    /**\n     * Rule to disallow assignments that can lead to race conditions due to usage of `await` or `yield`.\n     *\n     * @since 5.3.0\n     * @see https://eslint.org/docs/latest/rules/require-atomic-updates\n     */\n    \"require-atomic-updates\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @since 8.3.0\n                 * @default false\n                 */\n                allowProperties: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to require calls to `isNaN()` when checking for `NaN`.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.0.6\n     * @see https://eslint.org/docs/latest/rules/use-isnan\n     */\n    \"use-isnan\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default true\n                 */\n                enforceForSwitchCase: boolean;\n                /**\n                 * @default true\n                 */\n                enforceForIndexOf: boolean;\n            }>,\n        ]\n    >;\n\n    /**\n     * Rule to enforce comparing `typeof` expressions against valid strings.\n     *\n     * @remarks\n     * Recommended by ESLint, the rule was enabled in `eslint:recommended`.\n     *\n     * @since 0.5.0\n     * @see https://eslint.org/docs/latest/rules/valid-typeof\n     */\n    \"valid-typeof\": Linter.RuleEntry<\n        [\n            Partial<{\n                /**\n                 * @default false\n                 */\n                requireStringLiterals: boolean;\n            }>,\n        ]\n    >;\n}\n"
        }
    ]
}