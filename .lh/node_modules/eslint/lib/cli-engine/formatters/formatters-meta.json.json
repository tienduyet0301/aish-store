{
    "sourceFile": "node_modules/eslint/lib/cli-engine/formatters/formatters-meta.json",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892208280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "[\n    {\n        \"name\": \"html\",\n        \"description\": \"Outputs results to HTML. The `html` formatter is useful for visual presentation in the browser.\"\n    },\n    {\n        \"name\": \"json-with-metadata\",\n        \"description\": \"Outputs JSON-serialized results. The `json-with-metadata` provides the same linting results as the [`json`](#json) formatter with additional metadata about the rules applied. The linting results are included in the `results` property and the rules metadata is included in the `metadata` property.\\n\\nAlternatively, you can use the [ESLint Node.js API](../../integrate/nodejs-api) to programmatically use ESLint.\"\n    },\n    {\n        \"name\": \"json\",\n        \"description\": \"Outputs JSON-serialized results. The `json` formatter is useful when you want to programmatically work with the CLI's linting results.\\n\\nAlternatively, you can use the [ESLint Node.js API](../../integrate/nodejs-api) to programmatically use ESLint.\"\n    },\n    {\n        \"name\": \"stylish\",\n        \"description\": \"Human-readable output format. This is the default formatter.\"\n    }\n]\n"
        }
    ]
}