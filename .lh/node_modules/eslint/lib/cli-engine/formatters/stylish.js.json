{
    "sourceFile": "node_modules/eslint/lib/cli-engine/formatters/stylish.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892208728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Stylish reporter\n * @author Sindre Sorhus\n */\n\"use strict\";\n\nconst chalk = require(\"chalk\"),\n    util = require(\"node:util\"),\n    table = require(\"../../shared/text-table\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return (count === 1 ? word : `${word}s`);\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = function(results) {\n\n    let output = \"\\n\",\n        errorCount = 0,\n        warningCount = 0,\n        fixableErrorCount = 0,\n        fixableWarningCount = 0,\n        summaryColor = \"yellow\";\n\n    results.forEach(result => {\n        const messages = result.messages;\n\n        if (messages.length === 0) {\n            return;\n        }\n\n        errorCount += result.errorCount;\n        warningCount += result.warningCount;\n        fixableErrorCount += result.fixableErrorCount;\n        fixableWarningCount += result.fixableWarningCount;\n\n        output += `${chalk.underline(result.filePath)}\\n`;\n\n        output += `${table(\n            messages.map(message => {\n                let messageType;\n\n                if (message.fatal || message.severity === 2) {\n                    messageType = chalk.red(\"error\");\n                    summaryColor = \"red\";\n                } else {\n                    messageType = chalk.yellow(\"warning\");\n                }\n\n                return [\n                    \"\",\n                    String(message.line || 0),\n                    String(message.column || 0),\n                    messageType,\n                    message.message.replace(/([^ ])\\.$/u, \"$1\"),\n                    chalk.dim(message.ruleId || \"\")\n                ];\n            }),\n            {\n                align: [\"\", \"r\", \"l\"],\n                stringLength(str) {\n                    return util.stripVTControlCharacters(str).length;\n                }\n            }\n        ).split(\"\\n\").map(el => el.replace(/(\\d+)\\s+(\\d+)/u, (m, p1, p2) => chalk.dim(`${p1}:${p2}`))).join(\"\\n\")}\\n\\n`;\n    });\n\n    const total = errorCount + warningCount;\n\n    if (total > 0) {\n        output += chalk[summaryColor].bold([\n            \"\\u2716 \", total, pluralize(\" problem\", total),\n            \" (\", errorCount, pluralize(\" error\", errorCount), \", \",\n            warningCount, pluralize(\" warning\", warningCount), \")\\n\"\n        ].join(\"\"));\n\n        if (fixableErrorCount > 0 || fixableWarningCount > 0) {\n            output += chalk[summaryColor].bold([\n                \"  \", fixableErrorCount, pluralize(\" error\", fixableErrorCount), \" and \",\n                fixableWarningCount, pluralize(\" warning\", fixableWarningCount),\n                \" potentially fixable with the `--fix` option.\\n\"\n            ].join(\"\"));\n        }\n    }\n\n    // Resets output color, for prevent change on top level\n    return total > 0 ? chalk.reset(output) : \"\";\n};\n"
        }
    ]
}