{
    "sourceFile": "node_modules/eslint/lib/languages/js/validate-language-options.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892211539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview The schema to validate language options\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Data\n//-----------------------------------------------------------------------------\n\nconst globalVariablesValues = new Set([\n    true, \"true\", \"writable\", \"writeable\",\n    false, \"false\", \"readonly\", \"readable\", null,\n    \"off\"\n]);\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Check if a value is a non-null object.\n * @param {any} value The value to check.\n * @returns {boolean} `true` if the value is a non-null object.\n */\nfunction isNonNullObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\n\n/**\n * Check if a value is a non-null non-array object.\n * @param {any} value The value to check.\n * @returns {boolean} `true` if the value is a non-null non-array object.\n */\nfunction isNonArrayObject(value) {\n    return isNonNullObject(value) && !Array.isArray(value);\n}\n\n/**\n * Check if a value is undefined.\n * @param {any} value The value to check.\n * @returns {boolean} `true` if the value is undefined.\n */\nfunction isUndefined(value) {\n    return typeof value === \"undefined\";\n}\n\n//-----------------------------------------------------------------------------\n// Schemas\n//-----------------------------------------------------------------------------\n\n/**\n * Validates the ecmaVersion property.\n * @param {string|number} ecmaVersion The value to check.\n * @returns {void}\n * @throws {TypeError} If the value is invalid.\n */\nfunction validateEcmaVersion(ecmaVersion) {\n\n    if (isUndefined(ecmaVersion)) {\n        throw new TypeError(\"Key \\\"ecmaVersion\\\": Expected an \\\"ecmaVersion\\\" property.\");\n    }\n\n    if (typeof ecmaVersion !== \"number\" && ecmaVersion !== \"latest\") {\n        throw new TypeError(\"Key \\\"ecmaVersion\\\": Expected a number or \\\"latest\\\".\");\n    }\n\n}\n\n/**\n * Validates the sourceType property.\n * @param {string} sourceType The value to check.\n * @returns {void}\n * @throws {TypeError} If the value is invalid.\n */\nfunction validateSourceType(sourceType) {\n\n    if (typeof sourceType !== \"string\" || !/^(?:script|module|commonjs)$/u.test(sourceType)) {\n        throw new TypeError(\"Key \\\"sourceType\\\": Expected \\\"script\\\", \\\"module\\\", or \\\"commonjs\\\".\");\n    }\n\n}\n\n/**\n * Validates the globals property.\n * @param {Object} globals The value to check.\n * @returns {void}\n * @throws {TypeError} If the value is invalid.\n */\nfunction validateGlobals(globals) {\n\n    if (!isNonArrayObject(globals)) {\n        throw new TypeError(\"Key \\\"globals\\\": Expected an object.\");\n    }\n\n    for (const key of Object.keys(globals)) {\n\n        // avoid hairy edge case\n        if (key === \"__proto__\") {\n            continue;\n        }\n\n        if (key !== key.trim()) {\n            throw new TypeError(`Key \"globals\": Global \"${key}\" has leading or trailing whitespace.`);\n        }\n\n        if (!globalVariablesValues.has(globals[key])) {\n            throw new TypeError(`Key \"globals\": Key \"${key}\": Expected \"readonly\", \"writable\", or \"off\".`);\n        }\n    }\n}\n\n/**\n * Validates the parser property.\n * @param {Object} parser The value to check.\n * @returns {void}\n * @throws {TypeError} If the value is invalid.\n */\nfunction validateParser(parser) {\n\n    if (!parser || typeof parser !== \"object\" ||\n        (typeof parser.parse !== \"function\" && typeof parser.parseForESLint !== \"function\")\n    ) {\n        throw new TypeError(\"Key \\\"parser\\\": Expected object with parse() or parseForESLint() method.\");\n    }\n\n}\n\n/**\n * Validates the language options.\n * @param {Object} languageOptions The language options to validate.\n * @returns {void}\n * @throws {TypeError} If the language options are invalid.\n */\nfunction validateLanguageOptions(languageOptions) {\n\n    if (!isNonArrayObject(languageOptions)) {\n        throw new TypeError(\"Expected an object.\");\n    }\n\n    const {\n        ecmaVersion,\n        sourceType,\n        globals,\n        parser,\n        parserOptions,\n        ...otherOptions\n    } = languageOptions;\n\n    if (\"ecmaVersion\" in languageOptions) {\n        validateEcmaVersion(ecmaVersion);\n    }\n\n    if (\"sourceType\" in languageOptions) {\n        validateSourceType(sourceType);\n    }\n\n    if (\"globals\" in languageOptions) {\n        validateGlobals(globals);\n    }\n\n    if (\"parser\" in languageOptions) {\n        validateParser(parser);\n    }\n\n    if (\"parserOptions\" in languageOptions) {\n        if (!isNonArrayObject(parserOptions)) {\n            throw new TypeError(\"Key \\\"parserOptions\\\": Expected an object.\");\n        }\n    }\n\n    const otherOptionKeys = Object.keys(otherOptions);\n\n    if (otherOptionKeys.length > 0) {\n        throw new TypeError(`Unexpected key \"${otherOptionKeys[0]}\" found.`);\n    }\n\n}\n\nmodule.exports = { validateLanguageOptions };\n"
        }
    ]
}