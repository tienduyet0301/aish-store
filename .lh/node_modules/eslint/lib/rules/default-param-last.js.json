{
    "sourceFile": "node_modules/eslint/lib/rules/default-param-last.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892215219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview enforce default parameters to be last\n * @author Chiawen Chen\n */\n\n\"use strict\";\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Enforce default parameters to be last\",\n            recommended: false,\n            frozen: true,\n            url: \"https://eslint.org/docs/latest/rules/default-param-last\"\n        },\n\n        schema: [],\n\n        messages: {\n            shouldBeLast: \"Default parameters should be last.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Handler for function contexts.\n         * @param {ASTNode} node function node\n         * @returns {void}\n         */\n        function handleFunction(node) {\n            let hasSeenPlainParam = false;\n\n            for (let i = node.params.length - 1; i >= 0; i -= 1) {\n                const param = node.params[i];\n\n                if (\n                    param.type !== \"AssignmentPattern\" &&\n                    param.type !== \"RestElement\"\n                ) {\n                    hasSeenPlainParam = true;\n                    continue;\n                }\n\n                if (hasSeenPlainParam && param.type === \"AssignmentPattern\") {\n                    context.report({\n                        node: param,\n                        messageId: \"shouldBeLast\"\n                    });\n                }\n            }\n        }\n\n        return {\n            FunctionDeclaration: handleFunction,\n            FunctionExpression: handleFunction,\n            ArrowFunctionExpression: handleFunction\n        };\n    }\n};\n"
        }
    ]
}