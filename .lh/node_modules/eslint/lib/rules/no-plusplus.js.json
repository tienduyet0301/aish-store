{
    "sourceFile": "node_modules/eslint/lib/rules/no-plusplus.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892229457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag use of unary increment and decrement operators.\n * @author Ian Christian Myers\n * @author Brody McKee (github.com/mrmckeb)\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given node is the update node of a `ForStatement`.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `ForStatement` update.\n */\nfunction isForStatementUpdate(node) {\n    const parent = node.parent;\n\n    return parent.type === \"ForStatement\" && parent.update === node;\n}\n\n/**\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\n * In particular, it returns `true` if the given node is either:\n *   - The update node of a `ForStatement`: for (;; i++) {}\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a for loop afterthought.\n */\nfunction isForLoopAfterthought(node) {\n    const parent = node.parent;\n\n    if (parent.type === \"SequenceExpression\") {\n        return isForLoopAfterthought(parent);\n    }\n\n    return isForStatementUpdate(node);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [{\n            allowForLoopAfterthoughts: false\n        }],\n\n        docs: {\n            description: \"Disallow the unary operators `++` and `--`\",\n            recommended: false,\n            frozen: true,\n            url: \"https://eslint.org/docs/latest/rules/no-plusplus\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowForLoopAfterthoughts: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\n        }\n    },\n\n    create(context) {\n        const [{ allowForLoopAfterthoughts }] = context.options;\n\n        return {\n\n            UpdateExpression(node) {\n                if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\n                    return;\n                }\n\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnaryOp\",\n                    data: {\n                        operator: node.operator\n                    }\n                });\n            }\n\n        };\n\n    }\n};\n"
        }
    ]
}