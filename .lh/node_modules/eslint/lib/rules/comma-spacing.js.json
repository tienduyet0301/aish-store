{
    "sourceFile": "node_modules/eslint/lib/rules/comma-spacing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892214706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Comma spacing - validates spacing before and after comma\n * @author Vignesh Anand aka vegetableman.\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"comma-spacing\",\n                        url: \"https://eslint.style/rules/js/comma-spacing\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent spacing before and after commas\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/comma-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    after: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            missing: \"A space is required {{loc}} ','.\",\n            unexpected: \"There should be no space {{loc}} ','.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n        const tokensAndComments = sourceCode.tokensAndComments;\n\n        const options = {\n            before: context.options[0] ? context.options[0].before : false,\n            after: context.options[0] ? context.options[0].after : true\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // list of comma tokens to ignore for the check of leading whitespace\n        const commaTokensToIgnore = [];\n\n        /**\n         * Reports a spacing error with an appropriate message.\n         * @param {ASTNode} node The binary expression node to report.\n         * @param {string} loc Is the error \"before\" or \"after\" the comma?\n         * @param {ASTNode} otherNode The node at the left or right of `node`\n         * @returns {void}\n         * @private\n         */\n        function report(node, loc, otherNode) {\n            context.report({\n                node,\n                fix(fixer) {\n                    if (options[loc]) {\n                        if (loc === \"before\") {\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.insertTextAfter(node, \" \");\n\n                    }\n                    let start, end;\n                    const newText = \"\";\n\n                    if (loc === \"before\") {\n                        start = otherNode.range[1];\n                        end = node.range[0];\n                    } else {\n                        start = node.range[1];\n                        end = otherNode.range[0];\n                    }\n\n                    return fixer.replaceTextRange([start, end], newText);\n\n                },\n                messageId: options[loc] ? \"missing\" : \"unexpected\",\n                data: {\n                    loc\n                }\n            });\n        }\n\n        /**\n         * Adds null elements of the given ArrayExpression or ArrayPattern node to the ignore list.\n         * @param {ASTNode} node An ArrayExpression or ArrayPattern node.\n         * @returns {void}\n         */\n        function addNullElementsToIgnoreList(node) {\n            let previousToken = sourceCode.getFirstToken(node);\n\n            node.elements.forEach(element => {\n                let token;\n\n                if (element === null) {\n                    token = sourceCode.getTokenAfter(previousToken);\n\n                    if (astUtils.isCommaToken(token)) {\n                        commaTokensToIgnore.push(token);\n                    }\n                } else {\n                    token = sourceCode.getTokenAfter(element);\n                }\n\n                previousToken = token;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            \"Program:exit\"() {\n                tokensAndComments.forEach((token, i) => {\n\n                    if (!astUtils.isCommaToken(token)) {\n                        return;\n                    }\n\n                    const previousToken = tokensAndComments[i - 1];\n                    const nextToken = tokensAndComments[i + 1];\n\n                    if (\n                        previousToken &&\n                        !astUtils.isCommaToken(previousToken) && // ignore spacing between two commas\n\n                        /*\n                         * `commaTokensToIgnore` are ending commas of `null` elements (array holes/elisions).\n                         * In addition to spacing between two commas, this can also ignore:\n                         *\n                         *   - Spacing after `[` (controlled by array-bracket-spacing)\n                         *       Example: [ , ]\n                         *                 ^\n                         *   - Spacing after a comment (for backwards compatibility, this was possibly unintentional)\n                         *       Example: [a, /* * / ,]\n                         *                          ^\n                         */\n                        !commaTokensToIgnore.includes(token) &&\n\n                        astUtils.isTokenOnSameLine(previousToken, token) &&\n                        options.before !== sourceCode.isSpaceBetweenTokens(previousToken, token)\n                    ) {\n                        report(token, \"before\", previousToken);\n                    }\n\n                    if (\n                        nextToken &&\n                        !astUtils.isCommaToken(nextToken) && // ignore spacing between two commas\n                        !astUtils.isClosingParenToken(nextToken) && // controlled by space-in-parens\n                        !astUtils.isClosingBracketToken(nextToken) && // controlled by array-bracket-spacing\n                        !astUtils.isClosingBraceToken(nextToken) && // controlled by object-curly-spacing\n                        !(!options.after && nextToken.type === \"Line\") && // special case, allow space before line comment\n                        astUtils.isTokenOnSameLine(token, nextToken) &&\n                        options.after !== sourceCode.isSpaceBetweenTokens(token, nextToken)\n                    ) {\n                        report(token, \"after\", nextToken);\n                    }\n                });\n            },\n            ArrayExpression: addNullElementsToIgnoreList,\n            ArrayPattern: addNullElementsToIgnoreList\n\n        };\n\n    }\n};\n"
        }
    ]
}