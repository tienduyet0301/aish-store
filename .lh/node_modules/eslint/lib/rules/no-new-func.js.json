{
    "sourceFile": "node_modules/eslint/lib/rules/no-new-func.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892228582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag when using new Function\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst callMethods = new Set([\"apply\", \"bind\", \"call\"]);\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `new` operators with the `Function` object\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-new-func\"\n        },\n\n        schema: [],\n\n        messages: {\n            noFunctionConstructor: \"The Function constructor is eval.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"Program:exit\"(node) {\n                const globalScope = sourceCode.getScope(node);\n                const variable = globalScope.set.get(\"Function\");\n\n                if (variable && variable.defs.length === 0) {\n                    variable.references.forEach(ref => {\n                        const idNode = ref.identifier;\n                        const { parent } = idNode;\n                        let evalNode;\n\n                        if (parent) {\n                            if (idNode === parent.callee && (\n                                parent.type === \"NewExpression\" ||\n                                parent.type === \"CallExpression\"\n                            )) {\n                                evalNode = parent;\n                            } else if (\n                                parent.type === \"MemberExpression\" &&\n                                idNode === parent.object &&\n                                callMethods.has(astUtils.getStaticPropertyName(parent))\n                            ) {\n                                const maybeCallee = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n\n                                if (maybeCallee.parent.type === \"CallExpression\" && maybeCallee.parent.callee === maybeCallee) {\n                                    evalNode = maybeCallee.parent;\n                                }\n                            }\n                        }\n\n                        if (evalNode) {\n                            context.report({\n                                node: evalNode,\n                                messageId: \"noFunctionConstructor\"\n                            });\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}