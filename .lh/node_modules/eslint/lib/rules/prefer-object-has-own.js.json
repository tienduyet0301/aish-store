{
    "sourceFile": "node_modules/eslint/lib/rules/prefer-object-has-own.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892236816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Prefers Object.hasOwn() instead of Object.prototype.hasOwnProperty.call()\n * @author Nitin Kumar\n * @author Gautam Arora\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is considered to be an access to a property of `Object.prototype`.\n * @param {ASTNode} node `MemberExpression` node to evaluate.\n * @returns {boolean} `true` if `node.object` is `Object`, `Object.prototype`, or `{}` (empty 'ObjectExpression' node).\n */\nfunction hasLeftHandObject(node) {\n\n    /*\n     * ({}).hasOwnProperty.call(obj, prop) - `true`\n     * ({ foo }.hasOwnProperty.call(obj, prop)) - `false`, object literal should be empty\n     */\n    if (node.object.type === \"ObjectExpression\" && node.object.properties.length === 0) {\n        return true;\n    }\n\n    const objectNodeToCheck = node.object.type === \"MemberExpression\" && astUtils.getStaticPropertyName(node.object) === \"prototype\" ? node.object.object : node.object;\n\n    if (objectNodeToCheck.type === \"Identifier\" && objectNodeToCheck.name === \"Object\") {\n        return true;\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n        docs: {\n            description:\n                \"Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/prefer-object-has-own\"\n        },\n        schema: [],\n        messages: {\n            useHasOwn: \"Use 'Object.hasOwn()' instead of 'Object.prototype.hasOwnProperty.call()'.\"\n        },\n        fixable: \"code\"\n    },\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            CallExpression(node) {\n                if (!(node.callee.type === \"MemberExpression\" && node.callee.object.type === \"MemberExpression\")) {\n                    return;\n                }\n\n                const calleePropertyName = astUtils.getStaticPropertyName(node.callee);\n                const objectPropertyName = astUtils.getStaticPropertyName(node.callee.object);\n                const isObject = hasLeftHandObject(node.callee.object);\n\n                // check `Object` scope\n                const scope = sourceCode.getScope(node);\n                const variable = astUtils.getVariableByName(scope, \"Object\");\n\n                if (\n                    calleePropertyName === \"call\" &&\n                    objectPropertyName === \"hasOwnProperty\" &&\n                    isObject &&\n                    variable && variable.scope.type === \"global\"\n                ) {\n                    context.report({\n                        node,\n                        messageId: \"useHasOwn\",\n                        fix(fixer) {\n\n                            if (sourceCode.getCommentsInside(node.callee).length > 0) {\n                                return null;\n                            }\n\n                            const tokenJustBeforeNode = sourceCode.getTokenBefore(node.callee, { includeComments: true });\n\n                            // for https://github.com/eslint/eslint/pull/15346#issuecomment-991417335\n                            if (\n                                tokenJustBeforeNode &&\n                                tokenJustBeforeNode.range[1] === node.callee.range[0] &&\n                                !astUtils.canTokensBeAdjacent(tokenJustBeforeNode, \"Object.hasOwn\")\n                            ) {\n                                return fixer.replaceText(node.callee, \" Object.hasOwn\");\n                            }\n\n                            return fixer.replaceText(node.callee, \"Object.hasOwn\");\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}