{
    "sourceFile": "node_modules/eslint/lib/rules/no-empty.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892224895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag use of an empty block statement\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        hasSuggestions: true,\n        type: \"suggestion\",\n\n        defaultOptions: [{\n            allowEmptyCatch: false\n        }],\n\n        docs: {\n            description: \"Disallow empty block statements\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-empty\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowEmptyCatch: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Empty {{type}} statement.\",\n            suggestComment: \"Add comment inside empty {{type}} statement.\"\n        }\n    },\n\n    create(context) {\n        const [{ allowEmptyCatch }] = context.options;\n        const sourceCode = context.sourceCode;\n\n        return {\n            BlockStatement(node) {\n\n                // if the body is not empty, we can just return immediately\n                if (node.body.length !== 0) {\n                    return;\n                }\n\n                // a function is generally allowed to be empty\n                if (astUtils.isFunction(node.parent)) {\n                    return;\n                }\n\n                if (allowEmptyCatch && node.parent.type === \"CatchClause\") {\n                    return;\n                }\n\n                // any other block is only allowed to be empty, if it contains a comment\n                if (sourceCode.getCommentsInside(node).length > 0) {\n                    return;\n                }\n\n                context.report({\n                    node,\n                    messageId: \"unexpected\",\n                    data: { type: \"block\" },\n                    suggest: [\n                        {\n                            messageId: \"suggestComment\",\n                            data: { type: \"block\" },\n                            fix(fixer) {\n                                const range = [node.range[0] + 1, node.range[1] - 1];\n\n                                return fixer.replaceTextRange(range, \" /* empty */ \");\n                            }\n                        }\n                    ]\n                });\n            },\n\n            SwitchStatement(node) {\n\n                if (typeof node.cases === \"undefined\" || node.cases.length === 0) {\n                    context.report({ node, messageId: \"unexpected\", data: { type: \"switch\" } });\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}