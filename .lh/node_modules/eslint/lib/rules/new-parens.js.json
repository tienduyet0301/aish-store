{
    "sourceFile": "node_modules/eslint/lib/rules/new-parens.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892218250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag when using constructor without parentheses\n * @author Ilya Volodin\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"new-parens\",\n                        url: \"https://eslint.style/rules/js/new-parens\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce or disallow parentheses when invoking a constructor with no arguments\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/new-parens\"\n        },\n\n        fixable: \"code\",\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ],\n        messages: {\n            missing: \"Missing '()' invoking a constructor.\",\n            unnecessary: \"Unnecessary '()' invoking a constructor with no arguments.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options;\n        const always = options[0] !== \"never\"; // Default is always\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            NewExpression(node) {\n                if (node.arguments.length !== 0) {\n                    return; // if there are arguments, there have to be parens\n                }\n\n                const lastToken = sourceCode.getLastToken(node);\n                const hasLastParen = lastToken && astUtils.isClosingParenToken(lastToken);\n\n                // `hasParens` is true only if the new expression ends with its own parens, e.g., new new foo() does not end with its own parens\n                const hasParens = hasLastParen &&\n                    astUtils.isOpeningParenToken(sourceCode.getTokenBefore(lastToken)) &&\n                    node.callee.range[1] < node.range[1];\n\n                if (always) {\n                    if (!hasParens) {\n                        context.report({\n                            node,\n                            messageId: \"missing\",\n                            fix: fixer => fixer.insertTextAfter(node, \"()\")\n                        });\n                    }\n                } else {\n                    if (hasParens) {\n                        context.report({\n                            node,\n                            messageId: \"unnecessary\",\n                            fix: fixer => [\n                                fixer.remove(sourceCode.getTokenBefore(lastToken)),\n                                fixer.remove(lastToken),\n                                fixer.insertTextBefore(node, \"(\"),\n                                fixer.insertTextAfter(node, \")\")\n                            ]\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}