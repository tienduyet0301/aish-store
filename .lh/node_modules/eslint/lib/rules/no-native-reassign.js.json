{
    "sourceFile": "node_modules/eslint/lib/rules/no-native-reassign.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892228278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow assignments to native objects or read-only global variables\n * @author Ilya Volodin\n * @deprecated in ESLint v3.3.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow assignments to native objects or read-only global variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-native-reassign\"\n        },\n\n        deprecated: {\n            message: \"Renamed rule\",\n            url: \"https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules\",\n            deprecatedSince: \"3.3.0\",\n            availableUntil: null,\n            replacedBy: [\n                {\n                    rule: {\n                        name: \"no-global-assign\",\n                        url: \"https://eslint.org/docs/rules/no-global-assign\"\n                    }\n                }\n            ]\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: { type: \"string\" },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            nativeReassign: \"Read-only global '{{name}}' should not be modified.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0];\n        const exceptions = (config && config.exceptions) || [];\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Reports write references.\n         * @param {Reference} reference A reference to check.\n         * @param {int} index The index of the reference in the references.\n         * @param {Reference[]} references The array that the reference belongs to.\n         * @returns {void}\n         */\n        function checkReference(reference, index, references) {\n            const identifier = reference.identifier;\n\n            if (reference.init === false &&\n                reference.isWrite() &&\n\n                /*\n                 * Destructuring assignments can have multiple default value,\n                 * so possibly there are multiple writeable references for the same identifier.\n                 */\n                (index === 0 || references[index - 1].identifier !== identifier)\n            ) {\n                context.report({\n                    node: identifier,\n                    messageId: \"nativeReassign\",\n                    data: identifier\n                });\n            }\n        }\n\n        /**\n         * Reports write references if a given variable is read-only builtin.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.writeable === false && !exceptions.includes(variable.name)) {\n                variable.references.forEach(checkReference);\n            }\n        }\n\n        return {\n            Program(node) {\n                const globalScope = sourceCode.getScope(node);\n\n                globalScope.variables.forEach(checkVariable);\n            }\n        };\n    }\n};\n"
        }
    ]
}