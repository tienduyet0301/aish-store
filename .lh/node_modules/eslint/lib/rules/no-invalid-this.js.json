{
    "sourceFile": "node_modules/eslint/lib/rules/no-invalid-this.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892227006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview A rule to disallow `this` keywords in contexts where the value of `this` is `undefined`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines if the given code path is a code path with lexical `this` binding.\n * That is, if `this` within the code path refers to `this` of surrounding code path.\n * @param {CodePath} codePath Code path.\n * @param {ASTNode} node Node that started the code path.\n * @returns {boolean} `true` if it is a code path with lexical `this` binding.\n */\nfunction isCodePathWithLexicalThis(codePath, node) {\n    return codePath.origin === \"function\" && node.type === \"ArrowFunctionExpression\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [{ capIsConstructor: true }],\n\n        docs: {\n            description: \"Disallow use of `this` in contexts where the value of `this` is `undefined`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-invalid-this\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    capIsConstructor: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedThis: \"Unexpected 'this'.\"\n        }\n    },\n\n    create(context) {\n        const [{ capIsConstructor }] = context.options;\n        const stack = [],\n            sourceCode = context.sourceCode;\n\n        /**\n         * Gets the current checking context.\n         *\n         * The return value has a flag that whether or not `this` keyword is valid.\n         * The flag is initialized when got at the first time.\n         * @returns {{valid: boolean}}\n         *   an object which has a flag that whether or not `this` keyword is valid.\n         */\n        stack.getCurrent = function() {\n            const current = this.at(-1);\n\n            if (!current.init) {\n                current.init = true;\n                current.valid = !astUtils.isDefaultThisBinding(\n                    current.node,\n                    sourceCode,\n                    { capIsConstructor }\n                );\n            }\n            return current;\n        };\n\n        return {\n\n            onCodePathStart(codePath, node) {\n                if (isCodePathWithLexicalThis(codePath, node)) {\n                    return;\n                }\n\n                if (codePath.origin === \"program\") {\n                    const scope = sourceCode.getScope(node);\n                    const features = context.languageOptions.parserOptions.ecmaFeatures || {};\n\n                    // `this` at the top level of scripts always refers to the global object\n                    stack.push({\n                        init: true,\n                        node,\n                        valid: !(\n                            node.sourceType === \"module\" ||\n                            (features.globalReturn && scope.childScopes[0].isStrict)\n                        )\n                    });\n\n                    return;\n                }\n\n                /*\n                 * `init: false` means that `valid` isn't determined yet.\n                 * Most functions don't use `this`, and the calculation for `valid`\n                 * is relatively costly, so we'll calculate it lazily when the first\n                 * `this` within the function is traversed. A special case are non-strict\n                 * functions, because `this` refers to the global object and therefore is\n                 * always valid, so we can set `init: true` right away.\n                 */\n                stack.push({\n                    init: !sourceCode.getScope(node).isStrict,\n                    node,\n                    valid: true\n                });\n            },\n\n            onCodePathEnd(codePath, node) {\n                if (isCodePathWithLexicalThis(codePath, node)) {\n                    return;\n                }\n\n                stack.pop();\n            },\n\n            // Reports if `this` of the current context is invalid.\n            ThisExpression(node) {\n                const current = stack.getCurrent();\n\n                if (current && !current.valid) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedThis\"\n                    });\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}