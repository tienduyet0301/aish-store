{
    "sourceFile": "node_modules/eslint/lib/rules/no-empty-pattern.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892224747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow an empty pattern\n * @author Alberto RodrÃ­guez\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        defaultOptions: [{\n            allowObjectPatternsAsParameters: false\n        }],\n\n        docs: {\n            description: \"Disallow empty destructuring patterns\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-empty-pattern\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowObjectPatternsAsParameters: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpected: \"Unexpected empty {{type}} pattern.\"\n        }\n    },\n\n    create(context) {\n        const [{ allowObjectPatternsAsParameters }] = context.options;\n\n        return {\n            ObjectPattern(node) {\n\n                if (node.properties.length > 0) {\n                    return;\n                }\n\n                // Allow {} and {} = {} empty object patterns as parameters when allowObjectPatternsAsParameters is true\n                if (\n                    allowObjectPatternsAsParameters &&\n                    (\n                        astUtils.isFunction(node.parent) ||\n                        (\n                            node.parent.type === \"AssignmentPattern\" &&\n                            astUtils.isFunction(node.parent.parent) &&\n                            node.parent.right.type === \"ObjectExpression\" &&\n                            node.parent.right.properties.length === 0\n                        )\n                    )\n                ) {\n                    return;\n                }\n\n                context.report({ node, messageId: \"unexpected\", data: { type: \"object\" } });\n            },\n            ArrayPattern(node) {\n                if (node.elements.length === 0) {\n                    context.report({ node, messageId: \"unexpected\", data: { type: \"array\" } });\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}