{
    "sourceFile": "node_modules/eslint/lib/rules/func-call-spacing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892215537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"function-call-spacing\",\n                        url: \"https://eslint.style/rules/js/function-call-spacing\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Require or disallow spacing between function identifiers and their invocations\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/func-call-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                allowNewlines: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\n            unexpectedNewline: \"Unexpected newline between function name and paren.\",\n            missing: \"Missing space between function name and paren.\"\n        }\n    },\n\n    create(context) {\n\n        const never = context.options[0] !== \"always\";\n        const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n        const sourceCode = context.sourceCode;\n        const text = sourceCode.getText();\n\n        /**\n         * Check if open space is present in a function name\n         * @param {ASTNode} node node to evaluate\n         * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n         * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n         * @returns {void}\n         * @private\n         */\n        function checkSpacing(node, leftToken, rightToken) {\n            const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n            const hasWhitespace = /\\s/u.test(textBetweenTokens);\n            const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n\n            /*\n             * never allowNewlines hasWhitespace hasNewline message\n             * F     F             F             F          Missing space between function name and paren.\n             * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     F             T             T          Unexpected newline between function name and paren.\n             * F     F             T             F          (OK)\n             * F     T             T             F          (OK)\n             * F     T             T             T          (OK)\n             * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     T             F             F          Missing space between function name and paren.\n             * T     T             F             F          (Invalid `never && allowNewlines`)\n             * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     T             T             T          (Invalid `never && allowNewlines`)\n             * T     T             T             F          (Invalid `never && allowNewlines`)\n             * T     F             T             F          Unexpected space between function name and paren.\n             * T     F             T             T          Unexpected space between function name and paren.\n             * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     F             F             F          (OK)\n             *\n             * T                   T                        Unexpected space between function name and paren.\n             * F                   F                        Missing space between function name and paren.\n             * F     F                           T          Unexpected newline between function name and paren.\n             */\n\n            if (never && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: {\n                            line: rightToken.loc.start.line,\n                            column: rightToken.loc.start.column - 1\n                        }\n                    },\n                    messageId: \"unexpectedWhitespace\",\n                    fix(fixer) {\n\n                        // Don't remove comments.\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                            return null;\n                        }\n\n                        // If `?.` exists, it doesn't hide no-unexpected-multiline errors\n                        if (node.optional) {\n                            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\n                        }\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         */\n                        if (hasNewline) {\n                            return null;\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            } else if (!never && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: {\n                            line: leftToken.loc.end.line,\n                            column: leftToken.loc.end.column - 1\n                        },\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"missing\",\n                    fix(fixer) {\n                        if (node.optional) {\n                            return null; // Not sure if inserting a space to either before/after `?.` token.\n                        }\n                        return fixer.insertTextBefore(rightToken, \" \");\n                    }\n                });\n            } else if (!never && !allowNewlines && hasNewline) {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"unexpectedNewline\",\n                    fix(fixer) {\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\n                         */\n                        if (!node.optional) {\n                            return null;\n                        }\n\n                        // Don't remove comments.\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                            return null;\n                        }\n\n                        const range = [leftToken.range[1], rightToken.range[0]];\n                        const qdToken = sourceCode.getTokenAfter(leftToken);\n\n                        if (qdToken.range[0] === leftToken.range[1]) {\n                            return fixer.replaceTextRange(range, \"?. \");\n                        }\n                        if (qdToken.range[1] === rightToken.range[0]) {\n                            return fixer.replaceTextRange(range, \" ?.\");\n                        }\n                        return fixer.replaceTextRange(range, \" ?. \");\n                    }\n                });\n            }\n        }\n\n        return {\n            \"CallExpression, NewExpression\"(node) {\n                const lastToken = sourceCode.getLastToken(node);\n                const lastCalleeToken = sourceCode.getLastToken(node.callee);\n                const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n                const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken);\n\n                // Parens in NewExpression are optional\n                if (!(parenToken && parenToken.range[1] < node.range[1])) {\n                    return;\n                }\n\n                checkSpacing(node, prevToken, parenToken);\n            },\n\n            ImportExpression(node) {\n                const leftToken = sourceCode.getFirstToken(node);\n                const rightToken = sourceCode.getTokenAfter(leftToken);\n\n                checkSpacing(node, leftToken, rightToken);\n            }\n        };\n\n    }\n};\n"
        }
    ]
}