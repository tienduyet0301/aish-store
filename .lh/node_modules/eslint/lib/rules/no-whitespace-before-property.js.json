{
    "sourceFile": "node_modules/eslint/lib/rules/no-whitespace-before-property.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892233503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"no-whitespace-before-property\",\n                        url: \"https://eslint.style/rules/js/no-whitespace-before-property\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Disallow whitespace before properties\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-whitespace-before-property\"\n        },\n\n        fixable: \"whitespace\",\n        schema: [],\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports whitespace before property token\n         * @param {ASTNode} node the node to report in the event of an error\n         * @param {Token} leftToken the left token\n         * @param {Token} rightToken the right token\n         * @returns {void}\n         * @private\n         */\n        function reportError(node, leftToken, rightToken) {\n            context.report({\n                node,\n                messageId: \"unexpectedWhitespace\",\n                data: {\n                    propName: sourceCode.getText(node.property)\n                },\n                fix(fixer) {\n                    let replacementText = \"\";\n\n                    if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\n\n                        /*\n                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n                         * Don't fix this case.\n                         */\n                        return null;\n                    }\n\n                    // Don't fix if comments exist.\n                    if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                        return null;\n                    }\n\n                    if (node.optional) {\n                        replacementText = \"?.\";\n                    } else if (!node.computed) {\n                        replacementText = \".\";\n                    }\n\n                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n                }\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            MemberExpression(node) {\n                let rightToken;\n                let leftToken;\n\n                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n                    return;\n                }\n\n                if (node.computed) {\n                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n                    leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\n                } else {\n                    rightToken = sourceCode.getFirstToken(node.property);\n                    leftToken = sourceCode.getTokenBefore(rightToken, 1);\n                }\n\n                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n                    reportError(node, leftToken, rightToken);\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}