{
    "sourceFile": "node_modules/eslint/lib/rules/no-setter-return.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892231203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { findVariable } = require(\"@eslint-community/eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n    const variable = findVariable(scope, node);\n\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n    const callNode = node.parent;\n\n    return callNode.type === \"CallExpression\" &&\n        callNode.arguments[index] === node &&\n        astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) &&\n        isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\n}\n\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node, scope) {\n    if (\n        isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) ||\n        isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)\n    ) {\n        return true;\n    }\n\n    const parent = node.parent;\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node\n    ) {\n        const grandparent = parent.parent;\n\n        if (\n            grandparent.type === \"ObjectExpression\" &&\n            (\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) ||\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1)\n            )\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\nfunction isSetter(node, scope) {\n    const parent = node.parent;\n\n    if (\n        (parent.type === \"Property\" || parent.type === \"MethodDefinition\") &&\n        parent.kind === \"set\" &&\n        parent.value === node\n    ) {\n\n        // Setter in an object literal or in a class\n        return true;\n    }\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node &&\n        astUtils.getStaticPropertyName(parent) === \"set\" &&\n        parent.parent.type === \"ObjectExpression\" &&\n        isPropertyDescriptor(parent.parent, scope)\n    ) {\n\n        // Setter in a property descriptor\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n    const upper = scope.upper;\n\n    if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n    }\n\n    return upper;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow returning values from setters\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-setter-return\"\n        },\n\n        schema: [],\n\n        messages: {\n            returnsValue: \"Setter cannot return a value.\"\n        }\n    },\n\n    create(context) {\n        let funcInfo = null;\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Creates and pushes to the stack a function info object for the given function node.\n         * @param {ASTNode} node The function node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            const outerScope = getOuterScope(sourceCode.getScope(node));\n\n            funcInfo = {\n                upper: funcInfo,\n                isSetter: isSetter(node, outerScope)\n            };\n        }\n\n        /**\n         * Pops the current function info object from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            funcInfo = funcInfo.upper;\n        }\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node Node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"returnsValue\" });\n        }\n\n        return {\n\n            /*\n             * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n             * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n             *\n             * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n             * but that's out of scope for this rule.\n             */\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression(node) {\n                enterFunction(node);\n\n                if (funcInfo.isSetter && node.expression) {\n\n                    // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n                    report(node.body);\n                }\n            },\n\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            ReturnStatement(node) {\n\n                // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n                if (funcInfo && funcInfo.isSetter && node.argument) {\n                    report(node);\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}