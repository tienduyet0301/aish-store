{
    "sourceFile": "node_modules/eslint/lib/rules/no-obj-calls.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892229091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { CALL, CONSTRUCT, ReferenceTracker } = require(\"@eslint-community/eslint-utils\");\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName;\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\", \"Intl\"];\n\n/**\n * Returns the name of the node to report\n * @param {ASTNode} node A node to report\n * @returns {string} name to report\n */\nfunction getReportNodeName(node) {\n    if (node.type === \"ChainExpression\") {\n        return getReportNodeName(node.expression);\n    }\n    if (node.type === \"MemberExpression\") {\n        return getPropertyName(node);\n    }\n    return node.name;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow calling global object properties as functions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-obj-calls\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedCall: \"'{{name}}' is not a function.\",\n            unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            Program(node) {\n                const scope = sourceCode.getScope(node);\n                const tracker = new ReferenceTracker(scope);\n                const traceMap = {};\n\n                for (const g of nonCallableGlobals) {\n                    traceMap[g] = {\n                        [CALL]: true,\n                        [CONSTRUCT]: true\n                    };\n                }\n\n                for (const { node: refNode, path } of tracker.iterateGlobalReferences(traceMap)) {\n                    const name = getReportNodeName(refNode.callee);\n                    const ref = path[0];\n                    const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\n\n                    context.report({ node: refNode, messageId, data: { name, ref } });\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}