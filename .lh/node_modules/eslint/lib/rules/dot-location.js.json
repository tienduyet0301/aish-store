{
    "sourceFile": "node_modules/eslint/lib/rules/dot-location.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892215269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Validates newlines before and after dots\n * @author Greg Cochard\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"dot-location\",\n                        url: \"https://eslint.style/rules/js/dot-location\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Enforce consistent newlines before and after dots\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/dot-location\"\n        },\n\n        schema: [\n            {\n                enum: [\"object\", \"property\"]\n            }\n        ],\n\n        fixable: \"code\",\n\n        messages: {\n            expectedDotAfterObject: \"Expected dot to be on same line as object.\",\n            expectedDotBeforeProperty: \"Expected dot to be on same line as property.\"\n        }\n    },\n\n    create(context) {\n\n        const config = context.options[0];\n\n        // default to onObject if no preference is passed\n        const onObject = config === \"object\" || !config;\n\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Reports if the dot between object and property is on the correct location.\n         * @param {ASTNode} node The `MemberExpression` node.\n         * @returns {void}\n         */\n        function checkDotLocation(node) {\n            const property = node.property;\n            const dotToken = sourceCode.getTokenBefore(property);\n\n            if (onObject) {\n\n                // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.\n                const tokenBeforeDot = sourceCode.getTokenBefore(dotToken);\n\n                if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dotToken)) {\n                    context.report({\n                        node,\n                        loc: dotToken.loc,\n                        messageId: \"expectedDotAfterObject\",\n                        *fix(fixer) {\n                            if (dotToken.value.startsWith(\".\") && astUtils.isDecimalIntegerNumericToken(tokenBeforeDot)) {\n                                yield fixer.insertTextAfter(tokenBeforeDot, ` ${dotToken.value}`);\n                            } else {\n                                yield fixer.insertTextAfter(tokenBeforeDot, dotToken.value);\n                            }\n                            yield fixer.remove(dotToken);\n                        }\n                    });\n                }\n            } else if (!astUtils.isTokenOnSameLine(dotToken, property)) {\n                context.report({\n                    node,\n                    loc: dotToken.loc,\n                    messageId: \"expectedDotBeforeProperty\",\n                    *fix(fixer) {\n                        yield fixer.remove(dotToken);\n                        yield fixer.insertTextBefore(property, dotToken.value);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Checks the spacing of the dot within a member expression.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNode(node) {\n            if (!node.computed) {\n                checkDotLocation(node);\n            }\n        }\n\n        return {\n            MemberExpression: checkNode\n        };\n    }\n};\n"
        }
    ]
}