{
    "sourceFile": "node_modules/eslint/lib/rules/global-require.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892215965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule for disallowing require() outside of the top-level module context\n * @author Jamund Ferguson\n * @deprecated in ESLint v7.0.0\n */\n\n\"use strict\";\n\nconst ACCEPTABLE_PARENTS = new Set([\n    \"AssignmentExpression\",\n    \"VariableDeclarator\",\n    \"MemberExpression\",\n    \"ExpressionStatement\",\n    \"CallExpression\",\n    \"ConditionalExpression\",\n    \"Program\",\n    \"VariableDeclaration\",\n    \"ChainExpression\"\n]);\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1]);\n\n    if (references.length === 1) {\n        return references[0];\n    }\n\n    /* c8 ignore next */\n    return null;\n\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {ASTNode} node The identifier node to check.\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    const reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Node.js rules were moved out of ESLint core.\",\n            url: \"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules\",\n            deprecatedSince: \"7.0.0\",\n            availableUntil: null,\n            replacedBy: [\n                {\n                    message: \"eslint-plugin-n now maintains deprecated Node.js-related rules.\",\n                    plugin: {\n                        name: \"eslint-plugin-n\",\n                        url: \"https://github.com/eslint-community/eslint-plugin-n\"\n                    },\n                    rule: {\n                        name: \"global-require\",\n                        url: \"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/global-require.md\"\n                    }\n                }\n            ]\n        },\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require `require()` calls to be placed at top-level module scope\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/global-require\"\n        },\n\n        schema: [],\n        messages: {\n            unexpected: \"Unexpected require().\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        return {\n            CallExpression(node) {\n                const currentScope = sourceCode.getScope(node);\n\n                if (node.callee.name === \"require\" && !isShadowed(currentScope, node.callee)) {\n                    const isGoodRequire = sourceCode.getAncestors(node).every(parent => ACCEPTABLE_PARENTS.has(parent.type));\n\n                    if (!isGoodRequire) {\n                        context.report({ node, messageId: \"unexpected\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}