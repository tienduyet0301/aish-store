{
    "sourceFile": "node_modules/eslint/lib/rules/no-implicit-globals.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892226563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to check for implicit global variables, functions and classes.\n * @author Joshua Peek\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [{\n            lexicalBindings: false\n        }],\n\n        docs: {\n            description: \"Disallow declarations in the global scope\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-implicit-globals\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                lexicalBindings: {\n                    type: \"boolean\"\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            globalNonLexicalBinding: \"Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.\",\n            globalLexicalBinding: \"Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.\",\n            globalVariableLeak: \"Global variable leak, declare the variable if it is intended to be local.\",\n            assignmentToReadonlyGlobal: \"Unexpected assignment to read-only global variable.\",\n            redeclarationOfReadonlyGlobal: \"Unexpected redeclaration of read-only global variable.\"\n        }\n    },\n\n    create(context) {\n        const [{ lexicalBindings: checkLexicalBindings }] = context.options;\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Reports the node.\n         * @param {ASTNode} node Node to report.\n         * @param {string} messageId Id of the message to report.\n         * @param {string|undefined} kind Declaration kind, can be 'var', 'const', 'let', function or class.\n         * @returns {void}\n         */\n        function report(node, messageId, kind) {\n            context.report({\n                node,\n                messageId,\n                data: {\n                    kind\n                }\n            });\n        }\n\n        return {\n            Program(node) {\n                const scope = sourceCode.getScope(node);\n\n                scope.variables.forEach(variable => {\n\n                    // Only ESLint global variables have the `writable` key.\n                    const isReadonlyEslintGlobalVariable = variable.writeable === false;\n                    const isWritableEslintGlobalVariable = variable.writeable === true;\n\n                    if (isWritableEslintGlobalVariable) {\n\n                        // Everything is allowed with writable ESLint global variables.\n                        return;\n                    }\n\n                    // Variables exported by \"exported\" block comments\n                    if (variable.eslintExported) {\n                        return;\n                    }\n\n                    variable.defs.forEach(def => {\n                        const defNode = def.node;\n\n                        if (def.type === \"FunctionName\" || (def.type === \"Variable\" && def.parent.kind === \"var\")) {\n                            if (isReadonlyEslintGlobalVariable) {\n                                report(defNode, \"redeclarationOfReadonlyGlobal\");\n                            } else {\n                                report(\n                                    defNode,\n                                    \"globalNonLexicalBinding\",\n                                    def.type === \"FunctionName\" ? \"function\" : `'${def.parent.kind}'`\n                                );\n                            }\n                        }\n\n                        if (checkLexicalBindings) {\n                            if (def.type === \"ClassName\" ||\n                                    (def.type === \"Variable\" && (def.parent.kind === \"let\" || def.parent.kind === \"const\"))) {\n                                if (isReadonlyEslintGlobalVariable) {\n                                    report(defNode, \"redeclarationOfReadonlyGlobal\");\n                                } else {\n                                    report(\n                                        defNode,\n                                        \"globalLexicalBinding\",\n                                        def.type === \"ClassName\" ? \"class\" : `'${def.parent.kind}'`\n                                    );\n                                }\n                            }\n                        }\n                    });\n                });\n\n                // Undeclared assigned variables.\n                scope.implicit.variables.forEach(variable => {\n                    const scopeVariable = scope.set.get(variable.name);\n                    let messageId;\n\n                    if (scopeVariable) {\n\n                        // ESLint global variable\n                        if (scopeVariable.writeable) {\n                            return;\n                        }\n                        messageId = \"assignmentToReadonlyGlobal\";\n\n                    } else {\n\n                        // Reference to an unknown variable, possible global leak.\n                        messageId = \"globalVariableLeak\";\n                    }\n\n                    // def.node is an AssignmentExpression, ForInStatement or ForOfStatement.\n                    variable.defs.forEach(def => {\n                        report(def.node, messageId);\n                    });\n                });\n            }\n        };\n\n    }\n};\n"
        }
    ]
}