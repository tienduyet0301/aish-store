{
    "sourceFile": "node_modules/eslint/lib/rules/no-case-declarations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892218871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag use of an lexical declarations inside a case clause\n * @author Erik Arvidsson\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow lexical declarations in case clauses\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-case-declarations\"\n        },\n\n        hasSuggestions: true,\n\n        schema: [],\n\n        messages: {\n            addBrackets: \"Add {} brackets around the case block.\",\n            unexpected: \"Unexpected lexical declaration in case block.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Checks whether or not a node is a lexical declaration.\n         * @param {ASTNode} node A direct child statement of a switch case.\n         * @returns {boolean} Whether or not the node is a lexical declaration.\n         */\n        function isLexicalDeclaration(node) {\n            switch (node.type) {\n                case \"FunctionDeclaration\":\n                case \"ClassDeclaration\":\n                    return true;\n                case \"VariableDeclaration\":\n                    return node.kind !== \"var\";\n                default:\n                    return false;\n            }\n        }\n\n        return {\n            SwitchCase(node) {\n                for (let i = 0; i < node.consequent.length; i++) {\n                    const statement = node.consequent[i];\n\n                    if (isLexicalDeclaration(statement)) {\n                        context.report({\n                            node: statement,\n                            messageId: \"unexpected\",\n                            suggest: [\n                                {\n                                    messageId: \"addBrackets\",\n                                    fix: fixer => [\n                                        fixer.insertTextBefore(node.consequent[0], \"{ \"),\n                                        fixer.insertTextAfter(node.consequent.at(-1), \" }\")\n                                    ]\n                                }\n                            ]\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}