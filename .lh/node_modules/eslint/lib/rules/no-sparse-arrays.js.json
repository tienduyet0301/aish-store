{
    "sourceFile": "node_modules/eslint/lib/rules/no-sparse-arrays.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892231420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Disallow sparse arrays\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow sparse arrays\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-sparse-arrays\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedSparseArray: \"Unexpected comma in middle of array.\"\n        }\n    },\n\n    create(context) {\n\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            ArrayExpression(node) {\n                if (!node.elements.includes(null)) {\n                    return;\n                }\n\n                const { sourceCode } = context;\n                let commaToken;\n\n                for (const [index, element] of node.elements.entries()) {\n                    if (index === node.elements.length - 1 && element) {\n                        return;\n                    }\n\n                    commaToken = sourceCode.getTokenAfter(\n                        element ?? commaToken ?? sourceCode.getFirstToken(node),\n                        astUtils.isCommaToken\n                    );\n\n                    if (element) {\n                        continue;\n                    }\n\n                    context.report({\n                        node,\n                        loc: commaToken.loc,\n                        messageId: \"unexpectedSparseArray\"\n                    });\n                }\n            }\n\n        };\n\n    }\n};\n"
        }
    ]
}