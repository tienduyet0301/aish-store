{
    "sourceFile": "node_modules/eslint/lib/rules/template-curly-spacing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892240197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"template-curly-spacing\",\n                        url: \"https://eslint.style/rules/js/template-curly-spacing\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Require or disallow spacing around embedded expressions of template strings\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/template-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n        messages: {\n            expectedBefore: \"Expected space(s) before '}'.\",\n            expectedAfter: \"Expected space(s) after '${'.\",\n            unexpectedBefore: \"Unexpected space(s) before '}'.\",\n            unexpectedAfter: \"Unexpected space(s) after '${'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n        const always = context.options[0] === \"always\";\n\n        /**\n         * Checks spacing before `}` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token) {\n            if (!token.value.startsWith(\"}\")) {\n                return; // starts with a backtick, this is the first template element in the template literal\n            }\n\n            const prevToken = sourceCode.getTokenBefore(token, { includeComments: true }),\n                hasSpace = sourceCode.isSpaceBetween(prevToken, token);\n\n            if (!astUtils.isTokenOnSameLine(prevToken, token)) {\n                return;\n            }\n\n            if (always && !hasSpace) {\n                context.report({\n                    loc: {\n                        start: token.loc.start,\n                        end: {\n                            line: token.loc.start.line,\n                            column: token.loc.start.column + 1\n                        }\n                    },\n                    messageId: \"expectedBefore\",\n                    fix: fixer => fixer.insertTextBefore(token, \" \")\n                });\n            }\n\n            if (!always && hasSpace) {\n                context.report({\n                    loc: {\n                        start: prevToken.loc.end,\n                        end: token.loc.start\n                    },\n                    messageId: \"unexpectedBefore\",\n                    fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\n                });\n            }\n        }\n\n        /**\n         * Checks spacing after `${` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token) {\n            if (!token.value.endsWith(\"${\")) {\n                return; // ends with a backtick, this is the last template element in the template literal\n            }\n\n            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true }),\n                hasSpace = sourceCode.isSpaceBetween(token, nextToken);\n\n            if (!astUtils.isTokenOnSameLine(token, nextToken)) {\n                return;\n            }\n\n            if (always && !hasSpace) {\n                context.report({\n                    loc: {\n                        start: {\n                            line: token.loc.end.line,\n                            column: token.loc.end.column - 2\n                        },\n                        end: token.loc.end\n                    },\n                    messageId: \"expectedAfter\",\n                    fix: fixer => fixer.insertTextAfter(token, \" \")\n                });\n            }\n\n            if (!always && hasSpace) {\n                context.report({\n                    loc: {\n                        start: token.loc.end,\n                        end: nextToken.loc.start\n                    },\n                    messageId: \"unexpectedAfter\",\n                    fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\n                });\n            }\n        }\n\n        return {\n            TemplateElement(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                checkSpacingBefore(token);\n                checkSpacingAfter(token);\n            }\n        };\n    }\n};\n"
        }
    ]
}