{
    "sourceFile": "node_modules/eslint/lib/rules/no-duplicate-case.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892222951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow a duplicate case label.\n * @author Dieter Oberkofler\n * @author Burak Yigit Kaya\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow duplicate case labels\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-duplicate-case\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate case label.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Determines whether the two given nodes are considered to be equal.\n         * @param {ASTNode} a First node.\n         * @param {ASTNode} b Second node.\n         * @returns {boolean} `true` if the nodes are considered to be equal.\n         */\n        function equal(a, b) {\n            if (a.type !== b.type) {\n                return false;\n            }\n\n            return astUtils.equalTokens(a, b, sourceCode);\n        }\n        return {\n            SwitchStatement(node) {\n                const previousTests = [];\n\n                for (const switchCase of node.cases) {\n                    if (switchCase.test) {\n                        const test = switchCase.test;\n\n                        if (previousTests.some(previousTest => equal(previousTest, test))) {\n                            context.report({ node: switchCase, messageId: \"unexpected\" });\n                        } else {\n                            previousTests.push(test);\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}