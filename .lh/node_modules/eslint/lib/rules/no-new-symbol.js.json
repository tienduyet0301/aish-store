{
    "sourceFile": "node_modules/eslint/lib/rules/no-new-symbol.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892228871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow use of the new operator with the `Symbol` object\n * @author Alberto RodrÃ­guez\n * @deprecated in ESLint v9.0.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow `new` operators with the `Symbol` object\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-new-symbol\"\n        },\n\n        deprecated: {\n            message: \"The rule was replaced with a more general rule.\",\n            url: \"https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended\",\n            deprecatedSince: \"9.0.0\",\n            availableUntil: null,\n            replacedBy: [\n                {\n                    rule: {\n                        name: \"no-new-native-nonconstructor\",\n                        url: \"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor\"\n                    }\n                }\n            ]\n        },\n\n        schema: [],\n\n        messages: {\n            noNewSymbol: \"`Symbol` cannot be called as a constructor.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"Program:exit\"(node) {\n                const globalScope = sourceCode.getScope(node);\n                const variable = globalScope.set.get(\"Symbol\");\n\n                if (variable && variable.defs.length === 0) {\n                    variable.references.forEach(ref => {\n                        const idNode = ref.identifier;\n                        const parent = idNode.parent;\n\n                        if (parent && parent.type === \"NewExpression\" && parent.callee === idNode) {\n                            context.report({\n                                node: idNode,\n                                messageId: \"noNewSymbol\"\n                            });\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}