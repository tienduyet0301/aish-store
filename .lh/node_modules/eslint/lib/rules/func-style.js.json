{
    "sourceFile": "node_modules/eslint/lib/rules/func-style.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892215684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to enforce a particular function style\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [\"expression\", {\n            allowArrowFunctions: false,\n            overrides: {}\n        }],\n\n        docs: {\n            description: \"Enforce the consistent use of either `function` declarations or expressions assigned to variables\",\n            recommended: false,\n            frozen: true,\n            url: \"https://eslint.org/docs/latest/rules/func-style\"\n        },\n\n        schema: [\n            {\n                enum: [\"declaration\", \"expression\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    allowArrowFunctions: {\n                        type: \"boolean\"\n                    },\n                    overrides: {\n                        type: \"object\",\n                        properties: {\n                            namedExports: {\n                                enum: [\"declaration\", \"expression\", \"ignore\"]\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            expression: \"Expected a function expression.\",\n            declaration: \"Expected a function declaration.\"\n        }\n    },\n\n    create(context) {\n        const [style, { allowArrowFunctions, overrides }] = context.options;\n        const enforceDeclarations = (style === \"declaration\");\n        const { namedExports: exportFunctionStyle } = overrides;\n        const stack = [];\n\n        const nodesToCheck = {\n            FunctionDeclaration(node) {\n                stack.push(false);\n\n                if (\n                    !enforceDeclarations &&\n                    node.parent.type !== \"ExportDefaultDeclaration\" &&\n                    (typeof exportFunctionStyle === \"undefined\" || node.parent.type !== \"ExportNamedDeclaration\")\n                ) {\n                    context.report({ node, messageId: \"expression\" });\n                }\n\n                if (node.parent.type === \"ExportNamedDeclaration\" && exportFunctionStyle === \"expression\") {\n                    context.report({ node, messageId: \"expression\" });\n                }\n            },\n            \"FunctionDeclaration:exit\"() {\n                stack.pop();\n            },\n\n            FunctionExpression(node) {\n                stack.push(false);\n\n                if (\n                    enforceDeclarations &&\n                    node.parent.type === \"VariableDeclarator\" &&\n                    (typeof exportFunctionStyle === \"undefined\" || node.parent.parent.parent.type !== \"ExportNamedDeclaration\")\n                ) {\n                    context.report({ node: node.parent, messageId: \"declaration\" });\n                }\n\n                if (\n                    node.parent.type === \"VariableDeclarator\" && node.parent.parent.parent.type === \"ExportNamedDeclaration\" &&\n                    exportFunctionStyle === \"declaration\"\n                ) {\n                    context.report({ node: node.parent, messageId: \"declaration\" });\n                }\n            },\n            \"FunctionExpression:exit\"() {\n                stack.pop();\n            },\n\n            \"ThisExpression, Super\"() {\n                if (stack.length > 0) {\n                    stack[stack.length - 1] = true;\n                }\n            }\n        };\n\n        if (!allowArrowFunctions) {\n            nodesToCheck.ArrowFunctionExpression = function() {\n                stack.push(false);\n            };\n\n            nodesToCheck[\"ArrowFunctionExpression:exit\"] = function(node) {\n                const hasThisOrSuperExpr = stack.pop();\n\n                if (!hasThisOrSuperExpr && node.parent.type === \"VariableDeclarator\") {\n                    if (\n                        enforceDeclarations &&\n                        (typeof exportFunctionStyle === \"undefined\" || node.parent.parent.parent.type !== \"ExportNamedDeclaration\")\n                    ) {\n                        context.report({ node: node.parent, messageId: \"declaration\" });\n                    }\n\n                    if (node.parent.parent.parent.type === \"ExportNamedDeclaration\" && exportFunctionStyle === \"declaration\") {\n                        context.report({ node: node.parent, messageId: \"declaration\" });\n                    }\n                }\n            };\n        }\n\n        return nodesToCheck;\n\n    }\n};\n"
        }
    ]
}