{
    "sourceFile": "node_modules/eslint/lib/rules/no-empty-character-class.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892224454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag the use of empty character classes in regular expressions\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { RegExpParser, visitRegExpAST } = require(\"@eslint-community/regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst parser = new RegExpParser();\nconst QUICK_TEST_REGEX = /\\[\\]/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow empty character classes in regular expressions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-empty-character-class\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Empty class.\"\n        }\n    },\n\n    create(context) {\n        return {\n            \"Literal[regex]\"(node) {\n                const { pattern, flags } = node.regex;\n\n                if (!QUICK_TEST_REGEX.test(pattern)) {\n                    return;\n                }\n\n                let regExpAST;\n\n                try {\n                    regExpAST = parser.parsePattern(pattern, 0, pattern.length, {\n                        unicode: flags.includes(\"u\"),\n                        unicodeSets: flags.includes(\"v\")\n                    });\n                } catch {\n\n                    // Ignore regular expressions that regexpp cannot parse\n                    return;\n                }\n\n                visitRegExpAST(regExpAST, {\n                    onCharacterClassEnter(characterClass) {\n                        if (!characterClass.negate && characterClass.elements.length === 0) {\n                            context.report({ node, messageId: \"unexpected\" });\n                        }\n                    }\n                });\n            }\n        };\n\n    }\n};\n"
        }
    ]
}