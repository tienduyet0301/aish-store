{
    "sourceFile": "node_modules/eslint/lib/rules/no-new-object.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892228742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview A rule to disallow calls to the Object constructor\n * @author Matt DuVall <http://www.mattduvall.com/>\n * @deprecated in ESLint v8.50.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `Object` constructors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-new-object\"\n        },\n\n        deprecated: {\n            message: \"The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.\",\n            url: \"https://eslint.org/blog/2023/09/eslint-v8.50.0-released/\",\n            deprecatedSince: \"8.50.0\",\n            availableUntil: null,\n            replacedBy: [\n                {\n                    rule: {\n                        name: \"no-object-constructor\",\n                        url: \"https://eslint.org/docs/rules/no-object-constructor\"\n                    }\n                }\n            ]\n        },\n\n        schema: [],\n\n        messages: {\n            preferLiteral: \"The object literal notation {} is preferable.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            NewExpression(node) {\n                const variable = astUtils.getVariableByName(\n                    sourceCode.getScope(node),\n                    node.callee.name\n                );\n\n                if (variable && variable.identifiers.length > 0) {\n                    return;\n                }\n\n                if (node.callee.name === \"Object\") {\n                    context.report({\n                        node,\n                        messageId: \"preferLiteral\"\n                    });\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}