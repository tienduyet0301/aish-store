{
    "sourceFile": "node_modules/eslint/lib/rules/semi.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892239366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag missing semicolons.\n * @author Nicholas C. Zakas\n * @deprecated in ESLint v8.53.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst FixTracker = require(\"./utils/fix-tracker\");\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"semi\",\n                        url: \"https://eslint.style/rules/js/semi\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Require or disallow semicolons instead of ASI\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/semi\"\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                beforeStatementContinuationChars: {\n                                    enum: [\"always\", \"any\", \"never\"]\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                omitLastInOneLineBlock: { type: \"boolean\" },\n                                omitLastInOneLineClassBody: { type: \"boolean\" }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            missingSemi: \"Missing semicolon.\",\n            extraSemi: \"Extra semicolon.\"\n        }\n    },\n\n    create(context) {\n\n        const OPT_OUT_PATTERN = /^[-[(/+`]/u; // One of [(/+-`\n        const unsafeClassFieldNames = new Set([\"get\", \"set\", \"static\"]);\n        const unsafeClassFieldFollowers = new Set([\"*\", \"in\", \"instanceof\"]);\n        const options = context.options[1];\n        const never = context.options[0] === \"never\";\n        const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);\n        const exceptOneLineClassBody = Boolean(options && options.omitLastInOneLineClassBody);\n        const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || \"any\";\n        const sourceCode = context.sourceCode;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports a semicolon error with appropriate location and message.\n         * @param {ASTNode} node The node with an extra or missing semicolon.\n         * @param {boolean} missing True if the semicolon is missing.\n         * @returns {void}\n         */\n        function report(node, missing) {\n            const lastToken = sourceCode.getLastToken(node);\n            let messageId,\n                fix,\n                loc;\n\n            if (!missing) {\n                messageId = \"missingSemi\";\n                loc = {\n                    start: lastToken.loc.end,\n                    end: astUtils.getNextLocation(sourceCode, lastToken.loc.end)\n                };\n                fix = function(fixer) {\n                    return fixer.insertTextAfter(lastToken, \";\");\n                };\n            } else {\n                messageId = \"extraSemi\";\n                loc = lastToken.loc;\n                fix = function(fixer) {\n\n                    /*\n                     * Expand the replacement range to include the surrounding\n                     * tokens to avoid conflicting with no-extra-semi.\n                     * https://github.com/eslint/eslint/issues/7928\n                     */\n                    return new FixTracker(fixer, sourceCode)\n                        .retainSurroundingTokens(lastToken)\n                        .remove(lastToken);\n                };\n            }\n\n            context.report({\n                node,\n                loc,\n                messageId,\n                fix\n            });\n\n        }\n\n        /**\n         * Check whether a given semicolon token is redundant.\n         * @param {Token} semiToken A semicolon token to check.\n         * @returns {boolean} `true` if the next token is `;` or `}`.\n         */\n        function isRedundantSemi(semiToken) {\n            const nextToken = sourceCode.getTokenAfter(semiToken);\n\n            return (\n                !nextToken ||\n                astUtils.isClosingBraceToken(nextToken) ||\n                astUtils.isSemicolonToken(nextToken)\n            );\n        }\n\n        /**\n         * Check whether a given token is the closing brace of an arrow function.\n         * @param {Token} lastToken A token to check.\n         * @returns {boolean} `true` if the token is the closing brace of an arrow function.\n         */\n        function isEndOfArrowBlock(lastToken) {\n            if (!astUtils.isClosingBraceToken(lastToken)) {\n                return false;\n            }\n            const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);\n\n            return (\n                node.type === \"BlockStatement\" &&\n                node.parent.type === \"ArrowFunctionExpression\"\n            );\n        }\n\n        /**\n         * Checks if a given PropertyDefinition node followed by a semicolon\n         * can safely remove that semicolon. It is not to safe to remove if\n         * the class field name is \"get\", \"set\", or \"static\", or if\n         * followed by a generator method.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} `true` if the node cannot have the semicolon\n         *      removed.\n         */\n        function maybeClassFieldAsiHazard(node) {\n\n            if (node.type !== \"PropertyDefinition\") {\n                return false;\n            }\n\n            /*\n             * Computed property names and non-identifiers are always safe\n             * as they can be distinguished from keywords easily.\n             */\n            const needsNameCheck = !node.computed && node.key.type === \"Identifier\";\n\n            /*\n             * Certain names are problematic unless they also have a\n             * a way to distinguish between keywords and property\n             * names.\n             */\n            if (needsNameCheck && unsafeClassFieldNames.has(node.key.name)) {\n\n                /*\n                 * Special case: If the field name is `static`,\n                 * it is only valid if the field is marked as static,\n                 * so \"static static\" is okay but \"static\" is not.\n                 */\n                const isStaticStatic = node.static && node.key.name === \"static\";\n\n                /*\n                 * For other unsafe names, we only care if there is no\n                 * initializer. No initializer = hazard.\n                 */\n                if (!isStaticStatic && !node.value) {\n                    return true;\n                }\n            }\n\n            const followingToken = sourceCode.getTokenAfter(node);\n\n            return unsafeClassFieldFollowers.has(followingToken.value);\n        }\n\n        /**\n         * Check whether a given node is on the same line with the next token.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node is on the same line with the next token.\n         */\n        function isOnSameLineWithNextToken(node) {\n            const prevToken = sourceCode.getLastToken(node, 1);\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            return !!nextToken && astUtils.isTokenOnSameLine(prevToken, nextToken);\n        }\n\n        /**\n         * Check whether a given node can connect the next line if the next line is unreliable.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} `true` if the node can connect the next line.\n         */\n        function maybeAsiHazardAfter(node) {\n            const t = node.type;\n\n            if (t === \"DoWhileStatement\" ||\n                t === \"BreakStatement\" ||\n                t === \"ContinueStatement\" ||\n                t === \"DebuggerStatement\" ||\n                t === \"ImportDeclaration\" ||\n                t === \"ExportAllDeclaration\"\n            ) {\n                return false;\n            }\n            if (t === \"ReturnStatement\") {\n                return Boolean(node.argument);\n            }\n            if (t === \"ExportNamedDeclaration\") {\n                return Boolean(node.declaration);\n            }\n            if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Check whether a given token can connect the previous statement.\n         * @param {Token} token A token to check.\n         * @returns {boolean} `true` if the token is one of `[`, `(`, `/`, `+`, `-`, ```, `++`, and `--`.\n         */\n        function maybeAsiHazardBefore(token) {\n            return (\n                Boolean(token) &&\n                OPT_OUT_PATTERN.test(token.value) &&\n                token.value !== \"++\" &&\n                token.value !== \"--\"\n            );\n        }\n\n        /**\n         * Check if the semicolon of a given node is unnecessary, only true if:\n         *   - next token is a valid statement divider (`;` or `}`).\n         *   - next token is on a new line and the node is not connectable to the new line.\n         * @param {Node} node A statement node to check.\n         * @returns {boolean} whether the semicolon is unnecessary.\n         */\n        function canRemoveSemicolon(node) {\n            if (isRedundantSemi(sourceCode.getLastToken(node))) {\n                return true; // `;;` or `;}`\n            }\n            if (maybeClassFieldAsiHazard(node)) {\n                return false;\n            }\n            if (isOnSameLineWithNextToken(node)) {\n                return false; // One liner.\n            }\n\n            // continuation characters should not apply to class fields\n            if (\n                node.type !== \"PropertyDefinition\" &&\n                beforeStatementContinuationChars === \"never\" &&\n                !maybeAsiHazardAfter(node)\n            ) {\n                return true; // ASI works. This statement doesn't connect to the next.\n            }\n            if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {\n                return true; // ASI works. The next token doesn't connect to this statement.\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's the last item in a one-liner block.\n         * Block is any `BlockStatement` or `StaticBlock` node. Block is a one-liner if its\n         * braces (and consequently everything between them) are on the same line.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is the last item in a one-liner block.\n         */\n        function isLastInOneLinerBlock(node) {\n            const parent = node.parent;\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            if (!nextToken || nextToken.value !== \"}\") {\n                return false;\n            }\n\n            if (parent.type === \"BlockStatement\") {\n                return parent.loc.start.line === parent.loc.end.line;\n            }\n\n            if (parent.type === \"StaticBlock\") {\n                const openingBrace = sourceCode.getFirstToken(parent, { skip: 1 }); // skip the `static` token\n\n                return openingBrace.loc.start.line === parent.loc.end.line;\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's the last item in a one-liner `ClassBody` node.\n         * ClassBody is a one-liner if its braces (and consequently everything between them) are on the same line.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} whether the node is the last item in a one-liner ClassBody.\n         */\n        function isLastInOneLinerClassBody(node) {\n            const parent = node.parent;\n            const nextToken = sourceCode.getTokenAfter(node);\n\n            if (!nextToken || nextToken.value !== \"}\") {\n                return false;\n            }\n\n            if (parent.type === \"ClassBody\") {\n                return parent.loc.start.line === parent.loc.end.line;\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks a node to see if it's followed by a semicolon.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolon(node) {\n            const isSemi = astUtils.isSemicolonToken(sourceCode.getLastToken(node));\n\n            if (never) {\n                if (isSemi && canRemoveSemicolon(node)) {\n                    report(node, true);\n                } else if (\n                    !isSemi && beforeStatementContinuationChars === \"always\" &&\n                    node.type !== \"PropertyDefinition\" &&\n                    maybeAsiHazardBefore(sourceCode.getTokenAfter(node))\n                ) {\n                    report(node);\n                }\n            } else {\n                const oneLinerBlock = (exceptOneLine && isLastInOneLinerBlock(node));\n                const oneLinerClassBody = (exceptOneLineClassBody && isLastInOneLinerClassBody(node));\n                const oneLinerBlockOrClassBody = oneLinerBlock || oneLinerClassBody;\n\n                if (isSemi && oneLinerBlockOrClassBody) {\n                    report(node, true);\n                } else if (!isSemi && !oneLinerBlockOrClassBody) {\n                    report(node);\n                }\n            }\n        }\n\n        /**\n         * Checks to see if there's a semicolon after a variable declaration.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkForSemicolonForVariableDeclaration(node) {\n            const parent = node.parent;\n\n            if ((parent.type !== \"ForStatement\" || parent.init !== node) &&\n                (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)\n            ) {\n                checkForSemicolon(node);\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForSemicolonForVariableDeclaration,\n            ExpressionStatement: checkForSemicolon,\n            ReturnStatement: checkForSemicolon,\n            ThrowStatement: checkForSemicolon,\n            DoWhileStatement: checkForSemicolon,\n            DebuggerStatement: checkForSemicolon,\n            BreakStatement: checkForSemicolon,\n            ContinueStatement: checkForSemicolon,\n            ImportDeclaration: checkForSemicolon,\n            ExportAllDeclaration: checkForSemicolon,\n            ExportNamedDeclaration(node) {\n                if (!node.declaration) {\n                    checkForSemicolon(node);\n                }\n            },\n            ExportDefaultDeclaration(node) {\n                if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {\n                    checkForSemicolon(node);\n                }\n            },\n            PropertyDefinition: checkForSemicolon\n        };\n\n    }\n};\n"
        }
    ]
}