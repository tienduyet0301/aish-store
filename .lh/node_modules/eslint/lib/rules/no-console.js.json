{
    "sourceFile": "node_modules/eslint/lib/rules/no-console.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892220847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag use of console object\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [{}],\n\n        docs: {\n            description: \"Disallow the use of `console`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-console\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        },\n                        minItems: 1,\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        hasSuggestions: true,\n\n        messages: {\n            unexpected: \"Unexpected console statement.\",\n            limited: \"Unexpected console statement. Only these console methods are allowed: {{ allowed }}.\",\n            removeConsole: \"Remove the console.{{ propertyName }}().\"\n        }\n    },\n\n    create(context) {\n        const [{ allow: allowed = [] }] = context.options;\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Checks whether the given reference is 'console' or not.\n         * @param {eslint-scope.Reference} reference The reference to check.\n         * @returns {boolean} `true` if the reference is 'console'.\n         */\n        function isConsole(reference) {\n            const id = reference.identifier;\n\n            return id && id.name === \"console\";\n        }\n\n        /**\n         * Checks whether the property name of the given MemberExpression node\n         * is allowed by options or not.\n         * @param {ASTNode} node The MemberExpression node to check.\n         * @returns {boolean} `true` if the property name of the node is allowed.\n         */\n        function isAllowed(node) {\n            const propertyName = astUtils.getStaticPropertyName(node);\n\n            return propertyName && allowed.includes(propertyName);\n        }\n\n        /**\n         * Checks whether the given reference is a member access which is not\n         * allowed by options or not.\n         * @param {eslint-scope.Reference} reference The reference to check.\n         * @returns {boolean} `true` if the reference is a member access which\n         *      is not allowed by options.\n         */\n        function isMemberAccessExceptAllowed(reference) {\n            const node = reference.identifier;\n            const parent = node.parent;\n\n            return (\n                parent.type === \"MemberExpression\" &&\n                parent.object === node &&\n                !isAllowed(parent)\n            );\n        }\n\n        /**\n         * Checks if removing the ExpressionStatement node will cause ASI to\n         * break.\n         * eg.\n         * foo()\n         * console.log();\n         * [1, 2, 3].forEach(a => doSomething(a))\n         *\n         * Removing the console.log(); statement should leave two statements, but\n         * here the two statements will become one because [ causes continuation after\n         * foo().\n         * @param {ASTNode} node The ExpressionStatement node to check.\n         * @returns {boolean} `true` if ASI will break after removing the ExpressionStatement\n         *      node.\n         */\n        function maybeAsiHazard(node) {\n            const SAFE_TOKENS_BEFORE = /^[:;{]$/u; // One of :;{\n            const UNSAFE_CHARS_AFTER = /^[-[(/+`]/u; // One of [(/+-`\n\n            const tokenBefore = sourceCode.getTokenBefore(node);\n            const tokenAfter = sourceCode.getTokenAfter(node);\n\n            return (\n                Boolean(tokenAfter) &&\n                UNSAFE_CHARS_AFTER.test(tokenAfter.value) &&\n                tokenAfter.value !== \"++\" &&\n                tokenAfter.value !== \"--\" &&\n                Boolean(tokenBefore) &&\n                !SAFE_TOKENS_BEFORE.test(tokenBefore.value)\n            );\n        }\n\n        /**\n         * Checks if the MemberExpression node's parent.parent.parent is a\n         * Program, BlockStatement, StaticBlock, or SwitchCase node. This check\n         * is necessary to avoid providing a suggestion that might cause a syntax error.\n         *\n         * eg. if (a) console.log(b), removing console.log() here will lead to a\n         *     syntax error.\n         *     if (a) { console.log(b) }, removing console.log() here is acceptable.\n         *\n         * Additionally, it checks if the callee of the CallExpression node is\n         * the node itself.\n         *\n         * eg. foo(console.log), cannot provide a suggestion here.\n         * @param {ASTNode} node The MemberExpression node to check.\n         * @returns {boolean} `true` if a suggestion can be provided for a node.\n         */\n        function canProvideSuggestions(node) {\n            return (\n                node.parent.type === \"CallExpression\" &&\n                node.parent.callee === node &&\n                node.parent.parent.type === \"ExpressionStatement\" &&\n                astUtils.STATEMENT_LIST_PARENTS.has(node.parent.parent.parent.type) &&\n                !maybeAsiHazard(node.parent.parent)\n            );\n        }\n\n        /**\n         * Reports the given reference as a violation.\n         * @param {eslint-scope.Reference} reference The reference to report.\n         * @returns {void}\n         */\n        function report(reference) {\n            const node = reference.identifier.parent;\n\n            const propertyName = astUtils.getStaticPropertyName(node);\n\n            context.report({\n                node,\n                loc: node.loc,\n                messageId: allowed.length ? \"limited\" : \"unexpected\",\n                data: { allowed: allowed.join(\", \") },\n                suggest: canProvideSuggestions(node)\n                    ? [{\n                        messageId: \"removeConsole\",\n                        data: { propertyName },\n                        fix(fixer) {\n                            return fixer.remove(node.parent.parent);\n                        }\n                    }]\n                    : []\n            });\n        }\n\n        return {\n            \"Program:exit\"(node) {\n                const scope = sourceCode.getScope(node);\n                const consoleVar = astUtils.getVariableByName(scope, \"console\");\n                const shadowed = consoleVar && consoleVar.defs.length > 0;\n\n                /*\n                 * 'scope.through' includes all references to undefined\n                 * variables. If the variable 'console' is not defined, it uses\n                 * 'scope.through'.\n                 */\n                const references = consoleVar\n                    ? consoleVar.references\n                    : scope.through.filter(isConsole);\n\n                if (!shadowed) {\n                    references\n                        .filter(isMemberAccessExceptAllowed)\n                        .forEach(report);\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}