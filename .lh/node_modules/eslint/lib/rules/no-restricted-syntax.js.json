{
    "sourceFile": "node_modules/eslint/lib/rules/no-restricted-syntax.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892230729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow specified syntax\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-restricted-syntax\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                oneOf: [\n                    {\n                        type: \"string\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            selector: { type: \"string\" },\n                            message: { type: \"string\" }\n                        },\n                        required: [\"selector\"],\n                        additionalProperties: false\n                    }\n                ]\n            },\n            uniqueItems: true,\n            minItems: 0\n        },\n\n        messages: {\n            // eslint-disable-next-line eslint-plugin/report-message-format -- Custom message might not end in a period\n            restrictedSyntax: \"{{message}}\"\n        }\n    },\n\n    create(context) {\n        return context.options.reduce((result, selectorOrObject) => {\n            const isStringFormat = (typeof selectorOrObject === \"string\");\n            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n\n            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n            const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\n\n            return Object.assign(result, {\n                [selector](node) {\n                    context.report({\n                        node,\n                        messageId: \"restrictedSyntax\",\n                        data: { message }\n                    });\n                }\n            });\n        }, {});\n\n    }\n};\n"
        }
    ]
}