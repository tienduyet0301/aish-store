{
    "sourceFile": "node_modules/eslint/lib/rules/require-await.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892238986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow async functions which have no `await` expression.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Capitalize the 1st letter of the given text.\n * @param {string} text The text to capitalize.\n * @returns {string} The text that the 1st letter was capitalized.\n */\nfunction capitalizeFirstLetter(text) {\n    return text[0].toUpperCase() + text.slice(1);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow async functions which have no `await` expression\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/require-await\"\n        },\n\n        schema: [],\n\n        messages: {\n            missingAwait: \"{{name}} has no 'await' expression.\",\n            removeAsync: \"Remove 'async'.\"\n        },\n\n        hasSuggestions: true\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n        let scopeInfo = null;\n\n        /**\n         * Push the scope info object to the stack.\n         * @returns {void}\n         */\n        function enterFunction() {\n            scopeInfo = {\n                upper: scopeInfo,\n                hasAwait: false\n            };\n        }\n\n        /**\n         * Pop the top scope info object from the stack.\n         * Also, it reports the function if needed.\n         * @param {ASTNode} node The node to report.\n         * @returns {void}\n         */\n        function exitFunction(node) {\n            if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils.isEmptyFunction(node)) {\n\n                /*\n                 * If the function belongs to a method definition or\n                 * property, then the function's range may not include the\n                 * `async` keyword and we should look at the parent instead.\n                 */\n                const nodeWithAsyncKeyword =\n                    (node.parent.type === \"MethodDefinition\" && node.parent.value === node) ||\n                    (node.parent.type === \"Property\" && node.parent.method && node.parent.value === node)\n                        ? node.parent\n                        : node;\n\n                const asyncToken = sourceCode.getFirstToken(nodeWithAsyncKeyword, token => token.value === \"async\");\n                const asyncRange = [asyncToken.range[0], sourceCode.getTokenAfter(asyncToken, { includeComments: true }).range[0]];\n\n                /*\n                 * Removing the `async` keyword can cause parsing errors if the current\n                 * statement is relying on automatic semicolon insertion. If ASI is currently\n                 * being used, then we should replace the `async` keyword with a semicolon.\n                 */\n                const nextToken = sourceCode.getTokenAfter(asyncToken);\n                const addSemiColon =\n                    nextToken.type === \"Punctuator\" &&\n                    (nextToken.value === \"[\" || nextToken.value === \"(\") &&\n                    (nodeWithAsyncKeyword.type === \"MethodDefinition\" || astUtils.isStartOfExpressionStatement(nodeWithAsyncKeyword)) &&\n                    astUtils.needsPrecedingSemicolon(sourceCode, nodeWithAsyncKeyword);\n\n                context.report({\n                    node,\n                    loc: astUtils.getFunctionHeadLoc(node, sourceCode),\n                    messageId: \"missingAwait\",\n                    data: {\n                        name: capitalizeFirstLetter(\n                            astUtils.getFunctionNameWithKind(node)\n                        )\n                    },\n                    suggest: [{\n                        messageId: \"removeAsync\",\n                        fix: fixer => fixer.replaceTextRange(asyncRange, addSemiColon ? \";\" : \"\")\n                    }]\n                });\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            AwaitExpression() {\n                if (!scopeInfo) {\n                    return;\n                }\n\n                scopeInfo.hasAwait = true;\n            },\n            ForOfStatement(node) {\n                if (!scopeInfo) {\n                    return;\n                }\n\n                if (node.await) {\n                    scopeInfo.hasAwait = true;\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}