{
    "sourceFile": "node_modules/eslint/lib/rules/no-void.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892233388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow use of void operator.\n * @author Mike Sidorov\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [{\n            allowAsStatement: false\n        }],\n\n        docs: {\n            description: \"Disallow `void` operators\",\n            recommended: false,\n            frozen: true,\n            url: \"https://eslint.org/docs/latest/rules/no-void\"\n        },\n\n        messages: {\n            noVoid: \"Expected 'undefined' and instead saw 'void'.\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowAsStatement: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ]\n    },\n\n    create(context) {\n        const [{ allowAsStatement }] = context.options;\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            'UnaryExpression[operator=\"void\"]'(node) {\n                if (\n                    allowAsStatement &&\n                    node.parent &&\n                    node.parent.type === \"ExpressionStatement\"\n                ) {\n                    return;\n                }\n                context.report({\n                    node,\n                    messageId: \"noVoid\"\n                });\n            }\n        };\n    }\n};\n"
        }
    ]
}