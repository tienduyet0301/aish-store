{
    "sourceFile": "node_modules/eslint/lib/rules/no-restricted-exports.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892230236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow specified names in exports\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-restricted-exports\"\n        },\n\n        schema: [{\n            anyOf: [\n                {\n                    type: \"object\",\n                    properties: {\n                        restrictedNamedExports: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\"\n                            },\n                            uniqueItems: true\n                        },\n                        restrictedNamedExportsPattern: { type: \"string\" }\n                    },\n                    additionalProperties: false\n                },\n                {\n                    type: \"object\",\n                    properties: {\n                        restrictedNamedExports: {\n                            type: \"array\",\n                            items: {\n                                type: \"string\",\n                                pattern: \"^(?!default$)\"\n                            },\n                            uniqueItems: true\n                        },\n                        restrictedNamedExportsPattern: { type: \"string\" },\n                        restrictDefaultExports: {\n                            type: \"object\",\n                            properties: {\n\n                                // Allow/Disallow `export default foo; export default 42; export default function foo() {}` format\n                                direct: {\n                                    type: \"boolean\"\n                                },\n\n                                // Allow/Disallow `export { foo as default };` declarations\n                                named: {\n                                    type: \"boolean\"\n                                },\n\n                                //  Allow/Disallow `export { default } from \"mod\"; export { default as default } from \"mod\";` declarations\n                                defaultFrom: {\n                                    type: \"boolean\"\n                                },\n\n                                //  Allow/Disallow `export { foo as default } from \"mod\";` declarations\n                                namedFrom: {\n                                    type: \"boolean\"\n                                },\n\n                                //  Allow/Disallow `export * as default from \"mod\"`; declarations\n                                namespaceFrom: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    },\n                    additionalProperties: false\n                }\n            ]\n        }],\n\n        messages: {\n            restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\",\n            restrictedDefault: \"Exporting 'default' is restricted.\"\n        }\n    },\n\n    create(context) {\n\n        const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n        const restrictedNamePattern = context.options[0] && context.options[0].restrictedNamedExportsPattern;\n        const restrictDefaultExports = context.options[0] && context.options[0].restrictDefaultExports;\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Checks and reports given exported name.\n         * @param {ASTNode} node exported `Identifier` or string `Literal` node to check.\n         * @returns {void}\n         */\n        function checkExportedName(node) {\n            const name = astUtils.getModuleExportName(node);\n\n            let matchesRestrictedNamePattern = false;\n\n            if (restrictedNamePattern && name !== \"default\") {\n                const patternRegex = new RegExp(restrictedNamePattern, \"u\");\n\n                matchesRestrictedNamePattern = patternRegex.test(name);\n            }\n\n            if (matchesRestrictedNamePattern || restrictedNames.has(name)) {\n                context.report({\n                    node,\n                    messageId: \"restrictedNamed\",\n                    data: { name }\n                });\n                return;\n            }\n\n            if (name === \"default\") {\n                if (node.parent.type === \"ExportAllDeclaration\") {\n                    if (restrictDefaultExports && restrictDefaultExports.namespaceFrom) {\n                        context.report({\n                            node,\n                            messageId: \"restrictedDefault\"\n                        });\n                    }\n\n                } else { // ExportSpecifier\n                    const isSourceSpecified = !!node.parent.parent.source;\n                    const specifierLocalName = astUtils.getModuleExportName(node.parent.local);\n\n                    if (!isSourceSpecified && restrictDefaultExports && restrictDefaultExports.named) {\n                        context.report({\n                            node,\n                            messageId: \"restrictedDefault\"\n                        });\n                        return;\n                    }\n\n                    if (isSourceSpecified && restrictDefaultExports) {\n                        if (\n                            (specifierLocalName === \"default\" && restrictDefaultExports.defaultFrom) ||\n                            (specifierLocalName !== \"default\" && restrictDefaultExports.namedFrom)\n                        ) {\n                            context.report({\n                                node,\n                                messageId: \"restrictedDefault\"\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        return {\n            ExportAllDeclaration(node) {\n                if (node.exported) {\n                    checkExportedName(node.exported);\n                }\n            },\n\n            ExportDefaultDeclaration(node) {\n                if (restrictDefaultExports && restrictDefaultExports.direct) {\n                    context.report({\n                        node,\n                        messageId: \"restrictedDefault\"\n                    });\n                }\n            },\n\n            ExportNamedDeclaration(node) {\n                const declaration = node.declaration;\n\n                if (declaration) {\n                    if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n                        checkExportedName(declaration.id);\n                    } else if (declaration.type === \"VariableDeclaration\") {\n                        sourceCode.getDeclaredVariables(declaration)\n                            .map(v => v.defs.find(d => d.parent === declaration))\n                            .map(d => d.name) // Identifier nodes\n                            .forEach(checkExportedName);\n                    }\n                } else {\n                    node.specifiers\n                        .map(s => s.exported)\n                        .forEach(checkExportedName);\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}