{
    "sourceFile": "node_modules/eslint/lib/rules/no-nonoctal-decimal-escape.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892229031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\n\n/**\n * Returns unicode escape sequence that represents the given character.\n * @param {string} character A single code unit.\n * @returns {string} \"\\uXXXX\" sequence.\n */\nfunction getUnicodeEscape(character) {\n    return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape\"\n        },\n\n        hasSuggestions: true,\n\n        schema: [],\n\n        messages: {\n            decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\n\n            // suggestions\n            refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\n            escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Creates a new Suggestion object.\n         * @param {string} messageId \"refactor\" or \"escapeBackslash\".\n         * @param {int[]} range The range to replace.\n         * @param {string} replacement New text for the range.\n         * @returns {Object} Suggestion\n         */\n        function createSuggestion(messageId, range, replacement) {\n            return {\n                messageId,\n                data: {\n                    original: sourceCode.getText().slice(...range),\n                    replacement\n                },\n                fix(fixer) {\n                    return fixer.replaceTextRange(range, replacement);\n                }\n            };\n        }\n\n        return {\n            Literal(node) {\n                if (typeof node.value !== \"string\") {\n                    return;\n                }\n\n                if (!QUICK_TEST_REGEX.test(node.raw)) {\n                    return;\n                }\n\n                const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\n                let match;\n\n                while ((match = regex.exec(node.raw))) {\n                    const { previousEscape, decimalEscape } = match.groups;\n                    const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\n                    const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\n                    const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\n                    const suggest = [];\n\n                    // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\n                    if (previousEscape === \"\\\\0\") {\n\n                        /*\n                         * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\n                         * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\n                         * an octal escape while fixing a decimal escape, we provide different suggestions.\n                         */\n                        suggest.push(\n                            createSuggestion( // \"\\0\\8\" -> \"\\u00008\"\n                                \"refactor\",\n                                [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd],\n                                `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`\n                            ),\n                            createSuggestion( // \"\\8\" -> \"\\u0038\"\n                                \"refactor\",\n                                decimalEscapeRange,\n                                getUnicodeEscape(decimalEscape[1])\n                            )\n                        );\n                    } else {\n                        suggest.push(\n                            createSuggestion( // \"\\8\" -> \"8\"\n                                \"refactor\",\n                                decimalEscapeRange,\n                                decimalEscape[1]\n                            )\n                        );\n                    }\n\n                    suggest.push(\n                        createSuggestion( // \"\\8\" -> \"\\\\8\"\n                            \"escapeBackslash\",\n                            decimalEscapeRange,\n                            `\\\\${decimalEscape}`\n                        )\n                    );\n\n                    context.report({\n                        node,\n                        loc: {\n                            start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\n                            end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\n                        },\n                        messageId: \"decimalEscape\",\n                        data: {\n                            decimalEscape\n                        },\n                        suggest\n                    });\n                }\n            }\n        };\n    }\n};\n"
        }
    ]
}