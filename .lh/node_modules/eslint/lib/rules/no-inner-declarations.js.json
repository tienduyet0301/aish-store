{
    "sourceFile": "node_modules/eslint/lib/rules/no-inner-declarations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892226845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"StaticBlock\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n\n/**\n * Finds the nearest enclosing context where this rule allows declarations and returns its description.\n * @param {ASTNode} node Node to search from.\n * @returns {string} Description. One of \"program\", \"function body\", \"class static block body\".\n */\nfunction getAllowedBodyDescription(node) {\n    let { parent } = node;\n\n    while (parent) {\n\n        if (parent.type === \"StaticBlock\") {\n            return \"class static block body\";\n        }\n\n        if (astUtils.isFunction(parent)) {\n            return \"function body\";\n        }\n\n        ({ parent } = parent);\n    }\n\n    return \"program\";\n}\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        defaultOptions: [\"functions\", { blockScopedFunctions: \"allow\" }],\n\n        docs: {\n            description: \"Disallow variable or `function` declarations in nested blocks\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-inner-declarations\"\n        },\n\n        schema: [\n            {\n                enum: [\"functions\", \"both\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    blockScopedFunctions: {\n                        enum: [\"allow\", \"disallow\"]\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n        }\n    },\n\n    create(context) {\n        const both = context.options[0] === \"both\";\n        const { blockScopedFunctions } = context.options[1];\n\n        const sourceCode = context.sourceCode;\n        const ecmaVersion = context.languageOptions.ecmaVersion;\n\n        /**\n         * Ensure that a given node is at a program or function body's root.\n         * @param {ASTNode} node Declaration node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            const parent = node.parent;\n\n            if (\n                parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)\n            ) {\n                return;\n            }\n\n            if (validParent.has(parent.type)) {\n                return;\n            }\n\n            context.report({\n                node,\n                messageId: \"moveDeclToRoot\",\n                data: {\n                    type: (node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\"),\n                    body: getAllowedBodyDescription(node)\n                }\n            });\n        }\n\n        return {\n\n            FunctionDeclaration(node) {\n                const isInStrictCode = sourceCode.getScope(node).upper.isStrict;\n\n                if (blockScopedFunctions === \"allow\" && ecmaVersion >= 2015 && isInStrictCode) {\n                    return;\n                }\n\n                check(node);\n            },\n            VariableDeclaration(node) {\n                if (both && node.kind === \"var\") {\n                    check(node);\n                }\n            }\n\n        };\n\n    }\n};\n"
        }
    ]
}