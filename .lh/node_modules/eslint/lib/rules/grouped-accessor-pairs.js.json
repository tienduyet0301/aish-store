{
    "sourceFile": "node_modules/eslint/lib/rules/grouped-accessor-pairs.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892216083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to require grouped accessor pairs in object literals and classes\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * Property name if it can be computed statically, otherwise the list of the tokens of the key node.\n * @typedef {string|Token[]} Key\n */\n\n/**\n * Accessor nodes with the same key.\n * @typedef {Object} AccessorData\n * @property {Key} key Accessor's key\n * @property {ASTNode[]} getters List of getter nodes.\n * @property {ASTNode[]} setters List of setter nodes.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not the given lists represent the equal tokens in the same order.\n * Tokens are compared by their properties, not by instance.\n * @param {Token[]} left First list of tokens.\n * @param {Token[]} right Second list of tokens.\n * @returns {boolean} `true` if the lists have same tokens.\n */\nfunction areEqualTokenLists(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n\n    for (let i = 0; i < left.length; i++) {\n        const leftToken = left[i],\n            rightToken = right[i];\n\n        if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Checks whether or not the given keys are equal.\n * @param {Key} left First key.\n * @param {Key} right Second key.\n * @returns {boolean} `true` if the keys are equal.\n */\nfunction areEqualKeys(left, right) {\n    if (typeof left === \"string\" && typeof right === \"string\") {\n\n        // Statically computed names.\n        return left === right;\n    }\n    if (Array.isArray(left) && Array.isArray(right)) {\n\n        // Token lists.\n        return areEqualTokenLists(left, right);\n    }\n\n    return false;\n}\n\n/**\n * Checks whether or not a given node is of an accessor kind ('get' or 'set').\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is of an accessor kind.\n */\nfunction isAccessorKind(node) {\n    return node.kind === \"get\" || node.kind === \"set\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [\"anyOrder\"],\n\n        docs: {\n            description: \"Require grouped accessor pairs in object literals and classes\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/grouped-accessor-pairs\"\n        },\n\n        schema: [\n            {\n                enum: [\"anyOrder\", \"getBeforeSet\", \"setBeforeGet\"]\n            }\n        ],\n\n        messages: {\n            notGrouped: \"Accessor pair {{ formerName }} and {{ latterName }} should be grouped.\",\n            invalidOrder: \"Expected {{ latterName }} to be before {{ formerName }}.\"\n        }\n    },\n\n    create(context) {\n        const [order] = context.options;\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Reports the given accessor pair.\n         * @param {string} messageId messageId to report.\n         * @param {ASTNode} formerNode getter/setter node that is defined before `latterNode`.\n         * @param {ASTNode} latterNode getter/setter node that is defined after `formerNode`.\n         * @returns {void}\n         * @private\n         */\n        function report(messageId, formerNode, latterNode) {\n            context.report({\n                node: latterNode,\n                messageId,\n                loc: astUtils.getFunctionHeadLoc(latterNode.value, sourceCode),\n                data: {\n                    formerName: astUtils.getFunctionNameWithKind(formerNode.value),\n                    latterName: astUtils.getFunctionNameWithKind(latterNode.value)\n                }\n            });\n        }\n\n        /**\n         * Checks accessor pairs in the given list of nodes.\n         * @param {ASTNode[]} nodes The list to check.\n         * @param {Function} shouldCheck â€“ Predicate that returns `true` if the node should be checked.\n         * @returns {void}\n         * @private\n         */\n        function checkList(nodes, shouldCheck) {\n            const accessors = [];\n            let found = false;\n\n            for (let i = 0; i < nodes.length; i++) {\n                const node = nodes[i];\n\n                if (shouldCheck(node) && isAccessorKind(node)) {\n\n                    // Creates a new `AccessorData` object for the given getter or setter node.\n                    const name = astUtils.getStaticPropertyName(node);\n                    const key = (name !== null) ? name : sourceCode.getTokens(node.key);\n\n                    // Merges the given `AccessorData` object into the given accessors list.\n                    for (let j = 0; j < accessors.length; j++) {\n                        const accessor = accessors[j];\n\n                        if (areEqualKeys(accessor.key, key)) {\n                            accessor.getters.push(...node.kind === \"get\" ? [node] : []);\n                            accessor.setters.push(...node.kind === \"set\" ? [node] : []);\n                            found = true;\n                            break;\n                        }\n                    }\n                    if (!found) {\n                        accessors.push({\n                            key,\n                            getters: node.kind === \"get\" ? [node] : [],\n                            setters: node.kind === \"set\" ? [node] : []\n                        });\n                    }\n                    found = false;\n                }\n            }\n\n            for (const { getters, setters } of accessors) {\n\n                // Don't report accessor properties that have duplicate getters or setters.\n                if (getters.length === 1 && setters.length === 1) {\n                    const [getter] = getters,\n                        [setter] = setters,\n                        getterIndex = nodes.indexOf(getter),\n                        setterIndex = nodes.indexOf(setter),\n                        formerNode = getterIndex < setterIndex ? getter : setter,\n                        latterNode = getterIndex < setterIndex ? setter : getter;\n\n                    if (Math.abs(getterIndex - setterIndex) > 1) {\n                        report(\"notGrouped\", formerNode, latterNode);\n                    } else if (\n                        (order === \"getBeforeSet\" && getterIndex > setterIndex) ||\n                        (order === \"setBeforeGet\" && getterIndex < setterIndex)\n                    ) {\n                        report(\"invalidOrder\", formerNode, latterNode);\n                    }\n                }\n            }\n        }\n\n        return {\n            ObjectExpression(node) {\n                checkList(node.properties, n => n.type === \"Property\");\n            },\n            ClassBody(node) {\n                checkList(node.body, n => n.type === \"MethodDefinition\" && !n.static);\n                checkList(node.body, n => n.type === \"MethodDefinition\" && n.static);\n            }\n        };\n    }\n};\n"
        }
    ]
}