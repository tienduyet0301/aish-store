{
    "sourceFile": "node_modules/eslint/lib/rules/complexity.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892214807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst THRESHOLD_DEFAULT = 20;\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [THRESHOLD_DEFAULT],\n\n        docs: {\n            description: \"Enforce a maximum cyclomatic complexity allowed in a program\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/complexity\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            variant: {\n                                enum: [\"classic\", \"modified\"]\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        let threshold = THRESHOLD_DEFAULT;\n        let VARIANT = \"classic\";\n\n        if (typeof option === \"object\") {\n            if (Object.hasOwn(option, \"maximum\") || Object.hasOwn(option, \"max\")) {\n                threshold = option.maximum || option.max;\n            }\n\n            if (Object.hasOwn(option, \"variant\")) {\n                VARIANT = option.variant;\n            }\n        } else if (typeof option === \"number\") {\n            threshold = option;\n        }\n\n        const IS_MODIFIED_COMPLEXITY = VARIANT === \"modified\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // Using a stack to store complexity per code path\n        const complexities = [];\n\n        /**\n         * Increase the complexity of the code path in context\n         * @returns {void}\n         * @private\n         */\n        function increaseComplexity() {\n            complexities[complexities.length - 1]++;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            onCodePathStart() {\n\n                // The initial complexity is 1, representing one execution path in the CodePath\n                complexities.push(1);\n            },\n\n            // Each branching in the code adds 1 to the complexity\n            CatchClause: increaseComplexity,\n            ConditionalExpression: increaseComplexity,\n            LogicalExpression: increaseComplexity,\n            ForStatement: increaseComplexity,\n            ForInStatement: increaseComplexity,\n            ForOfStatement: increaseComplexity,\n            IfStatement: increaseComplexity,\n            WhileStatement: increaseComplexity,\n            DoWhileStatement: increaseComplexity,\n            AssignmentPattern: increaseComplexity,\n\n            // Avoid `default`\n            \"SwitchCase[test]\": () => IS_MODIFIED_COMPLEXITY || increaseComplexity(),\n            SwitchStatement: () => IS_MODIFIED_COMPLEXITY && increaseComplexity(),\n\n            // Logical assignment operators have short-circuiting behavior\n            AssignmentExpression(node) {\n                if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n                    increaseComplexity();\n                }\n            },\n\n            MemberExpression(node) {\n                if (node.optional === true) {\n                    increaseComplexity();\n                }\n            },\n\n            CallExpression(node) {\n                if (node.optional === true) {\n                    increaseComplexity();\n                }\n            },\n\n            onCodePathEnd(codePath, node) {\n                const complexity = complexities.pop();\n\n                /*\n                 * This rule only evaluates complexity of functions, so \"program\" is excluded.\n                 * Class field initializers and class static blocks are implicit functions. Therefore,\n                 * they shouldn't contribute to the enclosing function's complexity, but their\n                 * own complexity should be evaluated.\n                 */\n                if (\n                    codePath.origin !== \"function\" &&\n                    codePath.origin !== \"class-field-initializer\" &&\n                    codePath.origin !== \"class-static-block\"\n                ) {\n                    return;\n                }\n\n                if (complexity > threshold) {\n                    let name;\n\n                    if (codePath.origin === \"class-field-initializer\") {\n                        name = \"class field initializer\";\n                    } else if (codePath.origin === \"class-static-block\") {\n                        name = \"class static block\";\n                    } else {\n                        name = astUtils.getFunctionNameWithKind(node);\n                    }\n\n                    context.report({\n                        node,\n                        messageId: \"complex\",\n                        data: {\n                            name: upperCaseFirst(name),\n                            complexity,\n                            max: threshold\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}