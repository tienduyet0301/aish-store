{
    "sourceFile": "node_modules/eslint/lib/rules/no-new-native-nonconstructor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892228675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to disallow use of the new operator with global non-constructor functions\n * @author Sosuke Suzuki\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst nonConstructorGlobalFunctionNames = [\"Symbol\", \"BigInt\"];\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"Disallow `new` operators with global non-constructor functions\",\n            recommended: true,\n            url: \"https://eslint.org/docs/latest/rules/no-new-native-nonconstructor\"\n        },\n\n        schema: [],\n\n        messages: {\n            noNewNonconstructor: \"`{{name}}` cannot be called as a constructor.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        return {\n            \"Program:exit\"(node) {\n                const globalScope = sourceCode.getScope(node);\n\n                for (const nonConstructorName of nonConstructorGlobalFunctionNames) {\n                    const variable = globalScope.set.get(nonConstructorName);\n\n                    if (variable && variable.defs.length === 0) {\n                        variable.references.forEach(ref => {\n                            const idNode = ref.identifier;\n                            const parent = idNode.parent;\n\n                            if (parent && parent.type === \"NewExpression\" && parent.callee === idNode) {\n                                context.report({\n                                    node: idNode,\n                                    messageId: \"noNewNonconstructor\",\n                                    data: { name: nonConstructorName }\n                                });\n                            }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}