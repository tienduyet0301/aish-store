{
    "sourceFile": "node_modules/eslint/lib/rules/no-array-constructor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892218494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Disallow construction of dense arrays using the Array constructor\n * @author Matt DuVall <http://www.mattduvall.com/>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    getVariableByName,\n    isClosingParenToken,\n    isOpeningParenToken,\n    isStartOfExpressionStatement,\n    needsPrecedingSemicolon\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Disallow `Array` constructors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/no-array-constructor\"\n        },\n\n        hasSuggestions: true,\n\n        schema: [],\n\n        messages: {\n            preferLiteral: \"The array literal notation [] is preferable.\",\n            useLiteral: \"Replace with an array literal.\",\n            useLiteralAfterSemicolon: \"Replace with an array literal, add preceding semicolon.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Gets the text between the calling parentheses of a CallExpression or NewExpression.\n         * @param {ASTNode} node A CallExpression or NewExpression node.\n         * @returns {string} The text between the calling parentheses, or an empty string if there are none.\n         */\n        function getArgumentsText(node) {\n            const lastToken = sourceCode.getLastToken(node);\n\n            if (!isClosingParenToken(lastToken)) {\n                return \"\";\n            }\n\n            let firstToken = node.callee;\n\n            do {\n                firstToken = sourceCode.getTokenAfter(firstToken);\n                if (!firstToken || firstToken === lastToken) {\n                    return \"\";\n                }\n            } while (!isOpeningParenToken(firstToken));\n\n            return sourceCode.text.slice(firstToken.range[1], lastToken.range[0]);\n        }\n\n        /**\n         * Disallow construction of dense arrays using the Array constructor\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function check(node) {\n            if (\n                node.callee.type !== \"Identifier\" ||\n                node.callee.name !== \"Array\" ||\n                node.arguments.length === 1 &&\n                node.arguments[0].type !== \"SpreadElement\") {\n                return;\n            }\n\n            const variable = getVariableByName(sourceCode.getScope(node), \"Array\");\n\n            /*\n             * Check if `Array` is a predefined global variable: predefined globals have no declarations,\n             * meaning that the `identifiers` list of the variable object is empty.\n             */\n            if (variable && variable.identifiers.length === 0) {\n                const argsText = getArgumentsText(node);\n                let fixText;\n                let messageId;\n\n                /*\n                 * Check if the suggested change should include a preceding semicolon or not.\n                 * Due to JavaScript's ASI rules, a missing semicolon may be inserted automatically\n                 * before an expression like `Array()` or `new Array()`, but not when the expression\n                 * is changed into an array literal like `[]`.\n                 */\n                if (isStartOfExpressionStatement(node) && needsPrecedingSemicolon(sourceCode, node)) {\n                    fixText = `;[${argsText}]`;\n                    messageId = \"useLiteralAfterSemicolon\";\n                } else {\n                    fixText = `[${argsText}]`;\n                    messageId = \"useLiteral\";\n                }\n\n                context.report({\n                    node,\n                    messageId: \"preferLiteral\",\n                    suggest: [\n                        {\n                            messageId,\n                            fix: fixer => fixer.replaceText(node, fixText)\n                        }\n                    ]\n                });\n            }\n        }\n\n        return {\n            CallExpression: check,\n            NewExpression: check\n        };\n\n    }\n};\n"
        }
    ]
}