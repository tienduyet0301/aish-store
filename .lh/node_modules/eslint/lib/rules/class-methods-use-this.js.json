{
    "sourceFile": "node_modules/eslint/lib/rules/class-methods-use-this.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892214546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        defaultOptions: [{\n            enforceForClassFields: true,\n            exceptMethods: []\n        }],\n\n        docs: {\n            description: \"Enforce that class methods utilize `this`\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/class-methods-use-this\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                exceptMethods: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    }\n                },\n                enforceForClassFields: {\n                    type: \"boolean\"\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingThis: \"Expected 'this' to be used by class {{name}}.\"\n        }\n    },\n    create(context) {\n        const [options] = context.options;\n        const { enforceForClassFields } = options;\n        const exceptMethods = new Set(options.exceptMethods);\n\n        const stack = [];\n\n        /**\n         * Push `this` used flag initialized with `false` onto the stack.\n         * @returns {void}\n         */\n        function pushContext() {\n            stack.push(false);\n        }\n\n        /**\n         * Pop `this` used flag from the stack.\n         * @returns {boolean | undefined} `this` used flag\n         */\n        function popContext() {\n            return stack.pop();\n        }\n\n        /**\n         * Initializes the current context to false and pushes it onto the stack.\n         * These booleans represent whether 'this' has been used in the context.\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            pushContext();\n        }\n\n        /**\n         * Check if the node is an instance method\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if its an instance method\n         * @private\n         */\n        function isInstanceMethod(node) {\n            switch (node.type) {\n                case \"MethodDefinition\":\n                    return !node.static && node.kind !== \"constructor\";\n                case \"PropertyDefinition\":\n                    return !node.static && enforceForClassFields;\n                default:\n                    return false;\n            }\n        }\n\n        /**\n         * Check if the node is an instance method not excluded by config\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if it is an instance method, and not excluded by config\n         * @private\n         */\n        function isIncludedInstanceMethod(node) {\n            if (isInstanceMethod(node)) {\n                if (node.computed) {\n                    return true;\n                }\n\n                const hashIfNeeded = node.key.type === \"PrivateIdentifier\" ? \"#\" : \"\";\n                const name = node.key.type === \"Literal\"\n                    ? astUtils.getStaticStringValue(node.key)\n                    : (node.key.name || \"\");\n\n                return !exceptMethods.has(hashIfNeeded + name);\n            }\n            return false;\n        }\n\n        /**\n         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n         * Static methods and the constructor are exempt.\n         * Then pops the context off the stack.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         * @private\n         */\n        function exitFunction(node) {\n            const methodUsesThis = popContext();\n\n            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n                context.report({\n                    node,\n                    loc: astUtils.getFunctionHeadLoc(node, context.sourceCode),\n                    messageId: \"missingThis\",\n                    data: {\n                        name: astUtils.getFunctionNameWithKind(node)\n                    }\n                });\n            }\n        }\n\n        /**\n         * Mark the current context as having used 'this'.\n         * @returns {void}\n         * @private\n         */\n        function markThisUsed() {\n            if (stack.length) {\n                stack[stack.length - 1] = true;\n            }\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n\n            /*\n             * Class field value are implicit functions.\n             */\n            \"PropertyDefinition > *.key:exit\": pushContext,\n            \"PropertyDefinition:exit\": popContext,\n\n            /*\n             * Class static blocks are implicit functions. They aren't required to use `this`,\n             * but we have to push context so that it captures any use of `this` in the static block\n             * separately from enclosing contexts, because static blocks have their own `this` and it\n             * shouldn't count as used `this` in enclosing contexts.\n             */\n            StaticBlock: pushContext,\n            \"StaticBlock:exit\": popContext,\n\n            ThisExpression: markThisUsed,\n            Super: markThisUsed,\n            ...(\n                enforceForClassFields && {\n                    \"PropertyDefinition > ArrowFunctionExpression.value\": enterFunction,\n                    \"PropertyDefinition > ArrowFunctionExpression.value:exit\": exitFunction\n                }\n            )\n        };\n    }\n};\n"
        }
    ]
}