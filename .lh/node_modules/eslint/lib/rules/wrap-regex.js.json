{
    "sourceFile": "node_modules/eslint/lib/rules/wrap-regex.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892241351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n * @deprecated in ESLint v8.53.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Formatting rules are being moved out of ESLint core.\",\n            url: \"https://eslint.org/blog/2023/10/deprecating-formatting-rules/\",\n            deprecatedSince: \"8.53.0\",\n            availableUntil: \"10.0.0\",\n            replacedBy: [\n                {\n                    message: \"ESLint Stylistic now maintains deprecated stylistic core rules.\",\n                    url: \"https://eslint.style/guide/migration\",\n                    plugin: {\n                        name: \"@stylistic/eslint-plugin-js\",\n                        url: \"https://eslint.style/packages/js\"\n                    },\n                    rule: {\n                        name: \"wrap-regex\",\n                        url: \"https://eslint.style/rules/js/wrap-regex\"\n                    }\n                }\n            ]\n        },\n        type: \"layout\",\n\n        docs: {\n            description: \"Require parenthesis around regex literals\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/wrap-regex\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.sourceCode;\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node),\n                    nodeType = token.type;\n\n                if (nodeType === \"RegularExpression\") {\n                    const beforeToken = sourceCode.getTokenBefore(node);\n                    const afterToken = sourceCode.getTokenAfter(node);\n                    const { parent } = node;\n\n                    if (parent.type === \"MemberExpression\" && parent.object === node &&\n                        !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n                        context.report({\n                            node,\n                            messageId: \"requireParens\",\n                            fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"
        }
    ]
}