{
    "sourceFile": "node_modules/eslint/lib/rules/handle-callback-err.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892216257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Ensure handling of errors when we know they exist.\n * @author Jamund Ferguson\n * @deprecated in ESLint v7.0.0\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n/** @type {import('../shared/types').Rule} */\nmodule.exports = {\n    meta: {\n        deprecated: {\n            message: \"Node.js rules were moved out of ESLint core.\",\n            url: \"https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules\",\n            deprecatedSince: \"7.0.0\",\n            availableUntil: null,\n            replacedBy: [\n                {\n                    message: \"eslint-plugin-n now maintains deprecated Node.js-related rules.\",\n                    plugin: {\n                        name: \"eslint-plugin-n\",\n                        url: \"https://github.com/eslint-community/eslint-plugin-n\"\n                    },\n                    rule: {\n                        name: \"handle-callback-err\",\n                        url: \"https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md\"\n                    }\n                }\n            ]\n        },\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"Require error handling in callbacks\",\n            recommended: false,\n            url: \"https://eslint.org/docs/latest/rules/handle-callback-err\"\n        },\n\n        schema: [\n            {\n                type: \"string\"\n            }\n        ],\n        messages: {\n            expected: \"Expected error to be handled.\"\n        }\n    },\n\n    create(context) {\n\n        const errorArgument = context.options[0] || \"err\";\n        const sourceCode = context.sourceCode;\n\n        /**\n         * Checks if the given argument should be interpreted as a regexp pattern.\n         * @param {string} stringToCheck The string which should be checked.\n         * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n         */\n        function isPattern(stringToCheck) {\n            const firstChar = stringToCheck[0];\n\n            return firstChar === \"^\";\n        }\n\n        /**\n         * Checks if the given name matches the configured error argument.\n         * @param {string} name The name which should be compared.\n         * @returns {boolean} Whether or not the given name matches the configured error variable name.\n         */\n        function matchesConfiguredErrorName(name) {\n            if (isPattern(errorArgument)) {\n                const regexp = new RegExp(errorArgument, \"u\");\n\n                return regexp.test(name);\n            }\n            return name === errorArgument;\n        }\n\n        /**\n         * Get the parameters of a given function scope.\n         * @param {Object} scope The function scope.\n         * @returns {Array} All parameters of the given scope.\n         */\n        function getParameters(scope) {\n            return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\n        }\n\n        /**\n         * Check to see if we're handling the error object properly.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         */\n        function checkForError(node) {\n            const scope = sourceCode.getScope(node),\n                parameters = getParameters(scope),\n                firstParameter = parameters[0];\n\n            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n                if (firstParameter.references.length === 0) {\n                    context.report({ node, messageId: \"expected\" });\n                }\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkForError,\n            FunctionExpression: checkForError,\n            ArrowFunctionExpression: checkForError\n        };\n\n    }\n};\n"
        }
    ]
}