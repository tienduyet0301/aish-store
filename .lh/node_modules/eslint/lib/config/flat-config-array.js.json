{
    "sourceFile": "node_modules/eslint/lib/config/flat-config-array.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892209345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Flat Config Array\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst { ConfigArray, ConfigArraySymbol } = require(\"@eslint/config-array\");\nconst { flatConfigSchema } = require(\"./flat-config-schema\");\nconst { defaultConfig } = require(\"./default-config\");\nconst { Config } = require(\"./config\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/**\n * Fields that are considered metadata and not part of the config object.\n */\nconst META_FIELDS = new Set([\"name\"]);\n\n/**\n * Wraps a config error with details about where the error occurred.\n * @param {Error} error The original error.\n * @param {number} originalLength The original length of the config array.\n * @param {number} baseLength The length of the base config.\n * @returns {TypeError} The new error with details.\n */\nfunction wrapConfigErrorWithDetails(error, originalLength, baseLength) {\n\n    let location = \"user-defined\";\n    let configIndex = error.index;\n\n    /*\n     * A config array is set up in this order:\n     * 1. Base config\n     * 2. Original configs\n     * 3. User-defined configs\n     * 4. CLI-defined configs\n     *\n     * So we need to adjust the index to account for the base config.\n     *\n     * - If the index is less than the base length, it's in the base config\n     *   (as specified by `baseConfig` argument to `FlatConfigArray` constructor).\n     * - If the index is greater than the base length but less than the original\n     *   length + base length, it's in the original config. The original config\n     *   is passed to the `FlatConfigArray` constructor as the first argument.\n     * - Otherwise, it's in the user-defined config, which is loaded from the\n     *   config file and merged with any command-line options.\n     */\n    if (error.index < baseLength) {\n        location = \"base\";\n    } else if (error.index < originalLength + baseLength) {\n        location = \"original\";\n        configIndex = error.index - baseLength;\n    } else {\n        configIndex = error.index - originalLength - baseLength;\n    }\n\n    return new TypeError(\n        `${error.message.slice(0, -1)} at ${location} index ${configIndex}.`,\n        { cause: error }\n    );\n}\n\n\nconst originalBaseConfig = Symbol(\"originalBaseConfig\");\nconst originalLength = Symbol(\"originalLength\");\nconst baseLength = Symbol(\"baseLength\");\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * Represents an array containing configuration information for ESLint.\n */\nclass FlatConfigArray extends ConfigArray {\n\n    /**\n     * Creates a new instance.\n     * @param {*[]} configs An array of configuration information.\n     * @param {{basePath: string, shouldIgnore: boolean, baseConfig: FlatConfig}} options The options\n     *      to use for the config array instance.\n     */\n    constructor(configs, {\n        basePath,\n        shouldIgnore = true,\n        baseConfig = defaultConfig\n    } = {}) {\n        super(configs, {\n            basePath,\n            schema: flatConfigSchema\n        });\n\n        /**\n         * The original length of the array before any modifications.\n         * @type {number}\n         */\n        this[originalLength] = this.length;\n\n        if (baseConfig[Symbol.iterator]) {\n            this.unshift(...baseConfig);\n        } else {\n            this.unshift(baseConfig);\n        }\n\n        /**\n         * The length of the array after applying the base config.\n         * @type {number}\n         */\n        this[baseLength] = this.length - this[originalLength];\n\n        /**\n         * The base config used to build the config array.\n         * @type {Array<FlatConfig>}\n         */\n        this[originalBaseConfig] = baseConfig;\n        Object.defineProperty(this, originalBaseConfig, { writable: false });\n\n        /**\n         * Determines if `ignores` fields should be honored.\n         * If true, then all `ignores` fields are honored.\n         * if false, then only `ignores` fields in the baseConfig are honored.\n         * @type {boolean}\n         */\n        this.shouldIgnore = shouldIgnore;\n        Object.defineProperty(this, \"shouldIgnore\", { writable: false });\n    }\n\n    /**\n     * Normalizes the array by calling the superclass method and catching/rethrowing\n     * any ConfigError exceptions with additional details.\n     * @param {any} [context] The context to use to normalize the array.\n     * @returns {Promise<FlatConfigArray>} A promise that resolves when the array is normalized.\n     */\n    normalize(context) {\n        return super.normalize(context)\n            .catch(error => {\n                if (error.name === \"ConfigError\") {\n                    throw wrapConfigErrorWithDetails(error, this[originalLength], this[baseLength]);\n                }\n\n                throw error;\n\n            });\n    }\n\n    /**\n     * Normalizes the array by calling the superclass method and catching/rethrowing\n     * any ConfigError exceptions with additional details.\n     * @param {any} [context] The context to use to normalize the array.\n     * @returns {FlatConfigArray} The current instance.\n     * @throws {TypeError} If the config is invalid.\n     */\n    normalizeSync(context) {\n\n        try {\n\n            return super.normalizeSync(context);\n\n        } catch (error) {\n\n            if (error.name === \"ConfigError\") {\n                throw wrapConfigErrorWithDetails(error, this[originalLength], this[baseLength]);\n            }\n\n            throw error;\n\n        }\n\n    }\n\n    /* eslint-disable class-methods-use-this -- Desired as instance method */\n    /**\n     * Replaces a config with another config to allow us to put strings\n     * in the config array that will be replaced by objects before\n     * normalization.\n     * @param {Object} config The config to preprocess.\n     * @returns {Object} The preprocessed config.\n     */\n    [ConfigArraySymbol.preprocessConfig](config) {\n\n        /*\n         * If a config object has `ignores` and no other non-meta fields, then it's an object\n         * for global ignores. If `shouldIgnore` is false, that object shouldn't apply,\n         * so we'll remove its `ignores`.\n         */\n        if (\n            !this.shouldIgnore &&\n            !this[originalBaseConfig].includes(config) &&\n            config.ignores &&\n            Object.keys(config).filter(key => !META_FIELDS.has(key)).length === 1\n        ) {\n            /* eslint-disable-next-line no-unused-vars -- need to strip off other keys */\n            const { ignores, ...otherKeys } = config;\n\n            return otherKeys;\n        }\n\n        return config;\n    }\n\n    /**\n     * Finalizes the config by replacing plugin references with their objects\n     * and validating rule option schemas.\n     * @param {Object} config The config to finalize.\n     * @returns {Object} The finalized config.\n     * @throws {TypeError} If the config is invalid.\n     */\n    [ConfigArraySymbol.finalizeConfig](config) {\n        return new Config(config);\n    }\n    /* eslint-enable class-methods-use-this -- Desired as instance method */\n\n}\n\nexports.FlatConfigArray = FlatConfigArray;\n"
        }
    ]
}