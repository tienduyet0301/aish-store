{
    "sourceFile": "node_modules/eslint/lib/shared/deep-merge-arrays.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892241872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Applies default rule options\n * @author JoshuaKGoldberg\n */\n\n\"use strict\";\n\n/**\n * Check if the variable contains an object strictly rejecting arrays\n * @param {unknown} value an object\n * @returns {boolean} Whether value is an object\n */\nfunction isObjectNotArray(value) {\n    return typeof value === \"object\" && value !== null && !Array.isArray(value);\n}\n\n/**\n * Deeply merges second on top of first, creating a new {} object if needed.\n * @param {T} first Base, default value.\n * @param {U} second User-specified value.\n * @returns {T | U | (T & U)} Merged equivalent of second on top of first.\n */\nfunction deepMergeObjects(first, second) {\n    if (second === void 0) {\n        return first;\n    }\n\n    if (!isObjectNotArray(first) || !isObjectNotArray(second)) {\n        return second;\n    }\n\n    const result = { ...first, ...second };\n\n    for (const key of Object.keys(second)) {\n        if (Object.prototype.propertyIsEnumerable.call(first, key)) {\n            result[key] = deepMergeObjects(first[key], second[key]);\n        }\n    }\n\n    return result;\n}\n\n/**\n * Deeply merges second on top of first, creating a new [] array if needed.\n * @param {T[]} first Base, default values.\n * @param {U[]} second User-specified values.\n * @returns {(T | U | (T & U))[]} Merged equivalent of second on top of first.\n */\nfunction deepMergeArrays(first, second) {\n    if (!first || !second) {\n        return second || first || [];\n    }\n\n    return [\n        ...first.map((value, i) => deepMergeObjects(value, i < second.length ? second[i] : void 0)),\n        ...second.slice(first.length)\n    ];\n}\n\nmodule.exports = { deepMergeArrays };\n"
        }
    ]
}