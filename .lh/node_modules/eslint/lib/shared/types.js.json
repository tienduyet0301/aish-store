{
    "sourceFile": "node_modules/eslint/lib/shared/types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Define common types for input completion.\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\n/** @type {any} */\nmodule.exports = {};\n\n/** @typedef {boolean | \"off\" | \"readable\" | \"readonly\" | \"writable\" | \"writeable\"} GlobalConf */\n/** @typedef {0 | 1 | 2 | \"off\" | \"warn\" | \"error\"} SeverityConf */\n/** @typedef {SeverityConf | [SeverityConf, ...any[]]} RuleConf */\n\n/**\n * @typedef {Object} EcmaFeatures\n * @property {boolean} [globalReturn] Enabling `return` statements at the top-level.\n * @property {boolean} [jsx] Enabling JSX syntax.\n * @property {boolean} [impliedStrict] Enabling strict mode always.\n */\n\n/**\n * @typedef {Object} ParserOptions\n * @property {EcmaFeatures} [ecmaFeatures] The optional features.\n * @property {3|5|6|7|8|9|10|11|12|13|14|15|16|2015|2016|2017|2018|2019|2020|2021|2022|2023|2024|2025} [ecmaVersion] The ECMAScript version (or revision number).\n * @property {\"script\"|\"module\"} [sourceType] The source code type.\n * @property {boolean} [allowReserved] Allowing the use of reserved words as identifiers in ES3.\n */\n\n/**\n * @typedef {Object} LanguageOptions\n * @property {number|\"latest\"} [ecmaVersion] The ECMAScript version (or revision number).\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {\"script\"|\"module\"|\"commonjs\"} [sourceType] The source code type.\n * @property {string|Object} [parser] The parser to use.\n * @property {Object} [parserOptions] The parser options to use.\n */\n\n/**\n * @typedef {Object} ConfigData\n * @property {Record<string, boolean>} [env] The environment settings.\n * @property {string | string[]} [extends] The path to other config files or the package name of shareable configs.\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {string | string[]} [ignorePatterns] The glob patterns that ignore to lint.\n * @property {boolean} [noInlineConfig] The flag that disables directive comments.\n * @property {OverrideConfigData[]} [overrides] The override settings per kind of files.\n * @property {string} [parser] The path to a parser or the package name of a parser.\n * @property {ParserOptions} [parserOptions] The parser options.\n * @property {string[]} [plugins] The plugin specifiers.\n * @property {string} [processor] The processor specifier.\n * @property {boolean} [reportUnusedDisableDirectives] The flag to report unused `eslint-disable` comments.\n * @property {boolean} [root] The root flag.\n * @property {Record<string, RuleConf>} [rules] The rule settings.\n * @property {Object} [settings] The shared settings.\n */\n\n/**\n * @typedef {Object} OverrideConfigData\n * @property {Record<string, boolean>} [env] The environment settings.\n * @property {string | string[]} [excludedFiles] The glob patterns for excluded files.\n * @property {string | string[]} [extends] The path to other config files or the package name of shareable configs.\n * @property {string | string[]} files The glob patterns for target files.\n * @property {Record<string, GlobalConf>} [globals] The global variable settings.\n * @property {boolean} [noInlineConfig] The flag that disables directive comments.\n * @property {OverrideConfigData[]} [overrides] The override settings per kind of files.\n * @property {string} [parser] The path to a parser or the package name of a parser.\n * @property {ParserOptions} [parserOptions] The parser options.\n * @property {string[]} [plugins] The plugin specifiers.\n * @property {string} [processor] The processor specifier.\n * @property {boolean} [reportUnusedDisableDirectives] The flag to report unused `eslint-disable` comments.\n * @property {Record<string, RuleConf>} [rules] The rule settings.\n * @property {Object} [settings] The shared settings.\n */\n\n/**\n * @typedef {Object} ParseResult\n * @property {Object} ast The AST.\n * @property {ScopeManager} [scopeManager] The scope manager of the AST.\n * @property {Record<string, any>} [services] The services that the parser provides.\n * @property {Record<string, string[]>} [visitorKeys] The visitor keys of the AST.\n */\n\n/**\n * @typedef {Object} Parser\n * @property {(text:string, options:ParserOptions) => Object} parse The definition of global variables.\n * @property {(text:string, options:ParserOptions) => ParseResult} [parseForESLint] The parser options that will be enabled under this environment.\n */\n\n/**\n * @typedef {Object} Environment\n * @property {Record<string, GlobalConf>} [globals] The definition of global variables.\n * @property {ParserOptions} [parserOptions] The parser options that will be enabled under this environment.\n */\n\n/**\n * @typedef {Object} LintMessage\n * @property {number|undefined} column The 1-based column number.\n * @property {number} [endColumn] The 1-based column number of the end location.\n * @property {number} [endLine] The 1-based line number of the end location.\n * @property {boolean} [fatal] If `true` then this is a fatal error.\n * @property {{range:[number,number], text:string}} [fix] Information for autofix.\n * @property {number|undefined} line The 1-based line number.\n * @property {string} message The error message.\n * @property {string} [messageId] The ID of the message in the rule's meta.\n * @property {(string|null)} nodeType Type of node\n * @property {string|null} ruleId The ID of the rule which makes this message.\n * @property {0|1|2} severity The severity of this message.\n * @property {Array<{desc?: string, messageId?: string, fix: {range: [number, number], text: string}}>} [suggestions] Information for suggestions.\n */\n\n/**\n * @typedef {Object} SuppressedLintMessage\n * @property {number|undefined} column The 1-based column number.\n * @property {number} [endColumn] The 1-based column number of the end location.\n * @property {number} [endLine] The 1-based line number of the end location.\n * @property {boolean} [fatal] If `true` then this is a fatal error.\n * @property {{range:[number,number], text:string}} [fix] Information for autofix.\n * @property {number|undefined} line The 1-based line number.\n * @property {string} message The error message.\n * @property {string} [messageId] The ID of the message in the rule's meta.\n * @property {(string|null)} nodeType Type of node\n * @property {string|null} ruleId The ID of the rule which makes this message.\n * @property {0|1|2} severity The severity of this message.\n * @property {Array<{kind: string, justification: string}>} suppressions The suppression info.\n * @property {Array<{desc?: string, messageId?: string, fix: {range: [number, number], text: string}}>} [suggestions] Information for suggestions.\n */\n\n/**\n * @typedef {Object} SuggestionResult\n * @property {string} desc A short description.\n * @property {string} [messageId] Id referencing a message for the description.\n * @property {{ text: string, range: number[] }} fix fix result info\n */\n\n/**\n * @typedef {Object} Processor\n * @property {(text:string, filename:string) => Array<string | { text:string, filename:string }>} [preprocess] The function to extract code blocks.\n * @property {(messagesList:LintMessage[][], filename:string) => LintMessage[]} [postprocess] The function to merge messages.\n * @property {boolean} [supportsAutofix] If `true` then it means the processor supports autofix.\n */\n\n/**\n * @typedef {Object} RuleMetaDocs\n * @property {string} description The description of the rule.\n * @property {boolean} recommended If `true` then the rule is included in `eslint:recommended` preset.\n * @property {string} url The URL of the rule documentation.\n */\n\n/**\n * @typedef {Object} DeprecatedInfo\n * @property {string} [message] General message presented to the user\n * @property {string} [url] URL to more information about this deprecation in general\n * @property {ReplacedByInfo[]} [replacedBy] Potential replacements for the rule\n * @property {string} [deprecatedSince] Version since the rule is deprecated\n * @property {?string} [availableUntil] Version until it is available or null if indefinite\n */\n\n/**\n * @typedef {Object} ReplacedByInfo\n * @property {string} [message] General message presented to the user\n * @property {string} [url] URL to more information about this replacement in general\n * @property {{ name?: string, url?: string }} [plugin] Use \"eslint\" for a core rule. Omit if the rule is in the same plugin.\n * @property {{ name?: string, url?: string }} [rule] Name and information of the replacement rule\n */\n\n/**\n * @typedef {Object} RuleMeta\n * @property {boolean|DeprecatedInfo} [deprecated] If `true` then the rule has been deprecated.\n * @property {Array} [defaultOptions] Default options for the rule.\n * @property {RuleMetaDocs} docs The document information of the rule.\n * @property {\"code\"|\"whitespace\"} [fixable] The autofix type.\n * @property {boolean} [hasSuggestions] If `true` then the rule provides suggestions.\n * @property {Record<string,string>} [messages] The messages the rule reports.\n * @property {string[]} [replacedBy] The IDs of the alternative rules.\n * @property {Array|Object} schema The option schema of the rule.\n * @property {\"problem\"|\"suggestion\"|\"layout\"} type The rule type.\n */\n\n/**\n * @typedef {Object} Rule\n * @property {Function} create The factory of the rule.\n * @property {RuleMeta} meta The meta data of the rule.\n */\n\n/**\n * @typedef {Object} Plugin\n * @property {Record<string, ConfigData>} [configs] The definition of plugin configs.\n * @property {Record<string, Environment>} [environments] The definition of plugin environments.\n * @property {Record<string, Processor>} [processors] The definition of plugin processors.\n * @property {Record<string, Rule>} [rules] The definition of plugin rules.\n */\n\n/**\n * Information of deprecated rules.\n * @typedef {Object} DeprecatedRuleInfo\n * @property {string} ruleId The rule ID.\n * @property {string[]} replacedBy The rule IDs that replace this deprecated rule.\n * @property {DeprecatedInfo} [info] The raw deprecated info provided by rule. Unset if `deprecated` is a boolean.\n */\n\n/**\n * A linting result.\n * @typedef {Object} LintResult\n * @property {string} filePath The path to the file that was linted.\n * @property {LintMessage[]} messages All of the messages for the result.\n * @property {SuppressedLintMessage[]} suppressedMessages All of the suppressed messages for the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} fatalErrorCount Number of fatal errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {Stats} [stats] The performance statistics collected with the `stats` flag.\n * @property {string} [source] The source code of the file that was linted.\n * @property {string} [output] The source code of the file that was linted, with as many fixes applied as possible.\n * @property {DeprecatedRuleInfo[]} usedDeprecatedRules The list of used deprecated rules.\n */\n\n/**\n * Performance statistics\n * @typedef {Object} Stats\n * @property {number} fixPasses The number of times ESLint has applied at least one fix after linting.\n * @property {Times} times The times spent on (parsing, fixing, linting) a file.\n */\n\n/**\n * Performance Times for each ESLint pass\n * @typedef {Object} Times\n * @property {TimePass[]} passes Time passes\n */\n\n/**\n * @typedef {Object} TimePass\n * @property {ParseTime} parse The parse object containing all parse time information.\n * @property {Record<string, RuleTime>} [rules] The rules object containing all lint time information for each rule.\n * @property {FixTime} fix The parse object containing all fix time information.\n * @property {number} total The total time that is spent on (parsing, fixing, linting) a file.\n */\n/**\n * @typedef {Object} ParseTime\n * @property {number} total The total time that is spent when parsing a file.\n */\n/**\n * @typedef {Object} RuleTime\n * @property {number} total The total time that is spent on a rule.\n */\n/**\n * @typedef {Object} FixTime\n * @property {number} total The total time that is spent on applying fixes to the code.\n */\n\n/**\n * Information provided when the maximum warning threshold is exceeded.\n * @typedef {Object} MaxWarningsExceeded\n * @property {number} maxWarnings Number of warnings to trigger nonzero exit code.\n * @property {number} foundWarnings Number of warnings found while linting.\n */\n\n/**\n * Metadata about results for formatters.\n * @typedef {Object} ResultsMeta\n * @property {MaxWarningsExceeded} [maxWarningsExceeded] Present if the maxWarnings threshold was exceeded.\n */\n\n/**\n * A formatter function.\n * @callback FormatterFunction\n * @param {LintResult[]} results The list of linting results.\n * @param {{cwd: string, maxWarningsExceeded?: MaxWarningsExceeded, rulesMeta: Record<string, RuleMeta>}} context A context object.\n * @returns {string | Promise<string>} Formatted text.\n */\n"
        }
    ]
}