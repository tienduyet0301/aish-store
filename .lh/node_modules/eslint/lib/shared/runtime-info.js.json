{
    "sourceFile": "node_modules/eslint/lib/shared/runtime-info.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892242112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Utility to get information about the execution environment.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst path = require(\"node:path\");\nconst spawn = require(\"cross-spawn\");\nconst os = require(\"node:os\");\nconst log = require(\"../shared/logging\");\nconst packageJson = require(\"../../package.json\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Generates and returns execution environment information.\n * @returns {string} A string that contains execution environment information.\n */\nfunction environment() {\n    const cache = new Map();\n\n    /**\n     * Checks if a path is a child of a directory.\n     * @param {string} parentPath The parent path to check.\n     * @param {string} childPath The path to check.\n     * @returns {boolean} Whether or not the given path is a child of a directory.\n     */\n    function isChildOfDirectory(parentPath, childPath) {\n        return !path.relative(parentPath, childPath).startsWith(\"..\");\n    }\n\n    /**\n     * Synchronously executes a shell command and formats the result.\n     * @param {string} cmd The command to execute.\n     * @param {Array} args The arguments to be executed with the command.\n     * @throws {Error} As may be collected by `cross-spawn.sync`.\n     * @returns {string} The version returned by the command.\n     */\n    function execCommand(cmd, args) {\n        const key = [cmd, ...args].join(\" \");\n\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n\n        const process = spawn.sync(cmd, args, { encoding: \"utf8\" });\n\n        if (process.error) {\n            throw process.error;\n        }\n\n        const result = process.stdout.trim();\n\n        cache.set(key, result);\n        return result;\n    }\n\n    /**\n     * Normalizes a version number.\n     * @param {string} versionStr The string to normalize.\n     * @returns {string} The normalized version number.\n     */\n    function normalizeVersionStr(versionStr) {\n        return versionStr.startsWith(\"v\") ? versionStr : `v${versionStr}`;\n    }\n\n    /**\n     * Gets bin version.\n     * @param {string} bin The bin to check.\n     * @throws {Error} As may be collected by `cross-spawn.sync`.\n     * @returns {string} The normalized version returned by the command.\n     */\n    function getBinVersion(bin) {\n        const binArgs = [\"--version\"];\n\n        try {\n            return normalizeVersionStr(execCommand(bin, binArgs));\n        } catch (e) {\n            log.error(`Error finding ${bin} version running the command \\`${bin} ${binArgs.join(\" \")}\\``);\n            throw e;\n        }\n    }\n\n    /**\n     * Gets installed npm package version.\n     * @param {string} pkg The package to check.\n     * @param {boolean} global Whether to check globally or not.\n     * @throws {Error} As may be collected by `cross-spawn.sync`.\n     * @returns {string} The normalized version returned by the command.\n     */\n    function getNpmPackageVersion(pkg, { global = false } = {}) {\n        const npmBinArgs = [\"bin\", \"-g\"];\n        const npmLsArgs = [\"ls\", \"--depth=0\", \"--json\", pkg];\n\n        if (global) {\n            npmLsArgs.push(\"-g\");\n        }\n\n        try {\n            const parsedStdout = JSON.parse(execCommand(\"npm\", npmLsArgs));\n\n            /*\n             * Checking globally returns an empty JSON object, while local checks\n             * include the name and version of the local project.\n             */\n            if (Object.keys(parsedStdout).length === 0 || !(parsedStdout.dependencies && parsedStdout.dependencies.eslint)) {\n                return \"Not found\";\n            }\n\n            const [, processBinPath] = process.argv;\n            let npmBinPath;\n\n            try {\n                npmBinPath = execCommand(\"npm\", npmBinArgs);\n            } catch (e) {\n                log.error(`Error finding npm binary path when running command \\`npm ${npmBinArgs.join(\" \")}\\``);\n                throw e;\n            }\n\n            const isGlobal = isChildOfDirectory(npmBinPath, processBinPath);\n            let pkgVersion = parsedStdout.dependencies.eslint.version;\n\n            if ((global && isGlobal) || (!global && !isGlobal)) {\n                pkgVersion += \" (Currently used)\";\n            }\n\n            return normalizeVersionStr(pkgVersion);\n        } catch (e) {\n            log.error(`Error finding ${pkg} version running the command \\`npm ${npmLsArgs.join(\" \")}\\``);\n            throw e;\n        }\n    }\n\n    return [\n        \"Environment Info:\",\n        \"\",\n        `Node version: ${getBinVersion(\"node\")}`,\n        `npm version: ${getBinVersion(\"npm\")}`,\n        `Local ESLint version: ${getNpmPackageVersion(\"eslint\", { global: false })}`,\n        `Global ESLint version: ${getNpmPackageVersion(\"eslint\", { global: true })}`,\n        `Operating System: ${os.platform()} ${os.release()}`\n    ].join(\"\\n\");\n}\n\n/**\n * Returns version of currently executing ESLint.\n * @returns {string} The version from the currently executing ESLint's package.json.\n */\nfunction version() {\n    return `v${packageJson.version}`;\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    __esModule: true, // Indicate intent for imports, remove ambiguity for Knip (see: https://github.com/eslint/eslint/pull/18005#discussion_r1484422616)\n    environment,\n    version\n};\n"
        }
    ]
}