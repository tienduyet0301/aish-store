{
    "sourceFile": "node_modules/eslint/lib/services/parser-service.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892241603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview ESLint Parser\n * @author Nicholas C. Zakas\n */\n/* eslint class-methods-use-this: off -- Anticipate future constructor arguments. */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Types\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../linter/vfile.js\").VFile} VFile */\n/** @typedef {import(\"@eslint/core\").Language} Language */\n/** @typedef {import(\"@eslint/core\").LanguageOptions} LanguageOptions */\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * The parser for ESLint.\n */\nclass ParserService {\n\n    /**\n     * Parses the given file synchronously.\n     * @param {VFile} file The file to parse.\n     * @param {{language:Language,languageOptions:LanguageOptions}} config The configuration to use.\n     * @returns {Object} An object with the parsed source code or errors.\n     * @throws {Error} If the parser returns a promise.\n     */\n    parseSync(file, config) {\n\n        const { language, languageOptions } = config;\n        const result = language.parse(file, { languageOptions });\n\n        if (typeof result.then === \"function\") {\n            throw new Error(\"Unsupported: Language parser returned a promise.\");\n        }\n\n        if (result.ok) {\n            return {\n                ok: true,\n                sourceCode: language.createSourceCode(file, result, { languageOptions })\n            };\n        }\n\n        // if we made it to here there was an error\n        return {\n            ok: false,\n            errors: result.errors.map(error => ({\n                ruleId: null,\n                nodeType: null,\n                fatal: true,\n                severity: 2,\n                message: `Parsing error: ${error.message}`,\n                line: error.line,\n                column: error.column\n            }))\n        };\n    }\n}\n\nmodule.exports = { ParserService };\n"
        }
    ]
}