{
    "sourceFile": "node_modules/eslint/lib/services/processor-service.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892241659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview ESLint Processor Service\n * @author Nicholas C. Zakas\n */\n/* eslint class-methods-use-this: off -- Anticipate future constructor arguments. */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst path = require(\"node:path\");\nconst { VFile } = require(\"../linter/vfile.js\");\n\n//-----------------------------------------------------------------------------\n// Types\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../shared/types.js\").LintMessage} LintMessage */\n/** @typedef {import(\"../linter/vfile.js\").VFile} VFile */\n/** @typedef {import(\"@eslint/core\").Language} Language */\n/** @typedef {import(\"@eslint/core\").LanguageOptions} LanguageOptions */\n/** @typedef {import(\"eslint\").Linter.Processor} Processor */\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * The service that applies processors to files.\n */\nclass ProcessorService {\n\n    /**\n     * Preprocesses the given file synchronously.\n     * @param {VFile} file The file to preprocess.\n     * @param {{processor:Processor}} config The configuration to use.\n     * @returns {{ok:boolean, files?: Array<VFile>, errors?: Array<LintMessage>}} An array of preprocessed files or errors.\n     * @throws {Error} If the preprocessor returns a promise.\n     */\n    preprocessSync(file, config) {\n\n        const { processor } = config;\n        let blocks;\n\n        try {\n            blocks = processor.preprocess(file.rawBody, file.path);\n        } catch (ex) {\n\n            // If the message includes a leading line number, strip it:\n            const message = `Preprocessing error: ${ex.message.replace(/^line \\d+:/iu, \"\").trim()}`;\n\n            return {\n                ok: false,\n                errors: [\n                    {\n                        ruleId: null,\n                        fatal: true,\n                        severity: 2,\n                        message,\n                        line: ex.lineNumber,\n                        column: ex.column,\n                        nodeType: null\n                    }\n                ]\n            };\n        }\n\n        if (typeof blocks.then === \"function\") {\n            throw new Error(\"Unsupported: Preprocessor returned a promise.\");\n        }\n\n        return {\n            ok: true,\n            files: blocks.map((block, i) => {\n\n                // Legacy behavior: return the block as a string\n                if (typeof block === \"string\") {\n                    return block;\n                }\n\n                const filePath = path.join(file.path, `${i}_${block.filename}`);\n\n                return new VFile(filePath, block.text, {\n                    physicalPath: file.physicalPath\n                });\n            })\n        };\n\n    }\n\n    /**\n     * Postprocesses the given messages synchronously.\n     * @param {VFile} file The file to postprocess.\n     * @param {LintMessage[][]} messages The messages to postprocess.\n     * @param {{processor:Processor}} config The configuration to use.\n     * @returns {LintMessage[]} The postprocessed messages.\n     */\n    postprocessSync(file, messages, config) {\n\n        const { processor } = config;\n\n        return processor.postprocess(messages, file.path);\n    }\n\n}\n\nmodule.exports = { ProcessorService };\n"
        }
    ]
}