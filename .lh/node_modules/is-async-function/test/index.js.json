{
    "sourceFile": "node_modules/is-async-function/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892327455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\n/* globals window */\n\nvar test = require('tape');\nvar isAsyncFunction = require('../index');\nvar generatorFuncs = require('make-generator-function')();\nvar asyncFuncs = require('make-async-function').list();\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar forEach = require('for-each');\n\ntest('returns false for non-functions', function (t) {\n\tvar nonFuncs = [\n\t\ttrue,\n\t\tfalse,\n\t\tnull,\n\t\tundefined,\n\t\t{},\n\t\t[],\n\t\t/a/g,\n\t\t'string',\n\t\t42,\n\t\tnew Date()\n\t];\n\tt.plan(nonFuncs.length);\n\tforEach(nonFuncs, function (nonFunc) {\n\t\tt.notOk(isAsyncFunction(nonFunc), nonFunc + ' is not a function');\n\t});\n\tt.end();\n});\n\ntest('returns false for non-async functions', function (t) {\n\tvar func = function () {};\n\tt.notOk(isAsyncFunction(func), 'anonymous function is not an async function');\n\n\tvar namedFunc = function foo() {};\n\tt.notOk(isAsyncFunction(namedFunc), 'named function is not an async function');\n\n\tif (typeof window === 'undefined') {\n\t\tt.skip('window.alert is not an async function');\n\t} else {\n\t\tt.notOk(isAsyncFunction(window.alert), 'window.alert is not an async function');\n\t}\n\tt.end();\n});\n\nvar fakeToString = function () { return 'async function () { return \"TOTALLY REAL I SWEAR!\"; }'; };\n\ntest('returns false for non-async function with faked toString', function (t) {\n\tvar func = function () {};\n\tfunc.toString = fakeToString;\n\n\tt.notEqual(String(func), Function.prototype.toString.apply(func), 'faked toString is not real toString');\n\tt.notOk(isAsyncFunction(func), 'anonymous function with faked toString is not an async function');\n\tt.end();\n});\n\ntest('returns false for generator functions', function (t) {\n\tif (generatorFuncs.length > 0) {\n\t\tforEach(generatorFuncs, function (generatorFunc) {\n\t\t\tt.notOk(isAsyncFunction(generatorFunc), generatorFunc + ' is not async function');\n\t\t});\n\t} else {\n\t\tt.skip('generator function is not async function - this environment does not support ES6 generator functions. Please use an engine that supports them.');\n\t}\n\tt.end();\n});\n\ntest('returns false for non-async function with faked @@toStringTag', { skip: !hasToStringTag || asyncFuncs.length === 0 }, function (t) {\n\tvar asyncFunc = asyncFuncs[0];\n\t/** @type {{ toString(): unknown; valueOf(): unknown; [Symbol.toStringTag]?: unknown }} */\n\tvar fakeAsyncFunction = {\n\t\ttoString: function () { return String(asyncFunc); },\n\t\tvalueOf: function () { return asyncFunc; }\n\t};\n\tfakeAsyncFunction[Symbol.toStringTag] = 'AsyncFunction';\n\tt.notOk(isAsyncFunction(fakeAsyncFunction), 'fake AsyncFunction with @@toStringTag \"AsyncFunction\" is not an async function');\n\tt.end();\n});\n\ntest('returns true for async functions', function (t) {\n\tif (asyncFuncs.length > 0) {\n\t\tforEach(asyncFuncs, function (asyncFunc) {\n\t\t\tt.ok(isAsyncFunction(asyncFunc), asyncFunc + ' is async function');\n\t\t});\n\t} else {\n\t\tt.skip('async function is async function - this environment does not support ES2018 async functions. Please use an engine that supports them.');\n\t}\n\tt.end();\n});\n"
        }
    ]
}