{
    "sourceFile": "node_modules/graphemer/lib/Graphemer.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892321570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import GraphemerIterator from './GraphemerIterator';\nexport default class Graphemer {\n    /**\n     * Returns the next grapheme break in the string after the given index\n     * @param string {string}\n     * @param index {number}\n     * @returns {number}\n     */\n    static nextBreak(string: string, index: number): number;\n    /**\n     * Breaks the given string into an array of grapheme clusters\n     * @param str {string}\n     * @returns {string[]}\n     */\n    splitGraphemes(str: string): string[];\n    /**\n     * Returns an iterator of grapheme clusters in the given string\n     * @param str {string}\n     * @returns {GraphemerIterator}\n     */\n    iterateGraphemes(str: string): GraphemerIterator;\n    /**\n     * Returns the number of grapheme clusters in the given string\n     * @param str {string}\n     * @returns {number}\n     */\n    countGraphemes(str: string): number;\n    /**\n     * Given a Unicode code point, determines this symbol's grapheme break property\n     * @param code {number} Unicode code point\n     * @returns {number}\n     */\n    static getGraphemeBreakProperty(code: number): number;\n    /**\n     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break\n     * @param code {number} Unicode code point\n     * @returns {number}\n     */\n    static getEmojiProperty(code: number): number;\n}\n//# sourceMappingURL=Graphemer.d.ts.map"
        }
    ]
}