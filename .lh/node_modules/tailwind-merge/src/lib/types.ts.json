{
    "sourceFile": "node_modules/tailwind-merge/src/lib/types.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893046989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Type the tailwind-merge configuration adheres to.\n */\nexport interface Config<ClassGroupIds extends string, ThemeGroupIds extends string>\n    extends ConfigStaticPart,\n        ConfigGroupsPart<ClassGroupIds, ThemeGroupIds> {}\n\n/**\n * The static part of the tailwind-merge configuration. When merging multiple configurations, the properties of this interface are always overridden.\n */\ninterface ConfigStaticPart {\n    /**\n     * Integer indicating size of LRU cache used for memoizing results.\n     * - Cache might be up to twice as big as `cacheSize`\n     * - No cache is used for values <= 0\n     */\n    cacheSize: number\n    /**\n     * Prefix added to Tailwind-generated classes\n     * @see https://tailwindcss.com/docs/configuration#prefix\n     */\n    prefix?: string\n    /**\n     * Allows to customize parsing of individual classes passed to `twMerge`.\n     * All classes passed to `twMerge` outside of cache hits are passed to this function before it is determined whether the class is a valid Tailwind CSS class.\n     *\n     * This is an experimental feature and may introduce breaking changes in any minor version update.\n     */\n    experimentalParseClassName?(param: ExperimentalParseClassNameParam): ParsedClassName\n}\n\n/**\n * Type of param passed to the `experimentalParseClassName` function.\n *\n * This is an experimental feature and may introduce breaking changes in any minor version update.\n */\nexport interface ExperimentalParseClassNameParam {\n    className: string\n    parseClassName(className: string): ParsedClassName\n}\n\n/**\n * Type of the result returned by the `experimentalParseClassName` function.\n *\n * This is an experimental feature and may introduce breaking changes in any minor version update.\n */\nexport interface ParsedClassName {\n    /**\n     * Whether the class is external and merging logic should be sipped.\n     *\n     * If this is `true`, the class will be treated as if it wasn't a Tailwind class and will be passed through as is.\n     */\n    isExternal?: boolean\n    /**\n     * Modifiers of the class in the order they appear in the class.\n     *\n     * @example ['hover', 'dark'] // for `hover:dark:bg-gray-100`\n     */\n    modifiers: string[]\n    /**\n     * Whether the class has an `!important` modifier.\n     *\n     * @example true // for `hover:dark:!bg-gray-100`\n     */\n    hasImportantModifier: boolean\n    /**\n     * Base class without preceding modifiers.\n     *\n     * @example 'bg-gray-100' // for `hover:dark:bg-gray-100`\n     */\n    baseClassName: string\n    /**\n     * Index position of a possible postfix modifier in the class.\n     * If the class has no postfix modifier, this is `undefined`.\n     *\n     * This property is prefixed with \"maybe\" because tailwind-merge does not know whether something is a postfix modifier or part of the base class since it's possible to configure Tailwind CSS classes which include a `/` in the base class name.\n     *\n     * If a `maybePostfixModifierPosition` is present, tailwind-merge first tries to match the `baseClassName` without the possible postfix modifier to a class group. If that fails, it tries again with the possible postfix modifier.\n     *\n     * @example 11 // for `bg-gray-100/50`\n     */\n    maybePostfixModifierPosition: number | undefined\n}\n\n/**\n * The dynamic part of the tailwind-merge configuration. When merging multiple configurations, the user can choose to either override or extend the properties of this interface.\n */\ninterface ConfigGroupsPart<ClassGroupIds extends string, ThemeGroupIds extends string> {\n    /**\n     * Theme scales used in classGroups.\n     *\n     * The keys are the same as in the Tailwind config but the values are sometimes defined more broadly.\n     */\n    theme: NoInfer<ThemeObject<ThemeGroupIds>>\n    /**\n     * Object with groups of classes.\n     *\n     * @example\n     * {\n     *     // Creates group of classes `group`, `of` and `classes`\n     *     'group-id': ['group', 'of', 'classes'],\n     *     // Creates group of classes `look-at-me-other` and `look-at-me-group`.\n     *     'other-group': [{ 'look-at-me': ['other', 'group']}]\n     * }\n     */\n    classGroups: NoInfer<Record<ClassGroupIds, ClassGroup<ThemeGroupIds>>>\n    /**\n     * Conflicting classes across groups.\n     *\n     * The key is the ID of a class group which creates a conflict, values are IDs of class groups which receive a conflict. That means if a class from from the key ID is present, all preceding classes from the values are removed.\n     *\n     * A class group ID is the key of a class group in the classGroups object.\n     *\n     * @example { gap: ['gap-x', 'gap-y'] }\n     */\n    conflictingClassGroups: NoInfer<Partial<Record<ClassGroupIds, readonly ClassGroupIds[]>>>\n    /**\n     * Postfix modifiers conflicting with other class groups.\n     *\n     * A class group ID is the key of a class group in classGroups object.\n     *\n     * @example { 'font-size': ['leading'] }\n     */\n    conflictingClassGroupModifiers: NoInfer<\n        Partial<Record<ClassGroupIds, readonly ClassGroupIds[]>>\n    >\n    /**\n     * Modifiers whose order among multiple modifiers should be preserved because their order changes which element gets targeted.\n     *\n     * tailwind-merge makes sure that classes with these modifiers are not overwritten by classes with the same modifiers with order-sensitive modifiers being in a different position.\n     */\n    orderSensitiveModifiers: string[]\n}\n\n/**\n * Type of the configuration object that can be passed to `extendTailwindMerge`.\n */\nexport interface ConfigExtension<ClassGroupIds extends string, ThemeGroupIds extends string>\n    extends Partial<ConfigStaticPart> {\n    override?: PartialPartial<ConfigGroupsPart<ClassGroupIds, ThemeGroupIds>>\n    extend?: PartialPartial<ConfigGroupsPart<ClassGroupIds, ThemeGroupIds>>\n}\n\ntype PartialPartial<T> = {\n    [P in keyof T]?: T[P] extends any[] ? T[P] : Partial<T[P]>\n}\n\nexport type ThemeObject<ThemeGroupIds extends string> = Record<\n    ThemeGroupIds,\n    ClassGroup<ThemeGroupIds>\n>\nexport type ClassGroup<ThemeGroupIds extends string> = readonly ClassDefinition<ThemeGroupIds>[]\ntype ClassDefinition<ThemeGroupIds extends string> =\n    | string\n    | ClassValidator\n    | ThemeGetter\n    | ClassObject<ThemeGroupIds>\nexport type ClassValidator = (classPart: string) => boolean\nexport interface ThemeGetter {\n    (theme: ThemeObject<AnyThemeGroupIds>): ClassGroup<AnyClassGroupIds>\n    isThemeGetter: true\n}\ntype ClassObject<ThemeGroupIds extends string> = Record<\n    string,\n    readonly ClassDefinition<ThemeGroupIds>[]\n>\n\n/**\n * Hack from https://stackoverflow.com/questions/56687668/a-way-to-disable-type-argument-inference-in-generics/56688073#56688073\n *\n * Could be replaced with NoInfer utility type from TypeScript (https://www.typescriptlang.org/docs/handbook/utility-types.html#noinfertype), but that is only supported in TypeScript 5.4 or higher, so I should wait some time before using it.\n */\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\n/**\n * Theme group IDs included in the default configuration of tailwind-merge.\n *\n * If you want to use a scale that is not supported in the `ThemeObject` type,\n * consider using `classGroups` instead of `theme`.\n *\n * @see https://github.com/dcastil/tailwind-merge/blob/main/docs/configuration.md#theme\n *      (the list of supported keys may vary between `tailwind-merge` versions)\n */\nexport type DefaultThemeGroupIds =\n    | 'animate'\n    | 'aspect'\n    | 'blur'\n    | 'breakpoint'\n    | 'color'\n    | 'container'\n    | 'drop-shadow'\n    | 'ease'\n    | 'font-weight'\n    | 'font'\n    | 'inset-shadow'\n    | 'leading'\n    | 'perspective'\n    | 'radius'\n    | 'shadow'\n    | 'spacing'\n    | 'text'\n    | 'text-shadow'\n    | 'tracking'\n\n/**\n * Class group IDs included in the default configuration of tailwind-merge.\n */\nexport type DefaultClassGroupIds =\n    | 'accent'\n    | 'align-content'\n    | 'align-items'\n    | 'align-self'\n    | 'animate'\n    | 'appearance'\n    | 'aspect'\n    | 'auto-cols'\n    | 'auto-rows'\n    | 'backdrop-blur'\n    | 'backdrop-brightness'\n    | 'backdrop-contrast'\n    | 'backdrop-filter'\n    | 'backdrop-grayscale'\n    | 'backdrop-hue-rotate'\n    | 'backdrop-invert'\n    | 'backdrop-opacity'\n    | 'backdrop-saturate'\n    | 'backdrop-sepia'\n    | 'backface'\n    | 'basis'\n    | 'bg-attachment'\n    | 'bg-blend'\n    | 'bg-clip'\n    | 'bg-color'\n    | 'bg-image'\n    | 'bg-origin'\n    | 'bg-position'\n    | 'bg-repeat'\n    | 'bg-size'\n    | 'blur'\n    | 'border-collapse'\n    | 'border-color-b'\n    | 'border-color-e'\n    | 'border-color-l'\n    | 'border-color-r'\n    | 'border-color-s'\n    | 'border-color-t'\n    | 'border-color-x'\n    | 'border-color-y'\n    | 'border-color'\n    | 'border-spacing-x'\n    | 'border-spacing-y'\n    | 'border-spacing'\n    | 'border-style'\n    | 'border-w-b'\n    | 'border-w-e'\n    | 'border-w-l'\n    | 'border-w-r'\n    | 'border-w-s'\n    | 'border-w-t'\n    | 'border-w-x'\n    | 'border-w-y'\n    | 'border-w'\n    | 'bottom'\n    | 'box-decoration'\n    | 'box'\n    | 'break-after'\n    | 'break-before'\n    | 'break-inside'\n    | 'break'\n    | 'brightness'\n    | 'caption'\n    | 'caret-color'\n    | 'clear'\n    | 'col-end'\n    | 'col-start-end'\n    | 'col-start'\n    | 'color-scheme'\n    | 'columns'\n    | 'container'\n    | 'content'\n    | 'contrast'\n    | 'cursor'\n    | 'delay'\n    | 'display'\n    | 'divide-color'\n    | 'divide-style'\n    | 'divide-x-reverse'\n    | 'divide-x'\n    | 'divide-y-reverse'\n    | 'divide-y'\n    | 'drop-shadow'\n    | 'drop-shadow-color'\n    | 'duration'\n    | 'ease'\n    | 'end'\n    | 'field-sizing'\n    | 'fill'\n    | 'filter'\n    | 'flex-direction'\n    | 'flex-wrap'\n    | 'flex'\n    | 'float'\n    | 'font-family'\n    | 'font-size'\n    | 'font-smoothing'\n    | 'font-stretch'\n    | 'font-style'\n    | 'font-weight'\n    | 'forced-color-adjust'\n    | 'fvn-figure'\n    | 'fvn-fraction'\n    | 'fvn-normal'\n    | 'fvn-ordinal'\n    | 'fvn-slashed-zero'\n    | 'fvn-spacing'\n    | 'gap-x'\n    | 'gap-y'\n    | 'gap'\n    | 'gradient-from-pos'\n    | 'gradient-from'\n    | 'gradient-to-pos'\n    | 'gradient-to'\n    | 'gradient-via-pos'\n    | 'gradient-via'\n    | 'grayscale'\n    | 'grid-cols'\n    | 'grid-flow'\n    | 'grid-rows'\n    | 'grow'\n    | 'h'\n    | 'hue-rotate'\n    | 'hyphens'\n    | 'indent'\n    | 'inset-ring-color'\n    | 'inset-ring-w'\n    | 'inset-shadow-color'\n    | 'inset-shadow'\n    | 'inset-x'\n    | 'inset-y'\n    | 'inset'\n    | 'invert'\n    | 'isolation'\n    | 'justify-content'\n    | 'justify-items'\n    | 'justify-self'\n    | 'leading'\n    | 'left'\n    | 'line-clamp'\n    | 'list-image'\n    | 'list-style-position'\n    | 'list-style-type'\n    | 'm'\n    | 'mask-clip'\n    | 'mask-composite'\n    | 'mask-image-b-from-color'\n    | 'mask-image-b-from-pos'\n    | 'mask-image-b-to-color'\n    | 'mask-image-b-to-pos'\n    | 'mask-image-conic-from-color'\n    | 'mask-image-conic-from-pos'\n    | 'mask-image-conic-pos'\n    | 'mask-image-conic-to-color'\n    | 'mask-image-conic-to-pos'\n    | 'mask-image-l-from-color'\n    | 'mask-image-l-from-pos'\n    | 'mask-image-l-to-color'\n    | 'mask-image-l-to-pos'\n    | 'mask-image-linear-from-color'\n    | 'mask-image-linear-from-pos'\n    | 'mask-image-linear-pos'\n    | 'mask-image-linear-to-color'\n    | 'mask-image-linear-to-pos'\n    | 'mask-image-r-from-color'\n    | 'mask-image-r-from-pos'\n    | 'mask-image-r-to-color'\n    | 'mask-image-r-to-pos'\n    | 'mask-image-radial-from-color'\n    | 'mask-image-radial-from-pos'\n    | 'mask-image-radial-pos'\n    | 'mask-image-radial-shape'\n    | 'mask-image-radial-size'\n    | 'mask-image-radial-to-color'\n    | 'mask-image-radial-to-pos'\n    | 'mask-image-radial'\n    | 'mask-image-t-from-color'\n    | 'mask-image-t-from-pos'\n    | 'mask-image-t-to-color'\n    | 'mask-image-t-to-pos'\n    | 'mask-image-x-from-color'\n    | 'mask-image-x-from-pos'\n    | 'mask-image-x-to-color'\n    | 'mask-image-x-to-pos'\n    | 'mask-image-y-from-color'\n    | 'mask-image-y-from-pos'\n    | 'mask-image-y-to-color'\n    | 'mask-image-y-to-pos'\n    | 'mask-image'\n    | 'mask-mode'\n    | 'mask-origin'\n    | 'mask-position'\n    | 'mask-repeat'\n    | 'mask-size'\n    | 'mask-type'\n    | 'max-h'\n    | 'max-w'\n    | 'mb'\n    | 'me'\n    | 'min-h'\n    | 'min-w'\n    | 'mix-blend'\n    | 'ml'\n    | 'mr'\n    | 'ms'\n    | 'mt'\n    | 'mx'\n    | 'my'\n    | 'object-fit'\n    | 'object-position'\n    | 'opacity'\n    | 'order'\n    | 'outline-color'\n    | 'outline-offset'\n    | 'outline-style'\n    | 'outline-w'\n    | 'overflow-x'\n    | 'overflow-y'\n    | 'overflow'\n    | 'overscroll-x'\n    | 'overscroll-y'\n    | 'overscroll'\n    | 'p'\n    | 'pb'\n    | 'pe'\n    | 'perspective-origin'\n    | 'perspective'\n    | 'pl'\n    | 'place-content'\n    | 'place-items'\n    | 'place-self'\n    | 'placeholder-color'\n    | 'pointer-events'\n    | 'position'\n    | 'pr'\n    | 'ps'\n    | 'pt'\n    | 'px'\n    | 'py'\n    | 'resize'\n    | 'right'\n    | 'ring-color'\n    | 'ring-offset-color'\n    | 'ring-offset-w'\n    | 'ring-w-inset'\n    | 'ring-w'\n    | 'rotate-x'\n    | 'rotate-y'\n    | 'rotate-z'\n    | 'rotate'\n    | 'rounded-b'\n    | 'rounded-bl'\n    | 'rounded-br'\n    | 'rounded-e'\n    | 'rounded-ee'\n    | 'rounded-es'\n    | 'rounded-l'\n    | 'rounded-r'\n    | 'rounded-s'\n    | 'rounded-se'\n    | 'rounded-ss'\n    | 'rounded-t'\n    | 'rounded-tl'\n    | 'rounded-tr'\n    | 'rounded'\n    | 'row-end'\n    | 'row-start-end'\n    | 'row-start'\n    | 'saturate'\n    | 'scale-3d'\n    | 'scale-x'\n    | 'scale-y'\n    | 'scale-z'\n    | 'scale'\n    | 'scroll-behavior'\n    | 'scroll-m'\n    | 'scroll-mb'\n    | 'scroll-me'\n    | 'scroll-ml'\n    | 'scroll-mr'\n    | 'scroll-ms'\n    | 'scroll-mt'\n    | 'scroll-mx'\n    | 'scroll-my'\n    | 'scroll-p'\n    | 'scroll-pb'\n    | 'scroll-pe'\n    | 'scroll-pl'\n    | 'scroll-pr'\n    | 'scroll-ps'\n    | 'scroll-pt'\n    | 'scroll-px'\n    | 'scroll-py'\n    | 'select'\n    | 'sepia'\n    | 'shadow-color'\n    | 'shadow'\n    | 'shrink'\n    | 'size'\n    | 'skew-x'\n    | 'skew-y'\n    | 'skew'\n    | 'snap-align'\n    | 'snap-stop'\n    | 'snap-strictness'\n    | 'snap-type'\n    | 'space-x-reverse'\n    | 'space-x'\n    | 'space-y-reverse'\n    | 'space-y'\n    | 'sr'\n    | 'start'\n    | 'stroke-w'\n    | 'stroke'\n    | 'table-layout'\n    | 'text-alignment'\n    | 'text-color'\n    | 'text-decoration-color'\n    | 'text-decoration-style'\n    | 'text-decoration-thickness'\n    | 'text-decoration'\n    | 'text-overflow'\n    | 'text-shadow'\n    | 'text-shadow-color'\n    | 'text-transform'\n    | 'text-wrap'\n    | 'top'\n    | 'touch-pz'\n    | 'touch-x'\n    | 'touch-y'\n    | 'touch'\n    | 'tracking'\n    | 'transform-origin'\n    | 'transform-style'\n    | 'transform'\n    | 'transition-behavior'\n    | 'transition'\n    | 'translate-none'\n    | 'translate-x'\n    | 'translate-y'\n    | 'translate-z'\n    | 'translate'\n    | 'underline-offset'\n    | 'vertical-align'\n    | 'visibility'\n    | 'w'\n    | 'whitespace'\n    | 'will-change'\n    | 'wrap'\n    | 'z'\n\nexport type AnyClassGroupIds = string\nexport type AnyThemeGroupIds = string\n\n/**\n * type of the tailwind-merge configuration that allows for any possible configuration.\n */\nexport type AnyConfig = Config<AnyClassGroupIds, AnyThemeGroupIds>\n"
        }
    ]
}