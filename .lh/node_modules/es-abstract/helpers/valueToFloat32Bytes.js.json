{
    "sourceFile": "node_modules/es-abstract/helpers/valueToFloat32Bytes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892188640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $abs = require('math-intrinsics/abs');\nvar $floor = require('math-intrinsics/floor');\nvar $pow = require('math-intrinsics/pow');\n\nvar isFinite = require('math-intrinsics/isFinite');\nvar isNaN = require('math-intrinsics/isNaN');\nvar isNegativeZero = require('math-intrinsics/isNegativeZero');\n\nvar maxFiniteFloat32 = 3.4028234663852886e+38; // roughly 2 ** 128 - 1\n\nmodule.exports = function valueToFloat32Bytes(value, isLittleEndian) {\n\tif (isNaN(value)) {\n\t\treturn isLittleEndian ? [0, 0, 192, 127] : [127, 192, 0, 0]; // hardcoded\n\t}\n\n\tvar leastSig;\n\n\tif (value === 0) {\n\t\tleastSig = isNegativeZero(value) ? 0x80 : 0;\n\t\treturn isLittleEndian ? [0, 0, 0, leastSig] : [leastSig, 0, 0, 0];\n\t}\n\n\tif ($abs(value) > maxFiniteFloat32 || !isFinite(value)) {\n\t\tleastSig = value < 0 ? 255 : 127;\n\t\treturn isLittleEndian ? [0, 0, 128, leastSig] : [leastSig, 128, 0, 0];\n\t}\n\n\tvar sign = value < 0 ? 1 : 0;\n\tvalue = $abs(value); // eslint-disable-line no-param-reassign\n\n\tvar exponent = 0;\n\twhile (value >= 2) {\n\t\texponent += 1;\n\t\tvalue /= 2; // eslint-disable-line no-param-reassign\n\t}\n\n\twhile (value < 1) {\n\t\texponent -= 1;\n\t\tvalue *= 2; // eslint-disable-line no-param-reassign\n\t}\n\n\tvar mantissa = value - 1;\n\tmantissa *= $pow(2, 23) + 0.5;\n\tmantissa = $floor(mantissa);\n\n\texponent += 127;\n\texponent <<= 23;\n\n\tvar result = (sign << 31)\n        | exponent\n        | mantissa;\n\n\tvar byte0 = result & 255;\n\tresult >>= 8;\n\tvar byte1 = result & 255;\n\tresult >>= 8;\n\tvar byte2 = result & 255;\n\tresult >>= 8;\n\tvar byte3 = result & 255;\n\n\tif (isLittleEndian) {\n\t\treturn [byte0, byte1, byte2, byte3];\n\t}\n\treturn [byte3, byte2, byte1, byte0];\n};\n"
        }
    ]
}