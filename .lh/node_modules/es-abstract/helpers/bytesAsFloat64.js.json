{
    "sourceFile": "node_modules/es-abstract/helpers/bytesAsFloat64.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892184614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $pow = require('math-intrinsics/pow');\n\nmodule.exports = function bytesAsFloat64(rawBytes) {\n\t// return new $Float64Array(new $Uint8Array(rawBytes).buffer)[0];\n\n\t/*\n    Let value be the byte elements of rawBytes concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2008 binary64 value.\nIf value is an IEEE 754-2008 binary64 NaN value, return the NaN Number value.\nReturn the Number value that corresponds to value.\n    */\n\tvar sign = rawBytes[7] & 0x80 ? -1 : 1; // first bit\n\tvar exponent = ((rawBytes[7] & 0x7F) << 4) // 7 bits from index 7\n        | ((rawBytes[6] & 0xF0) >> 4); // 4 bits from index 6\n\tvar mantissa = ((rawBytes[6] & 0x0F) * 0x1000000000000) // 4 bits from index 6\n        + (rawBytes[5] * 0x10000000000) // 8 bits from index 5\n        + (rawBytes[4] * 0x100000000) // 8 bits from index 4\n        + (rawBytes[3] * 0x1000000) // 8 bits from index 3\n        + (rawBytes[2] * 0x10000) // 8 bits from index 2\n        + (rawBytes[1] * 0x100) // 8 bits from index 1\n        + rawBytes[0]; // 8 bits from index 0\n\n\tif (exponent === 0 && mantissa === 0) {\n\t\treturn sign * 0;\n\t}\n\tif (exponent === 0x7FF && mantissa !== 0) {\n\t\treturn NaN;\n\t}\n\tif (exponent === 0x7FF && mantissa === 0) {\n\t\treturn sign * Infinity;\n\t}\n\n\texponent -= 1023; // subtract the bias\n\n\t// Handle subnormal numbers\n\tif (exponent === -1023) {\n\t\treturn sign * mantissa * 5e-324; // $pow(2, -1022 - 52)\n\t}\n\n\treturn sign * (1 + (mantissa / 0x10000000000000)) * $pow(2, exponent);\n};\n"
        }
    ]
}