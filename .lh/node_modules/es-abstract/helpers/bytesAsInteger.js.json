{
    "sourceFile": "node_modules/es-abstract/helpers/bytesAsInteger.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892184756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $pow = require('math-intrinsics/pow');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\n\nmodule.exports = function bytesAsInteger(rawBytes, elementSize, isUnsigned, isBigInt) {\n\tvar Z = isBigInt ? $BigInt : $Number;\n\n\t// this is common to both branches\n\tvar intValue = Z(0);\n\tfor (var i = 0; i < rawBytes.length; i++) {\n\t\tintValue += Z(rawBytes[i] * $pow(2, 8 * i));\n\t}\n\t/*\n\tLet intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.\n\t*/\n\n\tif (!isUnsigned) { // steps 5-6\n\t\t// Let intValue be the byte elements of rawBytes concatenated and interpreted as a bit string encoding of a binary little-endian 2's complement number of bit length elementSize Ã— 8.\n\t\tvar bitLength = elementSize * 8;\n\n\t\tif (rawBytes[elementSize - 1] & 0x80) {\n\t\t\tintValue -= Z($pow(2, bitLength));\n\t\t}\n\t}\n\n\treturn intValue; // step 7\n};\n"
        }
    ]
}