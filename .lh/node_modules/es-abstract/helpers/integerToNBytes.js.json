{
    "sourceFile": "node_modules/es-abstract/helpers/integerToNBytes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892186074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $BigInt = GetIntrinsic('%BigInt%', true);\n\nmodule.exports = function integerToNBytes(intValue, n, isLittleEndian) {\n\tvar Z = typeof intValue === 'bigint' ? $BigInt : $Number;\n\t/*\n\tif (intValue >= 0) { // step 3.d\n\t\t// Let rawBytes be a List containing the n-byte binary encoding of intValue. If isLittleEndian is false, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.\n\t} else { // step 3.e\n\t\t// Let rawBytes be a List containing the n-byte binary 2's complement encoding of intValue. If isLittleEndian is false, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.\n\t}\n    */\n\tif (intValue < 0) {\n\t\tintValue >>>= 0; // eslint-disable-line no-param-reassign\n\t}\n\n\tvar rawBytes = [];\n\tfor (var i = 0; i < n; i++) {\n\t\trawBytes[isLittleEndian ? i : n - 1 - i] = $Number(intValue & Z(0xFF));\n\t\tintValue >>= Z(8); // eslint-disable-line no-param-reassign\n\t}\n\n\treturn rawBytes; // step 4\n};\n"
        }
    ]
}