{
    "sourceFile": "node_modules/es-abstract/helpers/fractionToBinaryString.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892185548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar MAX_ITER = 1075; // 1023+52 (subnormals) => BIAS+NUM_SIGNFICAND_BITS-1\nvar maxBits = 54; // only 53 bits for fraction\n\nmodule.exports = function fractionToBitString(x) {\n\tvar str = '';\n\tif (x === 0) {\n\t\treturn str;\n\t}\n\tvar j = MAX_ITER;\n\n\tvar y;\n\t// Each time we multiply by 2 and find a ones digit, add a '1'; otherwise, add a '0'..\n\tfor (var i = 0; i < MAX_ITER; i += 1) {\n\t\ty = x * 2;\n\t\tif (y >= 1) {\n\t\t\tx = y - 1; // eslint-disable-line no-param-reassign\n\t\t\tstr += '1';\n\t\t\tif (j === MAX_ITER) {\n\t\t\t\tj = i; // first 1\n\t\t\t}\n\t\t} else {\n\t\t\tx = y; // eslint-disable-line no-param-reassign\n\t\t\tstr += '0';\n\t\t}\n\t\t// Stop when we have no more decimals to process or in the event we found a fraction which cannot be represented in a finite number of bits...\n\t\tif (y === 1 || i - j > maxBits) {\n\t\t\treturn str;\n\t\t}\n\t}\n\treturn str;\n};\n"
        }
    ]
}