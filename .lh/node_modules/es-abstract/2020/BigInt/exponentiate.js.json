{
    "sourceFile": "node_modules/es-abstract/2020/BigInt/exponentiate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892136297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-bigint-exponentiate\n\nmodule.exports = function BigIntExponentiate(base, exponent) {\n\tif (typeof base !== 'bigint' || typeof exponent !== 'bigint') {\n\t\tthrow new $TypeError('Assertion failed: `base` and `exponent` arguments must be BigInts');\n\t}\n\tif (exponent < $BigInt(0)) {\n\t\tthrow new $RangeError('Exponent must be positive');\n\t}\n\tif (/* base === $BigInt(0) && */ exponent === $BigInt(0)) {\n\t\treturn $BigInt(1);\n\t}\n\n\tvar square = base;\n\tvar remaining = exponent;\n\twhile (remaining > $BigInt(0)) {\n\t\tsquare += exponent;\n\t\t--remaining; // eslint-disable-line no-plusplus\n\t}\n\treturn square;\n};\n"
        }
    ]
}