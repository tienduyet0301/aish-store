{
    "sourceFile": "node_modules/es-abstract/2020/GetPrototypeFromConstructor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892139229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Function = GetIntrinsic('%Function%');\nvar $TypeError = require('es-errors/type');\nvar $SyntaxError = require('es-errors/syntax');\n\nvar Get = require('./Get');\nvar IsConstructor = require('./IsConstructor');\n\nvar isObject = require('../helpers/isObject');\n\n// https://262.ecma-international.org/6.0/#sec-getprototypefromconstructor\n\nmodule.exports = function GetPrototypeFromConstructor(constructor, intrinsicDefaultProto) {\n\tvar intrinsic = GetIntrinsic(intrinsicDefaultProto); // throws if not a valid intrinsic\n\tif (!isObject(intrinsic)) {\n\t\tthrow new $TypeError('intrinsicDefaultProto must be an object');\n\t}\n\tif (!IsConstructor(constructor)) {\n\t\tthrow new $TypeError('Assertion failed: `constructor` must be a constructor');\n\t}\n\tvar proto = Get(constructor, 'prototype');\n\tif (!isObject(proto)) {\n\t\tif (!(constructor instanceof $Function)) {\n\t\t\t// ignore other realms, for now\n\t\t\tthrow new $SyntaxError('cross-realm constructors not currently supported');\n\t\t}\n\t\tproto = intrinsic;\n\t}\n\treturn proto;\n};\n"
        }
    ]
}