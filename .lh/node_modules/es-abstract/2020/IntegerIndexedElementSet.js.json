{
    "sourceFile": "node_modules/es-abstract/2020/IntegerIndexedElementSet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892139402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar IsValidIntegerIndex = require('./IsValidIntegerIndex');\nvar SetValueInBuffer = require('./SetValueInBuffer');\nvar ToBigInt = require('./ToBigInt');\nvar ToNumber = require('./ToNumber');\n\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar typedArrayLength = require('typed-array-length');\nvar whichTypedArray = require('which-typed-array');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\n// https://262.ecma-international.org/11.0/#sec-integerindexedelementset\n\nmodule.exports = function IntegerIndexedElementSet(O, index, value) {\n\tvar arrayTypeName = whichTypedArray(O); // step 9\n\tif (!arrayTypeName) {\n\t\tthrow new $TypeError('`O` must be a TypedArray'); // step 1\n\t}\n\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('`index` must be a Number'); // step 2\n\t}\n\n\tvar contentType = arrayTypeName === 'BigInt64Array' || arrayTypeName === 'BigUint64Array' ? 'BigInt' : 'Number';\n\tvar numValue = contentType === 'BigInt' ? ToBigInt(value) : ToNumber(value); // steps 3 - 4\n\n\tvar buffer = typedArrayBuffer(O); // step 5\n\n\tif (IsDetachedBuffer(buffer)) {\n\t\tthrow new $TypeError('`O` has a detached buffer'); // step 6\n\t}\n\n\tif (!IsValidIntegerIndex(O, index)) {\n\t\treturn false; // step 7\n\t}\n\n\tvar offset = typedArrayByteOffset(O); // step 8\n\n\tvar length = typedArrayLength(O); // step 9\n\n\tif (index < 0 || index >= length) {\n\t\treturn false; // step 10\n\t}\n\n\tvar elementType = tableTAO.name['$' + arrayTypeName]; // step 12\n\n\tvar elementSize = tableTAO.size['$' + elementType]; // step 10\n\n\tvar indexedPosition = (index * elementSize) + offset; // step 11\n\n\tSetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, 'Unordered'); // step 13\n\n\treturn true; // step 14\n};\n"
        }
    ]
}