{
    "sourceFile": "node_modules/es-abstract/2020/Number/exponentiate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892140291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\n// var isNegativeZero = require('math-intrinsics/isNegativeZero');\nvar $pow = require('math-intrinsics/pow');\n\nvar $TypeError = require('es-errors/type');\n\n/*\nvar abs = require('math-intrinsics/abs');\nvar isFinite = require('math-intrinsics/isFinite');\nvar isNaN = require('math-intrinsics/isNaN');\n\nvar IsInteger = require('math-intrinsics/isInteger');\n*/\n\n// https://262.ecma-international.org/11.0/#sec-numeric-types-number-exponentiate\n\n/* eslint max-lines-per-function: 0, max-statements: 0 */\n\nmodule.exports = function NumberExponentiate(base, exponent) {\n\tif (typeof base !== 'number' || typeof exponent !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `base` and `exponent` arguments must be Numbers');\n\t}\n\treturn $pow(base, exponent);\n\t/*\n\tif (isNaN(exponent)) {\n\t\treturn NaN;\n\t}\n\tif (exponent === 0) {\n\t\treturn 1;\n\t}\n\tif (isNaN(base)) {\n\t\treturn NaN;\n\t}\n\tvar aB = abs(base);\n\tif (aB > 1 && exponent === Infinity) {\n\t\treturn Infinity;\n\t}\n\tif (aB > 1 && exponent === -Infinity) {\n\t\treturn 0;\n\t}\n\tif (aB === 1 && (exponent === Infinity || exponent === -Infinity)) {\n\t\treturn NaN;\n\t}\n\tif (aB < 1 && exponent === Infinity) {\n\t\treturn +0;\n\t}\n\tif (aB < 1 && exponent === -Infinity) {\n\t\treturn Infinity;\n\t}\n\tif (base === Infinity) {\n\t\treturn exponent > 0 ? Infinity : 0;\n\t}\n\tif (base === -Infinity) {\n\t\tvar isOdd = true;\n\t\tif (exponent > 0) {\n\t\t\treturn isOdd ? -Infinity : Infinity;\n\t\t}\n\t\treturn isOdd ? -0 : 0;\n\t}\n\tif (exponent > 0) {\n\t\treturn isNegativeZero(base) ? Infinity : 0;\n\t}\n\tif (isNegativeZero(base)) {\n\t\tif (exponent > 0) {\n\t\t\treturn isOdd ? -0 : 0;\n\t\t}\n\t\treturn isOdd ? -Infinity : Infinity;\n\t}\n\tif (base < 0 && isFinite(base) && isFinite(exponent) && !IsInteger(exponent)) {\n\t\treturn NaN;\n\t}\n\t*/\n};\n"
        }
    ]
}