{
    "sourceFile": "node_modules/es-abstract/2020/IntegerIndexedElementGet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892139374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar GetValueFromBuffer = require('./GetValueFromBuffer');\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar IsValidIntegerIndex = require('./IsValidIntegerIndex');\n\nvar typedArrayLength = require('typed-array-length');\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar whichTypedArray = require('which-typed-array');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\n// https://262.ecma-international.org/11.0/#sec-integerindexedelementget\n\nmodule.exports = function IntegerIndexedElementGet(O, index) {\n\tvar arrayTypeName = whichTypedArray(O); // step 7\n\tif (!arrayTypeName) {\n\t\tthrow new $TypeError('`O` must be a TypedArray'); // step 1\n\t}\n\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('`index` must be a Number'); // step 2\n\t}\n\n\tvar buffer = typedArrayBuffer(O); // step 3\n\n\tif (IsDetachedBuffer(buffer)) {\n\t\tthrow new $TypeError('`O` has a detached buffer'); // step 4\n\t}\n\n\tif (!IsValidIntegerIndex(O, index)) {\n\t\treturn void undefined; // step 5\n\t}\n\n\tvar offset = typedArrayByteOffset(O); // step 6\n\n\tvar length = typedArrayLength(O); // step 7\n\n\tif (index < 0 || index >= length) {\n\t\treturn void undefined; // step 8\n\t}\n\n\tvar elementType = tableTAO.name['$' + arrayTypeName]; // step 10\n\n\tvar elementSize = tableTAO.size['$' + elementType]; // step 8\n\n\tvar indexedPosition = (index * elementSize) + offset; // step 9\n\n\treturn GetValueFromBuffer(buffer, indexedPosition, elementType, true, 'Unordered'); // step 11\n};\n"
        }
    ]
}