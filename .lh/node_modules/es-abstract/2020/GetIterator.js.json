{
    "sourceFile": "node_modules/es-abstract/2020/GetIterator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892139187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = require('es-errors/type');\nvar $SyntaxError = require('es-errors/syntax');\nvar $asyncIterator = GetIntrinsic('%Symbol.asyncIterator%', true);\n\nvar inspect = require('object-inspect');\nvar hasSymbols = require('has-symbols')();\n\nvar getIteratorMethod = require('../helpers/getIteratorMethod');\nvar AdvanceStringIndex = require('./AdvanceStringIndex');\nvar Call = require('./Call');\nvar GetMethod = require('./GetMethod');\nvar IsArray = require('./IsArray');\n\nvar isObject = require('../helpers/isObject');\n\nvar ES = {\n\tAdvanceStringIndex: AdvanceStringIndex,\n\tGetMethod: GetMethod,\n\tIsArray: IsArray\n};\n\n// https://262.ecma-international.org/11.0/#sec-getiterator\n\nmodule.exports = function GetIterator(obj, hint, method) {\n\tvar actualHint = hint;\n\tif (arguments.length < 2) {\n\t\tactualHint = 'sync';\n\t}\n\tif (actualHint !== 'sync' && actualHint !== 'async') {\n\t\tthrow new $TypeError(\"Assertion failed: `hint` must be one of 'sync' or 'async', got \" + inspect(hint));\n\t}\n\n\tvar actualMethod = method;\n\tif (arguments.length < 3) {\n\t\tif (actualHint === 'async') {\n\t\t\tif (hasSymbols && $asyncIterator) {\n\t\t\t\tactualMethod = GetMethod(obj, $asyncIterator);\n\t\t\t}\n\t\t\tif (actualMethod === undefined) {\n\t\t\t\tthrow new $SyntaxError(\"async from sync iterators aren't currently supported\");\n\t\t\t}\n\t\t} else {\n\t\t\tactualMethod = getIteratorMethod(ES, obj);\n\t\t}\n\t}\n\tvar iterator = Call(actualMethod, obj);\n\tif (!isObject(iterator)) {\n\t\tthrow new $TypeError('iterator must return an object');\n\t}\n\n\treturn iterator;\n\n\t// TODO: This should return an IteratorRecord\n\t/*\n\tvar nextMethod = GetV(iterator, 'next');\n\treturn {\n\t\t'[[Iterator]]': iterator,\n\t\t'[[NextMethod]]': nextMethod,\n\t\t'[[Done]]': false\n\t};\n\t*/\n};\n"
        }
    ]
}