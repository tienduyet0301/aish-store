{
    "sourceFile": "node_modules/es-abstract/2017/OrdinaryToPrimitive.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892128537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar IsCallable = require('./IsCallable');\n\nvar isObject = require('../helpers/isObject');\n\nvar inspect = require('object-inspect');\n\n// https://262.ecma-international.org/8.0/#sec-ordinarytoprimitive\n\nmodule.exports = function OrdinaryToPrimitive(O, hint) {\n\tif (!isObject(O)) {\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t}\n\tif (/* typeof hint !== 'string' || */ hint !== 'string' && hint !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `hint` must be \"string\" or \"number\"');\n\t}\n\n\tvar methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];\n\n\tfor (var i = 0; i < methodNames.length; i += 1) {\n\t\tvar name = methodNames[i];\n\t\tvar method = Get(O, name);\n\t\tif (IsCallable(method)) {\n\t\t\tvar result = Call(method, O);\n\t\t\tif (!isObject(result)) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow new $TypeError('No primitive value for ' + inspect(O));\n};\n"
        }
    ]
}