{
    "sourceFile": "node_modules/es-abstract/2018/CreateAsyncFromSyncIterator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892130202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $Promise = GetIntrinsic('%Promise%', true);\n\nvar Call = require('./Call');\nvar CreateIterResultObject = require('./CreateIterResultObject');\nvar Get = require('./Get');\nvar GetMethod = require('./GetMethod');\nvar IteratorComplete = require('./IteratorComplete');\nvar IteratorNext = require('./IteratorNext');\nvar IteratorValue = require('./IteratorValue');\nvar ObjectCreate = require('./ObjectCreate');\nvar PromiseResolve = require('./PromiseResolve');\n\nvar isObject = require('../helpers/isObject');\nvar isIteratorRecord = require('../helpers/records/iterator-record-2023');\n\nvar SLOT = require('internal-slot');\n\nvar callBound = require('call-bound');\n\nvar $then = callBound('Promise.prototype.then', true);\n\nvar AsyncFromSyncIteratorContinuation = function AsyncFromSyncIteratorContinuation(result) {\n\tif (!isObject(result)) {\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t}\n\n\tif (arguments.length > 1) {\n\t\tthrow new $TypeError('although AsyncFromSyncIteratorContinuation should take a second argument, it is not used in this implementation');\n\t}\n\n\tif (!$Promise) {\n\t\tthrow new $SyntaxError('This environment does not support Promises.');\n\t}\n\n\treturn new $Promise(function (resolve) {\n\t\tvar done = IteratorComplete(result); // step 2\n\t\tvar value = IteratorValue(result); // step 4\n\t\tvar valueWrapper = PromiseResolve($Promise, value); // step 6\n\n\t\t// eslint-disable-next-line no-shadow\n\t\tvar onFulfilled = function (value) { // steps 8-9\n\t\t\treturn CreateIterResultObject(value, done); // step 8.a\n\t\t};\n\t\tresolve($then(valueWrapper, onFulfilled)); // step 11\n\t}); // step 12\n};\n\nvar $AsyncFromSyncIteratorPrototype = GetIntrinsic('%AsyncFromSyncIteratorPrototype%', true) || {\n\tnext: function next(value) {\n\t\tif (!$Promise) {\n\t\t\tthrow new $SyntaxError('This environment does not support Promises.');\n\t\t}\n\n\t\tvar O = this; // step 1\n\n\t\tSLOT.assert(O, '[[SyncIteratorRecord]]'); // step 2\n\n\t\tvar argsLength = arguments.length;\n\n\t\treturn new $Promise(function (resolve) { // step 3\n\t\t\tvar syncIteratorRecord = SLOT.get(O, '[[SyncIteratorRecord]]'); // step 4\n\t\t\tvar result;\n\t\t\tif (argsLength > 0) {\n\t\t\t\tresult = IteratorNext(syncIteratorRecord['[[Iterator]]'], value); // step 5.a\n\t\t\t} else { // step 6\n\t\t\t\tresult = IteratorNext(syncIteratorRecord['[[Iterator]]']);// step 6.a\n\t\t\t}\n\t\t\tresolve(AsyncFromSyncIteratorContinuation(result)); // step 8\n\t\t});\n\t},\n\t'return': function () {\n\t\tif (!$Promise) {\n\t\t\tthrow new $SyntaxError('This environment does not support Promises.');\n\t\t}\n\n\t\tvar O = this; // step 1\n\n\t\tSLOT.assert(O, '[[SyncIteratorRecord]]'); // step 2\n\n\t\tvar valueIsPresent = arguments.length > 0;\n\t\tvar value = valueIsPresent ? arguments[0] : void undefined;\n\n\t\treturn new $Promise(function (resolve, reject) { // step 3\n\t\t\tvar syncIterator = SLOT.get(O, '[[SyncIteratorRecord]]')['[[Iterator]]']; // step 4\n\t\t\tvar iteratorReturn = GetMethod(syncIterator, 'return'); // step 5\n\n\t\t\tif (typeof iteratorReturn === 'undefined') { // step 7\n\t\t\t\tvar iterResult = CreateIterResultObject(value, true); // step 7.a\n\t\t\t\tCall(resolve, undefined, [iterResult]); // step 7.b\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar result;\n\t\t\tif (valueIsPresent) { // step 8\n\t\t\t\tresult = Call(iteratorReturn, syncIterator, [value]); // step 8.a\n\t\t\t} else { // step 9\n\t\t\t\tresult = Call(iteratorReturn, syncIterator); // step 9.a\n\t\t\t}\n\t\t\tif (!isObject(result)) { // step 11\n\t\t\t\tCall(reject, undefined, [new $TypeError('Iterator `return` method returned a non-object value.')]); // step 11.a\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve(AsyncFromSyncIteratorContinuation(result)); // step 12\n\t\t});\n\t},\n\t'throw': function () {\n\t\tif (!$Promise) {\n\t\t\tthrow new $SyntaxError('This environment does not support Promises.');\n\t\t}\n\n\t\tvar O = this; // step 1\n\n\t\tSLOT.assert(O, '[[SyncIteratorRecord]]'); // step 2\n\n\t\tvar valueIsPresent = arguments.length > 0;\n\t\tvar value = valueIsPresent ? arguments[0] : void undefined;\n\n\t\treturn new $Promise(function (resolve, reject) { // step 3\n\t\t\tvar syncIterator = SLOT.get(O, '[[SyncIteratorRecord]]')['[[Iterator]]']; // step 4\n\n\t\t\tvar throwMethod = GetMethod(syncIterator, 'throw'); // step 5\n\n\t\t\tif (typeof throwMethod === 'undefined') { // step 7\n\t\t\t\tCall(reject, undefined, [value]); // step 7.a\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar result;\n\t\t\tif (valueIsPresent) { // step 8\n\t\t\t\tresult = Call(throwMethod, syncIterator, [value]); // step 8.a\n\t\t\t} else { // step 9\n\t\t\t\tresult = Call(throwMethod, syncIterator); // step 9.a\n\t\t\t}\n\t\t\tif (!isObject(result)) { // step 11\n\t\t\t\tCall(reject, undefined, [new $TypeError('Iterator `throw` method returned a non-object value.')]); // step 11.a\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve(AsyncFromSyncIteratorContinuation(result/* , promiseCapability */)); // step 12\n\t\t});\n\t}\n};\n\n// https://262.ecma-international.org/9.0/#sec-createasyncfromsynciterator\n\nmodule.exports = function CreateAsyncFromSyncIterator(syncIteratorRecord) {\n\tif (!isIteratorRecord(syncIteratorRecord)) {\n\t\tthrow new $TypeError('Assertion failed: `syncIteratorRecord` is not an Iterator Record');\n\t}\n\n\t// var asyncIterator = ObjectCreate(%AsyncFromSyncIteratorPrototype%, « [[SyncIteratorRecord]] »); // step 1\n\tvar asyncIterator = ObjectCreate($AsyncFromSyncIteratorPrototype);\n\n\tSLOT.set(asyncIterator, '[[SyncIteratorRecord]]', syncIteratorRecord); // step 2\n\n\tvar nextMethod = Get(asyncIterator, 'next'); // step 3\n\n\treturn { // steps 3-4\n\t\t'[[Iterator]]': asyncIterator,\n\t\t'[[NextMethod]]': nextMethod,\n\t\t'[[Done]]': false\n\t};\n};\n"
        }
    ]
}