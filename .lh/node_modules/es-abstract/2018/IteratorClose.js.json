{
    "sourceFile": "node_modules/es-abstract/2018/IteratorClose.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892131250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar Call = require('./Call');\nvar CompletionRecord = require('./CompletionRecord');\nvar GetMethod = require('./GetMethod');\nvar IsCallable = require('./IsCallable');\n\nvar isObject = require('../helpers/isObject');\n\n// https://262.ecma-international.org/6.0/#sec-iteratorclose\n\nmodule.exports = function IteratorClose(iterator, completion) {\n\tif (!isObject(iterator)) {\n\t\tthrow new $TypeError('Assertion failed: Type(iterator) is not Object');\n\t}\n\tif (!IsCallable(completion) && !(completion instanceof CompletionRecord)) {\n\t\tthrow new $TypeError('Assertion failed: completion is not a thunk representing a Completion Record, nor a Completion Record instance');\n\t}\n\tvar completionThunk = completion instanceof CompletionRecord ? function () { return completion['?'](); } : completion;\n\n\tvar iteratorReturn = GetMethod(iterator, 'return');\n\n\tif (typeof iteratorReturn === 'undefined') {\n\t\treturn completionThunk();\n\t}\n\n\tvar completionRecord;\n\ttry {\n\t\tvar innerResult = Call(iteratorReturn, iterator, []);\n\t} catch (e) {\n\t\t// if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n\n\t\t// if the completion is of type \"throw\", this will throw.\n\t\tcompletionThunk();\n\t\tcompletionThunk = null; // ensure it's not called twice.\n\n\t\t// if not, then return the innerResult completion\n\t\tthrow e;\n\t}\n\tcompletionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n\tcompletionThunk = null; // ensure it's not called twice.\n\n\tif (!isObject(innerResult)) {\n\t\tthrow new $TypeError('iterator .return must return an object');\n\t}\n\n\treturn completionRecord;\n};\n"
        }
    ]
}