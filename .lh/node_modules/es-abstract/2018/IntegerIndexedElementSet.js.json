{
    "sourceFile": "node_modules/es-abstract/2018/IntegerIndexedElementSet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892130938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar IsInteger = require('./IsInteger');\nvar SetValueInBuffer = require('./SetValueInBuffer');\nvar ToNumber = require('./ToNumber');\n\nvar isNegativeZero = require('math-intrinsics/isNegativeZero');\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar typedArrayLength = require('typed-array-length');\nvar whichTypedArray = require('which-typed-array');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\n// https://262.ecma-international.org/8.0/#sec-integerindexedelementset\n\nmodule.exports = function IntegerIndexedElementSet(O, index, value) {\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('`index` must be a Number'); // step 1\n\t}\n\tvar arrayTypeName = whichTypedArray(O); // step 12\n\tif (!arrayTypeName) {\n\t\tthrow new $TypeError('`O` must be a TypedArray'); // step 2\n\t}\n\tif (arrayTypeName === 'BigInt64Array' || arrayTypeName === 'BigUint64Array') {\n\t\tthrow new $SyntaxError('BigInt64Array and BigUint64Array do not exist until ES2020'); // step 2\n\t}\n\n\tvar numValue = ToNumber(value); // step 3\n\n\tvar buffer = typedArrayBuffer(O); // step 5\n\n\tif (IsDetachedBuffer(buffer)) {\n\t\tthrow new $TypeError('`O` has a detached buffer'); // step 6\n\t}\n\n\tif (!IsInteger(index) || isNegativeZero(index)) {\n\t\treturn false; // steps 7 - 8\n\t}\n\n\tvar length = typedArrayLength(O); // step 9\n\n\tif (index < 0 || index >= length) {\n\t\treturn false; // step 10\n\t}\n\n\tvar offset = typedArrayByteOffset(O); // step 11\n\n\tvar elementType = tableTAO.name['$' + arrayTypeName]; // step 15\n\n\tvar elementSize = tableTAO.size['$' + elementType]; // step 13\n\n\tvar indexedPosition = (index * elementSize) + offset; // step 14\n\n\tSetValueInBuffer(buffer, indexedPosition, elementType, numValue, true, 'Unordered'); // step 16\n\n\treturn true; // step 17\n};\n"
        }
    ]
}