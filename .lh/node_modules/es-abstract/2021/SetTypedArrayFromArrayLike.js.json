{
    "sourceFile": "node_modules/es-abstract/2021/SetTypedArrayFromArrayLike.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892145871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\n\nvar isTypedArray = require('is-typed-array');\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar typedArrayLength = require('typed-array-length');\nvar whichTypedArray = require('which-typed-array');\nvar isInteger = require('math-intrinsics/isInteger');\n\nvar Get = require('./Get');\nvar IsBigIntElementType = require('./IsBigIntElementType');\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\nvar SetValueInBuffer = require('./SetValueInBuffer');\nvar ToBigInt = require('./ToBigInt');\nvar ToNumber = require('./ToNumber');\nvar ToObject = require('./ToObject');\nvar ToString = require('./ToString');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\n// https://262.ecma-international.org/12.0/#sec-settypedarrayfromarraylike\n\nmodule.exports = function SetTypedArrayFromArrayLike(target, targetOffset, source) {\n\tvar whichTarget = whichTypedArray(target);\n\tif (!whichTarget) {\n\t\tthrow new $TypeError('Assertion failed: target must be a TypedArray instance');\n\t}\n\n\tif (targetOffset !== Infinity && (!isInteger(targetOffset) || targetOffset < 0)) {\n\t\tthrow new $TypeError('Assertion failed: targetOffset must be a non-negative integer or +Infinity');\n\t}\n\n\tif (isTypedArray(source)) {\n\t\tthrow new $TypeError('Assertion failed: source must not be a TypedArray instance'); // step 1\n\t}\n\n\tvar targetBuffer = typedArrayBuffer(target); // step 2\n\n\tif (IsDetachedBuffer(targetBuffer)) {\n\t\tthrow new $TypeError('target’s buffer is detached'); // step 3\n\t}\n\n\tvar targetLength = typedArrayLength(target); // step 4\n\n\tvar targetName = whichTarget; // step 5\n\n\tvar targetType = tableTAO.name['$' + targetName]; // step 7\n\n\tvar targetElementSize = tableTAO.size['$' + targetType]; // step 6\n\n\tvar targetByteOffset = typedArrayByteOffset(target); // step 8\n\n\tvar src = ToObject(source); // step 9\n\n\tvar srcLength = LengthOfArrayLike(src); // step 10\n\n\tif (targetOffset === Infinity) {\n\t\tthrow new $RangeError('targetOffset must be a finite integer'); // step 11\n\t}\n\n\tif (srcLength + targetOffset > targetLength) {\n\t\tthrow new $RangeError('targetOffset + srcLength must be <= target.length'); // step 12\n\t}\n\n\tvar targetByteIndex = (targetOffset * targetElementSize) + targetByteOffset; // step 13\n\n\tvar k = 0; // step 14\n\n\tvar limit = targetByteIndex + (targetElementSize * srcLength); // step 15\n\n\twhile (targetByteIndex < limit) { // step 16\n\t\tvar Pk = ToString(k); // step 16.a\n\n\t\tvar value = Get(src, Pk); // step 16.b\n\n\t\tif (IsBigIntElementType(targetType)) {\n\t\t\tvalue = ToBigInt(value); // step 16.c\n\t\t} else {\n\t\t\tvalue = ToNumber(value); // step 16.d\n\t\t}\n\n\t\tif (IsDetachedBuffer(targetBuffer)) {\n\t\t\tthrow new $TypeError('target’s buffer is detached'); // step 16.e\n\t\t}\n\n\t\tSetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, 'Unordered'); // step 16.f\n\n\t\tk += 1; // step 16.g\n\n\t\ttargetByteIndex += targetElementSize; // step 16.h\n\t}\n};\n"
        }
    ]
}