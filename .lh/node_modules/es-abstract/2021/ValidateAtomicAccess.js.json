{
    "sourceFile": "node_modules/es-abstract/2021/ValidateAtomicAccess.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892148213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\n\nvar ToIndex = require('./ToIndex');\n\nvar isTypedArray = require('is-typed-array');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar typedArrayLength = require('typed-array-length');\nvar whichTypedArray = require('which-typed-array');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\n// https://262.ecma-international.org/12.0/#sec-validateatomicaccess\n\nmodule.exports = function ValidateAtomicAccess(typedArray, requestIndex) {\n\tif (!isTypedArray(typedArray)) {\n\t\tthrow new $TypeError('Assertion failed: `typedArray` must be a TypedArray'); // step 1\n\t}\n\n\tvar length = typedArrayLength(typedArray); // step 2\n\n\tvar accessIndex = ToIndex(requestIndex); // step 3\n\n\t/*\n\t// this assertion can never be reached\n\tif (!(accessIndex >= 0)) {\n\t\tthrow new $TypeError('Assertion failed: accessIndex >= 0'); // step 4\n\t}\n\t*/\n\n\tif (accessIndex >= length) {\n\t\tthrow new $RangeError('index out of range'); // step 5\n\t}\n\n\tvar arrayTypeName = whichTypedArray(typedArray); // step 6\n\n\tvar taType = tableTAO.name['$' + arrayTypeName];\n\tvar elementSize = tableTAO.size['$' + taType]; // step 7\n\n\tvar offset = typedArrayByteOffset(typedArray); // step 8\n\n\treturn (accessIndex * elementSize) + offset; // step 9\n};\n"
        }
    ]
}