{
    "sourceFile": "node_modules/es-abstract/2021/ToIntegerOrInfinity.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892146805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar abs = require('./abs');\nvar floor = require('./floor');\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('math-intrinsics/isNaN');\nvar $isFinite = require('math-intrinsics/isFinite');\nvar $sign = require('math-intrinsics/sign');\n\n// https://262.ecma-international.org/12.0/#sec-tointegerorinfinity\n\nmodule.exports = function ToIntegerOrInfinity(value) {\n\tvar number = ToNumber(value);\n\tif ($isNaN(number) || number === 0) { return 0; }\n\tif (!$isFinite(number)) { return number; }\n\tvar integer = floor(abs(number));\n\tif (integer === 0) { return 0; }\n\treturn $sign(number) * integer;\n};\n"
        }
    ]
}