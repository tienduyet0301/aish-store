{
    "sourceFile": "node_modules/es-abstract/2021/ApplyStringOrNumericBinaryOperator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892142303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar HasOwnProperty = require('./HasOwnProperty');\nvar ToNumeric = require('./ToNumeric');\nvar ToPrimitive = require('./ToPrimitive');\nvar ToString = require('./ToString');\nvar Type = require('./Type');\n\nvar NumberAdd = require('./Number/add');\nvar NumberBitwiseAND = require('./Number/bitwiseAND');\nvar NumberBitwiseOR = require('./Number/bitwiseOR');\nvar NumberBitwiseXOR = require('./Number/bitwiseXOR');\nvar NumberDivide = require('./Number/divide');\nvar NumberExponentiate = require('./Number/exponentiate');\nvar NumberLeftShift = require('./Number/leftShift');\nvar NumberMultiply = require('./Number/multiply');\nvar NumberRemainder = require('./Number/remainder');\nvar NumberSignedRightShift = require('./Number/signedRightShift');\nvar NumberSubtract = require('./Number/subtract');\nvar NumberUnsignedRightShift = require('./Number/unsignedRightShift');\nvar BigIntAdd = require('./BigInt/add');\nvar BigIntBitwiseAND = require('./BigInt/bitwiseAND');\nvar BigIntBitwiseOR = require('./BigInt/bitwiseOR');\nvar BigIntBitwiseXOR = require('./BigInt/bitwiseXOR');\nvar BigIntDivide = require('./BigInt/divide');\nvar BigIntExponentiate = require('./BigInt/exponentiate');\nvar BigIntLeftShift = require('./BigInt/leftShift');\nvar BigIntMultiply = require('./BigInt/multiply');\nvar BigIntRemainder = require('./BigInt/remainder');\nvar BigIntSignedRightShift = require('./BigInt/signedRightShift');\nvar BigIntSubtract = require('./BigInt/subtract');\nvar BigIntUnsignedRightShift = require('./BigInt/unsignedRightShift');\n\n// https://262.ecma-international.org/12.0/#sec-applystringornumericbinaryoperator\n\n// https://262.ecma-international.org/12.0/#step-applystringornumericbinaryoperator-operations-table\nvar table = {\n\t'**': [NumberExponentiate, BigIntExponentiate],\n\t'*': [NumberMultiply, BigIntMultiply],\n\t'/': [NumberDivide, BigIntDivide],\n\t'%': [NumberRemainder, BigIntRemainder],\n\t'+': [NumberAdd, BigIntAdd],\n\t'-': [NumberSubtract, BigIntSubtract],\n\t'<<': [NumberLeftShift, BigIntLeftShift],\n\t'>>': [NumberSignedRightShift, BigIntSignedRightShift],\n\t'>>>': [NumberUnsignedRightShift, BigIntUnsignedRightShift],\n\t'&': [NumberBitwiseAND, BigIntBitwiseAND],\n\t'^': [NumberBitwiseXOR, BigIntBitwiseXOR],\n\t'|': [NumberBitwiseOR, BigIntBitwiseOR]\n};\n\nmodule.exports = function ApplyStringOrNumericBinaryOperator(lval, opText, rval) {\n\tif (typeof opText !== 'string' || !HasOwnProperty(table, opText)) {\n\t\tthrow new $TypeError('Assertion failed: `opText` must be a valid operation string');\n\t}\n\tif (opText === '+') {\n\t\tvar lprim = ToPrimitive(lval);\n\t\tvar rprim = ToPrimitive(rval);\n\t\tif (typeof lprim === 'string' || typeof rprim === 'string') {\n\t\t\tvar lstr = ToString(lprim);\n\t\t\tvar rstr = ToString(rprim);\n\t\t\treturn lstr + rstr;\n\t\t}\n\t\t/* eslint no-param-reassign: 1 */\n\t\tlval = lprim;\n\t\trval = rprim;\n\t}\n\tvar lnum = ToNumeric(lval);\n\tvar rnum = ToNumeric(rval);\n\tif (Type(lnum) !== Type(rnum)) {\n\t\tthrow new $TypeError('types of ' + lnum + ' and ' + rnum + ' differ');\n\t}\n\tvar Operation = table[opText][typeof lnum === 'bigint' ? 1 : 0];\n\treturn Operation(lnum, rnum);\n};\n"
        }
    ]
}