{
    "sourceFile": "node_modules/es-abstract/2021/AsyncFromSyncIteratorContinuation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892142384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $Promise = GetIntrinsic('%Promise%', true);\n\nvar callBound = require('call-bound');\n\nvar CreateIterResultObject = require('./CreateIterResultObject');\nvar IteratorComplete = require('./IteratorComplete');\nvar IteratorValue = require('./IteratorValue');\nvar PromiseResolve = require('./PromiseResolve');\n\nvar isObject = require('../helpers/isObject');\n\nvar $then = callBound('Promise.prototype.then', true);\n\n// https://262.ecma-international.org/10.0/#sec-asyncfromsynciteratorcontinuation\n\nmodule.exports = function AsyncFromSyncIteratorContinuation(result) {\n\tif (!isObject(result)) {\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t}\n\n\tif (arguments.length > 1) {\n\t\tthrow new $SyntaxError('although AsyncFromSyncIteratorContinuation should take a second argument, it is not used in this implementation');\n\t}\n\n\tif (!$Promise) {\n\t\tthrow new $SyntaxError('This environment does not support Promises.');\n\t}\n\n\treturn new $Promise(function (resolve) {\n\t\tvar done = IteratorComplete(result); // step 2\n\t\tvar value = IteratorValue(result); // step 4\n\t\tvar valueWrapper = PromiseResolve($Promise, value); // step 6\n\n\t\t// eslint-disable-next-line no-shadow\n\t\tvar onFulfilled = function (value) { // steps 8-9\n\t\t\treturn CreateIterResultObject(value, done); // step 8.a\n\t\t};\n\t\tresolve($then(valueWrapper, onFulfilled)); // step 11\n\t}); // step 12\n};\n"
        }
    ]
}