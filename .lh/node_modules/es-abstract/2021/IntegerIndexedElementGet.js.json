{
    "sourceFile": "node_modules/es-abstract/2021/IntegerIndexedElementGet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892143518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar GetValueFromBuffer = require('./GetValueFromBuffer');\nvar IsValidIntegerIndex = require('./IsValidIntegerIndex');\n\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar whichTypedArray = require('which-typed-array');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\n// https://262.ecma-international.org/12.0/#sec-integerindexedelementget\n\nmodule.exports = function IntegerIndexedElementGet(O, index) {\n\tvar arrayTypeName = whichTypedArray(O); // step 4\n\tif (!arrayTypeName) {\n\t\tthrow new $TypeError('Assertion failed: `O` must be a TypedArray'); // step 1\n\t}\n\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `index` must be a Number');\n\t}\n\n\tif (!IsValidIntegerIndex(O, index)) {\n\t\treturn void undefined; // step 2\n\t}\n\n\tvar offset = typedArrayByteOffset(O); // step 3\n\n\tvar elementType = tableTAO.name['$' + arrayTypeName]; // step 7\n\n\tvar elementSize = tableTAO.size['$' + elementType]; // step 5\n\n\tvar indexedPosition = (index * elementSize) + offset; // step 6\n\n\treturn GetValueFromBuffer(typedArrayBuffer(O), indexedPosition, elementType, true, 'Unordered'); // step 11\n};\n"
        }
    ]
}