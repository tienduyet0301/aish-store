{
    "sourceFile": "node_modules/es-abstract/tmp.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892189416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { dirname, join } from 'path';\nimport { readFileSync } from 'fs';\nimport hasTypes from 'hastypes';\nimport semver from 'semver';\nimport { execSync } from 'child_process';\nimport { createRequire } from 'module';\nimport { pathToFileURL } from 'url';\n\nconst packageJSONpath = join(process.cwd(), 'package.json');\n\nconst require = createRequire(pathToFileURL(packageJSONpath));\n\nconst { dependencies, devDependencies } = JSON.parse(readFileSync(packageJSONpath));\n\nconst typesPackagesPresent = Object.entries(devDependencies).filter(([name]) => name.startsWith('@types/'));\n\nconsole.log(`Found ${typesPackagesPresent.length} \\`@types/\\` packages...`);\n\nconst typesPackagesToRemove = Promise.all(typesPackagesPresent.filter(([x]) => x !== '@types/node').map(async ([name, version]) => {\n\tconst actualName = name.replace('@types/', '');\n\tlet actualVersion;\n\ttry {\n\t\tactualVersion = JSON.parse(readFileSync(join(process.cwd(), 'node_modules', actualName, 'package.json'))).version;\n\t} catch (e) {\n\t\tconsole.error(e, join(actualName, '/package.json'));\n\t\treturn [name, , true];\n\t}\n\tconst expectedVersion = `${semver.major(actualVersion)}.${semver.minor(actualVersion)}`;\n\tconst specifier = `${actualName}@${expectedVersion}`;\n\n\treturn [name, expectedVersion, await hasTypes(specifier)];\n})).then((x) => x.filter(([, , hasTypes]) => hasTypes === true));// .then((x) => x.map(([name, expectedVersion]) => [name, expectedVersion]));\n\ntypesPackagesToRemove.then((x) => {\n\tconsole.log(`Found ${x.length} \\`@types/\\` packages to remove...`);\n\tconsole.log(x);\n\tif (x.length > 0) {\n\t\texecSync(`npm uninstall --save ${x.map(([name, version]) => `\"${name}@${version}\"`).join(' ')}`, { cwd: process.cwd() });\n\t}\n});\n\n// const typesPackagesToAdd = Promise.all(\n// \tObject.entries(dependencies)\n// \t\t.filter(([name]) => !typesPackagesPresent.includes(`@types/${name}`))\n// \t\t.map(async ([name, version]) => {\n// \t\t\tconst actualVersion = require(`${name}/package.json`).version;\n// \t\t\tconst expectedVersion = `${semver.major(actualVersion)}.${semver.minor(actualVersion)}`;\n// \t\t\tconsole.log(specifier);\n// \t\t})\n// )\n"
        }
    ]
}