{
    "sourceFile": "node_modules/es-abstract/2024/IsValidIntegerIndex.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892173196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar IsTypedArrayOutOfBounds = require('./IsTypedArrayOutOfBounds');\nvar MakeTypedArrayWithBufferWitnessRecord = require('./MakeTypedArrayWithBufferWitnessRecord');\nvar TypedArrayLength = require('./TypedArrayLength');\n\nvar isNegativeZero = require('math-intrinsics/isNegativeZero');\n\nvar isTypedArray = require('is-typed-array');\nvar typedArrayBuffer = require('typed-array-buffer');\n\n// https://262.ecma-international.org/15.0/#sec-isvalidintegerindex\n\nmodule.exports = function IsValidIntegerIndex(O, index) {\n\tif (!isTypedArray(O)) {\n\t\tthrow new $TypeError('Assertion failed: `O` is not a TypedArray object');\n\t}\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `index` is not a Number');\n\t}\n\n\tvar buffer = typedArrayBuffer(O);\n\n\tif (IsDetachedBuffer(buffer)) { return false; } // step 1\n\n\tif (!IsIntegralNumber(index)) { return false; } // step 2\n\n\tif (isNegativeZero(index)) { return false; } // step 3\n\n\tvar taRecord = MakeTypedArrayWithBufferWitnessRecord(O, 'UNORDERED'); // step 4\n\tif (IsTypedArrayOutOfBounds(taRecord)) {\n\t\treturn false; // step 6\n\t}\n\tvar length = TypedArrayLength(taRecord); // step 7\n\n\tif (index < 0 || index >= length) { return false; } // step 8\n\n\treturn true; // step 9\n};\n"
        }
    ]
}