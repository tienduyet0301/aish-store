{
    "sourceFile": "node_modules/es-abstract/2024/NumericToRawBytes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892174236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar hasOwnProperty = require('./HasOwnProperty');\nvar ToBigInt64 = require('./ToBigInt64');\nvar ToBigUint64 = require('./ToBigUint64');\nvar ToInt16 = require('./ToInt16');\nvar ToInt32 = require('./ToInt32');\nvar ToInt8 = require('./ToInt8');\nvar ToUint16 = require('./ToUint16');\nvar ToUint32 = require('./ToUint32');\nvar ToUint8 = require('./ToUint8');\nvar ToUint8Clamp = require('./ToUint8Clamp');\n\nvar valueToFloat32Bytes = require('../helpers/valueToFloat32Bytes');\nvar valueToFloat64Bytes = require('../helpers/valueToFloat64Bytes');\nvar integerToNBytes = require('../helpers/integerToNBytes');\n\nvar keys = require('object-keys');\n\n// https://262.ecma-international.org/15.0/#table-the-typedarray-constructors\nvar TypeToSizes = {\n\t__proto__: null,\n\tINT8: 1,\n\tUINT8: 1,\n\tUINT8C: 1,\n\tINT16: 2,\n\tUINT16: 2,\n\tINT32: 4,\n\tUINT32: 4,\n\tBIGINT64: 8,\n\tBIGUINT64: 8,\n\tFLOAT32: 4,\n\tFLOAT64: 8\n};\n\nvar TypeToAO = {\n\t__proto__: null,\n\tINT8: ToInt8,\n\tUINT8: ToUint8,\n\tUINT8C: ToUint8Clamp,\n\tINT16: ToInt16,\n\tUINT16: ToUint16,\n\tINT32: ToInt32,\n\tUINT32: ToUint32,\n\tBIGINT64: ToBigInt64,\n\tBIGUINT64: ToBigUint64\n};\n\n// https://262.ecma-international.org/15.0/#sec-numerictorawbytes\n\nmodule.exports = function NumericToRawBytes(type, value, isLittleEndian) {\n\tif (typeof type !== 'string' || !hasOwnProperty(TypeToSizes, type)) {\n\t\tthrow new $TypeError('Assertion failed: `type` must be a TypedArray element type: ' + keys(TypeToSizes));\n\t}\n\tif (typeof value !== 'number' && typeof value !== 'bigint') {\n\t\tthrow new $TypeError('Assertion failed: `value` must be a Number or a BigInt');\n\t}\n\tif (typeof isLittleEndian !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `isLittleEndian` must be a Boolean');\n\t}\n\n\tif (type === 'FLOAT32') { // step 1\n\t\treturn valueToFloat32Bytes(value, isLittleEndian);\n\t} else if (type === 'FLOAT64') { // step 2\n\t\treturn valueToFloat64Bytes(value, isLittleEndian);\n\t} // step 3\n\n\tvar n = TypeToSizes[type]; // step 3.a\n\n\tvar convOp = TypeToAO[type]; // step 3.b\n\n\tvar intValue = convOp(value); // step 3.c\n\n\treturn integerToNBytes(intValue, n, isLittleEndian); // step 3.d, 3.e, 4\n};\n"
        }
    ]
}