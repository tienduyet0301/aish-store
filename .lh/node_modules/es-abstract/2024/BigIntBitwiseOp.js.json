{
    "sourceFile": "node_modules/es-abstract/2024/BigIntBitwiseOp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892171101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n// var $BigInt = GetIntrinsic('%BigInt%', true);\n// var $pow = require('math-intrinsics/pow');\n\n// var BinaryAnd = require('./BinaryAnd');\n// var BinaryOr = require('./BinaryOr');\n// var BinaryXor = require('./BinaryXor');\n// var modulo = require('./modulo');\n\n// var zero = $BigInt && $BigInt(0);\n// var negOne = $BigInt && $BigInt(-1);\n// var two = $BigInt && $BigInt(2);\n\n// https://262.ecma-international.org/11.0/#sec-bigintbitwiseop\n\nmodule.exports = function BigIntBitwiseOp(op, x, y) {\n\tif (op !== '&' && op !== '|' && op !== '^') {\n\t\tthrow new $TypeError('Assertion failed: `op` must be `&`, `|`, or `^`');\n\t}\n\tif (typeof x !== 'bigint' || typeof y !== 'bigint') {\n\t\tthrow new $TypeError('`x` and `y` must be BigInts');\n\t}\n\n\tif (op === '&') {\n\t\treturn x & y;\n\t}\n\tif (op === '|') {\n\t\treturn x | y;\n\t}\n\treturn x ^ y;\n\t/*\n\tvar result = zero;\n\tvar shift = 0;\n\twhile (x !== zero && x !== negOne && y !== zero && y !== negOne) {\n\t\tvar xDigit = modulo(x, two);\n\t\tvar yDigit = modulo(y, two);\n\t\tif (op === '&') {\n\t\t\tresult += $pow(2, shift) * BinaryAnd(xDigit, yDigit);\n\t\t} else if (op === '|') {\n\t\t\tresult += $pow(2, shift) * BinaryOr(xDigit, yDigit);\n\t\t} else if (op === '^') {\n\t\t\tresult += $pow(2, shift) * BinaryXor(xDigit, yDigit);\n\t\t}\n\t\tshift += 1;\n\t\tx = (x - xDigit) / two;\n\t\ty = (y - yDigit) / two;\n\t}\n\tvar tmp;\n\tif (op === '&') {\n\t\ttmp = BinaryAnd(modulo(x, two), modulo(y, two));\n\t} else if (op === '|') {\n\t\ttmp = BinaryAnd(modulo(x, two), modulo(y, two));\n\t} else {\n\t\ttmp = BinaryXor(modulo(x, two), modulo(y, two));\n\t}\n\tif (tmp !== 0) {\n\t\tresult -= $pow(2, shift);\n\t}\n\treturn result;\n\t*/\n};\n"
        }
    ]
}