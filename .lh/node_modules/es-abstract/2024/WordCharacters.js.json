{
    "sourceFile": "node_modules/es-abstract/2024/WordCharacters.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892180685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar callBound = require('call-bound');\nvar $indexOf = callBound('String.prototype.indexOf', true);\n\nvar Canonicalize = require('./Canonicalize');\n\nvar caseFolding = require('../helpers/caseFolding.json');\nvar forEach = require('../helpers/forEach');\nvar isRegExpRecord = require('../helpers/records/regexp-record');\nvar OwnPropertyKeys = require('own-keys');\n\nvar basicWordChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'; // step 1\n\n// https://262.ecma-international.org/14.0/#sec-runtime-semantics-wordcharacters-abstract-operation\n\nmodule.exports = function WordCharacters(rer) {\n\tif (!isRegExpRecord(rer)) {\n\t\tthrow new $TypeError('Assertion failed: `rer` must be a RegExp Record');\n\t}\n\n\tvar extraWordChars = '';\n\tforEach(OwnPropertyKeys(caseFolding.C), function (c) {\n\t\tif (\n\t\t\t$indexOf(basicWordChars, c) === -1 // c not in A\n\t\t\t&& $indexOf(basicWordChars, Canonicalize(rer, c)) > -1 // canonicalized c IS in A\n\t\t) {\n\t\t\textraWordChars += caseFolding.C[c]; // step 3\n\t\t}\n\t});\n\tforEach(OwnPropertyKeys(caseFolding.S), function (c) {\n\t\tif (\n\t\t\t$indexOf(basicWordChars, c) === -1 // c not in A\n\t\t\t&& $indexOf(basicWordChars, Canonicalize(rer, c)) > -1 // canonicalized c IS in A\n\t\t) {\n\t\t\textraWordChars += caseFolding.S[c]; // step 3\n\t\t}\n\t});\n\n\tif ((!rer['[[Unicode]]'] || !rer['[[IgnoreCase]]']) && extraWordChars.length > 0) {\n\t\tthrow new $TypeError('Assertion failed: `extraWordChars` must be empty when `rer.[[IgnoreCase]]` and `rer.[[Unicode]]` are not both true'); // step 3\n\t}\n\n\treturn basicWordChars + extraWordChars; // step 4\n};\n"
        }
    ]
}