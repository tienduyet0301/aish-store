{
    "sourceFile": "node_modules/es-abstract/2024/ToUint8Clamp.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892179568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar clamp = require('./clamp');\n\nvar ToNumber = require('./ToNumber');\nvar floor = require('./floor');\n\nvar $isNaN = require('math-intrinsics/isNaN');\n\n// https://262.ecma-international.org/15.0/#sec-touint8clamp\n\nmodule.exports = function ToUint8Clamp(argument) {\n\tvar number = ToNumber(argument); // step 1\n\n\tif ($isNaN(number)) { return 0; } // step 2\n\n\tvar clamped = clamp(number, 0, 255); // step 4\n\n\tvar f = floor(clamped); // step 5\n\n\tif (clamped < (f + 0.5)) { return f; } // step 6\n\n\tif (clamped > (f + 0.5)) { return f + 1; } // step 7\n\n\treturn f % 2 === 0 ? f : f + 1; // step 8\n};\n"
        }
    ]
}