{
    "sourceFile": "node_modules/es-abstract/2024/GetValueFromBuffer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892172242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar callBound = require('call-bound');\nvar isInteger = require('math-intrinsics/isInteger');\nvar $Uint8Array = GetIntrinsic('%Uint8Array%', true);\n\nvar $slice = callBound('Array.prototype.slice');\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar RawBytesToNumeric = require('./RawBytesToNumeric');\n\nvar isArrayBuffer = require('is-array-buffer');\nvar isSharedArrayBuffer = require('is-shared-array-buffer');\nvar safeConcat = require('safe-array-concat');\n\nvar tableTAO = require('./tables/typed-array-objects');\n\nvar defaultEndianness = require('../helpers/defaultEndianness');\n\n// https://262.ecma-international.org/15.0/#sec-getvaluefrombuffer\n\nmodule.exports = function GetValueFromBuffer(arrayBuffer, byteIndex, type, isTypedArray, order) {\n\tvar isSAB = isSharedArrayBuffer(arrayBuffer);\n\tif (!isArrayBuffer(arrayBuffer) && !isSAB) {\n\t\tthrow new $TypeError('Assertion failed: `arrayBuffer` must be an ArrayBuffer or a SharedArrayBuffer');\n\t}\n\n\tif (!isInteger(byteIndex)) {\n\t\tthrow new $TypeError('Assertion failed: `byteIndex` must be an integer');\n\t}\n\n\tif (typeof type !== 'string' || typeof tableTAO.size['$' + type] !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `type` must be a Typed Array element type');\n\t}\n\n\tif (typeof isTypedArray !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `isTypedArray` must be a boolean');\n\t}\n\n\tif (order !== 'SEQ-CST' && order !== 'UNORDERED') {\n\t\tthrow new $TypeError('Assertion failed: `order` must be either `SEQ-CST` or `UNORDERED`');\n\t}\n\n\tif (arguments.length > 5 && typeof arguments[5] !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `isLittleEndian` must be a boolean, if present');\n\t}\n\n\tif (IsDetachedBuffer(arrayBuffer)) {\n\t\tthrow new $TypeError('Assertion failed: `arrayBuffer` is detached'); // step 1\n\t}\n\n\t// 2. Assert: There are sufficient bytes in arrayBuffer starting at byteIndex to represent a value of type.\n\n\tif (byteIndex < 0) {\n\t\tthrow new $TypeError('Assertion failed: `byteIndex` must be non-negative'); // step 3\n\t}\n\n\t// 4. Let block be arrayBuffer.[[ArrayBufferData]].\n\n\tvar elementSize = tableTAO.size['$' + type]; // step 5\n\tif (!elementSize) {\n\t\tthrow new $TypeError('Assertion failed: `type` must be one of \"INT8\", \"UINT8\", \"UINT8C\", \"INT16\", \"UINT16\", \"INT32\", \"UINT32\", \"BIGINT64\", \"BIGUINT64\", \"FLOAT32\", or \"FLOAT64\"');\n\t}\n\n\tvar rawValue;\n\tif (isSAB) { // step 6\n\t\t/*\n\t\ta. Let execution be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n\t\tb. Let eventList be the [[EventList]] field of the element in execution.[[EventLists]] whose [[AgentSignifier]] is AgentSignifier().\n\t\tc. If isTypedArray is true and type is \"Int8\", \"Uint8\", \"Int16\", \"Uint16\", \"Int32\", or \"Uint32\", let noTear be true; otherwise let noTear be false.\n\t\td. Let rawValue be a List of length elementSize of nondeterministically chosen byte values.\n\t\te. NOTE: In implementations, rawValue is the result of a non-atomic or atomic read instruction on the underlying hardware. The nondeterminism is a semantic prescription of the memory model to describe observable behaviour of hardware with weak consistency.\n\t\tf. Let readEvent be ReadSharedMemory{ [[Order]]: order, [[NoTear]]: noTear, [[Block]]: block, [[ByteIndex]]: byteIndex, [[ElementSize]]: elementSize }.\n\t\tg. Append readEvent to eventList.\n\t\th. Append Chosen Value Record { [[Event]]: readEvent, [[ChosenValue]]: rawValue } to execution.[[ChosenValues]].\n\t\t*/\n\t\tthrow new $SyntaxError('SharedArrayBuffer is not supported by this implementation');\n\t} else {\n\t\t// 7. Let rawValue be a List of elementSize containing, in order, the elementSize sequence of bytes starting with block[byteIndex].\n\t\trawValue = $slice(new $Uint8Array(arrayBuffer, byteIndex), 0, elementSize); // step 6\n\t}\n\n\t// 8. If isLittleEndian is not present, set isLittleEndian to either true or false. The choice is implementation dependent and should be the alternative that is most efficient for the implementation. An implementation must use the same value each time this step is executed and the same value must be used for the corresponding step in the SetValueInBuffer abstract operation.\n\tvar isLittleEndian = arguments.length > 5 ? arguments[5] : defaultEndianness === 'little'; // step 8\n\n\tvar bytes = isLittleEndian\n\t\t? $slice(safeConcat([0, 0, 0, 0, 0, 0, 0, 0], rawValue), -elementSize)\n\t\t: $slice(safeConcat(rawValue, [0, 0, 0, 0, 0, 0, 0, 0]), 0, elementSize);\n\n\treturn RawBytesToNumeric(type, bytes, isLittleEndian);\n};\n"
        }
    ]
}