{
    "sourceFile": "node_modules/es-abstract/2024/GetViewByteLength.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892172280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar IsFixedLengthArrayBuffer = require('./IsFixedLengthArrayBuffer');\nvar IsViewOutOfBounds = require('./IsViewOutOfBounds');\n\nvar isDataViewWithBufferWitnessRecord = require('../helpers/records/data-view-with-buffer-witness-record');\n\nvar dataViewBuffer = require('data-view-buffer');\nvar dataViewByteLength = require('data-view-byte-length');\nvar dataViewByteOffset = require('data-view-byte-offset');\n\n// https://262.ecma-international.org/15.0/#sec-getviewbytelength\n\nmodule.exports = function GetViewByteLength(viewRecord) {\n\tif (!isDataViewWithBufferWitnessRecord(viewRecord)) {\n\t\tthrow new $TypeError('Assertion failed: `viewRecord` must be a DataView with Buffer Witness Record');\n\t}\n\n\tif (IsViewOutOfBounds(viewRecord)) {\n\t\tthrow new $TypeError('Assertion failed: `viewRecord` is out of bounds'); // step 1\n\t}\n\n\tvar view = viewRecord['[[Object]]']; // step 2\n\n\tvar viewByteLength = dataViewByteLength(view); // view.[[ByteLength]]\n\tif (viewByteLength !== 'AUTO') {\n\t\treturn viewByteLength; // step 3\n\t}\n\n\tif (IsFixedLengthArrayBuffer(dataViewBuffer(view))) {\n\t\tthrow new $TypeError('Assertion failed: DataView’s ArrayBuffer is not fixed length'); // step 4\n\t}\n\n\tvar byteOffset = dataViewByteOffset(view); // step 5\n\n\tvar byteLength = viewRecord['[[CachedBufferByteLength]]']; // step 6\n\n\tif (byteLength === 'DETACHED') {\n\t\tthrow new $TypeError('Assertion failed: DataView’s ArrayBuffer is detached'); // step 7\n\t}\n\n\treturn byteLength - byteOffset; // step 8\n};\n"
        }
    ]
}