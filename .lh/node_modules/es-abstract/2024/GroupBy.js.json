{
    "sourceFile": "node_modules/es-abstract/2024/GroupBy.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892172325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar isNegativeZero = require('math-intrinsics/isNegativeZero');\nvar MAX_SAFE_INTEGER = require('math-intrinsics/constants/maxSafeInteger');\n\nvar AddValueToKeyedGroup = require('./AddValueToKeyedGroup');\nvar Call = require('./Call');\nvar GetIterator = require('./GetIterator');\nvar IsCallable = require('./IsCallable');\nvar IteratorClose = require('./IteratorClose');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar RequireObjectCoercible = require('./RequireObjectCoercible');\nvar ThrowCompletion = require('./ThrowCompletion');\nvar ToPropertyKey = require('./ToPropertyKey');\n\n// https://262.ecma-international.org/15.0/#sec-groupby\n\nmodule.exports = function GroupBy(items, callbackfn, keyCoercion) {\n\tif (keyCoercion !== 'PROPERTY' && keyCoercion !== 'ZERO') {\n\t\tthrow new $TypeError('Assertion failed: `keyCoercion` must be `\"PROPERTY\"` or `\"ZERO\"`');\n\t}\n\n\tRequireObjectCoercible(items); // step 1\n\n\tif (!IsCallable(callbackfn)) {\n\t\tthrow new $TypeError('callbackfn must be callable'); // step 2\n\t}\n\n\tvar groups = []; // step 3\n\n\tvar iteratorRecord = GetIterator(items, 'SYNC'); // step 4\n\n\tvar k = 0; // step 5\n\n\t// eslint-disable-next-line no-constant-condition\n\twhile (true) { // step 6\n\t\tif (k >= MAX_SAFE_INTEGER) { // step 6.a\n\t\t\tvar error = ThrowCompletion(new $TypeError('k must be less than 2 ** 53 - 1')); // step 6.a.i\n\t\t\tIteratorClose(iteratorRecord, error); // step 6.a.ii\n\t\t\treturn void undefined;\n\t\t}\n\t\tvar next = IteratorStep(iteratorRecord); // step 6.b\n\t\tif (!next) { // step 6.c\n\t\t\treturn groups; // step 6.c.i\n\t\t}\n\n\t\tvar value = IteratorValue(next); // step 6.dv\n\n\t\tvar key;\n\t\ttry {\n\t\t\tkey = Call(callbackfn, undefined, [value, k]); // step 6.e\n\t\t} catch (e) {\n\t\t\tIteratorClose(iteratorRecord, ThrowCompletion(e)); // step 6.f\n\t\t\treturn void undefined;\n\t\t}\n\n\t\tif (keyCoercion === 'PROPERTY') { // step 6.g\n\t\t\ttry {\n\t\t\t\tkey = ToPropertyKey(key); // step 6.g.i\n\t\t\t} catch (e) {\n\t\t\t\tIteratorClose(iteratorRecord, ThrowCompletion(e)); // step 6.g.ii\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t} else { // step 6.h\n\t\t\tif (keyCoercion !== 'ZERO') {\n\t\t\t\tthrow new $TypeError('keyCoercion must be ~PROPERTY~ or ~ZERO~'); // step 6.h.i\n\t\t\t}\n\t\t\tif (isNegativeZero(key)) {\n\t\t\t\tkey = +0; // step 6.h.ii\n\t\t\t}\n\t\t}\n\n\t\tAddValueToKeyedGroup(groups, key, value); // step 6.i\n\n\t\tk += 1; // step 6.j\n\t}\n};\n"
        }
    ]
}