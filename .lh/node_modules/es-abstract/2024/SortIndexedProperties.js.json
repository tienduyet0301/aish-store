{
    "sourceFile": "node_modules/es-abstract/2024/SortIndexedProperties.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892176887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar callBound = require('call-bound');\nvar isInteger = require('math-intrinsics/isInteger');\n\nvar Get = require('./Get');\nvar HasProperty = require('./HasProperty');\nvar ToString = require('./ToString');\n\nvar isAbstractClosure = require('../helpers/isAbstractClosure');\nvar isObject = require('../helpers/isObject');\n\nvar $push = callBound('Array.prototype.push');\nvar $sort = callBound('Array.prototype.sort');\n\n// https://262.ecma-international.org/14.0/#sec-sortindexedproperties\n\nmodule.exports = function SortIndexedProperties(obj, len, SortCompare, holes) {\n\tif (!isObject(obj)) {\n\t\tthrow new $TypeError('Assertion failed: Type(obj) is not Object');\n\t}\n\tif (!isInteger(len) || len < 0) {\n\t\tthrow new $TypeError('Assertion failed: `len` must be an integer >= 0');\n\t}\n\tif (!isAbstractClosure(SortCompare) || SortCompare.length !== 2) {\n\t\tthrow new $TypeError('Assertion failed: `SortCompare` must be an abstract closure taking 2 arguments');\n\t}\n\tif (holes !== 'skip-holes' && holes !== 'read-through-holes') {\n\t\tthrow new $TypeError('Assertion failed: `holes` must be either `skip-holes` or `read-through-holes`');\n\t}\n\n\tvar items = []; // step 1\n\n\tvar k = 0; // step 2\n\n\twhile (k < len) { // step 3\n\t\tvar Pk = ToString(k);\n\t\tvar kRead = holes === 'skip-holes' ? HasProperty(obj, Pk) : true; // step 3.b - 3.c\n\t\tif (kRead) { // step 3.d\n\t\t\tvar kValue = Get(obj, Pk);\n\t\t\t$push(items, kValue);\n\t\t}\n\t\tk += 1; // step 3.e\n\t}\n\n\t$sort(items, SortCompare); // step 4\n\n\treturn items; // step 5\n};\n"
        }
    ]
}