{
    "sourceFile": "node_modules/es-abstract/2019/RawBytesToNumber.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892134469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar callBound = require('call-bound');\n\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\n\nvar $charAt = callBound('String.prototype.charAt');\nvar $reverse = callBound('Array.prototype.reverse');\nvar $slice = callBound('Array.prototype.slice');\n\nvar hasOwnProperty = require('./HasOwnProperty');\nvar IsArray = require('./IsArray');\n\nvar bytesAsFloat32 = require('../helpers/bytesAsFloat32');\nvar bytesAsFloat64 = require('../helpers/bytesAsFloat64');\nvar bytesAsInteger = require('../helpers/bytesAsInteger');\nvar every = require('../helpers/every');\nvar isByteValue = require('../helpers/isByteValue');\n\nvar keys = require('object-keys');\n\n// https://262.ecma-international.org/8.0/#table-50\nvar TypeToSizes = {\n\t__proto__: null,\n\tInt8: 1,\n\tUint8: 1,\n\tUint8C: 1,\n\tInt16: 2,\n\tUint16: 2,\n\tInt32: 4,\n\tUint32: 4,\n\tFloat32: 4,\n\tFloat64: 8\n};\n\n// https://262.ecma-international.org/8.0/#sec-rawbytestonumber\n\nmodule.exports = function RawBytesToNumber(type, rawBytes, isLittleEndian) {\n\tif (typeof type !== 'string' || !hasOwnProperty(TypeToSizes, type)) {\n\t\tthrow new $TypeError('Assertion failed: `type` must be a TypedArray element type: ' + keys(TypeToSizes));\n\t}\n\tif (!IsArray(rawBytes) || !every(rawBytes, isByteValue)) {\n\t\tthrow new $TypeError('Assertion failed: `rawBytes` must be an Array of bytes');\n\t}\n\tif (typeof isLittleEndian !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `isLittleEndian` must be a Boolean');\n\t}\n\n\tvar elementSize = TypeToSizes[type]; // step 1\n\n\tif (rawBytes.length !== elementSize) {\n\t\t// this assertion is not in the spec, but it'd be an editorial error if it were ever violated\n\t\tthrow new $RangeError('Assertion failed: `rawBytes` must have a length of ' + elementSize + ' for type ' + type);\n\t}\n\n\t// eslint-disable-next-line no-param-reassign\n\trawBytes = $slice(rawBytes, 0, elementSize);\n\tif (!isLittleEndian) {\n\t\t$reverse(rawBytes); // step 2\n\t}\n\n\tif (type === 'Float32') { // step 3\n\t\treturn bytesAsFloat32(rawBytes);\n\t}\n\n\tif (type === 'Float64') { // step 4\n\t\treturn bytesAsFloat64(rawBytes);\n\t}\n\n\treturn bytesAsInteger(rawBytes, elementSize, $charAt(type, 0) === 'U', false);\n};\n"
        }
    ]
}