{
    "sourceFile": "node_modules/es-abstract/2019/TimeZoneString.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892134942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Date = GetIntrinsic('%Date%');\nvar $TypeError = require('es-errors/type');\n\nvar isNaN = require('math-intrinsics/isNaN');\n\nvar callBound = require('call-bound');\n\nvar $indexOf = callBound('String.prototype.indexOf');\nvar $slice = callBound('String.prototype.slice');\nvar $toTimeString = callBound('Date.prototype.toTimeString');\n\n// https://262.ecma-international.org/9.0/#sec-timezoneestring\n\nmodule.exports = function TimeZoneString(tv) {\n\tif (typeof tv !== 'number' || isNaN(tv)) {\n\t\tthrow new $TypeError('Assertion failed: `tv` must be a non-NaN Number'); // steps 1 - 2\n\t}\n\n\t// 3. Let offset be LocalTZA(tv, true).\n\t// 4. If offset â‰¥ 0, let offsetSign be \"+\"; otherwise, let offsetSign be \"-\".\n\t// 5. Let offsetMin be the String representation of MinFromTime(abs(offset)), formatted as a two-digit decimal number, padded to the left with a zero if necessary.\n\t// 6. Let offsetHour be the String representation of HourFromTime(abs(offset)), formatted as a two-digit decimal number, padded to the left with a zero if necessary.\n\t// 7. Let tzName be an implementation-defined string that is either the empty string or the string-concatenation of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-dependent timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).\n\t// 8. Return the string-concatenation of offsetSign, offsetHour, offsetMin, and tzName.\n\n\t// hack until LocalTZA, and \"implementation-defined string\" are available\n\tvar ts = $toTimeString(new $Date(tv));\n\treturn $slice(ts, $indexOf(ts, '(') + 1, $indexOf(ts, ')'));\n};\n"
        }
    ]
}