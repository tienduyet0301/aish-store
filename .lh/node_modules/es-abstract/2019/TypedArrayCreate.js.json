{
    "sourceFile": "node_modules/es-abstract/2019/TypedArrayCreate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892135428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar ValidateTypedArray = require('./ValidateTypedArray');\n\nvar availableTypedArrays = require('available-typed-arrays')();\nvar typedArrayLength = require('typed-array-length');\n\n// https://262.ecma-international.org/7.0/#typedarray-create\n\nmodule.exports = function TypedArrayCreate(constructor, argumentList) {\n\tif (!IsConstructor(constructor)) {\n\t\tthrow new $TypeError('Assertion failed: `constructor` must be a constructor');\n\t}\n\tif (!IsArray(argumentList)) {\n\t\tthrow new $TypeError('Assertion failed: `argumentList` must be a List');\n\t}\n\tif (availableTypedArrays.length === 0) {\n\t\tthrow new $SyntaxError('Assertion failed: Typed Arrays are not supported in this environment');\n\t}\n\n\t// var newTypedArray = Construct(constructor, argumentList); // step 1\n\tvar newTypedArray;\n\tif (argumentList.length === 0) {\n\t\tnewTypedArray = new constructor();\n\t} else if (argumentList.length === 1) {\n\t\tnewTypedArray = new constructor(argumentList[0]);\n\t} else if (argumentList.length === 2) {\n\t\tnewTypedArray = new constructor(argumentList[0], argumentList[1]);\n\t} else {\n\t\tnewTypedArray = new constructor(argumentList[0], argumentList[1], argumentList[2]);\n\t}\n\n\tValidateTypedArray(newTypedArray); // step 2\n\n\tif (argumentList.length === 1 && typeof argumentList[0] === 'number') { // step 3\n\t\tif (typedArrayLength(newTypedArray) < argumentList[0]) {\n\t\t\tthrow new $TypeError('Assertion failed: `argumentList[0]` must be <= `newTypedArray.length`'); // step 3.a\n\t\t}\n\t}\n\n\treturn newTypedArray; // step 4\n};\n"
        }
    ]
}