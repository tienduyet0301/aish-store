{
    "sourceFile": "node_modules/es-abstract/2019/ValidateAndApplyPropertyDescriptor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892135497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar DefineOwnProperty = require('../helpers/DefineOwnProperty');\nvar isPropertyDescriptor = require('../helpers/records/property-descriptor');\nvar isSamePropertyDescriptor = require('../helpers/isSamePropertyDescriptor');\n\nvar FromPropertyDescriptor = require('./FromPropertyDescriptor');\nvar IsAccessorDescriptor = require('./IsAccessorDescriptor');\nvar IsDataDescriptor = require('./IsDataDescriptor');\nvar IsGenericDescriptor = require('./IsGenericDescriptor');\nvar isPropertyKey = require('../helpers/isPropertyKey');\nvar SameValue = require('./SameValue');\n\nvar isObject = require('../helpers/isObject');\n\n// https://262.ecma-international.org/6.0/#sec-validateandapplypropertydescriptor\n// https://262.ecma-international.org/8.0/#sec-validateandapplypropertydescriptor\n\n// eslint-disable-next-line max-lines-per-function, max-statements\nmodule.exports = function ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) {\n\t// this uses the ES2017+ logic, since it fixes a number of bugs in the ES2015 logic.\n\tif (typeof O !== 'undefined' && !isObject(O)) {\n\t\tthrow new $TypeError('Assertion failed: O must be undefined or an Object');\n\t}\n\tif (typeof extensible !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: extensible must be a Boolean');\n\t}\n\tif (!isPropertyDescriptor(Desc)) {\n\t\tthrow new $TypeError('Assertion failed: Desc must be a Property Descriptor');\n\t}\n\tif (typeof current !== 'undefined' && !isPropertyDescriptor(current)) {\n\t\tthrow new $TypeError('Assertion failed: current must be a Property Descriptor, or undefined');\n\t}\n\tif (typeof O !== 'undefined' && !isPropertyKey(P)) {\n\t\tthrow new $TypeError('Assertion failed: if O is not undefined, P must be a Property Key');\n\t}\n\tif (typeof current === 'undefined') {\n\t\tif (!extensible) {\n\t\t\treturn false;\n\t\t}\n\t\tif (IsGenericDescriptor(Desc) || IsDataDescriptor(Desc)) {\n\t\t\tif (typeof O !== 'undefined') {\n\t\t\t\tDefineOwnProperty(\n\t\t\t\t\tIsDataDescriptor,\n\t\t\t\t\tSameValue,\n\t\t\t\t\tFromPropertyDescriptor,\n\t\t\t\t\tO,\n\t\t\t\t\tP,\n\t\t\t\t\t{\n\t\t\t\t\t\t'[[Configurable]]': Desc['[[Configurable]]'],\n\t\t\t\t\t\t'[[Enumerable]]': Desc['[[Enumerable]]'],\n\t\t\t\t\t\t'[[Value]]': Desc['[[Value]]'],\n\t\t\t\t\t\t'[[Writable]]': Desc['[[Writable]]']\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!IsAccessorDescriptor(Desc)) {\n\t\t\t\tthrow new $TypeError('Assertion failed: Desc is not an accessor descriptor');\n\t\t\t}\n\t\t\tif (typeof O !== 'undefined') {\n\t\t\t\treturn DefineOwnProperty(\n\t\t\t\t\tIsDataDescriptor,\n\t\t\t\t\tSameValue,\n\t\t\t\t\tFromPropertyDescriptor,\n\t\t\t\t\tO,\n\t\t\t\t\tP,\n\t\t\t\t\tDesc\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tif (IsGenericDescriptor(Desc) && !('[[Configurable]]' in Desc) && !('[[Enumerable]]' in Desc)) {\n\t\treturn true;\n\t}\n\tif (isSamePropertyDescriptor({ SameValue: SameValue }, Desc, current)) {\n\t\treturn true; // removed by ES2017, but should still be correct\n\t}\n\t// \"if every field in Desc is absent, return true\" can't really match the assertion that it's a Property Descriptor\n\tif (!current['[[Configurable]]']) {\n\t\tif (Desc['[[Configurable]]']) {\n\t\t\treturn false;\n\t\t}\n\t\tif ('[[Enumerable]]' in Desc && !Desc['[[Enumerable]]'] === !!current['[[Enumerable]]']) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (IsGenericDescriptor(Desc)) {\n\t\t// no further validation is required.\n\t} else if (IsDataDescriptor(current) !== IsDataDescriptor(Desc)) {\n\t\tif (!current['[[Configurable]]']) {\n\t\t\treturn false;\n\t\t}\n\t\tif (IsDataDescriptor(current)) {\n\t\t\tif (typeof O !== 'undefined') {\n\t\t\t\tDefineOwnProperty(\n\t\t\t\t\tIsDataDescriptor,\n\t\t\t\t\tSameValue,\n\t\t\t\t\tFromPropertyDescriptor,\n\t\t\t\t\tO,\n\t\t\t\t\tP,\n\t\t\t\t\t{\n\t\t\t\t\t\t'[[Configurable]]': current['[[Configurable]]'],\n\t\t\t\t\t\t'[[Enumerable]]': current['[[Enumerable]]'],\n\t\t\t\t\t\t'[[Get]]': undefined\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t} else if (typeof O !== 'undefined') {\n\t\t\tDefineOwnProperty(\n\t\t\t\tIsDataDescriptor,\n\t\t\t\tSameValue,\n\t\t\t\tFromPropertyDescriptor,\n\t\t\t\tO,\n\t\t\t\tP,\n\t\t\t\t{\n\t\t\t\t\t'[[Configurable]]': current['[[Configurable]]'],\n\t\t\t\t\t'[[Enumerable]]': current['[[Enumerable]]'],\n\t\t\t\t\t'[[Value]]': undefined\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t} else if (IsDataDescriptor(current) && IsDataDescriptor(Desc)) {\n\t\tif (!current['[[Configurable]]'] && !current['[[Writable]]']) {\n\t\t\tif ('[[Writable]]' in Desc && Desc['[[Writable]]']) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ('[[Value]]' in Desc && !SameValue(Desc['[[Value]]'], current['[[Value]]'])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t} else if (IsAccessorDescriptor(current) && IsAccessorDescriptor(Desc)) {\n\t\tif (!current['[[Configurable]]']) {\n\t\t\tif ('[[Set]]' in Desc && !SameValue(Desc['[[Set]]'], current['[[Set]]'])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ('[[Get]]' in Desc && !SameValue(Desc['[[Get]]'], current['[[Get]]'])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\tthrow new $TypeError('Assertion failed: current and Desc are not both data, both accessors, or one accessor and one data.');\n\t}\n\tif (typeof O !== 'undefined') {\n\t\treturn DefineOwnProperty(\n\t\t\tIsDataDescriptor,\n\t\t\tSameValue,\n\t\t\tFromPropertyDescriptor,\n\t\t\tO,\n\t\t\tP,\n\t\t\tDesc\n\t\t);\n\t}\n\treturn true;\n};\n"
        }
    ]
}