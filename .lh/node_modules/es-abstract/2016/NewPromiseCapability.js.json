{
    "sourceFile": "node_modules/es-abstract/2016/NewPromiseCapability.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892124410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar IsCallable = require('./IsCallable');\nvar IsConstructor = require('./IsConstructor');\n\n// https://262.ecma-international.org/6.0/#sec-newpromisecapability\n\nmodule.exports = function NewPromiseCapability(C) {\n\tif (!IsConstructor(C)) {\n\t\tthrow new $TypeError('C must be a constructor'); // step 1\n\t}\n\n\tvar resolvingFunctions = { '[[Resolve]]': void undefined, '[[Reject]]': void undefined }; // step 3\n\n\tvar promise = new C(function (resolve, reject) { // steps 4-5\n\t\tif (typeof resolvingFunctions['[[Resolve]]'] !== 'undefined' || typeof resolvingFunctions['[[Reject]]'] !== 'undefined') {\n\t\t\tthrow new $TypeError('executor has already been called'); // step 4.a, 4.b\n\t\t}\n\t\tresolvingFunctions['[[Resolve]]'] = resolve; // step 4.c\n\t\tresolvingFunctions['[[Reject]]'] = reject; // step 4.d\n\t}); // step 4-6\n\n\tif (!IsCallable(resolvingFunctions['[[Resolve]]']) || !IsCallable(resolvingFunctions['[[Reject]]'])) {\n\t\tthrow new $TypeError('executor must provide valid resolve and reject functions'); // steps 7-8\n\t}\n\n\treturn {\n\t\t'[[Promise]]': promise,\n\t\t'[[Resolve]]': resolvingFunctions['[[Resolve]]'],\n\t\t'[[Reject]]': resolvingFunctions['[[Reject]]']\n\t}; // step 9\n};\n"
        }
    ]
}