{
    "sourceFile": "node_modules/es-abstract/2023/ToBigInt.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892169578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\nvar $Number = GetIntrinsic('%Number%');\nvar $TypeError = require('es-errors/type');\nvar $SyntaxError = require('es-errors/syntax');\n\nvar StringToBigInt = require('./StringToBigInt');\nvar ToPrimitive = require('./ToPrimitive');\n\n// https://262.ecma-international.org/13.0/#sec-tobigint\n\nmodule.exports = function ToBigInt(argument) {\n\tif (!$BigInt) {\n\t\tthrow new $SyntaxError('BigInts are not supported in this environment');\n\t}\n\n\tvar prim = ToPrimitive(argument, $Number);\n\n\tif (prim == null) {\n\t\tthrow new $TypeError('Cannot convert null or undefined to a BigInt');\n\t}\n\n\tif (typeof prim === 'boolean') {\n\t\treturn prim ? $BigInt(1) : $BigInt(0);\n\t}\n\n\tif (typeof prim === 'number') {\n\t\tthrow new $TypeError('Cannot convert a Number value to a BigInt');\n\t}\n\n\tif (typeof prim === 'string') {\n\t\tvar n = StringToBigInt(prim);\n\t\tif (typeof n === 'undefined') {\n\t\t\tthrow new $TypeError('Failed to parse String to BigInt');\n\t\t}\n\t\treturn n;\n\t}\n\n\tif (typeof prim === 'symbol') {\n\t\tthrow new $TypeError('Cannot convert a Symbol value to a BigInt');\n\t}\n\n\tif (typeof prim !== 'bigint') {\n\t\tthrow new $SyntaxError('Assertion failed: unknown primitive type');\n\t}\n\n\treturn prim;\n};\n"
        }
    ]
}