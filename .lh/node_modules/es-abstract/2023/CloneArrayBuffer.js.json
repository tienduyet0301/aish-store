{
    "sourceFile": "node_modules/es-abstract/2023/CloneArrayBuffer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892163716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar GetPrototypeFromConstructor = require('./GetPrototypeFromConstructor');\nvar IsConstructor = require('./IsConstructor');\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar OrdinarySetPrototypeOf = require('./OrdinarySetPrototypeOf');\n\nvar isInteger = require('math-intrinsics/isInteger');\nvar isArrayBuffer = require('is-array-buffer');\nvar arrayBufferSlice = require('arraybuffer.prototype.slice');\n\n// https://262.ecma-international.org/12.0/#sec-clonearraybuffer\n\nmodule.exports = function CloneArrayBuffer(srcBuffer, srcByteOffset, srcLength, cloneConstructor) {\n\tif (!isArrayBuffer(srcBuffer)) {\n\t\tthrow new $TypeError('Assertion failed: `srcBuffer` must be an ArrayBuffer instance');\n\t}\n\tif (!isInteger(srcByteOffset) || srcByteOffset < 0) {\n\t\tthrow new $TypeError('Assertion failed: `srcByteOffset` must be a non-negative integer');\n\t}\n\tif (!isInteger(srcLength) || srcLength < 0) {\n\t\tthrow new $TypeError('Assertion failed: `srcLength` must be a non-negative integer');\n\t}\n\tif (!IsConstructor(cloneConstructor)) {\n\t\tthrow new $TypeError('Assertion failed: `cloneConstructor` must be a constructor');\n\t}\n\n\t// 3. Let targetBuffer be ? AllocateArrayBuffer(cloneConstructor, srcLength).\n\tvar proto = GetPrototypeFromConstructor(cloneConstructor, '%ArrayBufferPrototype%'); // step 3, kinda\n\n\tif (IsDetachedBuffer(srcBuffer)) {\n\t\tthrow new $TypeError('`srcBuffer` must not be a detached ArrayBuffer'); // step 4\n\t}\n\n\t/*\n    5. Let srcBlock be srcBuffer.[[ArrayBufferData]].\n    6. Let targetBlock be targetBuffer.[[ArrayBufferData]].\n    7. Perform CopyDataBlockBytes(targetBlock, 0, srcBlock, srcByteOffset, srcLength).\n    */\n\tvar targetBuffer = arrayBufferSlice(srcBuffer, srcByteOffset, srcByteOffset + srcLength); // steps 5-7\n\tOrdinarySetPrototypeOf(targetBuffer, proto); // step 3\n\n\treturn targetBuffer; // step 8\n};\n"
        }
    ]
}