{
    "sourceFile": "node_modules/es-abstract/2023/SetTypedArrayFromArrayLike.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892168931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $RangeError = require('es-errors/range');\nvar $TypeError = require('es-errors/type');\nvar isInteger = require('math-intrinsics/isInteger');\n\nvar isTypedArray = require('is-typed-array');\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayLength = require('typed-array-length');\nvar whichTypedArray = require('which-typed-array');\n\nvar Get = require('./Get');\nvar IntegerIndexedElementSet = require('./IntegerIndexedElementSet');\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\nvar ToObject = require('./ToObject');\nvar ToString = require('./ToString');\n\n// https://262.ecma-international.org/14.0/#sec-settypedarrayfromarraylike\n\nmodule.exports = function SetTypedArrayFromArrayLike(target, targetOffset, source) {\n\tvar whichTarget = whichTypedArray(target);\n\tif (!whichTarget) {\n\t\tthrow new $TypeError('Assertion failed: target must be a TypedArray instance');\n\t}\n\n\tif (targetOffset !== Infinity && (!isInteger(targetOffset) || targetOffset < 0)) {\n\t\tthrow new $TypeError('Assertion failed: targetOffset must be a non-negative integer or +Infinity');\n\t}\n\n\tif (isTypedArray(source)) {\n\t\tthrow new $TypeError('Assertion failed: source must not be a TypedArray instance');\n\t}\n\n\tvar targetBuffer = typedArrayBuffer(target); // step 1\n\n\tif (IsDetachedBuffer(targetBuffer)) {\n\t\tthrow new $TypeError('targetâ€™s buffer is detached'); // step 2\n\t}\n\n\tvar targetLength = typedArrayLength(target); // step 3\n\n\tvar src = ToObject(source); // step 4\n\n\tvar srcLength = LengthOfArrayLike(src); // step 5\n\n\tif (targetOffset === Infinity) {\n\t\tthrow new $RangeError('targetOffset must be a finite integer'); // step 6\n\t}\n\n\tif (srcLength + targetOffset > targetLength) {\n\t\tthrow new $RangeError('targetOffset + srcLength must be <= target.length'); // step 7\n\t}\n\n\tvar k = 0; // step 8\n\n\twhile (k < srcLength) { // step 9\n\t\tvar Pk = ToString(k); // step 9.a\n\n\t\tvar value = Get(src, Pk); // step 9.b\n\n\t\tvar targetIndex = targetOffset + k; // step 9.c\n\n\t\tIntegerIndexedElementSet(target, targetIndex, value); // step 9.d\n\n\t\tk += 1; // step 9.e\n\t}\n};\n"
        }
    ]
}