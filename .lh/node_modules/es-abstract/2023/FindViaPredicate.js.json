{
    "sourceFile": "node_modules/es-abstract/2023/FindViaPredicate.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892164964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar isInteger = require('math-intrinsics/isInteger');\n\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar ToBoolean = require('./ToBoolean');\nvar IsCallable = require('./IsCallable');\nvar ToString = require('./ToString');\n\nvar isObject = require('../helpers/isObject');\n\n// https://262.ecma-international.org/14.0/#sec-findviapredicate\n\nmodule.exports = function FindViaPredicate(O, len, direction, predicate, thisArg) {\n\tif (!isObject(O)) {\n\t\tthrow new $TypeError('Assertion failed: Type(O) is not Object');\n\t}\n\tif (!isInteger(len) || len < 0) {\n\t\tthrow new $TypeError('Assertion failed: len must be a non-negative integer');\n\t}\n\tif (direction !== 'ascending' && direction !== 'descending') {\n\t\tthrow new $TypeError('Assertion failed: direction must be \"ascending\" or \"descending\"');\n\t}\n\n\tif (!IsCallable(predicate)) {\n\t\tthrow new $TypeError('predicate must be callable'); // step 1\n\t}\n\n\tfor ( // steps 2-4\n\t\tvar k = direction === 'ascending' ? 0 : len - 1;\n\t\tdirection === 'ascending' ? k < len : k >= 0;\n\t\tk += 1\n\t) {\n\t\tvar Pk = ToString(k); // step 4.a\n\t\tvar kValue = Get(O, Pk); // step 4.c\n\t\tvar testResult = Call(predicate, thisArg, [kValue, k, O]); // step 4.d\n\t\tif (ToBoolean(testResult)) {\n\t\t\treturn { '[[Index]]': k, '[[Value]]': kValue }; // step 4.e\n\t\t}\n\t}\n\treturn { '[[Index]]': -1, '[[Value]]': void undefined }; // step 5\n};\n"
        }
    ]
}