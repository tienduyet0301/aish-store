{
    "sourceFile": "node_modules/es-abstract/2023/IsLooselyEqual.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892166046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar isFinite = require('math-intrinsics/isFinite');\n\nvar IsStrictlyEqual = require('./IsStrictlyEqual');\nvar StringToBigInt = require('./StringToBigInt');\nvar ToNumber = require('./ToNumber');\nvar ToPrimitive = require('./ToPrimitive');\nvar Type = require('./Type');\n\nvar isObject = require('../helpers/isObject');\n\n// https://262.ecma-international.org/13.0/#sec-islooselyequal\n\nmodule.exports = function IsLooselyEqual(x, y) {\n\tif (Type(x) === Type(y)) {\n\t\treturn IsStrictlyEqual(x, y);\n\t}\n\tif (x == null && y == null) {\n\t\treturn true;\n\t}\n\tif (typeof x === 'number' && typeof y === 'string') {\n\t\treturn IsLooselyEqual(x, ToNumber(y));\n\t}\n\tif (typeof x === 'string' && typeof y === 'number') {\n\t\treturn IsLooselyEqual(ToNumber(x), y);\n\t}\n\tif (typeof x === 'bigint' && typeof y === 'string') {\n\t\tvar n = StringToBigInt(y);\n\t\tif (typeof n === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\t\treturn IsLooselyEqual(x, n);\n\t}\n\tif (typeof x === 'string' && typeof y === 'bigint') {\n\t\treturn IsLooselyEqual(y, x);\n\t}\n\tif (typeof x === 'boolean') {\n\t\treturn IsLooselyEqual(ToNumber(x), y);\n\t}\n\tif (typeof y === 'boolean') {\n\t\treturn IsLooselyEqual(x, ToNumber(y));\n\t}\n\tif ((typeof x === 'string' || typeof x === 'number' || typeof x === 'symbol' || typeof x === 'bigint') && isObject(y)) {\n\t\treturn IsLooselyEqual(x, ToPrimitive(y));\n\t}\n\tif (isObject(x) && (typeof y === 'string' || typeof y === 'number' || typeof y === 'symbol' || typeof y === 'bigint')) {\n\t\treturn IsLooselyEqual(ToPrimitive(x), y);\n\t}\n\tif ((typeof x === 'bigint' && typeof y === 'number') || (typeof x === 'number' && typeof y === 'bigint')) {\n\t\tif (!isFinite(x) || !isFinite(y)) {\n\t\t\treturn false;\n\t\t}\n\t\t// eslint-disable-next-line eqeqeq\n\t\treturn x == y; // shortcut for step 13.b.\n\t}\n\treturn false;\n};\n"
        }
    ]
}