{
    "sourceFile": "node_modules/es-abstract/2023/ParseHexOctet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892168418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar substring = require('./substring');\n\nvar isNaN = require('math-intrinsics/isNaN');\n\n// https://262.ecma-international.org/14.0/#sec-parsehexoctet\n\nmodule.exports = function ParseHexOctet(string, position) {\n\tif (typeof string !== 'string') {\n\t\tthrow new $TypeError('Assertion failed: `string` must be a String');\n\t}\n\tif (!IsIntegralNumber(position) || position < 0) {\n\t\tthrow new $TypeError('Assertion failed: `position` must be a nonnegative integer');\n\t}\n\n\tvar len = string.length; // step 1\n\tif ((position + 2) > len) { // step 2\n\t\tvar error = new $SyntaxError('requested a position on a string that does not contain 2 characters at that position'); // step 2.a\n\t\treturn [error]; // step 2.b\n\t}\n\tvar hexDigits = substring(string, position, position + 2); // step 3\n\n\tvar n = +('0x' + hexDigits);\n\tif (isNaN(n)) {\n\t\treturn [new $SyntaxError('Invalid hexadecimal characters')];\n\t}\n\treturn n;\n\n\t/*\n\t4. Let _parseResult_ be ParseText(StringToCodePoints(_hexDigits_), |HexDigits[~Sep]|).\n    5. If _parseResult_ is not a Parse Node, return _parseResult_.\n    6. Let _n_ be the unsigned 8-bit value corresponding with the MV of _parseResult_.\n    7. Return _n_.\n    */\n};\n"
        }
    ]
}