{
    "sourceFile": "node_modules/es-abstract/2023/IntegerIndexedElementGet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892165564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar GetValueFromBuffer = require('./GetValueFromBuffer');\nvar IsValidIntegerIndex = require('./IsValidIntegerIndex');\nvar TypedArrayElementSize = require('./TypedArrayElementSize');\nvar TypedArrayElementType = require('./TypedArrayElementType');\n\nvar isTypedArray = require('is-typed-array');\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\n\n// https://262.ecma-international.org/13.0/#sec-integerindexedelementget\n\nmodule.exports = function IntegerIndexedElementGet(O, index) {\n\tif (!isTypedArray(O)) {\n\t\tthrow new $TypeError('Assertion failed: `O` must be a TypedArray');\n\t}\n\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `index` must be a Number');\n\t}\n\n\tif (!IsValidIntegerIndex(O, index)) {\n\t\treturn void undefined; // step 1\n\t}\n\n\tvar offset = typedArrayByteOffset(O); // step 2\n\n\tvar elementSize = TypedArrayElementSize(O); // step 3\n\n\tvar indexedPosition = (index * elementSize) + offset; // step 4\n\n\tvar elementType = TypedArrayElementType(O); // step 5\n\n\treturn GetValueFromBuffer(typedArrayBuffer(O), indexedPosition, elementType, true, 'Unordered'); // step 11\n};\n"
        }
    ]
}