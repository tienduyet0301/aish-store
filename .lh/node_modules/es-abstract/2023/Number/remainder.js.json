{
    "sourceFile": "node_modules/es-abstract/2023/Number/remainder.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892167293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar isNaN = require('math-intrinsics/isNaN');\nvar isFinite = require('math-intrinsics/isFinite');\n\nvar truncate = require('../truncate');\n\n// https://262.ecma-international.org/14.0/#sec-numeric-types-number-remainder\n\nmodule.exports = function NumberRemainder(n, d) {\n\tif (typeof n !== 'number' || typeof d !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `n` and `d` arguments must be Numbers');\n\t}\n\n\t// If either operand is NaN, the result is NaN.\n\t// If the dividend is an infinity, or the divisor is a zero, or both, the result is NaN.\n\tif (isNaN(n) || isNaN(d) || !isFinite(n) || d === 0) {\n\t\treturn NaN;\n\t}\n\n\t// If the dividend is finite and the divisor is an infinity, the result equals the dividend.\n\t// If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.\n\tif (!isFinite(d) || n === 0) {\n\t\treturn n;\n\t}\n\n\tif (!isFinite(n) || !isFinite(d) || n === 0 || d === 0) {\n\t\tthrow new $TypeError('Assertion failed: `n` and `d` arguments must be finite and nonzero');\n\t}\n\tvar quotient = n / d;\n\tvar q = truncate(quotient);\n\tvar r = n - (d * q);\n\tif (r === 0 && n < 0) {\n\t\treturn -0;\n\t}\n\treturn r;\n};\n"
        }
    ]
}