{
    "sourceFile": "node_modules/es-abstract/2023/ToInt32.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892169794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar modulo = require('./modulo');\nvar ToNumber = require('./ToNumber');\nvar truncate = require('./truncate');\n\nvar isFinite = require('math-intrinsics/isFinite');\n\n// https://262.ecma-international.org/14.0/#sec-toint32\n\nvar two31 = 0x80000000; // Math.pow(2, 31);\nvar two32 = 0x100000000; // Math.pow(2, 32);\n\nmodule.exports = function ToInt32(argument) {\n\tvar number = ToNumber(argument);\n\tif (!isFinite(number) || number === 0) {\n\t\treturn 0;\n\t}\n\tvar int = truncate(number);\n\tvar int32bit = modulo(int, two32);\n\tvar result = int32bit >= two31 ? int32bit - two32 : int32bit;\n\treturn result === 0 ? 0 : result; // in the spec, these are math values, so we filter out -0 here\n};\n"
        }
    ]
}