{
    "sourceFile": "node_modules/es-abstract/CHANGELOG.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892183078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "1.23.9 / 2025-01-02\n=================\n  * [Refactor] use `get-proto` directly\n  * [Refactor] use `set-proto` directly\n  * [Refactor] use `Reflect.setPrototypeOf` and `dunder-proto` in `setProto` helper\n  * [Refactor] `ES2015`+: `ArrayCreate`: use `setProto` helper\n  * [Deps] update `es-set-tostringtag`, `own-keys`\n  * [Dev Deps] update `is-core-module`\n  * [Tests] use `own-keys` directly\n\n1.23.8 / 2024-12-28\n=================\n  * [Refactor] use `own-keys`\n  * [Refactor] use `safe-push-apply`\n\n1.23.7 / 2024-12-20\n=================\n  * [Refactor] create and use `helpers/isPropertyKey`\n  * [Refactor] add `timeValue` helper, use it\n  * [Deps] update `array-buffer-byte-length`, `data-view-buffer`, `data-view-byte-length`, `data-view-byte-offset`, `function.prototype.name`, `get-symbol-description`, `is-array-buffer`, `is-shared-array-buffer`, `is-typed-array`, `math-intrinsics`, `object.assign`, `typed-array-buffer`, `typed-array-byte-length`, `typed-array-byte-offset`, `unbox-primitive`, `which-typed-array`\n  * [Deps] remove unused dep\n  * [Dev Deps] update `array.prototype.indexof`, `has-bigints`, `is-registered-symbol`, `safe-bigint`\n\n1.23.6 / 2024-12-15\n=================\n  * [Fix] `ES2015` - `ES2019`: `IntegerIndexedElementSet`: reject BigInt Typed Arrays prior to ES2020\n  * [Fix] `ES2023`+: `SetTypedArrayFromTypedArray`: provide missing `cloneConstructor` argument to `CloneArrayBuffer`\n  * [Fix] `ES2024`+: `FindViaPredicate`: spec enums are uppercase now\n  * [Fix] `ES2017` - `ES2019`: `SetValueInBuffer`: handle proper number of arguments\n  * [Fix] `ES2015`+: `QuoteJSONString`: properly handle surrogates\n  * [Fix] `ES2015`+: `TestIntegrityLevel`: properly handle envs without property descriptors\n  * [patch] `ES2018` - `ES2023`: `thisSymbolValue`: only require `Symbol.prototype.valueOf` for boxed Symbols\n  * [Robustness] `ES2015` - `ES2016`: `SetValueInBuffer`: salt dictionary keys in case of pre-proto envs\n  * [Refactor] use `math-intrinsics`\n  * [Refactor] use `call-bound` directly\n  * [Refactor] `ES2015`+: `GetIterator`: hoist an object to module scope\n  * [Refactor] use `typeof` over `Type()` when possible\n  * [Refactor] `ES2015` - `ES2016`: `GetValueFromBuffer`: remove unnecessary extra helper argument\n  * [Refactor] misc cleanups\n  * [Refactor] make and use `isObject` helper\n  * [Refactor] `ES5`+: `MonthFromTime`: throw a `RangeError` for an out of range timestamp\n  * [Refactor] use `+` over `Number()`\n  * [Deps] update `arraybuffer.prototype.slice`, `call-bind`, `es-define-property`, `es-to-primitive`, `function.prototype.name`, `get-intrinsic`, `gopd`, `has-proto`, `has-symbols`, `internal-slot`, `is-data-view`, `is-regex`, `is-string`, `which-typed-array`, `is-weakref`, `safe-array-concat`, `safe-regex-test`, `string.prototype.trim`, `string.prototype.trimend`, `typed-array-byte-offset`, `typed-array-length`\n  * [meta] remove unnecessary unspackles\n  * [Tests] `isStringOrUndefined`: increase coverage\n  * [Tests] bigint tests are ES2020+ only\n  * [Dev Deps] update `array.prototype.flatmap`, `is-core-module`, `is-registered-symbol`\n\n1.23.5 / 2024-11-14\n=================\n  * [Fix] `ES2015`+: `CompletionRecord`: ensure `?` works on any non-abrupt completion\n\n1.23.4 / 2024-11-12\n=================\n  * [Fix] `ES2024`+: Iterator Records can now have non-functions in `[[NextMethod]]`\n  * [meta] update spec URL comments\n  * [Deps] update `globalthis`, `object-inspect`, `regexp.prototype.flags`\n  * [Dev Deps] update `@ljharb/eslint-config`, `@unicode/unicode-15.0.0`, `diff`, `es-value-fixtures`, `is-core-module`, `mock-property`, `ses`, `tape`\n  * [actions] split out node 10-20, and 20+\n  * [Tests] switch to `npm audit` from `aud`\n  * [Tests] use `.assertion` instead of monkeypatching tape\n  * [Tests] increase coverage\n\n1.23.3 / 2024-03-29\n=================\n  * [Fix] `ES2024`: `StringPad`, `StringPaddingBuiltinsImpl`: prefer uppercase spec enums\n  * [Fix] `helpers/bytesAsInteger`: avoid a crash in node 10.4 - 10.8\n  * [Fix] `ES5`: `CheckObjectCoercible`: restore `optMessage` optional arg\n  * [Refactor] `ES2022`+: update `TimeString` to use `ToZeroPaddedDecimalString`\n  * [Robustness] use cached copies of builtins\n  * [Deps] update `string.prototype.trimstart`, `typed-array-length`\n  * [Dev Deps] update `array.from`, `array.prototype.filter`, `array.prototype.indexof`, `object.fromentries`, `safe-bigint`\n\n1.23.2 / 2024-03-17\n=================\n  * [Fix] `records/regexp-record`: add optional `[[UnicodeSets]]` boolean field\n  * [Fix] `ES2024`+: `AddValueToKeyedGroup`: avoid adding matched values twice\n  * [Fix] `ES5`: `CheckObjectCoercible`: use the right function name\n  * [Fix] `ES2024`+: `AddEntriesFromIterable`, `GetIterator`, `GroupBy`: properly capitalize spec enums\n  * [Deps] update `string.prototype.trim`, `string.prototype.trimend`\n  * [Tests] increase coverage\n\n1.23.1 / 2024-03-16\n=================\n  * [Refactor] use `es-object-atoms`\n  * [Deps] update `hasown`, `which-typed-array`, `data-view-byte-length`, `safe-array-concat`\n  * [Dev Deps] update `diff`\n\n1.23.0 / 2024-03-04\n=================\n  * [New] add `ES2024`\n  * [New] `ES2015`+: add `InternalizeJSONProperty`\n  * [New] `ES2015`+: add `IntegerIndexedElement{Get,Set}`\n  * [New] `ES2018`+: add `TimeZoneString`\n  * [New] `ES2022`+: add `DefineMethodProperty`\n  * [New] `ES2023`: add `DefaultTimeZone`\n  * [Fix] `ES2023`+: `SetTypedArrayFrom{TypedArray,ArrayLike}`: match engine reality\n  * [Fix] `ES2024`+: `GetViewByteLength`, `IsViewOutOfBounds`: support engines with only own DV properties\n  * [Tests] use `safe-bigint`\n\n1.22.5 / 2024-02-28\n=================\n  * [Fix] `ES2015`+: `DetachArrayBuffer`: node v21.0.0+ structuredClone throws with an already-detached ArrayBuffer\n  * [Fix] `helpers/assertRecord`: partial revert of 87c340d2; unintentional breaking change\n  * [patch] records: fix indentation, improve object checks\n  * [Refactor] extract TA tables to separate files\n  * [meta] extract \"list spackled files\" to separate run-script\n  * [Deps] update `available-typed-arrays`, `es-set-tostringtag`, `has-proto`, `is-negative-zero`, `is-shared-array-buffer`, `typed-array-buffer`, `typed-array-byte-length`, `typed-array-byte-offset`, `typed-array-length`\n  * [Dev Deps] update `available-regexp-flags`, `tape`\n  * [Dev Deps] pin `jackspeak` and `glob`, since v2.1.2+ and v10.3.8+ respectively depend on npm aliases, which kill the install process in npm < 6\n  * [Tests] use `define-{accessor,data}-property`\n  * [Tests] fix some test cases\n  * [Tests] use `safeBigInt` for `Z()` pattern to handle node 10.4 - 10.8\n\n1.22.4 / 2024-02-13\n=================\n  * [Fix] `ES2017`+: `IsDetachedBuffer`: properly allow SABs\n  * [Fix] `ES2022`+: `ToBigInt`: properly throw on an unparseable string\n  * [Fix] `ES2015`+: `ValidateTypedArray`: proper detachment check and return value\n  * [Fix] `ES2022`+: `GetSubstitution`: match updated semantics\n  * [Refactor] prefer `typeof` over `Type()`, except for Object, where possible\n  * [Refactor] use `es-errors` instead of `get-intrinsic` where possible\n  * [Refactor] use `es-define-property`\n  * [Refactor] records: extract predicates to individual files\n  * [Refactor] `ES2015`+: `Canonicalize`, `WordCharacters`: use explicit `.json` extension for imports\n  * [Deps] update `array-buffer-byte-length`, `arraybuffer.prototype.slice`, `available-typed-arrays`, `call-bind`, `es-set-tostringtag`, `get-intrinsic`, `get-symbol-description`, `has-proper    ty-descriptors`, `has-property-descriptors`, `hasown`, `internal-slot`, `is-array-buffer`, `is-typed-array`, `object.assign`, `regexp.prototype.flags`, `safe-array-concat`, `safe-regex-test`, `typed-array-buffer`, `which-typed-array`\n  * [eslint] remove unused overrides\n  * [Tests] increase/fix coverage\n  * [Dev Deps] update `aud`, `npmignore`, `mock-property`, `tape`\n\n1.22.3 / 2023-10-20\n=================\n  * [Fix] `ES2015`+: `GetSubstitution`: accept `undefined` instead of a hole\n  * [Refactor] use `hasown` instead of `has`\n  * [Deps] update `call-bind`, `get-intrinsic`, `object-inspect`, `which-typed-array`\n  * [Dev Deps] update `function-bind`, `is-core-module`, `mock-property`, `tape`\n\n1.22.2 / 2023-09-14\n=================\n  * [Fix] `ES2015`+: `NewPromiseCapability`: use AOs from the current year, not 2022\n  * [Refactor] `ES2021`+: `SetTypedArrayFromArrayLike`: use `IsBigIntElementType`\n  * [Refactor] properly name `helpers/typedArrayConstructors`\n  * [Refactor] simplify helpers\n  * [Deps] update `arraybuffer.prototype.slice`, `function.prototype.name`, `is-typed-array`, `regexp.prototype.flags`, `safe-array-concat`, `string.prototype.trim`, `string.prototype.trimend`, `string.prototype.trimstart`, `which-typed-array`\n  * [actions] update actions\n  * [Tests] run SES tests on more node versions\n  * [Dev Deps] update `@unicode/unicode-15.0.0`, `array.from`, `array.prototype.filter`, `array.prototype.flatmap`, `array.prototype.indexof`, `is-core-module`, `object.fromentries`, `ses`, `tape`\n\n1.22.1 / 2023-07-15\n=================\n  * [Deps] add missing `safe-array-concat` dep\n\n1.22.0 / 2023-07-15\n=================\n  * [New] add `ES2023`\n  * [New] `ES2021+`: add `SetTypedArrayFromArrayLike`, `SetTypedArrayFromTypedArray`\n  * [New] `ES2021`+: add `CloneArrayBuffer`\n  * [New] `ES2020`+: add `IsValidIntegerIndex`\n  * [New] `ES2015`+: add `GetValueFromBuffer`, `SetValueInBuffer`\n  * [New] `ES2016`+: add `TypedArrayCreate`, `TypedArraySpeciesCreate`\n  * [New] `ES2015`+: add `IsWordChar`\n  * [New] `ES2017`+ add `WordCharacters`\n  * [New] `ES2015`+: add `Canonicalize`\n  * [New] `ES2015`+: add `NewPromiseCapability`\n  * [Fix] `ES2017+`: `NumberToRawBytes`, `NumericToRawBytes`: reimplement Float64, fix integer scenarios\n  * [Refactor] add `helpers/isLineTerminator`\n  * [Refactor] add `isInteger` helper, and use it\n  * [Refactor] extract `isStringOrHole` to a helper\n  * [Refactor] `ES2017`+: `RawBytesToNumber`, `RawBytesToNumeric`: extract common code to helpers\n  * [Refactor] make a `MAX_VALUE` helper\n  * [Tests] fix RawBytesToNumeric tests in node v10.4-10.8\n  * [Tests] fix buffer test cases in node v10.4-v10.8\n\n1.21.3 / 2023-07-12\n=================\n  * [Fix] `ES2017+`: `RawBytesToNumber`, `RawBytesToNumeric`: properly handle some scenarios\n  * [Fix] `ES2015`+: `GetV`: the receiver is `V`, not `O`\n  * [Fix] `ES2017`+: `RawBytesToNumber`, `RawBytesToNumeric`: fix exponent calculation for Float64, improve tests\n  * [Fix] `ES2017`+: `RawBytesToNumber`, `RawBytesToNumeric`: fix logic, improve tests\n  * [Fix] `ES2019`+: `thisTimeValue`: fix spackling\n  * [Robustness] `ES2017`+: `NumberToRawBytes`, `NumericToRawBytes`: use `SameValue` instead of `Object.is`\n  * [Refactor] `ES2021`+: `ValidateAtomicAccess`: use `typed-array-byte-offset`\n  * [Refactor] `ES2019`+: `AddEntriesFromIterable`: use `ThrowCompletion`\n  * [patch] `ES2015`+: `ObjectDefineProperties`: satisfy TODO\n  * [patch] `ES2015`+: `GetV`: improve error message\n  * [patch] fix spec URLs\n  * [Deps] update `get-intrinsic`, `regexp.prototype.flags`, `which-typed-array`\n  * [actions] fix permissions\n  * [Tests] add buffer test case fixtures + tests\n  * [Tests] skip test that modifies the env in SES\n  * [Tests] fix regex flags tests for node 20\n  * [Dev Deps] update `@ljharb/eslint-config`, `aud`, `available-regexp-flags`, `is-core-module`, `tape`\n\n1.21.2 / 2023-03-12\n=================\n  * [Fix] `ES2015`+: `CreateDataProperty`: use `OrdinaryDefineOwnProperty`\n  * [Fix] `ES2015`+: `CreateDataProperty`: use `OrdinaryDefineOwnProperty`\n  * [Fix] `ES2015`+: `GetPrototypeFromConstructor`: add missing assertion that `intrinsicDefaultProto` is an object\n  * [Fix] `ES2015`+: `IsDetachedBuffer`: ensure a nullish error does not crash\n  * [Fix] `ES2015`+: `ToDateString`: properly handle time values that aren’t \"now\"\n  * [Fix] `ES2015`+: `ToUint8Clamp`: avoid an extra observable ToNumber\n  * [Fix] `ES2015`+`: `GetMethod`: when `func` is not callable and `P` is a symbol, avoid the wrong TypeError\n  * [Fix] `ES2020`+: `ToBigInt`: properly throw on anything besides string, bigint, boolean\n  * [Fix] `ES2021`+: `SplitMatch`: instead of `false`, return `'not-matched'`\n  * [Fix] `helpers/assertRecord`: handle nullish input\n  * [Fix] `helpers/isFullyPopulatedPropertyDescriptor`: handle primitive inputs\n  * [Robustness] `ES5`: `ToNumber`: avoid relying on runtime `.test` and `.replace`\n  * [Refactor] `ES2015`: mark `IsDataDescriptor` and `IsAccessorDescriptor` as spackled\n  * [Refactor] `ES2015`+: `IsDetachedBuffer`: use `array-buffer-byte-length` package\n  * [Refactor] `ES2015`+: `OrdinaryHasInstance`: rely on falsiness\n  * [Refactor] `ES2016`+: `CreateListFromArrayLike`: hoist default element types to module level\n  * [Refactor] `ES2022`+: `StringToNumber`, `ToNumber`: use `string.prototype.trim`\n  * [patch] `ES2022`+: `IsLessThan`: fix a comment\n  * [patch] `ES2022`+: `TypedArrayElementSize`, `TypedArrayElementType`: throw a SyntaxError with an unknown TA type\n  * [patch] `ES2022`+: `IsLessThan`: fix a comment\n  * [patch] `ES2020`+: `thisBigIntValue`: throw a SyntaxError, not TypeError, for unsupported features\n  * [patch] `helpers/getIteratorMethod`: `String` is always available\n  * [patch] fix commented spec URLs\n  * [patch] omit `%` for `callBound`\n  * [meta] fix spec URLs\n  * [meta] fix spackle metadata, comments\n  * [Deps] update `get-intrinsic`, `internal-slot`, `is-array-buffer`, `object-inspect`\n  * [Deps] move `function-bind` to dev deps\n  * [Tests] String.fromCharCode takes numbers, not strings\n  * [Tests] use `makeIteratorRecord` helper\n  * [Tests] increase coverage\n  * [Tests] fix tests that throw a sentinel\n  * [Dev Deps] update `array.from`, `available-regexp-flags`, `tape`\n\n1.21.1 / 2023-01-10\n=================\n  * [Fix] move `available-typed-arrays` to runtime deps\n  * [Fix] `ES2021`+: `NumberToBigInt`: throw the proper error on an env without BigInts\n  * [Fix] `ES2018`+: `CreateAsyncFromSyncIterator`: properly check `next` method args length\n  * [Fix] `ES2020`-`ES2021`: Abstract Relational Comparison: handle BigInts properly\n  * [Fix] `ES2022`+: `StringToBigInt`: invalid BigInts should be `undefined`, not `NaN` as in previous years\n  * [Fix] `helpers/isFinite`: properly handle BigInt values\n  * [Fix] `ES2020`+: `CreateListFromArrayLike`: accept BigInts\n  * [Fix] `ES2019`+: `AsyncFromSyncIteratorContinuation`: throw a SyntaxError when > 1 arg is passed\n  * [patch] `ES2020`+: `GetIterator`: use SyntaxError for intentionally unsupported\n  * [patch] `ES2015`+: `GetPrototypeFromContructor`: use SyntaxError for intentionally unsupported\n  * [patch] `ES2022`+: `StringToNumber`: fix non-string assertion failure message\n  * [Deps] update `es-set-tostringtag`, `is-array-buffer`\n  * [Tests] increase coverage\n  * [Tests] exclude coverage from files that have been replaced by an extracted package\n\n1.21.0 / 2023-01-04\n=================\n  * [New] `ES2015`+: add `IsDetachedBuffer`\n  * [New] `ES2015+`: add `DetachArrayBuffer`\n  * [New] `ES2020`+: add `NumericToRawBytes`\n  * [New] `ES2017` - `ES2019`: add `NumberToRawBytes`\n  * [New] `ES2020+`: add `RawBytesToNumeric`\n  * [New] `ES2017-ES2019`: add `RawBytesToNumber`\n  * [New] `ES2017`+: add `ValidateAtomicAccess`\n  * [New] `ES2021`+: add `ValidateIntegerTypedArray`\n  * [New] `ES2015`+: add `ValidateTypedArray`\n  * [New] `ES2015`+: add `GetGlobalObject`\n  * [New] `ES2022`+: add `TypedArrayElementSize`, `TypedArrayElementType`\n  * [New] `ES2015`+: add `max`, `min`\n  * [New] `helpers/assertRecord`: add predicates for PromiseCapability and AsyncGeneratorRequest Records\n  * [New] `ES2018`+: add `AsyncIteratorClose`\n  * [New] `ES2015`+: `IteratorClose`: also accept a Completion Record instance instead of a completion thunk\n  * [New] `ES2015`+ (CompletionRecord, NormalCompletion), `ES2018`+ (ThrowCompletion): add new AOs\n  * [New] `ES2015`+ (`ObjectCreate`) and `ES2020`+ (`OrdinaryObjectCreate`): use `internal-slot` to support additional slots\n  * [New] `ES2018`+: add `CreateAsyncFromSyncIterator`\n  * [patch] `ES2015`+: `GetMethod`: better failure message\n  * [Refactor] use `es-set-tostringtag` package\n  * [Refactor] use `has-proto` package\n  * [Deps] update `has-proto`, `es-set-tostringtag`, `internal-slot`\n  * [meta] fix spackle script to `git add` after all writing is done\n  * [meta] autogenerate esX entry points\n  * [meta] use a leading slash in gitattributes for proper spackle matching\n  * [Tests] fix comments on missing AOs\n  * [Tests] filter out host-defined AOs\n  * [Dev Deps] update `@ljharb/eslint-config`, `aud`\n\n1.20.5 / 2022-12-07\n=================\n  * [Fix] `ES2020+`: `floor`: make it work with BigInts as well\n  * [Refactor] use `gopd`\n  * [Tests] add `mod` helper tests (#147)\n  * [Deps] update `string.prototype.trimend`, `string.prototype.trimstart`\n  * [Dev Deps] update `array.prototype.filter`, `array.prototype.flatmap`, `array.prototype.indexof`, `object.fromentries`\n\n1.20.4 / 2022-10-06\n=================\n  * [Fix] `ES2021+`: values that truncate to -0 in `ToIntegerOrInfinity` (#146)\n  * [Deps] update `is-callable`\n\n1.20.3 / 2022-09-22\n=================\n  * [Refactor] extract regex tester to `safe-regex-test` package\n  * [Deps] update `get-intrinsic`, `is-callable`\n  * [Dev Deps] update `aud`, `tape`\n\n1.20.2 / 2022-09-01\n=================\n  * [Fix] `ES2020+`: `SameValueNonNumeric`: properly throw on BigInt values\n  * [Deps] update `object.assign`, `get-intrinsic`, `object-inspect`\n  * [Dev Deps] update `array.prototype.indexof`, `diff`, `es-value-fixtures`, `tape`\n  * [meta] `spackle`: always mkdirp new files to be written\n  * [Tests] fix vscode auto-const from 8fc256d\n\n1.20.1 / 2022-05-16\n=================\n  * [Fix] `thisTimeValue`: use `getTime`, not `valueOf`, to get the time value\n  * [Refactor] create `IsArray` helper\n  * [Deps] update `regexp.prototype.flags`\n  * [Dev Deps] use `for-each` instead of `foreach`\n\n1.20.0 / 2022-05-05\n=================\n  * [New] add ES2022\n  * [New] `ES2015+`: add `ObjectDefineProperties`\n  * [Refactor] create `fromPropertyDescriptor` helper\n  * [Refactor] use `has-property-descriptors`\n  * [Deps] update `string.prototype.trimend`, `string.prototype.trimstart`, `unbox-primitive`\n  * [meta] use `npmignore` to autogenerate an npmignore file\n  * [Dev Deps] update `es-value-fixtures`, `has-bigints`, `functions-have-names`\n  * [Tests] copy GetIntrinsic tests over from `get-intrinsic`\n\n1.19.5 / 2022-04-13\n=================\n  * [Fix] `DefineOwnProperty`: FF 4-22 throws an exception when defining length of an array\n  * [Dev Deps] update `@ljharb/eslint-config`\n\n1.19.4 / 2022-04-12\n=================\n  * [Fix] `ES2015+`: `CreateDataProperty`: a nonwritable but configurable property is still converted to a data property\n\n1.19.3 / 2022-04-11\n=================\n  * [Fix] `ES2015+`: `GetIterator`, `IterableToArrayLike`: in Symbol-less envs, handle boxed string objects\n  * [Robustness] use `exec` instead of `test`, since the latter observably looks up `exec`\n  * [Deps] update `is-shared-array-buffer`\n  * [actions] restrict permissions\n  * [Dev Deps] update `tape`\n  * [Tests] add test coverage\n  * [Tests] avoid a bug in node v4.0 with bound function names\n\n1.19.2 / 2022-03-28\n=================\n  * [Fix] `ES2018+`: `EnumerableOwnPropertyNames`, `ToIntegerOrInfinity`, `UTF16SurrogatePairToCodePoint`: proper function names\n  * [Fix] `ES2015+`: `GetOwnPropertyKeys`/`IsExtensible`/`{Set,Test}IntegrityLevel`: avoid a crash in IE 8 on missing ES5 intrinsics\n  * [Fix] `helpers/DefineOwnProperty`: avoid a crash in IE 8\n  * [Fix] `ES2015+`: `StringCreate`: properly check for `prototype` being `String.prototype`\n  * [Docs] `ES2015+`: `GetV`: Fix spec URL\n  * [meta] operations: use a URL object instead of a URL string\n  * [meta] remove defunct greenkeeper config\n  * [meta] better `eccheck` command; fix indentation\n  * [Tests] node v0.6 lacks `RegExp.prototype.source`\n  * [Tests] remove a stray `console.log`\n  * [Tests] properly set the lastIndex in IE 8\n  * [Tests] skip test due to IE 6-8 sparse/undefined bug\n  * [Tests] in IE 8, an empty regex is `` and not `(?:)`\n  * [Tests] ES3 engines don’t have `.bind`\n  * [Tests] avoid needless failures in ES3 engines that don't support descriptors\n  * [Tests] add test to cover https://github.com/tc39/ecma262/issues/2611\n  * [Deps] update `has-symbols`, `is-negative-zero`, `is-weakref`, `object-inspect`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `object.fromentries`, `safe-publish-latest`, `tape`\n  * [actions] reuse common workflows\n  * [actions] update codecov uploader\n\n1.19.1 / 2021-10-02\n=================\n  * [Fix] `ES2020+`: `CreateRegExpStringIterator`: should not have enumerable methods\n  * [Dev Deps] update `array.prototype.filter`, `array.prototype.indexof`\n\n1.19.0 / 2021-09-30\n=================\n  * [New] `ES2021+`: `IterableToList`: make `method` parameter optional (#61)\n  * [New] add ES2021\n  * [New] `ES2020+`: add `StringToBigInt`, `ToBigInt`, `ToBigInt64`, `ToBigUint64`\n  * [New] `ES2017`+: add `IsSharedArrayBuffer`, `OrdinaryToPrimitive`\n  * [New] `ES2015+`: add `CharacterRange`, `IsCompatiblePropertyDescriptor`\n  * [New] `ES2020+`: add `CreateRegExpStringIterator`\n  * [Fix] `ES2020+`: `ToBigInt64`/`ToBigUint64`: avoid node v10.4-v10.8 bug with limited BigInt range\n  * [Fix] `ES2020+`: `AbstractRelationalComparison`, `AbstractEqualityComparison`: support BigInt\n  * [Fix] `ES2020+`: `ToBigInt64`/`ToBigUint64`: Improve the definitions of twoSixtyThree and twoSixtyFour (#140)\n  * [meta] do not publish .gitattributes\n  * [Tests] Correct the behavior of `safeBigInt`\n  * [Tests] Exclude dotfiles from the testing sweep (#141)\n\n1.18.7 / 2021-09-28\n=================\n  * [Fix] `getOwnPropertyDescriptor` helper: avoid crashing in IE < 9\n  * [Fix] `ArraySetLength`: `node` `v0.6` has a bug where array lengths can be Set but not Defined\n  * [eslint] remove unused directive\n  * [Tests] fix spelling\n\n1.18.6 / 2021-09-07\n=================\n  * [Fix] `ES2020+`: `NumberToBigInt`: throw a SyntaxError when BigInts are not supported\n  * [Refactor] extract getSymbolDescription logic to `get-symbol-description`\n  * [Refactor] `ES2018+`: `AbstractRelationalComparison`: use `IsStringPrefix`\n  * [Deps] update `is-callable`, `is-regex`, `is-string`\n  * [Dev Deps] update `@ljharb/eslint-config`, `tape`\n  * [Tests] `GetSubstitution`: add cases\n\n1.18.5 / 2021-08-01\n=================\n  * [meta] remove \"exports\" (#133)\n  * [Dev Deps] update `eslint`\n\n1.18.4 / 2021-07-29\n=================\n  * [meta] partial revert of b54cfe8525faff482450e843a49d43be3a086225\n  * [Deps] update `internal-slot`, `object-inspect`\n  * [Dev Deps] update `eslint`, `tape`\n  * [Tests] `ArraySetLength`: increase coverage\n\n1.18.3 / 2021-05-27\n=================\n  * [Fix] `ES2020+`: `ToNumber`: ensure it throws on a BigInt (#130)\n\n1.18.2 / 2021-05-25\n=================\n  * [meta] add `helpers` to \"exports\" field, for back compat\n\n1.18.1 / 2021-05-25\n=================\n  * [readme] update and clarify entry points\n  * [meta] add \"exports\" field, with escape hatch\n  * [meta] add `sideEffects` field\n  * [meta] use `prepublishOnly`, for npm 7+\n  * [eslint] clean up eslint rules\n  * [Deps] update `is-regex`, `is-string`, `object-inspect`, `unbox-primitive`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `tape`\n  * [actions] disable fail-fast on matrix jobs\n  * [actions] use `node/install` action instead of `node/run`\n  * [actions] update codeql-analysis to new best practices\n\n1.18.0 / 2021-03-03\n=================\n  * [New] add `ES2020`, and a number of additional AOs: See the changelog entries for the prereleases for more information:\n     - [next.3](./CHANGELOG.md#1180-next3--2021-03-01)\n     - [next.2](./CHANGELOG.md#1180-next2--2021-01-17)\n     - [next.1](./CHANGELOG.md#1180-next1--2020-09-30)\n     - [next.0](./CHANGELOG.md#1180-next0--2020-08-14)\n  * [Refactor] `ES5+`: `Abstract Relational Comparison`: increase coverage\n  * [Tests] increase coverage\n  * [Tests] do not run coverage on node 0.6\n\n1.18.0-next.3 / 2021-03-01\n=================\n  * [New] `ES2015`: add `StringGetIndexProperty`\n  * [New] `ES2015+`: add `RegExpCreate`, `SplitMatch`, `StringCreate`\n  * [New] `ES2016-ES2019`: add `UTF16Decode`\n  * [New] `ES2020+`: add `NumberToBigInt`\n  * [New] `ES2020+: add `BigInt::`/`Number::` methods:\n  * [Fix] `ES5`: `ToNumber`: properly refuse to parse ES6+ forms\n  * [Fix] `ES2015+`: `Invoke`: optional argumentsList must be a List of arguments, not a list of arguments\n  * [Fix] `ES2016+`: `UTF16Encoding`: properly return a string code point instead of a numeric code point\n  * [Fix] `ES2020`: `NumberBitwiseOp`: assert that x and y are Numbers\n  * [readme] remove travis/testling badge, fix repo URLs\n  * [meta] `ES2015`: add missing `CreateArrayIterator` AO\n  * [meta] `ES2015-ES2017`: add missing `DaylightSavingTA` AO\n  * [meta] rerun `npm run spackle` to update URLs left after 11d8c8df11c0d15d094a6035afed662e22b440ef\n  * [meta] update ecma URLs\n  * [meta] unignore 2020 operations list\n  * [meta] update operations scripts linting\n  * [meta] refactor getOps script to fetch all years at once\n  * [meta] refactor operations script to keep years in one place\n  * [meta] fix ES2015 spec URL\n  * [Deps] update `has-symbols`, `string.prototype.trimend`, `string.prototype.trimstart`, `get-intrinsic`, `is-callable`, `is-regex`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `array.prototype.indexof`, `aud`, `es-value-fixtures`, `object.fromentries`, `tape`, `diff`\n  * [operations] detect ES2020+ style `T::` numeric operations\n  * [Tests] increase coverage\n  * [Tests] `BigInt(1e17)` throws on node v10.4-v10.6\n  * [Tests] improve coverage on `Number::` methods\n  * [Tests] `tape` v5 `.equal` now uses strict equality, so no more need for `is()`\n  * [Tests] improve BigInt:: and Number:: coverage\n  * [Tests] actually run all the helpers tests\n  * [Tests] ensure \"expected missing\" ops list is accurate\n  * [Tests] abstract away per-operation skips\n  * [Tests] skip BigInt:: tests on envs without BigInts\n  * [Tests] use `es-value-fixtures`\n  * [actions] update workflows\n\n1.18.0-next.2 / 2021-01-17\n=================\n  * [New] `helpers`: add `isByteValue`, `isCodePoint`, `some`\n  * [Fix] `ES2018+`: fix `GetSubstitution` with named captures\n  * [Fix] `ES2020`: `GetIterator`: add omitted `hint` parameter\n  * [Fix] `ES2018`/`ES2019`: `SetFunctionLength`: Infinities should throw\n  * [Fix] `ES2020`: `ToIndex` uses `SameValue` instead of `SameValueZero`\n  * [Fix] `ES2020`: `CopyDataProperties` uses `CreateDataPropertyOrThrow` instead of `CreateDataProperty`\n  * [Refactor] use extracted `call-bind` instead of local helpers\n  * [Refactor] use extracted `get-intrinsic` package\n  * [Deps] update `call-bind`, `get-intrinsic`, `is-callable`, `is-negative-zero`, `is-regex`, `object-inspect`, `object.assign`, `string.prototype.trimend`, `string.prototype.trimstart`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `array.prototype.indexof`, `aud`, `diff`, `functions-have-names`, `has-bigints`, `has-strict-mode`, `object-is`, `object.fromentries`, `tape`\n  * [actions] switch Automatic Rebase workflow to `pull_request_target` event\n  * [actions] add \"Allow Edits\" workflow\n  * [meta] pin cheerio to v1.0.0-rc.3, to fix getOps\n  * [meta] make all URLs consistent, and point to spec artifacts\n  * [meta] refactor `deltas` script; update eslint on operations scripts\n  * [meta] do not publish .github dir (#123)\n  * [Tests] add `v.notNonNegativeIntegers`, `v.nonConstructorFunctions`\n  * [Tests] migrate tests to Github Actions\n  * [Tests] run coverage on all tests\n  * [Tests] add `npm run test:ses`\n\n1.18.0-next.1 / 2020-09-30\n=================\n  * [Fix] `ES2020`: `ToInteger`: `-0` should always be normalized to `+0` (#116)\n  * [patch] `GetIntrinsic`: Adapt to override-mistake-fix pattern (#115)\n  * [Fix] `callBind`: ensure compatibility with SES\n  * [Deps] update `is-callable`, `object.assign`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`\n  * [eslint] fix warning\n  * [Tests] temporarily allow SES tests to fail (#115)\n  * [Tests] ses-compat - initialize module after ses lockdown (#113)\n  * [Tests] [Refactor] use defineProperty helper rather than assignment\n  * [Tests] [Refactor] clean up defineProperty test helper\n\n1.18.0-next.0 / 2020-08-14\n=================\n  * [New] add `ES2020`\n  * [New] `GetIntrinsic`: add `%AggregateError%`, `%FinalizationRegistry%`, and `%WeakRef%`\n  * [New] `ES5`+: add `abs`, `floor`; use `modulo` consistently\n  * [New] `GetIntrinsic`: Cache accessed intrinsics (#98)\n  * [New] `GetIntrinsic`: Add ES201x function intrinsics (#97)\n  * [New] `ES2015`+: add `QuoteJSONString`, `OrdinaryCreateFromConstructor`\n  * [New] `ES2017`+: add `StringGetOwnProperty`\n  * [New] `ES2016`+: add `UTF16Encoding`\n  * [New] `ES2018`+: add `SetFunctionLength`, `UnicodeEscape`\n  * [New] add `isLeadingSurrogate`/`isTrailingSurrogate` helpers\n  * [Fix] `ES5`+: `ToPropertyDescriptor`: use intrinsic TypeError\n  * [Fix] `ES2018+`: `CopyDataProperties`/`NumberToString`: use intrinsic TypeError\n  * [Deps] update `is-regex`, `object-inspect`\n  * [Dev Deps] update `eslint`\n\n1.17.7 / 2020-09-30\n=================\n  * [Fix] `ES2020`: `ToInteger`: `-0` should always be normalized to `+0` (#116)\n  * [patch] `GetIntrinsic`: Adapt to override-mistake-fix pattern (#115)\n  * [Fix] `callBind`: ensure compatibility with SES\n  * [Deps] update `is-callable`, `is-regex`, `object-inspect`, `object.assign`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`\n\n1.17.6 / 2020-06-13\n=================\n  * [Fix] `helpers/getSymbolDescription`: use the global Symbol registry when available (#92)\n  * [Fix] `ES2015+`: `IsConstructor`: when `Reflect.construct` is available, be spec-accurate (#93)\n  * [Fix] `ES2015+`: `Set`: Always return boolean value (#101)\n  * [Fix] `ES2015+`: `Set`: ensure exceptions are thrown in IE 9 when requested\n  * [Fix] Use `Reflect.apply(…)` if available (#99)\n  * [Fix] `helpers/floor`: module-cache `Math.floor`\n  * [Fix] `helpers/getSymbolDescription`: Prefer bound `description` getter when present\n  * [Fix] `2016`: Use `getIteratorMethod` in `IterableToArrayLike` (#94)\n  * [Fix] `helpers/OwnPropertyKeys`: Use `Reflect.ownKeys(…)` if available (#91)\n  * [Fix] `2018+`: Fix `CopyDataProperties` depending on `this` (#95)\n  * [meta] mark spackled files as autogenerated\n  * [meta] `Type`: fix spec URL\n  * [meta] `ES2015`: complete ops list\n  * [Deps] update `is‑callable`, `is‑regex`\n  * [Deps] switch from `string.prototype.trimleft`/`string.prototype.trimright` to `string.prototype.trimstart`/`string.prototype.trimend`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `in-publish`, `object-is`, `tape`; add `aud`\n  * [eslint] `helpers/isPropertyDescriptor`: fix indentation\n  * [Tests] `helpers/getSymbolDescription`: add test cases; some envs have `Symbol.for` but can not infer a name (#92)\n  * [Tests] try out CodeQL analysis\n  * [Tests] reformat expected missing ops\n  * [Tests] Run tests with `undefined` this (#96)\n\n1.17.5 / 2020-03-22\n=================\n  * [Fix] `CreateDataProperty`: update an existing property\n  * [Fix] run missing spackle from cd7504701879ddea0f5981e99cbcf93bfea9171d\n  * [Dev Deps] update `make-arrow-function`, `tape`, `@ljharb/eslint-config`\n\n1.17.4 / 2020-01-21\n=================\n  * [Fix] `2015+`: add code to handle IE 8’s problems\n  * [Tests] fix tests for IE 8\n\n1.17.3 / 2020-01-19\n=================\n  * [Fix] `ObjectCreate` `2015+`: Fall back to `__proto__` and normal `new` in older browsers\n  * [Fix] `GetIntrinsic`: ensure the `allowMissing` property actually works on dotted intrinsics\n\n1.17.2 / 2020-01-14\n=================\n  * [Fix] `helpers/OwnPropertyKeys`: include non-enumerables too\n\n1.17.1 / 2020-01-14\n=================\n  * [Refactor] add `OwnPropertyKeys` helper, use it in `CopyDataProperties`\n  * [Refactor] `IteratorClose`: remove useless assignment\n  * [Dev Deps] update `eslint`, `tape`, `diff`\n\n1.17.0 / 2019-12-20\n=================\n  * [New] Split up each operation into its own file (prereleased)\n  * [Fix] `GetIntrinsic`: IE 8 has a broken `Object.getOwnPropertyDescriptor`\n  * [Fix] `object.assign` is a runtime dep (prereleased)\n  * [Refactor] `GetIntrinsic`: remove the internal property salts, since % already handles that\n  * [Refactor] `GetIntrinsic`: further simplification\n  * [Deps] update `is-callable`, `string.prototype.trimleft`, `string.prototype.trimright`, `is-regex`\n  * [Dev Deps] update `@ljharb/eslint-config`, `object-is`, `object.fromentries`, `tape`\n  * [Tests] add `.eslintignore`\n  * [meta] remove unused Makefile and associated utils\n  * [meta] only run spackle script in publish (#78) (prereleased)\n\n1.17.0-next.1 / 2019-12-11\n=================\n  * [Fix] `object.assign` is a runtime dep\n  * [meta] only run spackle script in publish (#78)\n\n1.17.0-next.0 / 2019-12-11\n=================\n  * [New] Split up each operation into its own file\n\n1.16.3 / 2019-12-04\n=================\n  * [Fix] `GetIntrinsic`: when given a path to a getter, return the actual getter\n  * [Dev Deps] update `eslint`\n\n1.16.2 / 2019-11-24\n=================\n  * [Fix] IE 6-7 lack JSON\n  * [Fix] IE 6-8 strings can’t use array slice, they need string slice\n  * [Dev Deps] update `eslint`\n\n1.16.1 / 2019-11-24\n=================\n  * [Fix] `GetIntrinsics`: turns out IE 8 throws when `Object.getOwnPropertyDescriptor(arguments);`, and does not throw on `callee` anyways\n  * [Deps] update `es-to-primitive`, `has-symbols`, `object-inspect`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`\n  * [meta] re-include year files inside `operations`\n  * [meta] add `funding` field\n  * [actions] add Automatic Rebase github action\n  * [Tests] use shared travis-ci config\n  * [Tests] disable `check-coverage`, and let codecov do it\n\n1.16.0 / 2019-10-18\n=================\n  * [New] `ES2015+`: add `SetFunctionName`\n  * [New] `ES2015+`: add `GetPrototypeFromConstructor`, with caveats\n  * [New] `ES2015+`: add `CreateListFromArrayLike`\n  * [New] `ES2016+`: add `OrdinarySetPrototypeOf`\n  * [New] `ES2016+`: add `OrdinaryGetPrototypeOf`\n  * [New] add `getSymbolDescription` and `getInferredName` helpers\n  * [Fix] `GetIterator`: add fallback for pre-Symbol environments, tests\n  * [Dev Deps] update `object.fromentries`\n  * [Tests] add `node` `v12.2`\n\n1.15.0 / 2019-10-02\n=================\n  * [New] `ES2018`+: add `DateString`, `TimeString`\n  * [New] `ES2015`+: add `ToDateString`\n  * [New] `ES5`+: add `msFromTime`, `SecFromTime`, `MinFromTime`, `HourFromTime`, `TimeWithinDay`, `Day`, `DayFromYear`, `TimeFromYear`, `YearFromTime`, `WeekDay`, `DaysInYear`, `InLeapYear`, `DayWithinYear`, `MonthFromTime`, `DateFromTime`, `MakeDay`, `MakeDate`, `MakeTime`, `TimeClip`, `modulo`\n  * [New] add `regexTester` helper\n  * [New] add `callBound` helper\n  * [New] add ES2020’s intrinsic dot notation\n  * [New] add `isPrefixOf` helper\n  * [New] add `maxSafeInteger` helper\n  * [Deps] update `string.prototype.trimleft`, `string.prototype.trimright`\n  * [Dev Deps] update `eslint`\n  * [Tests] on `node` `v12.11`\n  * [meta] npmignore operations scripts; add \"deltas\"\n\n1.14.2 / 2019-09-08\n=================\n  * [Fix] `ES2016`: `IterableToArrayLike`: add proper fallback for strings, pre-Symbols\n  * [Tests] on `node` `v12.10`\n\n1.14.1 / 2019-09-03\n=================\n  * [meta] republish with some extra files removed\n\n1.14.0 / 2019-09-02\n=================\n  * [New] add ES2019\n  * [New] `ES2017+`: add `IterableToList`\n  * [New] `ES2016`: add `IterableToArrayLike`\n  * [New] `ES2015+`: add `ArrayCreate`, `ArraySetLength`, `OrdinaryDefineOwnProperty`, `OrdinaryGetOwnProperty`, `OrdinaryHasProperty`, `CreateHTML`, `GetOwnPropertyKeys`, `InstanceofOperator`, `SymbolDescriptiveString`, `GetSubstitution`, `ValidateAndApplyPropertyDescriptor`, `IsPromise`, `OrdinaryHasInstance`, `TestIntegrityLevel`, `SetIntegrityLevel`\n  * [New] add `callBind` helper, and use it\n  * [New] add helpers: `isPropertyDescriptor`, `every`\n  * [New] ES5+: add `Abstract Relational Comparison`\n  * [New] ES5+: add `Abstract Equality Comparison`, `Strict Equality Comparison`\n  * [Fix] `ES2015+`: `GetIterator`: only require native Symbols when `method` is omitted\n  * [Fix] `ES2015`: `Call`: error message now properly displays Symbols using `object-inspect`\n  * [Fix] `ES2015+`: `ValidateAndApplyPropertyDescriptor`: use ES2017 logic to bypass spec bugs\n  * [Fix] `ES2015+`: `CreateDataProperty`, `DefinePropertyOrThrow`, `ValidateAndApplyPropertyDescriptor`: add fallbacks for ES3\n  * [Fix] `ES2015+`: `FromPropertyDescriptor`: no longer requires a fully complete Property Descriptor\n  * [Fix] `ES5`: `IsPropertyDescriptor`: call into `IsDataDescriptor` and `IsAccessorDescriptor`\n  * [Refactor] use `has-symbols` for Symbol detection\n  * [Fix] `helpers/assertRecord`: remove `console.log`\n  * [Deps] update `object-keys`\n  * [readme] add security note\n  * [meta] change http URLs to https\n  * [meta] linter cleanup\n  * [meta] fix getOps script\n  * [meta] add FUNDING.yml\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`, `semver`, `replace`, `cheerio`, `tape`\n  * [Tests] up to `node` `v12.9`, `v11.15`, `v10.16`, `v8.16`, `v6.17`\n  * [Tests] temporarily allow node 0.6 to fail; segfaulting in travis\n  * [Tests] use the values helper more in es5 tests\n  * [Tests] fix linting to apply to all files\n  * [Tests] run `npx aud` only on prod deps\n  * [Tests] add v.descriptors helpers\n  * [Tests] use `npx aud` instead of `npm audit` with hoops\n  * [Tests] use `eclint` instead of `editorconfig-tools`\n  * [Tests] some intrinsic cleanup\n  * [Tests] migrate es5 tests to use values helper\n  * [Tests] add some missing ES2015 ops\n\n1.13.0 / 2019-01-02\n=================\n  * [New] add ES2018\n  * [New] add ES2015/ES2016: EnumerableOwnNames; ES2017: EnumerableOwnProperties\n  * [New] `ES2015+`: add `thisBooleanValue`, `thisNumberValue`, `thisStringValue`, `thisTimeValue`\n  * [New] `ES2015+`: add `DefinePropertyOrThrow`, `DeletePropertyOrThrow`, `CreateMethodProperty`\n  * [New] add `assertRecord` helper\n  * [Deps] update `is-callable`, `has`, `object-keys`, `es-to-primitive`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape`, `semver`, `safe-publish-latest`, `replace`\n  * [Tests] use `npm audit` instead of `nsp`\n  * [Tests] remove `jscs`\n  * [Tests] up to `node` `v11.6`, `v10.15`, `v8.15`, `v6.16`\n  * [Tests] move descriptor factories to `values` helper\n  * [Tests] add `getOps` to programmatically fetch abstract operation names\n\n1.12.0 / 2018-05-31\n=================\n  * [New] add `GetIntrinsic` entry point\n  * [New] `ES2015`+: add `ObjectCreate`\n  * [Robustness]: `ES2015+`: ensure `Math.{abs,floor}` and `Function.call` are cached\n\n1.11.0 / 2018-03-21\n=================\n  * [New] `ES2015+`: add iterator abstract ops\n  * [Dev Deps] update `eslint`, `nsp`, `object.assign`, `semver`, `tape`\n  * [Tests] up to `node` `v9.8`, `v8.10`, `v6.13`\n\n1.10.0 / 2017-11-24\n=================\n  * [New] ES2015+: `AdvanceStringIndex`\n  * [Dev Deps] update `eslint`, `nsp`\n  * [Tests] require node 0.6 to pass again\n  * [Tests] up to `node` `v9.2`, `v8.9`, `v6.12`; use `nvm install-latest-npm`; pin included builds to LTS\n\n1.9.0 / 2017-09-30\n=================\n  * [New] `es2015+`: add `ArraySpeciesCreate`\n  * [New] ES2015+: add `CreateDataProperty` and `CreateDataPropertyOrThrow`\n  * [Tests] consolidate duplicated tests\n  * [Tests] increase coverage\n  * [Dev Deps] update `nsp`, `eslint`\n\n1.8.2 / 2017-09-03\n=================\n  * [Fix] `es2015`+: `ToNumber`: provide the proper hint for Date objects (#27)\n  * [Dev Deps] update `eslint`\n\n1.8.1 / 2017-08-30\n=================\n  * [Fix] ES2015+: `ToPropertyKey`: should return a symbol for Symbols (#26)\n  * [Deps] update `function-bind`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`\n  * [Docs] github broke markdown parsing\n\n1.8.0 / 2017-08-04\n=================\n  * [New] add ES2017\n  * [New] move es6+ to es2015+; leave es6/es7 as aliases\n  * [New] ES5+: add `IsPropertyDescriptor`, `IsAccessorDescriptor`, `IsDataDescriptor`, `IsGenericDescriptor`, `FromPropertyDescriptor`, `ToPropertyDescriptor`\n  * [New] ES2015+: add `CompletePropertyDescriptor`, `Set`, `HasOwnProperty`, `HasProperty`, `IsConcatSpreadable`, `Invoke`, `CreateIterResultObject`, `RegExpExec`\n  * [Fix] es7/es2016: do not mutate ES6\n  * [Fix] assign helper only supports one source\n  * [Deps] update `is-regex`\n  * [Dev Deps] update `nsp`, `eslint`, `@ljharb/eslint-config`\n  * [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `nsp`, `semver`, `tape`\n  * [Tests] add tests for missing and excess operations\n  * [Tests] add codecov for coverage\n  * [Tests] up to `node` `v8.2`, `v7.10`, `v6.11`, `v4.8`; newer npm breaks on older node\n  * [Tests] use same lists of value types across tests; ensure tests are the same when ops are the same\n  * [Tests] ES2015: add ToNumber symbol tests\n  * [Tests] switch to `nyc` for code coverage\n  * [Tests] make IsRegExp tests consistent across editions\n\n1.7.0 / 2017-01-22\n=================\n  * [New] ES6: Add `GetMethod` (#16)\n  * [New] ES6: Add `GetV` (#16)\n  * [New] ES6: Add `Get` (#17)\n  * [Tests] up to `node` `v7.4`, `v6.9`, `v4.6`; improve test matrix\n  * [Dev Deps] update `tape`, `nsp`, `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`\n\n1.6.1 / 2016-08-21\n=================\n  * [Fix] ES6: IsConstructor should return true for `class` constructors.\n\n1.6.0 / 2016-08-20\n=================\n  * [New] ES5 / ES6: add `Type`\n  * [New] ES6: `SpeciesConstructor`\n  * [Dev Deps] update `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config`, `semver`; add `safe-publish-latest`\n  * [Tests] up to `node` `v6.4`, `v5.12`, `v4.5`\n\n1.5.1 / 2016-05-30\n=================\n  * [Fix] `ES.IsRegExp`: actually look up `Symbol.match` on the argument\n  * [Refactor] create `isNaN` helper\n  * [Deps] update `is-callable`, `function-bind`\n  * [Deps] update `es-to-primitive`, fix ES5 tests\n  * [Dev Deps] update `jscs`, `eslint`, `@ljharb/eslint-config`, `tape`, `nsp`\n  * [Tests] up to `node` `v6.2`, `v5.11`, `v4.4`\n  * [Tests] use pretest/posttest for linting/security\n\n1.5.0 / 2015-12-27\n=================\n  * [New] adds `Symbol.toPrimitive` support via `es-to-primitive`\n  * [Deps] update `is-callable`, `es-to-primitive`\n  * [Dev Deps] update `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config`, `semver`, `tape`\n  * [Tests] up to `node` `v5.3`\n\n1.4.3 / 2015-11-04\n=================\n  * [Fix] `ES6.ToNumber`: should give `NaN` for explicitly signed hex strings (#4)\n  * [Refactor] `ES6.ToNumber`: No need to double-trim\n  * [Refactor] group tests better\n  * [Tests] should still pass on `node` `v0.8`\n\n1.4.2 / 2015-11-02\n=================\n  * [Fix] ensure `ES.ToNumber` trims whitespace, and does not trim non-whitespace (#3)\n\n1.4.1 / 2015-10-31\n=================\n  * [Fix] ensure only 0-1 are valid binary and 0-7 are valid octal digits (#2)\n  * [Dev Deps] update `tape`, `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config`\n  * [Tests] on `node` `v5.0`\n  * [Tests] fix npm upgrades for older node versions\n  * package.json: use object form of \"authors\", add \"contributors\"\n\n1.4.0 / 2015-09-26\n=================\n  * [Deps] update `is-callable`\n  * [Dev Deps] update `tape`, `jscs`, `eslint`, `@ljharb/eslint-config`\n  * [Tests] on `node` `v4.2`\n  * [New] Add `SameValueNonNumber` to ES7\n\n1.3.2 / 2015-09-26\n=================\n  * [Fix] Fix `ES6.IsRegExp` to properly handle `Symbol.match`, per spec.\n  * [Tests] up to `io.js` `v3.3`, `node` `v4.1`\n  * [Dev Deps] update `tape`, `jscs`, `nsp`, `eslint`, `@ljharb/eslint-config`, `semver`\n\n1.3.1 / 2015-08-15\n=================\n  * [Fix] Ensure that objects that `toString` to a binary or octal literal also convert properly\n\n1.3.0 / 2015-08-15\n=================\n  * [New] ES6’s ToNumber now supports binary and octal literals.\n  * [Dev Deps] update `jscs`, `eslint`, `@ljharb/eslint-config`, `tape`\n  * [Docs] Switch from vb.teelaun.ch to versionbadg.es for the npm version badge SVG\n  * [Tests] up to `io.js` `v3.0`\n\n1.2.2 / 2015-07-28\n=================\n  * [Fix] Both `ES5.CheckObjectCoercible` and `ES6.RequireObjectCoercible` return the value if they don't throw.\n  * [Tests] Test on latest `io.js` versions.\n  * [Dev Deps] Update `eslint`, `jscs`, `tape`, `semver`, `covert`, `nsp`\n\n1.2.1 / 2015-03-20\n=================\n  * Fix `isFinite` helper.\n\n1.2.0 / 2015-03-19\n=================\n  * Use `es-to-primitive` for ToPrimitive methods.\n  * Test on latest `io.js` versions; allow failures on all but 2 latest `node`/`io.js` versions.\n\n1.1.2 / 2015-03-20\n=================\n  * Fix isFinite helper.\n\n1.1.1 / 2015-03-19\n=================\n  * Fix isPrimitive check for functions\n  * Update `eslint`, `editorconfig-tools`, `semver`, `nsp`\n\n1.1.0 / 2015-02-17\n=================\n  * Add ES7 export (non-default).\n  * All grade A-supported `node`/`iojs` versions now ship with an `npm` that understands `^`.\n  * Test on `iojs-v1.2`.\n\n1.0.1 / 2015-01-30\n=================\n  * Use `is-callable` instead of an internal function.\n  * Update `tape`, `jscs`, `nsp`, `eslint`\n\n1.0.0 / 2015-01-10\n=================\n  * v1.0.0\n"
        }
    ]
}