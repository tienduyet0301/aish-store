{
    "sourceFile": "node_modules/es-abstract/2022/MakeMatchIndicesIndexPairArray.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892154152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar ArrayCreate = require('./ArrayCreate');\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\nvar GetMatchIndexPair = require('./GetMatchIndexPair');\nvar IsArray = require('./IsArray');\nvar OrdinaryObjectCreate = require('./OrdinaryObjectCreate');\nvar ToString = require('./ToString');\n\nvar every = require('../helpers/every');\nvar isMatchRecord = require('../helpers/records/match-record');\n\nvar isStringOrUndefined = function isStringOrUndefined(s) {\n\treturn typeof s === 'undefined' || typeof s === 'string';\n};\n\nvar isMatchRecordOrUndefined = function isMatchRecordOrUndefined(m) {\n\treturn typeof m === 'undefined' || isMatchRecord(m);\n};\n\nvar MAX_ARRAY_LENGTH = require('math-intrinsics/constants/maxArrayLength');\n\n// https://262.ecma-international.org/13.0/#sec-getmatchindexpair\n\nmodule.exports = function MakeMatchIndicesIndexPairArray(S, indices, groupNames, hasGroups) {\n\tif (typeof S !== 'string') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!IsArray(indices) || !every(indices, isMatchRecordOrUndefined)) {\n\t\tthrow new $TypeError('Assertion failed: `indices` must be a List of either Match Records or `undefined`');\n\t}\n\tif (!IsArray(groupNames) || !every(groupNames, isStringOrUndefined)) {\n\t\tthrow new $TypeError('Assertion failed: `groupNames` must be a List of either Strings or `undefined`');\n\t}\n\tif (typeof hasGroups !== 'boolean') {\n\t\tthrow new $TypeError('Assertion failed: `hasGroups` must be a Boolean');\n\t}\n\n\tvar n = indices.length; // step 1\n\tif (!(n < MAX_ARRAY_LENGTH)) {\n\t\tthrow new $TypeError('Assertion failed: `indices` length must be less than the max array size, 2**32 - 1');\n\t}\n\tif (groupNames.length !== n - 1) {\n\t\tthrow new $TypeError('Assertion failed: `groupNames` must have exactly one fewer item than `indices`');\n\t}\n\n\tvar A = ArrayCreate(n); // step 5\n\tvar groups = hasGroups ? OrdinaryObjectCreate(null) : void undefined; // step 6-7\n\tCreateDataPropertyOrThrow(A, 'groups', groups); // step 8\n\n\tfor (var i = 0; i < n; i += 1) { // step 9\n\t\tvar matchIndices = indices[i]; // step 9.a\n\t\t// eslint-disable-next-line no-negated-condition\n\t\tvar matchIndexPair = typeof matchIndices !== 'undefined' ? GetMatchIndexPair(S, matchIndices) : void undefined; // step 9.b-9.c\n\t\tCreateDataPropertyOrThrow(A, ToString(i), matchIndexPair); // step 9.d\n\t\tif (i > 0 && typeof groupNames[i - 1] !== 'undefined') { // step 9.e\n\t\t\tif (!groups) {\n\t\t\t\tthrow new $TypeError('if `hasGroups` is `false`, `groupNames` can only contain `undefined` values');\n\t\t\t}\n\t\t\tCreateDataPropertyOrThrow(groups, groupNames[i - 1], matchIndexPair); // step 9.e.i\n\t\t}\n\t}\n\treturn A; // step 10\n};\n"
        }
    ]
}