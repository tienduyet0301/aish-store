{
    "sourceFile": "node_modules/es-abstract/2022/IsValidIntegerIndex.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892153336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\nvar isNegativeZero = require('math-intrinsics/isNegativeZero');\n\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar typedArrayBuffer = require('typed-array-buffer');\n\n// https://262.ecma-international.org/12.0/#sec-isvalidintegerindex\n\nmodule.exports = function IsValidIntegerIndex(O, index) {\n\t// Assert: O is an Integer-Indexed exotic object.\n\tvar buffer = typedArrayBuffer(O); // step 1\n\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: Type(index) is not Number');\n\t}\n\n\tif (IsDetachedBuffer(buffer)) { return false; } // step 2\n\n\tif (!IsIntegralNumber(index)) { return false; } // step 3\n\n\tif (isNegativeZero(index)) { return false; } // step 4\n\n\tif (index < 0 || index >= O.length) { return false; } // step 5\n\n\treturn true; // step 6\n};\n"
        }
    ]
}