{
    "sourceFile": "node_modules/es-abstract/2022/ToBigUint64.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892161074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $BigInt = GetIntrinsic('%BigInt%', true);\n\nvar $pow = require('math-intrinsics/pow');\n\nvar ToBigInt = require('./ToBigInt');\nvar BigIntRemainder = require('./BigInt/remainder');\n\nvar modBigInt = require('../helpers/modBigInt');\n\n// BigInt(2**64), but node v10.4-v10.8 have a bug where you can't `BigInt(x)` anything larger than MAX_SAFE_INTEGER\nvar twoSixtyFour = $BigInt && (BigInt($pow(2, 32)) * BigInt($pow(2, 32)));\n\n// https://262.ecma-international.org/11.0/#sec-tobiguint64\n\nmodule.exports = function ToBigUint64(argument) {\n\tvar n = ToBigInt(argument);\n\tvar int64bit = modBigInt(BigIntRemainder, n, twoSixtyFour);\n\treturn int64bit;\n};\n"
        }
    ]
}