{
    "sourceFile": "node_modules/es-abstract/2022/StringIndexOf.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892159222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar callBound = require('call-bound');\n\nvar $TypeError = require('es-errors/type');\nvar isInteger = require('math-intrinsics/isInteger');\n\nvar $slice = callBound('String.prototype.slice');\n\n// https://262.ecma-international.org/12.0/#sec-stringindexof\n\nmodule.exports = function StringIndexOf(string, searchValue, fromIndex) {\n\tif (typeof string !== 'string') {\n\t\tthrow new $TypeError('Assertion failed: `string` must be a String');\n\t}\n\tif (typeof searchValue !== 'string') {\n\t\tthrow new $TypeError('Assertion failed: `searchValue` must be a String');\n\t}\n\tif (!isInteger(fromIndex) || fromIndex < 0) {\n\t\tthrow new $TypeError('Assertion failed: `fromIndex` must be a non-negative integer');\n\t}\n\n\tvar len = string.length;\n\tif (searchValue === '' && fromIndex <= len) {\n\t\treturn fromIndex;\n\t}\n\n\tvar searchLen = searchValue.length;\n\tfor (var i = fromIndex; i <= (len - searchLen); i += 1) {\n\t\tvar candidate = $slice(string, i, i + searchLen);\n\t\tif (candidate === searchValue) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\n"
        }
    ]
}