{
    "sourceFile": "node_modules/es-abstract/2022/RegExpHasFlag.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892158102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bound');\n\nvar $TypeError = require('es-errors/type');\nvar $RegExpPrototype = GetIntrinsic('%RegExp.prototype%');\n\nvar SameValue = require('./SameValue');\n\nvar isObject = require('../helpers/isObject');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar hasRegExpMatcher = require('is-regex');\nvar getFlags = require('regexp.prototype.flags');\n\n// https://262.ecma-international.org/13.0/#sec-regexphasflag\n\nmodule.exports = function RegExpHasFlag(R, codeUnit) {\n\tif (typeof codeUnit !== 'string' || codeUnit.length !== 1) {\n\t\tthrow new $TypeError('Assertion failed: `string` must be a code unit - a String of length 1');\n\t}\n\n\tif (!isObject(R)) {\n\t\tthrow new $TypeError('Assertion failed: Type(R) is not Object');\n\t}\n\n\tif (!hasRegExpMatcher(R)) { // step 2\n\t\tif (SameValue(R, $RegExpPrototype)) {\n\t\t\treturn void undefined; // step 2.a\n\t\t}\n\t\tthrow new $TypeError('`R` must be a RegExp object'); // step 2.b\n\t}\n\n\tvar flags = getFlags(R); // step 3\n\n\treturn $indexOf(flags, codeUnit) > -1; // steps 4-5\n};\n"
        }
    ]
}