{
    "sourceFile": "node_modules/es-abstract/2022/IntegerIndexedElementSet.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892152001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar $TypeError = require('es-errors/type');\n\nvar IsValidIntegerIndex = require('./IsValidIntegerIndex');\nvar SetValueInBuffer = require('./SetValueInBuffer');\nvar ToBigInt = require('./ToBigInt');\nvar ToNumber = require('./ToNumber');\nvar TypedArrayElementSize = require('./TypedArrayElementSize');\nvar TypedArrayElementType = require('./TypedArrayElementType');\n\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar whichTypedArray = require('which-typed-array');\n\n// https://262.ecma-international.org/13.0/#sec-integerindexedelementset\n\nmodule.exports = function IntegerIndexedElementSet(O, index, value) {\n\tvar arrayTypeName = whichTypedArray(O);\n\tif (!arrayTypeName) {\n\t\tthrow new $TypeError('Assertion failed: `O` must be a TypedArray');\n\t}\n\n\tif (typeof index !== 'number') {\n\t\tthrow new $TypeError('Assertion failed: `index` must be a Number');\n\t}\n\n\tvar contentType = arrayTypeName === 'BigInt64Array' || arrayTypeName === 'BigUint64Array' ? 'BigInt' : 'Number';\n\tvar numValue = contentType === 'BigInt' ? ToBigInt(value) : ToNumber(value); // steps 1 - 2\n\n\tif (IsValidIntegerIndex(O, index)) { // step 3\n\t\tvar offset = typedArrayByteOffset(O); // step 3.a\n\n\t\tvar elementSize = TypedArrayElementSize(O); // step 3.b\n\n\t\tvar indexedPosition = (index * elementSize) + offset; // step 3.c\n\n\t\tvar elementType = TypedArrayElementType(O); // step 3.d\n\n\t\tSetValueInBuffer(typedArrayBuffer(O), indexedPosition, elementType, numValue, true, 'Unordered'); // step 3.e\n\t}\n};\n"
        }
    ]
}