{
    "sourceFile": "node_modules/es-abstract/2022/SetTypedArrayFromTypedArray.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892158967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $RangeError = require('es-errors/range');\nvar $SyntaxError = require('es-errors/syntax');\nvar $TypeError = require('es-errors/type');\nvar $ArrayBuffer = GetIntrinsic('%ArrayBuffer%', true);\n\nvar typedArrayBuffer = require('typed-array-buffer');\nvar typedArrayByteLength = require('typed-array-byte-length');\nvar typedArrayByteOffset = require('typed-array-byte-offset');\nvar typedArrayLength = require('typed-array-length');\nvar whichTypedArray = require('which-typed-array');\nvar isInteger = require('math-intrinsics/isInteger');\n\nvar CloneArrayBuffer = require('./CloneArrayBuffer');\nvar GetValueFromBuffer = require('./GetValueFromBuffer');\nvar IsDetachedBuffer = require('./IsDetachedBuffer');\nvar IsSharedArrayBuffer = require('./IsSharedArrayBuffer');\nvar SameValue = require('./SameValue');\nvar SetValueInBuffer = require('./SetValueInBuffer');\nvar TypedArrayElementSize = require('./TypedArrayElementSize');\nvar TypedArrayElementType = require('./TypedArrayElementType');\n\n// https://262.ecma-international.org/13.0/#sec-settypedarrayfromtypedarray\n\nmodule.exports = function SetTypedArrayFromTypedArray(target, targetOffset, source) {\n\tvar whichTarget = whichTypedArray(target);\n\tif (!whichTarget) {\n\t\tthrow new $TypeError('Assertion failed: target must be a TypedArray instance');\n\t}\n\n\tif (targetOffset !== Infinity && (!isInteger(targetOffset) || targetOffset < 0)) {\n\t\tthrow new $TypeError('Assertion failed: targetOffset must be a non-negative integer or +Infinity');\n\t}\n\n\tvar whichSource = whichTypedArray(source);\n\tif (!whichSource) {\n\t\tthrow new $TypeError('Assertion failed: source must be a TypedArray instance');\n\t}\n\n\tvar targetBuffer = typedArrayBuffer(target); // step 1\n\n\tif (IsDetachedBuffer(targetBuffer)) {\n\t\tthrow new $TypeError('target’s buffer is detached'); // step 2\n\t}\n\n\tvar targetLength = typedArrayLength(target); // step 3\n\n\tvar srcBuffer = typedArrayBuffer(source); // step 4\n\n\tif (IsDetachedBuffer(srcBuffer)) {\n\t\tthrow new $TypeError('source’s buffer is detached'); // step 5\n\t}\n\n\tvar targetType = TypedArrayElementType(target); // step 6\n\n\tvar targetElementSize = TypedArrayElementSize(target); // step 7\n\n\tvar targetByteOffset = typedArrayByteOffset(target); // step 8\n\n\tvar srcType = TypedArrayElementType(source); // step 9\n\n\tvar srcElementSize = TypedArrayElementSize(source); // step 10\n\n\tvar srcLength = typedArrayLength(source); // step 11\n\n\tvar srcByteOffset = typedArrayByteOffset(source); // step 12\n\n\tif (targetOffset === Infinity) {\n\t\tthrow new $RangeError('targetOffset must be a non-negative integer or +Infinity'); // step 13\n\t}\n\n\tif (srcLength + targetOffset > targetLength) {\n\t\tthrow new $RangeError('targetOffset + source.length must not be greater than target.length'); // step 14\n\t}\n\n\tvar targetContentType = whichTarget === 'BigInt64Array' || whichTarget === 'BigUint64Array' ? 'BigInt' : 'Number';\n\tvar sourceContentType = whichSource === 'BigInt64Array' || whichSource === 'BigUint64Array' ? 'BigInt' : 'Number';\n\tif (targetContentType !== sourceContentType) {\n\t\tthrow new $TypeError('source and target must have the same content type'); // step 15\n\t}\n\n\tvar same;\n\tif (IsSharedArrayBuffer(srcBuffer) && IsSharedArrayBuffer(targetBuffer)) { // step 16\n\t\t// a. If srcBuffer.[[ArrayBufferData]] and targetBuffer.[[ArrayBufferData]] are the same Shared Data Block values, let same be true; else let same be false.\n\t\tthrow new $SyntaxError('SharedArrayBuffer is not supported by this implementation');\n\t} else {\n\t\tsame = SameValue(srcBuffer, targetBuffer); // step 17\n\t}\n\n\tvar srcByteIndex;\n\tif (same) { // step 18\n\t\tvar srcByteLength = typedArrayByteLength(source); // step 18.a\n\n\t\tsrcBuffer = CloneArrayBuffer(srcBuffer, srcByteOffset, srcByteLength, $ArrayBuffer); // step 18.b\n\n\t\t// c. NOTE: %ArrayBuffer% is used to clone srcBuffer because is it known to not have any observable side-effects.\n\n\t\tsrcByteIndex = 0; // step 18.d\n\t} else {\n\t\tsrcByteIndex = srcByteOffset; // step 19\n\t}\n\n\tvar targetByteIndex = (targetOffset * targetElementSize) + targetByteOffset; // step 20\n\n\tvar limit = targetByteIndex + (targetElementSize * srcLength); // step 21\n\n\tvar value;\n\tif (srcType === targetType) { // step 22\n\t\t// a. NOTE: If srcType and targetType are the same, the transfer must be performed in a manner that preserves the bit-level encoding of the source data.\n\n\t\twhile (targetByteIndex < limit) { // step 22.b\n\t\t\tvalue = GetValueFromBuffer(srcBuffer, srcByteIndex, 'Uint8', true, 'Unordered'); // step 22.b.i\n\n\t\t\tSetValueInBuffer(targetBuffer, targetByteIndex, 'Uint8', value, true, 'Unordered'); // step 22.b.ii\n\n\t\t\tsrcByteIndex += 1; // step 22.b.iii\n\n\t\t\ttargetByteIndex += 1; // step 22.b.iv\n\t\t}\n\t} else { // step 23\n\t\twhile (targetByteIndex < limit) { // step 23.a\n\t\t\tvalue = GetValueFromBuffer(srcBuffer, srcByteIndex, srcType, true, 'Unordered'); // step 23.a.i\n\n\t\t\tSetValueInBuffer(targetBuffer, targetByteIndex, targetType, value, true, 'Unordered'); // step 23.a.ii\n\n\t\t\tsrcByteIndex += srcElementSize; // step 23.a.iii\n\n\t\t\ttargetByteIndex += targetElementSize; // step 23.a.iv\n\t\t}\n\t}\n};\n"
        }
    ]
}