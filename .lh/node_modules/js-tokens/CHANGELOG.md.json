{
    "sourceFile": "node_modules/js-tokens/CHANGELOG.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892371045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "### Version 4.0.0 (2018-01-28) ###\n\n- Added: Support for ES2018. The only change needed was recognizing the `s`\n  regex flag.\n- Changed: _All_ tokens returned by the `matchToToken` function now have a\n  `closed` property. It is set to `undefined` for the tokens where “closed”\n  doesn’t make sense. This means that all tokens objects have the same shape,\n  which might improve performance.\n\nThese are the breaking changes:\n\n- `'/a/s'.match(jsTokens)` no longer returns `['/', 'a', '/', 's']`, but\n  `['/a/s']`. (There are of course other variations of this.)\n- Code that rely on some token objects not having the `closed` property could\n  now behave differently.\n\n\n### Version 3.0.2 (2017-06-28) ###\n\n- No code changes. Just updates to the readme.\n\n\n### Version 3.0.1 (2017-01-30) ###\n\n- Fixed: ES2015 unicode escapes with more than 6 hex digits are now matched\n  correctly.\n\n\n### Version 3.0.0 (2017-01-11) ###\n\nThis release contains one breaking change, that should [improve performance in\nV8][v8-perf]:\n\n> So how can you, as a JavaScript developer, ensure that your RegExps are fast?\n> If you are not interested in hooking into RegExp internals, make sure that\n> neither the RegExp instance, nor its prototype is modified in order to get the\n> best performance:\n>\n> ```js\n> var re = /./g;\n> re.exec('');  // Fast path.\n> re.new_property = 'slow';\n> ```\n\nThis module used to export a single regex, with `.matchToToken` bolted\non, just like in the above example. This release changes the exports of\nthe module to avoid this issue.\n\nBefore:\n\n```js\nimport jsTokens from \"js-tokens\"\n// or:\nvar jsTokens = require(\"js-tokens\")\nvar matchToToken = jsTokens.matchToToken\n```\n\nAfter:\n\n```js\nimport jsTokens, {matchToToken} from \"js-tokens\"\n// or:\nvar jsTokens = require(\"js-tokens\").default\nvar matchToToken = require(\"js-tokens\").matchToToken\n```\n\n[v8-perf]: http://v8project.blogspot.se/2017/01/speeding-up-v8-regular-expressions.html\n\n\n### Version 2.0.0 (2016-06-19) ###\n\n- Added: Support for ES2016. In other words, support for the `**` exponentiation\n  operator.\n\nThese are the breaking changes:\n\n- `'**'.match(jsTokens)` no longer returns `['*', '*']`, but `['**']`.\n- `'**='.match(jsTokens)` no longer returns `['*', '*=']`, but `['**=']`.\n\n\n### Version 1.0.3 (2016-03-27) ###\n\n- Improved: Made the regex ever so slightly smaller.\n- Updated: The readme.\n\n\n### Version 1.0.2 (2015-10-18) ###\n\n- Improved: Limited npm package contents for a smaller download. Thanks to\n  @zertosh!\n\n\n### Version 1.0.1 (2015-06-20) ###\n\n- Fixed: Declared an undeclared variable.\n\n\n### Version 1.0.0 (2015-02-26) ###\n\n- Changed: Merged the 'operator' and 'punctuation' types into 'punctuator'. That\n  type is now equivalent to the Punctuator token in the ECMAScript\n  specification. (Backwards-incompatible change.)\n- Fixed: A `-` followed by a number is now correctly matched as a punctuator\n  followed by a number. It used to be matched as just a number, but there is no\n  such thing as negative number literals. (Possibly backwards-incompatible\n  change.)\n\n\n### Version 0.4.1 (2015-02-21) ###\n\n- Added: Support for the regex `u` flag.\n\n\n### Version 0.4.0 (2015-02-21) ###\n\n- Improved: `jsTokens.matchToToken` performance.\n- Added: Support for octal and binary number literals.\n- Added: Support for template strings.\n\n\n### Version 0.3.1 (2015-01-06) ###\n\n- Fixed: Support for unicode spaces. They used to be allowed in names (which is\n  very confusing), and some unicode newlines were wrongly allowed in strings and\n  regexes.\n\n\n### Version 0.3.0 (2014-12-19) ###\n\n- Changed: The `jsTokens.names` array has been replaced with the\n  `jsTokens.matchToToken` function. The capturing groups of `jsTokens` are no\n  longer part of the public API; instead use said function. See this [gist] for\n  an example. (Backwards-incompatible change.)\n- Changed: The empty string is now considered an “invalid” token, instead an\n  “empty” token (its own group). (Backwards-incompatible change.)\n- Removed: component support. (Backwards-incompatible change.)\n\n[gist]: https://gist.github.com/lydell/be49dbf80c382c473004\n\n\n### Version 0.2.0 (2014-06-19) ###\n\n- Changed: Match ES6 function arrows (`=>`) as an operator, instead of its own\n  category (“functionArrow”), for simplicity. (Backwards-incompatible change.)\n- Added: ES6 splats (`...`) are now matched as an operator (instead of three\n  punctuations). (Backwards-incompatible change.)\n\n\n### Version 0.1.0 (2014-03-08) ###\n\n- Initial release.\n"
        }
    ]
}