{
    "sourceFile": "node_modules/for-each/test/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892297762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar forEach = require('../');\n\ntest('forEach calls each iterator', function (t) {\n    var count = 0;\n    t.plan(4);\n\n    forEach({ a: 1, b: 2 }, function (value, key) {\n        if (count === 0) {\n            t.equal(value, 1);\n            t.equal(key, 'a');\n        } else {\n            t.equal(value, 2);\n            t.equal(key, 'b');\n        }\n        count += 1;\n    });\n});\n\ntest('forEach calls iterator with correct this value', function (t) {\n    var thisValue = {};\n\n    t.plan(1);\n\n    forEach([0], function () {\n        t.equal(this, thisValue);\n    }, thisValue);\n});\n\ntest('second argument: iterator', function (t) {\n    /** @type {unknown[]} */\n    var arr = [];\n\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr); }, TypeError, 'undefined is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, null); }, TypeError, 'null is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, ''); }, TypeError, 'string is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, /a/); }, TypeError, 'regex is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, true); }, TypeError, 'true is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, false); }, TypeError, 'false is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, NaN); }, TypeError, 'NaN is not a function');\n    // @ts-expect-error\n    t['throws'](function () { forEach(arr, 42); }, TypeError, '42 is not a function');\n\n    t.doesNotThrow(function () { forEach(arr, function () {}); }, 'function is a function');\n    // @ts-expect-error TODO fixme\n    t.doesNotThrow(function () { forEach(arr, setTimeout); }, 'setTimeout is a function');\n\n    /* eslint-env browser */\n    if (typeof window !== 'undefined') {\n        t.doesNotThrow(function () { forEach(arr, window.alert); }, 'alert is a function');\n    }\n\n    t.end();\n});\n\ntest('array', function (t) {\n    var arr = /** @type {const} */ ([1, 2, 3]);\n\n    t.test('iterates over every item', function (st) {\n        var index = 0;\n        forEach(arr, function () { index += 1; });\n        st.equal(index, arr.length, 'iterates ' + arr.length + ' times');\n        st.end();\n    });\n\n    t.test('first iterator argument', function (st) {\n        var index = 0;\n        st.plan(arr.length);\n\n        forEach(arr, function (item) {\n            st.equal(arr[index], item, 'item ' + index + ' is passed as first argument');\n            index += 1;\n        });\n\n        st.end();\n    });\n\n    t.test('second iterator argument', function (st) {\n        var counter = 0;\n        st.plan(arr.length);\n\n        forEach(arr, function (_item, index) {\n            st.equal(counter, index, 'index ' + index + ' is passed as second argument');\n            counter += 1;\n        });\n\n        st.end();\n    });\n\n    t.test('third iterator argument', function (st) {\n        st.plan(arr.length);\n\n        forEach(arr, function (_item, _index, array) {\n            st.deepEqual(arr, array, 'array is passed as third argument');\n        });\n\n        st.end();\n    });\n\n    t.test('context argument', function (st) {\n        var context = {};\n\n        forEach([], function () {\n            st.equal(this, context, '\"this\" is the passed context');\n        }, context);\n\n        st.end();\n    });\n\n    t.end();\n});\n\ntest('object', function (t) {\n    var obj = {\n        a: 1,\n        b: 2,\n        c: 3\n    };\n    var keys = /** @type {const} */ (['a', 'b', 'c']);\n\n    /** @constructor */\n    function F() {\n        this.a = 1;\n        this.b = 2;\n    }\n    F.prototype.c = 3;\n    var fKeys = /** @type {const} */ (['a', 'b']);\n\n    t.test('iterates over every object literal key', function (st) {\n        var counter = 0;\n\n        forEach(obj, function () { counter += 1; });\n\n        st.equal(counter, keys.length, 'iterated ' + counter + ' times');\n\n        st.end();\n    });\n\n    t.test('iterates only over own keys', function (st) {\n        var counter = 0;\n\n        forEach(new F(), function () { counter += 1; });\n\n        st.equal(counter, fKeys.length, 'iterated ' + fKeys.length + ' times');\n\n        st.end();\n    });\n\n    t.test('first iterator argument', function (st) {\n        var index = 0;\n        st.plan(keys.length);\n\n        forEach(obj, function (item) {\n            st.equal(obj[keys[index]], item, 'item at key ' + keys[index] + ' is passed as first argument');\n            index += 1;\n        });\n\n        st.end();\n    });\n\n    t.test('second iterator argument', function (st) {\n        var counter = 0;\n        st.plan(keys.length);\n\n        forEach(obj, function (_item, key) {\n            st.equal(keys[counter], key, 'key ' + key + ' is passed as second argument');\n            counter += 1;\n        });\n\n        st.end();\n    });\n\n    t.test('third iterator argument', function (st) {\n        st.plan(keys.length);\n\n        forEach(obj, function (_item, _key, object) {\n            st.deepEqual(obj, object, 'object is passed as third argument');\n        });\n\n        st.end();\n    });\n\n    t.test('context argument', function (st) {\n        var context = {};\n\n        forEach({}, function () {\n            st.equal(this, context, '\"this\" is the passed context');\n        }, context);\n\n        st.end();\n    });\n\n    t.end();\n});\n\ntest('string', function (t) {\n    var str = /** @type {const} */ ('str');\n\n    t.test('second iterator argument', function (st) {\n        var counter = 0;\n        st.plan((str.length * 2) + 1);\n\n        forEach(str, function (item, index) {\n            st.equal(counter, index, 'index ' + index + ' is passed as second argument');\n            st.equal(str.charAt(index), item);\n            counter += 1;\n        });\n\n        st.equal(counter, str.length, 'iterates ' + str.length + ' times');\n\n        st.end();\n    });\n\n    t.end();\n});\n"
        }
    ]
}