{
    "sourceFile": "node_modules/side-channel/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893030928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\n\nvar getSideChannel = require('../');\n\ntest('getSideChannel', function (t) {\n\tt.test('export', function (st) {\n\t\tst.equal(typeof getSideChannel, 'function', 'is a function');\n\n\t\tst.equal(getSideChannel.length, 0, 'takes no arguments');\n\n\t\tvar channel = getSideChannel();\n\t\tst.ok(channel, 'is truthy');\n\t\tst.equal(typeof channel, 'object', 'is an object');\n\t\tst.end();\n\t});\n\n\tt.test('assert', function (st) {\n\t\tvar channel = getSideChannel();\n\t\tst['throws'](\n\t\t\tfunction () { channel.assert({}); },\n\t\t\tTypeError,\n\t\t\t'nonexistent value throws'\n\t\t);\n\n\t\tvar o = {};\n\t\tchannel.set(o, 'data');\n\t\tst.doesNotThrow(function () { channel.assert(o); }, 'existent value noops');\n\n\t\tst.end();\n\t});\n\n\tt.test('has', function (st) {\n\t\tvar channel = getSideChannel();\n\t\t/** @type {unknown[]} */ var o = [];\n\n\t\tst.equal(channel.has(o), false, 'nonexistent value yields false');\n\n\t\tchannel.set(o, 'foo');\n\t\tst.equal(channel.has(o), true, 'existent value yields true');\n\n\t\tst.equal(channel.has('abc'), false, 'non object value non existent yields false');\n\n\t\tchannel.set('abc', 'foo');\n\t\tst.equal(channel.has('abc'), true, 'non object value that exists yields true');\n\n\t\tst.end();\n\t});\n\n\tt.test('get', function (st) {\n\t\tvar channel = getSideChannel();\n\t\tvar o = {};\n\t\tst.equal(channel.get(o), undefined, 'nonexistent value yields undefined');\n\n\t\tvar data = {};\n\t\tchannel.set(o, data);\n\t\tst.equal(channel.get(o), data, '\"get\" yields data set by \"set\"');\n\n\t\tst.end();\n\t});\n\n\tt.test('set', function (st) {\n\t\tvar channel = getSideChannel();\n\t\tvar o = function () {};\n\t\tst.equal(channel.get(o), undefined, 'value not set');\n\n\t\tchannel.set(o, 42);\n\t\tst.equal(channel.get(o), 42, 'value was set');\n\n\t\tchannel.set(o, Infinity);\n\t\tst.equal(channel.get(o), Infinity, 'value was set again');\n\n\t\tvar o2 = {};\n\t\tchannel.set(o2, 17);\n\t\tst.equal(channel.get(o), Infinity, 'o is not modified');\n\t\tst.equal(channel.get(o2), 17, 'o2 is set');\n\n\t\tchannel.set(o, 14);\n\t\tst.equal(channel.get(o), 14, 'o is modified');\n\t\tst.equal(channel.get(o2), 17, 'o2 is not modified');\n\n\t\tst.end();\n\t});\n\n\tt.test('delete', function (st) {\n\t\tvar channel = getSideChannel();\n\t\tvar o = {};\n\t\tst.equal(channel['delete']({}), false, 'nonexistent value yields false');\n\n\t\tchannel.set(o, 42);\n\t\tst.equal(channel.has(o), true, 'value is set');\n\n\t\tst.equal(channel['delete']({}), false, 'nonexistent value still yields false');\n\n\t\tst.equal(channel['delete'](o), true, 'deleted value yields true');\n\n\t\tst.equal(channel.has(o), false, 'value is no longer set');\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}