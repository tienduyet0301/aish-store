{
    "sourceFile": "node_modules/json-schema-traverse/spec/index.spec.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892374481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar traverse = require('../index');\nvar assert = require('assert');\n\ndescribe('json-schema-traverse', function() {\n  var calls;\n\n  beforeEach(function() {\n    calls = [];\n  });\n\n  it('should traverse all keywords containing schemas recursively', function() {\n    var schema = require('./fixtures/schema').schema;\n    var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n    traverse(schema, {cb: callback});\n    assert.deepStrictEqual(calls, expectedCalls);\n  });\n\n  describe('Legacy v0.3.1 API', function() {\n    it('should traverse all keywords containing schemas recursively', function() {\n      var schema = require('./fixtures/schema').schema;\n      var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n      traverse(schema, callback);\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n    it('should work when an options object is provided', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var schema = require('./fixtures/schema').schema;\n      var expectedCalls = require('./fixtures/schema').expectedCalls;\n\n      traverse(schema, {}, callback);\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n\n  describe('allKeys option', function() {\n    var schema = {\n      someObject: {\n        minimum: 1,\n        maximum: 2\n      }\n    };\n\n    it('should traverse objects with allKeys: true option', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema, '', schema, undefined, undefined, undefined, undefined],\n        [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]\n      ];\n\n      traverse(schema, {allKeys: true, cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n\n    it('should NOT traverse objects with allKeys: false option', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema, '', schema, undefined, undefined, undefined, undefined]\n      ];\n\n      traverse(schema, {allKeys: false, cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n\n    it('should NOT traverse objects without allKeys option', function() {\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema, '', schema, undefined, undefined, undefined, undefined]\n      ];\n\n      traverse(schema, {cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n\n    it('should NOT travers objects in standard keywords which value is not a schema', function() {\n      var schema2 = {\n        const: {foo: 'bar'},\n        enum: ['a', 'b'],\n        required: ['foo'],\n        another: {\n\n        },\n        patternProperties: {}, // will not traverse - no properties\n        dependencies: true, // will not traverse - invalid\n        properties: {\n          smaller: {\n            type: 'number'\n          },\n          larger: {\n            type: 'number',\n            minimum: {$data: '1/smaller'}\n          }\n        }\n      };\n\n      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n      var expectedCalls = [\n        [schema2, '', schema2, undefined, undefined, undefined, undefined],\n        [schema2.another, '/another', schema2, '', 'another', schema2, undefined],\n        [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],\n        [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],\n      ];\n\n      traverse(schema2, {allKeys: true, cb: callback});\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n  describe('pre and post', function() {\n    var schema = {\n      type: 'object',\n      properties: {\n        name: {type: 'string'},\n        age: {type: 'number'}\n      }\n    };\n\n    it('should traverse schema in pre-order', function() {\n      traverse(schema, {cb: {pre}});\n      var expectedCalls = [\n        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n      ];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n    it('should traverse schema in post-order', function() {\n      traverse(schema, {cb: {post}});\n      var expectedCalls = [\n        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n        ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n      ];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n\n    it('should traverse schema in pre- and post-order at the same time', function() {\n      traverse(schema, {cb: {pre, post}});\n      var expectedCalls = [\n        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n        ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n      ];\n      assert.deepStrictEqual(calls, expectedCalls);\n    });\n  });\n\n  function callback() {\n    calls.push(Array.prototype.slice.call(arguments));\n  }\n\n  function pre() {\n    calls.push(['pre'].concat(Array.prototype.slice.call(arguments)));\n  }\n\n  function post() {\n    calls.push(['post'].concat(Array.prototype.slice.call(arguments)));\n  }\n});\n"
        }
    ]
}