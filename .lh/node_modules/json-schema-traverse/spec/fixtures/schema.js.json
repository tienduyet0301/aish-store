{
    "sourceFile": "node_modules/json-schema-traverse/spec/fixtures/schema.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892374414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar schema = {\n  additionalItems: subschema('additionalItems'),\n  items: subschema('items'),\n  contains: subschema('contains'),\n  additionalProperties: subschema('additionalProperties'),\n  propertyNames: subschema('propertyNames'),\n  not: subschema('not'),\n  allOf: [\n    subschema('allOf_0'),\n    subschema('allOf_1'),\n    {\n      items: [\n        subschema('items_0'),\n        subschema('items_1'),\n      ]\n    }\n  ],\n  anyOf: [\n    subschema('anyOf_0'),\n    subschema('anyOf_1'),\n  ],\n  oneOf: [\n    subschema('oneOf_0'),\n    subschema('oneOf_1'),\n  ],\n  definitions: {\n    foo: subschema('definitions_foo'),\n    bar: subschema('definitions_bar'),\n  },\n  properties: {\n    foo: subschema('properties_foo'),\n    bar: subschema('properties_bar'),\n  },\n  patternProperties: {\n    foo: subschema('patternProperties_foo'),\n    bar: subschema('patternProperties_bar'),\n  },\n  dependencies: {\n    foo: subschema('dependencies_foo'),\n    bar: subschema('dependencies_bar'),\n  },\n  required: ['foo', 'bar']\n};\n\n\nfunction subschema(keyword) {\n  var sch = {\n    properties: {},\n    additionalProperties: false,\n    additionalItems: false,\n    anyOf: [\n      {format: 'email'},\n      {format: 'hostname'}\n    ]\n  };\n  sch.properties['foo_' + keyword] = {title: 'foo'};\n  sch.properties['bar_' + keyword] = {title: 'bar'};\n  return sch;\n}\n\n\nmodule.exports = {\n  schema: schema,\n\n  // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\n  expectedCalls: [[schema, '', schema, undefined, undefined, undefined, undefined]]\n    .concat(expectedCalls('additionalItems'))\n    .concat(expectedCalls('items'))\n    .concat(expectedCalls('contains'))\n    .concat(expectedCalls('additionalProperties'))\n    .concat(expectedCalls('propertyNames'))\n    .concat(expectedCalls('not'))\n    .concat(expectedCallsChild('allOf', 0))\n    .concat(expectedCallsChild('allOf', 1))\n    .concat([\n      [schema.allOf[2], '/allOf/2', schema, '', 'allOf', schema, 2],\n      [schema.allOf[2].items[0], '/allOf/2/items/0', schema, '/allOf/2', 'items', schema.allOf[2], 0],\n      [schema.allOf[2].items[0].properties.foo_items_0, '/allOf/2/items/0/properties/foo_items_0', schema, '/allOf/2/items/0', 'properties', schema.allOf[2].items[0], 'foo_items_0'],\n      [schema.allOf[2].items[0].properties.bar_items_0, '/allOf/2/items/0/properties/bar_items_0', schema, '/allOf/2/items/0', 'properties', schema.allOf[2].items[0], 'bar_items_0'],\n      [schema.allOf[2].items[0].anyOf[0], '/allOf/2/items/0/anyOf/0', schema, '/allOf/2/items/0', 'anyOf', schema.allOf[2].items[0], 0],\n      [schema.allOf[2].items[0].anyOf[1], '/allOf/2/items/0/anyOf/1', schema, '/allOf/2/items/0', 'anyOf', schema.allOf[2].items[0], 1],\n\n      [schema.allOf[2].items[1], '/allOf/2/items/1', schema, '/allOf/2', 'items', schema.allOf[2], 1],\n      [schema.allOf[2].items[1].properties.foo_items_1, '/allOf/2/items/1/properties/foo_items_1', schema, '/allOf/2/items/1', 'properties', schema.allOf[2].items[1], 'foo_items_1'],\n      [schema.allOf[2].items[1].properties.bar_items_1, '/allOf/2/items/1/properties/bar_items_1', schema, '/allOf/2/items/1', 'properties', schema.allOf[2].items[1], 'bar_items_1'],\n      [schema.allOf[2].items[1].anyOf[0], '/allOf/2/items/1/anyOf/0', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 0],\n      [schema.allOf[2].items[1].anyOf[1], '/allOf/2/items/1/anyOf/1', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 1]\n    ])\n    .concat(expectedCallsChild('anyOf', 0))\n    .concat(expectedCallsChild('anyOf', 1))\n    .concat(expectedCallsChild('oneOf', 0))\n    .concat(expectedCallsChild('oneOf', 1))\n    .concat(expectedCallsChild('definitions', 'foo'))\n    .concat(expectedCallsChild('definitions', 'bar'))\n    .concat(expectedCallsChild('properties', 'foo'))\n    .concat(expectedCallsChild('properties', 'bar'))\n    .concat(expectedCallsChild('patternProperties', 'foo'))\n    .concat(expectedCallsChild('patternProperties', 'bar'))\n    .concat(expectedCallsChild('dependencies', 'foo'))\n    .concat(expectedCallsChild('dependencies', 'bar'))\n};\n\n\nfunction expectedCalls(keyword) {\n  return [\n    [schema[keyword], `/${keyword}`, schema, '', keyword, schema, undefined],\n    [schema[keyword].properties[`foo_${keyword}`], `/${keyword}/properties/foo_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `foo_${keyword}`],\n    [schema[keyword].properties[`bar_${keyword}`], `/${keyword}/properties/bar_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `bar_${keyword}`],\n    [schema[keyword].anyOf[0], `/${keyword}/anyOf/0`, schema, `/${keyword}`, 'anyOf', schema[keyword], 0],\n    [schema[keyword].anyOf[1], `/${keyword}/anyOf/1`, schema, `/${keyword}`, 'anyOf', schema[keyword], 1]\n  ];\n}\n\n\nfunction expectedCallsChild(keyword, i) {\n  return [\n    [schema[keyword][i], `/${keyword}/${i}`, schema, '', keyword, schema, i],\n    [schema[keyword][i].properties[`foo_${keyword}_${i}`], `/${keyword}/${i}/properties/foo_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `foo_${keyword}_${i}`],\n    [schema[keyword][i].properties[`bar_${keyword}_${i}`], `/${keyword}/${i}/properties/bar_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `bar_${keyword}_${i}`],\n    [schema[keyword][i].anyOf[0], `/${keyword}/${i}/anyOf/0`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 0],\n    [schema[keyword][i].anyOf[1], `/${keyword}/${i}/anyOf/1`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 1]\n  ];\n}\n"
        }
    ]
}