{
    "sourceFile": "node_modules/@react-aria/interactions/dist/textSelection.main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891907177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var $20aJV$reactariautils = require(\"@react-aria/utils\");\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"disableTextSelection\", () => $f7e14e656343df57$export$16a4697467175487);\n$parcel$export(module.exports, \"restoreTextSelection\", () => $f7e14e656343df57$export$b0d6fa1ab32e3295);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet $f7e14e656343df57$var$state = 'default';\nlet $f7e14e656343df57$var$savedUserSelect = '';\nlet $f7e14e656343df57$var$modifiedElementMap = new WeakMap();\nfunction $f7e14e656343df57$export$16a4697467175487(target) {\n    if ((0, $20aJV$reactariautils.isIOS)()) {\n        if ($f7e14e656343df57$var$state === 'default') {\n            const documentObject = (0, $20aJV$reactariautils.getOwnerDocument)(target);\n            $f7e14e656343df57$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;\n            documentObject.documentElement.style.webkitUserSelect = 'none';\n        }\n        $f7e14e656343df57$var$state = 'disabled';\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) {\n        // If not iOS, store the target's original user-select and change to user-select: none\n        // Ignore state since it doesn't apply for non iOS\n        let property = 'userSelect' in target.style ? 'userSelect' : 'webkitUserSelect';\n        $f7e14e656343df57$var$modifiedElementMap.set(target, target.style[property]);\n        target.style[property] = 'none';\n    }\n}\nfunction $f7e14e656343df57$export$b0d6fa1ab32e3295(target) {\n    if ((0, $20aJV$reactariautils.isIOS)()) {\n        // If the state is already default, there's nothing to do.\n        // If it is restoring, then there's no need to queue a second restore.\n        if ($f7e14e656343df57$var$state !== 'disabled') return;\n        $f7e14e656343df57$var$state = 'restoring';\n        // There appears to be a delay on iOS where selection still might occur\n        // after pointer up, so wait a bit before removing user-select.\n        setTimeout(()=>{\n            // Wait for any CSS transitions to complete so we don't recompute style\n            // for the whole page in the middle of the animation and cause jank.\n            (0, $20aJV$reactariautils.runAfterTransition)(()=>{\n                // Avoid race conditions\n                if ($f7e14e656343df57$var$state === 'restoring') {\n                    const documentObject = (0, $20aJV$reactariautils.getOwnerDocument)(target);\n                    if (documentObject.documentElement.style.webkitUserSelect === 'none') documentObject.documentElement.style.webkitUserSelect = $f7e14e656343df57$var$savedUserSelect || '';\n                    $f7e14e656343df57$var$savedUserSelect = '';\n                    $f7e14e656343df57$var$state = 'default';\n                }\n            });\n        }, 300);\n    } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    {\n        if (target && $f7e14e656343df57$var$modifiedElementMap.has(target)) {\n            let targetOldUserSelect = $f7e14e656343df57$var$modifiedElementMap.get(target);\n            let property = 'userSelect' in target.style ? 'userSelect' : 'webkitUserSelect';\n            if (target.style[property] === 'none') target.style[property] = targetOldUserSelect;\n            if (target.getAttribute('style') === '') target.removeAttribute('style');\n            $f7e14e656343df57$var$modifiedElementMap.delete(target);\n        }\n    }\n}\n\n\n//# sourceMappingURL=textSelection.main.js.map\n"
        }
    ]
}