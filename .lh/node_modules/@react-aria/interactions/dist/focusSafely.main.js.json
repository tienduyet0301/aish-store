{
    "sourceFile": "node_modules/@react-aria/interactions/dist/focusSafely.main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891906635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var $e77252a287ef94ab$exports = require(\"./useFocusVisible.main.js\");\nvar $fCG8z$reactariautils = require(\"@react-aria/utils\");\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"focusSafely\", () => $2833058fcd3993f5$export$80f3e147d781571c);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nfunction $2833058fcd3993f5$export$80f3e147d781571c(element) {\n    // If the user is interacting with a virtual cursor, e.g. screen reader, then\n    // wait until after any animated transitions that are currently occurring on\n    // the page before shifting focus. This avoids issues with VoiceOver on iOS\n    // causing the page to scroll when moving focus if the element is transitioning\n    // from off the screen.\n    const ownerDocument = (0, $fCG8z$reactariautils.getOwnerDocument)(element);\n    const activeElement = (0, $fCG8z$reactariautils.getActiveElement)(ownerDocument);\n    if ((0, $e77252a287ef94ab$exports.getInteractionModality)() === 'virtual') {\n        let lastFocusedElement = activeElement;\n        (0, $fCG8z$reactariautils.runAfterTransition)(()=>{\n            // If focus did not move and the element is still in the document, focus it.\n            if ((0, $fCG8z$reactariautils.getActiveElement)(ownerDocument) === lastFocusedElement && element.isConnected) (0, $fCG8z$reactariautils.focusWithoutScrolling)(element);\n        });\n    } else (0, $fCG8z$reactariautils.focusWithoutScrolling)(element);\n}\n\n\n//# sourceMappingURL=focusSafely.main.js.map\n"
        }
    ]
}