{
    "sourceFile": "node_modules/@react-aria/utils/dist/useValueEffect.main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891917576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var $1254e5bb94ac8761$exports = require(\"./useEffectEvent.main.js\");\nvar $78605a5d7424e31b$exports = require(\"./useLayoutEffect.main.js\");\nvar $fymK9$react = require(\"react\");\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"useValueEffect\", () => $19a2307bfabafaf1$export$14d238f342723f25);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nfunction $19a2307bfabafaf1$export$14d238f342723f25(defaultValue) {\n    let [value, setValue] = (0, $fymK9$react.useState)(defaultValue);\n    let effect = (0, $fymK9$react.useRef)(null);\n    // Store the function in a ref so we can always access the current version\n    // which has the proper `value` in scope.\n    let nextRef = (0, $1254e5bb94ac8761$exports.useEffectEvent)(()=>{\n        if (!effect.current) return;\n        // Run the generator to the next yield.\n        let newValue = effect.current.next();\n        // If the generator is done, reset the effect.\n        if (newValue.done) {\n            effect.current = null;\n            return;\n        }\n        // If the value is the same as the current value,\n        // then continue to the next yield. Otherwise,\n        // set the value in state and wait for the next layout effect.\n        if (value === newValue.value) nextRef();\n        else setValue(newValue.value);\n    });\n    (0, $78605a5d7424e31b$exports.useLayoutEffect)(()=>{\n        // If there is an effect currently running, continue to the next yield.\n        if (effect.current) nextRef();\n    });\n    let queue = (0, $1254e5bb94ac8761$exports.useEffectEvent)((fn)=>{\n        effect.current = fn(value);\n        nextRef();\n    });\n    return [\n        value,\n        queue\n    ];\n}\n\n\n//# sourceMappingURL=useValueEffect.main.js.map\n"
        }
    ]
}