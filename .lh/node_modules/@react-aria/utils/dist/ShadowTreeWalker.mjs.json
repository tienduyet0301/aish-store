{
    "sourceFile": "node_modules/@react-aria/utils/dist/ShadowTreeWalker.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891914504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {nodeContains as $d4ee10de306f2510$export$4282f70798064fe0} from \"./DOMFunctions.mjs\";\nimport {shadowDOM as $bJKXg$shadowDOM} from \"@react-stately/flags\";\n\n// https://github.com/microsoft/tabster/blob/a89fc5d7e332d48f68d03b1ca6e344489d1c3898/src/Shadowdomize/ShadowTreeWalker.ts\n\n\nclass $dfc540311bf7f109$export$63eb3ababa9c55c4 {\n    get currentNode() {\n        return this._currentNode;\n    }\n    set currentNode(node) {\n        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(this.root, node)) throw new Error('Cannot set currentNode to a node that is not contained by the root node.');\n        const walkers = [];\n        let curNode = node;\n        let currentWalkerCurrentNode = node;\n        this._currentNode = node;\n        while(curNode && curNode !== this.root)if (curNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n            const shadowRoot = curNode;\n            const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {\n                acceptNode: this._acceptNode\n            });\n            walkers.push(walker);\n            walker.currentNode = currentWalkerCurrentNode;\n            this._currentSetFor.add(walker);\n            curNode = currentWalkerCurrentNode = shadowRoot.host;\n        } else curNode = curNode.parentNode;\n        const walker = this._doc.createTreeWalker(this.root, this.whatToShow, {\n            acceptNode: this._acceptNode\n        });\n        walkers.push(walker);\n        walker.currentNode = currentWalkerCurrentNode;\n        this._currentSetFor.add(walker);\n        this._walkerStack = walkers;\n    }\n    get doc() {\n        return this._doc;\n    }\n    firstChild() {\n        let currentNode = this.currentNode;\n        let newNode = this.nextNode();\n        if (!(0, $d4ee10de306f2510$export$4282f70798064fe0)(currentNode, newNode)) {\n            this.currentNode = currentNode;\n            return null;\n        }\n        if (newNode) this.currentNode = newNode;\n        return newNode;\n    }\n    lastChild() {\n        let walker = this._walkerStack[0];\n        let newNode = walker.lastChild();\n        if (newNode) this.currentNode = newNode;\n        return newNode;\n    }\n    nextNode() {\n        const nextNode = this._walkerStack[0].nextNode();\n        if (nextNode) {\n            const shadowRoot = nextNode.shadowRoot;\n            if (shadowRoot) {\n                var _this_filter;\n                let nodeResult;\n                if (typeof this.filter === 'function') nodeResult = this.filter(nextNode);\n                else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(nextNode);\n                if (nodeResult === NodeFilter.FILTER_ACCEPT) {\n                    this.currentNode = nextNode;\n                    return nextNode;\n                }\n                // _acceptNode should have added new walker for this shadow,\n                // go in recursively.\n                let newNode = this.nextNode();\n                if (newNode) this.currentNode = newNode;\n                return newNode;\n            }\n            if (nextNode) this.currentNode = nextNode;\n            return nextNode;\n        } else {\n            if (this._walkerStack.length > 1) {\n                this._walkerStack.shift();\n                let newNode = this.nextNode();\n                if (newNode) this.currentNode = newNode;\n                return newNode;\n            } else return null;\n        }\n    }\n    previousNode() {\n        const currentWalker = this._walkerStack[0];\n        if (currentWalker.currentNode === currentWalker.root) {\n            if (this._currentSetFor.has(currentWalker)) {\n                this._currentSetFor.delete(currentWalker);\n                if (this._walkerStack.length > 1) {\n                    this._walkerStack.shift();\n                    let newNode = this.previousNode();\n                    if (newNode) this.currentNode = newNode;\n                    return newNode;\n                } else return null;\n            }\n            return null;\n        }\n        const previousNode = currentWalker.previousNode();\n        if (previousNode) {\n            const shadowRoot = previousNode.shadowRoot;\n            if (shadowRoot) {\n                var _this_filter;\n                let nodeResult;\n                if (typeof this.filter === 'function') nodeResult = this.filter(previousNode);\n                else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) nodeResult = this.filter.acceptNode(previousNode);\n                if (nodeResult === NodeFilter.FILTER_ACCEPT) {\n                    if (previousNode) this.currentNode = previousNode;\n                    return previousNode;\n                }\n                // _acceptNode should have added new walker for this shadow,\n                // go in recursively.\n                let newNode = this.lastChild();\n                if (newNode) this.currentNode = newNode;\n                return newNode;\n            }\n            if (previousNode) this.currentNode = previousNode;\n            return previousNode;\n        } else {\n            if (this._walkerStack.length > 1) {\n                this._walkerStack.shift();\n                let newNode = this.previousNode();\n                if (newNode) this.currentNode = newNode;\n                return newNode;\n            } else return null;\n        }\n    }\n    /**\n     * @deprecated\n     */ nextSibling() {\n        // if (__DEV__) {\n        //     throw new Error(\"Method not implemented.\");\n        // }\n        return null;\n    }\n    /**\n     * @deprecated\n     */ previousSibling() {\n        // if (__DEV__) {\n        //     throw new Error(\"Method not implemented.\");\n        // }\n        return null;\n    }\n    /**\n     * @deprecated\n     */ parentNode() {\n        // if (__DEV__) {\n        //     throw new Error(\"Method not implemented.\");\n        // }\n        return null;\n    }\n    constructor(doc, root, whatToShow, filter){\n        this._walkerStack = [];\n        this._currentSetFor = new Set();\n        this._acceptNode = (node)=>{\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                const shadowRoot = node.shadowRoot;\n                if (shadowRoot) {\n                    const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {\n                        acceptNode: this._acceptNode\n                    });\n                    this._walkerStack.unshift(walker);\n                    return NodeFilter.FILTER_ACCEPT;\n                } else {\n                    var _this_filter;\n                    if (typeof this.filter === 'function') return this.filter(node);\n                    else if ((_this_filter = this.filter) === null || _this_filter === void 0 ? void 0 : _this_filter.acceptNode) return this.filter.acceptNode(node);\n                    else if (this.filter === null) return NodeFilter.FILTER_ACCEPT;\n                }\n            }\n            return NodeFilter.FILTER_SKIP;\n        };\n        this._doc = doc;\n        this.root = root;\n        this.filter = filter !== null && filter !== void 0 ? filter : null;\n        this.whatToShow = whatToShow !== null && whatToShow !== void 0 ? whatToShow : NodeFilter.SHOW_ALL;\n        this._currentNode = root;\n        this._walkerStack.unshift(doc.createTreeWalker(root, whatToShow, this._acceptNode));\n        const shadowRoot = root.shadowRoot;\n        if (shadowRoot) {\n            const walker = this._doc.createTreeWalker(shadowRoot, this.whatToShow, {\n                acceptNode: this._acceptNode\n            });\n            this._walkerStack.unshift(walker);\n        }\n    }\n}\nfunction $dfc540311bf7f109$export$4d0f8be8b12a7ef6(doc, root, whatToShow, filter) {\n    if ((0, $bJKXg$shadowDOM)()) return new $dfc540311bf7f109$export$63eb3ababa9c55c4(doc, root, whatToShow, filter);\n    return doc.createTreeWalker(root, whatToShow, filter);\n}\n\n\nexport {$dfc540311bf7f109$export$63eb3ababa9c55c4 as ShadowTreeWalker, $dfc540311bf7f109$export$4d0f8be8b12a7ef6 as createShadowTreeWalker};\n//# sourceMappingURL=ShadowTreeWalker.module.js.map\n"
        }
    ]
}