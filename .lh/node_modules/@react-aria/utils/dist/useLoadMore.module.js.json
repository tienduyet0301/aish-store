{
    "sourceFile": "node_modules/@react-aria/utils/dist/useLoadMore.module.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891916589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {useEvent as $e9faafb641e167db$export$90fc3a17d93f704c} from \"./useEvent.module.js\";\nimport {useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c} from \"./useLayoutEffect.module.js\";\nimport {useRef as $hDRkU$useRef, useCallback as $hDRkU$useCallback} from \"react\";\n\n/*\n * Copyright 2024 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\nfunction $26f7f3da73fcd9d6$export$7717c92ee915373e(props, ref) {\n    let { isLoading: isLoading, onLoadMore: onLoadMore, scrollOffset: scrollOffset = 1, items: items } = props;\n    // Handle scrolling, and call onLoadMore when nearing the bottom.\n    let isLoadingRef = (0, $hDRkU$useRef)(isLoading);\n    let prevProps = (0, $hDRkU$useRef)(props);\n    let onScroll = (0, $hDRkU$useCallback)(()=>{\n        if (ref.current && !isLoadingRef.current && onLoadMore) {\n            let shouldLoadMore = ref.current.scrollHeight - ref.current.scrollTop - ref.current.clientHeight < ref.current.clientHeight * scrollOffset;\n            if (shouldLoadMore) {\n                isLoadingRef.current = true;\n                onLoadMore();\n            }\n        }\n    }, [\n        onLoadMore,\n        ref,\n        scrollOffset\n    ]);\n    let lastItems = (0, $hDRkU$useRef)(items);\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        // Only update isLoadingRef if props object actually changed,\n        // not if a local state change occurred.\n        if (props !== prevProps.current) {\n            isLoadingRef.current = isLoading;\n            prevProps.current = props;\n        }\n        // TODO: Eventually this hook will move back into RAC during which we will accept the collection as a option to this hook.\n        // We will only load more if the collection has changed after the last load to prevent multiple onLoadMore from being called\n        // while the data from the last onLoadMore is being processed by RAC collection.\n        let shouldLoadMore = (ref === null || ref === void 0 ? void 0 : ref.current) && !isLoadingRef.current && onLoadMore && (!items || items !== lastItems.current) && ref.current.clientHeight === ref.current.scrollHeight;\n        if (shouldLoadMore) {\n            isLoadingRef.current = true;\n            onLoadMore === null || onLoadMore === void 0 ? void 0 : onLoadMore();\n        }\n        lastItems.current = items;\n    }, [\n        isLoading,\n        onLoadMore,\n        props,\n        ref,\n        items\n    ]);\n    // TODO: maybe this should still just return scroll props?\n    // Test against case where the ref isn't defined when this is called\n    // Think this was a problem when trying to attach to the scrollable body of the table in OnLoadMoreTableBodyScroll\n    (0, $e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'scroll', onScroll);\n}\n\n\nexport {$26f7f3da73fcd9d6$export$7717c92ee915373e as useLoadMore};\n//# sourceMappingURL=useLoadMore.module.js.map\n"
        }
    ]
}