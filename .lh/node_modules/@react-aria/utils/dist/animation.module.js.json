{
    "sourceFile": "node_modules/@react-aria/utils/dist/animation.module.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891910526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {useLayoutEffect as $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c} from \"./useLayoutEffect.module.js\";\nimport {flushSync as $jJMAe$flushSync} from \"react-dom\";\nimport {useState as $jJMAe$useState, useCallback as $jJMAe$useCallback} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\nfunction $d3f049242431219c$export$6d3443f2c48bfc20(ref, isReady = true) {\n    let [isEntering, setEntering] = (0, $jJMAe$useState)(true);\n    let isAnimationReady = isEntering && isReady;\n    // There are two cases for entry animations:\n    // 1. CSS @keyframes. The `animation` property is set during the isEntering state, and it is removed after the animation finishes.\n    // 2. CSS transitions. The initial styles are applied during the isEntering state, and removed immediately, causing the transition to occur.\n    //\n    // In the second case, cancel any transitions that were triggered prior to the isEntering = false state (when the transition is supposed to start).\n    // This can happen when isReady starts as false (e.g. popovers prior to placement calculation).\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        if (isAnimationReady && ref.current && 'getAnimations' in ref.current) {\n            for (let animation of ref.current.getAnimations())if (animation instanceof CSSTransition) animation.cancel();\n        }\n    }, [\n        ref,\n        isAnimationReady\n    ]);\n    $d3f049242431219c$var$useAnimation(ref, isAnimationReady, (0, $jJMAe$useCallback)(()=>setEntering(false), []));\n    return isAnimationReady;\n}\nfunction $d3f049242431219c$export$45fda7c47f93fd48(ref, isOpen) {\n    let [exitState, setExitState] = (0, $jJMAe$useState)(isOpen ? 'open' : 'closed');\n    switch(exitState){\n        case 'open':\n            // If isOpen becomes false, set the state to exiting.\n            if (!isOpen) setExitState('exiting');\n            break;\n        case 'closed':\n        case 'exiting':\n            // If we are exiting and isOpen becomes true, the animation was interrupted.\n            // Reset the state to open.\n            if (isOpen) setExitState('open');\n            break;\n    }\n    let isExiting = exitState === 'exiting';\n    $d3f049242431219c$var$useAnimation(ref, isExiting, (0, $jJMAe$useCallback)(()=>{\n        // Set the state to closed, which will cause the element to be unmounted.\n        setExitState((state)=>state === 'exiting' ? 'closed' : state);\n    }, []));\n    return isExiting;\n}\nfunction $d3f049242431219c$var$useAnimation(ref, isActive, onEnd) {\n    (0, $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{\n        if (isActive && ref.current) {\n            if (!('getAnimations' in ref.current)) {\n                // JSDOM\n                onEnd();\n                return;\n            }\n            let animations = ref.current.getAnimations();\n            if (animations.length === 0) {\n                onEnd();\n                return;\n            }\n            let canceled = false;\n            Promise.all(animations.map((a)=>a.finished)).then(()=>{\n                if (!canceled) (0, $jJMAe$flushSync)(()=>{\n                    onEnd();\n                });\n            }).catch(()=>{});\n            return ()=>{\n                canceled = true;\n            };\n        }\n    }, [\n        ref,\n        isActive,\n        onEnd\n    ]);\n}\n\n\nexport {$d3f049242431219c$export$6d3443f2c48bfc20 as useEnterAnimation, $d3f049242431219c$export$45fda7c47f93fd48 as useExitAnimation};\n//# sourceMappingURL=animation.module.js.map\n"
        }
    ]
}