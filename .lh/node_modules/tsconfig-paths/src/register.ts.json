{
    "sourceFile": "node_modules/tsconfig-paths/src/register.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893065514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { createMatchPath } from \"./match-path-sync\";\nimport { configLoader, ExplicitParams } from \"./config-loader\";\nimport { options } from \"./options\";\n\nconst noOp = (): void => void 0;\n\nfunction getCoreModules(\n  builtinModules: string[] | undefined\n): { [key: string]: boolean } {\n  builtinModules = builtinModules || [\n    \"assert\",\n    \"buffer\",\n    \"child_process\",\n    \"cluster\",\n    \"crypto\",\n    \"dgram\",\n    \"dns\",\n    \"domain\",\n    \"events\",\n    \"fs\",\n    \"http\",\n    \"https\",\n    \"net\",\n    \"os\",\n    \"path\",\n    \"punycode\",\n    \"querystring\",\n    \"readline\",\n    \"stream\",\n    \"string_decoder\",\n    \"tls\",\n    \"tty\",\n    \"url\",\n    \"util\",\n    \"v8\",\n    \"vm\",\n    \"zlib\",\n  ];\n\n  const coreModules: { [key: string]: boolean } = {};\n  for (let module of builtinModules) {\n    coreModules[module] = true;\n  }\n\n  return coreModules;\n}\n\n/**\n * Installs a custom module load function that can adhere to paths in tsconfig.\n * Returns a function to undo paths registration.\n */\nexport function register(explicitParams: ExplicitParams): () => void {\n  const configLoaderResult = configLoader({\n    cwd: options.cwd,\n    explicitParams,\n  });\n\n  if (configLoaderResult.resultType === \"failed\") {\n    console.warn(\n      `${configLoaderResult.message}. tsconfig-paths will be skipped`\n    );\n\n    return noOp;\n  }\n\n  const matchPath = createMatchPath(\n    configLoaderResult.absoluteBaseUrl,\n    configLoaderResult.paths,\n    configLoaderResult.mainFields,\n    configLoaderResult.addMatchAll\n  );\n\n  // Patch node's module loading\n  // tslint:disable-next-line:no-require-imports variable-name\n  const Module = require(\"module\");\n  const originalResolveFilename = Module._resolveFilename;\n  const coreModules = getCoreModules(Module.builtinModules);\n  // tslint:disable-next-line:no-any\n  Module._resolveFilename = function (request: string, _parent: any): string {\n    const isCoreModule = coreModules.hasOwnProperty(request);\n    if (!isCoreModule) {\n      const found = matchPath(request);\n      if (found) {\n        const modifiedArguments = [found, ...[].slice.call(arguments, 1)]; // Passes all arguments. Even those that is not specified above.\n        // tslint:disable-next-line:no-invalid-this\n        return originalResolveFilename.apply(this, modifiedArguments);\n      }\n    }\n    // tslint:disable-next-line:no-invalid-this\n    return originalResolveFilename.apply(this, arguments);\n  };\n\n  return () => {\n    // Return node's module loading to original state.\n    Module._resolveFilename = originalResolveFilename;\n  };\n}\n"
        }
    ]
}