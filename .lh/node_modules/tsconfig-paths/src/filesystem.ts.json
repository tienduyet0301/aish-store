{
    "sourceFile": "node_modules/tsconfig-paths/src/filesystem.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893064718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as fs from \"fs\";\n\n/**\n * Typing for the fields of package.json we care about\n */\nexport interface PackageJson {\n  [key: string]: string;\n}\n\n/**\n * A function that json from a file\n */\nexport interface ReadJsonSync {\n  // tslint:disable-next-line:no-any\n  (packageJsonPath: string): any | undefined;\n}\n\nexport interface FileExistsSync {\n  (name: string): boolean;\n}\n\nexport interface FileExistsAsync {\n  (path: string, callback: (err?: Error, exists?: boolean) => void): void;\n}\n\nexport interface ReadJsonAsyncCallback {\n  // tslint:disable-next-line:no-any\n  (err?: Error, content?: any): void;\n}\n\nexport interface ReadJsonAsync {\n  (path: string, callback: ReadJsonAsyncCallback): void;\n}\n\nexport function fileExistsSync(path: string): boolean {\n  try {\n    const stats = fs.statSync(path);\n    return stats.isFile();\n  } catch (err) {\n    // If error, assume file did not exist\n    return false;\n  }\n}\n\n/**\n * Reads package.json from disk\n * @param file Path to package.json\n */\n// tslint:disable-next-line:no-any\nexport function readJsonFromDiskSync(packageJsonPath: string): any | undefined {\n  if (!fs.existsSync(packageJsonPath)) {\n    return undefined;\n  }\n  return require(packageJsonPath);\n}\n\nexport function readJsonFromDiskAsync(\n  path: string,\n  // tslint:disable-next-line:no-any\n  callback: (err?: Error, content?: any) => void\n): void {\n  fs.readFile(path, \"utf8\", (err, result) => {\n    // If error, assume file did not exist\n    if (err || !result) {\n      return callback();\n    }\n    const json = JSON.parse(result);\n    return callback(undefined, json);\n  });\n}\n\nexport function fileExistsAsync(\n  path2: string,\n  callback2: (err?: Error, exists?: boolean) => void\n): void {\n  fs.stat(path2, (err: Error, stats: fs.Stats) => {\n    if (err) {\n      // If error assume file does not exist\n      return callback2(undefined, false);\n    }\n    callback2(undefined, stats ? stats.isFile() : false);\n  });\n}\n\nexport function removeExtension(path: string): string {\n  return path.substring(0, path.lastIndexOf(\".\")) || path;\n}\n"
        }
    ]
}