{
    "sourceFile": "node_modules/tsconfig-paths/src/config-loader.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893064607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as TsConfigLoader2 from \"./tsconfig-loader\";\nimport * as path from \"path\";\nimport { options } from \"./options\";\n\nexport interface ExplicitParams {\n  baseUrl: string;\n  paths: { [key: string]: Array<string> };\n  mainFields?: Array<string>;\n  addMatchAll?: boolean;\n}\n\nexport type TsConfigLoader = (\n  params: TsConfigLoader2.TsConfigLoaderParams\n) => TsConfigLoader2.TsConfigLoaderResult;\n\nexport interface ConfigLoaderParams {\n  cwd: string;\n  explicitParams?: ExplicitParams;\n  tsConfigLoader?: TsConfigLoader;\n}\n\nexport interface ConfigLoaderSuccessResult {\n  resultType: \"success\";\n  configFileAbsolutePath: string;\n  baseUrl: string;\n  absoluteBaseUrl: string;\n  paths: { [key: string]: Array<string> };\n  mainFields?: Array<string>;\n  addMatchAll?: boolean;\n}\n\nexport interface ConfigLoaderFailResult {\n  resultType: \"failed\";\n  message: string;\n}\n\nexport type ConfigLoaderResult =\n  | ConfigLoaderSuccessResult\n  | ConfigLoaderFailResult;\n\nexport function loadConfig(cwd: string = options.cwd): ConfigLoaderResult {\n  return configLoader({ cwd: cwd });\n}\n\nexport function configLoader({\n  cwd,\n  explicitParams,\n  tsConfigLoader = TsConfigLoader2.tsConfigLoader,\n}: ConfigLoaderParams): ConfigLoaderResult {\n  if (explicitParams) {\n    // tslint:disable-next-line:no-shadowed-variable\n    const absoluteBaseUrl = path.isAbsolute(explicitParams.baseUrl)\n      ? explicitParams.baseUrl\n      : path.join(cwd, explicitParams.baseUrl);\n\n    return {\n      resultType: \"success\",\n      configFileAbsolutePath: \"\",\n      baseUrl: explicitParams.baseUrl,\n      absoluteBaseUrl,\n      paths: explicitParams.paths,\n      mainFields: explicitParams.mainFields,\n      addMatchAll: explicitParams.addMatchAll,\n    };\n  }\n\n  // Load tsconfig and create path matching function\n  const loadResult = tsConfigLoader({\n    cwd,\n    getEnv: (key: string) => process.env[key],\n  });\n\n  if (!loadResult.tsConfigPath) {\n    return {\n      resultType: \"failed\",\n      message: \"Couldn't find tsconfig.json\",\n    };\n  }\n\n  if (!loadResult.baseUrl) {\n    return {\n      resultType: \"failed\",\n      message: \"Missing baseUrl in compilerOptions\",\n    };\n  }\n\n  const tsConfigDir = path.dirname(loadResult.tsConfigPath);\n  const absoluteBaseUrl = path.join(tsConfigDir, loadResult.baseUrl);\n\n  return {\n    resultType: \"success\",\n    configFileAbsolutePath: loadResult.tsConfigPath,\n    baseUrl: loadResult.baseUrl,\n    absoluteBaseUrl,\n    paths: loadResult.paths || {},\n  };\n}\n"
        }
    ]
}