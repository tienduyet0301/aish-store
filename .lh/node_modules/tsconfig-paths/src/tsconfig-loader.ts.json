{
    "sourceFile": "node_modules/tsconfig-paths/src/tsconfig-loader.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893065675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as path from \"path\";\nimport * as fs from \"fs\";\n// tslint:disable:no-require-imports\nimport JSON5 = require(\"json5\");\nimport StripBom = require(\"strip-bom\");\n// tslint:enable:no-require-imports\n\n/**\n * Typing for the parts of tsconfig that we care about\n */\nexport interface Tsconfig {\n  extends?: string | string[];\n  compilerOptions?: {\n    baseUrl?: string;\n    paths?: { [key: string]: Array<string> };\n    strict?: boolean;\n  };\n}\n\nexport interface TsConfigLoaderResult {\n  tsConfigPath: string | undefined;\n  baseUrl: string | undefined;\n  paths: { [key: string]: Array<string> } | undefined;\n}\n\nexport interface TsConfigLoaderParams {\n  getEnv: (key: string) => string | undefined;\n  cwd: string;\n  loadSync?(\n    cwd: string,\n    filename?: string,\n    baseUrl?: string\n  ): TsConfigLoaderResult;\n}\n\nexport function tsConfigLoader({\n  getEnv,\n  cwd,\n  loadSync = loadSyncDefault,\n}: TsConfigLoaderParams): TsConfigLoaderResult {\n  const TS_NODE_PROJECT = getEnv(\"TS_NODE_PROJECT\");\n  const TS_NODE_BASEURL = getEnv(\"TS_NODE_BASEURL\");\n\n  // tsconfig.loadSync handles if TS_NODE_PROJECT is a file or directory\n  // and also overrides baseURL if TS_NODE_BASEURL is available.\n  const loadResult = loadSync(cwd, TS_NODE_PROJECT, TS_NODE_BASEURL);\n  return loadResult;\n}\n\nfunction loadSyncDefault(\n  cwd: string,\n  filename?: string,\n  baseUrl?: string\n): TsConfigLoaderResult {\n  // Tsconfig.loadSync uses path.resolve. This is why we can use an absolute path as filename\n\n  const configPath = resolveConfigPath(cwd, filename);\n\n  if (!configPath) {\n    return {\n      tsConfigPath: undefined,\n      baseUrl: undefined,\n      paths: undefined,\n    };\n  }\n  const config = loadTsconfig(configPath);\n\n  return {\n    tsConfigPath: configPath,\n    baseUrl:\n      baseUrl ||\n      (config && config.compilerOptions && config.compilerOptions.baseUrl),\n    paths: config && config.compilerOptions && config.compilerOptions.paths,\n  };\n}\n\nfunction resolveConfigPath(cwd: string, filename?: string): string | undefined {\n  if (filename) {\n    const absolutePath = fs.lstatSync(filename).isDirectory()\n      ? path.resolve(filename, \"./tsconfig.json\")\n      : path.resolve(cwd, filename);\n\n    return absolutePath;\n  }\n\n  if (fs.statSync(cwd).isFile()) {\n    return path.resolve(cwd);\n  }\n\n  const configAbsolutePath = walkForTsConfig(cwd);\n  return configAbsolutePath ? path.resolve(configAbsolutePath) : undefined;\n}\n\nexport function walkForTsConfig(\n  directory: string,\n  existsSync: (path: string) => boolean = fs.existsSync\n): string | undefined {\n  const configPath = path.join(directory, \"./tsconfig.json\");\n  if (existsSync(configPath)) {\n    return configPath;\n  }\n\n  const parentDirectory = path.join(directory, \"../\");\n\n  // If we reached the top\n  if (directory === parentDirectory) {\n    return undefined;\n  }\n\n  return walkForTsConfig(parentDirectory, existsSync);\n}\n\nexport function loadTsconfig(\n  configFilePath: string,\n  existsSync: (path: string) => boolean = fs.existsSync,\n  readFileSync: (filename: string) => string = (filename: string) =>\n    fs.readFileSync(filename, \"utf8\")\n): Tsconfig | undefined {\n  if (!existsSync(configFilePath)) {\n    return undefined;\n  }\n\n  const configString = readFileSync(configFilePath);\n  const cleanedJson = StripBom(configString);\n  let config: Tsconfig;\n  try {\n    config = JSON5.parse(cleanedJson);\n  } catch (e) {\n    throw new Error(`${configFilePath} is malformed ${e.message}`);\n  }\n\n  let extendedConfig = config.extends;\n  if (extendedConfig) {\n    let base: Tsconfig;\n\n    if (Array.isArray(extendedConfig)) {\n      base = extendedConfig.reduce(\n        (currBase, extendedConfigElement) =>\n          mergeTsconfigs(\n            currBase,\n            loadTsconfigFromExtends(\n              configFilePath,\n              extendedConfigElement,\n              existsSync,\n              readFileSync\n            )\n          ),\n        {}\n      );\n    } else {\n      base = loadTsconfigFromExtends(\n        configFilePath,\n        extendedConfig,\n        existsSync,\n        readFileSync\n      );\n    }\n\n    return mergeTsconfigs(base, config);\n  }\n  return config;\n}\n\n/**\n * Intended to be called only from loadTsconfig.\n * Parameters don't have defaults because they should use the same as loadTsconfig.\n */\nfunction loadTsconfigFromExtends(\n  configFilePath: string,\n  extendedConfigValue: string,\n  // eslint-disable-next-line no-shadow\n  existsSync: (path: string) => boolean,\n  readFileSync: (filename: string) => string\n): Tsconfig {\n  if (\n    typeof extendedConfigValue === \"string\" &&\n    extendedConfigValue.indexOf(\".json\") === -1\n  ) {\n    extendedConfigValue += \".json\";\n  }\n  const currentDir = path.dirname(configFilePath);\n  let extendedConfigPath = path.join(currentDir, extendedConfigValue);\n  if (\n    extendedConfigValue.indexOf(\"/\") !== -1 &&\n    extendedConfigValue.indexOf(\".\") !== -1 &&\n    !existsSync(extendedConfigPath)\n  ) {\n    extendedConfigPath = path.join(\n      currentDir,\n      \"node_modules\",\n      extendedConfigValue\n    );\n  }\n\n  const config =\n    loadTsconfig(extendedConfigPath, existsSync, readFileSync) || {};\n\n  // baseUrl should be interpreted as relative to extendedConfigPath,\n  // but we need to update it so it is relative to the original tsconfig being loaded\n  if (config.compilerOptions?.baseUrl) {\n    const extendsDir = path.dirname(extendedConfigValue);\n    config.compilerOptions.baseUrl = path.join(\n      extendsDir,\n      config.compilerOptions.baseUrl\n    );\n  }\n\n  return config;\n}\n\nfunction mergeTsconfigs(\n  base: Tsconfig | undefined,\n  config: Tsconfig | undefined\n): Tsconfig {\n  base = base || {};\n  config = config || {};\n\n  return {\n    ...base,\n    ...config,\n    compilerOptions: {\n      ...base.compilerOptions,\n      ...config.compilerOptions,\n    },\n  };\n}\n"
        }
    ]
}