{
    "sourceFile": "node_modules/tsconfig-paths/src/__tests__/filesystem.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893065927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as Filesystem from \"../filesystem\";\nimport * as path from \"path\";\n\ndescribe(\"filesystem\", () => {\n  const fileThatExists = path.join(__dirname, \"../../package.json\");\n  const fileThatNotExists = path.join(__dirname, \"../../package2.json\");\n\n  it(\"should find file that exists, sync\", () => {\n    const result = Filesystem.fileExistsSync(fileThatExists);\n    // assert.equal(result, true);\n    expect(result).toBe(true);\n  });\n\n  it(\"should not find file that not exists, sync\", () => {\n    const result = Filesystem.fileExistsSync(fileThatNotExists);\n    // assert.equal(result, false);\n    expect(result).toBe(false);\n  });\n\n  it(\"should find file that exists, async\", (done) => {\n    Filesystem.fileExistsAsync(fileThatExists, (_err, result) => {\n      try {\n        // assert.equal(result, true);\n        expect(result).toBe(true);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n\n  it(\"should not find file that not exists, async\", (done) => {\n    Filesystem.fileExistsAsync(fileThatNotExists, (_err, result) => {\n      try {\n        // assert.equal(result, false);\n        expect(result).toBe(false);\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n\n  it(\"should load json, sync\", () => {\n    const result = Filesystem.readJsonFromDiskSync(fileThatExists);\n    // assert.isOk(result);\n    expect(result);\n    // assert.equal(result.main, \"lib/index.js\");\n    expect(result.main).toBe(\"lib/index.js\");\n  });\n\n  it(\"should load json, async\", (done) => {\n    Filesystem.readJsonFromDiskAsync(fileThatExists, (_err, result) => {\n      try {\n        // assert.isOk(result); // Asserts that object is truthy.\n        expect(result).toBeTruthy();\n        // assert.equal(result.main, \"lib/index.js\");\n        expect(result.main).toBe(\"lib/index.js\");\n        done();\n      } catch (error) {\n        done(error);\n      }\n    });\n  });\n});\n"
        }
    ]
}