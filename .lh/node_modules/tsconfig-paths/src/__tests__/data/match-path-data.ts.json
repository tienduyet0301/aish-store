{
    "sourceFile": "node_modules/tsconfig-paths/src/__tests__/data/match-path-data.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893065849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { join, dirname } from \"path\";\nimport { removeExtension } from \"../../filesystem\";\n\nexport interface OneTest {\n  readonly name: string;\n  readonly only?: boolean;\n  readonly skip?: boolean;\n  readonly absoluteBaseUrl: string;\n  readonly paths: { [key: string]: Array<string> };\n  readonly mainFields?: string[];\n  readonly addMatchAll?: boolean;\n  readonly existingFiles: ReadonlyArray<string>;\n  readonly requestedModule: string;\n  readonly extensions: ReadonlyArray<string>;\n  readonly packageJson?: {};\n  readonly expectedPath: string | undefined;\n}\n\nconst defaultExtensionsWhenRunningInTsNode = [\n  \".js\",\n  \".json\",\n  \".node\",\n  \".ts\",\n  \".tsx\",\n];\n\nexport const tests: ReadonlyArray<OneTest> = [\n  {\n    name: \"should locate path that matches with star and exists\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/*\": [\"location/*\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n    requestedModule: \"lib/mylib\",\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve to correct path when many are specified\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/*\": [\"foo1/*\", \"foo2/*\", \"location/*\", \"foo3/*\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n    requestedModule: \"lib/mylib\",\n    extensions: [\".ts\"],\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n  },\n  {\n    name:\n      \"should locate path that matches with star and prioritize pattern with longest prefix\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"*\": [\"location/*\"],\n      \"lib/*\": [\"location/*\"],\n    },\n    existingFiles: [\n      join(\"/root\", \"location\", \"lib\", \"mylib\", \"index.ts\"),\n      join(\"/root\", \"location\", \"mylib\", \"index.ts\"),\n    ],\n    requestedModule: \"lib/mylib\",\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should locate path that matches with star and exists with extension\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib.myext\")],\n    requestedModule: \"lib/mylib\",\n    extensions: [\".js\", \".myext\"],\n    expectedPath: removeExtension(join(\"/root\", \"location\", \"mylib.myext\")),\n  },\n  {\n    name: \"should resolve request with extension specified\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"test.jpg\")],\n    requestedModule: \"lib/test.jpg\",\n    expectedPath: join(\"/root\", \"location\", \"test.jpg\"),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should locate path that matches without star and exists\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/foo\": [\"location/foo\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"foo.ts\")],\n    requestedModule: \"lib/foo\",\n    expectedPath: removeExtension(join(\"/root\", \"location\", \"foo.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve to parent folder when filename is in subfolder\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n    requestedModule: \"lib/mylib\",\n    expectedPath: dirname(join(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve from main field in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"kalle.ts\")],\n    packageJson: { main: \"./kalle.ts\" },\n    requestedModule: \"lib/mylib\",\n    expectedPath: join(\"/root\", \"location\", \"mylib\", \"kalle.ts\"),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve from main field in package.json (js)\",\n    absoluteBaseUrl: \"/root\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"/root\", \"location\", \"mylib.js\", \"kalle.js\")],\n    packageJson: { main: \"./kalle.js\" },\n    requestedModule: \"lib/mylib.js\",\n    extensions: [\".ts\", \".js\"],\n    expectedPath: join(\"/root\", \"location\", \"mylib.js\", \"kalle.js\"),\n  },\n  {\n    name: \"should resolve from list of fields by priority in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    mainFields: [\"missing\", \"browser\", \"main\"],\n    packageJson: { main: \"./main.js\", browser: \"./browser.js\" },\n    existingFiles: [\n      join(\"/root\", \"location\", \"mylibjs\", \"main.js\"), // mainFilePath\n      join(\"/root\", \"location\", \"mylibjs\", \"browser.js\"), // browserFilePath\n    ],\n    extensions: [\".ts\", \".js\"],\n    requestedModule: \"lib/mylibjs\",\n    expectedPath: join(\"/root\", \"location\", \"mylibjs\", \"browser.js\"),\n  },\n  {\n    name: \"should ignore field mappings to missing files in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    mainFields: [\"browser\", \"main\"],\n    existingFiles: [join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\")],\n    requestedModule: \"lib/mylibjs\",\n    packageJson: {\n      main: \"./kalle.js\",\n      browser: \"./nope.js\",\n    },\n    extensions: [\".ts\", \".js\"],\n    expectedPath: join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n  },\n  {\n    name: \"should ignore advanced field mappings in package.json\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [\n      join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n      join(\"/root\", \"location\", \"mylibjs\", \"browser.js\"),\n    ],\n    requestedModule: \"lib/mylibjs\",\n    packageJson: {\n      main: \"./kalle.js\",\n      browser: { mylibjs: \"./browser.js\", \"./kalle.js\": \"./browser.js\" },\n    },\n    extensions: [\".ts\", \".js\"],\n    expectedPath: join(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n  },\n  {\n    name: \"should resolve to with the help of baseUrl when not explicitly set\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {},\n    existingFiles: [join(\"/root\", \"mylib\", \"index.ts\")],\n    requestedModule: \"mylib\",\n    expectedPath: dirname(join(\"/root\", \"mylib\", \"index.ts\")),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should not resolve with the help of baseUrl when asked not to\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {},\n    addMatchAll: false,\n    existingFiles: [join(\"/root\", \"mylib\", \"index.ts\")],\n    requestedModule: \"mylib\",\n    expectedPath: undefined,\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should not locate path that does not match\",\n    absoluteBaseUrl: \"/root/\",\n    paths: { \"lib/*\": [\"location/*\"] },\n    existingFiles: [join(\"root\", \"location\", \"mylib\")],\n    requestedModule: \"mylib\",\n    expectedPath: undefined,\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should not resolve typings file (index.d.ts)\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {\n      \"lib/*\": [\"location/*\"],\n    },\n    existingFiles: [join(\"/root\", \"location\", \"mylib\", \"index.d.ts\")],\n    requestedModule: \"lib/mylib\",\n    expectedPath: undefined,\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n  {\n    name: \"should resolve main file with cjs file extension\",\n    absoluteBaseUrl: \"/root/\",\n    paths: {},\n    existingFiles: [join(\"/root\", \"mylib\", \"index.cjs\")],\n    packageJson: {\n      main: \"./index.cjs\",\n    },\n    requestedModule: \"mylib\",\n    expectedPath: join(\"/root\", \"mylib\", \"index.cjs\"),\n    extensions: defaultExtensionsWhenRunningInTsNode,\n  },\n];\n"
        }
    ]
}