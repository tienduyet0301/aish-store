{
    "sourceFile": "node_modules/tsconfig-paths/src/__tests__/config-loader.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893065753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {\n  configLoader,\n  loadConfig,\n  ConfigLoaderFailResult,\n  ConfigLoaderSuccessResult,\n} from \"../config-loader\";\nimport { join } from \"path\";\n\ndescribe(\"config-loader\", (): void => {\n  it(\"should use explicitParams when set\", () => {\n    const result = configLoader({\n      explicitParams: {\n        baseUrl: \"/foo/bar\",\n        paths: {\n          asd: [\"asd\"],\n        },\n      },\n      cwd: \"/baz\",\n    });\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, \"/foo/bar\");\n    // assert.equal(successResult.paths[\"asd\"][0], \"asd\");\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(\"/foo/bar\");\n    expect(successResult.paths[\"asd\"][0]).toBe(\"asd\");\n  });\n\n  it(\"should use explicitParams when set and add cwd when path is relative\", () => {\n    const result = configLoader({\n      explicitParams: {\n        baseUrl: \"bar/\",\n        paths: {\n          asd: [\"asd\"],\n        },\n      },\n      cwd: \"/baz\",\n    });\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"bar/\"));\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(join(\"/baz\", \"bar/\"));\n  });\n\n  it(\"should fallback to tsConfigLoader when explicitParams is not set\", () => {\n    const result = configLoader({\n      explicitParams: undefined,\n      cwd: \"/baz\",\n      // tslint:disable-next-line:no-any\n      tsConfigLoader: (_: any) => ({\n        tsConfigPath: \"/baz/tsconfig.json\",\n        baseUrl: \"./src\",\n        paths: {},\n      }),\n    });\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"src\"));\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.absoluteBaseUrl).toBe(join(\"/baz\", \"src\"));\n  });\n\n  it(\"should show an error message when baseUrl is missing\", () => {\n    const result = configLoader({\n      explicitParams: undefined,\n      cwd: \"/baz\",\n      // tslint:disable-next-line:no-any\n      tsConfigLoader: (_: any) => ({\n        tsConfigPath: \"/baz/tsconfig.json\",\n        baseUrl: undefined,\n        paths: {},\n      }),\n    });\n\n    const failResult = result as ConfigLoaderFailResult;\n    // assert.equal(failResult.resultType, \"failed\");\n    // assert.isTrue(failResult.message.indexOf(\"baseUrl\") > -1);\n    expect(failResult.resultType).toBe(\"failed\");\n    expect(failResult.message.indexOf(\"baseUrl\") > -1).toBeTruthy();\n  });\n\n  it(\"should presume cwd to be a tsconfig file when loadConfig is called with absolute path to tsconfig.json\", () => {\n    // using tsconfig-named.json to ensure that future changes to fix\n    // https://github.com/dividab/tsconfig-paths/issues/31\n    // do not pass this test case just because of a directory walk looking\n    // for tsconfig.json\n    const configFile = join(__dirname, \"tsconfig-named.json\");\n    const result = loadConfig(configFile);\n\n    const successResult = result as ConfigLoaderSuccessResult;\n    // assert.equal(successResult.resultType, \"success\");\n    // assert.equal(successResult.configFileAbsolutePath, configFile);\n    expect(successResult.resultType).toBe(\"success\");\n    expect(successResult.configFileAbsolutePath).toBe(configFile);\n  });\n});\n"
        }
    ]
}