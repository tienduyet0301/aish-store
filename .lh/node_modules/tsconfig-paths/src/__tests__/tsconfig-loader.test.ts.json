{
    "sourceFile": "node_modules/tsconfig-paths/src/__tests__/tsconfig-loader.test.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893066317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {\n  loadTsconfig,\n  tsConfigLoader,\n  walkForTsConfig,\n} from \"../tsconfig-loader\";\nimport { join } from \"path\";\n\ndescribe(\"tsconfig-loader\", () => {\n  it(\"should find tsconfig in cwd\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (_: string) => undefined,\n      loadSync: (cwd: string) => {\n        return {\n          tsConfigPath: `${cwd}/tsconfig.json`,\n          baseUrl: \"./\",\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.tsConfigPath, \"/foo/bar/tsconfig.json\");\n    expect(result.tsConfigPath).toBe(\"/foo/bar/tsconfig.json\");\n  });\n\n  it(\"should return loaderResult.tsConfigPath as undefined when not found\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (_: string) => undefined,\n      loadSync: (_: string) => {\n        return {\n          tsConfigPath: undefined,\n          baseUrl: \"./\",\n          paths: {},\n        };\n      },\n    });\n\n    // assert.isUndefined(result.tsConfigPath);\n    expect(result.tsConfigPath).toBeUndefined();\n  });\n\n  it(\"should use TS_NODE_PROJECT env if exists\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (key: string) =>\n        key === \"TS_NODE_PROJECT\" ? \"/foo/baz\" : undefined,\n      loadSync: (cwd: string, fileName: string) => {\n        if (cwd === \"/foo/bar\" && fileName === \"/foo/baz\") {\n          return {\n            tsConfigPath: \"/foo/baz/tsconfig.json\",\n            baseUrl: \"./\",\n            paths: {},\n          };\n        }\n\n        return {\n          tsConfigPath: undefined,\n          baseUrl: \"./\",\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.tsConfigPath, \"/foo/baz/tsconfig.json\");\n    expect(result.tsConfigPath).toBe(\"/foo/baz/tsconfig.json\");\n  });\n\n  it(\"should use TS_NODE_BASEURL env if exists\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (key: string) =>\n        key === \"TS_NODE_BASEURL\" ? \"SOME_BASEURL\" : undefined,\n      loadSync: (_0: string, _1: string, baseUrl: string) => {\n        return {\n          tsConfigPath: undefined,\n          baseUrl,\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.baseUrl, \"SOME_BASEURL\");\n    expect(result.baseUrl).toBe(\"SOME_BASEURL\");\n  });\n\n  it(\"should not use TS_NODE_BASEURL env if it does not exist\", () => {\n    const result = tsConfigLoader({\n      cwd: \"/foo/bar\",\n      getEnv: (_: string) => {\n        return undefined;\n      },\n      loadSync: (_0: string, _1: string, baseUrl: string) => {\n        return {\n          tsConfigPath: undefined,\n          baseUrl,\n          paths: {},\n        };\n      },\n    });\n\n    // assert.equal(result.baseUrl, undefined);\n    expect(result.baseUrl).toBeUndefined();\n  });\n});\n\ndescribe(\"walkForTsConfig\", () => {\n  it(\"should find tsconfig in starting directory\", () => {\n    const pathToTsconfig = join(\"/root\", \"dir1\", \"tsconfig.json\");\n    const res = walkForTsConfig(\n      join(\"/root\", \"dir1\"),\n      (path) => path === pathToTsconfig\n    );\n    // assert.equal(res, pathToTsconfig);\n    expect(res).toBe(pathToTsconfig);\n  });\n\n  it(\"should find tsconfig in parent directory\", () => {\n    const pathToTsconfig = join(\"/root\", \"tsconfig.json\");\n    const res = walkForTsConfig(\n      join(\"/root\", \"dir1\"),\n      (path) => path === pathToTsconfig\n    );\n    // assert.equal(res, pathToTsconfig);\n    expect(res).toBe(pathToTsconfig);\n  });\n\n  it(\"should return undefined when reaching the top\", () => {\n    const res = walkForTsConfig(join(\"/root\", \"dir1\", \"kalle\"), () => false);\n    // assert.equal(res, undefined);\n    expect(res).toBeUndefined();\n  });\n});\n\ndescribe(\"loadConfig\", () => {\n  it(\"should load a config\", () => {\n    const config = { compilerOptions: { baseUrl: \"hej\" } };\n    const res = loadTsconfig(\n      \"/root/dir1/tsconfig.json\",\n      (path) => path === \"/root/dir1/tsconfig.json\",\n      (_) => JSON.stringify(config)\n    );\n    // assert.deepEqual(res, config);\n    expect(res).toStrictEqual(config);\n  });\n\n  it(\"should load a config with comments\", () => {\n    const config = { compilerOptions: { baseUrl: \"hej\" } };\n    const res = loadTsconfig(\n      \"/root/dir1/tsconfig.json\",\n      (path) => path === \"/root/dir1/tsconfig.json\",\n      (_) => `{\n          // my comment\n          \"compilerOptions\": { \n            \"baseUrl\": \"hej\"\n          }\n        }`\n    );\n    // assert.deepEqual(res, config);\n    expect(res).toStrictEqual(config);\n  });\n\n  it(\"should load a config with trailing commas\", () => {\n    const config = { compilerOptions: { baseUrl: \"hej\" } };\n    const res = loadTsconfig(\n      \"/root/dir1/tsconfig.json\",\n      (path) => path === \"/root/dir1/tsconfig.json\",\n      (_) => `{\n          \"compilerOptions\": { \n            \"baseUrl\": \"hej\",\n          },\n        }`\n    );\n    // assert.deepEqual(res, config);\n    expect(res).toStrictEqual(config);\n  });\n\n  it(\"should throw an error including the file path when encountering invalid JSON5\", () => {\n    expect(() =>\n      loadTsconfig(\n        \"/root/dir1/tsconfig.json\",\n        (path) => path === \"/root/dir1/tsconfig.json\",\n        (_) => `{\n            \"compilerOptions\": {\n          }`\n      )\n    ).toThrowError(\n      \"/root/dir1/tsconfig.json is malformed JSON5: invalid end of input at 3:12\"\n    );\n  });\n\n  it(\"should load a config with string extends and overwrite all options\", () => {\n    const firstConfig = {\n      extends: \"../base-config.json\",\n      compilerOptions: { baseUrl: \"kalle\", paths: { foo: [\"bar2\"] } },\n    };\n    const firstConfigPath = join(\"/root\", \"dir1\", \"tsconfig.json\");\n    const baseConfig = {\n      compilerOptions: {\n        baseUrl: \"olle\",\n        paths: { foo: [\"bar1\"] },\n        strict: true,\n      },\n    };\n    const baseConfigPath = join(\"/root\", \"base-config.json\");\n    const res = loadTsconfig(\n      join(\"/root\", \"dir1\", \"tsconfig.json\"),\n      (path) => path === firstConfigPath || path === baseConfigPath,\n      (path) => {\n        if (path === firstConfigPath) {\n          return JSON.stringify(firstConfig);\n        }\n        if (path === baseConfigPath) {\n          return JSON.stringify(baseConfig);\n        }\n        return \"\";\n      }\n    );\n\n    // assert.deepEqual(res, {\n    //   extends: \"../base-config.json\",\n    //   compilerOptions: {\n    //     baseUrl: \"kalle\",\n    //     paths: { foo: [\"bar2\"] },\n    //     strict: true,\n    //   },\n    // });\n    expect(res).toEqual({\n      extends: \"../base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: { foo: [\"bar2\"] },\n        strict: true,\n      },\n    });\n  });\n\n  it(\"should load a config with string extends from node_modules and overwrite all options\", () => {\n    const firstConfig = {\n      extends: \"my-package/base-config.json\",\n      compilerOptions: { baseUrl: \"kalle\", paths: { foo: [\"bar2\"] } },\n    };\n    const firstConfigPath = join(\"/root\", \"dir1\", \"tsconfig.json\");\n    const baseConfig = {\n      compilerOptions: {\n        baseUrl: \"olle\",\n        paths: { foo: [\"bar1\"] },\n        strict: true,\n      },\n    };\n    const baseConfigPath = join(\n      \"/root\",\n      \"dir1\",\n      \"node_modules\",\n      \"my-package\",\n      \"base-config.json\"\n    );\n    const res = loadTsconfig(\n      join(\"/root\", \"dir1\", \"tsconfig.json\"),\n      (path) => path === firstConfigPath || path === baseConfigPath,\n      (path) => {\n        if (path === firstConfigPath) {\n          return JSON.stringify(firstConfig);\n        }\n        if (path === baseConfigPath) {\n          return JSON.stringify(baseConfig);\n        }\n        return \"\";\n      }\n    );\n\n    // assert.deepEqual(res, {\n    //   extends: \"my-package/base-config.json\",\n    //   compilerOptions: {\n    //     baseUrl: \"kalle\",\n    //     paths: { foo: [\"bar2\"] },\n    //     strict: true,\n    //   },\n    // });\n    expect(res).toEqual({\n      extends: \"my-package/base-config.json\",\n      compilerOptions: {\n        baseUrl: \"kalle\",\n        paths: { foo: [\"bar2\"] },\n        strict: true,\n      },\n    });\n  });\n\n  it(\"should use baseUrl relative to location of extended tsconfig\", () => {\n    const firstConfig = { compilerOptions: { baseUrl: \".\" } };\n    const firstConfigPath = join(\"/root\", \"first-config.json\");\n    const secondConfig = { extends: \"../first-config.json\" };\n    const secondConfigPath = join(\"/root\", \"dir1\", \"second-config.json\");\n    const thirdConfig = { extends: \"../second-config.json\" };\n    const thirdConfigPath = join(\"/root\", \"dir1\", \"dir2\", \"third-config.json\");\n    const res = loadTsconfig(\n      join(\"/root\", \"dir1\", \"dir2\", \"third-config.json\"),\n      (path) =>\n        path === firstConfigPath ||\n        path === secondConfigPath ||\n        path === thirdConfigPath,\n      (path) => {\n        if (path === firstConfigPath) {\n          return JSON.stringify(firstConfig);\n        }\n        if (path === secondConfigPath) {\n          return JSON.stringify(secondConfig);\n        }\n        if (path === thirdConfigPath) {\n          return JSON.stringify(thirdConfig);\n        }\n        return \"\";\n      }\n    );\n\n    // assert.deepEqual(res, {\n    //   extends: \"../second-config.json\",\n    //   compilerOptions: { baseUrl: join(\"..\", \"..\") },\n    // });\n    expect(res).toEqual({\n      extends: \"../second-config.json\",\n      compilerOptions: { baseUrl: join(\"..\", \"..\") },\n    });\n  });\n\n  it(\"should load a config with array extends and overwrite all options\", () => {\n    const baseConfig1 = {\n      compilerOptions: { baseUrl: \".\", paths: { foo: [\"bar\"] } },\n    };\n    const baseConfig1Path = join(\"/root\", \"base-config-1.json\");\n    const baseConfig2 = { compilerOptions: { baseUrl: \".\" } };\n    const baseConfig2Path = join(\"/root\", \"dir1\", \"base-config-2.json\");\n    const baseConfig3 = {\n      compilerOptions: { baseUrl: \".\", paths: { foo: [\"bar2\"] } },\n    };\n    const baseConfig3Path = join(\"/root\", \"dir1\", \"dir2\", \"base-config-3.json\");\n    const actualConfig = {\n      extends: [\n        \"./base-config-1.json\",\n        \"./dir1/base-config-2.json\",\n        \"./dir1/dir2/base-config-3.json\",\n      ],\n    };\n    const actualConfigPath = join(\"/root\", \"tsconfig.json\");\n\n    const res = loadTsconfig(\n      join(\"/root\", \"tsconfig.json\"),\n      (path) =>\n        [\n          baseConfig1Path,\n          baseConfig2Path,\n          baseConfig3Path,\n          actualConfigPath,\n        ].indexOf(path) >= 0,\n      (path) => {\n        if (path === baseConfig1Path) {\n          return JSON.stringify(baseConfig1);\n        }\n        if (path === baseConfig2Path) {\n          return JSON.stringify(baseConfig2);\n        }\n        if (path === baseConfig3Path) {\n          return JSON.stringify(baseConfig3);\n        }\n        if (path === actualConfigPath) {\n          return JSON.stringify(actualConfig);\n        }\n        return \"\";\n      }\n    );\n\n    expect(res).toEqual({\n      extends: [\n        \"./base-config-1.json\",\n        \"./dir1/base-config-2.json\",\n        \"./dir1/dir2/base-config-3.json\",\n      ],\n      compilerOptions: {\n        baseUrl: join(\"dir1\", \"dir2\"),\n        paths: { foo: [\"bar2\"] },\n      },\n    });\n  });\n\n  it(\"should load a config with array extends without .json extension\", () => {\n    const baseConfig = {\n      compilerOptions: { baseUrl: \".\", paths: { foo: [\"bar\"] } },\n    };\n    const baseConfigPath = join(\"/root\", \"base-config-1.json\");\n    const actualConfig = { extends: [\"./base-config-1\"] };\n    const actualConfigPath = join(\"/root\", \"tsconfig.json\");\n\n    const res = loadTsconfig(\n      join(\"/root\", \"tsconfig.json\"),\n      (path) => [baseConfigPath, actualConfigPath].indexOf(path) >= 0,\n      (path) => {\n        if (path === baseConfigPath) {\n          return JSON.stringify(baseConfig);\n        }\n        if (path === actualConfigPath) {\n          return JSON.stringify(actualConfig);\n        }\n        return \"\";\n      }\n    );\n\n    expect(res).toEqual({\n      extends: [\"./base-config-1\"],\n      compilerOptions: {\n        baseUrl: \".\",\n        paths: { foo: [\"bar\"] },\n      },\n    });\n  });\n});\n"
        }
    ]
}