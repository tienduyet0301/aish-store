{
    "sourceFile": "node_modules/tsconfig-paths/lib/try-path.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893061543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exhaustiveTypeException = exports.getStrippedPath = exports.getPathsToTry = void 0;\nvar path = require(\"path\");\nvar path_1 = require(\"path\");\nvar filesystem_1 = require(\"./filesystem\");\n/**\n * Builds a list of all physical paths to try by:\n * 1. Check for file named exactly as request.\n * 2. Check for files named as request ending in any of the extensions.\n * 3. Check for file specified in package.json's main property.\n * 4. Check for files named as request ending in \"index\" with any of the extensions.\n */\nfunction getPathsToTry(extensions, absolutePathMappings, requestedModule) {\n    if (!absolutePathMappings || !requestedModule || requestedModule[0] === \".\") {\n        return undefined;\n    }\n    var pathsToTry = [];\n    for (var _i = 0, absolutePathMappings_1 = absolutePathMappings; _i < absolutePathMappings_1.length; _i++) {\n        var entry = absolutePathMappings_1[_i];\n        var starMatch = entry.pattern === requestedModule\n            ? \"\"\n            : matchStar(entry.pattern, requestedModule);\n        if (starMatch !== undefined) {\n            var _loop_1 = function (physicalPathPattern) {\n                var physicalPath = physicalPathPattern.replace(\"*\", starMatch);\n                pathsToTry.push({ type: \"file\", path: physicalPath });\n                pathsToTry.push.apply(pathsToTry, extensions.map(function (e) { return ({ type: \"extension\", path: physicalPath + e }); }));\n                pathsToTry.push({\n                    type: \"package\",\n                    path: path.join(physicalPath, \"/package.json\"),\n                });\n                var indexPath = path.join(physicalPath, \"/index\");\n                pathsToTry.push.apply(pathsToTry, extensions.map(function (e) { return ({ type: \"index\", path: indexPath + e }); }));\n            };\n            for (var _a = 0, _b = entry.paths; _a < _b.length; _a++) {\n                var physicalPathPattern = _b[_a];\n                _loop_1(physicalPathPattern);\n            }\n        }\n    }\n    return pathsToTry.length === 0 ? undefined : pathsToTry;\n}\nexports.getPathsToTry = getPathsToTry;\n// Not sure why we don't just return the full found path?\nfunction getStrippedPath(tryPath) {\n    return tryPath.type === \"index\"\n        ? (0, path_1.dirname)(tryPath.path)\n        : tryPath.type === \"file\"\n            ? tryPath.path\n            : tryPath.type === \"extension\"\n                ? (0, filesystem_1.removeExtension)(tryPath.path)\n                : tryPath.type === \"package\"\n                    ? tryPath.path\n                    : exhaustiveTypeException(tryPath.type);\n}\nexports.getStrippedPath = getStrippedPath;\nfunction exhaustiveTypeException(check) {\n    throw new Error(\"Unknown type \".concat(check));\n}\nexports.exhaustiveTypeException = exhaustiveTypeException;\n/**\n * Matches pattern with a single star against search.\n * Star must match at least one character to be considered a match.\n * @param patttern for example \"foo*\"\n * @param search for example \"fooawesomebar\"\n * @returns the part of search that * matches, or undefined if no match.\n */\nfunction matchStar(pattern, search) {\n    if (search.length < pattern.length) {\n        return undefined;\n    }\n    if (pattern === \"*\") {\n        return search;\n    }\n    var star = pattern.indexOf(\"*\");\n    if (star === -1) {\n        return undefined;\n    }\n    var part1 = pattern.substring(0, star);\n    var part2 = pattern.substring(star + 1);\n    if (search.substr(0, star) !== part1) {\n        return undefined;\n    }\n    if (search.substr(search.length - part2.length) !== part2) {\n        return undefined;\n    }\n    return search.substr(star, search.length - part2.length);\n}\n//# sourceMappingURL=try-path.js.map"
        }
    ]
}