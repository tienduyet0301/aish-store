{
    "sourceFile": "node_modules/tsconfig-paths/lib/tsconfig-loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893061672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadTsconfig = exports.walkForTsConfig = exports.tsConfigLoader = void 0;\nvar path = require(\"path\");\nvar fs = require(\"fs\");\n// tslint:disable:no-require-imports\nvar JSON5 = require(\"json5\");\nvar StripBom = require(\"strip-bom\");\nfunction tsConfigLoader(_a) {\n    var getEnv = _a.getEnv, cwd = _a.cwd, _b = _a.loadSync, loadSync = _b === void 0 ? loadSyncDefault : _b;\n    var TS_NODE_PROJECT = getEnv(\"TS_NODE_PROJECT\");\n    var TS_NODE_BASEURL = getEnv(\"TS_NODE_BASEURL\");\n    // tsconfig.loadSync handles if TS_NODE_PROJECT is a file or directory\n    // and also overrides baseURL if TS_NODE_BASEURL is available.\n    var loadResult = loadSync(cwd, TS_NODE_PROJECT, TS_NODE_BASEURL);\n    return loadResult;\n}\nexports.tsConfigLoader = tsConfigLoader;\nfunction loadSyncDefault(cwd, filename, baseUrl) {\n    // Tsconfig.loadSync uses path.resolve. This is why we can use an absolute path as filename\n    var configPath = resolveConfigPath(cwd, filename);\n    if (!configPath) {\n        return {\n            tsConfigPath: undefined,\n            baseUrl: undefined,\n            paths: undefined,\n        };\n    }\n    var config = loadTsconfig(configPath);\n    return {\n        tsConfigPath: configPath,\n        baseUrl: baseUrl ||\n            (config && config.compilerOptions && config.compilerOptions.baseUrl),\n        paths: config && config.compilerOptions && config.compilerOptions.paths,\n    };\n}\nfunction resolveConfigPath(cwd, filename) {\n    if (filename) {\n        var absolutePath = fs.lstatSync(filename).isDirectory()\n            ? path.resolve(filename, \"./tsconfig.json\")\n            : path.resolve(cwd, filename);\n        return absolutePath;\n    }\n    if (fs.statSync(cwd).isFile()) {\n        return path.resolve(cwd);\n    }\n    var configAbsolutePath = walkForTsConfig(cwd);\n    return configAbsolutePath ? path.resolve(configAbsolutePath) : undefined;\n}\nfunction walkForTsConfig(directory, existsSync) {\n    if (existsSync === void 0) { existsSync = fs.existsSync; }\n    var configPath = path.join(directory, \"./tsconfig.json\");\n    if (existsSync(configPath)) {\n        return configPath;\n    }\n    var parentDirectory = path.join(directory, \"../\");\n    // If we reached the top\n    if (directory === parentDirectory) {\n        return undefined;\n    }\n    return walkForTsConfig(parentDirectory, existsSync);\n}\nexports.walkForTsConfig = walkForTsConfig;\nfunction loadTsconfig(configFilePath, existsSync, readFileSync) {\n    if (existsSync === void 0) { existsSync = fs.existsSync; }\n    if (readFileSync === void 0) { readFileSync = function (filename) {\n        return fs.readFileSync(filename, \"utf8\");\n    }; }\n    if (!existsSync(configFilePath)) {\n        return undefined;\n    }\n    var configString = readFileSync(configFilePath);\n    var cleanedJson = StripBom(configString);\n    var config;\n    try {\n        config = JSON5.parse(cleanedJson);\n    }\n    catch (e) {\n        throw new Error(\"\".concat(configFilePath, \" is malformed \").concat(e.message));\n    }\n    var extendedConfig = config.extends;\n    if (extendedConfig) {\n        var base = void 0;\n        if (Array.isArray(extendedConfig)) {\n            base = extendedConfig.reduce(function (currBase, extendedConfigElement) {\n                return mergeTsconfigs(currBase, loadTsconfigFromExtends(configFilePath, extendedConfigElement, existsSync, readFileSync));\n            }, {});\n        }\n        else {\n            base = loadTsconfigFromExtends(configFilePath, extendedConfig, existsSync, readFileSync);\n        }\n        return mergeTsconfigs(base, config);\n    }\n    return config;\n}\nexports.loadTsconfig = loadTsconfig;\n/**\n * Intended to be called only from loadTsconfig.\n * Parameters don't have defaults because they should use the same as loadTsconfig.\n */\nfunction loadTsconfigFromExtends(configFilePath, extendedConfigValue, \n// eslint-disable-next-line no-shadow\nexistsSync, readFileSync) {\n    var _a;\n    if (typeof extendedConfigValue === \"string\" &&\n        extendedConfigValue.indexOf(\".json\") === -1) {\n        extendedConfigValue += \".json\";\n    }\n    var currentDir = path.dirname(configFilePath);\n    var extendedConfigPath = path.join(currentDir, extendedConfigValue);\n    if (extendedConfigValue.indexOf(\"/\") !== -1 &&\n        extendedConfigValue.indexOf(\".\") !== -1 &&\n        !existsSync(extendedConfigPath)) {\n        extendedConfigPath = path.join(currentDir, \"node_modules\", extendedConfigValue);\n    }\n    var config = loadTsconfig(extendedConfigPath, existsSync, readFileSync) || {};\n    // baseUrl should be interpreted as relative to extendedConfigPath,\n    // but we need to update it so it is relative to the original tsconfig being loaded\n    if ((_a = config.compilerOptions) === null || _a === void 0 ? void 0 : _a.baseUrl) {\n        var extendsDir = path.dirname(extendedConfigValue);\n        config.compilerOptions.baseUrl = path.join(extendsDir, config.compilerOptions.baseUrl);\n    }\n    return config;\n}\nfunction mergeTsconfigs(base, config) {\n    base = base || {};\n    config = config || {};\n    return __assign(__assign(__assign({}, base), config), { compilerOptions: __assign(__assign({}, base.compilerOptions), config.compilerOptions) });\n}\n//# sourceMappingURL=tsconfig-loader.js.map"
        }
    ]
}