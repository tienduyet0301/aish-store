{
    "sourceFile": "node_modules/tsconfig-paths/lib/config-loader.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893060241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configLoader = exports.loadConfig = void 0;\nvar TsConfigLoader2 = require(\"./tsconfig-loader\");\nvar path = require(\"path\");\nvar options_1 = require(\"./options\");\nfunction loadConfig(cwd) {\n    if (cwd === void 0) { cwd = options_1.options.cwd; }\n    return configLoader({ cwd: cwd });\n}\nexports.loadConfig = loadConfig;\nfunction configLoader(_a) {\n    var cwd = _a.cwd, explicitParams = _a.explicitParams, _b = _a.tsConfigLoader, tsConfigLoader = _b === void 0 ? TsConfigLoader2.tsConfigLoader : _b;\n    if (explicitParams) {\n        // tslint:disable-next-line:no-shadowed-variable\n        var absoluteBaseUrl_1 = path.isAbsolute(explicitParams.baseUrl)\n            ? explicitParams.baseUrl\n            : path.join(cwd, explicitParams.baseUrl);\n        return {\n            resultType: \"success\",\n            configFileAbsolutePath: \"\",\n            baseUrl: explicitParams.baseUrl,\n            absoluteBaseUrl: absoluteBaseUrl_1,\n            paths: explicitParams.paths,\n            mainFields: explicitParams.mainFields,\n            addMatchAll: explicitParams.addMatchAll,\n        };\n    }\n    // Load tsconfig and create path matching function\n    var loadResult = tsConfigLoader({\n        cwd: cwd,\n        getEnv: function (key) { return process.env[key]; },\n    });\n    if (!loadResult.tsConfigPath) {\n        return {\n            resultType: \"failed\",\n            message: \"Couldn't find tsconfig.json\",\n        };\n    }\n    if (!loadResult.baseUrl) {\n        return {\n            resultType: \"failed\",\n            message: \"Missing baseUrl in compilerOptions\",\n        };\n    }\n    var tsConfigDir = path.dirname(loadResult.tsConfigPath);\n    var absoluteBaseUrl = path.join(tsConfigDir, loadResult.baseUrl);\n    return {\n        resultType: \"success\",\n        configFileAbsolutePath: loadResult.tsConfigPath,\n        baseUrl: loadResult.baseUrl,\n        absoluteBaseUrl: absoluteBaseUrl,\n        paths: loadResult.paths || {},\n    };\n}\nexports.configLoader = configLoader;\n//# sourceMappingURL=config-loader.js.map"
        }
    ]
}