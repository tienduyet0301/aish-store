{
    "sourceFile": "node_modules/tsconfig-paths/lib/filesystem.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893060393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeExtension = exports.fileExistsAsync = exports.readJsonFromDiskAsync = exports.readJsonFromDiskSync = exports.fileExistsSync = void 0;\nvar fs = require(\"fs\");\nfunction fileExistsSync(path) {\n    try {\n        var stats = fs.statSync(path);\n        return stats.isFile();\n    }\n    catch (err) {\n        // If error, assume file did not exist\n        return false;\n    }\n}\nexports.fileExistsSync = fileExistsSync;\n/**\n * Reads package.json from disk\n * @param file Path to package.json\n */\n// tslint:disable-next-line:no-any\nfunction readJsonFromDiskSync(packageJsonPath) {\n    if (!fs.existsSync(packageJsonPath)) {\n        return undefined;\n    }\n    return require(packageJsonPath);\n}\nexports.readJsonFromDiskSync = readJsonFromDiskSync;\nfunction readJsonFromDiskAsync(path, \n// tslint:disable-next-line:no-any\ncallback) {\n    fs.readFile(path, \"utf8\", function (err, result) {\n        // If error, assume file did not exist\n        if (err || !result) {\n            return callback();\n        }\n        var json = JSON.parse(result);\n        return callback(undefined, json);\n    });\n}\nexports.readJsonFromDiskAsync = readJsonFromDiskAsync;\nfunction fileExistsAsync(path2, callback2) {\n    fs.stat(path2, function (err, stats) {\n        if (err) {\n            // If error assume file does not exist\n            return callback2(undefined, false);\n        }\n        callback2(undefined, stats ? stats.isFile() : false);\n    });\n}\nexports.fileExistsAsync = fileExistsAsync;\nfunction removeExtension(path) {\n    return path.substring(0, path.lastIndexOf(\".\")) || path;\n}\nexports.removeExtension = removeExtension;\n//# sourceMappingURL=filesystem.js.map"
        }
    ]
}