{
    "sourceFile": "node_modules/tsconfig-paths/lib/register.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893061452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.register = void 0;\nvar match_path_sync_1 = require(\"./match-path-sync\");\nvar config_loader_1 = require(\"./config-loader\");\nvar options_1 = require(\"./options\");\nvar noOp = function () { return void 0; };\nfunction getCoreModules(builtinModules) {\n    builtinModules = builtinModules || [\n        \"assert\",\n        \"buffer\",\n        \"child_process\",\n        \"cluster\",\n        \"crypto\",\n        \"dgram\",\n        \"dns\",\n        \"domain\",\n        \"events\",\n        \"fs\",\n        \"http\",\n        \"https\",\n        \"net\",\n        \"os\",\n        \"path\",\n        \"punycode\",\n        \"querystring\",\n        \"readline\",\n        \"stream\",\n        \"string_decoder\",\n        \"tls\",\n        \"tty\",\n        \"url\",\n        \"util\",\n        \"v8\",\n        \"vm\",\n        \"zlib\",\n    ];\n    var coreModules = {};\n    for (var _i = 0, builtinModules_1 = builtinModules; _i < builtinModules_1.length; _i++) {\n        var module_1 = builtinModules_1[_i];\n        coreModules[module_1] = true;\n    }\n    return coreModules;\n}\n/**\n * Installs a custom module load function that can adhere to paths in tsconfig.\n * Returns a function to undo paths registration.\n */\nfunction register(explicitParams) {\n    var configLoaderResult = (0, config_loader_1.configLoader)({\n        cwd: options_1.options.cwd,\n        explicitParams: explicitParams,\n    });\n    if (configLoaderResult.resultType === \"failed\") {\n        console.warn(\"\".concat(configLoaderResult.message, \". tsconfig-paths will be skipped\"));\n        return noOp;\n    }\n    var matchPath = (0, match_path_sync_1.createMatchPath)(configLoaderResult.absoluteBaseUrl, configLoaderResult.paths, configLoaderResult.mainFields, configLoaderResult.addMatchAll);\n    // Patch node's module loading\n    // tslint:disable-next-line:no-require-imports variable-name\n    var Module = require(\"module\");\n    var originalResolveFilename = Module._resolveFilename;\n    var coreModules = getCoreModules(Module.builtinModules);\n    // tslint:disable-next-line:no-any\n    Module._resolveFilename = function (request, _parent) {\n        var isCoreModule = coreModules.hasOwnProperty(request);\n        if (!isCoreModule) {\n            var found = matchPath(request);\n            if (found) {\n                var modifiedArguments = __spreadArray([found], [].slice.call(arguments, 1), true); // Passes all arguments. Even those that is not specified above.\n                // tslint:disable-next-line:no-invalid-this\n                return originalResolveFilename.apply(this, modifiedArguments);\n            }\n        }\n        // tslint:disable-next-line:no-invalid-this\n        return originalResolveFilename.apply(this, arguments);\n    };\n    return function () {\n        // Return node's module loading to original state.\n        Module._resolveFilename = originalResolveFilename;\n    };\n}\nexports.register = register;\n//# sourceMappingURL=register.js.map"
        }
    ]
}