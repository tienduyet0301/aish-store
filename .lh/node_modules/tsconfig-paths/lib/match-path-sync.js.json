{
    "sourceFile": "node_modules/tsconfig-paths/lib/match-path-sync.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893061200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchFromAbsolutePaths = exports.createMatchPath = void 0;\nvar path = require(\"path\");\nvar Filesystem = require(\"./filesystem\");\nvar MappingEntry = require(\"./mapping-entry\");\nvar TryPath = require(\"./try-path\");\n/**\n * Creates a function that can resolve paths according to tsconfig paths property.\n * @param absoluteBaseUrl Absolute version of baseUrl as specified in tsconfig.\n * @param paths The paths as specified in tsconfig.\n * @param mainFields A list of package.json field names to try when resolving module files.\n * @param addMatchAll Add a match-all \"*\" rule if none is present\n * @returns a function that can resolve paths.\n */\nfunction createMatchPath(absoluteBaseUrl, paths, mainFields, addMatchAll) {\n    if (mainFields === void 0) { mainFields = [\"main\"]; }\n    if (addMatchAll === void 0) { addMatchAll = true; }\n    var absolutePaths = MappingEntry.getAbsoluteMappingEntries(absoluteBaseUrl, paths, addMatchAll);\n    return function (requestedModule, readJson, fileExists, extensions) {\n        return matchFromAbsolutePaths(absolutePaths, requestedModule, readJson, fileExists, extensions, mainFields);\n    };\n}\nexports.createMatchPath = createMatchPath;\n/**\n * Finds a path from tsconfig that matches a module load request.\n * @param absolutePathMappings The paths to try as specified in tsconfig but resolved to absolute form.\n * @param requestedModule The required module name.\n * @param readJson Function that can read json from a path (useful for testing).\n * @param fileExists Function that checks for existence of a file at a path (useful for testing).\n * @param extensions File extensions to probe for (useful for testing).\n * @param mainFields A list of package.json field names to try when resolving module files.\n * @returns the found path, or undefined if no path was found.\n */\nfunction matchFromAbsolutePaths(absolutePathMappings, requestedModule, readJson, fileExists, extensions, mainFields) {\n    if (readJson === void 0) { readJson = Filesystem.readJsonFromDiskSync; }\n    if (fileExists === void 0) { fileExists = Filesystem.fileExistsSync; }\n    if (extensions === void 0) { extensions = Object.keys(require.extensions); }\n    if (mainFields === void 0) { mainFields = [\"main\"]; }\n    var tryPaths = TryPath.getPathsToTry(extensions, absolutePathMappings, requestedModule);\n    if (!tryPaths) {\n        return undefined;\n    }\n    return findFirstExistingPath(tryPaths, readJson, fileExists, mainFields);\n}\nexports.matchFromAbsolutePaths = matchFromAbsolutePaths;\nfunction findFirstExistingMainFieldMappedFile(packageJson, mainFields, packageJsonPath, fileExists) {\n    for (var index = 0; index < mainFields.length; index++) {\n        var mainFieldName = mainFields[index];\n        var candidateMapping = packageJson[mainFieldName];\n        if (candidateMapping && typeof candidateMapping === \"string\") {\n            var candidateFilePath = path.join(path.dirname(packageJsonPath), candidateMapping);\n            if (fileExists(candidateFilePath)) {\n                return candidateFilePath;\n            }\n        }\n    }\n    return undefined;\n}\nfunction findFirstExistingPath(tryPaths, readJson, fileExists, mainFields) {\n    if (readJson === void 0) { readJson = Filesystem.readJsonFromDiskSync; }\n    if (mainFields === void 0) { mainFields = [\"main\"]; }\n    for (var _i = 0, tryPaths_1 = tryPaths; _i < tryPaths_1.length; _i++) {\n        var tryPath = tryPaths_1[_i];\n        if (tryPath.type === \"file\" ||\n            tryPath.type === \"extension\" ||\n            tryPath.type === \"index\") {\n            if (fileExists(tryPath.path)) {\n                return TryPath.getStrippedPath(tryPath);\n            }\n        }\n        else if (tryPath.type === \"package\") {\n            var packageJson = readJson(tryPath.path);\n            if (packageJson) {\n                var mainFieldMappedFile = findFirstExistingMainFieldMappedFile(packageJson, mainFields, tryPath.path, fileExists);\n                if (mainFieldMappedFile) {\n                    return mainFieldMappedFile;\n                }\n            }\n        }\n        else {\n            TryPath.exhaustiveTypeException(tryPath.type);\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=match-path-sync.js.map"
        }
    ]
}