{
    "sourceFile": "node_modules/tsconfig-paths/lib/__tests__/tsconfig-loader.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893064103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsconfig_loader_1 = require(\"../tsconfig-loader\");\nvar path_1 = require(\"path\");\ndescribe(\"tsconfig-loader\", function () {\n    it(\"should find tsconfig in cwd\", function () {\n        var result = (0, tsconfig_loader_1.tsConfigLoader)({\n            cwd: \"/foo/bar\",\n            getEnv: function (_) { return undefined; },\n            loadSync: function (cwd) {\n                return {\n                    tsConfigPath: \"\".concat(cwd, \"/tsconfig.json\"),\n                    baseUrl: \"./\",\n                    paths: {},\n                };\n            },\n        });\n        // assert.equal(result.tsConfigPath, \"/foo/bar/tsconfig.json\");\n        expect(result.tsConfigPath).toBe(\"/foo/bar/tsconfig.json\");\n    });\n    it(\"should return loaderResult.tsConfigPath as undefined when not found\", function () {\n        var result = (0, tsconfig_loader_1.tsConfigLoader)({\n            cwd: \"/foo/bar\",\n            getEnv: function (_) { return undefined; },\n            loadSync: function (_) {\n                return {\n                    tsConfigPath: undefined,\n                    baseUrl: \"./\",\n                    paths: {},\n                };\n            },\n        });\n        // assert.isUndefined(result.tsConfigPath);\n        expect(result.tsConfigPath).toBeUndefined();\n    });\n    it(\"should use TS_NODE_PROJECT env if exists\", function () {\n        var result = (0, tsconfig_loader_1.tsConfigLoader)({\n            cwd: \"/foo/bar\",\n            getEnv: function (key) {\n                return key === \"TS_NODE_PROJECT\" ? \"/foo/baz\" : undefined;\n            },\n            loadSync: function (cwd, fileName) {\n                if (cwd === \"/foo/bar\" && fileName === \"/foo/baz\") {\n                    return {\n                        tsConfigPath: \"/foo/baz/tsconfig.json\",\n                        baseUrl: \"./\",\n                        paths: {},\n                    };\n                }\n                return {\n                    tsConfigPath: undefined,\n                    baseUrl: \"./\",\n                    paths: {},\n                };\n            },\n        });\n        // assert.equal(result.tsConfigPath, \"/foo/baz/tsconfig.json\");\n        expect(result.tsConfigPath).toBe(\"/foo/baz/tsconfig.json\");\n    });\n    it(\"should use TS_NODE_BASEURL env if exists\", function () {\n        var result = (0, tsconfig_loader_1.tsConfigLoader)({\n            cwd: \"/foo/bar\",\n            getEnv: function (key) {\n                return key === \"TS_NODE_BASEURL\" ? \"SOME_BASEURL\" : undefined;\n            },\n            loadSync: function (_0, _1, baseUrl) {\n                return {\n                    tsConfigPath: undefined,\n                    baseUrl: baseUrl,\n                    paths: {},\n                };\n            },\n        });\n        // assert.equal(result.baseUrl, \"SOME_BASEURL\");\n        expect(result.baseUrl).toBe(\"SOME_BASEURL\");\n    });\n    it(\"should not use TS_NODE_BASEURL env if it does not exist\", function () {\n        var result = (0, tsconfig_loader_1.tsConfigLoader)({\n            cwd: \"/foo/bar\",\n            getEnv: function (_) {\n                return undefined;\n            },\n            loadSync: function (_0, _1, baseUrl) {\n                return {\n                    tsConfigPath: undefined,\n                    baseUrl: baseUrl,\n                    paths: {},\n                };\n            },\n        });\n        // assert.equal(result.baseUrl, undefined);\n        expect(result.baseUrl).toBeUndefined();\n    });\n});\ndescribe(\"walkForTsConfig\", function () {\n    it(\"should find tsconfig in starting directory\", function () {\n        var pathToTsconfig = (0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\");\n        var res = (0, tsconfig_loader_1.walkForTsConfig)((0, path_1.join)(\"/root\", \"dir1\"), function (path) { return path === pathToTsconfig; });\n        // assert.equal(res, pathToTsconfig);\n        expect(res).toBe(pathToTsconfig);\n    });\n    it(\"should find tsconfig in parent directory\", function () {\n        var pathToTsconfig = (0, path_1.join)(\"/root\", \"tsconfig.json\");\n        var res = (0, tsconfig_loader_1.walkForTsConfig)((0, path_1.join)(\"/root\", \"dir1\"), function (path) { return path === pathToTsconfig; });\n        // assert.equal(res, pathToTsconfig);\n        expect(res).toBe(pathToTsconfig);\n    });\n    it(\"should return undefined when reaching the top\", function () {\n        var res = (0, tsconfig_loader_1.walkForTsConfig)((0, path_1.join)(\"/root\", \"dir1\", \"kalle\"), function () { return false; });\n        // assert.equal(res, undefined);\n        expect(res).toBeUndefined();\n    });\n});\ndescribe(\"loadConfig\", function () {\n    it(\"should load a config\", function () {\n        var config = { compilerOptions: { baseUrl: \"hej\" } };\n        var res = (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) { return path === \"/root/dir1/tsconfig.json\"; }, function (_) { return JSON.stringify(config); });\n        // assert.deepEqual(res, config);\n        expect(res).toStrictEqual(config);\n    });\n    it(\"should load a config with comments\", function () {\n        var config = { compilerOptions: { baseUrl: \"hej\" } };\n        var res = (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) { return path === \"/root/dir1/tsconfig.json\"; }, function (_) { return \"{\\n          // my comment\\n          \\\"compilerOptions\\\": { \\n            \\\"baseUrl\\\": \\\"hej\\\"\\n          }\\n        }\"; });\n        // assert.deepEqual(res, config);\n        expect(res).toStrictEqual(config);\n    });\n    it(\"should load a config with trailing commas\", function () {\n        var config = { compilerOptions: { baseUrl: \"hej\" } };\n        var res = (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) { return path === \"/root/dir1/tsconfig.json\"; }, function (_) { return \"{\\n          \\\"compilerOptions\\\": { \\n            \\\"baseUrl\\\": \\\"hej\\\",\\n          },\\n        }\"; });\n        // assert.deepEqual(res, config);\n        expect(res).toStrictEqual(config);\n    });\n    it(\"should throw an error including the file path when encountering invalid JSON5\", function () {\n        expect(function () {\n            return (0, tsconfig_loader_1.loadTsconfig)(\"/root/dir1/tsconfig.json\", function (path) { return path === \"/root/dir1/tsconfig.json\"; }, function (_) { return \"{\\n            \\\"compilerOptions\\\": {\\n          }\"; });\n        }).toThrowError(\"/root/dir1/tsconfig.json is malformed JSON5: invalid end of input at 3:12\");\n    });\n    it(\"should load a config with string extends and overwrite all options\", function () {\n        var firstConfig = {\n            extends: \"../base-config.json\",\n            compilerOptions: { baseUrl: \"kalle\", paths: { foo: [\"bar2\"] } },\n        };\n        var firstConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\");\n        var baseConfig = {\n            compilerOptions: {\n                baseUrl: \"olle\",\n                paths: { foo: [\"bar1\"] },\n                strict: true,\n            },\n        };\n        var baseConfigPath = (0, path_1.join)(\"/root\", \"base-config.json\");\n        var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\"), function (path) { return path === firstConfigPath || path === baseConfigPath; }, function (path) {\n            if (path === firstConfigPath) {\n                return JSON.stringify(firstConfig);\n            }\n            if (path === baseConfigPath) {\n                return JSON.stringify(baseConfig);\n            }\n            return \"\";\n        });\n        // assert.deepEqual(res, {\n        //   extends: \"../base-config.json\",\n        //   compilerOptions: {\n        //     baseUrl: \"kalle\",\n        //     paths: { foo: [\"bar2\"] },\n        //     strict: true,\n        //   },\n        // });\n        expect(res).toEqual({\n            extends: \"../base-config.json\",\n            compilerOptions: {\n                baseUrl: \"kalle\",\n                paths: { foo: [\"bar2\"] },\n                strict: true,\n            },\n        });\n    });\n    it(\"should load a config with string extends from node_modules and overwrite all options\", function () {\n        var firstConfig = {\n            extends: \"my-package/base-config.json\",\n            compilerOptions: { baseUrl: \"kalle\", paths: { foo: [\"bar2\"] } },\n        };\n        var firstConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\");\n        var baseConfig = {\n            compilerOptions: {\n                baseUrl: \"olle\",\n                paths: { foo: [\"bar1\"] },\n                strict: true,\n            },\n        };\n        var baseConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"node_modules\", \"my-package\", \"base-config.json\");\n        var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"dir1\", \"tsconfig.json\"), function (path) { return path === firstConfigPath || path === baseConfigPath; }, function (path) {\n            if (path === firstConfigPath) {\n                return JSON.stringify(firstConfig);\n            }\n            if (path === baseConfigPath) {\n                return JSON.stringify(baseConfig);\n            }\n            return \"\";\n        });\n        // assert.deepEqual(res, {\n        //   extends: \"my-package/base-config.json\",\n        //   compilerOptions: {\n        //     baseUrl: \"kalle\",\n        //     paths: { foo: [\"bar2\"] },\n        //     strict: true,\n        //   },\n        // });\n        expect(res).toEqual({\n            extends: \"my-package/base-config.json\",\n            compilerOptions: {\n                baseUrl: \"kalle\",\n                paths: { foo: [\"bar2\"] },\n                strict: true,\n            },\n        });\n    });\n    it(\"should use baseUrl relative to location of extended tsconfig\", function () {\n        var firstConfig = { compilerOptions: { baseUrl: \".\" } };\n        var firstConfigPath = (0, path_1.join)(\"/root\", \"first-config.json\");\n        var secondConfig = { extends: \"../first-config.json\" };\n        var secondConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"second-config.json\");\n        var thirdConfig = { extends: \"../second-config.json\" };\n        var thirdConfigPath = (0, path_1.join)(\"/root\", \"dir1\", \"dir2\", \"third-config.json\");\n        var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"dir1\", \"dir2\", \"third-config.json\"), function (path) {\n            return path === firstConfigPath ||\n                path === secondConfigPath ||\n                path === thirdConfigPath;\n        }, function (path) {\n            if (path === firstConfigPath) {\n                return JSON.stringify(firstConfig);\n            }\n            if (path === secondConfigPath) {\n                return JSON.stringify(secondConfig);\n            }\n            if (path === thirdConfigPath) {\n                return JSON.stringify(thirdConfig);\n            }\n            return \"\";\n        });\n        // assert.deepEqual(res, {\n        //   extends: \"../second-config.json\",\n        //   compilerOptions: { baseUrl: join(\"..\", \"..\") },\n        // });\n        expect(res).toEqual({\n            extends: \"../second-config.json\",\n            compilerOptions: { baseUrl: (0, path_1.join)(\"..\", \"..\") },\n        });\n    });\n    it(\"should load a config with array extends and overwrite all options\", function () {\n        var baseConfig1 = {\n            compilerOptions: { baseUrl: \".\", paths: { foo: [\"bar\"] } },\n        };\n        var baseConfig1Path = (0, path_1.join)(\"/root\", \"base-config-1.json\");\n        var baseConfig2 = { compilerOptions: { baseUrl: \".\" } };\n        var baseConfig2Path = (0, path_1.join)(\"/root\", \"dir1\", \"base-config-2.json\");\n        var baseConfig3 = {\n            compilerOptions: { baseUrl: \".\", paths: { foo: [\"bar2\"] } },\n        };\n        var baseConfig3Path = (0, path_1.join)(\"/root\", \"dir1\", \"dir2\", \"base-config-3.json\");\n        var actualConfig = {\n            extends: [\n                \"./base-config-1.json\",\n                \"./dir1/base-config-2.json\",\n                \"./dir1/dir2/base-config-3.json\",\n            ],\n        };\n        var actualConfigPath = (0, path_1.join)(\"/root\", \"tsconfig.json\");\n        var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"tsconfig.json\"), function (path) {\n            return [\n                baseConfig1Path,\n                baseConfig2Path,\n                baseConfig3Path,\n                actualConfigPath,\n            ].indexOf(path) >= 0;\n        }, function (path) {\n            if (path === baseConfig1Path) {\n                return JSON.stringify(baseConfig1);\n            }\n            if (path === baseConfig2Path) {\n                return JSON.stringify(baseConfig2);\n            }\n            if (path === baseConfig3Path) {\n                return JSON.stringify(baseConfig3);\n            }\n            if (path === actualConfigPath) {\n                return JSON.stringify(actualConfig);\n            }\n            return \"\";\n        });\n        expect(res).toEqual({\n            extends: [\n                \"./base-config-1.json\",\n                \"./dir1/base-config-2.json\",\n                \"./dir1/dir2/base-config-3.json\",\n            ],\n            compilerOptions: {\n                baseUrl: (0, path_1.join)(\"dir1\", \"dir2\"),\n                paths: { foo: [\"bar2\"] },\n            },\n        });\n    });\n    it(\"should load a config with array extends without .json extension\", function () {\n        var baseConfig = {\n            compilerOptions: { baseUrl: \".\", paths: { foo: [\"bar\"] } },\n        };\n        var baseConfigPath = (0, path_1.join)(\"/root\", \"base-config-1.json\");\n        var actualConfig = { extends: [\"./base-config-1\"] };\n        var actualConfigPath = (0, path_1.join)(\"/root\", \"tsconfig.json\");\n        var res = (0, tsconfig_loader_1.loadTsconfig)((0, path_1.join)(\"/root\", \"tsconfig.json\"), function (path) { return [baseConfigPath, actualConfigPath].indexOf(path) >= 0; }, function (path) {\n            if (path === baseConfigPath) {\n                return JSON.stringify(baseConfig);\n            }\n            if (path === actualConfigPath) {\n                return JSON.stringify(actualConfig);\n            }\n            return \"\";\n        });\n        expect(res).toEqual({\n            extends: [\"./base-config-1\"],\n            compilerOptions: {\n                baseUrl: \".\",\n                paths: { foo: [\"bar\"] },\n            },\n        });\n    });\n});\n//# sourceMappingURL=tsconfig-loader.test.js.map"
        }
    ]
}