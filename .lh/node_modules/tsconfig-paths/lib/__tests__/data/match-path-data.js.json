{
    "sourceFile": "node_modules/tsconfig-paths/lib/__tests__/data/match-path-data.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893062926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tests = void 0;\nvar path_1 = require(\"path\");\nvar filesystem_1 = require(\"../../filesystem\");\nvar defaultExtensionsWhenRunningInTsNode = [\n    \".js\",\n    \".json\",\n    \".node\",\n    \".ts\",\n    \".tsx\",\n];\nexports.tests = [\n    {\n        name: \"should locate path that matches with star and exists\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {\n            \"lib/*\": [\"location/*\"],\n        },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n        requestedModule: \"lib/mylib\",\n        expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should resolve to correct path when many are specified\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {\n            \"lib/*\": [\"foo1/*\", \"foo2/*\", \"location/*\", \"foo3/*\"],\n        },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n        requestedModule: \"lib/mylib\",\n        extensions: [\".ts\"],\n        expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n    },\n    {\n        name: \"should locate path that matches with star and prioritize pattern with longest prefix\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {\n            \"*\": [\"location/*\"],\n            \"lib/*\": [\"location/*\"],\n        },\n        existingFiles: [\n            (0, path_1.join)(\"/root\", \"location\", \"lib\", \"mylib\", \"index.ts\"),\n            (0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\"),\n        ],\n        requestedModule: \"lib/mylib\",\n        expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should locate path that matches with star and exists with extension\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib.myext\")],\n        requestedModule: \"lib/mylib\",\n        extensions: [\".js\", \".myext\"],\n        expectedPath: (0, filesystem_1.removeExtension)((0, path_1.join)(\"/root\", \"location\", \"mylib.myext\")),\n    },\n    {\n        name: \"should resolve request with extension specified\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"test.jpg\")],\n        requestedModule: \"lib/test.jpg\",\n        expectedPath: (0, path_1.join)(\"/root\", \"location\", \"test.jpg\"),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should locate path that matches without star and exists\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {\n            \"lib/foo\": [\"location/foo\"],\n        },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"foo.ts\")],\n        requestedModule: \"lib/foo\",\n        expectedPath: (0, filesystem_1.removeExtension)((0, path_1.join)(\"/root\", \"location\", \"foo.ts\")),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should resolve to parent folder when filename is in subfolder\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")],\n        requestedModule: \"lib/mylib\",\n        expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.ts\")),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should resolve from main field in package.json\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"kalle.ts\")],\n        packageJson: { main: \"./kalle.ts\" },\n        requestedModule: \"lib/mylib\",\n        expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylib\", \"kalle.ts\"),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should resolve from main field in package.json (js)\",\n        absoluteBaseUrl: \"/root\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib.js\", \"kalle.js\")],\n        packageJson: { main: \"./kalle.js\" },\n        requestedModule: \"lib/mylib.js\",\n        extensions: [\".ts\", \".js\"],\n        expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylib.js\", \"kalle.js\"),\n    },\n    {\n        name: \"should resolve from list of fields by priority in package.json\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        mainFields: [\"missing\", \"browser\", \"main\"],\n        packageJson: { main: \"./main.js\", browser: \"./browser.js\" },\n        existingFiles: [\n            (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"main.js\"),\n            (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"browser.js\"), // browserFilePath\n        ],\n        extensions: [\".ts\", \".js\"],\n        requestedModule: \"lib/mylibjs\",\n        expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"browser.js\"),\n    },\n    {\n        name: \"should ignore field mappings to missing files in package.json\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        mainFields: [\"browser\", \"main\"],\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\")],\n        requestedModule: \"lib/mylibjs\",\n        packageJson: {\n            main: \"./kalle.js\",\n            browser: \"./nope.js\",\n        },\n        extensions: [\".ts\", \".js\"],\n        expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n    },\n    {\n        name: \"should ignore advanced field mappings in package.json\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [\n            (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n            (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"browser.js\"),\n        ],\n        requestedModule: \"lib/mylibjs\",\n        packageJson: {\n            main: \"./kalle.js\",\n            browser: { mylibjs: \"./browser.js\", \"./kalle.js\": \"./browser.js\" },\n        },\n        extensions: [\".ts\", \".js\"],\n        expectedPath: (0, path_1.join)(\"/root\", \"location\", \"mylibjs\", \"kalle.js\"),\n    },\n    {\n        name: \"should resolve to with the help of baseUrl when not explicitly set\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {},\n        existingFiles: [(0, path_1.join)(\"/root\", \"mylib\", \"index.ts\")],\n        requestedModule: \"mylib\",\n        expectedPath: (0, path_1.dirname)((0, path_1.join)(\"/root\", \"mylib\", \"index.ts\")),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should not resolve with the help of baseUrl when asked not to\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {},\n        addMatchAll: false,\n        existingFiles: [(0, path_1.join)(\"/root\", \"mylib\", \"index.ts\")],\n        requestedModule: \"mylib\",\n        expectedPath: undefined,\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should not locate path that does not match\",\n        absoluteBaseUrl: \"/root/\",\n        paths: { \"lib/*\": [\"location/*\"] },\n        existingFiles: [(0, path_1.join)(\"root\", \"location\", \"mylib\")],\n        requestedModule: \"mylib\",\n        expectedPath: undefined,\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should not resolve typings file (index.d.ts)\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {\n            \"lib/*\": [\"location/*\"],\n        },\n        existingFiles: [(0, path_1.join)(\"/root\", \"location\", \"mylib\", \"index.d.ts\")],\n        requestedModule: \"lib/mylib\",\n        expectedPath: undefined,\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n    {\n        name: \"should resolve main file with cjs file extension\",\n        absoluteBaseUrl: \"/root/\",\n        paths: {},\n        existingFiles: [(0, path_1.join)(\"/root\", \"mylib\", \"index.cjs\")],\n        packageJson: {\n            main: \"./index.cjs\",\n        },\n        requestedModule: \"mylib\",\n        expectedPath: (0, path_1.join)(\"/root\", \"mylib\", \"index.cjs\"),\n        extensions: defaultExtensionsWhenRunningInTsNode,\n    },\n];\n//# sourceMappingURL=match-path-data.js.map"
        }
    ]
}