{
    "sourceFile": "node_modules/tsconfig-paths/lib/__tests__/config-loader.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893061793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar config_loader_1 = require(\"../config-loader\");\nvar path_1 = require(\"path\");\ndescribe(\"config-loader\", function () {\n    it(\"should use explicitParams when set\", function () {\n        var result = (0, config_loader_1.configLoader)({\n            explicitParams: {\n                baseUrl: \"/foo/bar\",\n                paths: {\n                    asd: [\"asd\"],\n                },\n            },\n            cwd: \"/baz\",\n        });\n        var successResult = result;\n        // assert.equal(successResult.resultType, \"success\");\n        // assert.equal(successResult.absoluteBaseUrl, \"/foo/bar\");\n        // assert.equal(successResult.paths[\"asd\"][0], \"asd\");\n        expect(successResult.resultType).toBe(\"success\");\n        expect(successResult.absoluteBaseUrl).toBe(\"/foo/bar\");\n        expect(successResult.paths[\"asd\"][0]).toBe(\"asd\");\n    });\n    it(\"should use explicitParams when set and add cwd when path is relative\", function () {\n        var result = (0, config_loader_1.configLoader)({\n            explicitParams: {\n                baseUrl: \"bar/\",\n                paths: {\n                    asd: [\"asd\"],\n                },\n            },\n            cwd: \"/baz\",\n        });\n        var successResult = result;\n        // assert.equal(successResult.resultType, \"success\");\n        // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"bar/\"));\n        expect(successResult.resultType).toBe(\"success\");\n        expect(successResult.absoluteBaseUrl).toBe((0, path_1.join)(\"/baz\", \"bar/\"));\n    });\n    it(\"should fallback to tsConfigLoader when explicitParams is not set\", function () {\n        var result = (0, config_loader_1.configLoader)({\n            explicitParams: undefined,\n            cwd: \"/baz\",\n            // tslint:disable-next-line:no-any\n            tsConfigLoader: function (_) { return ({\n                tsConfigPath: \"/baz/tsconfig.json\",\n                baseUrl: \"./src\",\n                paths: {},\n            }); },\n        });\n        var successResult = result;\n        // assert.equal(successResult.resultType, \"success\");\n        // assert.equal(successResult.absoluteBaseUrl, join(\"/baz\", \"src\"));\n        expect(successResult.resultType).toBe(\"success\");\n        expect(successResult.absoluteBaseUrl).toBe((0, path_1.join)(\"/baz\", \"src\"));\n    });\n    it(\"should show an error message when baseUrl is missing\", function () {\n        var result = (0, config_loader_1.configLoader)({\n            explicitParams: undefined,\n            cwd: \"/baz\",\n            // tslint:disable-next-line:no-any\n            tsConfigLoader: function (_) { return ({\n                tsConfigPath: \"/baz/tsconfig.json\",\n                baseUrl: undefined,\n                paths: {},\n            }); },\n        });\n        var failResult = result;\n        // assert.equal(failResult.resultType, \"failed\");\n        // assert.isTrue(failResult.message.indexOf(\"baseUrl\") > -1);\n        expect(failResult.resultType).toBe(\"failed\");\n        expect(failResult.message.indexOf(\"baseUrl\") > -1).toBeTruthy();\n    });\n    it(\"should presume cwd to be a tsconfig file when loadConfig is called with absolute path to tsconfig.json\", function () {\n        // using tsconfig-named.json to ensure that future changes to fix\n        // https://github.com/dividab/tsconfig-paths/issues/31\n        // do not pass this test case just because of a directory walk looking\n        // for tsconfig.json\n        var configFile = (0, path_1.join)(__dirname, \"tsconfig-named.json\");\n        var result = (0, config_loader_1.loadConfig)(configFile);\n        var successResult = result;\n        // assert.equal(successResult.resultType, \"success\");\n        // assert.equal(successResult.configFileAbsolutePath, configFile);\n        expect(successResult.resultType).toBe(\"success\");\n        expect(successResult.configFileAbsolutePath).toBe(configFile);\n    });\n});\n//# sourceMappingURL=config-loader.test.js.map"
        }
    ]
}