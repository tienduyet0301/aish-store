{
    "sourceFile": "node_modules/tsconfig-paths/lib/__tests__/try-path.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893063902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar try_path_1 = require(\"../try-path\");\nvar path_1 = require(\"path\");\ndescribe(\"mapping-entry\", function () {\n    var abosolutePathMappings = [\n        {\n            pattern: \"longest/pre/fix/*\",\n            paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")],\n        },\n        { pattern: \"pre/fix/*\", paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo3\")] },\n        { pattern: \"*\", paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\")] },\n    ];\n    var abosolutePathMappingsStarstWithSlash = [\n        {\n            pattern: \"/opt/*\",\n            paths: [(0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\")],\n        },\n        {\n            pattern: \"*\",\n            paths: [(0, path_1.join)(\"/absolute\", \"src\")],\n        },\n    ];\n    it(\"should return no paths for relative requested module\", function () {\n        var result = (0, try_path_1.getPathsToTry)([\".ts\", \"tsx\"], abosolutePathMappings, \"./requested-module\");\n        // assert.deepEqual(result, undefined);\n        expect(result).toBeUndefined();\n    });\n    it(\"should return no paths if no pattern match the requested module\", function () {\n        var result = (0, try_path_1.getPathsToTry)([\".ts\", \"tsx\"], [\n            {\n                pattern: \"longest/pre/fix/*\",\n                paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\")],\n            },\n            {\n                pattern: \"pre/fix/*\",\n                paths: [(0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo3\")],\n            },\n        ], \"requested-module\");\n        expect(result).toBeUndefined();\n    });\n    it(\"should get all paths that matches requested module\", function () {\n        var result = (0, try_path_1.getPathsToTry)([\".ts\", \".tsx\"], abosolutePathMappings, \"longest/pre/fix/requested-module\");\n        // assert.deepEqual(result, [\n        //   // \"longest/pre/fix/*\"\n        //   { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\") },\n        //   {\n        //     type: \"extension\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.ts\"),\n        //   },\n        //   {\n        //     type: \"extension\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.tsx\"),\n        //   },\n        //   {\n        //     type: \"package\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"package.json\"),\n        //   },\n        //   {\n        //     type: \"index\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.ts\"),\n        //   },\n        //   {\n        //     type: \"index\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.tsx\"),\n        //   },\n        //   // \"*\"\n        //   { type: \"file\", path: join(\"/absolute\", \"base\", \"url\", \"foo1\") },\n        //   { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.ts\") },\n        //   { type: \"extension\", path: join(\"/absolute\", \"base\", \"url\", \"foo1.tsx\") },\n        //   {\n        //     type: \"package\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"package.json\"),\n        //   },\n        //   {\n        //     type: \"index\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.ts\"),\n        //   },\n        //   {\n        //     type: \"index\",\n        //     path: join(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.tsx\"),\n        //   },\n        // ]);\n        expect(result).toEqual([\n            // \"longest/pre/fix/*\"\n            { type: \"file\", path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\") },\n            {\n                type: \"extension\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.ts\"),\n            },\n            {\n                type: \"extension\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar.tsx\"),\n            },\n            {\n                type: \"package\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"package.json\"),\n            },\n            {\n                type: \"index\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.ts\"),\n            },\n            {\n                type: \"index\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo2\", \"bar\", \"index.tsx\"),\n            },\n            // \"*\"\n            { type: \"file\", path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\") },\n            { type: \"extension\", path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1.ts\") },\n            { type: \"extension\", path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1.tsx\") },\n            {\n                type: \"package\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\", \"package.json\"),\n            },\n            {\n                type: \"index\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.ts\"),\n            },\n            {\n                type: \"index\",\n                path: (0, path_1.join)(\"/absolute\", \"base\", \"url\", \"foo1\", \"index.tsx\"),\n            },\n        ]);\n    });\n    it(\"should resolve paths starting with a slash\", function () {\n        var result = (0, try_path_1.getPathsToTry)([\".ts\"], abosolutePathMappingsStarstWithSlash, \"/opt/utils\");\n        expect(result).toEqual([\n            // \"opt/*\"\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\"),\n                type: \"file\",\n            },\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer.ts\"),\n                type: \"extension\",\n            },\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\", \"package.json\"),\n                type: \"package\",\n            },\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\", \"aws-layer\", \"index.ts\"),\n                type: \"index\",\n            },\n            // \"*\"\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\"),\n                type: \"file\",\n            },\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src.ts\"),\n                type: \"extension\",\n            },\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\", \"package.json\"),\n                type: \"package\",\n            },\n            {\n                path: (0, path_1.join)(\"/absolute\", \"src\", \"index.ts\"),\n                type: \"index\",\n            },\n        ]);\n    });\n});\n// describe(\"match-star\", () => {\n//   it(\"should match star in last position\", () => {\n//     const result = matchStar(\"lib/*\", \"lib/mylib\");\n//     assert.equal(result, \"mylib\");\n//   });\n//   it(\"should match star in first position\", () => {\n//     const result = matchStar(\"*/lib\", \"mylib/lib\");\n//     assert.equal(result, \"mylib\");\n//   });\n// });\n//# sourceMappingURL=try-path.test.js.map"
        }
    ]
}