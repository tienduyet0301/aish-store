{
    "sourceFile": "node_modules/goober/src/__tests__/styled.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892320565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { styled, setup } from '../styled';\nimport { extractCss } from '../core/update';\n\nconst pragma = jest.fn((tag, props) => {\n    return { tag, props: { ...props, className: props.className.replace(/go\\d+/g, 'go') } };\n});\n\nexpect.extend({\n    toMatchVNode(received, tag, props) {\n        expect(received.tag).toEqual(tag);\n        expect(received.props).toEqual(props);\n        return {\n            message: 'Expected vnode to match vnode',\n            pass: true\n        };\n    }\n});\n\ndescribe('styled', () => {\n    beforeEach(() => {\n        pragma.mockClear();\n        setup(pragma);\n        extractCss();\n    });\n\n    it('calls pragma', () => {\n        setup(undefined);\n        expect(() => styled()()()).toThrow();\n\n        setup(pragma);\n        const vnode = styled('div')``();\n\n        expect(pragma).toBeCalledTimes(1);\n        expect(vnode).toMatchVNode('div', {\n            className: 'go'\n        });\n    });\n\n    it('extend props', () => {\n        const vnode = styled('tag')`\n            color: peachpuff;\n        `({ bar: 1 });\n\n        expect(vnode).toMatchVNode('tag', {\n            bar: 1,\n            className: 'go'\n        });\n        expect(extractCss()).toEqual('.go3183460609{color:peachpuff;}');\n    });\n\n    it('concat className if present in props', () => {\n        const vnode = styled('tag')`\n            color: peachpuff;\n        `({ bar: 1, className: 'existing' });\n\n        expect(vnode).toMatchVNode('tag', {\n            bar: 1,\n            className: 'go existing'\n        });\n    });\n\n    it('pass template function', () => {\n        const vnode = styled('tag')((props) => ({ color: props.color }))({ color: 'red' });\n\n        expect(vnode).toMatchVNode('tag', {\n            className: 'go',\n            color: 'red'\n        });\n        expect(extractCss()).toEqual('.go3433634237{color:red;}');\n    });\n\n    it('change tag via \"as\" prop', () => {\n        const Tag = styled('tag')`\n            color: red;\n        `;\n\n        // Simulate a render\n        let vnode = Tag();\n        expect(vnode).toMatchVNode('tag', { className: 'go' });\n\n        // Simulate a render with\n        vnode = Tag({ as: 'foo' });\n        // Expect it to be changed to foo\n        expect(vnode).toMatchVNode('foo', { className: 'go' });\n\n        // Simulate a render\n        vnode = Tag();\n        expect(vnode).toMatchVNode('tag', { className: 'go' });\n    });\n\n    it('support forwardRef', () => {\n        const forwardRef = jest.fn((fn) => (props) => fn(props, 'ref'));\n        const vnode = styled('tag', forwardRef)`\n            color: red;\n        `({ bar: 1 });\n\n        expect(vnode).toMatchVNode('tag', {\n            bar: 1,\n            className: 'go',\n            ref: 'ref'\n        });\n    });\n\n    it('setup useTheme', () => {\n        setup(pragma, null, () => 'theme');\n\n        const styleFn = jest.fn(() => ({}));\n        const vnode = styled('tag')(styleFn)({ bar: 1 });\n\n        expect(styleFn).toBeCalledWith({ bar: 1, theme: 'theme' });\n        expect(vnode).toMatchVNode('tag', {\n            bar: 1,\n            className: 'go'\n        });\n    });\n\n    it('setup useTheme with theme prop override', () => {\n        setup(pragma, null, () => 'theme');\n\n        const styleFn = jest.fn(() => ({}));\n        const vnode = styled('tag')(styleFn)({ theme: 'override' });\n\n        expect(styleFn).toBeCalledWith({ theme: 'override' });\n        expect(vnode).toMatchVNode('tag', { className: 'go', theme: 'override' });\n    });\n\n    it('uses babel compiled classNames', () => {\n        const Comp = styled('tag')``;\n        Comp.className = 'foobar';\n        const vnode = Comp({});\n        expect(vnode).toMatchVNode('tag', { className: 'go foobar' });\n    });\n\n    it('omits css prop with falsy should forward prop function', () => {\n        const shouldForwardProp = (props) => {\n            for (let prop in props) {\n                if (prop.includes('$')) delete props[prop];\n            }\n        };\n        // Overwrite setup for this test\n        setup(pragma, undefined, undefined, shouldForwardProp);\n\n        const vnode = styled('tag')`\n            color: peachpuff;\n        `({ bar: 1, $templateColumns: '1fr 1fr' });\n\n        expect(vnode).toMatchVNode('tag', { className: 'go', bar: 1 });\n    });\n\n    it('pass truthy logical and operator', () => {\n        const Tag = styled('tag')((props) => props.draw && { color: 'yellow' });\n\n        // Simulate a render\n        let vnode = Tag({ draw: true });\n\n        expect(vnode).toMatchVNode('tag', { className: 'go', draw: true });\n        expect(extractCss()).toEqual('.go2986228274{color:yellow;}');\n    });\n});\n"
        }
    ]
}