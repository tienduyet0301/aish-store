{
    "sourceFile": "node_modules/goober/src/__tests__/integrations.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892320524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { h, createContext, render } from 'preact';\nimport { useContext, forwardRef } from 'preact/compat';\nimport { setup, css, styled, keyframes } from '../index';\nimport { extractCss } from '../core/update';\n\ndescribe('integrations', () => {\n    it('preact', () => {\n        const ThemeContext = createContext();\n        const useTheme = () => useContext(ThemeContext);\n\n        setup(h, null, useTheme);\n\n        const target = document.createElement('div');\n\n        const Span = styled('span', forwardRef)`\n            color: red;\n        `;\n\n        const SpanWrapper = styled('div')`\n            color: cyan;\n\n            ${Span} {\n                border: 1px solid red;\n            }\n        `;\n\n        const BoxWithColor = styled('div')`\n            color: ${(props) => props.color};\n        `;\n\n        const BoxWithColorFn = styled('div')(\n            (props) => `\n            color: ${props.color};\n        `\n        );\n\n        const BoxWithThemeColor = styled('div')`\n            color: ${(props) => props.theme.color};\n        `;\n\n        const BoxWithThemeColorFn = styled('div')(\n            (props) => `\n            color: ${props.theme.color};\n        `\n        );\n\n        const fadeAnimation = keyframes`\n            0% {\n                opacity: 0;\n            }\n            99% {\n                opacity: 1;\n                color: dodgerblue;\n            }\n        `;\n\n        const BoxWithAnimation = styled('span')`\n            opacity: 0;\n            animation: ${fadeAnimation} 500ms ease-in-out;\n        `;\n\n        const BoxWithConditionals = styled('div')([\n            { foo: 1 },\n            (props) => ({ color: props.isActive ? 'red' : 'tomato' }),\n            null,\n            { baz: 0 },\n            false,\n            { baz: 0 }\n        ]);\n\n        const shared = { opacity: 0 };\n        const BoxWithShared = styled('div')(shared);\n        const BoxWithSharedAndConditional = styled('div')([shared, { baz: 0 }]);\n\n        const BoxWithHas = styled('div')`\n            label:has(input, select),\n            :has(foo, boo) {\n                color: red;\n            }\n        `;\n\n        const refSpy = jest.fn();\n\n        render(\n            <ThemeContext.Provider value={{ color: 'blue' }}>\n                <div>\n                    <Span ref={refSpy} />\n                    <Span as={'div'} />\n                    <SpanWrapper>\n                        <Span />\n                    </SpanWrapper>\n                    <BoxWithColor color={'red'} />\n                    <BoxWithColorFn color={'red'} />\n                    <BoxWithThemeColor />\n                    <BoxWithThemeColorFn />\n                    <BoxWithThemeColor theme={{ color: 'green' }} />\n                    <BoxWithThemeColorFn theme={{ color: 'orange' }} />\n                    <BoxWithAnimation />\n                    <BoxWithConditionals isActive />\n                    <BoxWithShared />\n                    <BoxWithSharedAndConditional />\n                    <div className={css([shared, { background: 'cyan' }])} />\n                    <BoxWithHas />\n                </div>\n            </ThemeContext.Provider>,\n            target\n        );\n\n        expect(extractCss()).toMatchInlineSnapshot(\n            [\n                '\"',\n                ' ', // Empty white space that holds the textNode that the styles are appended\n                '@keyframes go384228713{0%{opacity:0;}99%{opacity:1;color:dodgerblue;}}',\n                '.go1127809067{opacity:0;background:cyan;}',\n                '.go3865451590{color:red;}',\n                '.go3991234422{color:cyan;}',\n                '.go3991234422 .go3865451590{border:1px solid red;}',\n                '.go1925576363{color:blue;}',\n                '.go3206651468{color:green;}',\n                '.go4276997079{color:orange;}',\n                '.go2069586824{opacity:0;animation:go384228713 500ms ease-in-out;}',\n                '.go631307347{foo:1;color:red;baz:0;}',\n                '.go3865943372{opacity:0;}',\n                '.go1162430001{opacity:0;baz:0;}',\n                '.go2602823658 label:has(input, select),.go2602823658  :has(foo, boo){color:red;}',\n                '\"'\n            ].join('')\n        );\n\n        expect(refSpy).toHaveBeenCalledWith(\n            expect.objectContaining({\n                tagName: 'SPAN'\n            })\n        );\n    });\n\n    it('support extending with as', () => {\n        const list = ['p', 'm', 'as', 'bg'];\n        setup(h, undefined, undefined, (props) => {\n            for (let prop in props) {\n                if (list.indexOf(prop) !== -1) {\n                    delete props[prop];\n                }\n            }\n        });\n        const target = document.createElement('div');\n\n        const Base = styled('div')(({ p = 0, m }) => [\n            {\n                color: 'white',\n                padding: p + 'em'\n            },\n            m != null && { margin: m + 'em' }\n        ]);\n\n        const Super = styled(Base)`\n            background: ${(p) => p.bg || 'none'};\n        `;\n\n        render(\n            <div>\n                <Base />\n                <Base p={2} />\n                <Base m={1} p={3} as={'span'} />\n                <Super m={1} bg={'dodgerblue'} as={'button'} />\n            </div>,\n            target\n        );\n\n        // Makes sure the resulting DOM does not contain any props\n        expect(target.innerHTML).toEqual(\n            [\n                '<div>',\n                '<div class=\"go103173764\"></div>',\n                '<div class=\"go103194166\"></div>',\n                '<span class=\"go2081835032\"></span>',\n                '<button class=\"go1969245729 go1824201605\"></button>',\n                '</div>'\n            ].join('')\n        );\n\n        expect(extractCss()).toMatchInlineSnapshot(\n            [\n                '\"',\n                '.go1969245729{color:white;padding:0em;margin:1em;}',\n                '.go103173764{color:white;padding:0em;}',\n                '.go103194166{color:white;padding:2em;}',\n                '.go2081835032{color:white;padding:3em;margin:1em;}',\n                '.go1824201605{background:dodgerblue;}',\n                '\"'\n            ].join('')\n        );\n    });\n\n    it('shouldForwardProps', () => {\n        const list = ['p', 'm', 'as'];\n        setup(h, undefined, undefined, (props) => {\n            for (let prop in props) {\n                if (list.indexOf(prop) !== -1) {\n                    delete props[prop];\n                }\n            }\n        });\n\n        const target = document.createElement('div');\n\n        const Base = styled('div')(({ p = 0, m }) => [\n            {\n                color: 'white',\n                padding: p + 'em'\n            },\n            m != null && { margin: m + 'em' }\n        ]);\n\n        render(\n            <div>\n                <Base />\n                <Base p={2} />\n                <Base m={1} p={3} as={'span'} />\n            </div>,\n            target\n        );\n\n        // Makes sure the resulting DOM does not contain any props\n        expect(target.innerHTML).toEqual(\n            [\n                '<div>',\n                '<div class=\"go103173764\"></div>',\n                '<div class=\"go103194166\"></div>',\n                '<span class=\"go2081835032\"></span>',\n                '</div>'\n            ].join(''),\n            `\"<div><div class=\\\\\"go103173764\\\\\"></div><div class=\\\\\"go103194166\\\\\"></div><span class=\\\\\"go2081835032\\\\\"></span></div>\"`\n        );\n\n        expect(extractCss()).toMatchInlineSnapshot(\n            [\n                '\"',\n                '.go103173764{color:white;padding:0em;}',\n                '.go103194166{color:white;padding:2em;}',\n                '.go2081835032{color:white;padding:3em;margin:1em;}',\n                '\"'\n            ].join('')\n        );\n    });\n});\n"
        }
    ]
}