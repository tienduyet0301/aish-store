{
    "sourceFile": "node_modules/goober/src/__tests__/css.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892320460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { css, glob, keyframes } from '../css';\nimport { hash } from '../core/hash';\nimport { compile } from '../core/compile';\nimport { getSheet } from '../core/get-sheet';\n\njest.mock('../core/hash', () => ({\n    hash: jest.fn().mockReturnValue('hash()')\n}));\n\njest.mock('../core/compile', () => ({\n    compile: jest.fn().mockReturnValue('compile()')\n}));\n\njest.mock('../core/get-sheet', () => ({\n    getSheet: jest.fn().mockReturnValue('getSheet()')\n}));\n\ndescribe('css', () => {\n    beforeEach(() => {\n        hash.mockClear();\n        compile.mockClear();\n        getSheet.mockClear();\n    });\n\n    it('type', () => {\n        expect(typeof css).toEqual('function');\n    });\n\n    it('args: tagged', () => {\n        const out = css`base${1}`;\n\n        expect(compile).toBeCalledWith(['base', ''], [1], undefined);\n        expect(getSheet).toBeCalled();\n        expect(hash).toBeCalledWith('compile()', 'getSheet()', undefined, undefined, undefined);\n        expect(out).toEqual('hash()');\n    });\n\n    it('args: object', () => {\n        const out = css({ foo: 1 });\n\n        expect(hash).toBeCalledWith({ foo: 1 }, 'getSheet()', undefined, undefined, undefined);\n        expect(compile).not.toBeCalled();\n        expect(getSheet).toBeCalled();\n        expect(out).toEqual('hash()');\n    });\n\n    it('args: array', () => {\n        const propsBased = jest.fn().mockReturnValue({\n            backgroundColor: 'gold'\n        });\n        const payload = [{ foo: 1 }, { baz: 2 }, { opacity: 0, color: 'red' }, propsBased];\n        const out = css(payload);\n\n        expect(propsBased).toHaveBeenCalled();\n        expect(hash).toBeCalledWith(\n            { foo: 1, baz: 2, opacity: 0, color: 'red', backgroundColor: 'gold' },\n            'getSheet()',\n            undefined,\n            undefined,\n            undefined\n        );\n        expect(compile).not.toBeCalled();\n        expect(getSheet).toBeCalled();\n        expect(out).toEqual('hash()');\n    });\n\n    it('args: function', () => {\n        const incoming = { foo: 'foo' };\n        const out = css.call({ p: incoming }, (props) => ({ foo: props.foo }));\n\n        expect(hash).toBeCalledWith(incoming, 'getSheet()', undefined, undefined, undefined);\n        expect(compile).not.toBeCalled();\n        expect(getSheet).toBeCalled();\n        expect(out).toEqual('hash()');\n    });\n\n    it('bind', () => {\n        const target = '';\n        const p = {};\n        const g = true;\n        const out = css.bind({\n            target,\n            p,\n            g\n        })`foo: 1`;\n\n        expect(hash).toBeCalledWith('compile()', 'getSheet()', true, undefined, undefined);\n        expect(compile).toBeCalledWith(['foo: 1'], [], p);\n        expect(getSheet).toBeCalledWith(target);\n        expect(out).toEqual('hash()');\n    });\n});\n\ndescribe('glob', () => {\n    it('type', () => {\n        expect(typeof glob).toEqual('function');\n    });\n\n    it('args: g', () => {\n        glob`a:b`;\n        expect(hash).toBeCalledWith('compile()', 'getSheet()', 1, undefined, undefined);\n    });\n});\n\ndescribe('keyframes', () => {\n    it('type', () => {\n        expect(typeof keyframes).toEqual('function');\n    });\n\n    it('args: k', () => {\n        keyframes`a:b`;\n        expect(hash).toBeCalledWith('compile()', 'getSheet()', undefined, undefined, 1);\n    });\n});\n"
        }
    ]
}