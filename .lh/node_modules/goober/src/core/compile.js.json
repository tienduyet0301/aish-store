{
    "sourceFile": "node_modules/goober/src/core/compile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892319738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { parse } from './parse';\n\n/**\n * Can parse a compiled string, from a tagged template\n * @param {String} value\n * @param {Object} [props]\n */\nexport let compile = (str, defs, data) => {\n    return str.reduce((out, next, i) => {\n        let tail = defs[i];\n\n        // If this is a function we need to:\n        if (tail && tail.call) {\n            // 1. Call it with `data`\n            let res = tail(data);\n\n            // 2. Grab the className\n            let className = res && res.props && res.props.className;\n\n            // 3. If there's none, see if this is basically a\n            // previously styled className by checking the prefix\n            let end = className || (/^go/.test(res) && res);\n\n            if (end) {\n                // If the `end` is defined means it's a className\n                tail = '.' + end;\n            } else if (res && typeof res == 'object') {\n                // If `res` it's an object, we're either dealing with a vnode\n                // or an object returned from a function interpolation\n                tail = res.props ? '' : parse(res, '');\n            } else {\n                // Regular value returned. Can be falsy as well.\n                // Here we check if this is strictly a boolean with false value\n                // define it as `''` to be picked up as empty, otherwise use\n                // res value\n                tail = res === false ? '' : res;\n            }\n        }\n        return out + next + (tail == null ? '' : tail);\n    }, '');\n};\n"
        }
    ]
}