{
    "sourceFile": "node_modules/goober/src/core/hash.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892319794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { toHash } from './to-hash';\nimport { update } from './update';\nimport { astish } from './astish';\nimport { parse } from './parse';\n\n/**\n * In-memory cache.\n */\nlet cache = {};\n\n/**\n * Stringifies a object structure\n * @param {Object} data\n * @returns {String}\n */\nlet stringify = (data) => {\n    if (typeof data == 'object') {\n        let out = '';\n        for (let p in data) out += p + stringify(data[p]);\n        return out;\n    } else {\n        return data;\n    }\n};\n\n/**\n * Generates the needed className\n * @param {String|Object} compiled\n * @param {Object} sheet StyleSheet target\n * @param {Object} global Global flag\n * @param {Boolean} append Append or not\n * @param {Boolean} keyframes Keyframes mode. The input is the keyframes body that needs to be wrapped.\n * @returns {String}\n */\nexport let hash = (compiled, sheet, global, append, keyframes) => {\n    // Get a string representation of the object or the value that is called 'compiled'\n    let stringifiedCompiled = stringify(compiled);\n\n    // Retrieve the className from cache or hash it in place\n    let className =\n        cache[stringifiedCompiled] || (cache[stringifiedCompiled] = toHash(stringifiedCompiled));\n\n    // If there's no entry for the current className\n    if (!cache[className]) {\n        // Build the _ast_-ish structure if needed\n        let ast = stringifiedCompiled !== compiled ? compiled : astish(compiled);\n\n        // Parse it\n        cache[className] = parse(\n            // For keyframes\n            keyframes ? { ['@keyframes ' + className]: ast } : ast,\n            global ? '' : '.' + className\n        );\n    }\n\n    // If the global flag is set, save the current stringified and compiled CSS to `cache.g`\n    // to allow replacing styles in <style /> instead of appending them.\n    // This is required for using `createGlobalStyles` with themes\n    let cssToReplace = global && cache.g ? cache.g : null;\n    if (global) cache.g = cache[className];\n\n    // add or update\n    update(cache[className], sheet, append, cssToReplace);\n\n    // return hash\n    return className;\n};\n"
        }
    ]
}