{
    "sourceFile": "node_modules/goober/src/core/__tests__/hash.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892320022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { hash } from '../hash';\nimport { toHash } from '../to-hash';\nimport { update } from '../update';\nimport { parse } from '../parse';\nimport { astish } from '../astish';\n\njest.mock('../astish', () => ({\n    astish: jest.fn().mockReturnValue('astish()')\n}));\n\njest.mock('../parse', () => ({\n    parse: jest.fn().mockReturnValue('parse()')\n}));\n\njest.mock('../to-hash', () => ({\n    toHash: jest.fn().mockReturnValue('toHash()')\n}));\n\njest.mock('../update', () => ({\n    update: jest.fn().mockReturnValue('update()')\n}));\n\njest.mock('../astish', () => ({\n    astish: jest.fn().mockReturnValue('astish()')\n}));\n\njest.mock('../parse', () => ({\n    parse: jest.fn().mockReturnValue('parse()')\n}));\n\ndescribe('hash', () => {\n    beforeEach(() => {\n        toHash.mockClear();\n        update.mockClear();\n        parse.mockClear();\n        astish.mockClear();\n    });\n\n    it('regression', () => {\n        const res = hash('compiled', 'target');\n\n        expect(toHash).toBeCalledWith('compiled');\n        expect(update).toBeCalledWith('parse()', 'target', undefined, null);\n        expect(astish).toBeCalledWith('compiled');\n        expect(parse).toBeCalledWith('astish()', '.toHash()');\n\n        expect(res).toEqual('toHash()');\n    });\n\n    it('regression: cache', () => {\n        const res = hash('compiled', 'target');\n\n        expect(toHash).not.toBeCalled();\n        expect(astish).not.toBeCalled();\n        expect(parse).not.toBeCalled();\n        expect(update).toBeCalledWith('parse()', 'target', undefined, null);\n\n        expect(res).toEqual('toHash()');\n    });\n\n    it('regression: global', () => {\n        const res = hash('global', 'target', true);\n\n        expect(toHash).toBeCalledWith('global');\n        expect(astish).not.toBeCalled();\n        expect(parse).not.toBeCalled();\n        expect(update).toBeCalledWith('parse()', 'target', undefined, null);\n\n        expect(res).toEqual('toHash()');\n    });\n\n    it('regression: global-style-replace', () => {\n        const res = hash('global', 'target', true);\n\n        expect(toHash).not.toBeCalled();\n        expect(astish).not.toBeCalled();\n        expect(parse).not.toBeCalled();\n        expect(update).toBeCalledWith('parse()', 'target', undefined, 'parse()');\n\n        expect(res).toEqual('toHash()');\n    });\n\n    it('regression: keyframes', () => {\n        const res = hash('keyframes', 'target', undefined, undefined, 1);\n\n        expect(toHash).toBeCalledWith('keyframes');\n        expect(astish).not.toBeCalled();\n        expect(parse).not.toBeCalled();\n        expect(update).toBeCalledWith('parse()', 'target', undefined, null);\n\n        expect(res).toEqual('toHash()');\n    });\n\n    it('regression: object', () => {\n        const className = Math.random() + 'unique';\n        toHash.mockReturnValue(className);\n\n        const res = hash({ baz: 1 }, 'target');\n\n        expect(toHash).toBeCalledWith('baz1');\n        expect(astish).not.toBeCalled();\n        expect(parse).toBeCalledWith({ baz: 1 }, '.' + className);\n        expect(update).toBeCalledWith('parse()', 'target', undefined, null);\n\n        expect(res).toEqual(className);\n    });\n\n    it('regression: cache-object', () => {\n        const className = Math.random() + 'unique';\n        toHash.mockReturnValue(className);\n\n        // Since it's not yet cached\n        hash({ cacheObject: 1 }, 'target');\n        expect(toHash).toBeCalledWith('cacheObject1');\n        toHash.mockClear();\n\n        // Different object\n        hash({ foo: 2 }, 'target');\n        expect(toHash).toBeCalledWith('foo2');\n        toHash.mockClear();\n\n        // First object should not call .toHash\n        hash({ cacheObject: 1 }, 'target');\n        expect(toHash).not.toBeCalled();\n    });\n});\n"
        }
    ]
}