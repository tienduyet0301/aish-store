{
    "sourceFile": "node_modules/goober/src/core/__tests__/compile.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892319960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { compile } from '../compile';\n\nconst template = (str, ...defs) => {\n    return (props) => compile(str, defs, props);\n};\n\ndescribe('compile', () => {\n    it('simple', () => {\n        expect(template`prop: 1;`({})).toEqual('prop: 1;');\n    });\n\n    it('vnode', () => {\n        expect(template`prop: 1; ${() => ({ props: { className: 'class' } })}`({})).toEqual(\n            'prop: 1; .class'\n        );\n\n        // Empty or falsy\n        expect(template`prop: 1; ${() => ({ props: { foo: 1 } })}`({})).toEqual('prop: 1; ');\n    });\n\n    it('vanilla classname', () => {\n        expect(template`prop: 1; ${() => 'go0ber'}`({})).toEqual('prop: 1; .go0ber');\n    });\n\n    it('value interpolations', () => {\n        // This interpolations are testing the ability to interpolate thruty and falsy values\n        expect(template`prop: 1; ${() => 0},${() => undefined},${() => null},${2}`({})).toEqual(\n            'prop: 1; 0,,,2'\n        );\n\n        const tmpl = template`\n            background: dodgerblue;\n            ${(props) =>\n                props.padding === 'bloo' &&\n                `\n                padding: ${props.padding}px;\n            `}\n            border: 1px solid blue;\n        `;\n        expect(tmpl({})).toEqual(`\n            background: dodgerblue;\n            \n            border: 1px solid blue;\n        `);\n    });\n\n    describe('objects', () => {\n        it('normal', () => {\n            expect(template`prop: 1;${(p) => ({ color: p.color })}`({ color: 'red' })).toEqual(\n                'prop: 1;color:red;'\n            );\n        });\n\n        it('styled-system', () => {\n            const color = (p) => ({ color: p.color });\n            const background = (p) => ({ backgroundColor: p.backgroundColor });\n\n            const props = { color: 'red', backgroundColor: 'blue' };\n            const res = template`\n                prop: 1;\n                ${color}\n                ${background}\n            `(props);\n\n            expect(res.replace(/([\\s|\\n]+)/gm, '').trim()).toEqual(\n                'prop:1;color:red;background-color:blue;'\n            );\n        });\n    });\n});\n"
        }
    ]
}