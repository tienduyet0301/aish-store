{
    "sourceFile": "node_modules/goober/src/core/__tests__/update.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892320194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { update, extractCss } from '../update';\nimport { getSheet } from '../get-sheet';\n\ndescribe('update', () => {\n    it('regression', () => {\n        const t = { data: '' };\n\n        update('css', t);\n        expect(t.data).toEqual('css');\n    });\n\n    it('regression: duplicate', () => {\n        const t = { data: '' };\n\n        update('css', t);\n        update('foo', t);\n        update('css', t);\n\n        expect(t.data).toEqual('cssfoo');\n    });\n\n    it('regression: extract and flush', () => {\n        update('filled', getSheet());\n        expect(extractCss()).toEqual(' filled');\n        expect(extractCss()).toEqual('');\n    });\n\n    it('regression: extract and flush without DOM', () => {\n        const bkp = global.self;\n        delete global.self;\n        update('filled', getSheet());\n        expect(extractCss()).toEqual('filled');\n        expect(extractCss()).toEqual('');\n        global.self = bkp;\n    });\n\n    it('regression: extract and flush from custom target', () => {\n        const target = document.createElement('div');\n        update('filled', getSheet());\n        update('filledbody', getSheet(target));\n        expect(extractCss(target)).toEqual(' filledbody');\n        expect(extractCss(target)).toEqual('');\n    });\n\n    it('regression: append or prepend', () => {\n        extractCss();\n        update('end', getSheet());\n        update('start', getSheet(), true);\n        expect(extractCss()).toEqual('startend');\n    });\n\n    it('regression: global style replacement', () => {\n        const t = { data: 'html, body { background-color: white; }' };\n\n        update(\n            'html, body { background-color: black; }',\n            t,\n            undefined,\n            'html, body { background-color: white; }'\n        );\n\n        expect(t.data).toEqual('html, body { background-color: black; }');\n    });\n});\n"
        }
    ]
}