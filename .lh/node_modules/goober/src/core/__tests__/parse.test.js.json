{
    "sourceFile": "node_modules/goober/src/core/__tests__/parse.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892320095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { parse } from '../parse';\n\ndescribe('parse', () => {\n    it('regular', () => {\n        const out = parse(\n            {\n                display: 'value',\n                button: {\n                    border: '0'\n                },\n                '&.nested': {\n                    foo: '1px',\n                    baz: 'scale(1), translate(1)'\n                }\n            },\n            'hush'\n        );\n\n        expect(out).toEqual(\n            [\n                'hush{display:value;}',\n                'hush button{border:0;}',\n                'hush.nested{foo:1px;baz:scale(1), translate(1);}'\n            ].join('')\n        );\n    });\n\n    it('camelCase', () => {\n        const out = parse(\n            {\n                fooBarProperty: 'value',\n                button: {\n                    webkitPressSomeButton: '0'\n                },\n                '&.nested': {\n                    foo: '1px',\n                    backgroundEffect: 'scale(1), translate(1)'\n                }\n            },\n            'hush'\n        );\n\n        expect(out).toEqual(\n            [\n                'hush{foo-bar-property:value;}',\n                'hush button{webkit-press-some-button:0;}',\n                'hush.nested{foo:1px;background-effect:scale(1), translate(1);}'\n            ].join('')\n        );\n    });\n\n    it('keyframes', () => {\n        const out = parse(\n            {\n                '@keyframes superAnimation': {\n                    '11.1%': {\n                        opacity: '0.9999'\n                    },\n                    '111%': {\n                        opacity: '1'\n                    }\n                },\n                '@keyframes foo': {\n                    to: {\n                        baz: '1px',\n                        foo: '1px'\n                    }\n                },\n                '@keyframes complex': {\n                    'from, 20%, 53%, 80%, to': {\n                        transform: 'translate3d(0,0,0)'\n                    },\n                    '40%, 43%': {\n                        transform: 'translate3d(0, -30px, 0)'\n                    },\n                    '70%': {\n                        transform: 'translate3d(0, -15px, 0)'\n                    },\n                    '90%': {\n                        transform: 'translate3d(0,-4px,0)'\n                    }\n                }\n            },\n            'hush'\n        );\n\n        expect(out).toEqual(\n            [\n                '@keyframes superAnimation{11.1%{opacity:0.9999;}111%{opacity:1;}}',\n                '@keyframes foo{to{baz:1px;foo:1px;}}',\n                '@keyframes complex{from, 20%, 53%, 80%, to{transform:translate3d(0,0,0);}40%, 43%{transform:translate3d(0, -30px, 0);}70%{transform:translate3d(0, -15px, 0);}90%{transform:translate3d(0,-4px,0);}}'\n            ].join('')\n        );\n    });\n\n    it('font-face', () => {\n        const out = parse(\n            {\n                '@font-face': {\n                    'font-weight': 100\n                }\n            },\n            'FONTFACE'\n        );\n\n        expect(out).toEqual(['@font-face{font-weight:100;}'].join(''));\n    });\n\n    it('@media', () => {\n        const out = parse(\n            {\n                '@media any all (no-really-anything)': {\n                    position: 'super-absolute'\n                }\n            },\n            'hush'\n        );\n\n        expect(out).toEqual(\n            ['@media any all (no-really-anything){hush{position:super-absolute;}}'].join('')\n        );\n    });\n\n    it('@import', () => {\n        const out = parse(\n            {\n                '@import': \"url('https://domain.com/path?1=s')\"\n            },\n            'hush'\n        );\n\n        expect(out).toEqual([\"@import url('https://domain.com/path?1=s');\"].join(''));\n    });\n\n    it('cra', () => {\n        expect(\n            parse(\n                {\n                    '@import': \"url('path/to')\",\n                    '@font-face': {\n                        'font-weight': 100\n                    },\n                    'text-align': 'center',\n                    '.logo': {\n                        animation: 'App-logo-spin infinite 20s linear',\n                        height: '40vmin',\n                        'pointer-events': 'none'\n                    },\n                    '.header': {\n                        'background-color': '#282c34',\n                        'min-height': '100vh',\n                        display: 'flex',\n                        'flex-direction': 'column',\n                        'align-items': 'center',\n                        'justify-content': 'center',\n                        'font-size': 'calc(10px + 2vmin)',\n                        color: 'white'\n                    },\n                    '.link': {\n                        color: '#61dafb'\n                    },\n                    '@keyframes App-logo-spin': {\n                        from: {\n                            transform: 'rotate(0deg)'\n                        },\n                        to: {\n                            transform: 'rotate(360deg)'\n                        }\n                    }\n                },\n                'App'\n            )\n        ).toEqual(\n            [\n                \"@import url('path/to');\",\n                'App{text-align:center;}',\n                '@font-face{font-weight:100;}',\n                'App .logo{animation:App-logo-spin infinite 20s linear;height:40vmin;pointer-events:none;}',\n                'App .header{background-color:#282c34;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin);color:white;}',\n                'App .link{color:#61dafb;}',\n                '@keyframes App-logo-spin{from{transform:rotate(0deg);}to{transform:rotate(360deg);}}'\n            ].join('')\n        );\n    });\n\n    it('@supports', () => {\n        expect(\n            parse(\n                {\n                    '@supports (some: 1px)': {\n                        '@media (s: 1)': {\n                            display: 'flex'\n                        }\n                    },\n                    '@supports': {\n                        opacity: 1\n                    }\n                },\n                'hush'\n            )\n        ).toEqual(\n            [\n                '@supports (some: 1px){@media (s: 1){hush{display:flex;}}}',\n                '@supports{hush{opacity:1;}}'\n            ].join('')\n        );\n    });\n\n    it('unwrapp', () => {\n        expect(\n            parse(\n                {\n                    '--foo': 1,\n                    opacity: 1,\n                    '@supports': {\n                        '--bar': 'none'\n                    },\n                    html: {\n                        background: 'goober'\n                    }\n                },\n                ''\n            )\n        ).toEqual(\n            ['--foo:1;opacity:1;', '@supports{--bar:none;}', 'html{background:goober;}'].join('')\n        );\n    });\n\n    it('nested with multiple selector', () => {\n        const out = parse(\n            {\n                display: 'value',\n                '&:hover,&:focus': {\n                    border: '0',\n                    span: {\n                        index: 'unset'\n                    }\n                },\n                'p,b,i': {\n                    display: 'block',\n                    '&:focus,input': {\n                        opacity: 1,\n                        'div,span': {\n                            opacity: 0\n                        }\n                    }\n                }\n            },\n            'hush'\n        );\n        expect(out).toEqual(\n            [\n                'hush{display:value;}',\n                'hush:hover,hush:focus{border:0;}',\n                'hush:hover span,hush:focus span{index:unset;}',\n                'hush p,hush b,hush i{display:block;}',\n                'hush p:focus,hush p input,hush b:focus,hush b input,hush i:focus,hush i input{opacity:1;}',\n                'hush p:focus div,hush p:focus span,hush p input div,hush p input span,hush b:focus div,hush b:focus span,hush b input div,hush b input span,hush i:focus div,hush i:focus span,hush i input div,hush i input span{opacity:0;}'\n            ].join('')\n        );\n    });\n\n    it('should handle the :where(a,b) cases', () => {\n        expect(\n            parse(\n                {\n                    div: {\n                        ':where(a, b)': {\n                            color: 'blue'\n                        }\n                    }\n                },\n                ''\n            )\n        ).toEqual('div :where(a, b){color:blue;}');\n    });\n\n    it('should handle null and undefined values', () => {\n        expect(\n            parse(\n                {\n                    div: {\n                        opacity: 0,\n                        color: null\n                    }\n                },\n                ''\n            )\n        ).toEqual('div{opacity:0;}');\n        expect(\n            parse(\n                {\n                    div: {\n                        opacity: 0,\n                        color: undefined // or `void 0` when minified\n                    }\n                },\n                ''\n            )\n        ).toEqual('div{opacity:0;}');\n    });\n\n    it('does not transform the case of custom CSS variables', () => {\n        expect(\n            parse({\n                '--cP': 'red'\n            })\n        ).toEqual('--cP:red;');\n        expect(\n            parse({\n                '--c-P': 'red'\n            })\n        ).toEqual('--c-P:red;');\n        expect(\n            parse({\n                '--cp': 'red'\n            })\n        ).toEqual('--cp:red;');\n        expect(\n            parse({\n                ':root': {\n                    '--cP': 'red'\n                }\n            })\n        ).toEqual(':root{--cP:red;}');\n    });\n});\n"
        }
    ]
}