{
    "sourceFile": "node_modules/goober/src/core/__tests__/astish.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892319926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { astish } from '../astish';\n\ndescribe('astish', () => {\n    it('regular', () => {\n        expect(\n            astish(`\n            prop: value;\n        `)\n        ).toEqual({\n            prop: 'value'\n        });\n    });\n\n    it('nested', () => {\n        expect(\n            astish(`\n            prop: value;\n            @keyframes foo {\n                0% {\n                    attr: value;\n                }\n                50% {\n                    opacity: 1;\n                }\n                100% {\n                    foo: baz;\n                }\n            }\n            named {\n                background-image: url('/path-to-jpg.png');\n            }\n            opacity: 0;\n            .class,\n            &:hover {\n                -webkit-touch: none;\n            }\n        `)\n        ).toEqual({\n            prop: 'value',\n            opacity: '0',\n            '.class, &:hover': {\n                '-webkit-touch': 'none'\n            },\n            '@keyframes foo': {\n                '0%': {\n                    attr: 'value'\n                },\n                '50%': {\n                    opacity: '1'\n                },\n\n                '100%': {\n                    foo: 'baz'\n                }\n            },\n            named: {\n                'background-image': \"url('/path-to-jpg.png')\"\n            }\n        });\n    });\n\n    it('merging', () => {\n        expect(\n            astish(`\n            .c {\n                font-size:24px;\n            }\n        \n            .c {\n                color:red;\n            }\n        `)\n        ).toEqual({\n            '.c': {\n                'font-size': '24px',\n                color: 'red'\n            }\n        });\n    });\n\n    it('regression', () => {\n        expect(\n            astish(`\n            &.g0ssss {\n                aa: foo;\n                box-shadow: 0 1px rgba(0, 2, 33, 4) inset;\n            }\n            named {\n                transform: scale(1.2), rotate(1, 1);\n            }\n            @media screen and (some-rule: 100px) {\n                foo: baz;\n                opacity: 1;\n                level {\n                    one: 1;\n                    level {\n                        two: 2;\n                    }\n                }\n            }\n            .a{\n                color: red;\n            }\n            .b  {\n                color: blue;\n            }\n        `)\n        ).toEqual({\n            '&.g0ssss': {\n                aa: 'foo',\n                'box-shadow': '0 1px rgba(0, 2, 33, 4) inset'\n            },\n            '.a': {\n                color: 'red'\n            },\n            '.b': {\n                color: 'blue'\n            },\n            named: {\n                transform: 'scale(1.2), rotate(1, 1)'\n            },\n            '@media screen and (some-rule: 100px)': {\n                foo: 'baz',\n                opacity: '1',\n                level: {\n                    one: '1',\n\n                    level: {\n                        two: '2'\n                    }\n                }\n            }\n        });\n    });\n\n    it('should strip comments', () => {\n        expect(\n            astish(`\n                color: red;\n                /*\n                    some comment\n                */\n                transform: translate3d(0, 0, 0);\n                /**\n                 * other comment\n                 */\n                background: peachpuff;\n                font-size: xx-large; /* inline comment */\n                /* foo: bar */\n                font-weight: bold;\n            `)\n        ).toEqual({\n            color: 'red',\n            transform: 'translate3d(0, 0, 0)',\n            background: 'peachpuff',\n            'font-size': 'xx-large',\n            'font-weight': 'bold'\n        });\n    });\n\n    // for reference on what is valid:\n    // https://www.w3.org/TR/CSS22/syndata.html#value-def-identifier\n    it('should not mangle valid css identifiers', () => {\n        expect(\n            astish(`\n                :root {\n                  --azAZ-_中文09: 0;\n                }\n            `)\n        ).toEqual({\n            ':root': {\n                '--azAZ-_中文09': '0'\n            }\n        });\n    });\n\n    it('should parse multiline background declaration', () => {\n        expect(\n            astish(`\n                background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" fill=\"white\"><path d=\"M7.5 36.7h58.4v10.6H7.5V36.7zm0-15.9h58.4v10.6H7.5V20.8zm0 31.9h58.4v10.6H7.5V52.7zm0 15.9h58.4v10.6H7.5V68.6zm63.8-15.9l10.6 15.9 10.6-15.9H71.3zm21.2-5.4L81.9 31.4 71.3 47.3h21.2z\"/></svg>')\n                    center/contain;\n            `)\n        ).toEqual({\n            background: `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" fill=\"white\"><path d=\"M7.5 36.7h58.4v10.6H7.5V36.7zm0-15.9h58.4v10.6H7.5V20.8zm0 31.9h58.4v10.6H7.5V52.7zm0 15.9h58.4v10.6H7.5V68.6zm63.8-15.9l10.6 15.9 10.6-15.9H71.3zm21.2-5.4L81.9 31.4 71.3 47.3h21.2z\"/></svg>') center/contain`\n        });\n    });\n\n    it('should handle inline @media block', () => {\n        expect(\n            astish(\n                `h1 { font-size: 1rem; } @media only screen and (min-width: 850px) { h1 { font-size: 2rem; } }`\n            )\n        ).toEqual({\n            h1: {\n                'font-size': '1rem'\n            },\n            '@media only screen and (min-width: 850px)': {\n                h1: {\n                    'font-size': '2rem'\n                }\n            }\n        });\n    });\n\n    it('should handle newlines as part of the rule value', () => {\n        expect(\n            astish(\n                `tag {\n                    font-size: first\n                        second;\n                }`\n            )\n        ).toEqual({\n            tag: {\n                'font-size': 'first second'\n            }\n        });\n    });\n});\n"
        }
    ]
}