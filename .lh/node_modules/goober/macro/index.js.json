{
    "sourceFile": "node_modules/goober/macro/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892318786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "const { createMacro, MacroError } = require('babel-plugin-macros');\nconst { addNamed } = require('@babel/helper-module-imports');\n\nmodule.exports = createMacro(gooberMacro);\n\nfunction gooberMacro({ references, babel, state }) {\n    const program = state.file.path;\n\n    if (references.default) {\n        throw new MacroError('goober.macro does not support default import');\n    }\n\n    // Inject import {...} from 'goober'\n    Object.keys(references).forEach((refName) => {\n        const id = addNamed(program, refName, 'goober');\n        references[refName].forEach((referencePath) => {\n            referencePath.node.name = id.name;\n        });\n    });\n\n    const t = babel.types;\n\n    const styledReferences = references.styled || [];\n\n    styledReferences.forEach((referencePath) => {\n        const type = referencePath.parentPath.type;\n\n        if (type === 'MemberExpression') {\n            const node = referencePath.parentPath.node;\n            const functionName = node.object.name;\n            let elementName = node.property.name;\n\n            // Support custom elements\n            if (/[A-Z]/.test(elementName)) {\n                elementName = elementName.replace(/[A-Z]/g, '-$&').toLowerCase();\n            }\n\n            referencePath.parentPath.replaceWith(\n                t.callExpression(t.identifier(functionName), [t.stringLiteral(elementName)])\n            );\n        }\n    });\n}\n"
        }
    ]
}