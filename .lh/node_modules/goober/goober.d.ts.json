{
    "sourceFile": "node_modules/goober/goober.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892318711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Properties as CSSProperties } from 'csstype';\n\nexport = goober;\n\nexport as namespace goober;\n\ndeclare namespace goober {\n    interface DefaultTheme {}\n\n    type Theme<T extends object> = keyof T extends never ? T : { theme: T };\n\n    interface StyledFunction {\n        // used when creating a styled component from a native HTML element\n        <T extends keyof React.JSX.IntrinsicElements, P extends Object = {}>(\n            tag: T,\n            forwardRef?: ForwardRefFunction\n        ): Tagged<\n            React.JSX.LibraryManagedAttributes<T, React.JSX.IntrinsicElements[T]> &\n                P &\n                Theme<DefaultTheme>\n        >;\n\n        // used to extend other styled components. Inherits props from the extended component\n        <PP extends Object = {}, P extends Object = {}>(\n            tag: StyledVNode<PP>,\n            forwardRef?: ForwardRefFunction\n        ): Tagged<PP & P & Theme<DefaultTheme>>;\n\n        // used when creating a component from a string (html native) but using a non HTML standard\n        // component, such as when you want to style web components\n        <P extends Object = {}>(tag: string): Tagged<\n            P & Partial<React.JSX.ElementChildrenAttribute>\n        >;\n\n        // used to create a styled component from a JSX element (both functional and class-based)\n        <T extends React.JSX.Element | React.JSX.ElementClass, P extends Object = {}>(\n            tag: T,\n            forwardRef?: ForwardRefFunction\n        ): Tagged<P>;\n    }\n\n    // used when creating a styled component from a native HTML element with the babel-plugin-transform-goober parser\n    type BabelPluginTransformGooberStyledFunction = {\n        [T in keyof React.JSX.IntrinsicElements]: Tagged<\n            React.JSX.LibraryManagedAttributes<T, React.JSX.IntrinsicElements[T]> &\n                Theme<DefaultTheme>\n        >;\n    };\n\n    type ForwardRefFunction = {\n        (props: any, ref: any): any;\n    };\n\n    type ForwardPropsFunction = (props: object) => void;\n\n    const styled: StyledFunction & BabelPluginTransformGooberStyledFunction;\n    function setup<T>(\n        val: T,\n        prefixer?: (key: string, val: any) => string,\n        theme?: Function,\n        forwardProps?: ForwardPropsFunction\n    ): void;\n    function extractCss(target?: Element): string;\n    function glob(\n        tag: CSSAttribute | TemplateStringsArray | string,\n        ...props: Array<string | number>\n    ): void;\n    function css(\n        tag: CSSAttribute | TemplateStringsArray | string,\n        ...props: Array<string | number>\n    ): string;\n    function keyframes(\n        tag: CSSAttribute | TemplateStringsArray | string,\n        ...props: Array<string | number>\n    ): string;\n\n    type StyledVNode<T> = ((props: T, ...args: any[]) => any) & {\n        defaultProps?: T;\n        displayName?: string;\n    };\n\n    type StylesGenerator<P extends Object = {}> = (props: P) => CSSAttribute | string;\n\n    type Tagged<P extends Object = {}> = <PP extends Object = { as?: any }>(\n        tag:\n            | CSSAttribute\n            | (CSSAttribute | StylesGenerator<P & PP>)[]\n            | TemplateStringsArray\n            | string\n            | StylesGenerator<P & PP>,\n        ...props: Array<\n            | string\n            | number\n            | ((props: P & PP) => CSSAttribute | string | number | false | undefined)\n        >\n    ) => StyledVNode<Omit<P & PP, keyof Theme<DefaultTheme>>>;\n\n    interface CSSAttribute extends CSSProperties {\n        [key: string]: CSSAttribute | string | number | undefined | null;\n    }\n}\n"
        }
    ]
}