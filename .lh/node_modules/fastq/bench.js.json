{
    "sourceFile": "node_modules/fastq/bench.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892293835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict'\n\nconst max = 1000000\nconst fastqueue = require('./')(worker, 1)\nconst { promisify } = require('util')\nconst immediate = promisify(setImmediate)\nconst qPromise = require('./').promise(immediate, 1)\nconst async = require('async')\nconst neo = require('neo-async')\nconst asyncqueue = async.queue(worker, 1)\nconst neoqueue = neo.queue(worker, 1)\n\nfunction bench (func, done) {\n  const key = max + '*' + func.name\n  let count = -1\n\n  console.time(key)\n  end()\n\n  function end () {\n    if (++count < max) {\n      func(end)\n    } else {\n      console.timeEnd(key)\n      if (done) {\n        done()\n      }\n    }\n  }\n}\n\nfunction benchFastQ (done) {\n  fastqueue.push(42, done)\n}\n\nfunction benchAsyncQueue (done) {\n  asyncqueue.push(42, done)\n}\n\nfunction benchNeoQueue (done) {\n  neoqueue.push(42, done)\n}\n\nfunction worker (arg, cb) {\n  setImmediate(cb)\n}\n\nfunction benchSetImmediate (cb) {\n  worker(42, cb)\n}\n\nfunction benchFastQPromise (done) {\n  qPromise.push(42).then(function () { done() }, done)\n}\n\nfunction runBench (done) {\n  async.eachSeries([\n    benchSetImmediate,\n    benchFastQ,\n    benchNeoQueue,\n    benchAsyncQueue,\n    benchFastQPromise\n  ], bench, done)\n}\n\nrunBench(runBench)\n"
        }
    ]
}