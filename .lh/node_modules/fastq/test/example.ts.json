{
    "sourceFile": "node_modules/fastq/test/example.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892294160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as fastq from '../'\nimport { promise as queueAsPromised } from '../'\n\n// Basic example\n\nconst queue = fastq(worker, 1)\n\nqueue.push('world', (err, result) => {\n  if (err) throw err\n  console.log('the result is', result)\n})\n\nqueue.push('push without cb')\n\nqueue.concurrency\n\nqueue.drain()\n\nqueue.empty = () => undefined\n\nconsole.log('the queue tasks are', queue.getQueue())\n\nqueue.idle()\n\nqueue.kill()\n\nqueue.killAndDrain()\n\nqueue.length\n\nqueue.pause()\n\nqueue.resume()\n\nqueue.running()\n\nqueue.saturated = () => undefined\n\nqueue.unshift('world', (err, result) => {\n  if (err) throw err\n  console.log('the result is', result)\n})\n\nqueue.unshift('unshift without cb')\n\nfunction worker(task: any, cb: fastq.done) {\n  cb(null, 'hello ' + task)\n}\n\n// Generics example\n\ninterface GenericsContext {\n  base: number;\n}\n\nconst genericsQueue = fastq<GenericsContext, number, string>({ base: 6 }, genericsWorker, 1)\n\ngenericsQueue.push(7, (err, done) => {\n  if (err) throw err\n  console.log('the result is', done)\n})\n\ngenericsQueue.unshift(7, (err, done) => {\n  if (err) throw err\n  console.log('the result is', done)\n})\n\nfunction genericsWorker(this: GenericsContext, task: number, cb: fastq.done<string>) {\n  cb(null, 'the meaning of life is ' + (this.base * task))\n}\n\nconst queue2 = queueAsPromised(asyncWorker, 1)\n\nasync function asyncWorker(task: any) {\n  return 'hello ' + task\n}\n\nasync function run () {\n  await queue.push(42)\n  await queue.unshift(42)\n}\n\nrun()\n"
        }
    ]
}