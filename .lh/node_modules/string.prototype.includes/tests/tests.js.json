{
    "sourceFile": "node_modules/string.prototype.includes/tests/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893037113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar mockProperty = require('mock-property');\n\nfunction fakeArg(fn) {\n\treturn function (st) {\n\t\t// try to break `arguments[1]`\n\t\tst.teardown(mockProperty(Object.prototype, 1, { value: 2 }));\n\t\treturn fn(st);\n\t};\n}\n\nmodule.exports = function (includes, t) {\n\tt.test('cast searchString arg', fakeArg(function (st) {\n\t\tst.equals(includes('abc'), false);\n\t\tst.equals(includes('aundefinedb'), true);\n\t\tst.equals(includes('abc', undefined), false);\n\t\tst.equals(includes('aundefinedb', undefined), true);\n\t\tst.equals(includes('abc', null), false);\n\t\tst.equals(includes('anullb', null), true);\n\t\tst.equals(includes('abc', false), false);\n\t\tst.equals(includes('afalseb', false), true);\n\t\tst.equals(includes('abc', NaN), false);\n\t\tst.equals(includes('aNaNb', NaN), true);\n\t\tst.end();\n\t}));\n\n\tt.test('basic support', fakeArg(function (st) {\n\t\tst.equals(includes('abc', 'abc'), true);\n\t\tst.equals(includes('abc', 'def'), false);\n\t\tst.equals(includes('abc', ''), true);\n\t\tst.equals(includes('', ''), true);\n\t\tst.equals(includes('abc', 'bc'), true);\n\t\tst.equals(includes('abc', 'bc\\0'), false);\n\t\tst.end();\n\t}));\n\n\tt.test('pos argument', function (st) {\n\t\tst.equals(includes('abc', 'b', -Infinity), true);\n\t\tst.equals(includes('abc', 'b', -1), true);\n\t\tst.equals(includes('abc', 'b', -0), true);\n\t\tst.equals(includes('abc', 'b', +0), true);\n\t\tst.equals(includes('abc', 'b', NaN), true);\n\t\tst.equals(includes('abc', 'b', 'x'), true);\n\t\tst.equals(includes('abc', 'b', false), true);\n\t\tst.equals(includes('abc', 'b', undefined), true);\n\t\tst.equals(includes('abc', 'b', null), true);\n\t\tst.equals(includes('abc', 'b', 1), true);\n\t\tst.equals(includes('abc', 'b', 2), false);\n\t\tst.equals(includes('abc', 'b', 3), false);\n\t\tst.equals(includes('abc', 'b', 4), false);\n\t\tst.equals(includes('abc', 'b', Number(Infinity)), false);\n\t\tst.end();\n\t});\n\n\tt.test('cast stringSearch arg with pos - included', function (st) {\n\t\tst.equals(includes('abc123def', 1, -Infinity), true);\n\t\tst.equals(includes('abc123def', 1, -1), true);\n\t\tst.equals(includes('abc123def', 1, -0), true);\n\t\tst.equals(includes('abc123def', 1, +0), true);\n\t\tst.equals(includes('abc123def', 1, NaN), true);\n\t\tst.equals(includes('abc123def', 1, 'x'), true);\n\t\tst.equals(includes('abc123def', 1, false), true);\n\t\tst.equals(includes('abc123def', 1, undefined), true);\n\t\tst.equals(includes('abc123def', 1, null), true);\n\t\tst.equals(includes('abc123def', 1, 1), true);\n\t\tst.equals(includes('abc123def', 1, 2), true);\n\t\tst.equals(includes('abc123def', 1, 3), true);\n\t\tst.equals(includes('abc123def', 1, 4), false);\n\t\tst.equals(includes('abc123def', 1, 5), false);\n\t\tst.equals(includes('abc123def', 1, Number(Infinity)), false);\n\t\tst.end();\n\t});\n\n\tt.test('cast stringSearch arg with pos - not included', function (st) {\n\t\tst.equals(includes('abc123def', 9, -Infinity), false);\n\t\tst.equals(includes('abc123def', 9, -1), false);\n\t\tst.equals(includes('abc123def', 9, -0), false);\n\t\tst.equals(includes('abc123def', 9, +0), false);\n\t\tst.equals(includes('abc123def', 9, NaN), false);\n\t\tst.equals(includes('abc123def', 9, 'x'), false);\n\t\tst.equals(includes('abc123def', 9, false), false);\n\t\tst.equals(includes('abc123def', 9, undefined), false);\n\t\tst.equals(includes('abc123def', 9, null), false);\n\t\tst.equals(includes('abc123def', 9, 1), false);\n\t\tst.equals(includes('abc123def', 9, 2), false);\n\t\tst.equals(includes('abc123def', 9, 3), false);\n\t\tst.equals(includes('abc123def', 9, 4), false);\n\t\tst.equals(includes('abc123def', 9, 5), false);\n\t\tst.equals(includes('abc123def', 9, Number(Infinity)), false);\n\t\tst.end();\n\t});\n\n\tt.test('regex searchString', function (st) {\n\t\tst.equals(includes('foo[a-z]+(bar)?', '[a-z]+'), true);\n\t\tst['throws'](function () { includes('foo[a-z]+(bar)?', /[a-z]+/); }, TypeError);\n\t\tst['throws'](function () { includes('foo/[a-z]+/(bar)?', /[a-z]+/); }, TypeError);\n\t\tst.equals(includes('foo[a-z]+(bar)?', '(bar)?'), true);\n\t\tst['throws'](function () { includes('foo[a-z]+(bar)?', /(bar)?/); }, TypeError);\n\t\tst['throws'](function () { includes('foo[a-z]+/(bar)?/', /(bar)?/); }, TypeError);\n\t\tst.end();\n\t});\n\n\tt.test('astral symbols', function (st) {\n\t\t// https://mathiasbynens.be/notes/javascript-unicode#poo-test\n\t\tvar string = 'I\\xF1t\\xEBrn\\xE2ti\\xF4n\\xE0liz\\xE6ti\\xF8n\\u2603\\uD83D\\uDCA9';\n\t\tst.equals(string.includes(''), true);\n\t\tst.equals(string.includes('\\xF1t\\xEBr'), true);\n\t\tst.equals(string.includes('\\xE0liz\\xE6'), true);\n\t\tst.equals(string.includes('\\xF8n\\u2603\\uD83D\\uDCA9'), true);\n\t\tst.equals(string.includes('\\u2603'), true);\n\t\tst.equals(string.includes('\\uD83D\\uDCA9'), true);\n\t\tst.end();\n\t});\n\n\tt.test('nullish this object', function (st) {\n\t\tst['throws'](function () { includes(undefined); }, TypeError);\n\t\tst['throws'](function () { includes(undefined, 'b'); }, TypeError);\n\t\tst['throws'](function () { includes(undefined, 'b', 4); }, TypeError);\n\t\tst['throws'](function () { includes(null); }, TypeError);\n\t\tst['throws'](function () { includes(null, 'b'); }, TypeError);\n\t\tst['throws'](function () { includes(null, 'b', 4); }, TypeError);\n\t\tst.end();\n\t});\n\n\tt.test('cast this object', function (st) {\n\t\tst.equals(includes(42, '2'), true);\n\t\tst.equals(includes(42, 'b', 4), false);\n\t\tst.equals(includes(42, '2', 4), false);\n\t\tst.equals(includes({ toString: function () { return 'abc'; } }, 'b', 0), true);\n\t\tst.equals(includes({ toString: function () { return 'abc'; } }, 'b', 1), true);\n\t\tst.equals(includes({ toString: function () { return 'abc'; } }, 'b', 2), false);\n\t\tst['throws'](function () { includes({ toString: function () { throw new RangeError(); } }, /./); }, RangeError);\n\t\tst['throws'](function () { includes({ toString: function () { return 'abc'; } }, /./); }, TypeError);\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}