{
    "sourceFile": "node_modules/string.prototype.includes/implementation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893036550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*! https://mths.be/includes v2.0.0 by @mathias */\n\n'use strict';\n\nvar callBound = require('call-bind/callBound');\nvar RequireObjectCoercible = require('es-abstract/2024/RequireObjectCoercible');\nvar ToString = require('es-abstract/2024/ToString');\nvar ToIntegerOrInfinity = require('es-abstract/2024/ToIntegerOrInfinity');\nvar IsRegExp = require('es-abstract/2024/IsRegExp');\n\nvar min = Math.min;\nvar max = Math.max;\nvar indexOf = callBound('String.prototype.indexOf');\n\nmodule.exports = function includes(searchString) {\n\tvar O = RequireObjectCoercible(this);\n\tvar S = ToString(O);\n\tif (IsRegExp(searchString)) {\n\t\tthrow new TypeError('Argument to String.prototype.includes cannot be a RegExp');\n\t}\n\tvar searchStr = String(searchString);\n\tvar searchLength = searchStr.length;\n\tvar position = arguments.length > 1 ? arguments[1] : undefined;\n\tvar pos = ToIntegerOrInfinity(position);\n\tvar len = S.length;\n\tvar start = min(max(pos, 0), len);\n\t// Avoid the `indexOf` call if no match is possible\n\tif (searchLength + start > len) {\n\t\treturn false;\n\t}\n\treturn indexOf(S, searchStr, pos) !== -1;\n};\n"
        }
    ]
}