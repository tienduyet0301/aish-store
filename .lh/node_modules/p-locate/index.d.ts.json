{
    "sourceFile": "node_modules/p-locate/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892953425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare namespace pLocate {\n\tinterface Options {\n\t\t/**\n\t\tNumber of concurrently pending promises returned by `tester`. Minimum: `1`.\n\n\t\t@default Infinity\n\t\t*/\n\t\treadonly concurrency?: number;\n\n\t\t/**\n\t\tPreserve `input` order when searching.\n\n\t\tDisable this to improve performance if you don't care about the order.\n\n\t\t@default true\n\t\t*/\n\t\treadonly preserveOrder?: boolean;\n\t}\n}\n\n/**\nGet the first fulfilled promise that satisfies the provided testing function.\n\n@param input - An iterable of promises/values to test.\n@param tester - This function will receive resolved values from `input` and is expected to return a `Promise<boolean>` or `boolean`.\n@returns A `Promise` that is fulfilled when `tester` resolves to `true` or the iterable is done, or rejects if any of the promises reject. The fulfilled value is the current iterable value or `undefined` if `tester` never resolved to `true`.\n\n@example\n```\nimport pathExists = require('path-exists');\nimport pLocate = require('p-locate');\n\nconst files = [\n\t'unicorn.png',\n\t'rainbow.png', // Only this one actually exists on disk\n\t'pony.png'\n];\n\n(async () => {\n\tconst foundPath = await pLocate(files, file => pathExists(file));\n\n\tconsole.log(foundPath);\n\t//=> 'rainbow'\n})();\n```\n*/\ndeclare function pLocate<ValueType>(\n\tinput: Iterable<PromiseLike<ValueType> | ValueType>,\n\ttester: (element: ValueType) => PromiseLike<boolean> | boolean,\n\toptions?: pLocate.Options\n): Promise<ValueType | undefined>;\n\nexport = pLocate;\n"
        }
    ]
}