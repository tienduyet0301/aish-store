{
    "sourceFile": "node_modules/@react-types/shared/src/inputs.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891922575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ReactNode} from 'react';\n\nexport type ValidationState = 'valid' | 'invalid';\n\nexport type ValidationError = string | string[];\nexport type ValidationErrors = Record<string, ValidationError>;\nexport type ValidationFunction<T> = (value: T) => ValidationError | true | null | undefined;\n\nexport interface Validation<T = unknown> {\n  /** Whether user input is required on the input before form submission. */\n  isRequired?: boolean,\n  /** Whether the input value is invalid. */\n  isInvalid?: boolean,\n  /** @deprecated Use `isInvalid` instead. */\n  validationState?: ValidationState,\n  /**\n   * Whether to use native HTML form validation to prevent form submission\n   * when the value is missing or invalid, or mark the field as required\n   * or invalid via ARIA.\n   * @default 'aria'\n   */\n  validationBehavior?: 'aria' | 'native',\n  /**\n   * A function that returns an error message if a given value is invalid.\n   * Validation errors are displayed to the user when the form is submitted\n   * if `validationBehavior=\"native\"`. For realtime validation, use the `isInvalid`\n   * prop instead.\n   */\n  validate?: (value: T) => ValidationError | true | null | undefined\n}\n\nexport interface ValidationResult {\n  /** Whether the input value is invalid. */\n  isInvalid: boolean,\n  /** The current error messages for the input if it is invalid, otherwise an empty array. */\n  validationErrors: string[],\n  /** The native validation details for the input. */\n  validationDetails: ValidityState\n}\n\nexport interface SpectrumFieldValidation<T> extends Omit<Validation<T>, 'isInvalid' | 'validationState'> {\n  /** Whether the input should display its \"valid\" or \"invalid\" visual styling. */\n  validationState?: ValidationState\n}\n\nexport interface InputBase {\n  /** Whether the input is disabled. */\n  isDisabled?: boolean,\n  /** Whether the input can be selected but not changed by the user. */\n  isReadOnly?: boolean\n}\n\nexport interface ValueBase<T, C = T> {\n  /** The current value (controlled). */\n  value?: T,\n  /** The default value (uncontrolled). */\n  defaultValue?: T,\n  /** Handler that is called when the value changes. */\n  onChange?: (value: C) => void\n}\n\nexport interface TextInputBase {\n  /** Temporary text that occupies the text input when it is empty. */\n  placeholder?: string\n}\n\nexport interface SpectrumTextInputBase {\n  /**\n   * Temporary text that occupies the text input when it is empty.\n   * Please use help text instead.\n   * @deprecated\n   **/\n  placeholder?: string\n}\n\nexport interface RangeValue<T> {\n  /** The start value of the range. */\n  start: T,\n  /** The end value of the range. */\n  end: T\n}\n\nexport interface RangeInputBase<T> {\n  /** The smallest value allowed for the input. */\n  minValue?: T,\n  /** The largest value allowed for the input. */\n  maxValue?: T,\n  /** The amount that the input value changes with each increment or decrement \"tick\". */\n  step?: T // ??\n}\n\nexport interface HelpTextProps {\n  /** A description for the field. Provides a hint such as specific requirements for what to choose. */\n  description?: ReactNode,\n  /** An error message for the field. */\n  errorMessage?: ReactNode | ((v: ValidationResult) => ReactNode)\n}\n\n// Spectrum specific types. Extends `Validation` so that the `validationState` prop is available.\nexport interface SpectrumHelpTextProps extends HelpTextProps {\n  /** Whether the description is displayed with lighter text. */\n  isDisabled?: boolean,\n  /** Whether an error icon is rendered. */\n  showErrorIcon?: boolean\n}\n"
        }
    ]
}