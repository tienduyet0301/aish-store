{
    "sourceFile": "node_modules/@react-types/shared/src/collections.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891922258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\nimport {LinkDOMProps} from './dom';\nimport {ReactElement, ReactNode} from 'react';\n\nexport interface ItemProps<T> extends LinkDOMProps {\n  /** Rendered contents of the item or child items. */\n  children: ReactNode,\n  /** Rendered contents of the item if `children` contains child items. */\n  title?: ReactNode, // label?? contents?\n  /** A string representation of the item's contents, used for features like typeahead. */\n  textValue?: string,\n  /** An accessibility label for this item. */\n  'aria-label'?: string,\n  /** A list of child item objects. Used for dynamic collections. */\n  childItems?: Iterable<T>,\n  /** Whether this item has children, even if not loaded yet. */\n  hasChildItems?: boolean\n}\n\nexport type ItemElement<T> = ReactElement<ItemProps<T>> | null;\nexport type ItemRenderer<T> = (item: T) => ItemElement<T>;\nexport type LoadingState = 'loading' | 'sorting' | 'loadingMore' | 'error' | 'idle' | 'filtering';\n\nexport interface AsyncLoadable {\n  /** Whether the items are currently loading. */\n  isLoading?: boolean, // possibly isLoadingMore\n  /** Handler that is called when more items should be loaded, e.g. while scrolling near the bottom. */\n  onLoadMore?: () => any\n}\n\nexport interface SectionProps<T> {\n  /** Rendered contents of the section, e.g. a header. */\n  title?: ReactNode,\n  /** An accessibility label for the section. */\n  'aria-label'?: string,\n  /** Static child items or a function to render children. */\n  children: ItemElement<T> | ItemElement<T>[] | ItemRenderer<T>,\n  /** Item objects in the section. */\n  items?: Iterable<T>\n}\n\nexport type SectionElement<T> = ReactElement<SectionProps<T>> | null;\n\nexport type CollectionElement<T> = SectionElement<T> | ItemElement<T>;\nexport type CollectionChildren<T> = CollectionElement<T> | CollectionElement<T>[] | ((item: T) => CollectionElement<T>);\nexport interface CollectionBase<T> {\n  /** The contents of the collection. */\n  children: CollectionChildren<T>,\n  /** Item objects in the collection. */\n  items?: Iterable<T>,\n  /** The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with. */\n  disabledKeys?: Iterable<Key>\n}\n\nexport interface CollectionStateBase<T, C extends Collection<Node<T>> = Collection<Node<T>>> extends Partial<CollectionBase<T>> {\n  /** A pre-constructed collection to use instead of building one from items and children. */\n  collection?: C\n}\n\nexport interface Expandable {\n  /** The currently expanded keys in the collection (controlled). */\n  expandedKeys?: Iterable<Key>,\n  /** The initial expanded keys in the collection (uncontrolled). */\n  defaultExpandedKeys?: Iterable<Key>,\n  /** Handler that is called when items are expanded or collapsed. */\n  onExpandedChange?: (keys: Set<Key>) => any\n}\n\nexport interface Sortable {\n  /** The current sorted column and direction. */\n  sortDescriptor?: SortDescriptor,\n  /** Handler that is called when the sorted column or direction changes. */\n  onSortChange?: (descriptor: SortDescriptor) => any\n}\n\nexport interface SortDescriptor {\n  /** The key of the column to sort by. */\n  column: Key,\n  /** The direction to sort by. */\n  direction: SortDirection\n}\n\nexport type SortDirection = 'ascending' | 'descending';\n\nexport interface KeyboardDelegate {\n  /** Returns the key visually below the given one, or `null` for none. */\n  getKeyBelow?(key: Key): Key | null,\n\n  /** Returns the key visually above the given one, or `null` for none. */\n  getKeyAbove?(key: Key): Key | null,\n\n  /** Returns the key visually to the left of the given one, or `null` for none. */\n  getKeyLeftOf?(key: Key): Key | null,\n\n  /** Returns the key visually to the right of the given one, or `null` for none. */\n  getKeyRightOf?(key: Key): Key | null,\n\n  /** Returns the key visually one page below the given one, or `null` for none. */\n  getKeyPageBelow?(key: Key): Key | null,\n\n  /** Returns the key visually one page above the given one, or `null` for none. */\n  getKeyPageAbove?(key: Key): Key | null,\n\n  /** Returns the first key, or `null` for none. */\n  getFirstKey?(key?: Key | null, global?: boolean): Key | null,\n\n  /** Returns the last key, or `null` for none. */\n  getLastKey?(key?: Key | null, global?: boolean): Key | null,\n\n  /** Returns the next key after `fromKey` that matches the given search string, or `null` for none. */\n  getKeyForSearch?(search: string, fromKey?: Key | null): Key | null\n}\n\nexport interface Rect {\n  x: number,\n  y: number,\n  width: number,\n  height: number\n}\n\nexport interface Size {\n  width: number,\n  height: number\n}\n\n/** A LayoutDelegate provides layout information for collection items. */\nexport interface LayoutDelegate {\n  /** Returns a rectangle for the item with the given key. */\n  getItemRect(key: Key): Rect | null,\n  /** Returns the visible rectangle of the collection. */\n  getVisibleRect(): Rect,\n  /** Returns the size of the scrollable content in the collection. */\n  getContentSize(): Size,\n  /** Returns a list of keys between `from` and `to`. */\n  getKeyRange?(from: Key, to: Key): Key[]\n}\n\n/**\n * A generic interface to access a readonly sequential\n * collection of unique keyed items.\n */\nexport interface Collection<T> extends Iterable<T> {\n  /** The number of items in the collection. */\n  readonly size: number,\n\n  /** Iterate over all keys in the collection. */\n  getKeys(): Iterable<Key>,\n\n  /** Get an item by its key. */\n  getItem(key: Key): T | null,\n\n  /** Get an item by the index of its key. */\n  at(idx: number): T | null,\n\n  /** Get the key that comes before the given key in the collection. */\n  getKeyBefore(key: Key): Key | null,\n\n  /** Get the key that comes after the given key in the collection. */\n  getKeyAfter(key: Key): Key | null,\n\n  /** Get the first key in the collection. */\n  getFirstKey(): Key | null,\n\n  /** Get the last key in the collection. */\n  getLastKey(): Key | null,\n\n  /** Iterate over the child items of the given key. */\n  getChildren?(key: Key): Iterable<T>,\n\n  /** Returns a string representation of the item's contents. */\n  getTextValue?(key: Key): string,\n\n  /** Filters the collection using the given function. */\n  UNSTABLE_filter?(filterFn: (nodeValue: string) => boolean): Collection<T>\n}\n\nexport interface Node<T> {\n  /** The type of item this node represents. */\n  type: string,\n  /** A unique key for the node. */\n  key: Key,\n  /** The object value the node was created from. */\n  value: T | null,\n  /** The level of depth this node is at in the hierarchy. */\n  level: number,\n  /** Whether this item has children, even if not loaded yet. */\n  hasChildNodes: boolean,\n  /**\n   * The loaded children of this node.\n   * @deprecated Use `collection.getChildren(node.key)` instead.\n   */\n  childNodes: Iterable<Node<T>>,\n  /** The rendered contents of this node (e.g. JSX). */\n  rendered: ReactNode,\n  /** A string value for this node, used for features like typeahead. */\n  textValue: string,\n  /** An accessibility label for this node. */\n  'aria-label'?: string,\n  /** The index of this node within its parent. */\n  index: number,\n  /** A function that should be called to wrap the rendered node. */\n  wrapper?: (element: ReactElement) => ReactElement,\n  /** The key of the parent node. */\n  parentKey?: Key | null,\n  /** The key of the node before this node. */\n  prevKey?: Key | null,\n  /** The key of the node after this node. */\n  nextKey?: Key | null,\n  /** Additional properties specific to a particular node type. */\n  props?: any,\n  /** @private */\n  shouldInvalidate?: (context: any) => boolean,\n  /** A function that renders this node to a React Element in the DOM. */\n  render?: (node: Node<any>) => ReactElement\n}\n"
        }
    ]
}