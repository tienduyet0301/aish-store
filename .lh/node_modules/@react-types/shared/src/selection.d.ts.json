{
    "sourceFile": "node_modules/@react-types/shared/src/selection.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891922826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from '@react-types/shared';\n\nexport interface SingleSelection {\n  /** Whether the collection allows empty selection. */\n  disallowEmptySelection?: boolean,\n  /** The currently selected key in the collection (controlled). */\n  selectedKey?: Key | null,\n  /** The initial selected key in the collection (uncontrolled). */\n  defaultSelectedKey?: Key,\n  /** Handler that is called when the selection changes. */\n  onSelectionChange?: (key: Key) => void\n}\n\nexport type SelectionMode = 'none' | 'single' | 'multiple';\nexport type SelectionBehavior = 'toggle' | 'replace';\nexport type Selection = 'all' | Set<Key>;\nexport interface MultipleSelection {\n  /** The type of selection that is allowed in the collection. */\n  selectionMode?: SelectionMode,\n  /** Whether the collection allows empty selection. */\n  disallowEmptySelection?: boolean,\n  /** The currently selected keys in the collection (controlled). */\n  selectedKeys?: 'all' | Iterable<Key>,\n  /** The initial selected keys in the collection (uncontrolled). */\n  defaultSelectedKeys?: 'all' | Iterable<Key>,\n  /** Handler that is called when the selection changes. */\n  onSelectionChange?: (keys: Selection) => void,\n  /** The currently disabled keys in the collection (controlled). */\n  disabledKeys?: Iterable<Key>\n}\n\nexport interface SpectrumSelectionProps {\n  /** How selection should be displayed. */\n  selectionStyle?: 'checkbox' | 'highlight'\n}\n\nexport type FocusStrategy = 'first' | 'last';\nexport type DisabledBehavior = 'selection' | 'all';\n"
        }
    ]
}