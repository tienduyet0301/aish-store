{
    "sourceFile": "node_modules/@react-types/shared/src/refs.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891922757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ReactElement, Ref, RefAttributes} from 'react';\n\nexport interface DOMRefValue<T extends HTMLElement = HTMLElement> {\n  UNSAFE_getDOMNode(): T | null\n}\n\nexport interface FocusableRefValue<T extends HTMLElement = HTMLElement, D extends HTMLElement = T> extends DOMRefValue<D> {\n  focus(): void\n}\n\nexport type DOMRef<T extends HTMLElement = HTMLElement> = Ref<DOMRefValue<T>>;\nexport type FocusableRef<T extends HTMLElement = HTMLElement> = Ref<FocusableRefValue<T>>;\n\nexport interface RefObject<T> {\n  current: T\n}\n\n// Override forwardRef types so generics work.\ndeclare function forwardRef<T, P = {}>(\n  render: (props: P, ref: Ref<T>) => ReactElement | null\n): (props: P & RefAttributes<T>) => ReactElement | null;\n\nexport type forwardRefType = typeof forwardRef;\n"
        }
    ]
}