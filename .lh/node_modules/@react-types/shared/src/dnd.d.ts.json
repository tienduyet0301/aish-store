{
    "sourceFile": "node_modules/@react-types/shared/src/dnd.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891922347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, RefObject} from '@react-types/shared';\n\nexport interface DragDropEvent {\n  /** The x coordinate of the event, relative to the target element. */\n  x: number,\n  /** The y coordinate of the event, relative to the target element. */\n  y: number\n}\n\nexport type DropOperation = 'copy' | 'link' | 'move' | 'cancel';\n\nexport interface DragItem {\n  [type: string]: string\n}\n\nexport interface DragStartEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dragstart'\n}\n\nexport interface DragMoveEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dragmove'\n}\n\nexport interface DragEndEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dragend',\n  /** The drop operation that occurred. */\n  dropOperation: DropOperation\n}\n\nexport interface DropEnterEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dropenter'\n}\n\nexport interface DropMoveEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dropmove'\n}\n\nexport interface DropActivateEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dropactivate'\n}\n\nexport interface DropExitEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'dropexit'\n}\n\nexport interface TextDropItem {\n  /** The item kind. */\n  kind: 'text',\n  /**\n   * The drag types available for this item.\n   * These are often mime types, but may be custom app-specific types.\n   */\n  types: Set<string>,\n  /** Returns the data for the given type as a string. */\n  getText(type: string): Promise<string>\n}\n\nexport interface FileDropItem {\n  /** The item kind. */\n  kind: 'file',\n  /** The file type (usually a mime type). */\n  type: string,\n  /** The file name. */\n  name: string,\n  /** Returns the contents of the file as a blob. */\n  getFile(): Promise<File>,\n  /** Returns the contents of the file as a string. */\n  getText(): Promise<string>\n}\n\nexport interface DirectoryDropItem {\n  /** The item kind. */\n  kind: 'directory',\n  /** The directory name. */\n  name: string,\n  /** Returns the entries contained within the directory. */\n  getEntries(): AsyncIterable<FileDropItem | DirectoryDropItem>\n}\n\nexport type DropItem = TextDropItem | FileDropItem | DirectoryDropItem;\n\nexport interface DropEvent extends DragDropEvent {\n  /** The event type. */\n  type: 'drop',\n  /** The drop operation that should occur. */\n  dropOperation: DropOperation,\n  /** The dropped items. */\n  items: DropItem[]\n}\n\nexport type DropPosition = 'on' | 'before' | 'after';\nexport interface RootDropTarget {\n  /** The event type. */\n  type: 'root'\n}\n\nexport interface ItemDropTarget {\n  /** The drop target type. */\n  type: 'item',\n  /** The item key. */\n  key: Key,\n  /** The drop position relative to the item. */\n  dropPosition: DropPosition\n}\n\nexport type DropTarget = RootDropTarget | ItemDropTarget;\n\nexport interface DroppableCollectionEnterEvent extends DropEnterEvent {\n  /** The drop target. */\n  target: DropTarget\n}\n\nexport interface DroppableCollectionMoveEvent extends DropMoveEvent {\n  /** The drop target. */\n  target: DropTarget\n}\n\nexport interface DroppableCollectionActivateEvent extends DropActivateEvent {\n  /** The drop target. */\n  target: DropTarget\n}\n\nexport interface DroppableCollectionExitEvent extends DropExitEvent {\n  /** The drop target. */\n  target: DropTarget\n}\n\nexport interface DroppableCollectionDropEvent extends DropEvent {\n  /** The drop target. */\n  target: DropTarget\n}\n\nexport interface DroppableCollectionInsertDropEvent {\n  /** The dropped items. */\n  items: DropItem[],\n  /** The drop operation that should occur. */\n  dropOperation: DropOperation,\n   /** The drop target. */\n  target: ItemDropTarget\n}\n\nexport interface DroppableCollectionRootDropEvent {\n  /** The dropped items. */\n  items: DropItem[],\n  /** The drop operation that should occur. */\n  dropOperation: DropOperation\n}\n\nexport interface DroppableCollectionOnItemDropEvent {\n  /** The dropped items. */\n  items: DropItem[],\n  /** The drop operation that should occur. */\n  dropOperation: DropOperation,\n  /** Whether the drag originated within the same collection as the drop. */\n  isInternal: boolean,\n  /** The drop target. */\n  target: ItemDropTarget\n}\n\nexport interface DroppableCollectionReorderEvent {\n  /** The keys of the items that were reordered. */\n  keys: Set<Key>,\n  /** The drop operation that should occur. */\n  dropOperation: DropOperation,\n  /** The drop target. */\n  target: ItemDropTarget\n}\n\nexport interface DragTypes {\n  /** Returns whether the drag contains data of the given type. */\n  has(type: string | symbol): boolean\n}\n\nexport interface DropTargetDelegate {\n  /**\n   * Returns a drop target within a collection for the given x and y coordinates.\n   * The point is provided relative to the top left corner of the collection container.\n   * A drop target can be checked to see if it is valid using the provided `isValidDropTarget` function.\n   */\n  getDropTargetFromPoint(x: number, y: number, isValidDropTarget: (target: DropTarget) => boolean): DropTarget | null\n}\n\nexport interface DroppableCollectionUtilityOptions {\n  /**\n   * The drag types that the droppable collection accepts. If the collection accepts directories, include `DIRECTORY_DRAG_TYPE` in your array of allowed types.\n   * @default 'all'\n   */\n  acceptedDragTypes?: 'all' | Array<string | symbol>,\n  /**\n   * Handler that is called when external items are dropped \"between\" items.\n   */\n  onInsert?: (e: DroppableCollectionInsertDropEvent) => void,\n  /**\n   * Handler that is called when external items are dropped on the droppable collection's root.\n   */\n  onRootDrop?: (e: DroppableCollectionRootDropEvent) => void,\n  /**\n   * Handler that is called when items are dropped \"on\" an item.\n   */\n  onItemDrop?: (e: DroppableCollectionOnItemDropEvent) => void,\n  /**\n   * Handler that is called when items are reordered via drag in the source collection.\n   */\n  onReorder?: (e: DroppableCollectionReorderEvent) => void,\n  /**\n   * A function returning whether a given target in the droppable collection is a valid \"on\" drop target for the current drag types.\n   */\n  shouldAcceptItemDrop?: (target: ItemDropTarget, types: DragTypes) => boolean\n}\n\nexport interface DroppableCollectionBaseProps {\n  /** Handler that is called when a valid drag enters a drop target. */\n  onDropEnter?: (e: DroppableCollectionEnterEvent) => void,\n  /**\n   * Handler that is called after a valid drag is held over a drop target for a period of time.\n   * @private\n   */\n  onDropActivate?: (e: DroppableCollectionActivateEvent) => void,\n  /** Handler that is called when a valid drag exits a drop target. */\n  onDropExit?: (e: DroppableCollectionExitEvent) => void,\n  /**\n   * Handler that is called when a valid drag is dropped on a drop target. When defined, this overrides other\n   * drop handlers such as `onInsert`, and `onItemDrop`.\n   */\n  onDrop?: (e: DroppableCollectionDropEvent) => void,\n  /**\n   * A function returning the drop operation to be performed when items matching the given types are dropped\n   * on the drop target.\n   */\n  getDropOperation?: (target: DropTarget, types: DragTypes, allowedOperations: DropOperation[]) => DropOperation\n}\n\nexport interface DroppableCollectionProps extends DroppableCollectionUtilityOptions, DroppableCollectionBaseProps {}\n\nexport interface DraggableCollectionStartEvent extends DragStartEvent {\n  /** The keys of the items that were dragged. */\n  keys: Set<Key>\n}\n\nexport interface DraggableCollectionMoveEvent extends DragMoveEvent {\n  /** The keys of the items that were dragged. */\n  keys: Set<Key>\n}\n\nexport interface DraggableCollectionEndEvent extends DragEndEvent {\n  /** The keys of the items that were dragged. */\n  keys: Set<Key>,\n  /** Whether the drop ended within the same collection as it originated. */\n  isInternal: boolean\n}\n\nexport type DragPreviewRenderer = (items: DragItem[], callback: (node: HTMLElement | null) => void) => void;\n\nexport interface DraggableCollectionProps {\n  /** Handler that is called when a drag operation is started. */\n  onDragStart?: (e: DraggableCollectionStartEvent) => void,\n  /** Handler that is called when the drag is moved. */\n  onDragMove?: (e: DraggableCollectionMoveEvent) => void,\n  /** Handler that is called when the drag operation is ended, either as a result of a drop or a cancellation. */\n  onDragEnd?: (e: DraggableCollectionEndEvent) => void,\n  /** A function that returns the items being dragged. */\n  getItems: (keys: Set<Key>) => DragItem[],\n  /** The ref of the element that will be rendered as the drag preview while dragging. */\n  preview?: RefObject<DragPreviewRenderer | null>,\n  /** Function that returns the drop operations that are allowed for the dragged items. If not provided, all drop operations are allowed. */\n  getAllowedDropOperations?: () => DropOperation[]\n}\n"
        }
    ]
}