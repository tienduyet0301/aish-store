{
    "sourceFile": "node_modules/@react-types/shared/src/dom.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891922401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AriaAttributes,\n  AriaRole,\n  ClipboardEventHandler,\n  CompositionEventHandler,\n  CSSProperties,\n  FormEventHandler,\n  HTMLAttributeAnchorTarget,\n  HTMLAttributeReferrerPolicy,\n  DOMAttributes as ReactDOMAttributes,\n  ReactEventHandler\n} from 'react';\n\nexport interface AriaLabelingProps {\n  /**\n   * Defines a string value that labels the current element.\n   */\n  'aria-label'?: string,\n\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   */\n  'aria-labelledby'?: string,\n\n  /**\n   * Identifies the element (or elements) that describes the object.\n   */\n  'aria-describedby'?: string,\n\n  /**\n   * Identifies the element (or elements) that provide a detailed, extended description for the object.\n   */\n  'aria-details'?: string\n}\n\nexport interface AriaValidationProps {\n  // https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\n  /**\n   * Identifies the element that provides an error message for the object.\n   */\n  'aria-errormessage'?: string\n}\n\n// A set of common DOM props that are allowed on any component\n// Ensure this is synced with DOMPropNames in filterDOMProps\nexport interface DOMProps {\n  /**\n   * The element's unique identifier. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id).\n   */\n  id?: string\n}\n\nexport interface FocusableDOMProps extends DOMProps {\n  /**\n   * Whether to exclude the element from the sequential tab order. If true,\n   * the element will not be focusable via the keyboard by tabbing. This should\n   * be avoided except in rare scenarios where an alternative means of accessing\n   * the element or its functionality via the keyboard is available.\n   */\n  excludeFromTabOrder?: boolean\n}\n\n\nexport interface TextInputDOMEvents {\n  // Clipboard events\n  /**\n   * Handler that is called when the user copies text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy).\n   */\n   onCopy?: ClipboardEventHandler<HTMLInputElement>,\n\n   /**\n    * Handler that is called when the user cuts text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut).\n    */\n   onCut?: ClipboardEventHandler<HTMLInputElement>,\n\n   /**\n    * Handler that is called when the user pastes text. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste).\n    */\n   onPaste?: ClipboardEventHandler<HTMLInputElement>,\n\n   // Composition events\n   /**\n    * Handler that is called when a text composition system starts a new text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event).\n    */\n   onCompositionStart?: CompositionEventHandler<HTMLInputElement>,\n\n   /**\n    * Handler that is called when a text composition system completes or cancels the current text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event).\n    */\n   onCompositionEnd?: CompositionEventHandler<HTMLInputElement>,\n\n   /**\n    * Handler that is called when a new character is received in the current text composition session. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event).\n    */\n   onCompositionUpdate?: CompositionEventHandler<HTMLInputElement>,\n\n   // Selection events\n   /**\n    * Handler that is called when text in the input is selected. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/select_event).\n    */\n   onSelect?: ReactEventHandler<HTMLInputElement>,\n\n   // Input events\n   /**\n    * Handler that is called when the input value is about to be modified. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event).\n    */\n   onBeforeInput?: FormEventHandler<HTMLInputElement>,\n   /**\n    * Handler that is called when the input value is modified. See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event).\n    */\n   onInput?: FormEventHandler<HTMLInputElement>\n}\n\nexport interface InputDOMProps {\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string\n}\n\n// DOM props that apply to all text inputs\n// Ensure this is synced with useTextField\nexport interface TextInputDOMProps extends DOMProps, InputDOMProps, TextInputDOMEvents {\n  /**\n   * Describes the type of autocomplete functionality the input should provide if any. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautocomplete).\n   */\n  autoComplete?: string,\n\n  /**\n   * The maximum number of characters supported by the input. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefmaxlength).\n   */\n  maxLength?: number,\n\n  /**\n   * The minimum number of characters required by the input. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefminlength).\n   */\n  minLength?: number,\n\n  /**\n   * Regex pattern that the value of the input must match to be valid. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefpattern).\n   */\n  pattern?: string,\n\n  /**\n   * Content that appears in the input when it is empty. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefplaceholder).\n   */\n  placeholder?: string,\n\n  /**\n   * The type of input to render. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdeftype).\n   */\n  type?: 'text' | 'search' | 'url' | 'tel' | 'email' | 'password' | (string & {}),\n\n  /**\n   * Hints at the type of data that might be entered by the user while editing the element or its contents. See [MDN](https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute).\n   */\n  inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search',\n\n  /**\n   * An attribute that takes as its value a space-separated string that describes what, if any, type of autocomplete functionality the input should provide. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#autocomplete).\n   */\n  autoCorrect?: string,\n\n  /**\n   * An enumerated attribute that defines whether the element may be checked for spelling errors. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck).\n   */\n  spellCheck?: string\n}\n\n/**\n * This type allows configuring link props with router options and type-safe URLs via TS module augmentation.\n * By default, this is an empty type. Extend with `href` and `routerOptions` properties to configure your router.\n */\nexport interface RouterConfig {}\n\nexport type Href = RouterConfig extends {href: infer H} ? H : string;\nexport type RouterOptions = RouterConfig extends {routerOptions: infer O} ? O : never;\n\n// Make sure to update filterDOMProps.ts when updating this.\nexport interface LinkDOMProps {\n  /** A URL to link to. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#href). */\n  href?: Href,\n  /** Hints at the human language of the linked URL. See[MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#hreflang). */\n  hrefLang?: string,\n  /** The target window for the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target). */\n  target?: HTMLAttributeAnchorTarget,\n  /** The relationship between the linked resource and the current page. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel). */\n  rel?: string,\n  /** Causes the browser to download the linked URL. A string may be provided to suggest a file name. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#download). */\n  download?: boolean | string,\n  /** A space-separated list of URLs to ping when the link is followed. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#ping). */\n  ping?: string,\n  /** How much of the referrer to send when following the link. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#referrerpolicy). */\n  referrerPolicy?: HTMLAttributeReferrerPolicy,\n  /** Options for the configured client side router. */\n  routerOptions?: RouterOptions\n}\n\n/** Any focusable element, including both HTML and SVG elements. */\nexport interface FocusableElement extends Element, HTMLOrSVGElement {}\n\n/** All DOM attributes supported across both HTML and SVG elements. */\nexport interface DOMAttributes<T = FocusableElement> extends AriaAttributes, ReactDOMAttributes<T> {\n  id?: string | undefined,\n  role?: AriaRole | undefined,\n  tabIndex?: number | undefined,\n  style?: CSSProperties | undefined,\n  className?: string | undefined\n}\n\nexport interface GroupDOMAttributes extends Omit<DOMAttributes<HTMLElement>, 'role'> {\n  role?: 'group' | 'region' | 'presentation'\n}\n"
        }
    ]
}