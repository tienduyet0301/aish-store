{
    "sourceFile": "node_modules/nanoid/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892648133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# Nano ID\n\n<img src=\"https://ai.github.io/nanoid/logo.svg\" align=\"right\"\n     alt=\"Nano ID logo by Anton Lovchikov\" width=\"180\" height=\"94\">\n\n**English** | [Русский](./README.ru.md) | [简体中文](./README.zh-CN.md) | [Bahasa Indonesia](./README.id-ID.md)\n\nA tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n\n> “An amazing level of senseless perfectionism,\n> which is simply impossible not to respect.”\n\n* **Small.** 130 bytes (minified and gzipped). No dependencies.\n  [Size Limit] controls the size.\n* **Fast.** It is 2 times faster than UUID.\n* **Safe.** It uses hardware random generator. Can be used in clusters.\n* **Short IDs.** It uses a larger alphabet than UUID (`A-Za-z0-9_-`).\n  So ID size was reduced from 36 to 21 symbols.\n* **Portable.** Nano ID was ported\n  to [20 programming languages](#other-programming-languages).\n\n```js\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\nSupports modern browsers, IE [with Babel], Node.js and React Native.\n\n[online tool]: https://gitpod.io/#https://github.com/ai/nanoid/\n[with Babel]:  https://developer.epages.com/blog/coding/how-to-transpile-node-modules-with-babel-and-webpack-in-a-monorepo/\n[Size Limit]:  https://github.com/ai/size-limit\n\n<a href=\"https://evilmartians.com/?utm_source=nanoid\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n## Table of Contents\n\n* [Comparison with UUID](#comparison-with-uuid)\n* [Benchmark](#benchmark)\n* [Security](#security)\n* [API](#api)\n  * [Blocking](#blocking)\n  * [Async](#async)\n  * [Non-Secure](#non-secure)\n  * [Custom Alphabet or Size](#custom-alphabet-or-size)\n  * [Custom Random Bytes Generator](#custom-random-bytes-generator)\n* [Usage](#usage)\n  * [IE](#ie)\n  * [React](#react)\n  * [React Native](#react-native)\n  * [Rollup](#rollup)\n  * [PouchDB and CouchDB](#pouchdb-and-couchdb)\n  * [Mongoose](#mongoose)\n  * [Web Workers](#web-workers)\n  * [CLI](#cli)\n  * [Other Programming Languages](#other-programming-languages)\n* [Tools](#tools)\n\n\n## Comparison with UUID\n\nNano ID is quite comparable to UUID v4 (random-based).\nIt has a similar number of random bits in the ID\n(126 in Nano ID and 122 in UUID), so it has a similar collision probability:\n\n> For there to be a one in a billion chance of duplication,\n> 103 trillion version 4 IDs must be generated.\n\nThere are three main differences between Nano ID and UUID v4:\n\n1. Nano ID uses a bigger alphabet, so a similar number of random bits\n   are packed in just 21 symbols instead of 36.\n2. Nano ID code is **4 times less** than `uuid/v4` package:\n   130 bytes instead of 483.\n3. Because of memory allocation tricks, Nano ID is **2 times** faster than UUID.\n\n\n## Benchmark\n\n```rust\n$ node ./test/benchmark.js\ncrypto.randomUUID         25,603,857 ops/sec\n@napi-rs/uuid              9,973,819 ops/sec\nuid/secure                 8,234,798 ops/sec\n@lukeed/uuid               7,464,706 ops/sec\nnanoid                     5,616,592 ops/sec\ncustomAlphabet             3,115,207 ops/sec\nuuid v4                    1,535,753 ops/sec\nsecure-random-string         388,226 ops/sec\nuid-safe.sync                363,489 ops/sec\ncuid                         187,343 ops/sec\nshortid                       45,758 ops/sec\n\nAsync:\nnanoid/async                  96,094 ops/sec\nasync customAlphabet          97,184 ops/sec\nasync secure-random-string    92,794 ops/sec\nuid-safe                      90,684 ops/sec\n\nNon-secure:\nuid                       67,376,692 ops/sec\nnanoid/non-secure          2,849,639 ops/sec\nrndm                       2,674,806 ops/sec\n```\n\nTest configuration: ThinkPad X1 Carbon Gen 9, Fedora 34, Node.js 16.10.\n\n\n## Security\n\n*See a good article about random generators theory:\n[Secure random values (in Node.js)]*\n\n* **Unpredictability.** Instead of using the unsafe `Math.random()`, Nano ID\n  uses the `crypto` module in Node.js and the Web Crypto API in browsers.\n  These modules use unpredictable hardware random generator.\n* **Uniformity.** `random % alphabet` is a popular mistake to make when coding\n  an ID generator. The distribution will not be even; there will be a lower\n  chance for some symbols to appear compared to others. So, it will reduce\n  the number of tries when brute-forcing. Nano ID uses a [better algorithm]\n  and is tested for uniformity.\n\n  <img src=\"img/distribution.png\" alt=\"Nano ID uniformity\"\n     width=\"340\" height=\"135\">\n\n* **Well-documented:** all Nano ID hacks are documented. See comments\n  in [the source].\n* **Vulnerabilities:** to report a security vulnerability, please use\n  the [Tidelift security contact](https://tidelift.com/security).\n  Tidelift will coordinate the fix and disclosure.\n\n[Secure random values (in Node.js)]: https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba\n[better algorithm]:                  https://github.com/ai/nanoid/blob/main/index.js\n[the source]:                        https://github.com/ai/nanoid/blob/main/index.js\n\n\n## Install\n\n```bash\nnpm install --save nanoid\n```\n\nFor quick hacks, you can load Nano ID from CDN. Though, it is not recommended\nto be used in production because of the lower loading performance.\n\n```js\nimport { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js'\n```\n\nNano ID provides ES modules. You do not need to do anything to use Nano ID\nas ESM in webpack, Rollup, Parcel, or Node.js.\n\n```js\nimport { nanoid } from 'nanoid'\n```\n\nIn Node.js you can use CommonJS import:\n\n```js\nconst { nanoid } = require('nanoid')\n```\n\n\n## API\n\nNano ID has 3 APIs: normal (blocking), asynchronous, and non-secure.\n\nBy default, Nano ID uses URL-friendly symbols (`A-Za-z0-9_-`) and returns an ID\nwith 21 characters (to have a collision probability similar to UUID v4).\n\n\n### Blocking\n\nThe safe and easiest way to use Nano ID.\n\nIn rare cases could block CPU from other work while noise collection\nfor hardware random generator.\n\n```js\nimport { nanoid } from 'nanoid'\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\nIf you want to reduce the ID size (and increase collisions probability),\nyou can pass the size as an argument.\n\n```js\nnanoid(10) //=> \"IRFa-VaY2b\"\n```\n\nDon’t forget to check the safety of your ID size\nin our [ID collision probability] calculator.\n\nYou can also use a [custom alphabet](#custom-alphabet-or-size)\nor a [random generator](#custom-random-bytes-generator).\n\n[ID collision probability]: https://zelark.github.io/nano-id-cc/\n\n\n### Async\n\nTo generate hardware random bytes, CPU collects electromagnetic noise.\nFor most cases, entropy will be already collected.\n\nIn the synchronous API during the noise collection, the CPU is busy and\ncannot do anything useful (for instance, process another HTTP request).\n\nUsing the asynchronous API of Nano ID, another code can run during\nthe entropy collection.\n\n```js\nimport { nanoid } from 'nanoid/async'\n\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\nRead more about entropy collection in [`crypto.randomBytes`] docs.\n\nUnfortunately, you will lose Web Crypto API advantages in a browser\nif you use the asynchronous API. So, currently, in the browser, you are limited\nwith either security (`nanoid`), asynchronous behavior (`nanoid/async`),\nor non-secure behavior (`nanoid/non-secure`) that will be explained\nin the next part of the documentation.\n\n[`crypto.randomBytes`]: https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\n\n\n### Non-Secure\n\nBy default, Nano ID uses hardware random bytes generation for security\nand low collision probability. If you are not so concerned with security,\nyou can use the faster non-secure generator.\n\n```js\nimport { nanoid } from 'nanoid/non-secure'\nconst id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\n\n### Custom Alphabet or Size\n\n`customAlphabet` allows you to create `nanoid` with your own alphabet\nand ID size.\n\n```js\nimport { customAlphabet } from 'nanoid'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nmodel.id = nanoid() //=> \"4f90d13a42\"\n```\n\n```js\nimport { customAlphabet } from 'nanoid/async'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\n```js\nimport { customAlphabet } from 'nanoid/non-secure'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nuser.id = nanoid()\n```\n\nCheck the safety of your custom alphabet and ID size in our\n[ID collision probability] calculator. For more alphabets, check out the options\nin [`nanoid-dictionary`].\n\nAlphabet must contain 256 symbols or less.\nOtherwise, the security of the internal generator algorithm is not guaranteed.\n\nIn addition to setting a default size, you can change the ID size when calling\nthe function:\n\n```js\nimport { customAlphabet } from 'nanoid'\nconst nanoid = customAlphabet('1234567890abcdef', 10)\nmodel.id = nanoid(5) //=> \"f01a2\"\n```\n\n[ID collision probability]: https://alex7kom.github.io/nano-nanoid-cc/\n[`nanoid-dictionary`]:      https://github.com/CyberAP/nanoid-dictionary\n\n\n### Custom Random Bytes Generator\n\n`customRandom` allows you to create a `nanoid` and replace alphabet\nand the default random bytes generator.\n\nIn this example, a seed-based generator is used:\n\n```js\nimport { customRandom } from 'nanoid'\n\nconst rng = seedrandom(seed)\nconst nanoid = customRandom('abcdef', 10, size => {\n  return (new Uint8Array(size)).map(() => 256 * rng())\n})\n\nnanoid() //=> \"fbaefaadeb\"\n```\n\n`random` callback must accept the array size and return an array\nwith random numbers.\n\nIf you want to use the same URL-friendly symbols with `customRandom`,\nyou can get the default alphabet using the `urlAlphabet`.\n\n```js\nconst { customRandom, urlAlphabet } = require('nanoid')\nconst nanoid = customRandom(urlAlphabet, 10, random)\n```\n\nAsynchronous and non-secure APIs are not available for `customRandom`.\n\nNote, that between Nano ID versions we may change random generator\ncall sequence. If you are using seed-based generators, we do not guarantee\nthe same result.\n\n\n## Usage\n\n### IE\n\nIf you support IE, you need to [transpile `node_modules`] by Babel\nand add `crypto` alias. Moreover, `UInt8Array` in IE actually\nis not an array and to cope with it, you have to convert it to an array\nmanually:\n\n```js\n// polyfills.js\nif (!window.crypto && window.msCrypto) {\n  window.crypto = window.msCrypto\n\n  const getRandomValuesDef = window.crypto.getRandomValues\n\n  window.crypto.getRandomValues = function (array) {\n    const values = getRandomValuesDef.call(window.crypto, array)\n    const result = []\n\n    for (let i = 0; i < array.length; i++) {\n      result[i] = values[i];\n    }\n\n    return result\n  };\n}\n```\n\n```js\nimport './polyfills.js'\nimport { nanoid } from 'nanoid'\n```\n\n[transpile `node_modules`]: https://developer.epages.com/blog/coding/how-to-transpile-node-modules-with-babel-and-webpack-in-a-monorepo/\n\n\n### React\n\nThere’s no correct way to use Nano ID for React `key` prop\nsince it should be consistent among renders.\n\n```jsx\nfunction Todos({todos}) {\n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={nanoid()}> /* DON’T DO IT */\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\nYou should rather try to reach for stable ID inside your list item.\n\n```jsx\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n)\n```\n\nIn case you don’t have stable IDs you'd rather use index as `key`\ninstead of `nanoid()`:\n\n```jsx\nconst todoItems = todos.map((text, index) =>\n  <li key={index}> /* Still not recommended but preferred over nanoid().\n                      Only do this if items have no stable IDs. */\n    {text}\n  </li>\n)\n```\n\n\n### React Native\n\nReact Native does not have built-in random generator. The following polyfill\nworks for plain React Native and Expo starting with `39.x`.\n\n1. Check [`react-native-get-random-values`] docs and install it.\n2. Import it before Nano ID.\n\n```js\nimport 'react-native-get-random-values'\nimport { nanoid } from 'nanoid'\n```\n\n[`react-native-get-random-values`]: https://github.com/LinusU/react-native-get-random-values\n\n\n### Rollup\n\nFor Rollup you will need [`@rollup/plugin-node-resolve`] to bundle browser version\nof this library.:\n\n```js\n  plugins: [\n    nodeResolve({\n      browser: true\n    })\n  ]\n```\n\n[`@rollup/plugin-node-resolve`]: https://github.com/rollup/plugins/tree/master/packages/node-resolve\n\n\n### PouchDB and CouchDB\n\nIn PouchDB and CouchDB, IDs can’t start with an underscore `_`.\nA prefix is required to prevent this issue, as Nano ID might use a `_`\nat the start of the ID by default.\n\nOverride the default ID with the following option:\n\n```js\ndb.put({\n  _id: 'id' + nanoid(),\n  …\n})\n```\n\n\n### Mongoose\n\n```js\nconst mySchema = new Schema({\n  _id: {\n    type: String,\n    default: () => nanoid()\n  }\n})\n```\n\n\n### Web Workers\n\nWeb Workers do not have access to a secure random generator.\n\nSecurity is important in IDs when IDs should be unpredictable.\nFor instance, in \"access by URL\" link generation.\nIf you do not need unpredictable IDs, but you need to use Web Workers,\nyou can use the non‑secure ID generator.\n\n```js\nimport { nanoid } from 'nanoid/non-secure'\nnanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\nNote: non-secure IDs are more prone to collision attacks.\n\n\n### CLI\n\nYou can get unique ID in terminal by calling `npx nanoid`. You need only\nNode.js in the system. You do not need Nano ID to be installed anywhere.\n\n```sh\n$ npx nanoid\nnpx: installed 1 in 0.63s\nLZfXLFzPPR4NNrgjlWDxn\n```\n\nSize of generated ID can be specified with `--size` (or `-s`) option:\n\n```sh\n$ npx nanoid --size 10\nL3til0JS4z\n```\n\nCustom alphabet can be specified with `--alphabet` (or `-a`) option\n(note that in this case `--size` is required):\n\n```sh\n$ npx nanoid --alphabet abc --size 15\nbccbcabaabaccab\n```\n\n### Other Programming Languages\n\nNano ID was ported to many languages. You can use these ports to have\nthe same ID generator on the client and server side.\n\n* [C#](https://github.com/codeyu/nanoid-net)\n* [C++](https://github.com/mcmikecreations/nanoid_cpp)\n* [Clojure and ClojureScript](https://github.com/zelark/nano-id)\n* [ColdFusion/CFML](https://github.com/JamoCA/cfml-nanoid)\n* [Crystal](https://github.com/mamantoha/nanoid.cr)\n* [Dart & Flutter](https://github.com/pd4d10/nanoid-dart)\n* [Deno](https://github.com/ianfabs/nanoid)\n* [Go](https://github.com/matoous/go-nanoid)\n* [Elixir](https://github.com/railsmechanic/nanoid)\n* [Haskell](https://github.com/MichelBoucey/NanoID)\n* [Janet](https://sr.ht/~statianzo/janet-nanoid/)\n* [Java](https://github.com/aventrix/jnanoid)\n* [Nim](https://github.com/icyphox/nanoid.nim)\n* [OCaml](https://github.com/routineco/ocaml-nanoid)\n* [Perl](https://github.com/tkzwtks/Nanoid-perl)\n* [PHP](https://github.com/hidehalo/nanoid-php)\n* [Python](https://github.com/puyuan/py-nanoid)\n  with [dictionaries](https://pypi.org/project/nanoid-dictionary)\n* [Postgres Extension](https://github.com/spa5k/uids-postgres)\n* [R](https://github.com/hrbrmstr/nanoid) (with dictionaries)\n* [Ruby](https://github.com/radeno/nanoid.rb)\n* [Rust](https://github.com/nikolay-govorov/nanoid)\n* [Swift](https://github.com/antiflasher/NanoID)\n* [Unison](https://share.unison-lang.org/latest/namespaces/hojberg/nanoid)\n* [V](https://github.com/invipal/nanoid)\n* [Zig](https://github.com/SasLuca/zig-nanoid)\n\nFor other environments, [CLI] is available to generate IDs from a command line.\n\n[CLI]: #cli\n\n\n## Tools\n\n* [ID size calculator] shows collision probability when adjusting\n  the ID alphabet or size.\n* [`nanoid-dictionary`] with popular alphabets to use with [`customAlphabet`].\n* [`nanoid-good`] to be sure that your ID doesn’t contain any obscene words.\n\n[`nanoid-dictionary`]: https://github.com/CyberAP/nanoid-dictionary\n[ID size calculator]:  https://zelark.github.io/nano-id-cc/\n[`customAlphabet`]:    #custom-alphabet-or-size\n[`nanoid-good`]:       https://github.com/y-gagar1n/nanoid-good\n"
        }
    ]
}