{
    "sourceFile": "node_modules/nanoid/index.d.cts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892647788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Generate secure URL-friendly unique ID.\n *\n * By default, the ID will have 21 symbols to have a collision probability\n * similar to UUID v4.\n *\n * ```js\n * import { nanoid } from 'nanoid'\n * model.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqL\"\n * ```\n *\n * @param size Size of the ID. The default size is 21.\n * @returns A random string.\n */\nexport function nanoid(size?: number): string\n\n/**\n * Generate secure unique ID with custom alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param alphabet Alphabet used to generate the ID.\n * @param defaultSize Size of the ID. The default size is 21.\n * @returns A random string generator.\n *\n * ```js\n * const { customAlphabet } = require('nanoid')\n * const nanoid = customAlphabet('0123456789абвгдеё', 5)\n * nanoid() //=> \"8ё56а\"\n * ```\n */\nexport function customAlphabet(\n  alphabet: string,\n  defaultSize?: number\n): (size?: number) => string\n\n/**\n * Generate unique ID with custom random generator and alphabet.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * ```js\n * import { customRandom } from 'nanoid/format'\n *\n * const nanoid = customRandom('abcdef', 5, size => {\n *   const random = []\n *   for (let i = 0; i < size; i++) {\n *     random.push(randomByte())\n *   }\n *   return random\n * })\n *\n * nanoid() //=> \"fbaef\"\n * ```\n *\n * @param alphabet Alphabet used to generate a random string.\n * @param size Size of the random string.\n * @param random A random bytes generator.\n * @returns A random string generator.\n */\nexport function customRandom(\n  alphabet: string,\n  size: number,\n  random: (bytes: number) => Uint8Array\n): () => string\n\n/**\n * URL safe symbols.\n *\n * ```js\n * import { urlAlphabet } from 'nanoid'\n * const nanoid = customAlphabet(urlAlphabet, 10)\n * nanoid() //=> \"Uakgb_J5m9\"\n * ```\n */\nexport const urlAlphabet: string\n\n/**\n * Generate an array of random bytes collected from hardware noise.\n *\n * ```js\n * import { customRandom, random } from 'nanoid'\n * const nanoid = customRandom(\"abcdef\", 5, random)\n * ```\n *\n * @param bytes Size of the array.\n * @returns An array of random bytes.\n */\nexport function random(bytes: number): Uint8Array\n"
        }
    ]
}