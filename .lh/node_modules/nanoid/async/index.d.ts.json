{
    "sourceFile": "node_modules/nanoid/async/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892647377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Generate secure URL-friendly unique ID. The non-blocking version.\n *\n * By default, the ID will have 21 symbols to have a collision probability\n * similar to UUID v4.\n *\n * ```js\n * import { nanoid } from 'nanoid/async'\n * nanoid().then(id => {\n *   model.id = id\n * })\n * ```\n *\n * @param size Size of the ID. The default size is 21.\n * @returns A promise with a random string.\n */\nexport function nanoid(size?: number): Promise<string>\n\n/**\n * A low-level function.\n * Generate secure unique ID with custom alphabet. The non-blocking version.\n *\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\n * will not be secure.\n *\n * @param alphabet Alphabet used to generate the ID.\n * @param defaultSize Size of the ID. The default size is 21.\n * @returns A function that returns a promise with a random string.\n *\n * ```js\n * import { customAlphabet } from 'nanoid/async'\n * const nanoid = customAlphabet('0123456789абвгдеё', 5)\n * nanoid().then(id => {\n *   model.id = id //=> \"8ё56а\"\n * })\n * ```\n */\nexport function customAlphabet(\n  alphabet: string,\n  defaultSize?: number\n): (size?: number) => Promise<string>\n\n/**\n * Generate an array of random bytes collected from hardware noise.\n *\n * ```js\n * import { random } from 'nanoid/async'\n * random(5).then(bytes => {\n *   bytes //=> [10, 67, 212, 67, 89]\n * })\n * ```\n *\n * @param bytes Size of the array.\n * @returns A promise with a random bytes array.\n */\nexport function random(bytes: number): Promise<Uint8Array>\n"
        }
    ]
}