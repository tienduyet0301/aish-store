{
    "sourceFile": "node_modules/nanoid/async/index.native.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892647491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { getRandomBytesAsync } from 'expo-random'\n\nimport { urlAlphabet } from '../url-alphabet/index.js'\n\nlet random = getRandomBytesAsync\n\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  let mask = (2 << (31 - Math.clz32((alphabet.length - 1) | 1))) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  let step = Math.ceil((1.6 * mask * defaultSize) / alphabet.length)\n\n  let tick = (id, size = defaultSize) =>\n    random(step).then(bytes => {\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let i = step\n      while (i--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[i] & mask] || ''\n        if (id.length >= size) return id\n      }\n      return tick(id, size)\n    })\n\n  return size => tick('', size)\n}\n\nlet nanoid = (size = 21) =>\n  random((size |= 0)).then(bytes => {\n    let id = ''\n    // A compact alternative for `for (var i = 0; i < step; i++)`.\n    while (size--) {\n      // It is incorrect to use bytes exceeding the alphabet size.\n      // The following mask reduces the random byte in the 0-255 value\n      // range to the 0-63 value range. Therefore, adding hacks, such\n      // as empty string fallback or magic numbers, is unneccessary because\n      // the bitmask trims bytes down to the alphabet size.\n      id += urlAlphabet[bytes[size] & 63]\n    }\n    return id\n  })\n\nexport { nanoid, customAlphabet, random }\n"
        }
    ]
}