{
    "sourceFile": "node_modules/source-map-js/source-map.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893035090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export interface StartOfSourceMap {\n    file?: string;\n    sourceRoot?: string;\n}\n\nexport interface RawSourceMap extends StartOfSourceMap {\n    version: string;\n    sources: string[];\n    names: string[];\n    sourcesContent?: string[];\n    mappings: string;\n}\n\nexport interface Position {\n    line: number;\n    column: number;\n}\n\nexport interface LineRange extends Position {\n    lastColumn: number;\n}\n\nexport interface FindPosition extends Position {\n    // SourceMapConsumer.GREATEST_LOWER_BOUND or SourceMapConsumer.LEAST_UPPER_BOUND\n    bias?: number;\n}\n\nexport interface SourceFindPosition extends FindPosition {\n    source: string;\n}\n\nexport interface MappedPosition extends Position {\n    source: string;\n    name?: string;\n}\n\nexport interface MappingItem {\n    source: string | null;\n    generatedLine: number;\n    generatedColumn: number;\n    originalLine: number | null;\n    originalColumn: number | null;\n    name: string | null;\n}\n\nexport class SourceMapConsumer {\n    static GENERATED_ORDER: number;\n    static ORIGINAL_ORDER: number;\n\n    static GREATEST_LOWER_BOUND: number;\n    static LEAST_UPPER_BOUND: number;\n\n    constructor(rawSourceMap: RawSourceMap);\n    readonly file: string | undefined | null;\n    readonly sourceRoot: string | undefined | null;\n    readonly sourcesContent: readonly string[] | null | undefined;\n    readonly sources: readonly string[]\n\n    computeColumnSpans(): void;\n    originalPositionFor(generatedPosition: FindPosition): MappedPosition;\n    generatedPositionFor(originalPosition: SourceFindPosition): LineRange;\n    allGeneratedPositionsFor(originalPosition: MappedPosition): Position[];\n    hasContentsOfAllSources(): boolean;\n    sourceContentFor(source: string, returnNullOnMissing?: boolean): string | null;\n    eachMapping(callback: (mapping: MappingItem) => void, context?: any, order?: number): void;\n}\n\nexport interface Mapping {\n    generated: Position;\n    original?: Position | null;\n    source?: string | null;\n    name?: string | null;\n}\n\nexport class SourceMapGenerator {\n    constructor(startOfSourceMap?: StartOfSourceMap);\n    static fromSourceMap(sourceMapConsumer: SourceMapConsumer, startOfSourceMap?: StartOfSourceMap): SourceMapGenerator;\n    addMapping(mapping: Mapping): void;\n    setSourceContent(sourceFile: string, sourceContent: string | null | undefined): void;\n    applySourceMap(sourceMapConsumer: SourceMapConsumer, sourceFile?: string, sourceMapPath?: string): void;\n    toString(): string;\n    toJSON(): RawSourceMap;\n}\n\nexport interface CodeWithSourceMap {\n    code: string;\n    map: SourceMapGenerator;\n}\n\nexport class SourceNode {\n    constructor();\n    constructor(line: number, column: number, source: string);\n    constructor(line: number, column: number, source: string, chunk?: string, name?: string);\n    static fromStringWithSourceMap(code: string, sourceMapConsumer: SourceMapConsumer, relativePath?: string): SourceNode;\n    add(chunk: string): void;\n    prepend(chunk: string): void;\n    setSourceContent(sourceFile: string, sourceContent: string): void;\n    walk(fn: (chunk: string, mapping: MappedPosition) => void): void;\n    walkSourceContents(fn: (file: string, content: string) => void): void;\n    join(sep: string): SourceNode;\n    replaceRight(pattern: string, replacement: string): SourceNode;\n    toString(): string;\n    toStringWithSourceMap(startOfSourceMap?: StartOfSourceMap): CodeWithSourceMap;\n}\n"
        }
    ]
}