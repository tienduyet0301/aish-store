{
    "sourceFile": "node_modules/@tailwindcss/node/dist/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891949366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Candidate, Variant } from './candidate';\nimport { compileAstNodes } from './compile';\nimport { ClassEntry, VariantEntry } from './intellisense';\nimport { Theme } from './theme';\nimport { Utilities } from './utilities';\nimport { Variants } from './variants';\nimport { Features } from 'tailwindcss';\nexport { Features } from 'tailwindcss';\n\ndeclare const DEBUG: boolean;\n\ndeclare const env_DEBUG: typeof DEBUG;\ndeclare namespace env {\n  export { env_DEBUG as DEBUG };\n}\n\ntype DesignSystem = {\n    theme: Theme;\n    utilities: Utilities;\n    variants: Variants;\n    invalidCandidates: Set<string>;\n    important: boolean;\n    getClassOrder(classes: string[]): [string, bigint | null][];\n    getClassList(): ClassEntry[];\n    getVariants(): VariantEntry[];\n    parseCandidate(candidate: string): Readonly<Candidate>[];\n    parseVariant(variant: string): Readonly<Variant> | null;\n    compileAstNodes(candidate: Candidate): ReturnType<typeof compileAstNodes>;\n    getVariantOrder(): Map<Variant, number>;\n    resolveThemeValue(path: string): string | undefined;\n    trackUsedVariables(raw: string): void;\n    candidatesToCss(classes: string[]): (string | null)[];\n};\n\ntype StyleRule = {\n    kind: 'rule';\n    selector: string;\n    nodes: AstNode[];\n};\ntype AtRule = {\n    kind: 'at-rule';\n    name: string;\n    params: string;\n    nodes: AstNode[];\n};\ntype Declaration = {\n    kind: 'declaration';\n    property: string;\n    value: string | undefined;\n    important: boolean;\n};\ntype Comment = {\n    kind: 'comment';\n    value: string;\n};\ntype Context = {\n    kind: 'context';\n    context: Record<string, string | boolean>;\n    nodes: AstNode[];\n};\ntype AtRoot = {\n    kind: 'at-root';\n    nodes: AstNode[];\n};\ntype AstNode = StyleRule | AtRule | Declaration | Comment | Context | AtRoot;\n\ntype Resolver = (id: string, base: string) => Promise<string | false | undefined>;\ninterface CompileOptions {\n    base: string;\n    onDependency: (path: string) => void;\n    shouldRewriteUrls?: boolean;\n    customCssResolver?: Resolver;\n    customJsResolver?: Resolver;\n}\ndeclare function compileAst(ast: AstNode[], options: CompileOptions): Promise<{\n    globs: {\n        base: string;\n        pattern: string;\n    }[];\n    root: \"none\" | {\n        base: string;\n        pattern: string;\n    } | null;\n    features: Features;\n    build(candidates: string[]): AstNode[];\n}>;\ndeclare function compile(css: string, options: CompileOptions): Promise<{\n    globs: {\n        base: string;\n        pattern: string;\n    }[];\n    root: \"none\" | {\n        base: string;\n        pattern: string;\n    } | null;\n    features: Features;\n    build(candidates: string[]): string;\n}>;\ndeclare function __unstable__loadDesignSystem(css: string, { base }: {\n    base: string;\n}): Promise<DesignSystem>;\ndeclare function loadModule(id: string, base: string, onDependency: (path: string) => void, customJsResolver?: Resolver): Promise<{\n    base: string;\n    module: any;\n}>;\n\ndeclare class Instrumentation implements Disposable {\n    #private;\n    private defaultFlush;\n    constructor(defaultFlush?: (message: string) => undefined);\n    hit(label: string): void;\n    start(label: string): void;\n    end(label: string): void;\n    reset(): void;\n    report(flush?: (message: string) => undefined): void;\n    [Symbol.dispose](): void;\n}\n\ndeclare function normalizePath(originalPath: string): string;\n\nexport { type CompileOptions, Instrumentation, type Resolver, __unstable__loadDesignSystem, compile, compileAst, env, loadModule, normalizePath };\n"
        }
    ]
}