{
    "sourceFile": "node_modules/@tailwindcss/oxide/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891950072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\n\n/* auto-generated by NAPI-RS */\n\nconst { existsSync, readFileSync } = require('fs')\nconst { join } = require('path')\n\nconst { platform, arch } = process\n\nlet nativeBinding = null\nlet localFileExisted = false\nlet loadError = null\n\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== 'function') {\n    try {\n      const lddPath = require('child_process').execSync('which ldd').toString().trim()\n      return readFileSync(lddPath, 'utf8').includes('musl')\n    } catch (e) {\n      return true\n    }\n  } else {\n    const { glibcVersionRuntime } = process.report.getReport().header\n    return !glibcVersionRuntime\n  }\n}\n\nswitch (platform) {\n  case 'android':\n    switch (arch) {\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'tailwindcss-oxide.android-arm64.node'))\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.android-arm64.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-android-arm64')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'arm':\n        localFileExisted = existsSync(join(__dirname, 'tailwindcss-oxide.android-arm-eabi.node'))\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.android-arm-eabi.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-android-arm-eabi')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`)\n    }\n    break\n  case 'win32':\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(\n          join(__dirname, 'tailwindcss-oxide.win32-x64-msvc.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.win32-x64-msvc.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-win32-x64-msvc')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'ia32':\n        localFileExisted = existsSync(\n          join(__dirname, 'tailwindcss-oxide.win32-ia32-msvc.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.win32-ia32-msvc.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-win32-ia32-msvc')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'arm64':\n        localFileExisted = existsSync(\n          join(__dirname, 'tailwindcss-oxide.win32-arm64-msvc.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.win32-arm64-msvc.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-win32-arm64-msvc')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`)\n    }\n    break\n  case 'darwin':\n    localFileExisted = existsSync(join(__dirname, 'tailwindcss-oxide.darwin-universal.node'))\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./tailwindcss-oxide.darwin-universal.node')\n      } else {\n        nativeBinding = require('@tailwindcss/oxide-darwin-universal')\n      }\n      break\n    } catch {}\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(join(__dirname, 'tailwindcss-oxide.darwin-x64.node'))\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.darwin-x64.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-darwin-x64')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      case 'arm64':\n        localFileExisted = existsSync(\n          join(__dirname, 'tailwindcss-oxide.darwin-arm64.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.darwin-arm64.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-darwin-arm64')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`)\n    }\n    break\n  case 'freebsd':\n    if (arch !== 'x64') {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)\n    }\n    localFileExisted = existsSync(join(__dirname, 'tailwindcss-oxide.freebsd-x64.node'))\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./tailwindcss-oxide.freebsd-x64.node')\n      } else {\n        nativeBinding = require('@tailwindcss/oxide-freebsd-x64')\n      }\n    } catch (e) {\n      loadError = e\n    }\n    break\n  case 'linux':\n    switch (arch) {\n      case 'x64':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-x64-musl.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-x64-musl.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-x64-musl')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-x64-gnu.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-x64-gnu.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-x64-gnu')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 'arm64':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-arm64-musl.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-arm64-musl.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-arm64-musl')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-arm64-gnu.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-arm64-gnu.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-arm64-gnu')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 'arm':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-arm-musleabihf.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-arm-musleabihf.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-arm-musleabihf')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-arm-gnueabihf.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-arm-gnueabihf.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-arm-gnueabihf')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 'riscv64':\n        if (isMusl()) {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-riscv64-musl.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-riscv64-musl.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-riscv64-musl')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        } else {\n          localFileExisted = existsSync(\n            join(__dirname, 'tailwindcss-oxide.linux-riscv64-gnu.node')\n          )\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./tailwindcss-oxide.linux-riscv64-gnu.node')\n            } else {\n              nativeBinding = require('@tailwindcss/oxide-linux-riscv64-gnu')\n            }\n          } catch (e) {\n            loadError = e\n          }\n        }\n        break\n      case 's390x':\n        localFileExisted = existsSync(\n          join(__dirname, 'tailwindcss-oxide.linux-s390x-gnu.node')\n        )\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./tailwindcss-oxide.linux-s390x-gnu.node')\n          } else {\n            nativeBinding = require('@tailwindcss/oxide-linux-s390x-gnu')\n          }\n        } catch (e) {\n          loadError = e\n        }\n        break\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`)\n    }\n    break\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)\n}\n\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError\n  }\n  throw new Error(`Failed to load native binding`)\n}\n\nconst { Scanner } = nativeBinding\n\nmodule.exports.Scanner = Scanner\n"
        }
    ]
}