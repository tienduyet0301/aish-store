{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/_patch-base.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891933602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isModuleResolutionError = exports.ESLINT_MAJOR_VERSION = exports.Naming = exports.ModuleResolver = exports.configArrayFactory = exports.eslintFolder = exports.eslintPackageVersion = void 0;\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\nconst path_1 = __importDefault(require(\"path\"));\nconst isModuleResolutionError = (ex) => typeof ex === 'object' && !!ex && 'code' in ex && ex.code === 'MODULE_NOT_FOUND';\nexports.isModuleResolutionError = isModuleResolutionError;\n// Module path for eslintrc.cjs\n// Example: \".../@eslint/eslintrc/dist/eslintrc.cjs\"\nlet eslintrcBundlePath = undefined;\n// Module path for config-array-factory.js\n// Example: \".../@eslint/eslintrc/lib/config-array-factory\"\nlet configArrayFactoryPath = undefined;\n// Module path for relative-module-resolver.js\n// Example: \".../@eslint/eslintrc/lib/shared/relative-module-resolver\"\nlet moduleResolverPath = undefined;\n// Module path for naming.js\n// Example: \".../@eslint/eslintrc/lib/shared/naming\"\nlet namingPath = undefined;\n// Folder path where ESLint's package.json can be found\n// Example: \".../node_modules/eslint\"\nlet eslintFolder = undefined;\nexports.eslintFolder = eslintFolder;\n// Probe for the ESLint >=8.0.0 layout:\nfor (let currentModule = module;;) {\n    if (!eslintrcBundlePath) {\n        if (currentModule.filename.endsWith('eslintrc.cjs')) {\n            // For ESLint >=8.0.0, all @eslint/eslintrc code is bundled at this path:\n            //   .../@eslint/eslintrc/dist/eslintrc.cjs\n            try {\n                const eslintrcFolderPath = path_1.default.dirname(require.resolve('@eslint/eslintrc/package.json', { paths: [currentModule.path] }));\n                // Make sure we actually resolved the module in our call path\n                // and not some other spurious dependency.\n                const resolvedEslintrcBundlePath = path_1.default.join(eslintrcFolderPath, 'dist/eslintrc.cjs');\n                if (resolvedEslintrcBundlePath === currentModule.filename) {\n                    eslintrcBundlePath = resolvedEslintrcBundlePath;\n                }\n            }\n            catch (ex) {\n                // Module resolution failures are expected, as we're walking\n                // up our require stack to look for eslint. All other errors\n                // are re-thrown.\n                if (!isModuleResolutionError(ex)) {\n                    throw ex;\n                }\n            }\n        }\n    }\n    else {\n        // Next look for a file in ESLint's folder\n        //   .../eslint/lib/cli-engine/cli-engine.js\n        try {\n            const eslintCandidateFolder = path_1.default.dirname(require.resolve('eslint/package.json', {\n                paths: [currentModule.path]\n            }));\n            // Make sure we actually resolved the module in our call path\n            // and not some other spurious dependency.\n            if (currentModule.filename.startsWith(eslintCandidateFolder + path_1.default.sep)) {\n                exports.eslintFolder = eslintFolder = eslintCandidateFolder;\n                break;\n            }\n        }\n        catch (ex) {\n            // Module resolution failures are expected, as we're walking\n            // up our require stack to look for eslint. All other errors\n            // are re-thrown.\n            if (!isModuleResolutionError(ex)) {\n                throw ex;\n            }\n        }\n    }\n    if (!currentModule.parent) {\n        break;\n    }\n    currentModule = currentModule.parent;\n}\nif (!eslintFolder) {\n    // Probe for the ESLint >=7.12.0 layout:\n    for (let currentModule = module;;) {\n        if (!configArrayFactoryPath) {\n            // For ESLint >=7.12.0, config-array-factory.js is at this path:\n            //   .../@eslint/eslintrc/lib/config-array-factory.js\n            try {\n                const eslintrcFolder = path_1.default.dirname(require.resolve('@eslint/eslintrc/package.json', {\n                    paths: [currentModule.path]\n                }));\n                const resolvedConfigArrayFactoryPath = path_1.default.join(eslintrcFolder, '/lib/config-array-factory.js');\n                if (resolvedConfigArrayFactoryPath === currentModule.filename) {\n                    configArrayFactoryPath = resolvedConfigArrayFactoryPath;\n                    moduleResolverPath = `${eslintrcFolder}/lib/shared/relative-module-resolver`;\n                    namingPath = `${eslintrcFolder}/lib/shared/naming`;\n                }\n            }\n            catch (ex) {\n                // Module resolution failures are expected, as we're walking\n                // up our require stack to look for eslint. All other errors\n                // are re-thrown.\n                if (!isModuleResolutionError(ex)) {\n                    throw ex;\n                }\n            }\n        }\n        else if (currentModule.filename.endsWith('cli-engine.js')) {\n            // Next look for a file in ESLint's folder\n            //   .../eslint/lib/cli-engine/cli-engine.js\n            try {\n                const eslintCandidateFolder = path_1.default.dirname(require.resolve('eslint/package.json', {\n                    paths: [currentModule.path]\n                }));\n                if (path_1.default.join(eslintCandidateFolder, 'lib/cli-engine/cli-engine.js') === currentModule.filename) {\n                    exports.eslintFolder = eslintFolder = eslintCandidateFolder;\n                    break;\n                }\n            }\n            catch (ex) {\n                // Module resolution failures are expected, as we're walking\n                // up our require stack to look for eslint. All other errors\n                // are rethrown.\n                if (!isModuleResolutionError(ex)) {\n                    throw ex;\n                }\n            }\n        }\n        if (!currentModule.parent) {\n            break;\n        }\n        currentModule = currentModule.parent;\n    }\n}\nif (!eslintFolder) {\n    // Probe for the <7.12.0 layout:\n    for (let currentModule = module;;) {\n        // For ESLint <7.12.0, config-array-factory.js was at this path:\n        //   .../eslint/lib/cli-engine/config-array-factory.js\n        if (/[\\\\/]eslint[\\\\/]lib[\\\\/]cli-engine[\\\\/]config-array-factory\\.js$/i.test(currentModule.filename)) {\n            exports.eslintFolder = eslintFolder = path_1.default.join(path_1.default.dirname(currentModule.filename), '../..');\n            configArrayFactoryPath = `${eslintFolder}/lib/cli-engine/config-array-factory`;\n            moduleResolverPath = `${eslintFolder}/lib/shared/relative-module-resolver`;\n            // The naming module was moved to @eslint/eslintrc in ESLint 7.8.0, which is also when the @eslint/eslintrc\n            // package was created and added to ESLint, so we need to probe for whether it's in the old or new location.\n            let eslintrcFolder;\n            try {\n                eslintrcFolder = path_1.default.dirname(require.resolve('@eslint/eslintrc/package.json', {\n                    paths: [currentModule.path]\n                }));\n            }\n            catch (ex) {\n                if (!isModuleResolutionError(ex)) {\n                    throw ex;\n                }\n            }\n            namingPath = `${eslintrcFolder !== null && eslintrcFolder !== void 0 ? eslintrcFolder : eslintFolder}/lib/shared/naming`;\n            break;\n        }\n        if (!currentModule.parent) {\n            // This was tested with ESLint 6.1.0 .. 7.12.1.\n            throw new Error('Failed to patch ESLint because the calling module was not recognized.\\n' +\n                'If you are using a newer ESLint version that may be unsupported, please create a GitHub issue:\\n' +\n                'https://github.com/microsoft/rushstack/issues');\n        }\n        currentModule = currentModule.parent;\n    }\n}\n// Detect the ESLint package version\nconst eslintPackageJsonPath = `${eslintFolder}/package.json`;\nconst eslintPackageObject = require(eslintPackageJsonPath);\nexports.eslintPackageVersion = eslintPackageObject.version;\nconst ESLINT_MAJOR_VERSION = parseInt(exports.eslintPackageVersion, 10);\nexports.ESLINT_MAJOR_VERSION = ESLINT_MAJOR_VERSION;\nif (isNaN(ESLINT_MAJOR_VERSION)) {\n    throw new Error(`Unable to parse ESLint version \"${exports.eslintPackageVersion}\" in file \"${eslintPackageJsonPath}\"`);\n}\nif (!(ESLINT_MAJOR_VERSION >= 6 && ESLINT_MAJOR_VERSION <= 9)) {\n    throw new Error('The ESLint patch script has only been tested with ESLint version 6.x, 7.x, 8.x, and 9.x.' +\n        ` (Your version: ${exports.eslintPackageVersion})\\n` +\n        'Consider reporting a GitHub issue:\\n' +\n        'https://github.com/microsoft/rushstack/issues');\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet configArrayFactory;\nif (ESLINT_MAJOR_VERSION >= 8) {\n    exports.configArrayFactory = configArrayFactory = require(eslintrcBundlePath).Legacy.ConfigArrayFactory;\n}\nelse {\n    exports.configArrayFactory = configArrayFactory = require(configArrayFactoryPath).ConfigArrayFactory;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet ModuleResolver;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet Naming;\nif (ESLINT_MAJOR_VERSION >= 8) {\n    exports.ModuleResolver = ModuleResolver = require(eslintrcBundlePath).Legacy.ModuleResolver;\n    exports.Naming = Naming = require(eslintrcBundlePath).Legacy.naming;\n}\nelse {\n    exports.ModuleResolver = ModuleResolver = require(moduleResolverPath);\n    exports.Naming = Naming = require(namingPath);\n}\n//# sourceMappingURL=_patch-base.js.map"
        }
    ]
}