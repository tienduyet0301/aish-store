{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/modern-module-resolution.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891933340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\nconst _patch_base_1 = require(\"./_patch-base\");\n// error: \"The argument 'filename' must be a file URL object, file URL string, or absolute path string. Received ''\"\nconst isInvalidImporterPath = (ex) => (ex === null || ex === void 0 ? void 0 : ex.code) === 'ERR_INVALID_ARG_VALUE';\nif (!_patch_base_1.configArrayFactory.__loadPluginPatched) {\n    _patch_base_1.configArrayFactory.__loadPluginPatched = true;\n    // eslint-disable-next-line @typescript-eslint/typedef\n    const originalLoadPlugin = _patch_base_1.configArrayFactory.prototype._loadPlugin;\n    if (_patch_base_1.ESLINT_MAJOR_VERSION === 6) {\n        // ESLint 6.x\n        // https://github.com/eslint/eslint/blob/9738f8cc864d769988ccf42bb70f524444df1349/lib/cli-engine/config-array-factory.js#L915\n        _patch_base_1.configArrayFactory.prototype._loadPlugin = function (name, importerPath, importerName) {\n            const originalResolve = _patch_base_1.ModuleResolver.resolve;\n            try {\n                _patch_base_1.ModuleResolver.resolve = function (moduleName, relativeToPath) {\n                    try {\n                        // resolve using importerPath instead of relativeToPath\n                        return originalResolve.call(this, moduleName, importerPath);\n                    }\n                    catch (e) {\n                        if ((0, _patch_base_1.isModuleResolutionError)(e) || isInvalidImporterPath(e)) {\n                            return originalResolve.call(this, moduleName, relativeToPath);\n                        }\n                        throw e;\n                    }\n                };\n                return originalLoadPlugin.apply(this, arguments);\n            }\n            finally {\n                _patch_base_1.ModuleResolver.resolve = originalResolve;\n            }\n        };\n    }\n    else {\n        // ESLint 7.x || 8.x\n        // https://github.com/eslint/eslintrc/blob/242d569020dfe4f561e4503787b99ec016337457/lib/config-array-factory.js#L1023\n        _patch_base_1.configArrayFactory.prototype._loadPlugin = function (name, ctx) {\n            const originalResolve = _patch_base_1.ModuleResolver.resolve;\n            try {\n                _patch_base_1.ModuleResolver.resolve = function (moduleName, relativeToPath) {\n                    try {\n                        // resolve using ctx.filePath instead of relativeToPath\n                        return originalResolve.call(this, moduleName, ctx.filePath);\n                    }\n                    catch (e) {\n                        if ((0, _patch_base_1.isModuleResolutionError)(e) || isInvalidImporterPath(e)) {\n                            return originalResolve.call(this, moduleName, relativeToPath);\n                        }\n                        throw e;\n                    }\n                };\n                return originalLoadPlugin.apply(this, arguments);\n            }\n            finally {\n                _patch_base_1.ModuleResolver.resolve = originalResolve;\n            }\n        };\n    }\n}\n//# sourceMappingURL=modern-module-resolution.js.map"
        }
    ]
}