{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/eslint-bulk-suppressions/cli/runEslint.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891924888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.runEslintAsync = void 0;\nconst get_eslint_cli_1 = require(\"./utils/get-eslint-cli\");\nasync function runEslintAsync(files, mode) {\n    const cwd = process.cwd();\n    const eslintPath = (0, get_eslint_cli_1.getEslintPath)(cwd);\n    const { ESLint } = require(eslintPath);\n    const eslint = new ESLint({\n        useEslintrc: true,\n        cwd\n    });\n    let results;\n    try {\n        results = await eslint.lintFiles(files);\n    }\n    catch (e) {\n        throw new Error(`@rushstack/eslint-bulk execution error: ${e.message}`);\n    }\n    const { write, prune } = await Promise.resolve().then(() => __importStar(require('../bulk-suppressions-patch')));\n    switch (mode) {\n        case 'suppress': {\n            await write();\n            break;\n        }\n        case 'prune': {\n            await prune();\n            break;\n        }\n    }\n    if (results.length > 0) {\n        const stylishFormatter = await eslint.loadFormatter();\n        const formattedResults = await Promise.resolve(stylishFormatter.format(results));\n        console.log(formattedResults);\n    }\n    console.log('@rushstack/eslint-bulk: Successfully pruned unused suppressions in all .eslint-bulk-suppressions.json ' +\n        `files under directory ${cwd}`);\n}\nexports.runEslintAsync = runEslintAsync;\n//# sourceMappingURL=runEslint.js.map"
        }
    ]
}