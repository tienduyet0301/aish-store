{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/eslint-bulk-suppressions/cli/prune.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891924438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pruneAsync = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst print_help_1 = require(\"./utils/print-help\");\nconst runEslint_1 = require(\"./runEslint\");\nconst constants_1 = require(\"../constants\");\nconst bulk_suppressions_file_1 = require(\"../bulk-suppressions-file\");\nasync function pruneAsync() {\n    const args = process.argv.slice(3);\n    if (args.includes('--help') || args.includes('-h')) {\n        (0, print_help_1.printPruneHelp)();\n        process.exit(0);\n    }\n    if (args.length > 0) {\n        throw new Error(`@rushstack/eslint-bulk: Unknown arguments: ${args.join(' ')}`);\n    }\n    const normalizedCwd = process.cwd().replace(/\\\\/g, '/');\n    const allFiles = await getAllFilesWithExistingSuppressionsForCwdAsync(normalizedCwd);\n    if (allFiles.length > 0) {\n        process.env[constants_1.ESLINT_BULK_PRUNE_ENV_VAR_NAME] = '1';\n        console.log(`Pruning suppressions for ${allFiles.length} files...`);\n        await (0, runEslint_1.runEslintAsync)(allFiles, 'prune');\n    }\n    else {\n        console.log('No files with existing suppressions found.');\n        (0, bulk_suppressions_file_1.deleteBulkSuppressionsFileInEslintrcFolder)(normalizedCwd);\n    }\n}\nexports.pruneAsync = pruneAsync;\nasync function getAllFilesWithExistingSuppressionsForCwdAsync(normalizedCwd) {\n    const { jsonObject: bulkSuppressionsConfigJson } = (0, bulk_suppressions_file_1.getSuppressionsConfigForEslintrcFolderPath)(normalizedCwd);\n    const allFiles = new Set();\n    for (const { file: filePath } of bulkSuppressionsConfigJson.suppressions) {\n        allFiles.add(filePath);\n    }\n    const allFilesArray = Array.from(allFiles);\n    const allExistingFiles = [];\n    // TODO: limit parallelism here with something similar to `Async.forEachAsync` from `node-core-library`.\n    await Promise.all(allFilesArray.map(async (filePath) => {\n        try {\n            await fs_1.default.promises.access(filePath, fs_1.default.constants.F_OK);\n            allExistingFiles.push(filePath);\n        }\n        catch (_a) {\n            // Doesn't exist - ignore\n        }\n    }));\n    console.log(`Found ${allExistingFiles.length} files with existing suppressions.`);\n    const deletedCount = allFilesArray.length - allExistingFiles.length;\n    if (deletedCount > 0) {\n        console.log(`${deletedCount} files with suppressions were deleted.`);\n    }\n    return allExistingFiles;\n}\n//# sourceMappingURL=prune.js.map"
        }
    ]
}