{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/eslint-bulk-suppressions/bulk-suppressions-file.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891924157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeSuppression = exports.deleteBulkSuppressionsFileInEslintrcFolder = exports.writeSuppressionsJsonToFile = exports.getAllBulkSuppressionsConfigsByEslintrcFolderPath = exports.getSuppressionsConfigForEslintrcFolderPath = void 0;\nconst fs_1 = __importDefault(require(\"fs\"));\nconst constants_1 = require(\"./constants\");\nconst IS_RUNNING_IN_VSCODE = process.env[constants_1.VSCODE_PID_ENV_VAR_NAME] !== undefined;\nconst TEN_SECONDS_MS = 10 * 1000;\nconst SUPPRESSIONS_JSON_FILENAME = '.eslint-bulk-suppressions.json';\nfunction throwIfAnythingOtherThanNotExistError(e) {\n    if ((e === null || e === void 0 ? void 0 : e.code) !== 'ENOENT') {\n        // Throw an error if any other error than file not found\n        throw e;\n    }\n}\nconst suppressionsJsonByFolderPath = new Map();\nfunction getSuppressionsConfigForEslintrcFolderPath(eslintrcFolderPath) {\n    const cachedSuppressionsConfig = suppressionsJsonByFolderPath.get(eslintrcFolderPath);\n    let shouldLoad;\n    let suppressionsConfig;\n    if (cachedSuppressionsConfig) {\n        shouldLoad = IS_RUNNING_IN_VSCODE && cachedSuppressionsConfig.readTime < Date.now() - TEN_SECONDS_MS;\n        suppressionsConfig = cachedSuppressionsConfig.suppressionsConfig;\n    }\n    else {\n        shouldLoad = true;\n    }\n    if (shouldLoad) {\n        const suppressionsPath = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n        let rawJsonFile;\n        try {\n            rawJsonFile = fs_1.default.readFileSync(suppressionsPath).toString();\n        }\n        catch (e) {\n            throwIfAnythingOtherThanNotExistError(e);\n        }\n        if (!rawJsonFile) {\n            suppressionsConfig = {\n                serializedSuppressions: new Set(),\n                jsonObject: { suppressions: [] },\n                newSerializedSuppressions: new Set(),\n                newJsonObject: { suppressions: [] }\n            };\n        }\n        else {\n            const jsonObject = JSON.parse(rawJsonFile);\n            validateSuppressionsJson(jsonObject);\n            const serializedSuppressions = new Set();\n            for (const suppression of jsonObject.suppressions) {\n                serializedSuppressions.add(serializeSuppression(suppression));\n            }\n            suppressionsConfig = {\n                serializedSuppressions,\n                jsonObject,\n                newSerializedSuppressions: new Set(),\n                newJsonObject: { suppressions: [] }\n            };\n        }\n        suppressionsJsonByFolderPath.set(eslintrcFolderPath, { readTime: Date.now(), suppressionsConfig });\n    }\n    return suppressionsConfig;\n}\nexports.getSuppressionsConfigForEslintrcFolderPath = getSuppressionsConfigForEslintrcFolderPath;\nfunction getAllBulkSuppressionsConfigsByEslintrcFolderPath() {\n    const result = [];\n    for (const [eslintrcFolderPath, { suppressionsConfig }] of suppressionsJsonByFolderPath) {\n        result.push([eslintrcFolderPath, suppressionsConfig]);\n    }\n    return result;\n}\nexports.getAllBulkSuppressionsConfigsByEslintrcFolderPath = getAllBulkSuppressionsConfigsByEslintrcFolderPath;\nfunction writeSuppressionsJsonToFile(eslintrcFolderPath, suppressionsConfig) {\n    suppressionsJsonByFolderPath.set(eslintrcFolderPath, { readTime: Date.now(), suppressionsConfig });\n    const suppressionsPath = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n    if (suppressionsConfig.jsonObject.suppressions.length === 0) {\n        deleteFile(suppressionsPath);\n    }\n    else {\n        suppressionsConfig.jsonObject.suppressions.sort(compareSuppressions);\n        fs_1.default.writeFileSync(suppressionsPath, JSON.stringify(suppressionsConfig.jsonObject, undefined, 2));\n    }\n}\nexports.writeSuppressionsJsonToFile = writeSuppressionsJsonToFile;\nfunction deleteBulkSuppressionsFileInEslintrcFolder(eslintrcFolderPath) {\n    const suppressionsPath = `${eslintrcFolderPath}/${SUPPRESSIONS_JSON_FILENAME}`;\n    deleteFile(suppressionsPath);\n}\nexports.deleteBulkSuppressionsFileInEslintrcFolder = deleteBulkSuppressionsFileInEslintrcFolder;\nfunction deleteFile(filePath) {\n    try {\n        fs_1.default.unlinkSync(filePath);\n    }\n    catch (e) {\n        throwIfAnythingOtherThanNotExistError(e);\n    }\n}\nfunction serializeSuppression({ file, scopeId, rule }) {\n    return `${file}|${scopeId}|${rule}`;\n}\nexports.serializeSuppression = serializeSuppression;\nfunction compareSuppressions(a, b) {\n    if (a.file < b.file) {\n        return -1;\n    }\n    else if (a.file > b.file) {\n        return 1;\n    }\n    else if (a.scopeId < b.scopeId) {\n        return -1;\n    }\n    else if (a.scopeId > b.scopeId) {\n        return 1;\n    }\n    else if (a.rule < b.rule) {\n        return -1;\n    }\n    else if (a.rule > b.rule) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\nfunction validateSuppressionsJson(json) {\n    if (typeof json !== 'object') {\n        throw new Error(`Invalid JSON object: ${JSON.stringify(json, null, 2)}`);\n    }\n    if (!json) {\n        throw new Error('JSON object is null.');\n    }\n    const EXPECTED_ROOT_PROPERTY_NAMES = new Set(['suppressions']);\n    for (const propertyName of Object.getOwnPropertyNames(json)) {\n        if (!EXPECTED_ROOT_PROPERTY_NAMES.has(propertyName)) {\n            throw new Error(`Unexpected property name: ${propertyName}`);\n        }\n    }\n    const { suppressions } = json;\n    if (!suppressions) {\n        throw new Error('Missing \"suppressions\" property.');\n    }\n    if (!Array.isArray(suppressions)) {\n        throw new Error('\"suppressions\" property is not an array.');\n    }\n    const EXPECTED_SUPPRESSION_PROPERTY_NAMES = new Set(['file', 'scopeId', 'rule']);\n    for (const suppression of suppressions) {\n        if (typeof suppression !== 'object') {\n            throw new Error(`Invalid suppression: ${JSON.stringify(suppression, null, 2)}`);\n        }\n        if (!suppression) {\n            throw new Error(`Suppression is null: ${JSON.stringify(suppression, null, 2)}`);\n        }\n        for (const propertyName of Object.getOwnPropertyNames(suppression)) {\n            if (!EXPECTED_SUPPRESSION_PROPERTY_NAMES.has(propertyName)) {\n                throw new Error(`Unexpected property name: ${propertyName}`);\n            }\n        }\n        for (const propertyName of EXPECTED_SUPPRESSION_PROPERTY_NAMES) {\n            if (!suppression.hasOwnProperty(propertyName)) {\n                throw new Error(`Missing \"${propertyName}\" property in suppression: ${JSON.stringify(suppression, null, 2)}`);\n            }\n            else if (typeof suppression[propertyName] !== 'string') {\n                throw new Error(`\"${propertyName}\" property in suppression is not a string: ${JSON.stringify(suppression, null, 2)}`);\n            }\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=bulk-suppressions-file.js.map"
        }
    ]
}