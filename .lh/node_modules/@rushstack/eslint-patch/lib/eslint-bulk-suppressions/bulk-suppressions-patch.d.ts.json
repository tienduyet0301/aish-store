{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/eslint-bulk-suppressions/bulk-suppressions-patch.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891924229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESTree } from '@typescript-eslint/types';\nimport { type IBulkSuppressionsConfig, type ISuppression } from './bulk-suppressions-file';\ndeclare const SUPPRESSION_SYMBOL: unique symbol;\ninterface IProblem {\n    [SUPPRESSION_SYMBOL]?: {\n        config: IBulkSuppressionsConfig;\n        suppression: ISuppression;\n        serializedSuppression: string;\n    };\n}\nexport declare function shouldBulkSuppress(params: {\n    filename: string;\n    currentNode: TSESTree.Node;\n    ruleId: string;\n    problem: IProblem;\n}): boolean;\nexport declare function prune(): void;\nexport declare function write(): void;\nexport declare function requireFromPathToLinterJS(importPath: string): import('eslint').Linter;\nexport declare function patchClass<T, U extends T>(originalClass: new () => T, patchedClass: new () => U): void;\n/**\n * This returns a wrapped version of the \"verify\" function from ESLint's Linter class\n * that postprocesses rule violations that weren't suppressed by comments. This postprocessing\n * records suppressions that weren't otherwise suppressed by comments to be used\n * by the \"suppress\" and \"prune\" commands.\n */\nexport declare function extendVerifyFunction(originalFn: (this: unknown, ...args: unknown[]) => IProblem[] | undefined): (this: unknown, ...args: unknown[]) => IProblem[] | undefined;\nexport {};\n//# sourceMappingURL=bulk-suppressions-patch.d.ts.map"
        }
    ]
}