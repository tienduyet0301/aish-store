{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/eslint-bulk-suppressions/ast-guards.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891924007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isNodeWithName = exports.isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned = exports.isNormalObjectPropertyWithAnonymousExpressionAssigned = exports.isNormalVariableDeclaratorWithAnonymousExpressionAssigned = exports.isNormalAssignmentPatternWithAnonymousExpressionAssigned = exports.isNormalVariableDeclarator = exports.isNormalObjectProperty = exports.isNormalMethodDefinition = exports.isNormalClassPropertyDefinition = exports.isNormalAssignmentPattern = exports.isNormalAnonymousExpression = exports.isFunctionExpressionWithName = exports.isClassExpressionWithName = exports.isStringLiteral = exports.isPropertyNameNonComputed = exports.isNumberLiteral = exports.isFunctionDeclarationWithName = exports.isClassPropertyNameNonComputed = exports.isClassDeclarationWithName = exports.isVariableDeclarator = exports.isTSTypeAliasDeclaration = exports.isTSQualifiedName = exports.isTSModuleDeclaration = exports.isTSInterfaceDeclaration = exports.isTSEnumDeclaration = exports.isPropertyDefinition = exports.isProperty = exports.isPrivateIdentifier = exports.isObjectExpression = exports.isMethodDefinition = exports.isLiteral = exports.isIdentifier = exports.isFunctionExpression = exports.isFunctionDeclaration = exports.isExpression = exports.isExportDefaultDeclaration = exports.isClassExpression = exports.isClassDeclaration = exports.isAssignmentPattern = exports.isArrowFunctionExpression = exports.isArrayExpression = void 0;\nfunction isArrayExpression(node) {\n    return node.type === 'ArrayExpression';\n}\nexports.isArrayExpression = isArrayExpression;\nfunction isArrowFunctionExpression(node) {\n    return node.type === 'ArrowFunctionExpression';\n}\nexports.isArrowFunctionExpression = isArrowFunctionExpression;\n/** default parameters */\nfunction isAssignmentPattern(node) {\n    return node.type === 'AssignmentPattern';\n}\nexports.isAssignmentPattern = isAssignmentPattern;\nfunction isClassDeclaration(node) {\n    return node.type === 'ClassDeclaration';\n}\nexports.isClassDeclaration = isClassDeclaration;\nfunction isClassExpression(node) {\n    return node.type === 'ClassExpression';\n}\nexports.isClassExpression = isClassExpression;\nfunction isExportDefaultDeclaration(node) {\n    return node.type === 'ExportDefaultDeclaration';\n}\nexports.isExportDefaultDeclaration = isExportDefaultDeclaration;\nfunction isExpression(node) {\n    return node.type.includes('Expression');\n}\nexports.isExpression = isExpression;\nfunction isFunctionDeclaration(node) {\n    return node.type === 'FunctionDeclaration';\n}\nexports.isFunctionDeclaration = isFunctionDeclaration;\nfunction isFunctionExpression(node) {\n    return node.type === 'FunctionExpression';\n}\nexports.isFunctionExpression = isFunctionExpression;\nfunction isIdentifier(node) {\n    return node.type === 'Identifier';\n}\nexports.isIdentifier = isIdentifier;\nfunction isLiteral(node) {\n    return node.type === 'Literal';\n}\nexports.isLiteral = isLiteral;\nfunction isMethodDefinition(node) {\n    return node.type === 'MethodDefinition';\n}\nexports.isMethodDefinition = isMethodDefinition;\nfunction isObjectExpression(node) {\n    return node.type === 'ObjectExpression';\n}\nexports.isObjectExpression = isObjectExpression;\nfunction isPrivateIdentifier(node) {\n    return node.type === 'PrivateIdentifier';\n}\nexports.isPrivateIdentifier = isPrivateIdentifier;\nfunction isProperty(node) {\n    return node.type === 'Property';\n}\nexports.isProperty = isProperty;\nfunction isPropertyDefinition(node) {\n    return node.type === 'PropertyDefinition';\n}\nexports.isPropertyDefinition = isPropertyDefinition;\nfunction isTSEnumDeclaration(node) {\n    return node.type === 'TSEnumDeclaration';\n}\nexports.isTSEnumDeclaration = isTSEnumDeclaration;\nfunction isTSInterfaceDeclaration(node) {\n    return node.type === 'TSInterfaceDeclaration';\n}\nexports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;\nfunction isTSModuleDeclaration(node) {\n    return node.type === 'TSModuleDeclaration';\n}\nexports.isTSModuleDeclaration = isTSModuleDeclaration;\nfunction isTSQualifiedName(node) {\n    return node.type === 'TSQualifiedName';\n}\nexports.isTSQualifiedName = isTSQualifiedName;\nfunction isTSTypeAliasDeclaration(node) {\n    return node.type === 'TSTypeAliasDeclaration';\n}\nexports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;\nfunction isVariableDeclarator(node) {\n    return node.type === 'VariableDeclarator';\n}\nexports.isVariableDeclarator = isVariableDeclarator;\n// Compound Type Guards for @typescript-eslint/types ast-spec compound types\nfunction isClassDeclarationWithName(node) {\n    return isClassDeclaration(node) && node.id !== null;\n}\nexports.isClassDeclarationWithName = isClassDeclarationWithName;\nfunction isClassPropertyNameNonComputed(node) {\n    return isPrivateIdentifier(node) || isPropertyNameNonComputed(node);\n}\nexports.isClassPropertyNameNonComputed = isClassPropertyNameNonComputed;\nfunction isFunctionDeclarationWithName(node) {\n    return isFunctionDeclaration(node) && node.id !== null;\n}\nexports.isFunctionDeclarationWithName = isFunctionDeclarationWithName;\nfunction isNumberLiteral(node) {\n    return isLiteral(node) && typeof node.value === 'number';\n}\nexports.isNumberLiteral = isNumberLiteral;\nfunction isPropertyNameNonComputed(node) {\n    return isIdentifier(node) || isNumberLiteral(node) || isStringLiteral(node);\n}\nexports.isPropertyNameNonComputed = isPropertyNameNonComputed;\nfunction isStringLiteral(node) {\n    return isLiteral(node) && typeof node.value === 'string';\n}\nexports.isStringLiteral = isStringLiteral;\nfunction isClassExpressionWithName(node) {\n    return isClassExpression(node) && node.id !== null;\n}\nexports.isClassExpressionWithName = isClassExpressionWithName;\nfunction isFunctionExpressionWithName(node) {\n    return isFunctionExpression(node) && node.id !== null;\n}\nexports.isFunctionExpressionWithName = isFunctionExpressionWithName;\nfunction isNormalAnonymousExpression(node) {\n    const ANONYMOUS_EXPRESSION_GUARDS = [\n        isArrowFunctionExpression,\n        isClassExpression,\n        isFunctionExpression,\n        isObjectExpression\n    ];\n    return ANONYMOUS_EXPRESSION_GUARDS.some((guard) => guard(node));\n}\nexports.isNormalAnonymousExpression = isNormalAnonymousExpression;\nfunction isNormalAssignmentPattern(node) {\n    return isAssignmentPattern(node) && isIdentifier(node.left);\n}\nexports.isNormalAssignmentPattern = isNormalAssignmentPattern;\nfunction isNormalClassPropertyDefinition(node) {\n    return (isPropertyDefinition(node) &&\n        (isIdentifier(node.key) || isPrivateIdentifier(node.key)) &&\n        node.value !== null);\n}\nexports.isNormalClassPropertyDefinition = isNormalClassPropertyDefinition;\nfunction isNormalMethodDefinition(node) {\n    return isMethodDefinition(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key));\n}\nexports.isNormalMethodDefinition = isNormalMethodDefinition;\nfunction isNormalObjectProperty(node) {\n    return isProperty(node) && (isIdentifier(node.key) || isPrivateIdentifier(node.key));\n}\nexports.isNormalObjectProperty = isNormalObjectProperty;\nfunction isNormalVariableDeclarator(node) {\n    return isVariableDeclarator(node) && isIdentifier(node.id) && node.init !== null;\n}\nexports.isNormalVariableDeclarator = isNormalVariableDeclarator;\nfunction isNormalAssignmentPatternWithAnonymousExpressionAssigned(node) {\n    return isNormalAssignmentPattern(node) && isNormalAnonymousExpression(node.right);\n}\nexports.isNormalAssignmentPatternWithAnonymousExpressionAssigned = isNormalAssignmentPatternWithAnonymousExpressionAssigned;\nfunction isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node) {\n    return isNormalVariableDeclarator(node) && isNormalAnonymousExpression(node.init);\n}\nexports.isNormalVariableDeclaratorWithAnonymousExpressionAssigned = isNormalVariableDeclaratorWithAnonymousExpressionAssigned;\nfunction isNormalObjectPropertyWithAnonymousExpressionAssigned(node) {\n    return isNormalObjectProperty(node) && isNormalAnonymousExpression(node.value);\n}\nexports.isNormalObjectPropertyWithAnonymousExpressionAssigned = isNormalObjectPropertyWithAnonymousExpressionAssigned;\nfunction isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node) {\n    return isNormalClassPropertyDefinition(node) && isNormalAnonymousExpression(node.value);\n}\nexports.isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned = isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned;\nfunction isNodeWithName(node) {\n    return (isClassDeclarationWithName(node) ||\n        isFunctionDeclarationWithName(node) ||\n        isClassExpressionWithName(node) ||\n        isFunctionExpressionWithName(node) ||\n        isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node) ||\n        isNormalObjectPropertyWithAnonymousExpressionAssigned(node) ||\n        isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node) ||\n        isNormalAssignmentPatternWithAnonymousExpressionAssigned(node) ||\n        isNormalMethodDefinition(node) ||\n        isTSEnumDeclaration(node) ||\n        isTSInterfaceDeclaration(node) ||\n        isTSTypeAliasDeclaration(node));\n}\nexports.isNodeWithName = isNodeWithName;\n//# sourceMappingURL=ast-guards.js.map"
        }
    ]
}