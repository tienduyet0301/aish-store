{
    "sourceFile": "node_modules/@rushstack/eslint-patch/lib/eslint-bulk-suppressions/ast-guards.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891923936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESTree } from '@typescript-eslint/types';\nexport declare function isArrayExpression(node: TSESTree.Node): node is TSESTree.ArrayExpression;\nexport declare function isArrowFunctionExpression(node: TSESTree.Node): node is TSESTree.ArrowFunctionExpression;\n/** default parameters */\nexport declare function isAssignmentPattern(node: TSESTree.Node): node is TSESTree.AssignmentPattern;\nexport declare function isClassDeclaration(node: TSESTree.Node): node is TSESTree.ClassDeclaration;\nexport declare function isClassExpression(node: TSESTree.Node): node is TSESTree.ClassExpression;\nexport declare function isExportDefaultDeclaration(node: TSESTree.Node): node is TSESTree.ExportDefaultDeclaration;\nexport declare function isExpression(node: TSESTree.Node): node is TSESTree.Expression;\nexport declare function isFunctionDeclaration(node: TSESTree.Node): node is TSESTree.FunctionDeclaration;\nexport declare function isFunctionExpression(node: TSESTree.Node): node is TSESTree.FunctionExpression;\nexport declare function isIdentifier(node: TSESTree.Node): node is TSESTree.Identifier;\nexport declare function isLiteral(node: TSESTree.Node): node is TSESTree.Literal;\nexport declare function isMethodDefinition(node: TSESTree.Node): node is TSESTree.MethodDefinition;\nexport declare function isObjectExpression(node: TSESTree.Node): node is TSESTree.ObjectExpression;\nexport declare function isPrivateIdentifier(node: TSESTree.Node): node is TSESTree.PrivateIdentifier;\nexport declare function isProperty(node: TSESTree.Node): node is TSESTree.Property;\nexport declare function isPropertyDefinition(node: TSESTree.Node): node is TSESTree.PropertyDefinition;\nexport declare function isTSEnumDeclaration(node: TSESTree.Node): node is TSESTree.TSEnumDeclaration;\nexport declare function isTSInterfaceDeclaration(node: TSESTree.Node): node is TSESTree.TSInterfaceDeclaration;\nexport declare function isTSModuleDeclaration(node: TSESTree.Node): node is TSESTree.TSModuleDeclaration;\nexport declare function isTSQualifiedName(node: TSESTree.Node): node is TSESTree.TSQualifiedName;\nexport declare function isTSTypeAliasDeclaration(node: TSESTree.Node): node is TSESTree.TSTypeAliasDeclaration;\nexport declare function isVariableDeclarator(node: TSESTree.Node): node is TSESTree.VariableDeclarator;\nexport declare function isClassDeclarationWithName(node: TSESTree.Node): node is TSESTree.ClassDeclarationWithName;\nexport declare function isClassPropertyNameNonComputed(node: TSESTree.Node): node is TSESTree.ClassPropertyNameNonComputed;\nexport declare function isFunctionDeclarationWithName(node: TSESTree.Node): node is TSESTree.FunctionDeclarationWithName;\nexport declare function isNumberLiteral(node: TSESTree.Node): node is TSESTree.NumberLiteral;\nexport declare function isPropertyNameNonComputed(node: TSESTree.Node): node is TSESTree.PropertyNameNonComputed;\nexport declare function isStringLiteral(node: TSESTree.Node): node is TSESTree.StringLiteral;\nexport interface IClassExpressionWithName extends TSESTree.ClassExpression {\n    id: TSESTree.Identifier;\n}\nexport declare function isClassExpressionWithName(node: TSESTree.Node): node is IClassExpressionWithName;\nexport interface IFunctionExpressionWithName extends TSESTree.FunctionExpression {\n    id: TSESTree.Identifier;\n}\nexport declare function isFunctionExpressionWithName(node: TSESTree.Node): node is IFunctionExpressionWithName;\nexport type NormalAnonymousExpression = TSESTree.ArrowFunctionExpression | TSESTree.ClassExpression | TSESTree.FunctionExpression | TSESTree.ObjectExpression;\nexport declare function isNormalAnonymousExpression(node: TSESTree.Node): node is NormalAnonymousExpression;\nexport interface INormalAssignmentPattern extends TSESTree.AssignmentPattern {\n    left: TSESTree.Identifier;\n}\nexport declare function isNormalAssignmentPattern(node: TSESTree.Node): node is INormalAssignmentPattern;\nexport interface INormalClassPropertyDefinition extends TSESTree.PropertyDefinitionNonComputedName {\n    key: TSESTree.PrivateIdentifier | TSESTree.Identifier;\n    value: TSESTree.Expression;\n}\nexport declare function isNormalClassPropertyDefinition(node: TSESTree.Node): node is INormalClassPropertyDefinition;\nexport interface INormalMethodDefinition extends TSESTree.MethodDefinitionNonComputedName {\n    key: TSESTree.PrivateIdentifier | TSESTree.Identifier;\n}\nexport declare function isNormalMethodDefinition(node: TSESTree.Node): node is INormalMethodDefinition;\nexport interface INormalObjectProperty extends TSESTree.PropertyNonComputedName {\n    key: TSESTree.Identifier;\n}\nexport declare function isNormalObjectProperty(node: TSESTree.Node): node is INormalObjectProperty;\nexport interface INormalVariableDeclarator extends TSESTree.VariableDeclarator {\n    id: TSESTree.Identifier;\n    init: TSESTree.Expression;\n}\nexport declare function isNormalVariableDeclarator(node: TSESTree.Node): node is INormalVariableDeclarator;\nexport interface INormalAssignmentPatternWithAnonymousExpressionAssigned extends INormalAssignmentPattern {\n    right: NormalAnonymousExpression;\n}\nexport declare function isNormalAssignmentPatternWithAnonymousExpressionAssigned(node: TSESTree.Node): node is INormalAssignmentPatternWithAnonymousExpressionAssigned;\nexport interface INormalVariableDeclaratorWithAnonymousExpressionAssigned extends INormalVariableDeclarator {\n    init: NormalAnonymousExpression;\n}\nexport declare function isNormalVariableDeclaratorWithAnonymousExpressionAssigned(node: TSESTree.Node): node is INormalVariableDeclaratorWithAnonymousExpressionAssigned;\nexport interface INormalObjectPropertyWithAnonymousExpressionAssigned extends INormalObjectProperty {\n    value: NormalAnonymousExpression;\n}\nexport declare function isNormalObjectPropertyWithAnonymousExpressionAssigned(node: TSESTree.Node): node is INormalObjectPropertyWithAnonymousExpressionAssigned;\nexport interface INormalClassPropertyDefinitionWithAnonymousExpressionAssigned extends INormalClassPropertyDefinition {\n    value: NormalAnonymousExpression;\n}\nexport declare function isNormalClassPropertyDefinitionWithAnonymousExpressionAssigned(node: TSESTree.Node): node is INormalClassPropertyDefinitionWithAnonymousExpressionAssigned;\nexport type NodeWithName = TSESTree.ClassDeclarationWithName | TSESTree.FunctionDeclarationWithName | IClassExpressionWithName | IFunctionExpressionWithName | INormalVariableDeclaratorWithAnonymousExpressionAssigned | INormalObjectPropertyWithAnonymousExpressionAssigned | INormalClassPropertyDefinitionWithAnonymousExpressionAssigned | INormalAssignmentPatternWithAnonymousExpressionAssigned | INormalMethodDefinition | TSESTree.TSEnumDeclaration | TSESTree.TSInterfaceDeclaration | TSESTree.TSTypeAliasDeclaration;\nexport declare function isNodeWithName(node: TSESTree.Node): node is NodeWithName;\n//# sourceMappingURL=ast-guards.d.ts.map"
        }
    ]
}