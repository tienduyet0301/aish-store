{
    "sourceFile": "node_modules/jiti/lib/jiti-native.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892355704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @typedef {import('./types').Jiti} Jiti\n * @typedef {import('./types').JitiOptions} JitiOptions\n */\n\nconst isDeno = \"Deno\" in globalThis;\n\n/**\n * @param {string|URL} [parentURL]\n * @param {JitiOptions} [jitiOptions]\n * @returns {Jiti}\n */\nexport function createJiti(parentURL, jitiOptions) {\n  parentURL = normalizeParentURL(parentURL);\n\n  /** @type {Jiti} */\n  function jiti() {\n    throw unsupportedError(\n      \"`jiti()` is not supported in native mode, use `jiti.import()` instead.\",\n    );\n  }\n\n  jiti.resolve = () => {\n    throw unsupportedError(\"`jiti.resolve()` is not supported in native mode.\");\n  };\n\n  jiti.esmResolve = (id, opts) => {\n    try {\n      const importMeta = jitiOptions?.importMeta || import.meta;\n      if (isDeno) {\n        // Deno throws TypeError: Invalid arguments when passing parentURL\n        return importMeta.resolve(id);\n      }\n      const parent = normalizeParentURL(opts?.parentURL || parentURL);\n      return importMeta.resolve(id, parent);\n    } catch (error) {\n      if (opts?.try) {\n        return undefined;\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  jiti.import = async function (id, opts) {\n    for (const suffix of [\"\", \"/index\"]) {\n      // prettier-ignore\n      for (const ext of [\"\", \".js\", \".mjs\", \".cjs\", \".ts\", \".tsx\", \".mts\", \".cts\"]) {\n        try {\n          const resolved = this.esmResolve(id + suffix + ext, opts);\n          if (!resolved) {\n            continue;\n          }\n          let importAttrs = undefined\n          if (resolved.endsWith('.json')) {\n            importAttrs = { with: { type: 'json'}}\n          }\n          return await import(resolved, importAttrs);\n        } catch (error) {\n          if (error.code === 'ERR_MODULE_NOT_FOUND' || error.code === 'ERR_UNSUPPORTED_DIR_IMPORT') {\n            continue\n          }\n          if (opts?.try) {\n            return undefined;\n          }\n          throw error;\n        }\n      }\n    }\n    if (!opts?.try) {\n      const parent = normalizeParentURL(opts?.parentURL || parentURL);\n      const error = new Error(\n        `[jiti] [ERR_MODULE_NOT_FOUND] Cannot import '${id}' from '${parent}'.`,\n      );\n      error.code = \"ERR_MODULE_NOT_FOUND\";\n      throw error;\n    }\n  };\n\n  jiti.transform = () => {\n    throw unsupportedError(\n      \"`jiti.transform()` is not supported in native mode.\",\n    );\n  };\n\n  jiti.evalModule = () => {\n    throw unsupportedError(\n      \"`jiti.evalModule()` is not supported in native mode.\",\n    );\n  };\n\n  jiti.main = undefined;\n  jiti.extensions = Object.create(null);\n  jiti.cache = Object.create(null);\n\n  return jiti;\n}\n\nexport default createJiti;\n\n/**\n * @param {string} message\n */\nfunction unsupportedError(message) {\n  throw new Error(\n    `[jiti] ${message} (import or require 'jiti' instead of 'jiti/native' for more features).`,\n  );\n}\n\nfunction normalizeParentURL(input) {\n  if (!input) {\n    return \"file:///\";\n  }\n  if (typeof filename !== \"string\" || input.startsWith(\"file://\")) {\n    return input;\n  }\n  if (input.endsWith(\"/\")) {\n    input += \"_\"; // append a dummy filename\n  }\n  return `file://${input}`;\n}\n"
        }
    ]
}