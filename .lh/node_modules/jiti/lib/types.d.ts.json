{
    "sourceFile": "node_modules/jiti/lib/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892356035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export declare function createJiti(id: string, userOptions?: JitiOptions): Jiti;\n\n/**\n * Jiti instance\n *\n * Calling jiti() is similar to CommonJS require() but adds extra features such as Typescript and ESM compatibility.\n *\n * **Note:**It is recommended to use `await jiti.import` instead\n */\nexport interface Jiti extends NodeRequire {\n  /**\n   * Resolved options\n   */\n  options: JitiOptions;\n\n  /**\n   * ESM import a module with additional Typescript and ESM compatibility.\n   *\n   * If you need the default export of module, you can use `jiti.import(id, { default: true })` as shortcut to `mod?.default ?? mod`.\n   */\n  import<T = unknown>(\n    id: string,\n    opts?: JitiResolveOptions & { default?: true },\n  ): Promise<T>;\n\n  /**\n   * Resolve with ESM import conditions.\n   */\n  esmResolve(id: string, parentURL?: string): string;\n  esmResolve<T extends JitiResolveOptions = JitiResolveOptions>(\n    id: string,\n    opts?: T,\n  ): T[\"try\"] extends true ? string | undefined : string;\n\n  /**\n   * Transform source code\n   */\n  transform: (opts: TransformOptions) => string;\n\n  /**\n   * Evaluate transformed code as a module\n   */\n  evalModule: (source: string, options?: EvalModuleOptions) => unknown;\n}\n\n/**\n * Jiti instance options\n */\nexport interface JitiOptions {\n  /**\n   * Filesystem source cache (enabled by default)\n   *\n   * An string can be passed to set the custom cache directory.\n   *\n   * By default (when is `true`), jiti uses  `node_modules/.cache/jiti` (if exists) or `{TMP_DIR}/jiti`.\n   *\n   * This option can also be disabled using `JITI_FS_CACHE=false` environment variable.\n   *\n   * **Note:** It is recommended to keep this option enabled for better performance.\n   */\n  fsCache?: boolean | string;\n\n  /** @deprecated Use `fsCache` option. */\n  cache?: boolean | string;\n\n  /**\n   * Runtime module cache (enabled by default)\n   *\n   * Disabling allows editing code and importing same module multiple times.\n   *\n   * When enabled, jiti integrates with Node.js native CommonJS cache store.\n   *\n   * This option can also be disabled using `JITI_MODULE_CACHE=false` environment variable.\n   */\n  moduleCache?: boolean;\n\n  /** @deprecated Use `moduleCache` option.  */\n  requireCache?: boolean;\n\n  /**\n   * Custom transform function\n   */\n  transform?: (opts: TransformOptions) => TransformResult;\n\n  /**\n   * Enable verbose debugging (disabled by default).\n   *\n   * Can also be enabled using `JITI_DEBUG=1` environment variable.\n   */\n  debug?: boolean;\n\n  /**\n   * Enable sourcemaps (enabled by default)\n   *\n   * Can also be disabled using `JITI_SOURCE_MAPS=0` environment variable.\n   */\n  sourceMaps?: boolean;\n\n  /**\n   * Jiti combines module exports with the `default` export using an internal Proxy to improve compatibility with mixed CJS/ESM usage. You can check the current implementation [here](https://github.com/unjs/jiti/blob/main/src/utils.ts#L105).\n   *\n   * Can be disabled using `JITI_INTEROP_DEFAULT=0` environment variable.\n   */\n  interopDefault?: boolean;\n\n  /**\n   * Jiti hard source cache version (internal)\n   */\n  cacheVersion?: string;\n\n  /**\n   * Supported extensions to resolve.\n   *\n   * Default `[\".js\", \".mjs\", \".cjs\", \".ts\", \".mts\", \".cts\", \".json\"]`\n   */\n  extensions?: string[];\n\n  /**\n   * Transform options\n   */\n  transformOptions?: Omit<TransformOptions, \"source\">;\n\n  /**\n   * Resolve aliases\n   *\n   * You can use `JITI_ALIAS` environment variable to set aliases as a JSON string.\n   */\n  alias?: Record<string, string>;\n\n  /**\n   * List of modules (within `node_modules`) to always use native require/import for them.\n   *\n   * You can use `JITI_NATIVE_MODULES` environment variable to set native modules as a JSON string.\n   *\n   */\n  nativeModules?: string[];\n\n  /**\n   * List of modules (within `node_modules`) to transform them regardless of syntax.\n   *\n   * You can use `JITI_TRANSFORM_MODULES` environment variable to set transform modules as a JSON string.\n   */\n  transformModules?: string[];\n\n  /**\n   * Parent module's import.meta context to use for ESM resolution.\n   *\n   * (Only used for `jiti/native` import)\n   */\n  importMeta?: ImportMeta;\n\n  /**\n   * Try to use native require and import without jiti transformations first.\n   *\n   * Enabled if Bun is detected.\n   */\n  tryNative?: boolean;\n\n  /**\n   * Enable JSX support Enable JSX support using [`@babel/plugin-transform-react-jsx`](https://babeljs.io/docs/babel-plugin-transform-react-jsx).\n   *\n   * @default false\n   *\n   * You can also use `JITI_JSX=1` environment variable to enable JSX support.\n   */\n  jsx?: boolean | JSXOptions;\n}\n\ninterface NodeRequire {\n  /**\n   * Module cache\n   */\n  cache: ModuleCache;\n\n  /** @deprecated Prefer `await jiti.import()` for better compatibility. */\n  (id: string): any;\n\n  /** @deprecated Prefer `jiti.esmResolve` for better compatibility. */\n  resolve: {\n    /** @deprecated */\n    (id: string, options?: { paths?: string[] | undefined }): string;\n    /** @deprecated */\n    paths(request: string): string[] | null;\n  };\n\n  /** @deprecated CommonJS API */\n  extensions: Record<\n    \".js\" | \".json\" | \".node\",\n    (m: NodeModule, filename: string) => any | undefined\n  >;\n\n  /** @deprecated CommonJS API */\n  main: NodeModule | undefined;\n}\n\nexport interface NodeModule {\n  /**\n   * `true` if the module is running during the Node.js preload\n   */\n  isPreloading: boolean;\n  exports: any;\n  require: NodeRequire;\n  id: string;\n  filename: string;\n  loaded: boolean;\n  /** @deprecated since v14.6.0 Please use `require.main` and `module.children` instead. */\n  parent: NodeModule | null | undefined;\n  children: NodeModule[];\n  /**\n   * @since v11.14.0\n   *\n   * The directory name of the module. This is usually the same as the path.dirname() of the module.id.\n   */\n  path: string;\n  paths: string[];\n}\n\nexport type ModuleCache = Record<string, NodeModule>;\n\nexport type EvalModuleOptions = Partial<{\n  id: string;\n  filename: string;\n  ext: string;\n  cache: ModuleCache;\n  async: boolean;\n  forceTranspile: boolean;\n}>;\n\nexport interface TransformOptions {\n  source: string;\n  filename?: string;\n  ts?: boolean;\n  retainLines?: boolean;\n  interopDefault?: boolean;\n  async?: boolean;\n  jsx?: boolean | JSXOptions;\n  babel?: Record<string, any>;\n}\n\nexport interface TransformResult {\n  code: string;\n  error?: any;\n}\n\nexport interface JitiResolveOptions {\n  conditions?: string[];\n  parentURL?: string | URL;\n  try?: boolean;\n}\n\n/** Reference: https://babeljs.io/docs/babel-plugin-transform-react-jsx#options */\nexport interface JSXOptions {\n  throwIfNamespace?: boolean;\n  runtime?: \"classic\" | \"automatic\";\n  importSource?: string;\n  pragma?: string;\n  pragmaFrag?: string;\n  useBuiltIns?: boolean;\n  useSpread?: boolean;\n}\n"
        }
    ]
}