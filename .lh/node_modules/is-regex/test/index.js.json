{
    "sourceFile": "node_modules/is-regex/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892339275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar forEach = require('for-each');\nvar test = require('tape');\nvar isRegex = require('..');\n\ntest('not regexes', function (t) {\n\t// @ts-expect-error\n\tt.notOk(isRegex(), 'undefined is not regex');\n\tt.notOk(isRegex(null), 'null is not regex');\n\tt.notOk(isRegex(false), 'false is not regex');\n\tt.notOk(isRegex(true), 'true is not regex');\n\tt.notOk(isRegex(42), 'number is not regex');\n\tt.notOk(isRegex('foo'), 'string is not regex');\n\tt.notOk(isRegex([]), 'array is not regex');\n\tt.notOk(isRegex({}), 'object is not regex');\n\tt.notOk(isRegex(function () {}), 'function is not regex');\n\tt.end();\n});\n\ntest('@@toStringTag', { skip: !hasToStringTag }, function (t) {\n\tvar regex = /a/g;\n\t/** @type {{ toString(): string, valueOf(): RegExp, [Symbol.toStringTag]?: string}} */\n\tvar fakeRegex = {\n\t\ttoString: function () { return String(regex); },\n\t\tvalueOf: function () { return regex; }\n\t};\n\tfakeRegex[Symbol.toStringTag] = 'RegExp';\n\tt.notOk(isRegex(fakeRegex), 'fake RegExp with @@toStringTag \"RegExp\" is not regex');\n\tt.end();\n});\n\ntest('regexes', function (t) {\n\tt.ok(isRegex(/a/g), 'regex literal is regex');\n\tt.ok(isRegex(new RegExp('a', 'g')), 'regex object is regex');\n\tt.end();\n});\n\ntest('does not mutate regexes', function (t) {\n\tt.test('lastIndex is a marker object', function (st) {\n\t\tvar regex = /a/;\n\t\tvar marker = {};\n\t\t// @ts-expect-error\n\t\tregex.lastIndex = marker;\n\t\tst.equal(regex.lastIndex, marker, 'lastIndex is the marker object');\n\t\tst.ok(isRegex(regex), 'is regex');\n\t\tst.equal(regex.lastIndex, marker, 'lastIndex is the marker object after isRegex');\n\t\tst.end();\n\t});\n\n\tt.test('lastIndex is nonzero', function (st) {\n\t\tvar regex = /a/;\n\t\tregex.lastIndex = 3;\n\t\tst.equal(regex.lastIndex, 3, 'lastIndex is 3');\n\t\tst.ok(isRegex(regex), 'is regex');\n\t\tst.equal(regex.lastIndex, 3, 'lastIndex is 3 after isRegex');\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n\ntest('does not perform operations observable to Proxies', { skip: typeof Proxy !== 'function' }, function (t) {\n\t/** @constructor */\n\tfunction Handler() {\n\t\t/** @type (keyof Reflect)[]} */\n\t\tthis.trapCalls = [];\n\t}\n\n\t// eslint-disable-next-line no-extra-parens\n\tforEach(/** @const @type {(keyof Reflect)[]} */ ([\n\t\t'defineProperty',\n\t\t'deleteProperty',\n\t\t'get',\n\t\t'getOwnPropertyDescriptor',\n\t\t'getPrototypeOf',\n\t\t'has',\n\t\t'isExtensible',\n\t\t'ownKeys',\n\t\t'preventExtensions',\n\t\t'set',\n\t\t'setPrototypeOf'\n\t]), function (trapName) {\n\t\tHandler.prototype[trapName] = function () {\n\t\t\tthis.trapCalls.push(trapName);\n\t\t\t// @ts-expect-error TODO: not sure why this is erroring\n\t\t\treturn Reflect[trapName].apply(Reflect, arguments);\n\t\t};\n\t});\n\n\tt.test('proxy of object', function (st) {\n\t\tvar handler = new Handler();\n\t\t// @ts-expect-error Proxy handlers can be any object\n\t\tvar proxy = new Proxy({ lastIndex: 0 }, handler);\n\n\t\tst.equal(isRegex(proxy), false, 'proxy of plain object is not regex');\n\t\tst.deepEqual(\n\t\t\thandler.trapCalls,\n\t\t\thandler.trapCalls.length > 0 ? ['getOwnPropertyDescriptor'] : [],\n\t\t\t'no unexpected proxy traps were triggered'\n\t\t);\n\t\tst.end();\n\t});\n\n\tt.test('proxy of RegExp instance', function (st) {\n\t\tvar handler = new Handler();\n\t\t// @ts-expect-error Proxy handlers can be any object\n\t\tvar proxy = new Proxy(/a/, handler);\n\n\t\tst.equal(isRegex(proxy), false, 'proxy of RegExp instance is not regex');\n\t\tst.deepEqual(\n\t\t\thandler.trapCalls,\n\t\t\thandler.trapCalls.length > 0 ? ['getOwnPropertyDescriptor'] : [],\n\t\t\t'no unexpected proxy traps were triggered'\n\t\t);\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}