{
    "sourceFile": "node_modules/fast-glob/out/utils/pattern.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892291398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { MicromatchOptions, Pattern, PatternRe } from '../types';\ntype PatternTypeOptions = {\n    braceExpansion?: boolean;\n    caseSensitiveMatch?: boolean;\n    extglob?: boolean;\n};\nexport declare function isStaticPattern(pattern: Pattern, options?: PatternTypeOptions): boolean;\nexport declare function isDynamicPattern(pattern: Pattern, options?: PatternTypeOptions): boolean;\nexport declare function convertToPositivePattern(pattern: Pattern): Pattern;\nexport declare function convertToNegativePattern(pattern: Pattern): Pattern;\nexport declare function isNegativePattern(pattern: Pattern): boolean;\nexport declare function isPositivePattern(pattern: Pattern): boolean;\nexport declare function getNegativePatterns(patterns: Pattern[]): Pattern[];\nexport declare function getPositivePatterns(patterns: Pattern[]): Pattern[];\n/**\n * Returns patterns that can be applied inside the current directory.\n *\n * @example\n * // ['./*', '*', 'a/*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\nexport declare function getPatternsInsideCurrentDirectory(patterns: Pattern[]): Pattern[];\n/**\n * Returns patterns to be expanded relative to (outside) the current directory.\n *\n * @example\n * // ['../*', './../*']\n * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])\n */\nexport declare function getPatternsOutsideCurrentDirectory(patterns: Pattern[]): Pattern[];\nexport declare function isPatternRelatedToParentDirectory(pattern: Pattern): boolean;\nexport declare function getBaseDirectory(pattern: Pattern): string;\nexport declare function hasGlobStar(pattern: Pattern): boolean;\nexport declare function endsWithSlashGlobStar(pattern: Pattern): boolean;\nexport declare function isAffectDepthOfReadingPattern(pattern: Pattern): boolean;\nexport declare function expandPatternsWithBraceExpansion(patterns: Pattern[]): Pattern[];\nexport declare function expandBraceExpansion(pattern: Pattern): Pattern[];\nexport declare function getPatternParts(pattern: Pattern, options: MicromatchOptions): Pattern[];\nexport declare function makeRe(pattern: Pattern, options: MicromatchOptions): PatternRe;\nexport declare function convertPatternsToRe(patterns: Pattern[], options: MicromatchOptions): PatternRe[];\nexport declare function matchAny(entry: string, patternsRe: PatternRe[]): boolean;\n/**\n * This package only works with forward slashes as a path separator.\n * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.\n */\nexport declare function removeDuplicateSlashes(pattern: string): string;\nexport {};\n"
        }
    ]
}