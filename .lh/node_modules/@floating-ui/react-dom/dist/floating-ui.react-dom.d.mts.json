{
    "sourceFile": "node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.d.mts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891761831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { AlignedPlacement } from '@floating-ui/dom';\r\nimport { Alignment } from '@floating-ui/dom';\r\nimport { AutoPlacementOptions } from '@floating-ui/dom';\r\nimport { autoUpdate } from '@floating-ui/dom';\r\nimport { AutoUpdateOptions } from '@floating-ui/dom';\r\nimport { Axis } from '@floating-ui/dom';\r\nimport { Boundary } from '@floating-ui/dom';\r\nimport { ClientRectObject } from '@floating-ui/dom';\r\nimport { computePosition } from '@floating-ui/dom';\r\nimport { ComputePositionConfig } from '@floating-ui/dom';\r\nimport { ComputePositionReturn } from '@floating-ui/dom';\r\nimport { Coords } from '@floating-ui/dom';\r\nimport { Derivable } from '@floating-ui/dom';\r\nimport { detectOverflow } from '@floating-ui/dom';\r\nimport { DetectOverflowOptions } from '@floating-ui/dom';\r\nimport { Dimensions } from '@floating-ui/dom';\r\nimport { ElementContext } from '@floating-ui/dom';\r\nimport { ElementRects } from '@floating-ui/dom';\r\nimport { Elements } from '@floating-ui/dom';\r\nimport { FlipOptions } from '@floating-ui/dom';\r\nimport { FloatingElement } from '@floating-ui/dom';\r\nimport { getOverflowAncestors } from '@floating-ui/dom';\r\nimport { HideOptions } from '@floating-ui/dom';\r\nimport { InlineOptions } from '@floating-ui/dom';\r\nimport { Length } from '@floating-ui/dom';\r\nimport { LimitShiftOptions } from '@floating-ui/dom';\r\nimport { Middleware } from '@floating-ui/dom';\r\nimport { MiddlewareArguments } from '@floating-ui/dom';\r\nimport { MiddlewareData } from '@floating-ui/dom';\r\nimport { MiddlewareReturn } from '@floating-ui/dom';\r\nimport { MiddlewareState } from '@floating-ui/dom';\r\nimport { NodeScroll } from '@floating-ui/dom';\r\nimport { OffsetOptions } from '@floating-ui/dom';\r\nimport { Padding } from '@floating-ui/dom';\r\nimport { Placement } from '@floating-ui/dom';\r\nimport { Platform } from '@floating-ui/dom';\r\nimport { platform } from '@floating-ui/dom';\r\nimport type * as React from 'react';\r\nimport { Rect } from '@floating-ui/dom';\r\nimport { ReferenceElement } from '@floating-ui/dom';\r\nimport { RootBoundary } from '@floating-ui/dom';\r\nimport { ShiftOptions } from '@floating-ui/dom';\r\nimport { Side } from '@floating-ui/dom';\r\nimport { SideObject } from '@floating-ui/dom';\r\nimport { SizeOptions } from '@floating-ui/dom';\r\nimport { Strategy } from '@floating-ui/dom';\r\nimport { VirtualElement } from '@floating-ui/dom';\r\n\r\nexport { AlignedPlacement }\r\n\r\nexport { Alignment }\r\n\r\n/**\r\n * Provides data to position an inner element of the floating element so that it\r\n * appears centered to the reference element.\r\n * This wraps the core `arrow` middleware to allow React refs as the element.\r\n * @see https://floating-ui.com/docs/arrow\r\n */\r\nexport declare const arrow: (options: ArrowOptions | Derivable<ArrowOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport declare interface ArrowOptions {\r\n    /**\r\n     * The arrow element to be positioned.\r\n     * @default undefined\r\n     */\r\n    element: React.MutableRefObject<Element | null> | Element | null;\r\n    /**\r\n     * The padding between the arrow element and the floating element edges.\r\n     * Useful when the floating element has rounded corners.\r\n     * @default 0\r\n     */\r\n    padding?: Padding;\r\n}\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by choosing the placement\r\n * that has the most space available automatically, without needing to specify a\r\n * preferred placement. Alternative to `flip`.\r\n * @see https://floating-ui.com/docs/autoPlacement\r\n */\r\nexport declare const autoPlacement: (options?: AutoPlacementOptions | Derivable<AutoPlacementOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { AutoPlacementOptions }\r\n\r\nexport { autoUpdate }\r\n\r\nexport { AutoUpdateOptions }\r\n\r\nexport { Axis }\r\n\r\nexport { Boundary }\r\n\r\nexport { ClientRectObject }\r\n\r\nexport { computePosition }\r\n\r\nexport { ComputePositionConfig }\r\n\r\nexport { ComputePositionReturn }\r\n\r\nexport { Coords }\r\n\r\nexport { Derivable }\r\n\r\nexport { detectOverflow }\r\n\r\nexport { DetectOverflowOptions }\r\n\r\nexport { Dimensions }\r\n\r\nexport { ElementContext }\r\n\r\nexport { ElementRects }\r\n\r\nexport { Elements }\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by flipping the `placement`\r\n * in order to keep it in view when the preferred placement(s) will overflow the\r\n * clipping boundary. Alternative to `autoPlacement`.\r\n * @see https://floating-ui.com/docs/flip\r\n */\r\nexport declare const flip: (options?: FlipOptions | Derivable<FlipOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { FlipOptions }\r\n\r\nexport { FloatingElement }\r\n\r\nexport { getOverflowAncestors }\r\n\r\n/**\r\n * Provides data to hide the floating element in applicable situations, such as\r\n * when it is not in the same clipping context as the reference element.\r\n * @see https://floating-ui.com/docs/hide\r\n */\r\nexport declare const hide: (options?: HideOptions | Derivable<HideOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { HideOptions }\r\n\r\n/**\r\n * Provides improved positioning for inline reference elements that can span\r\n * over multiple lines, such as hyperlinks or range selections.\r\n * @see https://floating-ui.com/docs/inline\r\n */\r\nexport declare const inline: (options?: InlineOptions | Derivable<InlineOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { InlineOptions }\r\n\r\nexport { Length }\r\n\r\n/**\r\n * Built-in `limiter` that will stop `shift()` at a certain point.\r\n */\r\nexport declare const limitShift: (options?: LimitShiftOptions | Derivable<LimitShiftOptions>, deps?: React.DependencyList) => {\r\n    fn: (state: MiddlewareState) => Coords;\r\n    options: any;\r\n};\r\n\r\nexport { Middleware }\r\n\r\nexport { MiddlewareArguments }\r\n\r\nexport { MiddlewareData }\r\n\r\nexport { MiddlewareReturn }\r\n\r\nexport { MiddlewareState }\r\n\r\nexport { NodeScroll }\r\n\r\n/**\r\n * Modifies the placement by translating the floating element along the\r\n * specified axes.\r\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\r\n * object may be passed.\r\n * @see https://floating-ui.com/docs/offset\r\n */\r\nexport declare const offset: (options?: OffsetOptions, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { OffsetOptions }\r\n\r\nexport { Padding }\r\n\r\nexport { Placement }\r\n\r\nexport { Platform }\r\n\r\nexport { platform }\r\n\r\ndeclare type Prettify<T> = {\r\n    [K in keyof T]: T[K];\r\n} & {};\r\n\r\nexport { Rect }\r\n\r\nexport { ReferenceElement }\r\n\r\nexport declare type ReferenceType = Element | VirtualElement;\r\n\r\nexport { RootBoundary }\r\n\r\n/**\r\n * Optimizes the visibility of the floating element by shifting it in order to\r\n * keep it in view when it will overflow the clipping boundary.\r\n * @see https://floating-ui.com/docs/shift\r\n */\r\nexport declare const shift: (options?: ShiftOptions | Derivable<ShiftOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { ShiftOptions }\r\n\r\nexport { Side }\r\n\r\nexport { SideObject }\r\n\r\n/**\r\n * Provides data that allows you to change the size of the floating element â€”\r\n * for instance, prevent it from overflowing the clipping boundary or match the\r\n * width of the reference element.\r\n * @see https://floating-ui.com/docs/size\r\n */\r\nexport declare const size: (options?: SizeOptions | Derivable<SizeOptions>, deps?: React.DependencyList) => Middleware;\r\n\r\nexport { SizeOptions }\r\n\r\nexport { Strategy }\r\n\r\n/**\r\n * Provides data to position a floating element.\r\n * @see https://floating-ui.com/docs/useFloating\r\n */\r\nexport declare function useFloating<RT extends ReferenceType = ReferenceType>(options?: UseFloatingOptions): UseFloatingReturn<RT>;\r\n\r\nexport declare type UseFloatingData = Prettify<ComputePositionReturn & {\r\n    isPositioned: boolean;\r\n}>;\r\n\r\nexport declare type UseFloatingOptions<RT extends ReferenceType = ReferenceType> = Prettify<Partial<ComputePositionConfig> & {\r\n    /**\r\n     * A callback invoked when both the reference and floating elements are\r\n     * mounted, and cleaned up when either is unmounted. This is useful for\r\n     * setting up event listeners (e.g. pass `autoUpdate`).\r\n     */\r\n    whileElementsMounted?: (reference: RT, floating: HTMLElement, update: () => void) => () => void;\r\n    /**\r\n     * Object containing the reference and floating elements.\r\n     */\r\n    elements?: {\r\n        reference?: RT | null;\r\n        floating?: HTMLElement | null;\r\n    };\r\n    /**\r\n     * The `open` state of the floating element to synchronize with the\r\n     * `isPositioned` value.\r\n     * @default false\r\n     */\r\n    open?: boolean;\r\n    /**\r\n     * Whether to use `transform` for positioning instead of `top` and `left`\r\n     * (layout) in the `floatingStyles` object.\r\n     * @default false\r\n     */\r\n    transform?: boolean;\r\n}>;\r\n\r\nexport declare type UseFloatingReturn<RT extends ReferenceType = ReferenceType> = Prettify<UseFloatingData & {\r\n    /**\r\n     * Update the position of the floating element, re-rendering the component\r\n     * if required.\r\n     */\r\n    update: () => void;\r\n    /**\r\n     * Pre-configured positioning styles to apply to the floating element.\r\n     */\r\n    floatingStyles: React.CSSProperties;\r\n    /**\r\n     * Object containing the reference and floating refs and reactive setters.\r\n     */\r\n    refs: {\r\n        /**\r\n         * A React ref to the reference element.\r\n         */\r\n        reference: React.MutableRefObject<RT | null>;\r\n        /**\r\n         * A React ref to the floating element.\r\n         */\r\n        floating: React.MutableRefObject<HTMLElement | null>;\r\n        /**\r\n         * A callback to set the reference element (reactive).\r\n         */\r\n        setReference: (node: RT | null) => void;\r\n        /**\r\n         * A callback to set the floating element (reactive).\r\n         */\r\n        setFloating: (node: HTMLElement | null) => void;\r\n    };\r\n    /**\r\n     * Object containing the reference and floating elements.\r\n     */\r\n    elements: {\r\n        reference: RT | null;\r\n        floating: HTMLElement | null;\r\n    };\r\n}>;\r\n\r\nexport { VirtualElement }\r\n\r\nexport { }\r\n"
        }
    ]
}