{
    "sourceFile": "node_modules/@floating-ui/react/dist/floating-ui.react.utils.umd.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891761574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.FloatingUIReactUtils = {}));\n})(this, (function (exports) { 'use strict';\n\n  function hasWindow() {\n    return typeof window !== 'undefined';\n  }\n  function getWindow(node) {\n    var _node$ownerDocument;\n    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n  }\n  function isHTMLElement(value) {\n    if (!hasWindow()) {\n      return false;\n    }\n    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n  }\n  function isShadowRoot(value) {\n    if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n      return false;\n    }\n    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n  }\n\n  function activeElement(doc) {\n    let activeElement = doc.activeElement;\n    while (((_activeElement = activeElement) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {\n      var _activeElement;\n      activeElement = activeElement.shadowRoot.activeElement;\n    }\n    return activeElement;\n  }\n  function contains(parent, child) {\n    if (!parent || !child) {\n      return false;\n    }\n    const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();\n\n    // First, attempt with faster native method\n    if (parent.contains(child)) {\n      return true;\n    }\n\n    // then fallback to custom implementation with Shadow DOM support\n    if (rootNode && isShadowRoot(rootNode)) {\n      let next = child;\n      while (next) {\n        if (parent === next) {\n          return true;\n        }\n        // @ts-ignore\n        next = next.parentNode || next.host;\n      }\n    }\n\n    // Give up, the result is false\n    return false;\n  }\n  // Avoid Chrome DevTools blue warning.\n  function getPlatform() {\n    const uaData = navigator.userAgentData;\n    if (uaData != null && uaData.platform) {\n      return uaData.platform;\n    }\n    return navigator.platform;\n  }\n  function getUserAgent() {\n    const uaData = navigator.userAgentData;\n    if (uaData && Array.isArray(uaData.brands)) {\n      return uaData.brands.map(_ref => {\n        let {\n          brand,\n          version\n        } = _ref;\n        return brand + \"/\" + version;\n      }).join(' ');\n    }\n    return navigator.userAgent;\n  }\n\n  // License: https://github.com/adobe/react-spectrum/blob/b35d5c02fe900badccd0cf1a8f23bb593419f238/packages/@react-aria/utils/src/isVirtualEvent.ts\n  function isVirtualClick(event) {\n    // FIXME: Firefox is now emitting a deprecation warning for `mozInputSource`.\n    // Try to find a workaround for this. `react-aria` source still has the check.\n    if (event.mozInputSource === 0 && event.isTrusted) {\n      return true;\n    }\n    if (isAndroid() && event.pointerType) {\n      return event.type === 'click' && event.buttons === 1;\n    }\n    return event.detail === 0 && !event.pointerType;\n  }\n  function isVirtualPointerEvent(event) {\n    if (isJSDOM()) return false;\n    return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse' ||\n    // iOS VoiceOver returns 0.333â€¢ for width/height.\n    event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'touch';\n  }\n  function isSafari() {\n    // Chrome DevTools does not complain about navigator.vendor\n    return /apple/i.test(navigator.vendor);\n  }\n  function isAndroid() {\n    const re = /android/i;\n    return re.test(getPlatform()) || re.test(getUserAgent());\n  }\n  function isMac() {\n    return getPlatform().toLowerCase().startsWith('mac') && !navigator.maxTouchPoints;\n  }\n  function isJSDOM() {\n    return getUserAgent().includes('jsdom/');\n  }\n  function isMouseLikePointerType(pointerType, strict) {\n    // On some Linux machines with Chromium, mouse inputs return a `pointerType`\n    // of \"pen\": https://github.com/floating-ui/floating-ui/issues/2015\n    const values = ['mouse', 'pen'];\n    if (!strict) {\n      values.push('', undefined);\n    }\n    return values.includes(pointerType);\n  }\n  function isReactEvent(event) {\n    return 'nativeEvent' in event;\n  }\n  function isRootElement(element) {\n    return element.matches('html,body');\n  }\n  function getDocument(node) {\n    return (node == null ? void 0 : node.ownerDocument) || document;\n  }\n  function isEventTargetWithin(event, node) {\n    if (node == null) {\n      return false;\n    }\n    if ('composedPath' in event) {\n      return event.composedPath().includes(node);\n    }\n\n    // TS thinks `event` is of type never as it assumes all browsers support composedPath, but browsers without shadow dom don't\n    const e = event;\n    return e.target != null && node.contains(e.target);\n  }\n  function getTarget(event) {\n    if ('composedPath' in event) {\n      return event.composedPath()[0];\n    }\n\n    // TS thinks `event` is of type never as it assumes all browsers support\n    // `composedPath()`, but browsers without shadow DOM don't.\n    return event.target;\n  }\n  const TYPEABLE_SELECTOR = \"input:not([type='hidden']):not([disabled]),\" + \"[contenteditable]:not([contenteditable='false']),textarea:not([disabled])\";\n  function isTypeableElement(element) {\n    return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);\n  }\n  function stopEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  function isTypeableCombobox(element) {\n    if (!element) return false;\n    return element.getAttribute('role') === 'combobox' && isTypeableElement(element);\n  }\n\n  exports.TYPEABLE_SELECTOR = TYPEABLE_SELECTOR;\n  exports.activeElement = activeElement;\n  exports.contains = contains;\n  exports.getDocument = getDocument;\n  exports.getPlatform = getPlatform;\n  exports.getTarget = getTarget;\n  exports.getUserAgent = getUserAgent;\n  exports.isAndroid = isAndroid;\n  exports.isEventTargetWithin = isEventTargetWithin;\n  exports.isJSDOM = isJSDOM;\n  exports.isMac = isMac;\n  exports.isMouseLikePointerType = isMouseLikePointerType;\n  exports.isReactEvent = isReactEvent;\n  exports.isRootElement = isRootElement;\n  exports.isSafari = isSafari;\n  exports.isTypeableCombobox = isTypeableCombobox;\n  exports.isTypeableElement = isTypeableElement;\n  exports.isVirtualClick = isVirtualClick;\n  exports.isVirtualPointerEvent = isVirtualPointerEvent;\n  exports.stopEvent = stopEvent;\n\n}));\n"
        }
    ]
}