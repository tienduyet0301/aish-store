{
    "sourceFile": "node_modules/@floating-ui/utils/dist/floating-ui.utils.umd.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891762240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.FloatingUIUtils = {}));\n})(this, (function (exports) { 'use strict';\n\n  /**\n   * Custom positioning reference element.\n   * @see https://floating-ui.com/docs/virtual-elements\n   */\n\n  const sides = ['top', 'right', 'bottom', 'left'];\n  const alignments = ['start', 'end'];\n  const placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\n  const min = Math.min;\n  const max = Math.max;\n  const round = Math.round;\n  const floor = Math.floor;\n  const createCoords = v => ({\n    x: v,\n    y: v\n  });\n  const oppositeSideMap = {\n    left: 'right',\n    right: 'left',\n    bottom: 'top',\n    top: 'bottom'\n  };\n  const oppositeAlignmentMap = {\n    start: 'end',\n    end: 'start'\n  };\n  function clamp(start, value, end) {\n    return max(start, min(value, end));\n  }\n  function evaluate(value, param) {\n    return typeof value === 'function' ? value(param) : value;\n  }\n  function getSide(placement) {\n    return placement.split('-')[0];\n  }\n  function getAlignment(placement) {\n    return placement.split('-')[1];\n  }\n  function getOppositeAxis(axis) {\n    return axis === 'x' ? 'y' : 'x';\n  }\n  function getAxisLength(axis) {\n    return axis === 'y' ? 'height' : 'width';\n  }\n  function getSideAxis(placement) {\n    return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n  }\n  function getAlignmentAxis(placement) {\n    return getOppositeAxis(getSideAxis(placement));\n  }\n  function getAlignmentSides(placement, rects, rtl) {\n    if (rtl === void 0) {\n      rtl = false;\n    }\n    const alignment = getAlignment(placement);\n    const alignmentAxis = getAlignmentAxis(placement);\n    const length = getAxisLength(alignmentAxis);\n    let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n    if (rects.reference[length] > rects.floating[length]) {\n      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n    }\n    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n  }\n  function getExpandedPlacements(placement) {\n    const oppositePlacement = getOppositePlacement(placement);\n    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n  }\n  function getOppositeAlignmentPlacement(placement) {\n    return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n  }\n  function getSideList(side, isStart, rtl) {\n    const lr = ['left', 'right'];\n    const rl = ['right', 'left'];\n    const tb = ['top', 'bottom'];\n    const bt = ['bottom', 'top'];\n    switch (side) {\n      case 'top':\n      case 'bottom':\n        if (rtl) return isStart ? rl : lr;\n        return isStart ? lr : rl;\n      case 'left':\n      case 'right':\n        return isStart ? tb : bt;\n      default:\n        return [];\n    }\n  }\n  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n    const alignment = getAlignment(placement);\n    let list = getSideList(getSide(placement), direction === 'start', rtl);\n    if (alignment) {\n      list = list.map(side => side + \"-\" + alignment);\n      if (flipAlignment) {\n        list = list.concat(list.map(getOppositeAlignmentPlacement));\n      }\n    }\n    return list;\n  }\n  function getOppositePlacement(placement) {\n    return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n  }\n  function expandPaddingObject(padding) {\n    return {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...padding\n    };\n  }\n  function getPaddingObject(padding) {\n    return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n      top: padding,\n      right: padding,\n      bottom: padding,\n      left: padding\n    };\n  }\n  function rectToClientRect(rect) {\n    const {\n      x,\n      y,\n      width,\n      height\n    } = rect;\n    return {\n      width,\n      height,\n      top: y,\n      left: x,\n      right: x + width,\n      bottom: y + height,\n      x,\n      y\n    };\n  }\n\n  exports.alignments = alignments;\n  exports.clamp = clamp;\n  exports.createCoords = createCoords;\n  exports.evaluate = evaluate;\n  exports.expandPaddingObject = expandPaddingObject;\n  exports.floor = floor;\n  exports.getAlignment = getAlignment;\n  exports.getAlignmentAxis = getAlignmentAxis;\n  exports.getAlignmentSides = getAlignmentSides;\n  exports.getAxisLength = getAxisLength;\n  exports.getExpandedPlacements = getExpandedPlacements;\n  exports.getOppositeAlignmentPlacement = getOppositeAlignmentPlacement;\n  exports.getOppositeAxis = getOppositeAxis;\n  exports.getOppositeAxisPlacements = getOppositeAxisPlacements;\n  exports.getOppositePlacement = getOppositePlacement;\n  exports.getPaddingObject = getPaddingObject;\n  exports.getSide = getSide;\n  exports.getSideAxis = getSideAxis;\n  exports.max = max;\n  exports.min = min;\n  exports.placements = placements;\n  exports.rectToClientRect = rectToClientRect;\n  exports.round = round;\n  exports.sides = sides;\n\n}));\n"
        }
    ]
}