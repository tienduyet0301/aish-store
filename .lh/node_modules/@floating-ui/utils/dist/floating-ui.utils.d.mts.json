{
    "sourceFile": "node_modules/@floating-ui/utils/dist/floating-ui.utils.d.mts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891762036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export declare type AlignedPlacement = `${Side}-${Alignment}`;\r\n\r\nexport declare type Alignment = 'start' | 'end';\r\n\r\nexport declare const alignments: Alignment[];\r\n\r\nexport declare type Axis = 'x' | 'y';\r\n\r\nexport declare function clamp(start: number, value: number, end: number): number;\r\n\r\nexport declare type ClientRectObject = Prettify<Rect & SideObject>;\r\n\r\nexport declare type Coords = {\r\n    [key in Axis]: number;\r\n};\r\n\r\nexport declare const createCoords: (v: number) => {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\nexport declare type Dimensions = {\r\n    [key in Length]: number;\r\n};\r\n\r\nexport declare interface ElementRects {\r\n    reference: Rect;\r\n    floating: Rect;\r\n}\r\n\r\nexport declare function evaluate<T, P>(value: T | ((param: P) => T), param: P): T;\r\n\r\nexport declare function expandPaddingObject(padding: Partial<SideObject>): SideObject;\r\n\r\nexport declare const floor: (x: number) => number;\r\n\r\nexport declare function getAlignment(placement: Placement): Alignment | undefined;\r\n\r\nexport declare function getAlignmentAxis(placement: Placement): Axis;\r\n\r\nexport declare function getAlignmentSides(placement: Placement, rects: ElementRects, rtl?: boolean): [Side, Side];\r\n\r\nexport declare function getAxisLength(axis: Axis): Length;\r\n\r\nexport declare function getExpandedPlacements(placement: Placement): Array<Placement>;\r\n\r\nexport declare function getOppositeAlignmentPlacement<T extends string>(placement: T): T;\r\n\r\nexport declare function getOppositeAxis(axis: Axis): Axis;\r\n\r\nexport declare function getOppositeAxisPlacements(placement: Placement, flipAlignment: boolean, direction: 'none' | Alignment, rtl?: boolean): Placement[];\r\n\r\nexport declare function getOppositePlacement<T extends string>(placement: T): T;\r\n\r\nexport declare function getPaddingObject(padding: Padding): SideObject;\r\n\r\nexport declare function getSide(placement: Placement): Side;\r\n\r\nexport declare function getSideAxis(placement: Placement): Axis;\r\n\r\nexport declare type Length = 'width' | 'height';\r\n\r\nexport declare const max: (...values: number[]) => number;\r\n\r\nexport declare const min: (...values: number[]) => number;\r\n\r\nexport declare type Padding = number | Prettify<Partial<SideObject>>;\r\n\r\nexport declare type Placement = Prettify<Side | AlignedPlacement>;\r\n\r\nexport declare const placements: Placement[];\r\n\r\ndeclare type Prettify<T> = {\r\n    [K in keyof T]: T[K];\r\n} & {};\r\n\r\nexport declare type Rect = Prettify<Coords & Dimensions>;\r\n\r\nexport declare function rectToClientRect(rect: Rect): ClientRectObject;\r\n\r\nexport declare const round: (x: number) => number;\r\n\r\nexport declare type Side = 'top' | 'right' | 'bottom' | 'left';\r\n\r\nexport declare type SideObject = {\r\n    [key in Side]: number;\r\n};\r\n\r\nexport declare const sides: Side[];\r\n\r\nexport declare type Strategy = 'absolute' | 'fixed';\r\n\r\n/**\r\n * Custom positioning reference element.\r\n * @see https://floating-ui.com/docs/virtual-elements\r\n */\r\nexport declare interface VirtualElement {\r\n    getBoundingClientRect(): ClientRectObject;\r\n    getClientRects?(): Array<ClientRectObject>;\r\n    contextElement?: any;\r\n}\r\n\r\nexport { }\r\n"
        }
    ]
}