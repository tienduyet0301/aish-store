{
    "sourceFile": "node_modules/sharp/src/pipeline.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893029494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n#ifndef SRC_PIPELINE_H_\n#define SRC_PIPELINE_H_\n\n#include <memory>\n#include <string>\n#include <vector>\n#include <unordered_map>\n\n#include <napi.h>\n#include <vips/vips8>\n\n#include \"./common.h\"\n\nNapi::Value pipeline(const Napi::CallbackInfo& info);\n\nstruct Composite {\n  sharp::InputDescriptor *input;\n  VipsBlendMode mode;\n  int gravity;\n  int left;\n  int top;\n  bool hasOffset;\n  bool tile;\n  bool premultiplied;\n\n  Composite():\n    input(nullptr),\n    mode(VIPS_BLEND_MODE_OVER),\n    gravity(0),\n    left(0),\n    top(0),\n    hasOffset(false),\n    tile(false),\n    premultiplied(false) {}\n};\n\nstruct PipelineBaton {\n  sharp::InputDescriptor *input;\n  std::vector<sharp::InputDescriptor *> join;\n  std::string formatOut;\n  std::string fileOut;\n  void *bufferOut;\n  size_t bufferOutLength;\n  int pageHeightOut;\n  int pagesOut;\n  std::vector<Composite *> composite;\n  std::vector<sharp::InputDescriptor *> joinChannelIn;\n  int topOffsetPre;\n  int leftOffsetPre;\n  int widthPre;\n  int heightPre;\n  int topOffsetPost;\n  int leftOffsetPost;\n  int widthPost;\n  int heightPost;\n  int width;\n  int height;\n  int channels;\n  VipsKernel kernel;\n  sharp::Canvas canvas;\n  int position;\n  std::vector<double> resizeBackground;\n  bool hasCropOffset;\n  int cropOffsetLeft;\n  int cropOffsetTop;\n  bool hasAttentionCenter;\n  int attentionX;\n  int attentionY;\n  bool premultiplied;\n  bool tileCentre;\n  bool fastShrinkOnLoad;\n  std::vector<double> tint;\n  bool flatten;\n  std::vector<double> flattenBackground;\n  bool unflatten;\n  bool negate;\n  bool negateAlpha;\n  double blurSigma;\n  VipsPrecision precision;\n  double minAmpl;\n  double brightness;\n  double saturation;\n  int hue;\n  double lightness;\n  int medianSize;\n  double sharpenSigma;\n  double sharpenM1;\n  double sharpenM2;\n  double sharpenX1;\n  double sharpenY2;\n  double sharpenY3;\n  int threshold;\n  bool thresholdGrayscale;\n  std::vector<double> trimBackground;\n  double trimThreshold;\n  bool trimLineArt;\n  int trimOffsetLeft;\n  int trimOffsetTop;\n  std::vector<double> linearA;\n  std::vector<double> linearB;\n  int dilateWidth;\n  int erodeWidth;\n  double gamma;\n  double gammaOut;\n  bool greyscale;\n  bool normalise;\n  int normaliseLower;\n  int normaliseUpper;\n  int claheWidth;\n  int claheHeight;\n  int claheMaxSlope;\n  int angle;\n  double rotationAngle;\n  std::vector<double> rotationBackground;\n  bool rotateBeforePreExtract;\n  bool flip;\n  bool flop;\n  int extendTop;\n  int extendBottom;\n  int extendLeft;\n  int extendRight;\n  std::vector<double> extendBackground;\n  VipsExtend extendWith;\n  bool withoutEnlargement;\n  bool withoutReduction;\n  std::vector<double> affineMatrix;\n  std::vector<double> affineBackground;\n  double affineIdx;\n  double affineIdy;\n  double affineOdx;\n  double affineOdy;\n  std::string affineInterpolator;\n  int jpegQuality;\n  bool jpegProgressive;\n  std::string jpegChromaSubsampling;\n  bool jpegTrellisQuantisation;\n  int jpegQuantisationTable;\n  bool jpegOvershootDeringing;\n  bool jpegOptimiseScans;\n  bool jpegOptimiseCoding;\n  bool pngProgressive;\n  int pngCompressionLevel;\n  bool pngAdaptiveFiltering;\n  bool pngPalette;\n  int pngQuality;\n  int pngEffort;\n  int pngBitdepth;\n  double pngDither;\n  int jp2Quality;\n  bool jp2Lossless;\n  int jp2TileHeight;\n  int jp2TileWidth;\n  std::string jp2ChromaSubsampling;\n  int webpQuality;\n  int webpAlphaQuality;\n  bool webpNearLossless;\n  bool webpLossless;\n  bool webpSmartSubsample;\n  bool webpSmartDeblock;\n  VipsForeignWebpPreset webpPreset;\n  int webpEffort;\n  bool webpMinSize;\n  bool webpMixed;\n  int gifBitdepth;\n  int gifEffort;\n  double gifDither;\n  double gifInterFrameMaxError;\n  double gifInterPaletteMaxError;\n  bool gifReuse;\n  bool gifProgressive;\n  int tiffQuality;\n  VipsForeignTiffCompression tiffCompression;\n  VipsForeignTiffPredictor tiffPredictor;\n  bool tiffPyramid;\n  int tiffBitdepth;\n  bool tiffMiniswhite;\n  bool tiffTile;\n  int tiffTileHeight;\n  int tiffTileWidth;\n  double tiffXres;\n  double tiffYres;\n  VipsForeignTiffResunit tiffResolutionUnit;\n  int heifQuality;\n  VipsForeignHeifCompression heifCompression;\n  int heifEffort;\n  std::string heifChromaSubsampling;\n  bool heifLossless;\n  int heifBitdepth;\n  double jxlDistance;\n  int jxlDecodingTier;\n  int jxlEffort;\n  bool jxlLossless;\n  VipsBandFormat rawDepth;\n  std::string err;\n  int keepMetadata;\n  int withMetadataOrientation;\n  double withMetadataDensity;\n  std::string withIccProfile;\n  std::unordered_map<std::string, std::string> withExif;\n  bool withExifMerge;\n  int timeoutSeconds;\n  std::vector<double> convKernel;\n  int convKernelWidth;\n  int convKernelHeight;\n  double convKernelScale;\n  double convKernelOffset;\n  sharp::InputDescriptor *boolean;\n  VipsOperationBoolean booleanOp;\n  VipsOperationBoolean bandBoolOp;\n  int extractChannel;\n  bool removeAlpha;\n  double ensureAlpha;\n  VipsInterpretation colourspacePipeline;\n  VipsInterpretation colourspace;\n  std::vector<int> delay;\n  int loop;\n  int tileSize;\n  int tileOverlap;\n  VipsForeignDzContainer tileContainer;\n  VipsForeignDzLayout tileLayout;\n  std::string tileFormat;\n  int tileAngle;\n  std::vector<double> tileBackground;\n  int tileSkipBlanks;\n  VipsForeignDzDepth tileDepth;\n  std::string tileId;\n  std::string tileBasename;\n  std::vector<double> recombMatrix;\n\n  PipelineBaton():\n    input(nullptr),\n    bufferOutLength(0),\n    pageHeightOut(0),\n    pagesOut(0),\n    topOffsetPre(-1),\n    topOffsetPost(-1),\n    channels(0),\n    kernel(VIPS_KERNEL_LANCZOS3),\n    canvas(sharp::Canvas::CROP),\n    position(0),\n    resizeBackground{ 0.0, 0.0, 0.0, 255.0 },\n    hasCropOffset(false),\n    cropOffsetLeft(0),\n    cropOffsetTop(0),\n    hasAttentionCenter(false),\n    attentionX(0),\n    attentionY(0),\n    premultiplied(false),\n    tint{ -1.0, 0.0, 0.0, 0.0 },\n    flatten(false),\n    flattenBackground{ 0.0, 0.0, 0.0 },\n    unflatten(false),\n    negate(false),\n    negateAlpha(true),\n    blurSigma(0.0),\n    brightness(1.0),\n    saturation(1.0),\n    hue(0),\n    lightness(0),\n    medianSize(0),\n    sharpenSigma(0.0),\n    sharpenM1(1.0),\n    sharpenM2(2.0),\n    sharpenX1(2.0),\n    sharpenY2(10.0),\n    sharpenY3(20.0),\n    threshold(0),\n    thresholdGrayscale(true),\n    trimBackground{},\n    trimThreshold(-1.0),\n    trimLineArt(false),\n    trimOffsetLeft(0),\n    trimOffsetTop(0),\n    linearA{},\n    linearB{},\n    dilateWidth(0),\n    erodeWidth(0),\n    gamma(0.0),\n    greyscale(false),\n    normalise(false),\n    normaliseLower(1),\n    normaliseUpper(99),\n    claheWidth(0),\n    claheHeight(0),\n    claheMaxSlope(3),\n    angle(0),\n    rotationAngle(0.0),\n    rotationBackground{ 0.0, 0.0, 0.0, 255.0 },\n    flip(false),\n    flop(false),\n    extendTop(0),\n    extendBottom(0),\n    extendLeft(0),\n    extendRight(0),\n    extendBackground{ 0.0, 0.0, 0.0, 255.0 },\n    extendWith(VIPS_EXTEND_BACKGROUND),\n    withoutEnlargement(false),\n    withoutReduction(false),\n    affineMatrix{ 1.0, 0.0, 0.0, 1.0 },\n    affineBackground{ 0.0, 0.0, 0.0, 255.0 },\n    affineIdx(0),\n    affineIdy(0),\n    affineOdx(0),\n    affineOdy(0),\n    affineInterpolator(\"bicubic\"),\n    jpegQuality(80),\n    jpegProgressive(false),\n    jpegChromaSubsampling(\"4:2:0\"),\n    jpegTrellisQuantisation(false),\n    jpegQuantisationTable(0),\n    jpegOvershootDeringing(false),\n    jpegOptimiseScans(false),\n    jpegOptimiseCoding(true),\n    pngProgressive(false),\n    pngCompressionLevel(6),\n    pngAdaptiveFiltering(false),\n    pngPalette(false),\n    pngQuality(100),\n    pngEffort(7),\n    pngBitdepth(8),\n    pngDither(1.0),\n    jp2Quality(80),\n    jp2Lossless(false),\n    jp2TileHeight(512),\n    jp2TileWidth(512),\n    jp2ChromaSubsampling(\"4:4:4\"),\n    webpQuality(80),\n    webpAlphaQuality(100),\n    webpNearLossless(false),\n    webpLossless(false),\n    webpSmartSubsample(false),\n    webpSmartDeblock(false),\n    webpPreset(VIPS_FOREIGN_WEBP_PRESET_DEFAULT),\n    webpEffort(4),\n    webpMinSize(false),\n    webpMixed(false),\n    gifBitdepth(8),\n    gifEffort(7),\n    gifDither(1.0),\n    gifInterFrameMaxError(0.0),\n    gifInterPaletteMaxError(3.0),\n    gifReuse(true),\n    gifProgressive(false),\n    tiffQuality(80),\n    tiffCompression(VIPS_FOREIGN_TIFF_COMPRESSION_JPEG),\n    tiffPredictor(VIPS_FOREIGN_TIFF_PREDICTOR_HORIZONTAL),\n    tiffPyramid(false),\n    tiffBitdepth(8),\n    tiffMiniswhite(false),\n    tiffTile(false),\n    tiffTileHeight(256),\n    tiffTileWidth(256),\n    tiffXres(1.0),\n    tiffYres(1.0),\n    tiffResolutionUnit(VIPS_FOREIGN_TIFF_RESUNIT_INCH),\n    heifQuality(50),\n    heifCompression(VIPS_FOREIGN_HEIF_COMPRESSION_AV1),\n    heifEffort(4),\n    heifChromaSubsampling(\"4:4:4\"),\n    heifLossless(false),\n    heifBitdepth(8),\n    jxlDistance(1.0),\n    jxlDecodingTier(0),\n    jxlEffort(7),\n    jxlLossless(false),\n    rawDepth(VIPS_FORMAT_UCHAR),\n    keepMetadata(0),\n    withMetadataOrientation(-1),\n    withMetadataDensity(0.0),\n    withExifMerge(true),\n    timeoutSeconds(0),\n    convKernelWidth(0),\n    convKernelHeight(0),\n    convKernelScale(0.0),\n    convKernelOffset(0.0),\n    boolean(nullptr),\n    booleanOp(VIPS_OPERATION_BOOLEAN_LAST),\n    bandBoolOp(VIPS_OPERATION_BOOLEAN_LAST),\n    extractChannel(-1),\n    removeAlpha(false),\n    ensureAlpha(-1.0),\n    colourspacePipeline(VIPS_INTERPRETATION_LAST),\n    colourspace(VIPS_INTERPRETATION_LAST),\n    loop(1),\n    tileSize(256),\n    tileOverlap(0),\n    tileContainer(VIPS_FOREIGN_DZ_CONTAINER_FS),\n    tileLayout(VIPS_FOREIGN_DZ_LAYOUT_DZ),\n    tileAngle(0),\n    tileBackground{ 255.0, 255.0, 255.0, 255.0 },\n    tileSkipBlanks(-1),\n    tileDepth(VIPS_FOREIGN_DZ_DEPTH_LAST) {}\n};\n\n#endif  // SRC_PIPELINE_H_\n"
        }
    ]
}