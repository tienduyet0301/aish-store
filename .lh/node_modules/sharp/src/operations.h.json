{
    "sourceFile": "node_modules/sharp/src/operations.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893029401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// Copyright 2013 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\n#ifndef SRC_OPERATIONS_H_\n#define SRC_OPERATIONS_H_\n\n#include <algorithm>\n#include <functional>\n#include <memory>\n#include <tuple>\n#include <vips/vips8>\n\nusing vips::VImage;\n\nnamespace sharp {\n\n  /*\n   * Tint an image using the provided RGB.\n   */\n  VImage Tint(VImage image, std::vector<double> const tint);\n\n  /*\n   * Stretch luminance to cover full dynamic range.\n   */\n  VImage Normalise(VImage image, int const lower, int const upper);\n\n  /*\n   * Contrast limiting adapative histogram equalization (CLAHE)\n   */\n  VImage Clahe(VImage image, int const width, int const height, int const maxSlope);\n\n  /*\n   * Gamma encoding/decoding\n   */\n  VImage Gamma(VImage image, double const exponent);\n\n  /*\n   * Flatten image to remove alpha channel\n   */\n  VImage Flatten(VImage image, std::vector<double> flattenBackground);\n\n  /*\n   * Produce the \"negative\" of the image.\n   */\n  VImage Negate(VImage image, bool const negateAlpha);\n\n  /*\n   * Gaussian blur. Use sigma of -1.0 for fast blur.\n   */\n  VImage Blur(VImage image, double const sigma, VipsPrecision precision, double const minAmpl);\n\n  /*\n   * Convolution with a kernel.\n   */\n  VImage Convolve(VImage image, int const width, int const height,\n    double const scale, double const offset, std::vector<double> const &kernel_v);\n\n  /*\n   * Sharpen flat and jagged areas. Use sigma of -1.0 for fast sharpen.\n   */\n  VImage Sharpen(VImage image, double const sigma, double const m1, double const m2,\n    double const x1, double const y2, double const y3);\n\n  /*\n    Threshold an image\n  */\n  VImage Threshold(VImage image, double const threshold, bool const thresholdColor);\n\n  /*\n    Perform boolean/bitwise operation on image color channels - results in one channel image\n  */\n  VImage Bandbool(VImage image, VipsOperationBoolean const boolean);\n\n  /*\n    Perform bitwise boolean operation between images\n  */\n  VImage Boolean(VImage image, VImage imageR, VipsOperationBoolean const boolean);\n\n  /*\n    Trim an image\n  */\n  VImage Trim(VImage image, std::vector<double> background, double threshold, bool const lineArt);\n\n  /*\n   * Linear adjustment (a * in + b)\n   */\n  VImage Linear(VImage image, std::vector<double> const a,  std::vector<double> const b);\n\n  /*\n   * Unflatten\n   */\n  VImage Unflatten(VImage image);\n\n  /*\n   * Recomb with a Matrix of the given bands/channel size.\n   * Eg. RGB will be a 3x3 matrix.\n   */\n  VImage Recomb(VImage image, std::vector<double> const &matrix);\n\n  /*\n   * Modulate brightness, saturation, hue and lightness\n   */\n  VImage Modulate(VImage image, double const brightness, double const saturation,\n                  int const hue, double const lightness);\n\n  /*\n   * Ensure the image is in a given colourspace\n   */\n  VImage EnsureColourspace(VImage image, VipsInterpretation colourspace);\n\n  /*\n   * Split and crop each frame, reassemble, and update pageHeight.\n   */\n  VImage CropMultiPage(VImage image, int left, int top, int width, int height,\n                       int nPages, int *pageHeight);\n\n  /*\n   * Split into frames, embed each frame, reassemble, and update pageHeight.\n   */\n  VImage EmbedMultiPage(VImage image, int left, int top, int width, int height,\n                        VipsExtend extendWith, std::vector<double> background, int nPages, int *pageHeight);\n\n  /*\n   * Dilate an image\n   */\n  VImage Dilate(VImage image, int const maskWidth);\n\n  /*\n   * Erode an image\n   */\n  VImage Erode(VImage image, int const maskWidth);\n}  // namespace sharp\n\n#endif  // SRC_OPERATIONS_H_\n"
        }
    ]
}