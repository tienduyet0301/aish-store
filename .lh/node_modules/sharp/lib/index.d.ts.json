{
    "sourceFile": "node_modules/sharp/lib/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893027693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Copyright 2017 François Nguyen and others.\n *\n * Billy Kwok <https://github.com/billykwok>\n * Bradley Odell <https://github.com/BTOdell>\n * Espen Hovlandsdal <https://github.com/rexxars>\n * Floris de Bijl <https://github.com/Fdebijl>\n * François Nguyen <https://github.com/phurytw>\n * Jamie Woodbury <https://github.com/JamieWoodbury>\n * Wooseop Kim <https://github.com/wooseopkim>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of\n * the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n// SPDX-License-Identifier: MIT\n\n/// <reference types=\"node\" />\n\nimport { Duplex } from 'stream';\n\n//#region Constructor functions\n\n/**\n * Creates a sharp instance from an image\n * @param input Buffer containing JPEG, PNG, WebP, AVIF, GIF, SVG, TIFF or raw pixel image data, or String containing the path to an JPEG, PNG, WebP, AVIF, GIF, SVG or TIFF image file.\n * @param options Object with optional attributes.\n * @throws {Error} Invalid parameters\n * @returns A sharp instance that can be used to chain operations\n */\ndeclare function sharp(options?: sharp.SharpOptions): sharp.Sharp;\ndeclare function sharp(\n    input?: sharp.SharpInput | Array<sharp.SharpInput>,\n    options?: sharp.SharpOptions,\n): sharp.Sharp;\n\ndeclare namespace sharp {\n    /** Object containing nested boolean values representing the available input and output formats/methods. */\n    const format: FormatEnum;\n\n    /** An Object containing the version numbers of sharp, libvips and its dependencies. */\n    const versions: {\n        aom?: string | undefined;\n        archive?: string | undefined;\n        cairo?: string | undefined;\n        cgif?: string | undefined;\n        exif?: string | undefined;\n        expat?: string | undefined;\n        ffi?: string | undefined;\n        fontconfig?: string | undefined;\n        freetype?: string | undefined;\n        fribidi?: string | undefined;\n        glib?: string | undefined;\n        harfbuzz?: string | undefined;\n        heif?: string | undefined;\n        highway?: string | undefined;\n        imagequant?: string | undefined;\n        lcms?: string | undefined;\n        mozjpeg?: string | undefined;\n        pango?: string | undefined;\n        pixman?: string | undefined;\n        png?: string | undefined;\n        \"proxy-libintl\"?: string | undefined;\n        rsvg?: string | undefined;\n        sharp: string;\n        spng?: string | undefined;\n        tiff?: string | undefined;\n        vips: string;\n        webp?: string | undefined;\n        xml?: string | undefined;\n        \"zlib-ng\"?: string | undefined;\n    };\n\n    /** An Object containing the available interpolators and their proper values */\n    const interpolators: Interpolators;\n\n    /** An EventEmitter that emits a change event when a task is either queued, waiting for libuv to provide a worker thread, complete */\n    const queue: NodeJS.EventEmitter;\n\n    //#endregion\n\n    //#region Utility functions\n\n    /**\n     * Gets or, when options are provided, sets the limits of libvips' operation cache.\n     * Existing entries in the cache will be trimmed after any change in limits.\n     * This method always returns cache statistics, useful for determining how much working memory is required for a particular task.\n     * @param options Object with the following attributes, or Boolean where true uses default cache settings and false removes all caching (optional, default true)\n     * @returns The cache results.\n     */\n    function cache(options?: boolean | CacheOptions): CacheResult;\n\n    /**\n     * Gets or sets the number of threads libvips' should create to process each image.\n     * The default value is the number of CPU cores. A value of 0 will reset to this default.\n     * The maximum number of images that can be processed in parallel is limited by libuv's UV_THREADPOOL_SIZE environment variable.\n     * @param concurrency The new concurrency value.\n     * @returns The current concurrency value.\n     */\n    function concurrency(concurrency?: number): number;\n\n    /**\n     * Provides access to internal task counters.\n     * @returns Object containing task counters\n     */\n    function counters(): SharpCounters;\n\n    /**\n     * Get and set use of SIMD vector unit instructions. Requires libvips to have been compiled with highway support.\n     * Improves the performance of resize, blur and sharpen operations by taking advantage of the SIMD vector unit of the CPU, e.g. Intel SSE and ARM NEON.\n     * @param enable enable or disable use of SIMD vector unit instructions\n     * @returns true if usage of SIMD vector unit instructions is enabled\n     */\n    function simd(enable?: boolean): boolean;\n\n    /**\n     * Block libvips operations at runtime.\n     *\n     * This is in addition to the `VIPS_BLOCK_UNTRUSTED` environment variable,\n     * which when set will block all \"untrusted\" operations.\n     *\n     * @since 0.32.4\n     *\n     * @example <caption>Block all TIFF input.</caption>\n     * sharp.block({\n     *   operation: ['VipsForeignLoadTiff']\n     * });\n     *\n     * @param {Object} options\n     * @param {Array<string>} options.operation - List of libvips low-level operation names to block.\n     */\n    function block(options: { operation: string[] }): void;\n\n    /**\n     * Unblock libvips operations at runtime.\n     *\n     * This is useful for defining a list of allowed operations.\n     *\n     * @since 0.32.4\n     *\n     * @example <caption>Block all input except WebP from the filesystem.</caption>\n     * sharp.block({\n     *   operation: ['VipsForeignLoad']\n     * });\n     * sharp.unblock({\n     *   operation: ['VipsForeignLoadWebpFile']\n     * });\n     *\n     * @example <caption>Block all input except JPEG and PNG from a Buffer or Stream.</caption>\n     * sharp.block({\n     *   operation: ['VipsForeignLoad']\n     * });\n     * sharp.unblock({\n     *   operation: ['VipsForeignLoadJpegBuffer', 'VipsForeignLoadPngBuffer']\n     * });\n     *\n     * @param {Object} options\n     * @param {Array<string>} options.operation - List of libvips low-level operation names to unblock.\n     */\n    function unblock(options: { operation: string[] }): void;\n\n    //#endregion\n\n    const gravity: GravityEnum;\n    const strategy: StrategyEnum;\n    const kernel: KernelEnum;\n    const fit: FitEnum;\n    const bool: BoolEnum;\n\n    interface Sharp extends Duplex {\n        //#region Channel functions\n\n        /**\n         * Remove alpha channel, if any. This is a no-op if the image does not have an alpha channel.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        removeAlpha(): Sharp;\n\n        /**\n         * Ensure alpha channel, if missing. The added alpha channel will be fully opaque. This is a no-op if the image already has an alpha channel.\n         * @param alpha transparency level (0=fully-transparent, 1=fully-opaque) (optional, default 1).\n         * @returns A sharp instance that can be used to chain operations\n         */\n        ensureAlpha(alpha?: number): Sharp;\n\n        /**\n         * Extract a single channel from a multi-channel image.\n         * @param channel zero-indexed channel/band number to extract, or red, green, blue or alpha.\n         * @throws {Error} Invalid channel\n         * @returns A sharp instance that can be used to chain operations\n         */\n        extractChannel(channel: 0 | 1 | 2 | 3 | 'red' | 'green' | 'blue' | 'alpha'): Sharp;\n\n        /**\n         * Join one or more channels to the image. The meaning of the added channels depends on the output colourspace, set with toColourspace().\n         * By default the output image will be web-friendly sRGB, with additional channels interpreted as alpha channels. Channel ordering follows vips convention:\n         *  - sRGB: 0: Red, 1: Green, 2: Blue, 3: Alpha.\n         *  - CMYK: 0: Magenta, 1: Cyan, 2: Yellow, 3: Black, 4: Alpha.\n         *\n         * Buffers may be any of the image formats supported by sharp.\n         * For raw pixel input, the options object should contain a raw attribute, which follows the format of the attribute of the same name in the sharp() constructor.\n         * @param images one or more images (file paths, Buffers).\n         * @param options image options, see sharp() constructor.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        joinChannel(images: string | Buffer | ArrayLike<string | Buffer>, options?: SharpOptions): Sharp;\n\n        /**\n         * Perform a bitwise boolean operation on all input image channels (bands) to produce a single channel output image.\n         * @param boolOp one of \"and\", \"or\" or \"eor\" to perform that bitwise operation, like the C logic operators &, | and ^ respectively.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        bandbool(boolOp: keyof BoolEnum): Sharp;\n\n        //#endregion\n\n        //#region Color functions\n\n        /**\n         * Tint the image using the provided colour.\n         * An alpha channel may be present and will be unchanged by the operation.\n         * @param tint Parsed by the color module.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        tint(tint: Colour | Color): Sharp;\n\n        /**\n         * Convert to 8-bit greyscale; 256 shades of grey.\n         * This is a linear operation.\n         * If the input image is in a non-linear colour space such as sRGB, use gamma() with greyscale() for the best results.\n         * By default the output image will be web-friendly sRGB and contain three (identical) colour channels.\n         * This may be overridden by other sharp operations such as toColourspace('b-w'), which will produce an output image containing one colour channel.\n         * An alpha channel may be present, and will be unchanged by the operation.\n         * @param greyscale true to enable and false to disable (defaults to true)\n         * @returns A sharp instance that can be used to chain operations\n         */\n        greyscale(greyscale?: boolean): Sharp;\n\n        /**\n         * Alternative spelling of greyscale().\n         * @param grayscale true to enable and false to disable (defaults to true)\n         * @returns A sharp instance that can be used to chain operations\n         */\n        grayscale(grayscale?: boolean): Sharp;\n\n        /**\n         * Set the pipeline colourspace.\n         * The input image will be converted to the provided colourspace at the start of the pipeline.\n         * All operations will use this colourspace before converting to the output colourspace, as defined by toColourspace.\n         * This feature is experimental and has not yet been fully-tested with all operations.\n         *\n         * @param colourspace pipeline colourspace e.g. rgb16, scrgb, lab, grey16 ...\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        pipelineColourspace(colourspace?: string): Sharp;\n\n        /**\n         * Alternative spelling of pipelineColourspace\n         * @param colorspace pipeline colourspace e.g. rgb16, scrgb, lab, grey16 ...\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        pipelineColorspace(colorspace?: string): Sharp;\n\n        /**\n         * Set the output colourspace.\n         * By default output image will be web-friendly sRGB, with additional channels interpreted as alpha channels.\n         * @param colourspace output colourspace e.g. srgb, rgb, cmyk, lab, b-w ...\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        toColourspace(colourspace?: string): Sharp;\n\n        /**\n         * Alternative spelling of toColourspace().\n         * @param colorspace output colorspace e.g. srgb, rgb, cmyk, lab, b-w ...\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        toColorspace(colorspace: string): Sharp;\n\n        //#endregion\n\n        //#region Composite functions\n\n        /**\n         * Composite image(s) over the processed (resized, extracted etc.) image.\n         *\n         * The images to composite must be the same size or smaller than the processed image.\n         * If both `top` and `left` options are provided, they take precedence over `gravity`.\n         * @param images - Ordered list of images to composite\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        composite(images: OverlayOptions[]): Sharp;\n\n        //#endregion\n\n        //#region Input functions\n\n        /**\n         * Take a \"snapshot\" of the Sharp instance, returning a new instance.\n         * Cloned instances inherit the input of their parent instance.\n         * This allows multiple output Streams and therefore multiple processing pipelines to share a single input Stream.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        clone(): Sharp;\n\n        /**\n         * Fast access to (uncached) image metadata without decoding any compressed image data.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        metadata(callback: (err: Error, metadata: Metadata) => void): Sharp;\n\n        /**\n         * Fast access to (uncached) image metadata without decoding any compressed image data.\n         * @returns A promise that resolves with a metadata object\n         */\n        metadata(): Promise<Metadata>;\n\n        /**\n         * Keep all metadata (EXIF, ICC, XMP, IPTC) from the input image in the output image.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        keepMetadata(): Sharp;\n\n        /**\n         * Access to pixel-derived image statistics for every channel in the image.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        stats(callback: (err: Error, stats: Stats) => void): Sharp;\n\n        /**\n         * Access to pixel-derived image statistics for every channel in the image.\n         * @returns A promise that resolves with a stats object\n         */\n        stats(): Promise<Stats>;\n\n        //#endregion\n\n        //#region Operation functions\n\n        /**\n         * Rotate the output image by either an explicit angle\n         * or auto-orient based on the EXIF `Orientation` tag.\n         *\n         * If an angle is provided, it is converted to a valid positive degree rotation.\n         * For example, `-450` will produce a 270 degree rotation.\n         *\n         * When rotating by an angle other than a multiple of 90,\n         * the background colour can be provided with the `background` option.\n         *\n         * If no angle is provided, it is determined from the EXIF data.\n         * Mirroring is supported and may infer the use of a flip operation.\n         *\n         * The use of `rotate` without an angle will remove the EXIF `Orientation` tag, if any.\n         *\n         * Only one rotation can occur per pipeline (aside from an initial call without\n         * arguments to orient via EXIF data). Previous calls to `rotate` in the same\n         * pipeline will be ignored.\n         *\n         * Multi-page images can only be rotated by 180 degrees.\n         *\n         * Method order is important when rotating, resizing and/or extracting regions,\n         * for example `.rotate(x).extract(y)` will produce a different result to `.extract(y).rotate(x)`.\n         *\n         * @example\n         * const pipeline = sharp()\n         *   .rotate()\n         *   .resize(null, 200)\n         *   .toBuffer(function (err, outputBuffer, info) {\n         *     // outputBuffer contains 200px high JPEG image data,\n         *     // auto-rotated using EXIF Orientation tag\n         *     // info.width and info.height contain the dimensions of the resized image\n         *   });\n         * readableStream.pipe(pipeline);\n         *\n         * @example\n         * const rotateThenResize = await sharp(input)\n         *   .rotate(90)\n         *   .resize({ width: 16, height: 8, fit: 'fill' })\n         *   .toBuffer();\n         * const resizeThenRotate = await sharp(input)\n         *   .resize({ width: 16, height: 8, fit: 'fill' })\n         *   .rotate(90)\n         *   .toBuffer();\n         *\n         * @param {number} [angle=auto] angle of rotation.\n         * @param {Object} [options] - if present, is an Object with optional attributes.\n         * @param {string|Object} [options.background=\"#000000\"] parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha.\n         * @returns {Sharp}\n         * @throws {Error} Invalid parameters\n         */\n        rotate(angle?: number, options?: RotateOptions): Sharp;\n\n        /**\n         * Alias for calling `rotate()` with no arguments, which orients the image based\n         * on EXIF orientsion.\n         *\n         * This operation is aliased to emphasize its purpose, helping to remove any\n         * confusion between rotation and orientation.\n         *\n         * @example\n         * const output = await sharp(input).autoOrient().toBuffer();\n         *\n         * @returns {Sharp}\n         */\n        autoOrient(): Sharp\n  \n        /**\n         * Flip the image about the vertical Y axis. This always occurs after rotation, if any.\n         * The use of flip implies the removal of the EXIF Orientation tag, if any.\n         * @param flip true to enable and false to disable (defaults to true)\n         * @returns A sharp instance that can be used to chain operations\n         */\n        flip(flip?: boolean): Sharp;\n\n        /**\n         * Flop the image about the horizontal X axis. This always occurs after rotation, if any.\n         * The use of flop implies the removal of the EXIF Orientation tag, if any.\n         * @param flop true to enable and false to disable (defaults to true)\n         * @returns A sharp instance that can be used to chain operations\n         */\n        flop(flop?: boolean): Sharp;\n\n        /**\n         * Perform an affine transform on an image. This operation will always occur after resizing, extraction and rotation, if any.\n         * You must provide an array of length 4 or a 2x2 affine transformation matrix.\n         * By default, new pixels are filled with a black background. You can provide a background colour with the `background` option.\n         * A particular interpolator may also be specified. Set the `interpolator` option to an attribute of the `sharp.interpolators` Object e.g. `sharp.interpolators.nohalo`.\n         *\n         * In the case of a 2x2 matrix, the transform is:\n         * X = matrix[0, 0] * (x + idx) + matrix[0, 1] * (y + idy) + odx\n         * Y = matrix[1, 0] * (x + idx) + matrix[1, 1] * (y + idy) + ody\n         *\n         * where:\n         *\n         * x and y are the coordinates in input image.\n         * X and Y are the coordinates in output image.\n         * (0,0) is the upper left corner.\n         *\n         * @param matrix Affine transformation matrix, may either by a array of length four or a 2x2 matrix array\n         * @param options if present, is an Object with optional attributes.\n         *\n         * @returns A sharp instance that can be used to chain operations\n         */\n        affine(matrix: [number, number, number, number] | Matrix2x2, options?: AffineOptions): Sharp;\n\n        /**\n         * Sharpen the image.\n         * When used without parameters, performs a fast, mild sharpen of the output image.\n         * When a sigma is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n         * Fine-grained control over the level of sharpening in \"flat\" (m1) and \"jagged\" (m2) areas is available.\n         * @param options if present, is an Object with optional attributes\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        sharpen(options?: SharpenOptions): Sharp;\n\n        /**\n         * Sharpen the image.\n         * When used without parameters, performs a fast, mild sharpen of the output image.\n         * When a sigma is provided, performs a slower, more accurate sharpen of the L channel in the LAB colour space.\n         * Fine-grained control over the level of sharpening in \"flat\" (m1) and \"jagged\" (m2) areas is available.\n         * @param sigma the sigma of the Gaussian mask, where sigma = 1 + radius / 2.\n         * @param flat the level of sharpening to apply to \"flat\" areas. (optional, default 1.0)\n         * @param jagged the level of sharpening to apply to \"jagged\" areas. (optional, default 2.0)\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         *\n         * @deprecated Use the object parameter `sharpen({sigma, m1, m2, x1, y2, y3})` instead\n         */\n        sharpen(sigma?: number, flat?: number, jagged?: number): Sharp;\n\n        /**\n         * Apply median filter. When used without parameters the default window is 3x3.\n         * @param size square mask size: size x size (optional, default 3)\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        median(size?: number): Sharp;\n\n        /**\n         * Blur the image.\n         * When used without parameters, performs a fast, mild blur of the output image.\n         * When a sigma is provided, performs a slower, more accurate Gaussian blur.\n         * When a boolean sigma is provided, ether blur mild or disable blur\n         * @param sigma a value between 0.3 and 1000 representing the sigma of the Gaussian mask, where sigma = 1 + radius / 2.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        blur(sigma?: number | boolean | BlurOptions): Sharp;\n\n        /**\n         * Expand foreground objects using the dilate morphological operator.\n         * @param {Number} [width=1] dilation width in pixels.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        dilate(width?: number): Sharp;\n\n        /**\n         * Shrink foreground objects using the erode morphological operator.\n         * @param {Number} [width=1] erosion width in pixels.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        erode(width?: number): Sharp;\n\n        /**\n         * Merge alpha transparency channel, if any, with background.\n         * @param flatten true to enable and false to disable (defaults to true)\n         * @returns A sharp instance that can be used to chain operations\n         */\n        flatten(flatten?: boolean | FlattenOptions): Sharp;\n\n        /**\n         * Ensure the image has an alpha channel with all white pixel values made fully transparent.\n         * Existing alpha channel values for non-white pixels remain unchanged.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        unflatten(): Sharp;\n\n        /**\n         * Apply a gamma correction by reducing the encoding (darken) pre-resize at a factor of 1/gamma then increasing the encoding (brighten) post-resize at a factor of gamma.\n         * This can improve the perceived brightness of a resized image in non-linear colour spaces.\n         * JPEG and WebP input images will not take advantage of the shrink-on-load performance optimisation when applying a gamma correction.\n         * Supply a second argument to use a different output gamma value, otherwise the first value is used in both cases.\n         * @param gamma value between 1.0 and 3.0. (optional, default 2.2)\n         * @param gammaOut value between 1.0 and 3.0. (optional, defaults to same as gamma)\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        gamma(gamma?: number, gammaOut?: number): Sharp;\n\n        /**\n         * Produce the \"negative\" of the image.\n         * @param negate true to enable and false to disable, or an object of options (defaults to true)\n         * @returns A sharp instance that can be used to chain operations\n         */\n        negate(negate?: boolean | NegateOptions): Sharp;\n\n        /**\n         * Enhance output image contrast by stretching its luminance to cover a full dynamic range.\n         *\n         * Uses a histogram-based approach, taking a default range of 1% to 99% to reduce sensitivity to noise at the extremes.\n         *\n         * Luminance values below the `lower` percentile will be underexposed by clipping to zero.\n         * Luminance values above the `upper` percentile will be overexposed by clipping to the max pixel value.\n         *\n         * @param normalise options\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        normalise(normalise?: NormaliseOptions): Sharp;\n\n        /**\n         * Alternative spelling of normalise.\n         * @param normalize options\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        normalize(normalize?: NormaliseOptions): Sharp;\n\n        /**\n         * Perform contrast limiting adaptive histogram equalization (CLAHE)\n         *\n         * This will, in general, enhance the clarity of the image by bringing out\n         * darker details. Please read more about CLAHE here:\n         * https://en.wikipedia.org/wiki/Adaptive_histogram_equalization#Contrast_Limited_AHE\n         *\n         * @param options clahe options\n         */\n        clahe(options: ClaheOptions): Sharp;\n\n        /**\n         * Convolve the image with the specified kernel.\n         * @param kernel the specified kernel\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        convolve(kernel: Kernel): Sharp;\n\n        /**\n         * Any pixel value greather than or equal to the threshold value will be set to 255, otherwise it will be set to 0.\n         * @param threshold a value in the range 0-255 representing the level at which the threshold will be applied. (optional, default 128)\n         * @param options threshold options\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        threshold(threshold?: number, options?: ThresholdOptions): Sharp;\n\n        /**\n         * Perform a bitwise boolean operation with operand image.\n         * This operation creates an output image where each pixel is the result of the selected bitwise boolean operation between the corresponding pixels of the input images.\n         * @param operand Buffer containing image data or String containing the path to an image file.\n         * @param operator one of \"and\", \"or\" or \"eor\" to perform that bitwise operation, like the C logic operators &, | and ^ respectively.\n         * @param options describes operand when using raw pixel data.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        boolean(operand: string | Buffer, operator: keyof BoolEnum, options?: { raw: Raw }): Sharp;\n\n        /**\n         * Apply the linear formula a * input + b to the image (levels adjustment)\n         * @param a multiplier (optional, default 1.0)\n         * @param b offset (optional, default 0.0)\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        linear(a?: number | number[] | null, b?: number | number[]): Sharp;\n\n        /**\n         * Recomb the image with the specified matrix.\n         * @param inputMatrix 3x3 Recombination matrix or 4x4 Recombination matrix\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        recomb(inputMatrix: Matrix3x3 | Matrix4x4): Sharp;\n\n        /**\n         * Transforms the image using brightness, saturation, hue rotation and lightness.\n         * Brightness and lightness both operate on luminance, with the difference being that brightness is multiplicative whereas lightness is additive.\n         * @param options describes the modulation\n         * @returns A sharp instance that can be used to chain operations\n         */\n        modulate(options?: {\n            brightness?: number | undefined;\n            saturation?: number | undefined;\n            hue?: number | undefined;\n            lightness?: number | undefined;\n        }): Sharp;\n\n        //#endregion\n\n        //#region Output functions\n\n        /**\n         * Write output image data to a file.\n         * If an explicit output format is not selected, it will be inferred from the extension, with JPEG, PNG, WebP, AVIF, TIFF, DZI, and libvips' V format supported.\n         * Note that raw pixel data is only supported for buffer output.\n         * @param fileOut The path to write the image data to.\n         * @param callback Callback function called on completion with two arguments (err, info).  info contains the output image format, size (bytes), width, height and channels.\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        toFile(fileOut: string, callback: (err: Error, info: OutputInfo) => void): Sharp;\n\n        /**\n         * Write output image data to a file.\n         * @param fileOut The path to write the image data to.\n         * @throws {Error} Invalid parameters\n         * @returns A promise that fulfills with an object containing information on the resulting file\n         */\n        toFile(fileOut: string): Promise<OutputInfo>;\n\n        /**\n         * Write output to a Buffer. JPEG, PNG, WebP, AVIF, TIFF, GIF and RAW output are supported.\n         * By default, the format will match the input image, except SVG input which becomes PNG output.\n         * @param callback Callback function called on completion with three arguments (err, buffer, info).\n         * @returns A sharp instance that can be used to chain operations\n         */\n        toBuffer(callback: (err: Error, buffer: Buffer, info: OutputInfo) => void): Sharp;\n\n        /**\n         * Write output to a Buffer. JPEG, PNG, WebP, AVIF, TIFF, GIF and RAW output are supported.\n         * By default, the format will match the input image, except SVG input which becomes PNG output.\n         * @param options resolve options\n         * @param options.resolveWithObject Resolve the Promise with an Object containing data and info properties instead of resolving only with data.\n         * @returns A promise that resolves with the Buffer data.\n         */\n        toBuffer(options?: { resolveWithObject: false }): Promise<Buffer>;\n\n        /**\n         * Write output to a Buffer. JPEG, PNG, WebP, AVIF, TIFF, GIF and RAW output are supported.\n         * By default, the format will match the input image, except SVG input which becomes PNG output.\n         * @param options resolve options\n         * @param options.resolveWithObject Resolve the Promise with an Object containing data and info properties instead of resolving only with data.\n         * @returns A promise that resolves with an object containing the Buffer data and an info object containing the output image format, size (bytes), width, height and channels\n         */\n        toBuffer(options: { resolveWithObject: true }): Promise<{ data: Buffer; info: OutputInfo }>;\n\n        /**\n         * Keep all EXIF metadata from the input image in the output image.\n         * EXIF metadata is unsupported for TIFF output.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        keepExif(): Sharp;\n\n        /**\n         * Set EXIF metadata in the output image, ignoring any EXIF in the input image.\n         * @param {Exif} exif Object keyed by IFD0, IFD1 etc. of key/value string pairs to write as EXIF data.\n         * @returns A sharp instance that can be used to chain operations\n         * @throws {Error} Invalid parameters\n         */\n        withExif(exif: Exif): Sharp;\n\n        /**\n         * Update EXIF metadata from the input image in the output image.\n         * @param {Exif} exif Object keyed by IFD0, IFD1 etc. of key/value string pairs to write as EXIF data.\n         * @returns A sharp instance that can be used to chain operations\n         * @throws {Error} Invalid parameters\n         */\n        withExifMerge(exif: Exif): Sharp;\n\n        /**\n         * Keep ICC profile from the input image in the output image where possible.\n         * @returns A sharp instance that can be used to chain operations\n         */\n        keepIccProfile(): Sharp;\n\n        /**\n         * Transform using an ICC profile and attach to the output image.\n         * @param {string} icc - Absolute filesystem path to output ICC profile or built-in profile name (srgb, p3, cmyk).\n         * @returns A sharp instance that can be used to chain operations\n         * @throws {Error} Invalid parameters\n         */\n        withIccProfile(icc: string, options?: WithIccProfileOptions): Sharp;\n\n        /**\n         * Include all metadata (EXIF, XMP, IPTC) from the input image in the output image.\n         * The default behaviour, when withMetadata is not used, is to strip all metadata and convert to the device-independent sRGB colour space.\n         * This will also convert to and add a web-friendly sRGB ICC profile.\n         * @param withMetadata\n         * @throws {Error} Invalid parameters.\n         */\n        withMetadata(withMetadata?: WriteableMetadata): Sharp;\n\n        /**\n         * Use these JPEG options for output image.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        jpeg(options?: JpegOptions): Sharp;\n\n        /**\n         * Use these JP2 (JPEG 2000) options for output image.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        jp2(options?: Jp2Options): Sharp;\n\n        /**\n         * Use these JPEG-XL (JXL) options for output image.\n         * This feature is experimental, please do not use in production systems.\n         * Requires libvips compiled with support for libjxl.\n         * The prebuilt binaries do not include this.\n         * Image metadata (EXIF, XMP) is unsupported.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        jxl(options?: JxlOptions): Sharp;\n\n        /**\n         * Use these PNG options for output image.\n         * PNG output is always full colour at 8 or 16 bits per pixel.\n         * Indexed PNG input at 1, 2 or 4 bits per pixel is converted to 8 bits per pixel.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        png(options?: PngOptions): Sharp;\n\n        /**\n         * Use these WebP options for output image.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        webp(options?: WebpOptions): Sharp;\n\n        /**\n         * Use these GIF options for output image.\n         * Requires libvips compiled with support for ImageMagick or GraphicsMagick. The prebuilt binaries do not include this - see installing a custom libvips.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        gif(options?: GifOptions): Sharp;\n\n        /**\n         * Use these AVIF options for output image.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        avif(options?: AvifOptions): Sharp;\n\n        /**\n         * Use these HEIF options for output image.\n         * Support for patent-encumbered HEIC images requires the use of a globally-installed libvips compiled with support for libheif, libde265 and x265.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        heif(options?: HeifOptions): Sharp;\n\n        /**\n         * Use these TIFF options for output image.\n         * @param options Output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        tiff(options?: TiffOptions): Sharp;\n\n        /**\n         * Force output to be raw, uncompressed uint8 pixel data.\n         * @param options Raw output options.\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        raw(options?: RawOptions): Sharp;\n\n        /**\n         * Force output to a given format.\n         * @param format a String or an Object with an 'id' attribute\n         * @param options output options\n         * @throws {Error} Unsupported format or options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        toFormat(\n            format: keyof FormatEnum | AvailableFormatInfo,\n            options?:\n                | OutputOptions\n                | JpegOptions\n                | PngOptions\n                | WebpOptions\n                | AvifOptions\n                | HeifOptions\n                | JxlOptions\n                | GifOptions\n                | Jp2Options\n                | TiffOptions,\n        ): Sharp;\n\n        /**\n         * Use tile-based deep zoom (image pyramid) output.\n         * Set the format and options for tile images via the toFormat, jpeg, png or webp functions.\n         * Use a .zip or .szi file extension with toFile to write to a compressed archive file format.\n         * @param tile tile options\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        tile(tile?: TileOptions): Sharp;\n\n        /**\n         * Set a timeout for processing, in seconds. Use a value of zero to continue processing indefinitely, the default behaviour.\n         * The clock starts when libvips opens an input image for processing. Time spent waiting for a libuv thread to become available is not included.\n         * @param options Object with a `seconds` attribute between 0 and 3600 (number)\n         * @throws {Error} Invalid options\n         * @returns A sharp instance that can be used to chain operations\n         */\n        timeout(options: TimeoutOptions): Sharp;\n\n        //#endregion\n\n        //#region Resize functions\n\n        /**\n         * Resize image to width, height or width x height.\n         *\n         * When both a width and height are provided, the possible methods by which the image should fit these are:\n         *  - cover: Crop to cover both provided dimensions (the default).\n         *  - contain: Embed within both provided dimensions.\n         *  - fill: Ignore the aspect ratio of the input and stretch to both provided dimensions.\n         *  - inside: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\n         *  - outside: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n         *             Some of these values are based on the object-fit CSS property.\n         *\n         * When using a fit of cover or contain, the default position is centre. Other options are:\n         *  - sharp.position: top, right top, right, right bottom, bottom, left bottom, left, left top.\n         *  - sharp.gravity: north, northeast, east, southeast, south, southwest, west, northwest, center or centre.\n         *  - sharp.strategy: cover only, dynamically crop using either the entropy or attention strategy. Some of these values are based on the object-position CSS property.\n         *\n         * The experimental strategy-based approach resizes so one dimension is at its target length then repeatedly ranks edge regions,\n         * discarding the edge with the lowest score based on the selected strategy.\n         *  - entropy: focus on the region with the highest Shannon entropy.\n         *  - attention: focus on the region with the highest luminance frequency, colour saturation and presence of skin tones.\n         *\n         * Possible interpolation kernels are:\n         *  - nearest: Use nearest neighbour interpolation.\n         *  - cubic: Use a Catmull-Rom spline.\n         *  - lanczos2: Use a Lanczos kernel with a=2.\n         *  - lanczos3: Use a Lanczos kernel with a=3 (the default).\n         *\n         * @param width pixels wide the resultant image should be. Use null or undefined to auto-scale the width to match the height.\n         * @param height pixels high the resultant image should be. Use null or undefined to auto-scale the height to match the width.\n         * @param options resize options\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        resize(widthOrOptions?: number | ResizeOptions | null, height?: number | null, options?: ResizeOptions): Sharp;\n\n        /**\n         * Shorthand for resize(null, null, options);\n         *\n         * @param options resize options\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        resize(options: ResizeOptions): Sharp;\n\n        /**\n         * Extend / pad / extrude one or more edges of the image with either\n         * the provided background colour or pixels derived from the image.\n         * This operation will always occur after resizing and extraction, if any.\n         * @param extend single pixel count to add to all edges or an Object with per-edge counts\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        extend(extend: number | ExtendOptions): Sharp;\n\n        /**\n         * Extract a region of the image.\n         *  - Use extract() before resize() for pre-resize extraction.\n         *  - Use extract() after resize() for post-resize extraction.\n         *  - Use extract() before and after for both.\n         *\n         * @param region The region to extract\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        extract(region: Region): Sharp;\n\n        /**\n         * Trim pixels from all edges that contain values similar to the given background colour, which defaults to that of the top-left pixel.\n         * Images with an alpha channel will use the combined bounding box of alpha and non-alpha channels.\n         * The info response Object will contain trimOffsetLeft and trimOffsetTop properties.\n         * @param options trim options\n         * @throws {Error} Invalid parameters\n         * @returns A sharp instance that can be used to chain operations\n         */\n        trim(options?: TrimOptions): Sharp;\n\n        //#endregion\n    }\n\n    type SharpInput = Buffer\n        | ArrayBuffer\n        | Uint8Array\n        | Uint8ClampedArray\n        | Int8Array\n        | Uint16Array\n        | Int16Array\n        | Uint32Array\n        | Int32Array\n        | Float32Array\n        | Float64Array\n        | string;\n\n    interface SharpOptions {\n        /**\n         * Auto-orient based on the EXIF `Orientation` tag, if present.\n         * Mirroring is supported and may infer the use of a flip operation.\n         *\n         * Using this option will remove the EXIF `Orientation` tag, if any.\n         */\n        autoOrient?: boolean | undefined;\n        /**\n         *  When to abort processing of invalid pixel data, one of (in order of sensitivity):\n         *  'none' (least), 'truncated', 'error' or 'warning' (most), highers level imply lower levels, invalid metadata will always abort. (optional, default 'warning')\n         */\n        failOn?: FailOnOptions | undefined;\n        /**\n         * By default halt processing and raise an error when loading invalid images.\n         * Set this flag to false if you'd rather apply a \"best effort\" to decode images,\n         * even if the data is corrupt or invalid. (optional, default true)\n         *\n         * @deprecated Use `failOn` instead\n         */\n        failOnError?: boolean | undefined;\n        /**\n         * Do not process input images where the number of pixels (width x height) exceeds this limit.\n         * Assumes image dimensions contained in the input metadata can be trusted.\n         * An integral Number of pixels, zero or false to remove limit, true to use default limit of 268402689 (0x3FFF x 0x3FFF). (optional, default 268402689)\n         */\n        limitInputPixels?: number | boolean | undefined;\n        /** Set this to true to remove safety features that help prevent memory exhaustion (SVG, PNG). (optional, default false) */\n        unlimited?: boolean | undefined;\n        /** Set this to false to use random access rather than sequential read. Some operations will do this automatically. */\n        sequentialRead?: boolean | undefined;\n        /** Number representing the DPI for vector images in the range 1 to 100000. (optional, default 72) */\n        density?: number | undefined;\n        /** Should the embedded ICC profile, if any, be ignored. */\n        ignoreIcc?: boolean | undefined;\n        /** Number of pages to extract for multi-page input (GIF, TIFF, PDF), use -1 for all pages */\n        pages?: number | undefined;\n        /** Page number to start extracting from for multi-page input (GIF, TIFF, PDF), zero based. (optional, default 0) */\n        page?: number | undefined;\n        /** subIFD (Sub Image File Directory) to extract for OME-TIFF, defaults to main image. (optional, default -1) */\n        subifd?: number | undefined;\n        /** Level to extract from a multi-level input (OpenSlide), zero based. (optional, default 0) */\n        level?: number | undefined;\n        /** Background colour to use when PDF is partially transparent. Requires the use of a globally-installed libvips compiled with support for PDFium, Poppler, ImageMagick or GraphicsMagick. */\n        pdfBackground?: Colour | Color | undefined;\n        /** Set to `true` to read all frames/pages of an animated image (equivalent of setting `pages` to `-1`). (optional, default false) */\n        animated?: boolean | undefined;\n        /** Describes raw pixel input image data. See raw() for pixel ordering. */\n        raw?: CreateRaw | undefined;\n        /** Describes a new image to be created. */\n        create?: Create | undefined;\n        /** Describes a new text image to be created. */\n        text?: CreateText | undefined;\n        /** Describes how array of input images should be joined. */\n        join?: Join | undefined;\n    }\n\n    interface CacheOptions {\n        /** Is the maximum memory in MB to use for this cache (optional, default 50) */\n        memory?: number | undefined;\n        /** Is the maximum number of files to hold open (optional, default 20) */\n        files?: number | undefined;\n        /** Is the maximum number of operations to cache (optional, default 100) */\n        items?: number | undefined;\n    }\n\n    interface TimeoutOptions {\n        /** Number of seconds after which processing will be stopped (default 0, eg disabled) */\n        seconds: number;\n    }\n\n    interface SharpCounters {\n        /** The number of tasks this module has queued waiting for libuv to provide a worker thread from its pool. */\n        queue: number;\n        /** The number of resize tasks currently being processed. */\n        process: number;\n    }\n\n    interface Raw {\n        width: number;\n        height: number;\n        channels: Channels;\n    }\n\n    interface CreateRaw extends Raw {\n        /** Specifies that the raw input has already been premultiplied, set to true to avoid sharp premultiplying the image. (optional, default false) */\n        premultiplied?: boolean | undefined;\n    }\n\n    type CreateChannels = 3 | 4;\n\n    interface Create {\n        /** Number of pixels wide. */\n        width: number;\n        /** Number of pixels high. */\n        height: number;\n        /** Number of bands, 3 for RGB, 4 for RGBA */\n        channels: CreateChannels;\n        /** Parsed by the [color](https://www.npmjs.org/package/color) module to extract values for red, green, blue and alpha. */\n        background: Colour | Color;\n        /** Describes a noise to be created. */\n        noise?: Noise | undefined;\n    }\n\n    interface CreateText {\n        /** Text to render as a UTF-8 string. It can contain Pango markup, for example `<i>Le</i>Monde`. */\n        text: string;\n        /** Font name to render with. */\n        font?: string;\n        /** Absolute filesystem path to a font file that can be used by `font`. */\n        fontfile?: string;\n        /** Integral number of pixels to word-wrap at. Lines of text wider than this will be broken at word boundaries. (optional, default `0`) */\n        width?: number;\n        /**\n         * Integral number of pixels high. When defined, `dpi` will be ignored and the text will automatically fit the pixel resolution\n         * defined by `width` and `height`. Will be ignored if `width` is not specified or set to 0. (optional, default `0`)\n         */\n        height?: number;\n        /** Text alignment ('left', 'centre', 'center', 'right'). (optional, default 'left') */\n        align?: TextAlign;\n        /** Set this to true to apply justification to the text. (optional, default `false`) */\n        justify?: boolean;\n        /** The resolution (size) at which to render the text. Does not take effect if `height` is specified. (optional, default `72`) */\n        dpi?: number;\n        /**\n         * Set this to true to enable RGBA output. This is useful for colour emoji rendering,\n         * or support for pango markup features like `<span foreground=\"red\">Red!</span>`. (optional, default `false`)\n         */\n        rgba?: boolean;\n        /** Text line height in points. Will use the font line height if none is specified. (optional, default `0`) */\n        spacing?: number;\n        /** Word wrapping style when width is provided, one of: 'word', 'char', 'word-char' (prefer word, fallback to char) or 'none' */\n        wrap?: TextWrap;\n    }\n\n    interface Join {\n        /** Number of images per row. */\n        across?: number | undefined;\n        /** Treat input as frames of an animated image. */\n        animated?: boolean | undefined;\n        /** Space between images, in pixels. */\n        shim?: number | undefined;\n        /** Background colour. */\n        background?: Colour | Color | undefined;\n        /** Horizontal alignment. */\n        halign?: HorizontalAlignment | undefined;\n        /** Vertical alignment. */\n        valign?: VerticalAlignment | undefined;\n    }\n\n    interface ExifDir {\n        [k: string]: string;\n    }\n\n    interface Exif {\n        'IFD0'?: ExifDir;\n        'IFD1'?: ExifDir;\n        'IFD2'?: ExifDir;\n        'IFD3'?: ExifDir;\n    }\n\n    interface WriteableMetadata {\n        /** Number of pixels per inch (DPI) */\n        density?: number | undefined;\n        /** Value between 1 and 8, used to update the EXIF Orientation tag. */\n        orientation?: number | undefined;\n        /**\n         * Filesystem path to output ICC profile, defaults to sRGB.\n         * @deprecated Use `withIccProfile()` instead.\n        */\n        icc?: string | undefined;\n        /**\n         * Object keyed by IFD0, IFD1 etc. of key/value string pairs to write as EXIF data.\n         * @deprecated Use `withExif()` or `withExifMerge()` instead.\n         */\n        exif?: Exif | undefined;\n    }\n\n    interface Metadata {\n        /** Number value of the EXIF Orientation header, if present */\n        orientation?: number | undefined;\n        /** Name of decoder used to decompress image data e.g. jpeg, png, webp, gif, svg */\n        format?: keyof FormatEnum | undefined;\n        /** Total size of image in bytes, for Stream and Buffer input only */\n        size?: number | undefined;\n        /** Number of pixels wide (EXIF orientation is not taken into consideration) */\n        width?: number | undefined;\n        /** Number of pixels high (EXIF orientation is not taken into consideration) */\n        height?: number | undefined;\n        /** Any changed metadata after the image orientation is applied. */\n        autoOrient: {\n            /** Number of pixels wide (EXIF orientation is taken into consideration) */\n            width: number;\n            /** Number of pixels high (EXIF orientation is taken into consideration) */\n            height: number;\n        };\n        /** Name of colour space interpretation */\n        space?: keyof ColourspaceEnum | undefined;\n        /** Number of bands e.g. 3 for sRGB, 4 for CMYK */\n        channels?: Channels | undefined;\n        /** Name of pixel depth format e.g. uchar, char, ushort, float ... */\n        depth?: string | undefined;\n        /** Number of pixels per inch (DPI), if present */\n        density?: number | undefined;\n        /** String containing JPEG chroma subsampling, 4:2:0 or 4:4:4 for RGB, 4:2:0:4 or 4:4:4:4 for CMYK */\n        chromaSubsampling?: string | undefined;\n        /** Boolean indicating whether the image is interlaced using a progressive scan */\n        isProgressive?: boolean | undefined;\n        /** Boolean indicating whether the image is palette-based (GIF, PNG). */\n        isPalette?: boolean | undefined;\n        /** Number of bits per sample for each channel (GIF, PNG). */\n        bitsPerSample?: number | undefined;\n        /** Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP */\n        pages?: number | undefined;\n        /** Number of pixels high each page in a multi-page image will be. */\n        pageHeight?: number | undefined;\n        /** Number of times to loop an animated image, zero refers to a continuous loop. */\n        loop?: number | undefined;\n        /** Delay in ms between each page in an animated image, provided as an array of integers. */\n        delay?: number[] | undefined;\n        /**  Number of the primary page in a HEIF image */\n        pagePrimary?: number | undefined;\n        /** Boolean indicating the presence of an embedded ICC profile */\n        hasProfile?: boolean | undefined;\n        /** Boolean indicating the presence of an alpha transparency channel */\n        hasAlpha?: boolean | undefined;\n        /** Buffer containing raw EXIF data, if present */\n        exif?: Buffer | undefined;\n        /** Buffer containing raw ICC profile data, if present */\n        icc?: Buffer | undefined;\n        /** Buffer containing raw IPTC data, if present */\n        iptc?: Buffer | undefined;\n        /** Buffer containing raw XMP data, if present */\n        xmp?: Buffer | undefined;\n        /** Buffer containing raw TIFFTAG_PHOTOSHOP data, if present */\n        tifftagPhotoshop?: Buffer | undefined;\n        /** The encoder used to compress an HEIF file, `av1` (AVIF) or `hevc` (HEIC) */\n        compression?: 'av1' | 'hevc';\n        /** Default background colour, if present, for PNG (bKGD) and GIF images */\n        background?: { r: number; g: number; b: number } | { gray: number };\n        /** Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide */\n        levels?: LevelMetadata[] | undefined;\n        /** Number of Sub Image File Directories in an OME-TIFF image */\n        subifds?: number | undefined;\n        /** The unit of resolution (density) */\n        resolutionUnit?: 'inch' | 'cm' | undefined;\n        /** String containing format for images loaded via *magick */\n        formatMagick?: string | undefined;\n        /** Array of keyword/text pairs representing PNG text blocks, if present. */\n        comments?: CommentsMetadata[] | undefined;\n    }\n\n    interface LevelMetadata {\n        width: number;\n        height: number;\n    }\n\n    interface CommentsMetadata {\n        keyword: string;\n        text: string;\n    }\n\n    interface Stats {\n        /** Array of channel statistics for each channel in the image. */\n        channels: ChannelStats[];\n        /** Value to identify if the image is opaque or transparent, based on the presence and use of alpha channel */\n        isOpaque: boolean;\n        /** Histogram-based estimation of greyscale entropy, discarding alpha channel if any (experimental) */\n        entropy: number;\n        /** Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any (experimental) */\n        sharpness: number;\n        /** Object containing most dominant sRGB colour based on a 4096-bin 3D histogram (experimental) */\n        dominant: { r: number; g: number; b: number };\n    }\n\n    interface ChannelStats {\n        /** minimum value in the channel */\n        min: number;\n        /** maximum value in the channel */\n        max: number;\n        /** sum of all values in a channel */\n        sum: number;\n        /** sum of squared values in a channel */\n        squaresSum: number;\n        /** mean of the values in a channel */\n        mean: number;\n        /** standard deviation for the values in a channel */\n        stdev: number;\n        /** x-coordinate of one of the pixel where the minimum lies */\n        minX: number;\n        /** y-coordinate of one of the pixel where the minimum lies */\n        minY: number;\n        /** x-coordinate of one of the pixel where the maximum lies */\n        maxX: number;\n        /** y-coordinate of one of the pixel where the maximum lies */\n        maxY: number;\n    }\n\n    interface OutputOptions {\n        /** Force format output, otherwise attempt to use input format (optional, default true) */\n        force?: boolean | undefined;\n    }\n\n    interface WithIccProfileOptions {\n        /**  Should the ICC profile be included in the output image metadata? (optional, default true) */\n        attach?: boolean | undefined;\n    }\n\n    interface JpegOptions extends OutputOptions {\n        /** Quality, integer 1-100 (optional, default 80) */\n        quality?: number | undefined;\n        /** Use progressive (interlace) scan (optional, default false) */\n        progressive?: boolean | undefined;\n        /** Set to '4:4:4' to prevent chroma subsampling when quality <= 90 (optional, default '4:2:0') */\n        chromaSubsampling?: string | undefined;\n        /** Apply trellis quantisation (optional, default  false) */\n        trellisQuantisation?: boolean | undefined;\n        /** Apply overshoot deringing (optional, default  false) */\n        overshootDeringing?: boolean | undefined;\n        /** Optimise progressive scans, forces progressive (optional, default false) */\n        optimiseScans?: boolean | undefined;\n        /** Alternative spelling of optimiseScans (optional, default false) */\n        optimizeScans?: boolean | undefined;\n        /** Optimise Huffman coding tables (optional, default true) */\n        optimiseCoding?: boolean | undefined;\n        /** Alternative spelling of optimiseCoding (optional, default true) */\n        optimizeCoding?: boolean | undefined;\n        /** Quantization table to use, integer 0-8 (optional, default 0) */\n        quantisationTable?: number | undefined;\n        /** Alternative spelling of quantisationTable (optional, default 0) */\n        quantizationTable?: number | undefined;\n        /** Use mozjpeg defaults (optional, default false) */\n        mozjpeg?: boolean | undefined;\n    }\n\n    interface Jp2Options extends OutputOptions {\n        /** Quality, integer 1-100 (optional, default 80) */\n        quality?: number;\n        /** Use lossless compression mode (optional, default false) */\n        lossless?: boolean;\n        /** Horizontal tile size (optional, default 512) */\n        tileWidth?: number;\n        /** Vertical tile size (optional, default 512) */\n        tileHeight?: number;\n        /** Set to '4:2:0' to enable chroma subsampling (optional, default '4:4:4') */\n        chromaSubsampling?: '4:4:4' | '4:2:0';\n    }\n\n    interface JxlOptions extends OutputOptions {\n        /** Maximum encoding error, between 0 (highest quality) and 15 (lowest quality) (optional, default 1.0) */\n        distance?: number;\n        /** Calculate distance based on JPEG-like quality, between 1 and 100, overrides distance if specified */\n        quality?: number;\n        /** Target decode speed tier, between 0 (highest quality) and 4 (lowest quality) (optional, default 0) */\n        decodingTier?: number;\n        /** Use lossless compression (optional, default false) */\n        lossless?: boolean;\n        /** CPU effort, between 3 (fastest) and 9 (slowest) (optional, default 7) */\n        effort?: number | undefined;\n    }\n\n    interface WebpOptions extends OutputOptions, AnimationOptions {\n        /** Quality, integer 1-100 (optional, default 80) */\n        quality?: number | undefined;\n        /** Quality of alpha layer, number from 0-100 (optional, default 100) */\n        alphaQuality?: number | undefined;\n        /** Use lossless compression mode (optional, default false) */\n        lossless?: boolean | undefined;\n        /** Use near_lossless compression mode (optional, default false) */\n        nearLossless?: boolean | undefined;\n        /** Use high quality chroma subsampling (optional, default false) */\n        smartSubsample?: boolean | undefined;\n        /** Level of CPU effort to reduce file size, integer 0-6 (optional, default 4) */\n        effort?: number | undefined;\n        /** Prevent use of animation key frames to minimise file size (slow) (optional, default false) */\n        minSize?: boolean;\n        /** Allow mixture of lossy and lossless animation frames (slow) (optional, default false) */\n        mixed?: boolean;\n        /** Preset options: one of default, photo, picture, drawing, icon, text (optional, default 'default') */\n        preset?: keyof PresetEnum | undefined;\n    }\n\n    interface AvifOptions extends OutputOptions {\n        /** quality, integer 1-100 (optional, default 50) */\n        quality?: number | undefined;\n        /** use lossless compression (optional, default false) */\n        lossless?: boolean | undefined;\n        /** Level of CPU effort to reduce file size, between 0 (fastest) and 9 (slowest) (optional, default 4) */\n        effort?: number | undefined;\n        /** set to '4:2:0' to use chroma subsampling, requires libvips v8.11.0 (optional, default '4:4:4') */\n        chromaSubsampling?: string | undefined;\n        /** Set bitdepth to 8, 10 or 12 bit (optional, default 8) */\n        bitdepth?: 8 | 10 | 12 | undefined;\n    }\n\n    interface HeifOptions extends OutputOptions {\n        /** quality, integer 1-100 (optional, default 50) */\n        quality?: number | undefined;\n        /** compression format: av1, hevc (optional, default 'av1') */\n        compression?: 'av1' | 'hevc' | undefined;\n        /** use lossless compression (optional, default false) */\n        lossless?: boolean | undefined;\n        /** Level of CPU effort to reduce file size, between 0 (fastest) and 9 (slowest) (optional, default 4) */\n        effort?: number | undefined;\n        /** set to '4:2:0' to use chroma subsampling (optional, default '4:4:4') */\n        chromaSubsampling?: string | undefined;\n        /** Set bitdepth to 8, 10 or 12 bit (optional, default 8) */\n        bitdepth?: 8 | 10 | 12 | undefined;\n    }\n\n    interface GifOptions extends OutputOptions, AnimationOptions {\n        /** Re-use existing palette, otherwise generate new (slow) */\n        reuse?: boolean | undefined;\n        /** Use progressive (interlace) scan */\n        progressive?: boolean | undefined;\n        /** Maximum number of palette entries, including transparency, between 2 and 256 (optional, default 256) */\n        colours?: number | undefined;\n        /** Alternative spelling of \"colours\". Maximum number of palette entries, including transparency, between 2 and 256 (optional, default 256) */\n        colors?: number | undefined;\n        /** Level of CPU effort to reduce file size, between 1 (fastest) and 10 (slowest) (optional, default 7) */\n        effort?: number | undefined;\n        /** Level of Floyd-Steinberg error diffusion, between 0 (least) and 1 (most) (optional, default 1.0) */\n        dither?: number | undefined;\n        /** Maximum inter-frame error for transparency, between 0 (lossless) and 32 (optional, default 0) */\n        interFrameMaxError?: number;\n        /** Maximum inter-palette error for palette reuse, between 0 and 256 (optional, default 3) */\n        interPaletteMaxError?: number;\n    }\n\n    interface TiffOptions extends OutputOptions {\n        /** Quality, integer 1-100 (optional, default 80) */\n        quality?: number | undefined;\n        /** Compression options: none, jpeg, deflate, packbits, ccittfax4, lzw, webp, zstd, jp2k (optional, default 'jpeg') */\n        compression?: string | undefined;\n        /** Compression predictor options: none, horizontal, float (optional, default 'horizontal') */\n        predictor?: string | undefined;\n        /** Write an image pyramid (optional, default false) */\n        pyramid?: boolean | undefined;\n        /** Write a tiled tiff (optional, default false) */\n        tile?: boolean | undefined;\n        /** Horizontal tile size (optional, default 256) */\n        tileWidth?: number | undefined;\n        /** Vertical tile size (optional, default 256) */\n        tileHeight?: number | undefined;\n        /** Horizontal resolution in pixels/mm (optional, default 1.0) */\n        xres?: number | undefined;\n        /** Vertical resolution in pixels/mm (optional, default 1.0) */\n        yres?: number | undefined;\n        /** Reduce bitdepth to 1, 2 or 4 bit (optional, default 8) */\n        bitdepth?: 1 | 2 | 4 | 8 | undefined;\n        /** Write 1-bit images as miniswhite (optional, default false) */\n        miniswhite?: boolean | undefined;\n        /** Resolution unit options: inch, cm (optional, default 'inch') */\n        resolutionUnit?: 'inch' | 'cm' | undefined;\n    }\n\n    interface PngOptions extends OutputOptions {\n        /** Use progressive (interlace) scan (optional, default false) */\n        progressive?: boolean | undefined;\n        /** zlib compression level, 0-9 (optional, default 6) */\n        compressionLevel?: number | undefined;\n        /** Use adaptive row filtering (optional, default false) */\n        adaptiveFiltering?: boolean | undefined;\n        /** Use the lowest number of colours needed to achieve given quality (optional, default `100`) */\n        quality?: number | undefined;\n        /** Level of CPU effort to reduce file size, between 1 (fastest) and 10 (slowest), sets palette to true (optional, default 7) */\n        effort?: number | undefined;\n        /** Quantise to a palette-based image with alpha transparency support (optional, default false) */\n        palette?: boolean | undefined;\n        /** Maximum number of palette entries (optional, default 256) */\n        colours?: number | undefined;\n        /** Alternative Spelling of \"colours\". Maximum number of palette entries (optional, default 256) */\n        colors?: number | undefined;\n        /**  Level of Floyd-Steinberg error diffusion (optional, default 1.0) */\n        dither?: number | undefined;\n    }\n\n    interface RotateOptions {\n        /** parsed by the color module to extract values for red, green, blue and alpha. (optional, default \"#000000\") */\n        background?: Colour | Color | undefined;\n    }\n\n    type Precision = 'integer' | 'float' | 'approximate';\n\n    interface BlurOptions {\n        /** A value between 0.3 and 1000 representing the sigma of the Gaussian mask, where `sigma = 1 + radius / 2` */\n        sigma: number;\n        /** A value between 0.001 and 1. A smaller value will generate a larger, more accurate mask. */\n        minAmplitude?: number;\n        /** How accurate the operation should be, one of: integer, float, approximate. (optional, default \"integer\") */\n        precision?: Precision | undefined;\n    }\n\n    interface FlattenOptions {\n        /** background colour, parsed by the color module, defaults to black. (optional, default {r:0,g:0,b:0}) */\n        background?: Colour | Color | undefined;\n    }\n\n    interface NegateOptions {\n        /** whether or not to negate any alpha channel. (optional, default true) */\n        alpha?: boolean | undefined;\n    }\n\n    interface NormaliseOptions {\n        /** Percentile below which luminance values will be underexposed. */\n        lower?: number | undefined;\n        /** Percentile above which luminance values will be overexposed. */\n        upper?: number | undefined;\n    }\n\n    interface ResizeOptions {\n        /** Alternative means of specifying width. If both are present this takes priority. */\n        width?: number | undefined;\n        /** Alternative means of specifying height. If both are present this takes priority. */\n        height?: number | undefined;\n        /** How the image should be resized to fit both provided dimensions, one of cover, contain, fill, inside or outside. (optional, default 'cover') */\n        fit?: keyof FitEnum | undefined;\n        /** Position, gravity or strategy to use when fit is cover or contain. (optional, default 'centre') */\n        position?: number | string | undefined;\n        /** Background colour when using a fit of contain, parsed by the color module, defaults to black without transparency. (optional, default {r:0,g:0,b:0,alpha:1}) */\n        background?: Colour | Color | undefined;\n        /** The kernel to use for image reduction. (optional, default 'lanczos3') */\n        kernel?: keyof KernelEnum | undefined;\n        /** Do not enlarge if the width or height are already less than the specified dimensions, equivalent to GraphicsMagick's > geometry option. (optional, default false) */\n        withoutEnlargement?: boolean | undefined;\n        /** Do not reduce if the width or height are already greater than the specified dimensions, equivalent to GraphicsMagick's < geometry option. (optional, default false) */\n        withoutReduction?: boolean | undefined;\n        /** Take greater advantage of the JPEG and WebP shrink-on-load feature, which can lead to a slight moiré pattern on some images. (optional, default true) */\n        fastShrinkOnLoad?: boolean | undefined;\n    }\n\n    interface Region {\n        /** zero-indexed offset from left edge */\n        left: number;\n        /** zero-indexed offset from top edge */\n        top: number;\n        /** dimension of extracted image */\n        width: number;\n        /** dimension of extracted image */\n        height: number;\n    }\n\n    interface Noise {\n        /** type of generated noise, currently only gaussian is supported. */\n        type?: 'gaussian' | undefined;\n        /** mean of pixels in generated noise. */\n        mean?: number | undefined;\n        /** standard deviation of pixels in generated noise. */\n        sigma?: number | undefined;\n    }\n\n    type ExtendWith = 'background' | 'copy' | 'repeat' | 'mirror';\n\n    interface ExtendOptions {\n        /** single pixel count to top edge (optional, default 0) */\n        top?: number | undefined;\n        /** single pixel count to left edge (optional, default 0) */\n        left?: number | undefined;\n        /** single pixel count to bottom edge (optional, default 0) */\n        bottom?: number | undefined;\n        /** single pixel count to right edge (optional, default 0) */\n        right?: number | undefined;\n        /** background colour, parsed by the color module, defaults to black without transparency. (optional, default {r:0,g:0,b:0,alpha:1}) */\n        background?: Colour | Color | undefined;\n        /** how the extension is done, one of: \"background\", \"copy\", \"repeat\", \"mirror\" (optional, default `'background'`) */\n        extendWith?: ExtendWith | undefined;\n    }\n\n    interface TrimOptions {\n        /** Background colour, parsed by the color module, defaults to that of the top-left pixel. (optional) */\n        background?: Colour | Color | undefined;\n        /** Allowed difference from the above colour, a positive number. (optional, default 10) */\n        threshold?: number | undefined;\n        /** Does the input more closely resemble line art (e.g. vector) rather than being photographic? (optional, default false) */\n        lineArt?: boolean | undefined;\n    }\n\n    interface RawOptions {\n        depth?: 'char' | 'uchar' | 'short' | 'ushort' | 'int' | 'uint' | 'float' | 'complex' | 'double' | 'dpcomplex';\n    }\n\n    /** 1 for grayscale, 2 for grayscale + alpha, 3 for sRGB, 4 for CMYK or RGBA */\n    type Channels = 1 | 2 | 3 | 4;\n\n    interface RGBA {\n        r?: number | undefined;\n        g?: number | undefined;\n        b?: number | undefined;\n        alpha?: number | undefined;\n    }\n\n    type Colour = string | RGBA;\n    type Color = Colour;\n\n    interface Kernel {\n        /** width of the kernel in pixels. */\n        width: number;\n        /** height of the kernel in pixels. */\n        height: number;\n        /** Array of length width*height containing the kernel values. */\n        kernel: ArrayLike<number>;\n        /** the scale of the kernel in pixels. (optional, default sum) */\n        scale?: number | undefined;\n        /** the offset of the kernel in pixels. (optional, default 0) */\n        offset?: number | undefined;\n    }\n\n    interface ClaheOptions {\n        /** width of the region */\n        width: number;\n        /** height of the region */\n        height: number;\n        /** max slope of the cumulative contrast. A value of 0 disables contrast limiting. Valid values are integers in the range 0-100 (inclusive) (optional, default 3) */\n        maxSlope?: number | undefined;\n    }\n\n    interface ThresholdOptions {\n        /** convert to single channel greyscale. (optional, default true) */\n        greyscale?: boolean | undefined;\n        /** alternative spelling for greyscale. (optional, default true) */\n        grayscale?: boolean | undefined;\n    }\n\n    interface OverlayOptions extends SharpOptions {\n        /** Buffer containing image data, String containing the path to an image file, or Create object  */\n        input?: string | Buffer | { create: Create } | { text: CreateText } | { raw: CreateRaw } | undefined;\n        /** how to blend this image with the image below. (optional, default `'over'`) */\n        blend?: Blend | undefined;\n        /** gravity at which to place the overlay. (optional, default 'centre') */\n        gravity?: Gravity | undefined;\n        /** the pixel offset from the top edge. */\n        top?: number | undefined;\n        /** the pixel offset from the left edge. */\n        left?: number | undefined;\n        /** set to true to repeat the overlay image across the entire image with the given  gravity. (optional, default false) */\n        tile?: boolean | undefined;\n        /** Set to true to avoid premultipling the image below. Equivalent to the --premultiplied vips option. */\n        premultiplied?: boolean | undefined;\n        /** number representing the DPI for vector overlay image. (optional, default 72)*/\n        density?: number | undefined;\n        /** Set to true to read all frames/pages of an animated image. (optional, default false) */\n        animated?: boolean | undefined;\n        /** see sharp() constructor, (optional, default 'warning') */\n        failOn?: FailOnOptions | undefined;\n        /** see sharp() constructor, (optional, default 268402689) */\n        limitInputPixels?: number | boolean | undefined;\n        /** see sharp() constructor, (optional, default false) */\n        autoOrient?: boolean | undefined;\n    }\n\n    interface TileOptions {\n        /** Tile size in pixels, a value between 1 and 8192. (optional, default 256) */\n        size?: number | undefined;\n        /** Tile overlap in pixels, a value between 0 and 8192. (optional, default 0) */\n        overlap?: number | undefined;\n        /** Tile angle of rotation, must be a multiple of 90. (optional, default 0) */\n        angle?: number | undefined;\n        /** background colour, parsed by the color module, defaults to white without transparency. (optional, default {r:255,g:255,b:255,alpha:1}) */\n        background?: string | RGBA | undefined;\n        /** How deep to make the pyramid, possible values are \"onepixel\", \"onetile\" or \"one\" (default based on layout) */\n        depth?: string | undefined;\n        /** Threshold to skip tile generation, a value 0 - 255 for 8-bit images or 0 - 65535 for 16-bit images */\n        skipBlanks?: number | undefined;\n        /** Tile container, with value fs (filesystem) or zip (compressed file). (optional, default 'fs') */\n        container?: TileContainer | undefined;\n        /** Filesystem layout, possible values are dz, iiif, iiif3, zoomify or google. (optional, default 'dz') */\n        layout?: TileLayout | undefined;\n        /** Centre image in tile. (optional, default false) */\n        centre?: boolean | undefined;\n        /** Alternative spelling of centre. (optional, default false) */\n        center?: boolean | undefined;\n        /** When layout is iiif/iiif3, sets the @id/id attribute of info.json (optional, default 'https://example.com/iiif') */\n        id?: string | undefined;\n        /** The name of the directory within the zip file when container is `zip`. */\n        basename?: string | undefined;\n    }\n\n    interface AnimationOptions {\n        /** Number of animation iterations, a value between 0 and 65535. Use 0 for infinite animation. (optional, default 0) */\n        loop?: number | undefined;\n        /** delay(s) between animation frames (in milliseconds), each value between 0 and 65535. (optional) */\n        delay?: number | number[] | undefined;\n    }\n\n    interface SharpenOptions {\n        /** The sigma of the Gaussian mask, where sigma = 1 + radius / 2, between 0.000001 and 10000 */\n        sigma: number;\n        /** The level of sharpening to apply to \"flat\" areas, between 0 and 1000000 (optional, default 1.0) */\n        m1?: number | undefined;\n        /** The level of sharpening to apply to \"jagged\" areas, between 0 and 1000000 (optional, default 2.0) */\n        m2?: number | undefined;\n        /** Threshold between \"flat\" and \"jagged\", between 0 and 1000000 (optional, default 2.0) */\n        x1?: number | undefined;\n        /** Maximum amount of brightening, between 0 and 1000000 (optional, default 10.0) */\n        y2?: number | undefined;\n        /** Maximum amount of darkening, between 0 and 1000000 (optional, default 20.0) */\n        y3?: number | undefined;\n    }\n\n    interface AffineOptions {\n        /** Parsed by the color module to extract values for red, green, blue and alpha. (optional, default \"#000000\") */\n        background?: string | object | undefined;\n        /** Input horizontal offset (optional, default 0) */\n        idx?: number | undefined;\n        /** Input vertical offset (optional, default 0) */\n        idy?: number | undefined;\n        /** Output horizontal offset (optional, default 0) */\n        odx?: number | undefined;\n        /** Output horizontal offset (optional, default 0) */\n        ody?: number | undefined;\n        /** Interpolator (optional, default sharp.interpolators.bicubic) */\n        interpolator?: Interpolators[keyof Interpolators] | undefined;\n    }\n\n    interface OutputInfo {\n        format: string;\n        size: number;\n        width: number;\n        height: number;\n        channels: Channels;\n        /** indicating if premultiplication was used */\n        premultiplied: boolean;\n        /** Only defined when using a crop strategy */\n        cropOffsetLeft?: number | undefined;\n        /** Only defined when using a crop strategy */\n        cropOffsetTop?: number | undefined;\n        /** Only defined when using a trim method */\n        trimOffsetLeft?: number | undefined;\n        /** Only defined when using a trim method */\n        trimOffsetTop?: number | undefined;\n        /** DPI the font was rendered at, only defined when using `text` input */\n        textAutofitDpi?: number | undefined;\n        /** When using the attention crop strategy, the focal point of the cropped region */\n        attentionX?: number | undefined;\n        attentionY?: number | undefined;\n    }\n\n    interface AvailableFormatInfo {\n        id: string;\n        input: { file: boolean; buffer: boolean; stream: boolean; fileSuffix?: string[] };\n        output: { file: boolean; buffer: boolean; stream: boolean; alias?: string[] };\n    }\n\n    interface FitEnum {\n        contain: 'contain';\n        cover: 'cover';\n        fill: 'fill';\n        inside: 'inside';\n        outside: 'outside';\n    }\n\n    interface KernelEnum {\n        nearest: 'nearest';\n        cubic: 'cubic';\n        mitchell: 'mitchell';\n        lanczos2: 'lanczos2';\n        lanczos3: 'lanczos3';\n    }\n\n    interface PresetEnum {\n        default: 'default';\n        picture: 'picture';\n        photo: 'photo';\n        drawing: 'drawing';\n        icon: 'icon';\n        text: 'text';\n    }\n\n    interface BoolEnum {\n        and: 'and';\n        or: 'or';\n        eor: 'eor';\n    }\n\n    interface ColourspaceEnum {\n        multiband: string;\n        'b-w': string;\n        bw: string;\n        cmyk: string;\n        srgb: string;\n    }\n\n    type FailOnOptions = 'none' | 'truncated' | 'error' | 'warning';\n\n    type TextAlign = 'left' | 'centre' | 'center' | 'right';\n\n    type TextWrap = 'word' | 'char' | 'word-char' | 'none';\n\n    type HorizontalAlignment = 'left' | 'centre' | 'center' | 'right';\n\n    type VerticalAlignment = 'top' | 'centre' | 'center' | 'bottom';\n\n    type TileContainer = 'fs' | 'zip';\n\n    type TileLayout = 'dz' | 'iiif' | 'iiif3' | 'zoomify' | 'google';\n\n    type Blend =\n        | 'clear'\n        | 'source'\n        | 'over'\n        | 'in'\n        | 'out'\n        | 'atop'\n        | 'dest'\n        | 'dest-over'\n        | 'dest-in'\n        | 'dest-out'\n        | 'dest-atop'\n        | 'xor'\n        | 'add'\n        | 'saturate'\n        | 'multiply'\n        | 'screen'\n        | 'overlay'\n        | 'darken'\n        | 'lighten'\n        | 'color-dodge'\n        | 'colour-dodge'\n        | 'color-burn'\n        | 'colour-burn'\n        | 'hard-light'\n        | 'soft-light'\n        | 'difference'\n        | 'exclusion';\n\n    type Gravity = number | string;\n\n    interface GravityEnum {\n        north: number;\n        northeast: number;\n        southeast: number;\n        south: number;\n        southwest: number;\n        west: number;\n        northwest: number;\n        east: number;\n        center: number;\n        centre: number;\n    }\n\n    interface StrategyEnum {\n        entropy: number;\n        attention: number;\n    }\n\n    interface FormatEnum {\n        avif: AvailableFormatInfo;\n        dz: AvailableFormatInfo;\n        fits: AvailableFormatInfo;\n        gif: AvailableFormatInfo;\n        heif: AvailableFormatInfo;\n        input: AvailableFormatInfo;\n        jpeg: AvailableFormatInfo;\n        jpg: AvailableFormatInfo;\n        jp2: AvailableFormatInfo;\n        jxl: AvailableFormatInfo;\n        magick: AvailableFormatInfo;\n        openslide: AvailableFormatInfo;\n        pdf: AvailableFormatInfo;\n        png: AvailableFormatInfo;\n        ppm: AvailableFormatInfo;\n        raw: AvailableFormatInfo;\n        svg: AvailableFormatInfo;\n        tiff: AvailableFormatInfo;\n        tif: AvailableFormatInfo;\n        v: AvailableFormatInfo;\n        webp: AvailableFormatInfo;\n    }\n\n    interface CacheResult {\n        memory: { current: number; high: number; max: number };\n        files: { current: number; max: number };\n        items: { current: number; max: number };\n    }\n\n    interface Interpolators {\n        /** [Nearest neighbour interpolation](http://en.wikipedia.org/wiki/Nearest-neighbor_interpolation). Suitable for image enlargement only. */\n        nearest: 'nearest';\n        /** [Bilinear interpolation](http://en.wikipedia.org/wiki/Bilinear_interpolation). Faster than bicubic but with less smooth results. */\n        bilinear: 'bilinear';\n        /** [Bicubic interpolation](http://en.wikipedia.org/wiki/Bicubic_interpolation) (the default). */\n        bicubic: 'bicubic';\n        /**\n         * [LBB interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/lbb.cpp#L100).\n         * Prevents some \"[acutance](http://en.wikipedia.org/wiki/Acutance)\" but typically reduces performance by a factor of 2.\n         */\n        locallyBoundedBicubic: 'lbb';\n        /** [Nohalo interpolation](http://eprints.soton.ac.uk/268086/). Prevents acutance but typically reduces performance by a factor of 3. */\n        nohalo: 'nohalo';\n        /** [VSQBS interpolation](https://github.com/libvips/libvips/blob/master/libvips/resample/vsqbs.cpp#L48). Prevents \"staircasing\" when enlarging. */\n        vertexSplitQuadraticBasisSpline: 'vsqbs';\n    }\n\n    type Matrix2x2 = [[number, number], [number, number]];\n    type Matrix3x3 = [[number, number, number], [number, number, number], [number, number, number]];\n    type Matrix4x4 = [[number, number, number, number], [number, number, number, number], [number, number, number, number], [number, number, number, number]];\n}\n\nexport = sharp;\n"
        }
    ]
}