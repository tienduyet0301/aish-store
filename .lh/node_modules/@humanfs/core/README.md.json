{
    "sourceFile": "node_modules/@humanfs/core/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891878748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# `@humanfs/core`\n\nby [Nicholas C. Zakas](https://humanwhocodes.com)\n\nIf you find this useful, please consider supporting my work with a [donation](https://humanwhocodes.com/donate) or [nominate me](https://stars.github.com/nominate/) for a GitHub Star.\n\n## Description\n\nThe core functionality for humanfs that is shared across all implementations for all runtimes. The contents of this package are intentionally runtime agnostic and are not intended to be used alone.\n\nCurrently, this package simply exports the `Hfs` class, which is an abstract base class intended to be inherited from in runtime-specific hfs packages (like `@humanfs/node`).\n\n> [!WARNING]\n> This project is **experimental** and may change significantly before v1.0.0. Use at your own caution and definitely not in production!\n\n## Installation\n\n### Node.js\n\nInstall using your favorite package manager for Node.js:\n\n```shell\nnpm install @humanfs/core\n\n# or\n\npnpm install @humanfs/core\n\n# or\n\nyarn add @humanfs/core\n\n# or\n\nbun install @humanfs/core\n```\n\nThen you can import the `Hfs` and `Path` classes like this:\n\n```js\nimport { Hfs, Path } from \"@humanfs/core\";\n```\n\n### Deno\n\nInstall using [JSR](https://jsr.io):\n\n```shell\ndeno add @humanfs/core\n\n# or\n\njsr add @humanfs/core\n```\n\nThen you can import the `Hfs` class like this:\n\n```js\nimport { Hfs, Path } from \"@humanfs/core\";\n```\n\n### Browser\n\nIt's recommended to import the minified version to save bandwidth:\n\n```js\nimport { Hfs, Path } from \"https://cdn.skypack.dev/@humanfs/core?min\";\n```\n\nHowever, you can also import the unminified version for debugging purposes:\n\n```js\nimport { Hfs, Path } from \"https://cdn.skypack.dev/@humanfs/core\";\n```\n\n## Usage\n\n### `Hfs` Class\n\nThe `Hfs` class contains all of the basic functionality for an `Hfs` instance *without* a predefined impl. This class is mostly used for creating runtime-specific impls, such as `NodeHfs` and `DenoHfs`.\n\nYou can create your own instance by providing an `impl` directly:\n\n```js\nconst hfs = new Hfs({ impl: { async text() {} }});\n```\n\nThe specified `impl` becomes the base impl for the instance, meaning you can always reset back to it using `resetImpl()`.\n\nYou can also inherit from `Hfs` to create your own class with a preconfigured impl, such as:\n\n```js\nclass MyHfs extends Hfs {\n\tconstructor() {\n\t\tsuper({\n\t\t\timpl: myImpl\n\t\t});\n\t}\n}\n```\n\n### `Path` Class\n\nThe `Path` class represents the path to a directory or file within a file system. It's an abstract representation that can be used even outside of traditional file systems where string paths might not make sense.\n\n```js\nconst myPath = new Path([\"dir\", \"subdir\"]);\nconsole.log(myPath.toString());\t\t// \"dir/subdir\"\n\n// add another step\nmyPath.push(\"file.txt\");\nconsole.log(myPath.toString());\t\t// \"dir/subdir/file.txt\"\n\n// get just the last step\nconsole.log(myPath.name);\t\t\t// \"file.txt\"\n\n// change just the last step\nmyPath.name = \"file.json\";\nconsole.log(myPath.name);\t\t\t// \"file.json\"\nconsole.log(myPath.toString());\t\t// \"dir/subdir/file.json\"\n\n// get the size of the path\nconsole.log(myPath.size);\t\t\t// 3\n\n// remove the last step\nmyPath.pop();\nconsole.log(myPath.toString());\t\t// \"dir/subdir\"\n\n// iterate over the steps\nfor (const step of myPath) {\n\t// do something\n}\n\n// create a new path from a string\nconst newPath = Path.fromString(\"/foo/bar\");\n```\n\n## License\n\nApache 2.0\n"
        }
    ]
}