{
    "sourceFile": "node_modules/@humanfs/node/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891879205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# `@humanfs/node`\n\nby [Nicholas C. Zakas](https://humanwhocodes.com)\n\nIf you find this useful, please consider supporting my work with a [donation](https://humanwhocodes.com/donate) or [nominate me](https://stars.github.com/nominate/) for a GitHub Star.\n\n## Description\n\nThe `hfs` bindings for use in Node.js and Node.js-compatible runtimes.\n\n> [!WARNING]\n> This project is **experimental** and may change significantly before v1.0.0. Use at your own caution and definitely not in production!\n\n## Installation\n\nInstall using your favorite package manager:\n\n```shell\nnpm install @humanfs/node\n\n# or\n\npnpm install @humanfs/node\n\n# or\n\nyarn add @humanfs/node\n\n# or\n\nbun install @humanfs/node\n```\n\n## Usage\n\nThe easiest way to use hfs in your project is to import the `hfs` object:\n\n```js\nimport { hfs } from \"@humanfs/node\";\n```\n\nThen, you can use the API methods:\n\n```js\n// 1. Files\n\n// read from a text file\nconst text = await hfs.text(\"file.txt\");\n\n// read from a JSON file\nconst json = await hfs.json(\"file.json\");\n\n// read raw bytes from a text file\nconst arrayBuffer = await hfs.arrayBuffer(\"file.txt\");\n\n// write text to a file\nawait hfs.write(\"file.txt\", \"Hello world!\");\n\n// write bytes to a file\nawait hfs.write(\"file.txt\", new TextEncoder().encode(\"Hello world!\"));\n\n// append text to a file\nawait hfs.append(\"file.txt\", \"Hello world!\");\n\n// append bytes to a file\nawait hfs.append(\"file.txt\", new TextEncoder().encode(\"Hello world!\"));\n\n// does the file exist?\nconst found = await hfs.isFile(\"file.txt\");\n\n// how big is the file?\nconst size = await hfs.size(\"file.txt\");\n\n// when was the file modified?\nconst mtime = await hfs.lastModified(\"file.txt\");\n\n// copy a file from one location to another\nawait hfs.copy(\"file.txt\", \"file-copy.txt\");\n\n// move a file from one location to another\nawait hfs.move(\"file.txt\", \"renamed.txt\");\n\n// delete a file\nawait hfs.delete(\"file.txt\");\n\n// 2. Directories\n\n// create a directory\nawait hfs.createDirectory(\"dir\");\n\n// create a directory recursively\nawait hfs.createDirectory(\"dir/subdir\");\n\n// does the directory exist?\nconst dirFound = await hfs.isDirectory(\"dir\");\n\n// copy the entire directory\nhfs.copyAll(\"from-dir\", \"to-dir\");\n\n// move the entire directory\nhfs.moveAll(\"from-dir\", \"to-dir\");\n\n// delete a directory\nawait hfs.delete(\"dir\");\n\n// delete a non-empty directory\nawait hfs.deleteAll(\"dir\");\n```\n\nIf you'd like to create your own instance, import the `NodeHfs` constructor:\n\n```js\nimport { NodeHfs } from \"@humanfs/node\";\nimport fsp from \"fs/promises\";\n\nconst hfs = new NodeHfs();\n\n// optionally specify the fs/promises object to use\nconst hfs = new NodeHfs({ fsp });\n```\n\nIf you'd like to use just the impl, import the `NodeHfsImpl` constructor:\n\n```js\nimport { NodeHfsImpl } from \"@humanfs/node\";\nimport fsp from \"fs/promises\";\n\nconst hfs = new NodeHfsImpl();\n\n// optionally specify the fs/promises object to use\nconst hfs = new NodeHfsImpl({ fsp });\n```\n\n## Errors Handled\n\n* `ENOENT` - in most cases, these errors are handled silently.\n* `ENFILE` and `EMFILE` - calls that result in these errors are retried for up to 60 seconds before giving up for good.\n\n## License\n\nApache 2.0\n"
        }
    ]
}