{
    "sourceFile": "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry/dist/retrier.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891879010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * A class that manages a queue of retry jobs.\n */\nexport class Retrier {\n    /**\n     * Creates a new instance.\n     * @param {Function} check The function to call.\n     * @param {object} [options] The options for the instance.\n     * @param {number} [options.timeout] The timeout for the queue.\n     * @param {number} [options.maxDelay] The maximum delay for the queue.\n     */\n    constructor(check: Function, { timeout, maxDelay }?: {\n        timeout?: number | undefined;\n        maxDelay?: number | undefined;\n    } | undefined);\n    /**\n     * Adds a new retry job to the queue.\n     * @param {Function} fn The function to call.\n     * @param {object} [options] The options for the job.\n     * @param {AbortSignal} [options.signal] The AbortSignal to monitor for cancellation.\n     * @returns {Promise<any>} A promise that resolves when the queue is\n     *  processed.\n     */\n    retry(fn: Function, { signal }?: {\n        signal?: AbortSignal | undefined;\n    } | undefined): Promise<any>;\n    #private;\n}\n"
        }
    ]
}