{
    "sourceFile": "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891879160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# Retry utility\n\nby [Nicholas C. Zakas](https://humanwhocodes.com)\n\nIf you find this useful, please consider supporting my work with a [donation](https://humanwhocodes.com/donate) or [nominate me](https://stars.github.com/nominate/) for a GitHub Star.\n\n## Description\n\nA utility for retrying failed async JavaScript calls based on the error returned.\n\n## Usage\n\n### Node.js\n\nInstall using [npm][npm] or [yarn][yarn]:\n\n```\nnpm install @humanwhocodes/retry\n\n# or\n\nyarn add @humanwhocodes/retry\n```\n\nImport into your Node.js project:\n\n```js\n// CommonJS\nconst { Retrier } = require(\"@humanwhocodes/retry\");\n\n// ESM\nimport { Retrier } from \"@humanwhocodes/retry\";\n```\n\n### Deno\n\nInstall using [JSR](https://jsr.io):\n\n```shell\ndeno add @humanwhocodes/retry\n\n#or\n\njsr add @humanwhocodes/retry\n```\n\nThen import into your Deno project:\n\n```js\nimport { Retrier } from \"@humanwhocodes/retry\";\n```\n\n### Bun\n\nInstall using this command:\n\n```\nbun add @humanwhocodes/retry\n```\n\nImport into your Bun project:\n\n```js\nimport { Retrier } from \"@humanwhocodes/retry\";\n```\n\n### Browser\n\nIt's recommended to import the minified version to save bandwidth:\n\n```js\nimport { Retrier } from \"https://cdn.skypack.dev/@humanwhocodes/retry?min\";\n```\n\nHowever, you can also import the unminified version for debugging purposes:\n\n```js\nimport { Retrier } from \"https://cdn.skypack.dev/@humanwhocodes/retry\";\n```\n\n## API\n\nAfter importing, create a new instance of `Retrier` and specify the function to run on the error. This function should return `true` if you want the call retried and `false` if not.\n\n```js\n// this instance will retry if the specific error code is found\nconst retrier = new Retrier(error => {\n    return error.code === \"ENFILE\" || error.code === \"EMFILE\";\n});\n```\n\nThen, call the `retry()` method around the function you'd like to retry, such as:\n\n```js\nimport fs from \"fs/promises\";\n\nconst retrier = new Retrier(error => {\n    return error.code === \"ENFILE\" || error.code === \"EMFILE\";\n});\n\nconst text = await retrier.retry(() => fs.readFile(\"README.md\", \"utf8\"));\n```\n\nThe `retry()` method will either pass through the result on success or wait and retry on failure. Any error that isn't caught by the retrier is automatically rejected so the end result is a transparent passing through of both success and failure.\n\nYou can also pass an `AbortSignal` to cancel a retry:\n\n```js\nimport fs from \"fs/promises\";\n\nconst controller = new AbortController();\nconst retrier = new Retrier(error => {\n    return error.code === \"ENFILE\" || error.code === \"EMFILE\";\n});\n\nconst text = await retrier.retry(\n    () => fs.readFile(\"README.md\", \"utf8\"),\n    { signal: controller.signal }\n);\n```\n\n## Developer Setup\n\n1. Fork the repository\n2. Clone your fork\n3. Run `npm install` to setup dependencies\n4. Run `npm test` to run tests\n\n## License\n\nApache 2.0\n\n## Prior Art\n\nThis utility is inspired by, and contains code from [`graceful-fs`](https://github.com/isaacs/node-graceful-fs).\n\n[npm]: https://npmjs.com/\n[yarn]: https://yarnpkg.com/\n"
        }
    ]
}