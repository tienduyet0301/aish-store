{
    "sourceFile": "node_modules/acorn/CHANGELOG.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892011666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "## 8.14.1 (2025-03-05)\n\n### Bug fixes\n\nFix an issue where `await` expressions in class field initializers were inappropriately allowed.\n\nProperly allow await inside an async arrow function inside a class field initializer.\n\nMention the source file name in syntax error messages when given.\n\nProperly add an empty `attributes` property to every form of `ExportNamedDeclaration`.\n\n## 8.14.0 (2024-10-27)\n\n### New features\n\nSupport ES2025 import attributes.\n\nSupport ES2025 RegExp modifiers.\n\n### Bug fixes\n\nSupport some missing Unicode properties.\n\n## 8.13.0 (2024-10-16)\n\n### New features\n\nUpgrade to Unicode 16.0.\n\n## 8.12.1 (2024-07-03)\n\n### Bug fixes\n\nFix a regression that caused Acorn to no longer run on Node versions <8.10.\n\n## 8.12.0 (2024-06-14)\n\n### New features\n\nSupport ES2025 duplicate capture group names in regular expressions.\n\n### Bug fixes\n\nInclude `VariableDeclarator` in the `AnyNode` type so that walker objects can refer to it without getting a type error.\n\nProperly raise a parse error for invalid `for`/`of` statements using `async` as binding name.\n\nProperly recognize \\\"use strict\\\" when preceded by a string with an escaped newline.\n\nMark the `Parser` constructor as protected, not private, so plugins can extend it without type errors.\n\nFix a bug where some invalid `delete` expressions were let through when the operand was parenthesized and `preserveParens` was enabled.\n\nProperly normalize line endings in raw strings of invalid template tokens.\n\nProperly track line numbers for escaped newlines in strings.\n\nFix a bug that broke line number accounting after a template literal with invalid escape sequences.\n\n## 8.11.3 (2023-12-29)\n\n### Bug fixes\n\nAdd `Function` and `Class` to the `AggregateType` type, so that they can be used in walkers without raising a type error.\n\nMake sure `onToken` get an `import` keyword token when parsing `import.meta`.\n\nFix a bug where `.loc.start` could be undefined for `new.target` `meta` nodes.\n\n## 8.11.2 (2023-10-27)\n\n### Bug fixes\n\nFix a bug that caused regular expressions after colon tokens to not be properly tokenized in some circumstances.\n\n## 8.11.1 (2023-10-26)\n\n### Bug fixes\n\nFix a regression where `onToken` would receive 'name' tokens for 'new' keyword tokens.\n\n## 8.11.0 (2023-10-26)\n\n### Bug fixes\n\nFix an issue where tokenizing (without parsing) an object literal with a property named `class` or `function` could, in some circumstance, put the tokenizer into an invalid state.\n\nFix an issue where a slash after a call to a propery named the same as some keywords would be tokenized as a regular expression.\n\n### New features\n\nUpgrade to Unicode 15.1.\n\nUse a set of new, much more precise, TypeScript types.\n\n## 8.10.0 (2023-07-05)\n\n### New features\n\nAdd a `checkPrivateFields` option that disables strict checking of private property use.\n\n## 8.9.0 (2023-06-16)\n\n### Bug fixes\n\nForbid dynamic import after `new`, even when part of a member expression.\n\n### New features\n\nAdd Unicode properties for ES2023.\n\nAdd support for the `v` flag to regular expressions.\n\n## 8.8.2 (2023-01-23)\n\n### Bug fixes\n\nFix a bug that caused `allowHashBang` to be set to false when not provided, even with `ecmaVersion >= 14`.\n\nFix an exception when passing no option object to `parse` or `new Parser`.\n\nFix incorrect parse error on `if (0) let\\n[astral identifier char]`.\n\n## 8.8.1 (2022-10-24)\n\n### Bug fixes\n\nMake type for `Comment` compatible with estree types.\n\n## 8.8.0 (2022-07-21)\n\n### Bug fixes\n\nAllow parentheses around spread args in destructuring object assignment.\n\nFix an issue where the tree contained `directive` properties in when parsing with a language version that doesn't support them.\n\n### New features\n\nSupport hashbang comments by default in ECMAScript 2023 and later.\n\n## 8.7.1 (2021-04-26)\n\n### Bug fixes\n\nStop handling `\"use strict\"` directives in ECMAScript versions before 5.\n\nFix an issue where duplicate quoted export names in `export *` syntax were incorrectly checked.\n\nAdd missing type for `tokTypes`.\n\n## 8.7.0 (2021-12-27)\n\n### New features\n\nSupport quoted export names.\n\nUpgrade to Unicode 14.\n\nAdd support for Unicode 13 properties in regular expressions.\n\n### Bug fixes\n\nUse a loop to find line breaks, because the existing regexp search would overrun the end of the searched range and waste a lot of time in minified code.\n\n## 8.6.0 (2021-11-18)\n\n### Bug fixes\n\nFix a bug where an object literal with multiple `__proto__` properties would incorrectly be accepted if a later property value held an assigment.\n\n### New features\n\nSupport class private fields with the `in` operator.\n\n## 8.5.0 (2021-09-06)\n\n### Bug fixes\n\nImprove context-dependent tokenization in a number of corner cases.\n\nFix location tracking after a 0x2028 or 0x2029 character in a string literal (which before did not increase the line number).\n\nFix an issue where arrow function bodies in for loop context would inappropriately consume `in` operators.\n\nFix wrong end locations stored on SequenceExpression nodes.\n\nImplement restriction that `for`/`of` loop LHS can't start with `let`.\n\n### New features\n\nAdd support for ES2022 class static blocks.\n\nAllow multiple input files to be passed to the CLI tool.\n\n## 8.4.1 (2021-06-24)\n\n### Bug fixes\n\nFix a bug where `allowAwaitOutsideFunction` would allow `await` in class field initializers, and setting `ecmaVersion` to 13 or higher would allow top-level await in non-module sources.\n\n## 8.4.0 (2021-06-11)\n\n### New features\n\nA new option, `allowSuperOutsideMethod`, can be used to suppress the error when `super` is used in the wrong context.\n\n## 8.3.0 (2021-05-31)\n\n### New features\n\nDefault `allowAwaitOutsideFunction` to true for ECMAScript 2022 an higher.\n\nAdd support for the `d` ([indices](https://github.com/tc39/proposal-regexp-match-indices)) regexp flag.\n\n## 8.2.4 (2021-05-04)\n\n### Bug fixes\n\nFix spec conformity in corner case 'for await (async of ...)'.\n\n## 8.2.3 (2021-05-04)\n\n### Bug fixes\n\nFix an issue where the library couldn't parse 'for (async of ...)'.\n\nFix a bug in UTF-16 decoding that would read characters incorrectly in some circumstances.\n\n## 8.2.2 (2021-04-29)\n\n### Bug fixes\n\nFix a bug where a class field initialized to an async arrow function wouldn't allow await inside it. Same issue existed for generator arrow functions with yield.\n\n## 8.2.1 (2021-04-24)\n\n### Bug fixes\n\nFix a regression introduced in 8.2.0 where static or async class methods with keyword names fail to parse.\n\n## 8.2.0 (2021-04-24)\n\n### New features\n\nAdd support for ES2022 class fields and private methods.\n\n## 8.1.1 (2021-04-12)\n\n### Various\n\nStop shipping source maps in the NPM package.\n\n## 8.1.0 (2021-03-09)\n\n### Bug fixes\n\nFix a spurious error in nested destructuring arrays.\n\n### New features\n\nExpose `allowAwaitOutsideFunction` in CLI interface.\n\nMake `allowImportExportAnywhere` also apply to `import.meta`.\n\n## 8.0.5 (2021-01-25)\n\n### Bug fixes\n\nAdjust package.json to work with Node 12.16.0 and 13.0-13.6.\n\n## 8.0.4 (2020-10-05)\n\n### Bug fixes\n\nMake `await x ** y` an error, following the spec.\n\nFix potentially exponential regular expression.\n\n## 8.0.3 (2020-10-02)\n\n### Bug fixes\n\nFix a wasteful loop during `Parser` creation when setting `ecmaVersion` to `\"latest\"`.\n\n## 8.0.2 (2020-09-30)\n\n### Bug fixes\n\nMake the TypeScript types reflect the current allowed values for `ecmaVersion`.\n\nFix another regexp/division tokenizer issue.\n\n## 8.0.1 (2020-08-12)\n\n### Bug fixes\n\nProvide the correct value in the `version` export.\n\n## 8.0.0 (2020-08-12)\n\n### Bug fixes\n\nDisallow expressions like `(a = b) = c`.\n\nMake non-octal escape sequences a syntax error in strict mode.\n\n### New features\n\nThe package can now be loaded directly as an ECMAScript module in node 13+.\n\nUpdate to the set of Unicode properties from ES2021.\n\n### Breaking changes\n\nThe `ecmaVersion` option is now required. For the moment, omitting it will still work with a warning, but that will change in a future release.\n\nSome changes to method signatures that may be used by plugins.\n\n## 7.4.0 (2020-08-03)\n\n### New features\n\nAdd support for logical assignment operators.\n\nAdd support for numeric separators.\n\n## 7.3.1 (2020-06-11)\n\n### Bug fixes\n\nMake the string in the `version` export match the actual library version.\n\n## 7.3.0 (2020-06-11)\n\n### Bug fixes\n\nFix a bug that caused parsing of object patterns with a property named `set` that had a default value to fail.\n\n### New features\n\nAdd support for optional chaining (`?.`).\n\n## 7.2.0 (2020-05-09)\n\n### Bug fixes\n\nFix precedence issue in parsing of async arrow functions.\n\n### New features\n\nAdd support for nullish coalescing.\n\nAdd support for `import.meta`.\n\nSupport `export * as ...` syntax.\n\nUpgrade to Unicode 13.\n\n## 6.4.1 (2020-03-09)\n\n### Bug fixes\n\nMore carefully check for valid UTF16 surrogate pairs in regexp validator.\n\n## 7.1.1 (2020-03-01)\n\n### Bug fixes\n\nTreat `\\8` and `\\9` as invalid escapes in template strings.\n\nAllow unicode escapes in property names that are keywords.\n\nDon't error on an exponential operator expression as argument to `await`.\n\nMore carefully check for valid UTF16 surrogate pairs in regexp validator.\n\n## 7.1.0 (2019-09-24)\n\n### Bug fixes\n\nDisallow trailing object literal commas when ecmaVersion is less than 5.\n\n### New features\n\nAdd a static `acorn` property to the `Parser` class that contains the entire module interface, to allow plugins to access the instance of the library that they are acting on.\n\n## 7.0.0 (2019-08-13)\n\n### Breaking changes\n\nChanges the node format for dynamic imports to use the `ImportExpression` node type, as defined in [ESTree](https://github.com/estree/estree/blob/master/es2020.md#importexpression).\n\nMakes 10 (ES2019) the default value for the `ecmaVersion` option.\n\n## 6.3.0 (2019-08-12)\n\n### New features\n\n`sourceType: \"module\"` can now be used even when `ecmaVersion` is less than 6, to parse module-style code that otherwise conforms to an older standard.\n\n## 6.2.1 (2019-07-21)\n\n### Bug fixes\n\nFix bug causing Acorn to treat some characters as identifier characters that shouldn't be treated as such.\n\nFix issue where setting the `allowReserved` option to `\"never\"` allowed reserved words in some circumstances.\n\n## 6.2.0 (2019-07-04)\n\n### Bug fixes\n\nImprove valid assignment checking in `for`/`in` and `for`/`of` loops.\n\nDisallow binding `let` in patterns.\n\n### New features\n\nSupport bigint syntax with `ecmaVersion` >= 11.\n\nSupport dynamic `import` syntax with `ecmaVersion` >= 11.\n\nUpgrade to Unicode version 12.\n\n## 6.1.1 (2019-02-27)\n\n### Bug fixes\n\nFix bug that caused parsing default exports of with names to fail.\n\n## 6.1.0 (2019-02-08)\n\n### Bug fixes\n\nFix scope checking when redefining a `var` as a lexical binding.\n\n### New features\n\nSplit up `parseSubscripts` to use an internal `parseSubscript` method to make it easier to extend with plugins.\n\n## 6.0.7 (2019-02-04)\n\n### Bug fixes\n\nCheck that exported bindings are defined.\n\nDon't treat `\\u180e` as a whitespace character.\n\nCheck for duplicate parameter names in methods.\n\nDon't allow shorthand properties when they are generators or async methods.\n\nForbid binding `await` in async arrow function's parameter list.\n\n## 6.0.6 (2019-01-30)\n\n### Bug fixes\n\nThe content of class declarations and expressions is now always parsed in strict mode.\n\nDon't allow `let` or `const` to bind the variable name `let`.\n\nTreat class declarations as lexical.\n\nDon't allow a generator function declaration as the sole body of an `if` or `else`.\n\nIgnore `\"use strict\"` when after an empty statement.\n\nAllow string line continuations with special line terminator characters.\n\nTreat `for` bodies as part of the `for` scope when checking for conflicting bindings.\n\nFix bug with parsing `yield` in a `for` loop initializer.\n\nImplement special cases around scope checking for functions.\n\n## 6.0.5 (2019-01-02)\n\n### Bug fixes\n\nFix TypeScript type for `Parser.extend` and add `allowAwaitOutsideFunction` to options type.\n\nDon't treat `let` as a keyword when the next token is `{` on the next line.\n\nFix bug that broke checking for parentheses around an object pattern in a destructuring assignment when `preserveParens` was on.\n\n## 6.0.4 (2018-11-05)\n\n### Bug fixes\n\nFurther improvements to tokenizing regular expressions in corner cases.\n\n## 6.0.3 (2018-11-04)\n\n### Bug fixes\n\nFix bug in tokenizing an expression-less return followed by a function followed by a regular expression.\n\nRemove stray symlink in the package tarball.\n\n## 6.0.2 (2018-09-26)\n\n### Bug fixes\n\nFix bug where default expressions could fail to parse inside an object destructuring assignment expression.\n\n## 6.0.1 (2018-09-14)\n\n### Bug fixes\n\nFix wrong value in `version` export.\n\n## 6.0.0 (2018-09-14)\n\n### Bug fixes\n\nBetter handle variable-redefinition checks for catch bindings and functions directly under if statements.\n\nForbid `new.target` in top-level arrow functions.\n\nFix issue with parsing a regexp after `yield` in some contexts.\n\n### New features\n\nThe package now comes with TypeScript definitions.\n\n### Breaking changes\n\nThe default value of the `ecmaVersion` option is now 9 (2018).\n\nPlugins work differently, and will have to be rewritten to work with this version.\n\nThe loose parser and walker have been moved into separate packages (`acorn-loose` and `acorn-walk`).\n\n## 5.7.3 (2018-09-10)\n\n### Bug fixes\n\nFix failure to tokenize regexps after expressions like `x.of`.\n\nBetter error message for unterminated template literals.\n\n## 5.7.2 (2018-08-24)\n\n### Bug fixes\n\nProperly handle `allowAwaitOutsideFunction` in for statements.\n\nTreat function declarations at the top level of modules like let bindings.\n\nDon't allow async function declarations as the only statement under a label.\n\n## 5.7.0 (2018-06-15)\n\n### New features\n\nUpgraded to Unicode 11.\n\n## 5.6.0 (2018-05-31)\n\n### New features\n\nAllow U+2028 and U+2029 in string when ECMAVersion >= 10.\n\nAllow binding-less catch statements when ECMAVersion >= 10.\n\nAdd `allowAwaitOutsideFunction` option for parsing top-level `await`.\n\n## 5.5.3 (2018-03-08)\n\n### Bug fixes\n\nA _second_ republish of the code in 5.5.1, this time with yarn, to hopefully get valid timestamps.\n\n## 5.5.2 (2018-03-08)\n\n### Bug fixes\n\nA republish of the code in 5.5.1 in an attempt to solve an issue with the file timestamps in the npm package being 0.\n\n## 5.5.1 (2018-03-06)\n\n### Bug fixes\n\nFix misleading error message for octal escapes in template strings.\n\n## 5.5.0 (2018-02-27)\n\n### New features\n\nThe identifier character categorization is now based on Unicode version 10.\n\nAcorn will now validate the content of regular expressions, including new ES9 features.\n\n## 5.4.0 (2018-02-01)\n\n### Bug fixes\n\nDisallow duplicate or escaped flags on regular expressions.\n\nDisallow octal escapes in strings in strict mode.\n\n### New features\n\nAdd support for async iteration.\n\nAdd support for object spread and rest.\n\n## 5.3.0 (2017-12-28)\n\n### Bug fixes\n\nFix parsing of floating point literals with leading zeroes in loose mode.\n\nAllow duplicate property names in object patterns.\n\nDon't allow static class methods named `prototype`.\n\nDisallow async functions directly under `if` or `else`.\n\nParse right-hand-side of `for`/`of` as an assignment expression.\n\nStricter parsing of `for`/`in`.\n\nDon't allow unicode escapes in contextual keywords.\n\n### New features\n\nParsing class members was factored into smaller methods to allow plugins to hook into it.\n\n## 5.2.1 (2017-10-30)\n\n### Bug fixes\n\nFix a token context corruption bug.\n\n## 5.2.0 (2017-10-30)\n\n### Bug fixes\n\nFix token context tracking for `class` and `function` in property-name position.\n\nMake sure `%*` isn't parsed as a valid operator.\n\nAllow shorthand properties `get` and `set` to be followed by default values.\n\nDisallow `super` when not in callee or object position.\n\n### New features\n\nSupport [`directive` property](https://github.com/estree/estree/compare/b3de58c9997504d6fba04b72f76e6dd1619ee4eb...1da8e603237144f44710360f8feb7a9977e905e0) on directive expression statements.\n\n## 5.1.2 (2017-09-04)\n\n### Bug fixes\n\nDisable parsing of legacy HTML-style comments in modules.\n\nFix parsing of async methods whose names are keywords.\n\n## 5.1.1 (2017-07-06)\n\n### Bug fixes\n\nFix problem with disambiguating regexp and division after a class.\n\n## 5.1.0 (2017-07-05)\n\n### Bug fixes\n\nFix tokenizing of regexps in an object-desctructuring `for`/`of` loop and after `yield`.\n\nParse zero-prefixed numbers with non-octal digits as decimal.\n\nAllow object/array patterns in rest parameters.\n\nDon't error when `yield` is used as a property name.\n\nAllow `async` as a shorthand object property.\n\n### New features\n\nImplement the [template literal revision proposal](https://github.com/tc39/proposal-template-literal-revision) for ES9.\n\n## 5.0.3 (2017-04-01)\n\n### Bug fixes\n\nFix spurious duplicate variable definition errors for named functions.\n\n## 5.0.2 (2017-03-30)\n\n### Bug fixes\n\nA binary operator after a parenthesized arrow expression is no longer incorrectly treated as an error.\n\n## 5.0.0 (2017-03-28)\n\n### Bug fixes\n\nRaise an error for duplicated lexical bindings.\n\nFix spurious error when an assignement expression occurred after a spread expression.\n\nAccept regular expressions after `of` (in `for`/`of`), `yield` (in a generator), and braced arrow functions.\n\nAllow labels in front or `var` declarations, even in strict mode.\n\n### Breaking changes\n\nParse declarations following `export default` as declaration nodes, not expressions. This means that class and function declarations nodes can now have `null` as their `id`.\n\n## 4.0.11 (2017-02-07)\n\n### Bug fixes\n\nAllow all forms of member expressions to be parenthesized as lvalue.\n\n## 4.0.10 (2017-02-07)\n\n### Bug fixes\n\nDon't expect semicolons after default-exported functions or classes, even when they are expressions.\n\nCheck for use of `'use strict'` directives in non-simple parameter functions, even when already in strict mode.\n\n## 4.0.9 (2017-02-06)\n\n### Bug fixes\n\nFix incorrect error raised for parenthesized simple assignment targets, so that `(x) = 1` parses again.\n\n## 4.0.8 (2017-02-03)\n\n### Bug fixes\n\nSolve spurious parenthesized pattern errors by temporarily erring on the side of accepting programs that our delayed errors don't handle correctly yet.\n\n## 4.0.7 (2017-02-02)\n\n### Bug fixes\n\nAccept invalidly rejected code like `(x).y = 2` again.\n\nDon't raise an error when a function _inside_ strict code has a non-simple parameter list.\n\n## 4.0.6 (2017-02-02)\n\n### Bug fixes\n\nFix exponential behavior (manifesting itself as a complete hang for even relatively small source files) introduced by the new 'use strict' check.\n\n## 4.0.5 (2017-02-02)\n\n### Bug fixes\n\nDisallow parenthesized pattern expressions.\n\nAllow keywords as export names.\n\nDon't allow the `async` keyword to be parenthesized.\n\nProperly raise an error when a keyword contains a character escape.\n\nAllow `\"use strict\"` to appear after other string literal expressions.\n\nDisallow labeled declarations.\n\n## 4.0.4 (2016-12-19)\n\n### Bug fixes\n\nFix crash when `export` was followed by a keyword that can't be\nexported.\n\n## 4.0.3 (2016-08-16)\n\n### Bug fixes\n\nAllow regular function declarations inside single-statement `if` branches in loose mode. Forbid them entirely in strict mode.\n\nProperly parse properties named `async` in ES2017 mode.\n\nFix bug where reserved words were broken in ES2017 mode.\n\n## 4.0.2 (2016-08-11)\n\n### Bug fixes\n\nDon't ignore period or 'e' characters after octal numbers.\n\nFix broken parsing for call expressions in default parameter values of arrow functions.\n\n## 4.0.1 (2016-08-08)\n\n### Bug fixes\n\nFix false positives in duplicated export name errors.\n\n## 4.0.0 (2016-08-07)\n\n### Breaking changes\n\nThe default `ecmaVersion` option value is now 7.\n\nA number of internal method signatures changed, so plugins might need to be updated.\n\n### Bug fixes\n\nThe parser now raises errors on duplicated export names.\n\n`arguments` and `eval` can now be used in shorthand properties.\n\nDuplicate parameter names in non-simple argument lists now always produce an error.\n\n### New features\n\nThe `ecmaVersion` option now also accepts year-style version numbers\n(2015, etc).\n\nSupport for `async`/`await` syntax when `ecmaVersion` is >= 8.\n\nSupport for trailing commas in call expressions when `ecmaVersion` is >= 8.\n\n## 3.3.0 (2016-07-25)\n\n### Bug fixes\n\nFix bug in tokenizing of regexp operator after a function declaration.\n\nFix parser crash when parsing an array pattern with a hole.\n\n### New features\n\nImplement check against complex argument lists in functions that enable strict mode in ES7.\n\n## 3.2.0 (2016-06-07)\n\n### Bug fixes\n\nImprove handling of lack of unicode regexp support in host\nenvironment.\n\nProperly reject shorthand properties whose name is a keyword.\n\n### New features\n\nVisitors created with `visit.make` now have their base as _prototype_, rather than copying properties into a fresh object.\n\n## 3.1.0 (2016-04-18)\n\n### Bug fixes\n\nProperly tokenize the division operator directly after a function expression.\n\nAllow trailing comma in destructuring arrays.\n\n## 3.0.4 (2016-02-25)\n\n### Fixes\n\nAllow update expressions as left-hand-side of the ES7 exponential operator.\n\n## 3.0.2 (2016-02-10)\n\n### Fixes\n\nFix bug that accidentally made `undefined` a reserved word when parsing ES7.\n\n## 3.0.0 (2016-02-10)\n\n### Breaking changes\n\nThe default value of the `ecmaVersion` option is now 6 (used to be 5).\n\nSupport for comprehension syntax (which was dropped from the draft spec) has been removed.\n\n### Fixes\n\n`let` and `yield` are now “contextual keywords”, meaning you can mostly use them as identifiers in ES5 non-strict code.\n\nA parenthesized class or function expression after `export default` is now parsed correctly.\n\n### New features\n\nWhen `ecmaVersion` is set to 7, Acorn will parse the exponentiation operator (`**`).\n\nThe identifier character ranges are now based on Unicode 8.0.0.\n\nPlugins can now override the `raiseRecoverable` method to override the way non-critical errors are handled.\n\n## 2.7.0 (2016-01-04)\n\n### Fixes\n\nStop allowing rest parameters in setters.\n\nDisallow `y` rexexp flag in ES5.\n\nDisallow `\\00` and `\\000` escapes in strict mode.\n\nRaise an error when an import name is a reserved word.\n\n## 2.6.2 (2015-11-10)\n\n### Fixes\n\nDon't crash when no options object is passed.\n\n## 2.6.0 (2015-11-09)\n\n### Fixes\n\nAdd `await` as a reserved word in module sources.\n\nDisallow `yield` in a parameter default value for a generator.\n\nForbid using a comma after a rest pattern in an array destructuring.\n\n### New features\n\nSupport parsing stdin in command-line tool.\n\n## 2.5.0 (2015-10-27)\n\n### Fixes\n\nFix tokenizer support in the command-line tool.\n\nStop allowing `new.target` outside of functions.\n\nRemove legacy `guard` and `guardedHandler` properties from try nodes.\n\nStop allowing multiple `__proto__` properties on an object literal in strict mode.\n\nDon't allow rest parameters to be non-identifier patterns.\n\nCheck for duplicate paramter names in arrow functions.\n"
        }
    ]
}