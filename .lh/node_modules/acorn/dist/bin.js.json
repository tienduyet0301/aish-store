{
    "sourceFile": "node_modules/acorn/dist/bin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892012510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar acorn = require('./acorn.js');\n\nfunction _interopNamespaceDefault(e) {\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n.default = e;\n  return Object.freeze(n);\n}\n\nvar acorn__namespace = /*#__PURE__*/_interopNamespaceDefault(acorn);\n\nvar inputFilePaths = [], forceFileName = false, fileMode = false, silent = false, compact = false, tokenize = false;\nvar options = {};\n\nfunction help(status) {\n  var print = (status === 0) ? console.log : console.error;\n  print(\"usage: \" + path.basename(process.argv[1]) + \" [--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|...|--ecma2015|--ecma2016|--ecma2017|--ecma2018|...]\");\n  print(\"        [--tokenize] [--locations] [--allow-hash-bang] [--allow-await-outside-function] [--compact] [--silent] [--module] [--help] [--] [<infile>...]\");\n  process.exit(status);\n}\n\nfor (var i = 2; i < process.argv.length; ++i) {\n  var arg = process.argv[i];\n  if (arg[0] !== \"-\" || arg === \"-\") { inputFilePaths.push(arg); }\n  else if (arg === \"--\") {\n    inputFilePaths.push.apply(inputFilePaths, process.argv.slice(i + 1));\n    forceFileName = true;\n    break\n  } else if (arg === \"--locations\") { options.locations = true; }\n  else if (arg === \"--allow-hash-bang\") { options.allowHashBang = true; }\n  else if (arg === \"--allow-await-outside-function\") { options.allowAwaitOutsideFunction = true; }\n  else if (arg === \"--silent\") { silent = true; }\n  else if (arg === \"--compact\") { compact = true; }\n  else if (arg === \"--help\") { help(0); }\n  else if (arg === \"--tokenize\") { tokenize = true; }\n  else if (arg === \"--module\") { options.sourceType = \"module\"; }\n  else {\n    var match = arg.match(/^--ecma(\\d+)$/);\n    if (match)\n      { options.ecmaVersion = +match[1]; }\n    else\n      { help(1); }\n  }\n}\n\nfunction run(codeList) {\n  var result = [], fileIdx = 0;\n  try {\n    codeList.forEach(function (code, idx) {\n      fileIdx = idx;\n      if (!tokenize) {\n        result = acorn__namespace.parse(code, options);\n        options.program = result;\n      } else {\n        var tokenizer = acorn__namespace.tokenizer(code, options), token;\n        do {\n          token = tokenizer.getToken();\n          result.push(token);\n        } while (token.type !== acorn__namespace.tokTypes.eof)\n      }\n    });\n  } catch (e) {\n    console.error(fileMode ? e.message.replace(/\\(\\d+:\\d+\\)$/, function (m) { return m.slice(0, 1) + inputFilePaths[fileIdx] + \" \" + m.slice(1); }) : e.message);\n    process.exit(1);\n  }\n  if (!silent) { console.log(JSON.stringify(result, null, compact ? null : 2)); }\n}\n\nif (fileMode = inputFilePaths.length && (forceFileName || !inputFilePaths.includes(\"-\") || inputFilePaths.length !== 1)) {\n  run(inputFilePaths.map(function (path) { return fs.readFileSync(path, \"utf8\"); }));\n} else {\n  var code = \"\";\n  process.stdin.resume();\n  process.stdin.on(\"data\", function (chunk) { return code += chunk; });\n  process.stdin.on(\"end\", function () { return run([code]); });\n}\n"
        }
    ]
}