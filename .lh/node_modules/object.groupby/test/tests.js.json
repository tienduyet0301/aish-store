{
    "sourceFile": "node_modules/object.groupby/test/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892949210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar inspect = require('object-inspect');\nvar forEach = require('for-each');\nvar v = require('es-value-fixtures');\n\nmodule.exports = function (groupBy, t) {\n\tt.test('callback function', function (st) {\n\t\tforEach(v.nonFunctions, function (nonFunction) {\n\t\t\tst['throws'](\n\t\t\t\tfunction () { groupBy([], nonFunction); },\n\t\t\t\tTypeError,\n\t\t\t\tinspect(nonFunction) + ' is not a function'\n\t\t\t);\n\t\t});\n\n\t\tst.end();\n\t});\n\n\tt.test('grouping', function (st) {\n\t\tst.deepEqual(\n\t\t\tgroupBy([], function () { return 'a'; }),\n\t\t\t{ __proto__: null },\n\t\t\t'an empty array produces an empty object'\n\t\t);\n\n\t\tvar arr = [0, -0, 1, 2, 3, 4, 5, NaN, Infinity, -Infinity];\n\t\tvar parity = function (x) {\n\t\t\tif (x !== x) {\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif (!isFinite(x)) {\n\t\t\t\treturn '∞';\n\t\t\t}\n\t\t\treturn x % 2 === 0 ? 'even' : 'odd';\n\t\t};\n\t\tvar grouped = {\n\t\t\t__proto__: null,\n\t\t\teven: [0, -0, 2, 4],\n\t\t\todd: [1, 3, 5],\n\t\t\tundefined: [NaN],\n\t\t\t'∞': [Infinity, -Infinity]\n\t\t};\n\t\tst.deepEqual(\n\t\t\tgroupBy(arr, parity),\n\t\t\tgrouped,\n\t\t\tinspect(arr) + ' group by parity groups to ' + inspect(grouped)\n\t\t);\n\n\t\tst.deepEqual(\n\t\t\tgroupBy(arr, function (x, i) {\n\t\t\t\tst.equal(this, undefined, 'receiver is as expected'); // eslint-disable-line no-invalid-this\n\t\t\t\tst.equal(x, arr[i], 'second argument ' + i + ' is ' + inspect(arr[i]));\n\t\t\t\treturn 42;\n\t\t\t}),\n\t\t\t{ __proto__: null, 42: arr },\n\t\t\t'thisArg and callback arguments are as expected'\n\t\t);\n\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}