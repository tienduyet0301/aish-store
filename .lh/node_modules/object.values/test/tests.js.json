{
    "sourceFile": "node_modules/object.values/test/tests.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892949840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar keys = require('object-keys');\nvar map = require('array.prototype.map');\nvar define = require('define-properties');\n\nvar hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';\n\nmodule.exports = function (values, t) {\n\tvar a = {};\n\tvar b = {};\n\tvar c = {};\n\tvar obj = { a: a, b: b, c: c };\n\n\tt.deepEqual(values(obj), [a, b, c], 'basic support');\n\tt.deepEqual(values({ a: a, b: a, c: c }), [a, a, c], 'duplicate values are included');\n\n\tt.test('values are in the same order as keys', function (st) {\n\t\tvar object = { a: a, b: b };\n\t\tobject[0] = 3;\n\t\tobject.c = c;\n\t\tobject[1] = 4;\n\t\tdelete object[0];\n\t\tvar objKeys = keys(object);\n\t\tvar objValues = map(objKeys, function (key) {\n\t\t\treturn object[key];\n\t\t});\n\t\tst.deepEqual(values(object), objValues, 'values match key order');\n\t\tst.end();\n\t});\n\n\tt.test('non-enumerable properties are omitted', { skip: !Object.defineProperty }, function (st) {\n\t\tvar object = { a: a, b: b };\n\t\tObject.defineProperty(object, 'c', { enumerable: false, value: c });\n\t\tst.deepEqual(values(object), [a, b], 'non-enumerable propertyâ€˜s value is omitted');\n\t\tst.end();\n\t});\n\n\tt.test('inherited properties are omitted', function (st) {\n\t\tvar F = function G() {};\n\t\tF.prototype.a = a;\n\t\tvar f = new F();\n\t\tf.b = b;\n\t\tst.deepEqual(values(f), [b], 'only own properties are included');\n\t\tst.end();\n\t});\n\n\tt.test('Symbol properties are omitted', { skip: !hasSymbols }, function (st) {\n\t\tvar object = { a: a, b: b, c: c };\n\t\tvar enumSym = Symbol('enum');\n\t\tvar nonEnumSym = Symbol('non enum');\n\t\tobject[enumSym] = enumSym;\n\t\tobject.d = enumSym;\n\t\tObject.defineProperty(object, nonEnumSym, { enumerable: false, value: nonEnumSym });\n\t\tst.deepEqual(values(object), [a, b, c, enumSym], 'symbol properties are omitted');\n\t\tst.end();\n\t});\n\n\tt.test('not-yet-visited keys deleted on [[Get]] must not show up in output', { skip: !define.supportsDescriptors }, function (st) {\n\t\tvar o = { a: 1, b: 2, c: 3 };\n\t\tObject.defineProperty(o, 'a', {\n\t\t\tget: function () {\n\t\t\t\tdelete this.b;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t});\n\t\tst.deepEqual(values(o), [1, 3], 'when \"b\" is deleted prior to being visited, it should not show up');\n\t\tst.end();\n\t});\n\n\tt.test('not-yet-visited keys made non-enumerable on [[Get]] must not show up in output', { skip: !define.supportsDescriptors }, function (st) {\n\t\tvar o = { a: 'A', b: 'B' };\n\t\tObject.defineProperty(o, 'a', {\n\t\t\tget: function () {\n\t\t\t\tObject.defineProperty(o, 'b', { enumerable: false });\n\t\t\t\treturn 'A';\n\t\t\t}\n\t\t});\n\t\tst.deepEqual(values(o), ['A'], 'when \"b\" is made non-enumerable prior to being visited, it should not show up');\n\t\tst.end();\n\t});\n};\n"
        }
    ]
}