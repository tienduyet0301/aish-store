{
    "sourceFile": "node_modules/@eslint/object-schema/dist/esm/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891759428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export type ObjectDefinition = import(\"./types.ts\").ObjectDefinition;\nexport type PropertyDefinition = import(\"./types.ts\").PropertyDefinition;\n/**\n * @fileoverview Merge Strategy\n */\n/**\n * Container class for several different merge strategies.\n */\nexport class MergeStrategy {\n    /**\n     * Merges two keys by overwriting the first with the second.\n     * @param {*} value1 The value from the first object key.\n     * @param {*} value2 The value from the second object key.\n     * @returns {*} The second value.\n     */\n    static overwrite(value1: any, value2: any): any;\n    /**\n     * Merges two keys by replacing the first with the second only if the\n     * second is defined.\n     * @param {*} value1 The value from the first object key.\n     * @param {*} value2 The value from the second object key.\n     * @returns {*} The second value if it is defined.\n     */\n    static replace(value1: any, value2: any): any;\n    /**\n     * Merges two properties by assigning properties from the second to the first.\n     * @param {*} value1 The value from the first object key.\n     * @param {*} value2 The value from the second object key.\n     * @returns {*} A new object containing properties from both value1 and\n     *      value2.\n     */\n    static assign(value1: any, value2: any): any;\n}\n/**\n * Represents an object validation/merging schema.\n */\nexport class ObjectSchema {\n    /**\n     * Creates a new instance.\n     * @param {ObjectDefinition} definitions The schema definitions.\n     */\n    constructor(definitions: ObjectDefinition);\n    /**\n     * Determines if a strategy has been registered for the given object key.\n     * @param {string} key The object key to find a strategy for.\n     * @returns {boolean} True if the key has a strategy registered, false if not.\n     */\n    hasKey(key: string): boolean;\n    /**\n     * Merges objects together to create a new object comprised of the keys\n     * of the all objects. Keys are merged based on the each key's merge\n     * strategy.\n     * @param {...Object} objects The objects to merge.\n     * @returns {Object} A new object with a mix of all objects' keys.\n     * @throws {Error} If any object is invalid.\n     */\n    merge(...objects: any[]): any;\n    /**\n     * Validates an object's keys based on the validate strategy for each key.\n     * @param {Object} object The object to validate.\n     * @returns {void}\n     * @throws {Error} When the object is invalid.\n     */\n    validate(object: any): void;\n    #private;\n}\n/**\n * @fileoverview Validation Strategy\n */\n/**\n * Container class for several different validation strategies.\n */\nexport class ValidationStrategy {\n    /**\n     * Validates that a value is an array.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static array(value: any): void;\n    /**\n     * Validates that a value is a boolean.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static boolean(value: any): void;\n    /**\n     * Validates that a value is a number.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static number(value: any): void;\n    /**\n     * Validates that a value is a object.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static object(value: any): void;\n    /**\n     * Validates that a value is a object or null.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static \"object?\"(value: any): void;\n    /**\n     * Validates that a value is a string.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static string(value: any): void;\n    /**\n     * Validates that a value is a non-empty string.\n     * @param {*} value The value to validate.\n     * @returns {void}\n     * @throws {TypeError} If the value is invalid.\n     */\n    static \"string!\"(value: any): void;\n}\n"
        }
    ]
}