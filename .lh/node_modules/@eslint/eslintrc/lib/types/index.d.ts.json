{
    "sourceFile": "node_modules/@eslint/eslintrc/lib/types/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891759051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview This file contains the core types for ESLint. It was initially extracted\n * from the `@types/eslint__eslintrc` package.\n */\n\n/*\n * MIT License\n * Copyright (c) Microsoft Corporation.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE\n */\n\nimport type { Linter } from \"eslint\";\n\n/**\n * A compatibility class for working with configs.\n */\nexport class FlatCompat {\n    constructor({\n        baseDirectory,\n        resolvePluginsRelativeTo,\n        recommendedConfig,\n        allConfig,\n    }?: {\n        /**\n         * default: process.cwd()\n         */\n        baseDirectory?: string;\n        resolvePluginsRelativeTo?: string;\n        recommendedConfig?: Linter.LegacyConfig;\n        allConfig?: Linter.LegacyConfig;\n    });\n\n    /**\n     * Translates an ESLintRC-style config into a flag-config-style config.\n     * @param eslintrcConfig The ESLintRC-style config object.\n     * @returns A flag-config-style config object.\n     */\n    config(eslintrcConfig: Linter.LegacyConfig): Linter.Config[];\n\n    /**\n     * Translates the `env` section of an ESLintRC-style config.\n     * @param envConfig The `env` section of an ESLintRC config.\n     * @returns An array of flag-config objects representing the environments.\n     */\n    env(envConfig: { [name: string]: boolean }): Linter.Config[];\n\n    /**\n     * Translates the `extends` section of an ESLintRC-style config.\n     * @param configsToExtend The names of the configs to load.\n     * @returns An array of flag-config objects representing the config.\n     */\n    extends(...configsToExtend: string[]): Linter.Config[];\n\n    /**\n     * Translates the `plugins` section of an ESLintRC-style config.\n     * @param plugins The names of the plugins to load.\n     * @returns An array of flag-config objects representing the plugins.\n     */\n    plugins(...plugins: string[]): Linter.Config[];\n}\n"
        }
    ]
}