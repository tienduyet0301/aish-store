{
    "sourceFile": "node_modules/@swc/helpers/esm/_dispose.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891940407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* @minVersion 7.22.0 */\nfunction dispose_SuppressedError(suppressed, error) {\n    if (typeof SuppressedError !== \"undefined\") {\n        // eslint-disable-next-line no-undef\n        dispose_SuppressedError = SuppressedError;\n    } else {\n        dispose_SuppressedError = function SuppressedError(suppressed, error) {\n            this.suppressed = suppressed;\n            this.error = error;\n            this.stack = new Error().stack;\n        };\n        dispose_SuppressedError.prototype = Object.create(Error.prototype, { constructor: { value: dispose_SuppressedError, writable: true, configurable: true } });\n    }\n    return new dispose_SuppressedError(suppressed, error);\n}\n\nfunction _dispose(stack, error, hasError) {\n    function next() {\n        while (stack.length > 0) {\n            try {\n                var r = stack.pop();\n                var p = r.d.call(r.v);\n                if (r.a) return Promise.resolve(p).then(next, err);\n            } catch (e) {\n                return err(e);\n            }\n        }\n        if (hasError) throw error;\n    }\n\n    function err(e) {\n        error = hasError ? new dispose_SuppressedError(e, error) : e;\n        hasError = true;\n\n        return next();\n    }\n\n    return next();\n}\n\nexport { _dispose as _ };\n"
        }
    ]
}