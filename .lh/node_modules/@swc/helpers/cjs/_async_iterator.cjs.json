{
    "sourceFile": "node_modules/@swc/helpers/cjs/_async_iterator.cjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891935242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nfunction _async_iterator(iterable) {\n    var method, async, sync, retry = 2;\n    for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) {\n        if (async && null != (method = iterable[async])) return method.call(iterable);\n        if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));\n        async = \"@@asyncIterator\", sync = \"@@iterator\";\n    }\n    throw new TypeError(\"Object is not async iterable\");\n}\nfunction AsyncFromSyncIterator(s) {\n    function AsyncFromSyncIteratorContinuation(r) {\n        if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\"));\n\n        var done = r.done;\n\n        return Promise.resolve(r.value).then(function(value) {\n            return { value: value, done: done };\n        });\n    }\n\n    return AsyncFromSyncIterator = function(s) {\n        this.s = s, this.n = s.next;\n    },\n        AsyncFromSyncIterator.prototype = {\n            s: null,\n            n: null,\n\n            next: function() {\n                return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n            },\n            return: function(value) {\n                var ret = this.s.return;\n\n                return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));\n            },\n            throw: function(value) {\n                var thr = this.s.return;\n\n                return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));\n            }\n        },\n        new AsyncFromSyncIterator(s);\n}\nexports._ = _async_iterator;\n"
        }
    ]
}