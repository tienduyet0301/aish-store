{
    "sourceFile": "node_modules/motion-utils/dist/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892646659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare function addUniqueItem<T>(arr: T[], item: T): void;\ndeclare function removeItem<T>(arr: T[], item: T): void;\ndeclare function moveItem<T>([...arr]: T[], fromIndex: number, toIndex: number): T[];\n\ndeclare const clamp: (min: number, max: number, v: number) => number;\n\ntype DevMessage = (check: boolean, message: string) => void;\ndeclare let warning: DevMessage;\ndeclare let invariant: DevMessage;\n\ndeclare const MotionGlobalConfig: {\n    skipAnimations?: boolean;\n    instantAnimations?: boolean;\n    useManualTiming?: boolean;\n    WillChange?: any;\n    mix?: <T>(a: T, b: T) => (p: number) => T;\n};\n\n/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\ndeclare const isNumericalString: (v: string) => boolean;\n\n/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\ndeclare const isZeroValueString: (v: string) => boolean;\n\ndeclare function memo<T extends any>(callback: () => T): () => T;\n\ndeclare const noop: <T>(any: T) => T;\n\ndeclare const pipe: (...transformers: Function[]) => Function;\n\ndeclare const progress: (from: number, to: number, value: number) => number;\n\ntype GenericHandler = (...args: any) => void;\ndeclare class SubscriptionManager<Handler extends GenericHandler> {\n    private subscriptions;\n    add(handler: Handler): VoidFunction;\n    notify(a?: Parameters<Handler>[0], b?: Parameters<Handler>[1], c?: Parameters<Handler>[2]): void;\n    getSize(): number;\n    clear(): void;\n}\n\n/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\ndeclare const secondsToMilliseconds: (seconds: number) => number;\ndeclare const millisecondsToSeconds: (milliseconds: number) => number;\n\ndeclare function velocityPerSecond(velocity: number, frameDuration: number): number;\n\ndeclare function hasWarned(message: string): boolean;\ndeclare function warnOnce(condition: boolean, message: string, element?: Element): void;\n\ndeclare const wrap: (min: number, max: number, v: number) => number;\n\ndeclare const anticipate: (p: number) => number;\n\ndeclare const backOut: (t: number) => number;\ndeclare const backIn: EasingFunction;\ndeclare const backInOut: EasingFunction;\n\ntype EasingFunction = (v: number) => number;\ntype EasingModifier = (easing: EasingFunction) => EasingFunction;\ntype BezierDefinition = readonly [number, number, number, number];\ntype EasingDefinition = BezierDefinition | \"linear\" | \"easeIn\" | \"easeOut\" | \"easeInOut\" | \"circIn\" | \"circOut\" | \"circInOut\" | \"backIn\" | \"backOut\" | \"backInOut\" | \"anticipate\";\n/**\n * The easing function to use. Set as one of:\n *\n * - The name of an in-built easing function.\n * - An array of four numbers to define a cubic bezier curve.\n * - An easing function, that accepts and returns a progress value between `0` and `1`.\n *\n * @public\n */\ntype Easing = EasingDefinition | EasingFunction;\n\ndeclare const circIn: EasingFunction;\ndeclare const circOut: EasingFunction;\ndeclare const circInOut: EasingFunction;\n\ndeclare function cubicBezier(mX1: number, mY1: number, mX2: number, mY2: number): (t: number) => number;\n\ndeclare const easeIn: (t: number) => number;\ndeclare const easeOut: (t: number) => number;\ndeclare const easeInOut: (t: number) => number;\n\ndeclare const mirrorEasing: EasingModifier;\n\ndeclare const reverseEasing: EasingModifier;\n\ntype Direction = \"start\" | \"end\";\ndeclare function steps(numSteps: number, direction?: Direction): EasingFunction;\n\ndeclare function getEasingForSegment(easing: Easing | Easing[], i: number): Easing;\n\ndeclare const isBezierDefinition: (easing: Easing | Easing[]) => easing is BezierDefinition;\n\ndeclare const isEasingArray: (ease: any) => ease is Easing[];\n\ndeclare const easingDefinitionToFunction: (definition: Easing) => EasingFunction;\n\ninterface Point {\n    x: number;\n    y: number;\n}\ninterface Axis {\n    min: number;\n    max: number;\n}\ninterface Box {\n    x: Axis;\n    y: Axis;\n}\ninterface BoundingBox {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n}\ninterface AxisDelta {\n    translate: number;\n    scale: number;\n    origin: number;\n    originPoint: number;\n}\ninterface Delta {\n    x: AxisDelta;\n    y: AxisDelta;\n}\ntype TransformPoint = (point: Point) => Point;\n\nexport { type Axis, type AxisDelta, type BezierDefinition, type BoundingBox, type Box, type Delta, type DevMessage, type Direction, type Easing, type EasingDefinition, type EasingFunction, type EasingModifier, MotionGlobalConfig, type Point, SubscriptionManager, type TransformPoint, addUniqueItem, anticipate, backIn, backInOut, backOut, circIn, circInOut, circOut, clamp, cubicBezier, easeIn, easeInOut, easeOut, easingDefinitionToFunction, getEasingForSegment, hasWarned, invariant, isBezierDefinition, isEasingArray, isNumericalString, isZeroValueString, memo, millisecondsToSeconds, mirrorEasing, moveItem, noop, pipe, progress, removeItem, reverseEasing, secondsToMilliseconds, steps, velocityPerSecond, warnOnce, warning, wrap };\n"
        }
    ]
}