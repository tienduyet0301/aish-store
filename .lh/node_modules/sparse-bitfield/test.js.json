{
    "sourceFile": "node_modules/sparse-bitfield/test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893035562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var alloc = require('buffer-alloc')\nvar tape = require('tape')\nvar bitfield = require('./')\n\ntape('set and get', function (t) {\n  var bits = bitfield()\n\n  t.same(bits.get(0), false, 'first bit is false')\n  bits.set(0, true)\n  t.same(bits.get(0), true, 'first bit is true')\n  t.same(bits.get(1), false, 'second bit is false')\n  bits.set(0, false)\n  t.same(bits.get(0), false, 'first bit is reset')\n  t.end()\n})\n\ntape('set large and get', function (t) {\n  var bits = bitfield()\n\n  t.same(bits.get(9999999999999), false, 'large bit is false')\n  bits.set(9999999999999, true)\n  t.same(bits.get(9999999999999), true, 'large bit is true')\n  t.same(bits.get(9999999999999 + 1), false, 'large bit + 1 is false')\n  bits.set(9999999999999, false)\n  t.same(bits.get(9999999999999), false, 'large bit is reset')\n  t.end()\n})\n\ntape('get and set buffer', function (t) {\n  var bits = bitfield({trackUpdates: true})\n\n  t.same(bits.pages.get(0, true), undefined)\n  t.same(bits.pages.get(Math.floor(9999999999999 / 8 / 1024), true), undefined)\n  bits.set(9999999999999, true)\n\n  var bits2 = bitfield()\n  var upd = bits.pages.lastUpdate()\n  bits2.pages.set(Math.floor(upd.offset / 1024), upd.buffer)\n  t.same(bits2.get(9999999999999), true, 'bit is set')\n  t.end()\n})\n\ntape('toBuffer', function (t) {\n  var bits = bitfield()\n\n  t.same(bits.toBuffer(), alloc(0))\n\n  bits.set(0, true)\n\n  t.same(bits.toBuffer(), bits.pages.get(0).buffer)\n\n  bits.set(9000, true)\n\n  t.same(bits.toBuffer(), Buffer.concat([bits.pages.get(0).buffer, bits.pages.get(1).buffer]))\n  t.end()\n})\n\ntape('pass in buffer', function (t) {\n  var bits = bitfield()\n\n  bits.set(0, true)\n  bits.set(9000, true)\n\n  var clone = bitfield(bits.toBuffer())\n\n  t.same(clone.get(0), true)\n  t.same(clone.get(9000), true)\n  t.end()\n})\n\ntape('set small buffer', function (t) {\n  var buf = alloc(1)\n  buf[0] = 255\n  var bits = bitfield(buf)\n\n  t.same(bits.get(0), true)\n  t.same(bits.pages.get(0).buffer.length, bits.pageSize)\n  t.end()\n})\n"
        }
    ]
}