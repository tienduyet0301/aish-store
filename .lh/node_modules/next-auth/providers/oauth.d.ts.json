{
    "sourceFile": "node_modules/next-auth/providers/oauth.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892927997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CommonProviderOptions } from \"../providers\";\nimport type { Profile, TokenSet, User, Awaitable } from \"..\";\nimport type { AuthorizationParameters, CallbackParamsType, Issuer, ClientMetadata, IssuerMetadata, OAuthCallbackChecks, OpenIDCallbackChecks, HttpOptions } from \"openid-client\";\nimport type { JWK } from \"jose\";\ndeclare type Client = InstanceType<Issuer[\"Client\"]>;\nexport type { OAuthProviderType } from \"./oauth-types\";\ndeclare type ChecksType = \"pkce\" | \"state\" | \"none\" | \"nonce\";\nexport declare type OAuthChecks = OpenIDCallbackChecks | OAuthCallbackChecks;\ndeclare type PartialIssuer = Partial<Pick<IssuerMetadata, \"jwks_endpoint\" | \"issuer\">>;\ndeclare type UrlParams = Record<string, unknown>;\ndeclare type EndpointRequest<C, R, P> = (context: C & {\n    /** `openid-client` Client */\n    client: Client;\n    /** Provider is passed for convenience, ans also contains the `callbackUrl`. */\n    provider: OAuthConfig<P> & {\n        signinUrl: string;\n        callbackUrl: string;\n    };\n}) => Awaitable<R>;\n/** Gives granular control of the request to the given endpoint */\ninterface AdvancedEndpointHandler<P extends UrlParams, C, R> {\n    /** Endpoint URL. Can contain parameters. Optionally, you can use `params` */\n    url?: string;\n    /** These will be prepended to the `url` */\n    params?: P;\n    /**\n     * Control the corresponding OAuth endpoint request completely.\n     * Useful if your provider relies on some custom behaviour\n     * or it diverges from the OAuth spec.\n     *\n     * - âš  **This is an advanced option.**\n     * You should **try to avoid using advanced options** unless you are very comfortable using them.\n     */\n    request?: EndpointRequest<C, R, P>;\n}\n/** Either an URL (containing all the parameters) or an object with more granular control. */\nexport declare type EndpointHandler<P extends UrlParams, C = any, R = any> = AdvancedEndpointHandler<P, C, R>;\nexport declare type AuthorizationEndpointHandler = EndpointHandler<AuthorizationParameters>;\nexport declare type TokenEndpointHandler = EndpointHandler<UrlParams, {\n    /**\n     * Parameters extracted from the request to the `/api/auth/callback/:providerId` endpoint.\n     * Contains params like `state`.\n     */\n    params: CallbackParamsType;\n    /**\n     * When using this custom flow, make sure to do all the necessary security checks.\n     * This object contains parameters you have to match against the request to make sure it is valid.\n     */\n    checks: OAuthChecks;\n}, {\n    tokens: TokenSet;\n}>;\nexport declare type UserinfoEndpointHandler = EndpointHandler<UrlParams, {\n    tokens: TokenSet;\n}, Profile>;\nexport interface OAuthProviderButtonStyles {\n    logo: string;\n    logoDark?: string;\n    bg: string;\n    bgDark?: string;\n    text: string;\n    textDark?: string;\n}\nexport interface OAuthConfig<P> extends CommonProviderOptions, PartialIssuer {\n    /**\n     * OpenID Connect (OIDC) compliant providers can configure\n     * this instead of `authorize`/`token`/`userinfo` options\n     * without further configuration needed in most cases.\n     * You can still use the `authorize`/`token`/`userinfo`\n     * options for advanced control.\n     *\n     * [Authorization Server Metadata](https://datatracker.ietf.org/doc/html/rfc8414#section-3)\n     */\n    wellKnown?: string;\n    jwks_endpoint?: string;\n    /**\n     * The login process will be initiated by sending the user to this URL.\n     *\n     * [Authorization endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1)\n     */\n    authorization?: string | AuthorizationEndpointHandler;\n    token?: string | TokenEndpointHandler;\n    userinfo?: string | UserinfoEndpointHandler;\n    type: \"oauth\";\n    version?: string;\n    profile: (profile: P, tokens: TokenSet) => Awaitable<User>;\n    checks?: ChecksType | ChecksType[];\n    client?: Partial<ClientMetadata>;\n    jwks?: {\n        keys: JWK[];\n    };\n    clientId?: string;\n    clientSecret?: string;\n    /**\n     * If set to `true`, the user information will be extracted\n     * from the `id_token` claims, instead of\n     * making a request to the `userinfo` endpoint.\n     *\n     * `id_token` is usually present in OpenID Connect (OIDC) compliant providers.\n     *\n     * [`id_token` explanation](https://www.oauth.com/oauth2-servers/openid-connect/id-tokens)\n     */\n    idToken?: boolean;\n    region?: string;\n    issuer?: string;\n    /** Read more at: https://github.com/panva/node-openid-client/tree/main/docs#customizing-http-requests */\n    httpOptions?: HttpOptions;\n    style?: OAuthProviderButtonStyles;\n    /**\n     * The options provided by the user.\n     * We will perform a deep-merge of these values\n     * with the default configuration.\n     */\n    options?: OAuthUserConfig<P>;\n    accessTokenUrl?: string;\n    requestTokenUrl?: string;\n    profileUrl?: string;\n    encoding?: string;\n    allowDangerousEmailAccountLinking?: boolean;\n}\nexport declare type OAuthUserConfig<P> = Omit<Partial<OAuthConfig<P>>, \"options\" | \"type\"> & Required<Pick<OAuthConfig<P>, \"clientId\" | \"clientSecret\">>;\nexport declare type OAuthProvider = (options: Partial<OAuthConfig<any>>) => OAuthConfig<any>;\n//# sourceMappingURL=oauth.d.ts.map"
        }
    ]
}