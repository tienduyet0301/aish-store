{
    "sourceFile": "node_modules/next-auth/providers/email.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892925188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Transport, TransportOptions } from \"nodemailer\";\nimport * as JSONTransport from \"nodemailer/lib/json-transport/index.js\";\nimport * as SendmailTransport from \"nodemailer/lib/sendmail-transport/index.js\";\nimport * as SESTransport from \"nodemailer/lib/ses-transport/index.js\";\nimport * as SMTPPool from \"nodemailer/lib/smtp-pool/index.js\";\nimport * as SMTPTransport from \"nodemailer/lib/smtp-transport/index.js\";\nimport * as StreamTransport from \"nodemailer/lib/stream-transport/index.js\";\nimport type { Awaitable } from \"..\";\nimport type { CommonProviderOptions } from \".\";\nimport type { Theme } from \"../core/types\";\ndeclare type AllTransportOptions = string | SMTPTransport | SMTPTransport.Options | SMTPPool | SMTPPool.Options | SendmailTransport | SendmailTransport.Options | StreamTransport | StreamTransport.Options | JSONTransport | JSONTransport.Options | SESTransport | SESTransport.Options | Transport<any> | TransportOptions;\nexport interface SendVerificationRequestParams {\n    identifier: string;\n    url: string;\n    expires: Date;\n    provider: EmailConfig;\n    token: string;\n    theme: Theme;\n}\nexport interface EmailUserConfig {\n    server?: AllTransportOptions;\n    type?: \"email\";\n    /** @default \"NextAuth <no-reply@example.com>\" */\n    from?: string;\n    /**\n     * How long until the e-mail can be used to log the user in,\n     * in seconds. Defaults to 1 day\n     * @default 86400\n     */\n    maxAge?: number;\n    /** [Documentation](https://next-auth.js.org/providers/email#customizing-emails) */\n    sendVerificationRequest?: (params: SendVerificationRequestParams) => Awaitable<void>;\n    /**\n     * By default, we are generating a random verification token.\n     * You can make it predictable or modify it as you like with this method.\n     * @example\n     * ```js\n     *  Providers.Email({\n     *    async generateVerificationToken() {\n     *      return \"ABC123\"\n     *    }\n     *  })\n     * ```\n     * [Documentation](https://next-auth.js.org/providers/email#customizing-the-verification-token)\n     */\n    generateVerificationToken?: () => Awaitable<string>;\n    /** If defined, it is used to hash the verification token when saving to the database . */\n    secret?: string;\n    /**\n     * Normalizes the user input before sending the verification request.\n     *\n     * ⚠️ Always make sure this method returns a single email address.\n     *\n     * @note Technically, the part of the email address local mailbox element\n     * (everything before the `@` symbol) should be treated as 'case sensitive'\n     * according to RFC 2821, but in practice this causes more problems than\n     * it solves, e.g.: when looking up users by e-mail from databases.\n     * By default, we treat email addresses as all lower case,\n     * but you can override this function to change this behavior.\n     *\n     * [Documentation](https://next-auth.js.org/providers/email#normalizing-the-e-mail-address) | [RFC 2821](https://tools.ietf.org/html/rfc2821) | [Email syntax](https://en.wikipedia.org/wiki/Email_address#Syntax)\n     */\n    normalizeIdentifier?: (identifier: string) => string;\n}\nexport interface EmailConfig extends CommonProviderOptions {\n    id: \"email\";\n    type: \"email\";\n    name: \"Email\";\n    server: AllTransportOptions;\n    from: string;\n    maxAge: number;\n    sendVerificationRequest: (params: SendVerificationRequestParams) => Awaitable<void>;\n    /**\n     * This is copied into EmailConfig in parseProviders() don't use elsewhere\n     */\n    options: EmailUserConfig;\n    secret?: string;\n    generateVerificationToken?: () => Awaitable<string>;\n    normalizeIdentifier?: (identifier: string) => string;\n}\nexport declare type EmailProvider = (options: EmailUserConfig) => EmailConfig;\nexport declare type EmailProviderType = \"Email\";\nexport default function Email(options: EmailUserConfig): EmailConfig;\nexport {};\n//# sourceMappingURL=email.d.ts.map"
        }
    ]
}