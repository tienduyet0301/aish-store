{
    "sourceFile": "node_modules/next-auth/jwt/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892922771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { GetServerSidePropsContext, NextApiRequest } from \"next\";\nimport type { NextRequest } from \"next/server\";\nimport type { JWT, JWTDecodeParams, JWTEncodeParams, JWTOptions } from \"./types\";\nimport type { LoggerInstance } from \"..\";\nexport * from \"./types\";\n/** Issues a JWT. By default, the JWT is encrypted using \"A256GCM\". */\nexport declare function encode(params: JWTEncodeParams): Promise<string>;\n/** Decodes a NextAuth.js issued JWT. */\nexport declare function decode(params: JWTDecodeParams): Promise<JWT | null>;\nexport interface GetTokenParams<R extends boolean = false> {\n    /** The request containing the JWT either in the cookies or in the `Authorization` header. */\n    req: GetServerSidePropsContext[\"req\"] | NextRequest | NextApiRequest;\n    /**\n     * Use secure prefix for cookie name, unless URL in `NEXTAUTH_URL` is http://\n     * or not set (e.g. development or test instance) case use unprefixed name\n     */\n    secureCookie?: boolean;\n    /** If the JWT is in the cookie, what name `getToken()` should look for. */\n    cookieName?: string;\n    /**\n     * `getToken()` will return the raw JWT if this is set to `true`\n     * @default false\n     */\n    raw?: R;\n    /**\n     * The same `secret` used in the `NextAuth` configuration.\n     * Defaults to the `NEXTAUTH_SECRET` environment variable.\n     */\n    secret?: string;\n    decode?: JWTOptions[\"decode\"];\n    logger?: LoggerInstance | Console;\n}\n/**\n * Takes a NextAuth.js request (`req`) and returns either the NextAuth.js issued JWT's payload,\n * or the raw JWT string. We look for the JWT in the either the cookies, or the `Authorization` header.\n * [Documentation](https://next-auth.js.org/tutorials/securing-pages-and-api-routes#using-gettoken)\n */\nexport declare function getToken<R extends boolean = false>(params: GetTokenParams<R>): Promise<R extends true ? string : JWT | null>;\n//# sourceMappingURL=index.d.ts.map"
        }
    ]
}