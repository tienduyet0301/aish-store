{
    "sourceFile": "node_modules/next-auth/src/providers/zitadel.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892936077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { OAuthConfig, OAuthUserConfig } from \".\"\n\nexport interface ZitadelProfile extends Record<string, any> {\n  amr: string // Authentication Method References as defined in RFC8176\n  aud: string // The audience of the token, by default all client id's and the project id are included\n  auth_time: number // Unix time of the authentication\n  azp: string // Client id of the client who requested the token\n  email: string // Email Address of the subject\n  email_verified: boolean // if the email was verified by ZITADEL\n  exp: number // Time the token expires (as unix time)\n  family_name: string // The subjects family name\n  given_name: string // Given name of the subject\n  gender: string // Gender of the subject\n  iat: number // Time of the token was issued at (as unix time)\n  iss: string // Issuing domain of a token\n  jti: string // Unique id of the token\n  locale: string // Language from the subject\n  name: string // The subjects full name\n  nbf: number // Time the token must not be used before (as unix time)\n  picture: string // The subjects profile picture\n  phone: string // Phone number provided by the user\n  phone_verified: boolean // if the phonenumber was verified by ZITADEL\n  preferred_username: string // ZITADEL's login name of the user. Consist of username@primarydomain\n  sub: string // Subject ID of the user\n}\n\nexport default function Zitadel<P extends ZitadelProfile>(\n  options: OAuthUserConfig<P>\n): OAuthConfig<P> {\n  const { issuer } = options\n\n  return {\n    id: \"zitadel\",\n    name: \"ZITADEL\",\n    type: \"oauth\",\n    version: \"2\",\n    wellKnown: `${issuer}/.well-known/openid-configuration`,\n    authorization: { params: { scope: \"openid email profile\" } },\n    idToken: true,\n    checks: [\"pkce\", \"state\"],\n    async profile(profile) {\n      return {\n        id: profile.sub,\n        name: profile.name,\n        email: profile.email,\n        image: profile.picture,\n      }\n    },\n    options,\n  }\n}\n"
        }
    ]
}