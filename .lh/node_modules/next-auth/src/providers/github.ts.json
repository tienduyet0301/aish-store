{
    "sourceFile": "node_modules/next-auth/src/providers/github.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892934998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { OAuthConfig, OAuthUserConfig } from \".\"\n\n/** @see https://docs.github.com/en/rest/users/users#get-the-authenticated-user */\nexport interface GithubProfile extends Record<string, any> {\n  login: string\n  id: number\n  node_id: string\n  avatar_url: string\n  gravatar_id: string | null\n  url: string\n  html_url: string\n  followers_url: string\n  following_url: string\n  gists_url: string\n  starred_url: string\n  subscriptions_url: string\n  organizations_url: string\n  repos_url: string\n  events_url: string\n  received_events_url: string\n  type: string\n  site_admin: boolean\n  name: string | null\n  company: string | null\n  blog: string | null\n  location: string | null\n  email: string | null\n  hireable: boolean | null\n  bio: string | null\n  twitter_username?: string | null\n  public_repos: number\n  public_gists: number\n  followers: number\n  following: number\n  created_at: string\n  updated_at: string\n  private_gists?: number\n  total_private_repos?: number\n  owned_private_repos?: number\n  disk_usage?: number\n  suspended_at?: string | null\n  collaborators?: number\n  two_factor_authentication: boolean\n  plan?: {\n    collaborators: number\n    name: string\n    space: number\n    private_repos: number\n  }\n}\n\nexport interface GithubEmail extends Record<string, any> {\n  email: string\n  primary: boolean\n  verified: boolean\n  visibility: \"public\" | \"private\"\n}\n\nexport default function Github<P extends GithubProfile>(\n  options: OAuthUserConfig<P>\n): OAuthConfig<P> {\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    type: \"oauth\",\n    authorization: {\n      url: \"https://github.com/login/oauth/authorize\",\n      params: { scope: \"read:user user:email\" },\n    },\n    token: \"https://github.com/login/oauth/access_token\",\n    userinfo: {\n      url: \"https://api.github.com/user\",\n      async request({ client, tokens }) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const profile = await client.userinfo(tokens.access_token!)\n\n        if (!profile.email) {\n          // If the user does not have a public email, get another via the GitHub API\n          // See https://docs.github.com/en/rest/users/emails#list-email-addresses-for-the-authenticated-user\n          const res = await fetch(\"https://api.github.com/user/emails\", {\n            headers: { Authorization: `token ${tokens.access_token}` },\n          })\n\n          if (res.ok) {\n            const emails: GithubEmail[] = await res.json()\n            profile.email = (emails.find((e) => e.primary) ?? emails[0]).email\n          }\n        }\n\n        return profile\n      },\n    },\n    profile(profile) {\n      return {\n        id: profile.id.toString(),\n        name: profile.name ?? profile.login,\n        email: profile.email,\n        image: profile.avatar_url,\n      }\n    },\n    style: { logo: \"/github.svg\", bg: \"#24292f\", text: \"#fff\" },\n    options,\n  }\n}\n"
        }
    ]
}