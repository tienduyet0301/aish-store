{
    "sourceFile": "node_modules/next-auth/src/providers/email.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892934796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Transport, TransportOptions, createTransport } from \"nodemailer\"\nimport * as JSONTransport from \"nodemailer/lib/json-transport/index.js\"\nimport * as SendmailTransport from \"nodemailer/lib/sendmail-transport/index.js\"\nimport * as SESTransport from \"nodemailer/lib/ses-transport/index.js\"\nimport * as SMTPPool from \"nodemailer/lib/smtp-pool/index.js\"\nimport * as SMTPTransport from \"nodemailer/lib/smtp-transport/index.js\"\nimport * as StreamTransport from \"nodemailer/lib/stream-transport/index.js\"\nimport type { Awaitable } from \"..\"\nimport type { CommonProviderOptions } from \".\"\nimport type { Theme } from \"../core/types\"\n\n// TODO: Make use of https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html for the string\ntype AllTransportOptions =\n  | string\n  | SMTPTransport\n  | SMTPTransport.Options\n  | SMTPPool\n  | SMTPPool.Options\n  | SendmailTransport\n  | SendmailTransport.Options\n  | StreamTransport\n  | StreamTransport.Options\n  | JSONTransport\n  | JSONTransport.Options\n  | SESTransport\n  | SESTransport.Options\n  | Transport<any>\n  | TransportOptions\n\nexport interface SendVerificationRequestParams {\n  identifier: string\n  url: string\n  expires: Date\n  provider: EmailConfig\n  token: string\n  theme: Theme\n}\n\nexport interface EmailUserConfig {\n  server?: AllTransportOptions\n  type?: \"email\"\n  /** @default \"NextAuth <no-reply@example.com>\" */\n  from?: string\n  /**\n   * How long until the e-mail can be used to log the user in,\n   * in seconds. Defaults to 1 day\n   * @default 86400\n   */\n  maxAge?: number\n  /** [Documentation](https://next-auth.js.org/providers/email#customizing-emails) */\n  sendVerificationRequest?: (\n    params: SendVerificationRequestParams\n  ) => Awaitable<void>\n  /**\n   * By default, we are generating a random verification token.\n   * You can make it predictable or modify it as you like with this method.\n   * @example\n   * ```js\n   *  Providers.Email({\n   *    async generateVerificationToken() {\n   *      return \"ABC123\"\n   *    }\n   *  })\n   * ```\n   * [Documentation](https://next-auth.js.org/providers/email#customizing-the-verification-token)\n   */\n  generateVerificationToken?: () => Awaitable<string>\n  /** If defined, it is used to hash the verification token when saving to the database . */\n  secret?: string\n  /**\n   * Normalizes the user input before sending the verification request.\n   *\n   * ⚠️ Always make sure this method returns a single email address.\n   *\n   * @note Technically, the part of the email address local mailbox element\n   * (everything before the `@` symbol) should be treated as 'case sensitive'\n   * according to RFC 2821, but in practice this causes more problems than\n   * it solves, e.g.: when looking up users by e-mail from databases.\n   * By default, we treat email addresses as all lower case,\n   * but you can override this function to change this behavior.\n   *\n   * [Documentation](https://next-auth.js.org/providers/email#normalizing-the-e-mail-address) | [RFC 2821](https://tools.ietf.org/html/rfc2821) | [Email syntax](https://en.wikipedia.org/wiki/Email_address#Syntax)\n   */\n  normalizeIdentifier?: (identifier: string) => string\n}\n\nexport interface EmailConfig extends CommonProviderOptions {\n  // defaults\n  id: \"email\"\n  type: \"email\"\n  name: \"Email\"\n  server: AllTransportOptions\n  from: string\n  maxAge: number\n  sendVerificationRequest: (\n    params: SendVerificationRequestParams\n  ) => Awaitable<void>\n\n  /**\n   * This is copied into EmailConfig in parseProviders() don't use elsewhere\n   */\n  options: EmailUserConfig\n\n  // user options\n  // TODO figure out a better way than copying from EmailUserConfig\n  secret?: string\n  generateVerificationToken?: () => Awaitable<string>\n  normalizeIdentifier?: (identifier: string) => string\n}\n\nexport type EmailProvider = (options: EmailUserConfig) => EmailConfig\n\n// TODO: Rename to Token provider\n// when started working on https://github.com/nextauthjs/next-auth/discussions/1465\nexport type EmailProviderType = \"Email\"\n\nexport default function Email(options: EmailUserConfig): EmailConfig {\n  return {\n    id: \"email\",\n    type: \"email\",\n    name: \"Email\",\n    // Server can be an SMTP connection string or a nodemailer config object\n    server: { host: \"localhost\", port: 25, auth: { user: \"\", pass: \"\" } },\n    from: \"NextAuth <no-reply@example.com>\",\n    maxAge: 24 * 60 * 60,\n    async sendVerificationRequest(params) {\n      const { identifier, url, provider, theme } = params\n      const { host } = new URL(url)\n      const transport = createTransport(provider.server)\n      const result = await transport.sendMail({\n        to: identifier,\n        from: provider.from,\n        subject: `Sign in to ${host}`,\n        text: text({ url, host }),\n        html: html({ url, host, theme }),\n      })\n      const failed = result.rejected.concat(result.pending).filter(Boolean)\n      if (failed.length) {\n        throw new Error(`Email (${failed.join(\", \")}) could not be sent`)\n      }\n    },\n    options,\n  }\n}\n\n/**\n * Email HTML body\n * Insert invisible space into domains from being turned into a hyperlink by email\n * clients like Outlook and Apple mail, as this is confusing because it seems\n * like they are supposed to click on it to sign in.\n *\n * @note We don't add the email address to avoid needing to escape it, if you do, remember to sanitize it!\n */\nfunction html(params: { url: string; host: string; theme: Theme }) {\n  const { url, host, theme } = params\n\n  const escapedHost = host.replace(/\\./g, \"&#8203;.\")\n\n  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n  const brandColor = theme.brandColor || \"#346df1\"\n  // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n  const buttonText = theme.buttonText || \"#fff\"\n\n  const color = {\n    background: \"#f9f9f9\",\n    text: \"#444\",\n    mainBackground: \"#fff\",\n    buttonBackground: brandColor,\n    buttonBorder: brandColor,\n    buttonText,\n  }\n\n  return `\n<body style=\"background: ${color.background};\">\n  <table width=\"100%\" border=\"0\" cellspacing=\"20\" cellpadding=\"0\"\n    style=\"background: ${color.mainBackground}; max-width: 600px; margin: auto; border-radius: 10px;\">\n    <tr>\n      <td align=\"center\"\n        style=\"padding: 10px 0px; font-size: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n        Sign in to <strong>${escapedHost}</strong>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\" style=\"padding: 20px 0;\">\n        <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n          <tr>\n            <td align=\"center\" style=\"border-radius: 5px;\" bgcolor=\"${color.buttonBackground}\"><a href=\"${url}\"\n                target=\"_blank\"\n                style=\"font-size: 18px; font-family: Helvetica, Arial, sans-serif; color: ${color.buttonText}; text-decoration: none; border-radius: 5px; padding: 10px 20px; border: 1px solid ${color.buttonBorder}; display: inline-block; font-weight: bold;\">Sign\n                in</a></td>\n          </tr>\n        </table>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"\n        style=\"padding: 0px 0px 10px 0px; font-size: 16px; line-height: 22px; font-family: Helvetica, Arial, sans-serif; color: ${color.text};\">\n        If you did not request this email you can safely ignore it.\n      </td>\n    </tr>\n  </table>\n</body>\n`\n}\n\n/** Email Text body (fallback for email clients that don't render HTML, e.g. feature phones) */\nfunction text({ url, host }: { url: string; host: string }) {\n  return `Sign in to ${host}\\n${url}\\n\\n`\n}\n"
        }
    ]
}