{
    "sourceFile": "node_modules/next-auth/src/providers/azure-ad.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892934438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { OAuthConfig, OAuthUserConfig } from \".\"\n\nexport interface AzureADProfile extends Record<string, any> {\n  sub: string\n  nickname: string\n  email: string\n  picture: string\n}\n\nexport default function AzureAD<P extends AzureADProfile>(\n  options: OAuthUserConfig<P> & {\n    /**\n     * https://docs.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0#examples\n     * @default 48\n     */\n    profilePhotoSize?: 48 | 64 | 96 | 120 | 240 | 360 | 432 | 504 | 648\n    /** @default \"common\" */\n    tenantId?: string\n  }\n): OAuthConfig<P> {\n  const tenant = options.tenantId ?? \"common\"\n  const profilePhotoSize = options.profilePhotoSize ?? 48\n\n  return {\n    id: \"azure-ad\",\n    name: \"Azure Active Directory\",\n    type: \"oauth\",\n    wellKnown: `https://login.microsoftonline.com/${tenant}/v2.0/.well-known/openid-configuration?appid=${options.clientId}`,\n    authorization: {\n      params: {\n        scope: \"openid profile email\",\n      },\n    },\n    async profile(profile, tokens) {\n      // https://docs.microsoft.com/en-us/graph/api/profilephoto-get?view=graph-rest-1.0#examples\n      const response = await fetch(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        { headers: { Authorization: `Bearer ${tokens.access_token}` } }\n      )\n\n      // Confirm that profile photo was returned\n      let image\n      // TODO: Do this without Buffer\n      if (response.ok && typeof Buffer !== \"undefined\") {\n        try {\n          const pictureBuffer = await response.arrayBuffer()\n          const pictureBase64 = Buffer.from(pictureBuffer).toString(\"base64\")\n          image = `data:image/jpeg;base64, ${pictureBase64}`\n        } catch {}\n      }\n\n      return {\n        id: profile.sub,\n        name: profile.name,\n        email: profile.email,\n        image: image ?? null,\n      }\n    },\n    style: { logo: \"/azure.svg\", text: \"#fff\", bg: \"#0072c6\" },\n    options,\n  }\n}\n"
        }
    ]
}