{
    "sourceFile": "node_modules/next-auth/src/next/utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892934159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { serialize } from \"cookie\"\nimport { Cookie } from \"../core/lib/cookie\"\nimport { type ResponseInternal } from \"../core\"\n\nexport function setCookie(res, cookie: Cookie) {\n  // Preserve any existing cookies that have already been set in the same session\n  let setCookieHeader = res.getHeader(\"Set-Cookie\") ?? []\n  // If not an array (i.e. a string with a single cookie) convert it into an array\n  if (!Array.isArray(setCookieHeader)) {\n    setCookieHeader = [setCookieHeader]\n  }\n  const { name, value, options } = cookie\n  const cookieHeader = serialize(name, value, options)\n  setCookieHeader.push(cookieHeader)\n  res.setHeader(\"Set-Cookie\", setCookieHeader)\n}\n\nexport async function getBody(\n  req: Request\n): Promise<Record<string, any> | undefined> {\n  if (!(\"body\" in req) || !req.body || req.method !== \"POST\") return\n\n  const contentType = req.headers.get(\"content-type\")\n  if (contentType?.includes(\"application/json\")) {\n    return await req.json()\n  } else if (contentType?.includes(\"application/x-www-form-urlencoded\")) {\n    const params = new URLSearchParams(await req.text())\n    return Object.fromEntries(params)\n  }\n}\n\nexport function toResponse(res: ResponseInternal): Response {\n  const headers = new Headers(\n    res.headers?.reduce((acc, { key, value }) => {\n      acc[key] = value\n      return acc\n    }, {})\n  )\n\n  res.cookies?.forEach((cookie) => {\n    const { name, value, options } = cookie\n    const cookieHeader = serialize(name, value, options)\n    if (headers.has(\"Set-Cookie\")) headers.append(\"Set-Cookie\", cookieHeader)\n    else headers.set(\"Set-Cookie\", cookieHeader)\n  })\n\n  let body = res.body\n\n  if (headers.get(\"content-type\") === \"application/json\")\n    body = JSON.stringify(res.body)\n  else if (headers.get(\"content-type\") === \"application/x-www-form-urlencoded\")\n    body = new URLSearchParams(res.body).toString()\n\n  const status = res.redirect ? 302 : res.status ?? 200\n  const response = new Response(body, { headers, status })\n\n  if (res.redirect) response.headers.set(\"Location\", res.redirect)\n\n  return response\n}\n"
        }
    ]
}