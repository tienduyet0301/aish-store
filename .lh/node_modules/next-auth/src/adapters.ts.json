{
    "sourceFile": "node_modules/next-auth/src/adapters.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892931861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { Account, User, Awaitable } from \".\"\nimport type { Adapter as FutureAdapter } from \"@auth/core/adapters\"\n\nexport interface AdapterUser extends User {\n  id: string\n  email: string\n  emailVerified: Date | null\n}\n\nexport interface AdapterAccount extends Account {\n  userId: string\n}\n\nexport interface AdapterSession {\n  /** A randomly generated value that is used to get hold of the session. */\n  sessionToken: string\n  /** Used to connect the session to a particular user */\n  userId: string\n  expires: Date\n}\n\nexport interface VerificationToken {\n  identifier: string\n  expires: Date\n  token: string\n}\n\n/**\n * Using a custom adapter you can connect to any database backend or even several different databases.\n * Custom adapters created and maintained by our community can be found in the adapters repository.\n * Feel free to add a custom adapter from your project to the repository,\n * or even become a maintainer of a certain adapter.\n * Custom adapters can still be created and used in a project without being added to the repository.\n *\n * **Required methods**\n *\n * _(These methods are required for all sign in flows)_\n * - `createUser`\n * - `getUser`\n * - `getUserByEmail`\n * - `getUserByAccount`\n * - `linkAccount`\n * - `createSession`\n * - `getSessionAndUser`\n * - `updateSession`\n * - `deleteSession`\n * - `updateUser`\n *\n * _(Required to support email / passwordless sign in)_\n *\n * - `createVerificationToken`\n * - `useVerificationToken`\n *\n * **Unimplemented methods**\n *\n * _(These methods will be required in a future release, but are not yet invoked)_\n * - `deleteUser`\n * - `unlinkAccount`\n *\n * [Adapters Overview](https://next-auth.js.org/adapters/overview) |\n * [Create a custom adapter](https://next-auth.js.org/tutorials/creating-a-database-adapter)\n */\nexport interface Adapter {\n  createUser?:\n    | FutureAdapter[\"createUser\"]\n    | ((user: Omit<AdapterUser, \"id\">) => Awaitable<AdapterUser>)\n  getUser?: (id: string) => Awaitable<AdapterUser | null>\n  getUserByEmail?: (email: string) => Awaitable<AdapterUser | null>\n  /** Using the provider id and the id of the user for a specific account, get the user. */\n  getUserByAccount?: (\n    providerAccountId: Pick<AdapterAccount, \"provider\" | \"providerAccountId\">\n  ) => Awaitable<AdapterUser | null>\n  updateUser?: (\n    user: Partial<AdapterUser> & Pick<AdapterUser, \"id\">\n  ) => Awaitable<AdapterUser>\n  /** @todo Implement */\n  deleteUser?: (\n    userId: string\n  ) => Promise<void> | Awaitable<AdapterUser | null | undefined>\n  linkAccount?:\n    | FutureAdapter[\"linkAccount\"]\n    | ((\n        account: AdapterAccount,\n      ) => Promise<void> | Awaitable<AdapterAccount | null | undefined>)\n  /** @todo Implement */\n  unlinkAccount?:\n    | FutureAdapter[\"unlinkAccount\"]\n    | ((\n        providerAccountId: Pick<\n          AdapterAccount,\n          \"provider\" | \"providerAccountId\"\n        >,\n      ) => Promise<void> | Awaitable<AdapterAccount | undefined>)\n  /** Creates a session for the user and returns it. */\n  createSession?: (session: {\n    sessionToken: string\n    userId: string\n    expires: Date\n  }) => Awaitable<AdapterSession>\n  getSessionAndUser?: (\n    sessionToken: string\n  ) => Awaitable<{ session: AdapterSession; user: AdapterUser } | null>\n  updateSession?: (\n    session: Partial<AdapterSession> & Pick<AdapterSession, \"sessionToken\">\n  ) => Awaitable<AdapterSession | null | undefined>\n  /**\n   * Deletes a session from the database.\n   * It is preferred that this method also returns the session\n   * that is being deleted for logging purposes.\n   */\n  deleteSession?: (\n    sessionToken: string\n  ) => Promise<void> | Awaitable<AdapterSession | null | undefined>\n  createVerificationToken?: (\n    verificationToken: VerificationToken\n  ) => Awaitable<VerificationToken | null | undefined>\n  /**\n   * Return verification token from the database\n   * and delete it so it cannot be used again.\n   */\n  useVerificationToken?: (params: {\n    identifier: string\n    token: string\n  }) => Awaitable<VerificationToken | null>\n}\n"
        }
    ]
}