{
    "sourceFile": "node_modules/next-auth/src/jwt/types.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892934002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Awaitable } from \"..\"\n\nexport interface DefaultJWT extends Record<string, unknown> {\n  name?: string | null\n  email?: string | null\n  picture?: string | null\n  sub?: string\n}\n\n/**\n * Returned by the `jwt` callback and `getToken`, when using JWT sessions\n *\n * [`jwt` callback](https://next-auth.js.org/configuration/callbacks#jwt-callback) | [`getToken`](https://next-auth.js.org/tutorials/securing-pages-and-api-routes#using-gettoken)\n */\nexport interface JWT extends Record<string, unknown>, DefaultJWT {}\n\nexport interface JWTEncodeParams {\n  /** The JWT payload. */\n  token?: JWT\n  /**\n   * Used in combination with `secret` when deriving the encryption secret for the various NextAuth.js-issued JWTs.\n   * @note When no `salt` is passed, we assume this is a session token.\n   * This is for backwards-compatibility with currently active sessions, so they won't be invalidated when upgrading the package.\n   */\n  salt?: string\n  /** The key material used to encode the NextAuth.js issued JWTs. Defaults to `NEXTAUTH_SECRET`. */\n  secret: string | Buffer\n  /**\n   * The maximum age of the NextAuth.js issued JWT in seconds.\n   * @default 30 * 24 * 60 * 60 // 30 days\n   */\n  maxAge?: number\n}\n\nexport interface JWTDecodeParams {\n  /** The NextAuth.js issued JWT to be decoded */\n  token?: string\n  /**\n   * Used in combination with `secret` when deriving the encryption secret for the various NextAuth.js-issued JWTs.\n   * @note When no `salt` is passed, we assume this is a session token.\n   * This is for backwards-compatibility with currently active sessions, so they won't be invalidated when upgrading the package.\n   */\n  salt?: string\n  /** The key material used to decode the NextAuth.js issued JWTs. Defaults to `NEXTAUTH_SECRET`. */\n  secret: string | Buffer\n}\n\nexport interface JWTOptions {\n  /**\n   * The secret used to encode/decode the NextAuth.js issued JWT.\n   * @deprecated  Set the `NEXTAUTH_SECRET` environment variable or\n   * use the top-level `secret` option instead\n   */\n  secret: string\n  /**\n   * The maximum age of the NextAuth.js issued JWT in seconds.\n   * @default 30 * 24 * 60 * 60 // 30 days\n   */\n  maxAge: number\n  /** Override this method to control the NextAuth.js issued JWT encoding. */\n  encode: (params: JWTEncodeParams) => Awaitable<string>\n  /** Override this method to control the NextAuth.js issued JWT decoding. */\n  decode: (params: JWTDecodeParams) => Awaitable<JWT | null>\n}\n\nexport type Secret = string | Buffer\n"
        }
    ]
}