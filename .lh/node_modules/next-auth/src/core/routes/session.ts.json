{
    "sourceFile": "node_modules/next-auth/src/core/routes/session.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { fromDate } from \"../lib/utils\"\n\nimport type { InternalOptions } from \"../types\"\nimport type { ResponseInternal } from \"..\"\nimport type { Session } from \"../..\"\nimport type { SessionStore } from \"../lib/cookie\"\n\ninterface SessionParams {\n  options: InternalOptions\n  sessionStore: SessionStore\n  isUpdate?: boolean\n  newSession?: any\n}\n\n/**\n * Return a session object (without any private fields)\n * for Single Page App clients\n */\n\nexport default async function session(\n  params: SessionParams\n): Promise<ResponseInternal<Session | {}>> {\n  const { options, sessionStore, newSession, isUpdate } = params\n  const {\n    adapter,\n    jwt,\n    events,\n    callbacks,\n    logger,\n    session: { strategy: sessionStrategy, maxAge: sessionMaxAge },\n  } = options\n\n  const response: ResponseInternal<Session | {}> = {\n    body: {},\n    headers: [{ key: \"Content-Type\", value: \"application/json\" }],\n    cookies: [],\n  }\n\n  const sessionToken = sessionStore.value\n\n  if (!sessionToken) return response\n\n  if (sessionStrategy === \"jwt\") {\n    try {\n      const decodedToken = await jwt.decode({ ...jwt, token: sessionToken })\n\n      if (!decodedToken) throw new Error(\"JWT invalid\")\n\n      // @ts-expect-error\n      const token = await callbacks.jwt({\n        token: decodedToken,\n        ...(isUpdate && { trigger: \"update\" }),\n        session: newSession,\n      })\n\n      const newExpires = fromDate(sessionMaxAge)\n\n      // By default, only exposes a limited subset of information to the client\n      // as needed for presentation purposes (e.g. \"you are logged in as...\").\n\n      // @ts-expect-error Property 'user' is missing in type\n      const updatedSession = await callbacks.session({\n        session: {\n          user: {\n            name: decodedToken?.name,\n            email: decodedToken?.email,\n            image: decodedToken?.picture,\n          },\n          expires: newExpires.toISOString(),\n        },\n        token,\n      })\n\n      // Return session payload as response\n      response.body = updatedSession\n\n      // Refresh JWT expiry by re-signing it, with an updated expiry date\n      const newToken = await jwt.encode({\n        ...jwt,\n        token,\n        maxAge: options.session.maxAge,\n      })\n\n      // Set cookie, to also update expiry date on cookie\n      const sessionCookies = sessionStore.chunk(newToken, {\n        expires: newExpires,\n      })\n\n      response.cookies?.push(...sessionCookies)\n\n      await events.session?.({ session: updatedSession, token })\n    } catch (error) {\n      // If JWT not verifiable, make sure the cookie for it is removed and return empty object\n      logger.error(\"JWT_SESSION_ERROR\", error as Error)\n\n      response.cookies?.push(...sessionStore.clean())\n    }\n  } else {\n    try {\n      // @ts-expect-error -- adapter is checked to be defined in `init`\n      const { getSessionAndUser, deleteSession, updateSession } =\n        adapter\n      let userAndSession = await getSessionAndUser(sessionToken)\n\n      // If session has expired, clean up the database\n      if (\n        userAndSession &&\n        userAndSession.session.expires.valueOf() < Date.now()\n      ) {\n        await deleteSession(sessionToken)\n        userAndSession = null\n      }\n\n      if (userAndSession) {\n        const { user, session } = userAndSession\n\n        const sessionUpdateAge = options.session.updateAge\n        // Calculate last updated date to throttle write updates to database\n        // Formula: ({expiry date} - sessionMaxAge) + sessionUpdateAge\n        //     e.g. ({expiry date} - 30 days) + 1 hour\n        const sessionIsDueToBeUpdatedDate =\n          session.expires.valueOf() -\n          sessionMaxAge * 1000 +\n          sessionUpdateAge * 1000\n\n        const newExpires = fromDate(sessionMaxAge)\n        // Trigger update of session expiry date and write to database, only\n        // if the session was last updated more than {sessionUpdateAge} ago\n        if (sessionIsDueToBeUpdatedDate <= Date.now()) {\n          await updateSession({ sessionToken, expires: newExpires })\n        }\n\n        // Pass Session through to the session callback\n\n        // @ts-expect-error Property 'token' is missing in type\n        const sessionPayload = await callbacks.session({\n          // By default, only exposes a limited subset of information to the client\n          // as needed for presentation purposes (e.g. \"you are logged in as...\").\n          session: {\n            user: { name: user.name, email: user.email, image: user.image },\n            expires: session.expires.toISOString(),\n          },\n          user,\n          newSession,\n          ...(isUpdate ? { trigger: \"update\" } : {}),\n        })\n\n        // Return session payload as response\n        response.body = sessionPayload\n\n        // Set cookie again to update expiry\n        response.cookies?.push({\n          name: options.cookies.sessionToken.name,\n          value: sessionToken,\n          options: {\n            ...options.cookies.sessionToken.options,\n            expires: newExpires,\n          },\n        })\n\n        // @ts-expect-error\n        await events.session?.({ session: sessionPayload })\n      } else if (sessionToken) {\n        // If `sessionToken` was found set but it's not valid for a session then\n        // remove the sessionToken cookie from browser.\n        response.cookies?.push(...sessionStore.clean())\n      }\n    } catch (error) {\n      logger.error(\"SESSION_ERROR\", error as Error)\n    }\n  }\n\n  return response\n}\n"
        }
    ]
}