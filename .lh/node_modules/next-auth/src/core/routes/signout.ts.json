{
    "sourceFile": "node_modules/next-auth/src/core/routes/signout.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { InternalOptions } from \"../types\"\nimport type { ResponseInternal } from \"..\"\nimport type { SessionStore } from \"../lib/cookie\"\n\n/** Handle requests to /api/auth/signout */\nexport default async function signout(params: {\n  options: InternalOptions\n  sessionStore: SessionStore\n}): Promise<ResponseInternal> {\n  const { options, sessionStore } = params\n  const { adapter, events, jwt, callbackUrl, logger, session } = options\n\n  const sessionToken = sessionStore?.value\n  if (!sessionToken) {\n    return { redirect: callbackUrl }\n  }\n\n  if (session.strategy === \"jwt\") {\n    // Dispatch signout event\n    try {\n      const decodedJwt = await jwt.decode({ ...jwt, token: sessionToken })\n      // @ts-expect-error\n      await events.signOut?.({ token: decodedJwt })\n    } catch (error) {\n      // Do nothing if decoding the JWT fails\n      logger.error(\"SIGNOUT_ERROR\", error)\n    }\n  } else {\n    try {\n      // @ts-expect-error -- adapter is checked to be defined in `init`\n      const session = await adapter.deleteSession(sessionToken)\n      // Dispatch signout event\n      // @ts-expect-error\n      await events.signOut?.({ session })\n    } catch (error) {\n      // If error, log it but continue\n      logger.error(\"SIGNOUT_ERROR\", error as Error)\n    }\n  }\n\n  // Remove Session Token\n  const sessionCookies = sessionStore.clean()\n\n  return { redirect: callbackUrl, cookies: sessionCookies }\n}\n"
        }
    ]
}