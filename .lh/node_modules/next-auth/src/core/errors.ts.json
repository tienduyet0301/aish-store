{
    "sourceFile": "node_modules/next-auth/src/core/errors.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892932570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { EventCallbacks, InternalOptions, LoggerInstance } from \"..\"\n\n/**\n * Same as the default `Error`, but it is JSON serializable.\n * @source https://iaincollins.medium.com/error-handling-in-javascript-a6172ccdf9af\n */\nexport class UnknownError extends Error {\n  code: string\n  constructor(error: Error | string) {\n    // Support passing error or string\n    super((error as Error)?.message ?? error)\n    this.name = \"UnknownError\"\n    this.code = (error as any).code\n    if (error instanceof Error) {\n      this.stack = error.stack\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      stack: this.stack,\n    }\n  }\n}\n\nexport class OAuthCallbackError extends UnknownError {\n  name = \"OAuthCallbackError\"\n}\n\n/**\n * Thrown when an Email address is already associated with an account\n * but the user is trying an OAuth account that is not linked to it.\n */\nexport class AccountNotLinkedError extends UnknownError {\n  name = \"AccountNotLinkedError\"\n}\n\nexport class MissingAPIRoute extends UnknownError {\n  name = \"MissingAPIRouteError\"\n  code = \"MISSING_NEXTAUTH_API_ROUTE_ERROR\"\n}\n\nexport class MissingSecret extends UnknownError {\n  name = \"MissingSecretError\"\n  code = \"NO_SECRET\"\n}\n\nexport class MissingAuthorize extends UnknownError {\n  name = \"MissingAuthorizeError\"\n  code = \"CALLBACK_CREDENTIALS_HANDLER_ERROR\"\n}\n\nexport class MissingAdapter extends UnknownError {\n  name = \"MissingAdapterError\"\n  code = \"EMAIL_REQUIRES_ADAPTER_ERROR\"\n}\n\nexport class MissingAdapterMethods extends UnknownError {\n  name = \"MissingAdapterMethodsError\"\n  code = \"MISSING_ADAPTER_METHODS_ERROR\"\n}\n\nexport class UnsupportedStrategy extends UnknownError {\n  name = \"UnsupportedStrategyError\"\n  code = \"CALLBACK_CREDENTIALS_JWT_ERROR\"\n}\n\nexport class InvalidCallbackUrl extends UnknownError {\n  name = \"InvalidCallbackUrl\"\n  code = \"INVALID_CALLBACK_URL_ERROR\"\n}\n\ntype Method = (...args: any[]) => Promise<any>\n\nexport function upperSnake(s: string) {\n  return s.replace(/([A-Z])/g, \"_$1\").toUpperCase()\n}\n\nexport function capitalize(s: string) {\n  return `${s[0].toUpperCase()}${s.slice(1)}`\n}\n\n/**\n * Wraps an object of methods and adds error handling.\n */\nexport function eventsErrorHandler(\n  methods: Partial<EventCallbacks>,\n  logger: LoggerInstance\n): Partial<EventCallbacks> {\n  return Object.keys(methods).reduce<any>((acc, name) => {\n    acc[name] = async (...args: any[]) => {\n      try {\n        const method: Method = methods[name as keyof Method]\n        return await method(...args)\n      } catch (e) {\n        logger.error(`${upperSnake(name)}_EVENT_ERROR`, e as Error)\n      }\n    }\n    return acc\n  }, {})\n}\n\n/** Handles adapter induced errors. */\nexport function adapterErrorHandler<TAdapter>(\n  adapter: TAdapter | undefined,\n  logger: LoggerInstance\n): InternalOptions[\"adapter\"] | undefined {\n  if (!adapter) return\n\n  return Object.keys(adapter).reduce<any>((acc, name) => {\n    acc[name] = async (...args: any[]) => {\n      try {\n        logger.debug(`adapter_${name}`, { args })\n        const method: Method = adapter[name as keyof Method]\n        return await method(...args)\n      } catch (error) {\n        logger.error(`adapter_error_${name}`, error as Error)\n        const e = new UnknownError(error as Error)\n        e.name = `${capitalize(name)}Error`\n        throw e\n      }\n    }\n    return acc\n  }, {})\n}\n"
        }
    ]
}