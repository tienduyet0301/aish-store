{
    "sourceFile": "node_modules/next-auth/src/core/pages/signin.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { InternalProvider, Theme } from \"../types\"\nimport type React from \"react\"\n\n/**\n * The following errors are passed as error query parameters to the default or overridden sign-in page.\n *\n * [Documentation](https://next-auth.js.org/configuration/pages#sign-in-page) */\nexport type SignInErrorTypes =\n  | \"Signin\"\n  | \"OAuthSignin\"\n  | \"OAuthCallback\"\n  | \"OAuthCreateAccount\"\n  | \"EmailCreateAccount\"\n  | \"Callback\"\n  | \"OAuthAccountNotLinked\"\n  | \"EmailSignin\"\n  | \"CredentialsSignin\"\n  | \"SessionRequired\"\n  | \"default\"\n\nexport interface SignInServerPageParams {\n  csrfToken: string\n  providers: InternalProvider[]\n  callbackUrl: string\n  email: string\n  error: SignInErrorTypes\n  theme: Theme\n}\n\nfunction hexToRgba(hex?: string, alpha = 1) {\n  if (!hex) {\n    return\n  }\n  // Remove the \"#\" character if it's included\n  hex = hex.replace(/^#/, \"\")\n\n  // Expand 3-digit hex codes to their 6-digit equivalents\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]\n  }\n\n  // Parse the hex value to separate R, G, and B components\n  const bigint = parseInt(hex, 16)\n  const r = (bigint >> 16) & 255\n  const g = (bigint >> 8) & 255\n  const b = bigint & 255\n\n  // Ensure the alpha value is within the valid range [0, 1]\n  alpha = Math.min(Math.max(alpha, 0), 1)\n\n  // Construct the RGBA string\n  const rgba = `rgba(${r}, ${g}, ${b}, ${alpha})`\n\n  return rgba\n}\n\nexport default function SigninPage(props: SignInServerPageParams) {\n  const {\n    csrfToken,\n    providers,\n    callbackUrl,\n    theme,\n    email,\n    error: errorType,\n  } = props\n  // We only want to render providers\n  const providersToRender = providers.filter((provider) => {\n    if (provider.type === \"oauth\" || provider.type === \"email\") {\n      // Always render oauth and email type providers\n      return true\n    } else if (provider.type === \"credentials\" && provider.credentials) {\n      // Only render credentials type provider if credentials are defined\n      return true\n    }\n    // Don't render other provider types\n    return false\n  })\n\n  if (typeof document !== \"undefined\" && theme.buttonText) {\n    document.documentElement.style.setProperty(\n      \"--button-text-color\",\n      theme.buttonText\n    )\n  }\n\n  if (typeof document !== \"undefined\" && theme.brandColor) {\n    document.documentElement.style.setProperty(\n      \"--brand-color\",\n      theme.brandColor\n    )\n  }\n\n  const errors: Record<SignInErrorTypes, string> = {\n    Signin: \"Try signing in with a different account.\",\n    OAuthSignin: \"Try signing in with a different account.\",\n    OAuthCallback: \"Try signing in with a different account.\",\n    OAuthCreateAccount: \"Try signing in with a different account.\",\n    EmailCreateAccount: \"Try signing in with a different account.\",\n    Callback: \"Try signing in with a different account.\",\n    OAuthAccountNotLinked:\n      \"To confirm your identity, sign in with the same account you used originally.\",\n    EmailSignin: \"The e-mail could not be sent.\",\n    CredentialsSignin:\n      \"Sign in failed. Check the details you provided are correct.\",\n    SessionRequired: \"Please sign in to access this page.\",\n    default: \"Unable to sign in.\",\n  }\n\n  const error = errorType && (errors[errorType] ?? errors.default)\n\n  const providerLogoPath = \"https://authjs.dev/img/providers\"\n  return (\n    <div className=\"signin\">\n      {theme.brandColor && (\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `\n        :root {\n          --brand-color: ${theme.brandColor}\n        }\n      `,\n          }}\n        />\n      )}\n      {theme.buttonText && (\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `\n        :root {\n          --button-text-color: ${theme.buttonText}\n        }\n      `,\n          }}\n        />\n      )}\n      <div className=\"card\">\n        {theme.logo && <img src={theme.logo} alt=\"Logo\" className=\"logo\" />}\n        {error && (\n          <div className=\"error\">\n            <p>{error}</p>\n          </div>\n        )}\n        {providersToRender.map((provider, i: number) => {\n          let bg, text, logo, logoDark, bgDark, textDark\n          if (provider.type === \"oauth\") {\n            ;({\n              bg = \"\",\n              text = \"\",\n              logo = \"\",\n              bgDark = bg,\n              textDark = text,\n              logoDark = \"\",\n            } = provider.style ?? {})\n\n            logo = logo.startsWith(\"/\")\n              ? `${providerLogoPath}${logo as string}`\n              : logo\n            logoDark = logoDark.startsWith(\"/\")\n              ? `${providerLogoPath}${logoDark as string}`\n              : logoDark || logo\n\n            logoDark ||= logo\n          }\n          return (\n            <div key={provider.id} className=\"provider\">\n              {provider.type === \"oauth\" && (\n                <form action={provider.signinUrl} method=\"POST\">\n                  <input type=\"hidden\" name=\"csrfToken\" value={csrfToken} />\n                  {callbackUrl && (\n                    <input\n                      type=\"hidden\"\n                      name=\"callbackUrl\"\n                      value={callbackUrl}\n                    />\n                  )}\n                  <button\n                    type=\"submit\"\n                    className=\"button\"\n                    style={\n                      // eslint-disable-next-line\n                      {\n                        \"--provider-bg\": bg,\n                        \"--provider-dark-bg\": bgDark,\n                        \"--provider-color\": text,\n                        \"--provider-dark-color\": textDark,\n                        \"--provider-bg-hover\": hexToRgba(bg, 0.8),\n                        \"--provider-dark-bg-hover\": hexToRgba(bgDark, 0.8),\n                      } as React.CSSProperties\n                    }\n                  >\n                    {logo && (\n                      <img\n                        loading=\"lazy\"\n                        height={24}\n                        width={24}\n                        id=\"provider-logo\"\n                        src={`${\n                          logo.startsWith(\"/\") ? providerLogoPath : \"\"\n                        }${logo}`}\n                      />\n                    )}\n                    {logoDark && (\n                      <img\n                        loading=\"lazy\"\n                        height={24}\n                        width={24}\n                        id=\"provider-logo-dark\"\n                        src={`${\n                          logo.startsWith(\"/\") ? providerLogoPath : \"\"\n                        }${logoDark}`}\n                      />\n                    )}\n                    <span>Sign in with {provider.name}</span>\n                  </button>\n                </form>\n              )}\n              {(provider.type === \"email\" || provider.type === \"credentials\") &&\n                i > 0 &&\n                providersToRender[i - 1].type !== \"email\" &&\n                providersToRender[i - 1].type !== \"credentials\" && <hr />}\n              {provider.type === \"email\" && (\n                <form action={provider.signinUrl} method=\"POST\">\n                  <input type=\"hidden\" name=\"csrfToken\" value={csrfToken} />\n                  <label\n                    className=\"section-header\"\n                    htmlFor={`input-email-for-${provider.id}-provider`}\n                  >\n                    Email\n                  </label>\n                  <input\n                    id={`input-email-for-${provider.id}-provider`}\n                    autoFocus\n                    type=\"email\"\n                    name=\"email\"\n                    value={email}\n                    placeholder=\"email@example.com\"\n                    required\n                  />\n                  <button id=\"submitButton\" type=\"submit\">\n                    Sign in with {provider.name}\n                  </button>\n                </form>\n              )}\n              {provider.type === \"credentials\" && (\n                <form action={provider.callbackUrl} method=\"POST\">\n                  <input type=\"hidden\" name=\"csrfToken\" value={csrfToken} />\n                  {Object.keys(provider.credentials).map((credential) => {\n                    return (\n                      <div key={`input-group-${provider.id}`}>\n                        <label\n                          className=\"section-header\"\n                          htmlFor={`input-${credential}-for-${provider.id}-provider`}\n                        >\n                          {provider.credentials[credential].label ?? credential}\n                        </label>\n                        <input\n                          name={credential}\n                          id={`input-${credential}-for-${provider.id}-provider`}\n                          type={provider.credentials[credential].type ?? \"text\"}\n                          placeholder={\n                            provider.credentials[credential].placeholder ?? \"\"\n                          }\n                          {...provider.credentials[credential]}\n                        />\n                      </div>\n                    )\n                  })}\n                  <button type=\"submit\">Sign in with {provider.name}</button>\n                </form>\n              )}\n              {(provider.type === \"email\" || provider.type === \"credentials\") &&\n                i + 1 < providersToRender.length && <hr />}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n"
        }
    ]
}