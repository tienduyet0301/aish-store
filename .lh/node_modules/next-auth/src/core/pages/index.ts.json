{
    "sourceFile": "node_modules/next-auth/src/core/pages/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import renderToString from \"preact-render-to-string\"\nimport SigninPage from \"./signin\"\nimport SignoutPage from \"./signout\"\nimport VerifyRequestPage from \"./verify-request\"\nimport ErrorPage from \"./error\"\nimport css from \"../../css\"\n\nimport type { InternalOptions } from \"../types\"\nimport type { RequestInternal, ResponseInternal } from \"..\"\nimport type { Cookie } from \"../lib/cookie\"\nimport type { ErrorType } from \"./error\"\n\ntype RenderPageParams = {\n  query?: RequestInternal[\"query\"]\n  cookies?: Cookie[]\n} & Partial<\n  Pick<\n    InternalOptions,\n    \"url\" | \"callbackUrl\" | \"csrfToken\" | \"providers\" | \"theme\"\n  >\n>\n\n/**\n * Unless the user defines their [own pages](https://next-auth.js.org/configuration/pages),\n * we render a set of default ones, using Preact SSR.\n */\nexport default function renderPage(params: RenderPageParams) {\n  const { url, theme, query, cookies } = params\n\n  function send({ html, title, status }: any): ResponseInternal {\n    return {\n      cookies,\n      status,\n      headers: [{ key: \"Content-Type\", value: \"text/html\" }],\n      body: `<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><style>${css()}</style><title>${title}</title></head><body class=\"__next-auth-theme-${\n        theme?.colorScheme ?? \"auto\"\n      }\"><div class=\"page\">${renderToString(html)}</div></body></html>`,\n    }\n  }\n\n  return {\n    signin(props?: any) {\n      return send({\n        html: SigninPage({\n          csrfToken: params.csrfToken,\n          providers: params.providers,\n          callbackUrl: params.callbackUrl,\n          theme,\n          ...query,\n          ...props,\n        }),\n        title: \"Sign In\",\n      })\n    },\n    signout(props?: any) {\n      return send({\n        html: SignoutPage({\n          csrfToken: params.csrfToken,\n          url,\n          theme,\n          ...props,\n        }),\n        title: \"Sign Out\",\n      })\n    },\n    verifyRequest(props?: any) {\n      return send({\n        html: VerifyRequestPage({ url, theme, ...props }),\n        title: \"Verify Request\",\n      })\n    },\n    error(props?: { error?: ErrorType }) {\n      return send({\n        ...ErrorPage({ url, theme, ...props }),\n        title: \"Error\",\n      })\n    },\n  }\n}\n"
        }
    ]
}