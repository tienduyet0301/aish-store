{
    "sourceFile": "node_modules/next-auth/src/core/lib/oauth/client-legacy.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// This is kept around for being backwards compatible with OAuth 1.0 providers.\n// We have the intentions to provide only minor fixes for this in the future.\n\nimport { OAuth } from \"oauth\"\nimport type { InternalOptions } from \"../../types\"\n\n/**\n * Client supporting OAuth 1.x\n */\nexport function oAuth1Client(options: InternalOptions<\"oauth\">) {\n  const provider = options.provider\n\n  const oauth1Client = new OAuth(\n    provider.requestTokenUrl as string,\n    provider.accessTokenUrl as string,\n    provider.clientId as string,\n    provider.clientSecret as string,\n    provider.version ?? \"1.0\",\n    provider.callbackUrl,\n    provider.encoding ?? \"HMAC-SHA1\"\n  )\n\n  // Promisify get()  for OAuth1\n  const originalGet = oauth1Client.get.bind(oauth1Client)\n  // @ts-expect-error\n  oauth1Client.get = async (...args) => {\n    return await new Promise((resolve, reject) => {\n      originalGet(...args, (error, result) => {\n        if (error) {\n          return reject(error)\n        }\n        resolve(result)\n      })\n    })\n  }\n  // Promisify getOAuth1AccessToken()  for OAuth1\n  const originalGetOAuth1AccessToken =\n    oauth1Client.getOAuthAccessToken.bind(oauth1Client)\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  oauth1Client.getOAuthAccessToken = async (...args: any[]) => {\n    return await new Promise((resolve, reject) => {\n      originalGetOAuth1AccessToken(\n        ...args,\n        (error: any, oauth_token: any, oauth_token_secret: any) => {\n          if (error) {\n            return reject(error)\n          }\n          resolve({ oauth_token, oauth_token_secret } as any)\n        }\n      )\n    })\n  }\n\n  const originalGetOAuthRequestToken =\n    oauth1Client.getOAuthRequestToken.bind(oauth1Client)\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  oauth1Client.getOAuthRequestToken = async (params = {}) => {\n    return await new Promise((resolve, reject) => {\n      originalGetOAuthRequestToken(\n        params,\n        (error, oauth_token, oauth_token_secret, params) => {\n          if (error) {\n            return reject(error)\n          }\n          resolve({ oauth_token, oauth_token_secret, params } as any)\n        }\n      )\n    })\n  }\n  return oauth1Client\n}\n\nexport const oAuth1TokenStore = new Map()\n"
        }
    ]
}