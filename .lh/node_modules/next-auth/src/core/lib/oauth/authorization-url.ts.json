{
    "sourceFile": "node_modules/next-auth/src/core/lib/oauth/authorization-url.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { openidClient } from \"./client\"\nimport { oAuth1Client, oAuth1TokenStore } from \"./client-legacy\"\nimport * as checks from \"./checks\"\n\nimport type { AuthorizationParameters } from \"openid-client\"\nimport type { InternalOptions } from \"../../types\"\nimport type { RequestInternal } from \"../..\"\nimport type { Cookie } from \"../cookie\"\n\n/**\n *\n * Generates an authorization/request token URL.\n *\n * [OAuth 2](https://www.oauth.com/oauth2-servers/authorization/the-authorization-request/) | [OAuth 1](https://oauth.net/core/1.0a/#auth_step2)\n */\nexport default async function getAuthorizationUrl({\n  options,\n  query,\n}: {\n  options: InternalOptions<\"oauth\">\n  query: RequestInternal[\"query\"]\n}) {\n  const { logger, provider } = options\n  let params: any = {}\n\n  if (typeof provider.authorization === \"string\") {\n    const parsedUrl = new URL(provider.authorization)\n    const parsedParams = Object.fromEntries(parsedUrl.searchParams)\n    params = { ...params, ...parsedParams }\n  } else {\n    params = { ...params, ...provider.authorization?.params }\n  }\n\n  params = { ...params, ...query }\n\n  // Handle OAuth v1.x\n  if (provider.version?.startsWith(\"1.\")) {\n    const client = oAuth1Client(options)\n    const tokens = (await client.getOAuthRequestToken(params)) as any\n    const url = `${provider.authorization?.url}?${new URLSearchParams({\n      oauth_token: tokens.oauth_token,\n      oauth_token_secret: tokens.oauth_token_secret,\n      ...tokens.params,\n    })}`\n    oAuth1TokenStore.set(tokens.oauth_token, tokens.oauth_token_secret)\n    logger.debug(\"GET_AUTHORIZATION_URL\", { url, provider })\n    return { redirect: url }\n  }\n\n  const client = await openidClient(options)\n\n  const authorizationParams: AuthorizationParameters = params\n  const cookies: Cookie[] = []\n\n  await checks.state.create(options, cookies, authorizationParams)\n  await checks.pkce.create(options, cookies, authorizationParams)\n  await checks.nonce.create(options, cookies, authorizationParams)\n\n  const url = client.authorizationUrl(authorizationParams)\n\n  logger.debug(\"GET_AUTHORIZATION_URL\", { url, cookies, provider })\n  return { redirect: url, cookies }\n}\n"
        }
    ]
}