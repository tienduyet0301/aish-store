{
    "sourceFile": "node_modules/next-auth/src/core/lib/csrf-token.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892932931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { createHash, randomBytes } from \"crypto\"\n\nimport type { InternalOptions } from \"../types\"\n\ninterface CreateCSRFTokenParams {\n  options: InternalOptions\n  cookieValue?: string\n  isPost: boolean\n  bodyValue?: string\n}\n\n/**\n * Ensure CSRF Token cookie is set for any subsequent requests.\n * Used as part of the strategy for mitigation for CSRF tokens.\n *\n * Creates a cookie like 'next-auth.csrf-token' with the value 'token|hash',\n * where 'token' is the CSRF token and 'hash' is a hash made of the token and\n * the secret, and the two values are joined by a pipe '|'. By storing the\n * value and the hash of the value (with the secret used as a salt) we can\n * verify the cookie was set by the server and not by a malicous attacker.\n *\n * For more details, see the following OWASP links:\n * https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie\n * https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf\n */\nexport function createCSRFToken({\n  options,\n  cookieValue,\n  isPost,\n  bodyValue,\n}: CreateCSRFTokenParams) {\n  if (cookieValue) {\n    const [csrfToken, csrfTokenHash] = cookieValue.split(\"|\")\n    const expectedCsrfTokenHash = createHash(\"sha256\")\n      .update(`${csrfToken}${options.secret}`)\n      .digest(\"hex\")\n    if (csrfTokenHash === expectedCsrfTokenHash) {\n      // If hash matches then we trust the CSRF token value\n      // If this is a POST request and the CSRF Token in the POST request matches\n      // the cookie we have already verified is the one we have set, then the token is verified!\n      const csrfTokenVerified = isPost && csrfToken === bodyValue\n\n      return { csrfTokenVerified, csrfToken }\n    }\n  }\n\n  // New CSRF token\n  const csrfToken = randomBytes(32).toString(\"hex\")\n  const csrfTokenHash = createHash(\"sha256\")\n    .update(`${csrfToken}${options.secret}`)\n    .digest(\"hex\")\n  const cookie = `${csrfToken}|${csrfTokenHash}`\n\n  return { cookie, csrfToken }\n}\n"
        }
    ]
}