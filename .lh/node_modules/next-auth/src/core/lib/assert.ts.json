{
    "sourceFile": "node_modules/next-auth/src/core/lib/assert.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892932764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import {\n  MissingAdapter,\n  MissingAPIRoute,\n  MissingAuthorize,\n  MissingSecret,\n  UnsupportedStrategy,\n  InvalidCallbackUrl,\n  MissingAdapterMethods,\n} from \"../errors\"\nimport parseUrl from \"../../utils/parse-url\"\nimport { defaultCookies } from \"./cookie\"\n\nimport type { RequestInternal } from \"..\"\nimport type { WarningCode } from \"../../utils/logger\"\nimport type { AuthOptions } from \"../types\"\n\ntype ConfigError =\n  | MissingAPIRoute\n  | MissingSecret\n  | UnsupportedStrategy\n  | MissingAuthorize\n  | MissingAdapter\n\nlet warned = false\n\nfunction isValidHttpUrl(url: string, baseUrl: string) {\n  try {\n    return /^https?:/.test(\n      new URL(url, url.startsWith(\"/\") ? baseUrl : undefined).protocol\n    )\n  } catch {\n    return false\n  }\n}\n\n/**\n * Verify that the user configured `next-auth` correctly.\n * Good place to mention deprecations as well.\n *\n * REVIEW: Make some of these and corresponding docs less Next.js specific?\n */\nexport function assertConfig(params: {\n  options: AuthOptions\n  req: RequestInternal\n}): ConfigError | WarningCode[] {\n  const { options, req } = params\n\n  const warnings: WarningCode[] = []\n\n  if (!warned) {\n    if (!req.origin) warnings.push(\"NEXTAUTH_URL\")\n\n    // TODO: Make this throw an error in next major. This will also get rid of `NODE_ENV`\n    if (!options.secret && process.env.NODE_ENV !== \"production\")\n      warnings.push(\"NO_SECRET\")\n\n    if (options.debug) warnings.push(\"DEBUG_ENABLED\")\n  }\n\n  if (!options.secret && process.env.NODE_ENV === \"production\") {\n    return new MissingSecret(\"Please define a `secret` in production.\")\n  }\n\n  // req.query isn't defined when asserting `getServerSession` for example\n  if (!req.query?.nextauth && !req.action) {\n    return new MissingAPIRoute(\n      \"Cannot find [...nextauth].{js,ts} in `/pages/api/auth`. Make sure the filename is written correctly.\"\n    )\n  }\n\n  const callbackUrlParam = req.query?.callbackUrl as string | undefined\n\n  const url = parseUrl(req.origin)\n\n  if (callbackUrlParam && !isValidHttpUrl(callbackUrlParam, url.base)) {\n    return new InvalidCallbackUrl(\n      `Invalid callback URL. Received: ${callbackUrlParam}`\n    )\n  }\n\n  const { callbackUrl: defaultCallbackUrl } = defaultCookies(\n    options.useSecureCookies ?? url.base.startsWith(\"https://\")\n  )\n  const callbackUrlCookie =\n    req.cookies?.[options.cookies?.callbackUrl?.name ?? defaultCallbackUrl.name]\n\n  if (callbackUrlCookie && !isValidHttpUrl(callbackUrlCookie, url.base)) {\n    return new InvalidCallbackUrl(\n      `Invalid callback URL. Received: ${callbackUrlCookie}`\n    )\n  }\n\n  let hasCredentials, hasEmail\n  let hasTwitterOAuth2\n\n  for (const provider of options.providers) {\n    if (provider.type === \"credentials\") hasCredentials = true\n    else if (provider.type === \"email\") hasEmail = true\n    else if (provider.id === \"twitter\" && provider.version === \"2.0\")\n      hasTwitterOAuth2 = true\n  }\n\n  if (hasCredentials) {\n    const dbStrategy = options.session?.strategy === \"database\"\n    const onlyCredentials = !options.providers.some(\n      (p) => p.type !== \"credentials\"\n    )\n    if (dbStrategy && onlyCredentials) {\n      return new UnsupportedStrategy(\n        \"Signin in with credentials only supported if JWT strategy is enabled\"\n      )\n    }\n\n    const credentialsNoAuthorize = options.providers.some(\n      (p) => p.type === \"credentials\" && !p.authorize\n    )\n    if (credentialsNoAuthorize) {\n      return new MissingAuthorize(\n        \"Must define an authorize() handler to use credentials authentication provider\"\n      )\n    }\n  }\n\n  if (hasEmail) {\n    const { adapter } = options\n    if (!adapter) {\n      return new MissingAdapter(\"E-mail login requires an adapter.\")\n    }\n\n    const missingMethods = [\n      \"createVerificationToken\",\n      \"useVerificationToken\",\n      \"getUserByEmail\",\n    ].filter((method) => !adapter[method])\n\n    if (missingMethods.length) {\n      return new MissingAdapterMethods(\n        `Required adapter methods were missing: ${missingMethods.join(\", \")}`\n      )\n    }\n  }\n\n  if (!warned) {\n    if (hasTwitterOAuth2) warnings.push(\"TWITTER_OAUTH_2_BETA\")\n    warned = true\n  }\n\n  return warnings\n}\n"
        }
    ]
}