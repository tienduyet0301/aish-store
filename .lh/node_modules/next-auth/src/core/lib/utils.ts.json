{
    "sourceFile": "node_modules/next-auth/src/core/lib/utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { createHash } from \"crypto\"\n\nimport type { AuthOptions } from \"../..\"\nimport type { InternalOptions } from \"../types\"\nimport type { InternalUrl } from \"../../utils/parse-url\"\n\n/**\n * Takes a number in seconds and returns the date in the future.\n * Optionally takes a second date parameter. In that case\n * the date in the future will be calculated from that date instead of now.\n */\nexport function fromDate(time: number, date = Date.now()) {\n  return new Date(date + time * 1000)\n}\n\nexport function hashToken(token: string, options: InternalOptions<\"email\">) {\n  const { provider, secret } = options\n  return (\n    createHash(\"sha256\")\n      // Prefer provider specific secret, but use default secret if none specified\n      .update(`${token}${provider.secret ?? secret}`)\n      .digest(\"hex\")\n  )\n}\n\n/**\n * Secret used salt cookies and tokens (e.g. for CSRF protection).\n * If no secret option is specified then it creates one on the fly\n * based on options passed here. If options contains unique data, such as\n * OAuth provider secrets and database credentials it should be sufficent. If no secret provided in production, we throw an error. */\nexport function createSecret(params: {\n  authOptions: AuthOptions\n  url: InternalUrl\n}) {\n  const { authOptions, url } = params\n\n  return (\n    authOptions.secret ??\n    // TODO: Remove falling back to default secret, and error in dev if one isn't provided\n    createHash(\"sha256\")\n      .update(JSON.stringify({ ...url, ...authOptions }))\n      .digest(\"hex\")\n  )\n}\n"
        }
    ]
}