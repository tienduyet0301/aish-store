{
    "sourceFile": "node_modules/next-auth/src/core/lib/email/signin.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892933063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { randomBytes } from \"crypto\"\nimport { hashToken } from \"../utils\"\nimport type { InternalOptions } from \"../../types\"\n\n/**\n * Starts an e-mail login flow, by generating a token,\n * and sending it to the user's e-mail (with the help of a DB adapter)\n */\nexport default async function email(\n  identifier: string,\n  options: InternalOptions<\"email\">\n): Promise<string> {\n  const { url, adapter, provider, callbackUrl, theme } = options\n  // Generate token\n  const token =\n    (await provider.generateVerificationToken?.()) ??\n    randomBytes(32).toString(\"hex\")\n\n  const ONE_DAY_IN_SECONDS = 86400\n  const expires = new Date(\n    Date.now() + (provider.maxAge ?? ONE_DAY_IN_SECONDS) * 1000\n  )\n\n  // Generate a link with email, unhashed token and callback url\n  const params = new URLSearchParams({ callbackUrl, token, email: identifier })\n  const _url = `${url}/callback/${provider.id}?${params}`\n\n  await Promise.all([\n    // Send to user\n    provider.sendVerificationRequest({\n      identifier,\n      token,\n      expires,\n      url: _url,\n      provider,\n      theme,\n    }),\n    // Save in database\n    // @ts-expect-error -- adapter is checked to be defined in `init`\n    adapter.createVerificationToken?.({\n      identifier,\n      token: hashToken(token, options),\n      expires,\n    }),\n  ])\n\n  return `${url}/verify-request?${new URLSearchParams({\n    provider: provider.id,\n    type: provider.type,\n  })}`\n}\n"
        }
    ]
}