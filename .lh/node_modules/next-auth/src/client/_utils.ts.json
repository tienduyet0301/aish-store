{
    "sourceFile": "node_modules/next-auth/src/client/_utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892931895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { IncomingMessage } from \"http\"\nimport type { LoggerInstance, Session } from \"..\"\n\nexport interface AuthClientConfig {\n  baseUrl: string\n  basePath: string\n  baseUrlServer: string\n  basePathServer: string\n  /** Stores last session response */\n  _session?: Session | null | undefined\n  /** Used for timestamp since last sycned (in seconds) */\n  _lastSync: number\n  /**\n   * Stores the `SessionProvider`'s session update method to be able to\n   * trigger session updates from places like `signIn` or `signOut`\n   */\n  _getSession: (...args: any[]) => any\n}\n\nexport interface CtxOrReq {\n  req?: Partial<IncomingMessage> & { body?: any }\n  ctx?: { req: Partial<IncomingMessage> & { body?: any } }\n}\n\n/**\n * If passed 'appContext' via getInitialProps() in _app.js\n * then get the req object from ctx and use that for the\n * req value to allow `fetchData` to\n * work seemlessly in getInitialProps() on server side\n * pages *and* in _app.js.\n */\nexport async function fetchData<T = any>(\n  path: string,\n  __NEXTAUTH: AuthClientConfig,\n  logger: LoggerInstance,\n  { ctx, req = ctx?.req }: CtxOrReq = {}\n): Promise<T | null> {\n  const url = `${apiBaseUrl(__NEXTAUTH)}/${path}`\n  try {\n    const options: RequestInit = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...(req?.headers?.cookie ? { cookie: req.headers.cookie } : {}),\n      },\n    }\n\n    if (req?.body) {\n      options.body = JSON.stringify(req.body)\n      options.method = \"POST\"\n    }\n\n    const res = await fetch(url, options)\n    const data = await res.json()\n    if (!res.ok) throw data\n    return Object.keys(data).length > 0 ? data : null // Return null if data empty\n  } catch (error) {\n    logger.error(\"CLIENT_FETCH_ERROR\", { error: error as Error, url })\n    return null\n  }\n}\n\nexport function apiBaseUrl(__NEXTAUTH: AuthClientConfig) {\n  if (typeof window === \"undefined\") {\n    // Return absolute path when called server side\n    return `${__NEXTAUTH.baseUrlServer}${__NEXTAUTH.basePathServer}`\n  }\n  // Return relative path when called client side\n  return __NEXTAUTH.basePath\n}\n\n/** Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC. */\nexport function now() {\n  return Math.floor(Date.now() / 1000)\n}\n\nexport interface BroadcastMessage {\n  event?: \"session\"\n  data?: { trigger?: \"signout\" | \"getSession\" }\n  clientId: string\n  timestamp: number\n}\n\n/**\n * Inspired by [Broadcast Channel API](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)\n * Only not using it directly, because Safari does not support it.\n *\n * https://caniuse.com/?search=broadcastchannel\n */\nexport function BroadcastChannel(name = \"nextauth.message\") {\n  return {\n    /** Get notified by other tabs/windows. */\n    receive(onReceive: (message: BroadcastMessage) => void) {\n      const handler = (event: StorageEvent) => {\n        if (event.key !== name) return\n        const message: BroadcastMessage = JSON.parse(event.newValue ?? \"{}\")\n        if (message?.event !== \"session\" || !message?.data) return\n\n        onReceive(message)\n      }\n      window.addEventListener(\"storage\", handler)\n      return () => window.removeEventListener(\"storage\", handler)\n    },\n    /** Notify other tabs/windows. */\n    post(message: Record<string, unknown>) {\n      if (typeof window === \"undefined\") return\n      try {\n        localStorage.setItem(\n          name,\n          JSON.stringify({ ...message, timestamp: now() })\n        )\n      } catch {\n        /**\n         * The localStorage API isn't always available.\n         * It won't work in private mode prior to Safari 11 for example.\n         * Notifications are simply dropped if an error is encountered.\n         */\n      }\n    },\n  }\n}\n"
        }
    ]
}