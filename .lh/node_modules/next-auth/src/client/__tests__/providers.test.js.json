{
    "sourceFile": "node_modules/next-auth/src/client/__tests__/providers.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892932244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { useState } from \"react\"\nimport userEvent from \"@testing-library/user-event\"\nimport { render, screen, waitFor } from \"@testing-library/react\"\nimport { server, mockProviders } from \"./helpers/mocks\"\nimport { getProviders } from \"../../react\"\nimport logger from \"../../utils/logger\"\nimport { rest } from \"msw\"\n\njest.mock(\"../../utils/logger\", () => ({\n  __esModule: true,\n  default: {\n    warn: jest.fn(),\n    debug: jest.fn(),\n    error: jest.fn(),\n  },\n  proxyLogger(logger) {\n    return logger\n  },\n}))\n\nbeforeAll(() => {\n  server.listen()\n})\n\nafterEach(() => {\n  server.resetHandlers()\n  jest.clearAllMocks()\n})\n\nafterAll(() => {\n  server.close()\n})\n\ntest(\"when called it'll return the currently configured providers for sign in\", async () => {\n  render(<ProvidersFlow />)\n\n  userEvent.click(screen.getByRole(\"button\"))\n\n  await waitFor(() => {\n    expect(screen.getByTestId(\"providers-result\").textContent).toEqual(\n      JSON.stringify(mockProviders)\n    )\n  })\n})\n\ntest(\"when failing to fetch the providers, it'll log the error\", async () => {\n  server.use(\n    rest.get(\"*/api/auth/providers\", (req, res, ctx) =>\n      res(ctx.status(500), ctx.text(\"some error happened\"))\n    )\n  )\n\n  render(<ProvidersFlow />)\n\n  userEvent.click(screen.getByRole(\"button\"))\n\n  await waitFor(() => {\n    expect(logger.error).toHaveBeenCalledTimes(1)\n    expect(logger.error).toBeCalledWith(\"CLIENT_FETCH_ERROR\", {\n      url: \"/api/auth/providers\",\n      error: new SyntaxError(\"Unexpected token s in JSON at position 0\"),\n    })\n  })\n})\n\nfunction ProvidersFlow() {\n  const [response, setResponse] = useState()\n\n  async function handleGerProviders() {\n    const result = await getProviders()\n    setResponse(result)\n  }\n\n  return (\n    <>\n      <p data-testid=\"providers-result\">\n        {response === null\n          ? \"null-response\"\n          : JSON.stringify(response) || \"no response\"}\n      </p>\n      <button onClick={handleGerProviders}>Get Providers</button>\n    </>\n  )\n}\n"
        }
    ]
}