{
    "sourceFile": "node_modules/next-auth/src/client/__tests__/sign-out.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892932372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { useState } from \"react\"\nimport userEvent from \"@testing-library/user-event\"\nimport { render, screen, waitFor } from \"@testing-library/react\"\nimport { server, mockSignOutResponse } from \"./helpers/mocks\"\nimport { signOut } from \"../../react\"\nimport { rest } from \"msw\"\nimport { getBroadcastEvents } from \"./helpers/utils\"\n\nconst { location } = window\n\nbeforeAll(() => {\n  server.listen()\n  // Allows to mutate `window.location`...\n  delete window.location\n  window.location = {\n    reload: jest.fn(),\n    href: location.href,\n  }\n})\n\nbeforeEach(() => {\n  // eslint-disable-next-line no-proto\n  jest.spyOn(window.localStorage.__proto__, \"setItem\")\n})\n\nafterEach(() => {\n  jest.clearAllMocks()\n  server.resetHandlers()\n})\n\nafterAll(() => {\n  window.location = location\n  server.close()\n})\n\nconst callbackUrl = \"https://redirects/to\"\n\ntest(\"by default it redirects to the current URL if the server did not provide one\", async () => {\n  server.use(\n    rest.post(\"*/api/auth/signout\", (req, res, ctx) =>\n      res(ctx.status(200), ctx.json({ ...mockSignOutResponse, url: undefined }))\n    )\n  )\n\n  render(<SignOutFlow />)\n\n  userEvent.click(screen.getByRole(\"button\"))\n\n  await waitFor(() => {\n    expect(window.location.href).toBe(window.location.href)\n  })\n})\n\ntest(\"it redirects to the URL allowed by the server\", async () => {\n  render(<SignOutFlow callbackUrl={callbackUrl} />)\n\n  userEvent.click(screen.getByRole(\"button\"))\n\n  await waitFor(() => {\n    expect(window.location.href).toBe(mockSignOutResponse.url)\n  })\n})\n\ntest(\"if url contains a hash during redirection a page reload happens\", async () => {\n  const mockUrlWithHash = \"https://path/to/email/url#foo-bar-baz\"\n\n  server.use(\n    rest.post(\"*/api/auth/signout\", (req, res, ctx) => {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          ...mockSignOutResponse,\n          url: mockUrlWithHash,\n        })\n      )\n    })\n  )\n\n  render(<SignOutFlow />)\n\n  userEvent.click(screen.getByRole(\"button\"))\n\n  await waitFor(() => {\n    expect(window.location.href).toBe(mockUrlWithHash)\n  })\n})\n\ntest(\"will broadcast the signout event to other tabs\", async () => {\n  render(<SignOutFlow />)\n\n  userEvent.click(screen.getByRole(\"button\"))\n\n  await waitFor(() => {\n    const broadcastCalls = getBroadcastEvents()\n    const [broadcastedEvent] = broadcastCalls\n\n    expect(broadcastCalls).toHaveLength(1)\n    expect(broadcastedEvent.eventName).toBe(\"nextauth.message\")\n    expect(broadcastedEvent.value).toStrictEqual({\n      data: {\n        trigger: \"signout\",\n      },\n      event: \"session\",\n    })\n  })\n})\n\nfunction SignOutFlow({ callbackUrl, redirect = true }) {\n  const [response, setResponse] = useState(null)\n\n  async function handleSignOut() {\n    const result = await signOut({ callbackUrl, redirect })\n    setResponse(result)\n  }\n\n  return (\n    <>\n      <p data-testid=\"signout-result\">\n        {response ? JSON.stringify(response) : \"no response\"}\n      </p>\n      <button onClick={handleSignOut}>Sign out</button>\n    </>\n  )\n}\n"
        }
    ]
}