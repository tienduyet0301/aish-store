{
    "sourceFile": "node_modules/next-auth/next/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892923139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.getServerSession = getServerSession;\nexports.unstable_getServerSession = unstable_getServerSession;\nvar _core = require(\"../core\");\nvar _utils = require(\"./utils\");\nasync function NextAuthApiHandler(req, res, options) {\n  var _options$secret, _ref, _options$jwt$secret, _options$jwt, _ref2, _handler$status, _handler$cookies, _handler$headers;\n  const {\n    nextauth,\n    ...query\n  } = req.query;\n  (_options$secret = options.secret) !== null && _options$secret !== void 0 ? _options$secret : options.secret = (_ref = (_options$jwt$secret = (_options$jwt = options.jwt) === null || _options$jwt === void 0 ? void 0 : _options$jwt.secret) !== null && _options$jwt$secret !== void 0 ? _options$jwt$secret : process.env.NEXTAUTH_SECRET) !== null && _ref !== void 0 ? _ref : process.env.AUTH_SECRET;\n  const handler = await (0, _core.AuthHandler)({\n    req: {\n      body: req.body,\n      query,\n      cookies: req.cookies,\n      headers: req.headers,\n      method: req.method,\n      action: nextauth === null || nextauth === void 0 ? void 0 : nextauth[0],\n      providerId: nextauth === null || nextauth === void 0 ? void 0 : nextauth[1],\n      error: (_ref2 = req.query.error) !== null && _ref2 !== void 0 ? _ref2 : nextauth === null || nextauth === void 0 ? void 0 : nextauth[1]\n    },\n    options\n  });\n  res.status((_handler$status = handler.status) !== null && _handler$status !== void 0 ? _handler$status : 200);\n  (_handler$cookies = handler.cookies) === null || _handler$cookies === void 0 || _handler$cookies.forEach(cookie => (0, _utils.setCookie)(res, cookie));\n  (_handler$headers = handler.headers) === null || _handler$headers === void 0 || _handler$headers.forEach(h => res.setHeader(h.key, h.value));\n  if (handler.redirect) {\n    var _req$body;\n    if (((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.json) !== \"true\") {\n      res.status(302).setHeader(\"Location\", handler.redirect);\n      res.end();\n      return;\n    }\n    return res.json({\n      url: handler.redirect\n    });\n  }\n  return res.send(handler.body);\n}\nasync function NextAuthRouteHandler(req, context, options) {\n  var _options$secret2, _process$env$NEXTAUTH, _await$context$params, _query$error;\n  (_options$secret2 = options.secret) !== null && _options$secret2 !== void 0 ? _options$secret2 : options.secret = (_process$env$NEXTAUTH = process.env.NEXTAUTH_SECRET) !== null && _process$env$NEXTAUTH !== void 0 ? _process$env$NEXTAUTH : process.env.AUTH_SECRET;\n  const {\n    headers,\n    cookies\n  } = require(\"next/headers\");\n  const nextauth = (_await$context$params = await context.params) === null || _await$context$params === void 0 ? void 0 : _await$context$params.nextauth;\n  const query = Object.fromEntries(req.nextUrl.searchParams);\n  const body = await (0, _utils.getBody)(req);\n  const internalResponse = await (0, _core.AuthHandler)({\n    req: {\n      body,\n      query,\n      cookies: Object.fromEntries((await cookies()).getAll().map(c => [c.name, c.value])),\n      headers: Object.fromEntries(await headers()),\n      method: req.method,\n      action: nextauth === null || nextauth === void 0 ? void 0 : nextauth[0],\n      providerId: nextauth === null || nextauth === void 0 ? void 0 : nextauth[1],\n      error: (_query$error = query.error) !== null && _query$error !== void 0 ? _query$error : nextauth === null || nextauth === void 0 ? void 0 : nextauth[1]\n    },\n    options\n  });\n  const response = (0, _utils.toResponse)(internalResponse);\n  const redirect = response.headers.get(\"Location\");\n  if ((body === null || body === void 0 ? void 0 : body.json) === \"true\" && redirect) {\n    response.headers.delete(\"Location\");\n    response.headers.set(\"Content-Type\", \"application/json\");\n    return new Response(JSON.stringify({\n      url: redirect\n    }), {\n      status: internalResponse.status,\n      headers: response.headers\n    });\n  }\n  return response;\n}\nfunction NextAuth(...args) {\n  var _args$;\n  if (args.length === 1) {\n    return async (req, res) => {\n      if (res !== null && res !== void 0 && res.params) {\n        return await NextAuthRouteHandler(req, res, args[0]);\n      }\n      return await NextAuthApiHandler(req, res, args[0]);\n    };\n  }\n  if ((_args$ = args[1]) !== null && _args$ !== void 0 && _args$.params) {\n    return NextAuthRouteHandler(...args);\n  }\n  return NextAuthApiHandler(...args);\n}\nvar _default = exports.default = NextAuth;\nasync function getServerSession(...args) {\n  var _options, _options$secret3, _process$env$NEXTAUTH2;\n  const isRSC = args.length === 0 || args.length === 1;\n  let req, res, options;\n  if (isRSC) {\n    options = Object.assign({}, args[0], {\n      providers: []\n    });\n    const {\n      headers,\n      cookies\n    } = require(\"next/headers\");\n    req = {\n      headers: Object.fromEntries(await headers()),\n      cookies: Object.fromEntries((await cookies()).getAll().map(c => [c.name, c.value]))\n    };\n    res = {\n      getHeader() {},\n      setCookie() {},\n      setHeader() {}\n    };\n  } else {\n    req = args[0];\n    res = args[1];\n    options = Object.assign({}, args[2], {\n      providers: []\n    });\n  }\n  (_options$secret3 = (_options = options).secret) !== null && _options$secret3 !== void 0 ? _options$secret3 : _options.secret = (_process$env$NEXTAUTH2 = process.env.NEXTAUTH_SECRET) !== null && _process$env$NEXTAUTH2 !== void 0 ? _process$env$NEXTAUTH2 : process.env.AUTH_SECRET;\n  const session = await (0, _core.AuthHandler)({\n    options,\n    req: {\n      action: \"session\",\n      method: \"GET\",\n      cookies: req.cookies,\n      headers: req.headers\n    }\n  });\n  const {\n    body,\n    cookies,\n    status = 200\n  } = session;\n  cookies === null || cookies === void 0 || cookies.forEach(cookie => (0, _utils.setCookie)(res, cookie));\n  if (body && typeof body !== \"string\" && Object.keys(body).length) {\n    if (status === 200) {\n      if (isRSC) delete body.expires;\n      return body;\n    }\n    throw new Error(body.message);\n  }\n  return null;\n}\nlet deprecatedWarningShown = false;\nasync function unstable_getServerSession(...args) {\n  if (!deprecatedWarningShown && process.env.NODE_ENV !== \"production\") {\n    console.warn(\"`unstable_getServerSession` has been renamed to `getServerSession`.\");\n    deprecatedWarningShown = true;\n  }\n  return await getServerSession(...args);\n}"
        }
    ]
}