{
    "sourceFile": "node_modules/next-auth/next/middleware.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892923171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { NextMiddleware, NextFetchEvent } from \"next/server\";\nimport type { Awaitable, CookieOption, AuthOptions } from \"..\";\nimport type { JWT, JWTOptions } from \"../jwt\";\nimport { NextRequest } from \"next/server\";\ndeclare type AuthorizedCallback = (params: {\n    token: JWT | null;\n    req: NextRequest;\n}) => Awaitable<boolean>;\nexport interface NextAuthMiddlewareOptions {\n    /**\n     * Where to redirect the user in case of an error if they weren't logged in.\n     * Similar to `pages` in `NextAuth`.\n     *\n     * ---\n     * [Documentation](https://next-auth.js.org/configuration/pages)\n     */\n    pages?: AuthOptions[\"pages\"];\n    /**\n     * You can override the default cookie names and options for any of the cookies\n     * by this middleware. Similar to `cookies` in `NextAuth`.\n     *\n     * Useful if the token is stored in not a default cookie.\n     *\n     * ---\n     * [Documentation](https://next-auth.js.org/configuration/options#cookies)\n     *\n     * - âš  **This is an advanced option.** Advanced options are passed the same way as basic options,\n     * but **may have complex implications** or side effects.\n     * You should **try to avoid using advanced options** unless you are very comfortable using them.\n     *\n     */\n    cookies?: Partial<Record<keyof Pick<keyof AuthOptions[\"cookies\"], \"sessionToken\">, Omit<CookieOption, \"options\">>>;\n    /**\n     * If a custom jwt `decode` method is set in `[...nextauth].ts`, the same method should be set here also.\n     *\n     * ---\n     * [Documentation](https://next-auth.js.org/configuration/nextjs#custom-jwt-decode-method)\n     */\n    jwt?: Partial<Pick<JWTOptions, \"decode\">>;\n    callbacks?: {\n        /**\n         * Callback that receives the user's JWT payload\n         * and returns `true` to allow the user to continue.\n         *\n         * This is similar to the `signIn` callback in `NextAuthOptions`.\n         *\n         * If it returns `false`, the user is redirected to the sign-in page instead\n         *\n         * The default is to let the user continue if they have a valid JWT (basic authentication).\n         *\n         * How to restrict a page and all of it's subpages for admins-only:\n         * @example\n         *\n         * ```js\n         * // `middleware.js`\n         * import { withAuth } from \"next-auth/middleware\"\n         *\n         * export default withAuth({\n         *   callbacks: {\n         *     authorized: ({ token }) => token?.user.isAdmin\n         *   }\n         * })\n         *\n         * export const config = { matcher: [\"/admin\"] }\n         *\n         * ```\n         *\n         * ---\n         * [Documentation](https://next-auth.js.org/configuration/nextjs#middleware) | [`signIn` callback](configuration/callbacks#sign-in-callback)\n         */\n        authorized?: AuthorizedCallback;\n    };\n    /**\n     * The same `secret` used in the `NextAuth` configuration.\n     * Defaults to the `NEXTAUTH_SECRET` environment variable.\n     */\n    secret?: string;\n}\ndeclare type NextMiddlewareResult = ReturnType<NextMiddleware> | void;\nexport interface NextRequestWithAuth extends NextRequest {\n    nextauth: {\n        token: JWT | null;\n    };\n}\nexport declare type NextMiddlewareWithAuth = (request: NextRequestWithAuth, event: NextFetchEvent) => NextMiddlewareResult | Promise<NextMiddlewareResult>;\nexport declare type WithAuthArgs = [NextRequestWithAuth] | [NextRequestWithAuth, NextFetchEvent] | [NextRequestWithAuth, NextAuthMiddlewareOptions] | [NextMiddlewareWithAuth] | [NextMiddlewareWithAuth, NextAuthMiddlewareOptions] | [NextAuthMiddlewareOptions] | [];\n/**\n * Middleware that checks if the user is authenticated/authorized.\n * If if they aren't, they will be redirected to the login page.\n * Otherwise, continue.\n *\n * @example\n *\n * ```js\n * // `middleware.js`\n * export { default } from \"next-auth/middleware\"\n * ```\n *\n * ---\n * [Documentation](https://next-auth.js.org/configuration/nextjs#middleware)\n */\nexport declare function withAuth(): ReturnType<NextMiddlewareWithAuth>;\nexport declare function withAuth(req: NextRequestWithAuth): ReturnType<NextMiddlewareWithAuth>;\nexport declare function withAuth(req: NextRequestWithAuth, event: NextFetchEvent): ReturnType<NextMiddlewareWithAuth>;\nexport declare function withAuth(req: NextRequestWithAuth, options: NextAuthMiddlewareOptions): ReturnType<NextMiddlewareWithAuth>;\nexport declare function withAuth(middleware: NextMiddlewareWithAuth, options: NextAuthMiddlewareOptions): NextMiddlewareWithAuth;\nexport declare function withAuth(middleware: NextMiddlewareWithAuth): NextMiddlewareWithAuth;\nexport declare function withAuth(options: NextAuthMiddlewareOptions): NextMiddlewareWithAuth;\nexport default withAuth;\n//# sourceMappingURL=middleware.d.ts.map"
        }
    ]
}