{
    "sourceFile": "node_modules/next-auth/client/_utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892917667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"node\" />\nimport type { IncomingMessage } from \"http\";\nimport type { LoggerInstance, Session } from \"..\";\nexport interface AuthClientConfig {\n    baseUrl: string;\n    basePath: string;\n    baseUrlServer: string;\n    basePathServer: string;\n    /** Stores last session response */\n    _session?: Session | null | undefined;\n    /** Used for timestamp since last sycned (in seconds) */\n    _lastSync: number;\n    /**\n     * Stores the `SessionProvider`'s session update method to be able to\n     * trigger session updates from places like `signIn` or `signOut`\n     */\n    _getSession: (...args: any[]) => any;\n}\nexport interface CtxOrReq {\n    req?: Partial<IncomingMessage> & {\n        body?: any;\n    };\n    ctx?: {\n        req: Partial<IncomingMessage> & {\n            body?: any;\n        };\n    };\n}\n/**\n * If passed 'appContext' via getInitialProps() in _app.js\n * then get the req object from ctx and use that for the\n * req value to allow `fetchData` to\n * work seemlessly in getInitialProps() on server side\n * pages *and* in _app.js.\n */\nexport declare function fetchData<T = any>(path: string, __NEXTAUTH: AuthClientConfig, logger: LoggerInstance, { ctx, req }?: CtxOrReq): Promise<T | null>;\nexport declare function apiBaseUrl(__NEXTAUTH: AuthClientConfig): string;\n/** Returns the number of seconds elapsed since January 1, 1970 00:00:00 UTC. */\nexport declare function now(): number;\nexport interface BroadcastMessage {\n    event?: \"session\";\n    data?: {\n        trigger?: \"signout\" | \"getSession\";\n    };\n    clientId: string;\n    timestamp: number;\n}\n/**\n * Inspired by [Broadcast Channel API](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API)\n * Only not using it directly, because Safari does not support it.\n *\n * https://caniuse.com/?search=broadcastchannel\n */\nexport declare function BroadcastChannel(name?: string): {\n    /** Get notified by other tabs/windows. */\n    receive(onReceive: (message: BroadcastMessage) => void): () => void;\n    /** Notify other tabs/windows. */\n    post(message: Record<string, unknown>): void;\n};\n//# sourceMappingURL=_utils.d.ts.map"
        }
    ]
}