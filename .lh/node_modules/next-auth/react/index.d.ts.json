{
    "sourceFile": "node_modules/next-auth/react/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892931437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as React from \"react\";\nimport { Session } from \"..\";\nimport { CtxOrReq } from \"../client/_utils\";\nimport type { ClientSafeProvider, LiteralUnion, SessionProviderProps, SignInAuthorizationParams, SignInOptions, SignInResponse, SignOutParams, SignOutResponse, UseSessionOptions } from \"./types\";\nimport type { BuiltInProviderType, RedirectableProviderType } from \"../providers\";\nexport * from \"./types\";\ndeclare type UpdateSession = (data?: any) => Promise<Session | null>;\nexport declare type SessionContextValue<R extends boolean = false> = R extends true ? {\n    update: UpdateSession;\n    data: Session;\n    status: \"authenticated\";\n} | {\n    update: UpdateSession;\n    data: null;\n    status: \"loading\";\n} : {\n    update: UpdateSession;\n    data: Session;\n    status: \"authenticated\";\n} | {\n    update: UpdateSession;\n    data: null;\n    status: \"unauthenticated\" | \"loading\";\n};\nexport declare const SessionContext: React.Context<{\n    update: UpdateSession;\n    data: Session;\n    status: \"authenticated\";\n} | {\n    update: UpdateSession;\n    data: null;\n    status: \"unauthenticated\" | \"loading\";\n} | undefined>;\n/**\n * React Hook that gives you access\n * to the logged in user's session data.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#usesession)\n */\nexport declare function useSession<R extends boolean>(options?: UseSessionOptions<R>): SessionContextValue<R>;\nexport declare type GetSessionParams = CtxOrReq & {\n    event?: \"storage\" | \"timer\" | \"hidden\" | string;\n    triggerEvent?: boolean;\n    broadcast?: boolean;\n};\nexport declare function getSession(params?: GetSessionParams): Promise<Session | null>;\n/**\n * Returns the current Cross Site Request Forgery Token (CSRF Token)\n * required to make POST requests (e.g. for signing in and signing out).\n * You likely only need to use this if you are not using the built-in\n * `signIn()` and `signOut()` methods.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#getcsrftoken)\n */\nexport declare function getCsrfToken(params?: CtxOrReq): Promise<string | undefined>;\n/**\n * It calls `/api/auth/providers` and returns\n * a list of the currently configured authentication providers.\n * It can be useful if you are creating a dynamic custom sign in page.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#getproviders)\n */\nexport declare function getProviders(): Promise<Record<LiteralUnion<BuiltInProviderType, string>, ClientSafeProvider> | null>;\n/**\n * Client-side method to initiate a signin flow\n * or send the user to the signin page listing all possible providers.\n * Automatically adds the CSRF token to the request.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#signin)\n */\nexport declare function signIn<P extends RedirectableProviderType | undefined = undefined>(provider?: LiteralUnion<P extends RedirectableProviderType ? P | BuiltInProviderType : BuiltInProviderType>, options?: SignInOptions, authorizationParams?: SignInAuthorizationParams): Promise<P extends RedirectableProviderType ? SignInResponse | undefined : undefined>;\n/**\n * Signs the user out, by removing the session cookie.\n * Automatically adds the CSRF token to the request.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#signout)\n */\nexport declare function signOut<R extends boolean = true>(options?: SignOutParams<R>): Promise<R extends true ? undefined : SignOutResponse>;\n/**\n * Provider to wrap the app in to make session data available globally.\n * Can also be used to throttle the number of requests to the endpoint\n * `/api/auth/session`.\n *\n * [Documentation](https://next-auth.js.org/getting-started/client#sessionprovider)\n */\nexport declare function SessionProvider(props: SessionProviderProps): JSX.Element;\n//# sourceMappingURL=index.d.ts.map"
        }
    ]
}