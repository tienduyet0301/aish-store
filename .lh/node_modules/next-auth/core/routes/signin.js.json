{
    "sourceFile": "node_modules/next-auth/core/routes/signin.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892922098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signin;\nvar _authorizationUrl = _interopRequireDefault(require(\"../lib/oauth/authorization-url\"));\nvar _signin = _interopRequireDefault(require(\"../lib/email/signin\"));\nvar _getUserFromEmail = _interopRequireDefault(require(\"../lib/email/getUserFromEmail\"));\nasync function signin(params) {\n  const {\n    options,\n    query,\n    body\n  } = params;\n  const {\n    url,\n    callbacks,\n    logger,\n    provider\n  } = options;\n  if (!provider.type) {\n    return {\n      status: 500,\n      text: `Error: Type not specified for ${provider.name}`\n    };\n  }\n  if (provider.type === \"oauth\") {\n    try {\n      const response = await (0, _authorizationUrl.default)({\n        options,\n        query\n      });\n      return response;\n    } catch (error) {\n      logger.error(\"SIGNIN_OAUTH_ERROR\", {\n        error: error,\n        providerId: provider.id\n      });\n      return {\n        redirect: `${url}/error?error=OAuthSignin`\n      };\n    }\n  } else if (provider.type === \"email\") {\n    var _provider$normalizeId;\n    let email = body === null || body === void 0 ? void 0 : body.email;\n    if (!email) return {\n      redirect: `${url}/error?error=EmailSignin`\n    };\n    const normalizer = (_provider$normalizeId = provider.normalizeIdentifier) !== null && _provider$normalizeId !== void 0 ? _provider$normalizeId : identifier => {\n      let [local, domain] = identifier.toLowerCase().trim().split(\"@\");\n      domain = domain.split(\",\")[0];\n      return `${local}@${domain}`;\n    };\n    try {\n      email = normalizer(body === null || body === void 0 ? void 0 : body.email);\n    } catch (error) {\n      logger.error(\"SIGNIN_EMAIL_ERROR\", {\n        error,\n        providerId: provider.id\n      });\n      return {\n        redirect: `${url}/error?error=EmailSignin`\n      };\n    }\n    const user = await (0, _getUserFromEmail.default)({\n      email,\n      adapter: options.adapter\n    });\n    const account = {\n      providerAccountId: email,\n      userId: email,\n      type: \"email\",\n      provider: provider.id\n    };\n    try {\n      const signInCallbackResponse = await callbacks.signIn({\n        user,\n        account,\n        email: {\n          verificationRequest: true\n        }\n      });\n      if (!signInCallbackResponse) {\n        return {\n          redirect: `${url}/error?error=AccessDenied`\n        };\n      } else if (typeof signInCallbackResponse === \"string\") {\n        return {\n          redirect: signInCallbackResponse\n        };\n      }\n    } catch (error) {\n      return {\n        redirect: `${url}/error?${new URLSearchParams({\n          error: error\n        })}`\n      };\n    }\n    try {\n      const redirect = await (0, _signin.default)(email, options);\n      return {\n        redirect\n      };\n    } catch (error) {\n      logger.error(\"SIGNIN_EMAIL_ERROR\", {\n        error,\n        providerId: provider.id\n      });\n      return {\n        redirect: `${url}/error?error=EmailSignin`\n      };\n    }\n  }\n  return {\n    redirect: `${url}/signin`\n  };\n}"
        }
    ]
}