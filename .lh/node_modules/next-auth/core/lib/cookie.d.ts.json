{
    "sourceFile": "node_modules/next-auth/core/lib/cookie.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892918830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CookiesOptions } from \"../..\";\nimport type { CookieOption, LoggerInstance, SessionStrategy } from \"../types\";\nimport type { NextRequest } from \"next/server\";\nimport type { NextApiRequest } from \"next\";\n/** Stringified form of `JWT`. Extract the content with `jwt.decode` */\nexport declare type JWTString = string;\nexport declare type SetCookieOptions = Partial<CookieOption[\"options\"]> & {\n    expires?: Date | string;\n    encode?: (val: unknown) => string;\n};\n/**\n * If `options.session.strategy` is set to `jwt`, this is a stringified `JWT`.\n * In case of `strategy: \"database\"`, this is the `sessionToken` of the session in the database.\n */\nexport declare type SessionToken<T extends SessionStrategy = \"jwt\"> = T extends \"jwt\" ? JWTString : string;\n/**\n * Use secure cookies if the site uses HTTPS\n * This being conditional allows cookies to work non-HTTPS development URLs\n * Honour secure cookie option, which sets 'secure' and also adds '__Secure-'\n * prefix, but enable them by default if the site URL is HTTPS; but not for\n * non-HTTPS URLs like http://localhost which are used in development).\n * For more on prefixes see https://googlechrome.github.io/samples/cookie-prefixes/\n *\n * @TODO Review cookie settings (names, options)\n */\nexport declare function defaultCookies(useSecureCookies: boolean): CookiesOptions;\nexport interface Cookie extends CookieOption {\n    value: string;\n}\nexport declare class SessionStore {\n    #private;\n    constructor(option: CookieOption, req: Partial<{\n        cookies: NextRequest[\"cookies\"] | NextApiRequest[\"cookies\"];\n        headers: NextRequest[\"headers\"] | NextApiRequest[\"headers\"];\n    }>, logger: LoggerInstance | Console);\n    /**\n     * The JWT Session or database Session ID\n     * constructed from the cookie chunks.\n     */\n    get value(): string;\n    /**\n     * Given a cookie value, return new cookies, chunked, to fit the allowed cookie size.\n     * If the cookie has changed from chunked to unchunked or vice versa,\n     * it deletes the old cookies as well.\n     */\n    chunk(value: string, options: Partial<Cookie[\"options\"]>): Cookie[];\n    /** Returns a list of cookies that should be cleaned. */\n    clean(): Cookie[];\n}\n//# sourceMappingURL=cookie.d.ts.map"
        }
    ]
}