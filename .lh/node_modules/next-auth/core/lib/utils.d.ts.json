{
    "sourceFile": "node_modules/next-auth/core/lib/utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892920367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { AuthOptions } from \"../..\";\nimport type { InternalOptions } from \"../types\";\nimport type { InternalUrl } from \"../../utils/parse-url\";\n/**\n * Takes a number in seconds and returns the date in the future.\n * Optionally takes a second date parameter. In that case\n * the date in the future will be calculated from that date instead of now.\n */\nexport declare function fromDate(time: number, date?: number): Date;\nexport declare function hashToken(token: string, options: InternalOptions<\"email\">): string;\n/**\n * Secret used salt cookies and tokens (e.g. for CSRF protection).\n * If no secret option is specified then it creates one on the fly\n * based on options passed here. If options contains unique data, such as\n * OAuth provider secrets and database credentials it should be sufficent. If no secret provided in production, we throw an error. */\nexport declare function createSecret(params: {\n    authOptions: AuthOptions;\n    url: InternalUrl;\n}): string;\n//# sourceMappingURL=utils.d.ts.map"
        }
    ]
}