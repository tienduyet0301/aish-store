{
    "sourceFile": "node_modules/next-auth/core/lib/assert.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892918661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertConfig = assertConfig;\nvar _errors = require(\"../errors\");\nvar _parseUrl = _interopRequireDefault(require(\"../../utils/parse-url\"));\nvar _cookie = require(\"./cookie\");\nlet warned = false;\nfunction isValidHttpUrl(url, baseUrl) {\n  try {\n    return /^https?:/.test(new URL(url, url.startsWith(\"/\") ? baseUrl : undefined).protocol);\n  } catch (_unused) {\n    return false;\n  }\n}\nfunction assertConfig(params) {\n  var _req$query, _req$query2, _options$useSecureCoo, _req$cookies, _options$cookies$call, _options$cookies;\n  const {\n    options,\n    req\n  } = params;\n  const warnings = [];\n  if (!warned) {\n    if (!req.origin) warnings.push(\"NEXTAUTH_URL\");\n    if (!options.secret && process.env.NODE_ENV !== \"production\") warnings.push(\"NO_SECRET\");\n    if (options.debug) warnings.push(\"DEBUG_ENABLED\");\n  }\n  if (!options.secret && process.env.NODE_ENV === \"production\") {\n    return new _errors.MissingSecret(\"Please define a `secret` in production.\");\n  }\n  if (!((_req$query = req.query) !== null && _req$query !== void 0 && _req$query.nextauth) && !req.action) {\n    return new _errors.MissingAPIRoute(\"Cannot find [...nextauth].{js,ts} in `/pages/api/auth`. Make sure the filename is written correctly.\");\n  }\n  const callbackUrlParam = (_req$query2 = req.query) === null || _req$query2 === void 0 ? void 0 : _req$query2.callbackUrl;\n  const url = (0, _parseUrl.default)(req.origin);\n  if (callbackUrlParam && !isValidHttpUrl(callbackUrlParam, url.base)) {\n    return new _errors.InvalidCallbackUrl(`Invalid callback URL. Received: ${callbackUrlParam}`);\n  }\n  const {\n    callbackUrl: defaultCallbackUrl\n  } = (0, _cookie.defaultCookies)((_options$useSecureCoo = options.useSecureCookies) !== null && _options$useSecureCoo !== void 0 ? _options$useSecureCoo : url.base.startsWith(\"https://\"));\n  const callbackUrlCookie = (_req$cookies = req.cookies) === null || _req$cookies === void 0 ? void 0 : _req$cookies[(_options$cookies$call = (_options$cookies = options.cookies) === null || _options$cookies === void 0 || (_options$cookies = _options$cookies.callbackUrl) === null || _options$cookies === void 0 ? void 0 : _options$cookies.name) !== null && _options$cookies$call !== void 0 ? _options$cookies$call : defaultCallbackUrl.name];\n  if (callbackUrlCookie && !isValidHttpUrl(callbackUrlCookie, url.base)) {\n    return new _errors.InvalidCallbackUrl(`Invalid callback URL. Received: ${callbackUrlCookie}`);\n  }\n  let hasCredentials, hasEmail;\n  let hasTwitterOAuth2;\n  for (const provider of options.providers) {\n    if (provider.type === \"credentials\") hasCredentials = true;else if (provider.type === \"email\") hasEmail = true;else if (provider.id === \"twitter\" && provider.version === \"2.0\") hasTwitterOAuth2 = true;\n  }\n  if (hasCredentials) {\n    var _options$session;\n    const dbStrategy = ((_options$session = options.session) === null || _options$session === void 0 ? void 0 : _options$session.strategy) === \"database\";\n    const onlyCredentials = !options.providers.some(p => p.type !== \"credentials\");\n    if (dbStrategy && onlyCredentials) {\n      return new _errors.UnsupportedStrategy(\"Signin in with credentials only supported if JWT strategy is enabled\");\n    }\n    const credentialsNoAuthorize = options.providers.some(p => p.type === \"credentials\" && !p.authorize);\n    if (credentialsNoAuthorize) {\n      return new _errors.MissingAuthorize(\"Must define an authorize() handler to use credentials authentication provider\");\n    }\n  }\n  if (hasEmail) {\n    const {\n      adapter\n    } = options;\n    if (!adapter) {\n      return new _errors.MissingAdapter(\"E-mail login requires an adapter.\");\n    }\n    const missingMethods = [\"createVerificationToken\", \"useVerificationToken\", \"getUserByEmail\"].filter(method => !adapter[method]);\n    if (missingMethods.length) {\n      return new _errors.MissingAdapterMethods(`Required adapter methods were missing: ${missingMethods.join(\", \")}`);\n    }\n  }\n  if (!warned) {\n    if (hasTwitterOAuth2) warnings.push(\"TWITTER_OAUTH_2_BETA\");\n    warned = true;\n  }\n  return warnings;\n}"
        }
    ]
}