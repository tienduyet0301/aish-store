{
    "sourceFile": "node_modules/next-auth/core/lib/csrf-token.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892918935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { InternalOptions } from \"../types\";\ninterface CreateCSRFTokenParams {\n    options: InternalOptions;\n    cookieValue?: string;\n    isPost: boolean;\n    bodyValue?: string;\n}\n/**\n * Ensure CSRF Token cookie is set for any subsequent requests.\n * Used as part of the strategy for mitigation for CSRF tokens.\n *\n * Creates a cookie like 'next-auth.csrf-token' with the value 'token|hash',\n * where 'token' is the CSRF token and 'hash' is a hash made of the token and\n * the secret, and the two values are joined by a pipe '|'. By storing the\n * value and the hash of the value (with the secret used as a salt) we can\n * verify the cookie was set by the server and not by a malicous attacker.\n *\n * For more details, see the following OWASP links:\n * https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie\n * https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf\n */\nexport declare function createCSRFToken({ options, cookieValue, isPost, bodyValue, }: CreateCSRFTokenParams): {\n    csrfTokenVerified: boolean;\n    csrfToken: string;\n    cookie?: undefined;\n} | {\n    cookie: string;\n    csrfToken: string;\n    csrfTokenVerified?: undefined;\n};\nexport {};\n//# sourceMappingURL=csrf-token.d.ts.map"
        }
    ]
}