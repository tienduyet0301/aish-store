{
    "sourceFile": "node_modules/next-auth/core/lib/oauth/checks.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892919741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { AuthorizationParameters, OpenIDCallbackChecks } from \"openid-client\";\nimport type { RequestInternal } from \"../..\";\nimport type { OAuthChecks } from \"../../../providers\";\nimport type { CookiesOptions, InternalOptions } from \"../../types\";\nimport type { Cookie } from \"../cookie\";\n/** Returns a signed cookie. */\nexport declare function signCookie(type: keyof CookiesOptions, value: string, maxAge: number, options: InternalOptions<\"oauth\">): Promise<Cookie>;\nexport declare const PKCE_CODE_CHALLENGE_METHOD = \"S256\";\nexport declare const pkce: {\n    create(options: InternalOptions<\"oauth\">, cookies: Cookie[], resParams: AuthorizationParameters): Promise<void>;\n    /**\n     * Returns code_verifier if the provider is configured to use PKCE,\n     * and clears the container cookie afterwards.\n     * An error is thrown if the code_verifier is missing or invalid.\n     * @see https://www.rfc-editor.org/rfc/rfc7636\n     * @see https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/#pkce\n     */\n    use(cookies: RequestInternal[\"cookies\"], resCookies: Cookie[], options: InternalOptions<\"oauth\">, checks: OAuthChecks): Promise<string | undefined>;\n};\nexport declare const state: {\n    create(options: InternalOptions<\"oauth\">, cookies: Cookie[], resParams: AuthorizationParameters): Promise<void>;\n    /**\n     * Returns state if the provider is configured to use state,\n     * and clears the container cookie afterwards.\n     * An error is thrown if the state is missing or invalid.\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-10.12\n     * @see https://www.rfc-editor.org/rfc/rfc6749#section-4.1.1\n     */\n    use(cookies: RequestInternal[\"cookies\"], resCookies: Cookie[], options: InternalOptions<\"oauth\">, checks: OAuthChecks): Promise<void>;\n};\nexport declare const nonce: {\n    create(options: InternalOptions<\"oauth\">, cookies: Cookie[], resParams: AuthorizationParameters): Promise<void>;\n    /**\n     * Returns nonce if the provider is configured to use nonce,\n     * and clears the container cookie afterwards.\n     * An error is thrown if the nonce is missing or invalid.\n     * @see https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes\n     * @see https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/#nonce\n     */\n    use(cookies: RequestInternal[\"cookies\"], resCookies: Cookie[], options: InternalOptions<\"oauth\">, checks: OpenIDCallbackChecks): Promise<string | undefined>;\n};\n//# sourceMappingURL=checks.d.ts.map"
        }
    ]
}