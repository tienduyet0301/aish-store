{
    "sourceFile": "node_modules/next-auth/core/lib/callback-handler.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892918684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { InternalOptions } from \"../types\";\nimport type { AdapterSession, AdapterUser } from \"../../adapters\";\nimport type { JWT } from \"../../jwt\";\nimport type { Account, User } from \"../..\";\nimport type { SessionToken } from \"./cookie\";\n/**\n * This function handles the complex flow of signing users in, and either creating,\n * linking (or not linking) accounts depending on if the user is currently logged\n * in, if they have account already and the authentication mechanism they are using.\n *\n * It prevents insecure behaviour, such as linking OAuth accounts unless a user is\n * signed in and authenticated with an existing valid account.\n *\n * All verification (e.g. OAuth flows or email address verificaiton flows) are\n * done prior to this handler being called to avoid additonal complexity in this\n * handler.\n */\nexport default function callbackHandler(params: {\n    sessionToken?: SessionToken;\n    profile: User | AdapterUser | {\n        email: string;\n    };\n    account: Account | null;\n    options: InternalOptions;\n}): Promise<{\n    user: User;\n    account: Account;\n    session?: undefined;\n    isNewUser?: undefined;\n} | {\n    session: JWT | AdapterSession | null;\n    user: AdapterUser;\n    isNewUser: boolean;\n    account?: undefined;\n}>;\n//# sourceMappingURL=callback-handler.d.ts.map"
        }
    ]
}