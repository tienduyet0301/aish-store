{
    "sourceFile": "node_modules/next-auth/utils/logger.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892936438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export declare type WarningCode = \"NEXTAUTH_URL\" | \"NO_SECRET\" | \"TWITTER_OAUTH_2_BETA\" | \"DEBUG_ENABLED\";\n/**\n * Override any of the methods, and the rest will use the default logger.\n *\n * [Documentation](https://next-auth.js.org/configuration/options#logger)\n */\nexport interface LoggerInstance extends Record<string, Function> {\n    warn: (code: WarningCode) => void;\n    error: (code: string, \n    /**\n     * Either an instance of (JSON serializable) Error\n     * or an object that contains some debug information.\n     * (Error is still available through `metadata.error`)\n     */\n    metadata: Error | {\n        error: Error;\n        [key: string]: unknown;\n    }) => void;\n    debug: (code: string, metadata: unknown) => void;\n}\ndeclare const _logger: LoggerInstance;\n/**\n * Override the built-in logger with user's implementation.\n * Any `undefined` level will use the default logger.\n */\nexport declare function setLogger(newLogger?: Partial<LoggerInstance>, debug?: boolean): void;\nexport default _logger;\n/** Serializes client-side log messages and sends them to the server */\nexport declare function proxyLogger(logger?: LoggerInstance, basePath?: string): LoggerInstance;\n//# sourceMappingURL=logger.d.ts.map"
        }
    ]
}