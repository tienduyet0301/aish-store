{
    "sourceFile": "node_modules/axobject-query/lib/AXObjectRoleMap.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892055125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _iterationDecorator = _interopRequireDefault(require(\"./util/iterationDecorator\"));\nvar _AXObjectsMap = _interopRequireDefault(require(\"./AXObjectsMap\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar AXObjectRoleElements = [];\nvar _iterator = _createForOfIteratorHelper(_AXObjectsMap.default.entries()),\n  _step;\ntry {\n  var _loop = function _loop() {\n    var _step$value = _slicedToArray(_step.value, 2),\n      name = _step$value[0],\n      def = _step$value[1];\n    var relatedConcepts = def.relatedConcepts;\n    if (Array.isArray(relatedConcepts)) {\n      relatedConcepts.forEach(function (relation) {\n        if (relation.module === 'ARIA') {\n          var concept = relation.concept;\n          if (concept) {\n            var index = AXObjectRoleElements.findIndex(function (_ref5) {\n              var _ref6 = _slicedToArray(_ref5, 1),\n                key = _ref6[0];\n              return key === name;\n            });\n            if (index === -1) {\n              AXObjectRoleElements.push([name, []]);\n              index = AXObjectRoleElements.length - 1;\n            }\n            AXObjectRoleElements[index][1].push(concept);\n          }\n        }\n      });\n    }\n  };\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    _loop();\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\nvar AXObjectRoleMap = {\n  entries: function entries() {\n    return AXObjectRoleElements;\n  },\n  forEach: function forEach(fn) {\n    var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    for (var _i = 0, _AXObjectRoleElements = AXObjectRoleElements; _i < _AXObjectRoleElements.length; _i++) {\n      var _AXObjectRoleElements2 = _slicedToArray(_AXObjectRoleElements[_i], 2),\n        key = _AXObjectRoleElements2[0],\n        values = _AXObjectRoleElements2[1];\n      fn.call(thisArg, values, key, AXObjectRoleElements);\n    }\n  },\n  get: function get(key) {\n    var item = AXObjectRoleElements.find(function (tuple) {\n      return tuple[0] === key ? true : false;\n    });\n    return item && item[1];\n  },\n  has: function has(key) {\n    return !!AXObjectRoleMap.get(key);\n  },\n  keys: function keys() {\n    return AXObjectRoleElements.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        key = _ref2[0];\n      return key;\n    });\n  },\n  values: function values() {\n    return AXObjectRoleElements.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        values = _ref4[1];\n      return values;\n    });\n  }\n};\nvar _default = (0, _iterationDecorator.default)(AXObjectRoleMap, AXObjectRoleMap.entries());\nexports.default = _default;"
        }
    ]
}