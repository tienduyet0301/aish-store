{
    "sourceFile": "node_modules/@tanstack/virtual-core/dist/esm/utils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891953432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "export type NoInfer<A extends any> = [A][A extends any ? 0 : never];\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport declare function memo<TDeps extends ReadonlyArray<any>, TResult>(getDeps: () => [...TDeps], fn: (...args: NoInfer<[...TDeps]>) => TResult, opts: {\n    key: false | string;\n    debug?: () => boolean;\n    onChange?: (result: TResult) => void;\n    initialDeps?: TDeps;\n}): {\n    (): TResult;\n    updateDeps(newDeps: [...TDeps]): void;\n};\nexport declare function notUndefined<T>(value: T | undefined, msg?: string): T;\nexport declare const approxEqual: (a: number, b: number) => boolean;\nexport declare const debounce: (targetWindow: Window & typeof globalThis, fn: Function, ms: number) => (this: any, ...args: Array<any>) => void;\n"
        }
    ]
}