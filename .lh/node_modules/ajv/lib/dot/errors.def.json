{
    "sourceFile": "node_modules/ajv/lib/dot/errors.def",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892014904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{{# def.definitions }}\n\n{{## def._error:_rule:\n  {{ 'istanbul ignore else'; }}\n  {{? it.createErrors !== false }}\n    {\n      keyword: '{{= $errorKeyword || _rule }}'\n      , dataPath: (dataPath || '') + {{= it.errorPath }}\n      , schemaPath: {{=it.util.toQuotedString($errSchemaPath)}}\n      , params: {{# def._errorParams[_rule] }}\n      {{? it.opts.messages !== false }}\n        , message: {{# def._errorMessages[_rule] }}\n      {{?}}\n      {{? it.opts.verbose }}\n        , schema: {{# def._errorSchemas[_rule] }}\n        , parentSchema: validate.schema{{=it.schemaPath}}\n        , data: {{=$data}}\n      {{?}}\n    }\n  {{??}}\n    {}\n  {{?}}\n#}}\n\n\n{{## def._addError:_rule:\n  if (vErrors === null) vErrors = [err];\n  else vErrors.push(err);\n  errors++;\n#}}\n\n\n{{## def.addError:_rule:\n  var err = {{# def._error:_rule }};\n  {{# def._addError:_rule }}\n#}}\n\n\n{{## def.error:_rule:\n  {{# def.beginDefOut}}\n    {{# def._error:_rule }}\n  {{# def.storeDefOut:__err }}\n\n  {{? !it.compositeRule && $breakOnError }}\n    {{ 'istanbul ignore if'; }}\n    {{? it.async }}\n      throw new ValidationError([{{=__err}}]);\n    {{??}}\n      validate.errors = [{{=__err}}];\n      return false;\n    {{?}}\n  {{??}}\n    var err = {{=__err}};\n    {{# def._addError:_rule }}\n  {{?}}\n#}}\n\n\n{{## def.extraError:_rule:\n  {{# def.addError:_rule}}\n  {{? !it.compositeRule && $breakOnError }}\n    {{ 'istanbul ignore if'; }}\n    {{? it.async }}\n      throw new ValidationError(vErrors);\n    {{??}}\n      validate.errors = vErrors;\n      return false;\n    {{?}}\n  {{?}}\n#}}\n\n\n{{## def.checkError:_rule:\n  if (!{{=$valid}}) {\n    {{# def.error:_rule }}\n  }\n#}}\n\n\n{{## def.resetErrors:\n  errors = {{=$errs}};\n  if (vErrors !== null) {\n    if ({{=$errs}}) vErrors.length = {{=$errs}};\n    else vErrors = null;\n  }\n#}}\n\n\n{{## def.concatSchema:{{?$isData}}' + {{=$schemaValue}} + '{{??}}{{=$schema}}{{?}}#}}\n{{## def.appendSchema:{{?$isData}}' + {{=$schemaValue}}{{??}}{{=$schemaValue}}'{{?}}#}}\n{{## def.concatSchemaEQ:{{?$isData}}' + {{=$schemaValue}} + '{{??}}{{=it.util.escapeQuotes($schema)}}{{?}}#}}\n\n{{## def._errorMessages = {\n  'false schema':  \"'boolean schema is false'\",\n  $ref:            \"'can\\\\\\'t resolve reference {{=it.util.escapeQuotes($schema)}}'\",\n  additionalItems: \"'should NOT have more than {{=$schema.length}} items'\",\n  additionalProperties: \"'{{? it.opts._errorDataPathProperty }}is an invalid additional property{{??}}should NOT have additional properties{{?}}'\",\n  anyOf:           \"'should match some schema in anyOf'\",\n  const:           \"'should be equal to constant'\",\n  contains:        \"'should contain a valid item'\",\n  dependencies:    \"'should have {{? $deps.length == 1 }}property {{= it.util.escapeQuotes($deps[0]) }}{{??}}properties {{= it.util.escapeQuotes($deps.join(\\\", \\\")) }}{{?}} when property {{= it.util.escapeQuotes($property) }} is present'\",\n  'enum':          \"'should be equal to one of the allowed values'\",\n  format:          \"'should match format \\\"{{#def.concatSchemaEQ}}\\\"'\",\n  'if':            \"'should match \\\"' + {{=$ifClause}} + '\\\" schema'\",\n  _limit:          \"'should be {{=$opStr}} {{#def.appendSchema}}\",\n  _exclusiveLimit: \"'{{=$exclusiveKeyword}} should be boolean'\",\n  _limitItems:     \"'should NOT have {{?$keyword=='maxItems'}}more{{??}}fewer{{?}} than {{#def.concatSchema}} items'\",\n  _limitLength:    \"'should NOT be {{?$keyword=='maxLength'}}longer{{??}}shorter{{?}} than {{#def.concatSchema}} characters'\",\n  _limitProperties:\"'should NOT have {{?$keyword=='maxProperties'}}more{{??}}fewer{{?}} than {{#def.concatSchema}} properties'\",\n  multipleOf:      \"'should be multiple of {{#def.appendSchema}}\",\n  not:             \"'should NOT be valid'\",\n  oneOf:           \"'should match exactly one schema in oneOf'\",\n  pattern:         \"'should match pattern \\\"{{#def.concatSchemaEQ}}\\\"'\",\n  propertyNames:   \"'property name \\\\'{{=$invalidName}}\\\\' is invalid'\",\n  required:        \"'{{? it.opts._errorDataPathProperty }}is a required property{{??}}should have required property \\\\'{{=$missingProperty}}\\\\'{{?}}'\",\n  type:            \"'should be {{? $typeIsArray }}{{= $typeSchema.join(\\\",\\\") }}{{??}}{{=$typeSchema}}{{?}}'\",\n  uniqueItems:     \"'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)'\",\n  custom:          \"'should pass \\\"{{=$rule.keyword}}\\\" keyword validation'\",\n  patternRequired: \"'should have property matching pattern \\\\'{{=$missingPattern}}\\\\''\",\n  switch:          \"'should pass \\\"switch\\\" keyword validation'\",\n  _formatLimit:    \"'should be {{=$opStr}} \\\"{{#def.concatSchemaEQ}}\\\"'\",\n  _formatExclusiveLimit: \"'{{=$exclusiveKeyword}} should be boolean'\"\n} #}}\n\n\n{{## def.schemaRefOrVal: {{?$isData}}validate.schema{{=$schemaPath}}{{??}}{{=$schema}}{{?}} #}}\n{{## def.schemaRefOrQS: {{?$isData}}validate.schema{{=$schemaPath}}{{??}}{{=it.util.toQuotedString($schema)}}{{?}} #}}\n\n{{## def._errorSchemas = {\n  'false schema':  \"false\",\n  $ref:            \"{{=it.util.toQuotedString($schema)}}\",\n  additionalItems: \"false\",\n  additionalProperties: \"false\",\n  anyOf:           \"validate.schema{{=$schemaPath}}\",\n  const:           \"validate.schema{{=$schemaPath}}\",\n  contains:        \"validate.schema{{=$schemaPath}}\",\n  dependencies:    \"validate.schema{{=$schemaPath}}\",\n  'enum':          \"validate.schema{{=$schemaPath}}\",\n  format:          \"{{#def.schemaRefOrQS}}\",\n  'if':            \"validate.schema{{=$schemaPath}}\",\n  _limit:          \"{{#def.schemaRefOrVal}}\",\n  _exclusiveLimit: \"validate.schema{{=$schemaPath}}\",\n  _limitItems:     \"{{#def.schemaRefOrVal}}\",\n  _limitLength:    \"{{#def.schemaRefOrVal}}\",\n  _limitProperties:\"{{#def.schemaRefOrVal}}\",\n  multipleOf:      \"{{#def.schemaRefOrVal}}\",\n  not:             \"validate.schema{{=$schemaPath}}\",\n  oneOf:           \"validate.schema{{=$schemaPath}}\",\n  pattern:         \"{{#def.schemaRefOrQS}}\",\n  propertyNames:   \"validate.schema{{=$schemaPath}}\",\n  required:        \"validate.schema{{=$schemaPath}}\",\n  type:            \"validate.schema{{=$schemaPath}}\",\n  uniqueItems:     \"{{#def.schemaRefOrVal}}\",\n  custom:          \"validate.schema{{=$schemaPath}}\",\n  patternRequired: \"validate.schema{{=$schemaPath}}\",\n  switch:          \"validate.schema{{=$schemaPath}}\",\n  _formatLimit:    \"{{#def.schemaRefOrQS}}\",\n  _formatExclusiveLimit: \"validate.schema{{=$schemaPath}}\"\n} #}}\n\n\n{{## def.schemaValueQS: {{?$isData}}{{=$schemaValue}}{{??}}{{=it.util.toQuotedString($schema)}}{{?}} #}}\n\n{{## def._errorParams = {\n  'false schema':  \"{}\",\n  $ref:            \"{ ref: '{{=it.util.escapeQuotes($schema)}}' }\",\n  additionalItems: \"{ limit: {{=$schema.length}} }\",\n  additionalProperties: \"{ additionalProperty: '{{=$additionalProperty}}' }\",\n  anyOf:           \"{}\",\n  const:           \"{ allowedValue: schema{{=$lvl}} }\",\n  contains:        \"{}\",\n  dependencies:    \"{ property: '{{= it.util.escapeQuotes($property) }}', missingProperty: '{{=$missingProperty}}', depsCount: {{=$deps.length}}, deps: '{{= it.util.escapeQuotes($deps.length==1 ? $deps[0] : $deps.join(\\\", \\\")) }}' }\",\n  'enum':          \"{ allowedValues: schema{{=$lvl}} }\",\n  format:          \"{ format: {{#def.schemaValueQS}} }\",\n  'if':            \"{ failingKeyword: {{=$ifClause}} }\",\n  _limit:          \"{ comparison: {{=$opExpr}}, limit: {{=$schemaValue}}, exclusive: {{=$exclusive}} }\",\n  _exclusiveLimit: \"{}\",\n  _limitItems:     \"{ limit: {{=$schemaValue}} }\",\n  _limitLength:    \"{ limit: {{=$schemaValue}} }\",\n  _limitProperties:\"{ limit: {{=$schemaValue}} }\",\n  multipleOf:      \"{ multipleOf: {{=$schemaValue}} }\",\n  not:             \"{}\",\n  oneOf:           \"{ passingSchemas: {{=$passingSchemas}} }\",\n  pattern:         \"{ pattern: {{#def.schemaValueQS}} }\",\n  propertyNames:   \"{ propertyName: '{{=$invalidName}}' }\",\n  required:        \"{ missingProperty: '{{=$missingProperty}}' }\",\n  type:            \"{ type: '{{? $typeIsArray }}{{= $typeSchema.join(\\\",\\\") }}{{??}}{{=$typeSchema}}{{?}}' }\",\n  uniqueItems:     \"{ i: i, j: j }\",\n  custom:          \"{ keyword: '{{=$rule.keyword}}' }\",\n  patternRequired: \"{ missingPattern: '{{=$missingPattern}}' }\",\n  switch:          \"{ caseIndex: {{=$caseIndex}} }\",\n  _formatLimit:    \"{ comparison: {{=$opExpr}}, limit: {{#def.schemaValueQS}}, exclusive: {{=$exclusive}} }\",\n  _formatExclusiveLimit: \"{}\"\n} #}}\n"
        }
    ]
}