{
    "sourceFile": "node_modules/ajv/lib/dot/properties.jst",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892015160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n{{# def.setupNextLevel }}\n\n\n{{## def.validateAdditional:\n  {{ /* additionalProperties is schema */\n    $it.schema = $aProperties;\n    $it.schemaPath = it.schemaPath + '.additionalProperties';\n    $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n    $it.errorPath = it.opts._errorDataPathProperty\n                    ? it.errorPath\n                    : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n    var $passData = $data + '[' + $key + ']';\n    $it.dataPathArr[$dataNxt] = $key;\n  }}\n\n  {{# def.generateSubschemaCode }}\n  {{# def.optimizeValidate }}\n#}}\n\n\n{{\n  var $key = 'key' + $lvl\n    , $idx = 'idx' + $lvl\n    , $dataNxt = $it.dataLevel = it.dataLevel + 1\n    , $nextData = 'data' + $dataNxt\n    , $dataProperties = 'dataProperties' + $lvl;\n\n  var $schemaKeys = Object.keys($schema || {}).filter(notProto)\n    , $pProperties = it.schema.patternProperties || {}\n    , $pPropertyKeys = Object.keys($pProperties).filter(notProto)\n    , $aProperties = it.schema.additionalProperties\n    , $someProperties = $schemaKeys.length || $pPropertyKeys.length\n    , $noAdditional = $aProperties === false\n    , $additionalIsSchema = typeof $aProperties == 'object'\n                              && Object.keys($aProperties).length\n    , $removeAdditional = it.opts.removeAdditional\n    , $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional\n    , $ownProperties = it.opts.ownProperties\n    , $currentBaseId = it.baseId;\n\n  var $required = it.schema.required;\n  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {\n    var $requiredHash = it.util.toHash($required);\n  }\n\n  function notProto(p) { return p !== '__proto__'; }\n}}\n\n\nvar {{=$errs}} = errors;\nvar {{=$nextValid}} = true;\n{{? $ownProperties }}\n  var {{=$dataProperties}} = undefined;\n{{?}}\n\n{{? $checkAdditional }}\n  {{# def.iterateProperties }}\n    {{? $someProperties }}\n      var isAdditional{{=$lvl}} = !(false\n        {{? $schemaKeys.length }}\n          {{? $schemaKeys.length > 8 }}\n            || validate.schema{{=$schemaPath}}.hasOwnProperty({{=$key}})\n          {{??}}\n            {{~ $schemaKeys:$propertyKey }}\n              || {{=$key}} == {{= it.util.toQuotedString($propertyKey) }}\n            {{~}}\n          {{?}}\n        {{?}}\n        {{? $pPropertyKeys.length }}\n          {{~ $pPropertyKeys:$pProperty:$i }}\n            || {{= it.usePattern($pProperty) }}.test({{=$key}})\n          {{~}}\n        {{?}}\n      );\n\n      if (isAdditional{{=$lvl}}) {\n    {{?}}\n    {{? $removeAdditional == 'all' }}\n      delete {{=$data}}[{{=$key}}];\n    {{??}}\n      {{\n        var $currentErrorPath = it.errorPath;\n        var $additionalProperty = '\\' + ' + $key + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n        }\n      }}\n      {{? $noAdditional }}\n        {{? $removeAdditional }}\n          delete {{=$data}}[{{=$key}}];\n        {{??}}\n          {{=$nextValid}} = false;\n          {{\n            var $currErrSchemaPath = $errSchemaPath;\n            $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          }}\n          {{# def.error:'additionalProperties' }}\n          {{ $errSchemaPath = $currErrSchemaPath; }}\n          {{? $breakOnError }} break; {{?}}\n        {{?}}\n      {{?? $additionalIsSchema }}\n        {{? $removeAdditional == 'failing' }}\n          var {{=$errs}} = errors;\n          {{# def.setCompositeRule }}\n\n          {{# def.validateAdditional }}\n\n          if (!{{=$nextValid}}) {\n            errors = {{=$errs}};\n            if (validate.errors !== null) {\n              if (errors) validate.errors.length = errors;\n              else validate.errors = null;\n            }\n            delete {{=$data}}[{{=$key}}];\n          }\n\n          {{# def.resetCompositeRule }}\n        {{??}}\n          {{# def.validateAdditional }}\n          {{? $breakOnError }} if (!{{=$nextValid}}) break; {{?}}\n        {{?}}\n      {{?}}\n      {{ it.errorPath = $currentErrorPath; }}\n    {{?}}\n    {{? $someProperties }}\n      }\n    {{?}}\n  }\n\n  {{# def.ifResultValid }}\n{{?}}\n\n{{ var $useDefaults = it.opts.useDefaults && !it.compositeRule; }}\n\n{{? $schemaKeys.length }}\n  {{~ $schemaKeys:$propertyKey }}\n    {{ var $sch = $schema[$propertyKey]; }}\n\n    {{? {{# def.nonEmptySchema:$sch}} }}\n      {{\n        var $prop = it.util.getProperty($propertyKey)\n          , $passData = $data + $prop\n          , $hasDefault = $useDefaults && $sch.default !== undefined;\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + $prop;\n        $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n        $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n        $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n      }}\n\n      {{# def.generateSubschemaCode }}\n\n      {{? {{# def.willOptimize }} }}\n        {{\n          $code = {{# def._optimizeValidate }};\n          var $useData = $passData;\n        }}\n      {{??}}\n        {{ var $useData = $nextData; }}\n        var {{=$nextData}} = {{=$passData}};\n      {{?}}\n\n      {{? $hasDefault }}\n        {{= $code }}\n      {{??}}\n        {{? $requiredHash && $requiredHash[$propertyKey] }}\n          if ({{# def.noPropertyInData }}) {\n            {{=$nextValid}} = false;\n            {{\n              var $currentErrorPath = it.errorPath\n                , $currErrSchemaPath = $errSchemaPath\n                , $missingProperty = it.util.escapeQuotes($propertyKey);\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              $errSchemaPath = it.errSchemaPath + '/required';\n            }}\n            {{# def.error:'required' }}\n            {{ $errSchemaPath = $currErrSchemaPath; }}\n            {{ it.errorPath = $currentErrorPath; }}\n          } else {\n        {{??}}\n          {{? $breakOnError }}\n            if ({{# def.noPropertyInData }}) {\n              {{=$nextValid}} = true;\n            } else {\n          {{??}}\n            if ({{=$useData}} !== undefined\n              {{? $ownProperties }}\n                && {{# def.isOwnProperty }}\n              {{?}}\n            ) {\n          {{?}}\n        {{?}}\n\n          {{= $code }}\n        }\n      {{?}}  {{ /* $hasDefault */ }}\n    {{?}} {{ /* def.nonEmptySchema */ }}\n\n    {{# def.ifResultValid }}\n  {{~}}\n{{?}}\n\n{{? $pPropertyKeys.length }}\n  {{~ $pPropertyKeys:$pProperty }}\n    {{ var $sch = $pProperties[$pProperty]; }}\n\n    {{? {{# def.nonEmptySchema:$sch}} }}\n      {{\n        $it.schema = $sch;\n        $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n        $it.errSchemaPath = it.errSchemaPath + '/patternProperties/'\n                                             + it.util.escapeFragment($pProperty);\n      }}\n\n      {{# def.iterateProperties }}\n        if ({{= it.usePattern($pProperty) }}.test({{=$key}})) {\n          {{\n            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n            var $passData = $data + '[' + $key + ']';\n            $it.dataPathArr[$dataNxt] = $key;\n          }}\n\n          {{# def.generateSubschemaCode }}\n          {{# def.optimizeValidate }}\n\n          {{? $breakOnError }} if (!{{=$nextValid}}) break; {{?}}\n        }\n        {{? $breakOnError }} else {{=$nextValid}} = true; {{?}}\n      }\n\n      {{# def.ifResultValid }}\n    {{?}} {{ /* def.nonEmptySchema */ }}\n  {{~}}\n{{?}}\n\n\n{{? $breakOnError }}\n  {{= $closingBraces }}\n  if ({{=$errs}} == errors) {\n{{?}}\n"
        }
    ]
}