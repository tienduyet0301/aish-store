{
    "sourceFile": "node_modules/ajv/lib/dot/items.jst",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892015005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n{{# def.setupNextLevel }}\n\n\n{{## def.validateItems:startFrom:\n  for (var {{=$idx}} = {{=startFrom}}; {{=$idx}} < {{=$data}}.length; {{=$idx}}++) {\n    {{\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + '[' + $idx + ']';\n      $it.dataPathArr[$dataNxt] = $idx;\n    }}\n\n    {{# def.generateSubschemaCode }}\n    {{# def.optimizeValidate }}\n\n    {{? $breakOnError }}\n      if (!{{=$nextValid}}) break;\n    {{?}}\n  }\n#}}\n\n{{\n  var $idx = 'i' + $lvl\n    , $dataNxt = $it.dataLevel = it.dataLevel + 1\n    , $nextData = 'data' + $dataNxt\n    , $currentBaseId = it.baseId;\n}}\n\nvar {{=$errs}} = errors;\nvar {{=$valid}};\n\n{{? Array.isArray($schema) }}\n  {{ /* 'items' is an array of schemas */}}\n  {{ var $additionalItems = it.schema.additionalItems; }}\n  {{? $additionalItems === false }}\n    {{=$valid}} = {{=$data}}.length <= {{= $schema.length }};\n    {{\n      var $currErrSchemaPath = $errSchemaPath;\n      $errSchemaPath = it.errSchemaPath + '/additionalItems';      \n    }}\n    {{# def.checkError:'additionalItems' }}\n    {{ $errSchemaPath = $currErrSchemaPath; }}\n    {{# def.elseIfValid}}\n  {{?}}\n\n  {{~ $schema:$sch:$i }}\n    {{? {{# def.nonEmptySchema:$sch }} }}\n      {{=$nextValid}} = true;\n\n      if ({{=$data}}.length > {{=$i}}) {\n        {{\n          var $passData = $data + '[' + $i + ']';\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + '[' + $i + ']';\n          $it.errSchemaPath = $errSchemaPath + '/' + $i;\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);\n          $it.dataPathArr[$dataNxt] = $i;\n        }}\n\n        {{# def.generateSubschemaCode }}\n        {{# def.optimizeValidate }}\n      }\n\n      {{# def.ifResultValid }}\n    {{?}}\n  {{~}}\n\n  {{? typeof $additionalItems == 'object' && {{# def.nonEmptySchema:$additionalItems }} }}\n    {{\n      $it.schema = $additionalItems;\n      $it.schemaPath = it.schemaPath + '.additionalItems';\n      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';\n    }}\n    {{=$nextValid}} = true;\n\n    if ({{=$data}}.length > {{= $schema.length }}) {\n      {{# def.validateItems: $schema.length }}\n    }\n\n    {{# def.ifResultValid }}\n  {{?}}\n\n{{?? {{# def.nonEmptySchema:$schema }} }}\n  {{ /* 'items' is a single schema */}}\n  {{\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n  }}\n  {{# def.validateItems: 0 }}\n{{?}}\n\n{{? $breakOnError }}\n  {{= $closingBraces }}\n  if ({{=$errs}} == errors) {\n{{?}}\n"
        }
    ]
}