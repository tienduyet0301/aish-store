{
    "sourceFile": "node_modules/ajv/lib/dot/format.jst",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892014952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n\n{{## def.skipFormat:\n  {{? $breakOnError }} if (true) { {{?}}\n  {{ return out; }}\n#}}\n\n{{? it.opts.format === false }}{{# def.skipFormat }}{{?}}\n\n\n{{# def.$data }}\n\n\n{{## def.$dataCheckFormat:\n  {{# def.$dataNotType:'string' }}\n  ({{? $unknownFormats != 'ignore' }}\n     ({{=$schemaValue}} && !{{=$format}}\n      {{? $allowUnknown }}\n        && self._opts.unknownFormats.indexOf({{=$schemaValue}}) == -1\n      {{?}}) ||\n   {{?}}\n   ({{=$format}} && {{=$formatType}} == '{{=$ruleType}}'\n                 && !(typeof {{=$format}} == 'function'\n                     ? {{? it.async}}\n                        (async{{=$lvl}} ? await {{=$format}}({{=$data}}) : {{=$format}}({{=$data}}))\n                       {{??}}\n                        {{=$format}}({{=$data}})\n                       {{?}}\n                     : {{=$format}}.test({{=$data}}))))\n#}}\n\n{{## def.checkFormat:\n  {{\n    var $formatRef = 'formats' + it.util.getProperty($schema);\n    if ($isObject) $formatRef += '.validate';\n  }}\n  {{? typeof $format == 'function' }}\n    {{=$formatRef}}({{=$data}})\n  {{??}}\n    {{=$formatRef}}.test({{=$data}})\n  {{?}}\n#}}\n\n\n{{\n  var $unknownFormats = it.opts.unknownFormats\n    , $allowUnknown = Array.isArray($unknownFormats);\n}}\n\n{{? $isData }}\n  {{\n    var $format = 'format' + $lvl\n      , $isObject = 'isObject' + $lvl\n      , $formatType = 'formatType' + $lvl;\n  }}\n  var {{=$format}} = formats[{{=$schemaValue}}];\n  var {{=$isObject}} = typeof {{=$format}} == 'object'\n                        && !({{=$format}} instanceof RegExp)\n                        && {{=$format}}.validate;\n  var {{=$formatType}} = {{=$isObject}} && {{=$format}}.type || 'string';\n  if ({{=$isObject}}) {\n    {{? it.async}}\n      var async{{=$lvl}} = {{=$format}}.async;\n    {{?}}\n    {{=$format}} = {{=$format}}.validate;\n  }\n  if ({{# def.$dataCheckFormat }}) {\n{{??}}\n  {{ var $format = it.formats[$schema]; }}\n  {{? !$format }}\n    {{? $unknownFormats == 'ignore' }}\n      {{ it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"'); }}\n      {{# def.skipFormat }}\n    {{?? $allowUnknown && $unknownFormats.indexOf($schema) >= 0 }}\n      {{# def.skipFormat }}\n    {{??}}\n      {{ throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"'); }}\n    {{?}}\n  {{?}}\n  {{\n    var $isObject = typeof $format == 'object'\n                    && !($format instanceof RegExp)\n                    && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n  }}\n  {{? $formatType != $ruleType }}\n    {{# def.skipFormat }}\n  {{?}}\n  {{? $async }}\n    {{\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n    }}\n    if (!(await {{=$formatRef}}({{=$data}}))) {\n  {{??}}\n    if (!{{# def.checkFormat }}) {\n  {{?}}\n{{?}}\n    {{# def.error:'format' }}\n  } {{? $breakOnError }} else { {{?}}\n"
        }
    ]
}