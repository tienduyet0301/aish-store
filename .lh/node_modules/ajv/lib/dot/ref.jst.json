{
    "sourceFile": "node_modules/ajv/lib/dot/ref.jst",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892015230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n\n{{## def._validateRef:_v:\n  {{? it.opts.passContext }}\n    {{=_v}}.call(this,\n  {{??}}\n    {{=_v}}(\n  {{?}}\n    {{=$data}}, {{# def.dataPath }}{{# def.passParentData }}, rootData)\n#}}\n\n{{ var $async, $refCode; }}\n{{? $schema == '#' || $schema == '#/' }}\n  {{\n    if (it.isRoot) {\n      $async = it.async;\n      $refCode = 'validate';\n    } else {\n      $async = it.root.schema.$async === true;\n      $refCode = 'root.refVal[0]';\n    }\n  }}\n{{??}}\n  {{ var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot); }}\n  {{? $refVal === undefined }}\n    {{ var $message = it.MissingRefError.message(it.baseId, $schema); }}\n    {{? it.opts.missingRefs == 'fail' }}\n      {{ it.logger.error($message); }}\n      {{# def.error:'$ref' }}\n      {{? $breakOnError }} if (false) { {{?}}\n    {{?? it.opts.missingRefs == 'ignore' }}\n      {{ it.logger.warn($message); }}\n      {{? $breakOnError }} if (true) { {{?}}\n    {{??}}\n      {{ throw new it.MissingRefError(it.baseId, $schema, $message); }}\n    {{?}}\n  {{?? $refVal.inline }}\n    {{# def.setupNextLevel }}\n    {{\n      $it.schema = $refVal.schema;\n      $it.schemaPath = '';\n      $it.errSchemaPath = $schema;\n    }}\n    {{ var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code); }}\n    {{= $code }}\n    {{? $breakOnError}}\n      if ({{=$nextValid}}) {\n    {{?}}\n  {{??}}\n    {{\n      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);\n      $refCode = $refVal.code;\n    }}\n  {{?}}\n{{?}}\n\n{{? $refCode }}\n  {{# def.beginDefOut}}\n    {{# def._validateRef:$refCode }}\n  {{# def.storeDefOut:__callValidate }}\n\n  {{? $async }}\n    {{ if (!it.async) throw new Error('async schema referenced by sync schema'); }}\n    {{? $breakOnError }} var {{=$valid}}; {{?}}\n    try {\n      await {{=__callValidate}};\n      {{? $breakOnError }} {{=$valid}} = true; {{?}}\n    } catch (e) {\n      if (!(e instanceof ValidationError)) throw e;\n      if (vErrors === null) vErrors = e.errors;\n      else vErrors = vErrors.concat(e.errors);\n      errors = vErrors.length;\n      {{? $breakOnError }} {{=$valid}} = false; {{?}}\n    }\n    {{? $breakOnError }} if ({{=$valid}}) { {{?}}\n  {{??}}\n    if (!{{=__callValidate}}) {\n      if (vErrors === null) vErrors = {{=$refCode}}.errors;\n      else vErrors = vErrors.concat({{=$refCode}}.errors);\n      errors = vErrors.length;\n    } {{? $breakOnError }} else { {{?}}\n  {{?}}\n{{?}}\n"
        }
    ]
}