{
    "sourceFile": "node_modules/ajv/lib/dot/custom.jst",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892014667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{{# def.definitions }}\n{{# def.errors }}\n{{# def.setupKeyword }}\n{{# def.$data }}\n\n{{\n  var $rule = this\n    , $definition = 'definition' + $lvl\n    , $rDef = $rule.definition\n    , $closingBraces = '';\n  var $validate = $rDef.validate;\n  var $compile, $inline, $macro, $ruleValidate, $validateCode;\n}}\n\n{{? $isData && $rDef.$data }}\n  {{\n    $validateCode = 'keywordValidate' + $lvl;\n    var $validateSchema = $rDef.validateSchema;\n  }}\n  var {{=$definition}} = RULES.custom['{{=$keyword}}'].definition;\n  var {{=$validateCode}} = {{=$definition}}.validate;\n{{??}}\n  {{\n    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);\n    if (!$ruleValidate) return;\n    $schemaValue = 'validate.schema' + $schemaPath;\n    $validateCode = $ruleValidate.code;\n    $compile = $rDef.compile;\n    $inline = $rDef.inline;\n    $macro = $rDef.macro;\n  }}\n{{?}}\n\n{{\n  var $ruleErrs = $validateCode + '.errors'\n    , $i = 'i' + $lvl\n    , $ruleErr = 'ruleErr' + $lvl\n    , $asyncKeyword = $rDef.async;\n\n  if ($asyncKeyword && !it.async)\n    throw new Error('async keyword in sync schema');\n}}\n\n\n{{? !($inline || $macro) }}{{=$ruleErrs}} = null;{{?}}\nvar {{=$errs}} = errors;\nvar {{=$valid}};\n\n{{## def.callRuleValidate:\n  {{=$validateCode}}.call(\n    {{? it.opts.passContext }}this{{??}}self{{?}}\n    {{? $compile || $rDef.schema === false }}\n      , {{=$data}}\n    {{??}}\n      , {{=$schemaValue}}\n      , {{=$data}}\n      , validate.schema{{=it.schemaPath}}\n    {{?}}\n    , {{# def.dataPath }}\n    {{# def.passParentData }}\n    , rootData\n  )\n#}}\n\n{{## def.extendErrors:_inline:\n  for (var {{=$i}}={{=$errs}}; {{=$i}}<errors; {{=$i}}++) {\n    var {{=$ruleErr}} = vErrors[{{=$i}}];\n    if ({{=$ruleErr}}.dataPath === undefined)\n      {{=$ruleErr}}.dataPath = (dataPath || '') + {{= it.errorPath }};\n    {{# _inline ? 'if (\\{\\{=$ruleErr\\}\\}.schemaPath === undefined) {' : '' }}\n      {{=$ruleErr}}.schemaPath = \"{{=$errSchemaPath}}\";\n    {{# _inline ? '}' : '' }}\n    {{? it.opts.verbose }}\n      {{=$ruleErr}}.schema = {{=$schemaValue}};\n      {{=$ruleErr}}.data = {{=$data}};\n    {{?}}\n  }\n#}}\n\n\n{{? $isData && $rDef.$data }}\n  {{ $closingBraces += '}'; }}\n  if ({{=$schemaValue}} === undefined) {\n    {{=$valid}} = true;\n  } else {\n  {{? $validateSchema }}\n    {{ $closingBraces += '}'; }}\n    {{=$valid}} = {{=$definition}}.validateSchema({{=$schemaValue}});\n    if ({{=$valid}}) {\n  {{?}}\n{{?}}\n\n{{? $inline }}\n  {{? $rDef.statements }}\n    {{= $ruleValidate.validate }}\n  {{??}}\n    {{=$valid}} = {{= $ruleValidate.validate }};\n  {{?}}\n{{?? $macro }}\n  {{# def.setupNextLevel }}\n  {{\n    $it.schema = $ruleValidate.validate;\n    $it.schemaPath = '';\n  }}\n  {{# def.setCompositeRule }}\n  {{ var $code = it.validate($it).replace(/validate\\.schema/g, $validateCode); }}\n  {{# def.resetCompositeRule }}\n  {{= $code }}\n{{??}}\n  {{# def.beginDefOut}}\n    {{# def.callRuleValidate }}\n  {{# def.storeDefOut:def_callRuleValidate }}\n\n  {{? $rDef.errors === false }}\n    {{=$valid}} = {{? $asyncKeyword }}await {{?}}{{= def_callRuleValidate }};\n  {{??}}\n    {{? $asyncKeyword }}\n      {{ $ruleErrs = 'customErrors' + $lvl; }}\n      var {{=$ruleErrs}} = null;\n      try {\n        {{=$valid}} = await {{= def_callRuleValidate }};\n      } catch (e) {\n        {{=$valid}} = false;\n        if (e instanceof ValidationError) {{=$ruleErrs}} = e.errors;\n        else throw e;\n      }\n    {{??}}\n      {{=$ruleErrs}} = null;\n      {{=$valid}} = {{= def_callRuleValidate }};\n    {{?}}\n  {{?}}\n{{?}}\n\n{{? $rDef.modifying }}\n  if ({{=$parentData}}) {{=$data}} = {{=$parentData}}[{{=$parentDataProperty}}];\n{{?}}\n\n{{= $closingBraces }}\n\n{{## def.notValidationResult:\n  {{? $rDef.valid === undefined }}\n    !{{? $macro }}{{=$nextValid}}{{??}}{{=$valid}}{{?}}\n  {{??}}\n    {{= !$rDef.valid }}\n  {{?}}\n#}}\n\n{{? $rDef.valid }}\n  {{? $breakOnError }} if (true) { {{?}}\n{{??}}\n  if ({{# def.notValidationResult }}) {\n    {{ $errorKeyword = $rule.keyword; }}\n    {{# def.beginDefOut}}\n      {{# def.error:'custom' }}\n    {{# def.storeDefOut:def_customError }}\n\n    {{? $inline }}\n      {{? $rDef.errors }}\n        {{? $rDef.errors != 'full' }}\n          {{# def.extendErrors:true }}\n        {{?}}\n      {{??}}\n        {{? $rDef.errors === false}}\n          {{= def_customError }}\n        {{??}}\n          if ({{=$errs}} == errors) {\n            {{= def_customError }}\n          } else {\n            {{# def.extendErrors:true }}\n          }\n        {{?}}\n      {{?}}\n    {{?? $macro }}\n      {{# def.extraError:'custom' }}\n    {{??}}\n      {{? $rDef.errors === false}}\n        {{= def_customError }}\n      {{??}}\n        if (Array.isArray({{=$ruleErrs}})) {\n          if (vErrors === null) vErrors = {{=$ruleErrs}};\n          else vErrors = vErrors.concat({{=$ruleErrs}});\n          errors = vErrors.length;\n          {{# def.extendErrors:false }}\n        } else {\n          {{= def_customError }}\n        }\n      {{?}}\n    {{?}}\n\n  } {{? $breakOnError }} else { {{?}}\n{{?}}\n"
        }
    ]
}