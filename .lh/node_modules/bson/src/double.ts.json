{
    "sourceFile": "node_modules/bson/src/double.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892062538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { BSONValue } from './bson_value';\nimport { BSONError } from './error';\nimport type { EJSONOptions } from './extended_json';\nimport { type InspectFn, defaultInspect } from './parser/utils';\n\n/** @public */\nexport interface DoubleExtended {\n  $numberDouble: string;\n}\n\n/**\n * A class representation of the BSON Double type.\n * @public\n * @category BSONType\n */\nexport class Double extends BSONValue {\n  get _bsontype(): 'Double' {\n    return 'Double';\n  }\n\n  value!: number;\n  /**\n   * Create a Double type\n   *\n   * @param value - the number we want to represent as a double.\n   */\n  constructor(value: number) {\n    super();\n    if ((value as unknown) instanceof Number) {\n      value = value.valueOf();\n    }\n\n    this.value = +value;\n  }\n\n  /**\n   * Attempt to create an double type from string.\n   *\n   * This method will throw a BSONError on any string input that is not representable as a IEEE-754 64-bit double.\n   * Notably, this method will also throw on the following string formats:\n   * - Strings in non-decimal and non-exponential formats (binary, hex, or octal digits)\n   * - Strings with characters other than numeric, floating point, or leading sign characters (Note: 'Infinity', '-Infinity', and 'NaN' input strings are still allowed)\n   * - Strings with leading and/or trailing whitespace\n   *\n   * Strings with leading zeros, however, are also allowed\n   *\n   * @param value - the string we want to represent as a double.\n   */\n  static fromString(value: string): Double {\n    const coercedValue = Number(value);\n\n    if (value === 'NaN') return new Double(NaN);\n    if (value === 'Infinity') return new Double(Infinity);\n    if (value === '-Infinity') return new Double(-Infinity);\n\n    if (!Number.isFinite(coercedValue)) {\n      throw new BSONError(`Input: ${value} is not representable as a Double`);\n    }\n    if (value.trim() !== value) {\n      throw new BSONError(`Input: '${value}' contains whitespace`);\n    }\n    if (value === '') {\n      throw new BSONError(`Input is an empty string`);\n    }\n    if (/[^-0-9.+eE]/.test(value)) {\n      throw new BSONError(`Input: '${value}' is not in decimal or exponential notation`);\n    }\n    return new Double(coercedValue);\n  }\n\n  /**\n   * Access the number value.\n   *\n   * @returns returns the wrapped double number.\n   */\n  valueOf(): number {\n    return this.value;\n  }\n\n  toJSON(): number {\n    return this.value;\n  }\n\n  toString(radix?: number): string {\n    return this.value.toString(radix);\n  }\n\n  /** @internal */\n  toExtendedJSON(options?: EJSONOptions): number | DoubleExtended {\n    if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\n      return this.value;\n    }\n\n    if (Object.is(Math.sign(this.value), -0)) {\n      // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user\n      // explicitly provided `-0` then we need to ensure the sign makes it into the output\n      return { $numberDouble: '-0.0' };\n    }\n\n    return {\n      $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n    };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: DoubleExtended, options?: EJSONOptions): number | Double {\n    const doubleValue = parseFloat(doc.$numberDouble);\n    return options && options.relaxed ? doubleValue : new Double(doubleValue);\n  }\n\n  inspect(depth?: number, options?: unknown, inspect?: InspectFn): string {\n    inspect ??= defaultInspect;\n    return `new Double(${inspect(this.value, options)})`;\n  }\n}\n"
        }
    ]
}