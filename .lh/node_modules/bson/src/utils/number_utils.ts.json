{
    "sourceFile": "node_modules/bson/src/utils/number_utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892064013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "const FLOAT = new Float64Array(1);\nconst FLOAT_BYTES = new Uint8Array(FLOAT.buffer, 0, 8);\n\nFLOAT[0] = -1;\n// Little endian [0, 0, 0, 0, 0, 0,  240, 191]\n// Big endian    [191, 240, 0, 0, 0, 0, 0, 0]\nconst isBigEndian = FLOAT_BYTES[7] === 0;\n\n/**\n * @experimental\n * @public\n *\n * A collection of functions that get or set various numeric types and bit widths from a Uint8Array.\n */\nexport type NumberUtils = {\n  /** Is true if the current system is big endian. */\n  isBigEndian: boolean;\n  /**\n   * Parses a signed int32 at offset. Throws a `RangeError` if value is negative.\n   */\n  getNonnegativeInt32LE: (source: Uint8Array, offset: number) => number;\n  getInt32LE: (source: Uint8Array, offset: number) => number;\n  getUint32LE: (source: Uint8Array, offset: number) => number;\n  getUint32BE: (source: Uint8Array, offset: number) => number;\n  getBigInt64LE: (source: Uint8Array, offset: number) => bigint;\n  getFloat64LE: (source: Uint8Array, offset: number) => number;\n  setInt32BE: (destination: Uint8Array, offset: number, value: number) => 4;\n  setInt32LE: (destination: Uint8Array, offset: number, value: number) => 4;\n  setBigInt64LE: (destination: Uint8Array, offset: number, value: bigint) => 8;\n  setFloat64LE: (destination: Uint8Array, offset: number, value: number) => 8;\n};\n\n/**\n * Number parsing and serializing utilities.\n *\n * @experimental\n * @public\n */\nexport const NumberUtils: NumberUtils = {\n  isBigEndian,\n\n  getNonnegativeInt32LE(source: Uint8Array, offset: number): number {\n    if (source[offset + 3] > 127) {\n      throw new RangeError(`Size cannot be negative at offset: ${offset}`);\n    }\n    return (\n      source[offset] |\n      (source[offset + 1] << 8) |\n      (source[offset + 2] << 16) |\n      (source[offset + 3] << 24)\n    );\n  },\n\n  /** Reads a little-endian 32-bit integer from source */\n  getInt32LE(source: Uint8Array, offset: number): number {\n    return (\n      source[offset] |\n      (source[offset + 1] << 8) |\n      (source[offset + 2] << 16) |\n      (source[offset + 3] << 24)\n    );\n  },\n\n  /** Reads a little-endian 32-bit unsigned integer from source */\n  getUint32LE(source: Uint8Array, offset: number): number {\n    return (\n      source[offset] +\n      source[offset + 1] * 256 +\n      source[offset + 2] * 65536 +\n      source[offset + 3] * 16777216\n    );\n  },\n\n  /** Reads a big-endian 32-bit integer from source */\n  getUint32BE(source: Uint8Array, offset: number): number {\n    return (\n      source[offset + 3] +\n      source[offset + 2] * 256 +\n      source[offset + 1] * 65536 +\n      source[offset] * 16777216\n    );\n  },\n\n  /** Reads a little-endian 64-bit integer from source */\n  getBigInt64LE(source: Uint8Array, offset: number): bigint {\n    // eslint-disable-next-line no-restricted-globals\n    const hi = BigInt(\n      source[offset + 4] +\n        source[offset + 5] * 256 +\n        source[offset + 6] * 65536 +\n        (source[offset + 7] << 24)\n    ); // Overflow\n\n    // eslint-disable-next-line no-restricted-globals\n    const lo = BigInt(\n      source[offset] +\n        source[offset + 1] * 256 +\n        source[offset + 2] * 65536 +\n        source[offset + 3] * 16777216\n    );\n    // eslint-disable-next-line no-restricted-globals\n    return (hi << BigInt(32)) + lo;\n  },\n\n  /** Reads a little-endian 64-bit float from source */\n  getFloat64LE: isBigEndian\n    ? (source: Uint8Array, offset: number) => {\n        FLOAT_BYTES[7] = source[offset];\n        FLOAT_BYTES[6] = source[offset + 1];\n        FLOAT_BYTES[5] = source[offset + 2];\n        FLOAT_BYTES[4] = source[offset + 3];\n        FLOAT_BYTES[3] = source[offset + 4];\n        FLOAT_BYTES[2] = source[offset + 5];\n        FLOAT_BYTES[1] = source[offset + 6];\n        FLOAT_BYTES[0] = source[offset + 7];\n        return FLOAT[0];\n      }\n    : (source: Uint8Array, offset: number) => {\n        FLOAT_BYTES[0] = source[offset];\n        FLOAT_BYTES[1] = source[offset + 1];\n        FLOAT_BYTES[2] = source[offset + 2];\n        FLOAT_BYTES[3] = source[offset + 3];\n        FLOAT_BYTES[4] = source[offset + 4];\n        FLOAT_BYTES[5] = source[offset + 5];\n        FLOAT_BYTES[6] = source[offset + 6];\n        FLOAT_BYTES[7] = source[offset + 7];\n        return FLOAT[0];\n      },\n\n  /** Writes a big-endian 32-bit integer to destination, can be signed or unsigned */\n  setInt32BE(destination: Uint8Array, offset: number, value: number): 4 {\n    destination[offset + 3] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset] = value;\n    return 4;\n  },\n\n  /** Writes a little-endian 32-bit integer to destination, can be signed or unsigned */\n  setInt32LE(destination: Uint8Array, offset: number, value: number): 4 {\n    destination[offset] = value;\n    value >>>= 8;\n    destination[offset + 1] = value;\n    value >>>= 8;\n    destination[offset + 2] = value;\n    value >>>= 8;\n    destination[offset + 3] = value;\n    return 4;\n  },\n\n  /** Write a little-endian 64-bit integer to source */\n  setBigInt64LE(destination: Uint8Array, offset: number, value: bigint): 8 {\n    /* eslint-disable-next-line no-restricted-globals -- This is allowed here as useBigInt64=true */\n    const mask32bits = BigInt(0xffff_ffff);\n\n    /** lower 32 bits */\n    let lo = Number(value & mask32bits);\n    destination[offset] = lo;\n    lo >>= 8;\n    destination[offset + 1] = lo;\n    lo >>= 8;\n    destination[offset + 2] = lo;\n    lo >>= 8;\n    destination[offset + 3] = lo;\n\n    /*\n       eslint-disable-next-line no-restricted-globals\n       -- This is allowed here as useBigInt64=true\n\n       upper 32 bits\n     */\n    let hi = Number((value >> BigInt(32)) & mask32bits);\n    destination[offset + 4] = hi;\n    hi >>= 8;\n    destination[offset + 5] = hi;\n    hi >>= 8;\n    destination[offset + 6] = hi;\n    hi >>= 8;\n    destination[offset + 7] = hi;\n\n    return 8;\n  },\n\n  /** Writes a little-endian 64-bit float to destination */\n  setFloat64LE: isBigEndian\n    ? (destination: Uint8Array, offset: number, value: number) => {\n        FLOAT[0] = value;\n        destination[offset] = FLOAT_BYTES[7];\n        destination[offset + 1] = FLOAT_BYTES[6];\n        destination[offset + 2] = FLOAT_BYTES[5];\n        destination[offset + 3] = FLOAT_BYTES[4];\n        destination[offset + 4] = FLOAT_BYTES[3];\n        destination[offset + 5] = FLOAT_BYTES[2];\n        destination[offset + 6] = FLOAT_BYTES[1];\n        destination[offset + 7] = FLOAT_BYTES[0];\n        return 8;\n      }\n    : (destination: Uint8Array, offset: number, value: number) => {\n        FLOAT[0] = value;\n        destination[offset] = FLOAT_BYTES[0];\n        destination[offset + 1] = FLOAT_BYTES[1];\n        destination[offset + 2] = FLOAT_BYTES[2];\n        destination[offset + 3] = FLOAT_BYTES[3];\n        destination[offset + 4] = FLOAT_BYTES[4];\n        destination[offset + 5] = FLOAT_BYTES[5];\n        destination[offset + 6] = FLOAT_BYTES[6];\n        destination[offset + 7] = FLOAT_BYTES[7];\n        return 8;\n      }\n};\n"
        }
    ]
}