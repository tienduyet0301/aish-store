{
    "sourceFile": "node_modules/bson/src/parser/on_demand/parse_to_elements.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892063236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { BSONOffsetError } from '../../error';\nimport { NumberUtils } from '../../utils/number_utils';\n\n/**\n * @internal\n *\n * @remarks\n * - This enum is const so the code we produce will inline the numbers\n * - `minKey` is set to 255 so unsigned comparisons succeed\n * - Modify with caution, double check the bundle contains literals\n */\nconst enum BSONElementType {\n  double = 1,\n  string = 2,\n  object = 3,\n  array = 4,\n  binData = 5,\n  undefined = 6,\n  objectId = 7,\n  bool = 8,\n  date = 9,\n  null = 10,\n  regex = 11,\n  dbPointer = 12,\n  javascript = 13,\n  symbol = 14,\n  javascriptWithScope = 15,\n  int = 16,\n  timestamp = 17,\n  long = 18,\n  decimal = 19,\n  minKey = 255,\n  maxKey = 127\n}\n\n/**\n * @public\n * @experimental\n */\nexport type BSONElement = [\n  type: number,\n  nameOffset: number,\n  nameLength: number,\n  offset: number,\n  length: number\n];\n\nfunction getSize(source: Uint8Array, offset: number) {\n  try {\n    return NumberUtils.getNonnegativeInt32LE(source, offset);\n  } catch (cause) {\n    throw new BSONOffsetError('BSON size cannot be negative', offset, { cause });\n  }\n}\n\n/**\n * Searches for null terminator of a BSON element's value (Never the document null terminator)\n * **Does not** bounds check since this should **ONLY** be used within parseToElements which has asserted that `bytes` ends with a `0x00`.\n * So this will at most iterate to the document's terminator and error if that is the offset reached.\n */\nfunction findNull(bytes: Uint8Array, offset: number): number {\n  let nullTerminatorOffset = offset;\n\n  for (; bytes[nullTerminatorOffset] !== 0x00; nullTerminatorOffset++);\n\n  if (nullTerminatorOffset === bytes.length - 1) {\n    // We reached the null terminator of the document, not a value's\n    throw new BSONOffsetError('Null terminator not found', offset);\n  }\n\n  return nullTerminatorOffset;\n}\n\n/**\n * @public\n * @experimental\n */\nexport function parseToElements(\n  bytes: Uint8Array,\n  startOffset: number | null = 0\n): Iterable<BSONElement> {\n  startOffset ??= 0;\n\n  if (bytes.length < 5) {\n    throw new BSONOffsetError(\n      `Input must be at least 5 bytes, got ${bytes.length} bytes`,\n      startOffset\n    );\n  }\n\n  const documentSize = getSize(bytes, startOffset);\n\n  if (documentSize > bytes.length - startOffset) {\n    throw new BSONOffsetError(\n      `Parsed documentSize (${documentSize} bytes) does not match input length (${bytes.length} bytes)`,\n      startOffset\n    );\n  }\n\n  if (bytes[startOffset + documentSize - 1] !== 0x00) {\n    throw new BSONOffsetError('BSON documents must end in 0x00', startOffset + documentSize);\n  }\n\n  const elements: BSONElement[] = [];\n  let offset = startOffset + 4;\n\n  while (offset <= documentSize + startOffset) {\n    const type = bytes[offset];\n    offset += 1;\n\n    if (type === 0) {\n      if (offset - startOffset !== documentSize) {\n        throw new BSONOffsetError(`Invalid 0x00 type byte`, offset);\n      }\n      break;\n    }\n\n    const nameOffset = offset;\n    const nameLength = findNull(bytes, offset) - nameOffset;\n    offset += nameLength + 1;\n\n    let length: number;\n\n    if (\n      type === BSONElementType.double ||\n      type === BSONElementType.long ||\n      type === BSONElementType.date ||\n      type === BSONElementType.timestamp\n    ) {\n      length = 8;\n    } else if (type === BSONElementType.int) {\n      length = 4;\n    } else if (type === BSONElementType.objectId) {\n      length = 12;\n    } else if (type === BSONElementType.decimal) {\n      length = 16;\n    } else if (type === BSONElementType.bool) {\n      length = 1;\n    } else if (\n      type === BSONElementType.null ||\n      type === BSONElementType.undefined ||\n      type === BSONElementType.maxKey ||\n      type === BSONElementType.minKey\n    ) {\n      length = 0;\n    }\n    // Needs a size calculation\n    else if (type === BSONElementType.regex) {\n      length = findNull(bytes, findNull(bytes, offset) + 1) + 1 - offset;\n    } else if (\n      type === BSONElementType.object ||\n      type === BSONElementType.array ||\n      type === BSONElementType.javascriptWithScope\n    ) {\n      length = getSize(bytes, offset);\n    } else if (\n      type === BSONElementType.string ||\n      type === BSONElementType.binData ||\n      type === BSONElementType.dbPointer ||\n      type === BSONElementType.javascript ||\n      type === BSONElementType.symbol\n    ) {\n      length = getSize(bytes, offset) + 4;\n      if (type === BSONElementType.binData) {\n        // binary subtype\n        length += 1;\n      }\n      if (type === BSONElementType.dbPointer) {\n        // dbPointer's objectId\n        length += 12;\n      }\n    } else {\n      throw new BSONOffsetError(\n        `Invalid 0x${type.toString(16).padStart(2, '0')} type byte`,\n        offset\n      );\n    }\n\n    if (length > documentSize) {\n      throw new BSONOffsetError('value reports length larger than document', offset);\n    }\n\n    elements.push([type, nameOffset, nameLength, offset, length]);\n    offset += length;\n  }\n\n  return elements;\n}\n"
        }
    ]
}