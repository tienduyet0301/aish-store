{
    "sourceFile": "node_modules/cloudinary/lib/utils/ensureOption.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892105080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Returns an ensureOption function that relies on the provided `defaultOptions` argument\n * for default values.\n * @private\n * @param {object} defaultOptions\n * @return {function(*, *, *=): *}\n */\nfunction defaults(defaultOptions) {\n  return function ensureOption(options, name, defaultValue) {\n    let value;\n\n    if (typeof options[name] !== 'undefined') {\n      value = options[name];\n    } else if (typeof defaultOptions[name] !== 'undefined') {\n      value = defaultOptions[name];\n    } else if (typeof defaultValue !== 'undefined') {\n      value = defaultValue;\n    } else {\n      throw new Error(`Must supply ${name}`);\n    }\n\n    return value;\n  };\n}\n\n/**\n * Get the option `name` from options, the global config, or the default value.\n * If the value is not defined and no default value was provided,\n * the method will throw an error.\n * @private\n * @param {object} options\n * @param {string} name\n * @param {*} [defaultValue]\n * @return {*} the value associated with the provided `name` or the default.\n *\n */\nmodule.exports = defaults({});\n\nmodule.exports.defaults = defaults;\n"
        }
    ]
}