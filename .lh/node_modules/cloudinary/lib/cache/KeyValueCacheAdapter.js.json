{
    "sourceFile": "node_modules/cloudinary/lib/cache/KeyValueCacheAdapter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892103522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "const crypto = require('crypto');\nconst CacheAdapter = require('../cache').CacheAdapter;\n\n/**\n *\n */\nclass KeyValueCacheAdapter extends CacheAdapter {\n  constructor(storage) {\n    super();\n    this.storage = storage;\n  }\n\n  /** @inheritDoc */\n  get(publicId, type, resourceType, transformation, format) {\n    let key = KeyValueCacheAdapter.generateCacheKey(publicId, type, resourceType, transformation, format);\n    return KeyValueCacheAdapter.extractData(this.storage.get(key));\n  }\n\n  /** @inheritDoc */\n  set(publicId, type, resourceType, transformation, format, value) {\n    let key = KeyValueCacheAdapter.generateCacheKey(publicId, type, resourceType, transformation, format);\n    this.storage.set(\n      key,\n      KeyValueCacheAdapter.prepareData(\n        publicId,\n        type,\n        resourceType,\n        transformation,\n        format,\n        value\n      )\n    );\n  }\n\n  /** @inheritDoc */\n  flushAll() {\n    this.storage.clear();\n  }\n\n  /** @inheritDoc */\n  delete(publicId, type, resourceType, transformation, format) {\n    let key = KeyValueCacheAdapter.generateCacheKey(publicId, type, resourceType, transformation, format);\n    return this.storage.delete(key);\n  }\n\n  static generateCacheKey(publicId, type, resourceType, transformation, format) {\n    type = type || \"upload\";\n    resourceType = resourceType || \"image\";\n    let sha1 = crypto.createHash('sha1');\n    return sha1.update([publicId, type, resourceType, transformation, format].filter(i => i).join('/')).digest('hex');\n  }\n\n  static prepareData(publicId, type, resourceType, transformation, format, data) {\n    return { publicId, type, resourceType, transformation, format, breakpoints: data };\n  }\n\n  static extractData(data) {\n    return data ? data.breakpoints : null;\n  }\n}\n\nmodule.exports = KeyValueCacheAdapter;\n"
        }
    ]
}