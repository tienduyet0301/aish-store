{
    "sourceFile": "node_modules/cloudinary/lib/cache/FileKeyValueStorage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892103476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "const fs = require('fs');\nconst path = require('path');\nconst rimraf = require('../utils/rimraf');\n\nclass FileKeyValueStorage {\n  constructor({ baseFolder } = {}) {\n    this.init(baseFolder);\n  }\n\n  init(baseFolder) {\n    if (baseFolder) {\n      try {\n        fs.accessSync(baseFolder);\n        this.baseFolder = baseFolder;\n      } catch (err) {\n        throw err;\n      }\n    } else {\n      if (!fs.existsSync('test_cache')) {\n        fs.mkdirSync('test_cache');\n      }\n      this.baseFolder = fs.mkdtempSync('test_cache/cloudinary_cache_');\n      console.info(\"Created temporary cache folder at \" + this.baseFolder);\n    }\n  }\n\n  get(key) {\n    let value = fs.readFileSync(this.getFilename(key));\n    try {\n      return JSON.parse(value);\n    } catch (e) {\n      throw \"Cannot parse cache value\";\n    }\n  }\n\n  set(key, value) {\n    fs.writeFileSync(this.getFilename(key), JSON.stringify(value));\n  }\n\n  clear() {\n    let files = fs.readdirSync(this.baseFolder);\n    files.forEach(file => fs.unlinkSync(path.join(this.baseFolder, file)));\n  }\n\n  deleteBaseFolder() {\n    rimraf(this.baseFolder);\n  }\n\n  getFilename(key) {\n    return path.format({ name: key, base: key, ext: '.json', dir: this.baseFolder });\n  }\n}\n\nmodule.exports = FileKeyValueStorage;\n"
        }
    ]
}