{
    "sourceFile": "node_modules/cloudinary/lib/auth_token.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892103428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * Authorization Token\n * @module auth_token\n */\n\nconst crypto = require('crypto');\nconst smart_escape = require('./utils/encoding/smart_escape');\n\nconst unsafe = /([ \"#%&'/:;<=>?@[\\]^`{|}~]+)/g;\n\nfunction digest(message, key) {\n  return crypto.createHmac(\"sha256\", Buffer.from(key, \"hex\")).update(message).digest('hex');\n}\n\n/**\n * Escape url using lowercase hex code\n * @param {string} url a url string\n * @return {string} escaped url\n */\nfunction escapeToLower(url) {\n  const safeUrl = smart_escape(url, unsafe);\n  return safeUrl.replace(/%../g, function (match) {\n    return match.toLowerCase();\n  });\n}\n\n/**\n * Auth token options\n * @typedef {object} authTokenOptions\n * @property {string} [token_name=\"__cld_token__\"] The name of the token.\n * @property {string} key The secret key required to sign the token.\n * @property {string} ip The IP address of the client.\n * @property {number} start_time=now The start time of the token in seconds from epoch.\n * @property {string} expiration The expiration time of the token in seconds from epoch.\n * @property {string} duration The duration of the token (from start_time).\n * @property {string|Array<string>} acl The ACL(s) for the token.\n * @property {string} url The URL to authentication in case of a URL token.\n *\n */\n\n/**\n * Generate an authorization token\n * @param {authTokenOptions} options\n * @returns {string} the authorization token\n */\nmodule.exports = function (options) {\n  const tokenName = options.token_name ? options.token_name : \"__cld_token__\";\n  const tokenSeparator = \"~\";\n  if (options.expiration == null) {\n    if (options.duration != null) {\n      let start = options.start_time != null ? options.start_time : Math.round(Date.now() / 1000);\n      options.expiration = start + options.duration;\n    } else {\n      throw new Error(\"Must provide either expiration or duration\");\n    }\n  }\n  let tokenParts = [];\n  if (options.ip != null) {\n    tokenParts.push(`ip=${options.ip}`);\n  }\n  if (options.start_time != null) {\n    tokenParts.push(`st=${options.start_time}`);\n  }\n  tokenParts.push(`exp=${options.expiration}`);\n  if (options.acl != null) {\n    if (Array.isArray(options.acl) === true) {\n      options.acl = options.acl.join(\"!\");\n    }\n    tokenParts.push(`acl=${escapeToLower(options.acl)}`);\n  }\n  let toSign = [...tokenParts];\n  if (options.url != null && options.acl == null) {\n    let url = escapeToLower(options.url);\n    toSign.push(`url=${url}`);\n  }\n  let auth = digest(toSign.join(tokenSeparator), options.key);\n  tokenParts.push(`hmac=${auth}`);\n\n  if (!options.url && !options.acl) {\n    throw 'authToken must contain either an acl or a url property'\n  }\n\n  return `${tokenName}=${tokenParts.join(tokenSeparator)}`;\n};\n"
        }
    ]
}