{
    "sourceFile": "node_modules/get-tsconfig/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892317032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "<p align=\"center\">\n\t<img width=\"160\" src=\".github/logo.webp\">\n</p>\n<h1 align=\"center\">\n\t<sup>get-tsconfig</sup>\n\t<br>\n\t<a href=\"https://npm.im/get-tsconfig\"><img src=\"https://badgen.net/npm/v/get-tsconfig\"></a> <a href=\"https://npm.im/get-tsconfig\"><img src=\"https://badgen.net/npm/dm/get-tsconfig\"></a>\n</h1>\n\nFind and parse `tsconfig.json` files.\n\n### Features\n- Zero dependency (not even TypeScript)\n- Tested against TypeScript for correctness\n- Supports comments & dangling commas in `tsconfig.json`\n- Resolves [`extends`](https://www.typescriptlang.org/tsconfig/#extends)\n- Fully typed `tsconfig.json`\n- Validates and throws parsing errors\n- Tiny! `7 kB` Minified + Gzipped\n\n<br>\n\n<p align=\"center\">\n\t<a href=\"https://github.com/sponsors/privatenumber/sponsorships?tier_id=398771\"><img width=\"412\" src=\"https://raw.githubusercontent.com/privatenumber/sponsors/master/banners/assets/donate.webp\"></a>\n\t<a href=\"https://github.com/sponsors/privatenumber/sponsorships?tier_id=397608\"><img width=\"412\" src=\"https://raw.githubusercontent.com/privatenumber/sponsors/master/banners/assets/sponsor.webp\"></a>\n</p>\n<p align=\"center\"><sup><i>Already a sponsor?</i> Join the discussion in the <a href=\"https://github.com/pvtnbr/get-tsconfig\">Development repo</a>!</sup></p>\n\n## Install\n\n```bash\nnpm install get-tsconfig\n```\n\n## Why?\nFor TypeScript related tooling to correctly parse `tsconfig.json` file without depending on TypeScript.\n\n## API\n\n### getTsconfig(searchPath?, configName?, cache?)\n\nSearches for a tsconfig file (defaults to `tsconfig.json`) in the `searchPath` and parses it. (If you already know the tsconfig path, use [`parseTsconfig`](#parsetsconfigtsconfigpath-cache) instead). Returns `null` if a config file cannot be found, or an object containing the path and parsed TSConfig object if found.\n\nReturns:\n\n```ts\ntype TsconfigResult = {\n\n    /**\n     * The path to the tsconfig.json file\n     */\n    path: string\n\n    /**\n     * The resolved tsconfig.json file\n     */\n    config: TsConfigJsonResolved\n}\n```\n\n#### searchPath\nType: `string`\n\nDefault: `process.cwd()`\n\nAccepts a path to a file or directory to search up for a `tsconfig.json` file.\n\n#### configName\nType: `string`\n\nDefault: `tsconfig.json`\n\nThe file name of the TypeScript config file.\n\n#### cache\nType: `Map<string, any>`\n\nDefault: `new Map()`\n\nOptional cache for fs operations.\n\n#### Example\n\n```ts\nimport { getTsconfig } from 'get-tsconfig'\n\n// Searches for tsconfig.json starting in the current directory\nconsole.log(getTsconfig())\n\n// Find tsconfig.json from a TypeScript file path\nconsole.log(getTsconfig('./path/to/index.ts'))\n\n// Find tsconfig.json from a directory file path\nconsole.log(getTsconfig('./path/to/directory'))\n\n// Explicitly pass in tsconfig.json path\nconsole.log(getTsconfig('./path/to/tsconfig.json'))\n\n// Search for jsconfig.json - https://code.visualstudio.com/docs/languages/jsconfig\nconsole.log(getTsconfig('.', 'jsconfig.json'))\n```\n\n---\n\n### parseTsconfig(tsconfigPath, cache?)\n\nParse the tsconfig file provided. Used internally by `getTsconfig`. Returns the parsed tsconfig as `TsConfigJsonResolved`.\n\n#### tsconfigPath\nType: `string`\n\nRequired path to the tsconfig file.\n\n#### cache\nType: `Map<string, any>`\n\nDefault: `new Map()`\n\nOptional cache for fs operations.\n\n#### Example\n\n```ts\nimport { parseTsconfig } from 'get-tsconfig'\n\n// Must pass in a path to an existing tsconfig.json file\nconsole.log(parseTsconfig('./path/to/tsconfig.custom.json'))\n```\n\n---\n\n### createFileMatcher(tsconfig: TsconfigResult, caseSensitivePaths?: boolean)\n\nGiven a `tsconfig.json` file, it returns a file-matcher function that determines whether it should apply to a file path.\n\n```ts\ntype FileMatcher = (filePath: string) => TsconfigResult['config'] | undefined\n```\n\n#### tsconfig\nType: `TsconfigResult`\n\nPass in the return value from `getTsconfig`, or a `TsconfigResult` object.\n\n#### caseSensitivePaths\nType: `boolean`\n\nBy default, it uses [`is-fs-case-sensitive`](https://github.com/privatenumber/is-fs-case-sensitive) to detect whether the file-system is case-sensitive.\n\nPass in `true` to make it case-sensitive.\n\n#### Example\n\nFor example, if it's called with a `tsconfig.json` file that has `include`/`exclude`/`files` defined, the file-matcher will return the config for files that match `include`/`files`, and return `undefined` for files that don't match or match `exclude`.\n\n```ts\nconst tsconfig = getTsconfig()\nconst fileMatcher = tsconfig && createFileMatcher(tsconfig)\n\n/*\n * Returns tsconfig.json if it matches the file,\n * undefined if not\n */\nconst configForFile = fileMatcher?.('/path/to/file.ts')\nconst distCode = compileTypescript({\n    code: sourceCode,\n    tsconfig: configForFile\n})\n```\n\n---\n\n### createPathsMatcher(tsconfig: TsconfigResult)\n\nGiven a tsconfig with [`compilerOptions.paths`](https://www.typescriptlang.org/tsconfig#paths) defined, it returns a matcher function.\n\nThe matcher function accepts an [import specifier (the path to resolve)](https://nodejs.org/api/esm.html#terminology), checks it against `compilerOptions.paths`, and returns an array of possible paths to check:\n```ts\nfunction pathsMatcher(specifier: string): string[]\n```\n\nThis function only returns possible paths and doesn't actually do any resolution. This helps increase compatibility wtih file/build systems which usually have their own resolvers.\n\n#### Example\n\n```ts\nimport { getTsconfig, createPathsMatcher } from 'get-tsconfig'\n\nconst tsconfig = getTsconfig()\nconst pathsMatcher = createPathsMatcher(tsconfig)\n\nconst exampleResolver = (request: string) => {\n    if (pathsMatcher) {\n        const tryPaths = pathsMatcher(request)\n\n        // Check if paths in `tryPaths` exist\n    }\n}\n```\n\n## FAQ\n\n### How can I use TypeScript to parse `tsconfig.json`?\nThis package is a re-implementation of TypeScript's `tsconfig.json` parser.\n\nHowever, if you already have TypeScript as a dependency, you can simply use it's API:\n\n```ts\nimport {\n    sys as tsSys,\n    findConfigFile,\n    readConfigFile,\n    parseJsonConfigFileContent\n} from 'typescript'\n\n// Find tsconfig.json file\nconst tsconfigPath = findConfigFile(process.cwd(), tsSys.fileExists, 'tsconfig.json')\n\n// Read tsconfig.json file\nconst tsconfigFile = readConfigFile(tsconfigPath, tsSys.readFile)\n\n// Resolve extends\nconst parsedTsconfig = parseJsonConfigFileContent(\n    tsconfigFile.config,\n    tsSys,\n    path.dirname(tsconfigPath)\n)\n```\n\n## Sponsors\n<p align=\"center\">\n\t<a href=\"https://github.com/sponsors/privatenumber\">\n\t\t<img src=\"https://cdn.jsdelivr.net/gh/privatenumber/sponsors/sponsorkit/sponsors.svg\">\n\t</a>\n</p>\n"
        }
    ]
}