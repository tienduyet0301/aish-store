{
    "sourceFile": "node_modules/get-tsconfig/dist/index.d.cts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892316762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare global {\n\t// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.\n\tinterface SymbolConstructor {\n\t\treadonly observable: symbol;\n\t}\n}\n\n/**\nReturns a boolean for whether the two given types are equal.\n\n@link https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650\n@link https://stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript/68963796#68963796\n\nUse-cases:\n- If you want to make a conditional branch based on the result of a comparison of two types.\n\n@example\n```\nimport type {IsEqual} from 'type-fest';\n\n// This type returns a boolean for whether the given array includes the given item.\n// `IsEqual` is used to compare the given array at position 0 and the given item and then return true if they are equal.\ntype Includes<Value extends readonly any[], Item> =\n\tValue extends readonly [Value[0], ...infer rest]\n\t\t? IsEqual<Value[0], Item> extends true\n\t\t\t? true\n\t\t\t: Includes<rest, Item>\n\t\t: false;\n```\n\n@category Type Guard\n@category Utilities\n*/\ntype IsEqual<A, B> =\n\t(<G>() => G extends A & G | G ? 1 : 2) extends\n\t(<G>() => G extends B & G | G ? 1 : 2)\n\t\t? true\n\t\t: false;\n\n/**\nFilter out keys from an object.\n\nReturns `never` if `Exclude` is strictly equal to `Key`.\nReturns `never` if `Key` extends `Exclude`.\nReturns `Key` otherwise.\n\n@example\n```\ntype Filtered = Filter<'foo', 'foo'>;\n//=> never\n```\n\n@example\n```\ntype Filtered = Filter<'bar', string>;\n//=> never\n```\n\n@example\n```\ntype Filtered = Filter<'bar', 'foo'>;\n//=> 'bar'\n```\n\n@see {Except}\n*/\ntype Filter<KeyType, ExcludeType> = IsEqual<KeyType, ExcludeType> extends true ? never : (KeyType extends ExcludeType ? never : KeyType);\n\ntype ExceptOptions = {\n\t/**\n\tDisallow assigning non-specified properties.\n\n\tNote that any omitted properties in the resulting type will be present in autocomplete as `undefined`.\n\n\t@default false\n\t*/\n\trequireExactProps?: boolean;\n};\n\n/**\nCreate a type from an object type without certain keys.\n\nWe recommend setting the `requireExactProps` option to `true`.\n\nThis type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.\n\nThis type was proposed to the TypeScript team, which declined it, saying they prefer that libraries implement stricter versions of the built-in types ([microsoft/TypeScript#30825](https://github.com/microsoft/TypeScript/issues/30825#issuecomment-523668235)).\n\n@example\n```\nimport type {Except} from 'type-fest';\n\ntype Foo = {\n\ta: number;\n\tb: string;\n};\n\ntype FooWithoutA = Except<Foo, 'a'>;\n//=> {b: string}\n\nconst fooWithoutA: FooWithoutA = {a: 1, b: '2'};\n//=> errors: 'a' does not exist in type '{ b: string; }'\n\ntype FooWithoutB = Except<Foo, 'b', {requireExactProps: true}>;\n//=> {a: number} & Partial<Record<\"b\", never>>\n\nconst fooWithoutB: FooWithoutB = {a: 1, b: '2'};\n//=> errors at 'b': Type 'string' is not assignable to type 'undefined'.\n```\n\n@category Object\n*/\ntype Except<ObjectType, KeysType extends keyof ObjectType, Options extends ExceptOptions = {requireExactProps: false}> = {\n\t[KeyType in keyof ObjectType as Filter<KeyType, KeysType>]: ObjectType[KeyType];\n} & (Options['requireExactProps'] extends true\n\t? Partial<Record<KeysType, never>>\n\t: {});\n\ndeclare namespace TsConfigJson {\n\tnamespace CompilerOptions {\n\t\texport type JSX =\n\t\t\t| 'preserve'\n\t\t\t| 'react'\n\t\t\t| 'react-jsx'\n\t\t\t| 'react-jsxdev'\n\t\t\t| 'react-native';\n\n\t\texport type Module =\n\t\t\t| 'CommonJS'\n\t\t\t| 'AMD'\n\t\t\t| 'System'\n\t\t\t| 'UMD'\n\t\t\t| 'ES6'\n\t\t\t| 'ES2015'\n\t\t\t| 'ES2020'\n\t\t\t| 'ES2022'\n\t\t\t| 'ESNext'\n\t\t\t| 'Node16'\n\t\t\t| 'NodeNext'\n\t\t\t| 'Preserve'\n\t\t\t| 'None'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'commonjs'\n\t\t\t| 'amd'\n\t\t\t| 'system'\n\t\t\t| 'umd'\n\t\t\t| 'es6'\n\t\t\t| 'es2015'\n\t\t\t| 'es2020'\n\t\t\t| 'es2022'\n\t\t\t| 'esnext'\n\t\t\t| 'node16'\n\t\t\t| 'nodenext'\n\t\t\t| 'preserve'\n\t\t\t| 'none';\n\n\t\texport type NewLine =\n\t\t\t| 'CRLF'\n\t\t\t| 'LF'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'crlf'\n\t\t\t| 'lf';\n\n\t\texport type Target =\n\t\t\t| 'ES3'\n\t\t\t| 'ES5'\n\t\t\t| 'ES6'\n\t\t\t| 'ES2015'\n\t\t\t| 'ES2016'\n\t\t\t| 'ES2017'\n\t\t\t| 'ES2018'\n\t\t\t| 'ES2019'\n\t\t\t| 'ES2020'\n\t\t\t| 'ES2021'\n\t\t\t| 'ES2022'\n\t\t\t| 'ES2023'\n\t\t\t| 'ES2024'\n\t\t\t| 'ESNext'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'es3'\n\t\t\t| 'es5'\n\t\t\t| 'es6'\n\t\t\t| 'es2015'\n\t\t\t| 'es2016'\n\t\t\t| 'es2017'\n\t\t\t| 'es2018'\n\t\t\t| 'es2019'\n\t\t\t| 'es2020'\n\t\t\t| 'es2021'\n\t\t\t| 'es2022'\n\t\t\t| 'es2023'\n\t\t\t| 'es2024'\n\t\t\t| 'esnext';\n\n\t\t// eslint-disable-next-line unicorn/prevent-abbreviations\n\t\texport type Lib =\n\t\t\t| 'ES5'\n\t\t\t| 'ES6'\n\t\t\t| 'ES7'\n\t\t\t| 'ES2015'\n\t\t\t| 'ES2015.Collection'\n\t\t\t| 'ES2015.Core'\n\t\t\t| 'ES2015.Generator'\n\t\t\t| 'ES2015.Iterable'\n\t\t\t| 'ES2015.Promise'\n\t\t\t| 'ES2015.Proxy'\n\t\t\t| 'ES2015.Reflect'\n\t\t\t| 'ES2015.Symbol.WellKnown'\n\t\t\t| 'ES2015.Symbol'\n\t\t\t| 'ES2016'\n\t\t\t| 'ES2016.Array.Include'\n\t\t\t| 'ES2017'\n\t\t\t| 'ES2017.ArrayBuffer'\n\t\t\t| 'ES2017.Date'\n\t\t\t| 'ES2017.Intl'\n\t\t\t| 'ES2017.Object'\n\t\t\t| 'ES2017.SharedMemory'\n\t\t\t| 'ES2017.String'\n\t\t\t| 'ES2017.TypedArrays'\n\t\t\t| 'ES2018'\n\t\t\t| 'ES2018.AsyncGenerator'\n\t\t\t| 'ES2018.AsyncIterable'\n\t\t\t| 'ES2018.Intl'\n\t\t\t| 'ES2018.Promise'\n\t\t\t| 'ES2018.Regexp'\n\t\t\t| 'ES2019'\n\t\t\t| 'ES2019.Array'\n\t\t\t| 'ES2019.Object'\n\t\t\t| 'ES2019.String'\n\t\t\t| 'ES2019.Symbol'\n\t\t\t| 'ES2020'\n\t\t\t| 'ES2020.BigInt'\n\t\t\t| 'ES2020.Promise'\n\t\t\t| 'ES2020.String'\n\t\t\t| 'ES2020.Symbol.WellKnown'\n\t\t\t| 'ES2020.SharedMemory'\n\t\t\t| 'ES2020.Intl'\n\t\t\t| 'ES2021'\n\t\t\t| 'ES2021.Intl'\n\t\t\t| 'ES2021.Promise'\n\t\t\t| 'ES2021.String'\n\t\t\t| 'ES2021.WeakRef'\n\t\t\t| 'ES2022'\n\t\t\t| 'ES2022.Array'\n\t\t\t| 'ES2022.Error'\n\t\t\t| 'ES2022.Intl'\n\t\t\t| 'ES2022.Object'\n\t\t\t| 'ES2022.RegExp'\n\t\t\t| 'ES2022.String'\n\t\t\t| 'ES2023'\n\t\t\t| 'ES2023.Array'\n\t\t\t| 'ES2023.Collection'\n\t\t\t| 'ES2023.Intl'\n\t\t\t| 'ES2024'\n\t\t\t| 'ES2024.ArrayBuffer'\n\t\t\t| 'ES2024.Collection'\n\t\t\t| 'ES2024.Object'\n\t\t\t| 'ES2024.Promise'\n\t\t\t| 'ES2024.Regexp'\n\t\t\t| 'ES2024.SharedMemory'\n\t\t\t| 'ES2024.String'\n\t\t\t| 'ESNext'\n\t\t\t| 'ESNext.Array'\n\t\t\t| 'ESNext.AsyncIterable'\n\t\t\t| 'ESNext.BigInt'\n\t\t\t| 'ESNext.Collection'\n\t\t\t| 'ESNext.Decorators'\n\t\t\t| 'ESNext.Disposable'\n\t\t\t| 'ESNext.Intl'\n\t\t\t| 'ESNext.Iterator'\n\t\t\t| 'ESNext.Promise'\n\t\t\t| 'ESNext.String'\n\t\t\t| 'ESNext.Symbol'\n\t\t\t| 'ESNext.WeakRef'\n\t\t\t| 'DOM'\n\t\t\t| 'DOM.Iterable'\n\t\t\t| 'ScriptHost'\n\t\t\t| 'WebWorker'\n\t\t\t| 'WebWorker.AsyncIterable'\n\t\t\t| 'WebWorker.ImportScripts'\n\t\t\t| 'WebWorker.Iterable'\n\t\t\t// Lowercase alternatives\n\t\t\t| 'es5'\n\t\t\t| 'es6'\n\t\t\t| 'es7'\n\t\t\t| 'es2015'\n\t\t\t| 'es2015.collection'\n\t\t\t| 'es2015.core'\n\t\t\t| 'es2015.generator'\n\t\t\t| 'es2015.iterable'\n\t\t\t| 'es2015.promise'\n\t\t\t| 'es2015.proxy'\n\t\t\t| 'es2015.reflect'\n\t\t\t| 'es2015.symbol.wellknown'\n\t\t\t| 'es2015.symbol'\n\t\t\t| 'es2016'\n\t\t\t| 'es2016.array.include'\n\t\t\t| 'es2017'\n\t\t\t| 'es2017.arraybuffer'\n\t\t\t| 'es2017.date'\n\t\t\t| 'es2017.intl'\n\t\t\t| 'es2017.object'\n\t\t\t| 'es2017.sharedmemory'\n\t\t\t| 'es2017.string'\n\t\t\t| 'es2017.typedarrays'\n\t\t\t| 'es2018'\n\t\t\t| 'es2018.asyncgenerator'\n\t\t\t| 'es2018.asynciterable'\n\t\t\t| 'es2018.intl'\n\t\t\t| 'es2018.promise'\n\t\t\t| 'es2018.regexp'\n\t\t\t| 'es2019'\n\t\t\t| 'es2019.array'\n\t\t\t| 'es2019.object'\n\t\t\t| 'es2019.string'\n\t\t\t| 'es2019.symbol'\n\t\t\t| 'es2020'\n\t\t\t| 'es2020.bigint'\n\t\t\t| 'es2020.promise'\n\t\t\t| 'es2020.string'\n\t\t\t| 'es2020.symbol.wellknown'\n\t\t\t| 'es2020.sharedmemory'\n\t\t\t| 'es2020.intl'\n\t\t\t| 'es2021'\n\t\t\t| 'es2021.intl'\n\t\t\t| 'es2021.promise'\n\t\t\t| 'es2021.string'\n\t\t\t| 'es2021.weakref'\n\t\t\t| 'es2022'\n\t\t\t| 'es2022.array'\n\t\t\t| 'es2022.error'\n\t\t\t| 'es2022.intl'\n\t\t\t| 'es2022.object'\n\t\t\t| 'es2022.regexp'\n\t\t\t| 'es2022.string'\n\t\t\t| 'es2023'\n\t\t\t| 'es2023.array'\n\t\t\t| 'es2023.collection'\n\t\t\t| 'es2023.intl'\n\t\t\t| 'es2024'\n\t\t\t| 'es2024.arraybuffer'\n\t\t\t| 'es2024.collection'\n\t\t\t| 'es2024.object'\n\t\t\t| 'es2024.promise'\n\t\t\t| 'es2024.regexp'\n\t\t\t| 'es2024.sharedmemory'\n\t\t\t| 'es2024.string'\n\t\t\t| 'esnext'\n\t\t\t| 'esnext.array'\n\t\t\t| 'esnext.asynciterable'\n\t\t\t| 'esnext.bigint'\n\t\t\t| 'esnext.collection'\n\t\t\t| 'esnext.decorators'\n\t\t\t| 'esnext.disposable'\n\t\t\t| 'esnext.intl'\n\t\t\t| 'esnext.iterator'\n\t\t\t| 'esnext.promise'\n\t\t\t| 'esnext.string'\n\t\t\t| 'esnext.symbol'\n\t\t\t| 'esnext.weakref'\n\t\t\t| 'dom'\n\t\t\t| 'dom.iterable'\n\t\t\t| 'scripthost'\n\t\t\t| 'webworker'\n\t\t\t| 'webworker.asynciterable'\n\t\t\t| 'webworker.importscripts'\n\t\t\t| 'webworker.iterable';\n\n\t\texport type Plugin = {\n\t\t\t/**\n\t\t\tPlugin name.\n\t\t\t*/\n\t\t\tname: string;\n\t\t};\n\n\t\texport type ImportsNotUsedAsValues =\n\t\t\t| 'remove'\n\t\t\t| 'preserve'\n\t\t\t| 'error';\n\n\t\texport type FallbackPolling =\n\t\t\t| 'fixedPollingInterval'\n\t\t\t| 'priorityPollingInterval'\n\t\t\t| 'dynamicPriorityPolling'\n\t\t\t| 'fixedInterval'\n\t\t\t| 'priorityInterval'\n\t\t\t| 'dynamicPriority'\n\t\t\t| 'fixedChunkSize';\n\n\t\texport type WatchDirectory =\n\t\t\t| 'useFsEvents'\n\t\t\t| 'fixedPollingInterval'\n\t\t\t| 'dynamicPriorityPolling'\n\t\t\t| 'fixedChunkSizePolling';\n\n\t\texport type WatchFile =\n\t\t\t| 'fixedPollingInterval'\n\t\t\t| 'priorityPollingInterval'\n\t\t\t| 'dynamicPriorityPolling'\n\t\t\t| 'useFsEvents'\n\t\t\t| 'useFsEventsOnParentDirectory'\n\t\t\t| 'fixedChunkSizePolling';\n\n\t\texport type ModuleResolution =\n\t\t\t| 'classic'\n\t\t\t| 'node'\n\t\t\t| 'node10'\n\t\t\t| 'node16'\n\t\t\t| 'nodenext'\n\t\t\t| 'bundler'\n\t\t\t// Pascal-cased alternatives\n\t\t\t| 'Classic'\n\t\t\t| 'Node'\n\t\t\t| 'Node10'\n\t\t\t| 'Node16'\n\t\t\t| 'NodeNext'\n\t\t\t| 'Bundler';\n\n\t\texport type ModuleDetection =\n\t\t\t| 'auto'\n\t\t\t| 'legacy'\n\t\t\t| 'force';\n\n\t\texport type IgnoreDeprecations = '5.0';\n\t}\n\n\texport type CompilerOptions = {\n\t\t/**\n\t\tThe character set of the input files.\n\n\t\t@default 'utf8'\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tcharset?: string;\n\n\t\t/**\n\t\tEnables building for project references.\n\n\t\t@default true\n\t\t*/\n\t\tcomposite?: boolean;\n\n\t\t/**\n\t\tGenerates corresponding d.ts files.\n\n\t\t@default false\n\t\t*/\n\t\tdeclaration?: boolean;\n\n\t\t/**\n\t\tSpecify output directory for generated declaration files.\n\t\t*/\n\t\tdeclarationDir?: string;\n\n\t\t/**\n\t\tShow diagnostic information.\n\n\t\t@default false\n\t\t*/\n\t\tdiagnostics?: boolean;\n\n\t\t/**\n\t\tReduce the number of projects loaded automatically by TypeScript.\n\n\t\t@default false\n\t\t*/\n\t\tdisableReferencedProjectLoad?: boolean;\n\n\t\t/**\n\t\tEnforces using indexed accessors for keys declared using an indexed type.\n\n\t\t@default false\n\t\t*/\n\t\tnoPropertyAccessFromIndexSignature?: boolean;\n\n\t\t/**\n\t\tEmit a UTF-8 Byte Order Mark (BOM) in the beginning of output files.\n\n\t\t@default false\n\t\t*/\n\t\temitBOM?: boolean;\n\n\t\t/**\n\t\tOnly emit `.d.ts` declaration files.\n\n\t\t@default false\n\t\t*/\n\t\temitDeclarationOnly?: boolean;\n\n\t\t/**\n\t\tDifferentiate between undefined and not present when type checking.\n\n\t\t@default false\n\t\t*/\n\t\texactOptionalPropertyTypes?: boolean;\n\n\t\t/**\n\t\tEnable incremental compilation.\n\n\t\t@default `composite`\n\t\t*/\n\t\tincremental?: boolean;\n\n\t\t/**\n\t\tSpecify file to store incremental compilation information.\n\n\t\t@default '.tsbuildinfo'\n\t\t*/\n\t\ttsBuildInfoFile?: string;\n\n\t\t/**\n\t\tEmit a single file with source maps instead of having a separate file.\n\n\t\t@default false\n\t\t*/\n\t\tinlineSourceMap?: boolean;\n\n\t\t/**\n\t\tEmit the source alongside the sourcemaps within a single file.\n\n\t\tRequires `--inlineSourceMap` to be set.\n\n\t\t@default false\n\t\t*/\n\t\tinlineSources?: boolean;\n\n\t\t/**\n\t\tSpecify what JSX code is generated.\n\n\t\t@default 'preserve'\n\t\t*/\n\t\tjsx?: CompilerOptions.JSX;\n\n\t\t/**\n\t\tSpecifies the object invoked for `createElement` and `__spread` when targeting `'react'` JSX emit.\n\n\t\t@default 'React'\n\t\t*/\n\t\treactNamespace?: string;\n\n\t\t/**\n\t\tSpecify the JSX factory function to use when targeting React JSX emit, e.g. `React.createElement` or `h`.\n\n\t\t@default 'React.createElement'\n\t\t*/\n\t\tjsxFactory?: string;\n\n\t\t/**\n\t\tSpecify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\n\n\t\t@default 'React.Fragment'\n\t\t*/\n\t\tjsxFragmentFactory?: string;\n\n\t\t/**\n\t\tSpecify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.\n\n\t\t@default 'react'\n\t\t*/\n\t\tjsxImportSource?: string;\n\n\t\t/**\n\t\tPrint names of files part of the compilation.\n\n\t\t@default false\n\t\t*/\n\t\tlistFiles?: boolean;\n\n\t\t/**\n\t\tSpecifies the location where debugger should locate map files instead of generated locations.\n\t\t*/\n\t\tmapRoot?: string;\n\n\t\t/**\n\t\tSpecify module code generation: 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6', 'ES2015' or 'ESNext'. Only 'AMD' and 'System' can be used in conjunction with `--outFile`. 'ES6' and 'ES2015' values may be used when targeting 'ES5' or lower.\n\n\t\t@default ['ES3', 'ES5'].includes(target) ? 'CommonJS' : 'ES6'\n\t\t*/\n\t\tmodule?: CompilerOptions.Module;\n\n\t\t/**\n\t\tSpecifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6).\n\n\t\t@default ['AMD', 'System', 'ES6'].includes(module) ? 'classic' : 'node'\n\t\t*/\n\t\tmoduleResolution?: CompilerOptions.ModuleResolution;\n\n\t\t/**\n\t\tSpecifies the end of line sequence to be used when emitting files: 'crlf' (Windows) or 'lf' (Unix).\n\n\t\t@default 'LF'\n\t\t*/\n\t\tnewLine?: CompilerOptions.NewLine;\n\n\t\t/**\n\t\tDisable full type checking (only critical parse and emit errors will be reported).\n\n\t\t@default false\n\t\t*/\n\t\tnoCheck?: boolean;\n\n\t\t/**\n\t\tDo not emit output.\n\n\t\t@default false\n\t\t*/\n\t\tnoEmit?: boolean;\n\n\t\t/**\n\t\tDo not generate custom helper functions like `__extends` in compiled output.\n\n\t\t@default false\n\t\t*/\n\t\tnoEmitHelpers?: boolean;\n\n\t\t/**\n\t\tDo not emit outputs if any type checking errors were reported.\n\n\t\t@default false\n\t\t*/\n\t\tnoEmitOnError?: boolean;\n\n\t\t/**\n\t\tWarn on expressions and declarations with an implied 'any' type.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitAny?: boolean;\n\n\t\t/**\n\t\tRaise error on 'this' expressions with an implied any type.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitThis?: boolean;\n\n\t\t/**\n\t\tReport errors on unused locals.\n\n\t\t@default false\n\t\t*/\n\t\tnoUnusedLocals?: boolean;\n\n\t\t/**\n\t\tReport errors on unused parameters.\n\n\t\t@default false\n\t\t*/\n\t\tnoUnusedParameters?: boolean;\n\n\t\t/**\n\t\tDo not include the default library file (lib.d.ts).\n\n\t\t@default false\n\t\t*/\n\t\tnoLib?: boolean;\n\n\t\t/**\n\t\tDo not add triple-slash references or module import targets to the list of compiled files.\n\n\t\t@default false\n\t\t*/\n\t\tnoResolve?: boolean;\n\n\t\t/**\n\t\tDisable strict checking of generic signatures in function types.\n\n\t\t@default false\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tnoStrictGenericChecks?: boolean;\n\n\t\t/**\n\t\t@deprecated use `skipLibCheck` instead.\n\t\t*/\n\t\tskipDefaultLibCheck?: boolean;\n\n\t\t/**\n\t\tSkip type checking of declaration files.\n\n\t\t@default false\n\t\t*/\n\t\tskipLibCheck?: boolean;\n\n\t\t/**\n\t\tConcatenate and emit output to single file.\n\t\t*/\n\t\toutFile?: string;\n\n\t\t/**\n\t\tRedirect output structure to the directory.\n\t\t*/\n\t\toutDir?: string;\n\n\t\t/**\n\t\tDo not erase const enum declarations in generated code.\n\n\t\t@default false\n\t\t*/\n\t\tpreserveConstEnums?: boolean;\n\n\t\t/**\n\t\tDo not resolve symlinks to their real path; treat a symlinked file like a real one.\n\n\t\t@default false\n\t\t*/\n\t\tpreserveSymlinks?: boolean;\n\n\t\t/**\n\t\tKeep outdated console output in watch mode instead of clearing the screen.\n\n\t\t@default false\n\t\t*/\n\t\tpreserveWatchOutput?: boolean;\n\n\t\t/**\n\t\tStylize errors and messages using color and context (experimental).\n\n\t\t@default true // Unless piping to another program or redirecting output to a file.\n\t\t*/\n\t\tpretty?: boolean;\n\n\t\t/**\n\t\tDo not emit comments to output.\n\n\t\t@default false\n\t\t*/\n\t\tremoveComments?: boolean;\n\n\t\t/**\n\t\tSpecifies the root directory of input files.\n\n\t\tUse to control the output directory structure with `--outDir`.\n\t\t*/\n\t\trootDir?: string;\n\n\t\t/**\n\t\tUnconditionally emit imports for unresolved files.\n\n\t\t@default false\n\t\t*/\n\t\tisolatedModules?: boolean;\n\n\t\t/**\n\t\tRequire sufficient annotation on exports so other tools can trivially generate declaration files.\n\n\t\t@default false\n\t\t*/\n\t\tisolatedDeclarations?: boolean;\n\n\t\t/**\n\t\tGenerates corresponding '.map' file.\n\n\t\t@default false\n\t\t*/\n\t\tsourceMap?: boolean;\n\n\t\t/**\n\t\tSpecifies the location where debugger should locate TypeScript files instead of source locations.\n\t\t*/\n\t\tsourceRoot?: string;\n\n\t\t/**\n\t\tSuppress excess property checks for object literals.\n\n\t\t@default false\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tsuppressExcessPropertyErrors?: boolean;\n\n\t\t/**\n\t\tSuppress noImplicitAny errors for indexing objects lacking index signatures.\n\n\t\t@default false\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tsuppressImplicitAnyIndexErrors?: boolean;\n\n\t\t/**\n\t\tDo not emit declarations for code that has an `@internal` annotation.\n\t\t*/\n\t\tstripInternal?: boolean;\n\n\t\t/**\n\t\tSpecify ECMAScript target version.\n\n\t\t@default 'es3'\n\t\t*/\n\t\ttarget?: CompilerOptions.Target;\n\n\t\t/**\n\t\tDefault catch clause variables as `unknown` instead of `any`.\n\n\t\t@default false\n\t\t*/\n\t\tuseUnknownInCatchVariables?: boolean;\n\n\t\t/**\n\t\tWatch input files.\n\n\t\t@default false\n\t\t@deprecated Use watchOptions instead.\n\t\t*/\n\t\twatch?: boolean;\n\n\t\t/**\n\t\tSpecify the polling strategy to use when the system runs out of or doesn't support native file watchers.\n\n\t\t@deprecated Use watchOptions.fallbackPolling instead.\n\t\t*/\n\t\tfallbackPolling?: CompilerOptions.FallbackPolling;\n\n\t\t/**\n\t\tSpecify the strategy for watching directories under systems that lack recursive file-watching functionality.\n\n\t\t@default 'useFsEvents'\n\t\t@deprecated Use watchOptions.watchDirectory instead.\n\t\t*/\n\t\twatchDirectory?: CompilerOptions.WatchDirectory;\n\n\t\t/**\n\t\tSpecify the strategy for watching individual files.\n\n\t\t@default 'useFsEvents'\n\t\t@deprecated Use watchOptions.watchFile instead.\n\t\t*/\n\t\twatchFile?: CompilerOptions.WatchFile;\n\n\t\t/**\n\t\tEnables experimental support for ES7 decorators.\n\n\t\t@default false\n\t\t*/\n\t\texperimentalDecorators?: boolean;\n\n\t\t/**\n\t\tEmit design-type metadata for decorated declarations in source.\n\n\t\t@default false\n\t\t*/\n\t\temitDecoratorMetadata?: boolean;\n\n\t\t/**\n\t\tDo not report errors on unused labels.\n\n\t\t@default false\n\t\t*/\n\t\tallowUnusedLabels?: boolean;\n\n\t\t/**\n\t\tReport error when not all code paths in function return a value.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitReturns?: boolean;\n\n\t\t/**\n\t\tAdd `undefined` to a type when accessed using an index.\n\n\t\t@default false\n\t\t*/\n\t\tnoUncheckedIndexedAccess?: boolean;\n\n\t\t/**\n\t\tReport error if failed to find a source file for a side effect import.\n\n\t\t@default false\n\t\t*/\n\t\tnoUncheckedSideEffectImports?: boolean;\n\n\t\t/**\n\t\tReport errors for fallthrough cases in switch statement.\n\n\t\t@default false\n\t\t*/\n\t\tnoFallthroughCasesInSwitch?: boolean;\n\n\t\t/**\n\t\tEnsure overriding members in derived classes are marked with an override modifier.\n\n\t\t@default false\n\t\t*/\n\t\tnoImplicitOverride?: boolean;\n\n\t\t/**\n\t\tDo not report errors on unreachable code.\n\n\t\t@default false\n\t\t*/\n\t\tallowUnreachableCode?: boolean;\n\n\t\t/**\n\t\tDisallow inconsistently-cased references to the same file.\n\n\t\t@default true\n\t\t*/\n\t\tforceConsistentCasingInFileNames?: boolean;\n\n\t\t/**\n\t\tEmit a v8 CPU profile of the compiler run for debugging.\n\n\t\t@default 'profile.cpuprofile'\n\t\t*/\n\t\tgenerateCpuProfile?: string;\n\n\t\t/**\n\t\tGenerates an event trace and a list of types.\n\t\t*/\n\t\tgenerateTrace?: boolean;\n\n\t\t/**\n\t\tBase directory to resolve non-relative module names.\n\t\t*/\n\t\tbaseUrl?: string;\n\n\t\t/**\n\t\tSpecify path mapping to be computed relative to baseUrl option.\n\t\t*/\n\t\tpaths?: Record<string, string[]>;\n\n\t\t/**\n\t\tList of TypeScript language server plugins to load.\n\t\t*/\n\t\tplugins?: CompilerOptions.Plugin[];\n\n\t\t/**\n\t\tSpecify list of root directories to be used when resolving modules.\n\t\t*/\n\t\trootDirs?: string[];\n\n\t\t/**\n\t\tSpecify list of directories for type definition files to be included.\n\t\t*/\n\t\ttypeRoots?: string[];\n\n\t\t/**\n\t\tType declaration files to be included in compilation.\n\t\t*/\n\t\ttypes?: string[];\n\n\t\t/**\n\t\tEnable tracing of the name resolution process.\n\n\t\t@default false\n\t\t*/\n\t\ttraceResolution?: boolean;\n\n\t\t/**\n\t\tAllow javascript files to be compiled.\n\n\t\t@default false\n\t\t*/\n\t\tallowJs?: boolean;\n\n\t\t/**\n\t\tDo not truncate error messages.\n\n\t\t@default false\n\t\t*/\n\t\tnoErrorTruncation?: boolean;\n\n\t\t/**\n\t\tAllow default imports from modules with no default export. This does not affect code emit, just typechecking.\n\n\t\t@default module === 'system' || esModuleInterop\n\t\t*/\n\t\tallowSyntheticDefaultImports?: boolean;\n\n\t\t/**\n\t\tDo not emit `'use strict'` directives in module output.\n\n\t\t@default false\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tnoImplicitUseStrict?: boolean;\n\n\t\t/**\n\t\tEnable to list all emitted files.\n\n\t\t@default false\n\t\t*/\n\t\tlistEmittedFiles?: boolean;\n\n\t\t/**\n\t\tDisable size limit for JavaScript project.\n\n\t\t@default false\n\t\t*/\n\t\tdisableSizeLimit?: boolean;\n\n\t\t/**\n\t\tList of library files to be included in the compilation.\n\t\t*/\n\t\tlib?: CompilerOptions.Lib[];\n\n\t\t/**\n\t\tEnable strict null checks.\n\n\t\t@default false\n\t\t*/\n\t\tstrictNullChecks?: boolean;\n\n\t\t/**\n\t\tThe maximum dependency depth to search under `node_modules` and load JavaScript files. Only applicable with `--allowJs`.\n\n\t\t@default 0\n\t\t*/\n\t\tmaxNodeModuleJsDepth?: number;\n\n\t\t/**\n\t\tImport emit helpers (e.g. `__extends`, `__rest`, etc..) from tslib.\n\n\t\t@default false\n\t\t*/\n\t\timportHelpers?: boolean;\n\n\t\t/**\n\t\tSpecify emit/checking behavior for imports that are only used for types.\n\n\t\t@default 'remove'\n\t\t@deprecated Use `verbatimModuleSyntax` instead.\n\t\t*/\n\t\timportsNotUsedAsValues?: CompilerOptions.ImportsNotUsedAsValues;\n\n\t\t/**\n\t\tParse in strict mode and emit `'use strict'` for each source file.\n\n\t\t@default false\n\t\t*/\n\t\talwaysStrict?: boolean;\n\n\t\t/**\n\t\tEnable all strict type checking options.\n\n\t\t@default false\n\t\t*/\n\t\tstrict?: boolean;\n\n\t\t/**\n\t\tEnable stricter checking of of the `bind`, `call`, and `apply` methods on functions.\n\n\t\t@default false\n\t\t*/\n\t\tstrictBindCallApply?: boolean;\n\n\t\t/**\n\t\tProvide full support for iterables in `for-of`, spread, and destructuring when targeting `ES5` or `ES3`.\n\n\t\t@default false\n\t\t*/\n\t\tdownlevelIteration?: boolean;\n\n\t\t/**\n\t\tReport errors in `.js` files.\n\n\t\t@default false\n\t\t*/\n\t\tcheckJs?: boolean;\n\n\t\t/**\n\t\tBuilt-in iterators are instantiated with a `TReturn` type of undefined instead of `any`.\n\n\t\t@default false\n\t\t*/\n\t\tstrictBuiltinIteratorReturn?: boolean;\n\n\t\t/**\n\t\tDisable bivariant parameter checking for function types.\n\n\t\t@default false\n\t\t*/\n\t\tstrictFunctionTypes?: boolean;\n\n\t\t/**\n\t\tEnsure non-undefined class properties are initialized in the constructor.\n\n\t\t@default false\n\t\t*/\n\t\tstrictPropertyInitialization?: boolean;\n\n\t\t/**\n\t\tEmit `__importStar` and `__importDefault` helpers for runtime Babel ecosystem compatibility and enable `--allowSyntheticDefaultImports` for typesystem compatibility.\n\n\t\t@default false\n\t\t*/\n\t\tesModuleInterop?: boolean;\n\n\t\t/**\n\t\tAllow accessing UMD globals from modules.\n\n\t\t@default false\n\t\t*/\n\t\tallowUmdGlobalAccess?: boolean;\n\n\t\t/**\n\t\tResolve `keyof` to string valued property names only (no numbers or symbols).\n\n\t\t@default false\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tkeyofStringsOnly?: boolean;\n\n\t\t/**\n\t\tEmit ECMAScript standard class fields.\n\n\t\t@default false\n\t\t*/\n\t\tuseDefineForClassFields?: boolean;\n\n\t\t/**\n\t\tGenerates a sourcemap for each corresponding `.d.ts` file.\n\n\t\t@default false\n\t\t*/\n\t\tdeclarationMap?: boolean;\n\n\t\t/**\n\t\tInclude modules imported with `.json` extension.\n\n\t\t@default false\n\t\t*/\n\t\tresolveJsonModule?: boolean;\n\n\t\t/**\n\t\tHave recompiles in '--incremental' and '--watch' assume that changes within a file will only affect files directly depending on it.\n\n\t\t@default false\n\t\t*/\n\t\tassumeChangesOnlyAffectDirectDependencies?: boolean;\n\n\t\t/**\n\t\tOutput more detailed compiler performance information after building.\n\n\t\t@default false\n\t\t*/\n\t\textendedDiagnostics?: boolean;\n\n\t\t/**\n\t\tPrint names of files that are part of the compilation and then stop processing.\n\n\t\t@default false\n\t\t*/\n\t\tlistFilesOnly?: boolean;\n\n\t\t/**\n\t\tDisable preferring source files instead of declaration files when referencing composite projects.\n\n\t\t@default true if composite, false otherwise\n\t\t*/\n\t\tdisableSourceOfProjectReferenceRedirect?: boolean;\n\n\t\t/**\n\t\tOpt a project out of multi-project reference checking when editing.\n\n\t\t@default false\n\t\t*/\n\t\tdisableSolutionSearching?: boolean;\n\n\t\t/**\n\t\tPrint names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.\n\n\t\t@default false\n\t\t*/\n\t\texplainFiles?: boolean;\n\n\t\t/**\n\t\tPreserve unused imported values in the JavaScript output that would otherwise be removed.\n\n\t\t@default true\n\t\t@deprecated Use `verbatimModuleSyntax` instead.\n\t\t*/\n\t\tpreserveValueImports?: boolean;\n\n\t\t/**\n\t\tList of file name suffixes to search when resolving a module.\n\t\t*/\n\t\tmoduleSuffixes?: string[];\n\n\t\t/**\n\t\tControl what method is used to detect module-format JS files.\n\n\t\t@default 'auto'\n\t\t*/\n\t\tmoduleDetection?: CompilerOptions.ModuleDetection;\n\n\t\t/**\n\t\tAllows TypeScript files to import each other with a TypeScript-specific extension like .ts, .mts, or .tsx.\n\n\t\t@default false\n\t\t*/\n\t\tallowImportingTsExtensions?: boolean;\n\n\t\t/**\n\t\tForces TypeScript to consult the exports field of package.json files if it ever reads from a package in node_modules.\n\n\t\t@default false\n\t\t*/\n\t\tresolvePackageJsonExports?: boolean;\n\n\t\t/**\n\t\tForces TypeScript to consult the imports field of package.json files when performing a lookup that starts with # from a file whose ancestor directory contains a package.json.\n\n\t\t@default false\n\t\t*/\n\t\tresolvePackageJsonImports?: boolean;\n\n\t\t/**\n\t\tSuppress errors for file formats that TypeScript does not understand.\n\n\t\t@default false\n\t\t*/\n\t\tallowArbitraryExtensions?: boolean;\n\n\t\t/**\n\t\tList of additional conditions that should succeed when TypeScript resolves from package.json.\n\t\t*/\n\t\tcustomConditions?: string[];\n\n\t\t/**\n\t\tAnything that uses the type modifier is dropped entirely.\n\n\t\t@default false\n\t\t*/\n\t\tverbatimModuleSyntax?: boolean;\n\n\t\t/**\n\t\tSuppress deprecation warnings\n\t\t*/\n\t\tignoreDeprecations?: CompilerOptions.IgnoreDeprecations;\n\t};\n\n\tnamespace WatchOptions {\n\t\texport type WatchFileKind =\n\t\t\t| 'FixedPollingInterval'\n\t\t\t| 'PriorityPollingInterval'\n\t\t\t| 'DynamicPriorityPolling'\n\t\t\t| 'FixedChunkSizePolling'\n\t\t\t| 'UseFsEvents'\n\t\t\t| 'UseFsEventsOnParentDirectory';\n\n\t\texport type WatchDirectoryKind =\n\t\t\t| 'UseFsEvents'\n\t\t\t| 'FixedPollingInterval'\n\t\t\t| 'DynamicPriorityPolling'\n\t\t\t| 'FixedChunkSizePolling';\n\n\t\texport type PollingWatchKind =\n\t\t\t| 'FixedInterval'\n\t\t\t| 'PriorityInterval'\n\t\t\t| 'DynamicPriority'\n\t\t\t| 'FixedChunkSize';\n\t}\n\n\texport type WatchOptions = {\n\n\t\t/**\n\t\tSpecify the strategy for watching individual files.\n\n\t\t@default 'UseFsEvents'\n\t\t*/\n\t\twatchFile?: WatchOptions.WatchFileKind | Lowercase<WatchOptions.WatchFileKind>;\n\n\t\t/**\n\t\tSpecify the strategy for watching directories under systems that lack recursive file-watching functionality.\n\n\t\t@default 'UseFsEvents'\n\t\t*/\n\t\twatchDirectory?: WatchOptions.WatchDirectoryKind | Lowercase<WatchOptions.WatchDirectoryKind>;\n\n\t\t/**\n\t\tSpecify the polling strategy to use when the system runs out of or doesn't support native file watchers.\n\t\t*/\n\t\tfallbackPolling?: WatchOptions.PollingWatchKind | Lowercase<WatchOptions.PollingWatchKind>;\n\n\t\t/**\n\t\tEnable synchronous updates on directory watchers for platforms that don't support recursive watching natively.\n\t\t*/\n\t\tsynchronousWatchDirectory?: boolean;\n\n\t\t/**\n\t\tSpecifies a list of directories to exclude from watch\n\t\t*/\n\t\texcludeDirectories?: string[];\n\n\t\t/**\n\t\tSpecifies a list of files to exclude from watch\n\t\t*/\n\t\texcludeFiles?: string[];\n\t};\n\n\t/**\n\tAuto type (.d.ts) acquisition options for this project.\n\t*/\n\texport type TypeAcquisition = {\n\t\t/**\n\t\tEnable auto type acquisition.\n\t\t*/\n\t\tenable?: boolean;\n\n\t\t/**\n\t\tSpecifies a list of type declarations to be included in auto type acquisition. For example, `['jquery', 'lodash']`.\n\t\t*/\n\t\tinclude?: string[];\n\n\t\t/**\n\t\tSpecifies a list of type declarations to be excluded from auto type acquisition. For example, `['jquery', 'lodash']`.\n\t\t*/\n\t\texclude?: string[];\n\n\t\t/**\n\t\tDisable infering what types should be added based on filenames in a project.\n\t\t*/\n\t\tdisableFilenameBasedTypeAcquisition?: boolean;\n\t};\n\n\texport type References = {\n\t\t/**\n\t\tA normalized path on disk.\n\t\t*/\n\t\tpath: string;\n\n\t\t/**\n\t\tThe path as the user originally wrote it.\n\t\t*/\n\t\toriginalPath?: string;\n\n\t\t/**\n\t\tTrue if the output of this reference should be prepended to the output of this project.\n\n\t\tOnly valid for `--outFile` compilations.\n\t\t@deprecated This option will be removed in TypeScript 5.5.\n\t\t*/\n\t\tprepend?: boolean;\n\n\t\t/**\n\t\tTrue if it is intended that this reference form a circularity.\n\t\t*/\n\t\tcircular?: boolean;\n\t};\n}\n\n/**\nType for [TypeScript's `tsconfig.json` file](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) (TypeScript 3.7).\n\n@category File\n*/\ntype TsConfigJson = {\n\t/**\n\tInstructs the TypeScript compiler how to compile `.ts` files.\n\t*/\n\tcompilerOptions?: TsConfigJson.CompilerOptions;\n\n\t/**\n\tInstructs the TypeScript compiler how to watch files.\n\t*/\n\twatchOptions?: TsConfigJson.WatchOptions;\n\n\t/**\n\tAuto type (.d.ts) acquisition options for this project.\n\t*/\n\ttypeAcquisition?: TsConfigJson.TypeAcquisition;\n\n\t/**\n\tEnable Compile-on-Save for this project.\n\t*/\n\tcompileOnSave?: boolean;\n\n\t/**\n\tPath to base configuration file to inherit from.\n\t*/\n\textends?: string | string[];\n\n\t/**\n\tIf no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`. When a `files` property is specified, only those files and those specified by `include` are included.\n\t*/\n\tfiles?: string[];\n\n\t/**\n\tSpecifies a list of files to be excluded from compilation. The `exclude` property only affects the files included via the `include` property and not the `files` property.\n\n\tGlob patterns require TypeScript version 2.0 or later.\n\t*/\n\texclude?: string[];\n\n\t/**\n\tSpecifies a list of glob patterns that match files to be included in compilation.\n\n\tIf no `files` or `include` property is present in a `tsconfig.json`, the compiler defaults to including all files in the containing directory and subdirectories except those specified by `exclude`.\n\t*/\n\tinclude?: string[];\n\n\t/**\n\tReferenced projects.\n\t*/\n\treferences?: TsConfigJson.References[];\n};\n\ntype TsConfigJsonResolved = Except<TsConfigJson, 'extends'>;\ntype TsConfigResult = {\n    /**\n     * The path to the tsconfig.json file\n     */\n    path: string;\n    /**\n     * The resolved tsconfig.json file\n     */\n    config: TsConfigJsonResolved;\n};\ntype Cache<value = any> = Map<string, value>;\n\n/**\n * Finds a tsconfig file, defaulting to `tsconfig.json`, starting from a given path.\n *\n * @param searchPath Starting directory (default: `process.cwd()`).\n * @param configName Config file name (default: `tsconfig.json`).\n * @param cache Cache for previous results (default: new `Map()`).\n * @returns The tsconfig file path and parsed contents, or `null` if not found.\n */\ndeclare const getTsconfig: (searchPath?: string, configName?: string, cache?: Cache) => TsConfigResult | null;\n\n/**\n * Parses a tsconfig file at a given path\n *\n * @param tsconfigPath - Path to the tsconfig file.\n * @param cache - Cache for storing parsed tsconfig results (default: new `Map()`).\n * @returns The parsed and resolved tsconfig JSON.\n */\ndeclare const parseTsconfig: (tsconfigPath: string, cache?: Cache<string>) => TsConfigJsonResolved;\n\n/**\n * Reference:\n * https://github.com/microsoft/TypeScript/blob/3ccbe804f850f40d228d3c875be952d94d39aa1d/src/compiler/moduleNameResolver.ts#L2465\n */\ndeclare const createPathsMatcher: (tsconfig: TsConfigResult) => ((specifier: string) => string[]) | null;\n\ntype FileMatcher = (filePath: string) => (TsConfigJsonResolved | undefined);\ndeclare const createFilesMatcher: ({ config, path: tsconfigPath, }: TsConfigResult, caseSensitivePaths?: boolean) => FileMatcher;\n\nexport { type Cache, type FileMatcher, TsConfigJson, type TsConfigJsonResolved, type TsConfigResult, createFilesMatcher, createPathsMatcher, getTsconfig, parseTsconfig };\n"
        }
    ]
}