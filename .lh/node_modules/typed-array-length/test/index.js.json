{
    "sourceFile": "node_modules/typed-array-length/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893070981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar typedArrayLength = require('../');\nvar isCallable = require('is-callable');\nvar generators = require('make-generator-function')();\nvar arrowFn = require('make-arrow-function')();\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\nvar typedArrayNames = require('possible-typed-array-names');\n\ntest('not arrays', function (t) {\n\tt.test('non-number/string primitives', function (st) {\n\t\t// @ts-expect-error\n\t\tst.equal(false, typedArrayLength(), 'undefined is not typed array');\n\t\tst.equal(false, typedArrayLength(null), 'null is not typed array');\n\t\tst.equal(false, typedArrayLength(false), 'false is not typed array');\n\t\tst.equal(false, typedArrayLength(true), 'true is not typed array');\n\t\tst.end();\n\t});\n\n\tt.equal(false, typedArrayLength({}), 'object is not typed array');\n\tt.equal(false, typedArrayLength(/a/g), 'regex literal is not typed array');\n\tt.equal(false, typedArrayLength(new RegExp('a', 'g')), 'regex object is not typed array');\n\tt.equal(false, typedArrayLength(new Date()), 'new Date() is not typed array');\n\n\tt.test('numbers', function (st) {\n\t\tst.equal(false, typedArrayLength(42), 'number is not typed array');\n\t\tst.equal(false, typedArrayLength(Object(42)), 'number object is not typed array');\n\t\tst.equal(false, typedArrayLength(NaN), 'NaN is not typed array');\n\t\tst.equal(false, typedArrayLength(Infinity), 'Infinity is not typed array');\n\t\tst.end();\n\t});\n\n\tt.test('strings', function (st) {\n\t\tst.equal(false, typedArrayLength('foo'), 'string primitive is not typed array');\n\t\tst.equal(false, typedArrayLength(Object('foo')), 'string object is not typed array');\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n\ntest('Functions', function (t) {\n\tt.equal(false, typedArrayLength(function () {}), 'function is not typed array');\n\tt.end();\n});\n\ntest('Generators', { skip: generators.length === 0 }, function (t) {\n\tforEach(generators, function (genFn) {\n\t\tt.equal(false, typedArrayLength(genFn), 'generator function ' + inspect(genFn) + ' is not typed array');\n\t});\n\tt.end();\n});\n\ntest('Arrow functions', { skip: !arrowFn }, function (t) {\n\tt.equal(false, typedArrayLength(arrowFn), 'arrow function is not typed array');\n\tt.end();\n});\n\ntest('Typed Arrays', function (t) {\n\tforEach(typedArrayNames, function (typedArray) {\n\t\t/** @type {Int8ArrayConstructor | Uint8ArrayConstructor | Uint8ClampedArrayConstructor | Int16ArrayConstructor | Uint16ArrayConstructor | Int32ArrayConstructor | Uint32ArrayConstructor | Float32ArrayConstructor | Float64ArrayConstructor | BigInt64ArrayConstructor | BigUint64ArrayConstructor} */\n\t\tvar TypedArray = global[typedArray];\n\t\tif (isCallable(TypedArray)) {\n\t\t\tvar length = 10;\n\t\t\tvar arr = new TypedArray(length);\n\t\t\tt.equal(typedArrayLength(arr), length, 'new ' + typedArray + '(10) is typed array of length ' + length);\n\t\t} else {\n\t\t\tt.comment('# SKIP ' + typedArray + ' is not supported');\n\t\t}\n\t});\n\tt.end();\n});\n"
        }
    ]
}