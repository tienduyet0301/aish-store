{
    "sourceFile": "node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892616812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = exports.OIDC_VERSION = void 0;\nconst error_1 = require(\"../../error\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst azure_machine_workflow_1 = require(\"./mongodb_oidc/azure_machine_workflow\");\nconst gcp_machine_workflow_1 = require(\"./mongodb_oidc/gcp_machine_workflow\");\nconst k8s_machine_workflow_1 = require(\"./mongodb_oidc/k8s_machine_workflow\");\nconst token_cache_1 = require(\"./mongodb_oidc/token_cache\");\nconst token_machine_workflow_1 = require(\"./mongodb_oidc/token_machine_workflow\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** The current version of OIDC implementation. */\nexports.OIDC_VERSION = 1;\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('test', () => new token_machine_workflow_1.TokenMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('azure', () => new azure_machine_workflow_1.AzureMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('gcp', () => new gcp_machine_workflow_1.GCPMachineWorkflow(new token_cache_1.TokenCache()));\nexports.OIDC_WORKFLOWS.set('k8s', () => new k8s_machine_workflow_1.K8SMachineWorkflow(new token_cache_1.TokenCache()));\n/**\n * OIDC auth provider.\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor(workflow) {\n        super();\n        if (!workflow) {\n            throw new error_1.MongoInvalidArgumentError('No workflow provided to the OIDC auth provider.');\n        }\n        this.workflow = workflow;\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate?.done && !reauthenticating) {\n            return;\n        }\n        const credentials = getCredentials(authContext);\n        if (reauthenticating) {\n            await this.workflow.reauthenticate(connection, credentials);\n        }\n        else {\n            await this.workflow.execute(connection, credentials, response);\n        }\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const { connection } = authContext;\n        const credentials = getCredentials(authContext);\n        const result = await this.workflow.speculativeAuth(connection, credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n//# sourceMappingURL=mongodb_oidc.js.map"
        }
    ]
}