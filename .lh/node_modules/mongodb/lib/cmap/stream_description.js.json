{
    "sourceFile": "node_modules/mongodb/lib/cmap/stream_description.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892618245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst common_1 = require(\"../sdam/common\");\nconst server_description_1 = require(\"../sdam/server_description\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.hello = null;\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n        this.serverConnectionId = null;\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.hello = response;\n        this.type = (0, server_description_1.parseServerType)(response);\n        if ('connectionId' in response) {\n            this.serverConnectionId = this.parseServerConnectionID(response.connectionId);\n        }\n        else {\n            this.serverConnectionId = null;\n        }\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n    /* @internal */\n    parseServerConnectionID(serverConnectionId) {\n        // Connection ids are always integral, so it's safe to coerce doubles as well as\n        // any integral type.\n        return bson_1.Long.isLong(serverConnectionId)\n            ? serverConnectionId.toBigInt()\n            : // @ts-expect-error: Doubles are coercible to number\n                BigInt(serverConnectionId);\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map"
        }
    ]
}