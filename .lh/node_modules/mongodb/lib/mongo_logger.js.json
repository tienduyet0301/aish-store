{
    "sourceFile": "node_modules/mongodb/lib/mongo_logger.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892621965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nexports.parseSeverityFromString = parseSeverityFromString;\nexports.createStdioLogger = createStdioLogger;\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nexports.defaultLogTransform = defaultLogTransform;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * @public\n * Severity levels align with unix syslog.\n * Most typical driver functions will log to debug.\n */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @public */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection',\n    CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (0, util_1.promisify)((log, cb) => {\n            const logLine = (0, util_1.inspect)(log, { compact: true, breakLength: Infinity });\n            stream.write(`${logLine}\\n`, 'utf-8', cb);\n            return;\n        })\n    };\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n    }\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n    return (parseSeverityFromString(clientOption) ??\n        parseSeverityFromString(environmentOption) ??\n        defaultSeverity);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength, options = {}) {\n    let strToTruncate = '';\n    let currentLength = 0;\n    const maxDocumentLengthEnsurer = function maxDocumentLengthEnsurer(key, value) {\n        if (currentLength >= maxDocumentLength) {\n            return undefined;\n        }\n        // Account for root document\n        if (key === '') {\n            // Account for starting brace\n            currentLength += 1;\n            return value;\n        }\n        // +4 accounts for 2 quotation marks, colon and comma after value\n        // Note that this potentially undercounts since it does not account for escape sequences which\n        // will have an additional backslash added to them once passed through JSON.stringify.\n        currentLength += key.length + 4;\n        if (value == null)\n            return value;\n        switch (typeof value) {\n            case 'string':\n                // +2 accounts for quotes\n                // Note that this potentially undercounts similarly to the key length calculation\n                currentLength += value.length + 2;\n                break;\n            case 'number':\n            case 'bigint':\n                currentLength += String(value).length;\n                break;\n            case 'boolean':\n                currentLength += value ? 4 : 5;\n                break;\n            case 'object':\n                if ((0, utils_1.isUint8Array)(value)) {\n                    // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n                    // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n                    // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n                    currentLength += (22 + value.byteLength + value.byteLength * 0.33 + 18) | 0;\n                }\n                else if ('_bsontype' in value) {\n                    const v = value;\n                    switch (v._bsontype) {\n                        case 'Int32':\n                            currentLength += String(v.value).length;\n                            break;\n                        case 'Double':\n                            // Account for representing integers as <value>.0\n                            currentLength +=\n                                (v.value | 0) === v.value ? String(v.value).length + 2 : String(v.value).length;\n                            break;\n                        case 'Long':\n                            currentLength += v.toString().length;\n                            break;\n                        case 'ObjectId':\n                            // '{\"$oid\":\"XXXXXXXXXXXXXXXXXXXXXXXX\"}'\n                            currentLength += 35;\n                            break;\n                        case 'MaxKey':\n                        case 'MinKey':\n                            // '{\"$maxKey\":1}' or '{\"$minKey\":1}'\n                            currentLength += 13;\n                            break;\n                        case 'Binary':\n                            // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n                            // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n                            // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n                            currentLength += (22 + value.position + value.position * 0.33 + 18) | 0;\n                            break;\n                        case 'Timestamp':\n                            // '{\"$timestamp\":{\"t\":<t>,\"i\":<i>}}'\n                            currentLength += 19 + String(v.t).length + 5 + String(v.i).length + 2;\n                            break;\n                        case 'Code':\n                            // '{\"$code\":\"<code>\"}' or '{\"$code\":\"<code>\",\"$scope\":<scope>}'\n                            if (v.scope == null) {\n                                currentLength += v.code.length + 10 + 2;\n                            }\n                            else {\n                                // Ignoring actual scope object, so this undercounts by a significant amount\n                                currentLength += v.code.length + 10 + 11;\n                            }\n                            break;\n                        case 'BSONRegExp':\n                            // '{\"$regularExpression\":{\"pattern\":\"<pattern>\",\"options\":\"<options>\"}}'\n                            currentLength += 34 + v.pattern.length + 13 + v.options.length + 3;\n                            break;\n                    }\n                }\n        }\n        return value;\n    };\n    if (typeof value === 'string') {\n        strToTruncate = value;\n    }\n    else if (typeof value === 'function') {\n        strToTruncate = value.name;\n    }\n    else {\n        try {\n            if (maxDocumentLength !== 0) {\n                strToTruncate = bson_1.EJSON.stringify(value, maxDocumentLengthEnsurer, 0, options);\n            }\n            else {\n                strToTruncate = bson_1.EJSON.stringify(value, options);\n            }\n        }\n        catch (e) {\n            strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n        }\n    }\n    // handle truncation that occurs in the middle of multi-byte codepoints\n    if (maxDocumentLength !== 0 &&\n        strToTruncate.length > maxDocumentLength &&\n        strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n            strToTruncate.codePointAt(maxDocumentLength - 1)) {\n        maxDocumentLength--;\n        if (maxDocumentLength === 0) {\n            return '';\n        }\n    }\n    return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n        ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n        : strToTruncate;\n}\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n    log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n    log.operation = operation;\n    log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n    log.message = message;\n    return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    log.databaseName = commandEvent.databaseName;\n    log.serverConnectionId = commandEvent.serverConnectionId;\n    return log;\n}\nfunction attachConnectionFields(log, event) {\n    const { host, port } = utils_1.HostAddress.fromString(event.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n    log.topologyId = sdamEvent.topologyId;\n    return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n    const { awaited, connectionId } = serverHeartbeatEvent;\n    log.awaited = awaited;\n    log.driverConnectionId = serverHeartbeatEvent.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.SERVER_SELECTION_STARTED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            return log;\n        case constants_1.SERVER_SELECTION_FAILED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.SERVER_SELECTION_SUCCEEDED:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.serverHost = logObject.serverHost;\n            log.serverPort = logObject.serverPort;\n            return log;\n        case constants_1.WAITING_FOR_SUITABLE_SERVER:\n            log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n            log.remainingTimeMS = logObject.remainingTimeMS;\n            return log;\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message ?? '(redacted)';\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId?.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            log.durationMS = logObject.durationMS;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.SERVER_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Starting server monitoring';\n            return log;\n        case constants_1.SERVER_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Stopped server monitoring';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_STARTED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat started';\n            return log;\n        case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat succeeded';\n            log.durationMS = logObject.duration;\n            log.serverConnectionId = logObject.serverConnectionId;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n            return log;\n        case constants_1.SERVER_HEARTBEAT_FAILED:\n            log = attachSDAMFields(log, logObject);\n            log = attachServerHeartbeatFields(log, logObject);\n            log.message = 'Server heartbeat failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure?.message;\n            return log;\n        case constants_1.TOPOLOGY_OPENING:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Starting topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_CLOSED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Stopped topology monitoring';\n            return log;\n        case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n            log = attachSDAMFields(log, logObject);\n            log.message = 'Topology description changed';\n            log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n            log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        this.pendingLog = null;\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n        this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n        this.severities = this.createLoggingSeverities();\n    }\n    createLoggingSeverities() {\n        const severities = Object();\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            severities[component] = {};\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                severities[component][severityLevel] =\n                    compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n            }\n        }\n        return severities;\n    }\n    turnOffSeverities() {\n        for (const component of Object.values(exports.MongoLoggableComponent)) {\n            this.componentSeverities[component] = exports.SeverityLevel.OFF;\n            for (const severityLevel of Object.values(exports.SeverityLevel)) {\n                this.severities[component][severityLevel] = false;\n            }\n        }\n    }\n    logWriteFailureHandler(error) {\n        if (this.logDestinationIsStdErr) {\n            this.turnOffSeverities();\n            this.clearPendingLog();\n            return;\n        }\n        this.logDestination = createStdioLogger(process.stderr);\n        this.logDestinationIsStdErr = true;\n        this.clearPendingLog();\n        this.error(exports.MongoLoggableComponent.CLIENT, {\n            toLog: function () {\n                return {\n                    message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n                    error: error.message\n                };\n            }\n        });\n        this.turnOffSeverities();\n        this.clearPendingLog();\n    }\n    clearPendingLog() {\n        this.pendingLog = null;\n    }\n    willLog(component, severity) {\n        if (severity === exports.SeverityLevel.OFF)\n            return false;\n        return this.severities[component][severity];\n    }\n    log(severity, component, message) {\n        if (!this.willLog(component, severity))\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n            this.pendingLog = this.pendingLog\n                .then(() => this.logDestination.write(logMessage))\n                .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            return;\n        }\n        try {\n            const logResult = this.logDestination.write(logMessage);\n            if ((0, utils_1.isPromiseLike)(logResult)) {\n                this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n            }\n        }\n        catch (error) {\n            this.logWriteFailureHandler(error);\n        }\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolvedLogPath.mongodbLogPath,\n            mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n        };\n        const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n        return {\n            componentSeverities: {\n                command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n                topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n                serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n                connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n                client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n                default: defaultSeverity\n            },\n            maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ??\n                (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n                1000,\n            logDestination: combinedOptions.mongodbLogPath,\n            logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map"
        }
    ]
}