{
    "sourceFile": "node_modules/mongodb/lib/explain.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892620786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExplainableCursor = exports.Explain = exports.ExplainVerbosity = void 0;\nexports.validateExplainTimeoutOptions = validateExplainTimeoutOptions;\nexports.decorateWithExplain = decorateWithExplain;\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst error_1 = require(\"./error\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity, maxTimeMS) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n        this.maxTimeMS = maxTimeMS;\n    }\n    static fromOptions({ explain } = {}) {\n        if (explain == null)\n            return;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        const { verbosity, maxTimeMS } = explain;\n        return new Explain(verbosity, maxTimeMS);\n    }\n}\nexports.Explain = Explain;\nfunction validateExplainTimeoutOptions(options, explain) {\n    const { maxTimeMS, timeoutMS } = options;\n    if (timeoutMS != null && (maxTimeMS != null || explain?.maxTimeMS != null)) {\n        throw new error_1.MongoAPIError('Cannot use maxTimeMS with timeoutMS for explain commands.');\n    }\n}\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    const { verbosity, maxTimeMS } = explain;\n    const baseCommand = { explain: command, verbosity };\n    if (typeof maxTimeMS === 'number') {\n        baseCommand.maxTimeMS = maxTimeMS;\n    }\n    return baseCommand;\n}\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nclass ExplainableCursor extends abstract_cursor_1.AbstractCursor {\n    resolveExplainTimeoutOptions(verbosity, options) {\n        let explain;\n        let timeout;\n        if (verbosity == null && options == null) {\n            explain = undefined;\n            timeout = undefined;\n        }\n        else if (verbosity != null && options == null) {\n            explain =\n                typeof verbosity !== 'object'\n                    ? verbosity\n                    : 'verbosity' in verbosity\n                        ? verbosity\n                        : undefined;\n            timeout = typeof verbosity === 'object' && 'timeoutMS' in verbosity ? verbosity : undefined;\n        }\n        else {\n            // @ts-expect-error TS isn't smart enough to determine that if both options are provided, the first is explain options\n            explain = verbosity;\n            timeout = options;\n        }\n        return { timeout, explain };\n    }\n}\nexports.ExplainableCursor = ExplainableCursor;\n//# sourceMappingURL=explain.js.map"
        }
    ]
}