{
    "sourceFile": "node_modules/mongodb/lib/operations/client_bulk_write/client_bulk_write.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892622603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientBulkWriteOperation = void 0;\nconst beta_1 = require(\"../../beta\");\nconst responses_1 = require(\"../../cmap/wire_protocol/responses\");\nconst utils_1 = require(\"../../utils\");\nconst command_1 = require(\"../command\");\nconst operation_1 = require(\"../operation\");\n/**\n * Executes a single client bulk write operation within a potential batch.\n * @internal\n */\nclass ClientBulkWriteOperation extends command_1.CommandOperation {\n    get commandName() {\n        return 'bulkWrite';\n    }\n    constructor(commandBuilder, options) {\n        super(undefined, options);\n        this.commandBuilder = commandBuilder;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    resetBatch() {\n        return this.commandBuilder.resetBatch();\n    }\n    get canRetryWrite() {\n        return this.commandBuilder.isBatchRetryable;\n    }\n    /**\n     * Execute the command. Superclass will handle write concern, etc.\n     * @param server - The server.\n     * @param session - The session.\n     * @returns The response.\n     */\n    async execute(server, session, timeoutContext) {\n        let command;\n        if (server.description.type === beta_1.ServerType.LoadBalancer) {\n            if (session) {\n                let connection;\n                if (!session.pinnedConnection) {\n                    // Checkout a connection to build the command.\n                    connection = await server.pool.checkOut({ timeoutContext });\n                    // Pin the connection to the session so it get used to execute the command and we do not\n                    // perform a double check-in/check-out.\n                    session.pin(connection);\n                }\n                else {\n                    connection = session.pinnedConnection;\n                }\n                command = this.commandBuilder.buildBatch(connection.hello?.maxMessageSizeBytes, connection.hello?.maxWriteBatchSize, connection.hello?.maxBsonObjectSize);\n            }\n            else {\n                throw new beta_1.MongoClientBulkWriteExecutionError('Session provided to the client bulk write operation must be present.');\n            }\n        }\n        else {\n            // At this point we have a server and the auto connect code has already\n            // run in executeOperation, so the server description will be populated.\n            // We can use that to build the command.\n            if (!server.description.maxWriteBatchSize ||\n                !server.description.maxMessageSizeBytes ||\n                !server.description.maxBsonObjectSize) {\n                throw new beta_1.MongoClientBulkWriteExecutionError('In order to execute a client bulk write, both maxWriteBatchSize, maxMessageSizeBytes and maxBsonObjectSize must be provided by the servers hello response.');\n            }\n            command = this.commandBuilder.buildBatch(server.description.maxMessageSizeBytes, server.description.maxWriteBatchSize, server.description.maxBsonObjectSize);\n        }\n        // Check after the batch is built if we cannot retry it and override the option.\n        if (!this.canRetryWrite) {\n            this.options.willRetryWrite = false;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext, responses_1.ClientBulkWriteCursorResponse);\n    }\n}\nexports.ClientBulkWriteOperation = ClientBulkWriteOperation;\n// Skipping the collation as it goes on the individual ops.\n(0, operation_1.defineAspects)(ClientBulkWriteOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION,\n    operation_1.Aspect.CURSOR_CREATING,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.COMMAND_BATCHING\n]);\n//# sourceMappingURL=client_bulk_write.js.map"
        }
    ]
}