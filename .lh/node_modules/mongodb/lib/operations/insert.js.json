{
    "sourceFile": "node_modules/mongodb/lib/operations/insert.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892625092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst bulk_write_1 = require(\"./bulk_write\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session, timeoutContext) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return await super.executeCommand(server, session, command, timeoutContext);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, utils_1.maybeAddIdToDocuments)(collection, [doc], options), options);\n    }\n    async execute(server, session, timeoutContext) {\n        const res = await super.execute(server, session, timeoutContext);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    get commandName() {\n        return 'insert';\n    }\n    async execute(server, session, timeoutContext) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(document => ({\n            insertOne: { document }\n        })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session, timeoutContext);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map"
        }
    ]
}