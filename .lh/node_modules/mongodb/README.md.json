{
    "sourceFile": "node_modules/mongodb/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892632072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# MongoDB Node.js Driver\n\nThe official [MongoDB](https://www.mongodb.com/) driver for Node.js.\n\n**Upgrading to version 6? Take a look at our [upgrade guide here](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/CHANGES_6.0.0.md)!**\n\n## Quick Links\n\n| Site                     | Link                                                                                                                                  |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------- |\n| Documentation            | [www.mongodb.com/docs/drivers/node](https://www.mongodb.com/docs/drivers/node)                                                        |\n| API Docs                 | [mongodb.github.io/node-mongodb-native](https://mongodb.github.io/node-mongodb-native)                                                |\n| `npm` package            | [www.npmjs.com/package/mongodb](https://www.npmjs.com/package/mongodb)                                                                |\n| MongoDB                  | [www.mongodb.com](https://www.mongodb.com)                                                                                            |\n| MongoDB University       | [learn.mongodb.com](https://learn.mongodb.com/catalog?labels=%5B%22Language%22%5D&values=%5B%22Node.js%22%5D)                         |\n| MongoDB Developer Center | [www.mongodb.com/developer](https://www.mongodb.com/developer/languages/javascript/)                                                  |\n| Stack Overflow           | [stackoverflow.com](https://stackoverflow.com/search?q=%28%5Btypescript%5D+or+%5Bjavascript%5D+or+%5Bnode.js%5D%29+and+%5Bmongodb%5D) |\n| Source Code              | [github.com/mongodb/node-mongodb-native](https://github.com/mongodb/node-mongodb-native)                                              |\n| Upgrade to v6            | [etc/notes/CHANGES_6.0.0.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/CHANGES_6.0.0.md)                     |\n| Contributing             | [CONTRIBUTING.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/CONTRIBUTING.md)                                           |\n| Changelog                | [HISTORY.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/HISTORY.md)                                                     |\n\n\n\n### Release Integrity\n\nReleases are created automatically and signed using the [Node team's GPG key](https://pgp.mongodb.com/node-driver.asc). This applies to the git tag as well as all release packages provided as part of a GitHub release. To verify the provided packages, download the key and import it using gpg:\n\n```shell\ngpg --import node-driver.asc\n```\n\nThe GitHub release contains a detached signature file for the NPM package (named\n`mongodb-X.Y.Z.tgz.sig`).\n\nThe following command returns the link npm package.\n```shell\nnpm view mongodb@vX.Y.Z dist.tarball\n```\n\nUsing the result of the above command, a `curl` command can return the official npm package for the release.\n\nTo verify the integrity of the downloaded package, run the following command:\n```shell\ngpg --verify mongodb-X.Y.Z.tgz.sig mongodb-X.Y.Z.tgz\n```\n\n>[!Note]\nNo verification is done when using npm to install the package. The contents of the Github tarball and npm's tarball are identical.\n\n### Bugs / Feature Requests\n\nThink youâ€™ve found a bug? Want to see a new feature in `node-mongodb-native`? Please open a\ncase in our issue management tool, JIRA:\n\n- Create an account and login [jira.mongodb.org](https://jira.mongodb.org).\n- Navigate to the NODE project [jira.mongodb.org/browse/NODE](https://jira.mongodb.org/browse/NODE).\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\n### Support / Feedback\n\nFor issues with, questions about, or feedback for the Node.js driver, please look into our [support channels](https://www.mongodb.com/docs/manual/support). Please do not email any of the driver developers directly with issues or questions - you're more likely to get an answer on the [MongoDB Community Forums](https://community.mongodb.com/tags/c/drivers-odms-connectors/7/node-js-driver).\n\n### Change Log\n\nChange history can be found in [`HISTORY.md`](https://github.com/mongodb/node-mongodb-native/blob/HEAD/HISTORY.md).\n\n### Compatibility\n\nThe driver currently supports 4.0+ servers.\n\n** 4.0 support is deprecated and support will be removed in an upcoming driver release. **\n\nFor exhaustive server and runtime version compatibility matrices, please refer to the following links:\n\n- [MongoDB](https://www.mongodb.com/docs/drivers/node/current/compatibility/#mongodb-compatibility)\n- [NodeJS](https://www.mongodb.com/docs/drivers/node/current/compatibility/#language-compatibility)\n\n#### Component Support Matrix\n\nThe following table describes add-on component version compatibility for the Node.js driver. Only packages with versions in these supported ranges are stable when used in combination.\n\n| Component                                                                            | `mongodb@3.x`      | `mongodb@4.x`      | `mongodb@5.x`      | `mongodb@<6.12` | `mongodb@>=6.12`   |\n| ------------------------------------------------------------------------------------ | ------------------ | ------------------ | ------------------ | --------------- | ------------------ |\n| [bson](https://www.npmjs.com/package/bson)                                           | ^1.0.0             | ^4.0.0             | ^5.0.0             | ^6.0.0          | ^6.0.0             |\n| [bson-ext](https://www.npmjs.com/package/bson-ext)                                   | ^1.0.0 \\|\\| ^2.0.0 | ^4.0.0             | N/A                | N/A             | N/A                |\n| [kerberos](https://www.npmjs.com/package/kerberos)                                   | ^1.0.0             | ^1.0.0 \\|\\| ^2.0.0 | ^1.0.0 \\|\\| ^2.0.0 | ^2.0.1          | ^2.0.1             |\n| [mongodb-client-encryption](https://www.npmjs.com/package/mongodb-client-encryption) | ^1.0.0             | ^1.0.0 \\|\\| ^2.0.0 | ^2.3.0             | ^6.0.0          | ^6.0.0             |\n| [mongodb-legacy](https://www.npmjs.com/package/mongodb-legacy)                       | N/A                | ^4.0.0             | ^5.0.0             | ^6.0.0          | ^6.0.0             |\n| [@mongodb-js/zstd](https://www.npmjs.com/package/@mongodb-js/zstd)                   | N/A                | ^1.0.0             | ^1.0.0             | ^1.1.0          | ^1.1.0 \\|\\| ^2.0.0 |\n\n\n#### Typescript Version\n\nWe recommend using the latest version of typescript, however we currently ensure the driver's public types compile against `typescript@4.4.0`.\nThis is the lowest typescript version guaranteed to work with our driver: older versions may or may not work - use at your own risk.\nSince typescript [does not restrict breaking changes to major versions](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes), we consider this support best effort.\nIf you run into any unexpected compiler failures against our supported TypeScript versions, please let us know by filing an issue on our [JIRA](https://jira.mongodb.org/browse/NODE).\n\nAdditionally, our Typescript types are compatible with the ECMAScript standard for our minimum supported Node version.  Currently, our Typescript targets es2021.\n\n## Installation\n\nThe recommended way to get started using the Node.js 5.x driver is by using the `npm` (Node Package Manager) to install the dependency in your project.\n\nAfter you've created your own project using `npm init`, you can run:\n\n```bash\nnpm install mongodb\n```\n\nThis will download the MongoDB driver and add a dependency entry in your `package.json` file.\n\nIf you are a Typescript user, you will need the Node.js type definitions to use the driver's definitions:\n\n```sh\nnpm install -D @types/node\n```\n\n## Driver Extensions\n\nThe MongoDB driver can optionally be enhanced by the following feature packages:\n\nMaintained by MongoDB:\n\n- Zstd network compression - [@mongodb-js/zstd](https://github.com/mongodb-js/zstd)\n- MongoDB field level and queryable encryption - [mongodb-client-encryption](https://github.com/mongodb/libmongocrypt#readme)\n- GSSAPI / SSPI / Kerberos authentication - [kerberos](https://github.com/mongodb-js/kerberos)\n\nSome of these packages include native C++ extensions.\nConsult the [trouble shooting guide here](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/native-extensions.md) if you run into compilation issues.\n\nThird party:\n\n- Snappy network compression - [snappy](https://github.com/Brooooooklyn/snappy)\n- AWS authentication - [@aws-sdk/credential-providers](https://github.com/aws/aws-sdk-js-v3/tree/main/packages/credential-providers)\n\n## Quick Start\n\nThis guide will show you how to set up a simple application using Node.js and MongoDB. Its scope is only how to set up the driver and perform the simple CRUD operations. For more in-depth coverage, see the [official documentation](https://www.mongodb.com/docs/drivers/node/).\n\n### Create the `package.json` file\n\nFirst, create a directory where your application will live.\n\n```bash\nmkdir myProject\ncd myProject\n```\n\nEnter the following command and answer the questions to create the initial structure for your new project:\n\n```bash\nnpm init -y\n```\n\nNext, install the driver as a dependency.\n\n```bash\nnpm install mongodb\n```\n\n### Start a MongoDB Server\n\nFor complete MongoDB installation instructions, see [the manual](https://www.mongodb.com/docs/manual/installation/).\n\n1. Download the right MongoDB version from [MongoDB](https://www.mongodb.org/downloads)\n2. Create a database directory (in this case under **/data**).\n3. Install and start a `mongod` process.\n\n```bash\nmongod --dbpath=/data\n```\n\nYou should see the **mongod** process start up and print some status information.\n\n### Connect to MongoDB\n\nCreate a new **app.js** file and add the following code to try out some basic CRUD\noperations using the MongoDB driver.\n\nAdd code to connect to the server and the database **myProject**:\n\n> **NOTE:** Resolving DNS Connection issues\n>\n> Node.js 18 changed the default DNS resolution ordering from always prioritizing IPv4 to the ordering\n> returned by the DNS provider. In some environments, this can result in `localhost` resolving to\n> an IPv6 address instead of IPv4 and a consequent failure to connect to the server.\n>\n> This can be resolved by:\n>\n> - specifying the IP address family using the MongoClient `family` option (`MongoClient(<uri>, { family: 4 } )`)\n> - launching mongod or mongos with the ipv6 flag enabled ([--ipv6 mongod option documentation](https://www.mongodb.com/docs/manual/reference/program/mongod/#std-option-mongod.--ipv6))\n> - using a host of `127.0.0.1` in place of localhost\n> - specifying the DNS resolution ordering with the `--dns-resolution-order` Node.js command line argument (e.g. `node --dns-resolution-order=ipv4first`)\n\n```js\nconst { MongoClient } = require('mongodb');\n// or as an es module:\n// import { MongoClient } from 'mongodb'\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\nconst client = new MongoClient(url);\n\n// Database Name\nconst dbName = 'myProject';\n\nasync function main() {\n  // Use connect method to connect to the server\n  await client.connect();\n  console.log('Connected successfully to server');\n  const db = client.db(dbName);\n  const collection = db.collection('documents');\n\n  // the following code examples can be pasted here...\n\n  return 'done.';\n}\n\nmain()\n  .then(console.log)\n  .catch(console.error)\n  .finally(() => client.close());\n```\n\nRun your app from the command line with:\n\n```bash\nnode app.js\n```\n\nThe application should print **Connected successfully to server** to the console.\n\n### Insert a Document\n\nAdd to **app.js** the following function which uses the **insertMany**\nmethod to add three documents to the **documents** collection.\n\n```js\nconst insertResult = await collection.insertMany([{ a: 1 }, { a: 2 }, { a: 3 }]);\nconsole.log('Inserted documents =>', insertResult);\n```\n\nThe **insertMany** command returns an object with information about the insert operations.\n\n### Find All Documents\n\nAdd a query that returns all the documents.\n\n```js\nconst findResult = await collection.find({}).toArray();\nconsole.log('Found documents =>', findResult);\n```\n\nThis query returns all the documents in the **documents** collection.\nIf you add this below the insertMany example, you'll see the documents you've inserted.\n\n### Find Documents with a Query Filter\n\nAdd a query filter to find only documents which meet the query criteria.\n\n```js\nconst filteredDocs = await collection.find({ a: 3 }).toArray();\nconsole.log('Found documents filtered by { a: 3 } =>', filteredDocs);\n```\n\nOnly the documents which match `'a' : 3` should be returned.\n\n### Update a document\n\nThe following operation updates a document in the **documents** collection.\n\n```js\nconst updateResult = await collection.updateOne({ a: 3 }, { $set: { b: 1 } });\nconsole.log('Updated documents =>', updateResult);\n```\n\nThe method updates the first document where the field **a** is equal to **3** by adding a new field **b** to the document set to **1**. `updateResult` contains information about whether there was a matching document to update or not.\n\n### Remove a document\n\nRemove the document where the field **a** is equal to **3**.\n\n```js\nconst deleteResult = await collection.deleteMany({ a: 3 });\nconsole.log('Deleted documents =>', deleteResult);\n```\n\n### Index a Collection\n\n[Indexes](https://www.mongodb.com/docs/manual/indexes/) can improve your application's\nperformance. The following function creates an index on the **a** field in the\n**documents** collection.\n\n```js\nconst indexName = await collection.createIndex({ a: 1 });\nconsole.log('index name =', indexName);\n```\n\nFor more detailed information, see the [indexing strategies page](https://www.mongodb.com/docs/manual/applications/indexes/).\n\n## Error Handling\n\nIf you need to filter certain errors from our driver, we have a helpful tree of errors described in [etc/notes/errors.md](https://github.com/mongodb/node-mongodb-native/blob/HEAD/etc/notes/errors.md).\n\nIt is our recommendation to use `instanceof` checks on errors and to avoid relying on parsing `error.message` and `error.name` strings in your code.\nWe guarantee `instanceof` checks will pass according to semver guidelines, but errors may be sub-classed or their messages may change at any time, even patch releases, as we see fit to increase the helpfulness of the errors.\n\nAny new errors we add to the driver will directly extend an existing error class and no existing error will be moved to a different parent class outside of a major release.\nThis means `instanceof` will always be able to accurately capture the errors that our driver throws.\n\n```typescript\nconst client = new MongoClient(url);\nawait client.connect();\nconst collection = client.db().collection('collection');\n\ntry {\n  await collection.insertOne({ _id: 1 });\n  await collection.insertOne({ _id: 1 }); // duplicate key error\n} catch (error) {\n  if (error instanceof MongoServerError) {\n    console.log(`Error worth logging: ${error}`); // special case for some reason\n  }\n  throw error; // still want to crash\n}\n```\n\n## Nightly releases\n\nIf you need to test with a change from the latest `main` branch, our `mongodb` npm package has nightly versions released under the `nightly` tag.\n\n```sh\nnpm install mongodb@nightly\n```\n\nNightly versions are published regardless of testing outcome.\nThis means there could be semantic breakages or partially implemented features.\nThe nightly build is not suitable for production use.\n\n## Next Steps\n\n- [MongoDB Documentation](https://www.mongodb.com/docs/manual/)\n- [MongoDB Node Driver Documentation](https://www.mongodb.com/docs/drivers/node/)\n- [Read about Schemas](https://www.mongodb.com/docs/manual/core/data-modeling-introduction/)\n- [Star us on GitHub](https://github.com/mongodb/node-mongodb-native)\n\n## License\n\n[Apache 2.0](LICENSE.md)\n\nÂ© 2012-present MongoDB [Contributors](https://github.com/mongodb/node-mongodb-native/blob/HEAD/CONTRIBUTORS.md) \\\nÂ© 2009-2012 Christian Amor Kvalheim\n"
        }
    ]
}