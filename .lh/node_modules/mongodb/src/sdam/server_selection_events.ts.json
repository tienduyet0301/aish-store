{
    "sourceFile": "node_modules/mongodb/src/sdam/server_selection_events.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892636981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { HostAddress } from '.././utils';\nimport {\n  SERVER_SELECTION_FAILED,\n  SERVER_SELECTION_STARTED,\n  SERVER_SELECTION_SUCCEEDED,\n  WAITING_FOR_SUITABLE_SERVER\n} from '../constants';\nimport { type ReadPreference } from '../read_preference';\nimport { type ServerSelector } from './server_selection';\nimport type { TopologyDescription } from './topology_description';\n\n/**\n * The base export class for all logs published from server selection\n * @internal\n * @category Log Type\n */\nexport abstract class ServerSelectionEvent {\n  /** String representation of the selector being used to select the server.\n   *  Defaults to 'custom selector' for application-provided custom selector case.\n   */\n  selector: string | ReadPreference | ServerSelector;\n  /** The name of the operation for which a server is being selected.  */\n  operation: string;\n  /** \tThe current topology description.  */\n  topologyDescription: TopologyDescription;\n\n  /** @internal */\n  abstract name:\n    | typeof SERVER_SELECTION_STARTED\n    | typeof SERVER_SELECTION_SUCCEEDED\n    | typeof SERVER_SELECTION_FAILED\n    | typeof WAITING_FOR_SUITABLE_SERVER;\n\n  abstract message: string;\n\n  /** @internal */\n  constructor(\n    selector: string | ReadPreference | ServerSelector,\n    topologyDescription: TopologyDescription,\n    operation: string\n  ) {\n    this.selector = selector;\n    this.operation = operation;\n    this.topologyDescription = topologyDescription;\n  }\n}\n\n/**\n * An event published when server selection starts\n * @internal\n * @category Event\n */\nexport class ServerSelectionStartedEvent extends ServerSelectionEvent {\n  /** @internal */\n  name = SERVER_SELECTION_STARTED;\n  message = 'Server selection started';\n\n  /** @internal */\n  constructor(\n    selector: string | ReadPreference | ServerSelector,\n    topologyDescription: TopologyDescription,\n    operation: string\n  ) {\n    super(selector, topologyDescription, operation);\n  }\n}\n\n/**\n * An event published when a server selection fails\n * @internal\n * @category Event\n */\nexport class ServerSelectionFailedEvent extends ServerSelectionEvent {\n  /** @internal */\n  name = SERVER_SELECTION_FAILED;\n  message = 'Server selection failed';\n  /** Representation of the error the driver will throw regarding server selection failing. */\n  failure: Error;\n\n  /** @internal */\n  constructor(\n    selector: string | ReadPreference | ServerSelector,\n    topologyDescription: TopologyDescription,\n    error: Error,\n    operation: string\n  ) {\n    super(selector, topologyDescription, operation);\n    this.failure = error;\n  }\n}\n\n/**\n * An event published when server selection succeeds\n * @internal\n * @category Event\n */\nexport class ServerSelectionSucceededEvent extends ServerSelectionEvent {\n  /** @internal */\n  name = SERVER_SELECTION_SUCCEEDED;\n  message = 'Server selection succeeded';\n  /** \tThe hostname, IP address, or Unix domain socket path for the selected server. */\n  serverHost: string;\n  /** The port for the selected server. Optional; not present for Unix domain sockets. When the user does not specify a port and the default (27017) is used, the driver SHOULD include it here. */\n  serverPort: number | undefined;\n\n  /** @internal */\n  constructor(\n    selector: string | ReadPreference | ServerSelector,\n    topologyDescription: TopologyDescription,\n    address: string,\n    operation: string\n  ) {\n    super(selector, topologyDescription, operation);\n    const { host, port } = HostAddress.fromString(address).toHostPort();\n    this.serverHost = host;\n    this.serverPort = port;\n  }\n}\n\n/**\n * An event published when server selection is waiting for a suitable server to become available\n * @internal\n * @category Event\n */\nexport class WaitingForSuitableServerEvent extends ServerSelectionEvent {\n  /** @internal */\n  name = WAITING_FOR_SUITABLE_SERVER;\n  message = 'Waiting for suitable server to become available';\n  /** The remaining time left until server selection will time out. */\n  remainingTimeMS: number;\n\n  /** @internal */\n  constructor(\n    selector: string | ReadPreference | ServerSelector,\n    topologyDescription: TopologyDescription,\n    remainingTimeMS: number,\n    operation: string\n  ) {\n    super(selector, topologyDescription, operation);\n    this.remainingTimeMS = remainingTimeMS;\n  }\n}\n"
        }
    ]
}