{
    "sourceFile": "node_modules/mongodb/src/cmap/connection_pool_events.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892634129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ObjectId } from '../bson';\nimport {\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from '../constants';\nimport type { MongoError } from '../error';\nimport { now } from '../utils';\nimport type { Connection } from './connection';\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport abstract class ConnectionPoolMonitoringEvent {\n  /** A timestamp when the event was created  */\n  time: Date;\n  /** The address (host/port pair) of the pool */\n  address: string;\n  /** @internal */\n  abstract name:\n    | typeof CONNECTION_CHECK_OUT_FAILED\n    | typeof CONNECTION_CHECK_OUT_STARTED\n    | typeof CONNECTION_CHECKED_IN\n    | typeof CONNECTION_CHECKED_OUT\n    | typeof CONNECTION_CLOSED\n    | typeof CONNECTION_CREATED\n    | typeof CONNECTION_POOL_CLEARED\n    | typeof CONNECTION_POOL_CLOSED\n    | typeof CONNECTION_POOL_CREATED\n    | typeof CONNECTION_POOL_READY\n    | typeof CONNECTION_READY;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** The options used to create this connection pool */\n  options: Pick<\n    ConnectionPoolOptions,\n    'maxPoolSize' | 'minPoolSize' | 'maxConnecting' | 'maxIdleTimeMS' | 'waitQueueTimeoutMS'\n  >;\n  /** @internal */\n  name = CONNECTION_POOL_CREATED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n    const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } =\n      pool.options;\n    this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n  }\n}\n\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nexport class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  name = CONNECTION_POOL_READY;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  name = CONNECTION_POOL_CLOSED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** A monotonically increasing, per-pool id for the newly created connection */\n  connectionId: number | '<monitor>';\n  /** @internal */\n  name = CONNECTION_CREATED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: { id: number | '<monitor>' }) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /**\n   * The time it took to establish the connection.\n   * In accordance with the definition of establishment of a connection\n   * specified by `ConnectionPoolOptions.maxConnecting`,\n   * it is the time elapsed between emitting a `ConnectionCreatedEvent`\n   * and emitting this event as part of the same checking out.\n   *\n   * Naturally, when establishing a connection is part of checking out,\n   * this duration is not greater than\n   * `ConnectionCheckedOutEvent.duration`.\n   */\n  durationMS: number;\n  /** @internal */\n  name = CONNECTION_READY;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection, connectionCreatedEventTime: number) {\n    super(pool);\n    this.durationMS = now() - connectionCreatedEventTime;\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** The reason the connection was closed */\n  reason: string;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = CONNECTION_CLOSED;\n  /** @internal */\n  error: MongoError | null;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    connection: Pick<Connection, 'id' | 'serviceId'>,\n    reason: 'idle' | 'stale' | 'poolClosed' | 'error',\n    error?: MongoError\n  ) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason;\n    this.serviceId = connection.serviceId;\n    this.error = error ?? null;\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  name = CONNECTION_CHECK_OUT_STARTED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** The reason the attempt to check out failed */\n  reason: string;\n  /** @internal */\n  error?: MongoError;\n  /** @internal */\n  name = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * The time it took to check out the connection.\n   * More specifically, the time elapsed between\n   * emitting a `ConnectionCheckOutStartedEvent`\n   * and emitting this event as part of the same check out.\n   */\n  durationMS: number;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    reason: 'poolClosed' | 'timeout' | 'connectionError',\n    checkoutTime: number,\n    error?: MongoError\n  ) {\n    super(pool);\n    this.durationMS = now() - checkoutTime;\n    this.reason = reason;\n    this.error = error;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** @internal */\n  name = CONNECTION_CHECKED_OUT;\n  /**\n   * The time it took to check out the connection.\n   * More specifically, the time elapsed between\n   * emitting a `ConnectionCheckOutStartedEvent`\n   * and emitting this event as part of the same checking out.\n   *\n   */\n  durationMS: number;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection, checkoutTime: number) {\n    super(pool);\n    this.durationMS = now() - checkoutTime;\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** @internal */\n  name = CONNECTION_CHECKED_IN;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  serviceId?: ObjectId;\n\n  interruptInUseConnections?: boolean;\n  /** @internal */\n  name = CONNECTION_POOL_CLEARED;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}\n  ) {\n    super(pool);\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\n"
        }
    ]
}