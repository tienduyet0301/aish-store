{
    "sourceFile": "node_modules/mongodb/src/cmap/connection.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892634076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type Readable, Transform, type TransformCallback } from 'stream';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport {\n  type BSONSerializeOptions,\n  deserialize,\n  type DeserializeOptions,\n  type Document,\n  type ObjectId\n} from '../bson';\nimport { type AutoEncrypter } from '../client-side-encryption/auto_encrypter';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  kDecorateResult,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoOperationTimeoutError,\n  MongoParseError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoUnexpectedServerResponseError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { type MongoClientAuthProviders } from '../mongo_client_auth_providers';\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\nimport { type Abortable, type CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport { ServerType } from '../sdam/common';\nimport { applySession, type ClientSession, updateSessionFromResponse } from '../sessions';\nimport { type TimeoutContext, TimeoutError } from '../timeout';\nimport {\n  BufferPool,\n  calculateDurationInMs,\n  type Callback,\n  decorateDecryptionResult,\n  HostAddress,\n  maxWireVersion,\n  type MongoDBNamespace,\n  noop,\n  now,\n  once,\n  squashError,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { AuthContext } from './auth/auth_provider';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport {\n  OpCompressedRequest,\n  OpMsgRequest,\n  type OpMsgResponse,\n  OpQueryRequest,\n  type OpReply,\n  type WriteProtocolMessageType\n} from './commands';\nimport type { Stream } from './connect';\nimport type { ClientMetadata } from './handshake/client_metadata';\nimport { StreamDescription, type StreamDescriptionOptions } from './stream_description';\nimport { type CompressorName, decompressResponse } from './wire_protocol/compression';\nimport { onData } from './wire_protocol/on_data';\nimport {\n  CursorResponse,\n  MongoDBResponse,\n  type MongoDBResponseConstructor\n} from './wire_protocol/responses';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n  omitMaxTimeMS?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n\n  directConnection?: boolean;\n\n  /** @internal */\n  timeoutContext?: TimeoutContext;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: any;\n  credentials?: MongoCredentials;\n  /** @internal */\n  authProviders: MongoClientAuthProviders;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n  metadata: ClientMetadata;\n  /** @internal */\n  extendedMetadata: Promise<Document>;\n  /** @internal */\n  mongoLogger?: MongoLogger | undefined;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  const { remoteAddress, remotePort } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n\n  return uuidV4().toString('hex');\n}\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  public id: number | '<monitor>';\n  public address: string;\n  public lastHelloMS = -1;\n  public serverApi?: ServerApi;\n  public helloOk = false;\n  public authContext?: AuthContext;\n  public delayedTimeoutId: NodeJS.Timeout | null = null;\n  public generation: number;\n  public accessToken?: string;\n  public readonly description: Readonly<StreamDescription>;\n  /**\n   * Represents if the connection has been established:\n   *  - TCP handshake\n   *  - TLS negotiated\n   *  - mongodb handshake (saslStart, saslContinue), includes authentication\n   *\n   * Once connection is established, command logging can log events (if enabled)\n   */\n  public established: boolean;\n  /** Indicates that the connection (including underlying TCP socket) has been closed. */\n  public closed = false;\n\n  private lastUseTime: number;\n  private clusterTime: Document | null = null;\n  private error: Error | null = null;\n  private dataEvents: AsyncGenerator<Buffer, void, void> | null = null;\n\n  private readonly socketTimeoutMS: number;\n  private readonly monitorCommands: boolean;\n  private readonly socket: Stream;\n  private readonly messageStream: Readable;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n    this.on('error', noop);\n\n    this.socket = stream;\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.mongoLogger = options.mongoLogger;\n    this.established = false;\n\n    this.description = new StreamDescription(this.address, options);\n    this.generation = options.generation;\n    this.lastUseTime = now();\n\n    this.messageStream = this.socket\n      .on('error', this.onError.bind(this))\n      .pipe(new SizedMessageTransform({ connection: this }))\n      .on('error', this.onError.bind(this));\n    this.socket.on('close', this.onClose.bind(this));\n    this.socket.on('timeout', this.onTimeout.bind(this));\n\n    this.messageStream.pause();\n  }\n\n  public get hello() {\n    return this.description.hello;\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  public set hello(response: Document | null) {\n    this.description.receiveResponse(response);\n    Object.freeze(this.description);\n  }\n\n  public get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  public get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  public get idleTime(): number {\n    return calculateDurationInMs(this.lastUseTime);\n  }\n\n  private get hasSessionSupport(): boolean {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  private get supportsOpMsg(): boolean {\n    return (\n      this.description != null &&\n      maxWireVersion(this) >= 6 &&\n      !this.description.__nodejs_mock_server__\n    );\n  }\n\n  private get shouldEmitAndLogCommand(): boolean {\n    return (\n      (this.monitorCommands ||\n        (this.established &&\n          !this.authContext?.reauthenticating &&\n          this.mongoLogger?.willLog(MongoLoggableComponent.COMMAND, SeverityLevel.DEBUG))) ??\n      false\n    );\n  }\n\n  public markAvailable(): void {\n    this.lastUseTime = now();\n  }\n\n  public onError(error: Error) {\n    this.cleanup(error);\n  }\n\n  private onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new MongoNetworkError(message));\n  }\n\n  private onTimeout() {\n    this.delayedTimeoutId = setTimeout(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(new MongoNetworkTimeoutError(message, { beforeHandshake }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  public destroy(): void {\n    if (this.closed) {\n      return;\n    }\n\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new MongoNetworkError(message));\n  }\n\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  private cleanup(error: Error): void {\n    if (this.closed) {\n      return;\n    }\n\n    this.socket.destroy();\n    this.error = error;\n\n    this.dataEvents?.throw(error).then(undefined, squashError);\n    this.closed = true;\n    this.emit(Connection.CLOSE);\n  }\n\n  private prepareCommand(db: string, command: Document, options: CommandOptions) {\n    let cmd = { ...command };\n\n    const readPreference = getReadPreference(options);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (this.hasSessionSupport && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const sessionError = applySession(session, cmd, options);\n      if (sessionError) throw sessionError;\n    } else if (session?.explicit) {\n      throw new MongoCompatibilityError('Current topology does not support sessions');\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n\n    // For standalone, drivers MUST NOT set $readPreference.\n    if (this.description.type !== ServerType.Standalone) {\n      if (\n        !isSharded(this) &&\n        !this.description.loadBalanced &&\n        this.supportsOpMsg &&\n        options.directConnection === true &&\n        readPreference?.mode === 'primary'\n      ) {\n        // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n        // For all other types with a direct connection, if the read preference is 'primary'\n        // (driver sets 'primary' as default if no read preference is configured),\n        // the $readPreference MUST be set to 'primaryPreferred'\n        // to ensure that any server type can handle the request.\n        cmd.$readPreference = ReadPreference.primaryPreferred.toJSON();\n      } else if (isSharded(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n        // When sending a read operation via OP_QUERY and the $readPreference modifier,\n        // the query MUST be provided using the $query modifier.\n        cmd = {\n          $query: cmd,\n          $readPreference: readPreference.toJSON()\n        };\n      } else if (readPreference?.mode !== 'primary') {\n        // For mode 'primary', drivers MUST NOT set $readPreference.\n        // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n        // drivers MUST set $readPreference\n        cmd.$readPreference = readPreference.toJSON();\n      }\n    }\n\n    const commandOptions = {\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk(),\n      ...options\n    };\n\n    options.timeoutContext?.addMaxTimeMSToCommand(cmd, options);\n\n    const message = this.supportsOpMsg\n      ? new OpMsgRequest(db, cmd, commandOptions)\n      : new OpQueryRequest(db, cmd, commandOptions);\n\n    return message;\n  }\n\n  private async *sendWire(\n    message: WriteProtocolMessageType,\n    options: CommandOptions & Abortable,\n    responseType?: MongoDBResponseConstructor\n  ): AsyncGenerator<MongoDBResponse> {\n    this.throwIfAborted();\n\n    const timeout =\n      options.socketTimeoutMS ??\n      options?.timeoutContext?.getSocketTimeoutMS() ??\n      this.socketTimeoutMS;\n    this.socket.setTimeout(timeout);\n\n    try {\n      await this.writeCommand(message, {\n        agreedCompressor: this.description.compressor ?? 'none',\n        zlibCompressionLevel: this.description.zlibCompressionLevel,\n        timeoutContext: options.timeoutContext,\n        signal: options.signal\n      });\n\n      if (options.noResponse || message.moreToCome) {\n        yield MongoDBResponse.empty;\n        return;\n      }\n\n      this.throwIfAborted();\n\n      if (\n        options.timeoutContext?.csotEnabled() &&\n        options.timeoutContext.minRoundTripTime != null &&\n        options.timeoutContext.remainingTimeMS < options.timeoutContext.minRoundTripTime\n      ) {\n        throw new MongoOperationTimeoutError(\n          'Server roundtrip time is greater than the time remaining'\n        );\n      }\n\n      for await (const response of this.readMany(options)) {\n        this.socket.setTimeout(0);\n        const bson = response.parse();\n\n        const document = (responseType ?? MongoDBResponse).make(bson);\n\n        yield document;\n        this.throwIfAborted();\n\n        this.socket.setTimeout(timeout);\n      }\n    } finally {\n      this.socket.setTimeout(0);\n    }\n  }\n\n  private async *sendCommand(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions & Abortable,\n    responseType?: MongoDBResponseConstructor\n  ) {\n    options?.signal?.throwIfAborted();\n\n    const message = this.prepareCommand(ns.db, command, options);\n    let started = 0;\n    if (this.shouldEmitAndLogCommand) {\n      started = now();\n      this.emitAndLogCommand(\n        this.monitorCommands,\n        Connection.COMMAND_STARTED,\n        message.databaseName,\n        this.established,\n        new CommandStartedEvent(this, message, this.description.serverConnectionId)\n      );\n    }\n\n    // If `documentsReturnedIn` not set or raw is not enabled, use input bson options\n    // Otherwise, support raw flag. Raw only works for cursors that hardcode firstBatch/nextBatch fields\n    const bsonOptions: DeserializeOptions =\n      options.documentsReturnedIn == null || !options.raw\n        ? options\n        : {\n            ...options,\n            raw: false,\n            fieldsAsRaw: { [options.documentsReturnedIn]: true }\n          };\n\n    /** MongoDBResponse instance or subclass */\n    let document: MongoDBResponse | undefined = undefined;\n    /** Cached result of a toObject call */\n    let object: Document | undefined = undefined;\n    try {\n      this.throwIfAborted();\n      for await (document of this.sendWire(message, options, responseType)) {\n        object = undefined;\n        if (options.session != null) {\n          updateSessionFromResponse(options.session, document);\n        }\n\n        if (document.$clusterTime) {\n          this.clusterTime = document.$clusterTime;\n          this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n        }\n\n        if (document.ok === 0) {\n          if (options.timeoutContext?.csotEnabled() && document.isMaxTimeExpiredError) {\n            throw new MongoOperationTimeoutError('Server reported a timeout error', {\n              cause: new MongoServerError((object ??= document.toObject(bsonOptions)))\n            });\n          }\n          throw new MongoServerError((object ??= document.toObject(bsonOptions)));\n        }\n\n        if (this.shouldEmitAndLogCommand) {\n          this.emitAndLogCommand(\n            this.monitorCommands,\n            Connection.COMMAND_SUCCEEDED,\n            message.databaseName,\n            this.established,\n            new CommandSucceededEvent(\n              this,\n              message,\n              options.noResponse\n                ? undefined\n                : message.moreToCome\n                  ? { ok: 1 }\n                  : (object ??= document.toObject(bsonOptions)),\n              started,\n              this.description.serverConnectionId\n            )\n          );\n        }\n\n        if (responseType == null) {\n          yield (object ??= document.toObject(bsonOptions));\n        } else {\n          yield document;\n        }\n\n        this.throwIfAborted();\n      }\n    } catch (error) {\n      if (this.shouldEmitAndLogCommand) {\n        this.emitAndLogCommand(\n          this.monitorCommands,\n          Connection.COMMAND_FAILED,\n          message.databaseName,\n          this.established,\n          new CommandFailedEvent(this, message, error, started, this.description.serverConnectionId)\n        );\n      }\n      throw error;\n    }\n  }\n\n  public async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T\n  ): Promise<InstanceType<T>>;\n\n  public async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T | undefined\n  ): Promise<typeof responseType extends undefined ? Document : InstanceType<T>>;\n\n  public async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options?: CommandOptions\n  ): Promise<Document>;\n\n  public async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions & Abortable = {},\n    responseType?: MongoDBResponseConstructor\n  ): Promise<Document> {\n    this.throwIfAborted();\n    options.signal?.throwIfAborted();\n\n    for await (const document of this.sendCommand(ns, command, options, responseType)) {\n      if (options.timeoutContext?.csotEnabled()) {\n        if (MongoDBResponse.is(document)) {\n          if (document.isMaxTimeExpiredError) {\n            throw new MongoOperationTimeoutError('Server reported a timeout error', {\n              cause: new MongoServerError(document.toObject())\n            });\n          }\n        } else {\n          if (\n            (Array.isArray(document?.writeErrors) &&\n              document.writeErrors.some(\n                error => error?.code === MONGODB_ERROR_CODES.MaxTimeMSExpired\n              )) ||\n            document?.writeConcernError?.code === MONGODB_ERROR_CODES.MaxTimeMSExpired\n          ) {\n            throw new MongoOperationTimeoutError('Server reported a timeout error', {\n              cause: new MongoServerError(document)\n            });\n          }\n        }\n      }\n\n      return document;\n    }\n    throw new MongoUnexpectedServerResponseError('Unable to get response from server');\n  }\n\n  public exhaustCommand(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions,\n    replyListener: Callback\n  ) {\n    const exhaustLoop = async () => {\n      this.throwIfAborted();\n      for await (const reply of this.sendCommand(ns, command, options)) {\n        replyListener(undefined, reply);\n        this.throwIfAborted();\n      }\n      throw new MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n    };\n\n    exhaustLoop().then(undefined, replyListener);\n  }\n\n  private throwIfAborted() {\n    if (this.error) throw this.error;\n  }\n\n  /**\n   * @internal\n   *\n   * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n   * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n   */\n  private async writeCommand(\n    command: WriteProtocolMessageType,\n    options: {\n      agreedCompressor?: CompressorName;\n      zlibCompressionLevel?: number;\n      timeoutContext?: TimeoutContext;\n    } & Abortable\n  ): Promise<void> {\n    const finalCommand =\n      options.agreedCompressor === 'none' || !OpCompressedRequest.canCompress(command)\n        ? command\n        : new OpCompressedRequest(command, {\n            agreedCompressor: options.agreedCompressor ?? 'none',\n            zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n          });\n\n    const buffer = Buffer.concat(await finalCommand.toBin());\n\n    if (options.timeoutContext?.csotEnabled()) {\n      if (\n        options.timeoutContext.minRoundTripTime != null &&\n        options.timeoutContext.remainingTimeMS < options.timeoutContext.minRoundTripTime\n      ) {\n        throw new MongoOperationTimeoutError(\n          'Server roundtrip time is greater than the time remaining'\n        );\n      }\n    }\n\n    if (this.socket.write(buffer)) return;\n\n    const drainEvent = once<void>(this.socket, 'drain', options);\n    const timeout = options?.timeoutContext?.timeoutForSocketWrite;\n    const drained = timeout ? Promise.race([drainEvent, timeout]) : drainEvent;\n    try {\n      return await drained;\n    } catch (writeError) {\n      if (TimeoutError.is(writeError)) {\n        const timeoutError = new MongoOperationTimeoutError('Timed out at socket write');\n        this.onError(timeoutError);\n        throw timeoutError;\n      } else if (writeError === options.signal?.reason) {\n        this.onError(writeError);\n      }\n      throw writeError;\n    } finally {\n      timeout?.clear();\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n   * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n   * by calling `return` on the generator.\n   *\n   * Note that `for-await` loops call `return` automatically when the loop is exited.\n   */\n  private async *readMany(\n    options: {\n      timeoutContext?: TimeoutContext;\n    } & Abortable\n  ): AsyncGenerator<OpMsgResponse | OpReply> {\n    try {\n      this.dataEvents = onData(this.messageStream, options);\n      this.messageStream.resume();\n\n      for await (const message of this.dataEvents) {\n        const response = await decompressResponse(message);\n        yield response;\n\n        if (!response.moreToCome) {\n          return;\n        }\n      }\n    } catch (readError) {\n      if (TimeoutError.is(readError)) {\n        const timeoutError = new MongoOperationTimeoutError(\n          `Timed out during socket read (${readError.duration}ms)`\n        );\n        this.dataEvents = null;\n        this.onError(timeoutError);\n        throw timeoutError;\n      } else if (readError === options.signal?.reason) {\n        this.onError(readError);\n      }\n      throw readError;\n    } finally {\n      this.dataEvents = null;\n      this.messageStream.pause();\n      this.throwIfAborted();\n    }\n  }\n}\n\n/** @internal */\nexport class SizedMessageTransform extends Transform {\n  bufferPool: BufferPool;\n  connection: Connection;\n\n  constructor({ connection }: { connection: Connection }) {\n    super({ writableObjectMode: false, readableObjectMode: true });\n    this.bufferPool = new BufferPool();\n    this.connection = connection;\n  }\n\n  override _transform(chunk: Buffer, encoding: unknown, callback: TransformCallback): void {\n    if (this.connection.delayedTimeoutId != null) {\n      clearTimeout(this.connection.delayedTimeoutId);\n      this.connection.delayedTimeoutId = null;\n    }\n\n    this.bufferPool.append(chunk);\n\n    while (this.bufferPool.length) {\n      // While there are any bytes in the buffer\n\n      // Try to fetch a size from the top 4 bytes\n      const sizeOfMessage = this.bufferPool.getInt32();\n\n      if (sizeOfMessage == null) {\n        // Not even an int32 worth of data. Stop the loop, we need more chunks.\n        break;\n      }\n\n      if (sizeOfMessage < 0) {\n        // The size in the message has a negative value, this is probably corruption, throw:\n        return callback(new MongoParseError(`Message size cannot be negative: ${sizeOfMessage}`));\n      }\n\n      if (sizeOfMessage > this.bufferPool.length) {\n        // We do not have enough bytes to make a sizeOfMessage chunk\n        break;\n      }\n\n      // Add a message to the stream\n      const message = this.bufferPool.read(sizeOfMessage);\n\n      if (!this.push(message)) {\n        // We only subscribe to data events so we should never get backpressure\n        // if we do, we do not have the handling for it.\n        return callback(\n          new MongoRuntimeError(`SizedMessageTransform does not support backpressure`)\n        );\n      }\n    }\n\n    callback();\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this.autoEncrypter = options.autoEncrypter;\n  }\n\n  public override async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T\n  ): Promise<InstanceType<T>>;\n\n  public override async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options?: CommandOptions\n  ): Promise<Document>;\n\n  override async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options?: CommandOptions,\n    responseType?: T | undefined\n  ): Promise<Document> {\n    const { autoEncrypter } = this;\n    if (!autoEncrypter) {\n      // TODO(NODE-6065): throw a MongoRuntimeError in Node V7\n      // @ts-expect-error No cause provided because there is no underlying error.\n      throw new MongoMissingDependencyError('No AutoEncrypter available for encryption', {\n        dependencyName: 'n/a'\n      });\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return await super.command<T>(ns, cmd, options, responseType);\n    }\n\n    if (serverWireVersion < 8) {\n      throw new MongoCompatibilityError(\n        'Auto-encryption requires a minimum MongoDB version of 4.2'\n      );\n    }\n\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort: Map<string, number> | null = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys: Map<string, number>[] | null = cmd.createIndexes\n      ? cmd.indexes.map((index: { key: Map<string, number> }) => index.key)\n      : null;\n\n    const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n\n    // Replace the saved values\n    if (sort != null && (cmd.find || cmd.findAndModify)) {\n      encrypted.sort = sort;\n    }\n\n    if (indexKeys != null && cmd.createIndexes) {\n      for (const [offset, index] of indexKeys.entries()) {\n        // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n        encrypted.indexes[offset].key = index;\n      }\n    }\n\n    const encryptedResponse = await super.command(\n      ns,\n      encrypted,\n      options,\n      // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.\n      // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass\n      // So that we can ensure we have access to the on-demand APIs for decorate response\n      responseType ?? MongoDBResponse\n    );\n\n    const result = await autoEncrypter.decrypt(encryptedResponse.toBytes(), options);\n\n    const decryptedResponse = responseType?.make(result) ?? deserialize(result, options);\n\n    if (autoEncrypter[kDecorateResult]) {\n      if (responseType == null) {\n        decorateDecryptionResult(decryptedResponse, encryptedResponse.toObject(), true);\n      } else if (decryptedResponse instanceof CursorResponse) {\n        decryptedResponse.encryptedResponse = encryptedResponse;\n      }\n    }\n\n    return decryptedResponse;\n  }\n}\n"
        }
    ]
}