{
    "sourceFile": "node_modules/mongodb/src/cmap/errors.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892634152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { MongoDriverError, MongoErrorLabel, MongoNetworkError } from '../error';\nimport type { ConnectionPool } from './connection_pool';\n\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nexport class PoolClosedError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(pool: ConnectionPool) {\n    super('Attempted to check out a connection from closed connection pool');\n    this.address = pool.address;\n  }\n\n  override get name(): string {\n    return 'MongoPoolClosedError';\n  }\n}\n\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nexport class PoolClearedError extends MongoNetworkError {\n  /** The address of the connection pool */\n  address: string;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(pool: ConnectionPool, message?: string) {\n    const errorMessage = message\n      ? message\n      : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n    super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n    this.address = pool.address;\n\n    this.addErrorLabel(MongoErrorLabel.PoolRequstedRetry);\n  }\n\n  override get name(): string {\n    return 'MongoPoolClearedError';\n  }\n}\n\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nexport class PoolClearedOnNetworkError extends PoolClearedError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(pool: ConnectionPool) {\n    super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n  }\n\n  override get name(): string {\n    return 'PoolClearedOnNetworkError';\n  }\n}\n\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nexport class WaitQueueTimeoutError extends MongoDriverError {\n  /** The address of the connection pool */\n  address: string;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, address: string) {\n    super(message);\n    this.address = address;\n  }\n\n  override get name(): string {\n    return 'MongoWaitQueueTimeoutError';\n  }\n}\n"
        }
    ]
}