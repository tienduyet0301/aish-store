{
    "sourceFile": "node_modules/mongodb/src/cmap/auth/aws_temporary_credentials.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892633288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type AWSCredentials, getAwsCredentialProvider } from '../../deps';\nimport { MongoAWSError } from '../../error';\nimport { request } from '../../utils';\n\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\n\n/**\n * @internal\n * This interface matches the final result of fetching temporary credentials manually, outlined\n * in the spec [here](https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#ec2-endpoint).\n *\n * When we use the AWS SDK, we map the response from the SDK to conform to this interface.\n */\nexport interface AWSTempCredentials {\n  AccessKeyId?: string;\n  SecretAccessKey?: string;\n  Token?: string;\n  RoleArn?: string;\n  Expiration?: Date;\n}\n\n/** @public **/\nexport type AWSCredentialProvider = () => Promise<AWSCredentials>;\n\n/**\n * @internal\n *\n * Fetches temporary AWS credentials.\n */\nexport abstract class AWSTemporaryCredentialProvider {\n  abstract getCredentials(): Promise<AWSTempCredentials>;\n  private static _awsSDK: ReturnType<typeof getAwsCredentialProvider>;\n  protected static get awsSDK() {\n    AWSTemporaryCredentialProvider._awsSDK ??= getAwsCredentialProvider();\n    return AWSTemporaryCredentialProvider._awsSDK;\n  }\n\n  static get isAWSSDKInstalled(): boolean {\n    return !('kModuleError' in AWSTemporaryCredentialProvider.awsSDK);\n  }\n}\n\n/** @internal */\nexport class AWSSDKCredentialProvider extends AWSTemporaryCredentialProvider {\n  private _provider?: AWSCredentialProvider;\n\n  /**\n   * Create the SDK credentials provider.\n   * @param credentialsProvider - The credentials provider.\n   */\n  constructor(credentialsProvider?: AWSCredentialProvider) {\n    super();\n\n    if (credentialsProvider) {\n      this._provider = credentialsProvider;\n    }\n  }\n\n  /**\n   * The AWS SDK caches credentials automatically and handles refresh when the credentials have expired.\n   * To ensure this occurs, we need to cache the `provider` returned by the AWS sdk and re-use it when fetching credentials.\n   */\n  private get provider(): () => Promise<AWSCredentials> {\n    if ('kModuleError' in AWSTemporaryCredentialProvider.awsSDK) {\n      throw AWSTemporaryCredentialProvider.awsSDK.kModuleError;\n    }\n    if (this._provider) {\n      return this._provider;\n    }\n    let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n    AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n    AWS_REGION = AWS_REGION.toLowerCase();\n\n    /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n    const awsRegionSettingsExist =\n      AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n\n    /**\n     * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n     * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n     */\n    const LEGACY_REGIONS = new Set([\n      'ap-northeast-1',\n      'ap-south-1',\n      'ap-southeast-1',\n      'ap-southeast-2',\n      'aws-global',\n      'ca-central-1',\n      'eu-central-1',\n      'eu-north-1',\n      'eu-west-1',\n      'eu-west-2',\n      'eu-west-3',\n      'sa-east-1',\n      'us-east-1',\n      'us-east-2',\n      'us-west-1',\n      'us-west-2'\n    ]);\n    /**\n     * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n     *\n     * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n     * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n     * That is not our bug to fix here. We leave that up to the SDK.\n     */\n    const useRegionalSts =\n      AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n      (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n\n    this._provider =\n      awsRegionSettingsExist && useRegionalSts\n        ? AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain({\n            clientConfig: { region: AWS_REGION }\n          })\n        : AWSTemporaryCredentialProvider.awsSDK.fromNodeProviderChain();\n\n    return this._provider;\n  }\n\n  override async getCredentials(): Promise<AWSTempCredentials> {\n    /*\n     * Creates a credential provider that will attempt to find credentials from the\n     * following sources (listed in order of precedence):\n     *\n     * - Environment variables exposed via process.env\n     * - SSO credentials from token cache\n     * - Web identity token credentials\n     * - Shared credentials and config ini files\n     * - The EC2/ECS Instance Metadata Service\n     */\n    try {\n      const creds = await this.provider();\n      return {\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      };\n    } catch (error) {\n      throw new MongoAWSError(error.message, { cause: error });\n    }\n  }\n}\n\n/**\n * @internal\n * Fetches credentials manually (without the AWS SDK), as outlined in the [Obtaining Credentials](https://github.com/mongodb/specifications/blob/master/source/auth/auth.md#obtaining-credentials)\n * section of the Auth spec.\n */\nexport class LegacyAWSTemporaryCredentialProvider extends AWSTemporaryCredentialProvider {\n  override async getCredentials(): Promise<AWSTempCredentials> {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      return await request(\n        `${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`\n      );\n    }\n\n    // Otherwise assume we are on an EC2 instance\n\n    // get a token\n    const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n    });\n\n    // get role name\n    const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: { 'X-aws-ec2-metadata-token': token }\n    });\n\n    // get temp credentials\n    const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n      headers: { 'X-aws-ec2-metadata-token': token }\n    });\n\n    return creds;\n  }\n}\n"
        }
    ]
}