{
    "sourceFile": "node_modules/mongodb/src/cmap/auth/auth_provider.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892633251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Document } from '../../bson';\nimport { MongoRuntimeError } from '../../error';\nimport type { HandshakeDocument } from '../connect';\nimport type { Connection, ConnectionOptions } from '../connection';\nimport type { MongoCredentials } from './mongo_credentials';\n\n/**\n * Context used during authentication\n * @internal\n */\nexport class AuthContext {\n  /** The connection to authenticate */\n  connection: Connection;\n  /** The credentials to use for authentication */\n  credentials?: MongoCredentials;\n  /** If the context is for reauthentication. */\n  reauthenticating = false;\n  /** The options passed to the `connect` method */\n  options: ConnectionOptions;\n\n  /** A response from an initial auth attempt, only some mechanisms use this (e.g, SCRAM) */\n  response?: Document;\n  /** A random nonce generated for use in an authentication conversation */\n  nonce?: Buffer;\n\n  constructor(\n    connection: Connection,\n    credentials: MongoCredentials | undefined,\n    options: ConnectionOptions\n  ) {\n    this.connection = connection;\n    this.credentials = credentials;\n    this.options = options;\n  }\n}\n\n/**\n * Provider used during authentication.\n * @internal\n */\nexport abstract class AuthProvider {\n  /**\n   * Prepare the handshake document before the initial handshake.\n   *\n   * @param handshakeDoc - The document used for the initial handshake on a connection\n   * @param authContext - Context for authentication flow\n   */\n  async prepare(\n    handshakeDoc: HandshakeDocument,\n    _authContext: AuthContext\n  ): Promise<HandshakeDocument> {\n    return handshakeDoc;\n  }\n\n  /**\n   * Authenticate\n   *\n   * @param context - A shared context for authentication flow\n   */\n  abstract auth(context: AuthContext): Promise<void>;\n\n  /**\n   * Reauthenticate.\n   * @param context - The shared auth context.\n   */\n  async reauth(context: AuthContext): Promise<void> {\n    if (context.reauthenticating) {\n      throw new MongoRuntimeError('Reauthentication already in progress.');\n    }\n    try {\n      context.reauthenticating = true;\n      await this.auth(context);\n    } finally {\n      context.reauthenticating = false;\n    }\n  }\n}\n"
        }
    ]
}