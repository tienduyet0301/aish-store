{
    "sourceFile": "node_modules/mongodb/src/cmap/command_monitoring_events.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892634020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type Document, type ObjectId } from '../bson';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  LEGACY_HELLO_COMMAND,\n  LEGACY_HELLO_COMMAND_CAMEL_CASE\n} from '../constants';\nimport { calculateDurationInMs } from '../utils';\nimport {\n  DocumentSequence,\n  OpMsgRequest,\n  type OpQueryRequest,\n  type WriteProtocolMessageType\n} from './commands';\nimport type { Connection } from './connection';\n\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nexport class CommandStartedEvent {\n  commandObj?: Document;\n  requestId: number;\n  databaseName: string;\n  commandName: string;\n  command: Document;\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\"\n   * from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_STARTED;\n\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    // TODO: remove in major revision, this is not spec behavior\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = command.databaseName;\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nexport class CommandSucceededEvent {\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: unknown;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_SUCCEEDED;\n\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    reply: Document | undefined,\n    started: number,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(reply));\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nexport class CommandFailedEvent {\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_FAILED;\n\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    error: Error | Document,\n    started: number,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.failure = maybeRedact(commandName, cmd, error) as Error;\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexport const SENSITIVE_COMMANDS = new Set([\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n]);\n\nconst HELLO_COMMANDS = new Set(['hello', LEGACY_HELLO_COMMAND, LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n\n// helper methods\nconst extractCommandName = (commandDoc: Document) => Object.keys(commandDoc)[0];\nconst collectionName = (command: OpQueryRequest) => command.ns.split('.')[1];\nconst maybeRedact = (commandName: string, commandDoc: Document, result: Error | Document) =>\n  SENSITIVE_COMMANDS.has(commandName) ||\n  (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\n\nconst LEGACY_FIND_QUERY_MAP: { [key: string]: string } = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\n\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n} as const;\n\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command: WriteProtocolMessageType): Document {\n  if (command instanceof OpMsgRequest) {\n    const cmd = { ...command.command };\n    // For OP_MSG with payload type 1 we need to pull the documents\n    // array out of the document sequence for monitoring.\n    if (cmd.ops instanceof DocumentSequence) {\n      cmd.ops = cmd.ops.documents;\n    }\n    if (cmd.nsInfo instanceof DocumentSequence) {\n      cmd.nsInfo = cmd.nsInfo.documents;\n    }\n    return cmd;\n  }\n\n  if (command.query?.$query) {\n    let result: Document;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = { find: collectionName(command) };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = { ...command.query[key] };\n        }\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key as keyof typeof LEGACY_FIND_OPTIONS_MAP;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = command[legacyKey];\n      }\n    });\n\n    return result;\n  }\n\n  let clonedQuery: Record<string, unknown> = {};\n  const clonedCommand: Record<string, unknown> = { ...command };\n  if (command.query) {\n    clonedQuery = { ...command.query };\n    clonedCommand.query = clonedQuery;\n  }\n\n  return command.query ? clonedQuery : clonedCommand;\n}\n\nfunction extractReply(reply?: Document) {\n  if (!reply) {\n    return reply;\n  }\n\n  return reply.result ? reply.result : reply;\n}\n\nfunction extractConnectionDetails(connection: Connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}\n"
        }
    ]
}