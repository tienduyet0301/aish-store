{
    "sourceFile": "node_modules/mongodb/src/bulk/unordered.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892632444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Document } from '../bson';\nimport * as BSON from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { DeleteStatement } from '../operations/delete';\nimport type { UpdateStatement } from '../operations/update';\nimport {\n  Batch,\n  BatchType,\n  BulkOperationBase,\n  type BulkWriteOptions,\n  type BulkWriteResult\n} from './common';\n\n/** @public */\nexport class UnorderedBulkOperation extends BulkOperationBase {\n  /** @internal */\n  constructor(collection: Collection, options: BulkWriteOptions) {\n    super(collection, options, false);\n  }\n\n  override handleWriteError(writeResult: BulkWriteResult): void {\n    if (this.s.batches.length) {\n      return;\n    }\n\n    return super.handleWriteError(writeResult);\n  }\n\n  addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    } as any);\n\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize) {\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new MongoInvalidArgumentError(\n        `Document is larger than the maximum size ${this.s.maxBsonObjectSize}`\n      );\n    }\n\n    // Holds the current batch\n    this.s.currentBatch = undefined;\n    // Get the right type of batch\n    if (batchType === BatchType.INSERT) {\n      this.s.currentBatch = this.s.currentInsertBatch;\n    } else if (batchType === BatchType.UPDATE) {\n      this.s.currentBatch = this.s.currentUpdateBatch;\n    } else if (batchType === BatchType.DELETE) {\n      this.s.currentBatch = this.s.currentRemoveBatch;\n    }\n\n    const maxKeySize = this.s.maxKeySize;\n\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    // Check if we need to create a new batch\n    if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      (this.s.currentBatch.size > 0 &&\n        this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType\n    ) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n\n      // Create a new batch\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentIndex = this.s.currentIndex + 1;\n\n    // Save back the current Batch to the right type\n    if (batchType === BatchType.INSERT) {\n      this.s.currentInsertBatch = this.s.currentBatch;\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.bulkResult.insertedIds.length,\n        _id: (document as Document)._id\n      });\n    } else if (batchType === BatchType.UPDATE) {\n      this.s.currentUpdateBatch = this.s.currentBatch;\n    } else if (batchType === BatchType.DELETE) {\n      this.s.currentRemoveBatch = this.s.currentBatch;\n    }\n\n    // Update current batch size\n    this.s.currentBatch.size += 1;\n    this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n\n    return this;\n  }\n}\n"
        }
    ]
}