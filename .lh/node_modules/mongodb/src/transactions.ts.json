{
    "sourceFile": "node_modules/mongodb/src/transactions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892637214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Document } from './bson';\nimport { MongoRuntimeError, MongoTransactionError } from './error';\nimport type { CommandOperationOptions } from './operations/command';\nimport { ReadConcern, type ReadConcernLike } from './read_concern';\nimport { ReadPreference, type ReadPreferenceLike } from './read_preference';\nimport type { Server } from './sdam/server';\nimport { WriteConcern } from './write_concern';\n\n/** @internal */\nexport const TxnState = Object.freeze({\n  NO_TRANSACTION: 'NO_TRANSACTION',\n  STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n  TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n  TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n  TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n  TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n} as const);\n\n/** @internal */\nexport type TxnState = (typeof TxnState)[keyof typeof TxnState];\n\nconst stateMachine: { [state in TxnState]: TxnState[] } = {\n  [TxnState.NO_TRANSACTION]: [TxnState.NO_TRANSACTION, TxnState.STARTING_TRANSACTION],\n  [TxnState.STARTING_TRANSACTION]: [\n    TxnState.TRANSACTION_IN_PROGRESS,\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.TRANSACTION_ABORTED\n  ],\n  [TxnState.TRANSACTION_IN_PROGRESS]: [\n    TxnState.TRANSACTION_IN_PROGRESS,\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_ABORTED\n  ],\n  [TxnState.TRANSACTION_COMMITTED]: [\n    TxnState.TRANSACTION_COMMITTED,\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.STARTING_TRANSACTION,\n    TxnState.NO_TRANSACTION\n  ],\n  [TxnState.TRANSACTION_ABORTED]: [TxnState.STARTING_TRANSACTION, TxnState.NO_TRANSACTION],\n  [TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n    TxnState.TRANSACTION_COMMITTED_EMPTY,\n    TxnState.NO_TRANSACTION\n  ]\n};\n\nconst ACTIVE_STATES: Set<TxnState> = new Set([\n  TxnState.STARTING_TRANSACTION,\n  TxnState.TRANSACTION_IN_PROGRESS\n]);\n\nconst COMMITTED_STATES: Set<TxnState> = new Set([\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_COMMITTED_EMPTY,\n  TxnState.TRANSACTION_ABORTED\n]);\n\n/**\n * Configuration options for a transaction.\n * @public\n */\nexport interface TransactionOptions extends Omit<CommandOperationOptions, 'timeoutMS'> {\n  // TODO(NODE-3344): These options use the proper class forms of these settings, it should accept the basic enum values too\n  /** A default read concern for commands in this transaction */\n  readConcern?: ReadConcernLike;\n  /** A default writeConcern for commands in this transaction */\n  writeConcern?: WriteConcern;\n  /** A default read preference for commands in this transaction */\n  readPreference?: ReadPreferenceLike;\n  /** Specifies the maximum amount of time to allow a commit action on a transaction to run in milliseconds */\n  maxCommitTimeMS?: number;\n}\n\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nexport class Transaction {\n  /** @internal */\n  state: TxnState;\n  options: TransactionOptions;\n  /** @internal */\n  _pinnedServer?: Server;\n  /** @internal */\n  _recoveryToken?: Document;\n\n  /** Create a transaction @internal */\n  constructor(options?: TransactionOptions) {\n    options = options ?? {};\n    this.state = TxnState.NO_TRANSACTION;\n    this.options = {};\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      if (writeConcern.w === 0) {\n        throw new MongoTransactionError('Transactions do not support unacknowledged write concern');\n      }\n\n      this.options.writeConcern = writeConcern;\n    }\n\n    if (options.readConcern) {\n      this.options.readConcern = ReadConcern.fromOptions(options);\n    }\n\n    if (options.readPreference) {\n      this.options.readPreference = ReadPreference.fromOptions(options);\n    }\n\n    if (options.maxCommitTimeMS) {\n      this.options.maxTimeMS = options.maxCommitTimeMS;\n    }\n\n    // TODO: This isn't technically necessary\n    this._pinnedServer = undefined;\n    this._recoveryToken = undefined;\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this._pinnedServer;\n  }\n\n  get recoveryToken(): Document | undefined {\n    return this._recoveryToken;\n  }\n\n  get isPinned(): boolean {\n    return !!this.server;\n  }\n\n  /** @returns Whether the transaction has started */\n  get isStarting(): boolean {\n    return this.state === TxnState.STARTING_TRANSACTION;\n  }\n\n  /**\n   * @returns Whether this session is presently in a transaction\n   */\n  get isActive(): boolean {\n    return ACTIVE_STATES.has(this.state);\n  }\n\n  get isCommitted(): boolean {\n    return COMMITTED_STATES.has(this.state);\n  }\n  /**\n   * Transition the transaction in the state machine\n   * @internal\n   * @param nextState - The new state to transition to\n   */\n  transition(nextState: TxnState): void {\n    const nextStates = stateMachine[this.state];\n    if (nextStates && nextStates.includes(nextState)) {\n      this.state = nextState;\n      if (\n        this.state === TxnState.NO_TRANSACTION ||\n        this.state === TxnState.STARTING_TRANSACTION ||\n        this.state === TxnState.TRANSACTION_ABORTED\n      ) {\n        this.unpinServer();\n      }\n      return;\n    }\n\n    throw new MongoRuntimeError(\n      `Attempted illegal state transition from [${this.state}] to [${nextState}]`\n    );\n  }\n\n  /** @internal */\n  pinServer(server: Server): void {\n    if (this.isActive) {\n      this._pinnedServer = server;\n    }\n  }\n\n  /** @internal */\n  unpinServer(): void {\n    this._pinnedServer = undefined;\n  }\n}\n\nexport function isTransactionCommand(command: Document): boolean {\n  return !!(command.commitTransaction || command.abortTransaction);\n}\n"
        }
    ]
}