{
    "sourceFile": "node_modules/mongodb/src/cursor/client_bulk_write_cursor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892634780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type Document } from '../bson';\nimport { type ClientBulkWriteCursorResponse } from '../cmap/wire_protocol/responses';\nimport type { MongoClient } from '../mongo_client';\nimport { ClientBulkWriteOperation } from '../operations/client_bulk_write/client_bulk_write';\nimport { type ClientBulkWriteCommandBuilder } from '../operations/client_bulk_write/command_builder';\nimport { type ClientBulkWriteOptions } from '../operations/client_bulk_write/common';\nimport { executeOperation } from '../operations/execute_operation';\nimport type { ClientSession } from '../sessions';\nimport { mergeOptions, MongoDBNamespace } from '../utils';\nimport {\n  AbstractCursor,\n  type AbstractCursorOptions,\n  type InitialCursorResponse\n} from './abstract_cursor';\n\n/** @public */\nexport interface ClientBulkWriteCursorOptions\n  extends Omit<AbstractCursorOptions, 'maxAwaitTimeMS' | 'tailable' | 'awaitData'>,\n    ClientBulkWriteOptions {}\n\n/**\n * This is the cursor that handles client bulk write operations. Note this is never\n * exposed directly to the user and is always immediately exhausted.\n * @internal\n */\nexport class ClientBulkWriteCursor extends AbstractCursor {\n  commandBuilder: ClientBulkWriteCommandBuilder;\n  /** @internal */\n  private cursorResponse?: ClientBulkWriteCursorResponse;\n  /** @internal */\n  private clientBulkWriteOptions: ClientBulkWriteOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    commandBuilder: ClientBulkWriteCommandBuilder,\n    options: ClientBulkWriteCursorOptions = {}\n  ) {\n    super(client, new MongoDBNamespace('admin', '$cmd'), options);\n\n    this.commandBuilder = commandBuilder;\n    this.clientBulkWriteOptions = options;\n  }\n\n  /**\n   * We need a way to get the top level cursor response fields for\n   * generating the bulk write result, so we expose this here.\n   */\n  get response(): ClientBulkWriteCursorResponse | null {\n    if (this.cursorResponse) return this.cursorResponse;\n    return null;\n  }\n\n  get operations(): Document[] {\n    return this.commandBuilder.lastOperations;\n  }\n\n  clone(): ClientBulkWriteCursor {\n    const clonedOptions = mergeOptions({}, this.clientBulkWriteOptions);\n    delete clonedOptions.session;\n    return new ClientBulkWriteCursor(this.client, this.commandBuilder, {\n      ...clonedOptions\n    });\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession): Promise<InitialCursorResponse> {\n    const clientBulkWriteOperation = new ClientBulkWriteOperation(this.commandBuilder, {\n      ...this.clientBulkWriteOptions,\n      ...this.cursorOptions,\n      session\n    });\n\n    const response = await executeOperation(\n      this.client,\n      clientBulkWriteOperation,\n      this.timeoutContext\n    );\n    this.cursorResponse = response;\n\n    return { server: clientBulkWriteOperation.server, session, response };\n  }\n}\n"
        }
    ]
}