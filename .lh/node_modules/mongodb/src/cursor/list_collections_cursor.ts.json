{
    "sourceFile": "node_modules/mongodb/src/cursor/list_collections_cursor.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892634858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Document } from '../bson';\nimport type { Db } from '../db';\nimport { type Abortable } from '../mongo_types';\nimport { executeOperation } from '../operations/execute_operation';\nimport {\n  type CollectionInfo,\n  ListCollectionsOperation,\n  type ListCollectionsOptions\n} from '../operations/list_collections';\nimport type { ClientSession } from '../sessions';\nimport { AbstractCursor, type InitialCursorResponse } from './abstract_cursor';\n\n/** @public */\nexport class ListCollectionsCursor<\n  T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n    | Pick<CollectionInfo, 'name' | 'type'>\n    | CollectionInfo\n> extends AbstractCursor<T> {\n  parent: Db;\n  filter: Document;\n  options?: ListCollectionsOptions & Abortable;\n\n  constructor(db: Db, filter: Document, options?: ListCollectionsOptions & Abortable) {\n    super(db.client, db.s.namespace, options);\n    this.parent = db;\n    this.filter = filter;\n    this.options = options;\n  }\n\n  clone(): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor(this.parent, this.filter, {\n      ...this.options,\n      ...this.cursorOptions\n    });\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession | undefined): Promise<InitialCursorResponse> {\n    const operation = new ListCollectionsOperation(this.parent, this.filter, {\n      ...this.cursorOptions,\n      ...this.options,\n      session,\n      signal: this.signal\n    });\n\n    const response = await executeOperation(this.parent.client, operation, this.timeoutContext);\n\n    return { server: operation.server, session, response };\n  }\n}\n"
        }
    ]
}