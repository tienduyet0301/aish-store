{
    "sourceFile": "node_modules/mongodb/src/mongo_client_auth_providers.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892635255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type AuthProvider } from './cmap/auth/auth_provider';\nimport { GSSAPI } from './cmap/auth/gssapi';\nimport { type AuthMechanismProperties } from './cmap/auth/mongo_credentials';\nimport { MongoDBAWS } from './cmap/auth/mongodb_aws';\nimport { MongoDBOIDC, OIDC_WORKFLOWS, type Workflow } from './cmap/auth/mongodb_oidc';\nimport { AutomatedCallbackWorkflow } from './cmap/auth/mongodb_oidc/automated_callback_workflow';\nimport { HumanCallbackWorkflow } from './cmap/auth/mongodb_oidc/human_callback_workflow';\nimport { TokenCache } from './cmap/auth/mongodb_oidc/token_cache';\nimport { Plain } from './cmap/auth/plain';\nimport { AuthMechanism } from './cmap/auth/providers';\nimport { ScramSHA1, ScramSHA256 } from './cmap/auth/scram';\nimport { X509 } from './cmap/auth/x509';\nimport { MongoInvalidArgumentError } from './error';\n\n/** @internal */\nconst AUTH_PROVIDERS = new Map<\n  AuthMechanism | string,\n  (authMechanismProperties: AuthMechanismProperties) => AuthProvider\n>([\n  [\n    AuthMechanism.MONGODB_AWS,\n    ({ AWS_CREDENTIAL_PROVIDER }) => new MongoDBAWS(AWS_CREDENTIAL_PROVIDER)\n  ],\n  [\n    AuthMechanism.MONGODB_CR,\n    () => {\n      throw new MongoInvalidArgumentError(\n        'MONGODB-CR is no longer a supported auth mechanism in MongoDB 4.0+'\n      );\n    }\n  ],\n  [AuthMechanism.MONGODB_GSSAPI, () => new GSSAPI()],\n  [AuthMechanism.MONGODB_OIDC, properties => new MongoDBOIDC(getWorkflow(properties))],\n  [AuthMechanism.MONGODB_PLAIN, () => new Plain()],\n  [AuthMechanism.MONGODB_SCRAM_SHA1, () => new ScramSHA1()],\n  [AuthMechanism.MONGODB_SCRAM_SHA256, () => new ScramSHA256()],\n  [AuthMechanism.MONGODB_X509, () => new X509()]\n]);\n\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nexport class MongoClientAuthProviders {\n  private existingProviders: Map<AuthMechanism | string, AuthProvider> = new Map();\n\n  /**\n   * Get or create an authentication provider based on the provided mechanism.\n   * We don't want to create all providers at once, as some providers may not be used.\n   * @param name - The name of the provider to get or create.\n   * @param credentials - The credentials.\n   * @returns The provider.\n   * @throws MongoInvalidArgumentError if the mechanism is not supported.\n   * @internal\n   */\n  getOrCreateProvider(\n    name: AuthMechanism | string,\n    authMechanismProperties: AuthMechanismProperties\n  ): AuthProvider {\n    const authProvider = this.existingProviders.get(name);\n    if (authProvider) {\n      return authProvider;\n    }\n\n    const providerFunction = AUTH_PROVIDERS.get(name);\n    if (!providerFunction) {\n      throw new MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n    }\n\n    const provider = providerFunction(authMechanismProperties);\n    this.existingProviders.set(name, provider);\n    return provider;\n  }\n}\n\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(authMechanismProperties: AuthMechanismProperties): Workflow {\n  if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {\n    return new HumanCallbackWorkflow(new TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);\n  } else if (authMechanismProperties.OIDC_CALLBACK) {\n    return new AutomatedCallbackWorkflow(new TokenCache(), authMechanismProperties.OIDC_CALLBACK);\n  } else {\n    const environment = authMechanismProperties.ENVIRONMENT;\n    const workflow = OIDC_WORKFLOWS.get(environment)?.();\n    if (!workflow) {\n      throw new MongoInvalidArgumentError(\n        `Could not load workflow for environment ${authMechanismProperties.ENVIRONMENT}`\n      );\n    }\n    return workflow;\n  }\n}\n"
        }
    ]
}