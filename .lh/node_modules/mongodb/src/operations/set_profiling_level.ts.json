{
    "sourceFile": "node_modules/mongodb/src/operations/set_profiling_level.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892636361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Db } from '../db';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type TimeoutContext } from '../timeout';\nimport { enumToString } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\n\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n\n/** @public */\nexport const ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n} as const);\n\n/** @public */\nexport type ProfilingLevel = (typeof ProfilingLevel)[keyof typeof ProfilingLevel];\n\n/** @public */\nexport type SetProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class SetProfilingLevelOperation extends CommandOperation<ProfilingLevel> {\n  override options: SetProfilingLevelOptions;\n  level: ProfilingLevel;\n  profile: 0 | 1 | 2;\n\n  constructor(db: Db, level: ProfilingLevel, options: SetProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n    switch (level) {\n      case ProfilingLevel.off:\n        this.profile = 0;\n        break;\n      case ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n      case ProfilingLevel.all:\n        this.profile = 2;\n        break;\n      default:\n        this.profile = 0;\n        break;\n    }\n\n    this.level = level;\n  }\n\n  override get commandName() {\n    return 'profile' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<ProfilingLevel> {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      throw new MongoInvalidArgumentError(\n        `Profiling level must be one of \"${enumToString(ProfilingLevel)}\"`\n      );\n    }\n\n    // TODO(NODE-3483): Determine error to put here\n    await super.executeCommand(server, session, { profile: this.profile }, timeoutContext);\n    return level;\n  }\n}\n"
        }
    ]
}