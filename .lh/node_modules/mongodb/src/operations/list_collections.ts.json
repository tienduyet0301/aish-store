{
    "sourceFile": "node_modules/mongodb/src/operations/list_collections.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892635964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Binary, Document } from '../bson';\nimport { CursorResponse } from '../cmap/wire_protocol/responses';\nimport { type CursorTimeoutContext, type CursorTimeoutMode } from '../cursor/abstract_cursor';\nimport type { Db } from '../db';\nimport { type Abortable } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type TimeoutContext } from '../timeout';\nimport { maxWireVersion } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface ListCollectionsOptions\n  extends Omit<CommandOperationOptions, 'writeConcern'>,\n    Abortable {\n  /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */\n  nameOnly?: boolean;\n  /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */\n  authorizedCollections?: boolean;\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n  /** @internal */\n  timeoutMode?: CursorTimeoutMode;\n\n  /** @internal */\n  timeoutContext?: CursorTimeoutContext;\n}\n\n/** @internal */\nexport class ListCollectionsOperation extends CommandOperation<CursorResponse> {\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  override options: ListCollectionsOptions & { writeConcern?: never };\n  db: Db;\n  filter: Document;\n  nameOnly: boolean;\n  authorizedCollections: boolean;\n  batchSize?: number;\n\n  constructor(db: Db, filter: Document, options?: ListCollectionsOptions) {\n    super(db, options);\n\n    this.options = { ...options };\n    delete this.options.writeConcern;\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  override get commandName() {\n    return 'listCollections' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<CursorResponse> {\n    return await super.executeCommand(\n      server,\n      session,\n      this.generateCommand(maxWireVersion(server)),\n      timeoutContext,\n      CursorResponse\n    );\n  }\n\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n  generateCommand(wireVersion: number): Document {\n    const command: Document = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    return command;\n  }\n}\n\n/** @public */\nexport interface CollectionInfo extends Document {\n  name: string;\n  type?: string;\n  options?: Document;\n  info?: {\n    readOnly?: false;\n    uuid?: Binary;\n  };\n  idIndex?: Document;\n}\n\ndefineAspects(ListCollectionsOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\n"
        }
    ]
}