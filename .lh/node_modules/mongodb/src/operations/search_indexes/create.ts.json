{
    "sourceFile": "node_modules/mongodb/src/operations/search_indexes/create.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892636249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Document } from '../../bson';\nimport type { Collection } from '../../collection';\nimport type { Server } from '../../sdam/server';\nimport type { ClientSession } from '../../sessions';\nimport { type TimeoutContext } from '../../timeout';\nimport { AbstractOperation } from '../operation';\n\n/**\n * @public\n */\nexport interface SearchIndexDescription extends Document {\n  /** The name of the index. */\n  name?: string;\n\n  /** The index definition. */\n  definition: Document;\n\n  /** The type of the index.  Currently `search` or `vectorSearch` are supported. */\n  type?: string;\n}\n\n/** @internal */\nexport class CreateSearchIndexesOperation extends AbstractOperation<string[]> {\n  constructor(\n    private readonly collection: Collection,\n    private readonly descriptions: ReadonlyArray<SearchIndexDescription>\n  ) {\n    super();\n  }\n\n  override get commandName() {\n    return 'createSearchIndexes' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<string[]> {\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      createSearchIndexes: namespace.collection,\n      indexes: this.descriptions\n    };\n\n    const res = await server.command(namespace, command, {\n      session,\n      timeoutContext\n    });\n\n    const indexesCreated: Array<{ name: string }> = res?.indexesCreated ?? [];\n    return indexesCreated.map(({ name }) => name);\n  }\n}\n"
        }
    ]
}