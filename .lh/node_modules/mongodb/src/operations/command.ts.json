{
    "sourceFile": "node_modules/mongodb/src/operations/command.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892635537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { BSONSerializeOptions, Document } from '../bson';\nimport { type MongoDBResponseConstructor } from '../cmap/wire_protocol/responses';\nimport { MongoInvalidArgumentError } from '../error';\nimport {\n  decorateWithExplain,\n  Explain,\n  type ExplainOptions,\n  validateExplainTimeoutOptions\n} from '../explain';\nimport { ReadConcern } from '../read_concern';\nimport type { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport { MIN_SECONDARY_WRITE_WIRE_VERSION } from '../sdam/server_selection';\nimport type { ClientSession } from '../sessions';\nimport { type TimeoutContext } from '../timeout';\nimport { commandSupportsReadConcern, maxWireVersion, MongoDBNamespace } from '../utils';\nimport { WriteConcern, type WriteConcernOptions } from '../write_concern';\nimport type { ReadConcernLike } from './../read_concern';\nimport { AbstractOperation, Aspect, type OperationOptions } from './operation';\n\n/** @public */\nexport interface CollationOptions {\n  locale: string;\n  caseLevel?: boolean;\n  caseFirst?: string;\n  strength?: number;\n  numericOrdering?: boolean;\n  alternate?: string;\n  maxVariable?: string;\n  backwards?: boolean;\n  normalization?: boolean;\n}\n\n/** @public */\nexport interface CommandOperationOptions\n  extends OperationOptions,\n    WriteConcernOptions,\n    ExplainOptions {\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** Collation */\n  collation?: CollationOptions;\n  /**\n   * maxTimeMS is a server-side time limit in milliseconds for processing an operation.\n   */\n  maxTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n\n  // Admin command overrides.\n  dbName?: string;\n  authdb?: string;\n  noResponse?: boolean;\n}\n\n/** @internal */\nexport interface OperationParent {\n  s: { namespace: MongoDBNamespace };\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  readPreference?: ReadPreference;\n  bsonOptions?: BSONSerializeOptions;\n  timeoutMS?: number;\n}\n\n/** @internal */\nexport abstract class CommandOperation<T> extends AbstractOperation<T> {\n  override options: CommandOperationOptions;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n  explain?: Explain;\n\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\n    super(options);\n    this.options = options ?? {};\n\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = options?.dbName || options?.authdb;\n    if (dbNameOverride) {\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent\n        ? parent.s.namespace.withCollection('$cmd')\n        : new MongoDBNamespace('admin', '$cmd');\n    }\n\n    this.readConcern = ReadConcern.fromOptions(options);\n    this.writeConcern = WriteConcern.fromOptions(options);\n\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      this.explain = Explain.fromOptions(options);\n      if (this.explain) validateExplainTimeoutOptions(this.options, this.explain);\n    } else if (options?.explain != null) {\n      throw new MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n\n  override get canRetryWrite(): boolean {\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n    return super.canRetryWrite;\n  }\n\n  public async executeCommand<T extends MongoDBResponseConstructor>(\n    server: Server,\n    session: ClientSession | undefined,\n    cmd: Document,\n    timeoutContext: TimeoutContext,\n    responseType: T | undefined\n  ): Promise<typeof responseType extends undefined ? Document : InstanceType<T>>;\n\n  public async executeCommand(\n    server: Server,\n    session: ClientSession | undefined,\n    cmd: Document,\n    timeoutContext: TimeoutContext\n  ): Promise<Document>;\n\n  async executeCommand(\n    server: Server,\n    session: ClientSession | undefined,\n    cmd: Document,\n    timeoutContext: TimeoutContext,\n    responseType?: MongoDBResponseConstructor\n  ): Promise<Document> {\n    this.server = server;\n\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      timeoutContext,\n      readPreference: this.readPreference,\n      session\n    };\n\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (this.trySecondaryWrite && serverWireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\n      WriteConcern.apply(cmd, this.writeConcern);\n    }\n\n    if (\n      options.collation &&\n      typeof options.collation === 'object' &&\n      !this.hasAspect(Aspect.SKIP_COLLATION)\n    ) {\n      Object.assign(cmd, { collation: options.collation });\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\n      cmd = decorateWithExplain(cmd, this.explain);\n    }\n\n    return await server.command(this.ns, cmd, options, responseType);\n  }\n}\n"
        }
    ]
}