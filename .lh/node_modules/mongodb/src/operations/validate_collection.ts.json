{
    "sourceFile": "node_modules/mongodb/src/operations/validate_collection.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892636489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Admin } from '../admin';\nimport type { Document } from '../bson';\nimport { MongoUnexpectedServerResponseError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type TimeoutContext } from '../timeout';\nimport { CommandOperation, type CommandOperationOptions } from './command';\n\n/** @public */\nexport interface ValidateCollectionOptions extends CommandOperationOptions {\n  /** Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+) */\n  background?: boolean;\n}\n\n/** @internal */\nexport class ValidateCollectionOperation extends CommandOperation<Document> {\n  override options: ValidateCollectionOptions;\n  collectionName: string;\n  command: Document;\n\n  constructor(admin: Admin, collectionName: string, options: ValidateCollectionOptions) {\n    // Decorate command with extra options\n    const command: Document = { validate: collectionName };\n    const keys = Object.keys(options);\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = (options as Document)[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options);\n    this.options = options;\n    this.command = command;\n    this.collectionName = collectionName;\n  }\n\n  override get commandName() {\n    return 'validate' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<Document> {\n    const collectionName = this.collectionName;\n\n    const doc = await super.executeCommand(server, session, this.command, timeoutContext);\n    if (doc.result != null && typeof doc.result !== 'string')\n      throw new MongoUnexpectedServerResponseError('Error with validation data');\n    if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n      throw new MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n    if (doc.valid != null && !doc.valid)\n      throw new MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n\n    return doc;\n  }\n}\n"
        }
    ]
}