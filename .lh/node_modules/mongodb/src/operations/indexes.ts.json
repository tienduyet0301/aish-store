{
    "sourceFile": "node_modules/mongodb/src/operations/indexes.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892635863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Document } from '../bson';\nimport { CursorResponse } from '../cmap/wire_protocol/responses';\nimport type { Collection } from '../collection';\nimport { type AbstractCursorOptions } from '../cursor/abstract_cursor';\nimport { MongoCompatibilityError } from '../error';\nimport { type OneOrMore } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { type TimeoutContext } from '../timeout';\nimport { isObject, maxWireVersion, type MongoDBNamespace } from '../utils';\nimport {\n  type CollationOptions,\n  CommandOperation,\n  type CommandOperationOptions,\n  type OperationParent\n} from './command';\nimport { Aspect, defineAspects } from './operation';\n\nconst VALID_INDEX_OPTIONS = new Set([\n  'background',\n  'unique',\n  'name',\n  'partialFilterExpression',\n  'sparse',\n  'hidden',\n  'expireAfterSeconds',\n  'storageEngine',\n  'collation',\n  'version',\n\n  // text indexes\n  'weights',\n  'default_language',\n  'language_override',\n  'textIndexVersion',\n\n  // 2d-sphere indexes\n  '2dsphereIndexVersion',\n\n  // 2d indexes\n  'bits',\n  'min',\n  'max',\n\n  // geoHaystack Indexes\n  'bucketSize',\n\n  // wildcard indexes\n  'wildcardProjection'\n]);\n\n/** @public */\nexport type IndexDirection =\n  | -1\n  | 1\n  | '2d'\n  | '2dsphere'\n  | 'text'\n  | 'geoHaystack'\n  | 'hashed'\n  | number;\n\nfunction isIndexDirection(x: unknown): x is IndexDirection {\n  return (\n    typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack'\n  );\n}\n/** @public */\nexport type IndexSpecification = OneOrMore<\n  | string\n  | [string, IndexDirection]\n  | { [key: string]: IndexDirection }\n  | Map<string, IndexDirection>\n>;\n\n/** @public */\nexport interface IndexInformationOptions extends ListIndexesOptions {\n  /**\n   * When `true`, an array of index descriptions is returned.\n   * When `false`, the driver returns an object that with keys corresponding to index names with values\n   * corresponding to the entries of the indexes' key.\n   *\n   * For example, the given the following indexes:\n   * ```\n   * [ { name: 'a_1', key: { a: 1 } }, { name: 'b_1_c_1' , key: { b: 1, c: 1 } }]\n   * ```\n   *\n   * When `full` is `true`, the above array is returned.  When `full` is `false`, the following is returned:\n   * ```\n   * {\n   *   'a_1': [['a', 1]],\n   *   'b_1_c_1': [['b', 1], ['c', 1]],\n   * }\n   * ```\n   */\n  full?: boolean;\n}\n\n/** @public */\nexport interface IndexDescription\n  extends Pick<\n    CreateIndexesOptions,\n    | 'background'\n    | 'unique'\n    | 'partialFilterExpression'\n    | 'sparse'\n    | 'hidden'\n    | 'expireAfterSeconds'\n    | 'storageEngine'\n    | 'version'\n    | 'weights'\n    | 'default_language'\n    | 'language_override'\n    | 'textIndexVersion'\n    | '2dsphereIndexVersion'\n    | 'bits'\n    | 'min'\n    | 'max'\n    | 'bucketSize'\n    | 'wildcardProjection'\n  > {\n  collation?: CollationOptions;\n  name?: string;\n  key: { [key: string]: IndexDirection } | Map<string, IndexDirection>;\n}\n\n/** @public */\nexport interface CreateIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\n  /** Creates the index in the background, yielding whenever possible. */\n  background?: boolean;\n  /** Creates an unique index. */\n  unique?: boolean;\n  /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n  name?: string;\n  /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n  partialFilterExpression?: Document;\n  /** Creates a sparse index. */\n  sparse?: boolean;\n  /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n  expireAfterSeconds?: number;\n  /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n  storageEngine?: Document;\n  /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n  commitQuorum?: number | string;\n  /** Specifies the index version number, either 0 or 1. */\n  version?: number;\n  // text indexes\n  weights?: Document;\n  default_language?: string;\n  language_override?: string;\n  textIndexVersion?: number;\n  // 2d-sphere indexes\n  '2dsphereIndexVersion'?: number;\n  // 2d indexes\n  bits?: number;\n  /** For geospatial indexes set the lower bound for the co-ordinates. */\n  min?: number;\n  /** For geospatial indexes set the high bound for the co-ordinates. */\n  max?: number;\n  // geoHaystack Indexes\n  bucketSize?: number;\n  // wildcard indexes\n  wildcardProjection?: Document;\n  /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n  hidden?: boolean;\n}\n\nfunction isSingleIndexTuple(t: unknown): t is [string, IndexDirection] {\n  return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\n\n/**\n * Converts an `IndexSpecification`, which can be specified in multiple formats, into a\n * valid `key` for the createIndexes command.\n */\nfunction constructIndexDescriptionMap(indexSpec: IndexSpecification): Map<string, IndexDirection> {\n  const key: Map<string, IndexDirection> = new Map();\n\n  const indexSpecs =\n    !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n\n  // Iterate through array and handle different types\n  for (const spec of indexSpecs) {\n    if (typeof spec === 'string') {\n      key.set(spec, 1);\n    } else if (Array.isArray(spec)) {\n      key.set(spec[0], spec[1] ?? 1);\n    } else if (spec instanceof Map) {\n      for (const [property, value] of spec) {\n        key.set(property, value);\n      }\n    } else if (isObject(spec)) {\n      for (const [property, value] of Object.entries(spec)) {\n        key.set(property, value);\n      }\n    }\n  }\n\n  return key;\n}\n\n/**\n * Receives an index description and returns a modified index description which has had invalid options removed\n * from the description and has mapped the `version` option to the `v` option.\n */\nfunction resolveIndexDescription(\n  description: IndexDescription\n): Omit<ResolvedIndexDescription, 'key'> {\n  const validProvidedOptions = Object.entries(description).filter(([optionName]) =>\n    VALID_INDEX_OPTIONS.has(optionName)\n  );\n\n  return Object.fromEntries(\n    // we support the `version` option, but the `createIndexes` command expects it to be the `v`\n    validProvidedOptions.map(([name, value]) => (name === 'version' ? ['v', value] : [name, value]))\n  );\n}\n\n/**\n * @public\n * The index information returned by the listIndexes command. https://www.mongodb.com/docs/manual/reference/command/listIndexes/#mongodb-dbcommand-dbcmd.listIndexes\n */\nexport type IndexDescriptionInfo = Omit<IndexDescription, 'key' | 'version'> & {\n  key: { [key: string]: IndexDirection };\n  v?: IndexDescription['version'];\n} & Document;\n\n/** @public */\nexport type IndexDescriptionCompact = Record<string, [name: string, direction: IndexDirection][]>;\n\n/**\n * @internal\n *\n * Internally, the driver represents index description keys with `Map`s to preserve key ordering.\n * We don't require users to specify maps, so we transform user provided descriptions into\n * \"resolved\" by converting the `key` into a JS `Map`, if it isn't already a map.\n *\n * Additionally, we support the `version` option, but the `createIndexes` command uses the field `v`\n * to specify the index version so we map the value of `version` to `v`, if provided.\n */\ntype ResolvedIndexDescription = Omit<IndexDescription, 'key' | 'version'> & {\n  key: Map<string, IndexDirection>;\n  v?: IndexDescription['version'];\n};\n\n/** @internal */\nexport class CreateIndexesOperation extends CommandOperation<string[]> {\n  override options: CreateIndexesOptions;\n  collectionName: string;\n  indexes: ReadonlyArray<ResolvedIndexDescription>;\n\n  private constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexes: IndexDescription[],\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, options);\n\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n    this.indexes = indexes.map((userIndex: IndexDescription): ResolvedIndexDescription => {\n      // Ensure the key is a Map to preserve index key ordering\n      const key =\n        userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n      const name = userIndex.name ?? Array.from(key).flat().join('_');\n      const validIndexOptions = resolveIndexDescription(userIndex);\n      return {\n        ...validIndexOptions,\n        name,\n        key\n      };\n    });\n  }\n\n  static fromIndexDescriptionArray(\n    parent: OperationParent,\n    collectionName: string,\n    indexes: IndexDescription[],\n    options?: CreateIndexesOptions\n  ): CreateIndexesOperation {\n    return new CreateIndexesOperation(parent, collectionName, indexes, options);\n  }\n\n  static fromIndexSpecification(\n    parent: OperationParent,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions = {}\n  ): CreateIndexesOperation {\n    const key = constructIndexDescriptionMap(indexSpec);\n    const description: IndexDescription = { ...options, key };\n    return new CreateIndexesOperation(parent, collectionName, [description], options);\n  }\n\n  override get commandName() {\n    return 'createIndexes';\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<string[]> {\n    const options = this.options;\n    const indexes = this.indexes;\n\n    const serverWireVersion = maxWireVersion(server);\n\n    const cmd: Document = { createIndexes: this.collectionName, indexes };\n\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        throw new MongoCompatibilityError(\n          'Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'\n        );\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n\n    await super.executeCommand(server, session, cmd, timeoutContext);\n\n    const indexNames = indexes.map(index => index.name || '');\n    return indexNames;\n  }\n}\n\n/** @public */\nexport type DropIndexesOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropIndexOperation extends CommandOperation<Document> {\n  override options: DropIndexesOptions;\n  collection: Collection;\n  indexName: string;\n\n  constructor(collection: Collection, indexName: string, options?: DropIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n\n  override get commandName() {\n    return 'dropIndexes' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<Document> {\n    const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n    return await super.executeCommand(server, session, cmd, timeoutContext);\n  }\n}\n\n/** @public */\nexport type ListIndexesOptions = AbstractCursorOptions & {\n  /** @internal */\n  omitMaxTimeMS?: boolean;\n};\n\n/** @internal */\nexport class ListIndexesOperation extends CommandOperation<CursorResponse> {\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  override options: ListIndexesOptions & { writeConcern?: never };\n  collectionNamespace: MongoDBNamespace;\n\n  constructor(collection: Collection, options?: ListIndexesOptions) {\n    super(collection, options);\n\n    this.options = { ...options };\n    delete this.options.writeConcern;\n    this.collectionNamespace = collection.s.namespace;\n  }\n\n  override get commandName() {\n    return 'listIndexes' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<CursorResponse> {\n    const serverWireVersion = maxWireVersion(server);\n\n    const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n\n    const command: Document = { listIndexes: this.collectionNamespace.collection, cursor };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    return await super.executeCommand(server, session, command, timeoutContext, CursorResponse);\n  }\n}\n\ndefineAspects(ListIndexesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexOperation, [Aspect.WRITE_OPERATION]);\n"
        }
    ]
}