{
    "sourceFile": "node_modules/mongodb/src/explain.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892635074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { type Document } from './bson';\nimport { AbstractCursor } from './cursor/abstract_cursor';\nimport { MongoAPIError } from './error';\n\n/** @public */\nexport const ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n} as const);\n\n/** @public */\nexport type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\".\n * @public\n */\nexport type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** @public */\nexport interface ExplainCommandOptions {\n  /** The explain verbosity for the command. */\n  verbosity: ExplainVerbosity;\n  /** The maxTimeMS setting for the command. */\n  maxTimeMS?: number;\n}\n\n/**\n * @public\n *\n * When set, this configures an explain command.  Valid values are boolean (for legacy compatibility,\n * see {@link ExplainVerbosityLike}), a string containing the explain verbosity, or an object containing the verbosity and\n * an optional maxTimeMS.\n *\n * Examples of valid usage:\n *\n * ```typescript\n * collection.find({ name: 'john doe' }, { explain: true });\n * collection.find({ name: 'john doe' }, { explain: false });\n * collection.find({ name: 'john doe' }, { explain: 'queryPlanner' });\n * collection.find({ name: 'john doe' }, { explain: { verbosity: 'queryPlanner' } });\n * ```\n *\n * maxTimeMS can be configured to limit the amount of time the server\n * spends executing an explain by providing an object:\n *\n * ```typescript\n * // limits the `explain` command to no more than 2 seconds\n * collection.find({ name: 'john doe' }, {\n *   explain:  {\n *    verbosity: 'queryPlanner',\n *    maxTimeMS: 2000\n *  }\n * });\n * ```\n */\nexport interface ExplainOptions {\n  /** Specifies the verbosity mode for the explain output. */\n  explain?: ExplainVerbosityLike | ExplainCommandOptions;\n}\n\n/** @internal */\nexport class Explain {\n  readonly verbosity: ExplainVerbosity;\n  readonly maxTimeMS?: number;\n\n  private constructor(verbosity: ExplainVerbosityLike, maxTimeMS?: number) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity\n        ? ExplainVerbosity.allPlansExecution\n        : ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n\n    this.maxTimeMS = maxTimeMS;\n  }\n\n  static fromOptions({ explain }: ExplainOptions = {}): Explain | undefined {\n    if (explain == null) return;\n\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    const { verbosity, maxTimeMS } = explain;\n    return new Explain(verbosity, maxTimeMS);\n  }\n}\n\nexport function validateExplainTimeoutOptions(options: Document, explain?: Explain) {\n  const { maxTimeMS, timeoutMS } = options;\n  if (timeoutMS != null && (maxTimeMS != null || explain?.maxTimeMS != null)) {\n    throw new MongoAPIError('Cannot use maxTimeMS with timeoutMS for explain commands.');\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(\n  command: Document,\n  explain: Explain\n): {\n  explain: Document;\n  verbosity: ExplainVerbosity;\n  maxTimeMS?: number;\n} {\n  type ExplainCommand = ReturnType<typeof decorateWithExplain>;\n  const { verbosity, maxTimeMS } = explain;\n  const baseCommand: ExplainCommand = { explain: command, verbosity };\n\n  if (typeof maxTimeMS === 'number') {\n    baseCommand.maxTimeMS = maxTimeMS;\n  }\n\n  return baseCommand;\n}\n\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nexport abstract class ExplainableCursor<TSchema> extends AbstractCursor<TSchema> {\n  /** Execute the explain for the cursor */\n  abstract explain(): Promise<Document>;\n  abstract explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document>;\n  abstract explain(options: { timeoutMS?: number }): Promise<Document>;\n  abstract explain(\n    verbosity: ExplainVerbosityLike | ExplainCommandOptions,\n    options: { timeoutMS?: number }\n  ): Promise<Document>;\n  abstract explain(\n    verbosity?: ExplainVerbosityLike | ExplainCommandOptions | { timeoutMS?: number },\n    options?: { timeoutMS?: number }\n  ): Promise<Document>;\n\n  protected resolveExplainTimeoutOptions(\n    verbosity?: ExplainVerbosityLike | ExplainCommandOptions | { timeoutMS?: number },\n    options?: { timeoutMS?: number }\n  ): { timeout?: { timeoutMS?: number }; explain?: ExplainVerbosityLike | ExplainCommandOptions } {\n    let explain: ExplainVerbosityLike | ExplainCommandOptions | undefined;\n    let timeout: { timeoutMS?: number } | undefined;\n\n    if (verbosity == null && options == null) {\n      explain = undefined;\n      timeout = undefined;\n    } else if (verbosity != null && options == null) {\n      explain =\n        typeof verbosity !== 'object'\n          ? verbosity\n          : 'verbosity' in verbosity\n            ? verbosity\n            : undefined;\n\n      timeout = typeof verbosity === 'object' && 'timeoutMS' in verbosity ? verbosity : undefined;\n    } else {\n      // @ts-expect-error TS isn't smart enough to determine that if both options are provided, the first is explain options\n      explain = verbosity;\n      timeout = options;\n    }\n\n    return { timeout, explain };\n  }\n}\n"
        }
    ]
}