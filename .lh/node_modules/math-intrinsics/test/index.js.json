{
    "sourceFile": "node_modules/math-intrinsics/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892609729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\n\nvar abs = require('../abs');\nvar floor = require('../floor');\nvar isFinite = require('../isFinite');\nvar isInteger = require('../isInteger');\nvar isNaN = require('../isNaN');\nvar isNegativeZero = require('../isNegativeZero');\nvar max = require('../max');\nvar min = require('../min');\nvar mod = require('../mod');\nvar pow = require('../pow');\nvar round = require('../round');\nvar sign = require('../sign');\n\nvar maxArrayLength = require('../constants/maxArrayLength');\nvar maxSafeInteger = require('../constants/maxSafeInteger');\nvar maxValue = require('../constants/maxValue');\n\ntest('abs', function (t) {\n\tt.equal(abs(-1), 1, 'abs(-1) === 1');\n\tt.equal(abs(+1), 1, 'abs(+1) === 1');\n\tt.equal(abs(+0), +0, 'abs(+0) === +0');\n\tt.equal(abs(-0), +0, 'abs(-0) === +0');\n\n\tt.end();\n});\n\ntest('floor', function (t) {\n\tt.equal(floor(-1.1), -2, 'floor(-1.1) === -2');\n\tt.equal(floor(+1.1), 1, 'floor(+1.1) === 1');\n\tt.equal(floor(+0), +0, 'floor(+0) === +0');\n\tt.equal(floor(-0), -0, 'floor(-0) === -0');\n\tt.equal(floor(-Infinity), -Infinity, 'floor(-Infinity) === -Infinity');\n\tt.equal(floor(Number(Infinity)), Number(Infinity), 'floor(+Infinity) === +Infinity');\n\tt.equal(floor(NaN), NaN, 'floor(NaN) === NaN');\n\tt.equal(floor(0), +0, 'floor(0) === +0');\n\tt.equal(floor(-0), -0, 'floor(-0) === -0');\n\tt.equal(floor(1), 1, 'floor(1) === 1');\n\tt.equal(floor(-1), -1, 'floor(-1) === -1');\n\tt.equal(floor(1.1), 1, 'floor(1.1) === 1');\n\tt.equal(floor(-1.1), -2, 'floor(-1.1) === -2');\n\tt.equal(floor(maxValue), maxValue, 'floor(maxValue) === maxValue');\n\tt.equal(floor(maxSafeInteger), maxSafeInteger, 'floor(maxSafeInteger) === maxSafeInteger');\n\n\tt.end();\n});\n\ntest('isFinite', function (t) {\n\tt.equal(isFinite(0), true, 'isFinite(+0) === true');\n\tt.equal(isFinite(-0), true, 'isFinite(-0) === true');\n\tt.equal(isFinite(1), true, 'isFinite(1) === true');\n\tt.equal(isFinite(Infinity), false, 'isFinite(Infinity) === false');\n\tt.equal(isFinite(-Infinity), false, 'isFinite(-Infinity) === false');\n\tt.equal(isFinite(NaN), false, 'isFinite(NaN) === false');\n\n\tforEach(v.nonNumbers, function (nonNumber) {\n\t\tt.equal(isFinite(nonNumber), false, 'isFinite(' + inspect(nonNumber) + ') === false');\n\t});\n\n\tt.end();\n});\n\ntest('isInteger', function (t) {\n\tforEach([].concat(\n\t\t// @ts-expect-error TS sucks with concat\n\t\tv.nonNumbers,\n\t\tv.nonIntegerNumbers\n\t), function (nonInteger) {\n\t\tt.equal(isInteger(nonInteger), false, 'isInteger(' + inspect(nonInteger) + ') === false');\n\t});\n\n\tt.end();\n});\n\ntest('isNaN', function (t) {\n\tforEach([].concat(\n\t\t// @ts-expect-error TS sucks with concat\n\t\tv.nonNumbers,\n\t\tv.infinities,\n\t\tv.zeroes,\n\t\tv.integerNumbers\n\t), function (nonNaN) {\n\t\tt.equal(isNaN(nonNaN), false, 'isNaN(' + inspect(nonNaN) + ') === false');\n\t});\n\n\tt.equal(isNaN(NaN), true, 'isNaN(NaN) === true');\n\n\tt.end();\n});\n\ntest('isNegativeZero', function (t) {\n\tt.equal(isNegativeZero(-0), true, 'isNegativeZero(-0) === true');\n\tt.equal(isNegativeZero(+0), false, 'isNegativeZero(+0) === false');\n\tt.equal(isNegativeZero(1), false, 'isNegativeZero(1) === false');\n\tt.equal(isNegativeZero(-1), false, 'isNegativeZero(-1) === false');\n\tt.equal(isNegativeZero(NaN), false, 'isNegativeZero(NaN) === false');\n\tt.equal(isNegativeZero(Infinity), false, 'isNegativeZero(Infinity) === false');\n\tt.equal(isNegativeZero(-Infinity), false, 'isNegativeZero(-Infinity) === false');\n\n\tforEach(v.nonNumbers, function (nonNumber) {\n\t\tt.equal(isNegativeZero(nonNumber), false, 'isNegativeZero(' + inspect(nonNumber) + ') === false');\n\t});\n\n\tt.end();\n});\n\ntest('max', function (t) {\n\tt.equal(max(1, 2), 2, 'max(1, 2) === 2');\n\tt.equal(max(1, 2, 3), 3, 'max(1, 2, 3) === 3');\n\tt.equal(max(1, 2, 3, 4), 4, 'max(1, 2, 3, 4) === 4');\n\tt.equal(max(1, 2, 3, 4, 5), 5, 'max(1, 2, 3, 4, 5) === 5');\n\tt.equal(max(1, 2, 3, 4, 5, 6), 6, 'max(1, 2, 3, 4, 5, 6) === 6');\n\tt.equal(max(1, 2, 3, 4, 5, 6, 7), 7, 'max(1, 2, 3, 4, 5, 6, 7) === 7');\n\n\tt.end();\n});\n\ntest('min', function (t) {\n\tt.equal(min(1, 2), 1, 'min(1, 2) === 1');\n\tt.equal(min(1, 2, 3), 1, 'min(1, 2, 3) === 1');\n\tt.equal(min(1, 2, 3, 4), 1, 'min(1, 2, 3, 4) === 1');\n\tt.equal(min(1, 2, 3, 4, 5), 1, 'min(1, 2, 3, 4, 5) === 1');\n\tt.equal(min(1, 2, 3, 4, 5, 6), 1, 'min(1, 2, 3, 4, 5, 6) === 1');\n\n\tt.end();\n});\n\ntest('mod', function (t) {\n\tt.equal(mod(1, 2), 1, 'mod(1, 2) === 1');\n\tt.equal(mod(2, 2), 0, 'mod(2, 2) === 0');\n\tt.equal(mod(3, 2), 1, 'mod(3, 2) === 1');\n\tt.equal(mod(4, 2), 0, 'mod(4, 2) === 0');\n\tt.equal(mod(5, 2), 1, 'mod(5, 2) === 1');\n\tt.equal(mod(6, 2), 0, 'mod(6, 2) === 0');\n\tt.equal(mod(7, 2), 1, 'mod(7, 2) === 1');\n\tt.equal(mod(8, 2), 0, 'mod(8, 2) === 0');\n\tt.equal(mod(9, 2), 1, 'mod(9, 2) === 1');\n\tt.equal(mod(10, 2), 0, 'mod(10, 2) === 0');\n\tt.equal(mod(11, 2), 1, 'mod(11, 2) === 1');\n\n\tt.end();\n});\n\ntest('pow', function (t) {\n\tt.equal(pow(2, 2), 4, 'pow(2, 2) === 4');\n\tt.equal(pow(2, 3), 8, 'pow(2, 3) === 8');\n\tt.equal(pow(2, 4), 16, 'pow(2, 4) === 16');\n\tt.equal(pow(2, 5), 32, 'pow(2, 5) === 32');\n\tt.equal(pow(2, 6), 64, 'pow(2, 6) === 64');\n\tt.equal(pow(2, 7), 128, 'pow(2, 7) === 128');\n\tt.equal(pow(2, 8), 256, 'pow(2, 8) === 256');\n\tt.equal(pow(2, 9), 512, 'pow(2, 9) === 512');\n\tt.equal(pow(2, 10), 1024, 'pow(2, 10) === 1024');\n\n\tt.end();\n});\n\ntest('round', function (t) {\n\tt.equal(round(1.1), 1, 'round(1.1) === 1');\n\tt.equal(round(1.5), 2, 'round(1.5) === 2');\n\tt.equal(round(1.9), 2, 'round(1.9) === 2');\n\n\tt.end();\n});\n\ntest('sign', function (t) {\n\tt.equal(sign(-1), -1, 'sign(-1) === -1');\n\tt.equal(sign(+1), +1, 'sign(+1) === +1');\n\tt.equal(sign(+0), +0, 'sign(+0) === +0');\n\tt.equal(sign(-0), -0, 'sign(-0) === -0');\n\tt.equal(sign(NaN), NaN, 'sign(NaN) === NaN');\n\tt.equal(sign(Infinity), +1, 'sign(Infinity) === +1');\n\tt.equal(sign(-Infinity), -1, 'sign(-Infinity) === -1');\n\tt.equal(sign(maxValue), +1, 'sign(maxValue) === +1');\n\tt.equal(sign(maxSafeInteger), +1, 'sign(maxSafeInteger) === +1');\n\n\tt.end();\n});\n\ntest('constants', function (t) {\n\tt.equal(typeof maxArrayLength, 'number', 'typeof maxArrayLength === \"number\"');\n\tt.equal(typeof maxSafeInteger, 'number', 'typeof maxSafeInteger === \"number\"');\n\tt.equal(typeof maxValue, 'number', 'typeof maxValue === \"number\"');\n\n\tt.end();\n});\n"
        }
    ]
}