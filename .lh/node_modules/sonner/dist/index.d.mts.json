{
    "sourceFile": "node_modules/sonner/dist/index.d.mts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893033176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import React from 'react';\n\ntype ToastTypes = 'normal' | 'action' | 'success' | 'info' | 'warning' | 'error' | 'loading' | 'default';\ntype PromiseT<Data = any> = Promise<Data> | (() => Promise<Data>);\ninterface PromiseIExtendedResult extends ExternalToast {\n    message: React.ReactNode;\n}\ntype PromiseTExtendedResult<Data = any> = PromiseIExtendedResult | ((data: Data) => PromiseIExtendedResult | Promise<PromiseIExtendedResult>);\ntype PromiseTResult<Data = any> = string | React.ReactNode | ((data: Data) => React.ReactNode | string | Promise<React.ReactNode | string>);\ntype PromiseExternalToast = Omit<ExternalToast, 'description'>;\ntype PromiseData<ToastData = any> = PromiseExternalToast & {\n    loading?: string | React.ReactNode;\n    success?: PromiseTResult<ToastData> | PromiseTExtendedResult<ToastData>;\n    error?: PromiseTResult | PromiseTExtendedResult;\n    description?: PromiseTResult;\n    finally?: () => void | Promise<void>;\n};\ninterface ToastClassnames {\n    toast?: string;\n    title?: string;\n    description?: string;\n    loader?: string;\n    closeButton?: string;\n    cancelButton?: string;\n    actionButton?: string;\n    success?: string;\n    error?: string;\n    info?: string;\n    warning?: string;\n    loading?: string;\n    default?: string;\n    content?: string;\n    icon?: string;\n}\ninterface ToastIcons {\n    success?: React.ReactNode;\n    info?: React.ReactNode;\n    warning?: React.ReactNode;\n    error?: React.ReactNode;\n    loading?: React.ReactNode;\n    close?: React.ReactNode;\n}\ninterface Action {\n    label: React.ReactNode;\n    onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    actionButtonStyle?: React.CSSProperties;\n}\ninterface ToastT {\n    id: number | string;\n    title?: (() => React.ReactNode) | React.ReactNode;\n    type?: ToastTypes;\n    icon?: React.ReactNode;\n    jsx?: React.ReactNode;\n    richColors?: boolean;\n    invert?: boolean;\n    closeButton?: boolean;\n    dismissible?: boolean;\n    description?: (() => React.ReactNode) | React.ReactNode;\n    duration?: number;\n    delete?: boolean;\n    action?: Action | React.ReactNode;\n    cancel?: Action | React.ReactNode;\n    onDismiss?: (toast: ToastT) => void;\n    onAutoClose?: (toast: ToastT) => void;\n    promise?: PromiseT;\n    cancelButtonStyle?: React.CSSProperties;\n    actionButtonStyle?: React.CSSProperties;\n    style?: React.CSSProperties;\n    unstyled?: boolean;\n    className?: string;\n    classNames?: ToastClassnames;\n    descriptionClassName?: string;\n    position?: Position;\n}\ntype Position = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';\ninterface ToastOptions {\n    className?: string;\n    closeButton?: boolean;\n    descriptionClassName?: string;\n    style?: React.CSSProperties;\n    cancelButtonStyle?: React.CSSProperties;\n    actionButtonStyle?: React.CSSProperties;\n    duration?: number;\n    unstyled?: boolean;\n    classNames?: ToastClassnames;\n    closeButtonAriaLabel?: string;\n}\ntype Offset = {\n    top?: string | number;\n    right?: string | number;\n    bottom?: string | number;\n    left?: string | number;\n} | string | number;\ninterface ToasterProps {\n    invert?: boolean;\n    theme?: 'light' | 'dark' | 'system';\n    position?: Position;\n    hotkey?: string[];\n    richColors?: boolean;\n    expand?: boolean;\n    duration?: number;\n    gap?: number;\n    visibleToasts?: number;\n    closeButton?: boolean;\n    toastOptions?: ToastOptions;\n    className?: string;\n    style?: React.CSSProperties;\n    offset?: Offset;\n    mobileOffset?: Offset;\n    dir?: 'rtl' | 'ltr' | 'auto';\n    swipeDirections?: SwipeDirection[];\n    icons?: ToastIcons;\n    containerAriaLabel?: string;\n}\ntype SwipeDirection = 'top' | 'right' | 'bottom' | 'left';\ninterface ToastToDismiss {\n    id: number | string;\n    dismiss: boolean;\n}\ntype ExternalToast = Omit<ToastT, 'id' | 'type' | 'title' | 'jsx' | 'delete' | 'promise'> & {\n    id?: number | string;\n};\n\ntype titleT = (() => React.ReactNode) | React.ReactNode;\ndeclare const toast: ((message: titleT, data?: ExternalToast) => string | number) & {\n    success: (message: titleT | React.ReactNode, data?: ExternalToast) => string | number;\n    info: (message: titleT | React.ReactNode, data?: ExternalToast) => string | number;\n    warning: (message: titleT | React.ReactNode, data?: ExternalToast) => string | number;\n    error: (message: titleT | React.ReactNode, data?: ExternalToast) => string | number;\n    custom: (jsx: (id: number | string) => React.ReactElement, data?: ExternalToast) => string | number;\n    message: (message: titleT | React.ReactNode, data?: ExternalToast) => string | number;\n    promise: <ToastData>(promise: PromiseT<ToastData>, data?: PromiseData<ToastData>) => (string & {\n        unwrap: () => Promise<ToastData>;\n    }) | (number & {\n        unwrap: () => Promise<ToastData>;\n    }) | {\n        unwrap: () => Promise<ToastData>;\n    };\n    dismiss: (id?: number | string) => string | number;\n    loading: (message: titleT | React.ReactNode, data?: ExternalToast) => string | number;\n} & {\n    getHistory: () => (ToastT | ToastToDismiss)[];\n    getToasts: () => (ToastT | ToastToDismiss)[];\n};\n\ndeclare function useSonner(): {\n    toasts: ToastT[];\n};\ndeclare const Toaster: React.ForwardRefExoticComponent<ToasterProps & React.RefAttributes<HTMLElement>>;\n\nexport { type Action, type ExternalToast, type ToastClassnames, type ToastT, type ToastToDismiss, Toaster, type ToasterProps, toast, useSonner };\n"
        }
    ]
}