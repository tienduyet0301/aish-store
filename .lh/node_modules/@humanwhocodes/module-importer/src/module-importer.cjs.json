{
    "sourceFile": "node_modules/@humanwhocodes/module-importer/src/module-importer.cjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891879490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/**\n * @fileoverview Universal module importer\n */\n\n//-----------------------------------------------------------------------------\n// Imports\n//-----------------------------------------------------------------------------\n\nconst { createRequire } = require(\"module\");\nconst { pathToFileURL }  = require(\"url\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\nconst SLASHES = new Set([\"/\", \"\\\\\"]);\n\n/**\n * Normalizes directories to have a trailing slash.\n * Resolve is pretty finicky -- if the directory name doesn't have\n * a trailing slash then it tries to look in the parent directory.\n * i.e., if the directory is \"/usr/nzakas/foo\" it will start the \n * search in /usr/nzakas. However, if the directory is \"/user/nzakas/foo/\",\n * then it will start the search in /user/nzakas/foo.\n * @param {string} directory The directory to check. \n * @returns {string} The normalized directory.\n */\nfunction normalizeDirectory(directory) {\n    if (!SLASHES.has(directory[directory.length-1])) {\n        return directory + \"/\";\n    }\n\n    return directory;\n}\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * Class for importing both CommonJS and ESM modules in Node.js.\n */\nexports.ModuleImporter = class ModuleImporter {\n\n    /**\n     * Creates a new instance.\n     * @param {string} [cwd] The current working directory to resolve from. \n     */\n    constructor(cwd = process.cwd()) {\n\n        /**\n         * The base directory from which paths should be resolved.\n         * @type {string}\n         */\n        this.cwd = normalizeDirectory(cwd);\n    }\n\n    /**\n     * Resolves a module based on its name or location.\n     * @param {string} specifier Either an npm package name or\n     *      relative file path.\n     * @returns {string|undefined} The location of the import.\n     * @throws {Error} If specifier cannot be located.\n     */\n    resolve(specifier) {\n        const require = createRequire(this.cwd);\n        return require.resolve(specifier);\n    }\n\n    /**\n     * Imports a module based on its name or location.\n     * @param {string} specifier Either an npm package name or\n     *      relative file path.\n     * @returns {Promise<object>} The module's object.\n     */\n    import(specifier) {\n        const location = this.resolve(specifier);\n        return import(pathToFileURL(location).href);\n    }\n\n}\n"
        }
    ]
}