{
    "sourceFile": "node_modules/typed-array-byte-offset/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893069795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar forEach = require('for-each');\nvar callBind = require('call-bind');\nvar gPO = require('reflect.getprototypeof/polyfill')();\n\nvar typedArrays = require('available-typed-arrays')();\n\n/** @typedef {(x: import('.').TypedArray) => number} ByteOffsetGetter */\n\n/** @type {Record<import('.').TypedArrayName, ByteOffsetGetter>} */\nvar getters = {\n\t// @ts-expect-error TS can't handle __proto__ or `satisfies` in jsdoc\n\t__proto__: null\n};\n\nvar gOPD = require('gopd');\nvar oDP = Object.defineProperty;\nif (gOPD) {\n\t/** @type {ByteOffsetGetter} */\n\tvar getByteOffset = function (x) {\n\t\treturn x.byteOffset;\n\t};\n\tforEach(typedArrays, function (typedArray) {\n\t\t// In Safari 7, Typed Array constructors are typeof object\n\t\tif (typeof global[typedArray] === 'function' || typeof global[typedArray] === 'object') {\n\t\t\tvar Proto = global[typedArray].prototype;\n\t\t\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\t\t\tvar descriptor = gOPD(Proto, 'byteOffset');\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = gPO(Proto);\n\t\t\t\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\t\t\t\tdescriptor = gOPD(superProto, 'byteOffset');\n\t\t\t}\n\t\t\t// Opera 12.16 has a magic byteOffset data property on instances AND on Proto\n\t\t\tif (descriptor && descriptor.get) {\n\t\t\t\tgetters[typedArray] = callBind(descriptor.get);\n\t\t\t} else if (oDP) {\n\t\t\t\t// this is likely an engine where instances have a magic byteOffset data property\n\t\t\t\tvar arr = new global[typedArray](2);\n\t\t\t\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\t\t\t\tdescriptor = gOPD(arr, 'byteOffset');\n\t\t\t\tif (descriptor && descriptor.configurable) {\n\t\t\t\t\toDP(arr, 'length', { value: 3 });\n\t\t\t\t}\n\t\t\t\tif (arr.length === 2) {\n\t\t\t\t\tgetters[typedArray] = getByteOffset;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\n/** @type {ByteOffsetGetter} */\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\t/** @type {number} */ var foundOffset;\n\tforEach(getters, /** @type {(getter: ByteOffsetGetter) => void} */ function (getter) {\n\t\tif (typeof foundOffset !== 'number') {\n\t\t\ttry {\n\t\t\t\tvar offset = getter(value);\n\t\t\t\tif (typeof offset === 'number') {\n\t\t\t\t\tfoundOffset = offset;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\t// @ts-expect-error TS can't guarantee the callback is invoked sync\n\treturn foundOffset;\n};\n\nvar isTypedArray = require('is-typed-array');\n\n/** @type {import('.')} */\nmodule.exports = function typedArrayByteOffset(value) {\n\tif (!isTypedArray(value)) {\n\t\treturn false;\n\t}\n\treturn tryTypedArrays(value);\n};\n"
        }
    ]
}