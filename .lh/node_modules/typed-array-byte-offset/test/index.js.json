{
    "sourceFile": "node_modules/typed-array-byte-offset/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893070177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar typedArrayByteOffset = require('../');\nvar isCallable = require('is-callable');\nvar generators = require('make-generator-function')();\nvar arrowFn = require('make-arrow-function')();\nvar forEach = require('for-each');\nvar inspect = require('object-inspect');\n\nvar typedArrayNames = require('possible-typed-array-names');\n\ntest('not arrays', function (t) {\n\tt.test('non-number/string primitives', function (st) {\n\t\t// @ts-expect-error\n\t\tst.equal(false, typedArrayByteOffset(), 'undefined is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(null), 'null is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(false), 'false is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(true), 'true is not typed array');\n\t\tst.end();\n\t});\n\n\tt.equal(false, typedArrayByteOffset({}), 'object is not typed array');\n\tt.equal(false, typedArrayByteOffset(/a/g), 'regex literal is not typed array');\n\tt.equal(false, typedArrayByteOffset(new RegExp('a', 'g')), 'regex object is not typed array');\n\tt.equal(false, typedArrayByteOffset(new Date()), 'new Date() is not typed array');\n\n\tt.test('numbers', function (st) {\n\t\tst.equal(false, typedArrayByteOffset(42), 'number is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(Object(42)), 'number object is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(NaN), 'NaN is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(Infinity), 'Infinity is not typed array');\n\t\tst.end();\n\t});\n\n\tt.test('strings', function (st) {\n\t\tst.equal(false, typedArrayByteOffset('foo'), 'string primitive is not typed array');\n\t\tst.equal(false, typedArrayByteOffset(Object('foo')), 'string object is not typed array');\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n\ntest('Functions', function (t) {\n\tt.equal(false, typedArrayByteOffset(function () {}), 'function is not typed array');\n\tt.end();\n});\n\ntest('Generators', { skip: generators.length === 0 }, function (t) {\n\tforEach(generators, function (genFn) {\n\t\tt.equal(false, typedArrayByteOffset(genFn), 'generator function ' + inspect(genFn) + ' is not typed array');\n\t});\n\tt.end();\n});\n\ntest('Arrow functions', { skip: !arrowFn }, function (t) {\n\tt.equal(false, typedArrayByteOffset(arrowFn), 'arrow function is not typed array');\n\tt.end();\n});\n\ntest('Typed Arrays', function (t) {\n\tvar length = 32;\n\tvar byteOffset = 16;\n\n\tforEach(typedArrayNames, function (typedArray) {\n\t\tvar buffer = new ArrayBuffer(length);\n\t\tvar TypedArray = global[typedArray];\n\t\tif (isCallable(TypedArray)) {\n\t\t\t// @ts-expect-error hush, TS, TAs can take an optional byte offset arg\n\t\t\tvar arr = new TypedArray(buffer, byteOffset);\n\t\t\tt.equal(typedArrayByteOffset(arr), byteOffset, 'new ' + typedArray + '(new ArrayBuffer(' + length + '), ' + byteOffset + ') is typed array of byte offset ' + byteOffset);\n\t\t} else {\n\t\t\tt.comment('# SKIP ' + typedArray + ' is not supported');\n\t\t}\n\t});\n\tt.end();\n});\n"
        }
    ]
}