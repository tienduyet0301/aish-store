{
    "sourceFile": "node_modules/call-bind-apply-helpers/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892067443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "type RemoveFromTuple<\n  Tuple extends readonly unknown[],\n  RemoveCount extends number,\n  Index extends 1[] = []\n> = Index[\"length\"] extends RemoveCount\n  ? Tuple\n  : Tuple extends [infer First, ...infer Rest]\n  ? RemoveFromTuple<Rest, RemoveCount, [...Index, 1]>\n  : Tuple;\n\ntype ConcatTuples<\n  Prefix extends readonly unknown[],\n  Suffix extends readonly unknown[]\n> = [...Prefix, ...Suffix];\n\ntype ExtractFunctionParams<T> = T extends (this: infer TThis, ...args: infer P extends readonly unknown[]) => infer R\n  ? { thisArg: TThis; params: P; returnType: R }\n  : never;\n\ntype BindFunction<\n  T extends (this: any, ...args: any[]) => any,\n  TThis,\n  TBoundArgs extends readonly unknown[],\n  ReceiverBound extends boolean\n> = ExtractFunctionParams<T> extends {\n  thisArg: infer OrigThis;\n  params: infer P extends readonly unknown[];\n  returnType: infer R;\n}\n  ? ReceiverBound extends true\n    ? (...args: RemoveFromTuple<P, Extract<TBoundArgs[\"length\"], number>>) => R extends [OrigThis, ...infer Rest]\n      ? [TThis, ...Rest] // Replace `this` with `thisArg`\n      : R\n    : <U, RemainingArgs extends RemoveFromTuple<P, Extract<TBoundArgs[\"length\"], number>>>(\n        thisArg: U,\n        ...args: RemainingArgs\n      ) => R extends [OrigThis, ...infer Rest]\n      ? [U, ...ConcatTuples<TBoundArgs, Rest>] // Preserve bound args in return type\n      : R\n  : never;\n\ndeclare function callBind<\n  const T extends (this: any, ...args: any[]) => any,\n  Extracted extends ExtractFunctionParams<T>,\n  const TBoundArgs extends Partial<Extracted[\"params\"]> & readonly unknown[],\n  const TThis extends Extracted[\"thisArg\"]\n>(\n  args: [fn: T, thisArg: TThis, ...boundArgs: TBoundArgs]\n): BindFunction<T, TThis, TBoundArgs, true>;\n\ndeclare function callBind<\n  const T extends (this: any, ...args: any[]) => any,\n  Extracted extends ExtractFunctionParams<T>,\n  const TBoundArgs extends Partial<Extracted[\"params\"]> & readonly unknown[]\n>(\n  args: [fn: T, ...boundArgs: TBoundArgs]\n): BindFunction<T, Extracted[\"thisArg\"], TBoundArgs, false>;\n\ndeclare function callBind<const TArgs extends readonly unknown[]>(\n  args: [fn: Exclude<TArgs[0], Function>, ...rest: TArgs]\n): never;\n\n// export as namespace callBind;\nexport = callBind;\n"
        }
    ]
}