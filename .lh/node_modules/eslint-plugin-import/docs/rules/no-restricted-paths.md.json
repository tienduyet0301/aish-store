{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-restricted-paths.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892251396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-restricted-paths\n\n<!-- end auto-generated rule header -->\n\nSome projects contain files which are not always meant to be executed in the same environment.\nFor example consider a web application that contains specific code for the server and some specific code for the browser/client. In this case you don’t want to import server-only files in your client code.\n\nIn order to prevent such scenarios this rule allows you to define restricted zones where you can forbid files from being imported if they match a specific path.\n\n## Rule Details\n\nThis rule has one option. The option is an object containing the definition of all restricted `zones` and the optional `basePath` which is used to resolve relative paths within.\nThe default value for `basePath` is the current working directory.\n\nEach zone consists of the `target` paths, a `from` paths, and an optional `except` and `message` attribute.\n\n - `target` contains the paths where the restricted imports should be applied. It can be expressed by\n   - directory string path that matches all its containing files\n   - glob pattern matching all the targeted files\n   - an array of multiple of the two types above\n - `from` paths define the folders that are not allowed to be used in an import. It can be expressed by\n   - directory string path that matches all its containing files\n   - glob pattern matching all the files restricted to be imported\n   - an array of multiple directory string path\n   - an array of multiple glob patterns\n - `except` may be defined for a zone, allowing exception paths that would otherwise violate the related `from`. Note that it does not alter the behaviour of `target` in any way.\n   - in case `from` contains only glob patterns, `except` must be an array of glob patterns as well\n   - in case `from` contains only directory path, `except` is relative to `from` and cannot backtrack to a parent directory\n - `message` - will be displayed in case of the rule violation.\n\n### Examples\n\nGiven the following folder structure:\n\n```pt\nmy-project\n├── client\n│   └── foo.js\n│   └── baz.js\n└── server\n    └── bar.js\n```\n\nand the current file being linted is `my-project/client/foo.js`.\n\nThe following patterns are considered problems when configuration set to `{ \"zones\": [ { \"target\": \"./client\", \"from\": \"./server\" } ] }`:\n\n```js\nimport bar from '../server/bar';\n```\n\nThe following patterns are not considered problems when configuration set to `{ \"zones\": [ { \"target\": \"./client\", \"from\": \"./server\" } ] }`:\n\n```js\nimport baz from '../client/baz';\n```\n\n---------------\n\nGiven the following folder structure:\n\n```pt\nmy-project\n├── client\n│   └── foo.js\n│   └── baz.js\n└── server\n    ├── one\n    │   └── a.js\n    │   └── b.js\n    └── two\n```\n\nand the current file being linted is `my-project/server/one/a.js`.\n\nand the current configuration is set to:\n\n```json\n{ \"zones\": [ {\n    \"target\": \"./tests/files/restricted-paths/server/one\",\n    \"from\": \"./tests/files/restricted-paths/server\",\n    \"except\": [\"./one\"]\n} ] }\n```\n\nThe following pattern is considered a problem:\n\n```js\nimport a from '../two/a'\n```\n\nThe following pattern is not considered a problem:\n\n```js\nimport b from './b'\n\n```\n\n---------------\n\nGiven the following folder structure:\n\n```pt\nmy-project\n├── client\n    └── foo.js\n    └── sub-module\n        └── bar.js\n        └── baz.js\n\n```\n\nand the current configuration is set to:\n\n```json\n{ \"zones\": [ {\n    \"target\": \"./tests/files/restricted-paths/client/!(sub-module)/**/*\",\n    \"from\": \"./tests/files/restricted-paths/client/sub-module/**/*\",\n} ] }\n```\n\nThe following import is considered a problem in `my-project/client/foo.js`:\n\n```js\nimport a from './sub-module/baz'\n```\n\nThe following import is not considered a problem in `my-project/client/sub-module/bar.js`:\n\n```js\nimport b from './baz'\n```\n\n---------------\n\nGiven the following folder structure:\n\n```pt\nmy-project\n└── one\n   └── a.js\n   └── b.js\n└── two\n   └── a.js\n   └── b.js\n└── three\n   └── a.js\n   └── b.js\n```\n\nand the current configuration is set to:\n\n```json\n{\n  \"zones\": [\n    {\n      \"target\": [\"./tests/files/restricted-paths/two/*\", \"./tests/files/restricted-paths/three/*\"],\n      \"from\": [\"./tests/files/restricted-paths/one\", \"./tests/files/restricted-paths/three\"],\n    }\n  ]\n}\n```\n\nThe following patterns are not considered a problem in `my-project/one/b.js`:\n\n```js\nimport a from '../three/a'\n```\n\n```js\nimport a from './a'\n```\n\nThe following pattern is not considered a problem in `my-project/two/b.js`:\n\n```js\nimport a from './a'\n```\n\nThe following patterns are considered a problem in `my-project/two/a.js`:\n\n```js\nimport a from '../one/a'\n```\n\n```js\nimport a from '../three/a'\n```\n\nThe following patterns are considered a problem in `my-project/three/b.js`:\n\n```js\nimport a from '../one/a'\n```\n\n```js\nimport a from './a'\n```\n"
        }
    ]
}