{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/dynamic-import-chunkname.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892249833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/dynamic-import-chunkname\n\nðŸ’¡ This rule is manually fixable by [editor suggestions](https://eslint.org/docs/latest/use/core-concepts#rule-suggestions).\n\n<!-- end auto-generated rule header -->\n\nThis rule reports any dynamic imports without a webpackChunkName specified in a leading block comment in the proper format.\n\nThis rule enforces naming of webpack chunks in dynamic imports. When you don't explicitly name chunks, webpack will autogenerate chunk names that are not consistent across builds, which prevents long-term browser caching.\n\n## Rule Details\n\nThis rule runs against `import()` by default, but can be configured to also run against an alternative dynamic-import function, e.g. 'dynamicImport.'\nYou can also configure the regex format you'd like to accept for the webpackChunkName - for example, if we don't want the number 6 to show up in our chunk names:\n\n ```javascript\n{\n  \"dynamic-import-chunkname\": [2, {\n    importFunctions: [\"dynamicImport\"],\n    webpackChunknameFormat: \"[a-zA-Z0-57-9-/_]+\",\n    allowEmpty: false\n  }]\n}\n```\n\n### invalid\n\nThe following patterns are invalid:\n\n```javascript\n// no leading comment\nimport('someModule');\n\n// incorrectly formatted comment\nimport(\n  /*webpackChunkName:\"someModule\"*/\n  'someModule',\n);\nimport(\n  /* webpackChunkName : \"someModule\" */\n  'someModule',\n);\n\n// chunkname contains a 6 (forbidden by rule config)\nimport(\n  /* webpackChunkName: \"someModule6\" */\n  'someModule',\n);\n\n// invalid syntax for webpack comment\nimport(\n  /* totally not webpackChunkName: \"someModule\" */\n  'someModule',\n);\n\n// single-line comment, not a block-style comment\nimport(\n  // webpackChunkName: \"someModule\"\n  'someModule',\n);\n\n// chunk names are disallowed when eager mode is set\nimport(\n  /* webpackMode: \"eager\" */\n  /* webpackChunkName: \"someModule\" */\n  'someModule',\n)\n```\n\n### valid\n\nThe following patterns are valid:\n\n```javascript\n  import(\n    /* webpackChunkName: \"someModule\" */\n    'someModule',\n  );\n  import(\n    /* webpackChunkName: \"someOtherModule12345789\" */\n    'someModule',\n  );\n  import(\n    /* webpackChunkName: \"someModule\" */\n    /* webpackPrefetch: true */\n    'someModule',\n  );\n  import(\n    /* webpackChunkName: \"someModule\", webpackPrefetch: true */\n    'someModule',\n  );\n\n  // using single quotes instead of double quotes\n  import(\n    /* webpackChunkName: 'someModule' */\n    'someModule',\n  );\n```\n\n### `allowEmpty: true`\n\nIf you want to allow dynamic imports without a webpackChunkName, you can set `allowEmpty: true` in the rule config. This will allow dynamic imports without a leading comment, or with a leading comment that does not contain a webpackChunkName.\n\nGiven `{ \"allowEmpty\": true }`:\n\n<!-- markdownlint-disable-next-line MD024 -- duplicate header -->\n### valid\n\nThe following patterns are valid:\n\n```javascript\nimport('someModule');\n\nimport(\n  /* webpackChunkName: \"someModule\" */\n  'someModule',\n);\n```\n<!-- markdownlint-disable-next-line MD024 -- duplicate header -->\n### invalid\n\nThe following patterns are invalid:\n\n```javascript\n// incorrectly formatted comment\nimport(\n  /*webpackChunkName:\"someModule\"*/\n  'someModule',\n);\n```\n\n## When Not To Use It\n\nIf you don't care that webpack will autogenerate chunk names and may blow up browser caches and bundle size reports.\n"
        }
    ]
}