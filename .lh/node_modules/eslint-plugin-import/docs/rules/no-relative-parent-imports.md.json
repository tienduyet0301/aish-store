{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-relative-parent-imports.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892251354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-relative-parent-imports\n\n<!-- end auto-generated rule header -->\n\nUse this rule to prevent imports to folders in relative parent paths.\n\nThis rule is useful for enforcing tree-like folder structures instead of complex graph-like folder structures. While this restriction might be a departure from Node's default resolution style, it can lead large, complex codebases to be easier to maintain. If you've ever had debates over \"where to put files\" this rule is for you.\n\nTo fix violations of this rule there are three general strategies. Given this example:\n\n```pt\nnumbers\n└── three.js\nadd.js\n```\n\n```js\n// ./add.js\nexport default function (numbers) {\n  return numbers.reduce((sum, n) => sum + n, 0);\n}\n\n// ./numbers/three.js\nimport add from '../add'; // violates import/no-relative-parent-imports\n\nexport default function three() {\n  return add([1, 2]);\n}\n```\n\nYou can,\n\n1. Move the file to be in a sibling folder (or higher) of the dependency.\n\n   `three.js` could be be in the same folder as `add.js`:\n\n   ```pt\n   three.js\n   add.js\n   ```\n\n   or since `add` doesn't have any imports, it could be in it's own directory (namespace):\n\n   ```pt\n   math\n   └── add.js\n   three.js\n   ```\n\n2. Pass the dependency as an argument at runtime (dependency injection)\n\n   ```js\n   // three.js\n   export default function three(add) {\n     return add([1, 2]);\n   }\n\n   // somewhere else when you use `three.js`:\n   import add from './add';\n   import three from './numbers/three';\n   console.log(three(add));\n   ```\n\n3. Make the dependency a package so it's globally available to all files in your project:\n\n   ```js\n   import add from 'add'; // from https://www.npmjs.com/package/add\n   export default function three() {\n     return add([1,2]);\n   }\n   ```\n\nThese are (respectively) static, dynamic & global solutions to graph-like dependency resolution.\n\n## Examples\n\nGiven the following folder structure:\n\n```pt\nmy-project\n├── lib\n│   ├── a.js\n│   └── b.js\n└── main.js\n```\n\nAnd the .eslintrc file:\n\n```json\n{\n  ...\n  \"rules\": {\n    \"import/no-relative-parent-imports\": \"error\"\n  }\n}\n```\n\nThe following patterns are considered problems:\n\n```js\n/**\n *  in my-project/lib/a.js\n */\n\nimport bar from '../main'; // Import parent file using a relative path\n```\n\nThe following patterns are NOT considered problems:\n\n```js\n/**\n *  in my-project/main.js\n */\n\nimport foo from 'foo'; // Import package using module path\nimport a from './lib/a'; // Import child file using relative path\n\n/**\n *  in my-project/lib/a.js\n */\n\nimport b from './b'; // Import sibling file using relative path\n```\n"
        }
    ]
}