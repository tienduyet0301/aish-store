{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-commonjs.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-commonjs\n\n<!-- end auto-generated rule header -->\n\nReports `require([string])` function calls. Will not report if >1 argument,\nor single argument is not a literal string.\n\nReports `module.exports` or `exports.*`, also.\n\nIntended for temporary use when migrating to pure ES6 modules.\n\n## Rule Details\n\nThis will be reported:\n\n```js\nvar mod = require('./mod')\n  , common = require('./common')\n  , fs = require('fs')\n  , whateverModule = require('./not-found')\n\nmodule.exports = { a: \"b\" }\nexports.c = \"d\"\n```\n\n### Allow require\n\nIf `allowRequire` option is set to `true`, `require` calls are valid:\n\n```js\n/*eslint no-commonjs: [2, { allowRequire: true }]*/\nvar mod = require('./mod');\n```\n\nbut `module.exports` is reported as usual.\n\n### Allow conditional require\n\nBy default, conditional requires are allowed:\n\n```js\nvar a = b && require(\"c\")\n\nif (typeof window !== \"undefined\") {\n  require('that-ugly-thing');\n}\n\nvar fs = null;\ntry {\n  fs = require(\"fs\")\n} catch (error) {}\n```\n\nIf the `allowConditionalRequire` option is set to `false`, they will be reported.\n\nIf you don't rely on synchronous module loading, check out [dynamic import](https://github.com/airbnb/babel-plugin-dynamic-import-node).\n\n### Allow primitive modules\n\nIf `allowPrimitiveModules` option is set to `true`, the following is valid:\n\n```js\n/*eslint no-commonjs: [2, { allowPrimitiveModules: true }]*/\n\nmodule.exports = \"foo\"\nmodule.exports = function rule(context) { return { /* ... */ } }\n```\n\nbut this is still reported:\n\n```js\n/*eslint no-commonjs: [2, { allowPrimitiveModules: true }]*/\n\nmodule.exports = { x: \"y\" }\nexports.z = function boop() { /* ... */ }\n```\n\nThis is useful for things like ESLint rule modules, which must export a function as\nthe module.\n\n## When Not To Use It\n\nIf you don't mind mixing module systems (sometimes this is useful), you probably\ndon't want this rule.\n\nIt is also fairly noisy if you have a larger codebase that is being transitioned\nfrom CommonJS to ES6 modules.\n\n## Contributors\n\nSpecial thanks to @xjamundx for donating the module.exports and exports.* bits.\n\n## Further Reading\n\n - [`no-amd`](./no-amd.md): report on AMD `require`, `define`\n - Source: <https://github.com/xjamundx/eslint-plugin-modules>\n"
        }
    ]
}