{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-mutable-exports.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-mutable-exports\n\n<!-- end auto-generated rule header -->\n\nForbids the use of mutable exports with `var` or `let`.\n\n## Rule Details\n\nValid:\n\n```js\nexport const count = 1\nexport function getCount() {}\nexport class Counter {}\n```\n\n...whereas here exports will be reported:\n\n```js\nexport let count = 2\nexport var count = 3\n\nlet count = 4\nexport { count } // reported here\n```\n\n## Functions/Classes\n\nNote that exported function/class declaration identifiers may be reassigned,\nbut are not flagged by this rule at this time. They may be in the future, if a\nreassignment is detected, i.e.\n\n```js\n// possible future behavior!\nexport class Counter {} // reported here: exported class is reassigned on line [x].\nCounter = KitchenSink // not reported here unless you enable no-class-assign\n\n// this pre-declaration reassignment is valid on account of function hoisting\ngetCount = function getDuke() {} // not reported here without no-func-assign\nexport function getCount() {} // reported here: exported function is reassigned on line [x].\n```\n\nTo prevent general reassignment of these identifiers, exported or not, you may\nwant to enable the following core ESLint rules:\n\n - [no-func-assign]\n - [no-class-assign]\n\n[no-func-assign]: https://eslint.org/docs/rules/no-func-assign\n[no-class-assign]: https://eslint.org/docs/rules/no-class-assign\n\n## When Not To Use It\n\nIf your environment correctly implements mutable export bindings.\n"
        }
    ]
}