{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/newline-after-import.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/newline-after-import\n\nðŸ”§ This rule is automatically fixable by the [`--fix` CLI option](https://eslint.org/docs/latest/user-guide/command-line-interface#--fix).\n\n<!-- end auto-generated rule header -->\n\nEnforces having one or more empty lines after the last top-level import statement or require call.\n\n## Rule Details\n\nThis rule supports the following options:\n\n - `count` which sets the number of newlines that are enforced after the last top-level import statement or require call. This option defaults to `1`.\n\n - `exactCount` which enforce the exact numbers of newlines that is mentioned in `count`. This option defaults to `false`.\n\n - `considerComments` which enforces the rule on comments after the last import-statement as well when set to true. This option defaults to `false`.\n\nValid:\n\n```js\nimport defaultExport from './foo';\n\nconst FOO = 'BAR';\n```\n\n```js\nimport defaultExport from './foo';\nimport { bar }  from 'bar-lib';\n\nconst FOO = 'BAR';\n```\n\n```js\nconst FOO = require('./foo');\nconst BAR = require('./bar');\n\nconst BAZ = 1;\n```\n\nInvalid:\n\n```js\nimport * as foo from 'foo'\nconst FOO = 'BAR';\n```\n\n```js\nimport * as foo from 'foo';\nconst FOO = 'BAR';\n\nimport { bar }  from 'bar-lib';\n```\n\n```js\nconst FOO = require('./foo');\nconst BAZ = 1;\nconst BAR = require('./bar');\n```\n\nWith `count` set to `2` this will be considered valid:\n\n```js\nimport defaultExport from './foo';\n\n\nconst FOO = 'BAR';\n```\n\n```js\nimport defaultExport from './foo';\n\n\n\nconst FOO = 'BAR';\n```\n\nWith `count` set to `2` these will be considered invalid:\n\n```js\nimport defaultExport from './foo';\nconst FOO = 'BAR';\n```\n\n```js\nimport defaultExport from './foo';\n\nconst FOO = 'BAR';\n```\n\nWith `count` set to `2` and `exactCount` set to `true` this will be considered valid:\n\n```js\nimport defaultExport from './foo';\n\n\nconst FOO = 'BAR';\n```\n\nWith `count` set to `2` and `exactCount` set to `true` these will be considered invalid:\n\n```js\nimport defaultExport from './foo';\nconst FOO = 'BAR';\n```\n\n```js\nimport defaultExport from './foo';\n\nconst FOO = 'BAR';\n```\n\n```js\nimport defaultExport from './foo';\n\n\n\nconst FOO = 'BAR';\n```\n\n```js\nimport defaultExport from './foo';\n\n\n\n\nconst FOO = 'BAR';\n```\n\nWith `considerComments` set to `false` this will be considered valid:\n\n```js\nimport defaultExport from './foo'\n// some comment here.\nconst FOO = 'BAR'\n```\n\nWith `considerComments` set to `true` this will be considered valid:\n\n```js\nimport defaultExport from './foo'\n\n// some comment here.\nconst FOO = 'BAR'\n```\n\nWith `considerComments` set to `true` this will be considered invalid:\n\n```js\nimport defaultExport from './foo'\n// some comment here.\nconst FOO = 'BAR'\n```\n\n## Example options usage\n\n```json\n{\n  \"rules\": {\n    \"import/newline-after-import\": [\"error\", { \"count\": 2 }]\n  }\n}\n```\n\n## When Not To Use It\n\nIf you like to visually group module imports with its usage, you don't want to use this rule.\n"
        }
    ]
}