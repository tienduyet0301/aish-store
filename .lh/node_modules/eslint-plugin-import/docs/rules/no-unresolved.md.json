{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-unresolved.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892251539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-unresolved\n\nüíº This rule is enabled in the following configs: ‚ùó `errors`, ‚òëÔ∏è `recommended`.\n\n<!-- end auto-generated rule header -->\n\nEnsures an imported module can be resolved to a module on the local filesystem,\nas defined by standard Node `require.resolve` behavior.\n\nSee [settings](../../README.md#settings) for customization options for the resolution (i.e.\nadditional filetypes, `NODE_PATH`, etc.)\n\nThis rule can also optionally report on unresolved modules in CommonJS `require('./foo')` calls and AMD `require(['./foo'], function (foo) {...})` and `define(['./foo'], function (foo) {...})`.\n\nTo enable this, send `{ commonjs: true/false, amd: true/false }` as a rule option.\nBoth are disabled by default.\n\nIf you are using Webpack, see the section on [resolvers](../../README.md#resolvers).\n\n## Rule Details\n\n### Options\n\nBy default, only ES6 imports will be resolved:\n\n```js\n/*eslint import/no-unresolved: 2*/\nimport x from './foo' // reports if './foo' cannot be resolved on the filesystem\n```\n\nIf `{commonjs: true}` is provided, single-argument `require` calls will be resolved:\n\n```js\n/*eslint import/no-unresolved: [2, { commonjs: true }]*/\nconst { default: x } = require('./foo') // reported if './foo' is not found\n\nrequire(0) // ignored\nrequire(['x', 'y'], function (x, y) { /*...*/ }) // ignored\n```\n\nSimilarly, if `{ amd: true }` is provided, dependency paths for `define` and `require`\ncalls will be resolved:\n\n```js\n/*eslint import/no-unresolved: [2, { amd: true }]*/\ndefine(['./foo'], function (foo) { /*...*/ }) // reported if './foo' is not found\nrequire(['./foo'], function (foo) { /*...*/ }) // reported if './foo' is not found\n\nconst { default: x } = require('./foo') // ignored\n```\n\nBoth may be provided, too:\n\n```js\n/*eslint import/no-unresolved: [2, { commonjs: true, amd: true }]*/\nconst { default: x } = require('./foo') // reported if './foo' is not found\ndefine(['./foo'], function (foo) { /*...*/ }) // reported if './foo' is not found\nrequire(['./foo'], function (foo) { /*...*/ }) // reported if './foo' is not found\n```\n\n#### `ignore`\n\nThis rule has its own ignore list, separate from [`import/ignore`]. This is because you may want to know whether a module can be located, regardless of whether it can be parsed for exports: `node_modules`, CoffeeScript files, etc. are all good to resolve properly, but will not be parsed if configured as such via [`import/ignore`].\n\nTo suppress errors from files that may not be properly resolved by your [resolver settings](../../README.md#resolver-plugins), you may add an `ignore` key with an array of `RegExp` pattern strings:\n\n```js\n/*eslint import/no-unresolved: [2, { ignore: ['\\\\.img$'] }]*/\n\nimport { x } from './mod' // may be reported, if not resolved to a module\n\nimport coolImg from '../../img/coolImg.img' // will not be reported, even if not found\n```\n\n#### `caseSensitive`\n\nBy default, this rule will report paths whose case do not match the underlying filesystem path, if the FS is not case-sensitive. To disable this behavior, set the `caseSensitive` option to `false`.\n\n```js\n/*eslint import/no-unresolved: [2, { caseSensitive: true (default) | false }]*/\nconst { default: x } = require('./foo') // reported if './foo' is actually './Foo' and caseSensitive: true\n```\n\n#### `caseSensitiveStrict`\n\nThe `caseSensitive` option does not detect case for the current working directory. The `caseSensitiveStrict` option allows checking `cwd` in resolved path. By default, the option is disabled.\n\n```js\n/*eslint import/no-unresolved: [2, { caseSensitiveStrict: true }]*/\n\n// Absolute paths\nimport Foo from `/Users/fOo/bar/file.js` // reported, /Users/foo/bar/file.js\nimport Foo from `d:/fOo/bar/file.js` // reported, d:/foo/bar/file.js\n\n// Relative paths, cwd is Users/foo/\nimport Foo from `./../fOo/bar/file.js` // reported\n```\n\n## When Not To Use It\n\nIf you're using a module bundler other than Node or Webpack, you may end up with a lot of false positive reports of missing dependencies.\n\n## Further Reading\n\n - [Resolver plugins](../../README.md#resolvers)\n - [Node resolver](https://npmjs.com/package/eslint-import-resolver-node) (default)\n - [Webpack resolver](https://npmjs.com/package/eslint-import-resolver-webpack)\n - [`import/ignore`] global setting\n\n[`import/ignore`]: ../../README.md#importignore\n"
        }
    ]
}