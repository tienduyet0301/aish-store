{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-extraneous-dependencies.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-extraneous-dependencies\n\n<!-- end auto-generated rule header -->\n\nForbid the import of external modules that are not declared in the `package.json`'s `dependencies`, `devDependencies`, `optionalDependencies`, `peerDependencies`, or `bundledDependencies`.\nThe closest parent `package.json` will be used. If no `package.json` is found, the rule will not lint anything. This behavior can be changed with the rule option `packageDir`. Normally ignores imports of modules marked internal, but this can be changed with the rule option `includeInternal`. Type imports can be verified by specifying `includeTypes`.\n\nModules have to be installed for this rule to work.\n\n## Options\n\nThis rule supports the following options:\n\n`devDependencies`: If set to `false`, then the rule will show an error when `devDependencies` are imported. Defaults to `true`.\nType imports are ignored by default.\n\n`optionalDependencies`: If set to `false`, then the rule will show an error when `optionalDependencies` are imported. Defaults to `true`.\n\n`peerDependencies`: If set to `false`, then the rule will show an error when `peerDependencies` are imported. Defaults to `true`.\n\n`bundledDependencies`: If set to `false`, then the rule will show an error when `bundledDependencies` are imported. Defaults to `true`.\n\nYou can set the options like this:\n\n```js\n\"import/no-extraneous-dependencies\": [\"error\", {\"devDependencies\": false, \"optionalDependencies\": false, \"peerDependencies\": false}]\n```\n\nYou can also use an array of globs instead of literal booleans:\n\n```js\n\"import/no-extraneous-dependencies\": [\"error\", {\"devDependencies\": [\"**/*.test.js\", \"**/*.spec.js\"]}]\n```\n\nWhen using an array of globs, the setting will be set to `true` (no errors reported) if the name of the file being linted (i.e. not the imported file/module) matches a single glob in the array, and `false` otherwise.\n\nThere are 2 boolean options to opt into checking extra imports that are normally ignored: `includeInternal`, which enables the checking of internal modules, and `includeTypes`, which enables checking of type imports in TypeScript.\n\n```js\n\"import/no-extraneous-dependencies\": [\"error\", {\"includeInternal\": true, \"includeTypes\": true}]\n```\n\nAlso there is one more option called `packageDir`, this option is to specify the path to the folder containing package.json.\n\nIf provided as a relative path string, will be computed relative to the current working directory at linter execution time. If this is not ideal (does not work with some editor integrations), consider using `__dirname` to provide a path relative to your configuration.\n\n```js\n\"import/no-extraneous-dependencies\": [\"error\", {\"packageDir\": './some-dir/'}]\n// or\n\"import/no-extraneous-dependencies\": [\"error\", {\"packageDir\": path.join(__dirname, 'some-dir')}]\n```\n\nIt may also be an array of multiple paths, to support monorepos or other novel project\nfolder layouts:\n\n```js\n\"import/no-extraneous-dependencies\": [\"error\", {\"packageDir\": ['./some-dir/', './root-pkg']}]\n```\n\n## Rule Details\n\nGiven the following `package.json`:\n\n```json\n{\n  \"name\": \"my-project\",\n  \"...\": \"...\",\n  \"dependencies\": {\n    \"builtin-modules\": \"^1.1.1\",\n    \"lodash.cond\": \"^4.2.0\",\n    \"lodash.find\": \"^4.2.0\",\n    \"pkg-up\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.13.0\",\n    \"eslint\": \"^2.4.0\",\n    \"eslint-plugin-ava\": \"^1.3.0\",\n    \"xo\": \"^0.13.0\"\n  },\n  \"optionalDependencies\": {\n    \"lodash.isarray\": \"^4.0.0\"\n  },\n  \"peerDependencies\": {\n    \"react\": \">=15.0.0 <16.0.0\"\n  },\n  \"bundledDependencies\": [\n    \"@generated/foo\",\n  ]\n}\n```\n\n## Fail\n\n```js\nvar _ = require('lodash');\nimport _ from 'lodash';\n\nimport react from 'react';\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"devDependencies\": false}] */\nimport test from 'ava';\nvar test = require('ava');\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"optionalDependencies\": false}] */\nimport isArray from 'lodash.isarray';\nvar isArray = require('lodash.isarray');\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"bundledDependencies\": false}] */\nimport foo from '\"@generated/foo\"';\nvar foo = require('\"@generated/foo\"');\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"includeInternal\": true}] */\nimport foo from './foo';\nvar foo = require('./foo');\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"includeTypes\": true}] */\nimport type { MyType } from 'foo';\n```\n\n## Pass\n\n```js\n// Builtin and internal modules are fine\nvar path = require('path');\nvar foo = require('./foo');\n\nimport test from 'ava';\nimport find from 'lodash.find';\nimport isArray from 'lodash.isarray';\nimport foo from '\"@generated/foo\"';\nimport type { MyType } from 'foo';\n\n/* eslint import/no-extraneous-dependencies: [\"error\", {\"peerDependencies\": true}] */\nimport react from 'react';\n```\n\n## When Not To Use It\n\nIf you do not have a `package.json` file in your project.\n"
        }
    ]
}