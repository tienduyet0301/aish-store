{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/order.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892251709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/order\n\nðŸ”§ This rule is automatically fixable by the [`--fix` CLI option](https://eslint.org/docs/latest/user-guide/command-line-interface#--fix).\n\n<!-- end auto-generated rule header -->\n\nEnforce a convention in the order of `require()` / `import` statements.\n\nWith the [`groups`](#groups-array) option set to `[\"builtin\", \"external\", \"internal\", \"parent\", \"sibling\", \"index\", \"object\", \"type\"]` the order is as shown in the following example:\n\n```ts\n// 1. node \"builtin\" modules\nimport fs from 'fs';\nimport path from 'path';\n// 2. \"external\" modules\nimport _ from 'lodash';\nimport chalk from 'chalk';\n// 3. \"internal\" modules\n// (if you have configured your path or webpack to handle your internal paths differently)\nimport foo from 'src/foo';\n// 4. modules from a \"parent\" directory\nimport foo from '../foo';\nimport qux from '../../foo/qux';\n// 5. \"sibling\" modules from the same or a sibling's directory\nimport bar from './bar';\nimport baz from './bar/baz';\n// 6. \"index\" of the current directory\nimport main from './';\n// 7. \"object\"-imports (only available in TypeScript)\nimport log = console.log;\n// 8. \"type\" imports (only available in Flow and TypeScript)\nimport type { Foo } from 'foo';\n```\n\nUnassigned imports are ignored, as the order they are imported in may be important.\n\nStatements using the ES6 `import` syntax must appear before any `require()` statements.\n\n## Fail\n\n```ts\nimport _ from 'lodash';\nimport path from 'path'; // `path` import should occur before import of `lodash`\n\n// -----\n\nvar _ = require('lodash');\nvar path = require('path'); // `path` import should occur before import of `lodash`\n\n// -----\n\nvar path = require('path');\nimport foo from './foo'; // `import` statements must be before `require` statement\n```\n\n## Pass\n\n```ts\nimport path from 'path';\nimport _ from 'lodash';\n\n// -----\n\nvar path = require('path');\nvar _ = require('lodash');\n\n// -----\n\n// Allowed as Ì€`babel-register` is not assigned.\nrequire('babel-register');\nvar path = require('path');\n\n// -----\n\n// Allowed as `import` must be before `require`\nimport foo from './foo';\nvar path = require('path');\n```\n\n## Limitations of `--fix`\n\nUnbound imports are assumed to have side effects, and will never be moved/reordered. This can cause other imports to get \"stuck\" around them, and the fix to fail.\n\n```javascript\nimport b from 'b'\nimport 'format.css';  // This will prevent --fix from working.\nimport a from 'a'\n```\n\nAs a workaround, move unbound imports to be entirely above or below bound ones.\n\n```javascript\nimport 'format1.css';  // OK\nimport b from 'b'\nimport a from 'a'\nimport 'format2.css';  // OK\n```\n\n## Options\n\nThis rule supports the following options:\n\n### `groups: [array]`\n\nHow groups are defined, and the order to respect. `groups` must be an array of `string` or [`string`]. The only allowed `string`s are:\n`\"builtin\"`, `\"external\"`, `\"internal\"`, `\"unknown\"`, `\"parent\"`, `\"sibling\"`, `\"index\"`, `\"object\"`, `\"type\"`.\nThe enforced order is the same as the order of each element in a group. Omitted types are implicitly grouped together as the last element. Example:\n\n```ts\n[\n  'builtin', // Built-in types are first\n  ['sibling', 'parent'], // Then sibling and parent types. They can be mingled together\n  'index', // Then the index file\n  'object',\n  // Then the rest: internal and external type\n]\n```\n\nThe default value is `[\"builtin\", \"external\", \"parent\", \"sibling\", \"index\"]`.\n\nYou can set the options like this:\n\n```ts\n\"import/order\": [\n  \"error\",\n  {\n    \"groups\": [\n      \"index\",\n      \"sibling\",\n      \"parent\",\n      \"internal\",\n      \"external\",\n      \"builtin\",\n      \"object\",\n      \"type\"\n    ]\n  }\n]\n```\n\n### `pathGroups: [array of objects]`\n\nTo be able to group by paths mostly needed with aliases pathGroups can be defined.\n\nProperties of the objects\n\n| property       | required | type   | description   |\n|----------------|:--------:|--------|---------------|\n| pattern        |     x    | string | minimatch pattern for the paths to be in this group (will not be used for builtins or externals) |\n| patternOptions |          | object | options for minimatch, default: { nocomment: true } |\n| group          |     x    | string | one of the allowed groups, the pathGroup will be positioned relative to this group |\n| position       |          | string | defines where around the group the pathGroup will be positioned, can be 'after' or 'before', if not provided pathGroup will be positioned like the group |\n\n```json\n{\n  \"import/order\": [\"error\", {\n    \"pathGroups\": [\n      {\n        \"pattern\": \"~/**\",\n        \"group\": \"external\"\n      }\n    ]\n  }]\n}\n```\n\n### `distinctGroup: [boolean]`\n\nThis changes how `pathGroups[].position` affects grouping. The property is most useful when `newlines-between` is set to `always` and at least 1 `pathGroups` entry has a `position` property set.\n\nBy default, in the context of a particular `pathGroup` entry, when setting `position`, a new \"group\" will silently be created. That is, even if the `group` is specified, a newline will still separate imports that match that `pattern` with the rest of the group (assuming `newlines-between` is `always`). This is undesirable if your intentions are to use `position` to position _within_ the group (and not create a new one). Override this behavior by setting `distinctGroup` to `false`; this will keep imports within the same group as intended.\n\nNote that currently, `distinctGroup` defaults to `true`. However, in a later update, the default will change to `false`\n\nExample:\n\n```json\n{\n  \"import/order\": [\"error\", {\n    \"newlines-between\": \"always\",\n    \"pathGroups\": [\n      {\n        \"pattern\": \"@app/**\",\n        \"group\": \"external\",\n        \"position\": \"after\"\n      }\n    ],\n    \"distinctGroup\": false\n  }]\n}\n```\n\n### `pathGroupsExcludedImportTypes: [array]`\n\nThis defines import types that are not handled by configured pathGroups.\nIf you have added path groups with patterns that look like `\"builtin\"` or `\"external\"` imports, you have to remove this group (`\"builtin\"` and/or `\"external\"`) from the default exclusion list (e.g., `[\"builtin\", \"external\", \"object\"]`, etc) to sort these path groups correctly.\n\nExample:\n\n```json\n{\n  \"import/order\": [\"error\", {\n    \"pathGroups\": [\n      {\n        \"pattern\": \"@app/**\",\n        \"group\": \"external\",\n        \"position\": \"after\"\n      }\n    ],\n    \"pathGroupsExcludedImportTypes\": [\"builtin\"]\n  }]\n}\n```\n\n[Import Type](https://github.com/import-js/eslint-plugin-import/blob/HEAD/src/core/importType.js#L90) is resolved as a fixed string in predefined set, it can't be a `patterns`(e.g., `react`, `react-router-dom`, etc). See [#2156] for details.\n\n### `newlines-between: [ignore|always|always-and-inside-groups|never]`\n\nEnforces or forbids new lines between import groups:\n\n - If set to `ignore`, no errors related to new lines between import groups will be reported.\n - If set to `always`, at least one new line between each group will be enforced, and new lines inside a group will be forbidden. To prevent multiple lines between imports, core `no-multiple-empty-lines` rule can be used.\n - If set to `always-and-inside-groups`, it will act like `always` except newlines are allowed inside import groups.\n - If set to `never`, no new lines are allowed in the entire import section.\n\nThe default value is `\"ignore\"`.\n\nWith the default group setting, the following will be invalid:\n\n```ts\n/* eslint import/order: [\"error\", {\"newlines-between\": \"always\"}] */\nimport fs from 'fs';\nimport path from 'path';\nimport index from './';\nimport sibling from './foo';\n```\n\n```ts\n/* eslint import/order: [\"error\", {\"newlines-between\": \"always-and-inside-groups\"}] */\nimport fs from 'fs';\n\nimport path from 'path';\nimport index from './';\nimport sibling from './foo';\n```\n\n```ts\n/* eslint import/order: [\"error\", {\"newlines-between\": \"never\"}] */\nimport fs from 'fs';\nimport path from 'path';\n\nimport index from './';\n\nimport sibling from './foo';\n```\n\nwhile those will be valid:\n\n```ts\n/* eslint import/order: [\"error\", {\"newlines-between\": \"always\"}] */\nimport fs from 'fs';\nimport path from 'path';\n\nimport index from './';\n\nimport sibling from './foo';\n```\n\n```ts\n/* eslint import/order: [\"error\", {\"newlines-between\": \"always-and-inside-groups\"}] */\nimport fs from 'fs';\n\nimport path from 'path';\n\nimport index from './';\n\nimport sibling from './foo';\n```\n\n```ts\n/* eslint import/order: [\"error\", {\"newlines-between\": \"never\"}] */\nimport fs from 'fs';\nimport path from 'path';\nimport index from './';\nimport sibling from './foo';\n```\n\n### `named: true|false|{ enabled: true|false, import: true|false, export: true|false, require: true|false, cjsExports: true|false, types: mixed|types-first|types-last }`\n\nEnforce ordering of names within imports and exports:\n\n - If set to `true`, named imports must be ordered according to the `alphabetize` options\n - If set to `false`, named imports can occur in any order\n\n`enabled` enables the named ordering for all expressions by default.\nUse `import`, `export` and `require` and `cjsExports` to override the enablement for the following kind of expressions:\n\n - `import`:\n\n   ```ts\n   import { Readline } from \"readline\";\n   ```\n\n - `export`:\n\n   ```ts\n   export { Readline };\n   // and\n   export { Readline } from \"readline\";\n   ```\n\n - `require`\n\n   ```ts\n   const { Readline } = require(\"readline\");\n   ```\n\n - `cjsExports`\n\n   ```ts\n   module.exports.Readline = Readline;\n   // and\n   module.exports = { Readline };\n   ```\n\nThe `types` option allows you to specify the order of `import`s and `export`s of `type` specifiers.\nFollowing values are possible:\n\n - `types-first`: forces `type` specifiers to occur first\n - `types-last`: forces value specifiers to occur first\n - `mixed`: sorts all specifiers in alphabetical order\n\nThe default value is `false`.\n\nExample setting:\n\n```ts\n{\n  named: true,\n  alphabetize: {\n    order: 'asc'\n  }\n}\n```\n\nThis will fail the rule check:\n\n```ts\n/* eslint import/order: [\"error\", {\"named\": true, \"alphabetize\": {\"order\": \"asc\"}}] */\nimport { compose, apply } from 'xcompose';\n```\n\nWhile this will pass:\n\n```ts\n/* eslint import/order: [\"error\", {\"named\": true, \"alphabetize\": {\"order\": \"asc\"}}] */\nimport { apply, compose } from 'xcompose';\n```\n\n### `alphabetize: {order: asc|desc|ignore, orderImportKind: asc|desc|ignore, caseInsensitive: true|false}`\n\nSort the order within each group in alphabetical manner based on **import path**:\n\n - `order`: use `asc` to sort in ascending order, and `desc` to sort in descending order (default: `ignore`).\n - `orderImportKind`: use `asc` to sort in ascending order various import kinds, e.g. imports prefixed with `type` or `typeof`, with same import path. Use `desc` to sort in descending order (default: `ignore`).\n - `caseInsensitive`: use `true` to ignore case, and `false` to consider case (default: `false`).\n\nExample setting:\n\n```ts\nalphabetize: {\n  order: 'asc', /* sort in ascending order. Options: ['ignore', 'asc', 'desc'] */\n  caseInsensitive: true /* ignore case. Options: [true, false] */\n}\n```\n\nThis will fail the rule check:\n\n```ts\n/* eslint import/order: [\"error\", {\"alphabetize\": {\"order\": \"asc\", \"caseInsensitive\": true}}] */\nimport React, { PureComponent } from 'react';\nimport aTypes from 'prop-types';\nimport { compose, apply } from 'xcompose';\nimport * as classnames from 'classnames';\nimport blist from 'BList';\n```\n\nWhile this will pass:\n\n```ts\n/* eslint import/order: [\"error\", {\"alphabetize\": {\"order\": \"asc\", \"caseInsensitive\": true}}] */\nimport blist from 'BList';\nimport * as classnames from 'classnames';\nimport aTypes from 'prop-types';\nimport React, { PureComponent } from 'react';\nimport { compose, apply } from 'xcompose';\n```\n\n### `warnOnUnassignedImports: true|false`\n\n - default: `false`\n\nWarns when unassigned imports are out of order.  These warning will not be fixed\nwith `--fix` because unassigned imports are used for side-effects and changing the\nimport of order of modules with side effects can not be done automatically in a\nway that is safe.\n\nThis will fail the rule check:\n\n```ts\n/* eslint import/order: [\"error\", {\"warnOnUnassignedImports\": true}] */\nimport fs from 'fs';\nimport './styles.css';\nimport path from 'path';\n```\n\nWhile this will pass:\n\n```ts\n/* eslint import/order: [\"error\", {\"warnOnUnassignedImports\": true}] */\nimport fs from 'fs';\nimport path from 'path';\nimport './styles.css';\n```\n\n## Related\n\n - [`import/external-module-folders`] setting\n\n - [`import/internal-regex`] setting\n\n[`import/external-module-folders`]: ../../README.md#importexternal-module-folders\n\n[`import/internal-regex`]: ../../README.md#importinternal-regex\n"
        }
    ]
}