{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-duplicates.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-duplicates\n\n‚ö†Ô∏è This rule _warns_ in the following configs: ‚òëÔ∏è `recommended`, üö∏ `warnings`.\n\nüîß This rule is automatically fixable by the [`--fix` CLI option](https://eslint.org/docs/latest/user-guide/command-line-interface#--fix).\n\n<!-- end auto-generated rule header -->\n\nReports if a resolved path is imported more than once.\n\nESLint core has a similar rule ([`no-duplicate-imports`](https://eslint.org/docs/rules/no-duplicate-imports)), but this version\nis different in two key ways:\n\n1. the paths in the source code don't have to exactly match, they just have to point to the same module on the filesystem. (i.e. `./foo` and `./foo.js`)\n2. this version distinguishes Flow `type` imports from standard imports. ([#334](https://github.com/import-js/eslint-plugin-import/pull/334))\n\n## Rule Details\n\nValid:\n\n```js\nimport SomeDefaultClass, * as names from './mod'\n// Flow `type` import from same module is fine\nimport type SomeType from './mod'\n```\n\n...whereas here, both `./mod` imports will be reported:\n\n```js\nimport SomeDefaultClass from './mod'\n\n// oops, some other import separated these lines\nimport foo from './some-other-mod'\n\nimport * as names from './mod'\n\n// will catch this too, assuming it is the same target module\nimport { something } from './mod.js'\n```\n\nThe motivation is that this is likely a result of two developers importing different\nnames from the same module at different times (and potentially largely different\nlocations in the file.) This rule brings both (or n-many) to attention.\n\n### Query Strings\n\nBy default, this rule ignores query strings (i.e. paths followed by a question mark), and thus imports from `./mod?a` and `./mod?b` will be considered as duplicates. However you can use the option `considerQueryString` to handle them as different (primarily because browsers will resolve those imports differently).\n\nConfig:\n\n```json\n\"import/no-duplicates\": [\"error\", {\"considerQueryString\": true}]\n```\n\nAnd then the following code becomes valid:\n\n```js\nimport minifiedMod from './mod?minify'\nimport noCommentsMod from './mod?comments=0'\nimport originalMod from './mod'\n```\n\nIt will still catch duplicates when using the same module and the exact same query string:\n\n```js\nimport SomeDefaultClass from './mod?minify'\n\n// This is invalid, assuming `./mod` and `./mod.js` are the same target:\nimport * from './mod.js?minify'\n```\n\n### Inline Type imports\n\nTypeScript 4.5 introduced a new [feature](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#type-on-import-names) that allows mixing of named value and type imports. In order to support fixing to an inline type import when duplicate imports are detected, `prefer-inline` can be set to true.\n\nConfig:\n\n```json\n\"import/no-duplicates\": [\"error\", {\"prefer-inline\": true}]\n```\n\n<!--tabs-->\n\n‚ùå Invalid `[\"error\", {\"prefer-inline\": true}]`\n\n```js\nimport { AValue, type AType } from './mama-mia'\nimport type { BType } from './mama-mia'\n\nimport { CValue } from './papa-mia'\nimport type { CType } from './papa-mia'\n```\n\n‚úÖ Valid with `[\"error\", {\"prefer-inline\": true}]`\n\n```js\nimport { AValue, type AType, type BType } from './mama-mia'\n\nimport { CValue, type CType } from './papa-mia'\n```\n\n<!--tabs-->\n\n## When Not To Use It\n\nIf the core ESLint version is good enough (i.e. you're _not_ using Flow and you _are_ using [`import/extensions`](./extensions.md)), keep it and don't use this.\n\nIf you like to split up imports across lines or may need to import a default and a namespace,\nyou may not want to enable this rule.\n"
        }
    ]
}