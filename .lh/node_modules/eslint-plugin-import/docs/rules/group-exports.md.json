{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/group-exports.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/group-exports\n\n<!-- end auto-generated rule header -->\n\nReports when named exports are not grouped together in a single `export` declaration or when multiple assignments to CommonJS `module.exports` or `exports` object are present in a single file.\n\n**Rationale:** An `export` declaration or `module.exports` assignment can appear anywhere in the code. By requiring a single export declaration all your exports will remain at one place, making it easier to see what exports a module provides.\n\n## Rule Details\n\nThis rule warns whenever a single file contains multiple named export declarations or multiple assignments to `module.exports` (or `exports`).\n\n### Valid\n\n```js\n// A single named export declaration -> ok\nexport const valid = true\n```\n\n```js\nconst first = true\nconst second = true\n\n// A single named export declaration -> ok\nexport {\n  first,\n  second,\n}\n```\n\n```js\n// Aggregating exports -> ok\nexport { default as module1 } from 'module-1'\nexport { default as module2 } from 'module-2'\n```\n\n```js\n// A single exports assignment -> ok\nmodule.exports = {\n  first: true,\n  second: true\n}\n```\n\n```js\nconst first = true\nconst second = true\n\n// A single exports assignment -> ok\nmodule.exports = {\n  first,\n  second,\n}\n```\n\n```js\nfunction test() {}\ntest.property = true\ntest.another = true\n\n// A single exports assignment -> ok\nmodule.exports = test\n```\n\n```ts\nconst first = true;\ntype firstType = boolean\n\n// A single named export declaration (type exports handled separately) -> ok\nexport {first}\nexport type {firstType}\n```\n\n### Invalid\n\n```js\n// Multiple named export statements -> not ok!\nexport const first = true\nexport const second = true\n```\n\n```js\n// Aggregating exports from the same module -> not ok!\nexport { module1 } from 'module-1'\nexport { module2 } from 'module-1'\n```\n\n```js\n// Multiple exports assignments -> not ok!\nexports.first = true\nexports.second = true\n```\n\n```js\n// Multiple exports assignments -> not ok!\nmodule.exports = {}\nmodule.exports.first = true\n```\n\n```js\n// Multiple exports assignments -> not ok!\nmodule.exports = () => {}\nmodule.exports.first = true\nmodule.exports.second = true\n```\n\n```ts\ntype firstType = boolean\ntype secondType = any\n\n// Multiple named type export statements -> not ok!\nexport type {firstType}\nexport type {secondType}\n```\n\n## When Not To Use It\n\nIf you do not mind having your exports spread across the file, you can safely turn this rule off.\n"
        }
    ]
}