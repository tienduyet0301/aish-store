{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-webpack-loader-syntax.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892251659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-webpack-loader-syntax\n\n<!-- end auto-generated rule header -->\n\nForbid Webpack loader syntax in imports.\n\n[Webpack](https://webpack.js.org) allows specifying the [loaders](https://webpack.js.org/concepts/loaders/) to use in the import source string using a special syntax like this:\n\n```js\nvar moduleWithOneLoader = require(\"my-loader!./my-awesome-module\");\n```\n\nThis syntax is non-standard, so it couples the code to Webpack. The recommended way to specify Webpack loader configuration is in a [Webpack configuration file](https://webpack.js.org/concepts/loaders/#configuration).\n\n## Rule Details\n\n### Fail\n\n```js\nimport myModule from 'my-loader!my-module';\nimport theme from 'style!css!./theme.css';\n\nvar myModule = require('my-loader!./my-module');\nvar theme = require('style!css!./theme.css');\n```\n\n### Pass\n\n```js\nimport myModule from 'my-module';\nimport theme from './theme.css';\n\nvar myModule = require('my-module');\nvar theme = require('./theme.css');\n```\n\n## When Not To Use It\n\nIf you have a project that doesn't use Webpack you can safely disable this rule.\n"
        }
    ]
}