{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-unused-modules.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892251576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-unused-modules\n\n<!-- end auto-generated rule header -->\n\nReports:\n\n - modules without any exports\n - individual exports not being statically `import`ed or `require`ed from other modules in the same project\n - dynamic imports are supported if argument is a literal string\n\n## Rule Details\n\n### Usage\n\nIn order for this plugin to work, at least one of the options `missingExports` or `unusedExports` must be enabled (see \"Options\" section below). In the future, these options will be enabled by default (see <https://github.com/import-js/eslint-plugin-import/issues/1324>)\n\nExample:\n\n```json\n\"rules: {\n  ...otherRules,\n  \"import/no-unused-modules\": [1, {\"unusedExports\": true}]\n}\n```\n\n### Options\n\nThis rule takes the following option:\n\n - **`missingExports`**: if `true`, files without any exports are reported (defaults to `false`)\n - **`unusedExports`**: if `true`, exports without any static usage within other modules are reported (defaults to `false`)\n - **`ignoreUnusedTypeExports`**: if `true`, TypeScript type exports without any static usage within other modules are reported (defaults to `false` and has no effect unless `unusedExports` is `true`)\n - **`src`**: an array with files/paths to be analyzed. It only applies to unused exports. Defaults to `process.cwd()`, if not provided\n - **`ignoreExports`**: an array with files/paths for which unused exports will not be reported (e.g module entry points in a published package)\n\n### Example for missing exports\n\n#### The following will be reported\n\n```js\nconst class MyClass { /*...*/ }\n\nfunction makeClass() { return new MyClass(...arguments) }\n```\n\n#### The following will not be reported\n\n```js\nexport default function () { /*...*/ }\n```\n\n```js\nexport const foo = function () { /*...*/ }\n```\n\n```js\nexport { foo, bar }\n```\n\n```js\nexport { foo as bar }\n```\n\n### Example for unused exports\n\ngiven file-f:\n\n```js\nimport { e } from 'file-a'\nimport { f } from 'file-b'\nimport * as fileC from  'file-c'\nexport { default, i0 } from 'file-d' // both will be reported\n\nexport const j = 99 // will be reported\n```\n\nand file-d:\n\n```js\nexport const i0 = 9 // will not be reported\nexport const i1 = 9 // will be reported\nexport default () => {} // will not be reported\n```\n\nand file-c:\n\n```js\nexport const h = 8 // will not be reported\nexport default () => {} // will be reported, as export * only considers named exports and ignores default exports\n```\n\nand file-b:\n\n```js\nimport two, { b, c, doAnything } from 'file-a'\n\nexport const f = 6 // will not be reported\n```\n\nand file-a:\n\n```js\nconst b = 2\nconst c = 3\nconst d = 4\n\nexport const a = 1 // will be reported\n\nexport { b, c } // will not be reported\n\nexport { d as e } // will not be reported\n\nexport function doAnything() {\n  // some code\n}  // will not be reported\n\nexport default 5 // will not be reported\n```\n\n### Unused exports with `ignoreUnusedTypeExports` set to `true`\n\nThe following will not be reported:\n\n```ts\nexport type Foo = {}; // will not be reported\nexport interface Foo = {}; // will not be reported\nexport enum Foo {}; // will not be reported\n```\n\n#### Important Note\n\nExports from files listed as a main file (`main`, `browser`, or `bin` fields in `package.json`) will be ignored by default. This only applies if the `package.json` is not set to `private: true`\n\n## When not to use\n\nIf you don't mind having unused files or dead code within your codebase, you can disable this rule\n"
        }
    ]
}