{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/first.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892249987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/first\n\nðŸ”§ This rule is automatically fixable by the [`--fix` CLI option](https://eslint.org/docs/latest/user-guide/command-line-interface#--fix).\n\n<!-- end auto-generated rule header -->\n\nThis rule reports any imports that come after non-import\nstatements.\n\n## Rule Details\n\n```js\nimport foo from './foo'\n\n// some module-level initializer\ninitWith(foo)\n\nimport bar from './bar' // <- reported\n```\n\nProviding `absolute-first` as an option will report any absolute imports (i.e.\npackages) that come after any relative imports:\n\n```js\nimport foo from 'foo'\nimport bar from './bar'\n\nimport * as _ from 'lodash' // <- reported\n```\n\nIf you really want import type ordering, check out [`import/order`].\n\nNotably, `import`s are hoisted, which means the imported modules will be evaluated\nbefore any of the statements interspersed between them. Keeping all `import`s together\nat the top of the file may prevent surprises resulting from this part of the spec.\n\n### On directives\n\nDirectives are allowed as long as they occur strictly before any `import` declarations,\nas follows:\n\n```js\n'use super-mega-strict'\n\nimport { suchFoo } from 'lame-fake-module-name'  // no report here\n```\n\nA directive in this case is assumed to be a single statement that contains only\na literal string-valued expression.\n\n`'use strict'` would be a good example, except that [modules are always in strict\nmode](https://262.ecma-international.org/6.0/#sec-strict-mode-code) so it would be surprising to see a `'use strict'` sharing a file with `import`s and\n`export`s.\n\nGiven that, see [#255] for the reasoning.\n\n### With Fixer\n\nThis rule contains a fixer to reorder in-body import to top, the following criteria applied:\n\n1. Never re-order relative to each other, even if `absolute-first` is set.\n2. If an import creates an identifier, and that identifier is referenced at module level *before* the import itself, that won't be re-ordered.\n\n## When Not To Use It\n\nIf you don't mind imports being sprinkled throughout, you may not want to\nenable this rule.\n\n## Further Reading\n\n - [`import/order`]: a major step up from `absolute-first`\n - Issue [#255]\n\n[`import/order`]: ./order.md\n[#255]: https://github.com/import-js/eslint-plugin-import/issues/255\n"
        }
    ]
}