{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-dynamic-require.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-dynamic-require\n\n<!-- end auto-generated rule header -->\n\nThe `require` method from CommonJS is used to import modules from different files. Unlike the ES6 `import` syntax, it can be given expressions that will be resolved at runtime. While this is sometimes necessary and useful, in most cases it isn't. Using expressions (for instance, concatenating a path and variable) as the argument makes it harder for tools to do static code analysis, or to find where in the codebase a module is used.\n\nThis rule forbids every call to `require()` that uses expressions for the module name argument.\n\n## Rule Details\n\n### Fail\n\n```js\nrequire(name);\nrequire('../' + name);\nrequire(`../${name}`);\nrequire(name());\n```\n\n### Pass\n\n```js\nrequire('../name');\nrequire(`../name`);\n```\n"
        }
    ]
}