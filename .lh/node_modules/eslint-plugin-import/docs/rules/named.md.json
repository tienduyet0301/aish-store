{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/named.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/named\n\nüíºüö´ This rule is enabled in the following configs: ‚ùó `errors`, ‚òëÔ∏è `recommended`. This rule is _disabled_ in the ‚å®Ô∏è `typescript` config.\n\n<!-- end auto-generated rule header -->\n\nVerifies that all named imports are part of the set of named exports in the referenced module.\n\nFor `export`, verifies that all named exports exist in the referenced module.\n\nNote: for packages, the plugin will find exported names\nfrom [`jsnext:main`] (deprecated) or `module`, if present in `package.json`.\nRedux's npm module includes this key, and thereby is lintable, for example.\n\nA module path that is [ignored] or not [unambiguously an ES module] will not be reported when imported. Note that type imports and exports, as used by [Flow], are always ignored.\n\n[ignored]: ../../README.md#importignore\n[unambiguously an ES module]: https://github.com/bmeck/UnambiguousJavaScriptGrammar\n[Flow]: https://flow.org/\n\n## Rule Details\n\nGiven:\n\n```js\n// ./foo.js\nexport const foo = \"I'm so foo\"\n```\n\nThe following is considered valid:\n\n```js\n// ./bar.js\nimport { foo } from './foo'\n\n// ES7 proposal\nexport { foo as bar } from './foo'\n\n// node_modules without jsnext:main are not analyzed by default\n// (import/ignore setting)\nimport { SomeNonsenseThatDoesntExist } from 'react'\n```\n\n...and the following are reported:\n\n```js\n// ./baz.js\nimport { notFoo } from './foo'\n\n// ES7 proposal\nexport { notFoo as defNotBar } from './foo'\n\n// will follow 'jsnext:main', if available\nimport { dontCreateStore } from 'redux'\n```\n\n### Settings\n\n[`import/ignore`] can be provided as a setting to ignore certain modules (node_modules,\nCoffeeScript, CSS if using Webpack, etc.).\n\nGiven:\n\n```yaml\n# .eslintrc (YAML)\n---\nsettings:\n  import/ignore:\n    - node_modules  # included by default, but replaced if explicitly configured\n    - *.coffee$     # can't parse CoffeeScript (unless a custom polyglot parser was configured)\n```\n\nand\n\n```coffeescript\n# ./whatever.coffee\nexports.whatever = (foo) -> console.log foo\n```\n\nthen the following is not reported:\n\n```js\n// ./foo.js\n\n// can't be analyzed, and ignored, so not reported\nimport { notWhatever } from './whatever'\n```\n\n## When Not To Use It\n\nIf you are using CommonJS and/or modifying the exported namespace of any module at\nruntime, you will likely see false positives with this rule.\n\n## Further Reading\n\n - [`import/ignore`] setting\n - [`jsnext:main`] deprecation\n - [`pkg.module`] (Rollup)\n\n[`jsnext:main`]: https://github.com/jsforum/jsforum/issues/5\n[`pkg.module`]: https://github.com/rollup/rollup/wiki/pkg.module\n[`import/ignore`]: ../../README.md#importignore\n"
        }
    ]
}