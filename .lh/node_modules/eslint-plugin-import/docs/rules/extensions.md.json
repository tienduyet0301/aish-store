{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/extensions.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892249940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/extensions\n\n<!-- end auto-generated rule header -->\n\nSome file resolve algorithms allow you to omit the file extension within the import source path. For example the `node` resolver (which does not yet support ESM/`import`) can resolve `./foo/bar` to the absolute path `/User/someone/foo/bar.js` because the `.js` extension is resolved automatically by default in CJS. Depending on the resolver you can configure more extensions to get resolved automatically.\n\nIn order to provide a consistent use of file extensions across your code base, this rule can enforce or disallow the use of certain file extensions.\n\n## Rule Details\n\nThis rule either takes one string option, one object option, or a string and an object option. If it is the string `\"never\"` (the default value), then the rule forbids the use for any extension. If it is the string `\"always\"`, then the rule enforces the use of extensions for all import statements. If it is the string `\"ignorePackages\"`, then the rule enforces the use of extensions for all import statements except package imports.\n\n```json\n\"import/extensions\": [<severity>, \"never\" | \"always\" | \"ignorePackages\"]\n```\n\nBy providing an object you can configure each extension separately.\n\n```json\n\"import/extensions\": [<severity>, {\n  <extension>: \"never\" | \"always\" | \"ignorePackages\"\n}]\n```\n\n For example `{ \"js\": \"always\", \"json\": \"never\" }` would always enforce the use of the `.js` extension but never allow the use of the `.json` extension.\n\nBy providing both a string and an object, the string will set the default setting for all extensions, and the object can be used to set granular overrides for specific extensions.\n\n```json\n\"import/extensions\": [\n  <severity>,\n  \"never\" | \"always\" | \"ignorePackages\",\n  {\n    <extension>: \"never\" | \"always\" | \"ignorePackages\"\n  }\n]\n```\n\nFor example, `[\"error\", \"never\", { \"svg\": \"always\" }]` would require that all extensions are omitted, except for \"svg\".\n\n`ignorePackages` can be set as a separate boolean option like this:\n\n```json\n\"import/extensions\": [\n  <severity>,\n  \"never\" | \"always\" | \"ignorePackages\",\n  {\n    ignorePackages: true | false,\n    pattern: {\n      <extension>: \"never\" | \"always\" | \"ignorePackages\"\n    }\n  }\n]\n```\n\nIn that case, if you still want to specify extensions, you can do so inside the **pattern** property.\nDefault value of `ignorePackages` is `false`.\n\nBy default, `import type` and `export type` style imports/exports are ignored. If you want to check them as well, you can set the `checkTypeImports` option to `true`.\n\n### Exception\n\nWhen disallowing the use of certain extensions this rule makes an exception and allows the use of extension when the file would not be resolvable without extension.\n\nFor example, given the following folder structure:\n\n```pt\n├── foo\n│   ├── bar.js\n│   ├── bar.json\n```\n\nand this import statement:\n\n```js\nimport bar from './foo/bar.json';\n```\n\nthen the extension can’t be omitted because it would then resolve to `./foo/bar.js`.\n\n### Examples\n\nThe following patterns are considered problems when configuration set to \"never\":\n\n```js\nimport foo from './foo.js';\n\nimport bar from './bar.json';\n\nimport Component from './Component.jsx';\n\nimport express from 'express/index.js';\n```\n\nThe following patterns are not considered problems when configuration set to \"never\":\n\n```js\nimport foo from './foo';\n\nimport bar from './bar';\n\nimport Component from './Component';\n\nimport express from 'express/index';\n\nimport * as path from 'path';\n```\n\nThe following patterns are considered problems when the configuration is set to \"never\" and the option \"checkTypeImports\" is set to `true`:\n\n```js\nimport type { Foo } from './foo.ts';\n\nexport type { Foo } from './foo.ts';\n```\n\nThe following patterns are considered problems when configuration set to \"always\":\n\n```js\nimport foo from './foo';\n\nimport bar from './bar';\n\nimport Component from './Component';\n\nimport foo from '@/foo';\n```\n\nThe following patterns are not considered problems when configuration set to \"always\":\n\n```js\nimport foo from './foo.js';\n\nimport bar from './bar.json';\n\nimport Component from './Component.jsx';\n\nimport * as path from 'path';\n\nimport foo from '@/foo.js';\n```\n\nThe following patterns are considered problems when configuration set to \"ignorePackages\":\n\n```js\nimport foo from './foo';\n\nimport bar from './bar';\n\nimport Component from './Component';\n\n```\n\nThe following patterns are not considered problems when configuration set to \"ignorePackages\":\n\n```js\nimport foo from './foo.js';\n\nimport bar from './bar.json';\n\nimport Component from './Component.jsx';\n\nimport express from 'express';\n\nimport foo from '@/foo'\n```\n\nThe following patterns are not considered problems when configuration set to `['error', 'always', {ignorePackages: true} ]`:\n\n```js\nimport Component from './Component.jsx';\n\nimport baz from 'foo/baz.js';\n\nimport express from 'express';\n\nimport foo from '@/foo';\n```\n\nThe following patterns are considered problems when the configuration is set to \"always\" and the option \"checkTypeImports\" is set to `true`:\n\n```js\nimport type { Foo } from './foo';\n\nexport type { Foo } from './foo';\n```\n\n## When Not To Use It\n\nIf you are not concerned about a consistent usage of file extension.\n\nIn the future, when this rule supports native node ESM resolution, and the plugin is configured to use native rather than transpiled ESM (a config option that is not yet available) - setting this to `always` will have no effect.\n"
        }
    ]
}