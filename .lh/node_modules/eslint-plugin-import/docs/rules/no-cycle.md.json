{
    "sourceFile": "node_modules/eslint-plugin-import/docs/rules/no-cycle.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892250468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "# import/no-cycle\n\n<!-- end auto-generated rule header -->\n\nEnsures that there is no resolvable path back to this module via its dependencies.\n\nThis includes cycles of depth 1 (imported module imports me) to `\"âˆž\"` (or `Infinity`), if the\n[`maxDepth`](#maxdepth) option is not set.\n\n```js\n// dep-b.js\nimport './dep-a.js'\n\nexport function b() { /* ... */ }\n```\n\n```js\n// dep-a.js\nimport { b } from './dep-b.js' // reported: Dependency cycle detected.\n```\n\nThis rule does _not_ detect imports that resolve directly to the linted module;\nfor that, see [`no-self-import`].\n\nThis rule ignores type-only imports in Flow and TypeScript syntax (`import type` and `import typeof`), which have no runtime effect.\n\n## Rule Details\n\n### Options\n\nBy default, this rule only detects cycles for ES6 imports, but see the [`no-unresolved` options](./no-unresolved.md#options) as this rule also supports the same `commonjs` and `amd` flags. However, these flags only impact which import types are _linted_; the\nimport/export infrastructure only registers `import` statements in dependencies, so\ncycles created by `require` within imported modules may not be detected.\n\n#### `maxDepth`\n\nThere is a `maxDepth` option available to prevent full expansion of very deep dependency trees:\n\n```js\n/*eslint import/no-cycle: [2, { maxDepth: 1 }]*/\n\n// dep-c.js\nimport './dep-a.js'\n```\n\n```js\n// dep-b.js\nimport './dep-c.js'\n\nexport function b() { /* ... */ }\n```\n\n```js\n// dep-a.js\nimport { b } from './dep-b.js' // not reported as the cycle is at depth 2\n```\n\nThis is not necessarily recommended, but available as a cost/benefit tradeoff mechanism\nfor reducing total project lint time, if needed.\n\n#### `ignoreExternal`\n\nAn `ignoreExternal` option is available to prevent the cycle detection to expand to external modules:\n\n```js\n/*eslint import/no-cycle: [2, { ignoreExternal: true }]*/\n\n// dep-a.js\nimport 'module-b/dep-b.js'\n\nexport function a() { /* ... */ }\n```\n\n```js\n// node_modules/module-b/dep-b.js\nimport { a } from './dep-a.js' // not reported as this module is external\n```\n\nIts value is `false` by default, but can be set to `true` for reducing total project lint time, if needed.\n\n#### `allowUnsafeDynamicCyclicDependency`\n\nThis option disable reporting of errors if a cycle is detected with at least one dynamic import.\n\n```js\n// bar.js\nimport { foo } from './foo';\nexport const bar = foo;\n\n// foo.js\nexport const foo = 'Foo';\nexport function getBar() { return import('./bar'); }\n```\n\n> Cyclic dependency are **always** a dangerous anti-pattern as discussed extensively in [#2265](https://github.com/import-js/eslint-plugin-import/issues/2265). Please be extra careful about using this option.\n\n#### `disableScc`\n\nThis option disables a pre-processing step that calculates [Strongly Connected Components](https://en.wikipedia.org/wiki/Strongly_connected_component), which are used for avoiding unnecessary work checking files in different SCCs for cycles.\n\nHowever, under some configurations, this pre-processing may be more expensive than the time it saves.\n\nWhen this option is `true`, we don't calculate any SCC graph, and check all files for cycles (leading to higher time-complexity). Default is `false`.\n\n## When Not To Use It\n\nThis rule is comparatively computationally expensive. If you are pressed for lint\ntime, or don't think you have an issue with dependency cycles, you may not want\nthis rule enabled.\n\n## Further Reading\n\n - [Original inspiring issue](https://github.com/import-js/eslint-plugin-import/issues/941)\n - Rule to detect that module imports itself: [`no-self-import`]\n - [`import/external-module-folders`] setting\n\n[`no-self-import`]: ./no-self-import.md\n\n[`import/external-module-folders`]: ../../README.md#importexternal-module-folders\n"
        }
    ]
}