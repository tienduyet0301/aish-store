{
    "sourceFile": "node_modules/eslint-plugin-import/lib/rules/extensions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892253423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';var _path = require('path');var _path2 = _interopRequireDefault(_path);\n\nvar _resolve = require('eslint-module-utils/resolve');var _resolve2 = _interopRequireDefault(_resolve);\nvar _importType = require('../core/importType');\nvar _moduleVisitor = require('eslint-module-utils/moduleVisitor');var _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);\nvar _docsUrl = require('../docsUrl');var _docsUrl2 = _interopRequireDefault(_docsUrl);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\nvar enumValues = { 'enum': ['always', 'ignorePackages', 'never'] };\nvar patternProperties = {\n  type: 'object',\n  patternProperties: { '.*': enumValues } };\n\nvar properties = {\n  type: 'object',\n  properties: {\n    pattern: patternProperties,\n    checkTypeImports: { type: 'boolean' },\n    ignorePackages: { type: 'boolean' } } };\n\n\n\nfunction buildProperties(context) {\n\n  var result = {\n    defaultConfig: 'never',\n    pattern: {},\n    ignorePackages: false };\n\n\n  context.options.forEach(function (obj) {\n\n    // If this is a string, set defaultConfig to its value\n    if (typeof obj === 'string') {\n      result.defaultConfig = obj;\n      return;\n    }\n\n    // If this is not the new structure, transfer all props to result.pattern\n    if (obj.pattern === undefined && obj.ignorePackages === undefined && obj.checkTypeImports === undefined) {\n      Object.assign(result.pattern, obj);\n      return;\n    }\n\n    // If pattern is provided, transfer all props\n    if (obj.pattern !== undefined) {\n      Object.assign(result.pattern, obj.pattern);\n    }\n\n    // If ignorePackages is provided, transfer it to result\n    if (obj.ignorePackages !== undefined) {\n      result.ignorePackages = obj.ignorePackages;\n    }\n\n    if (obj.checkTypeImports !== undefined) {\n      result.checkTypeImports = obj.checkTypeImports;\n    }\n  });\n\n  if (result.defaultConfig === 'ignorePackages') {\n    result.defaultConfig = 'always';\n    result.ignorePackages = true;\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  meta: {\n    type: 'suggestion',\n    docs: {\n      category: 'Style guide',\n      description: 'Ensure consistent use of file extension within the import path.',\n      url: (0, _docsUrl2['default'])('extensions') },\n\n\n    schema: {\n      anyOf: [\n      {\n        type: 'array',\n        items: [enumValues],\n        additionalItems: false },\n\n      {\n        type: 'array',\n        items: [\n        enumValues,\n        properties],\n\n        additionalItems: false },\n\n      {\n        type: 'array',\n        items: [properties],\n        additionalItems: false },\n\n      {\n        type: 'array',\n        items: [patternProperties],\n        additionalItems: false },\n\n      {\n        type: 'array',\n        items: [\n        enumValues,\n        patternProperties],\n\n        additionalItems: false }] } },\n\n\n\n\n\n  create: function () {function create(context) {\n\n      var props = buildProperties(context);\n\n      function getModifier(extension) {\n        return props.pattern[extension] || props.defaultConfig;\n      }\n\n      function isUseOfExtensionRequired(extension, isPackage) {\n        return getModifier(extension) === 'always' && (!props.ignorePackages || !isPackage);\n      }\n\n      function isUseOfExtensionForbidden(extension) {\n        return getModifier(extension) === 'never';\n      }\n\n      function isResolvableWithoutExtension(file) {\n        var extension = _path2['default'].extname(file);\n        var fileWithoutExtension = file.slice(0, -extension.length);\n        var resolvedFileWithoutExtension = (0, _resolve2['default'])(fileWithoutExtension, context);\n\n        return resolvedFileWithoutExtension === (0, _resolve2['default'])(file, context);\n      }\n\n      function isExternalRootModule(file) {\n        if (file === '.' || file === '..') {return false;}\n        var slashCount = file.split('/').length - 1;\n\n        if (slashCount === 0) {return true;}\n        if ((0, _importType.isScoped)(file) && slashCount <= 1) {return true;}\n        return false;\n      }\n\n      function checkFileExtension(source, node) {\n        // bail if the declaration doesn't have a source, e.g. \"export { foo };\", or if it's only partially typed like in an editor\n        if (!source || !source.value) {return;}\n\n        var importPathWithQueryString = source.value;\n\n        // don't enforce anything on builtins\n        if ((0, _importType.isBuiltIn)(importPathWithQueryString, context.settings)) {return;}\n\n        var importPath = importPathWithQueryString.replace(/\\?(.*)$/, '');\n\n        // don't enforce in root external packages as they may have names with `.js`.\n        // Like `import Decimal from decimal.js`)\n        if (isExternalRootModule(importPath)) {return;}\n\n        var resolvedPath = (0, _resolve2['default'])(importPath, context);\n\n        // get extension from resolved path, if possible.\n        // for unresolved, use source value.\n        var extension = _path2['default'].extname(resolvedPath || importPath).substring(1);\n\n        // determine if this is a module\n        var isPackage = (0, _importType.isExternalModule)(\n        importPath,\n        (0, _resolve2['default'])(importPath, context),\n        context) ||\n        (0, _importType.isScoped)(importPath);\n\n        if (!extension || !importPath.endsWith('.' + String(extension))) {\n          // ignore type-only imports and exports\n          if (!props.checkTypeImports && (node.importKind === 'type' || node.exportKind === 'type')) {return;}\n          var extensionRequired = isUseOfExtensionRequired(extension, isPackage);\n          var extensionForbidden = isUseOfExtensionForbidden(extension);\n          if (extensionRequired && !extensionForbidden) {\n            context.report({\n              node: source,\n              message: 'Missing file extension ' + (\n              extension ? '\"' + String(extension) + '\" ' : '') + 'for \"' + String(importPathWithQueryString) + '\"' });\n\n          }\n        } else if (extension) {\n          if (isUseOfExtensionForbidden(extension) && isResolvableWithoutExtension(importPath)) {\n            context.report({\n              node: source,\n              message: 'Unexpected use of file extension \"' + String(extension) + '\" for \"' + String(importPathWithQueryString) + '\"' });\n\n          }\n        }\n      }\n\n      return (0, _moduleVisitor2['default'])(checkFileExtension, { commonjs: true });\n    }return create;}() };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
        }
    ]
}