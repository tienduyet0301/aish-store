{
    "sourceFile": "node_modules/eslint-plugin-import/lib/rules/newline-after-import.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892253732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\n\n\n\nvar _contextCompat = require('eslint-module-utils/contextCompat');\n\nvar _staticRequire = require('../core/staticRequire');var _staticRequire2 = _interopRequireDefault(_staticRequire);\nvar _docsUrl = require('../docsUrl');var _docsUrl2 = _interopRequireDefault(_docsUrl);\n\nvar _debug = require('debug');var _debug2 = _interopRequireDefault(_debug);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };} /**\n                                                                                                                                                                            * @fileoverview Rule to enforce new line after import not followed by another import.\n                                                                                                                                                                            * @author Radek Benkel\n                                                                                                                                                                            */var log = (0, _debug2['default'])('eslint-plugin-import:rules:newline-after-import'); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nfunction containsNodeOrEqual(outerNode, innerNode) {\n  return outerNode.range[0] <= innerNode.range[0] && outerNode.range[1] >= innerNode.range[1];\n}\n\nfunction getScopeBody(scope) {\n  if (scope.block.type === 'SwitchStatement') {\n    log('SwitchStatement scopes not supported');\n    return null;\n  }var\n\n  body = scope.block.body;\n  if (body && body.type === 'BlockStatement') {\n    return body.body;\n  }\n\n  return body;\n}\n\nfunction findNodeIndexInScopeBody(body, nodeToFind) {\n  return body.findIndex(function (node) {return containsNodeOrEqual(node, nodeToFind);});\n}\n\nfunction getLineDifference(node, nextNode) {\n  return nextNode.loc.start.line - node.loc.end.line;\n}\n\nfunction isClassWithDecorator(node) {\n  return node.type === 'ClassDeclaration' && node.decorators && node.decorators.length;\n}\n\nfunction isExportDefaultClass(node) {\n  return node.type === 'ExportDefaultDeclaration' && node.declaration.type === 'ClassDeclaration';\n}\n\nfunction isExportNameClass(node) {\n\n  return node.type === 'ExportNamedDeclaration' && node.declaration && node.declaration.type === 'ClassDeclaration';\n}\n\nmodule.exports = {\n  meta: {\n    type: 'layout',\n    docs: {\n      category: 'Style guide',\n      description: 'Enforce a newline after import statements.',\n      url: (0, _docsUrl2['default'])('newline-after-import') },\n\n    fixable: 'whitespace',\n    schema: [\n    {\n      type: 'object',\n      properties: {\n        count: {\n          type: 'integer',\n          minimum: 1 },\n\n        exactCount: { type: 'boolean' },\n        considerComments: { type: 'boolean' } },\n\n      additionalProperties: false }] },\n\n\n\n  create: function () {function create(context) {\n      var level = 0;\n      var requireCalls = [];\n      var options = Object.assign({\n        count: 1,\n        exactCount: false,\n        considerComments: false },\n      context.options[0]);\n\n\n      function checkForNewLine(node, nextNode, type) {\n        if (isExportDefaultClass(nextNode) || isExportNameClass(nextNode)) {\n          var classNode = nextNode.declaration;\n\n          if (isClassWithDecorator(classNode)) {\n            nextNode = classNode.decorators[0];\n          }\n        } else if (isClassWithDecorator(nextNode)) {\n          nextNode = nextNode.decorators[0];\n        }\n\n        var lineDifference = getLineDifference(node, nextNode);\n        var EXPECTED_LINE_DIFFERENCE = options.count + 1;\n\n        if (\n        lineDifference < EXPECTED_LINE_DIFFERENCE ||\n        options.exactCount && lineDifference !== EXPECTED_LINE_DIFFERENCE)\n        {\n          var column = node.loc.start.column;\n\n          if (node.loc.start.line !== node.loc.end.line) {\n            column = 0;\n          }\n\n          context.report({\n            loc: {\n              line: node.loc.end.line,\n              column: column },\n\n            message: 'Expected ' + String(options.count) + ' empty line' + (options.count > 1 ? 's' : '') + ' after ' + String(type) + ' statement not followed by another ' + String(type) + '.',\n            fix: options.exactCount && EXPECTED_LINE_DIFFERENCE < lineDifference ? undefined : function (fixer) {return fixer.insertTextAfter(\n              node,\n              '\\n'.repeat(EXPECTED_LINE_DIFFERENCE - lineDifference));} });\n\n\n        }\n      }\n\n      function commentAfterImport(node, nextComment, type) {\n        var lineDifference = getLineDifference(node, nextComment);\n        var EXPECTED_LINE_DIFFERENCE = options.count + 1;\n\n        if (lineDifference < EXPECTED_LINE_DIFFERENCE) {\n          var column = node.loc.start.column;\n\n          if (node.loc.start.line !== node.loc.end.line) {\n            column = 0;\n          }\n\n          context.report({\n            loc: {\n              line: node.loc.end.line,\n              column: column },\n\n            message: 'Expected ' + String(options.count) + ' empty line' + (options.count > 1 ? 's' : '') + ' after ' + String(type) + ' statement not followed by another ' + String(type) + '.',\n            fix: options.exactCount && EXPECTED_LINE_DIFFERENCE < lineDifference ? undefined : function (fixer) {return fixer.insertTextAfter(\n              node,\n              '\\n'.repeat(EXPECTED_LINE_DIFFERENCE - lineDifference));} });\n\n\n        }\n      }\n\n      function incrementLevel() {\n        level++;\n      }\n      function decrementLevel() {\n        level--;\n      }\n\n      function checkImport(node) {var\n        parent = node.parent;\n\n        if (!parent || !parent.body) {\n          return;\n        }\n\n        var nodePosition = parent.body.indexOf(node);\n        var nextNode = parent.body[nodePosition + 1];\n        var endLine = node.loc.end.line;\n        var nextComment = void 0;\n\n        if (typeof parent.comments !== 'undefined' && options.considerComments) {\n          nextComment = parent.comments.find(function (o) {return o.loc.start.line >= endLine && o.loc.start.line <= endLine + options.count + 1;});\n        }\n\n        // skip \"export import\"s\n        if (node.type === 'TSImportEqualsDeclaration' && node.isExport) {\n          return;\n        }\n\n        if (nextComment && typeof nextComment !== 'undefined') {\n          commentAfterImport(node, nextComment, 'import');\n        } else if (nextNode && nextNode.type !== 'ImportDeclaration' && (nextNode.type !== 'TSImportEqualsDeclaration' || nextNode.isExport)) {\n          checkForNewLine(node, nextNode, 'import');\n        }\n      }\n\n      return {\n        ImportDeclaration: checkImport,\n        TSImportEqualsDeclaration: checkImport,\n        CallExpression: function () {function CallExpression(node) {\n            if ((0, _staticRequire2['default'])(node) && level === 0) {\n              requireCalls.push(node);\n            }\n          }return CallExpression;}(),\n        'Program:exit': function () {function ProgramExit(node) {\n            log('exit processing for', (0, _contextCompat.getPhysicalFilename)(context));\n            var scopeBody = getScopeBody((0, _contextCompat.getScope)(context, node));\n            log('got scope:', scopeBody);\n\n            requireCalls.forEach(function (node, index) {\n              var nodePosition = findNodeIndexInScopeBody(scopeBody, node);\n              log('node position in scope:', nodePosition);\n\n              var statementWithRequireCall = scopeBody[nodePosition];\n              var nextStatement = scopeBody[nodePosition + 1];\n              var nextRequireCall = requireCalls[index + 1];\n\n              if (nextRequireCall && containsNodeOrEqual(statementWithRequireCall, nextRequireCall)) {\n                return;\n              }\n\n              if (\n              nextStatement && (\n              !nextRequireCall ||\n              !containsNodeOrEqual(nextStatement, nextRequireCall)))\n\n              {\n                var nextComment = void 0;\n                if (typeof statementWithRequireCall.parent.comments !== 'undefined' && options.considerComments) {\n                  var endLine = node.loc.end.line;\n                  nextComment = statementWithRequireCall.parent.comments.find(function (o) {return o.loc.start.line >= endLine && o.loc.start.line <= endLine + options.count + 1;});\n                }\n\n                if (nextComment && typeof nextComment !== 'undefined') {\n\n                  commentAfterImport(statementWithRequireCall, nextComment, 'require');\n                } else {\n                  checkForNewLine(statementWithRequireCall, nextStatement, 'require');\n                }\n              }\n            });\n          }return ProgramExit;}(),\n        FunctionDeclaration: incrementLevel,\n        FunctionExpression: incrementLevel,\n        ArrowFunctionExpression: incrementLevel,\n        BlockStatement: incrementLevel,\n        ObjectExpression: incrementLevel,\n        Decorator: incrementLevel,\n        'FunctionDeclaration:exit': decrementLevel,\n        'FunctionExpression:exit': decrementLevel,\n        'ArrowFunctionExpression:exit': decrementLevel,\n        'BlockStatement:exit': decrementLevel,\n        'ObjectExpression:exit': decrementLevel,\n        'Decorator:exit': decrementLevel };\n\n    }return create;}() };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
        }
    ]
}