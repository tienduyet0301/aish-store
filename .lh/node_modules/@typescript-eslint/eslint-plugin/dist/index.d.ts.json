{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891959155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "declare const _default: {\n    configs: {\n        all: {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/adjacent-overload-signatures': \"error\";\n                '@typescript-eslint/array-type': \"error\";\n                '@typescript-eslint/await-thenable': \"error\";\n                '@typescript-eslint/ban-ts-comment': \"error\";\n                '@typescript-eslint/ban-tslint-comment': \"error\";\n                '@typescript-eslint/class-literal-property-style': \"error\";\n                'class-methods-use-this': \"off\";\n                '@typescript-eslint/class-methods-use-this': \"error\";\n                '@typescript-eslint/consistent-generic-constructors': \"error\";\n                '@typescript-eslint/consistent-indexed-object-style': \"error\";\n                'consistent-return': \"off\";\n                '@typescript-eslint/consistent-return': \"error\";\n                '@typescript-eslint/consistent-type-assertions': \"error\";\n                '@typescript-eslint/consistent-type-definitions': \"error\";\n                '@typescript-eslint/consistent-type-exports': \"error\";\n                '@typescript-eslint/consistent-type-imports': \"error\";\n                'default-param-last': \"off\";\n                '@typescript-eslint/default-param-last': \"error\";\n                'dot-notation': \"off\";\n                '@typescript-eslint/dot-notation': \"error\";\n                '@typescript-eslint/explicit-function-return-type': \"error\";\n                '@typescript-eslint/explicit-member-accessibility': \"error\";\n                '@typescript-eslint/explicit-module-boundary-types': \"error\";\n                'init-declarations': \"off\";\n                '@typescript-eslint/init-declarations': \"error\";\n                'max-params': \"off\";\n                '@typescript-eslint/max-params': \"error\";\n                '@typescript-eslint/member-ordering': \"error\";\n                '@typescript-eslint/method-signature-style': \"error\";\n                '@typescript-eslint/naming-convention': \"error\";\n                'no-array-constructor': \"off\";\n                '@typescript-eslint/no-array-constructor': \"error\";\n                '@typescript-eslint/no-array-delete': \"error\";\n                '@typescript-eslint/no-base-to-string': \"error\";\n                '@typescript-eslint/no-confusing-non-null-assertion': \"error\";\n                '@typescript-eslint/no-confusing-void-expression': \"error\";\n                '@typescript-eslint/no-deprecated': \"error\";\n                'no-dupe-class-members': \"off\";\n                '@typescript-eslint/no-dupe-class-members': \"error\";\n                '@typescript-eslint/no-duplicate-enum-values': \"error\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"error\";\n                '@typescript-eslint/no-dynamic-delete': \"error\";\n                'no-empty-function': \"off\";\n                '@typescript-eslint/no-empty-function': \"error\";\n                '@typescript-eslint/no-empty-object-type': \"error\";\n                '@typescript-eslint/no-explicit-any': \"error\";\n                '@typescript-eslint/no-extra-non-null-assertion': \"error\";\n                '@typescript-eslint/no-extraneous-class': \"error\";\n                '@typescript-eslint/no-floating-promises': \"error\";\n                '@typescript-eslint/no-for-in-array': \"error\";\n                'no-implied-eval': \"off\";\n                '@typescript-eslint/no-implied-eval': \"error\";\n                '@typescript-eslint/no-import-type-side-effects': \"error\";\n                '@typescript-eslint/no-inferrable-types': \"error\";\n                'no-invalid-this': \"off\";\n                '@typescript-eslint/no-invalid-this': \"error\";\n                '@typescript-eslint/no-invalid-void-type': \"error\";\n                'no-loop-func': \"off\";\n                '@typescript-eslint/no-loop-func': \"error\";\n                'no-magic-numbers': \"off\";\n                '@typescript-eslint/no-magic-numbers': \"error\";\n                '@typescript-eslint/no-meaningless-void-operator': \"error\";\n                '@typescript-eslint/no-misused-new': \"error\";\n                '@typescript-eslint/no-misused-promises': \"error\";\n                '@typescript-eslint/no-misused-spread': \"error\";\n                '@typescript-eslint/no-mixed-enums': \"error\";\n                '@typescript-eslint/no-namespace': \"error\";\n                '@typescript-eslint/no-non-null-asserted-nullish-coalescing': \"error\";\n                '@typescript-eslint/no-non-null-asserted-optional-chain': \"error\";\n                '@typescript-eslint/no-non-null-assertion': \"error\";\n                'no-redeclare': \"off\";\n                '@typescript-eslint/no-redeclare': \"error\";\n                '@typescript-eslint/no-redundant-type-constituents': \"error\";\n                '@typescript-eslint/no-require-imports': \"error\";\n                'no-restricted-imports': \"off\";\n                '@typescript-eslint/no-restricted-imports': \"error\";\n                '@typescript-eslint/no-restricted-types': \"error\";\n                'no-shadow': \"off\";\n                '@typescript-eslint/no-shadow': \"error\";\n                '@typescript-eslint/no-this-alias': \"error\";\n                '@typescript-eslint/no-unnecessary-boolean-literal-compare': \"error\";\n                '@typescript-eslint/no-unnecessary-condition': \"error\";\n                '@typescript-eslint/no-unnecessary-parameter-property-assignment': \"error\";\n                '@typescript-eslint/no-unnecessary-qualifier': \"error\";\n                '@typescript-eslint/no-unnecessary-template-expression': \"error\";\n                '@typescript-eslint/no-unnecessary-type-arguments': \"error\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"error\";\n                '@typescript-eslint/no-unnecessary-type-constraint': \"error\";\n                '@typescript-eslint/no-unnecessary-type-parameters': \"error\";\n                '@typescript-eslint/no-unsafe-argument': \"error\";\n                '@typescript-eslint/no-unsafe-assignment': \"error\";\n                '@typescript-eslint/no-unsafe-call': \"error\";\n                '@typescript-eslint/no-unsafe-declaration-merging': \"error\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"error\";\n                '@typescript-eslint/no-unsafe-function-type': \"error\";\n                '@typescript-eslint/no-unsafe-member-access': \"error\";\n                '@typescript-eslint/no-unsafe-return': \"error\";\n                '@typescript-eslint/no-unsafe-type-assertion': \"error\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"error\";\n                'no-unused-expressions': \"off\";\n                '@typescript-eslint/no-unused-expressions': \"error\";\n                'no-unused-vars': \"off\";\n                '@typescript-eslint/no-unused-vars': \"error\";\n                'no-use-before-define': \"off\";\n                '@typescript-eslint/no-use-before-define': \"error\";\n                'no-useless-constructor': \"off\";\n                '@typescript-eslint/no-useless-constructor': \"error\";\n                '@typescript-eslint/no-useless-empty-export': \"error\";\n                '@typescript-eslint/no-wrapper-object-types': \"error\";\n                '@typescript-eslint/non-nullable-type-assertion-style': \"error\";\n                'no-throw-literal': \"off\";\n                '@typescript-eslint/only-throw-error': \"error\";\n                '@typescript-eslint/parameter-properties': \"error\";\n                '@typescript-eslint/prefer-as-const': \"error\";\n                'prefer-destructuring': \"off\";\n                '@typescript-eslint/prefer-destructuring': \"error\";\n                '@typescript-eslint/prefer-enum-initializers': \"error\";\n                '@typescript-eslint/prefer-find': \"error\";\n                '@typescript-eslint/prefer-for-of': \"error\";\n                '@typescript-eslint/prefer-function-type': \"error\";\n                '@typescript-eslint/prefer-includes': \"error\";\n                '@typescript-eslint/prefer-literal-enum-member': \"error\";\n                '@typescript-eslint/prefer-namespace-keyword': \"error\";\n                '@typescript-eslint/prefer-nullish-coalescing': \"error\";\n                '@typescript-eslint/prefer-optional-chain': \"error\";\n                'prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"error\";\n                '@typescript-eslint/prefer-readonly': \"error\";\n                '@typescript-eslint/prefer-readonly-parameter-types': \"error\";\n                '@typescript-eslint/prefer-reduce-type-parameter': \"error\";\n                '@typescript-eslint/prefer-regexp-exec': \"error\";\n                '@typescript-eslint/prefer-return-this-type': \"error\";\n                '@typescript-eslint/prefer-string-starts-ends-with': \"error\";\n                '@typescript-eslint/promise-function-async': \"error\";\n                '@typescript-eslint/related-getter-setter-pairs': \"error\";\n                '@typescript-eslint/require-array-sort-compare': \"error\";\n                'require-await': \"off\";\n                '@typescript-eslint/require-await': \"error\";\n                '@typescript-eslint/restrict-plus-operands': \"error\";\n                '@typescript-eslint/restrict-template-expressions': \"error\";\n                'no-return-await': \"off\";\n                '@typescript-eslint/return-await': \"error\";\n                '@typescript-eslint/strict-boolean-expressions': \"error\";\n                '@typescript-eslint/switch-exhaustiveness-check': \"error\";\n                '@typescript-eslint/triple-slash-reference': \"error\";\n                '@typescript-eslint/typedef': \"error\";\n                '@typescript-eslint/unbound-method': \"error\";\n                '@typescript-eslint/unified-signatures': \"error\";\n                '@typescript-eslint/use-unknown-in-catch-callback-variable': \"error\";\n            };\n        };\n        base: {\n            parser: string;\n            parserOptions: {\n                sourceType: \"module\";\n            };\n            plugins: string[];\n        };\n        'disable-type-checked': {\n            parserOptions: {\n                program: null;\n                project: false;\n                projectService: false;\n            };\n            rules: {\n                '@typescript-eslint/await-thenable': \"off\";\n                '@typescript-eslint/consistent-return': \"off\";\n                '@typescript-eslint/consistent-type-exports': \"off\";\n                '@typescript-eslint/dot-notation': \"off\";\n                '@typescript-eslint/naming-convention': \"off\";\n                '@typescript-eslint/no-array-delete': \"off\";\n                '@typescript-eslint/no-base-to-string': \"off\";\n                '@typescript-eslint/no-confusing-void-expression': \"off\";\n                '@typescript-eslint/no-deprecated': \"off\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"off\";\n                '@typescript-eslint/no-floating-promises': \"off\";\n                '@typescript-eslint/no-for-in-array': \"off\";\n                '@typescript-eslint/no-implied-eval': \"off\";\n                '@typescript-eslint/no-meaningless-void-operator': \"off\";\n                '@typescript-eslint/no-misused-promises': \"off\";\n                '@typescript-eslint/no-misused-spread': \"off\";\n                '@typescript-eslint/no-mixed-enums': \"off\";\n                '@typescript-eslint/no-redundant-type-constituents': \"off\";\n                '@typescript-eslint/no-unnecessary-boolean-literal-compare': \"off\";\n                '@typescript-eslint/no-unnecessary-condition': \"off\";\n                '@typescript-eslint/no-unnecessary-qualifier': \"off\";\n                '@typescript-eslint/no-unnecessary-template-expression': \"off\";\n                '@typescript-eslint/no-unnecessary-type-arguments': \"off\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"off\";\n                '@typescript-eslint/no-unnecessary-type-parameters': \"off\";\n                '@typescript-eslint/no-unsafe-argument': \"off\";\n                '@typescript-eslint/no-unsafe-assignment': \"off\";\n                '@typescript-eslint/no-unsafe-call': \"off\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"off\";\n                '@typescript-eslint/no-unsafe-member-access': \"off\";\n                '@typescript-eslint/no-unsafe-return': \"off\";\n                '@typescript-eslint/no-unsafe-type-assertion': \"off\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"off\";\n                '@typescript-eslint/non-nullable-type-assertion-style': \"off\";\n                '@typescript-eslint/only-throw-error': \"off\";\n                '@typescript-eslint/prefer-destructuring': \"off\";\n                '@typescript-eslint/prefer-find': \"off\";\n                '@typescript-eslint/prefer-includes': \"off\";\n                '@typescript-eslint/prefer-nullish-coalescing': \"off\";\n                '@typescript-eslint/prefer-optional-chain': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-readonly': \"off\";\n                '@typescript-eslint/prefer-readonly-parameter-types': \"off\";\n                '@typescript-eslint/prefer-reduce-type-parameter': \"off\";\n                '@typescript-eslint/prefer-regexp-exec': \"off\";\n                '@typescript-eslint/prefer-return-this-type': \"off\";\n                '@typescript-eslint/prefer-string-starts-ends-with': \"off\";\n                '@typescript-eslint/promise-function-async': \"off\";\n                '@typescript-eslint/related-getter-setter-pairs': \"off\";\n                '@typescript-eslint/require-array-sort-compare': \"off\";\n                '@typescript-eslint/require-await': \"off\";\n                '@typescript-eslint/restrict-plus-operands': \"off\";\n                '@typescript-eslint/restrict-template-expressions': \"off\";\n                '@typescript-eslint/return-await': \"off\";\n                '@typescript-eslint/strict-boolean-expressions': \"off\";\n                '@typescript-eslint/switch-exhaustiveness-check': \"off\";\n                '@typescript-eslint/unbound-method': \"off\";\n                '@typescript-eslint/use-unknown-in-catch-callback-variable': \"off\";\n            };\n        };\n        'eslint-recommended': {\n            overrides: {\n                files: string[];\n                rules: Record<string, \"off\" | \"warn\" | \"error\">;\n            }[];\n        };\n        recommended: {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/ban-ts-comment': \"error\";\n                'no-array-constructor': \"off\";\n                '@typescript-eslint/no-array-constructor': \"error\";\n                '@typescript-eslint/no-duplicate-enum-values': \"error\";\n                '@typescript-eslint/no-empty-object-type': \"error\";\n                '@typescript-eslint/no-explicit-any': \"error\";\n                '@typescript-eslint/no-extra-non-null-assertion': \"error\";\n                '@typescript-eslint/no-misused-new': \"error\";\n                '@typescript-eslint/no-namespace': \"error\";\n                '@typescript-eslint/no-non-null-asserted-optional-chain': \"error\";\n                '@typescript-eslint/no-require-imports': \"error\";\n                '@typescript-eslint/no-this-alias': \"error\";\n                '@typescript-eslint/no-unnecessary-type-constraint': \"error\";\n                '@typescript-eslint/no-unsafe-declaration-merging': \"error\";\n                '@typescript-eslint/no-unsafe-function-type': \"error\";\n                'no-unused-expressions': \"off\";\n                '@typescript-eslint/no-unused-expressions': \"error\";\n                'no-unused-vars': \"off\";\n                '@typescript-eslint/no-unused-vars': \"error\";\n                '@typescript-eslint/no-wrapper-object-types': \"error\";\n                '@typescript-eslint/prefer-as-const': \"error\";\n                '@typescript-eslint/prefer-namespace-keyword': \"error\";\n                '@typescript-eslint/triple-slash-reference': \"error\";\n            };\n        };\n        /** @deprecated - please use \"recommended-type-checked\" instead. */\n        'recommended-requiring-type-checking': {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/await-thenable': \"error\";\n                '@typescript-eslint/ban-ts-comment': \"error\";\n                'no-array-constructor': \"off\";\n                '@typescript-eslint/no-array-constructor': \"error\";\n                '@typescript-eslint/no-array-delete': \"error\";\n                '@typescript-eslint/no-base-to-string': \"error\";\n                '@typescript-eslint/no-duplicate-enum-values': \"error\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"error\";\n                '@typescript-eslint/no-empty-object-type': \"error\";\n                '@typescript-eslint/no-explicit-any': \"error\";\n                '@typescript-eslint/no-extra-non-null-assertion': \"error\";\n                '@typescript-eslint/no-floating-promises': \"error\";\n                '@typescript-eslint/no-for-in-array': \"error\";\n                'no-implied-eval': \"off\";\n                '@typescript-eslint/no-implied-eval': \"error\";\n                '@typescript-eslint/no-misused-new': \"error\";\n                '@typescript-eslint/no-misused-promises': \"error\";\n                '@typescript-eslint/no-namespace': \"error\";\n                '@typescript-eslint/no-non-null-asserted-optional-chain': \"error\";\n                '@typescript-eslint/no-redundant-type-constituents': \"error\";\n                '@typescript-eslint/no-require-imports': \"error\";\n                '@typescript-eslint/no-this-alias': \"error\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"error\";\n                '@typescript-eslint/no-unnecessary-type-constraint': \"error\";\n                '@typescript-eslint/no-unsafe-argument': \"error\";\n                '@typescript-eslint/no-unsafe-assignment': \"error\";\n                '@typescript-eslint/no-unsafe-call': \"error\";\n                '@typescript-eslint/no-unsafe-declaration-merging': \"error\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"error\";\n                '@typescript-eslint/no-unsafe-function-type': \"error\";\n                '@typescript-eslint/no-unsafe-member-access': \"error\";\n                '@typescript-eslint/no-unsafe-return': \"error\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"error\";\n                'no-unused-expressions': \"off\";\n                '@typescript-eslint/no-unused-expressions': \"error\";\n                'no-unused-vars': \"off\";\n                '@typescript-eslint/no-unused-vars': \"error\";\n                '@typescript-eslint/no-wrapper-object-types': \"error\";\n                'no-throw-literal': \"off\";\n                '@typescript-eslint/only-throw-error': \"error\";\n                '@typescript-eslint/prefer-as-const': \"error\";\n                '@typescript-eslint/prefer-namespace-keyword': \"error\";\n                'prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"error\";\n                'require-await': \"off\";\n                '@typescript-eslint/require-await': \"error\";\n                '@typescript-eslint/restrict-plus-operands': \"error\";\n                '@typescript-eslint/restrict-template-expressions': \"error\";\n                '@typescript-eslint/triple-slash-reference': \"error\";\n                '@typescript-eslint/unbound-method': \"error\";\n            };\n        };\n        'recommended-type-checked': {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/await-thenable': \"error\";\n                '@typescript-eslint/ban-ts-comment': \"error\";\n                'no-array-constructor': \"off\";\n                '@typescript-eslint/no-array-constructor': \"error\";\n                '@typescript-eslint/no-array-delete': \"error\";\n                '@typescript-eslint/no-base-to-string': \"error\";\n                '@typescript-eslint/no-duplicate-enum-values': \"error\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"error\";\n                '@typescript-eslint/no-empty-object-type': \"error\";\n                '@typescript-eslint/no-explicit-any': \"error\";\n                '@typescript-eslint/no-extra-non-null-assertion': \"error\";\n                '@typescript-eslint/no-floating-promises': \"error\";\n                '@typescript-eslint/no-for-in-array': \"error\";\n                'no-implied-eval': \"off\";\n                '@typescript-eslint/no-implied-eval': \"error\";\n                '@typescript-eslint/no-misused-new': \"error\";\n                '@typescript-eslint/no-misused-promises': \"error\";\n                '@typescript-eslint/no-namespace': \"error\";\n                '@typescript-eslint/no-non-null-asserted-optional-chain': \"error\";\n                '@typescript-eslint/no-redundant-type-constituents': \"error\";\n                '@typescript-eslint/no-require-imports': \"error\";\n                '@typescript-eslint/no-this-alias': \"error\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"error\";\n                '@typescript-eslint/no-unnecessary-type-constraint': \"error\";\n                '@typescript-eslint/no-unsafe-argument': \"error\";\n                '@typescript-eslint/no-unsafe-assignment': \"error\";\n                '@typescript-eslint/no-unsafe-call': \"error\";\n                '@typescript-eslint/no-unsafe-declaration-merging': \"error\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"error\";\n                '@typescript-eslint/no-unsafe-function-type': \"error\";\n                '@typescript-eslint/no-unsafe-member-access': \"error\";\n                '@typescript-eslint/no-unsafe-return': \"error\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"error\";\n                'no-unused-expressions': \"off\";\n                '@typescript-eslint/no-unused-expressions': \"error\";\n                'no-unused-vars': \"off\";\n                '@typescript-eslint/no-unused-vars': \"error\";\n                '@typescript-eslint/no-wrapper-object-types': \"error\";\n                'no-throw-literal': \"off\";\n                '@typescript-eslint/only-throw-error': \"error\";\n                '@typescript-eslint/prefer-as-const': \"error\";\n                '@typescript-eslint/prefer-namespace-keyword': \"error\";\n                'prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"error\";\n                'require-await': \"off\";\n                '@typescript-eslint/require-await': \"error\";\n                '@typescript-eslint/restrict-plus-operands': \"error\";\n                '@typescript-eslint/restrict-template-expressions': \"error\";\n                '@typescript-eslint/triple-slash-reference': \"error\";\n                '@typescript-eslint/unbound-method': \"error\";\n            };\n        };\n        'recommended-type-checked-only': {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/await-thenable': \"error\";\n                '@typescript-eslint/no-array-delete': \"error\";\n                '@typescript-eslint/no-base-to-string': \"error\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"error\";\n                '@typescript-eslint/no-floating-promises': \"error\";\n                '@typescript-eslint/no-for-in-array': \"error\";\n                'no-implied-eval': \"off\";\n                '@typescript-eslint/no-implied-eval': \"error\";\n                '@typescript-eslint/no-misused-promises': \"error\";\n                '@typescript-eslint/no-redundant-type-constituents': \"error\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"error\";\n                '@typescript-eslint/no-unsafe-argument': \"error\";\n                '@typescript-eslint/no-unsafe-assignment': \"error\";\n                '@typescript-eslint/no-unsafe-call': \"error\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"error\";\n                '@typescript-eslint/no-unsafe-member-access': \"error\";\n                '@typescript-eslint/no-unsafe-return': \"error\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"error\";\n                'no-throw-literal': \"off\";\n                '@typescript-eslint/only-throw-error': \"error\";\n                'prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"error\";\n                'require-await': \"off\";\n                '@typescript-eslint/require-await': \"error\";\n                '@typescript-eslint/restrict-plus-operands': \"error\";\n                '@typescript-eslint/restrict-template-expressions': \"error\";\n                '@typescript-eslint/unbound-method': \"error\";\n            };\n        };\n        strict: {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/ban-ts-comment': [\"error\", {\n                    minimumDescriptionLength: number;\n                }];\n                'no-array-constructor': \"off\";\n                '@typescript-eslint/no-array-constructor': \"error\";\n                '@typescript-eslint/no-duplicate-enum-values': \"error\";\n                '@typescript-eslint/no-dynamic-delete': \"error\";\n                '@typescript-eslint/no-empty-object-type': \"error\";\n                '@typescript-eslint/no-explicit-any': \"error\";\n                '@typescript-eslint/no-extra-non-null-assertion': \"error\";\n                '@typescript-eslint/no-extraneous-class': \"error\";\n                '@typescript-eslint/no-invalid-void-type': \"error\";\n                '@typescript-eslint/no-misused-new': \"error\";\n                '@typescript-eslint/no-namespace': \"error\";\n                '@typescript-eslint/no-non-null-asserted-nullish-coalescing': \"error\";\n                '@typescript-eslint/no-non-null-asserted-optional-chain': \"error\";\n                '@typescript-eslint/no-non-null-assertion': \"error\";\n                '@typescript-eslint/no-require-imports': \"error\";\n                '@typescript-eslint/no-this-alias': \"error\";\n                '@typescript-eslint/no-unnecessary-type-constraint': \"error\";\n                '@typescript-eslint/no-unsafe-declaration-merging': \"error\";\n                '@typescript-eslint/no-unsafe-function-type': \"error\";\n                'no-unused-expressions': \"off\";\n                '@typescript-eslint/no-unused-expressions': \"error\";\n                'no-unused-vars': \"off\";\n                '@typescript-eslint/no-unused-vars': \"error\";\n                'no-useless-constructor': \"off\";\n                '@typescript-eslint/no-useless-constructor': \"error\";\n                '@typescript-eslint/no-wrapper-object-types': \"error\";\n                '@typescript-eslint/prefer-as-const': \"error\";\n                '@typescript-eslint/prefer-literal-enum-member': \"error\";\n                '@typescript-eslint/prefer-namespace-keyword': \"error\";\n                '@typescript-eslint/triple-slash-reference': \"error\";\n                '@typescript-eslint/unified-signatures': \"error\";\n            };\n        };\n        'strict-type-checked': {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/await-thenable': \"error\";\n                '@typescript-eslint/ban-ts-comment': [\"error\", {\n                    minimumDescriptionLength: number;\n                }];\n                'no-array-constructor': \"off\";\n                '@typescript-eslint/no-array-constructor': \"error\";\n                '@typescript-eslint/no-array-delete': \"error\";\n                '@typescript-eslint/no-base-to-string': \"error\";\n                '@typescript-eslint/no-confusing-void-expression': \"error\";\n                '@typescript-eslint/no-deprecated': \"error\";\n                '@typescript-eslint/no-duplicate-enum-values': \"error\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"error\";\n                '@typescript-eslint/no-dynamic-delete': \"error\";\n                '@typescript-eslint/no-empty-object-type': \"error\";\n                '@typescript-eslint/no-explicit-any': \"error\";\n                '@typescript-eslint/no-extra-non-null-assertion': \"error\";\n                '@typescript-eslint/no-extraneous-class': \"error\";\n                '@typescript-eslint/no-floating-promises': \"error\";\n                '@typescript-eslint/no-for-in-array': \"error\";\n                'no-implied-eval': \"off\";\n                '@typescript-eslint/no-implied-eval': \"error\";\n                '@typescript-eslint/no-invalid-void-type': \"error\";\n                '@typescript-eslint/no-meaningless-void-operator': \"error\";\n                '@typescript-eslint/no-misused-new': \"error\";\n                '@typescript-eslint/no-misused-promises': \"error\";\n                '@typescript-eslint/no-misused-spread': \"error\";\n                '@typescript-eslint/no-mixed-enums': \"error\";\n                '@typescript-eslint/no-namespace': \"error\";\n                '@typescript-eslint/no-non-null-asserted-nullish-coalescing': \"error\";\n                '@typescript-eslint/no-non-null-asserted-optional-chain': \"error\";\n                '@typescript-eslint/no-non-null-assertion': \"error\";\n                '@typescript-eslint/no-redundant-type-constituents': \"error\";\n                '@typescript-eslint/no-require-imports': \"error\";\n                '@typescript-eslint/no-this-alias': \"error\";\n                '@typescript-eslint/no-unnecessary-boolean-literal-compare': \"error\";\n                '@typescript-eslint/no-unnecessary-condition': \"error\";\n                '@typescript-eslint/no-unnecessary-template-expression': \"error\";\n                '@typescript-eslint/no-unnecessary-type-arguments': \"error\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"error\";\n                '@typescript-eslint/no-unnecessary-type-constraint': \"error\";\n                '@typescript-eslint/no-unnecessary-type-parameters': \"error\";\n                '@typescript-eslint/no-unsafe-argument': \"error\";\n                '@typescript-eslint/no-unsafe-assignment': \"error\";\n                '@typescript-eslint/no-unsafe-call': \"error\";\n                '@typescript-eslint/no-unsafe-declaration-merging': \"error\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"error\";\n                '@typescript-eslint/no-unsafe-function-type': \"error\";\n                '@typescript-eslint/no-unsafe-member-access': \"error\";\n                '@typescript-eslint/no-unsafe-return': \"error\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"error\";\n                'no-unused-expressions': \"off\";\n                '@typescript-eslint/no-unused-expressions': \"error\";\n                'no-unused-vars': \"off\";\n                '@typescript-eslint/no-unused-vars': \"error\";\n                'no-useless-constructor': \"off\";\n                '@typescript-eslint/no-useless-constructor': \"error\";\n                '@typescript-eslint/no-wrapper-object-types': \"error\";\n                'no-throw-literal': \"off\";\n                '@typescript-eslint/only-throw-error': \"error\";\n                '@typescript-eslint/prefer-as-const': \"error\";\n                '@typescript-eslint/prefer-literal-enum-member': \"error\";\n                '@typescript-eslint/prefer-namespace-keyword': \"error\";\n                'prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"error\";\n                '@typescript-eslint/prefer-reduce-type-parameter': \"error\";\n                '@typescript-eslint/prefer-return-this-type': \"error\";\n                '@typescript-eslint/related-getter-setter-pairs': \"error\";\n                'require-await': \"off\";\n                '@typescript-eslint/require-await': \"error\";\n                '@typescript-eslint/restrict-plus-operands': [\"error\", {\n                    allowAny: boolean;\n                    allowBoolean: boolean;\n                    allowNullish: boolean;\n                    allowNumberAndString: boolean;\n                    allowRegExp: boolean;\n                }];\n                '@typescript-eslint/restrict-template-expressions': [\"error\", {\n                    allowAny: boolean;\n                    allowBoolean: boolean;\n                    allowNever: boolean;\n                    allowNullish: boolean;\n                    allowNumber: boolean;\n                    allowRegExp: boolean;\n                }];\n                'no-return-await': \"off\";\n                '@typescript-eslint/return-await': [\"error\", string];\n                '@typescript-eslint/triple-slash-reference': \"error\";\n                '@typescript-eslint/unbound-method': \"error\";\n                '@typescript-eslint/unified-signatures': \"error\";\n                '@typescript-eslint/use-unknown-in-catch-callback-variable': \"error\";\n            };\n        };\n        'strict-type-checked-only': {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/await-thenable': \"error\";\n                '@typescript-eslint/no-array-delete': \"error\";\n                '@typescript-eslint/no-base-to-string': \"error\";\n                '@typescript-eslint/no-confusing-void-expression': \"error\";\n                '@typescript-eslint/no-deprecated': \"error\";\n                '@typescript-eslint/no-duplicate-type-constituents': \"error\";\n                '@typescript-eslint/no-floating-promises': \"error\";\n                '@typescript-eslint/no-for-in-array': \"error\";\n                'no-implied-eval': \"off\";\n                '@typescript-eslint/no-implied-eval': \"error\";\n                '@typescript-eslint/no-meaningless-void-operator': \"error\";\n                '@typescript-eslint/no-misused-promises': \"error\";\n                '@typescript-eslint/no-misused-spread': \"error\";\n                '@typescript-eslint/no-mixed-enums': \"error\";\n                '@typescript-eslint/no-redundant-type-constituents': \"error\";\n                '@typescript-eslint/no-unnecessary-boolean-literal-compare': \"error\";\n                '@typescript-eslint/no-unnecessary-condition': \"error\";\n                '@typescript-eslint/no-unnecessary-template-expression': \"error\";\n                '@typescript-eslint/no-unnecessary-type-arguments': \"error\";\n                '@typescript-eslint/no-unnecessary-type-assertion': \"error\";\n                '@typescript-eslint/no-unnecessary-type-parameters': \"error\";\n                '@typescript-eslint/no-unsafe-argument': \"error\";\n                '@typescript-eslint/no-unsafe-assignment': \"error\";\n                '@typescript-eslint/no-unsafe-call': \"error\";\n                '@typescript-eslint/no-unsafe-enum-comparison': \"error\";\n                '@typescript-eslint/no-unsafe-member-access': \"error\";\n                '@typescript-eslint/no-unsafe-return': \"error\";\n                '@typescript-eslint/no-unsafe-unary-minus': \"error\";\n                'no-throw-literal': \"off\";\n                '@typescript-eslint/only-throw-error': \"error\";\n                'prefer-promise-reject-errors': \"off\";\n                '@typescript-eslint/prefer-promise-reject-errors': \"error\";\n                '@typescript-eslint/prefer-reduce-type-parameter': \"error\";\n                '@typescript-eslint/prefer-return-this-type': \"error\";\n                '@typescript-eslint/related-getter-setter-pairs': \"error\";\n                'require-await': \"off\";\n                '@typescript-eslint/require-await': \"error\";\n                '@typescript-eslint/restrict-plus-operands': [\"error\", {\n                    allowAny: boolean;\n                    allowBoolean: boolean;\n                    allowNullish: boolean;\n                    allowNumberAndString: boolean;\n                    allowRegExp: boolean;\n                }];\n                '@typescript-eslint/restrict-template-expressions': [\"error\", {\n                    allowAny: boolean;\n                    allowBoolean: boolean;\n                    allowNever: boolean;\n                    allowNullish: boolean;\n                    allowNumber: boolean;\n                    allowRegExp: boolean;\n                }];\n                'no-return-await': \"off\";\n                '@typescript-eslint/return-await': [\"error\", string];\n                '@typescript-eslint/unbound-method': \"error\";\n                '@typescript-eslint/use-unknown-in-catch-callback-variable': \"error\";\n            };\n        };\n        stylistic: {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/adjacent-overload-signatures': \"error\";\n                '@typescript-eslint/array-type': \"error\";\n                '@typescript-eslint/ban-tslint-comment': \"error\";\n                '@typescript-eslint/class-literal-property-style': \"error\";\n                '@typescript-eslint/consistent-generic-constructors': \"error\";\n                '@typescript-eslint/consistent-indexed-object-style': \"error\";\n                '@typescript-eslint/consistent-type-assertions': \"error\";\n                '@typescript-eslint/consistent-type-definitions': \"error\";\n                '@typescript-eslint/no-confusing-non-null-assertion': \"error\";\n                'no-empty-function': \"off\";\n                '@typescript-eslint/no-empty-function': \"error\";\n                '@typescript-eslint/no-inferrable-types': \"error\";\n                '@typescript-eslint/prefer-for-of': \"error\";\n                '@typescript-eslint/prefer-function-type': \"error\";\n            };\n        };\n        'stylistic-type-checked': {\n            extends: string[];\n            rules: {\n                '@typescript-eslint/adjacent-overload-signatures': \"error\";\n                '@typescript-eslint/array-type': \"error\";\n                '@typescript-eslint/ban-tslint-comment': \"error\";\n                '@typescript-eslint/class-literal-property-style': \"error\";\n                '@typescript-eslint/consistent-generic-constructors': \"error\";\n                '@typescript-eslint/consistent-indexed-object-style': \"error\";\n                '@typescript-eslint/consistent-type-assertions': \"error\";\n                '@typescript-eslint/consistent-type-definitions': \"error\";\n                'dot-notation': \"off\";\n                '@typescript-eslint/dot-notation': \"error\";\n                '@typescript-eslint/no-confusing-non-null-assertion': \"error\";\n                'no-empty-function': \"off\";\n                '@typescript-eslint/no-empty-function': \"error\";\n                '@typescript-eslint/no-inferrable-types': \"error\";\n                '@typescript-eslint/non-nullable-type-assertion-style': \"error\";\n                '@typescript-eslint/prefer-find': \"error\";\n                '@typescript-eslint/prefer-for-of': \"error\";\n                '@typescript-eslint/prefer-function-type': \"error\";\n                '@typescript-eslint/prefer-includes': \"error\";\n                '@typescript-eslint/prefer-nullish-coalescing': \"error\";\n                '@typescript-eslint/prefer-optional-chain': \"error\";\n                '@typescript-eslint/prefer-regexp-exec': \"error\";\n                '@typescript-eslint/prefer-string-starts-ends-with': \"error\";\n            };\n        };\n        'stylistic-type-checked-only': {\n            extends: string[];\n            rules: {\n                'dot-notation': \"off\";\n                '@typescript-eslint/dot-notation': \"error\";\n                '@typescript-eslint/non-nullable-type-assertion-style': \"error\";\n                '@typescript-eslint/prefer-find': \"error\";\n                '@typescript-eslint/prefer-includes': \"error\";\n                '@typescript-eslint/prefer-nullish-coalescing': \"error\";\n                '@typescript-eslint/prefer-optional-chain': \"error\";\n                '@typescript-eslint/prefer-regexp-exec': \"error\";\n                '@typescript-eslint/prefer-string-starts-ends-with': \"error\";\n            };\n        };\n    };\n    meta: {\n        name: string;\n        version: string;\n    };\n    rules: {\n        'adjacent-overload-signatures': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"adjacentSignature\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'array-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/array-type\").MessageIds, import(\"./rules/array-type\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'await-thenable': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/await-thenable\").MessageId, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'ban-ts-comment': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/ban-ts-comment\").MessageIds, import(\"./rules/ban-ts-comment\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'ban-tslint-comment': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"commentDetected\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'class-literal-property-style': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/class-literal-property-style\").MessageIds, import(\"./rules/class-literal-property-style\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'class-methods-use-this': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"missingThis\", import(\"./rules/class-methods-use-this\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-generic-constructors': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/consistent-generic-constructors\").MessageIds, import(\"./rules/consistent-generic-constructors\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-indexed-object-style': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/consistent-indexed-object-style\").MessageIds, import(\"./rules/consistent-indexed-object-style\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-return': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"missingReturn\" | \"missingReturnValue\" | \"unexpectedReturnValue\", [({\n            treatUndefinedAsUnspecified?: boolean;\n        } | undefined)?], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-type-assertions': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/consistent-type-assertions\").MessageIds, import(\"./rules/consistent-type-assertions\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-type-definitions': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"interfaceOverType\" | \"typeOverInterface\", [string], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-type-exports': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/consistent-type-exports\").MessageIds, import(\"./rules/consistent-type-exports\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'consistent-type-imports': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/consistent-type-imports\").MessageIds, import(\"./rules/consistent-type-imports\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'default-param-last': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"shouldBeLast\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'dot-notation': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"useBrackets\" | \"useDot\", [{\n            allowIndexSignaturePropertyAccess?: boolean;\n            allowKeywords?: boolean;\n            allowPattern?: string;\n            allowPrivateClassPropertyAccess?: boolean;\n            allowProtectedClassPropertyAccess?: boolean;\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'explicit-function-return-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"missingReturnType\", import(\"./rules/explicit-function-return-type\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'explicit-member-accessibility': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/explicit-member-accessibility\").MessageIds, import(\"./rules/explicit-member-accessibility\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'explicit-module-boundary-types': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/explicit-module-boundary-types\").MessageIds, import(\"./rules/explicit-module-boundary-types\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'init-declarations': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"initialized\" | \"notInitialized\", [\"always\" | \"never\", ({\n            ignoreForLoopInit?: boolean;\n        } | undefined)?], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'max-params': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"exceed\", ({\n            countVoidThis?: boolean;\n            max: number;\n        } | {\n            countVoidThis?: boolean;\n            maximum: number;\n        })[], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'member-ordering': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/member-ordering\").MessageIds, import(\"./rules/member-ordering\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'method-signature-style': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/method-signature-style\").MessageIds, import(\"./rules/method-signature-style\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'naming-convention': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/naming-convention\").MessageIds, import(\"./rules/naming-convention\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-array-constructor': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"useLiteral\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-array-delete': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-array-delete\").MessageId, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-base-to-string': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-base-to-string\").MessageIds, import(\"./rules/no-base-to-string\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-confusing-non-null-assertion': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-confusing-non-null-assertion\").MessageId, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-confusing-void-expression': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-confusing-void-expression\").MessageId, import(\"./rules/no-confusing-void-expression\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-deprecated': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"deprecated\" | \"deprecatedWithReason\", [{\n            allow?: import(\"@typescript-eslint/type-utils\").TypeOrValueSpecifier[];\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-dupe-class-members': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unexpected\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-duplicate-enum-values': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"duplicateValue\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-duplicate-type-constituents': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-duplicate-type-constituents\").MessageIds, import(\"./rules/no-duplicate-type-constituents\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-dynamic-delete': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"dynamicDelete\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-empty-function': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unexpected\", [{\n            allow?: string[];\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-empty-interface': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-empty-interface\").MessageIds, import(\"./rules/no-empty-interface\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-empty-object-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-empty-object-type\").MessageIds, import(\"./rules/no-empty-object-type\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-explicit-any': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-explicit-any\").MessageIds, import(\"./rules/no-explicit-any\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-extra-non-null-assertion': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noExtraNonNullAssertion\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-extraneous-class': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-extraneous-class\").MessageIds, import(\"./rules/no-extraneous-class\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-floating-promises': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-floating-promises\").MessageId, import(\"./rules/no-floating-promises\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-for-in-array': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"forInViolation\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-implied-eval': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noFunctionConstructor\" | \"noImpliedEvalError\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-import-type-side-effects': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"useTopLevelQualifier\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-inferrable-types': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noInferrableType\", import(\"./rules/no-inferrable-types\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-invalid-this': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unexpectedThis\", [({\n            capIsConstructor?: boolean;\n        } | undefined)?], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-invalid-void-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-invalid-void-type\").MessageIds, [import(\"./rules/no-invalid-void-type\").Options], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-loop-func': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unsafeRefs\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-loss-of-precision': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noLossOfPrecision\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-magic-numbers': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noMagic\", [{\n            detectObjects?: boolean;\n            enforceConst?: boolean;\n            ignore?: (number | string)[];\n            ignoreArrayIndexes?: boolean;\n            ignoreEnums?: boolean;\n            ignoreNumericLiteralTypes?: boolean;\n            ignoreReadonlyClassProperties?: boolean;\n            ignoreTypeIndexes?: boolean;\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-meaningless-void-operator': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"meaninglessVoidOperator\" | \"removeVoid\", import(\"./rules/no-meaningless-void-operator\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-misused-new': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"errorMessageClass\" | \"errorMessageInterface\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-misused-promises': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-misused-promises\").MessageId, import(\"./rules/no-misused-promises\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-misused-spread': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"addAwait\" | \"noArraySpreadInObject\" | \"noClassDeclarationSpreadInObject\" | \"noClassInstanceSpreadInObject\" | \"noFunctionSpreadInObject\" | \"noIterableSpreadInObject\" | \"noMapSpreadInObject\" | \"noPromiseSpreadInObject\" | \"noStringSpread\" | \"replaceMapSpreadInObject\", [{\n            allow?: import(\"@typescript-eslint/type-utils\").TypeOrValueSpecifier[];\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-mixed-enums': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"mixed\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-namespace': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"moduleSyntaxIsPreferred\", import(\"./rules/no-namespace\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-non-null-asserted-nullish-coalescing': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noNonNullAssertedNullishCoalescing\" | \"suggestRemovingNonNull\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-non-null-asserted-optional-chain': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"suggestRemovingNonNull\" | \"noNonNullOptionalChain\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-non-null-assertion': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-non-null-assertion\").MessageIds, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-redeclare': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-redeclare\").MessageIds, import(\"./rules/no-redeclare\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-redundant-type-constituents': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"overrides\" | \"errorTypeOverrides\" | \"literalOverridden\" | \"overridden\" | \"primitiveOverridden\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-require-imports': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noRequireImports\", import(\"./rules/no-require-imports\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-restricted-imports': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"everything\" | \"everythingWithCustomMessage\" | \"importName\" | \"importNameWithCustomMessage\" | \"path\" | \"pathWithCustomMessage\" | \"patterns\" | \"patternWithCustomMessage\", [import(\"eslint/lib/rules/no-restricted-imports\").ObjectOfPathsAndPatterns] | import(\"eslint/lib/rules/no-restricted-imports\").ArrayOfStringOrObject, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-restricted-types': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-restricted-types\").MessageIds, import(\"./rules/no-restricted-types\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-shadow': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-shadow\").MessageIds, import(\"./rules/no-shadow\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-this-alias': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-this-alias\").MessageIds, import(\"./rules/no-this-alias\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-type-alias': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-type-alias\").MessageIds, import(\"./rules/no-type-alias\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-boolean-literal-compare': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-unnecessary-boolean-literal-compare\").MessageIds, import(\"./rules/no-unnecessary-boolean-literal-compare\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-condition': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-unnecessary-condition\").MessageId, import(\"./rules/no-unnecessary-condition\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-parameter-property-assignment': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unnecessaryAssign\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-qualifier': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unnecessaryQualifier\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-template-expression': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noUnnecessaryTemplateExpression\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-type-arguments': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unnecessaryTypeParameter\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-type-assertion': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-unnecessary-type-assertion\").MessageIds, import(\"./rules/no-unnecessary-type-assertion\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-type-constraint': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"removeUnnecessaryConstraint\" | \"unnecessaryConstraint\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unnecessary-type-parameters': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"replaceUsagesWithConstraint\" | \"sole\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-argument': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-unsafe-argument\").MessageIds, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-assignment': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unsafeArraySpread\" | \"anyAssignment\" | \"anyAssignmentThis\" | \"unsafeArrayPattern\" | \"unsafeArrayPatternFromTuple\" | \"unsafeAssignment\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-call': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-unsafe-call\").MessageIds, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-declaration-merging': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unsafeMerging\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-enum-comparison': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"mismatchedCase\" | \"mismatchedCondition\" | \"replaceValueWithEnum\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-function-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"bannedFunctionType\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-member-access': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unsafeComputedMemberAccess\" | \"unsafeMemberExpression\" | \"unsafeThisMemberExpression\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-return': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unsafeReturn\" | \"unsafeReturnAssignment\" | \"unsafeReturnThis\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-type-assertion': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unsafeOfAnyTypeAssertion\" | \"unsafeToAnyTypeAssertion\" | \"unsafeToUnconstrainedTypeAssertion\" | \"unsafeTypeAssertion\" | \"unsafeTypeAssertionAssignableToConstraint\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unsafe-unary-minus': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"unaryMinus\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unused-expressions': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"expected\", [{\n            allowShortCircuit?: boolean;\n            allowTaggedTemplates?: boolean;\n            allowTernary?: boolean;\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-unused-vars': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/no-unused-vars\").MessageIds, import(\"./rules/no-unused-vars\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-use-before-define': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noUseBeforeDefine\", import(\"./rules/no-use-before-define\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-useless-constructor': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noUselessConstructor\" | \"removeConstructor\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-useless-empty-export': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"uselessExport\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-var-requires': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"noVarReqs\", import(\"./rules/no-var-requires\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'no-wrapper-object-types': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"bannedClassType\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'non-nullable-type-assertion-style': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferNonNullAssertion\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'only-throw-error': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/only-throw-error\").MessageIds, import(\"./rules/only-throw-error\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'parameter-properties': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/parameter-properties\").MessageIds, import(\"./rules/parameter-properties\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-as-const': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferConstAssertion\" | \"variableConstAssertion\" | \"variableSuggest\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-destructuring': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferDestructuring\", import(\"./rules/prefer-destructuring\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-enum-initializers': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/prefer-enum-initializers\").MessageIds, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-find': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferFind\" | \"preferFindSuggestion\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-for-of': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferForOf\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-function-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"functionTypeOverCallableType\" | \"unexpectedThisOnFunctionOnlyInterface\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-includes': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferIncludes\" | \"preferStringIncludes\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-literal-enum-member': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"notLiteral\" | \"notLiteralOrBitwiseExpression\", [{\n            allowBitwiseExpressions: boolean;\n        }], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-namespace-keyword': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"useNamespace\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-nullish-coalescing': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/prefer-nullish-coalescing\").MessageIds, import(\"./rules/prefer-nullish-coalescing\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-optional-chain': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/prefer-optional-chain-utils/PreferOptionalChainOptions\").PreferOptionalChainMessageIds, [import(\"./rules/prefer-optional-chain-utils/PreferOptionalChainOptions\").PreferOptionalChainOptions], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-promise-reject-errors': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"rejectAnError\", import(\"./rules/prefer-promise-reject-errors\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-readonly': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferReadonly\", import(\"./rules/prefer-readonly\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-readonly-parameter-types': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"shouldBeReadonly\", import(\"./rules/prefer-readonly-parameter-types\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-reduce-type-parameter': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferTypeParameter\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-regexp-exec': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"regExpExecOverStringMatch\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-return-this-type': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"useThisType\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-string-starts-ends-with': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/prefer-string-starts-ends-with\").MessageIds, import(\"./rules/prefer-string-starts-ends-with\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'prefer-ts-expect-error': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"preferExpectErrorComment\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'promise-function-async': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"missingAsync\", import(\"./rules/promise-function-async\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'related-getter-setter-pairs': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"mismatch\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'require-array-sort-compare': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"requireCompare\", import(\"./rules/require-array-sort-compare\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'require-await': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"missingAwait\" | \"removeAsync\", [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'restrict-plus-operands': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/restrict-plus-operands\").MessageIds, import(\"./rules/restrict-plus-operands\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'restrict-template-expressions': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"invalidType\", import(\"./rules/restrict-template-expressions\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'return-await': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"disallowedPromiseAwait\" | \"disallowedPromiseAwaitSuggestion\" | \"nonPromiseAwait\" | \"requiredPromiseAwait\" | \"requiredPromiseAwaitSuggestion\", [string], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'sort-type-constituents': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/sort-type-constituents\").MessageIds, import(\"./rules/sort-type-constituents\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'strict-boolean-expressions': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/strict-boolean-expressions\").MessageId, import(\"./rules/strict-boolean-expressions\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'switch-exhaustiveness-check': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/switch-exhaustiveness-check\").MessageIds, import(\"./rules/switch-exhaustiveness-check\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'triple-slash-reference': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"tripleSlashReference\", import(\"./rules/triple-slash-reference\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        typedef: import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/typedef\").MessageIds, import(\"./rules/typedef\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'unbound-method': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/unbound-method\").MessageIds, import(\"./rules/unbound-method\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'unified-signatures': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/unified-signatures\").MessageIds, import(\"./rules/unified-signatures\").Options, import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n        'use-unknown-in-catch-callback-variable': import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<import(\"./rules/use-unknown-in-catch-callback-variable\").MessageIds, [], import(\"../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\n    };\n};\nexport = _default;\n//# sourceMappingURL=index.d.ts.map"
        }
    ]
}