{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/getConstraintInfo.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type * as ts from 'typescript';\nexport interface ConstraintTypeInfoUnconstrained {\n    constraintType: undefined;\n    isTypeParameter: true;\n}\nexport interface ConstraintTypeInfoConstrained {\n    constraintType: ts.Type;\n    isTypeParameter: true;\n}\nexport interface ConstraintTypeInfoNonGeneric {\n    constraintType: ts.Type;\n    isTypeParameter: false;\n}\nexport type ConstraintTypeInfo = ConstraintTypeInfoConstrained | ConstraintTypeInfoNonGeneric | ConstraintTypeInfoUnconstrained;\n/**\n * Returns whether the type is a generic and what its constraint is.\n *\n * If the type is not a generic, `isTypeParameter` will be `false`, and\n * `constraintType` will be the same as the input type.\n *\n * If the type is a generic, and it is constrained, `isTypeParameter` will be\n * `true`, and `constraintType` will be the constraint type.\n *\n * If the type is a generic, but it is not constrained, `constraintType` will be\n * `undefined` (rather than an `unknown` type), due to https://github.com/microsoft/TypeScript/issues/60475\n *\n * Successor to {@link getConstrainedTypeAtLocation} due to https://github.com/typescript-eslint/typescript-eslint/issues/10438\n *\n * This is considered internal since it is unstable for now and may have breaking changes at any time.\n * Use at your own risk.\n *\n * @internal\n *\n */\nexport declare function getConstraintInfo(checker: ts.TypeChecker, type: ts.Type): ConstraintTypeInfo;\n//# sourceMappingURL=getConstraintInfo.d.ts.map"
        }
    ]
}