{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/assertionFunctionUtils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findTruthinessAssertedArgument = findTruthinessAssertedArgument;\nexports.findTypeGuardAssertedArgument = findTypeGuardAssertedArgument;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Inspect a call expression to see if it's a call to an assertion function.\n * If it is, return the node of the argument that is asserted.\n */\nfunction findTruthinessAssertedArgument(services, node) {\n    // If the call looks like `assert(expr1, expr2, ...c, d, e, f)`, then we can\n    // only care if `expr1` or `expr2` is asserted, since anything that happens\n    // within or after a spread argument is out of scope to reason about.\n    const checkableArguments = [];\n    for (const argument of node.arguments) {\n        if (argument.type === utils_1.AST_NODE_TYPES.SpreadElement) {\n            break;\n        }\n        checkableArguments.push(argument);\n    }\n    // nothing to do\n    if (checkableArguments.length === 0) {\n        return undefined;\n    }\n    const checker = services.program.getTypeChecker();\n    const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n    const signature = checker.getResolvedSignature(tsNode);\n    if (signature == null) {\n        return undefined;\n    }\n    const firstTypePredicateResult = checker.getTypePredicateOfSignature(signature);\n    if (firstTypePredicateResult == null) {\n        return undefined;\n    }\n    const { kind, parameterIndex, type } = firstTypePredicateResult;\n    if (!(kind === ts.TypePredicateKind.AssertsIdentifier && type == null)) {\n        return undefined;\n    }\n    return checkableArguments.at(parameterIndex);\n}\n/**\n * Inspect a call expression to see if it's a call to an assertion function.\n * If it is, return the node of the argument that is asserted and other useful info.\n */\nfunction findTypeGuardAssertedArgument(services, node) {\n    // If the call looks like `assert(expr1, expr2, ...c, d, e, f)`, then we can\n    // only care if `expr1` or `expr2` is asserted, since anything that happens\n    // within or after a spread argument is out of scope to reason about.\n    const checkableArguments = [];\n    for (const argument of node.arguments) {\n        if (argument.type === utils_1.AST_NODE_TYPES.SpreadElement) {\n            break;\n        }\n        checkableArguments.push(argument);\n    }\n    // nothing to do\n    if (checkableArguments.length === 0) {\n        return undefined;\n    }\n    const checker = services.program.getTypeChecker();\n    const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n    const callSignature = checker.getResolvedSignature(tsNode);\n    if (callSignature == null) {\n        return undefined;\n    }\n    const typePredicateInfo = checker.getTypePredicateOfSignature(callSignature);\n    if (typePredicateInfo == null) {\n        return undefined;\n    }\n    const { kind, parameterIndex, type } = typePredicateInfo;\n    if (!((kind === ts.TypePredicateKind.AssertsIdentifier ||\n        kind === ts.TypePredicateKind.Identifier) &&\n        type != null)) {\n        return undefined;\n    }\n    if (parameterIndex >= checkableArguments.length) {\n        return undefined;\n    }\n    return {\n        argument: checkableArguments[parameterIndex],\n        asserts: kind === ts.TypePredicateKind.AssertsIdentifier,\n        type,\n    };\n}\n"
        }
    ]
}