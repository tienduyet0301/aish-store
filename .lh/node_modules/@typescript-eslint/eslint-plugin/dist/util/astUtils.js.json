{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/astUtils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNameLocationInGlobalDirectiveComment = getNameLocationInGlobalDirectiveComment;\nexports.forEachReturnStatement = forEachReturnStatement;\nconst ts = __importStar(require(\"typescript\"));\nconst escapeRegExp_1 = require(\"./escapeRegExp\");\n// deeply re-export, for convenience\n__exportStar(require(\"@typescript-eslint/utils/ast-utils\"), exports);\n// The following is copied from `eslint`'s source code since it doesn't exist in eslint@5.\n// https://github.com/eslint/eslint/blob/145aec1ab9052fbca96a44d04927c595951b1536/lib/rules/utils/ast-utils.js#L1751-L1779\n// Could be export { getNameLocationInGlobalDirectiveComment } from 'eslint/lib/rules/utils/ast-utils'\n/**\n * Get the `loc` object of a given name in a `/*globals` directive comment.\n * @param sourceCode The source code to convert index to loc.\n * @param comment The `/*globals` directive comment which include the name.\n * @param name The name to find.\n * @returns The `loc` object.\n */\nfunction getNameLocationInGlobalDirectiveComment(sourceCode, comment, name) {\n    const namePattern = new RegExp(`[\\\\s,]${(0, escapeRegExp_1.escapeRegExp)(name)}(?:$|[\\\\s,:])`, 'gu');\n    // To ignore the first text \"global\".\n    namePattern.lastIndex = comment.value.indexOf('global') + 6;\n    // Search a given variable name.\n    const match = namePattern.exec(comment.value);\n    // Convert the index to loc.\n    const start = sourceCode.getLocFromIndex(comment.range[0] + '/*'.length + (match ? match.index + 1 : 0));\n    const end = {\n        column: start.column + (match ? name.length : 1),\n        line: start.line,\n    };\n    return { end, start };\n}\n// Copied from typescript https://github.com/microsoft/TypeScript/blob/42b0e3c4630c129ca39ce0df9fff5f0d1b4dd348/src/compiler/utilities.ts#L1335\n// Warning: This has the same semantics as the forEach family of functions,\n//          in that traversal terminates in the event that 'visitor' supplies a truthy value.\nfunction forEachReturnStatement(body, visitor) {\n    return traverse(body);\n    function traverse(node) {\n        switch (node.kind) {\n            case ts.SyntaxKind.ReturnStatement:\n                return visitor(node);\n            case ts.SyntaxKind.CaseBlock:\n            case ts.SyntaxKind.Block:\n            case ts.SyntaxKind.IfStatement:\n            case ts.SyntaxKind.DoStatement:\n            case ts.SyntaxKind.WhileStatement:\n            case ts.SyntaxKind.ForStatement:\n            case ts.SyntaxKind.ForInStatement:\n            case ts.SyntaxKind.ForOfStatement:\n            case ts.SyntaxKind.WithStatement:\n            case ts.SyntaxKind.SwitchStatement:\n            case ts.SyntaxKind.CaseClause:\n            case ts.SyntaxKind.DefaultClause:\n            case ts.SyntaxKind.LabeledStatement:\n            case ts.SyntaxKind.TryStatement:\n            case ts.SyntaxKind.CatchClause:\n                return ts.forEachChild(node, traverse);\n        }\n        return undefined;\n    }\n}\n"
        }
    ]
}