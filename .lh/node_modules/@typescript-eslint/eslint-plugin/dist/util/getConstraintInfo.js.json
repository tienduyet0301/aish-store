{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/getConstraintInfo.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getConstraintInfo = getConstraintInfo;\nconst tsutils = __importStar(require(\"ts-api-utils\"));\n/**\n * Returns whether the type is a generic and what its constraint is.\n *\n * If the type is not a generic, `isTypeParameter` will be `false`, and\n * `constraintType` will be the same as the input type.\n *\n * If the type is a generic, and it is constrained, `isTypeParameter` will be\n * `true`, and `constraintType` will be the constraint type.\n *\n * If the type is a generic, but it is not constrained, `constraintType` will be\n * `undefined` (rather than an `unknown` type), due to https://github.com/microsoft/TypeScript/issues/60475\n *\n * Successor to {@link getConstrainedTypeAtLocation} due to https://github.com/typescript-eslint/typescript-eslint/issues/10438\n *\n * This is considered internal since it is unstable for now and may have breaking changes at any time.\n * Use at your own risk.\n *\n * @internal\n *\n */\nfunction getConstraintInfo(checker, type) {\n    if (tsutils.isTypeParameter(type)) {\n        const constraintType = checker.getBaseConstraintOfType(type);\n        return {\n            constraintType,\n            isTypeParameter: true,\n        };\n    }\n    return {\n        constraintType: type,\n        isTypeParameter: false,\n    };\n}\n"
        }
    ]
}