{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/getFunctionHeadLoc.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESLint, TSESTree } from '@typescript-eslint/utils';\ntype FunctionNode = TSESTree.ArrowFunctionExpression | TSESTree.FunctionDeclaration | TSESTree.FunctionExpression;\n/**\n * Gets the location of the given function node for reporting.\n *\n * - `function foo() {}`\n *    ^^^^^^^^^^^^\n * - `(function foo() {})`\n *     ^^^^^^^^^^^^\n * - `(function() {})`\n *     ^^^^^^^^\n * - `function* foo() {}`\n *    ^^^^^^^^^^^^^\n * - `(function* foo() {})`\n *     ^^^^^^^^^^^^^\n * - `(function*() {})`\n *     ^^^^^^^^^\n * - `() => {}`\n *       ^^\n * - `async () => {}`\n *             ^^\n * - `({ foo: function foo() {} })`\n *       ^^^^^^^^^^^^^^^^^\n * - `({ foo: function() {} })`\n *       ^^^^^^^^^^^^^\n * - `({ ['foo']: function() {} })`\n *       ^^^^^^^^^^^^^^^^^\n * - `({ [foo]: function() {} })`\n *       ^^^^^^^^^^^^^^^\n * - `({ foo() {} })`\n *       ^^^\n * - `({ foo: function* foo() {} })`\n *       ^^^^^^^^^^^^^^^^^^\n * - `({ foo: function*() {} })`\n *       ^^^^^^^^^^^^^^\n * - `({ ['foo']: function*() {} })`\n *       ^^^^^^^^^^^^^^^^^^\n * - `({ [foo]: function*() {} })`\n *       ^^^^^^^^^^^^^^^^\n * - `({ *foo() {} })`\n *       ^^^^\n * - `({ foo: async function foo() {} })`\n *       ^^^^^^^^^^^^^^^^^^^^^^^\n * - `({ foo: async function() {} })`\n *       ^^^^^^^^^^^^^^^^^^^\n * - `({ ['foo']: async function() {} })`\n *       ^^^^^^^^^^^^^^^^^^^^^^^\n * - `({ [foo]: async function() {} })`\n *       ^^^^^^^^^^^^^^^^^^^^^\n * - `({ async foo() {} })`\n *       ^^^^^^^^^\n * - `({ get foo() {} })`\n *       ^^^^^^^\n * - `({ set foo(a) {} })`\n *       ^^^^^^^\n * - `class A { constructor() {} }`\n *              ^^^^^^^^^^^\n * - `class A { foo() {} }`\n *              ^^^\n * - `class A { *foo() {} }`\n *              ^^^^\n * - `class A { async foo() {} }`\n *              ^^^^^^^^^\n * - `class A { ['foo']() {} }`\n *              ^^^^^^^\n * - `class A { *['foo']() {} }`\n *              ^^^^^^^^\n * - `class A { async ['foo']() {} }`\n *              ^^^^^^^^^^^^^\n * - `class A { [foo]() {} }`\n *              ^^^^^\n * - `class A { *[foo]() {} }`\n *              ^^^^^^\n * - `class A { async [foo]() {} }`\n *              ^^^^^^^^^^^\n * - `class A { get foo() {} }`\n *              ^^^^^^^\n * - `class A { set foo(a) {} }`\n *              ^^^^^^^\n * - `class A { static foo() {} }`\n *              ^^^^^^^^^^\n * - `class A { static *foo() {} }`\n *              ^^^^^^^^^^^\n * - `class A { static async foo() {} }`\n *              ^^^^^^^^^^^^^^^^\n * - `class A { static get foo() {} }`\n *              ^^^^^^^^^^^^^^\n * - `class A { static set foo(a) {} }`\n *              ^^^^^^^^^^^^^^\n * - `class A { foo = function() {} }`\n *              ^^^^^^^^^^^^^^\n * - `class A { static foo = function() {} }`\n *              ^^^^^^^^^^^^^^^^^^^^^\n * - `class A { foo = (a, b) => {} }`\n *              ^^^^^^\n * @param node The function node to get.\n * @param sourceCode The source code object to get tokens.\n * @returns The location of the function node for reporting.\n */\nexport declare function getFunctionHeadLoc(node: FunctionNode, sourceCode: TSESLint.SourceCode): TSESTree.SourceLocation;\nexport {};\n//# sourceMappingURL=getFunctionHeadLoc.d.ts.map"
        }
    ]
}