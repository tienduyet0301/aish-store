{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/hasOverloadSignatures.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891977644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasOverloadSignatures = hasOverloadSignatures;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst misc_1 = require(\"./misc\");\n/**\n * @return `true` if the function or method node has overload signatures.\n */\nfunction hasOverloadSignatures(node, context) {\n    // `export default function () {}`\n    if (node.parent.type === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration) {\n        return node.parent.parent.body.some(member => {\n            return (member.type === utils_1.AST_NODE_TYPES.ExportDefaultDeclaration &&\n                member.declaration.type === utils_1.AST_NODE_TYPES.TSDeclareFunction);\n        });\n    }\n    // `export function f() {}`\n    if (node.parent.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration) {\n        return node.parent.parent.body.some(member => {\n            return (member.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration &&\n                member.declaration?.type === utils_1.AST_NODE_TYPES.TSDeclareFunction &&\n                getFunctionDeclarationName(member.declaration, context) ===\n                    getFunctionDeclarationName(node, context));\n        });\n    }\n    // either:\n    // - `function f() {}`\n    // - `class T { foo() {} }`\n    const nodeKey = getFunctionDeclarationName(node, context);\n    return node.parent.body.some(member => {\n        return ((member.type === utils_1.AST_NODE_TYPES.TSDeclareFunction ||\n            (member.type === utils_1.AST_NODE_TYPES.MethodDefinition &&\n                member.value.body == null)) &&\n            nodeKey === getFunctionDeclarationName(member, context));\n    });\n}\nfunction getFunctionDeclarationName(node, context) {\n    if (node.type === utils_1.AST_NODE_TYPES.FunctionDeclaration ||\n        node.type === utils_1.AST_NODE_TYPES.TSDeclareFunction) {\n        // For a `FunctionDeclaration` or `TSDeclareFunction` this may be `null` if\n        // and only if the parent is an `ExportDefaultDeclaration`.\n        //\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return node.id.name;\n    }\n    return (0, misc_1.getStaticMemberAccessValue)(node, context);\n}\n"
        }
    ]
}