{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/explicitReturnTypeUtils.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESLint, TSESTree } from '@typescript-eslint/utils';\nexport type FunctionExpression = TSESTree.ArrowFunctionExpression | TSESTree.FunctionExpression;\nexport type FunctionNode = FunctionExpression | TSESTree.FunctionDeclaration;\nexport interface FunctionInfo<T extends FunctionNode> {\n    node: T;\n    returns: TSESTree.ReturnStatement[];\n}\n/**\n * Checks if a function belongs to:\n * ```\n * () => () => ...\n * () => function () { ... }\n * () => { return () => ... }\n * () => { return function () { ... } }\n * function fn() { return () => ... }\n * function fn() { return function() { ... } }\n * ```\n */\nexport declare function doesImmediatelyReturnFunctionExpression({ node, returns, }: FunctionInfo<FunctionNode>): boolean;\ninterface Options {\n    allowDirectConstAssertionInArrowFunctions?: boolean;\n    allowExpressions?: boolean;\n    allowHigherOrderFunctions?: boolean;\n    allowTypedFunctionExpressions?: boolean;\n}\n/**\n * True when the provided function expression is typed.\n */\nexport declare function isTypedFunctionExpression(node: FunctionExpression, options: Options): boolean;\n/**\n * Check whether the function expression return type is either typed or valid\n * with the provided options.\n */\nexport declare function isValidFunctionExpressionReturnType(node: FunctionExpression, options: Options): boolean;\n/**\n * Checks if a function declaration/expression has a return type.\n */\nexport declare function checkFunctionReturnType({ node, returns }: FunctionInfo<FunctionNode>, options: Options, sourceCode: TSESLint.SourceCode, report: (loc: TSESTree.SourceLocation) => void): void;\n/**\n * Checks if a function declaration/expression has a return type.\n */\nexport declare function checkFunctionExpressionReturnType(info: FunctionInfo<FunctionExpression>, options: Options, sourceCode: TSESLint.SourceCode, report: (loc: TSESTree.SourceLocation) => void): void;\n/**\n * Check whether any ancestor of the provided function has a valid return type.\n */\nexport declare function ancestorHasReturnType(node: FunctionNode): boolean;\nexport {};\n//# sourceMappingURL=explicitReturnTypeUtils.d.ts.map"
        }
    ]
}