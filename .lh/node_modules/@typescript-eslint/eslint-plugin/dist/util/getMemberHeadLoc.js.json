{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/getMemberHeadLoc.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891976944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMemberHeadLoc = getMemberHeadLoc;\nexports.getParameterPropertyHeadLoc = getParameterPropertyHeadLoc;\nconst eslint_utils_1 = require(\"@typescript-eslint/utils/eslint-utils\");\n/**\n * Generates report loc suitable for reporting on how a class member is\n * declared, rather than how it's implemented.\n *\n * ```ts\n * class A {\n *   abstract method(): void;\n *   ~~~~~~~~~~~~~~~\n *\n *   concreteMethod(): void {\n *   ~~~~~~~~~~~~~~\n *      // code\n *   }\n *\n *   abstract private property?: string;\n *   ~~~~~~~~~~~~~~~~~~~~~~~~~\n *\n *   @decorator override concreteProperty = 'value';\n *              ~~~~~~~~~~~~~~~~~~~~~~~~~\n * }\n * ```\n */\nfunction getMemberHeadLoc(sourceCode, node) {\n    let start;\n    if (node.decorators.length === 0) {\n        start = node.loc.start;\n    }\n    else {\n        const lastDecorator = node.decorators[node.decorators.length - 1];\n        const nextToken = (0, eslint_utils_1.nullThrows)(sourceCode.getTokenAfter(lastDecorator), eslint_utils_1.NullThrowsReasons.MissingToken('token', 'last decorator'));\n        start = nextToken.loc.start;\n    }\n    let end;\n    if (!node.computed) {\n        end = node.key.loc.end;\n    }\n    else {\n        const closingBracket = (0, eslint_utils_1.nullThrows)(sourceCode.getTokenAfter(node.key, token => token.value === ']'), eslint_utils_1.NullThrowsReasons.MissingToken(']', node.type));\n        end = closingBracket.loc.end;\n    }\n    return {\n        end: structuredClone(end),\n        start: structuredClone(start),\n    };\n}\n/**\n * Generates report loc suitable for reporting on how a parameter property is\n * declared.\n *\n * ```ts\n * class A {\n *   constructor(private property: string = 'value') {\n *               ~~~~~~~~~~~~~~~~\n *   }\n * ```\n */\nfunction getParameterPropertyHeadLoc(sourceCode, node, nodeName) {\n    // Parameter properties have a weirdly different AST structure\n    // than other class members.\n    let start;\n    if (node.decorators.length === 0) {\n        start = structuredClone(node.loc.start);\n    }\n    else {\n        const lastDecorator = node.decorators[node.decorators.length - 1];\n        const nextToken = (0, eslint_utils_1.nullThrows)(sourceCode.getTokenAfter(lastDecorator), eslint_utils_1.NullThrowsReasons.MissingToken('token', 'last decorator'));\n        start = structuredClone(nextToken.loc.start);\n    }\n    const end = sourceCode.getLocFromIndex(node.parameter.range[0] + nodeName.length);\n    return {\n        end,\n        start,\n    };\n}\n"
        }
    ]
}