{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/getWrappingFixer.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891977502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESLint, TSESTree } from '@typescript-eslint/utils';\ninterface WrappingFixerParams {\n    /**\n     * Descendant of `node` we want to preserve.\n     * Use this to replace some code with another.\n     * By default it's the node we are modifying (so nothing is removed).\n     * You can pass multiple nodes as an array.\n     */\n    innerNode?: TSESTree.Node | TSESTree.Node[];\n    /** The node we want to modify. */\n    node: TSESTree.Node;\n    /** Source code. */\n    sourceCode: Readonly<TSESLint.SourceCode>;\n    /**\n     * The function which gets the code of the `innerNode` and returns some code around it.\n     * Receives multiple arguments if there are multiple innerNodes.\n     * E.g. ``code => `${code} != null` ``\n     */\n    wrap: (...code: string[]) => string;\n}\n/**\n * Wraps node with some code. Adds parenthesis as necessary.\n * @returns Fixer which adds the specified code and parens if necessary.\n */\nexport declare function getWrappingFixer(params: WrappingFixerParams): TSESLint.ReportFixFunction;\n/**\n * If the node to be moved and the destination node require parentheses, include parentheses in the node to be moved.\n * @param sourceCode Source code of current file\n * @param nodeToMove Nodes that need to be moved\n * @param destinationNode Final destination node with nodeToMove\n * @returns If parentheses are required, code for the nodeToMove node is returned with parentheses at both ends of the code.\n */\nexport declare function getMovedNodeCode(params: {\n    destinationNode: TSESTree.Node;\n    nodeToMove: TSESTree.Node;\n    sourceCode: Readonly<TSESLint.SourceCode>;\n}): string;\n/**\n * Check if a node will always have the same precedence if it's parent changes.\n */\nexport declare function isStrongPrecedenceNode(innerNode: TSESTree.Node): boolean;\nexport {};\n//# sourceMappingURL=getWrappingFixer.d.ts.map"
        }
    ]
}