{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/util/getStaticStringValue.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891977154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\n// adapted from https://github.com/eslint/eslint/blob/5bdaae205c3a0089ea338b382df59e21d5b06436/lib/rules/utils/ast-utils.js#L191-L230\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getStaticStringValue = getStaticStringValue;\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst isNullLiteral_1 = require(\"./isNullLiteral\");\n/**\n * Returns the result of the string conversion applied to the evaluated value of the given expression node,\n * if it can be determined statically.\n *\n * This function returns a `string` value for all `Literal` nodes and simple `TemplateLiteral` nodes only.\n * In all other cases, this function returns `null`.\n * @param node Expression node.\n * @returns String value if it can be determined. Otherwise, `null`.\n */\nfunction getStaticStringValue(node) {\n    switch (node.type) {\n        case utils_1.AST_NODE_TYPES.Literal:\n            // eslint-disable-next-line eqeqeq, @typescript-eslint/internal/eqeq-nullish -- intentional strict comparison for literal value\n            if (node.value === null) {\n                if ((0, isNullLiteral_1.isNullLiteral)(node)) {\n                    return String(node.value); // \"null\"\n                }\n                if ('regex' in node) {\n                    return `/${node.regex.pattern}/${node.regex.flags}`;\n                }\n                if ('bigint' in node) {\n                    return node.bigint;\n                }\n                // Otherwise, this is an unknown literal. The function will return null.\n            }\n            else {\n                return String(node.value);\n            }\n            break;\n        case utils_1.AST_NODE_TYPES.TemplateLiteral:\n            if (node.expressions.length === 0 && node.quasis.length === 1) {\n                return node.quasis[0].value.cooked;\n            }\n            break;\n        // no default\n    }\n    return null;\n}\n"
        }
    ]
}