{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/consistent-type-assertions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891960583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst getWrappedCode_1 = require(\"../util/getWrappedCode\");\nexports.default = (0, util_1.createRule)({\n    name: 'consistent-type-assertions',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Enforce consistent usage of type assertions',\n            recommended: 'stylistic',\n        },\n        fixable: 'code',\n        hasSuggestions: true,\n        messages: {\n            'angle-bracket': \"Use '<{{cast}}>' instead of 'as {{cast}}'.\",\n            as: \"Use 'as {{cast}}' instead of '<{{cast}}>'.\",\n            never: 'Do not use any type assertions.',\n            replaceArrayTypeAssertionWithAnnotation: 'Use const x: {{cast}} = [ ... ] instead.',\n            replaceArrayTypeAssertionWithSatisfies: 'Use const x = [ ... ] satisfies {{cast}} instead.',\n            replaceObjectTypeAssertionWithAnnotation: 'Use const x: {{cast}} = { ... } instead.',\n            replaceObjectTypeAssertionWithSatisfies: 'Use const x = { ... } satisfies {{cast}} instead.',\n            unexpectedArrayTypeAssertion: 'Always prefer const x: T[] = [ ... ].',\n            unexpectedObjectTypeAssertion: 'Always prefer const x: T = { ... }.',\n        },\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: 'object',\n                        additionalProperties: false,\n                        properties: {\n                            assertionStyle: {\n                                type: 'string',\n                                description: 'The expected assertion style to enforce.',\n                                enum: ['never'],\n                            },\n                        },\n                        required: ['assertionStyle'],\n                    },\n                    {\n                        type: 'object',\n                        additionalProperties: false,\n                        properties: {\n                            arrayLiteralTypeAssertions: {\n                                type: 'string',\n                                description: 'Whether to always prefer type declarations for array literals used as variable initializers, rather than type assertions.',\n                                enum: ['allow', 'allow-as-parameter', 'never'],\n                            },\n                            assertionStyle: {\n                                type: 'string',\n                                description: 'The expected assertion style to enforce.',\n                                enum: ['as', 'angle-bracket'],\n                            },\n                            objectLiteralTypeAssertions: {\n                                type: 'string',\n                                description: 'Whether to always prefer type declarations for object literals used as variable initializers, rather than type assertions.',\n                                enum: ['allow', 'allow-as-parameter', 'never'],\n                            },\n                        },\n                    },\n                ],\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            arrayLiteralTypeAssertions: 'allow',\n            assertionStyle: 'as',\n            objectLiteralTypeAssertions: 'allow',\n        },\n    ],\n    create(context, [options]) {\n        function isConst(node) {\n            if (node.type !== utils_1.AST_NODE_TYPES.TSTypeReference) {\n                return false;\n            }\n            return (node.typeName.type === utils_1.AST_NODE_TYPES.Identifier &&\n                node.typeName.name === 'const');\n        }\n        function reportIncorrectAssertionType(node) {\n            const messageId = options.assertionStyle;\n            // If this node is `as const`, then don't report an error.\n            if (isConst(node.typeAnnotation) && messageId === 'never') {\n                return;\n            }\n            context.report({\n                node,\n                messageId,\n                data: messageId !== 'never'\n                    ? { cast: context.sourceCode.getText(node.typeAnnotation) }\n                    : {},\n                fix: messageId === 'as'\n                    ? (fixer) => {\n                        // lazily access parserServices to avoid crashing on non TS files (#9860)\n                        const tsNode = (0, util_1.getParserServices)(context, true).esTreeNodeToTSNodeMap.get(node);\n                        const expressionCode = context.sourceCode.getText(node.expression);\n                        const typeAnnotationCode = context.sourceCode.getText(node.typeAnnotation);\n                        const asPrecedence = (0, util_1.getOperatorPrecedence)(ts.SyntaxKind.AsExpression, ts.SyntaxKind.Unknown);\n                        const parentPrecedence = (0, util_1.getOperatorPrecedence)(tsNode.parent.kind, ts.isBinaryExpression(tsNode.parent)\n                            ? tsNode.parent.operatorToken.kind\n                            : ts.SyntaxKind.Unknown, ts.isNewExpression(tsNode.parent)\n                            ? tsNode.parent.arguments != null &&\n                                tsNode.parent.arguments.length > 0\n                            : undefined);\n                        const expressionPrecedence = (0, util_1.getOperatorPrecedenceForNode)(node.expression);\n                        const expressionCodeWrapped = (0, getWrappedCode_1.getWrappedCode)(expressionCode, expressionPrecedence, asPrecedence);\n                        const text = `${expressionCodeWrapped} as ${typeAnnotationCode}`;\n                        return fixer.replaceText(node, (0, util_1.isParenthesized)(node, context.sourceCode)\n                            ? text\n                            : (0, getWrappedCode_1.getWrappedCode)(text, asPrecedence, parentPrecedence));\n                    }\n                    : undefined,\n            });\n        }\n        function checkType(node) {\n            switch (node.type) {\n                case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n                case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n                    return false;\n                case utils_1.AST_NODE_TYPES.TSTypeReference:\n                    return (\n                    // Ignore `as const` and `<const>`\n                    !isConst(node) ||\n                        // Allow qualified names which have dots between identifiers, `Foo.Bar`\n                        node.typeName.type === utils_1.AST_NODE_TYPES.TSQualifiedName);\n                default:\n                    return true;\n            }\n        }\n        function getSuggestions(node, annotationMessageId, satisfiesMessageId) {\n            const suggestions = [];\n            if (node.parent.type === utils_1.AST_NODE_TYPES.VariableDeclarator &&\n                !node.parent.id.typeAnnotation) {\n                const { parent } = node;\n                suggestions.push({\n                    messageId: annotationMessageId,\n                    data: { cast: context.sourceCode.getText(node.typeAnnotation) },\n                    fix: fixer => [\n                        fixer.insertTextAfter(parent.id, `: ${context.sourceCode.getText(node.typeAnnotation)}`),\n                        fixer.replaceText(node, (0, util_1.getTextWithParentheses)(context.sourceCode, node.expression)),\n                    ],\n                });\n            }\n            suggestions.push({\n                messageId: satisfiesMessageId,\n                data: { cast: context.sourceCode.getText(node.typeAnnotation) },\n                fix: fixer => [\n                    fixer.replaceText(node, (0, util_1.getTextWithParentheses)(context.sourceCode, node.expression)),\n                    fixer.insertTextAfter(node, ` satisfies ${context.sourceCode.getText(node.typeAnnotation)}`),\n                ],\n            });\n            return suggestions;\n        }\n        function isAsParameter(node) {\n            return (node.parent.type === utils_1.AST_NODE_TYPES.NewExpression ||\n                node.parent.type === utils_1.AST_NODE_TYPES.CallExpression ||\n                node.parent.type === utils_1.AST_NODE_TYPES.ThrowStatement ||\n                node.parent.type === utils_1.AST_NODE_TYPES.AssignmentPattern ||\n                node.parent.type === utils_1.AST_NODE_TYPES.JSXExpressionContainer ||\n                (node.parent.type === utils_1.AST_NODE_TYPES.TemplateLiteral &&\n                    node.parent.parent.type === utils_1.AST_NODE_TYPES.TaggedTemplateExpression));\n        }\n        function checkExpressionForObjectAssertion(node) {\n            if (options.assertionStyle === 'never' ||\n                options.objectLiteralTypeAssertions === 'allow' ||\n                node.expression.type !== utils_1.AST_NODE_TYPES.ObjectExpression) {\n                return;\n            }\n            if (options.objectLiteralTypeAssertions === 'allow-as-parameter' &&\n                isAsParameter(node)) {\n                return;\n            }\n            if (checkType(node.typeAnnotation)) {\n                const suggest = getSuggestions(node, 'replaceObjectTypeAssertionWithAnnotation', 'replaceObjectTypeAssertionWithSatisfies');\n                context.report({\n                    node,\n                    messageId: 'unexpectedObjectTypeAssertion',\n                    suggest,\n                });\n            }\n        }\n        function checkExpressionForArrayAssertion(node) {\n            if (options.assertionStyle === 'never' ||\n                options.arrayLiteralTypeAssertions === 'allow' ||\n                node.expression.type !== utils_1.AST_NODE_TYPES.ArrayExpression) {\n                return;\n            }\n            if (options.arrayLiteralTypeAssertions === 'allow-as-parameter' &&\n                isAsParameter(node)) {\n                return;\n            }\n            if (checkType(node.typeAnnotation)) {\n                const suggest = getSuggestions(node, 'replaceArrayTypeAssertionWithAnnotation', 'replaceArrayTypeAssertionWithSatisfies');\n                context.report({\n                    node,\n                    messageId: 'unexpectedArrayTypeAssertion',\n                    suggest,\n                });\n            }\n        }\n        return {\n            TSAsExpression(node) {\n                if (options.assertionStyle !== 'as') {\n                    reportIncorrectAssertionType(node);\n                    return;\n                }\n                checkExpressionForObjectAssertion(node);\n                checkExpressionForArrayAssertion(node);\n            },\n            TSTypeAssertion(node) {\n                if (options.assertionStyle !== 'angle-bracket') {\n                    reportIncorrectAssertionType(node);\n                    return;\n                }\n                checkExpressionForObjectAssertion(node);\n                checkExpressionForArrayAssertion(node);\n            },\n        };\n    },\n});\n"
        }
    ]
}