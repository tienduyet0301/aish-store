{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-array-constructor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891962928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-array-constructor',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow generic `Array` constructors',\n            extendsBaseRule: true,\n            recommended: 'recommended',\n        },\n        fixable: 'code',\n        messages: {\n            useLiteral: 'The array literal notation [] is preferable.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        /**\n         * Disallow construction of dense arrays using the Array constructor\n         * @param node node to evaluate\n         */\n        function check(node) {\n            if (node.arguments.length !== 1 &&\n                node.callee.type === utils_1.AST_NODE_TYPES.Identifier &&\n                node.callee.name === 'Array' &&\n                !node.typeArguments &&\n                !(0, util_1.isOptionalCallExpression)(node)) {\n                context.report({\n                    node,\n                    messageId: 'useLiteral',\n                    fix(fixer) {\n                        if (node.arguments.length === 0) {\n                            return fixer.replaceText(node, '[]');\n                        }\n                        const fullText = context.sourceCode.getText(node);\n                        const preambleLength = node.callee.range[1] - node.range[0];\n                        return fixer.replaceText(node, `[${fullText.slice(preambleLength + 1, -1)}]`);\n                    },\n                });\n            }\n        }\n        return {\n            CallExpression: check,\n            NewExpression: check,\n        };\n    },\n});\n"
        }
    ]
}