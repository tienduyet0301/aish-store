{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-useless-constructor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-useless-constructor');\n/**\n * Check if method with accessibility is not useless\n */\nfunction checkAccessibility(node) {\n    switch (node.accessibility) {\n        case 'protected':\n        case 'private':\n            return false;\n        case 'public':\n            if (node.parent.parent.superClass) {\n                return false;\n            }\n            break;\n    }\n    return true;\n}\n/**\n * Check if method is not useless due to typescript parameter properties and decorators\n */\nfunction checkParams(node) {\n    return !node.value.params.some(param => param.type === utils_1.AST_NODE_TYPES.TSParameterProperty ||\n        param.decorators.length);\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-useless-constructor',\n    meta: {\n        type: 'problem',\n        // defaultOptions, -- base rule does not use defaultOptions\n        docs: {\n            description: 'Disallow unnecessary constructors',\n            extendsBaseRule: true,\n            recommended: 'strict',\n        },\n        hasSuggestions: baseRule.meta.hasSuggestions,\n        messages: baseRule.meta.messages,\n        schema: baseRule.meta.schema,\n    },\n    defaultOptions: [],\n    create(context) {\n        const rules = baseRule.create(context);\n        return {\n            MethodDefinition(node) {\n                if (node.value.type === utils_1.AST_NODE_TYPES.FunctionExpression &&\n                    checkAccessibility(node) &&\n                    checkParams(node)) {\n                    rules.MethodDefinition(node);\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}