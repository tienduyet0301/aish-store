{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-qualifier.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891969039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unnecessary-qualifier',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow unnecessary namespace qualifiers',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            unnecessaryQualifier: \"Qualifier is unnecessary since '{{ name }}' is in scope.\",\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const namespacesInScope = [];\n        let currentFailedNamespaceExpression = null;\n        const services = (0, util_1.getParserServices)(context);\n        const esTreeNodeToTSNodeMap = services.esTreeNodeToTSNodeMap;\n        const checker = services.program.getTypeChecker();\n        function tryGetAliasedSymbol(symbol, checker) {\n            return tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.Alias)\n                ? checker.getAliasedSymbol(symbol)\n                : null;\n        }\n        function symbolIsNamespaceInScope(symbol) {\n            const symbolDeclarations = symbol.getDeclarations() ?? [];\n            if (symbolDeclarations.some(decl => namespacesInScope.some(ns => ns === decl))) {\n                return true;\n            }\n            const alias = tryGetAliasedSymbol(symbol, checker);\n            return alias != null && symbolIsNamespaceInScope(alias);\n        }\n        function getSymbolInScope(node, flags, name) {\n            const scope = checker.getSymbolsInScope(node, flags);\n            return scope.find(scopeSymbol => scopeSymbol.name === name);\n        }\n        function symbolsAreEqual(accessed, inScope) {\n            return accessed === checker.getExportSymbolOfSymbol(inScope);\n        }\n        function qualifierIsUnnecessary(qualifier, name) {\n            const namespaceSymbol = services.getSymbolAtLocation(qualifier);\n            if (namespaceSymbol == null ||\n                !symbolIsNamespaceInScope(namespaceSymbol)) {\n                return false;\n            }\n            const accessedSymbol = services.getSymbolAtLocation(name);\n            if (accessedSymbol == null) {\n                return false;\n            }\n            // If the symbol in scope is different, the qualifier is necessary.\n            const tsQualifier = esTreeNodeToTSNodeMap.get(qualifier);\n            const fromScope = getSymbolInScope(tsQualifier, accessedSymbol.flags, context.sourceCode.getText(name));\n            return !!fromScope && symbolsAreEqual(accessedSymbol, fromScope);\n        }\n        function visitNamespaceAccess(node, qualifier, name) {\n            // Only look for nested qualifier errors if we didn't already fail on the outer qualifier.\n            if (!currentFailedNamespaceExpression &&\n                qualifierIsUnnecessary(qualifier, name)) {\n                currentFailedNamespaceExpression = node;\n                context.report({\n                    node: qualifier,\n                    messageId: 'unnecessaryQualifier',\n                    data: {\n                        name: context.sourceCode.getText(name),\n                    },\n                    fix(fixer) {\n                        return fixer.removeRange([qualifier.range[0], name.range[0]]);\n                    },\n                });\n            }\n        }\n        function enterDeclaration(node) {\n            namespacesInScope.push(esTreeNodeToTSNodeMap.get(node));\n        }\n        function exitDeclaration() {\n            namespacesInScope.pop();\n        }\n        function resetCurrentNamespaceExpression(node) {\n            if (node === currentFailedNamespaceExpression) {\n                currentFailedNamespaceExpression = null;\n            }\n        }\n        function isPropertyAccessExpression(node) {\n            return node.type === utils_1.AST_NODE_TYPES.MemberExpression && !node.computed;\n        }\n        function isEntityNameExpression(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.Identifier ||\n                (isPropertyAccessExpression(node) &&\n                    isEntityNameExpression(node.object)));\n        }\n        return {\n            'ExportNamedDeclaration[declaration.type=\"TSEnumDeclaration\"]': enterDeclaration,\n            'ExportNamedDeclaration[declaration.type=\"TSEnumDeclaration\"]:exit': exitDeclaration,\n            'ExportNamedDeclaration[declaration.type=\"TSModuleDeclaration\"]': enterDeclaration,\n            'ExportNamedDeclaration[declaration.type=\"TSModuleDeclaration\"]:exit': exitDeclaration,\n            'MemberExpression:exit': resetCurrentNamespaceExpression,\n            'MemberExpression[computed=false]'(node) {\n                const property = node.property;\n                if (isEntityNameExpression(node.object)) {\n                    visitNamespaceAccess(node, node.object, property);\n                }\n            },\n            TSEnumDeclaration: enterDeclaration,\n            'TSEnumDeclaration:exit': exitDeclaration,\n            'TSModuleDeclaration:exit': exitDeclaration,\n            'TSModuleDeclaration > TSModuleBlock'(node) {\n                enterDeclaration(node.parent);\n            },\n            TSQualifiedName(node) {\n                visitNamespaceAccess(node, node.left, node.right);\n            },\n            'TSQualifiedName:exit': resetCurrentNamespaceExpression,\n        };\n    },\n});\n"
        }
    ]
}