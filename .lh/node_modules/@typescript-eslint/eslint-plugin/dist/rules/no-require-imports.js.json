{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-require-imports.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891968178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util = __importStar(require(\"../util\"));\nexports.default = util.createRule({\n    name: 'no-require-imports',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow invocation of `require()`',\n            recommended: 'recommended',\n        },\n        messages: {\n            noRequireImports: 'A `require()` style import is forbidden.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allow: {\n                        type: 'array',\n                        description: 'Patterns of import paths to allow requiring from.',\n                        items: { type: 'string' },\n                    },\n                    allowAsImport: {\n                        type: 'boolean',\n                        description: 'Allows `require` statements in import declarations.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [{ allow: [], allowAsImport: false }],\n    create(context, options) {\n        const allowAsImport = options[0].allowAsImport;\n        const allowPatterns = options[0].allow?.map(pattern => new RegExp(pattern, 'u'));\n        function isImportPathAllowed(importPath) {\n            return allowPatterns?.some(pattern => importPath.match(pattern));\n        }\n        function isStringOrTemplateLiteral(node) {\n            return ((node.type === utils_1.AST_NODE_TYPES.Literal &&\n                typeof node.value === 'string') ||\n                node.type === utils_1.AST_NODE_TYPES.TemplateLiteral);\n        }\n        return {\n            'CallExpression[callee.name=\"require\"]'(node) {\n                if (node.arguments[0] && isStringOrTemplateLiteral(node.arguments[0])) {\n                    const argValue = util.getStaticStringValue(node.arguments[0]);\n                    if (typeof argValue === 'string' && isImportPathAllowed(argValue)) {\n                        return;\n                    }\n                }\n                const variable = utils_1.ASTUtils.findVariable(context.sourceCode.getScope(node), 'require');\n                // ignore non-global require usage as it's something user-land custom instead\n                // of the commonjs standard\n                if (!variable?.identifiers.length) {\n                    context.report({\n                        node,\n                        messageId: 'noRequireImports',\n                    });\n                }\n            },\n            TSExternalModuleReference(node) {\n                if (isStringOrTemplateLiteral(node.expression)) {\n                    const argValue = util.getStaticStringValue(node.expression);\n                    if (typeof argValue === 'string' && isImportPathAllowed(argValue)) {\n                        return;\n                    }\n                }\n                if (allowAsImport &&\n                    node.parent.type === utils_1.AST_NODE_TYPES.TSImportEqualsDeclaration) {\n                    return;\n                }\n                context.report({\n                    node,\n                    messageId: 'noRequireImports',\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}