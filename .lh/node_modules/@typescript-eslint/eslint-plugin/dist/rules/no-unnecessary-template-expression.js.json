{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-template-expression.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891969139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst rangeToLoc_1 = require(\"../util/rangeToLoc\");\nconst evenNumOfBackslashesRegExp = /(?<!(?:[^\\\\]|^)(?:\\\\\\\\)*\\\\)/;\n// '\\\\$' <- false\n// '\\\\\\\\$' <- true\n// '\\\\\\\\\\\\$' <- false\nfunction endsWithUnescapedDollarSign(str) {\n    return new RegExp(`${String(evenNumOfBackslashesRegExp.source)}\\\\$$`).test(str);\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-unnecessary-template-expression',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow unnecessary template expressions',\n            recommended: 'strict',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            noUnnecessaryTemplateExpression: 'Template literal expression is unnecessary and can be simplified.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        function isStringLike(type) {\n            return (0, util_1.isTypeFlagSet)(type, ts.TypeFlags.StringLike);\n        }\n        function isUnderlyingTypeString(type) {\n            if (type.isUnion()) {\n                return type.types.every(isStringLike);\n            }\n            if (type.isIntersection()) {\n                return type.types.some(isStringLike);\n            }\n            return isStringLike(type);\n        }\n        function isEnumMemberType(type) {\n            return tsutils.typeParts(type).some(t => {\n                const symbol = t.getSymbol();\n                return !!(symbol?.valueDeclaration && ts.isEnumMember(symbol.valueDeclaration));\n            });\n        }\n        const isLiteral = (0, util_1.isNodeOfType)(utils_1.TSESTree.AST_NODE_TYPES.Literal);\n        function isTemplateLiteral(node) {\n            return node.type === utils_1.AST_NODE_TYPES.TemplateLiteral;\n        }\n        function isInfinityIdentifier(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.Identifier && node.name === 'Infinity');\n        }\n        function isNaNIdentifier(node) {\n            return node.type === utils_1.AST_NODE_TYPES.Identifier && node.name === 'NaN';\n        }\n        function isFixableIdentifier(node) {\n            return ((0, util_1.isUndefinedIdentifier)(node) ||\n                isInfinityIdentifier(node) ||\n                isNaNIdentifier(node));\n        }\n        function hasCommentsBetweenQuasi(startQuasi, endQuasi) {\n            const startToken = (0, util_1.nullThrows)(context.sourceCode.getTokenByRangeStart(startQuasi.range[0]), util_1.NullThrowsReasons.MissingToken('`${', 'opening template literal'));\n            const endToken = (0, util_1.nullThrows)(context.sourceCode.getTokenByRangeStart(endQuasi.range[0]), util_1.NullThrowsReasons.MissingToken('}', 'closing template literal'));\n            return context.sourceCode.commentsExistBetween(startToken, endToken);\n        }\n        function isTrivialInterpolation(node) {\n            return (node.quasis.length === 2 &&\n                node.quasis[0].value.raw === '' &&\n                node.quasis[1].value.raw === '');\n        }\n        function getInterpolations(node) {\n            if (node.type === utils_1.AST_NODE_TYPES.TemplateLiteral) {\n                return node.expressions;\n            }\n            return node.types;\n        }\n        function getInterpolationInfos(node) {\n            return getInterpolations(node).map((interpolation, index) => ({\n                interpolation,\n                nextQuasi: node.quasis[index + 1],\n                prevQuasi: node.quasis[index],\n            }));\n        }\n        function getLiteral(node) {\n            const maybeLiteral = node.type === utils_1.AST_NODE_TYPES.TSLiteralType ? node.literal : node;\n            return isLiteral(maybeLiteral) ? maybeLiteral : null;\n        }\n        function getTemplateLiteral(node) {\n            const maybeTemplateLiteral = node.type === utils_1.AST_NODE_TYPES.TSLiteralType ? node.literal : node;\n            return isTemplateLiteral(maybeTemplateLiteral)\n                ? maybeTemplateLiteral\n                : null;\n        }\n        function reportSingleInterpolation(node) {\n            const interpolations = getInterpolations(node);\n            context.report({\n                loc: (0, rangeToLoc_1.rangeToLoc)(context.sourceCode, [\n                    interpolations[0].range[0] - 2,\n                    interpolations[0].range[1] + 1,\n                ]),\n                messageId: 'noUnnecessaryTemplateExpression',\n                fix(fixer) {\n                    const wrappingCode = (0, util_1.getMovedNodeCode)({\n                        destinationNode: node,\n                        nodeToMove: interpolations[0],\n                        sourceCode: context.sourceCode,\n                    });\n                    return fixer.replaceText(node, wrappingCode);\n                },\n            });\n        }\n        function isUnncessaryValueInterpolation({ interpolation, nextQuasi, prevQuasi, }) {\n            if (hasCommentsBetweenQuasi(prevQuasi, nextQuasi)) {\n                return false;\n            }\n            if (isFixableIdentifier(interpolation)) {\n                return true;\n            }\n            if (isLiteral(interpolation)) {\n                // allow trailing whitespace literal\n                if (startsWithNewLine(nextQuasi.value.raw)) {\n                    return !(typeof interpolation.value === 'string' &&\n                        isWhitespace(interpolation.value));\n                }\n                return true;\n            }\n            if (isTemplateLiteral(interpolation)) {\n                // allow trailing whitespace literal\n                if (startsWithNewLine(nextQuasi.value.raw)) {\n                    return !(interpolation.quasis.length === 1 &&\n                        isWhitespace(interpolation.quasis[0].value.raw));\n                }\n                return true;\n            }\n            return false;\n        }\n        function isUnncessaryTypeInterpolation({ interpolation, nextQuasi, prevQuasi, }) {\n            if (hasCommentsBetweenQuasi(prevQuasi, nextQuasi)) {\n                return false;\n            }\n            const literal = getLiteral(interpolation);\n            if (literal) {\n                // allow trailing whitespace literal\n                if (startsWithNewLine(nextQuasi.value.raw)) {\n                    return !(typeof literal.value === 'string' && isWhitespace(literal.value));\n                }\n                return true;\n            }\n            if (interpolation.type === utils_1.AST_NODE_TYPES.TSNullKeyword ||\n                interpolation.type === utils_1.AST_NODE_TYPES.TSUndefinedKeyword) {\n                return true;\n            }\n            const templateLiteral = getTemplateLiteral(interpolation);\n            if (templateLiteral) {\n                // allow trailing whitespace literal\n                if (startsWithNewLine(nextQuasi.value.raw)) {\n                    return !(templateLiteral.quasis.length === 1 &&\n                        isWhitespace(templateLiteral.quasis[0].value.raw));\n                }\n                return true;\n            }\n            return false;\n        }\n        function getReportDescriptors(infos) {\n            let nextCharacterIsOpeningCurlyBrace = false;\n            const reportDescriptors = [];\n            const reversedInfos = [...infos].reverse();\n            for (const { interpolation, nextQuasi, prevQuasi } of reversedInfos) {\n                const fixers = [];\n                if (nextQuasi.value.raw !== '') {\n                    nextCharacterIsOpeningCurlyBrace =\n                        nextQuasi.value.raw.startsWith('{');\n                }\n                const literal = getLiteral(interpolation);\n                const templateLiteral = getTemplateLiteral(interpolation);\n                if (literal) {\n                    let escapedValue = (typeof literal.value === 'string'\n                        ? // The value is already a string, so we're removing quotes:\n                            // \"'va`lue'\" -> \"va`lue\"\n                            literal.raw.slice(1, -1)\n                        : // The value may be one of number | bigint | boolean | RegExp | null.\n                            // In regular expressions, we escape every backslash\n                            String(literal.value).replaceAll('\\\\', '\\\\\\\\'))\n                        // The string or RegExp may contain ` or ${.\n                        // We want both of these to be escaped in the final template expression.\n                        //\n                        // A pair of backslashes means \"escaped backslash\", so backslashes\n                        // from this pair won't escape ` or ${. Therefore, to escape these\n                        // sequences in the resulting template expression, we need to escape\n                        // all sequences that are preceded by an even number of backslashes.\n                        //\n                        // This RegExp does the following transformations:\n                        // \\` -> \\`\n                        // \\\\` -> \\\\\\`\n                        // \\${ -> \\${\n                        // \\\\${ -> \\\\\\${\n                        .replaceAll(new RegExp(`${String(evenNumOfBackslashesRegExp.source)}(\\`|\\\\\\${)`, 'g'), '\\\\$1');\n                    // `...${'...$'}{...`\n                    //           ^^^^\n                    if (nextCharacterIsOpeningCurlyBrace &&\n                        endsWithUnescapedDollarSign(escapedValue)) {\n                        escapedValue = escapedValue.replaceAll(/\\$$/g, '\\\\$');\n                    }\n                    if (escapedValue.length !== 0) {\n                        nextCharacterIsOpeningCurlyBrace = escapedValue.startsWith('{');\n                    }\n                    fixers.push(fixer => [fixer.replaceText(literal, escapedValue)]);\n                }\n                else if (templateLiteral) {\n                    // Since we iterate from the last expression to the first,\n                    // a subsequent expression can tell the current expression\n                    // that it starts with {.\n                    //\n                    // `... ${`... $`}${'{...'} ...`\n                    //             ^     ^ subsequent expression starts with {\n                    //             current expression ends with a dollar sign,\n                    //             so '$' + '{' === '${' (bad news for us).\n                    //             Let's escape the dollar sign at the end.\n                    if (nextCharacterIsOpeningCurlyBrace &&\n                        endsWithUnescapedDollarSign(templateLiteral.quasis[templateLiteral.quasis.length - 1].value\n                            .raw)) {\n                        fixers.push(fixer => [\n                            fixer.replaceTextRange([templateLiteral.range[1] - 2, templateLiteral.range[1] - 2], '\\\\'),\n                        ]);\n                    }\n                    if (templateLiteral.quasis.length === 1 &&\n                        templateLiteral.quasis[0].value.raw.length !== 0) {\n                        nextCharacterIsOpeningCurlyBrace =\n                            templateLiteral.quasis[0].value.raw.startsWith('{');\n                    }\n                    // Remove the beginning and trailing backtick characters.\n                    fixers.push(fixer => [\n                        fixer.removeRange([\n                            templateLiteral.range[0],\n                            templateLiteral.range[0] + 1,\n                        ]),\n                        fixer.removeRange([\n                            templateLiteral.range[1] - 1,\n                            templateLiteral.range[1],\n                        ]),\n                    ]);\n                }\n                else {\n                    nextCharacterIsOpeningCurlyBrace = false;\n                }\n                // `... $${'{...'} ...`\n                //      ^^^^^\n                if (nextCharacterIsOpeningCurlyBrace &&\n                    endsWithUnescapedDollarSign(prevQuasi.value.raw)) {\n                    fixers.push(fixer => [\n                        fixer.replaceTextRange([prevQuasi.range[1] - 3, prevQuasi.range[1] - 2], '\\\\$'),\n                    ]);\n                }\n                const warnLocStart = prevQuasi.range[1] - 2;\n                const warnLocEnd = nextQuasi.range[0] + 1;\n                reportDescriptors.push({\n                    loc: (0, rangeToLoc_1.rangeToLoc)(context.sourceCode, [warnLocStart, warnLocEnd]),\n                    messageId: 'noUnnecessaryTemplateExpression',\n                    fix(fixer) {\n                        return [\n                            // Remove the quasis' parts that are related to the current expression.\n                            fixer.removeRange([warnLocStart, interpolation.range[0]]),\n                            fixer.removeRange([interpolation.range[1], warnLocEnd]),\n                            ...fixers.flatMap(cb => cb(fixer)),\n                        ];\n                    },\n                });\n            }\n            return reportDescriptors;\n        }\n        return {\n            TemplateLiteral(node) {\n                if (node.parent.type === utils_1.AST_NODE_TYPES.TaggedTemplateExpression) {\n                    return;\n                }\n                if (isTrivialInterpolation(node) &&\n                    !hasCommentsBetweenQuasi(node.quasis[0], node.quasis[1])) {\n                    const { constraintType } = (0, util_1.getConstraintInfo)(checker, services.getTypeAtLocation(node.expressions[0]));\n                    if (constraintType && isUnderlyingTypeString(constraintType)) {\n                        reportSingleInterpolation(node);\n                        return;\n                    }\n                }\n                const infos = getInterpolationInfos(node).filter(isUnncessaryValueInterpolation);\n                for (const reportDescriptor of getReportDescriptors(infos)) {\n                    context.report(reportDescriptor);\n                }\n            },\n            TSTemplateLiteralType(node) {\n                if (isTrivialInterpolation(node) &&\n                    !hasCommentsBetweenQuasi(node.quasis[0], node.quasis[1])) {\n                    const { constraintType, isTypeParameter } = (0, util_1.getConstraintInfo)(checker, services.getTypeAtLocation(node.types[0]));\n                    if (constraintType &&\n                        !isTypeParameter &&\n                        isUnderlyingTypeString(constraintType) &&\n                        !isEnumMemberType(constraintType)) {\n                        reportSingleInterpolation(node);\n                        return;\n                    }\n                }\n                const infos = getInterpolationInfos(node).filter(isUnncessaryTypeInterpolation);\n                for (const reportDescriptor of getReportDescriptors(infos)) {\n                    context.report(reportDescriptor);\n                }\n            },\n        };\n    },\n});\nfunction isWhitespace(x) {\n    // allow empty string too since we went to allow\n    // `      ${''}\n    // `;\n    //\n    // in addition to\n    // `${'        '}\n    // `;\n    //\n    return /^\\s*$/.test(x);\n}\nfunction startsWithNewLine(x) {\n    return x.startsWith('\\n') || x.startsWith('\\r\\n');\n}\n"
        }
    ]
}