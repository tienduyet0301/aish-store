{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unsafe-type-assertion.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891970546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unsafe-type-assertion',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow type assertions that narrow a type',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            unsafeOfAnyTypeAssertion: 'Unsafe assertion from {{type}} detected: consider using type guards or a safer assertion.',\n            unsafeToAnyTypeAssertion: 'Unsafe assertion to {{type}} detected: consider using a more specific type to ensure safety.',\n            unsafeToUnconstrainedTypeAssertion: \"Unsafe type assertion: '{{type}}' could be instantiated with an arbitrary type which could be unrelated to the original type.\",\n            unsafeTypeAssertion: \"Unsafe type assertion: type '{{type}}' is more narrow than the original type.\",\n            unsafeTypeAssertionAssignableToConstraint: \"Unsafe type assertion: the original type is assignable to the constraint of type '{{type}}', but '{{type}}' could be instantiated with a different subtype of its constraint.\",\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        function getAnyTypeName(type) {\n            return tsutils.isIntrinsicErrorType(type) ? 'error typed' : '`any`';\n        }\n        function isObjectLiteralType(type) {\n            return (tsutils.isObjectType(type) &&\n                tsutils.isObjectFlagSet(type, ts.ObjectFlags.ObjectLiteral));\n        }\n        function checkExpression(node) {\n            const expressionType = services.getTypeAtLocation(node.expression);\n            const assertedType = services.getTypeAtLocation(node.typeAnnotation);\n            if (expressionType === assertedType) {\n                return;\n            }\n            // handle cases when asserting unknown ==> any.\n            if ((0, util_1.isTypeAnyType)(assertedType) && (0, util_1.isTypeUnknownType)(expressionType)) {\n                context.report({\n                    node,\n                    messageId: 'unsafeToAnyTypeAssertion',\n                    data: {\n                        type: '`any`',\n                    },\n                });\n                return;\n            }\n            const unsafeExpressionAny = (0, util_1.isUnsafeAssignment)(expressionType, assertedType, checker, node.expression);\n            if (unsafeExpressionAny) {\n                context.report({\n                    node,\n                    messageId: 'unsafeOfAnyTypeAssertion',\n                    data: {\n                        type: getAnyTypeName(unsafeExpressionAny.sender),\n                    },\n                });\n                return;\n            }\n            const unsafeAssertedAny = (0, util_1.isUnsafeAssignment)(assertedType, expressionType, checker, node.typeAnnotation);\n            if (unsafeAssertedAny) {\n                context.report({\n                    node,\n                    messageId: 'unsafeToAnyTypeAssertion',\n                    data: {\n                        type: getAnyTypeName(unsafeAssertedAny.sender),\n                    },\n                });\n                return;\n            }\n            // Use the widened type in case of an object literal so `isTypeAssignableTo()`\n            // won't fail on excess property check.\n            const expressionWidenedType = isObjectLiteralType(expressionType)\n                ? checker.getWidenedType(expressionType)\n                : expressionType;\n            const isAssertionSafe = checker.isTypeAssignableTo(expressionWidenedType, assertedType);\n            if (isAssertionSafe) {\n                return;\n            }\n            // Produce a more specific error message when targeting a type parameter\n            if (tsutils.isTypeParameter(assertedType)) {\n                const assertedTypeConstraint = checker.getBaseConstraintOfType(assertedType);\n                if (!assertedTypeConstraint) {\n                    // asserting to an unconstrained type parameter is unsafe\n                    context.report({\n                        node,\n                        messageId: 'unsafeToUnconstrainedTypeAssertion',\n                        data: {\n                            type: checker.typeToString(assertedType),\n                        },\n                    });\n                    return;\n                }\n                // special case message if the original type is assignable to the\n                // constraint of the target type parameter\n                const isAssignableToConstraint = checker.isTypeAssignableTo(expressionWidenedType, assertedTypeConstraint);\n                if (isAssignableToConstraint) {\n                    context.report({\n                        node,\n                        messageId: 'unsafeTypeAssertionAssignableToConstraint',\n                        data: {\n                            type: checker.typeToString(assertedType),\n                        },\n                    });\n                    return;\n                }\n            }\n            // General error message\n            context.report({\n                node,\n                messageId: 'unsafeTypeAssertion',\n                data: {\n                    type: checker.typeToString(assertedType),\n                },\n            });\n        }\n        return {\n            'TSAsExpression, TSTypeAssertion'(node) {\n                checkExpression(node);\n            },\n        };\n    },\n});\n"
        }
    ]
}