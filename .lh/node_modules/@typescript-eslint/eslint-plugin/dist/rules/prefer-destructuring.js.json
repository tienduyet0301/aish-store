{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-destructuring.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('prefer-destructuring');\nconst destructuringTypeConfig = {\n    type: 'object',\n    additionalProperties: false,\n    properties: {\n        array: {\n            type: 'boolean',\n        },\n        object: {\n            type: 'boolean',\n        },\n    },\n};\nconst schema = [\n    {\n        oneOf: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    AssignmentExpression: destructuringTypeConfig,\n                    VariableDeclarator: destructuringTypeConfig,\n                },\n            },\n            destructuringTypeConfig,\n        ],\n    },\n    {\n        type: 'object',\n        properties: {\n            enforceForDeclarationWithTypeAnnotation: {\n                type: 'boolean',\n                description: 'Whether to enforce destructuring on variable declarations with type annotations.',\n            },\n            enforceForRenamedProperties: {\n                type: 'boolean',\n                description: 'Whether to enforce destructuring that use a different variable name than the property name.',\n            },\n        },\n    },\n];\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-destructuring',\n    meta: {\n        type: 'suggestion',\n        // defaultOptions, -- base rule does not use defaultOptions\n        docs: {\n            description: 'Require destructuring from arrays and/or objects',\n            extendsBaseRule: true,\n            requiresTypeChecking: true,\n        },\n        fixable: baseRule.meta.fixable,\n        hasSuggestions: baseRule.meta.hasSuggestions,\n        messages: baseRule.meta.messages,\n        schema,\n    },\n    defaultOptions: [\n        {\n            AssignmentExpression: {\n                array: true,\n                object: true,\n            },\n            VariableDeclarator: {\n                array: true,\n                object: true,\n            },\n        },\n        {},\n    ],\n    create(context, [enabledTypes, options]) {\n        const { enforceForDeclarationWithTypeAnnotation = false, enforceForRenamedProperties = false, } = options;\n        const { esTreeNodeToTSNodeMap, program } = (0, util_1.getParserServices)(context);\n        const typeChecker = program.getTypeChecker();\n        const baseRules = baseRule.create(context);\n        let baseRulesWithoutFixCache = null;\n        return {\n            AssignmentExpression(node) {\n                if (node.operator !== '=') {\n                    return;\n                }\n                performCheck(node.left, node.right, node);\n            },\n            VariableDeclarator(node) {\n                performCheck(node.id, node.init, node);\n            },\n        };\n        function performCheck(leftNode, rightNode, reportNode) {\n            const rules = leftNode.type === utils_1.AST_NODE_TYPES.Identifier &&\n                leftNode.typeAnnotation == null\n                ? baseRules\n                : baseRulesWithoutFix();\n            if ((leftNode.type === utils_1.AST_NODE_TYPES.ArrayPattern ||\n                leftNode.type === utils_1.AST_NODE_TYPES.Identifier ||\n                leftNode.type === utils_1.AST_NODE_TYPES.ObjectPattern) &&\n                leftNode.typeAnnotation != null &&\n                !enforceForDeclarationWithTypeAnnotation) {\n                return;\n            }\n            if (rightNode != null &&\n                isArrayLiteralIntegerIndexAccess(rightNode) &&\n                rightNode.object.type !== utils_1.AST_NODE_TYPES.Super) {\n                const tsObj = esTreeNodeToTSNodeMap.get(rightNode.object);\n                const objType = typeChecker.getTypeAtLocation(tsObj);\n                if (!isTypeAnyOrIterableType(objType, typeChecker)) {\n                    if (!enforceForRenamedProperties ||\n                        !getNormalizedEnabledType(reportNode.type, 'object')) {\n                        return;\n                    }\n                    context.report({\n                        node: reportNode,\n                        messageId: 'preferDestructuring',\n                        data: { type: 'object' },\n                    });\n                    return;\n                }\n            }\n            if (reportNode.type === utils_1.AST_NODE_TYPES.AssignmentExpression) {\n                rules.AssignmentExpression(reportNode);\n            }\n            else {\n                rules.VariableDeclarator(reportNode);\n            }\n        }\n        function getNormalizedEnabledType(nodeType, destructuringType) {\n            if ('object' in enabledTypes || 'array' in enabledTypes) {\n                return enabledTypes[destructuringType];\n            }\n            return enabledTypes[nodeType][destructuringType];\n        }\n        function baseRulesWithoutFix() {\n            baseRulesWithoutFixCache ??= baseRule.create(noFixContext(context));\n            return baseRulesWithoutFixCache;\n        }\n    },\n});\nfunction noFixContext(context) {\n    const customContext = {\n        report: (descriptor) => {\n            context.report({\n                ...descriptor,\n                fix: undefined,\n            });\n        },\n    };\n    // we can't directly proxy `context` because its `report` property is non-configurable\n    // and non-writable. So we proxy `customContext` and redirect all\n    // property access to the original context except for `report`\n    return new Proxy(customContext, {\n        get(target, path, receiver) {\n            if (path !== 'report') {\n                return Reflect.get(context, path, receiver);\n            }\n            return Reflect.get(target, path, receiver);\n        },\n    });\n}\nfunction isTypeAnyOrIterableType(type, typeChecker) {\n    if ((0, util_1.isTypeAnyType)(type)) {\n        return true;\n    }\n    if (!type.isUnion()) {\n        const iterator = tsutils.getWellKnownSymbolPropertyOfType(type, 'iterator', typeChecker);\n        return iterator != null;\n    }\n    return type.types.every(t => isTypeAnyOrIterableType(t, typeChecker));\n}\nfunction isArrayLiteralIntegerIndexAccess(node) {\n    if (node.type !== utils_1.AST_NODE_TYPES.MemberExpression) {\n        return false;\n    }\n    if (node.property.type !== utils_1.AST_NODE_TYPES.Literal) {\n        return false;\n    }\n    return Number.isInteger(node.property.value);\n}\n"
        }
    ]
}