{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-namespace-keyword.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891972564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-namespace-keyword',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules',\n            recommended: 'recommended',\n        },\n        fixable: 'code',\n        messages: {\n            useNamespace: \"Use 'namespace' instead of 'module' to declare custom TypeScript modules.\",\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        return {\n            TSModuleDeclaration(node) {\n                // Do nothing if the name is a string.\n                if (node.id.type === utils_1.AST_NODE_TYPES.Literal) {\n                    return;\n                }\n                // Get tokens of the declaration header.\n                const moduleType = context.sourceCode.getTokenBefore(node.id);\n                if (moduleType &&\n                    moduleType.type === utils_1.AST_TOKEN_TYPES.Identifier &&\n                    moduleType.value === 'module') {\n                    context.report({\n                        node,\n                        messageId: 'useNamespace',\n                        fix(fixer) {\n                            return fixer.replaceText(moduleType, 'namespace');\n                        },\n                    });\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}