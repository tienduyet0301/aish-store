{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-empty-interface.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891964293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst scope_manager_1 = require(\"@typescript-eslint/scope-manager\");\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-empty-interface',\n    meta: {\n        type: 'suggestion',\n        deprecated: true,\n        docs: {\n            description: 'Disallow the declaration of empty interfaces',\n        },\n        fixable: 'code',\n        hasSuggestions: true,\n        messages: {\n            noEmpty: 'An empty interface is equivalent to `{}`.',\n            noEmptyWithSuper: 'An interface declaring no members is equivalent to its supertype.',\n        },\n        replacedBy: ['@typescript-eslint/no-empty-object-type'],\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowSingleExtends: {\n                        type: 'boolean',\n                        description: 'Whether to allow empty interfaces that extend a single other interface.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allowSingleExtends: false,\n        },\n    ],\n    create(context, [{ allowSingleExtends }]) {\n        return {\n            TSInterfaceDeclaration(node) {\n                if (node.body.body.length !== 0) {\n                    // interface contains members --> Nothing to report\n                    return;\n                }\n                const extend = node.extends;\n                if (extend.length === 0) {\n                    context.report({\n                        node: node.id,\n                        messageId: 'noEmpty',\n                    });\n                }\n                else if (extend.length === 1 &&\n                    // interface extends exactly 1 interface --> Report depending on rule setting\n                    !allowSingleExtends) {\n                    const fix = (fixer) => {\n                        let typeParam = '';\n                        if (node.typeParameters) {\n                            typeParam = context.sourceCode.getText(node.typeParameters);\n                        }\n                        return fixer.replaceText(node, `type ${context.sourceCode.getText(node.id)}${typeParam} = ${context.sourceCode.getText(extend[0])}`);\n                    };\n                    const scope = context.sourceCode.getScope(node);\n                    const mergedWithClassDeclaration = scope.set\n                        .get(node.id.name)\n                        ?.defs.some(def => def.node.type === utils_1.AST_NODE_TYPES.ClassDeclaration);\n                    const isInAmbientDeclaration = !!((0, util_1.isDefinitionFile)(context.filename) &&\n                        scope.type === scope_manager_1.ScopeType.tsModule &&\n                        scope.block.declare);\n                    const useAutoFix = !(isInAmbientDeclaration || mergedWithClassDeclaration);\n                    context.report({\n                        node: node.id,\n                        messageId: 'noEmptyWithSuper',\n                        ...(useAutoFix\n                            ? { fix }\n                            : !mergedWithClassDeclaration\n                                ? {\n                                    suggest: [\n                                        {\n                                            messageId: 'noEmptyWithSuper',\n                                            fix,\n                                        },\n                                    ],\n                                }\n                                : null),\n                    });\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}