{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-misused-promises.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891966794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nfunction parseChecksVoidReturn(checksVoidReturn) {\n    switch (checksVoidReturn) {\n        case false:\n            return false;\n        case true:\n        case undefined:\n            return {\n                arguments: true,\n                attributes: true,\n                inheritedMethods: true,\n                properties: true,\n                returns: true,\n                variables: true,\n            };\n        default:\n            return {\n                arguments: checksVoidReturn.arguments ?? true,\n                attributes: checksVoidReturn.attributes ?? true,\n                inheritedMethods: checksVoidReturn.inheritedMethods ?? true,\n                properties: checksVoidReturn.properties ?? true,\n                returns: checksVoidReturn.returns ?? true,\n                variables: checksVoidReturn.variables ?? true,\n            };\n    }\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-misused-promises',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow Promises in places not designed to handle them',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            conditional: 'Expected non-Promise value in a boolean conditional.',\n            predicate: 'Expected a non-Promise value to be returned.',\n            spread: 'Expected a non-Promise value to be spreaded in an object.',\n            voidReturnArgument: 'Promise returned in function argument where a void return was expected.',\n            voidReturnAttribute: 'Promise-returning function provided to attribute where a void return was expected.',\n            voidReturnInheritedMethod: \"Promise-returning method provided where a void return was expected by extended/implemented type '{{ heritageTypeName }}'.\",\n            voidReturnProperty: 'Promise-returning function provided to property where a void return was expected.',\n            voidReturnReturnValue: 'Promise-returning function provided to return value where a void return was expected.',\n            voidReturnVariable: 'Promise-returning function provided to variable where a void return was expected.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    checksConditionals: {\n                        type: 'boolean',\n                        description: 'Whether to warn when a Promise is provided to conditional statements.',\n                    },\n                    checksSpreads: {\n                        type: 'boolean',\n                        description: 'Whether to warn when `...` spreading a `Promise`.',\n                    },\n                    checksVoidReturn: {\n                        description: 'Whether to warn when a Promise is returned from a function typed as returning `void`.',\n                        oneOf: [\n                            {\n                                type: 'boolean',\n                                description: 'Whether to disable checking all asynchronous functions.',\n                            },\n                            {\n                                type: 'object',\n                                additionalProperties: false,\n                                description: 'Which forms of functions may have checking disabled.',\n                                properties: {\n                                    arguments: {\n                                        type: 'boolean',\n                                        description: 'Disables checking an asynchronous function passed as argument where the parameter type expects a function that returns `void`.',\n                                    },\n                                    attributes: {\n                                        type: 'boolean',\n                                        description: 'Disables checking an asynchronous function passed as a JSX attribute expected to be a function that returns `void`.',\n                                    },\n                                    inheritedMethods: {\n                                        type: 'boolean',\n                                        description: 'Disables checking an asynchronous method in a type that extends or implements another type expecting that method to return `void`.',\n                                    },\n                                    properties: {\n                                        type: 'boolean',\n                                        description: 'Disables checking an asynchronous function passed as an object property expected to be a function that returns `void`.',\n                                    },\n                                    returns: {\n                                        type: 'boolean',\n                                        description: 'Disables checking an asynchronous function returned in a function whose return type is a function that returns `void`.',\n                                    },\n                                    variables: {\n                                        type: 'boolean',\n                                        description: 'Disables checking an asynchronous function used as a variable whose return type is a function that returns `void`.',\n                                    },\n                                },\n                            },\n                        ],\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            checksConditionals: true,\n            checksSpreads: true,\n            checksVoidReturn: true,\n        },\n    ],\n    create(context, [{ checksConditionals, checksSpreads, checksVoidReturn }]) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        const checkedNodes = new Set();\n        const conditionalChecks = {\n            'CallExpression > MemberExpression': checkArrayPredicates,\n            ConditionalExpression: checkTestConditional,\n            DoWhileStatement: checkTestConditional,\n            ForStatement: checkTestConditional,\n            IfStatement: checkTestConditional,\n            LogicalExpression: checkConditional,\n            'UnaryExpression[operator=\"!\"]'(node) {\n                checkConditional(node.argument, true);\n            },\n            WhileStatement: checkTestConditional,\n        };\n        checksVoidReturn = parseChecksVoidReturn(checksVoidReturn);\n        const voidReturnChecks = checksVoidReturn\n            ? {\n                ...(checksVoidReturn.arguments && {\n                    CallExpression: checkArguments,\n                    NewExpression: checkArguments,\n                }),\n                ...(checksVoidReturn.attributes && {\n                    JSXAttribute: checkJSXAttribute,\n                }),\n                ...(checksVoidReturn.inheritedMethods && {\n                    ClassDeclaration: checkClassLikeOrInterfaceNode,\n                    ClassExpression: checkClassLikeOrInterfaceNode,\n                    TSInterfaceDeclaration: checkClassLikeOrInterfaceNode,\n                }),\n                ...(checksVoidReturn.properties && {\n                    Property: checkProperty,\n                }),\n                ...(checksVoidReturn.returns && {\n                    ReturnStatement: checkReturnStatement,\n                }),\n                ...(checksVoidReturn.variables && {\n                    AssignmentExpression: checkAssignment,\n                    VariableDeclarator: checkVariableDeclaration,\n                }),\n            }\n            : {};\n        const spreadChecks = {\n            SpreadElement: checkSpread,\n        };\n        /**\n         * A syntactic check to see if an annotated type is maybe a function type.\n         * This is a perf optimization to help avoid requesting types where possible\n         */\n        function isPossiblyFunctionType(node) {\n            switch (node.typeAnnotation.type) {\n                case utils_1.AST_NODE_TYPES.TSConditionalType:\n                case utils_1.AST_NODE_TYPES.TSConstructorType:\n                case utils_1.AST_NODE_TYPES.TSFunctionType:\n                case utils_1.AST_NODE_TYPES.TSImportType:\n                case utils_1.AST_NODE_TYPES.TSIndexedAccessType:\n                case utils_1.AST_NODE_TYPES.TSInferType:\n                case utils_1.AST_NODE_TYPES.TSIntersectionType:\n                case utils_1.AST_NODE_TYPES.TSQualifiedName:\n                case utils_1.AST_NODE_TYPES.TSThisType:\n                case utils_1.AST_NODE_TYPES.TSTypeOperator:\n                case utils_1.AST_NODE_TYPES.TSTypeQuery:\n                case utils_1.AST_NODE_TYPES.TSTypeReference:\n                case utils_1.AST_NODE_TYPES.TSUnionType:\n                    return true;\n                case utils_1.AST_NODE_TYPES.TSTypeLiteral:\n                    return node.typeAnnotation.members.some(member => member.type === utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration ||\n                        member.type === utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration);\n                case utils_1.AST_NODE_TYPES.TSAbstractKeyword:\n                case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n                case utils_1.AST_NODE_TYPES.TSArrayType:\n                case utils_1.AST_NODE_TYPES.TSAsyncKeyword:\n                case utils_1.AST_NODE_TYPES.TSBigIntKeyword:\n                case utils_1.AST_NODE_TYPES.TSBooleanKeyword:\n                case utils_1.AST_NODE_TYPES.TSDeclareKeyword:\n                case utils_1.AST_NODE_TYPES.TSExportKeyword:\n                case utils_1.AST_NODE_TYPES.TSIntrinsicKeyword:\n                case utils_1.AST_NODE_TYPES.TSLiteralType:\n                case utils_1.AST_NODE_TYPES.TSMappedType:\n                case utils_1.AST_NODE_TYPES.TSNamedTupleMember:\n                case utils_1.AST_NODE_TYPES.TSNeverKeyword:\n                case utils_1.AST_NODE_TYPES.TSNullKeyword:\n                case utils_1.AST_NODE_TYPES.TSNumberKeyword:\n                case utils_1.AST_NODE_TYPES.TSObjectKeyword:\n                case utils_1.AST_NODE_TYPES.TSOptionalType:\n                case utils_1.AST_NODE_TYPES.TSPrivateKeyword:\n                case utils_1.AST_NODE_TYPES.TSProtectedKeyword:\n                case utils_1.AST_NODE_TYPES.TSPublicKeyword:\n                case utils_1.AST_NODE_TYPES.TSReadonlyKeyword:\n                case utils_1.AST_NODE_TYPES.TSRestType:\n                case utils_1.AST_NODE_TYPES.TSStaticKeyword:\n                case utils_1.AST_NODE_TYPES.TSStringKeyword:\n                case utils_1.AST_NODE_TYPES.TSSymbolKeyword:\n                case utils_1.AST_NODE_TYPES.TSTemplateLiteralType:\n                case utils_1.AST_NODE_TYPES.TSTupleType:\n                case utils_1.AST_NODE_TYPES.TSTypePredicate:\n                case utils_1.AST_NODE_TYPES.TSUndefinedKeyword:\n                case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n                case utils_1.AST_NODE_TYPES.TSVoidKeyword:\n                    return false;\n            }\n        }\n        function checkTestConditional(node) {\n            if (node.test) {\n                checkConditional(node.test, true);\n            }\n        }\n        /**\n         * This function analyzes the type of a node and checks if it is a Promise in a boolean conditional.\n         * It uses recursion when checking nested logical operators.\n         * @param node The AST node to check.\n         * @param isTestExpr Whether the node is a descendant of a test expression.\n         */\n        function checkConditional(node, isTestExpr = false) {\n            // prevent checking the same node multiple times\n            if (checkedNodes.has(node)) {\n                return;\n            }\n            checkedNodes.add(node);\n            if (node.type === utils_1.AST_NODE_TYPES.LogicalExpression) {\n                // ignore the left operand for nullish coalescing expressions not in a context of a test expression\n                if (node.operator !== '??' || isTestExpr) {\n                    checkConditional(node.left, isTestExpr);\n                }\n                // we ignore the right operand when not in a context of a test expression\n                if (isTestExpr) {\n                    checkConditional(node.right, isTestExpr);\n                }\n                return;\n            }\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            if (isAlwaysThenable(checker, tsNode)) {\n                context.report({\n                    node,\n                    messageId: 'conditional',\n                });\n            }\n        }\n        function checkArrayPredicates(node) {\n            const parent = node.parent;\n            if (parent.type === utils_1.AST_NODE_TYPES.CallExpression) {\n                const callback = parent.arguments.at(0);\n                if (callback &&\n                    (0, util_1.isArrayMethodCallWithPredicate)(context, services, parent)) {\n                    const type = services.esTreeNodeToTSNodeMap.get(callback);\n                    if (returnsThenable(checker, type)) {\n                        context.report({\n                            node: callback,\n                            messageId: 'predicate',\n                        });\n                    }\n                }\n            }\n        }\n        function checkArguments(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            const voidArgs = voidFunctionArguments(checker, tsNode);\n            if (voidArgs.size === 0) {\n                return;\n            }\n            for (const [index, argument] of node.arguments.entries()) {\n                if (!voidArgs.has(index)) {\n                    continue;\n                }\n                const tsNode = services.esTreeNodeToTSNodeMap.get(argument);\n                if (returnsThenable(checker, tsNode)) {\n                    context.report({\n                        node: argument,\n                        messageId: 'voidReturnArgument',\n                    });\n                }\n            }\n        }\n        function checkAssignment(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            const varType = services.getTypeAtLocation(node.left);\n            if (!isVoidReturningFunctionType(checker, tsNode.left, varType)) {\n                return;\n            }\n            if (returnsThenable(checker, tsNode.right)) {\n                context.report({\n                    node: node.right,\n                    messageId: 'voidReturnVariable',\n                });\n            }\n        }\n        function checkVariableDeclaration(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            if (tsNode.initializer == null ||\n                node.init == null ||\n                node.id.typeAnnotation == null) {\n                return;\n            }\n            // syntactically ignore some known-good cases to avoid touching type info\n            if (!isPossiblyFunctionType(node.id.typeAnnotation)) {\n                return;\n            }\n            const varType = services.getTypeAtLocation(node.id);\n            if (!isVoidReturningFunctionType(checker, tsNode.initializer, varType)) {\n                return;\n            }\n            if (returnsThenable(checker, tsNode.initializer)) {\n                context.report({\n                    node: node.init,\n                    messageId: 'voidReturnVariable',\n                });\n            }\n        }\n        function checkProperty(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            if (ts.isPropertyAssignment(tsNode)) {\n                const contextualType = checker.getContextualType(tsNode.initializer);\n                if (contextualType != null &&\n                    isVoidReturningFunctionType(checker, tsNode.initializer, contextualType) &&\n                    returnsThenable(checker, tsNode.initializer)) {\n                    if ((0, util_1.isFunction)(node.value)) {\n                        const functionNode = node.value;\n                        if (functionNode.returnType) {\n                            context.report({\n                                node: functionNode.returnType.typeAnnotation,\n                                messageId: 'voidReturnProperty',\n                            });\n                        }\n                        else {\n                            context.report({\n                                loc: (0, util_1.getFunctionHeadLoc)(functionNode, context.sourceCode),\n                                messageId: 'voidReturnProperty',\n                            });\n                        }\n                    }\n                    else {\n                        context.report({\n                            node: node.value,\n                            messageId: 'voidReturnProperty',\n                        });\n                    }\n                }\n            }\n            else if (ts.isShorthandPropertyAssignment(tsNode)) {\n                const contextualType = checker.getContextualType(tsNode.name);\n                if (contextualType != null &&\n                    isVoidReturningFunctionType(checker, tsNode.name, contextualType) &&\n                    returnsThenable(checker, tsNode.name)) {\n                    context.report({\n                        node: node.value,\n                        messageId: 'voidReturnProperty',\n                    });\n                }\n            }\n            else if (ts.isMethodDeclaration(tsNode)) {\n                if (ts.isComputedPropertyName(tsNode.name)) {\n                    return;\n                }\n                const obj = tsNode.parent;\n                // Below condition isn't satisfied unless something goes wrong,\n                // but is needed for type checking.\n                // 'node' does not include class method declaration so 'obj' is\n                // always an object literal expression, but after converting 'node'\n                // to TypeScript AST, its type includes MethodDeclaration which\n                // does include the case of class method declaration.\n                if (!ts.isObjectLiteralExpression(obj)) {\n                    return;\n                }\n                if (!returnsThenable(checker, tsNode)) {\n                    return;\n                }\n                const objType = checker.getContextualType(obj);\n                if (objType == null) {\n                    return;\n                }\n                const propertySymbol = checker.getPropertyOfType(objType, tsNode.name.text);\n                if (propertySymbol == null) {\n                    return;\n                }\n                const contextualType = checker.getTypeOfSymbolAtLocation(propertySymbol, tsNode.name);\n                if (isVoidReturningFunctionType(checker, tsNode.name, contextualType)) {\n                    const functionNode = node.value;\n                    if (functionNode.returnType) {\n                        context.report({\n                            node: functionNode.returnType.typeAnnotation,\n                            messageId: 'voidReturnProperty',\n                        });\n                    }\n                    else {\n                        context.report({\n                            loc: (0, util_1.getFunctionHeadLoc)(functionNode, context.sourceCode),\n                            messageId: 'voidReturnProperty',\n                        });\n                    }\n                }\n                return;\n            }\n        }\n        function checkReturnStatement(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            if (tsNode.expression == null || node.argument == null) {\n                return;\n            }\n            // syntactically ignore some known-good cases to avoid touching type info\n            const functionNode = (() => {\n                let current = node.parent;\n                while (current && !(0, util_1.isFunction)(current)) {\n                    current = current.parent;\n                }\n                return (0, util_1.nullThrows)(current, util_1.NullThrowsReasons.MissingParent);\n            })();\n            if (functionNode.returnType &&\n                !isPossiblyFunctionType(functionNode.returnType)) {\n                return;\n            }\n            const contextualType = checker.getContextualType(tsNode.expression);\n            if (contextualType != null &&\n                isVoidReturningFunctionType(checker, tsNode.expression, contextualType) &&\n                returnsThenable(checker, tsNode.expression)) {\n                context.report({\n                    node: node.argument,\n                    messageId: 'voidReturnReturnValue',\n                });\n            }\n        }\n        function checkClassLikeOrInterfaceNode(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            const heritageTypes = getHeritageTypes(checker, tsNode);\n            if (!heritageTypes?.length) {\n                return;\n            }\n            for (const nodeMember of tsNode.members) {\n                const memberName = nodeMember.name?.getText();\n                if (memberName == null) {\n                    // Call/construct/index signatures don't have names. TS allows call signatures to mismatch,\n                    // and construct signatures can't be async.\n                    // TODO - Once we're able to use `checker.isTypeAssignableTo` (v8), we can check an index\n                    // signature here against its compatible index signatures in `heritageTypes`\n                    continue;\n                }\n                if (!returnsThenable(checker, nodeMember)) {\n                    continue;\n                }\n                const node = services.tsNodeToESTreeNodeMap.get(nodeMember);\n                if (isStaticMember(node)) {\n                    continue;\n                }\n                for (const heritageType of heritageTypes) {\n                    checkHeritageTypeForMemberReturningVoid(nodeMember, heritageType, memberName);\n                }\n            }\n        }\n        /**\n         * Checks `heritageType` for a member named `memberName` that returns void; reports the\n         * 'voidReturnInheritedMethod' message if found.\n         * @param nodeMember Node member that returns a Promise\n         * @param heritageType Heritage type to check against\n         * @param memberName Name of the member to check for\n         */\n        function checkHeritageTypeForMemberReturningVoid(nodeMember, heritageType, memberName) {\n            const heritageMember = getMemberIfExists(heritageType, memberName);\n            if (heritageMember == null) {\n                return;\n            }\n            const memberType = checker.getTypeOfSymbolAtLocation(heritageMember, nodeMember);\n            if (!isVoidReturningFunctionType(checker, nodeMember, memberType)) {\n                return;\n            }\n            context.report({\n                node: services.tsNodeToESTreeNodeMap.get(nodeMember),\n                messageId: 'voidReturnInheritedMethod',\n                data: { heritageTypeName: checker.typeToString(heritageType) },\n            });\n        }\n        function checkJSXAttribute(node) {\n            if (node.value == null ||\n                node.value.type !== utils_1.AST_NODE_TYPES.JSXExpressionContainer) {\n                return;\n            }\n            const expressionContainer = services.esTreeNodeToTSNodeMap.get(node.value);\n            const expression = services.esTreeNodeToTSNodeMap.get(node.value.expression);\n            const contextualType = checker.getContextualType(expressionContainer);\n            if (contextualType != null &&\n                isVoidReturningFunctionType(checker, expressionContainer, contextualType) &&\n                returnsThenable(checker, expression)) {\n                context.report({\n                    node: node.value,\n                    messageId: 'voidReturnAttribute',\n                });\n            }\n        }\n        function checkSpread(node) {\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            if (isSometimesThenable(checker, tsNode.expression)) {\n                context.report({\n                    node: node.argument,\n                    messageId: 'spread',\n                });\n            }\n        }\n        return {\n            ...(checksConditionals ? conditionalChecks : {}),\n            ...(checksVoidReturn ? voidReturnChecks : {}),\n            ...(checksSpreads ? spreadChecks : {}),\n        };\n    },\n});\nfunction isSometimesThenable(checker, node) {\n    const type = checker.getTypeAtLocation(node);\n    for (const subType of tsutils.unionTypeParts(checker.getApparentType(type))) {\n        if (tsutils.isThenableType(checker, node, subType)) {\n            return true;\n        }\n    }\n    return false;\n}\n// Variation on the thenable check which requires all forms of the type (read:\n// alternates in a union) to be thenable. Otherwise, you might be trying to\n// check if something is defined or undefined and get caught because one of the\n// branches is thenable.\nfunction isAlwaysThenable(checker, node) {\n    const type = checker.getTypeAtLocation(node);\n    for (const subType of tsutils.unionTypeParts(checker.getApparentType(type))) {\n        const thenProp = subType.getProperty('then');\n        // If one of the alternates has no then property, it is not thenable in all\n        // cases.\n        if (thenProp == null) {\n            return false;\n        }\n        // We walk through each variation of the then property. Since we know it\n        // exists at this point, we just need at least one of the alternates to\n        // be of the right form to consider it thenable.\n        const thenType = checker.getTypeOfSymbolAtLocation(thenProp, node);\n        let hasThenableSignature = false;\n        for (const subType of tsutils.unionTypeParts(thenType)) {\n            for (const signature of subType.getCallSignatures()) {\n                if (signature.parameters.length !== 0 &&\n                    isFunctionParam(checker, signature.parameters[0], node)) {\n                    hasThenableSignature = true;\n                    break;\n                }\n            }\n            // We only need to find one variant of the then property that has a\n            // function signature for it to be thenable.\n            if (hasThenableSignature) {\n                break;\n            }\n        }\n        // If no flavors of the then property are thenable, we don't consider the\n        // overall type to be thenable\n        if (!hasThenableSignature) {\n            return false;\n        }\n    }\n    // If all variants are considered thenable (i.e. haven't returned false), we\n    // consider the overall type thenable\n    return true;\n}\nfunction isFunctionParam(checker, param, node) {\n    const type = checker.getApparentType(checker.getTypeOfSymbolAtLocation(param, node));\n    for (const subType of tsutils.unionTypeParts(type)) {\n        if (subType.getCallSignatures().length !== 0) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction checkThenableOrVoidArgument(checker, node, type, index, thenableReturnIndices, voidReturnIndices) {\n    if (isThenableReturningFunctionType(checker, node.expression, type)) {\n        thenableReturnIndices.add(index);\n    }\n    else if (isVoidReturningFunctionType(checker, node.expression, type) &&\n        // If a certain argument accepts both thenable and void returns,\n        // a promise-returning function is valid\n        !thenableReturnIndices.has(index)) {\n        voidReturnIndices.add(index);\n    }\n    const contextualType = checker.getContextualTypeForArgumentAtIndex(node, index);\n    if (contextualType !== type) {\n        checkThenableOrVoidArgument(checker, node, contextualType, index, thenableReturnIndices, voidReturnIndices);\n    }\n}\n// Get the positions of arguments which are void functions (and not also\n// thenable functions). These are the candidates for the void-return check at\n// the current call site.\n// If the function parameters end with a 'rest' parameter, then we consider\n// the array type parameter (e.g. '...args:Array<SomeType>') when determining\n// if trailing arguments are candidates.\nfunction voidFunctionArguments(checker, node) {\n    // 'new' can be used without any arguments, as in 'let b = new Object;'\n    // In this case, there are no argument positions to check, so return early.\n    if (!node.arguments) {\n        return new Set();\n    }\n    const thenableReturnIndices = new Set();\n    const voidReturnIndices = new Set();\n    const type = checker.getTypeAtLocation(node.expression);\n    // We can't use checker.getResolvedSignature because it prefers an early '() => void' over a later '() => Promise<void>'\n    // See https://github.com/microsoft/TypeScript/issues/48077\n    for (const subType of tsutils.unionTypeParts(type)) {\n        // Standard function calls and `new` have two different types of signatures\n        const signatures = ts.isCallExpression(node)\n            ? subType.getCallSignatures()\n            : subType.getConstructSignatures();\n        for (const signature of signatures) {\n            for (const [index, parameter] of signature.parameters.entries()) {\n                const decl = parameter.valueDeclaration;\n                let type = checker.getTypeOfSymbolAtLocation(parameter, node.expression);\n                // If this is a array 'rest' parameter, check all of the argument indices\n                // from the current argument to the end.\n                if (decl && (0, util_1.isRestParameterDeclaration)(decl)) {\n                    if (checker.isArrayType(type)) {\n                        // Unwrap 'Array<MaybeVoidFunction>' to 'MaybeVoidFunction',\n                        // so that we'll handle it in the same way as a non-rest\n                        // 'param: MaybeVoidFunction'\n                        type = checker.getTypeArguments(type)[0];\n                        for (let i = index; i < node.arguments.length; i++) {\n                            checkThenableOrVoidArgument(checker, node, type, i, thenableReturnIndices, voidReturnIndices);\n                        }\n                    }\n                    else if (checker.isTupleType(type)) {\n                        // Check each type in the tuple - for example, [boolean, () => void] would\n                        // add the index of the second tuple parameter to 'voidReturnIndices'\n                        const typeArgs = checker.getTypeArguments(type);\n                        for (let i = index; i < node.arguments.length && i - index < typeArgs.length; i++) {\n                            checkThenableOrVoidArgument(checker, node, typeArgs[i - index], i, thenableReturnIndices, voidReturnIndices);\n                        }\n                    }\n                }\n                else {\n                    checkThenableOrVoidArgument(checker, node, type, index, thenableReturnIndices, voidReturnIndices);\n                }\n            }\n        }\n    }\n    for (const index of thenableReturnIndices) {\n        voidReturnIndices.delete(index);\n    }\n    return voidReturnIndices;\n}\n/**\n * @returns Whether any call signature of the type has a thenable return type.\n */\nfunction anySignatureIsThenableType(checker, node, type) {\n    for (const signature of type.getCallSignatures()) {\n        const returnType = signature.getReturnType();\n        if (tsutils.isThenableType(checker, node, returnType)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @returns Whether type is a thenable-returning function.\n */\nfunction isThenableReturningFunctionType(checker, node, type) {\n    for (const subType of tsutils.unionTypeParts(type)) {\n        if (anySignatureIsThenableType(checker, node, subType)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @returns Whether type is a void-returning function.\n */\nfunction isVoidReturningFunctionType(checker, node, type) {\n    let hadVoidReturn = false;\n    for (const subType of tsutils.unionTypeParts(type)) {\n        for (const signature of subType.getCallSignatures()) {\n            const returnType = signature.getReturnType();\n            // If a certain positional argument accepts both thenable and void returns,\n            // a promise-returning function is valid\n            if (tsutils.isThenableType(checker, node, returnType)) {\n                return false;\n            }\n            hadVoidReturn ||= tsutils.isTypeFlagSet(returnType, ts.TypeFlags.Void);\n        }\n    }\n    return hadVoidReturn;\n}\n/**\n * @returns Whether expression is a function that returns a thenable.\n */\nfunction returnsThenable(checker, node) {\n    const type = checker.getApparentType(checker.getTypeAtLocation(node));\n    return tsutils\n        .unionTypeParts(type)\n        .some(t => anySignatureIsThenableType(checker, node, t));\n}\nfunction getHeritageTypes(checker, tsNode) {\n    return tsNode.heritageClauses\n        ?.flatMap(clause => clause.types)\n        .map(typeExpression => checker.getTypeAtLocation(typeExpression));\n}\n/**\n * @returns The member with the given name in `type`, if it exists.\n */\nfunction getMemberIfExists(type, memberName) {\n    const escapedMemberName = ts.escapeLeadingUnderscores(memberName);\n    const symbolMemberMatch = type.getSymbol()?.members?.get(escapedMemberName);\n    return (symbolMemberMatch ?? tsutils.getPropertyOfType(type, escapedMemberName));\n}\nfunction isStaticMember(node) {\n    return ((node.type === utils_1.AST_NODE_TYPES.MethodDefinition ||\n        node.type === utils_1.AST_NODE_TYPES.PropertyDefinition ||\n        node.type === utils_1.AST_NODE_TYPES.AccessorProperty) &&\n        node.static);\n}\n"
        }
    ]
}