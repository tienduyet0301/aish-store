{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/dot-notation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891961041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('dot-notation');\nconst defaultOptions = [\n    {\n        allowIndexSignaturePropertyAccess: false,\n        allowKeywords: true,\n        allowPattern: '',\n        allowPrivateClassPropertyAccess: false,\n        allowProtectedClassPropertyAccess: false,\n    },\n];\nexports.default = (0, util_1.createRule)({\n    name: 'dot-notation',\n    meta: {\n        type: 'suggestion',\n        defaultOptions,\n        docs: {\n            description: 'Enforce dot notation whenever possible',\n            extendsBaseRule: true,\n            recommended: 'stylistic',\n            requiresTypeChecking: true,\n        },\n        fixable: baseRule.meta.fixable,\n        hasSuggestions: baseRule.meta.hasSuggestions,\n        messages: baseRule.meta.messages,\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowIndexSignaturePropertyAccess: {\n                        type: 'boolean',\n                        default: false,\n                        description: 'Whether to allow accessing properties matching an index signature with array notation.',\n                    },\n                    allowKeywords: {\n                        type: 'boolean',\n                        default: true,\n                        description: 'Whether to allow keywords such as [\"class\"]`.',\n                    },\n                    allowPattern: {\n                        type: 'string',\n                        default: '',\n                        description: 'Regular expression of names to allow.',\n                    },\n                    allowPrivateClassPropertyAccess: {\n                        type: 'boolean',\n                        default: false,\n                        description: 'Whether to allow accessing class members marked as `private` with array notation.',\n                    },\n                    allowProtectedClassPropertyAccess: {\n                        type: 'boolean',\n                        default: false,\n                        description: 'Whether to allow accessing class members marked as `protected` with array notation.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions,\n    create(context, [options]) {\n        const rules = baseRule.create(context);\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        const allowPrivateClassPropertyAccess = options.allowPrivateClassPropertyAccess;\n        const allowProtectedClassPropertyAccess = options.allowProtectedClassPropertyAccess;\n        const allowIndexSignaturePropertyAccess = (options.allowIndexSignaturePropertyAccess ?? false) ||\n            tsutils.isCompilerOptionEnabled(services.program.getCompilerOptions(), 'noPropertyAccessFromIndexSignature');\n        return {\n            MemberExpression(node) {\n                if ((allowPrivateClassPropertyAccess ||\n                    allowProtectedClassPropertyAccess ||\n                    allowIndexSignaturePropertyAccess) &&\n                    node.computed) {\n                    // for perf reasons - only fetch symbols if we have to\n                    const propertySymbol = services.getSymbolAtLocation(node.property) ??\n                        services\n                            .getTypeAtLocation(node.object)\n                            .getNonNullableType()\n                            .getProperties()\n                            .find(propertySymbol => node.property.type === utils_1.AST_NODE_TYPES.Literal &&\n                            propertySymbol.escapedName === node.property.value);\n                    const modifierKind = (0, util_1.getModifiers)(propertySymbol?.getDeclarations()?.[0])?.[0].kind;\n                    if ((allowPrivateClassPropertyAccess &&\n                        modifierKind === ts.SyntaxKind.PrivateKeyword) ||\n                        (allowProtectedClassPropertyAccess &&\n                            modifierKind === ts.SyntaxKind.ProtectedKeyword)) {\n                        return;\n                    }\n                    if (propertySymbol == null && allowIndexSignaturePropertyAccess) {\n                        const objectType = services\n                            .getTypeAtLocation(node.object)\n                            .getNonNullableType();\n                        const indexInfos = checker.getIndexInfosOfType(objectType);\n                        if (indexInfos.some(info => info.keyType.flags & ts.TypeFlags.StringLike)) {\n                            return;\n                        }\n                    }\n                }\n                rules.MemberExpression(node);\n            },\n        };\n    },\n});\n"
        }
    ]
}