{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-reduce-type-parameter.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891973722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-reduce-type-parameter',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Enforce using type parameter when calling `Array#reduce` instead of using a type assertion',\n            recommended: 'strict',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            preferTypeParameter: 'Unnecessary assertion: Array#reduce accepts a type parameter for the default value.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        function isArrayType(type) {\n            return tsutils\n                .unionTypeParts(type)\n                .every(unionPart => tsutils\n                .intersectionTypeParts(unionPart)\n                .every(t => checker.isArrayType(t) || checker.isTupleType(t)));\n        }\n        return {\n            'CallExpression > MemberExpression.callee'(callee) {\n                if (!(0, util_1.isStaticMemberAccessOfValue)(callee, context, 'reduce')) {\n                    return;\n                }\n                const [, secondArg] = callee.parent.arguments;\n                if (callee.parent.arguments.length < 2) {\n                    return;\n                }\n                if ((0, util_1.isTypeAssertion)(secondArg)) {\n                    const initializerType = services.getTypeAtLocation(secondArg.expression);\n                    const assertedType = services.getTypeAtLocation(secondArg.typeAnnotation);\n                    const isAssertionNecessary = !checker.isTypeAssignableTo(initializerType, assertedType);\n                    // don't report this if the resulting fix will be a type error\n                    if (isAssertionNecessary) {\n                        return;\n                    }\n                }\n                else {\n                    return;\n                }\n                // Get the symbol of the `reduce` method.\n                const calleeObjType = (0, util_1.getConstrainedTypeAtLocation)(services, callee.object);\n                // Check the owner type of the `reduce` method.\n                if (isArrayType(calleeObjType)) {\n                    context.report({\n                        node: secondArg,\n                        messageId: 'preferTypeParameter',\n                        fix: fixer => {\n                            const fixes = [\n                                fixer.removeRange([\n                                    secondArg.range[0],\n                                    secondArg.expression.range[0],\n                                ]),\n                                fixer.removeRange([\n                                    secondArg.expression.range[1],\n                                    secondArg.range[1],\n                                ]),\n                            ];\n                            if (!callee.parent.typeArguments) {\n                                fixes.push(fixer.insertTextAfter(callee, `<${context.sourceCode.getText(secondArg.typeAnnotation)}>`));\n                            }\n                            return fixes;\n                        },\n                    });\n                    return;\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}