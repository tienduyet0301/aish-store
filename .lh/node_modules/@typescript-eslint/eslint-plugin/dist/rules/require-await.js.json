{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/require-await.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891974821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'require-await',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow async functions which do not return promises and have no `await` expression',\n            extendsBaseRule: true,\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        hasSuggestions: true,\n        messages: {\n            missingAwait: \"{{name}} has no 'await' expression.\",\n            removeAsync: \"Remove 'async'.\",\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        let scopeInfo = null;\n        /**\n         * Push the scope info object to the stack.\n         */\n        function enterFunction(node) {\n            scopeInfo = {\n                hasAsync: node.async,\n                hasAwait: false,\n                isAsyncYield: false,\n                isGen: node.generator || false,\n                upper: scopeInfo,\n            };\n        }\n        /**\n         * Pop the top scope info object from the stack.\n         * Also, it reports the function if needed.\n         */\n        function exitFunction(node) {\n            /* istanbul ignore if */ if (!scopeInfo) {\n                // this shouldn't ever happen, as we have to exit a function after we enter it\n                return;\n            }\n            if (node.async &&\n                !scopeInfo.hasAwait &&\n                !isEmptyFunction(node) &&\n                !(scopeInfo.isGen && scopeInfo.isAsyncYield)) {\n                // If the function belongs to a method definition or\n                // property, then the function's range may not include the\n                // `async` keyword and we should look at the parent instead.\n                const nodeWithAsyncKeyword = (node.parent.type === utils_1.AST_NODE_TYPES.MethodDefinition &&\n                    node.parent.value === node) ||\n                    (node.parent.type === utils_1.AST_NODE_TYPES.Property &&\n                        node.parent.method &&\n                        node.parent.value === node)\n                    ? node.parent\n                    : node;\n                const asyncToken = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(nodeWithAsyncKeyword, token => token.value === 'async'), 'The node is an async function, so it must have an \"async\" token.');\n                const asyncRange = [\n                    asyncToken.range[0],\n                    (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(asyncToken, {\n                        includeComments: true,\n                    }), 'There will always be a token after the \"async\" keyword.').range[0],\n                ];\n                // Removing the `async` keyword can cause parsing errors if the\n                // current statement is relying on automatic semicolon insertion.\n                // If ASI is currently being used, then we should replace the\n                // `async` keyword with a semicolon.\n                const nextToken = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(asyncToken), 'There will always be a token after the \"async\" keyword.');\n                const addSemiColon = nextToken.type === utils_1.AST_TOKEN_TYPES.Punctuator &&\n                    (nextToken.value === '[' || nextToken.value === '(') &&\n                    (nodeWithAsyncKeyword.type === utils_1.AST_NODE_TYPES.MethodDefinition ||\n                        (0, util_1.isStartOfExpressionStatement)(nodeWithAsyncKeyword)) &&\n                    (0, util_1.needsPrecedingSemicolon)(context.sourceCode, nodeWithAsyncKeyword);\n                const changes = [\n                    { range: asyncRange, replacement: addSemiColon ? ';' : undefined },\n                ];\n                // If there's a return type annotation and it's a\n                // `Promise<T>`, we can also change the return type\n                // annotation to just `T` as part of the suggestion.\n                // Alternatively, if the function is a generator and\n                // the return type annotation is `AsyncGenerator<T>`,\n                // then we can change it to `Generator<T>`.\n                if (node.returnType?.typeAnnotation.type ===\n                    utils_1.AST_NODE_TYPES.TSTypeReference) {\n                    if (scopeInfo.isGen) {\n                        if (hasTypeName(node.returnType.typeAnnotation, 'AsyncGenerator')) {\n                            changes.push({\n                                range: node.returnType.typeAnnotation.typeName.range,\n                                replacement: 'Generator',\n                            });\n                        }\n                    }\n                    else if (hasTypeName(node.returnType.typeAnnotation, 'Promise') &&\n                        node.returnType.typeAnnotation.typeArguments != null) {\n                        const openAngle = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(node.returnType.typeAnnotation, token => token.type === utils_1.AST_TOKEN_TYPES.Punctuator &&\n                            token.value === '<'), 'There are type arguments, so the angle bracket will exist.');\n                        const closeAngle = (0, util_1.nullThrows)(context.sourceCode.getLastToken(node.returnType.typeAnnotation, token => token.type === utils_1.AST_TOKEN_TYPES.Punctuator &&\n                            token.value === '>'), 'There are type arguments, so the angle bracket will exist.');\n                        changes.push(\n                        // Remove the closing angled bracket.\n                        { range: closeAngle.range, replacement: undefined }, \n                        // Remove the \"Promise\" identifier\n                        // and the opening angled bracket.\n                        {\n                            range: [\n                                node.returnType.typeAnnotation.typeName.range[0],\n                                openAngle.range[1],\n                            ],\n                            replacement: undefined,\n                        });\n                    }\n                }\n                context.report({\n                    loc: (0, util_1.getFunctionHeadLoc)(node, context.sourceCode),\n                    node,\n                    messageId: 'missingAwait',\n                    data: {\n                        name: (0, util_1.upperCaseFirst)((0, util_1.getFunctionNameWithKind)(node)),\n                    },\n                    suggest: [\n                        {\n                            messageId: 'removeAsync',\n                            fix: (fixer) => changes.map(change => change.replacement != null\n                                ? fixer.replaceTextRange(change.range, change.replacement)\n                                : fixer.removeRange(change.range)),\n                        },\n                    ],\n                });\n            }\n            scopeInfo = scopeInfo.upper;\n        }\n        /**\n         * Checks if the node returns a thenable type\n         */\n        function isThenableType(node) {\n            const type = checker.getTypeAtLocation(node);\n            return tsutils.isThenableType(checker, node, type);\n        }\n        /**\n         * Marks the current scope as having an await\n         */\n        function markAsHasAwait() {\n            if (!scopeInfo) {\n                return;\n            }\n            scopeInfo.hasAwait = true;\n        }\n        /**\n         * Mark `scopeInfo.isAsyncYield` to `true` if it\n         *  1) delegates async generator function\n         *    or\n         *  2) yields thenable type\n         */\n        function visitYieldExpression(node) {\n            if (!scopeInfo?.isGen || !node.argument) {\n                return;\n            }\n            if (node.argument.type === utils_1.AST_NODE_TYPES.Literal) {\n                // ignoring this as for literals we don't need to check the definition\n                // eg : async function* run() { yield* 1 }\n                return;\n            }\n            if (!node.delegate) {\n                if (isThenableType(services.esTreeNodeToTSNodeMap.get(node.argument))) {\n                    scopeInfo.isAsyncYield = true;\n                }\n                return;\n            }\n            const type = services.getTypeAtLocation(node.argument);\n            const typesToCheck = expandUnionOrIntersectionType(type);\n            for (const type of typesToCheck) {\n                const asyncIterator = tsutils.getWellKnownSymbolPropertyOfType(type, 'asyncIterator', checker);\n                if (asyncIterator != null) {\n                    scopeInfo.isAsyncYield = true;\n                    break;\n                }\n            }\n        }\n        return {\n            ArrowFunctionExpression: enterFunction,\n            'ArrowFunctionExpression:exit': exitFunction,\n            AwaitExpression: markAsHasAwait,\n            'ForOfStatement[await = true]': markAsHasAwait,\n            FunctionDeclaration: enterFunction,\n            'FunctionDeclaration:exit': exitFunction,\n            FunctionExpression: enterFunction,\n            'FunctionExpression:exit': exitFunction,\n            'VariableDeclaration[kind = \"await using\"]': markAsHasAwait,\n            YieldExpression: visitYieldExpression,\n            // check body-less async arrow function.\n            // ignore `async () => await foo` because it's obviously correct\n            'ArrowFunctionExpression[async = true] > :not(BlockStatement, AwaitExpression)'(node) {\n                const expression = services.esTreeNodeToTSNodeMap.get(node);\n                if (isThenableType(expression)) {\n                    markAsHasAwait();\n                }\n            },\n            ReturnStatement(node) {\n                // short circuit early to avoid unnecessary type checks\n                if (!scopeInfo || scopeInfo.hasAwait || !scopeInfo.hasAsync) {\n                    return;\n                }\n                const { expression } = services.esTreeNodeToTSNodeMap.get(node);\n                if (expression && isThenableType(expression)) {\n                    markAsHasAwait();\n                }\n            },\n        };\n    },\n});\nfunction isEmptyFunction(node) {\n    return (node.body.type === utils_1.AST_NODE_TYPES.BlockStatement &&\n        node.body.body.length === 0);\n}\nfunction expandUnionOrIntersectionType(type) {\n    if (type.isUnionOrIntersection()) {\n        return type.types.flatMap(expandUnionOrIntersectionType);\n    }\n    return [type];\n}\nfunction hasTypeName(typeReference, typeName) {\n    return (typeReference.typeName.type === utils_1.AST_NODE_TYPES.Identifier &&\n        typeReference.typeName.name === typeName);\n}\n"
        }
    ]
}