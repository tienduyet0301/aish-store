{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unsafe-enum-comparison.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891970126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst shared_1 = require(\"./enum-utils/shared\");\n/**\n * @returns Whether the right type is an unsafe comparison against any left type.\n */\nfunction typeViolates(leftTypeParts, rightType) {\n    const leftEnumValueTypes = new Set(leftTypeParts.map(getEnumValueType));\n    return ((leftEnumValueTypes.has(ts.TypeFlags.Number) && isNumberLike(rightType)) ||\n        (leftEnumValueTypes.has(ts.TypeFlags.String) && isStringLike(rightType)));\n}\nfunction isNumberLike(type) {\n    const typeParts = tsutils.intersectionTypeParts(type);\n    return typeParts.some(typePart => {\n        return tsutils.isTypeFlagSet(typePart, ts.TypeFlags.Number | ts.TypeFlags.NumberLike);\n    });\n}\nfunction isStringLike(type) {\n    const typeParts = tsutils.intersectionTypeParts(type);\n    return typeParts.some(typePart => {\n        return tsutils.isTypeFlagSet(typePart, ts.TypeFlags.String | ts.TypeFlags.StringLike);\n    });\n}\n/**\n * @returns What type a type's enum value is (number or string), if either.\n */\nfunction getEnumValueType(type) {\n    return tsutils.isTypeFlagSet(type, ts.TypeFlags.EnumLike)\n        ? tsutils.isTypeFlagSet(type, ts.TypeFlags.NumberLiteral)\n            ? ts.TypeFlags.Number\n            : ts.TypeFlags.String\n        : undefined;\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-unsafe-enum-comparison',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow comparing an enum value with a non-enum value',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        hasSuggestions: true,\n        messages: {\n            mismatchedCase: 'The case statement does not have a shared enum type with the switch predicate.',\n            mismatchedCondition: 'The two values in this comparison do not have a shared enum type.',\n            replaceValueWithEnum: 'Replace with an enum value comparison.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const parserServices = (0, util_1.getParserServices)(context);\n        const typeChecker = parserServices.program.getTypeChecker();\n        function isMismatchedComparison(leftType, rightType) {\n            // Allow comparisons that don't have anything to do with enums:\n            //\n            // ```ts\n            // 1 === 2;\n            // ```\n            const leftEnumTypes = (0, shared_1.getEnumTypes)(typeChecker, leftType);\n            const rightEnumTypes = new Set((0, shared_1.getEnumTypes)(typeChecker, rightType));\n            if (leftEnumTypes.length === 0 && rightEnumTypes.size === 0) {\n                return false;\n            }\n            // Allow comparisons that share an enum type:\n            //\n            // ```ts\n            // Fruit.Apple === Fruit.Banana;\n            // ```\n            for (const leftEnumType of leftEnumTypes) {\n                if (rightEnumTypes.has(leftEnumType)) {\n                    return false;\n                }\n            }\n            // We need to split the type into the union type parts in order to find\n            // valid enum comparisons like:\n            //\n            // ```ts\n            // declare const something: Fruit | Vegetable;\n            // something === Fruit.Apple;\n            // ```\n            const leftTypeParts = tsutils.unionTypeParts(leftType);\n            const rightTypeParts = tsutils.unionTypeParts(rightType);\n            // If a type exists in both sides, we consider this comparison safe:\n            //\n            // ```ts\n            // declare const fruit: Fruit.Apple | 0;\n            // fruit === 0;\n            // ```\n            for (const leftTypePart of leftTypeParts) {\n                if (rightTypeParts.includes(leftTypePart)) {\n                    return false;\n                }\n            }\n            return (typeViolates(leftTypeParts, rightType) ||\n                typeViolates(rightTypeParts, leftType));\n        }\n        return {\n            'BinaryExpression[operator=/^[<>!=]?={0,2}$/]'(node) {\n                const leftType = parserServices.getTypeAtLocation(node.left);\n                const rightType = parserServices.getTypeAtLocation(node.right);\n                if (isMismatchedComparison(leftType, rightType)) {\n                    context.report({\n                        node,\n                        messageId: 'mismatchedCondition',\n                        suggest: [\n                            {\n                                messageId: 'replaceValueWithEnum',\n                                fix(fixer) {\n                                    // Replace the right side with an enum key if possible:\n                                    //\n                                    // ```ts\n                                    // Fruit.Apple === 'apple'; // Fruit.Apple === Fruit.Apple\n                                    // ```\n                                    const leftEnumKey = (0, shared_1.getEnumKeyForLiteral)((0, shared_1.getEnumLiterals)(leftType), (0, util_1.getStaticValue)(node.right)?.value);\n                                    if (leftEnumKey) {\n                                        return fixer.replaceText(node.right, leftEnumKey);\n                                    }\n                                    // Replace the left side with an enum key if possible:\n                                    //\n                                    // ```ts\n                                    // declare const fruit: Fruit;\n                                    // 'apple' === Fruit.Apple; // Fruit.Apple === Fruit.Apple\n                                    // ```\n                                    const rightEnumKey = (0, shared_1.getEnumKeyForLiteral)((0, shared_1.getEnumLiterals)(rightType), (0, util_1.getStaticValue)(node.left)?.value);\n                                    if (rightEnumKey) {\n                                        return fixer.replaceText(node.left, rightEnumKey);\n                                    }\n                                    return null;\n                                },\n                            },\n                        ],\n                    });\n                }\n            },\n            SwitchCase(node) {\n                // Ignore `default` cases.\n                if (node.test == null) {\n                    return;\n                }\n                const { parent } = node;\n                const leftType = parserServices.getTypeAtLocation(parent.discriminant);\n                const rightType = parserServices.getTypeAtLocation(node.test);\n                if (isMismatchedComparison(leftType, rightType)) {\n                    context.report({\n                        node,\n                        messageId: 'mismatchedCase',\n                    });\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}