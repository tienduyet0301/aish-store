{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-boolean-literal-compare.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891968741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unnecessary-boolean-literal-compare',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow unnecessary equality comparisons against boolean literals',\n            recommended: 'strict',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            comparingNullableToFalse: 'This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default.',\n            comparingNullableToTrueDirect: 'This expression unnecessarily compares a nullable boolean value to true instead of using it directly.',\n            comparingNullableToTrueNegated: 'This expression unnecessarily compares a nullable boolean value to true instead of negating it.',\n            direct: 'This expression unnecessarily compares a boolean value to a boolean instead of using it directly.',\n            negated: 'This expression unnecessarily compares a boolean value to a boolean instead of negating it.',\n            noStrictNullCheck: 'This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowComparingNullableBooleansToFalse: {\n                        type: 'boolean',\n                        description: 'Whether to allow comparisons between nullable boolean variables and `false`.',\n                    },\n                    allowComparingNullableBooleansToTrue: {\n                        type: 'boolean',\n                        description: 'Whether to allow comparisons between nullable boolean variables and `true`.',\n                    },\n                    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {\n                        type: 'boolean',\n                        description: 'Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allowComparingNullableBooleansToFalse: true,\n            allowComparingNullableBooleansToTrue: true,\n            allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,\n        },\n    ],\n    create(context, [options]) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        const compilerOptions = services.program.getCompilerOptions();\n        const isStrictNullChecks = tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'strictNullChecks');\n        if (!isStrictNullChecks &&\n            options.allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing !== true) {\n            context.report({\n                loc: {\n                    start: { column: 0, line: 0 },\n                    end: { column: 0, line: 0 },\n                },\n                messageId: 'noStrictNullCheck',\n            });\n        }\n        function getBooleanComparison(node) {\n            const comparison = deconstructComparison(node);\n            if (!comparison) {\n                return undefined;\n            }\n            const { constraintType, isTypeParameter } = (0, util_1.getConstraintInfo)(checker, services.getTypeAtLocation(comparison.expression));\n            if (isTypeParameter && constraintType == null) {\n                return undefined;\n            }\n            if (isBooleanType(constraintType)) {\n                return {\n                    ...comparison,\n                    expressionIsNullableBoolean: false,\n                };\n            }\n            if (isNullableBoolean(constraintType)) {\n                return {\n                    ...comparison,\n                    expressionIsNullableBoolean: true,\n                };\n            }\n            return undefined;\n        }\n        function isBooleanType(expressionType) {\n            return tsutils.isTypeFlagSet(expressionType, ts.TypeFlags.Boolean | ts.TypeFlags.BooleanLiteral);\n        }\n        /**\n         * checks if the expressionType is a union that\n         *   1) contains at least one nullish type (null or undefined)\n         *   2) contains at least once boolean type (true or false or boolean)\n         *   3) does not contain any types besides nullish and boolean types\n         */\n        function isNullableBoolean(expressionType) {\n            if (!expressionType.isUnion()) {\n                return false;\n            }\n            const { types } = expressionType;\n            const nonNullishTypes = types.filter(type => !tsutils.isTypeFlagSet(type, ts.TypeFlags.Undefined | ts.TypeFlags.Null));\n            const hasNonNullishType = nonNullishTypes.length > 0;\n            if (!hasNonNullishType) {\n                return false;\n            }\n            const hasNullableType = nonNullishTypes.length < types.length;\n            if (!hasNullableType) {\n                return false;\n            }\n            const allNonNullishTypesAreBoolean = nonNullishTypes.every(isBooleanType);\n            if (!allNonNullishTypesAreBoolean) {\n                return false;\n            }\n            return true;\n        }\n        function deconstructComparison(node) {\n            const comparisonType = getEqualsKind(node.operator);\n            if (!comparisonType) {\n                return undefined;\n            }\n            for (const [against, expression] of [\n                [node.right, node.left],\n                [node.left, node.right],\n            ]) {\n                if (against.type !== utils_1.AST_NODE_TYPES.Literal ||\n                    typeof against.value !== 'boolean') {\n                    continue;\n                }\n                const { value: literalBooleanInComparison } = against;\n                const negated = !comparisonType.isPositive;\n                return {\n                    expression,\n                    literalBooleanInComparison,\n                    negated,\n                };\n            }\n            return undefined;\n        }\n        function nodeIsUnaryNegation(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.UnaryExpression &&\n                node.prefix &&\n                node.operator === '!');\n        }\n        return {\n            BinaryExpression(node) {\n                const comparison = getBooleanComparison(node);\n                if (comparison == null) {\n                    return;\n                }\n                if (comparison.expressionIsNullableBoolean) {\n                    if (comparison.literalBooleanInComparison &&\n                        options.allowComparingNullableBooleansToTrue) {\n                        return;\n                    }\n                    if (!comparison.literalBooleanInComparison &&\n                        options.allowComparingNullableBooleansToFalse) {\n                        return;\n                    }\n                }\n                context.report({\n                    node,\n                    messageId: comparison.expressionIsNullableBoolean\n                        ? comparison.literalBooleanInComparison\n                            ? comparison.negated\n                                ? 'comparingNullableToTrueNegated'\n                                : 'comparingNullableToTrueDirect'\n                            : 'comparingNullableToFalse'\n                        : comparison.negated\n                            ? 'negated'\n                            : 'direct',\n                    *fix(fixer) {\n                        // 1. isUnaryNegation - parent negation\n                        // 2. literalBooleanInComparison - is compared to literal boolean\n                        // 3. negated - is expression negated\n                        const isUnaryNegation = nodeIsUnaryNegation(node.parent);\n                        const shouldNegate = comparison.negated !== comparison.literalBooleanInComparison;\n                        const mutatedNode = isUnaryNegation ? node.parent : node;\n                        yield fixer.replaceText(mutatedNode, context.sourceCode.getText(comparison.expression));\n                        // if `isUnaryNegation === literalBooleanInComparison === !negated` is true - negate the expression\n                        if (shouldNegate === isUnaryNegation) {\n                            yield fixer.insertTextBefore(mutatedNode, '!');\n                            // if the expression `exp` is not a strong precedence node, wrap it in parentheses\n                            if (!(0, util_1.isStrongPrecedenceNode)(comparison.expression)) {\n                                yield fixer.insertTextBefore(mutatedNode, '(');\n                                yield fixer.insertTextAfter(mutatedNode, ')');\n                            }\n                        }\n                        // if the expression `exp` is nullable, and we're not comparing to `true`, insert `?? true`\n                        if (comparison.expressionIsNullableBoolean &&\n                            !comparison.literalBooleanInComparison) {\n                            // provide the default `true`\n                            yield fixer.insertTextBefore(mutatedNode, '(');\n                            yield fixer.insertTextAfter(mutatedNode, ' ?? true)');\n                        }\n                    },\n                });\n            },\n        };\n    },\n});\nfunction getEqualsKind(operator) {\n    switch (operator) {\n        case '!=':\n            return {\n                isPositive: false,\n                isStrict: false,\n            };\n        case '!==':\n            return {\n                isPositive: false,\n                isStrict: true,\n            };\n        case '==':\n            return {\n                isPositive: true,\n                isStrict: false,\n            };\n        case '===':\n            return {\n                isPositive: true,\n                isStrict: true,\n            };\n        default:\n            return undefined;\n    }\n}\n"
        }
    ]
}