{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/restrict-template-expressions.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891975000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Type, TypeChecker } from 'typescript';\nimport type { TypeOrValueSpecifier } from '../util';\nimport { isTypeAnyType, isTypeNeverType } from '../util';\ntype OptionTester = (type: Type, checker: TypeChecker, recursivelyCheckType: (type: Type) => boolean) => boolean;\ndeclare const optionTesters: {\n    type: \"Array\" | \"RegExp\" | \"Boolean\" | \"Number\" | \"Any\" | \"Nullish\" | \"Never\";\n    option: \"allowAny\" | \"allowBoolean\" | \"allowNullish\" | \"allowRegExp\" | \"allowNever\" | \"allowNumber\" | \"allowArray\";\n    tester: typeof isTypeAnyType | typeof isTypeNeverType | OptionTester | ((type: Type, checker: TypeChecker, recursivelyCheckType: (type: Type) => boolean) => boolean) | ((type: Type, checker: TypeChecker) => boolean);\n}[];\nexport type Options = [\n    {\n        allow?: TypeOrValueSpecifier[];\n    } & Partial<Record<(typeof optionTesters)[number]['option'], boolean>>\n];\nexport type MessageId = 'invalidType';\ndeclare const _default: import(\"@typescript-eslint/utils/ts-eslint\").RuleModule<\"invalidType\", Options, import(\"../../rules\").ESLintPluginDocs, import(\"@typescript-eslint/utils/ts-eslint\").RuleListener>;\nexport default _default;\n//# sourceMappingURL=restrict-template-expressions.d.ts.map"
        }
    ]
}