{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-meaningless-void-operator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891966510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-meaningless-void-operator',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow the `void` operator except when used to discard a value',\n            recommended: 'strict',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        hasSuggestions: true,\n        messages: {\n            meaninglessVoidOperator: \"void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored\",\n            removeVoid: \"Remove 'void'\",\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    checkNever: {\n                        type: 'boolean',\n                        default: false,\n                        description: 'Whether to suggest removing `void` when the argument has type `never`.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [{ checkNever: false }],\n    create(context, [{ checkNever }]) {\n        const services = utils_1.ESLintUtils.getParserServices(context);\n        const checker = services.program.getTypeChecker();\n        return {\n            'UnaryExpression[operator=\"void\"]'(node) {\n                const fix = (fixer) => {\n                    return fixer.removeRange([\n                        context.sourceCode.getTokens(node)[0].range[0],\n                        context.sourceCode.getTokens(node)[1].range[0],\n                    ]);\n                };\n                const argType = services.getTypeAtLocation(node.argument);\n                const unionParts = tsutils.unionTypeParts(argType);\n                if (unionParts.every(part => part.flags & (ts.TypeFlags.Void | ts.TypeFlags.Undefined))) {\n                    context.report({\n                        node,\n                        messageId: 'meaninglessVoidOperator',\n                        data: { type: checker.typeToString(argType) },\n                        fix,\n                    });\n                }\n                else if (checkNever &&\n                    unionParts.every(part => part.flags &\n                        (ts.TypeFlags.Void | ts.TypeFlags.Undefined | ts.TypeFlags.Never))) {\n                    context.report({\n                        node,\n                        messageId: 'meaninglessVoidOperator',\n                        data: { type: checker.typeToString(argType) },\n                        suggest: [{ messageId: 'removeVoid', fix }],\n                    });\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}