{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/restrict-plus-operands.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891974964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'restrict-plus-operands',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Require both operands of addition to be the same type and be `bigint`, `number`, or `string`',\n            recommended: {\n                recommended: true,\n                strict: [\n                    {\n                        allowAny: false,\n                        allowBoolean: false,\n                        allowNullish: false,\n                        allowNumberAndString: false,\n                        allowRegExp: false,\n                    },\n                ],\n            },\n            requiresTypeChecking: true,\n        },\n        messages: {\n            bigintAndNumber: \"Numeric '+' operations must either be both bigints or both numbers. Got `{{left}}` + `{{right}}`.\",\n            invalid: \"Invalid operand for a '+' operation. Operands must each be a number or {{stringLike}}. Got `{{type}}`.\",\n            mismatched: \"Operands of '+' operations must be a number or {{stringLike}}. Got `{{left}}` + `{{right}}`.\",\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowAny: {\n                        type: 'boolean',\n                        description: 'Whether to allow `any` typed values.',\n                    },\n                    allowBoolean: {\n                        type: 'boolean',\n                        description: 'Whether to allow `boolean` typed values.',\n                    },\n                    allowNullish: {\n                        type: 'boolean',\n                        description: 'Whether to allow potentially `null` or `undefined` typed values.',\n                    },\n                    allowNumberAndString: {\n                        type: 'boolean',\n                        description: 'Whether to allow `bigint`/`number` typed values and `string` typed values to be added together.',\n                    },\n                    allowRegExp: {\n                        type: 'boolean',\n                        description: 'Whether to allow `regexp` typed values.',\n                    },\n                    skipCompoundAssignments: {\n                        type: 'boolean',\n                        description: 'Whether to skip compound assignments such as `+=`.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allowAny: true,\n            allowBoolean: true,\n            allowNullish: true,\n            allowNumberAndString: true,\n            allowRegExp: true,\n            skipCompoundAssignments: false,\n        },\n    ],\n    create(context, [{ allowAny, allowBoolean, allowNullish, allowNumberAndString, allowRegExp, skipCompoundAssignments, },]) {\n        const services = (0, util_1.getParserServices)(context);\n        const typeChecker = services.program.getTypeChecker();\n        const stringLikes = [\n            allowAny && '`any`',\n            allowBoolean && '`boolean`',\n            allowNullish && '`null`',\n            allowRegExp && '`RegExp`',\n            allowNullish && '`undefined`',\n        ].filter((value) => typeof value === 'string');\n        const stringLike = stringLikes.length\n            ? stringLikes.length === 1\n                ? `string, allowing a string + ${stringLikes[0]}`\n                : `string, allowing a string + any of: ${stringLikes.join(', ')}`\n            : 'string';\n        function getTypeConstrained(node) {\n            return typeChecker.getBaseTypeOfLiteralType((0, util_1.getConstrainedTypeAtLocation)(services, node));\n        }\n        function checkPlusOperands(node) {\n            const leftType = getTypeConstrained(node.left);\n            const rightType = getTypeConstrained(node.right);\n            if (leftType === rightType &&\n                tsutils.isTypeFlagSet(leftType, ts.TypeFlags.BigIntLike |\n                    ts.TypeFlags.NumberLike |\n                    ts.TypeFlags.StringLike)) {\n                return;\n            }\n            let hadIndividualComplaint = false;\n            for (const [baseNode, baseType, otherType] of [\n                [node.left, leftType, rightType],\n                [node.right, rightType, leftType],\n            ]) {\n                if (isTypeFlagSetInUnion(baseType, ts.TypeFlags.ESSymbolLike |\n                    ts.TypeFlags.Never |\n                    ts.TypeFlags.Unknown) ||\n                    (!allowAny && isTypeFlagSetInUnion(baseType, ts.TypeFlags.Any)) ||\n                    (!allowBoolean &&\n                        isTypeFlagSetInUnion(baseType, ts.TypeFlags.BooleanLike)) ||\n                    (!allowNullish &&\n                        (0, util_1.isTypeFlagSet)(baseType, ts.TypeFlags.Null | ts.TypeFlags.Undefined))) {\n                    context.report({\n                        node: baseNode,\n                        messageId: 'invalid',\n                        data: {\n                            type: typeChecker.typeToString(baseType),\n                            stringLike,\n                        },\n                    });\n                    hadIndividualComplaint = true;\n                    continue;\n                }\n                // RegExps also contain ts.TypeFlags.Any & ts.TypeFlags.Object\n                for (const subBaseType of tsutils.unionTypeParts(baseType)) {\n                    const typeName = (0, util_1.getTypeName)(typeChecker, subBaseType);\n                    if (typeName === 'RegExp'\n                        ? !allowRegExp ||\n                            tsutils.isTypeFlagSet(otherType, ts.TypeFlags.NumberLike)\n                        : (!allowAny && (0, util_1.isTypeAnyType)(subBaseType)) ||\n                            isDeeplyObjectType(subBaseType)) {\n                        context.report({\n                            node: baseNode,\n                            messageId: 'invalid',\n                            data: {\n                                type: typeChecker.typeToString(subBaseType),\n                                stringLike,\n                            },\n                        });\n                        hadIndividualComplaint = true;\n                        continue;\n                    }\n                }\n            }\n            if (hadIndividualComplaint) {\n                return;\n            }\n            for (const [baseType, otherType] of [\n                [leftType, rightType],\n                [rightType, leftType],\n            ]) {\n                if (!allowNumberAndString &&\n                    isTypeFlagSetInUnion(baseType, ts.TypeFlags.StringLike) &&\n                    isTypeFlagSetInUnion(otherType, ts.TypeFlags.NumberLike | ts.TypeFlags.BigIntLike)) {\n                    return context.report({\n                        node,\n                        messageId: 'mismatched',\n                        data: {\n                            left: typeChecker.typeToString(leftType),\n                            right: typeChecker.typeToString(rightType),\n                            stringLike,\n                        },\n                    });\n                }\n                if (isTypeFlagSetInUnion(baseType, ts.TypeFlags.NumberLike) &&\n                    isTypeFlagSetInUnion(otherType, ts.TypeFlags.BigIntLike)) {\n                    return context.report({\n                        node,\n                        messageId: 'bigintAndNumber',\n                        data: {\n                            left: typeChecker.typeToString(leftType),\n                            right: typeChecker.typeToString(rightType),\n                        },\n                    });\n                }\n            }\n        }\n        return {\n            \"BinaryExpression[operator='+']\": checkPlusOperands,\n            ...(!skipCompoundAssignments && {\n                \"AssignmentExpression[operator='+=']\"(node) {\n                    checkPlusOperands(node);\n                },\n            }),\n        };\n    },\n});\nfunction isDeeplyObjectType(type) {\n    return type.isIntersection()\n        ? tsutils.intersectionTypeParts(type).every(tsutils.isObjectType)\n        : tsutils.unionTypeParts(type).every(tsutils.isObjectType);\n}\nfunction isTypeFlagSetInUnion(type, flag) {\n    return tsutils\n        .unionTypeParts(type)\n        .some(subType => tsutils.isTypeFlagSet(subType, flag));\n}\n"
        }
    ]
}