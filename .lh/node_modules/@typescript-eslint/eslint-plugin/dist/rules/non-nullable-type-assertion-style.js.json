{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/non-nullable-type-assertion-style.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'non-nullable-type-assertion-style',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Enforce non-null assertions over explicit type assertions',\n            recommended: 'stylistic',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            preferNonNullAssertion: 'Use a ! assertion to more succinctly remove null and undefined from the type.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const getTypesIfNotLoose = (node) => {\n            const type = services.getTypeAtLocation(node);\n            if (tsutils.isTypeFlagSet(type, ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {\n                return undefined;\n            }\n            return tsutils.unionTypeParts(type);\n        };\n        const couldBeNullish = (type) => {\n            if (type.flags & ts.TypeFlags.TypeParameter) {\n                const constraint = type.getConstraint();\n                return constraint == null || couldBeNullish(constraint);\n            }\n            if (tsutils.isUnionType(type)) {\n                for (const part of type.types) {\n                    if (couldBeNullish(part)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return (type.flags & (ts.TypeFlags.Null | ts.TypeFlags.Undefined)) !== 0;\n        };\n        const sameTypeWithoutNullish = (assertedTypes, originalTypes) => {\n            const nonNullishOriginalTypes = originalTypes.filter(type => (type.flags & (ts.TypeFlags.Null | ts.TypeFlags.Undefined)) === 0);\n            if (nonNullishOriginalTypes.length === originalTypes.length) {\n                return false;\n            }\n            for (const assertedType of assertedTypes) {\n                if (couldBeNullish(assertedType) ||\n                    !nonNullishOriginalTypes.includes(assertedType)) {\n                    return false;\n                }\n            }\n            for (const originalType of nonNullishOriginalTypes) {\n                if (!assertedTypes.includes(originalType)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        const isConstAssertion = (node) => {\n            return (node.typeAnnotation.type === utils_1.AST_NODE_TYPES.TSTypeReference &&\n                node.typeAnnotation.typeName.type === utils_1.AST_NODE_TYPES.Identifier &&\n                node.typeAnnotation.typeName.name === 'const');\n        };\n        return {\n            'TSAsExpression, TSTypeAssertion'(node) {\n                if (isConstAssertion(node)) {\n                    return;\n                }\n                const originalTypes = getTypesIfNotLoose(node.expression);\n                if (!originalTypes) {\n                    return;\n                }\n                const assertedTypes = getTypesIfNotLoose(node.typeAnnotation);\n                if (!assertedTypes) {\n                    return;\n                }\n                if (sameTypeWithoutNullish(assertedTypes, originalTypes)) {\n                    const expressionSourceCode = context.sourceCode.getText(node.expression);\n                    const higherPrecedenceThanUnary = (0, util_1.getOperatorPrecedence)(services.esTreeNodeToTSNodeMap.get(node.expression).kind, ts.SyntaxKind.Unknown) > util_1.OperatorPrecedence.Unary;\n                    context.report({\n                        node,\n                        messageId: 'preferNonNullAssertion',\n                        fix(fixer) {\n                            return fixer.replaceText(node, higherPrecedenceThanUnary\n                                ? `${expressionSourceCode}!`\n                                : `(${expressionSourceCode})!`);\n                        },\n                    });\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}