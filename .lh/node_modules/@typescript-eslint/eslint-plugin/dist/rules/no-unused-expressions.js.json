{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unused-expressions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891970726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-unused-expressions');\nconst defaultOptions = [\n    {\n        allowShortCircuit: false,\n        allowTaggedTemplates: false,\n        allowTernary: false,\n    },\n];\nexports.default = (0, util_1.createRule)({\n    name: 'no-unused-expressions',\n    meta: {\n        type: 'suggestion',\n        defaultOptions,\n        docs: {\n            description: 'Disallow unused expressions',\n            extendsBaseRule: true,\n            recommended: 'recommended',\n        },\n        hasSuggestions: baseRule.meta.hasSuggestions,\n        messages: baseRule.meta.messages,\n        schema: baseRule.meta.schema,\n    },\n    defaultOptions,\n    create(context, [{ allowShortCircuit = false, allowTernary = false }]) {\n        const rules = baseRule.create(context);\n        function isValidExpression(node) {\n            if (allowShortCircuit && node.type === utils_1.AST_NODE_TYPES.LogicalExpression) {\n                return isValidExpression(node.right);\n            }\n            if (allowTernary && node.type === utils_1.AST_NODE_TYPES.ConditionalExpression) {\n                return (isValidExpression(node.alternate) &&\n                    isValidExpression(node.consequent));\n            }\n            return ((node.type === utils_1.AST_NODE_TYPES.ChainExpression &&\n                node.expression.type === utils_1.AST_NODE_TYPES.CallExpression) ||\n                node.type === utils_1.AST_NODE_TYPES.ImportExpression);\n        }\n        return {\n            ExpressionStatement(node) {\n                if (node.directive || isValidExpression(node.expression)) {\n                    return;\n                }\n                const expressionType = node.expression.type;\n                if (expressionType ===\n                    utils_1.TSESTree.AST_NODE_TYPES.TSInstantiationExpression ||\n                    expressionType === utils_1.TSESTree.AST_NODE_TYPES.TSAsExpression ||\n                    expressionType === utils_1.TSESTree.AST_NODE_TYPES.TSNonNullExpression ||\n                    expressionType === utils_1.TSESTree.AST_NODE_TYPES.TSTypeAssertion) {\n                    rules.ExpressionStatement({\n                        ...node,\n                        expression: node.expression.expression,\n                    });\n                    return;\n                }\n                rules.ExpressionStatement(node);\n            },\n        };\n    },\n});\n"
        }
    ]
}