{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-namespace.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891967397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-namespace',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow TypeScript namespaces',\n            recommended: 'recommended',\n        },\n        messages: {\n            moduleSyntaxIsPreferred: 'ES2015 module syntax is preferred over namespaces.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowDeclarations: {\n                        type: 'boolean',\n                        description: 'Whether to allow `declare` with custom TypeScript namespaces.',\n                    },\n                    allowDefinitionFiles: {\n                        type: 'boolean',\n                        description: 'Whether to allow `declare` with custom TypeScript namespaces inside definition files.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allowDeclarations: false,\n            allowDefinitionFiles: true,\n        },\n    ],\n    create(context, [{ allowDeclarations, allowDefinitionFiles }]) {\n        function isDeclaration(node) {\n            if (node.type === utils_1.AST_NODE_TYPES.TSModuleDeclaration && node.declare) {\n                return true;\n            }\n            return node.parent != null && isDeclaration(node.parent);\n        }\n        return {\n            \"TSModuleDeclaration[global!=true][id.type!='Literal']\"(node) {\n                if (node.parent.type === utils_1.AST_NODE_TYPES.TSModuleDeclaration ||\n                    (allowDefinitionFiles && (0, util_1.isDefinitionFile)(context.filename)) ||\n                    (allowDeclarations && isDeclaration(node))) {\n                    return;\n                }\n                context.report({\n                    node,\n                    messageId: 'moduleSyntaxIsPreferred',\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}