{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unsafe-member-access.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891970318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst util_1 = require(\"../util\");\nvar State;\n(function (State) {\n    State[State[\"Unsafe\"] = 1] = \"Unsafe\";\n    State[State[\"Safe\"] = 2] = \"Safe\";\n})(State || (State = {}));\nfunction createDataType(type) {\n    const isErrorType = tsutils.isIntrinsicErrorType(type);\n    return isErrorType ? '`error` typed' : '`any`';\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-unsafe-member-access',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow member access on a value with type `any`',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            unsafeComputedMemberAccess: 'Computed name {{property}} resolves to an {{type}} value.',\n            unsafeMemberExpression: 'Unsafe member access {{property}} on an {{type}} value.',\n            unsafeThisMemberExpression: [\n                'Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.',\n                'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.',\n            ].join('\\n'),\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const compilerOptions = services.program.getCompilerOptions();\n        const isNoImplicitThis = tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'noImplicitThis');\n        const stateCache = new Map();\n        function checkMemberExpression(node) {\n            const cachedState = stateCache.get(node);\n            if (cachedState) {\n                return cachedState;\n            }\n            if (node.object.type === utils_1.AST_NODE_TYPES.MemberExpression) {\n                const objectState = checkMemberExpression(node.object);\n                if (objectState === State.Unsafe) {\n                    // if the object is unsafe, we know this will be unsafe as well\n                    // we don't need to report, as we have already reported on the inner member expr\n                    stateCache.set(node, objectState);\n                    return objectState;\n                }\n            }\n            const type = services.getTypeAtLocation(node.object);\n            const state = (0, util_1.isTypeAnyType)(type) ? State.Unsafe : State.Safe;\n            stateCache.set(node, state);\n            if (state === State.Unsafe) {\n                const propertyName = context.sourceCode.getText(node.property);\n                let messageId = 'unsafeMemberExpression';\n                if (!isNoImplicitThis) {\n                    // `this.foo` or `this.foo[bar]`\n                    const thisExpression = (0, util_1.getThisExpression)(node);\n                    if (thisExpression &&\n                        (0, util_1.isTypeAnyType)((0, util_1.getConstrainedTypeAtLocation)(services, thisExpression))) {\n                        messageId = 'unsafeThisMemberExpression';\n                    }\n                }\n                context.report({\n                    node: node.property,\n                    messageId,\n                    data: {\n                        type: createDataType(type),\n                        property: node.computed ? `[${propertyName}]` : `.${propertyName}`,\n                    },\n                });\n            }\n            return state;\n        }\n        return {\n            // ignore MemberExpressions with ancestors of type `TSClassImplements` or `TSInterfaceHeritage`\n            'MemberExpression:not(TSClassImplements MemberExpression, TSInterfaceHeritage MemberExpression)': checkMemberExpression,\n            'MemberExpression[computed = true] > *.property'(node) {\n                if (\n                // x[1]\n                node.type === utils_1.AST_NODE_TYPES.Literal ||\n                    // x[1++] x[++x] etc\n                    // FUN FACT - **all** update expressions return type number, regardless of the argument's type,\n                    // because JS engines return NaN if there the argument is not a number.\n                    node.type === utils_1.AST_NODE_TYPES.UpdateExpression) {\n                    // perf optimizations - literals can obviously never be `any`\n                    return;\n                }\n                const type = services.getTypeAtLocation(node);\n                if ((0, util_1.isTypeAnyType)(type)) {\n                    const propertyName = context.sourceCode.getText(node);\n                    context.report({\n                        node,\n                        messageId: 'unsafeComputedMemberAccess',\n                        data: {\n                            type: createDataType(type),\n                            property: `[${propertyName}]`,\n                        },\n                    });\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}