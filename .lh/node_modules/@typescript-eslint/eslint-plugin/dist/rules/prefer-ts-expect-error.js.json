{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-ts-expect-error.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891974437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-ts-expect-error',\n    meta: {\n        type: 'problem',\n        deprecated: true,\n        docs: {\n            description: 'Enforce using `@ts-expect-error` over `@ts-ignore`',\n        },\n        fixable: 'code',\n        messages: {\n            preferExpectErrorComment: 'Use \"@ts-expect-error\" to ensure an error is actually being suppressed.',\n        },\n        replacedBy: ['@typescript-eslint/ban-ts-comment'],\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const tsIgnoreRegExpSingleLine = /^\\s*\\/?\\s*@ts-ignore/;\n        const tsIgnoreRegExpMultiLine = /^\\s*(?:\\/|\\*)*\\s*@ts-ignore/;\n        function isLineComment(comment) {\n            return comment.type === utils_1.AST_TOKEN_TYPES.Line;\n        }\n        function getLastCommentLine(comment) {\n            if (isLineComment(comment)) {\n                return comment.value;\n            }\n            // For multiline comments - we look at only the last line.\n            const commentlines = comment.value.split('\\n');\n            return commentlines[commentlines.length - 1];\n        }\n        function isValidTsIgnorePresent(comment) {\n            const line = getLastCommentLine(comment);\n            return isLineComment(comment)\n                ? tsIgnoreRegExpSingleLine.test(line)\n                : tsIgnoreRegExpMultiLine.test(line);\n        }\n        return {\n            Program() {\n                const comments = context.sourceCode.getAllComments();\n                comments.forEach(comment => {\n                    if (isValidTsIgnorePresent(comment)) {\n                        const lineCommentRuleFixer = (fixer) => fixer.replaceText(comment, `//${comment.value.replace('@ts-ignore', '@ts-expect-error')}`);\n                        const blockCommentRuleFixer = (fixer) => fixer.replaceText(comment, `/*${comment.value.replace('@ts-ignore', '@ts-expect-error')}*/`);\n                        context.report({\n                            node: comment,\n                            messageId: 'preferExpectErrorComment',\n                            fix: isLineComment(comment)\n                                ? lineCommentRuleFixer\n                                : blockCommentRuleFixer,\n                        });\n                    }\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}