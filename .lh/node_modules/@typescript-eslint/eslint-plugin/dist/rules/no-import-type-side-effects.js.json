{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-import-type-side-effects.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891965498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-import-type-side-effects',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers',\n        },\n        fixable: 'code',\n        messages: {\n            useTopLevelQualifier: 'TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        return {\n            'ImportDeclaration[importKind!=\"type\"]'(node) {\n                if (node.specifiers.length === 0) {\n                    return;\n                }\n                const specifiers = [];\n                for (const specifier of node.specifiers) {\n                    if (specifier.type !== utils_1.AST_NODE_TYPES.ImportSpecifier ||\n                        specifier.importKind !== 'type') {\n                        return;\n                    }\n                    specifiers.push(specifier);\n                }\n                context.report({\n                    node,\n                    messageId: 'useTopLevelQualifier',\n                    fix(fixer) {\n                        const fixes = [];\n                        for (const specifier of specifiers) {\n                            const qualifier = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(specifier, util_1.isTypeKeyword), util_1.NullThrowsReasons.MissingToken('type keyword', 'import specifier'));\n                            fixes.push(fixer.removeRange([\n                                qualifier.range[0],\n                                specifier.imported.range[0],\n                            ]));\n                        }\n                        const importKeyword = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(node, util_1.isImportKeyword), util_1.NullThrowsReasons.MissingToken('import keyword', 'import'));\n                        fixes.push(fixer.insertTextAfter(importKeyword, ' type'));\n                        return fixes;\n                    },\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}