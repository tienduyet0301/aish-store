{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/enum-utils/shared.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891961161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEnumLiterals = getEnumLiterals;\nexports.getEnumTypes = getEnumTypes;\nexports.getEnumKeyForLiteral = getEnumKeyForLiteral;\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../../util\");\n/*\n * If passed an enum member, returns the type of the parent. Otherwise,\n * returns itself.\n *\n * For example:\n * - `Fruit` --> `Fruit`\n * - `Fruit.Apple` --> `Fruit`\n */\nfunction getBaseEnumType(typeChecker, type) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const symbol = type.getSymbol();\n    if (!tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.EnumMember)) {\n        return type;\n    }\n    return typeChecker.getTypeAtLocation(symbol.valueDeclaration.parent);\n}\n/**\n * Retrieve only the Enum literals from a type. for example:\n * - 123 --> []\n * - {} --> []\n * - Fruit.Apple --> [Fruit.Apple]\n * - Fruit.Apple | Vegetable.Lettuce --> [Fruit.Apple, Vegetable.Lettuce]\n * - Fruit.Apple | Vegetable.Lettuce | 123 --> [Fruit.Apple, Vegetable.Lettuce]\n * - T extends Fruit --> [Fruit]\n */\nfunction getEnumLiterals(type) {\n    return tsutils\n        .unionTypeParts(type)\n        .filter((subType) => (0, util_1.isTypeFlagSet)(subType, ts.TypeFlags.EnumLiteral));\n}\n/**\n * A type can have 0 or more enum types. For example:\n * - 123 --> []\n * - {} --> []\n * - Fruit.Apple --> [Fruit]\n * - Fruit.Apple | Vegetable.Lettuce --> [Fruit, Vegetable]\n * - Fruit.Apple | Vegetable.Lettuce | 123 --> [Fruit, Vegetable]\n * - T extends Fruit --> [Fruit]\n */\nfunction getEnumTypes(typeChecker, type) {\n    return getEnumLiterals(type).map(type => getBaseEnumType(typeChecker, type));\n}\n/**\n * Returns the enum key that matches the given literal node, or null if none\n * match. For example:\n * ```ts\n * enum Fruit {\n *   Apple = 'apple',\n *   Banana = 'banana',\n * }\n *\n * getEnumKeyForLiteral([Fruit.Apple, Fruit.Banana], 'apple') --> 'Fruit.Apple'\n * getEnumKeyForLiteral([Fruit.Apple, Fruit.Banana], 'banana') --> 'Fruit.Banana'\n * getEnumKeyForLiteral([Fruit.Apple, Fruit.Banana], 'cherry') --> null\n * ```\n */\nfunction getEnumKeyForLiteral(enumLiterals, literal) {\n    for (const enumLiteral of enumLiterals) {\n        if (enumLiteral.value === literal) {\n            const { symbol } = enumLiteral;\n            const memberDeclaration = symbol.valueDeclaration;\n            const enumDeclaration = memberDeclaration.parent;\n            const memberNameIdentifier = memberDeclaration.name;\n            const enumName = enumDeclaration.name.text;\n            switch (memberNameIdentifier.kind) {\n                case ts.SyntaxKind.Identifier:\n                    return `${enumName}.${memberNameIdentifier.text}`;\n                case ts.SyntaxKind.StringLiteral: {\n                    const memberName = memberNameIdentifier.text.replaceAll(\"'\", \"\\\\'\");\n                    return `${enumName}['${memberName}']`;\n                }\n                case ts.SyntaxKind.ComputedPropertyName:\n                    return `${enumName}[${memberNameIdentifier.expression.getText()}]`;\n                default:\n                    break;\n            }\n        }\n    }\n    return null;\n}\n"
        }
    ]
}