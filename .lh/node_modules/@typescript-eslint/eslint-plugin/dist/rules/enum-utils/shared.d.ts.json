{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/enum-utils/shared.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891961084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as ts from 'typescript';\n/**\n * Retrieve only the Enum literals from a type. for example:\n * - 123 --> []\n * - {} --> []\n * - Fruit.Apple --> [Fruit.Apple]\n * - Fruit.Apple | Vegetable.Lettuce --> [Fruit.Apple, Vegetable.Lettuce]\n * - Fruit.Apple | Vegetable.Lettuce | 123 --> [Fruit.Apple, Vegetable.Lettuce]\n * - T extends Fruit --> [Fruit]\n */\nexport declare function getEnumLiterals(type: ts.Type): ts.LiteralType[];\n/**\n * A type can have 0 or more enum types. For example:\n * - 123 --> []\n * - {} --> []\n * - Fruit.Apple --> [Fruit]\n * - Fruit.Apple | Vegetable.Lettuce --> [Fruit, Vegetable]\n * - Fruit.Apple | Vegetable.Lettuce | 123 --> [Fruit, Vegetable]\n * - T extends Fruit --> [Fruit]\n */\nexport declare function getEnumTypes(typeChecker: ts.TypeChecker, type: ts.Type): ts.Type[];\n/**\n * Returns the enum key that matches the given literal node, or null if none\n * match. For example:\n * ```ts\n * enum Fruit {\n *   Apple = 'apple',\n *   Banana = 'banana',\n * }\n *\n * getEnumKeyForLiteral([Fruit.Apple, Fruit.Banana], 'apple') --> 'Fruit.Apple'\n * getEnumKeyForLiteral([Fruit.Apple, Fruit.Banana], 'banana') --> 'Fruit.Banana'\n * getEnumKeyForLiteral([Fruit.Apple, Fruit.Banana], 'cherry') --> null\n * ```\n */\nexport declare function getEnumKeyForLiteral(enumLiterals: ts.LiteralType[], literal: unknown): string | null;\n//# sourceMappingURL=shared.d.ts.map"
        }
    ]
}