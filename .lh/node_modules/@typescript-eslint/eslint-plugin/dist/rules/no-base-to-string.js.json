{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-base-to-string.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891963120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nvar Usefulness;\n(function (Usefulness) {\n    Usefulness[\"Always\"] = \"always\";\n    Usefulness[\"Never\"] = \"will\";\n    Usefulness[\"Sometimes\"] = \"may\";\n})(Usefulness || (Usefulness = {}));\nexports.default = (0, util_1.createRule)({\n    name: 'no-base-to-string',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            baseArrayJoin: \"Using `join()` for {{name}} {{certainty}} use Object's default stringification format ('[object Object]') when stringified.\",\n            baseToString: \"'{{name}}' {{certainty}} use Object's default stringification format ('[object Object]') when stringified.\",\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    ignoredTypeNames: {\n                        type: 'array',\n                        description: 'Stringified regular expressions of type names to ignore.',\n                        items: {\n                            type: 'string',\n                        },\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            ignoredTypeNames: ['Error', 'RegExp', 'URL', 'URLSearchParams'],\n        },\n    ],\n    create(context, [option]) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        const ignoredTypeNames = option.ignoredTypeNames ?? [];\n        function checkExpression(node, type) {\n            if (node.type === utils_1.AST_NODE_TYPES.Literal) {\n                return;\n            }\n            const certainty = collectToStringCertainty(type ?? services.getTypeAtLocation(node), new Set());\n            if (certainty === Usefulness.Always) {\n                return;\n            }\n            context.report({\n                node,\n                messageId: 'baseToString',\n                data: {\n                    name: context.sourceCode.getText(node),\n                    certainty,\n                },\n            });\n        }\n        function checkExpressionForArrayJoin(node, type) {\n            const certainty = collectJoinCertainty(type, new Set());\n            if (certainty === Usefulness.Always) {\n                return;\n            }\n            context.report({\n                node,\n                messageId: 'baseArrayJoin',\n                data: {\n                    name: context.sourceCode.getText(node),\n                    certainty,\n                },\n            });\n        }\n        function collectUnionTypeCertainty(type, collectSubTypeCertainty) {\n            const certainties = type.types.map(t => collectSubTypeCertainty(t));\n            if (certainties.every(certainty => certainty === Usefulness.Never)) {\n                return Usefulness.Never;\n            }\n            if (certainties.every(certainty => certainty === Usefulness.Always)) {\n                return Usefulness.Always;\n            }\n            return Usefulness.Sometimes;\n        }\n        function collectIntersectionTypeCertainty(type, collectSubTypeCertainty) {\n            for (const subType of type.types) {\n                const subtypeUsefulness = collectSubTypeCertainty(subType);\n                if (subtypeUsefulness === Usefulness.Always) {\n                    return Usefulness.Always;\n                }\n            }\n            return Usefulness.Never;\n        }\n        function collectTupleCertainty(type, visited) {\n            const typeArgs = checker.getTypeArguments(type);\n            const certainties = typeArgs.map(t => collectToStringCertainty(t, visited));\n            if (certainties.some(certainty => certainty === Usefulness.Never)) {\n                return Usefulness.Never;\n            }\n            if (certainties.some(certainty => certainty === Usefulness.Sometimes)) {\n                return Usefulness.Sometimes;\n            }\n            return Usefulness.Always;\n        }\n        function collectArrayCertainty(type, visited) {\n            const elemType = (0, util_1.nullThrows)(type.getNumberIndexType(), 'array should have number index type');\n            return collectToStringCertainty(elemType, visited);\n        }\n        function collectJoinCertainty(type, visited) {\n            if (tsutils.isUnionType(type)) {\n                return collectUnionTypeCertainty(type, t => collectJoinCertainty(t, visited));\n            }\n            if (tsutils.isIntersectionType(type)) {\n                return collectIntersectionTypeCertainty(type, t => collectJoinCertainty(t, visited));\n            }\n            if (checker.isTupleType(type)) {\n                return collectTupleCertainty(type, visited);\n            }\n            if (checker.isArrayType(type)) {\n                return collectArrayCertainty(type, visited);\n            }\n            return Usefulness.Always;\n        }\n        function collectToStringCertainty(type, visited) {\n            if (visited.has(type)) {\n                // don't report if this is a self referencing array or tuple type\n                return Usefulness.Always;\n            }\n            if (tsutils.isTypeParameter(type)) {\n                const constraint = type.getConstraint();\n                if (constraint) {\n                    return collectToStringCertainty(constraint, visited);\n                }\n                // unconstrained generic means `unknown`\n                return Usefulness.Always;\n            }\n            // the Boolean type definition missing toString()\n            if (type.flags & ts.TypeFlags.Boolean ||\n                type.flags & ts.TypeFlags.BooleanLiteral) {\n                return Usefulness.Always;\n            }\n            if (ignoredTypeNames.includes((0, util_1.getTypeName)(checker, type))) {\n                return Usefulness.Always;\n            }\n            if (type.isIntersection()) {\n                return collectIntersectionTypeCertainty(type, t => collectToStringCertainty(t, visited));\n            }\n            if (type.isUnion()) {\n                return collectUnionTypeCertainty(type, t => collectToStringCertainty(t, visited));\n            }\n            if (checker.isTupleType(type)) {\n                return collectTupleCertainty(type, new Set([...visited, type]));\n            }\n            if (checker.isArrayType(type)) {\n                return collectArrayCertainty(type, new Set([...visited, type]));\n            }\n            const toString = checker.getPropertyOfType(type, 'toString') ??\n                checker.getPropertyOfType(type, 'toLocaleString');\n            if (!toString) {\n                // e.g. any/unknown\n                return Usefulness.Always;\n            }\n            const declarations = toString.getDeclarations();\n            if (declarations == null || declarations.length !== 1) {\n                // If there are multiple declarations, at least one of them must not be\n                // the default object toString.\n                //\n                // This may only matter for older versions of TS\n                // see https://github.com/typescript-eslint/typescript-eslint/issues/8585\n                return Usefulness.Always;\n            }\n            const declaration = declarations[0];\n            const isBaseToString = ts.isInterfaceDeclaration(declaration.parent) &&\n                declaration.parent.name.text === 'Object';\n            return isBaseToString ? Usefulness.Never : Usefulness.Always;\n        }\n        function isBuiltInStringCall(node) {\n            if (node.callee.type === utils_1.AST_NODE_TYPES.Identifier &&\n                // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum\n                node.callee.name === 'String' &&\n                node.arguments[0]) {\n                const scope = context.sourceCode.getScope(node);\n                // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum\n                const variable = scope.set.get('String');\n                return !variable?.defs.length;\n            }\n            return false;\n        }\n        return {\n            'AssignmentExpression[operator = \"+=\"], BinaryExpression[operator = \"+\"]'(node) {\n                const leftType = services.getTypeAtLocation(node.left);\n                const rightType = services.getTypeAtLocation(node.right);\n                if ((0, util_1.getTypeName)(checker, leftType) === 'string') {\n                    checkExpression(node.right, rightType);\n                }\n                else if ((0, util_1.getTypeName)(checker, rightType) === 'string' &&\n                    node.left.type !== utils_1.AST_NODE_TYPES.PrivateIdentifier) {\n                    checkExpression(node.left, leftType);\n                }\n            },\n            CallExpression(node) {\n                if (isBuiltInStringCall(node) &&\n                    node.arguments[0].type !== utils_1.AST_NODE_TYPES.SpreadElement) {\n                    checkExpression(node.arguments[0]);\n                }\n            },\n            'CallExpression > MemberExpression.callee > Identifier[name = \"join\"].property'(node) {\n                const memberExpr = node.parent;\n                const type = (0, util_1.getConstrainedTypeAtLocation)(services, memberExpr.object);\n                checkExpressionForArrayJoin(memberExpr.object, type);\n            },\n            'CallExpression > MemberExpression.callee > Identifier[name = /^(toLocaleString|toString)$/].property'(node) {\n                const memberExpr = node.parent;\n                checkExpression(memberExpr.object);\n            },\n            TemplateLiteral(node) {\n                if (node.parent.type === utils_1.AST_NODE_TYPES.TaggedTemplateExpression) {\n                    return;\n                }\n                for (const expression of node.expressions) {\n                    checkExpression(expression);\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}