{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-non-null-asserted-nullish-coalescing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891967541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst scope_manager_1 = require(\"@typescript-eslint/scope-manager\");\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nfunction hasAssignmentBeforeNode(variable, node) {\n    return (variable.references.some(ref => ref.isWrite() && ref.identifier.range[1] < node.range[1]) ||\n        variable.defs.some(def => isDefinitionWithAssignment(def) && def.node.range[1] < node.range[1]));\n}\nfunction isDefinitionWithAssignment(definition) {\n    if (definition.type !== scope_manager_1.DefinitionType.Variable) {\n        return false;\n    }\n    const variableDeclarator = definition.node;\n    return variableDeclarator.definite || variableDeclarator.init != null;\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-non-null-asserted-nullish-coalescing',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow non-null assertions in the left operand of a nullish coalescing operator',\n            recommended: 'strict',\n        },\n        hasSuggestions: true,\n        messages: {\n            noNonNullAssertedNullishCoalescing: 'The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.',\n            suggestRemovingNonNull: 'Remove the non-null assertion.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        return {\n            'LogicalExpression[operator = \"??\"] > TSNonNullExpression.left'(node) {\n                if (node.expression.type === utils_1.TSESTree.AST_NODE_TYPES.Identifier) {\n                    const scope = context.sourceCode.getScope(node);\n                    const identifier = node.expression;\n                    const variable = utils_1.ASTUtils.findVariable(scope, identifier.name);\n                    if (variable && !hasAssignmentBeforeNode(variable, node)) {\n                        return;\n                    }\n                }\n                context.report({\n                    node,\n                    messageId: 'noNonNullAssertedNullishCoalescing',\n                    /*\n                    Use a suggestion instead of a fixer, because this can break type checks.\n                    The resulting type of the nullish coalesce is only influenced by the right operand if the left operand can be `null` or `undefined`.\n                    After removing the non-null assertion the type of the left operand might contain `null` or `undefined` and then the type of the right operand\n                    might change the resulting type of the nullish coalesce.\n                    See the following example:\n          \n                    function test(x?: string): string {\n                      const bar = x! ?? false; // type analysis reports `bar` has type `string`\n                      //          x  ?? false; // type analysis reports `bar` has type `string | false`\n                      return bar;\n                    }\n                    */\n                    suggest: [\n                        {\n                            messageId: 'suggestRemovingNonNull',\n                            fix(fixer) {\n                                const exclamationMark = (0, util_1.nullThrows)(context.sourceCode.getLastToken(node, utils_1.ASTUtils.isNonNullAssertionPunctuator), util_1.NullThrowsReasons.MissingToken('!', 'Non-null Assertion'));\n                                return fixer.remove(exclamationMark);\n                            },\n                        },\n                    ],\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}