{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-mixed-enums.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891967059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst scope_manager_1 = require(\"@typescript-eslint/scope-manager\");\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nvar AllowedType;\n(function (AllowedType) {\n    AllowedType[AllowedType[\"Number\"] = 0] = \"Number\";\n    AllowedType[AllowedType[\"String\"] = 1] = \"String\";\n    AllowedType[AllowedType[\"Unknown\"] = 2] = \"Unknown\";\n})(AllowedType || (AllowedType = {}));\nexports.default = (0, util_1.createRule)({\n    name: 'no-mixed-enums',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow enums from having both number and string members',\n            recommended: 'strict',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            mixed: `Mixing number and string enums can be confusing.`,\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const parserServices = (0, util_1.getParserServices)(context);\n        const typeChecker = parserServices.program.getTypeChecker();\n        function collectNodeDefinitions(node) {\n            const { name } = node.id;\n            const found = {\n                imports: [],\n                previousSibling: undefined,\n            };\n            let scope = context.sourceCode.getScope(node);\n            for (const definition of scope.upper?.set.get(name)?.defs ?? []) {\n                if (definition.node.type === utils_1.AST_NODE_TYPES.TSEnumDeclaration &&\n                    definition.node.range[0] < node.range[0] &&\n                    definition.node.body.members.length > 0) {\n                    found.previousSibling = definition.node;\n                    break;\n                }\n            }\n            while (scope) {\n                scope.set.get(name)?.defs.forEach(definition => {\n                    if (definition.type === scope_manager_1.DefinitionType.ImportBinding) {\n                        found.imports.push(definition.node);\n                    }\n                });\n                scope = scope.upper;\n            }\n            return found;\n        }\n        function getAllowedTypeForNode(node) {\n            return tsutils.isTypeFlagSet(typeChecker.getTypeAtLocation(node), ts.TypeFlags.StringLike)\n                ? AllowedType.String\n                : AllowedType.Number;\n        }\n        function getTypeFromImported(imported) {\n            const type = typeChecker.getTypeAtLocation(parserServices.esTreeNodeToTSNodeMap.get(imported));\n            const valueDeclaration = type.getSymbol()?.valueDeclaration;\n            if (!valueDeclaration ||\n                !ts.isEnumDeclaration(valueDeclaration) ||\n                valueDeclaration.members.length === 0) {\n                return undefined;\n            }\n            return getAllowedTypeForNode(valueDeclaration.members[0]);\n        }\n        function getMemberType(member) {\n            if (!member.initializer) {\n                return AllowedType.Number;\n            }\n            switch (member.initializer.type) {\n                case utils_1.AST_NODE_TYPES.Literal:\n                    switch (typeof member.initializer.value) {\n                        case 'number':\n                            return AllowedType.Number;\n                        case 'string':\n                            return AllowedType.String;\n                        default:\n                            return AllowedType.Unknown;\n                    }\n                case utils_1.AST_NODE_TYPES.TemplateLiteral:\n                    return AllowedType.String;\n                default:\n                    return getAllowedTypeForNode(parserServices.esTreeNodeToTSNodeMap.get(member.initializer));\n            }\n        }\n        function getDesiredTypeForDefinition(node) {\n            const { imports, previousSibling } = collectNodeDefinitions(node);\n            // Case: Merged ambiently via module augmentation\n            // import { MyEnum } from 'other-module';\n            // declare module 'other-module' {\n            //   enum MyEnum { A }\n            // }\n            for (const imported of imports) {\n                const typeFromImported = getTypeFromImported(imported);\n                if (typeFromImported != null) {\n                    return typeFromImported;\n                }\n            }\n            // Case: Multiple enum declarations in the same file\n            // enum MyEnum { A }\n            // enum MyEnum { B }\n            if (previousSibling) {\n                return getMemberType(previousSibling.body.members[0]);\n            }\n            // Case: Namespace declaration merging\n            // namespace MyNamespace {\n            //   export enum MyEnum { A }\n            // }\n            // namespace MyNamespace {\n            //   export enum MyEnum { B }\n            // }\n            if (node.parent.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration &&\n                node.parent.parent.type === utils_1.AST_NODE_TYPES.TSModuleBlock) {\n                // https://github.com/typescript-eslint/typescript-eslint/issues/8352\n                // TODO: We don't need to dip into the TypeScript type checker here!\n                // Merged namespaces must all exist in the same file.\n                // We could instead compare this file's nodes to find the merges.\n                const tsNode = parserServices.esTreeNodeToTSNodeMap.get(node.id);\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const declarations = typeChecker\n                    .getSymbolAtLocation(tsNode)\n                    .getDeclarations();\n                const [{ initializer }] = declarations[0]\n                    .members;\n                return initializer &&\n                    tsutils.isTypeFlagSet(typeChecker.getTypeAtLocation(initializer), ts.TypeFlags.StringLike)\n                    ? AllowedType.String\n                    : AllowedType.Number;\n            }\n            // Finally, we default to the type of the first enum member\n            return getMemberType(node.body.members[0]);\n        }\n        return {\n            TSEnumDeclaration(node) {\n                if (!node.body.members.length) {\n                    return;\n                }\n                let desiredType = getDesiredTypeForDefinition(node);\n                if (desiredType === ts.TypeFlags.Unknown) {\n                    return;\n                }\n                for (const member of node.body.members) {\n                    const currentType = getMemberType(member);\n                    if (currentType === AllowedType.Unknown) {\n                        return;\n                    }\n                    if (currentType === AllowedType.Number) {\n                        desiredType ??= currentType;\n                    }\n                    if (currentType !== desiredType) {\n                        context.report({\n                            node: member.initializer ?? member,\n                            messageId: 'mixed',\n                        });\n                        return;\n                    }\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}