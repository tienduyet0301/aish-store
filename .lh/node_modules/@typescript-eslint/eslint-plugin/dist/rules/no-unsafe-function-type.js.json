{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unsafe-function-type.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891970219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unsafe-function-type',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow using the unsafe built-in Function type',\n            recommended: 'recommended',\n        },\n        fixable: 'code',\n        messages: {\n            bannedFunctionType: [\n                'The `Function` type accepts any function-like value.',\n                'Prefer explicitly defining any function parameters and return type.',\n            ].join('\\n'),\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        function checkBannedTypes(node) {\n            if (node.type === utils_1.AST_NODE_TYPES.Identifier &&\n                node.name === 'Function' &&\n                (0, util_1.isReferenceToGlobalFunction)('Function', node, context.sourceCode)) {\n                context.report({\n                    node,\n                    messageId: 'bannedFunctionType',\n                });\n            }\n        }\n        return {\n            TSClassImplements(node) {\n                checkBannedTypes(node.expression);\n            },\n            TSInterfaceHeritage(node) {\n                checkBannedTypes(node.expression);\n            },\n            TSTypeReference(node) {\n                checkBannedTypes(node.typeName);\n            },\n        };\n    },\n});\n"
        }
    ]
}