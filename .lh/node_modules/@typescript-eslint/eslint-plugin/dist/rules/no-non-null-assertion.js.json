{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-non-null-assertion.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891967799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-non-null-assertion',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow non-null assertions using the `!` postfix operator',\n            recommended: 'strict',\n        },\n        hasSuggestions: true,\n        messages: {\n            noNonNull: 'Forbidden non-null assertion.',\n            suggestOptionalChain: 'Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        return {\n            TSNonNullExpression(node) {\n                const suggest = [];\n                // it always exists in non-null assertion\n                const nonNullOperator = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(node.expression, util_1.isNonNullAssertionPunctuator), util_1.NullThrowsReasons.MissingToken('!', 'expression'));\n                function replaceTokenWithOptional() {\n                    return fixer => fixer.replaceText(nonNullOperator, '?.');\n                }\n                function removeToken() {\n                    return fixer => fixer.remove(nonNullOperator);\n                }\n                if (node.parent.type === utils_1.AST_NODE_TYPES.MemberExpression &&\n                    node.parent.object === node) {\n                    if (!node.parent.optional) {\n                        if (node.parent.computed) {\n                            // it is x![y]?.z\n                            suggest.push({\n                                messageId: 'suggestOptionalChain',\n                                fix: replaceTokenWithOptional(),\n                            });\n                        }\n                        else {\n                            // it is x!.y?.z\n                            suggest.push({\n                                messageId: 'suggestOptionalChain',\n                                fix(fixer) {\n                                    // x!.y?.z\n                                    //   ^ punctuator\n                                    const punctuator = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(nonNullOperator), util_1.NullThrowsReasons.MissingToken('.', '!'));\n                                    return [\n                                        fixer.remove(nonNullOperator),\n                                        fixer.insertTextBefore(punctuator, '?'),\n                                    ];\n                                },\n                            });\n                        }\n                    }\n                    else {\n                        // it is x!?.[y].z or  x!?.y.z\n                        suggest.push({\n                            messageId: 'suggestOptionalChain',\n                            fix: removeToken(),\n                        });\n                    }\n                }\n                else if (node.parent.type === utils_1.AST_NODE_TYPES.CallExpression &&\n                    node.parent.callee === node) {\n                    if (!node.parent.optional) {\n                        // it is x.y?.z!()\n                        suggest.push({\n                            messageId: 'suggestOptionalChain',\n                            fix: replaceTokenWithOptional(),\n                        });\n                    }\n                    else {\n                        // it is x.y.z!?.()\n                        suggest.push({\n                            messageId: 'suggestOptionalChain',\n                            fix: removeToken(),\n                        });\n                    }\n                }\n                context.report({\n                    node,\n                    messageId: 'noNonNull',\n                    suggest,\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}