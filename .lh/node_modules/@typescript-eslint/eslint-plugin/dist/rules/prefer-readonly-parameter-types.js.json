{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-readonly-parameter-types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891973404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-readonly-parameter-types',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            shouldBeReadonly: 'Parameter should be a read only type.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allow: {\n                        ...util_1.readonlynessOptionsSchema.properties.allow,\n                        description: 'An array of type specifiers to ignore.',\n                    },\n                    checkParameterProperties: {\n                        type: 'boolean',\n                        description: 'Whether to check class parameter properties.',\n                    },\n                    ignoreInferredTypes: {\n                        type: 'boolean',\n                        description: \"Whether to ignore parameters which don't explicitly specify a type.\",\n                    },\n                    treatMethodsAsReadonly: {\n                        ...util_1.readonlynessOptionsSchema.properties.treatMethodsAsReadonly,\n                        description: 'Whether to treat all mutable methods as though they are readonly.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allow: util_1.readonlynessOptionsDefaults.allow,\n            checkParameterProperties: true,\n            ignoreInferredTypes: false,\n            treatMethodsAsReadonly: util_1.readonlynessOptionsDefaults.treatMethodsAsReadonly,\n        },\n    ],\n    create(context, [{ allow, checkParameterProperties, ignoreInferredTypes, treatMethodsAsReadonly, },]) {\n        const services = (0, util_1.getParserServices)(context);\n        return {\n            [[\n                utils_1.AST_NODE_TYPES.ArrowFunctionExpression,\n                utils_1.AST_NODE_TYPES.FunctionDeclaration,\n                utils_1.AST_NODE_TYPES.FunctionExpression,\n                utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration,\n                utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration,\n                utils_1.AST_NODE_TYPES.TSDeclareFunction,\n                utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression,\n                utils_1.AST_NODE_TYPES.TSFunctionType,\n                utils_1.AST_NODE_TYPES.TSMethodSignature,\n            ].join(', ')](node) {\n                for (const param of node.params) {\n                    if (!checkParameterProperties &&\n                        param.type === utils_1.AST_NODE_TYPES.TSParameterProperty) {\n                        continue;\n                    }\n                    const actualParam = param.type === utils_1.AST_NODE_TYPES.TSParameterProperty\n                        ? param.parameter\n                        : param;\n                    if (ignoreInferredTypes && actualParam.typeAnnotation == null) {\n                        continue;\n                    }\n                    const type = services.getTypeAtLocation(actualParam);\n                    const isReadOnly = (0, util_1.isTypeReadonly)(services.program, type, {\n                        allow,\n                        treatMethodsAsReadonly: !!treatMethodsAsReadonly,\n                    });\n                    if (!isReadOnly) {\n                        context.report({\n                            node: actualParam,\n                            messageId: 'shouldBeReadonly',\n                        });\n                    }\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}