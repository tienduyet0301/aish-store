{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/default-param-last.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891960928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'default-param-last',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Enforce default parameters to be last',\n            extendsBaseRule: true,\n        },\n        messages: {\n            shouldBeLast: 'Default parameters should be last.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        /**\n         * checks if node is optional parameter\n         * @param node the node to be evaluated\n         * @private\n         */\n        function isOptionalParam(node) {\n            return ((node.type === utils_1.AST_NODE_TYPES.ArrayPattern ||\n                node.type === utils_1.AST_NODE_TYPES.AssignmentPattern ||\n                node.type === utils_1.AST_NODE_TYPES.Identifier ||\n                node.type === utils_1.AST_NODE_TYPES.ObjectPattern ||\n                node.type === utils_1.AST_NODE_TYPES.RestElement) &&\n                node.optional);\n        }\n        /**\n         * checks if node is plain parameter\n         * @param node the node to be evaluated\n         * @private\n         */\n        function isPlainParam(node) {\n            return !(node.type === utils_1.AST_NODE_TYPES.AssignmentPattern ||\n                node.type === utils_1.AST_NODE_TYPES.RestElement ||\n                isOptionalParam(node));\n        }\n        function checkDefaultParamLast(node) {\n            let hasSeenPlainParam = false;\n            for (let i = node.params.length - 1; i >= 0; i--) {\n                const current = node.params[i];\n                const param = current.type === utils_1.AST_NODE_TYPES.TSParameterProperty\n                    ? current.parameter\n                    : current;\n                if (isPlainParam(param)) {\n                    hasSeenPlainParam = true;\n                    continue;\n                }\n                if (hasSeenPlainParam &&\n                    (isOptionalParam(param) ||\n                        param.type === utils_1.AST_NODE_TYPES.AssignmentPattern)) {\n                    context.report({ node: current, messageId: 'shouldBeLast' });\n                }\n            }\n        }\n        return {\n            ArrowFunctionExpression: checkDefaultParamLast,\n            FunctionDeclaration: checkDefaultParamLast,\n            FunctionExpression: checkDefaultParamLast,\n        };\n    },\n});\n"
        }
    ]
}