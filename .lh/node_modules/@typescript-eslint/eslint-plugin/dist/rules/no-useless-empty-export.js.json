{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-useless-empty-export.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nfunction isEmptyExport(node) {\n    return (node.type === utils_1.AST_NODE_TYPES.ExportNamedDeclaration &&\n        node.specifiers.length === 0 &&\n        !node.declaration);\n}\nconst exportOrImportNodeTypes = new Set([\n    utils_1.AST_NODE_TYPES.ExportAllDeclaration,\n    utils_1.AST_NODE_TYPES.ExportDefaultDeclaration,\n    utils_1.AST_NODE_TYPES.ExportNamedDeclaration,\n    utils_1.AST_NODE_TYPES.ExportSpecifier,\n    utils_1.AST_NODE_TYPES.ImportDeclaration,\n    utils_1.AST_NODE_TYPES.TSExportAssignment,\n    utils_1.AST_NODE_TYPES.TSImportEqualsDeclaration,\n]);\nexports.default = (0, util_1.createRule)({\n    name: 'no-useless-empty-export',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: \"Disallow empty exports that don't change anything in a module file\",\n        },\n        fixable: 'code',\n        hasSuggestions: false,\n        messages: {\n            uselessExport: 'Empty export does nothing and can be removed.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        // In a definition file, export {} is necessary to make the module properly\n        // encapsulated, even when there are other exports\n        // https://github.com/typescript-eslint/typescript-eslint/issues/4975\n        if ((0, util_1.isDefinitionFile)(context.filename)) {\n            return {};\n        }\n        function checkNode(node) {\n            if (!Array.isArray(node.body)) {\n                return;\n            }\n            const emptyExports = [];\n            let foundOtherExport = false;\n            for (const statement of node.body) {\n                if (isEmptyExport(statement)) {\n                    emptyExports.push(statement);\n                }\n                else if (exportOrImportNodeTypes.has(statement.type)) {\n                    foundOtherExport = true;\n                }\n            }\n            if (foundOtherExport) {\n                for (const emptyExport of emptyExports) {\n                    context.report({\n                        node: emptyExport,\n                        messageId: 'uselessExport',\n                        fix: fixer => fixer.remove(emptyExport),\n                    });\n                }\n            }\n        }\n        return {\n            Program: checkNode,\n            TSModuleDeclaration: checkNode,\n        };\n    },\n});\n"
        }
    ]
}