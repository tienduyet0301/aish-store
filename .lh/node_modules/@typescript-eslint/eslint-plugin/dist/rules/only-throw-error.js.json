{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/only-throw-error.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'only-throw-error',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow throwing non-`Error` values as exceptions',\n            extendsBaseRule: 'no-throw-literal',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            object: 'Expected an error object to be thrown.',\n            undef: 'Do not throw undefined.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allow: {\n                        ...util_1.typeOrValueSpecifiersSchema,\n                        description: 'Type specifiers that can be thrown.',\n                    },\n                    allowThrowingAny: {\n                        type: 'boolean',\n                        description: 'Whether to always allow throwing values typed as `any`.',\n                    },\n                    allowThrowingUnknown: {\n                        type: 'boolean',\n                        description: 'Whether to always allow throwing values typed as `unknown`.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allow: [],\n            allowThrowingAny: true,\n            allowThrowingUnknown: true,\n        },\n    ],\n    create(context, [options]) {\n        const services = (0, util_1.getParserServices)(context);\n        const allow = options.allow;\n        function checkThrowArgument(node) {\n            if (node.type === utils_1.AST_NODE_TYPES.AwaitExpression ||\n                node.type === utils_1.AST_NODE_TYPES.YieldExpression) {\n                return;\n            }\n            const type = services.getTypeAtLocation(node);\n            if ((0, util_1.typeMatchesSomeSpecifier)(type, allow, services.program)) {\n                return;\n            }\n            if (type.flags & ts.TypeFlags.Undefined) {\n                context.report({ node, messageId: 'undef' });\n                return;\n            }\n            if (options.allowThrowingAny && (0, util_1.isTypeAnyType)(type)) {\n                return;\n            }\n            if (options.allowThrowingUnknown && (0, util_1.isTypeUnknownType)(type)) {\n                return;\n            }\n            if ((0, util_1.isErrorLike)(services.program, type)) {\n                return;\n            }\n            context.report({ node, messageId: 'object' });\n        }\n        return {\n            ThrowStatement(node) {\n                checkThrowArgument(node.argument);\n            },\n        };\n    },\n});\n"
        }
    ]
}