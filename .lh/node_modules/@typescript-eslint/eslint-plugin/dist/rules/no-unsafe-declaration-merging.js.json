{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unsafe-declaration-merging.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891970030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unsafe-declaration-merging',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow unsafe declaration merging',\n            recommended: 'recommended',\n            requiresTypeChecking: false,\n        },\n        messages: {\n            unsafeMerging: 'Unsafe declaration merging between classes and interfaces.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        function checkUnsafeDeclaration(scope, node, unsafeKind) {\n            const variable = scope.set.get(node.name);\n            if (!variable) {\n                return;\n            }\n            const defs = variable.defs;\n            if (defs.length <= 1) {\n                return;\n            }\n            if (defs.some(def => def.node.type === unsafeKind)) {\n                context.report({\n                    node,\n                    messageId: 'unsafeMerging',\n                });\n            }\n        }\n        return {\n            ClassDeclaration(node) {\n                if (node.id) {\n                    // by default eslint returns the inner class scope for the ClassDeclaration node\n                    // but we want the outer scope within which merged variables will sit\n                    const currentScope = context.sourceCode.getScope(node).upper;\n                    if (currentScope == null) {\n                        return;\n                    }\n                    checkUnsafeDeclaration(currentScope, node.id, utils_1.AST_NODE_TYPES.TSInterfaceDeclaration);\n                }\n            },\n            TSInterfaceDeclaration(node) {\n                checkUnsafeDeclaration(context.sourceCode.getScope(node), node.id, utils_1.AST_NODE_TYPES.ClassDeclaration);\n            },\n        };\n    },\n});\n"
        }
    ]
}