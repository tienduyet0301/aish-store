{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-for-in-array.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891965196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst getForStatementHeadLoc_1 = require(\"../util/getForStatementHeadLoc\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-for-in-array',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow iterating over an array with a for-in loop',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            forInViolation: 'For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        return {\n            ForInStatement(node) {\n                const services = (0, util_1.getParserServices)(context);\n                const checker = services.program.getTypeChecker();\n                const type = (0, util_1.getConstrainedTypeAtLocation)(services, node.right);\n                if (isArrayLike(checker, type)) {\n                    context.report({\n                        loc: (0, getForStatementHeadLoc_1.getForStatementHeadLoc)(context.sourceCode, node),\n                        messageId: 'forInViolation',\n                    });\n                }\n            },\n        };\n    },\n});\nfunction isArrayLike(checker, type) {\n    return isTypeRecurser(type, t => t.getNumberIndexType() != null && hasArrayishLength(checker, t));\n}\nfunction hasArrayishLength(checker, type) {\n    const lengthProperty = type.getProperty('length');\n    if (lengthProperty == null) {\n        return false;\n    }\n    return tsutils.isTypeFlagSet(checker.getTypeOfSymbol(lengthProperty), ts.TypeFlags.NumberLike);\n}\nfunction isTypeRecurser(type, predicate) {\n    if (type.isUnionOrIntersection()) {\n        return type.types.some(t => isTypeRecurser(t, predicate));\n    }\n    return predicate(type);\n}\n"
        }
    ]
}