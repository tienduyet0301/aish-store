{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-explicit-any.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891964586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-explicit-any',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow the `any` type',\n            recommended: 'recommended',\n        },\n        fixable: 'code',\n        hasSuggestions: true,\n        messages: {\n            suggestNever: \"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.\",\n            suggestUnknown: 'Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.',\n            unexpectedAny: 'Unexpected any. Specify a different type.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    fixToUnknown: {\n                        type: 'boolean',\n                        description: 'Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.',\n                    },\n                    ignoreRestArgs: {\n                        type: 'boolean',\n                        description: 'Whether to ignore rest parameter arrays.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            fixToUnknown: false,\n            ignoreRestArgs: false,\n        },\n    ],\n    create(context, [{ fixToUnknown, ignoreRestArgs }]) {\n        /**\n         * Checks if the node is an arrow function, function/constructor declaration or function expression\n         * @param node the node to be validated.\n         * @returns true if the node is any kind of function declaration or expression\n         * @private\n         */\n        function isNodeValidFunction(node) {\n            return [\n                utils_1.AST_NODE_TYPES.ArrowFunctionExpression, // const x = (...args: any[]) => {};\n                utils_1.AST_NODE_TYPES.FunctionDeclaration, // function f(...args: any[]) {}\n                utils_1.AST_NODE_TYPES.FunctionExpression, // const x = function(...args: any[]) {};\n                utils_1.AST_NODE_TYPES.TSCallSignatureDeclaration, // type T = {(...args: any[]): unknown};\n                utils_1.AST_NODE_TYPES.TSConstructorType, // type T = new (...args: any[]) => unknown\n                utils_1.AST_NODE_TYPES.TSConstructSignatureDeclaration, // type T = {new (...args: any[]): unknown};\n                utils_1.AST_NODE_TYPES.TSDeclareFunction, // declare function _8(...args: any[]): unknown;\n                utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression, // declare class A { f(...args: any[]): unknown; }\n                utils_1.AST_NODE_TYPES.TSFunctionType, // type T = (...args: any[]) => unknown;\n                utils_1.AST_NODE_TYPES.TSMethodSignature, // type T = {f(...args: any[]): unknown};\n            ].includes(node.type);\n        }\n        /**\n         * Checks if the node is a rest element child node of a function\n         * @param node the node to be validated.\n         * @returns true if the node is a rest element child node of a function\n         * @private\n         */\n        function isNodeRestElementInFunction(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.RestElement &&\n                isNodeValidFunction(node.parent));\n        }\n        /**\n         * Checks if the node is a TSTypeOperator node with a readonly operator\n         * @param node the node to be validated.\n         * @returns true if the node is a TSTypeOperator node with a readonly operator\n         * @private\n         */\n        function isNodeReadonlyTSTypeOperator(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.TSTypeOperator &&\n                node.operator === 'readonly');\n        }\n        /**\n         * Checks if the node is a TSTypeReference node with an Array identifier\n         * @param node the node to be validated.\n         * @returns true if the node is a TSTypeReference node with an Array identifier\n         * @private\n         */\n        function isNodeValidArrayTSTypeReference(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.TSTypeReference &&\n                node.typeName.type === utils_1.AST_NODE_TYPES.Identifier &&\n                ['Array', 'ReadonlyArray'].includes(node.typeName.name));\n        }\n        /**\n         * Checks if the node is a valid TSTypeOperator or TSTypeReference node\n         * @param node the node to be validated.\n         * @returns true if the node is a valid TSTypeOperator or TSTypeReference node\n         * @private\n         */\n        function isNodeValidTSType(node) {\n            return (isNodeReadonlyTSTypeOperator(node) ||\n                isNodeValidArrayTSTypeReference(node));\n        }\n        /**\n         * Checks if the great grand-parent node is a RestElement node in a function\n         * @param node the node to be validated.\n         * @returns true if the great grand-parent node is a RestElement node in a function\n         * @private\n         */\n        function isGreatGrandparentRestElement(node) {\n            return (node.parent?.parent?.parent != null &&\n                isNodeRestElementInFunction(node.parent.parent.parent));\n        }\n        /**\n         * Checks if the great great grand-parent node is a valid RestElement node in a function\n         * @param node the node to be validated.\n         * @returns true if the great great grand-parent node is a valid RestElement node in a function\n         * @private\n         */\n        function isGreatGreatGrandparentRestElement(node) {\n            return (node.parent?.parent?.parent?.parent != null &&\n                isNodeValidTSType(node.parent.parent) &&\n                isNodeRestElementInFunction(node.parent.parent.parent.parent));\n        }\n        /**\n         * Checks if the great grand-parent or the great great grand-parent node is a RestElement node\n         * @param node the node to be validated.\n         * @returns true if the great grand-parent or the great great grand-parent node is a RestElement node\n         * @private\n         */\n        function isNodeDescendantOfRestElementInFunction(node) {\n            return (isGreatGrandparentRestElement(node) ||\n                isGreatGreatGrandparentRestElement(node));\n        }\n        return {\n            TSAnyKeyword(node) {\n                if (ignoreRestArgs && isNodeDescendantOfRestElementInFunction(node)) {\n                    return;\n                }\n                const fixOrSuggest = {\n                    fix: null,\n                    suggest: [\n                        {\n                            messageId: 'suggestUnknown',\n                            fix(fixer) {\n                                return fixer.replaceText(node, 'unknown');\n                            },\n                        },\n                        {\n                            messageId: 'suggestNever',\n                            fix(fixer) {\n                                return fixer.replaceText(node, 'never');\n                            },\n                        },\n                    ],\n                };\n                if (fixToUnknown) {\n                    fixOrSuggest.fix = (fixer) => fixer.replaceText(node, 'unknown');\n                }\n                context.report({\n                    node,\n                    messageId: 'unexpectedAny',\n                    ...fixOrSuggest,\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}