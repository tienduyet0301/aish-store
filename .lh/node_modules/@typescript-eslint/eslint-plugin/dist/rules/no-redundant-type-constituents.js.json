{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-redundant-type-constituents.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891968071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst literalToPrimitiveTypeFlags = {\n    [ts.TypeFlags.BigIntLiteral]: ts.TypeFlags.BigInt,\n    [ts.TypeFlags.BooleanLiteral]: ts.TypeFlags.Boolean,\n    [ts.TypeFlags.NumberLiteral]: ts.TypeFlags.Number,\n    [ts.TypeFlags.StringLiteral]: ts.TypeFlags.String,\n    [ts.TypeFlags.TemplateLiteral]: ts.TypeFlags.String,\n};\nconst literalTypeFlags = [\n    ts.TypeFlags.BigIntLiteral,\n    ts.TypeFlags.BooleanLiteral,\n    ts.TypeFlags.NumberLiteral,\n    ts.TypeFlags.StringLiteral,\n    ts.TypeFlags.TemplateLiteral,\n];\nconst primitiveTypeFlags = [\n    ts.TypeFlags.BigInt,\n    ts.TypeFlags.Boolean,\n    ts.TypeFlags.Number,\n    ts.TypeFlags.String,\n];\nconst primitiveTypeFlagNames = {\n    [ts.TypeFlags.BigInt]: 'bigint',\n    [ts.TypeFlags.Boolean]: 'boolean',\n    [ts.TypeFlags.Number]: 'number',\n    [ts.TypeFlags.String]: 'string',\n};\nconst primitiveTypeFlagTypes = {\n    bigint: ts.TypeFlags.BigIntLiteral,\n    boolean: ts.TypeFlags.BooleanLiteral,\n    number: ts.TypeFlags.NumberLiteral,\n    string: ts.TypeFlags.StringLiteral,\n};\nconst keywordNodeTypesToTsTypes = new Map([\n    [utils_1.TSESTree.AST_NODE_TYPES.TSAnyKeyword, ts.TypeFlags.Any],\n    [utils_1.TSESTree.AST_NODE_TYPES.TSBigIntKeyword, ts.TypeFlags.BigInt],\n    [utils_1.TSESTree.AST_NODE_TYPES.TSBooleanKeyword, ts.TypeFlags.Boolean],\n    [utils_1.TSESTree.AST_NODE_TYPES.TSNeverKeyword, ts.TypeFlags.Never],\n    [utils_1.TSESTree.AST_NODE_TYPES.TSNumberKeyword, ts.TypeFlags.Number],\n    [utils_1.TSESTree.AST_NODE_TYPES.TSStringKeyword, ts.TypeFlags.String],\n    [utils_1.TSESTree.AST_NODE_TYPES.TSUnknownKeyword, ts.TypeFlags.Unknown],\n]);\nfunction addToMapGroup(map, key, value) {\n    const existing = map.get(key);\n    if (existing) {\n        existing.push(value);\n    }\n    else {\n        map.set(key, [value]);\n    }\n}\nfunction describeLiteralType(type) {\n    if (type.isStringLiteral()) {\n        return JSON.stringify(type.value);\n    }\n    if ((0, util_1.isTypeBigIntLiteralType)(type)) {\n        return `${type.value.negative ? '-' : ''}${type.value.base10Value}n`;\n    }\n    if (type.isLiteral()) {\n        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n        return type.value.toString();\n    }\n    if (tsutils.isIntrinsicErrorType(type) && type.aliasSymbol) {\n        return type.aliasSymbol.escapedName.toString();\n    }\n    if ((0, util_1.isTypeAnyType)(type)) {\n        return 'any';\n    }\n    if ((0, util_1.isTypeNeverType)(type)) {\n        return 'never';\n    }\n    if ((0, util_1.isTypeUnknownType)(type)) {\n        return 'unknown';\n    }\n    if ((0, util_1.isTypeTemplateLiteralType)(type)) {\n        return 'template literal type';\n    }\n    if ((0, util_1.isTypeBigIntLiteralType)(type)) {\n        return `${type.value.negative ? '-' : ''}${type.value.base10Value}n`;\n    }\n    if (tsutils.isTrueLiteralType(type)) {\n        return 'true';\n    }\n    if (tsutils.isFalseLiteralType(type)) {\n        return 'false';\n    }\n    return 'literal type';\n}\nfunction describeLiteralTypeNode(typeNode) {\n    switch (typeNode.type) {\n        case utils_1.AST_NODE_TYPES.TSAnyKeyword:\n            return 'any';\n        case utils_1.AST_NODE_TYPES.TSBooleanKeyword:\n            return 'boolean';\n        case utils_1.AST_NODE_TYPES.TSNeverKeyword:\n            return 'never';\n        case utils_1.AST_NODE_TYPES.TSNumberKeyword:\n            return 'number';\n        case utils_1.AST_NODE_TYPES.TSStringKeyword:\n            return 'string';\n        case utils_1.AST_NODE_TYPES.TSUnknownKeyword:\n            return 'unknown';\n        case utils_1.AST_NODE_TYPES.TSLiteralType:\n            switch (typeNode.literal.type) {\n                case utils_1.TSESTree.AST_NODE_TYPES.Literal:\n                    switch (typeof typeNode.literal.value) {\n                        case 'bigint':\n                            return `${typeNode.literal.value < 0 ? '-' : ''}${typeNode.literal.value}n`;\n                        case 'string':\n                            return JSON.stringify(typeNode.literal.value);\n                        default:\n                            return `${typeNode.literal.value}`;\n                    }\n                case utils_1.TSESTree.AST_NODE_TYPES.TemplateLiteral:\n                    return 'template literal type';\n            }\n    }\n    return 'literal type';\n}\nfunction isNodeInsideReturnType(node) {\n    return !!(node.parent.type === utils_1.AST_NODE_TYPES.TSTypeAnnotation &&\n        (0, util_1.isFunctionOrFunctionType)(node.parent.parent));\n}\n/**\n * @remarks TypeScript stores boolean types as the union false | true, always.\n */\nfunction unionTypePartsUnlessBoolean(type) {\n    return type.isUnion() &&\n        type.types.length === 2 &&\n        tsutils.isFalseLiteralType(type.types[0]) &&\n        tsutils.isTrueLiteralType(type.types[1])\n        ? [type]\n        : tsutils.unionTypeParts(type);\n}\nexports.default = (0, util_1.createRule)({\n    name: 'no-redundant-type-constituents',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow members of unions and intersections that do nothing or override type information',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            errorTypeOverrides: `'{{typeName}}' is an 'error' type that acts as 'any' and overrides all other types in this {{container}} type.`,\n            literalOverridden: `{{literal}} is overridden by {{primitive}} in this union type.`,\n            overridden: `'{{typeName}}' is overridden by other types in this {{container}} type.`,\n            overrides: `'{{typeName}}' overrides all other types in this {{container}} type.`,\n            primitiveOverridden: `{{primitive}} is overridden by the {{literal}} in this intersection type.`,\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const typesCache = new Map();\n        function getTypeNodeTypePartFlags(typeNode) {\n            const keywordTypeFlags = keywordNodeTypesToTsTypes.get(typeNode.type);\n            if (keywordTypeFlags) {\n                return [\n                    {\n                        typeFlags: keywordTypeFlags,\n                        typeName: describeLiteralTypeNode(typeNode),\n                    },\n                ];\n            }\n            if (typeNode.type === utils_1.AST_NODE_TYPES.TSLiteralType &&\n                typeNode.literal.type === utils_1.AST_NODE_TYPES.Literal) {\n                return [\n                    {\n                        typeFlags: primitiveTypeFlagTypes[typeof typeNode.literal\n                            .value],\n                        typeName: describeLiteralTypeNode(typeNode),\n                    },\n                ];\n            }\n            if (typeNode.type === utils_1.AST_NODE_TYPES.TSUnionType) {\n                return typeNode.types.flatMap(getTypeNodeTypePartFlags);\n            }\n            const nodeType = services.getTypeAtLocation(typeNode);\n            const typeParts = unionTypePartsUnlessBoolean(nodeType);\n            return typeParts.map(typePart => ({\n                typeFlags: typePart.flags,\n                typeName: describeLiteralType(typePart),\n            }));\n        }\n        function getTypeNodeTypePartFlagsCached(typeNode) {\n            const existing = typesCache.get(typeNode);\n            if (existing) {\n                return existing;\n            }\n            const created = getTypeNodeTypePartFlags(typeNode);\n            typesCache.set(typeNode, created);\n            return created;\n        }\n        return {\n            'TSIntersectionType:exit'(node) {\n                const seenLiteralTypes = new Map();\n                const seenPrimitiveTypes = new Map();\n                const seenUnionTypes = new Map();\n                function checkIntersectionBottomAndTopTypes({ typeFlags, typeName }, typeNode) {\n                    for (const [messageId, checkFlag] of [\n                        ['overrides', ts.TypeFlags.Any],\n                        ['overrides', ts.TypeFlags.Never],\n                        ['overridden', ts.TypeFlags.Unknown],\n                    ]) {\n                        if (typeFlags === checkFlag) {\n                            context.report({\n                                node: typeNode,\n                                messageId: typeFlags === ts.TypeFlags.Any && typeName !== 'any'\n                                    ? 'errorTypeOverrides'\n                                    : messageId,\n                                data: {\n                                    container: 'intersection',\n                                    typeName,\n                                },\n                            });\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                for (const typeNode of node.types) {\n                    const typePartFlags = getTypeNodeTypePartFlagsCached(typeNode);\n                    for (const typePart of typePartFlags) {\n                        if (checkIntersectionBottomAndTopTypes(typePart, typeNode)) {\n                            continue;\n                        }\n                        for (const literalTypeFlag of literalTypeFlags) {\n                            if (typePart.typeFlags === literalTypeFlag) {\n                                addToMapGroup(seenLiteralTypes, literalToPrimitiveTypeFlags[literalTypeFlag], typePart.typeName);\n                                break;\n                            }\n                        }\n                        for (const primitiveTypeFlag of primitiveTypeFlags) {\n                            if (typePart.typeFlags === primitiveTypeFlag) {\n                                addToMapGroup(seenPrimitiveTypes, primitiveTypeFlag, typeNode);\n                            }\n                        }\n                    }\n                    // if any typeNode is TSTypeReference and typePartFlags have more than 1 element, than the referenced type is definitely a union.\n                    if (typePartFlags.length >= 2) {\n                        seenUnionTypes.set(typeNode, typePartFlags);\n                    }\n                }\n                /**\n                 * @example\n                 * ```ts\n                 * type F = \"a\"|2|\"b\";\n                 * type I = F & string;\n                 * ```\n                 * This function checks if all the union members of `F` are assignable to the other member of `I`. If every member is assignable, then its reported else not.\n                 */\n                const checkIfUnionsAreAssignable = () => {\n                    for (const [typeRef, typeValues] of seenUnionTypes) {\n                        let primitive = undefined;\n                        for (const { typeFlags } of typeValues) {\n                            if (seenPrimitiveTypes.has(literalToPrimitiveTypeFlags[typeFlags])) {\n                                primitive =\n                                    literalToPrimitiveTypeFlags[typeFlags];\n                            }\n                            else {\n                                primitive = undefined;\n                                break;\n                            }\n                        }\n                        if (Number.isInteger(primitive)) {\n                            context.report({\n                                node: typeRef,\n                                messageId: 'primitiveOverridden',\n                                data: {\n                                    literal: typeValues.map(name => name.typeName).join(' | '),\n                                    primitive: primitiveTypeFlagNames[primitive],\n                                },\n                            });\n                        }\n                    }\n                };\n                if (seenUnionTypes.size > 0) {\n                    checkIfUnionsAreAssignable();\n                    return;\n                }\n                // For each primitive type of all the seen primitive types,\n                // if there was a literal type seen that overrides it,\n                // report each of the primitive type's type nodes\n                for (const [primitiveTypeFlag, typeNodes] of seenPrimitiveTypes) {\n                    const matchedLiteralTypes = seenLiteralTypes.get(primitiveTypeFlag);\n                    if (matchedLiteralTypes) {\n                        for (const typeNode of typeNodes) {\n                            context.report({\n                                node: typeNode,\n                                messageId: 'primitiveOverridden',\n                                data: {\n                                    literal: matchedLiteralTypes.join(' | '),\n                                    primitive: primitiveTypeFlagNames[primitiveTypeFlag],\n                                },\n                            });\n                        }\n                    }\n                }\n            },\n            'TSUnionType:exit'(node) {\n                const seenLiteralTypes = new Map();\n                const seenPrimitiveTypes = new Set();\n                function checkUnionBottomAndTopTypes({ typeFlags, typeName }, typeNode) {\n                    for (const checkFlag of [\n                        ts.TypeFlags.Any,\n                        ts.TypeFlags.Unknown,\n                    ]) {\n                        if (typeFlags === checkFlag) {\n                            context.report({\n                                node: typeNode,\n                                messageId: typeFlags === ts.TypeFlags.Any && typeName !== 'any'\n                                    ? 'errorTypeOverrides'\n                                    : 'overrides',\n                                data: {\n                                    container: 'union',\n                                    typeName,\n                                },\n                            });\n                            return true;\n                        }\n                    }\n                    if (typeFlags === ts.TypeFlags.Never &&\n                        !isNodeInsideReturnType(node)) {\n                        context.report({\n                            node: typeNode,\n                            messageId: 'overridden',\n                            data: {\n                                container: 'union',\n                                typeName: 'never',\n                            },\n                        });\n                        return true;\n                    }\n                    return false;\n                }\n                for (const typeNode of node.types) {\n                    const typePartFlags = getTypeNodeTypePartFlagsCached(typeNode);\n                    for (const typePart of typePartFlags) {\n                        if (checkUnionBottomAndTopTypes(typePart, typeNode)) {\n                            continue;\n                        }\n                        for (const literalTypeFlag of literalTypeFlags) {\n                            if (typePart.typeFlags === literalTypeFlag) {\n                                addToMapGroup(seenLiteralTypes, literalToPrimitiveTypeFlags[literalTypeFlag], {\n                                    literalValue: typePart.typeName,\n                                    typeNode,\n                                });\n                                break;\n                            }\n                        }\n                        for (const primitiveTypeFlag of primitiveTypeFlags) {\n                            if ((typePart.typeFlags & primitiveTypeFlag) !== 0) {\n                                seenPrimitiveTypes.add(primitiveTypeFlag);\n                            }\n                        }\n                    }\n                }\n                const overriddenTypeNodes = new Map();\n                // For each primitive type of all the seen literal types,\n                // if there was a primitive type seen that overrides it,\n                // upsert the literal text and primitive type under the backing type node\n                for (const [primitiveTypeFlag, typeNodesWithText] of seenLiteralTypes) {\n                    if (seenPrimitiveTypes.has(primitiveTypeFlag)) {\n                        for (const { literalValue, typeNode } of typeNodesWithText) {\n                            addToMapGroup(overriddenTypeNodes, typeNode, {\n                                literalValue,\n                                primitiveTypeFlag,\n                            });\n                        }\n                    }\n                }\n                // For each type node that had at least one overridden literal,\n                // group those literals by their primitive type,\n                // then report each primitive type with all its literals\n                for (const [typeNode, typeFlagsWithText] of overriddenTypeNodes) {\n                    const grouped = (0, util_1.arrayGroupByToMap)(typeFlagsWithText, pair => pair.primitiveTypeFlag);\n                    for (const [primitiveTypeFlag, pairs] of grouped) {\n                        context.report({\n                            node: typeNode,\n                            messageId: 'literalOverridden',\n                            data: {\n                                literal: pairs.map(pair => pair.literalValue).join(' | '),\n                                primitive: primitiveTypeFlagNames[primitiveTypeFlag],\n                            },\n                        });\n                    }\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}