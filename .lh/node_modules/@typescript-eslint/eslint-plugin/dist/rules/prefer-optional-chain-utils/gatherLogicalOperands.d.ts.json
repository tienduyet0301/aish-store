{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-optional-chain-utils/gatherLogicalOperands.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891972925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ParserServicesWithTypeInformation, TSESTree } from '@typescript-eslint/utils';\nimport type { SourceCode } from '@typescript-eslint/utils/ts-eslint';\nimport type { PreferOptionalChainOptions } from './PreferOptionalChainOptions';\nexport declare const enum OperandValidity {\n    Valid = \"Valid\",\n    Invalid = \"Invalid\"\n}\nexport declare const enum NullishComparisonType {\n    /** `x != null`, `x != undefined` */\n    NotEqualNullOrUndefined = \"NotEqualNullOrUndefined\",\n    /** `x == null`, `x == undefined` */\n    EqualNullOrUndefined = \"EqualNullOrUndefined\",\n    /** `x !== null` */\n    NotStrictEqualNull = \"NotStrictEqualNull\",\n    /** `x === null` */\n    StrictEqualNull = \"StrictEqualNull\",\n    /** `x !== undefined`, `typeof x !== 'undefined'` */\n    NotStrictEqualUndefined = \"NotStrictEqualUndefined\",\n    /** `x === undefined`, `typeof x === 'undefined'` */\n    StrictEqualUndefined = \"StrictEqualUndefined\",\n    /** `!x` */\n    NotBoolean = \"NotBoolean\",\n    /** `x` */\n    Boolean = \"Boolean\"\n}\nexport interface ValidOperand {\n    comparedName: TSESTree.Node;\n    comparisonType: NullishComparisonType;\n    isYoda: boolean;\n    node: TSESTree.Expression;\n    type: OperandValidity.Valid;\n}\nexport interface InvalidOperand {\n    type: OperandValidity.Invalid;\n}\ntype Operand = InvalidOperand | ValidOperand;\nexport declare function gatherLogicalOperands(node: TSESTree.LogicalExpression, parserServices: ParserServicesWithTypeInformation, sourceCode: Readonly<SourceCode>, options: PreferOptionalChainOptions): {\n    newlySeenLogicals: Set<TSESTree.LogicalExpression>;\n    operands: Operand[];\n};\nexport {};\n//# sourceMappingURL=gatherLogicalOperands.d.ts.map"
        }
    ]
}