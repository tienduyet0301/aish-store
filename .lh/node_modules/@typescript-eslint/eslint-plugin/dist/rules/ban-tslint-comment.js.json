{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/ban-tslint-comment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891959704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\n// tslint regex\n// https://github.com/palantir/tslint/blob/95d9d958833fd9dc0002d18cbe34db20d0fbf437/src/enableDisableRules.ts#L32\nconst ENABLE_DISABLE_REGEX = /^\\s*tslint:(enable|disable)(?:-(line|next-line))?(:|\\s|$)/;\nconst toText = (text, type) => type === utils_1.AST_TOKEN_TYPES.Line\n    ? ['//', text.trim()].join(' ')\n    : ['/*', text.trim(), '*/'].join(' ');\nexports.default = (0, util_1.createRule)({\n    name: 'ban-tslint-comment',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow `// tslint:<rule-flag>` comments',\n            recommended: 'stylistic',\n        },\n        fixable: 'code',\n        messages: {\n            commentDetected: 'tslint comment detected: \"{{ text }}\"',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create: context => {\n        return {\n            Program() {\n                const comments = context.sourceCode.getAllComments();\n                comments.forEach(c => {\n                    if (ENABLE_DISABLE_REGEX.test(c.value)) {\n                        context.report({\n                            node: c,\n                            messageId: 'commentDetected',\n                            data: { text: toText(c.value, c.type) },\n                            fix(fixer) {\n                                const rangeStart = context.sourceCode.getIndexFromLoc({\n                                    column: c.loc.start.column > 0 ? c.loc.start.column - 1 : 0,\n                                    line: c.loc.start.line,\n                                });\n                                const rangeEnd = context.sourceCode.getIndexFromLoc({\n                                    column: c.loc.end.column,\n                                    line: c.loc.end.line,\n                                });\n                                return fixer.removeRange([rangeStart, rangeEnd + 1]);\n                            },\n                        });\n                    }\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}