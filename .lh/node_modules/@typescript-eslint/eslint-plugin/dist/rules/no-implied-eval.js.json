{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-implied-eval.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891965351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst FUNCTION_CONSTRUCTOR = 'Function';\nconst GLOBAL_CANDIDATES = new Set(['global', 'globalThis', 'window']);\nconst EVAL_LIKE_FUNCTIONS = new Set([\n    'execScript',\n    'setImmediate',\n    'setInterval',\n    'setTimeout',\n]);\nexports.default = (0, util_1.createRule)({\n    name: 'no-implied-eval',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow the use of `eval()`-like functions',\n            extendsBaseRule: true,\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            noFunctionConstructor: 'Implied eval. Do not use the Function constructor to create functions.',\n            noImpliedEvalError: 'Implied eval. Consider passing a function.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        function getCalleeName(node) {\n            if (node.type === utils_1.AST_NODE_TYPES.Identifier) {\n                return node.name;\n            }\n            if (node.type === utils_1.AST_NODE_TYPES.MemberExpression &&\n                node.object.type === utils_1.AST_NODE_TYPES.Identifier &&\n                GLOBAL_CANDIDATES.has(node.object.name)) {\n                if (node.property.type === utils_1.AST_NODE_TYPES.Identifier) {\n                    return node.property.name;\n                }\n                if (node.property.type === utils_1.AST_NODE_TYPES.Literal &&\n                    typeof node.property.value === 'string') {\n                    return node.property.value;\n                }\n            }\n            return null;\n        }\n        function isFunctionType(node) {\n            const type = services.getTypeAtLocation(node);\n            const symbol = type.getSymbol();\n            if (symbol &&\n                tsutils.isSymbolFlagSet(symbol, ts.SymbolFlags.Function | ts.SymbolFlags.Method)) {\n                return true;\n            }\n            if ((0, util_1.isBuiltinSymbolLike)(services.program, type, FUNCTION_CONSTRUCTOR)) {\n                return true;\n            }\n            const signatures = checker.getSignaturesOfType(type, ts.SignatureKind.Call);\n            return signatures.length > 0;\n        }\n        function isBind(node) {\n            return node.type === utils_1.AST_NODE_TYPES.MemberExpression\n                ? isBind(node.property)\n                : node.type === utils_1.AST_NODE_TYPES.Identifier && node.name === 'bind';\n        }\n        function isFunction(node) {\n            switch (node.type) {\n                case utils_1.AST_NODE_TYPES.ArrowFunctionExpression:\n                case utils_1.AST_NODE_TYPES.FunctionDeclaration:\n                case utils_1.AST_NODE_TYPES.FunctionExpression:\n                    return true;\n                case utils_1.AST_NODE_TYPES.Literal:\n                case utils_1.AST_NODE_TYPES.TemplateLiteral:\n                    return false;\n                case utils_1.AST_NODE_TYPES.CallExpression:\n                    return isBind(node.callee) || isFunctionType(node);\n                default:\n                    return isFunctionType(node);\n            }\n        }\n        function checkImpliedEval(node) {\n            const calleeName = getCalleeName(node.callee);\n            if (calleeName == null) {\n                return;\n            }\n            if (calleeName === FUNCTION_CONSTRUCTOR) {\n                const type = services.getTypeAtLocation(node.callee);\n                const symbol = type.getSymbol();\n                if (symbol) {\n                    if ((0, util_1.isBuiltinSymbolLike)(services.program, type, 'FunctionConstructor')) {\n                        context.report({ node, messageId: 'noFunctionConstructor' });\n                        return;\n                    }\n                }\n                else {\n                    context.report({ node, messageId: 'noFunctionConstructor' });\n                    return;\n                }\n            }\n            if (node.arguments.length === 0) {\n                return;\n            }\n            const [handler] = node.arguments;\n            if (EVAL_LIKE_FUNCTIONS.has(calleeName) &&\n                !isFunction(handler) &&\n                (0, util_1.isReferenceToGlobalFunction)(calleeName, node, context.sourceCode)) {\n                context.report({ node: handler, messageId: 'noImpliedEvalError' });\n            }\n        }\n        return {\n            CallExpression: checkImpliedEval,\n            NewExpression: checkImpliedEval,\n        };\n    },\n});\n"
        }
    ]
}