{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-wrapper-object-types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst classNames = new Set([\n    'BigInt',\n    // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum\n    'Boolean',\n    'Number',\n    'Object',\n    // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum\n    'String',\n    'Symbol',\n]);\nexports.default = (0, util_1.createRule)({\n    name: 'no-wrapper-object-types',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow using confusing built-in primitive class wrappers',\n            recommended: 'recommended',\n        },\n        fixable: 'code',\n        messages: {\n            bannedClassType: 'Prefer using the primitive `{{preferred}}` as a type name, rather than the upper-cased `{{typeName}}`.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        function checkBannedTypes(node, includeFix) {\n            const typeName = node.type === utils_1.AST_NODE_TYPES.Identifier && node.name;\n            if (!typeName ||\n                !classNames.has(typeName) ||\n                !(0, util_1.isReferenceToGlobalFunction)(typeName, node, context.sourceCode)) {\n                return;\n            }\n            const preferred = typeName.toLowerCase();\n            context.report({\n                node,\n                messageId: 'bannedClassType',\n                data: { preferred, typeName },\n                fix: includeFix\n                    ? (fixer) => fixer.replaceText(node, preferred)\n                    : undefined,\n            });\n        }\n        return {\n            TSClassImplements(node) {\n                checkBannedTypes(node.expression, false);\n            },\n            TSInterfaceHeritage(node) {\n                checkBannedTypes(node.expression, false);\n            },\n            TSTypeReference(node) {\n                checkBannedTypes(node.typeName, true);\n            },\n        };\n    },\n});\n"
        }
    ]
}