{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/triple-slash-reference.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891975545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'triple-slash-reference',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow certain triple slash directives in favor of ES6-style import declarations',\n            recommended: 'recommended',\n        },\n        messages: {\n            tripleSlashReference: 'Do not use a triple slash reference for {{module}}, use `import` style instead.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    lib: {\n                        type: 'string',\n                        description: 'What to enforce for `/// <reference lib=\"...\" />` references.',\n                        enum: ['always', 'never'],\n                    },\n                    path: {\n                        type: 'string',\n                        description: 'What to enforce for `/// <reference path=\"...\" />` references.',\n                        enum: ['always', 'never'],\n                    },\n                    types: {\n                        type: 'string',\n                        description: 'What to enforce for `/// <reference types=\"...\" />` references.',\n                        enum: ['always', 'never', 'prefer-import'],\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            lib: 'always',\n            path: 'never',\n            types: 'prefer-import',\n        },\n    ],\n    create(context, [{ lib, path, types }]) {\n        let programNode;\n        const references = [];\n        function hasMatchingReference(source) {\n            references.forEach(reference => {\n                if (reference.importName === source.value) {\n                    context.report({\n                        node: reference.comment,\n                        messageId: 'tripleSlashReference',\n                        data: {\n                            module: reference.importName,\n                        },\n                    });\n                }\n            });\n        }\n        return {\n            ImportDeclaration(node) {\n                if (programNode) {\n                    hasMatchingReference(node.source);\n                }\n            },\n            Program(node) {\n                if (lib === 'always' && path === 'always' && types === 'always') {\n                    return;\n                }\n                programNode = node;\n                const referenceRegExp = /^\\/\\s*<reference\\s*(types|path|lib)\\s*=\\s*[\"|'](.*)[\"|']/;\n                const commentsBefore = context.sourceCode.getCommentsBefore(programNode);\n                commentsBefore.forEach(comment => {\n                    if (comment.type !== utils_1.AST_TOKEN_TYPES.Line) {\n                        return;\n                    }\n                    const referenceResult = referenceRegExp.exec(comment.value);\n                    if (referenceResult) {\n                        if ((referenceResult[1] === 'types' && types === 'never') ||\n                            (referenceResult[1] === 'path' && path === 'never') ||\n                            (referenceResult[1] === 'lib' && lib === 'never')) {\n                            context.report({\n                                node: comment,\n                                messageId: 'tripleSlashReference',\n                                data: {\n                                    module: referenceResult[2],\n                                },\n                            });\n                            return;\n                        }\n                        if (referenceResult[1] === 'types' && types === 'prefer-import') {\n                            references.push({ comment, importName: referenceResult[2] });\n                        }\n                    }\n                });\n            },\n            TSImportEqualsDeclaration(node) {\n                if (programNode) {\n                    const reference = node.moduleReference;\n                    if (reference.type === utils_1.AST_NODE_TYPES.TSExternalModuleReference) {\n                        hasMatchingReference(reference.expression);\n                    }\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}