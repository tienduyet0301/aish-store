{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/await-thenable.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891959494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst util_1 = require(\"../util\");\nconst getForStatementHeadLoc_1 = require(\"../util/getForStatementHeadLoc\");\nexports.default = (0, util_1.createRule)({\n    name: 'await-thenable',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow awaiting a value that is not a Thenable',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        hasSuggestions: true,\n        messages: {\n            await: 'Unexpected `await` of a non-Promise (non-\"Thenable\") value.',\n            awaitUsingOfNonAsyncDisposable: 'Unexpected `await using` of a value that is not async disposable.',\n            convertToOrdinaryFor: 'Convert to an ordinary `for...of` loop.',\n            forAwaitOfNonAsyncIterable: 'Unexpected `for await...of` of a value that is not async iterable.',\n            removeAwait: 'Remove unnecessary `await`.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        return {\n            AwaitExpression(node) {\n                const awaitArgumentEsNode = node.argument;\n                const awaitArgumentType = services.getTypeAtLocation(awaitArgumentEsNode);\n                const awaitArgumentTsNode = services.esTreeNodeToTSNodeMap.get(awaitArgumentEsNode);\n                const certainty = (0, util_1.needsToBeAwaited)(checker, awaitArgumentTsNode, awaitArgumentType);\n                if (certainty === util_1.Awaitable.Never) {\n                    context.report({\n                        node,\n                        messageId: 'await',\n                        suggest: [\n                            {\n                                messageId: 'removeAwait',\n                                fix(fixer) {\n                                    const awaitKeyword = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(node, util_1.isAwaitKeyword), util_1.NullThrowsReasons.MissingToken('await', 'await expression'));\n                                    return fixer.remove(awaitKeyword);\n                                },\n                            },\n                        ],\n                    });\n                }\n            },\n            'ForOfStatement[await=true]'(node) {\n                const type = services.getTypeAtLocation(node.right);\n                if ((0, util_1.isTypeAnyType)(type)) {\n                    return;\n                }\n                const hasAsyncIteratorSymbol = tsutils\n                    .unionTypeParts(type)\n                    .some(typePart => tsutils.getWellKnownSymbolPropertyOfType(typePart, 'asyncIterator', checker) != null);\n                if (!hasAsyncIteratorSymbol) {\n                    context.report({\n                        loc: (0, getForStatementHeadLoc_1.getForStatementHeadLoc)(context.sourceCode, node),\n                        messageId: 'forAwaitOfNonAsyncIterable',\n                        suggest: [\n                            // Note that this suggestion causes broken code for sync iterables\n                            // of promises, since the loop variable is not awaited.\n                            {\n                                messageId: 'convertToOrdinaryFor',\n                                fix(fixer) {\n                                    const awaitToken = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(node, util_1.isAwaitKeyword), util_1.NullThrowsReasons.MissingToken('await', 'for await loop'));\n                                    return fixer.remove(awaitToken);\n                                },\n                            },\n                        ],\n                    });\n                }\n            },\n            'VariableDeclaration[kind=\"await using\"]'(node) {\n                for (const declarator of node.declarations) {\n                    const init = declarator.init;\n                    if (init == null) {\n                        continue;\n                    }\n                    const type = services.getTypeAtLocation(init);\n                    if ((0, util_1.isTypeAnyType)(type)) {\n                        continue;\n                    }\n                    const hasAsyncDisposeSymbol = tsutils\n                        .unionTypeParts(type)\n                        .some(typePart => tsutils.getWellKnownSymbolPropertyOfType(typePart, 'asyncDispose', checker) != null);\n                    if (!hasAsyncDisposeSymbol) {\n                        context.report({\n                            node: init,\n                            messageId: 'awaitUsingOfNonAsyncDisposable',\n                            // let the user figure out what to do if there's\n                            // await using a = b, c = d, e = f;\n                            // it's rare and not worth the complexity to handle.\n                            ...(0, util_1.getFixOrSuggest)({\n                                fixOrSuggest: node.declarations.length === 1 ? 'suggest' : 'none',\n                                suggestion: {\n                                    messageId: 'removeAwait',\n                                    fix(fixer) {\n                                        const awaitToken = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(node, util_1.isAwaitKeyword), util_1.NullThrowsReasons.MissingToken('await', 'await using'));\n                                        return fixer.remove(awaitToken);\n                                    },\n                                },\n                            }),\n                        });\n                    }\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}