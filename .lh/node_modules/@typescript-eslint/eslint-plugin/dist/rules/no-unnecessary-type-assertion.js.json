{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-assertion.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891969384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unnecessary-type-assertion',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow type assertions that do not change the type of an expression',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            contextuallyUnnecessary: 'This assertion is unnecessary since the receiver accepts the original type of the expression.',\n            unnecessaryAssertion: 'This assertion is unnecessary since it does not change the type of the expression.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    typesToIgnore: {\n                        type: 'array',\n                        description: 'A list of type names to ignore.',\n                        items: {\n                            type: 'string',\n                        },\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [{}],\n    create(context, [options]) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        const compilerOptions = services.program.getCompilerOptions();\n        /**\n         * Returns true if there's a chance the variable has been used before a value has been assigned to it\n         */\n        function isPossiblyUsedBeforeAssigned(node) {\n            const declaration = (0, util_1.getDeclaration)(services, node);\n            if (!declaration) {\n                // don't know what the declaration is for some reason, so just assume the worst\n                return true;\n            }\n            if (\n            // non-strict mode doesn't care about used before assigned errors\n            tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'strictNullChecks') &&\n                // ignore class properties as they are compile time guarded\n                // also ignore function arguments as they can't be used before defined\n                ts.isVariableDeclaration(declaration)) {\n                // For var declarations, we need to check whether the node\n                // is actually in a descendant of its declaration or not. If not,\n                // it may be used before defined.\n                // eg\n                // if (Math.random() < 0.5) {\n                //     var x: number  = 2;\n                // } else {\n                //     x!.toFixed();\n                // }\n                if (ts.isVariableDeclarationList(declaration.parent) &&\n                    // var\n                    declaration.parent.flags === ts.NodeFlags.None &&\n                    // If they are not in the same file it will not exist.\n                    // This situation must not occur using before defined.\n                    services.tsNodeToESTreeNodeMap.has(declaration)) {\n                    const declaratorNode = services.tsNodeToESTreeNodeMap.get(declaration);\n                    const scope = context.sourceCode.getScope(node);\n                    const declaratorScope = context.sourceCode.getScope(declaratorNode);\n                    let parentScope = declaratorScope;\n                    while ((parentScope = parentScope.upper)) {\n                        if (parentScope === scope) {\n                            return true;\n                        }\n                    }\n                }\n                if (\n                // is it `const x!: number`\n                declaration.initializer == null &&\n                    declaration.exclamationToken == null &&\n                    declaration.type != null) {\n                    // check if the defined variable type has changed since assignment\n                    const declarationType = checker.getTypeFromTypeNode(declaration.type);\n                    const type = (0, util_1.getConstrainedTypeAtLocation)(services, node);\n                    if (declarationType === type &&\n                        // `declare`s are never narrowed, so never skip them\n                        !(ts.isVariableDeclarationList(declaration.parent) &&\n                            ts.isVariableStatement(declaration.parent.parent) &&\n                            tsutils.includesModifier((0, util_1.getModifiers)(declaration.parent.parent), ts.SyntaxKind.DeclareKeyword))) {\n                        // possibly used before assigned, so just skip it\n                        // better to false negative and skip it, than false positive and fix to compile erroring code\n                        //\n                        // no better way to figure this out right now\n                        // https://github.com/Microsoft/TypeScript/issues/31124\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n        function isConstAssertion(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.TSTypeReference &&\n                node.typeName.type === utils_1.AST_NODE_TYPES.Identifier &&\n                node.typeName.name === 'const');\n        }\n        function isTemplateLiteralWithExpressions(expression) {\n            return (expression.type === utils_1.AST_NODE_TYPES.TemplateLiteral &&\n                expression.expressions.length !== 0);\n        }\n        function isImplicitlyNarrowedLiteralDeclaration({ expression, parent, }) {\n            /**\n             * Even on `const` variable declarations, template literals with expressions can sometimes be widened without a type assertion.\n             * @see https://github.com/typescript-eslint/typescript-eslint/issues/8737\n             */\n            if (isTemplateLiteralWithExpressions(expression)) {\n                return false;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const maybeDeclarationNode = parent.parent;\n            return ((maybeDeclarationNode.type === utils_1.AST_NODE_TYPES.VariableDeclaration &&\n                maybeDeclarationNode.kind === 'const') ||\n                (parent.type === utils_1.AST_NODE_TYPES.PropertyDefinition && parent.readonly));\n        }\n        function isTypeUnchanged(uncast, cast) {\n            if (uncast === cast) {\n                return true;\n            }\n            if ((0, util_1.isTypeFlagSet)(uncast, ts.TypeFlags.Undefined) &&\n                (0, util_1.isTypeFlagSet)(cast, ts.TypeFlags.Undefined) &&\n                tsutils.isCompilerOptionEnabled(compilerOptions, 'exactOptionalPropertyTypes')) {\n                const uncastParts = tsutils\n                    .unionTypeParts(uncast)\n                    .filter(part => !(0, util_1.isTypeFlagSet)(part, ts.TypeFlags.Undefined));\n                const castParts = tsutils\n                    .unionTypeParts(cast)\n                    .filter(part => !(0, util_1.isTypeFlagSet)(part, ts.TypeFlags.Undefined));\n                if (uncastParts.length !== castParts.length) {\n                    return false;\n                }\n                const uncastPartsSet = new Set(uncastParts);\n                return castParts.every(part => uncastPartsSet.has(part));\n            }\n            return false;\n        }\n        return {\n            'TSAsExpression, TSTypeAssertion'(node) {\n                if (options.typesToIgnore?.includes(context.sourceCode.getText(node.typeAnnotation))) {\n                    return;\n                }\n                const castType = services.getTypeAtLocation(node);\n                const uncastType = services.getTypeAtLocation(node.expression);\n                const typeIsUnchanged = isTypeUnchanged(uncastType, castType);\n                const wouldSameTypeBeInferred = castType.isLiteral()\n                    ? isImplicitlyNarrowedLiteralDeclaration(node)\n                    : !isConstAssertion(node.typeAnnotation);\n                if (typeIsUnchanged && wouldSameTypeBeInferred) {\n                    context.report({\n                        node,\n                        messageId: 'unnecessaryAssertion',\n                        fix(fixer) {\n                            if (node.type === utils_1.AST_NODE_TYPES.TSTypeAssertion) {\n                                const openingAngleBracket = (0, util_1.nullThrows)(context.sourceCode.getTokenBefore(node.typeAnnotation, token => token.type === utils_1.AST_TOKEN_TYPES.Punctuator &&\n                                    token.value === '<'), util_1.NullThrowsReasons.MissingToken('<', 'type annotation'));\n                                const closingAngleBracket = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(node.typeAnnotation, token => token.type === utils_1.AST_TOKEN_TYPES.Punctuator &&\n                                    token.value === '>'), util_1.NullThrowsReasons.MissingToken('>', 'type annotation'));\n                                // < ( number ) > ( 3 + 5 )\n                                // ^---remove---^\n                                return fixer.removeRange([\n                                    openingAngleBracket.range[0],\n                                    closingAngleBracket.range[1],\n                                ]);\n                            }\n                            // `as` is always present in TSAsExpression\n                            const asToken = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(node.expression, token => token.type === utils_1.AST_TOKEN_TYPES.Identifier &&\n                                token.value === 'as'), util_1.NullThrowsReasons.MissingToken('>', 'type annotation'));\n                            const tokenBeforeAs = (0, util_1.nullThrows)(context.sourceCode.getTokenBefore(asToken, {\n                                includeComments: true,\n                            }), util_1.NullThrowsReasons.MissingToken('comment', 'as'));\n                            // ( 3 + 5 )  as  number\n                            //          ^--remove--^\n                            return fixer.removeRange([tokenBeforeAs.range[1], node.range[1]]);\n                        },\n                    });\n                }\n                // TODO - add contextually unnecessary check for this\n            },\n            TSNonNullExpression(node) {\n                const removeExclamationFix = fixer => {\n                    const exclamationToken = (0, util_1.nullThrows)(context.sourceCode.getLastToken(node, token => token.value === '!'), util_1.NullThrowsReasons.MissingToken('exclamation mark', 'non-null assertion'));\n                    return fixer.removeRange(exclamationToken.range);\n                };\n                if (node.parent.type === utils_1.AST_NODE_TYPES.AssignmentExpression &&\n                    node.parent.operator === '=') {\n                    if (node.parent.left === node) {\n                        context.report({\n                            node,\n                            messageId: 'contextuallyUnnecessary',\n                            fix: removeExclamationFix,\n                        });\n                    }\n                    // for all other = assignments we ignore non-null checks\n                    // this is because non-null assertions can change the type-flow of the code\n                    // so whilst they might be unnecessary for the assignment - they are necessary\n                    // for following code\n                    return;\n                }\n                const originalNode = services.esTreeNodeToTSNodeMap.get(node);\n                const type = (0, util_1.getConstrainedTypeAtLocation)(services, node.expression);\n                if (!(0, util_1.isNullableType)(type)) {\n                    if (node.expression.type === utils_1.AST_NODE_TYPES.Identifier &&\n                        isPossiblyUsedBeforeAssigned(node.expression)) {\n                        return;\n                    }\n                    context.report({\n                        node,\n                        messageId: 'unnecessaryAssertion',\n                        fix: removeExclamationFix,\n                    });\n                }\n                else {\n                    // we know it's a nullable type\n                    // so figure out if the variable is used in a place that accepts nullable types\n                    const contextualType = (0, util_1.getContextualType)(checker, originalNode);\n                    if (contextualType) {\n                        if ((0, util_1.isTypeFlagSet)(type, ts.TypeFlags.Unknown) &&\n                            !(0, util_1.isTypeFlagSet)(contextualType, ts.TypeFlags.Unknown)) {\n                            return;\n                        }\n                        // in strict mode you can't assign null to undefined, so we have to make sure that\n                        // the two types share a nullable type\n                        const typeIncludesUndefined = (0, util_1.isTypeFlagSet)(type, ts.TypeFlags.Undefined);\n                        const typeIncludesNull = (0, util_1.isTypeFlagSet)(type, ts.TypeFlags.Null);\n                        const typeIncludesVoid = (0, util_1.isTypeFlagSet)(type, ts.TypeFlags.Void);\n                        const contextualTypeIncludesUndefined = (0, util_1.isTypeFlagSet)(contextualType, ts.TypeFlags.Undefined);\n                        const contextualTypeIncludesNull = (0, util_1.isTypeFlagSet)(contextualType, ts.TypeFlags.Null);\n                        const contextualTypeIncludesVoid = (0, util_1.isTypeFlagSet)(contextualType, ts.TypeFlags.Void);\n                        // make sure that the parent accepts the same types\n                        // i.e. assigning `string | null | undefined` to `string | undefined` is invalid\n                        const isValidUndefined = typeIncludesUndefined\n                            ? contextualTypeIncludesUndefined\n                            : true;\n                        const isValidNull = typeIncludesNull\n                            ? contextualTypeIncludesNull\n                            : true;\n                        const isValidVoid = typeIncludesVoid\n                            ? contextualTypeIncludesVoid\n                            : true;\n                        if (isValidUndefined && isValidNull && isValidVoid) {\n                            context.report({\n                                node,\n                                messageId: 'contextuallyUnnecessary',\n                                fix: removeExclamationFix,\n                            });\n                        }\n                    }\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}