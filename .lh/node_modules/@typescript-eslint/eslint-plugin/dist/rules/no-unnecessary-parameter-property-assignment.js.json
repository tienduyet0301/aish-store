{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-parameter-property-assignment.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891968944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst scope_manager_1 = require(\"@typescript-eslint/scope-manager\");\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst UNNECESSARY_OPERATORS = new Set(['??=', '&&=', '=', '||=']);\nexports.default = (0, util_1.createRule)({\n    name: 'no-unnecessary-parameter-property-assignment',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow unnecessary assignment of constructor property parameter',\n        },\n        messages: {\n            unnecessaryAssign: 'This assignment is unnecessary since it is already assigned by a parameter property.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const reportInfoStack = [];\n        function isThisMemberExpression(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.MemberExpression &&\n                node.object.type === utils_1.AST_NODE_TYPES.ThisExpression);\n        }\n        function getPropertyName(node) {\n            if (!isThisMemberExpression(node)) {\n                return null;\n            }\n            if (node.property.type === utils_1.AST_NODE_TYPES.Identifier) {\n                return node.property.name;\n            }\n            if (node.computed) {\n                return (0, util_1.getStaticStringValue)(node.property);\n            }\n            return null;\n        }\n        function findParentFunction(node) {\n            if (!node ||\n                node.type === utils_1.AST_NODE_TYPES.FunctionDeclaration ||\n                node.type === utils_1.AST_NODE_TYPES.FunctionExpression ||\n                node.type === utils_1.AST_NODE_TYPES.ArrowFunctionExpression) {\n                return node;\n            }\n            return findParentFunction(node.parent);\n        }\n        function findParentPropertyDefinition(node) {\n            if (!node || node.type === utils_1.AST_NODE_TYPES.PropertyDefinition) {\n                return node;\n            }\n            return findParentPropertyDefinition(node.parent);\n        }\n        function isConstructorFunctionExpression(node) {\n            return (node?.type === utils_1.AST_NODE_TYPES.FunctionExpression &&\n                utils_1.ASTUtils.isConstructor(node.parent));\n        }\n        function isReferenceFromParameter(node) {\n            const scope = context.sourceCode.getScope(node);\n            const rightRef = scope.references.find(ref => ref.identifier.name === node.name);\n            return rightRef?.resolved?.defs.at(0)?.type === scope_manager_1.DefinitionType.Parameter;\n        }\n        function isParameterPropertyWithName(node, name) {\n            return (node.type === utils_1.AST_NODE_TYPES.TSParameterProperty &&\n                ((node.parameter.type === utils_1.AST_NODE_TYPES.Identifier && // constructor (public foo) {}\n                    node.parameter.name === name) ||\n                    (node.parameter.type === utils_1.AST_NODE_TYPES.AssignmentPattern && // constructor (public foo = 1) {}\n                        node.parameter.left.type === utils_1.AST_NODE_TYPES.Identifier &&\n                        node.parameter.left.name === name)));\n        }\n        function getIdentifier(node) {\n            if (node.type === utils_1.AST_NODE_TYPES.Identifier) {\n                return node;\n            }\n            if (node.type === utils_1.AST_NODE_TYPES.TSAsExpression ||\n                node.type === utils_1.AST_NODE_TYPES.TSNonNullExpression) {\n                return getIdentifier(node.expression);\n            }\n            return null;\n        }\n        function isArrowIIFE(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.ArrowFunctionExpression &&\n                node.parent.type === utils_1.AST_NODE_TYPES.CallExpression);\n        }\n        return {\n            ClassBody() {\n                reportInfoStack.push({\n                    assignedBeforeConstructor: new Set(),\n                    assignedBeforeUnnecessary: new Set(),\n                    unnecessaryAssignments: [],\n                });\n            },\n            'ClassBody:exit'() {\n                const { assignedBeforeConstructor, unnecessaryAssignments } = (0, util_1.nullThrows)(reportInfoStack.pop(), 'The top stack should exist');\n                unnecessaryAssignments.forEach(({ name, node }) => {\n                    if (assignedBeforeConstructor.has(name)) {\n                        return;\n                    }\n                    context.report({\n                        node,\n                        messageId: 'unnecessaryAssign',\n                    });\n                });\n            },\n            \"MethodDefinition[kind='constructor'] > FunctionExpression AssignmentExpression\"(node) {\n                const leftName = getPropertyName(node.left);\n                if (!leftName) {\n                    return;\n                }\n                let functionNode = findParentFunction(node);\n                if (functionNode && isArrowIIFE(functionNode)) {\n                    functionNode = findParentFunction(functionNode.parent);\n                }\n                if (!isConstructorFunctionExpression(functionNode)) {\n                    return;\n                }\n                const { assignedBeforeUnnecessary, unnecessaryAssignments } = (0, util_1.nullThrows)(reportInfoStack.at(reportInfoStack.length - 1), 'The top of stack should exist');\n                if (!UNNECESSARY_OPERATORS.has(node.operator)) {\n                    assignedBeforeUnnecessary.add(leftName);\n                    return;\n                }\n                const rightId = getIdentifier(node.right);\n                if (leftName !== rightId?.name || !isReferenceFromParameter(rightId)) {\n                    return;\n                }\n                const hasParameterProperty = functionNode.params.some(param => isParameterPropertyWithName(param, rightId.name));\n                if (hasParameterProperty && !assignedBeforeUnnecessary.has(leftName)) {\n                    unnecessaryAssignments.push({\n                        name: leftName,\n                        node,\n                    });\n                }\n            },\n            'PropertyDefinition AssignmentExpression'(node) {\n                const name = getPropertyName(node.left);\n                if (!name) {\n                    return;\n                }\n                const functionNode = findParentFunction(node);\n                if (functionNode &&\n                    !(isArrowIIFE(functionNode) &&\n                        findParentPropertyDefinition(node)?.value === functionNode.parent)) {\n                    return;\n                }\n                const { assignedBeforeConstructor } = (0, util_1.nullThrows)(reportInfoStack.at(-1), 'The top stack should exist');\n                assignedBeforeConstructor.add(name);\n            },\n        };\n    },\n});\n"
        }
    ]
}