{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-dynamic-delete.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891964077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-dynamic-delete',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow using the `delete` operator on computed key expressions',\n            recommended: 'strict',\n        },\n        fixable: 'code',\n        messages: {\n            dynamicDelete: 'Do not delete dynamically computed property keys.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        function createFixer(member) {\n            if (member.property.type === utils_1.AST_NODE_TYPES.Literal &&\n                typeof member.property.value === 'string') {\n                return createPropertyReplacement(member.property, `.${member.property.value}`);\n            }\n            return undefined;\n        }\n        return {\n            'UnaryExpression[operator=delete]'(node) {\n                if (node.argument.type !== utils_1.AST_NODE_TYPES.MemberExpression ||\n                    !node.argument.computed ||\n                    isAcceptableIndexExpression(node.argument.property)) {\n                    return;\n                }\n                context.report({\n                    node: node.argument.property,\n                    messageId: 'dynamicDelete',\n                    fix: createFixer(node.argument),\n                });\n            },\n        };\n        function createPropertyReplacement(property, replacement) {\n            return (fixer) => fixer.replaceTextRange(getTokenRange(property), replacement);\n        }\n        function getTokenRange(property) {\n            return [\n                (0, util_1.nullThrows)(context.sourceCode.getTokenBefore(property), util_1.NullThrowsReasons.MissingToken('token before', 'property')).range[0],\n                (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(property), util_1.NullThrowsReasons.MissingToken('token after', 'property')).range[1],\n            ];\n        }\n    },\n});\nfunction isAcceptableIndexExpression(property) {\n    return ((property.type === utils_1.AST_NODE_TYPES.Literal &&\n        ['number', 'string'].includes(typeof property.value)) ||\n        (property.type === utils_1.AST_NODE_TYPES.UnaryExpression &&\n            property.operator === '-' &&\n            property.argument.type === utils_1.AST_NODE_TYPES.Literal &&\n            typeof property.argument.value === 'number'));\n}\n"
        }
    ]
}