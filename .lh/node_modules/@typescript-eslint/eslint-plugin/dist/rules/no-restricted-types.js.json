{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-restricted-types.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891968391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nfunction removeSpaces(str) {\n    return str.replaceAll(/\\s/g, '');\n}\nfunction stringifyNode(node, sourceCode) {\n    return removeSpaces(sourceCode.getText(node));\n}\nfunction getCustomMessage(bannedType) {\n    if (!bannedType || bannedType === true) {\n        return '';\n    }\n    if (typeof bannedType === 'string') {\n        return ` ${bannedType}`;\n    }\n    if (bannedType.message) {\n        return ` ${bannedType.message}`;\n    }\n    return '';\n}\nconst TYPE_KEYWORDS = {\n    bigint: utils_1.AST_NODE_TYPES.TSBigIntKeyword,\n    boolean: utils_1.AST_NODE_TYPES.TSBooleanKeyword,\n    never: utils_1.AST_NODE_TYPES.TSNeverKeyword,\n    null: utils_1.AST_NODE_TYPES.TSNullKeyword,\n    number: utils_1.AST_NODE_TYPES.TSNumberKeyword,\n    object: utils_1.AST_NODE_TYPES.TSObjectKeyword,\n    string: utils_1.AST_NODE_TYPES.TSStringKeyword,\n    symbol: utils_1.AST_NODE_TYPES.TSSymbolKeyword,\n    undefined: utils_1.AST_NODE_TYPES.TSUndefinedKeyword,\n    unknown: utils_1.AST_NODE_TYPES.TSUnknownKeyword,\n    void: utils_1.AST_NODE_TYPES.TSVoidKeyword,\n};\nexports.default = (0, util_1.createRule)({\n    name: 'no-restricted-types',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow certain types',\n        },\n        fixable: 'code',\n        hasSuggestions: true,\n        messages: {\n            bannedTypeMessage: \"Don't use `{{name}}` as a type.{{customMessage}}\",\n            bannedTypeReplacement: 'Replace `{{name}}` with `{{replacement}}`.',\n        },\n        schema: [\n            {\n                type: 'object',\n                $defs: {\n                    banConfig: {\n                        oneOf: [\n                            {\n                                type: 'boolean',\n                                description: 'Bans the type with the default message.',\n                                enum: [true],\n                            },\n                            {\n                                type: 'string',\n                                description: 'Bans the type with a custom message.',\n                            },\n                            {\n                                type: 'object',\n                                additionalProperties: false,\n                                description: 'Bans a type.',\n                                properties: {\n                                    fixWith: {\n                                        type: 'string',\n                                        description: 'Type to autofix replace with. Note that autofixers can be applied automatically - so you need to be careful with this option.',\n                                    },\n                                    message: {\n                                        type: 'string',\n                                        description: 'Custom error message.',\n                                    },\n                                    suggest: {\n                                        type: 'array',\n                                        description: 'Types to suggest replacing with.',\n                                        items: { type: 'string' },\n                                    },\n                                },\n                            },\n                        ],\n                    },\n                },\n                additionalProperties: false,\n                properties: {\n                    types: {\n                        type: 'object',\n                        additionalProperties: {\n                            $ref: '#/items/0/$defs/banConfig',\n                        },\n                        description: 'An object whose keys are the types you want to ban, and the values are error messages.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [{}],\n    create(context, [{ types = {} }]) {\n        const bannedTypes = new Map(Object.entries(types).map(([type, data]) => [removeSpaces(type), data]));\n        function checkBannedTypes(typeNode, name = stringifyNode(typeNode, context.sourceCode)) {\n            const bannedType = bannedTypes.get(name);\n            if (bannedType == null || bannedType === false) {\n                return;\n            }\n            const customMessage = getCustomMessage(bannedType);\n            const fixWith = bannedType && typeof bannedType === 'object' && bannedType.fixWith;\n            const suggest = bannedType && typeof bannedType === 'object'\n                ? bannedType.suggest\n                : undefined;\n            context.report({\n                node: typeNode,\n                messageId: 'bannedTypeMessage',\n                data: {\n                    name,\n                    customMessage,\n                },\n                fix: fixWith\n                    ? (fixer) => fixer.replaceText(typeNode, fixWith)\n                    : null,\n                suggest: suggest?.map(replacement => ({\n                    messageId: 'bannedTypeReplacement',\n                    data: {\n                        name,\n                        replacement,\n                    },\n                    fix: (fixer) => fixer.replaceText(typeNode, replacement),\n                })),\n            });\n        }\n        const keywordSelectors = (0, util_1.objectReduceKey)(TYPE_KEYWORDS, (acc, keyword) => {\n            if (bannedTypes.has(keyword)) {\n                acc[TYPE_KEYWORDS[keyword]] = (node) => checkBannedTypes(node, keyword);\n            }\n            return acc;\n        }, {});\n        return {\n            ...keywordSelectors,\n            TSClassImplements(node) {\n                checkBannedTypes(node);\n            },\n            TSInterfaceHeritage(node) {\n                checkBannedTypes(node);\n            },\n            TSTupleType(node) {\n                if (!node.elementTypes.length) {\n                    checkBannedTypes(node);\n                }\n            },\n            TSTypeLiteral(node) {\n                if (!node.members.length) {\n                    checkBannedTypes(node);\n                }\n            },\n            TSTypeReference(node) {\n                checkBannedTypes(node.typeName);\n                if (node.typeArguments) {\n                    checkBannedTypes(node);\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}