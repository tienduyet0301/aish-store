{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-dupe-class-members.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891963767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('no-dupe-class-members');\nexports.default = (0, util_1.createRule)({\n    name: 'no-dupe-class-members',\n    meta: {\n        type: 'problem',\n        // defaultOptions, -- base rule does not use defaultOptions\n        docs: {\n            description: 'Disallow duplicate class members',\n            extendsBaseRule: true,\n        },\n        hasSuggestions: baseRule.meta.hasSuggestions,\n        messages: baseRule.meta.messages,\n        schema: baseRule.meta.schema,\n    },\n    defaultOptions: [],\n    create(context) {\n        const rules = baseRule.create(context);\n        function wrapMemberDefinitionListener(coreListener) {\n            return (node) => {\n                if (node.computed) {\n                    return;\n                }\n                if (node.value &&\n                    node.value.type === utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression) {\n                    return;\n                }\n                return coreListener(node);\n            };\n        }\n        return {\n            ...rules,\n            'MethodDefinition, PropertyDefinition': wrapMemberDefinitionListener(rules['MethodDefinition, PropertyDefinition']),\n        };\n    },\n});\n"
        }
    ]
}