{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-duplicate-enum-values.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891963863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-duplicate-enum-values',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow duplicate enum member values',\n            recommended: 'recommended',\n        },\n        hasSuggestions: false,\n        messages: {\n            duplicateValue: 'Duplicate enum member value {{value}}.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        function isStringLiteral(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.Literal && typeof node.value === 'string');\n        }\n        function isNumberLiteral(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.Literal && typeof node.value === 'number');\n        }\n        function isStaticTemplateLiteral(node) {\n            return (node.type === utils_1.AST_NODE_TYPES.TemplateLiteral &&\n                node.expressions.length === 0 &&\n                node.quasis.length === 1);\n        }\n        return {\n            TSEnumDeclaration(node) {\n                const enumMembers = node.body.members;\n                const seenValues = new Set();\n                enumMembers.forEach(member => {\n                    if (member.initializer == null) {\n                        return;\n                    }\n                    let value;\n                    if (isStringLiteral(member.initializer)) {\n                        value = String(member.initializer.value);\n                    }\n                    else if (isNumberLiteral(member.initializer)) {\n                        value = Number(member.initializer.value);\n                    }\n                    else if (isStaticTemplateLiteral(member.initializer)) {\n                        value = member.initializer.quasis[0].value.cooked;\n                    }\n                    if (value == null) {\n                        return;\n                    }\n                    if (seenValues.has(value)) {\n                        context.report({\n                            node: member,\n                            messageId: 'duplicateValue',\n                            data: {\n                                value,\n                            },\n                        });\n                    }\n                    else {\n                        seenValues.add(value);\n                    }\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}