{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-nullish-coalescing.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891972647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst isIdentifierOrMemberOrChainExpression = (0, util_1.isNodeOfTypes)([\n    utils_1.AST_NODE_TYPES.ChainExpression,\n    utils_1.AST_NODE_TYPES.Identifier,\n    utils_1.AST_NODE_TYPES.MemberExpression,\n]);\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-nullish-coalescing',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Enforce using the nullish coalescing operator instead of logical assignments or chaining',\n            recommended: 'stylistic',\n            requiresTypeChecking: true,\n        },\n        hasSuggestions: true,\n        messages: {\n            noStrictNullCheck: 'This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.',\n            preferNullishOverOr: 'Prefer using nullish coalescing operator (`??{{ equals }}`) instead of a logical {{ description }} (`||{{ equals }}`), as it is a safer operator.',\n            preferNullishOverTernary: 'Prefer using nullish coalescing operator (`??{{ equals }}`) instead of a ternary expression, as it is simpler to read.',\n            suggestNullish: 'Fix to nullish coalescing operator (`??{{ equals }}`).',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: {\n                        type: 'boolean',\n                        description: 'Unless this is set to `true`, the rule will error on every file whose `tsconfig.json` does _not_ have the `strictNullChecks` compiler option (or `strict`) set to `true`.',\n                    },\n                    ignoreBooleanCoercion: {\n                        type: 'boolean',\n                        description: 'Whether to ignore arguments to the `Boolean` constructor',\n                    },\n                    ignoreConditionalTests: {\n                        type: 'boolean',\n                        description: 'Whether to ignore cases that are located within a conditional test.',\n                    },\n                    ignoreMixedLogicalExpressions: {\n                        type: 'boolean',\n                        description: 'Whether to ignore any logical or expressions that are part of a mixed logical expression (with `&&`).',\n                    },\n                    ignorePrimitives: {\n                        description: 'Whether to ignore all (`true`) or some (an object with properties) primitive types.',\n                        oneOf: [\n                            {\n                                type: 'object',\n                                description: 'Which primitives types may be ignored.',\n                                properties: {\n                                    bigint: {\n                                        type: 'boolean',\n                                        description: 'Ignore bigint primitive types.',\n                                    },\n                                    boolean: {\n                                        type: 'boolean',\n                                        description: 'Ignore boolean primitive types.',\n                                    },\n                                    number: {\n                                        type: 'boolean',\n                                        description: 'Ignore number primitive types.',\n                                    },\n                                    string: {\n                                        type: 'boolean',\n                                        description: 'Ignore string primitive types.',\n                                    },\n                                },\n                            },\n                            {\n                                type: 'boolean',\n                                description: 'Ignore all primitive types.',\n                                enum: [true],\n                            },\n                        ],\n                    },\n                    ignoreTernaryTests: {\n                        type: 'boolean',\n                        description: 'Whether to ignore any ternary expressions that could be simplified by using the nullish coalescing operator.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,\n            ignoreBooleanCoercion: false,\n            ignoreConditionalTests: true,\n            ignoreMixedLogicalExpressions: false,\n            ignorePrimitives: {\n                bigint: false,\n                boolean: false,\n                number: false,\n                string: false,\n            },\n            ignoreTernaryTests: false,\n        },\n    ],\n    create(context, [{ allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing, ignoreBooleanCoercion, ignoreConditionalTests, ignoreMixedLogicalExpressions, ignorePrimitives, ignoreTernaryTests, },]) {\n        const parserServices = (0, util_1.getParserServices)(context);\n        const compilerOptions = parserServices.program.getCompilerOptions();\n        const isStrictNullChecks = tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'strictNullChecks');\n        if (!isStrictNullChecks &&\n            allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing !== true) {\n            context.report({\n                loc: {\n                    start: { column: 0, line: 0 },\n                    end: { column: 0, line: 0 },\n                },\n                messageId: 'noStrictNullCheck',\n            });\n        }\n        /**\n         * Checks whether a type tested for truthiness is eligible for conversion to\n         * a nullishness check, taking into account the rule's configuration.\n         */\n        function isTypeEligibleForPreferNullish(type) {\n            if (!(0, util_1.isPossiblyNullish)(type)) {\n                return false;\n            }\n            const ignorableFlags = [\n                /* eslint-disable @typescript-eslint/no-non-null-assertion */\n                (ignorePrimitives === true || ignorePrimitives.bigint) &&\n                    ts.TypeFlags.BigIntLike,\n                (ignorePrimitives === true || ignorePrimitives.boolean) &&\n                    ts.TypeFlags.BooleanLike,\n                (ignorePrimitives === true || ignorePrimitives.number) &&\n                    ts.TypeFlags.NumberLike,\n                (ignorePrimitives === true || ignorePrimitives.string) &&\n                    ts.TypeFlags.StringLike,\n                /* eslint-enable @typescript-eslint/no-non-null-assertion */\n            ]\n                .filter((flag) => typeof flag === 'number')\n                .reduce((previous, flag) => previous | flag, 0);\n            if (type.flags !== ts.TypeFlags.Null &&\n                type.flags !== ts.TypeFlags.Undefined &&\n                type.types.some(t => tsutils\n                    .intersectionTypeParts(t)\n                    .some(t => tsutils.isTypeFlagSet(t, ignorableFlags)))) {\n                return false;\n            }\n            return true;\n        }\n        /**\n         * Determines whether a control flow construct that uses the truthiness of\n         * a test expression is eligible for conversion to the nullish coalescing\n         * operator, taking into account (both dependent on the rule's configuration):\n         * 1. Whether the construct is in a permitted syntactic context\n         * 2. Whether the type of the test expression is deemed eligible for\n         *    conversion\n         *\n         * @param node The overall node to be converted (e.g. `a || b` or `a ? a : b`)\n         * @param testNode The node being tested (i.e. `a`)\n         */\n        function isTruthinessCheckEligibleForPreferNullish({ node, testNode, }) {\n            const testType = parserServices.getTypeAtLocation(testNode);\n            if (!isTypeEligibleForPreferNullish(testType)) {\n                return false;\n            }\n            if (ignoreConditionalTests === true && isConditionalTest(node)) {\n                return false;\n            }\n            if (ignoreBooleanCoercion === true &&\n                isBooleanConstructorContext(node, context)) {\n                return false;\n            }\n            return true;\n        }\n        function checkAndFixWithPreferNullishOverOr(node, description, equals) {\n            if (!isTruthinessCheckEligibleForPreferNullish({\n                node,\n                testNode: node.left,\n            })) {\n                return;\n            }\n            if (ignoreMixedLogicalExpressions === true &&\n                isMixedLogicalExpression(node)) {\n                return;\n            }\n            const barBarOperator = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(node.left, token => token.type === utils_1.AST_TOKEN_TYPES.Punctuator &&\n                token.value === node.operator), util_1.NullThrowsReasons.MissingToken('operator', node.type));\n            function* fix(fixer) {\n                if ((0, util_1.isLogicalOrOperator)(node.parent)) {\n                    // '&&' and '??' operations cannot be mixed without parentheses (e.g. a && b ?? c)\n                    if (node.left.type === utils_1.AST_NODE_TYPES.LogicalExpression &&\n                        !(0, util_1.isLogicalOrOperator)(node.left.left)) {\n                        yield fixer.insertTextBefore(node.left.right, '(');\n                    }\n                    else {\n                        yield fixer.insertTextBefore(node.left, '(');\n                    }\n                    yield fixer.insertTextAfter(node.right, ')');\n                }\n                yield fixer.replaceText(barBarOperator, node.operator.replace('||', '??'));\n            }\n            context.report({\n                node: barBarOperator,\n                messageId: 'preferNullishOverOr',\n                data: { description, equals },\n                suggest: [\n                    {\n                        messageId: 'suggestNullish',\n                        data: { equals },\n                        fix,\n                    },\n                ],\n            });\n        }\n        return {\n            'AssignmentExpression[operator = \"||=\"]'(node) {\n                checkAndFixWithPreferNullishOverOr(node, 'assignment', '=');\n            },\n            ConditionalExpression(node) {\n                if (ignoreTernaryTests) {\n                    return;\n                }\n                let operator;\n                let nodesInsideTestExpression = [];\n                if (node.test.type === utils_1.AST_NODE_TYPES.BinaryExpression) {\n                    nodesInsideTestExpression = [node.test.left, node.test.right];\n                    if (node.test.operator === '==' ||\n                        node.test.operator === '!=' ||\n                        node.test.operator === '===' ||\n                        node.test.operator === '!==') {\n                        operator = node.test.operator;\n                    }\n                }\n                else if (node.test.type === utils_1.AST_NODE_TYPES.LogicalExpression &&\n                    node.test.left.type === utils_1.AST_NODE_TYPES.BinaryExpression &&\n                    node.test.right.type === utils_1.AST_NODE_TYPES.BinaryExpression) {\n                    nodesInsideTestExpression = [\n                        node.test.left.left,\n                        node.test.left.right,\n                        node.test.right.left,\n                        node.test.right.right,\n                    ];\n                    if (['||', '||='].includes(node.test.operator)) {\n                        if (node.test.left.operator === '===' &&\n                            node.test.right.operator === '===') {\n                            operator = '===';\n                        }\n                        else if (((node.test.left.operator === '===' ||\n                            node.test.right.operator === '===') &&\n                            (node.test.left.operator === '==' ||\n                                node.test.right.operator === '==')) ||\n                            (node.test.left.operator === '==' &&\n                                node.test.right.operator === '==')) {\n                            operator = '==';\n                        }\n                    }\n                    else if (node.test.operator === '&&') {\n                        if (node.test.left.operator === '!==' &&\n                            node.test.right.operator === '!==') {\n                            operator = '!==';\n                        }\n                        else if (((node.test.left.operator === '!==' ||\n                            node.test.right.operator === '!==') &&\n                            (node.test.left.operator === '!=' ||\n                                node.test.right.operator === '!=')) ||\n                            (node.test.left.operator === '!=' &&\n                                node.test.right.operator === '!=')) {\n                            operator = '!=';\n                        }\n                    }\n                }\n                let nullishCoalescingLeftNode;\n                let hasTruthinessCheck = false;\n                let hasNullCheckWithoutTruthinessCheck = false;\n                let hasUndefinedCheckWithoutTruthinessCheck = false;\n                if (!operator) {\n                    let testNode;\n                    hasTruthinessCheck = true;\n                    if (isIdentifierOrMemberOrChainExpression(node.test)) {\n                        testNode = node.test;\n                    }\n                    else if (node.test.type === utils_1.AST_NODE_TYPES.UnaryExpression &&\n                        isIdentifierOrMemberOrChainExpression(node.test.argument) &&\n                        node.test.operator === '!') {\n                        testNode = node.test.argument;\n                        operator = '!';\n                    }\n                    if (testNode &&\n                        areNodesSimilarMemberAccess(testNode, getBranchNodes(node, operator).nonNullishBranch)) {\n                        nullishCoalescingLeftNode = testNode;\n                    }\n                }\n                else {\n                    // we check that the test only contains null, undefined and the identifier\n                    for (const testNode of nodesInsideTestExpression) {\n                        if ((0, util_1.isNullLiteral)(testNode)) {\n                            hasNullCheckWithoutTruthinessCheck = true;\n                        }\n                        else if ((0, util_1.isUndefinedIdentifier)(testNode)) {\n                            hasUndefinedCheckWithoutTruthinessCheck = true;\n                        }\n                        else if (areNodesSimilarMemberAccess(testNode, getBranchNodes(node, operator).nonNullishBranch)) {\n                            // Only consider the first expression in a multi-part nullish check,\n                            // as subsequent expressions might not require all the optional chaining operators.\n                            // For example: a?.b?.c !== undefined && a.b.c !== null ? a.b.c : 'foo';\n                            // This works because `node.test` is always evaluated first in the loop\n                            // and has the same or more necessary optional chaining operators\n                            // than `node.alternate` or `node.consequent`.\n                            nullishCoalescingLeftNode ??= testNode;\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                }\n                if (!nullishCoalescingLeftNode) {\n                    return;\n                }\n                const isFixableWithPreferNullishOverTernary = (() => {\n                    // x ? x : y and !x ? y : x patterns\n                    if (hasTruthinessCheck) {\n                        return isTruthinessCheckEligibleForPreferNullish({\n                            node,\n                            testNode: nullishCoalescingLeftNode,\n                        });\n                    }\n                    // it is fixable if we check for both null and undefined, or not if neither\n                    if (hasUndefinedCheckWithoutTruthinessCheck ===\n                        hasNullCheckWithoutTruthinessCheck) {\n                        return hasUndefinedCheckWithoutTruthinessCheck;\n                    }\n                    // it is fixable if we loosely check for either null or undefined\n                    if (operator === '==' || operator === '!=') {\n                        return true;\n                    }\n                    const type = parserServices.getTypeAtLocation(nullishCoalescingLeftNode);\n                    const flags = (0, util_1.getTypeFlags)(type);\n                    if (flags & (ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {\n                        return false;\n                    }\n                    const hasNullType = (flags & ts.TypeFlags.Null) !== 0;\n                    // it is fixable if we check for undefined and the type is not nullable\n                    if (hasUndefinedCheckWithoutTruthinessCheck && !hasNullType) {\n                        return true;\n                    }\n                    const hasUndefinedType = (flags & ts.TypeFlags.Undefined) !== 0;\n                    // it is fixable if we check for null and the type can't be undefined\n                    return hasNullCheckWithoutTruthinessCheck && !hasUndefinedType;\n                })();\n                if (isFixableWithPreferNullishOverTernary) {\n                    context.report({\n                        node,\n                        messageId: 'preferNullishOverTernary',\n                        // TODO: also account for = in the ternary clause\n                        data: { equals: '' },\n                        suggest: [\n                            {\n                                messageId: 'suggestNullish',\n                                data: { equals: '' },\n                                fix(fixer) {\n                                    return fixer.replaceText(node, `${(0, util_1.getTextWithParentheses)(context.sourceCode, nullishCoalescingLeftNode)} ?? ${(0, util_1.getTextWithParentheses)(context.sourceCode, getBranchNodes(node, operator).nullishBranch)}`);\n                                },\n                            },\n                        ],\n                    });\n                }\n            },\n            'LogicalExpression[operator = \"||\"]'(node) {\n                checkAndFixWithPreferNullishOverOr(node, 'or', '');\n            },\n        };\n    },\n});\nfunction isConditionalTest(node) {\n    const parent = node.parent;\n    if (parent == null) {\n        return false;\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.LogicalExpression) {\n        return isConditionalTest(parent);\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.ConditionalExpression &&\n        (parent.consequent === node || parent.alternate === node)) {\n        return isConditionalTest(parent);\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.SequenceExpression &&\n        parent.expressions.at(-1) === node) {\n        return isConditionalTest(parent);\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.UnaryExpression &&\n        parent.operator === '!') {\n        return isConditionalTest(parent);\n    }\n    if ((parent.type === utils_1.AST_NODE_TYPES.ConditionalExpression ||\n        parent.type === utils_1.AST_NODE_TYPES.DoWhileStatement ||\n        parent.type === utils_1.AST_NODE_TYPES.IfStatement ||\n        parent.type === utils_1.AST_NODE_TYPES.ForStatement ||\n        parent.type === utils_1.AST_NODE_TYPES.WhileStatement) &&\n        parent.test === node) {\n        return true;\n    }\n    return false;\n}\nfunction isBooleanConstructorContext(node, context) {\n    const parent = node.parent;\n    if (parent == null) {\n        return false;\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.LogicalExpression) {\n        return isBooleanConstructorContext(parent, context);\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.ConditionalExpression &&\n        (parent.consequent === node || parent.alternate === node)) {\n        return isBooleanConstructorContext(parent, context);\n    }\n    if (parent.type === utils_1.AST_NODE_TYPES.SequenceExpression &&\n        parent.expressions.at(-1) === node) {\n        return isBooleanConstructorContext(parent, context);\n    }\n    return isBuiltInBooleanCall(parent, context);\n}\nfunction isBuiltInBooleanCall(node, context) {\n    if (node.type === utils_1.AST_NODE_TYPES.CallExpression &&\n        node.callee.type === utils_1.AST_NODE_TYPES.Identifier &&\n        // eslint-disable-next-line @typescript-eslint/internal/prefer-ast-types-enum\n        node.callee.name === 'Boolean' &&\n        node.arguments[0]) {\n        const scope = context.sourceCode.getScope(node);\n        const variable = scope.set.get(utils_1.AST_TOKEN_TYPES.Boolean);\n        return variable == null || variable.defs.length === 0;\n    }\n    return false;\n}\nfunction isMixedLogicalExpression(node) {\n    const seen = new Set();\n    const queue = [node.parent, node.left, node.right];\n    for (const current of queue) {\n        if (seen.has(current)) {\n            continue;\n        }\n        seen.add(current);\n        if (current.type === utils_1.AST_NODE_TYPES.LogicalExpression) {\n            if (current.operator === '&&') {\n                return true;\n            }\n            if (['||', '||='].includes(current.operator)) {\n                // check the pieces of the node to catch cases like `a || b || c && d`\n                queue.push(current.parent, current.left, current.right);\n            }\n        }\n    }\n    return false;\n}\n/**\n * Checks if two TSESTree nodes have the same member access sequence,\n * regardless of optional chaining differences.\n *\n * Note: This does not imply that the nodes are runtime-equivalent.\n *\n * Example: `a.b.c`, `a?.b.c`, `a.b?.c`, `(a?.b).c`, `(a.b)?.c` are considered similar.\n *\n * @param a First TSESTree node.\n * @param b Second TSESTree node.\n * @returns `true` if the nodes access members in the same order; otherwise, `false`.\n */\nfunction areNodesSimilarMemberAccess(a, b) {\n    if (a.type === utils_1.AST_NODE_TYPES.MemberExpression &&\n        b.type === utils_1.AST_NODE_TYPES.MemberExpression) {\n        return ((0, util_1.isNodeEqual)(a.property, b.property) &&\n            areNodesSimilarMemberAccess(a.object, b.object));\n    }\n    if (a.type === utils_1.AST_NODE_TYPES.ChainExpression ||\n        b.type === utils_1.AST_NODE_TYPES.ChainExpression) {\n        return areNodesSimilarMemberAccess((0, util_1.skipChainExpression)(a), (0, util_1.skipChainExpression)(b));\n    }\n    return (0, util_1.isNodeEqual)(a, b);\n}\n/**\n * Returns the branch nodes of a conditional expression:\n * - the \"nonNullish branch\" is the branch when test node is not nullish\n * - the \"nullish branch\" is the branch when test node is nullish\n */\nfunction getBranchNodes(node, operator) {\n    if (!operator || ['!=', '!=='].includes(operator)) {\n        return { nonNullishBranch: node.consequent, nullishBranch: node.alternate };\n    }\n    return { nonNullishBranch: node.alternate, nullishBranch: node.consequent };\n}\n"
        }
    ]
}