{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/max-params.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891961780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('max-params');\nexports.default = (0, util_1.createRule)({\n    name: 'max-params',\n    meta: {\n        type: 'suggestion',\n        // defaultOptions, -- base rule does not use defaultOptions\n        docs: {\n            description: 'Enforce a maximum number of parameters in function definitions',\n            extendsBaseRule: true,\n        },\n        messages: baseRule.meta.messages,\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    countVoidThis: {\n                        type: 'boolean',\n                        description: 'Whether to count a `this` declaration when the type is `void`.',\n                    },\n                    max: {\n                        type: 'integer',\n                        description: 'A maximum number of parameters in function definitions.',\n                        minimum: 0,\n                    },\n                    maximum: {\n                        type: 'integer',\n                        description: '(deprecated) A maximum number of parameters in function definitions.',\n                        minimum: 0,\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [{ countVoidThis: false, max: 3 }],\n    create(context, [{ countVoidThis }]) {\n        const baseRules = baseRule.create(context);\n        if (countVoidThis === true) {\n            return baseRules;\n        }\n        const removeVoidThisParam = (node) => {\n            if (node.params.length === 0 ||\n                node.params[0].type !== utils_1.AST_NODE_TYPES.Identifier ||\n                node.params[0].name !== 'this' ||\n                node.params[0].typeAnnotation?.typeAnnotation.type !==\n                    utils_1.AST_NODE_TYPES.TSVoidKeyword) {\n                return node;\n            }\n            return {\n                ...node,\n                params: node.params.slice(1),\n            };\n        };\n        const wrapListener = (listener) => {\n            return (node) => {\n                listener(removeVoidThisParam(node));\n            };\n        };\n        return {\n            ArrowFunctionExpression: wrapListener(baseRules.ArrowFunctionExpression),\n            FunctionDeclaration: wrapListener(baseRules.FunctionDeclaration),\n            FunctionExpression: wrapListener(baseRules.FunctionExpression),\n            TSDeclareFunction: wrapListener(baseRules.FunctionDeclaration),\n            TSFunctionType: wrapListener(baseRules.FunctionDeclaration),\n        };\n    },\n});\n"
        }
    ]
}