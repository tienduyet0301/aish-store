{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/naming-convention-utils/schema.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891962500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SCHEMA = void 0;\nconst util_1 = require(\"../../util\");\nconst enums_1 = require(\"./enums\");\nconst $DEFS = {\n    // enums\n    predefinedFormats: {\n        enum: (0, util_1.getEnumNames)(enums_1.PredefinedFormats),\n        type: 'string',\n    },\n    typeModifiers: {\n        enum: (0, util_1.getEnumNames)(enums_1.TypeModifiers),\n        type: 'string',\n    },\n    underscoreOptions: {\n        enum: (0, util_1.getEnumNames)(enums_1.UnderscoreOptions),\n        type: 'string',\n    },\n    // repeated types\n    formatOptionsConfig: {\n        oneOf: [\n            {\n                additionalItems: false,\n                items: {\n                    $ref: '#/$defs/predefinedFormats',\n                },\n                type: 'array',\n            },\n            {\n                type: 'null',\n            },\n        ],\n    },\n    matchRegexConfig: {\n        additionalProperties: false,\n        properties: {\n            match: { type: 'boolean' },\n            regex: { type: 'string' },\n        },\n        required: ['match', 'regex'],\n        type: 'object',\n    },\n    prefixSuffixConfig: {\n        additionalItems: false,\n        items: {\n            minLength: 1,\n            type: 'string',\n        },\n        type: 'array',\n    },\n};\nconst UNDERSCORE_SCHEMA = {\n    $ref: '#/$defs/underscoreOptions',\n};\nconst PREFIX_SUFFIX_SCHEMA = {\n    $ref: '#/$defs/prefixSuffixConfig',\n};\nconst MATCH_REGEX_SCHEMA = {\n    $ref: '#/$defs/matchRegexConfig',\n};\nconst FORMAT_OPTIONS_PROPERTIES = {\n    custom: MATCH_REGEX_SCHEMA,\n    failureMessage: {\n        type: 'string',\n    },\n    format: {\n        $ref: '#/$defs/formatOptionsConfig',\n    },\n    leadingUnderscore: UNDERSCORE_SCHEMA,\n    prefix: PREFIX_SUFFIX_SCHEMA,\n    suffix: PREFIX_SUFFIX_SCHEMA,\n    trailingUnderscore: UNDERSCORE_SCHEMA,\n};\nfunction selectorSchema(selectorString, allowType, modifiers) {\n    const selector = {\n        filter: {\n            oneOf: [\n                {\n                    minLength: 1,\n                    type: 'string',\n                },\n                MATCH_REGEX_SCHEMA,\n            ],\n        },\n        selector: {\n            enum: [selectorString],\n            type: 'string',\n        },\n    };\n    if (modifiers && modifiers.length > 0) {\n        selector.modifiers = {\n            additionalItems: false,\n            items: {\n                enum: modifiers,\n                type: 'string',\n            },\n            type: 'array',\n        };\n    }\n    if (allowType) {\n        selector.types = {\n            additionalItems: false,\n            items: {\n                $ref: '#/$defs/typeModifiers',\n            },\n            type: 'array',\n        };\n    }\n    return [\n        {\n            additionalProperties: false,\n            description: `Selector '${selectorString}'`,\n            properties: {\n                ...FORMAT_OPTIONS_PROPERTIES,\n                ...selector,\n            },\n            required: ['selector', 'format'],\n            type: 'object',\n        },\n    ];\n}\nfunction selectorsSchema() {\n    return {\n        additionalProperties: false,\n        description: 'Multiple selectors in one config',\n        properties: {\n            ...FORMAT_OPTIONS_PROPERTIES,\n            filter: {\n                oneOf: [\n                    {\n                        minLength: 1,\n                        type: 'string',\n                    },\n                    MATCH_REGEX_SCHEMA,\n                ],\n            },\n            modifiers: {\n                additionalItems: false,\n                items: {\n                    enum: (0, util_1.getEnumNames)(enums_1.Modifiers),\n                    type: 'string',\n                },\n                type: 'array',\n            },\n            selector: {\n                additionalItems: false,\n                items: {\n                    enum: [...(0, util_1.getEnumNames)(enums_1.MetaSelectors), ...(0, util_1.getEnumNames)(enums_1.Selectors)],\n                    type: 'string',\n                },\n                type: 'array',\n            },\n            types: {\n                additionalItems: false,\n                items: {\n                    $ref: '#/$defs/typeModifiers',\n                },\n                type: 'array',\n            },\n        },\n        required: ['selector', 'format'],\n        type: 'object',\n    };\n}\nexports.SCHEMA = {\n    $defs: $DEFS,\n    additionalItems: false,\n    items: {\n        oneOf: [\n            selectorsSchema(),\n            ...selectorSchema('default', false, (0, util_1.getEnumNames)(enums_1.Modifiers)),\n            ...selectorSchema('variableLike', false, ['unused', 'async']),\n            ...selectorSchema('variable', true, [\n                'const',\n                'destructured',\n                'exported',\n                'global',\n                'unused',\n                'async',\n            ]),\n            ...selectorSchema('function', false, [\n                'exported',\n                'global',\n                'unused',\n                'async',\n            ]),\n            ...selectorSchema('parameter', true, ['destructured', 'unused']),\n            ...selectorSchema('memberLike', false, [\n                'abstract',\n                'private',\n                '#private',\n                'protected',\n                'public',\n                'readonly',\n                'requiresQuotes',\n                'static',\n                'override',\n                'async',\n            ]),\n            ...selectorSchema('classProperty', true, [\n                'abstract',\n                'private',\n                '#private',\n                'protected',\n                'public',\n                'readonly',\n                'requiresQuotes',\n                'static',\n                'override',\n            ]),\n            ...selectorSchema('objectLiteralProperty', true, [\n                'public',\n                'requiresQuotes',\n            ]),\n            ...selectorSchema('typeProperty', true, [\n                'public',\n                'readonly',\n                'requiresQuotes',\n            ]),\n            ...selectorSchema('parameterProperty', true, [\n                'private',\n                'protected',\n                'public',\n                'readonly',\n            ]),\n            ...selectorSchema('property', true, [\n                'abstract',\n                'private',\n                '#private',\n                'protected',\n                'public',\n                'readonly',\n                'requiresQuotes',\n                'static',\n                'override',\n                'async',\n            ]),\n            ...selectorSchema('classMethod', false, [\n                'abstract',\n                'private',\n                '#private',\n                'protected',\n                'public',\n                'requiresQuotes',\n                'static',\n                'override',\n                'async',\n            ]),\n            ...selectorSchema('objectLiteralMethod', false, [\n                'public',\n                'requiresQuotes',\n                'async',\n            ]),\n            ...selectorSchema('typeMethod', false, ['public', 'requiresQuotes']),\n            ...selectorSchema('method', false, [\n                'abstract',\n                'private',\n                '#private',\n                'protected',\n                'public',\n                'requiresQuotes',\n                'static',\n                'override',\n                'async',\n            ]),\n            ...selectorSchema('classicAccessor', true, [\n                'abstract',\n                'private',\n                'protected',\n                'public',\n                'requiresQuotes',\n                'static',\n                'override',\n            ]),\n            ...selectorSchema('autoAccessor', true, [\n                'abstract',\n                'private',\n                'protected',\n                'public',\n                'requiresQuotes',\n                'static',\n                'override',\n            ]),\n            ...selectorSchema('accessor', true, [\n                'abstract',\n                'private',\n                'protected',\n                'public',\n                'requiresQuotes',\n                'static',\n                'override',\n            ]),\n            ...selectorSchema('enumMember', false, ['requiresQuotes']),\n            ...selectorSchema('typeLike', false, ['abstract', 'exported', 'unused']),\n            ...selectorSchema('class', false, ['abstract', 'exported', 'unused']),\n            ...selectorSchema('interface', false, ['exported', 'unused']),\n            ...selectorSchema('typeAlias', false, ['exported', 'unused']),\n            ...selectorSchema('enum', false, ['exported', 'unused']),\n            ...selectorSchema('typeParameter', false, ['unused']),\n            ...selectorSchema('import', false, ['default', 'namespace']),\n        ],\n    },\n    type: 'array',\n};\n"
        }
    ]
}