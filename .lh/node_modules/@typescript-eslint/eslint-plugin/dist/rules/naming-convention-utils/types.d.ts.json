{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/naming-convention-utils/types.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891962614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESLint, TSESTree } from '@typescript-eslint/utils';\nimport type { MessageIds, Options } from '../naming-convention';\nimport type { IndividualAndMetaSelectorsString, MetaSelectors, Modifiers, ModifiersString, PredefinedFormats, PredefinedFormatsString, Selectors, SelectorsString, TypeModifiers, TypeModifiersString, UnderscoreOptions, UnderscoreOptionsString } from './enums';\nexport interface MatchRegex {\n    match: boolean;\n    regex: string;\n}\nexport interface Selector {\n    custom?: MatchRegex;\n    filter?: string | MatchRegex;\n    format: PredefinedFormatsString[] | null;\n    leadingUnderscore?: UnderscoreOptionsString;\n    modifiers?: ModifiersString[];\n    prefix?: string[];\n    selector: IndividualAndMetaSelectorsString | IndividualAndMetaSelectorsString[];\n    suffix?: string[];\n    trailingUnderscore?: UnderscoreOptionsString;\n    types?: TypeModifiersString[];\n}\nexport interface NormalizedMatchRegex {\n    match: boolean;\n    regex: RegExp;\n}\nexport interface NormalizedSelector {\n    custom: NormalizedMatchRegex | null;\n    filter: NormalizedMatchRegex | null;\n    format: PredefinedFormats[] | null;\n    leadingUnderscore: UnderscoreOptions | null;\n    modifiers: Modifiers[] | null;\n    modifierWeight: number;\n    prefix: string[] | null;\n    selector: MetaSelectors | Selectors;\n    suffix: string[] | null;\n    trailingUnderscore: UnderscoreOptions | null;\n    types: TypeModifiers[] | null;\n}\nexport type ValidatorFunction = (node: TSESTree.Identifier | TSESTree.Literal | TSESTree.PrivateIdentifier, modifiers?: Set<Modifiers>) => void;\nexport type ParsedOptions = Record<SelectorsString, ValidatorFunction>;\nexport type Context = Readonly<TSESLint.RuleContext<MessageIds, Options>>;\n//# sourceMappingURL=types.d.ts.map"
        }
    ]
}