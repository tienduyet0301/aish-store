{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/promise-function-async.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891974535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'promise-function-async',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Require any function or method that returns a Promise to be marked async',\n            requiresTypeChecking: true,\n        },\n        fixable: 'code',\n        messages: {\n            missingAsync: 'Functions that return promises must be async.',\n        },\n        schema: [\n            {\n                type: 'object',\n                additionalProperties: false,\n                properties: {\n                    allowAny: {\n                        type: 'boolean',\n                        description: 'Whether to consider `any` and `unknown` to be Promises.',\n                    },\n                    allowedPromiseNames: {\n                        type: 'array',\n                        description: 'Any extra names of classes or interfaces to be considered Promises.',\n                        items: {\n                            type: 'string',\n                        },\n                    },\n                    checkArrowFunctions: {\n                        type: 'boolean',\n                        description: 'Whether to check arrow functions.',\n                    },\n                    checkFunctionDeclarations: {\n                        type: 'boolean',\n                        description: 'Whether to check standalone function declarations.',\n                    },\n                    checkFunctionExpressions: {\n                        type: 'boolean',\n                        description: 'Whether to check inline function expressions',\n                    },\n                    checkMethodDeclarations: {\n                        type: 'boolean',\n                        description: 'Whether to check methods on classes and object literals.',\n                    },\n                },\n            },\n        ],\n    },\n    defaultOptions: [\n        {\n            allowAny: true,\n            allowedPromiseNames: [],\n            checkArrowFunctions: true,\n            checkFunctionDeclarations: true,\n            checkFunctionExpressions: true,\n            checkMethodDeclarations: true,\n        },\n    ],\n    create(context, [{ allowAny, allowedPromiseNames, checkArrowFunctions, checkFunctionDeclarations, checkFunctionExpressions, checkMethodDeclarations, },]) {\n        const allAllowedPromiseNames = new Set([\n            'Promise',\n            // https://github.com/typescript-eslint/typescript-eslint/issues/5439\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            ...allowedPromiseNames,\n        ]);\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        function validateNode(node) {\n            if (node.parent.type === utils_1.AST_NODE_TYPES.TSAbstractMethodDefinition) {\n                // Abstract method can't be async\n                return;\n            }\n            if ((node.parent.type === utils_1.AST_NODE_TYPES.Property ||\n                node.parent.type === utils_1.AST_NODE_TYPES.MethodDefinition) &&\n                (node.parent.kind === 'get' || node.parent.kind === 'set')) {\n                // Getters and setters can't be async\n                return;\n            }\n            const signatures = services.getTypeAtLocation(node).getCallSignatures();\n            if (!signatures.length) {\n                return;\n            }\n            const returnTypes = signatures.map(signature => checker.getReturnTypeOfSignature(signature));\n            if (!allowAny &&\n                returnTypes.some(type => (0, util_1.isTypeFlagSet)(type, ts.TypeFlags.Any | ts.TypeFlags.Unknown))) {\n                // Report without auto fixer because the return type is unknown\n                return context.report({\n                    loc: (0, util_1.getFunctionHeadLoc)(node, context.sourceCode),\n                    node,\n                    messageId: 'missingAsync',\n                });\n            }\n            if (\n            // require all potential return types to be promise/any/unknown\n            returnTypes.every(type => (0, util_1.containsAllTypesByName)(type, true, allAllowedPromiseNames, \n            // If no return type is explicitly set, we check if any parts of the return type match a Promise (instead of requiring all to match).\n            node.returnType == null))) {\n                context.report({\n                    loc: (0, util_1.getFunctionHeadLoc)(node, context.sourceCode),\n                    node,\n                    messageId: 'missingAsync',\n                    fix: fixer => {\n                        if (node.parent.type === utils_1.AST_NODE_TYPES.MethodDefinition ||\n                            (node.parent.type === utils_1.AST_NODE_TYPES.Property &&\n                                node.parent.method)) {\n                            // this function is a class method or object function property shorthand\n                            const method = node.parent;\n                            // the token to put `async` before\n                            let keyToken = (0, util_1.nullThrows)(context.sourceCode.getFirstToken(method), util_1.NullThrowsReasons.MissingToken('key token', 'method'));\n                            // if there are decorators then skip past them\n                            if (method.type === utils_1.AST_NODE_TYPES.MethodDefinition &&\n                                method.decorators.length) {\n                                const lastDecorator = method.decorators[method.decorators.length - 1];\n                                keyToken = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(lastDecorator), util_1.NullThrowsReasons.MissingToken('key token', 'last decorator'));\n                            }\n                            // if current token is a keyword like `static` or `public` then skip it\n                            while (keyToken.type === utils_1.AST_TOKEN_TYPES.Keyword &&\n                                keyToken.range[0] < method.key.range[0]) {\n                                keyToken = (0, util_1.nullThrows)(context.sourceCode.getTokenAfter(keyToken), util_1.NullThrowsReasons.MissingToken('token', 'keyword'));\n                            }\n                            // check if there is a space between key and previous token\n                            const insertSpace = !context.sourceCode.isSpaceBetween((0, util_1.nullThrows)(context.sourceCode.getTokenBefore(keyToken), util_1.NullThrowsReasons.MissingToken('token', 'keyword')), keyToken);\n                            let code = 'async ';\n                            if (insertSpace) {\n                                code = ` ${code}`;\n                            }\n                            return fixer.insertTextBefore(keyToken, code);\n                        }\n                        return fixer.insertTextBefore(node, 'async ');\n                    },\n                });\n            }\n        }\n        return {\n            ...(checkArrowFunctions && {\n                'ArrowFunctionExpression[async = false]'(node) {\n                    validateNode(node);\n                },\n            }),\n            ...(checkFunctionDeclarations && {\n                'FunctionDeclaration[async = false]'(node) {\n                    validateNode(node);\n                },\n            }),\n            'FunctionExpression[async = false]'(node) {\n                if (node.parent.type === utils_1.AST_NODE_TYPES.MethodDefinition &&\n                    node.parent.kind === 'method') {\n                    if (checkMethodDeclarations) {\n                        validateNode(node);\n                    }\n                    return;\n                }\n                if (checkFunctionExpressions) {\n                    validateNode(node);\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}