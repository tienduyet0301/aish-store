{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/consistent-return.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891960481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nconst getESLintCoreRule_1 = require(\"../util/getESLintCoreRule\");\nconst baseRule = (0, getESLintCoreRule_1.getESLintCoreRule)('consistent-return');\nconst defaultOptions = [{ treatUndefinedAsUnspecified: false }];\nexports.default = (0, util_1.createRule)({\n    name: 'consistent-return',\n    meta: {\n        type: 'suggestion',\n        defaultOptions,\n        docs: {\n            description: 'Require `return` statements to either always or never specify values',\n            extendsBaseRule: true,\n            requiresTypeChecking: true,\n        },\n        hasSuggestions: baseRule.meta.hasSuggestions,\n        messages: baseRule.meta.messages,\n        schema: baseRule.meta.schema,\n    },\n    defaultOptions,\n    create(context, [options]) {\n        const services = (0, util_1.getParserServices)(context);\n        const checker = services.program.getTypeChecker();\n        const rules = baseRule.create(context);\n        const functions = [];\n        const treatUndefinedAsUnspecified = options?.treatUndefinedAsUnspecified === true;\n        function enterFunction(node) {\n            functions.push(node);\n        }\n        function exitFunction() {\n            functions.pop();\n        }\n        function getCurrentFunction() {\n            return functions[functions.length - 1] ?? null;\n        }\n        function isPromiseVoid(node, type) {\n            if (tsutils.isThenableType(checker, node, type) &&\n                tsutils.isTypeReference(type)) {\n                const awaitedType = type.typeArguments?.[0];\n                if (awaitedType) {\n                    if ((0, util_1.isTypeFlagSet)(awaitedType, ts.TypeFlags.Void)) {\n                        return true;\n                    }\n                    return isPromiseVoid(node, awaitedType);\n                }\n            }\n            return false;\n        }\n        function isReturnVoidOrThenableVoid(node) {\n            const functionType = services.getTypeAtLocation(node);\n            const tsNode = services.esTreeNodeToTSNodeMap.get(node);\n            const callSignatures = functionType.getCallSignatures();\n            return callSignatures.some(signature => {\n                const returnType = signature.getReturnType();\n                if (node.async) {\n                    return isPromiseVoid(tsNode, returnType);\n                }\n                return (0, util_1.isTypeFlagSet)(returnType, ts.TypeFlags.Void);\n            });\n        }\n        return {\n            ...rules,\n            ArrowFunctionExpression: enterFunction,\n            'ArrowFunctionExpression:exit'(node) {\n                exitFunction();\n                rules['ArrowFunctionExpression:exit'](node);\n            },\n            FunctionDeclaration: enterFunction,\n            'FunctionDeclaration:exit'(node) {\n                exitFunction();\n                rules['FunctionDeclaration:exit'](node);\n            },\n            FunctionExpression: enterFunction,\n            'FunctionExpression:exit'(node) {\n                exitFunction();\n                rules['FunctionExpression:exit'](node);\n            },\n            ReturnStatement(node) {\n                const functionNode = getCurrentFunction();\n                if (!node.argument &&\n                    functionNode &&\n                    isReturnVoidOrThenableVoid(functionNode)) {\n                    return;\n                }\n                if (treatUndefinedAsUnspecified && node.argument) {\n                    const returnValueType = services.getTypeAtLocation(node.argument);\n                    if (returnValueType.flags === ts.TypeFlags.Undefined) {\n                        rules.ReturnStatement({\n                            ...node,\n                            argument: null,\n                        });\n                        return;\n                    }\n                }\n                rules.ReturnStatement(node);\n            },\n        };\n    },\n});\n"
        }
    ]
}