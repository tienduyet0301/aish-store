{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/prefer-as-const.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891971761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'prefer-as-const',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Enforce the use of `as const` over literal type',\n            recommended: 'recommended',\n        },\n        fixable: 'code',\n        hasSuggestions: true,\n        messages: {\n            preferConstAssertion: 'Expected a `const` instead of a literal type assertion.',\n            variableConstAssertion: 'Expected a `const` assertion instead of a literal type annotation.',\n            variableSuggest: 'You should use `as const` instead of type annotation.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        function compareTypes(valueNode, typeNode, canFix) {\n            if (valueNode.type === utils_1.AST_NODE_TYPES.Literal &&\n                typeNode.type === utils_1.AST_NODE_TYPES.TSLiteralType &&\n                typeNode.literal.type === utils_1.AST_NODE_TYPES.Literal &&\n                valueNode.raw === typeNode.literal.raw) {\n                if (canFix) {\n                    context.report({\n                        node: typeNode,\n                        messageId: 'preferConstAssertion',\n                        fix: fixer => fixer.replaceText(typeNode, 'const'),\n                    });\n                }\n                else {\n                    context.report({\n                        node: typeNode,\n                        messageId: 'variableConstAssertion',\n                        suggest: [\n                            {\n                                messageId: 'variableSuggest',\n                                fix: (fixer) => [\n                                    fixer.remove(typeNode.parent),\n                                    fixer.insertTextAfter(valueNode, ' as const'),\n                                ],\n                            },\n                        ],\n                    });\n                }\n            }\n        }\n        return {\n            PropertyDefinition(node) {\n                if (node.value && node.typeAnnotation) {\n                    compareTypes(node.value, node.typeAnnotation.typeAnnotation, false);\n                }\n            },\n            TSAsExpression(node) {\n                compareTypes(node.expression, node.typeAnnotation, true);\n            },\n            TSTypeAssertion(node) {\n                compareTypes(node.expression, node.typeAnnotation, true);\n            },\n            VariableDeclarator(node) {\n                if (node.init && node.id.typeAnnotation) {\n                    compareTypes(node.init, node.id.typeAnnotation.typeAnnotation, false);\n                }\n            },\n        };\n    },\n});\n"
        }
    ]
}