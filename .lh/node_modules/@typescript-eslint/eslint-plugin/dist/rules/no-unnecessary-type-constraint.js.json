{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unnecessary-type-constraint.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891969487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst node_path_1 = require(\"node:path\");\nconst ts = __importStar(require(\"typescript\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unnecessary-type-constraint',\n    meta: {\n        type: 'suggestion',\n        docs: {\n            description: 'Disallow unnecessary constraints on generic types',\n            recommended: 'recommended',\n        },\n        hasSuggestions: true,\n        messages: {\n            removeUnnecessaryConstraint: 'Remove the unnecessary `{{constraint}}` constraint.',\n            unnecessaryConstraint: 'Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        // In theory, we could use the type checker for more advanced constraint types...\n        // ...but in practice, these types are rare, and likely not worth requiring type info.\n        // https://github.com/typescript-eslint/typescript-eslint/pull/2516#discussion_r495731858\n        const unnecessaryConstraints = new Map([\n            [utils_1.AST_NODE_TYPES.TSAnyKeyword, 'any'],\n            [utils_1.AST_NODE_TYPES.TSUnknownKeyword, 'unknown'],\n        ]);\n        function checkRequiresGenericDeclarationDisambiguation(filename) {\n            const pathExt = (0, node_path_1.extname)(filename).toLocaleLowerCase();\n            switch (pathExt) {\n                case ts.Extension.Cts:\n                case ts.Extension.Mts:\n                case ts.Extension.Tsx:\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        const requiresGenericDeclarationDisambiguation = checkRequiresGenericDeclarationDisambiguation(context.filename);\n        const checkNode = (node, inArrowFunction) => {\n            const constraint = unnecessaryConstraints.get(node.constraint.type);\n            function shouldAddTrailingComma() {\n                if (!inArrowFunction || !requiresGenericDeclarationDisambiguation) {\n                    return false;\n                }\n                // Only <T>() => {} would need trailing comma\n                return (node.parent.params.length ===\n                    1 &&\n                    context.sourceCode.getTokensAfter(node)[0].value !== ',' &&\n                    !node.default);\n            }\n            if (constraint) {\n                context.report({\n                    node,\n                    messageId: 'unnecessaryConstraint',\n                    data: {\n                        name: node.name.name,\n                        constraint,\n                    },\n                    suggest: [\n                        {\n                            messageId: 'removeUnnecessaryConstraint',\n                            data: {\n                                constraint,\n                            },\n                            fix(fixer) {\n                                return fixer.replaceTextRange([node.name.range[1], node.constraint.range[1]], shouldAddTrailingComma() ? ',' : '');\n                            },\n                        },\n                    ],\n                });\n            }\n        };\n        return {\n            ':not(ArrowFunctionExpression) > TSTypeParameterDeclaration > TSTypeParameter[constraint]'(node) {\n                checkNode(node, false);\n            },\n            'ArrowFunctionExpression > TSTypeParameterDeclaration > TSTypeParameter[constraint]'(node) {\n                checkNode(node, true);\n            },\n        };\n    },\n});\n"
        }
    ]
}