{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-non-null-asserted-optional-chain.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891967669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-non-null-asserted-optional-chain',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow non-null assertions after an optional chain expression',\n            recommended: 'recommended',\n        },\n        hasSuggestions: true,\n        messages: {\n            noNonNullOptionalChain: 'Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.',\n            suggestRemovingNonNull: 'You should remove the non-null assertion.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        return {\n            // non-nulling a wrapped chain will scrub all nulls introduced by the chain\n            // (x?.y)!\n            // (x?.())!\n            'TSNonNullExpression > ChainExpression'(node) {\n                // selector guarantees this assertion\n                const parent = node.parent;\n                context.report({\n                    node,\n                    messageId: 'noNonNullOptionalChain',\n                    // use a suggestion instead of a fixer, because this can obviously break type checks\n                    suggest: [\n                        {\n                            messageId: 'suggestRemovingNonNull',\n                            fix(fixer) {\n                                return fixer.removeRange([\n                                    parent.range[1] - 1,\n                                    parent.range[1],\n                                ]);\n                            },\n                        },\n                    ],\n                });\n            },\n            // non-nulling at the end of a chain will scrub all nulls introduced by the chain\n            // x?.y!\n            // x?.()!\n            'ChainExpression > TSNonNullExpression'(node) {\n                context.report({\n                    node,\n                    messageId: 'noNonNullOptionalChain',\n                    // use a suggestion instead of a fixer, because this can obviously break type checks\n                    suggest: [\n                        {\n                            messageId: 'suggestRemovingNonNull',\n                            fix(fixer) {\n                                return fixer.removeRange([node.range[1] - 1, node.range[1]]);\n                            },\n                        },\n                    ],\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}