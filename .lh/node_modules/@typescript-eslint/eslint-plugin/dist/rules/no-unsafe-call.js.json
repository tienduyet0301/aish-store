{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-unsafe-call.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891969940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-unsafe-call',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Disallow calling a value with type `any`',\n            recommended: 'recommended',\n            requiresTypeChecking: true,\n        },\n        messages: {\n            unsafeCall: 'Unsafe call of a(n) {{type}} typed value.',\n            unsafeCallThis: [\n                'Unsafe call of a(n) {{type}} typed value. `this` is typed as {{type}}.',\n                'You can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.',\n            ].join('\\n'),\n            unsafeNew: 'Unsafe construction of a(n) {{type}} typed value.',\n            unsafeTemplateTag: 'Unsafe use of a(n) {{type}} typed template tag.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        const services = (0, util_1.getParserServices)(context);\n        const compilerOptions = services.program.getCompilerOptions();\n        const isNoImplicitThis = tsutils.isStrictCompilerOptionEnabled(compilerOptions, 'noImplicitThis');\n        function checkCall(node, reportingNode, messageId) {\n            const type = (0, util_1.getConstrainedTypeAtLocation)(services, node);\n            if ((0, util_1.isTypeAnyType)(type)) {\n                if (!isNoImplicitThis) {\n                    // `this()` or `this.foo()` or `this.foo[bar]()`\n                    const thisExpression = (0, util_1.getThisExpression)(node);\n                    if (thisExpression &&\n                        (0, util_1.isTypeAnyType)((0, util_1.getConstrainedTypeAtLocation)(services, thisExpression))) {\n                        messageId = 'unsafeCallThis';\n                    }\n                }\n                const isErrorType = tsutils.isIntrinsicErrorType(type);\n                context.report({\n                    node: reportingNode,\n                    messageId,\n                    data: {\n                        type: isErrorType ? '`error` type' : '`any`',\n                    },\n                });\n                return;\n            }\n            if ((0, util_1.isBuiltinSymbolLike)(services.program, type, 'Function')) {\n                // this also matches subtypes of `Function`, like `interface Foo extends Function {}`.\n                //\n                // For weird TS reasons that I don't understand, these are\n                //\n                // safe to construct if:\n                // - they have at least one call signature _that is not void-returning_,\n                // - OR they have at least one construct signature.\n                //\n                // safe to call (including as template) if:\n                // - they have at least one call signature\n                // - OR they have at least one construct signature.\n                const constructSignatures = type.getConstructSignatures();\n                if (constructSignatures.length > 0) {\n                    return;\n                }\n                const callSignatures = type.getCallSignatures();\n                if (messageId === 'unsafeNew') {\n                    if (callSignatures.some(signature => !tsutils.isIntrinsicVoidType(signature.getReturnType()))) {\n                        return;\n                    }\n                }\n                else if (callSignatures.length > 0) {\n                    return;\n                }\n                context.report({\n                    node: reportingNode,\n                    messageId,\n                    data: {\n                        type: '`Function`',\n                    },\n                });\n                return;\n            }\n        }\n        return {\n            'CallExpression > *.callee'(node) {\n                checkCall(node, node, 'unsafeCall');\n            },\n            NewExpression(node) {\n                checkCall(node.callee, node, 'unsafeNew');\n            },\n            'TaggedTemplateExpression > *.tag'(node) {\n                checkCall(node, node, 'unsafeTemplateTag');\n            },\n        };\n    },\n});\n"
        }
    ]
}