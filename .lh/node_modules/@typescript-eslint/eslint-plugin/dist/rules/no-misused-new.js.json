{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/dist/rules/no-misused-new.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891966651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@typescript-eslint/utils\");\nconst util_1 = require(\"../util\");\nexports.default = (0, util_1.createRule)({\n    name: 'no-misused-new',\n    meta: {\n        type: 'problem',\n        docs: {\n            description: 'Enforce valid definition of `new` and `constructor`',\n            recommended: 'recommended',\n        },\n        messages: {\n            errorMessageClass: 'Class cannot have method named `new`.',\n            errorMessageInterface: 'Interfaces cannot be constructed, only classes.',\n        },\n        schema: [],\n    },\n    defaultOptions: [],\n    create(context) {\n        /**\n         * @param node type to be inspected.\n         * @returns name of simple type or null\n         */\n        function getTypeReferenceName(node) {\n            if (node) {\n                switch (node.type) {\n                    case utils_1.AST_NODE_TYPES.TSTypeAnnotation:\n                        return getTypeReferenceName(node.typeAnnotation);\n                    case utils_1.AST_NODE_TYPES.TSTypeReference:\n                        return getTypeReferenceName(node.typeName);\n                    case utils_1.AST_NODE_TYPES.Identifier:\n                        return node.name;\n                    default:\n                        break;\n                }\n            }\n            return null;\n        }\n        /**\n         * @param parent parent node.\n         * @param returnType type to be compared\n         */\n        function isMatchingParentType(parent, returnType) {\n            if (parent &&\n                (parent.type === utils_1.AST_NODE_TYPES.ClassDeclaration ||\n                    parent.type === utils_1.AST_NODE_TYPES.ClassExpression ||\n                    parent.type === utils_1.AST_NODE_TYPES.TSInterfaceDeclaration) &&\n                parent.id) {\n                return getTypeReferenceName(returnType) === parent.id.name;\n            }\n            return false;\n        }\n        return {\n            \"ClassBody > MethodDefinition[key.name='new']\"(node) {\n                if (node.value.type === utils_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression &&\n                    isMatchingParentType(node.parent.parent, node.value.returnType)) {\n                    context.report({\n                        node,\n                        messageId: 'errorMessageClass',\n                    });\n                }\n            },\n            'TSInterfaceBody > TSConstructSignatureDeclaration'(node) {\n                if (isMatchingParentType(node.parent.parent, node.returnType)) {\n                    // constructor\n                    context.report({\n                        node,\n                        messageId: 'errorMessageInterface',\n                    });\n                }\n            },\n            \"TSMethodSignature[key.name='constructor']\"(node) {\n                context.report({\n                    node,\n                    messageId: 'errorMessageInterface',\n                });\n            },\n        };\n    },\n});\n"
        }
    ]
}