{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/require-array-sort-compare.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/require-array-sort-compare** for documentation.\n\nWhen called without a compare function, `Array#sort()` and `Array#toSorted()` converts all non-undefined array elements into strings and then compares said strings based off their UTF-16 code units [[ECMA specification](https://www.ecma-international.org/ecma-262/9.0/#sec-sortcompare)].\n\nThe result is that elements are sorted alphabetically, regardless of their type.\nFor example, when sorting numbers, this results in a \"10 before 2\" order:\n\n```ts\n[1, 2, 3, 10, 20, 30].sort(); //→ [1, 10, 2, 20, 3, 30]\n```\n\nThis rule reports on any call to the sort methods that do not provide a `compare` argument.\n\n## Examples\n\nThis rule aims to ensure all calls of the native sort methods provide a `compareFunction`, while ignoring calls to user-defined methods.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst array: any[];\nconst stringArray: string[];\n\narray.sort();\n\n// String arrays should be sorted using `String#localeCompare`.\nstringArray.sort();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst array: any[];\nconst userDefinedType: { sort(): void };\n\narray.sort((a, b) => a - b);\narray.sort((a, b) => a.localeCompare(b));\n\nuserDefinedType.sort();\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `ignoreStringArrays`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ ignoreStringArrays: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ignoreStringArrays\": true }'\nconst one = 1;\nconst two = 2;\nconst three = 3;\n[one, two, three].sort();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ignoreStringArrays\": true }'\nconst one = '1';\nconst two = '2';\nconst three = '3';\n[one, two, three].sort();\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you intentionally want your arrays to be always sorted in a string-like manner, you can turn this rule off safely.\n"
        }
    ]
}