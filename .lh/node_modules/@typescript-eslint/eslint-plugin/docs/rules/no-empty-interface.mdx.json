{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-empty-interface.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow the declaration of empty interfaces.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-empty-interface** for documentation.\n\n:::danger Deprecated\n\nThis rule has been deprecated in favour of the more comprehensive [`@typescript-eslint/no-empty-object-type`](./no-empty-object-type.mdx) rule.\n\n:::\n\nAn empty interface in TypeScript does very little: any non-nullable value is assignable to `{}`.\nUsing an empty interface is often a sign of programmer error, such as misunderstanding the concept of `{}` or forgetting to fill in fields.\n\nThis rule aims to ensure that only meaningful interfaces are declared in the code.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\n// an empty interface\ninterface Foo {}\n\n// an interface with only one supertype (Bar === Foo)\ninterface Bar extends Foo {}\n\n// an interface with an empty list of supertypes\ninterface Baz {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n// an interface with any number of members\ninterface Foo {\n  name: string;\n}\n\n// same as above\ninterface Bar {\n  age: number;\n}\n\n// an interface with more than one supertype\n// in this case the interface can be used as a replacement of an intersection type.\ninterface Baz extends Foo, Bar {}\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allowSingleExtends`\n\n{/* insert option description */}\n\n`allowSingleExtends: true` will silence warnings about extending a single interface without adding additional members.\n\n## When Not To Use It\n\nIf you don't care about having empty/meaningless interfaces, then you will not need this rule.\n\n## Related To\n\n- [`no-empty-object-type`](./no-empty-object-type.mdx)\n"
        }
    ]
}