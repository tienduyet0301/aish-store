{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-ts-expect-error.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce using `@ts-expect-error` over `@ts-ignore`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-ts-expect-error** for documentation.\n\n:::danger Deprecated\n\nThis rule has been deprecated in favor of [`@typescript-eslint/ban-ts-comment`](./ban-ts-comment.mdx).\nThis rule (`@typescript-eslint/prefer-ts-expect-error`) will be removed in a future major version of typescript-eslint.\n\nWhen it was first created, `@typescript-eslint/ban-ts-comment` rule was only responsible for suggesting to remove `@ts-ignore` directive.\nIt was later updated to suggest replacing `@ts-ignore` with `@ts-expect-error` directive, so that it replaces `@typescript-eslint/prefer-ts-expect-error` entirely.\n\n:::\n\nTypeScript allows you to suppress all errors on a line by placing a comment starting with `@ts-ignore` or `@ts-expect-error` immediately before the erroring line.\nThe two directives work the same, except `@ts-expect-error` causes a type error if placed before a line that's not erroring in the first place.\n\nThis means it's easy for `@ts-ignore`s to be forgotten about, and remain in code even after the error they were suppressing is fixed.\nThis is dangerous, as if a new error arises on that line it'll be suppressed by the forgotten about `@ts-ignore`, and so be missed.\n\n## Examples\n\nThis rule reports any usage of `@ts-ignore`, including a fixer to replace with `@ts-expect-error`.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\n// @ts-ignore\nconst str: string = 1;\n\n/**\n * Explaining comment\n *\n * @ts-ignore */\nconst multiLine: number = 'value';\n\n/** @ts-ignore */\nconst block: string = 1;\n\nconst isOptionEnabled = (key: string): boolean => {\n  // @ts-ignore: if key isn't in globalOptions it'll be undefined which is false\n  return !!globalOptions[key];\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n// @ts-expect-error\nconst str: string = 1;\n\n/**\n * Explaining comment\n *\n * @ts-expect-error */\nconst multiLine: number = 'value';\n\n/** @ts-expect-error */\nconst block: string = 1;\n\nconst isOptionEnabled = (key: string): boolean => {\n  // @ts-expect-error: if key isn't in globalOptions it'll be undefined which is false\n  return !!globalOptions[key];\n};\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you are compiling against multiple versions of TypeScript and using `@ts-ignore` to ignore version-specific type errors, this rule might get in your way.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n- [Original Implementing PR](https://github.com/microsoft/TypeScript/pull/36014)\n"
        }
    ]
}