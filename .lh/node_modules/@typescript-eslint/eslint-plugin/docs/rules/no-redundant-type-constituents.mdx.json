{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-redundant-type-constituents.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow members of unions and intersections that do nothing or override type information.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-redundant-type-constituents** for documentation.\n\nSome types can override some other types (\"constituents\") in a union or intersection and/or be overridden by some other types.\nTypeScript's set theory of types includes cases where a constituent type might be useless in the parent union or intersection.\n\nWithin `|` unions:\n\n- `any` and `unknown` \"override\" all other union members\n- `never` is dropped from unions in any position except when in a return type position\n- primitive types such as `string` \"override\" any of their literal types such as `\"\"`\n\nWithin `&` intersections:\n\n- `any` and `never` \"override\" all other intersection members\n- `unknown` is dropped from intersections\n- literal types \"override\" any primitive types in an intersection\n- literal types such as `\"\"` \"override\" any of their primitive types such as `string`\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ntype UnionAny = any | 'foo';\ntype UnionUnknown = unknown | 'foo';\ntype UnionNever = never | 'foo';\n\ntype UnionBooleanLiteral = boolean | false;\ntype UnionNumberLiteral = number | 1;\ntype UnionStringLiteral = string | 'foo';\n\ntype IntersectionAny = any & 'foo';\ntype IntersectionUnknown = string & unknown;\ntype IntersectionNever = string | never;\n\ntype IntersectionBooleanLiteral = boolean & false;\ntype IntersectionNumberLiteral = number & 1;\ntype IntersectionStringLiteral = string & 'foo';\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ntype UnionAny = any;\ntype UnionUnknown = unknown;\ntype UnionNever = never;\n\ntype UnionBooleanLiteral = boolean;\ntype UnionNumberLiteral = number;\ntype UnionStringLiteral = string;\n\ntype IntersectionAny = any;\ntype IntersectionUnknown = string;\ntype IntersectionNever = string;\n\ntype IntersectionBooleanLiteral = false;\ntype IntersectionNumberLiteral = 1;\ntype IntersectionStringLiteral = 'foo';\n```\n\n</TabItem>\n</Tabs>\n\n## Limitations\n\nThis rule plays it safe and only works with bottom types, top types, and comparing literal types to primitive types.\n\n## When Not To Use It\n\nSome projects choose to occasionally intentionally include a redundant type constituent for documentation purposes.\nFor example, the following code includes `string` in a union even though the `unknown` makes it redundant:\n\n```ts\n/**\n * Normally a string name, but sometimes arbitrary unknown data.\n */\ntype NameOrOther = string | unknown;\n```\n\nIf you strongly feel a preference for these unnecessary type constituents, this rule might not be for you.\n\n## Further Reading\n\n- [Union Types](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types)\n- [Intersection Types](https://www.typescriptlang.org/docs/handbook/2/objects.html#intersection-types)\n- [Bottom Types](https://en.wikipedia.org/wiki/Bottom_type)\n- [Top Types](https://en.wikipedia.org/wiki/Top_type)\n\n## Related To\n\n- [no-duplicate-type-constituents](./no-duplicate-type-constituents.mdx)\n"
        }
    ]
}