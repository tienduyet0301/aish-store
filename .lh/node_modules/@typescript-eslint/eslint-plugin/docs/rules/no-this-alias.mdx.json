{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-this-alias.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow aliasing `this`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-this-alias** for documentation.\n\nAssigning a variable to `this` instead of properly using arrow lambdas may be a symptom of pre-ES6 practices\nor not managing scope well.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst self = this;\n\nsetTimeout(function () {\n  self.doWork();\n});\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nsetTimeout(() => {\n  this.doWork();\n});\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allowDestructuring`\n\n{/* insert option description */}\n\nIt can sometimes be useful to destructure properties from a class instance, such as retrieving multiple properties from the instance in one of its methods.\n`allowDestructuring` allows those destructures and is `true` by default.\nYou can explicitly disallow them by setting `allowDestructuring` to `false`.\n\nExamples of code for the `{ \"allowDestructuring\": false }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowDestructuring\": false }'\nclass ComponentLike {\n  props: unknown;\n  state: unknown;\n\n  render() {\n    const { props, state } = this;\n\n    console.log(props);\n    console.log(state);\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowDestructuring\": false }'\nclass ComponentLike {\n  props: unknown;\n  state: unknown;\n\n  render() {\n    console.log(this.props);\n    console.log(this.state);\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `allowedNames`\n\n{/* insert option description */}\n\n`no-this-alias` can alternately be used to allow only a specific list of names as `this` aliases.\nWe recommend against this except as a transitory step towards fixing all rule violations.\n\nExamples of code for the `{ \"allowedNames\": [\"self\"] }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowedNames\": [\"self\"] }'\nclass Example {\n  method() {\n    const that = this;\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowedNames\": [\"self\"] }'\nclass Example {\n  method() {\n    const self = this;\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project is structured in a way that it needs to assign `this` to variables, this rule is likely not for you.\nIf only a subset of your project assigns `this` to variables then you might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n"
        }
    ]
}