{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-non-null-asserted-nullish-coalescing.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow non-null assertions in the left operand of a nullish coalescing operator.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing** for documentation.\n\nThe `??` nullish coalescing runtime operator allows providing a default value when dealing with `null` or `undefined`.\nUsing a `!` non-null assertion type operator in the left operand of a nullish coalescing operator is redundant, and likely a sign of programmer error or confusion over the two operators.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfoo! ?? bar;\nfoo.bazz! ?? bar;\nfoo!.bazz! ?? bar;\nfoo()! ?? bar;\n\nlet x!: string;\nx! ?? '';\n\nlet x: string;\nx = foo();\nx! ?? '';\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfoo ?? bar;\nfoo ?? bar!;\nfoo!.bazz ?? bar;\nfoo!.bazz ?? bar!;\nfoo() ?? bar;\n\n// This is considered correct code because there's no way for the user to satisfy it.\nlet x: string;\nx! ?? '';\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project's types don't yet fully describe whether certain values may be nullable, such as if you're transitioning to `strictNullChecks`, this rule might create many false reports.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n- [TypeScript 3.7 Release Notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n- [Nullish Coalescing Proposal](https://github.com/tc39/proposal-nullish-coalescing)\n"
        }
    ]
}