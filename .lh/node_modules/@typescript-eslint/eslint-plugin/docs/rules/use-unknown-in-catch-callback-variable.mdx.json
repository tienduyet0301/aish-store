{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/use-unknown-in-catch-callback-variable.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce typing arguments in Promise rejection callbacks as `unknown`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable** for documentation.\n\nThis rule enforces that you always use the `unknown` type for the parameter of a Promise rejection callback.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nPromise.reject(new Error('I will reject!')).catch(err => {\n  console.log(err);\n});\n\nPromise.reject(new Error('I will reject!')).catch((err: any) => {\n  console.log(err);\n});\n\nPromise.reject(new Error('I will reject!')).catch((err: Error) => {\n  console.log(err);\n});\n\nPromise.reject(new Error('I will reject!')).then(\n  result => {\n    console.log(result);\n  },\n  err => {\n    console.log(err);\n  },\n);\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nPromise.reject(new Error('I will reject!')).catch((err: unknown) => {\n  console.log(err);\n});\n```\n\n</TabItem>\n</Tabs>\n\nThe reason for this rule is to enable programmers to impose constraints on `Promise` error handling analogously to what TypeScript provides for ordinary exception handling.\n\nFor ordinary exceptions, TypeScript treats the `catch` variable as `any` by default. However, `unknown` would be a more accurate type, so TypeScript [introduced the `useUnknownInCatchVariables` compiler option](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-4.html#defaulting-to-the-unknown-type-in-catch-variables---useunknownincatchvariables) to treat the `catch` variable as `unknown` instead.\n\n```ts\ntry {\n  throw x;\n} catch (err) {\n  // err has type 'any' with useUnknownInCatchVariables: false\n  // err has type 'unknown' with useUnknownInCatchVariables: true\n}\n```\n\nThe Promise analog of the `try-catch` block, [`Promise.prototype.catch()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch), is not affected by the `useUnknownInCatchVariables` compiler option, and its \"`catch` variable\" will always have the type `any`.\n\n```ts\nPromise.reject(x).catch(err => {\n  // err has type 'any' regardless of `useUnknownInCatchVariables`\n});\n```\n\nHowever, you can still provide an explicit type annotation, which lets you achieve the same effect as the `useUnknownInCatchVariables` option does for synchronous `catch` variables.\n\n```ts\nPromise.reject(x).catch((err: unknown) => {\n  // err has type 'unknown'\n});\n```\n\n:::info\nThere is actually a way to have the `catch()` and `then()` callback variables use the `unknown` type _without_ an explicit type annotation at the call sites, but it has the drawback that it involves overriding global type declarations.\nFor example, the library [better-TypeScript-lib](https://github.com/uhyo/better-typescript-lib) sets this up globally for your project (see [the relevant lines in the better-TypeScript-lib source code](https://github.com/uhyo/better-typescript-lib/blob/c294e177d1cc2b1d1803febf8192a4c83a1fe028/lib/lib.es5.d.ts#L635) for details on how).\n\nFor further reading on this, you may also want to look into\n[the discussion in the proposal for this rule](https://github.com/typescript-eslint/typescript-eslint/issues/7526#issuecomment-1690600813) and [this TypeScript issue on typing catch callback variables as unknown](https://github.com/microsoft/TypeScript/issues/45602).\n:::\n\n## When Not To Use It\n\nIf your codebase is not yet able to enable `useUnknownInCatchVariables`, it likely would be similarly difficult to enable this rule.\n\nIf you have modified the global type declarations in order to make `then()` and `catch()` callbacks use the `unknown` type without an explicit type annotation, you do not need this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n"
        }
    ]
}