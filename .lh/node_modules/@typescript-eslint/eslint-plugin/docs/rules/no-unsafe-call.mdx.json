{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-call.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow calling a value with type `any`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-call** for documentation.\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\nUsing `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nCalling an `any`-typed value as a function creates a potential type safety hole and source of bugs in your codebase.\n\nThis rule disallows calling any value that is typed as `any`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar();\nanyVar.a.b();\n\nnestedAny.prop();\nnestedAny.prop['a']();\n\nnew anyVar();\nnew nestedAny.prop();\n\nanyVar`foo`;\nnestedAny.prop`foo`;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const typedVar: () => void;\ndeclare const typedNested: { prop: { a: () => void } };\n\ntypedVar();\ntypedNested.prop.a();\n\n(() => {})();\n\nnew Map();\n\nString.raw`foo`;\n```\n\n</TabItem>\n</Tabs>\n\n## The Unsafe `Function` Type\n\nThe `Function` type is behaves almost identically to `any` when called, so this rule also disallows calling values of type `Function`.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst f: Function = () => {};\nf();\n```\n\n</TabItem>\n</Tabs>\n\nNote that whereas [no-unsafe-function-type](./no-unsafe-function-type.mdx) helps prevent the _creation_ of `Function` types, this rule helps prevent the unsafe _use_ of `Function` types, which may creep into your codebase without explicitly referencing the `Function` type at all.\nSee, for example, the following code:\n\n```ts\nfunction callUnsafe(maybeFunction: unknown): string {\n  if (typeof maybeFunction === 'function') {\n    // TypeScript allows this, but it's completely unsound.\n    return maybeFunction('call', 'with', 'any', 'args');\n  }\n  // etc\n}\n```\n\nIn this sort of situation, beware that there is no way to guarantee with runtime checks that a value is safe to call.\nIf you _really_ want to call a value whose type you don't know, your best best is to use a `try`/`catch` and suppress any TypeScript or linter errors that get in your way.\n\n```ts\nfunction callSafe(maybeFunction: unknown): void {\n  try {\n    // intentionally unsound type assertion\n    (maybeFunction as () => unknown)();\n  } catch (e) {\n    console.error(\n      'Function either could not be called or threw an error when called: ',\n      e,\n    );\n  }\n}\n```\n\n## When Not To Use It\n\nIf your codebase has many existing `any`s or areas of unsafe code, it may be difficult to enable this rule.\nIt may be easier to skip the `no-unsafe-*` rules pending increasing type safety in unsafe areas of your project.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-explicit-any`](./no-explicit-any.mdx)\n- [`no-unsafe-argument`](./no-unsafe-argument.mdx)\n- [`no-unsafe-assignment`](./no-unsafe-assignment.mdx)\n- [`no-unsafe-member-access`](./no-unsafe-member-access.mdx)\n- [`no-unsafe-return`](./no-unsafe-return.mdx)\n"
        }
    ]
}