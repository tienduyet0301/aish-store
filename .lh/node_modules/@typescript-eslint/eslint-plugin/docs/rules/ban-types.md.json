{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/ban-types.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndisplayed_sidebar: rulesSidebar\n---\n\n:::danger Deprecated\n\nThe old `ban-types` rule encompassed multiple areas of functionality, and so has been split into several rules.\n\n**[`no-restricted-types`](./no-restricted-types.mdx)** is the new rule for banning a configurable list of type names.\nIt has no options enabled by default and is akin to rules like [`no-restricted-globals`](https://eslint.org/docs/latest/rules/no-restricted-globals), [`no-restricted-properties`](https://eslint.org/docs/latest/rules/no-restricted-properties), and [`no-restricted-syntax`](https://eslint.org/docs/latest/rules/no-restricted-syntax).\n\nThe default options from `ban-types` are now covered by:\n\n- **[`no-empty-object-type`](./no-empty-object-type.mdx)**: banning the built-in `{}` type in confusing locations\n- **[`no-unsafe-function-type`](./no-unsafe-function-type.mdx)**: banning the built-in `Function`\n- **[`no-wrapper-object-types`](./no-wrapper-object-types.mdx)**: banning `Object` and built-in class wrappers such as `Number`\n\n`ban-types` itself is removed in typescript-eslint v8.\nSee [Announcing typescript-eslint v8 Beta](/blog/announcing-typescript-eslint-v8-beta) for more details.\n:::\n\n<!-- This doc file has been left on purpose because `ban-types` is a well-known\nrule. This exists to help direct people to the replacement rules.\n\nNote that there is no actual way to get to this page in the normal navigation,\nso end-users will only be able to get to this page from the search bar. -->\n"
        }
    ]
}