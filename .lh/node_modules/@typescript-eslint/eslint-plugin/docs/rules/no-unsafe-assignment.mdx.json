{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-assignment.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow assigning a value with type `any` to variables and properties.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-assignment** for documentation.\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\nUsing `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nAssigning an `any` typed value to a variable can be hard to pick up on, particularly if it leaks in from an external library.\n\nThis rule disallows assigning `any` to a variable, and assigning `any[]` to an array destructuring.\n\nThis rule also compares generic type argument types to ensure you don't pass an unsafe `any` in a generic position to a receiver that's expecting a specific type.\nFor example, it will error if you assign `Set<any>` to a variable declared as `Set<string>`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst x = 1 as any,\n  y = 1 as any;\nconst [x] = 1 as any;\nconst [x] = [] as any[];\nconst [x] = [1 as any];\n[x] = [1] as [any];\n\nfunction foo(a = 1 as any) {}\nclass Foo {\n  constructor(private a = 1 as any) {}\n}\nclass Foo {\n  private a = 1 as any;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<any>();\nconst x: Map<string, string> = new Map<string, any>();\nconst x: Set<string[]> = new Set<any[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<any>>>();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst x = 1,\n  y = 1;\nconst [x] = [1];\n[x] = [1] as [number];\n\nfunction foo(a = 1) {}\nclass Foo {\n  constructor(private a = 1) {}\n}\nclass Foo {\n  private a = 1;\n}\n\n// generic position examples\nconst x: Set<string> = new Set<string>();\nconst x: Map<string, string> = new Map<string, string>();\nconst x: Set<string[]> = new Set<string[]>();\nconst x: Set<Set<Set<string>>> = new Set<Set<Set<string>>>();\n```\n\n</TabItem>\n</Tabs>\n\nThere are cases where the rule allows assignment of `any` to `unknown`.\n\nExample of `any` to `unknown` assignment that are allowed:\n\n```ts showPlaygroundButton\nconst x: unknown = y as any;\nconst x: unknown[] = y as any[];\nconst x: Set<unknown> = y as Set<any>;\n```\n\n## When Not To Use It\n\nIf your codebase has many existing `any`s or areas of unsafe code, it may be difficult to enable this rule.\nIt may be easier to skip the `no-unsafe-*` rules pending increasing type safety in unsafe areas of your project.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-explicit-any`](./no-explicit-any.mdx)\n- [`no-unsafe-argument`](./no-unsafe-argument.mdx)\n- [`no-unsafe-call`](./no-unsafe-call.mdx)\n- [`no-unsafe-member-access`](./no-unsafe-member-access.mdx)\n- [`no-unsafe-return`](./no-unsafe-return.mdx)\n"
        }
    ]
}