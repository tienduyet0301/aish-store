{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-misused-new.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce valid definition of `new` and `constructor`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-misused-new** for documentation.\n\nJavaScript classes may define a `constructor` method that runs when a class instance is newly created.\nTypeScript allows interfaces that describe a static class object to define a `new()` method (though this is rarely used in real world code).\nDevelopers new to JavaScript classes and/or TypeScript interfaces may sometimes confuse when to use `constructor` or `new`.\n\nThis rule reports when a class defines a method named `new` or an interface defines a method named `constructor`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare class C {\n  new(): C;\n}\n\ninterface I {\n  new (): I;\n  constructor(): void;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare class C {\n  constructor();\n}\n\ninterface I {\n  new (): C;\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you intentionally want a class with a `new` method, and you're confident nobody working in your code will mistake it with a constructor, you might not want this rule.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n"
        }
    ]
}