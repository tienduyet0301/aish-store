{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/ban-ts-comment.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow `@ts-<directive>` comments or require descriptions after directives.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/ban-ts-comment** for documentation.\n\nTypeScript provides several directive comments that can be used to alter how it processes files.\nUsing these to suppress TypeScript compiler errors reduces the effectiveness of TypeScript overall.\nInstead, it's generally better to correct the types of code, to make directives unnecessary.\n\nThe directive comments supported by TypeScript are:\n\n```ts\n// @ts-expect-error\n// @ts-ignore\n// @ts-nocheck\n// @ts-check\n```\n\nThis rule lets you set which directive comments you want to allow in your codebase.\n\n## Options\n\nBy default, only `@ts-check` is allowed, as it enables rather than suppresses errors.\n\n### `ts-expect-error`, `ts-ignore`, `ts-nocheck`, `ts-check` directives\n\nA value of `true` for a particular directive means that this rule will report if it finds any usage of said directive.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ts-ignore\": true }'\nif (false) {\n  // @ts-ignore: Unreachable code error\n  console.log('hello');\n}\nif (false) {\n  /* @ts-ignore: Unreachable code error */\n  console.log('hello');\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ts-ignore\": true }'\nif (false) {\n  // Compiler warns about unreachable code error\n  console.log('hello');\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `allow-with-description`\n\nA value of `'allow-with-description'` for a particular directive means that this rule will report if it finds a directive that does not have a description following the directive (on the same line).\n\nFor example, with `{ 'ts-expect-error': 'allow-with-description' }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ts-expect-error\": \"allow-with-description\" }'\nif (false) {\n  // @ts-expect-error\n  console.log('hello');\n}\nif (false) {\n  /* @ts-expect-error */\n  console.log('hello');\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ts-expect-error\": \"allow-with-description\" }'\nif (false) {\n  // @ts-expect-error: Unreachable code error\n  console.log('hello');\n}\nif (false) {\n  /* @ts-expect-error: Unreachable code error */\n  console.log('hello');\n}\n```\n\n</TabItem>\n</Tabs>\n### `descriptionFormat`\n\n{/* insert option description */}\n\nFor each directive type, you can specify a custom format in the form of a regular expression. Only description that matches the pattern will be allowed.\n\nFor example, with `{ 'ts-expect-error': { descriptionFormat: '^: TS\\\\d+ because .+$' } }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n{/* prettier-ignore */}\n```ts option='{ \"ts-expect-error\": { \"descriptionFormat\": \"^: TS\\\\\\\\d+ because .+$\" } }'\n// @ts-expect-error: the library definition is wrong\nconst a = doSomething('hello');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n{/* prettier-ignore */}\n```ts option='{ \"ts-expect-error\": { \"descriptionFormat\": \"^: TS\\\\\\\\d+ because .+$\" } }'\n// @ts-expect-error: TS1234 because the library definition is wrong\nconst a = doSomething('hello');\n```\n\n</TabItem>\n</Tabs>\n\n### `minimumDescriptionLength`\n\n{/* insert option description */}\n\nUse `minimumDescriptionLength` to set a minimum length for descriptions when using the `allow-with-description` option for a directive.\n\nFor example, with `{ 'ts-expect-error': 'allow-with-description', minimumDescriptionLength: 10 }` the following pattern is:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ts-expect-error\": \"allow-with-description\", \"minimumDescriptionLength\": 10 }'\nif (false) {\n  // @ts-expect-error: TODO\n  console.log('hello');\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ts-expect-error\": \"allow-with-description\", \"minimumDescriptionLength\": 10 }'\nif (false) {\n  // @ts-expect-error The rationale for this override is described in issue #1337 on GitLab\n  console.log('hello');\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project or its dependencies were not architected with strong type safety in mind, it can be difficult to always adhere to proper TypeScript semantics.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n- TypeScript [Type Checking JavaScript Files](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html)\n"
        }
    ]
}