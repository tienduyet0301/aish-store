{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/restrict-plus-operands.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require both operands of addition to be the same type and be `bigint`, `number`, or `string`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/restrict-plus-operands** for documentation.\n\nTypeScript allows `+` adding together two values of any type(s).\nHowever, adding values that are not the same type and/or are not the same primitive type is often a sign of programmer error.\n\nThis rule reports when a `+` operation combines two values of different types, or a type that is not `bigint`, `number`, or `string`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nlet foo = 1n + 1;\nlet fn = (a: string, b: never) => a + b;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nlet foo = 1n + 1n;\nlet fn = (a: string, b: string) => a + b;\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n:::caution\nWe generally recommend against using these options, as they limit which varieties of incorrect `+` usage can be checked.\nThis in turn severely limits the validation that the rule can do to ensure that resulting strings and numbers are correct.\n\nSafer alternatives to using the `allow*` options include:\n\n- Using variadic forms of logging APIs to avoid needing to `+` values.\n  ```ts\n  // Remove this line\n  console.log('The result is ' + true);\n  // Add this line\n  console.log('The result is', true);\n  ```\n- Using `.toFixed()` to coerce numbers to well-formed string representations:\n  ```ts\n  const number = 1.123456789;\n  const result = 'The number is ' + number.toFixed(2);\n  // result === 'The number is 1.12'\n  ```\n- Calling `.toString()` on other types to mark explicit and intentional string coercion:\n  ```ts\n  const arg = '11';\n  const regex = /[0-9]/;\n  const result =\n    'The result of ' +\n    regex.toString() +\n    '.test(\"' +\n    arg +\n    '\") is ' +\n    regex.test(arg).toString();\n  // result === 'The result of /[0-9]/.test(\"11\") is true'\n  ```\n\n:::\n\n### `allowAny`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowAny: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowAny\": true }'\nlet fn = (a: number, b: []) => a + b;\nlet fn = (a: string, b: []) => a + b;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowAny\": true }'\nlet fn = (a: number, b: any) => a + b;\nlet fn = (a: string, b: any) => a + b;\n```\n\n</TabItem>\n</Tabs>\n\n### `allowBoolean`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowBoolean: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowBoolean\": true }'\nlet fn = (a: number, b: unknown) => a + b;\nlet fn = (a: string, b: unknown) => a + b;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowBoolean\": true }'\nlet fn = (a: number, b: boolean) => a + b;\nlet fn = (a: string, b: boolean) => a + b;\n```\n\n</TabItem>\n</Tabs>\n\n### `allowNullish`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowNullish: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowNullish\": true }'\nlet fn = (a: number, b: unknown) => a + b;\nlet fn = (a: number, b: never) => a + b;\nlet fn = (a: string, b: unknown) => a + b;\nlet fn = (a: string, b: never) => a + b;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowNullish\": true }'\nlet fn = (a: number, b: undefined) => a + b;\nlet fn = (a: number, b: null) => a + b;\nlet fn = (a: string, b: undefined) => a + b;\nlet fn = (a: string, b: null) => a + b;\n```\n\n</TabItem>\n</Tabs>\n\n### `allowNumberAndString`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowNumberAndString: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowNumberAndString\": true }'\nlet fn = (a: number, b: unknown) => a + b;\nlet fn = (a: number, b: never) => a + b;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowNumberAndString\": true }'\nlet fn = (a: number, b: string) => a + b;\nlet fn = (a: number, b: number | string) => a + b;\nlet fn = (a: bigint, b: string) => a + b;\n```\n\n</TabItem>\n</Tabs>\n\n### `allowRegExp`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowRegExp: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowRegExp\": true }'\nlet fn = (a: number, b: RegExp) => a + b;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowRegExp\": true }'\nlet fn = (a: string, b: RegExp) => a + b;\n```\n\n</TabItem>\n</Tabs>\n\n### `skipCompoundAssignments`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ skipCompoundAssignments: false }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"skipCompoundAssignments\": false }'\nlet foo: bigint = 0n;\nfoo += 1;\n\nlet bar: number[] = [1];\nbar += 1;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"skipCompoundAssignments\": false }'\nlet foo: bigint = 0n;\nfoo += 1n;\n\nlet bar: number = 1;\nbar += 1;\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't mind a risk of `\"[object Object]\"` or incorrect type coercions in your values, then you will not need this rule.\n\n## Related To\n\n- [`no-base-to-string`](./no-base-to-string.mdx)\n- [`restrict-template-expressions`](./restrict-template-expressions.mdx)\n\n## Further Reading\n\n- [`Object.prototype.toString()` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)\n"
        }
    ]
}