{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-namespace.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow TypeScript namespaces.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-namespace** for documentation.\n\nTypeScript historically allowed a form of code organization called \"custom modules\" (`module Example {}`), later renamed to \"namespaces\" (`namespace Example`).\nNamespaces are an outdated way to organize TypeScript code.\nES2015 module syntax is now preferred (`import`/`export`).\n\n> This rule does not report on the use of TypeScript module declarations to describe external APIs (`declare module 'foo' {}`).\n\n## Examples\n\nExamples of code with the default options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nmodule foo {}\nnamespace foo {}\n\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare module 'foo' {}\n\n// anything inside a d.ts file\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allowDeclarations`\n\n{/* insert option description */}\n\nExamples of code with the `{ \"allowDeclarations\": true }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowDeclarations\": true }'\nmodule foo {}\nnamespace foo {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowDeclarations\": true }'\ndeclare module 'foo' {}\ndeclare module foo {}\ndeclare namespace foo {}\n\ndeclare global {\n  namespace foo {}\n}\n\ndeclare module foo {\n  namespace foo {}\n}\n```\n\n</TabItem>\n</Tabs>\n\nExamples of code for the `{ \"allowDeclarations\": false }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowDeclarations\": false }'\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowDeclarations\": false }'\ndeclare module 'foo' {}\n```\n\n</TabItem>\n</Tabs>\n\n### `allowDefinitionFiles`\n\n{/* insert option description */}\n\nExamples of code for the `{ \"allowDefinitionFiles\": true }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowDefinitionFiles\": true }'\n// if outside a d.ts file\nmodule foo {}\nnamespace foo {}\n\n// if outside a d.ts file and allowDeclarations = false\nmodule foo {}\nnamespace foo {}\ndeclare module foo {}\ndeclare namespace foo {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowDefinitionFiles\": true }'\ndeclare module 'foo' {}\n\n// anything inside a d.ts file\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project uses TypeScript's CommonJS export syntax (`export = ...`), you may need to use namespaces in order to export types from your module.\nYou can learn more about this at:\n\n- [TypeScript#52203](https://github.com/microsoft/TypeScript/pull/52203), the pull request introducing [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n- [TypeScript#60852](https://github.com/microsoft/TypeScript/issues/60852), an issue requesting syntax to export types from a CommonJS module.\n\nIf your project uses this syntax, either because it was architected before modern modules and namespaces, or because a module option such as `verbatimModuleSyntax` requires it, it may be difficult to migrate off of namespaces.\nIn that case you may not be able to use this rule for parts of your project.\n\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n{/* cspell:disable-next-line */}\n\n- [FAQ: I get errors from the `@typescript-eslint/no-namespace` and/or `no-var` rules about declaring global variables](/troubleshooting/faqs/eslint#i-get-errors-from-the-typescript-eslintno-namespace-andor-no-var-rules-about-declaring-global-variables)\n- [FAQ: How should I handle reports that conflict with verbatimModuleSyntax?](/troubleshooting/faqs/typescript#how-should-i-handle-reports-that-conflict-with-verbatimmodulesyntax)\n- [TypeScript handbook entry on Modules](https://www.typescriptlang.org/docs/handbook/modules.html)\n- [TypeScript handbook entry on Namespaces](https://www.typescriptlang.org/docs/handbook/namespaces.html)\n- [TypeScript handbook entry on Namespaces and Modules](https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html)\n"
        }
    ]
}