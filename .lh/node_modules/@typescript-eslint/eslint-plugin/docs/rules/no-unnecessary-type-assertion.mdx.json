{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unnecessary-type-assertion.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow type assertions that do not change the type of an expression.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unnecessary-type-assertion** for documentation.\n\nTypeScript can be told an expression is a different type than expected using `as` type assertions.\nLeaving `as` assertions in the codebase increases visual clutter and harms code readability, so it's generally best practice to remove them if they don't change the type of an expression.\nThis rule reports when a type assertion does not change the type of an expression.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst foo = 3;\nconst bar = foo!;\n```\n\n```ts\nconst foo = <number>(3 + 5);\n```\n\n```ts\ntype Foo = number;\nconst foo = <Foo>(3 + 5);\n```\n\n```ts\ntype Foo = number;\nconst foo = (3 + 5) as Foo;\n```\n\n```ts\nconst foo = 'foo' as const;\n```\n\n```ts\nfunction foo(x: number): number {\n  return x!; // unnecessary non-null\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst foo = <number>3;\n```\n\n```ts\nconst foo = 3 as number;\n```\n\n```ts\nlet foo = 'foo' as const;\n```\n\n```ts\nfunction foo(x: number | undefined): number {\n  return x!;\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `typesToIgnore`\n\n{/* insert option description */}\n\nWith `@typescript-eslint/no-unnecessary-type-assertion: [\"error\", { typesToIgnore: ['Foo'] }]`, the following is **correct** code:\n\n```ts option='{ \"typesToIgnore\": [\"Foo\"] }' showPlaygroundButton\ntype Foo = 3;\nconst foo: Foo = 3;\n```\n\n## When Not To Use It\n\nIf you don't care about having no-op type assertions in your code, then you can turn off this rule.\n"
        }
    ]
}