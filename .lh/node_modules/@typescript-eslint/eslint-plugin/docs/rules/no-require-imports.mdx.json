{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-require-imports.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow invocation of `require()`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-require-imports** for documentation.\n\nDepending on your TSConfig settings and whether you're authoring ES Modules or CommonJS, TS may allow both `import` and `require()` to be used, even within a single file.\n\nThis rule enforces that you use the newer ES Module `import` syntax over CommonJS `require()`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst lib1 = require('lib1');\nconst { lib2 } = require('lib2');\nimport lib3 = require('lib3');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nimport * as lib1 from 'lib1';\nimport { lib2 } from 'lib2';\nimport * as lib3 from 'lib3';\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allow`\n\n{/* insert option description */}\n\nThese strings will be compiled into regular expressions with the `u` flag and be used to test against the imported path. A common use case is to allow importing `package.json`. This is because `package.json` commonly lives outside of the TS root directory, so statically importing it would lead to root directory conflicts, especially with `resolveJsonModule` enabled. You can also use it to allow importing any JSON if your environment doesn't support JSON modules, or use it for other cases where `import` statements cannot work.\n\nWith `{ allow: ['/package\\\\.json$'] }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"/package.json$\"] }'\nconsole.log(require('../data.json').version);\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"/package.json$\"] }'\nconsole.log(require('../package.json').version);\n```\n\n</TabItem>\n</Tabs>\n\n### `allowAsImport`\n\n{/* insert option description */}\n\nWhen set to `true`, `import ... = require(...)` declarations won't be reported.\nThis is beneficial if you use certain module options that require strict CommonJS interop semantics, such as [verbatimModuleSyntax](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax).\n\nWith `{ allowAsImport: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowAsImport\": true }'\nvar foo = require('foo');\nconst foo = require('foo');\nlet foo = require('foo');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowAsImport\": true }'\nimport foo = require('foo');\nimport foo from 'foo';\n```\n\n</TabItem>\n</Tabs>\n\n## Usage with CommonJS\n\nWhile this rule is primarily intended to promote ES Module syntax, it still makes sense to enable this rule when authoring CommonJS modules.\n\nIf you prefer to use TypeScript's built-in `import ... from ...` ES Module syntax, which is transformed to `require()` calls during transpilation when outputting CommonJS, you can use the rule's default behavior.\n\nIf, instead, you prefer to use `require()` syntax, we recommend you use this rule with [`allowAsImport`](#allowAsImport) enabled.\nThat way, you still enforce usage of `import ... = require(...)` rather than bare `require()` calls, which are not statically analyzed by TypeScript.\nWe don't directly a way to _prohibit_ ES Module syntax from being used; consider instead using TypeScript's [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax) option if you find yourself in a situation where you would want this.\n\n## When Not To Use It\n\nIf you are authoring CommonJS modules _and_ your project frequently uses dynamic `require`s, then this rule might not be applicable to you.\nOtherwise the `allowAsImport` option probably suits your needs.\n\nIf only a subset of your project uses dynamic `require`s then you might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [`no-var-requires`](./no-var-requires.mdx)\n"
        }
    ]
}