{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-shadow.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow variable declarations from shadowing variables declared in the outer scope.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> ðŸ›‘ This file is source code, not the primary documentation location! ðŸ›‘\n>\n> See **https://typescript-eslint.io/rules/no-shadow** for documentation.\n\nIt adds support for TypeScript's `this` parameters and global augmentation, and adds options for TypeScript features.\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ntype AdditionalHoistOptionEntries = 'types' | 'functions-and-types';\n\ntype HoistOptionEntries =\n  | BaseNoShadowHoistOptionEntries\n  | AdditionalHoistOptionEntries;\n\ninterface Options extends BaseNoShadowOptions {\n  hoist?: HoistOptionEntries;\n  ignoreTypeValueShadow?: boolean;\n  ignoreFunctionTypeParameterNameValueShadow?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoShadowDefaultOptions,\n  hoist: 'functions-and-types',\n  ignoreTypeValueShadow: true,\n  ignoreFunctionTypeParameterNameValueShadow: true,\n};\n```\n\n### hoist: `types`\n\nExamples of incorrect code for the `{ \"hoist\": \"types\" }` option:\n\n```ts option='{ \"hoist\": \"types\" }' showPlaygroundButton\ntype Bar<Foo> = 1;\ntype Foo = 1;\n```\n\n### hoist: `functions-and-types`\n\nExamples of incorrect code for the `{ \"hoist\": \"functions-and-types\" }` option:\n\n```ts option='{ \"hoist\": \"functions-and-types\" }' showPlaygroundButton\n// types\ntype Bar<Foo> = 1;\ntype Foo = 1;\n\n// functions\nif (true) {\n  let b = 6;\n}\n\nfunction b() {}\n```\n\n### `ignoreTypeValueShadow`\n\n{/* insert option description */}\n\nThis is generally safe because you cannot use variables in type locations without a `typeof` operator, so there's little risk of confusion.\n\nExamples of **correct** code with `{ ignoreTypeValueShadow: true }`:\n\n```ts option='{ \"ignoreTypeValueShadow\": true }' showPlaygroundButton\ntype Foo = number;\ninterface Bar {\n  prop: number;\n}\n\nfunction f() {\n  const Foo = 1;\n  const Bar = 'test';\n}\n```\n\n:::note\n\n_Shadowing_ specifically refers to two identical identifiers that are in different, nested scopes. This is different from _redeclaration_, which is when two identical identifiers are in the same scope. Redeclaration is covered by the [`no-redeclare`](./no-redeclare.mdx) rule instead.\n\n:::\n\n### `ignoreFunctionTypeParameterNameValueShadow`\n\n{/* insert option description */}\n\nEach of a function type's arguments creates a value variable within the scope of the function type. This is done so that you can reference the type later using the `typeof` operator:\n\n```ts\ntype Func = (test: string) => typeof test;\n\ndeclare const fn: Func;\nconst result = fn('str'); // typeof result === string\n```\n\nThis means that function type arguments shadow value variable names in parent scopes:\n\n```ts\nlet test = 1;\ntype TestType = typeof test; // === number\ntype Func = (test: string) => typeof test; // this \"test\" references the argument, not the variable\n\ndeclare const fn: Func;\nconst result = fn('str'); // typeof result === string\n```\n\nIf you do not use the `typeof` operator in a function type return type position, you can safely turn this option on.\n\nExamples of **correct** code with `{ ignoreFunctionTypeParameterNameValueShadow: true }`:\n\n```ts option='{ \"ignoreFunctionTypeParameterNameValueShadow\": true }' showPlaygroundButton\nconst test = 1;\ntype Func = (test: string) => typeof test;\n```\n\n## FAQ\n\n### Why does the rule report on enum members that share the same name as a variable in a parent scope?\n\nReporting on this case isn't a bug - it is completely intentional and correct reporting! The rule reports due to a relatively unknown feature of enums - enum members create a variable within the enum scope so that they can be referenced within the enum without a qualifier.\n\nTo illustrate this with an example:\n\n```ts\nconst A = 2;\nenum Test {\n  A = 1,\n  B = A,\n}\n\nconsole.log(Test.B);\n// what should be logged?\n```\n\nNaively looking at the above code, it might look like the log should output `2`, because the outer variable `A`'s value is `2` - however, the code instead outputs `1`, which is the value of `Test.A`. This is because the unqualified code `B = A` is equivalent to the fully-qualified code `B = Test.A`. Due to this behavior, the enum member has **shadowed** the outer variable declaration.\n"
        }
    ]
}