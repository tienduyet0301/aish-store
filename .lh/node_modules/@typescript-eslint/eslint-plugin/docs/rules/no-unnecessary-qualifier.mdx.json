{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unnecessary-qualifier.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow unnecessary namespace qualifiers.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unnecessary-qualifier** for documentation.\n\nMembers of TypeScript enums and namespaces are generally retrieved as qualified property lookups: e.g. `Enum.member`.\nHowever, when accessed within their parent enum or namespace, the qualifier is unnecessary: e.g. just `member` instead of `Enum.member`.\nThis rule reports when an enum or namespace qualifier is unnecessary.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nenum A {\n  B,\n  C = A.B,\n}\n```\n\n```ts\nnamespace A {\n  export type B = number;\n  const x: A.B = 3;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nenum A {\n  B,\n  C = B,\n}\n```\n\n```ts\nnamespace A {\n  export type B = number;\n  const x: B = 3;\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you explicitly prefer to use fully qualified names, such as for explicitness, then you don't need to use this rule.\n"
        }
    ]
}