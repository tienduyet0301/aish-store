{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-explicit-any.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow the `any` type.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-explicit-any** for documentation.\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\nUsing `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\nThis rule reports on explicit uses of the `any` keyword as a type annotation.\n\nPreferable alternatives to `any` include:\n\n- If the type is known, describing it in an `interface` or `type`\n- If the type is not known, using the safer `unknown` type\n\n> TypeScript's `--noImplicitAny` compiler option prevents an implied `any`, but doesn't prevent `any` from being explicitly used the way this rule does.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst age: any = 'seventeen';\n```\n\n```ts\nconst ages: any[] = ['seventeen'];\n```\n\n```ts\nconst ages: Array<any> = ['seventeen'];\n```\n\n```ts\nfunction greet(): any {}\n```\n\n```ts\nfunction greet(): any[] {}\n```\n\n```ts\nfunction greet(): Array<any> {}\n```\n\n```ts\nfunction greet(): Array<Array<any>> {}\n```\n\n```ts\nfunction greet(param: Array<any>): string {}\n```\n\n```ts\nfunction greet(param: Array<any>): Array<any> {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst age: number = 17;\n```\n\n```ts\nconst ages: number[] = [17];\n```\n\n```ts\nconst ages: Array<number> = [17];\n```\n\n```ts\nfunction greet(): string {}\n```\n\n```ts\nfunction greet(): string[] {}\n```\n\n```ts\nfunction greet(): Array<string> {}\n```\n\n```ts\nfunction greet(): Array<Array<string>> {}\n```\n\n```ts\nfunction greet(param: Array<string>): string {}\n```\n\n```ts\nfunction greet(param: Array<string>): Array<string> {}\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `fixToUnknown`\n\n{/* insert option description */}\n\nBy default, this rule will not provide automatic ESLint _fixes_: only opt-in _suggestions_.\nSwitching types to `unknown` is safer but is likely to cause additional type errors.\n\nEnabling `{ \"fixToUnknown\": true }` gives the rule an auto-fixer to replace `: any` with `: unknown`.\n\n### `ignoreRestArgs`\n\n{/* insert option description */}\n\nThe examples below are **incorrect** when `{ignoreRestArgs: false}`, but **correct** when `{ignoreRestArgs: true}`.\n\n```ts option='{ \"ignoreRestArgs\": false }' showPlaygroundButton\nfunction foo1(...args: any[]): void {}\nfunction foo2(...args: readonly any[]): void {}\nfunction foo3(...args: Array<any>): void {}\nfunction foo4(...args: ReadonlyArray<any>): void {}\n\ndeclare function bar(...args: any[]): void;\n\nconst baz = (...args: any[]) => {};\nconst qux = function (...args: any[]) {};\n\ntype Quux = (...args: any[]) => void;\ntype Quuz = new (...args: any[]) => void;\n\ninterface Grault {\n  (...args: any[]): void;\n}\ninterface Corge {\n  new (...args: any[]): void;\n}\ninterface Garply {\n  f(...args: any[]): void;\n}\n```\n\n## When Not To Use It\n\n`any` is always a dangerous escape hatch.\nWhenever possible, it is always safer to avoid it.\nTypeScript's `unknown` is almost always preferable to `any`.\n\nHowever, there are occasional situations where it can be necessary to use `any`.\nMost commonly:\n\n- If your project isn't fully onboarded to TypeScript yet, `any` can be temporarily used in places where types aren't yet known or representable\n- If an external package doesn't yet have typings and you want to use `any` pending adding a `.d.ts` for it\n- You're working with particularly complex or nuanced code that can't yet be represented in the TypeScript type system\n\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-unsafe-argument`](./no-unsafe-argument.mdx)\n- [`no-unsafe-assignment`](./no-unsafe-assignment.mdx)\n- [`no-unsafe-call`](./no-unsafe-call.mdx)\n- [`no-unsafe-member-access`](./no-unsafe-member-access.mdx)\n- [`no-unsafe-return`](./no-unsafe-return.mdx)\n\n## Further Reading\n\n- TypeScript [`any` type](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any)\n- TypeScript's [`unknown` type](https://www.typescriptlang.org/docs/handbook/2/functions.html#unknown)\n- TypeScript [`any` type documentation](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#any)\n- TypeScript [`unknown` type release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type)\n"
        }
    ]
}