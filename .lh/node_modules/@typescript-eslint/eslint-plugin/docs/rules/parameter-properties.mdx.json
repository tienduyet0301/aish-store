{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/parameter-properties.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require or disallow parameter properties in class constructors.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/parameter-properties** for documentation.\n\nTypeScript includes a \"parameter properties\" shorthand for declaring a class constructor parameter and class property in one location.\nParameter properties can be confusing to those new to TypeScript as they are less explicit than other ways of declaring and initializing class members.\n\nThis rule can be configured to always disallow the use of parameter properties or enforce their usage when possible.\n\n## Options\n\nThis rule, in its default state, does not require any argument and would completely disallow the use of parameter properties.\nIt may take an options object containing either or both of:\n\n- `\"allow\"`: allowing certain kinds of properties to be ignored\n- `\"prefer\"`: either `\"class-property\"` _(default)_ or `\"parameter-property\"`\n\n### `allow`\n\n{/* insert option description */}\n\nIf you would like to ignore certain kinds of properties then you may pass an object containing `\"allow\"` as an array of any of the following options:\n\n- `allow`, an array containing one or more of the allowed modifiers. Valid values are:\n  - `readonly`, allows **readonly** parameter properties.\n  - `private`, allows **private** parameter properties.\n  - `protected`, allows **protected** parameter properties.\n  - `public`, allows **public** parameter properties.\n  - `private readonly`, allows **private readonly** parameter properties.\n  - `protected readonly`, allows **protected readonly** parameter properties.\n  - `public readonly`, allows **public readonly** parameter properties.\n\nFor example, to ignore `public` properties:\n\n```json\n{\n  \"@typescript-eslint/parameter-properties\": [\n    true,\n    {\n      \"allow\": [\"public\"]\n    }\n  ]\n}\n```\n\n### `prefer`\n\n{/* insert option description */}\n\nBy default, the rule prefers class properties.\nYou can switch it to instead preferring parameter properties with (`\"parameter-property\"`).\n\nIn `\"parameter-property\"` mode, the rule will issue a report when:\n\n- A class property and constructor parameter have the same name and type\n- The constructor parameter is assigned to the class property at the beginning of the constructor\n\n### default\n\nExamples of code for this rule with no options at all:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nclass Foo {\n  constructor(name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### readonly\n\nExamples of code for the `{ \"allow\": [\"readonly\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"readonly\"] }'\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"readonly\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(readonly name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### private\n\nExamples of code for the `{ \"allow\": [\"private\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"private\"] }'\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"private\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### protected\n\nExamples of code for the `{ \"allow\": [\"protected\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"protected\"] }'\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"protected\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### public\n\nExamples of code for the `{ \"allow\": [\"public\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"public\"] }'\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"public\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### private readonly\n\nExamples of code for the `{ \"allow\": [\"private readonly\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"private readonly\"] }'\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"private readonly\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### protected readonly\n\nExamples of code for the `{ \"allow\": [\"protected readonly\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"protected readonly\"] }'\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"protected readonly\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### public readonly\n\nExamples of code for the `{ \"allow\": [\"public readonly\"] }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"public readonly\"] }'\nclass Foo {\n  constructor(readonly name: string) {}\n}\n\nclass Foo {\n  constructor(private name: string) {}\n}\n\nclass Foo {\n  constructor(protected name: string) {}\n}\n\nclass Foo {\n  constructor(public name: string) {}\n}\n\nclass Foo {\n  constructor(private readonly name: string) {}\n}\n\nclass Foo {\n  constructor(protected readonly name: string) {}\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"public readonly\"] }'\nclass Foo {\n  constructor(name: string) {}\n}\n\nclass Foo {\n  constructor(public readonly name: string) {}\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `\"parameter-property\"`\n\nExamples of code for the `{ \"prefer\": \"parameter-property\" }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"prefer\": \"parameter-property\" }'\nclass Foo {\n  private name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Foo {\n  public readonly name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Foo {\n  constructor(name: string) {\n    this.name = name;\n  }\n  name: string;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"prefer\": \"parameter-property\" }'\nclass Foo {\n  private differentName: string;\n  constructor(name: string) {\n    this.differentName = name;\n  }\n}\n\nclass Foo {\n  private differentType: number | undefined;\n  constructor(differentType: number) {\n    this.differentType = differentType;\n  }\n}\n\nclass Foo {\n  protected logicInConstructor: string;\n  constructor(logicInConstructor: string) {\n    console.log('Hello, world!');\n    this.logicInConstructor = logicInConstructor;\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't care about which style of parameter properties in constructors is used in your classes, then you will not need this rule.\n\nHowever, keep in mind that inconsistent style can harm readability in a project.\nWe recommend picking a single option for this rule that works best for your project.\n"
        }
    ]
}