{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-invalid-void-type.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow `void` type outside of generic or return types.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-invalid-void-type** for documentation.\n\n`void` in TypeScript refers to a function return that is meant to be ignored.\nAttempting to use a `void` type outside of a return type or generic type argument is often a sign of programmer error.\n`void` can also be misleading for other developers even if used correctly.\n\n> The `void` type means cannot be mixed with any other types, other than `never`, which accepts all types.\n> If you think you need this then you probably want the `undefined` type instead.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ntype PossibleValues = string | number | void;\ntype MorePossibleValues = string | ((number & any) | (string | void));\n\nfunction logSomething(thing: void) {}\nfunction printArg<T = void>(arg: T) {}\n\nlogAndReturn<void>(undefined);\n\ninterface Interface {\n  lambda: () => void;\n  prop: void;\n}\n\nclass MyClass {\n  private readonly propName: void;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ntype NoOp = () => void;\n\nfunction noop(): void {}\n\nlet trulyUndefined = void 0;\n\nasync function promiseMeSomething(): Promise<void> {}\n\ntype stillVoid = void | never;\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allowInGenericTypeArguments`\n\n{/* insert option description */}\n\nAlternatively, you can provide an array of strings which allowlist which types may accept `void` as a generic type parameter.\n\nAny types considered valid by this option will be considered valid as part of a union type with `void`.\n\nThis option is `true` by default.\n\nThe following patterns are considered warnings with `{ allowInGenericTypeArguments: false }`:\n\n```ts option='{ \"allowInGenericTypeArguments\": false }' showPlaygroundButton\nlogAndReturn<void>(undefined);\n\nlet voidPromise: Promise<void> = new Promise<void>(() => {});\nlet voidMap: Map<string, void> = new Map<string, void>();\n```\n\nThe following patterns are considered warnings with `{ allowInGenericTypeArguments: ['Ex.Mx.Tx'] }`:\n\n```ts option='{ \"allowInGenericTypeArguments\": [\"Ex.Mx.Tx\"] }' showPlaygroundButton\nlogAndReturn<void>(undefined);\n\ntype NotAllowedVoid1 = Mx.Tx<void>;\ntype NotAllowedVoid2 = Tx<void>;\ntype NotAllowedVoid3 = Promise<void>;\n```\n\nThe following patterns are not considered warnings with `{ allowInGenericTypeArguments: ['Ex.Mx.Tx'] }`:\n\n```ts option='{ \"allowInGenericTypeArguments\": [\"Ex.Mx.Tx\"] }' showPlaygroundButton\ntype AllowedVoid = Ex.Mx.Tx<void>;\ntype AllowedVoidUnion = void | Ex.Mx.Tx<void>;\n```\n\n### `allowAsThisParameter`\n\n{/* insert option description */}\n\nThis pattern can be useful to explicitly label function types that do not use a `this` argument. [See the TypeScript docs for more information](https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters-in-callbacks).\n\nThis option is `false` by default.\n\nThe following patterns are considered warnings with `{ allowAsThisParameter: false }` but valid with `{ allowAsThisParameter: true }`:\n\n```ts option='{ \"allowAsThisParameter\": false }' showPlaygroundButton\nfunction doThing(this: void) {}\nclass Example {\n  static helper(this: void) {}\n  callback(this: void) {}\n}\n```\n\n## When Not To Use It\n\nIf you don't care about if `void` is used with other types, or in invalid places, then you don't need this rule.\n"
        }
    ]
}