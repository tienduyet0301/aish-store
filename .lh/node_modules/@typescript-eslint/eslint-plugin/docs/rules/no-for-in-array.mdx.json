{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-for-in-array.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow iterating over an array with a for-in loop.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-for-in-array** for documentation.\n\nA for-in loop (`for (const i in o)`) iterates over the properties of an Object.\nWhile it is legal to use for-in loops with array values, it is not common. There are several potential bugs with this:\n\n1. It iterates over all enumerable properties, including non-index ones and the entire prototype chain. For example, [`RegExp.prototype.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) returns an array with additional properties, and `for-in` will iterate over them. Some libraries or even your own code may add additional methods to `Array.prototype` (either as polyfill or as custom methods), and if not done properly, they may be iterated over as well.\n2. It skips holes in the array. While sparse arrays are rare and advised against, they are still possible and your code should be able to handle them.\n3. The \"index\" is returned as a string, not a number. This can be caught by TypeScript, but can still lead to subtle bugs.\n\nYou may have confused for-in with for-of, which iterates over the elements of the array. If you actually need the index, use a regular `for` loop or the `forEach` method.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const array: string[];\n\nfor (const i in array) {\n  console.log(array[i]);\n}\n\nfor (const i in array) {\n  console.log(i, array[i]);\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const array: string[];\n\nfor (const value of array) {\n  console.log(value);\n}\n\nfor (let i = 0; i < array.length; i += 1) {\n  console.log(i, array[i]);\n}\n\narray.forEach((value, i) => {\n  console.log(i, value);\n});\n\nfor (const [i, value] of array.entries()) {\n  console.log(i, value);\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project is a rare one that intentionally loops over string indices of arrays, you can turn off this rule.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n"
        }
    ]
}