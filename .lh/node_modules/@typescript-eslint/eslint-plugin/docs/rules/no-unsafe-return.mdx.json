{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-return.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow returning a value with type `any` from a function.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-return** for documentation.\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\nUsing `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nReturning an `any`-typed value from a function creates a potential type safety hole and source of bugs in your codebase.\n\nThis rule disallows returning `any` or `any[]` from a function and returning `Promise<any>` from an async function.\n\nThis rule also compares generic type argument types to ensure you don't return an unsafe `any` in a generic position to a function that's expecting a specific type.\nFor example, it will error if you return `Set<any>` from a function declared as returning `Set<string>`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfunction foo1() {\n  return 1 as any;\n}\nfunction foo2() {\n  return Object.create(null);\n}\nconst foo3 = () => {\n  return 1 as any;\n};\nconst foo4 = () => Object.create(null);\n\nfunction foo5() {\n  return [] as any[];\n}\nfunction foo6() {\n  return [] as Array<any>;\n}\nfunction foo7() {\n  return [] as readonly any[];\n}\nfunction foo8() {\n  return [] as Readonly<any[]>;\n}\nconst foo9 = () => {\n  return [] as any[];\n};\nconst foo10 = () => [] as any[];\n\nconst foo11 = (): string[] => [1, 2, 3] as any[];\n\nasync function foo13() {\n  return Promise.resolve({} as any);\n}\n\n// generic position examples\nfunction assignability1(): Set<string> {\n  return new Set<any>([1]);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set<any>([true]);\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction foo1() {\n  return 1;\n}\nfunction foo2() {\n  return Object.create(null) as Record<string, unknown>;\n}\n\nconst foo3 = () => [];\nconst foo4 = () => ['a'];\n\nasync function foo5() {\n  return Promise.resolve(1);\n}\n\nfunction assignability1(): Set<string> {\n  return new Set<string>(['foo']);\n}\ntype TAssign = () => Set<string>;\nconst assignability2: TAssign = () => new Set(['foo']);\n```\n\n</TabItem>\n</Tabs>\n\nThere are cases where the rule allows to return `any` to `unknown`.\n\nExamples of `any` to `unknown` return that are allowed:\n\n```ts showPlaygroundButton\nfunction foo1(): unknown {\n  return JSON.parse(singleObjString); // Return type for JSON.parse is any.\n}\n\nfunction foo2(): unknown[] {\n  return [] as any[];\n}\n```\n\n## When Not To Use It\n\nIf your codebase has many existing `any`s or areas of unsafe code, it may be difficult to enable this rule.\nIt may be easier to skip the `no-unsafe-*` rules pending increasing type safety in unsafe areas of your project.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-explicit-any`](./no-explicit-any.mdx)\n- [`no-unsafe-argument`](./no-unsafe-argument.mdx)\n- [`no-unsafe-assignment`](./no-unsafe-assignment.mdx)\n- [`no-unsafe-call`](./no-unsafe-call.mdx)\n- [`no-unsafe-member-access`](./no-unsafe-member-access.mdx)\n"
        }
    ]
}