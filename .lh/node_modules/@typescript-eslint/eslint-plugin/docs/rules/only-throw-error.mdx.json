{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/only-throw-error.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow throwing non-`Error` values as exceptions.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/only-throw-error** for documentation.\n\nIt uses type information to determine which values are `Error`s.\n\nIt is considered good practice to only `throw` the `Error` object itself or an object using the `Error` object as base objects for user-defined exceptions.\nThe fundamental benefit of `Error` objects is that they automatically keep track of where they were built and originated.\n\n:::info[Migration from `no-throw-literal`]\n\nThis extension rule was formerly known as `@typescript-eslint/no-throw-literal`.\nThe new name is a drop-in replacement with identical functionality.\n\n:::\n\n## Examples\n\nThis rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an `Error` object.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nthrow 'error';\n\nthrow 0;\n\nthrow undefined;\n\nthrow null;\n\nconst err = new Error();\nthrow 'an ' + err;\n\nconst err = new Error();\nthrow `${err}`;\n\nconst err = '';\nthrow err;\n\nfunction getError() {\n  return '';\n}\nthrow getError();\n\nconst foo = {\n  bar: '',\n};\nthrow foo.bar;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nthrow new Error();\n\nthrow new Error('error');\n\nconst e = new Error('error');\nthrow e;\n\ntry {\n  throw new Error('error');\n} catch (e) {\n  throw e;\n}\n\nconst err = new Error();\nthrow err;\n\nfunction getError() {\n  return new Error();\n}\nthrow getError();\n\nconst foo = {\n  bar: new Error(),\n};\nthrow foo.bar;\n\nclass CustomError extends Error {\n  // ...\n}\nthrow new CustomError();\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options {\n  /**\n   * Type specifiers that can be thrown.\n   */\n  allow?: (\n    | {\n        from: 'file';\n        name: [string, ...string[]] | string;\n        path?: string;\n      }\n    | {\n        from: 'lib';\n        name: [string, ...string[]] | string;\n      }\n    | {\n        from: 'package';\n        name: [string, ...string[]] | string;\n        package: string;\n      }\n    | string\n  )[];\n\n  /**\n   * Whether to always allow throwing values typed as `any`.\n   */\n  allowThrowingAny?: boolean;\n\n  /**\n   * Whether to always allow throwing values typed as `unknown`.\n   */\n  allowThrowingUnknown?: boolean;\n}\n\nconst defaultOptions: Options = {\n  allow: [],\n  allowThrowingAny: true,\n  allowThrowingUnknown: true,\n};\n```\n\n{/* Intentionally Omitted: When Not To Use It */}\n"
        }
    ]
}