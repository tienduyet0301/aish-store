{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-confusing-non-null-assertion.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow non-null assertion in locations that may be confusing.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-confusing-non-null-assertion** for documentation.\n\nUsing a non-null assertion (`!`) next to an assignment or equality check (`=` or `==` or `===`) creates code that is confusing as it looks similar to an inequality check (`!=` `!==`).\n\n```typescript\na! == b; // a non-null assertion(`!`) and an equals test(`==`)\na !== b; // not equals test(`!==`)\na! === b; // a non-null assertion(`!`) and a triple equals test(`===`)\n```\n\nUsing a non-null assertion (`!`) next to an in test (`in`) or an instanceof test (`instanceof`) creates code that is confusing since it may look like the operator is negated, but it is actually not.\n\n{/* prettier-ignore */}\n```typescript\na! in b; // a non-null assertion(`!`) and an in test(`in`)\na !in b; // also a non-null assertion(`!`) and an in test(`in`)\n!(a in b); // a negated in test\n\na! instanceof b; // a non-null assertion(`!`) and an instanceof test(`instanceof`)\na !instanceof b; // also a non-null assertion(`!`) and an instanceof test(`instanceof`)\n!(a instanceof b); // a negated instanceof test\n````\n\nThis rule flags confusing `!` assertions and suggests either removing them or wrapping the asserted expression in `()` parenthesis.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ninterface Foo {\n  bar?: string;\n  num?: number;\n}\n\nconst foo: Foo = getFoo();\nconst isEqualsBar = foo.bar! == 'hello';\nconst isEqualsNum = 1 + foo.num! == 2;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n{/* prettier-ignore */}\n```ts\ninterface Foo {\n  bar?: string;\n  num?: number;\n}\n\nconst foo: Foo = getFoo();\nconst isEqualsBar = foo.bar == 'hello';\nconst isEqualsNum = (1 + foo.num!) == 2;\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't care about this confusion, then you will not need this rule.\n\n## Further Reading\n\n- [`Issue: Easy misunderstanding: \"! ===\"`](https://github.com/microsoft/TypeScript/issues/37837) in [TypeScript repo](https://github.com/microsoft/TypeScript)\n"
        }
    ]
}