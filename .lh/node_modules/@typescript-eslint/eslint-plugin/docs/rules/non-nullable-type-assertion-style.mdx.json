{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/non-nullable-type-assertion-style.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce non-null assertions over explicit type assertions.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/non-nullable-type-assertion-style** for documentation.\n\nThere are two common ways to assert to TypeScript that a value is its type without `null` or `undefined`:\n\n- `!`: Non-null assertion\n- `as`: Traditional type assertion with a coincidentally equivalent type\n\n`!` non-null assertions are generally preferred for requiring less code and being harder to fall out of sync as types change.\nThis rule reports when an `as` assertion is doing the same job as a `!` would, and suggests fixing the code to be an `!`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst maybe: string | undefined = Math.random() > 0.5 ? '' : undefined;\n\nconst definitely = maybe as string;\nconst alsoDefinitely = <string>maybe;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst maybe: string | undefined = Math.random() > 0.5 ? '' : undefined;\n\nconst definitely = maybe!;\nconst alsoDefinitely = maybe!;\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't mind having unnecessarily verbose type assertions, you can avoid this rule.\n"
        }
    ]
}