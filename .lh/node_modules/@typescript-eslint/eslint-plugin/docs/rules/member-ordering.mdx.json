{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/member-ordering.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require a consistent member declaration order.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/member-ordering** for documentation.\n\nThis rule aims to standardize the way classes, interfaces, and type literals are structured and ordered.\nA consistent ordering of fields, methods and constructors can make code easier to read, navigate, and edit.\n\n:::note\nThis rule is _feature frozen_: it will no longer receive new features such as new options.\nIt still will accept bug and documentation fixes for its existing area of features.\n\nStylistic rules that enforce naming and/or sorting conventions tend to grow incomprehensibly complex as increasingly obscure features are requested.\nThis rule has reached the limit of what is reasonable for the typescript-eslint project to maintain.\nSee [eslint-plugin: Feature freeze naming and sorting stylistic rules](https://github.com/typescript-eslint/typescript-eslint/issues/8792) for more information.\n:::\n\n## Options\n\n```ts\ninterface Options {\n  default?: OrderConfig;\n  classes?: OrderConfig;\n  classExpressions?: OrderConfig;\n  interfaces?: OrderConfig;\n  typeLiterals?: OrderConfig;\n}\n\ntype OrderConfig = MemberType[] | SortedOrderConfig | 'never';\n\ninterface SortedOrderConfig {\n  memberTypes?: MemberType[] | 'never';\n  optionalityOrder?: 'optional-first' | 'required-first';\n  order?:\n    | 'alphabetically'\n    | 'alphabetically-case-insensitive'\n    | 'as-written'\n    | 'natural'\n    | 'natural-case-insensitive';\n}\n\n// See below for the more specific MemberType strings\ntype MemberType = string | string[];\n```\n\nYou can configure `OrderConfig` options for:\n\n- **`default`**: all constructs (used as a fallback)\n- **`classes`**?: override ordering specifically for classes\n- **`classExpressions`**?: override ordering specifically for class expressions\n- **`interfaces`**?: override ordering specifically for interfaces\n- **`typeLiterals`**?: override ordering specifically for type literals\n\nThe `OrderConfig` settings for each kind of construct may configure sorting on up to three levels:\n\n- **`memberTypes`**: organizing on member type groups such as methods vs. properties\n- **`optionalityOrder`**: whether to put all optional members first or all required members first\n- **`order`**: organizing based on member names, such as alphabetically\n\n### Groups\n\nYou can define many different groups based on different attributes of members.\nThe supported member attributes are, in order:\n\n- **Accessibility** (`'public' | 'protected' | 'private' | '#private'`)\n- **Decoration** (`'decorated'`): Whether the member has an explicit accessibility decorator\n- **Kind** (`'call-signature' | 'constructor' | 'field' | 'readonly-field' | 'get' | 'method' | 'set' | 'signature' | 'readonly-signature'`)\n\nMember attributes may be joined with a `'-'` to combine into more specific groups.\nFor example, `'public-field'` would come before `'private-field'`.\n\n### Orders\n\nThe `order` value specifies what order members should be within a group.\nIt defaults to `as-written`, meaning any order is fine.\nOther allowed values are:\n\n- `alphabetically`: Sorted in a-z alphabetical order, directly using string `<` comparison (so `B` comes before `a`)\n- `alphabetically-case-insensitive`: Sorted in a-z alphabetical order, ignoring case (so `a` comes before `B`)\n- `natural`: Same as `alphabetically`, but using [`natural-compare-lite`](https://github.com/litejs/natural-compare-lite) for more friendly sorting of numbers\n- `natural-case-insensitive`: Same as `alphabetically-case-insensitive`, but using [`natural-compare-lite`](https://github.com/litejs/natural-compare-lite) for more friendly sorting of numbers\n\n### Default configuration\n\nThe default configuration looks as follows:\n\n```jsonc\n{\n  \"default\": {\n    \"memberTypes\": [\n      // Index signature\n      \"signature\",\n      \"call-signature\",\n\n      // Fields\n      \"public-static-field\",\n      \"protected-static-field\",\n      \"private-static-field\",\n      \"#private-static-field\",\n\n      \"public-decorated-field\",\n      \"protected-decorated-field\",\n      \"private-decorated-field\",\n\n      \"public-instance-field\",\n      \"protected-instance-field\",\n      \"private-instance-field\",\n      \"#private-instance-field\",\n\n      \"public-abstract-field\",\n      \"protected-abstract-field\",\n\n      \"public-field\",\n      \"protected-field\",\n      \"private-field\",\n      \"#private-field\",\n\n      \"static-field\",\n      \"instance-field\",\n      \"abstract-field\",\n\n      \"decorated-field\",\n\n      \"field\",\n\n      // Static initialization\n      \"static-initialization\",\n\n      // Constructors\n      \"public-constructor\",\n      \"protected-constructor\",\n      \"private-constructor\",\n\n      \"constructor\",\n\n      // Accessors\n      \"public-static-accessor\",\n      \"protected-static-accessor\",\n      \"private-static-accessor\",\n      \"#private-static-accessor\",\n\n      \"public-decorated-accessor\",\n      \"protected-decorated-accessor\",\n      \"private-decorated-accessor\",\n\n      \"public-instance-accessor\",\n      \"protected-instance-accessor\",\n      \"private-instance-accessor\",\n      \"#private-instance-accessor\",\n\n      \"public-abstract-accessor\",\n      \"protected-abstract-accessor\",\n\n      \"public-accessor\",\n      \"protected-accessor\",\n      \"private-accessor\",\n      \"#private-accessor\",\n\n      \"static-accessor\",\n      \"instance-accessor\",\n      \"abstract-accessor\",\n\n      \"decorated-accessor\",\n\n      \"accessor\",\n\n      // Getters\n      \"public-static-get\",\n      \"protected-static-get\",\n      \"private-static-get\",\n      \"#private-static-get\",\n\n      \"public-decorated-get\",\n      \"protected-decorated-get\",\n      \"private-decorated-get\",\n\n      \"public-instance-get\",\n      \"protected-instance-get\",\n      \"private-instance-get\",\n      \"#private-instance-get\",\n\n      \"public-abstract-get\",\n      \"protected-abstract-get\",\n\n      \"public-get\",\n      \"protected-get\",\n      \"private-get\",\n      \"#private-get\",\n\n      \"static-get\",\n      \"instance-get\",\n      \"abstract-get\",\n\n      \"decorated-get\",\n\n      \"get\",\n\n      // Setters\n      \"public-static-set\",\n      \"protected-static-set\",\n      \"private-static-set\",\n      \"#private-static-set\",\n\n      \"public-decorated-set\",\n      \"protected-decorated-set\",\n      \"private-decorated-set\",\n\n      \"public-instance-set\",\n      \"protected-instance-set\",\n      \"private-instance-set\",\n      \"#private-instance-set\",\n\n      \"public-abstract-set\",\n      \"protected-abstract-set\",\n\n      \"public-set\",\n      \"protected-set\",\n      \"private-set\",\n      \"#private-set\",\n\n      \"static-set\",\n      \"instance-set\",\n      \"abstract-set\",\n\n      \"decorated-set\",\n\n      \"set\",\n\n      // Methods\n      \"public-static-method\",\n      \"protected-static-method\",\n      \"private-static-method\",\n      \"#private-static-method\",\n\n      \"public-decorated-method\",\n      \"protected-decorated-method\",\n      \"private-decorated-method\",\n\n      \"public-instance-method\",\n      \"protected-instance-method\",\n      \"private-instance-method\",\n      \"#private-instance-method\",\n\n      \"public-abstract-method\",\n      \"protected-abstract-method\",\n\n      \"public-method\",\n      \"protected-method\",\n      \"private-method\",\n      \"#private-method\",\n\n      \"static-method\",\n      \"instance-method\",\n      \"abstract-method\",\n\n      \"decorated-method\",\n\n      \"method\",\n    ],\n  },\n}\n```\n\n:::note\nThe default configuration contains member group types which contain other member types.\nThis is intentional to provide better error messages.\n:::\n\n:::tip\nBy default, the members are not sorted.\nIf you want to sort them alphabetically, you have to provide a custom configuration.\n:::\n\n## Examples\n\n### General Order on All Constructs\n\nThis config specifies the order for all constructs.\nIt ignores member types other than signatures, methods, constructors, and fields.\nIt also ignores accessibility and scope.\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ninterface Foo {\n  B: string; // -> field\n\n  new (); // -> constructor\n\n  A(): void; // -> method\n\n  [Z: string]: any; // -> signature\n}\n```\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ntype Foo = {\n  B: string; // -> field\n\n  // no constructor\n\n  A(): void; // -> method\n\n  // no signature\n};\n```\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\nclass Foo {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  [Z: string]: any; // -> signature\n}\n```\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\nconst Foo = class {\n  private C: string; // -> field\n  public D: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  [Z: string]: any; // -> signature\n\n  protected static E: string; // -> field\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ninterface Foo {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n}\n```\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ntype Foo = {\n  // no signature\n\n  A(): void; // -> method\n\n  // no constructor\n\n  B: string; // -> field\n};\n```\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\nclass Foo {\n  [Z: string]: any; // -> signature\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n}\n```\n\n```ts option='{ \"default\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\nconst Foo = class {\n  [Z: string]: any; // -> signature\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n};\n```\n\n</TabItem>\n</Tabs>\n\n### Classes\n\n#### Public Instance Methods Before Public Static Fields\n\nThis config specifies that public instance methods should come first before public static fields.\nEverything else can be placed anywhere.\nIt doesn't apply to interfaces or type literals as accessibility and scope are not part of them.\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": [\"public-instance-method\", \"public-static-field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": [\"public-instance-method\", \"public-static-field\"] }'\nclass Foo {\n  private C: string; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public B(): void {} // -> public instance method\n}\n```\n\n```ts option='{ \"default\": [\"public-instance-method\", \"public-static-field\"] }'\nconst Foo = class {\n  private C: string; // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  public D: string; // (irrelevant)\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  public B(): void {} // -> public instance method\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": [\"public-instance-method\", \"public-static-field\"] }'\nclass Foo {\n  public B(): void {} // -> public instance method\n\n  private C: string; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  public static E: string; // -> public static field\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n}\n```\n\n```ts option='{ \"default\": [\"public-instance-method\", \"public-static-field\"] }'\nconst Foo = class {\n  public B(): void {} // -> public instance method\n\n  private C: string; // (irrelevant)\n\n  [Z: string]: any; // (irrelevant)\n\n  public D: string; // (irrelevant)\n\n  constructor() {} // (irrelevant)\n\n  public static A(): void {} // (irrelevant)\n\n  public static E: string; // -> public static field\n};\n```\n\n</TabItem>\n</Tabs>\n\n#### Static Fields Before Instance Fields\n\nThis config specifies that static fields should come before instance fields, with public static fields first.\nIt doesn't apply to interfaces or type literals as accessibility and scope are not part of them.\n\n```jsonc\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": [\"public-static-field\", \"static-field\", \"instance-field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": [\"public-static-field\", \"static-field\", \"instance-field\"] }'\nclass Foo {\n  private E: string; // -> instance field\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  public static A: string; // -> public static field\n\n  [Z: string]: any; // (irrelevant)\n}\n```\n\n```ts option='{ \"default\": [\"public-static-field\", \"static-field\", \"instance-field\"] }'\nconst foo = class {\n  public T(): void {} // method (irrelevant)\n\n  private static B: string; // -> static field\n\n  constructor() {} // constructor (irrelevant)\n\n  private E: string; // -> instance field\n\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  [Z: string]: any; // signature (irrelevant)\n\n  public static A: string; // -> public static field\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": [\"public-static-field\", \"static-field\", \"instance-field\"] }'\nclass Foo {\n  public static A: string; // -> public static field\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  private E: string; // -> instance field\n\n  [Z: string]: any; // (irrelevant)\n}\n```\n\n```ts option='{ \"default\": [\"public-static-field\", \"static-field\", \"instance-field\"] }'\nconst foo = class {\n  [Z: string]: any; // -> signature (irrelevant)\n\n  public static A: string; // -> public static field\n\n  constructor() {} // -> constructor (irrelevant)\n\n  private static B: string; // -> static field\n  protected static C: string; // -> static field\n  private static D: string; // -> static field\n\n  private E: string; // -> instance field\n\n  public T(): void {} // -> method (irrelevant)\n};\n```\n\n</TabItem>\n</Tabs>\n\n#### Class Declarations\n\nThis config only specifies an order for classes: methods, then the constructor, then fields.\nIt does not apply to class expressions (use `classExpressions` for them).\nDefault settings will be used for class declarations and all other syntax constructs other than class declarations.\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"classes\": [\"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"classes\": [\"method\", \"constructor\", \"field\"] }'\nclass Foo {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"classes\": [\"method\", \"constructor\", \"field\"] }'\nclass Foo {\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n}\n```\n\n</TabItem>\n</Tabs>\n\n#### Class Expressions\n\nThis config only specifies an order for classes expressions: methods, then the constructor, then fields.\nIt does not apply to class declarations (use `classes` for them).\nDefault settings will be used for class declarations and all other syntax constructs other than class expressions.\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"classExpressions\": [\"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"classExpressions\": [\"method\", \"constructor\", \"field\"] }'\nconst foo = class {\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n\n  constructor() {} // -> constructor\n\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"classExpressions\": [\"method\", \"constructor\", \"field\"] }'\nconst foo = class {\n  public static A(): void {} // -> method\n  public B(): void {} // -> method\n\n  constructor() {} // -> constructor\n\n  private C: string; // -> field\n  public D: string; // -> field\n  protected static E: string; // -> field\n};\n```\n\n</TabItem>\n</Tabs>\n\n### Interfaces\n\nThis config only specifies an order for interfaces: signatures, then methods, then constructors, then fields.\nIt does not apply to type literals (use `typeLiterals` for them).\nDefault settings will be used for type literals and all other syntax constructs other than class expressions.\n\n:::note\nThese member types are the only ones allowed for `interfaces`.\n:::\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"interfaces\": [\"signature\", \"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"interfaces\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ninterface Foo {\n  B: string; // -> field\n\n  new (); // -> constructor\n\n  A(): void; // -> method\n\n  [Z: string]: any; // -> signature\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"interfaces\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ninterface Foo {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n}\n```\n\n</TabItem>\n</Tabs>\n\n### Type Literals\n\nThis config only specifies an order for type literals: signatures, then methods, then constructors, then fields.\nIt does not apply to interfaces (use `interfaces` for them).\nDefault settings will be used for interfaces and all other syntax constructs other than class expressions.\n\n:::note\nThese member types are the only ones allowed for `typeLiterals`.\n:::\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"typeLiterals\": [\"signature\", \"method\", \"constructor\", \"field\"] },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"typeLiterals\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ntype Foo = {\n  B: string; // -> field\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  [Z: string]: any; // -> signature\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"typeLiterals\": [\"signature\", \"method\", \"constructor\", \"field\"] }'\ntype Foo = {\n  [Z: string]: any; // -> signature\n\n  A(): void; // -> method\n\n  new (); // -> constructor\n\n  B: string; // -> field\n};\n```\n\n</TabItem>\n</Tabs>\n\n### Sorting Options\n\n#### Sorting Alphabetically Within Member Groups\n\nThe default member order will be applied if `memberTypes` is not specified.\nYou can see the default order in [Default Configuration](#default-configuration).\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{\"default\":{\"order\":\"alphabetically\"}}'\ninterface Foo {\n  a: x;\n  B: x;\n  c: x;\n\n  B(): void;\n  c(): void;\n  a(): void;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{\"default\":{\"order\":\"alphabetically\"}}'\ninterface Foo {\n  B: x;\n  a: x;\n  c: x;\n\n  B(): void;\n  a(): void;\n  c(): void;\n}\n```\n\n</TabItem>\n</Tabs>\n\n#### Sorting Alphabetically Within Custom Member Groups\n\nThis config specifies that within each custom `memberTypes` group, members are in an alphabetic case-sensitive order.\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"memberTypes\": [\"method\", \"field\"],\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{\"default\":{\"memberTypes\":[\"method\",\"field\"],\"order\":\"alphabetically\"}}'\ninterface Foo {\n  B(): void;\n  c(): void;\n  a(): void;\n\n  a: x;\n  B: x;\n  c: x;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{\"default\":{\"memberTypes\":[\"method\",\"field\"],\"order\":\"alphabetically\"}}'\ninterface Foo {\n  B(): void;\n  a(): void;\n  c(): void;\n\n  B: x;\n  a: x;\n  c: x;\n}\n```\n\n</TabItem>\n</Tabs>\n\n#### Sorting Alphabetically Case Insensitive Within Member Groups\n\nThe default member order will be applied if `memberTypes` is not specified.\nYou can see the default order in [Default Configuration](#default-configuration).\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"order\": \"alphabetically-case-insensitive\",\n        },\n      },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{\"default\":{\"order\":\"alphabetically-case-insensitive\"}}'\ninterface Foo {\n  B: x;\n  a: x;\n  c: x;\n\n  B(): void;\n  c(): void;\n  a(): void;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{\"default\":{\"order\":\"alphabetically-case-insensitive\"}}'\ninterface Foo {\n  a: x;\n  B: x;\n  c: x;\n\n  a(): void;\n  B(): void;\n  c(): void;\n}\n```\n\n</TabItem>\n</Tabs>\n\n#### Sorting Alphabetically Ignoring Member Groups\n\nThis config specifies that members are all sorted in an alphabetic case-sensitive order.\nIt ignores any member group types completely by specifying `\"never\"` for `memberTypes`.\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      { \"default\": { \"memberTypes\": \"never\", \"order\": \"alphabetically\" } },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": { \"memberTypes\": \"never\", \"order\": \"alphabetically\" } }'\ninterface Foo {\n  b(): void;\n  a: boolean;\n\n  [a: string]: number;\n  new (): Bar;\n  (): Baz;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": { \"memberTypes\": \"never\", \"order\": \"alphabetically\" } }'\ninterface Foo {\n  [a: string]: number;\n  a: boolean;\n  b(): void;\n\n  (): Baz;\n  new (): Bar;\n}\n```\n\n</TabItem>\n</Tabs>\n\n#### Sorting Optional Members First or Last\n\nThe `optionalityOrder` option may be enabled to place all optional members in a group at the beginning or end of that group.\n\nThis config places all optional members before all required members:\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"optionalityOrder\": \"optional-first\",\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": { \"optionalityOrder\": \"optional-first\", \"order\": \"alphabetically\" } }'\ninterface Foo {\n  a: boolean;\n  b?: number;\n  c: string;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": { \"optionalityOrder\": \"optional-first\", \"order\": \"alphabetically\" } }'\ninterface Foo {\n  b?: number;\n  a: boolean;\n  c: string;\n}\n```\n\n</TabItem>\n</Tabs>\n\nThis config places all required members before all optional members:\n\n```jsonc\n// .eslintrc.json\n{\n  \"rules\": {\n    \"@typescript-eslint/member-ordering\": [\n      \"error\",\n      {\n        \"default\": {\n          \"optionalityOrder\": \"required-first\",\n          \"order\": \"alphabetically\",\n        },\n      },\n    ],\n  },\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": { \"optionalityOrder\": \"required-first\", \"order\": \"alphabetically\" } }'\ninterface Foo {\n  a: boolean;\n  b?: number;\n  c: string;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": { \"optionalityOrder\": \"required-first\", \"order\": \"alphabetically\" } }'\ninterface Foo {\n  a: boolean;\n  c: string;\n  b?: number;\n}\n```\n\n</TabItem>\n</Tabs>\n\n## All Supported Options\n\n### Member Types (Granular Form)\n\nThere are multiple ways to specify the member types.\nThe most explicit and granular form is the following:\n\n```jsonc\n[\n  // Index signature\n  \"signature\",\n  \"readonly-signature\",\n\n  // Fields\n  \"public-static-field\",\n  \"public-static-readonly-field\",\n  \"protected-static-field\",\n  \"protected-static-readonly-field\",\n  \"private-static-field\",\n  \"private-static-readonly-field\",\n  \"#private-static-field\",\n  \"#private-static-readonly-field\",\n\n  \"public-decorated-field\",\n  \"public-decorated-readonly-field\",\n  \"protected-decorated-field\",\n  \"protected-decorated-readonly-field\",\n  \"private-decorated-field\",\n  \"private-decorated-readonly-field\",\n\n  \"public-instance-field\",\n  \"public-instance-readonly-field\",\n  \"protected-instance-field\",\n  \"protected-instance-readonly-field\",\n  \"private-instance-field\",\n  \"private-instance-readonly-field\",\n  \"#private-instance-field\",\n  \"#private-instance-readonly-field\",\n\n  \"public-abstract-field\",\n  \"public-abstract-readonly-field\",\n  \"protected-abstract-field\",\n  \"protected-abstract-readonly-field\",\n\n  \"public-field\",\n  \"public-readonly-field\",\n  \"protected-field\",\n  \"protected-readonly-field\",\n  \"private-field\",\n  \"private-readonly-field\"\n  \"#private-field\",\n  \"#private-readonly-field\"\n\n  \"static-field\",\n  \"static-readonly-field\",\n  \"instance-field\",\n  \"instance-readonly-field\"\n  \"abstract-field\",\n  \"abstract-readonly-field\",\n\n  \"decorated-field\",\n  \"decorated-readonly-field\",\n\n  \"field\",\n  \"readonly-field\",\n\n  // Static initialization\n  \"static-initialization\",\n\n  // Constructors\n  \"public-constructor\",\n  \"protected-constructor\",\n  \"private-constructor\",\n\n  // Getters\n  \"public-static-get\",\n  \"protected-static-get\",\n  \"private-static-get\",\n  \"#private-static-get\",\n\n  \"public-decorated-get\",\n  \"protected-decorated-get\",\n  \"private-decorated-get\",\n\n  \"public-instance-get\",\n  \"protected-instance-get\",\n  \"private-instance-get\",\n  \"#private-instance-get\",\n\n  \"public-abstract-get\",\n  \"protected-abstract-get\",\n\n  \"public-get\",\n  \"protected-get\",\n  \"private-get\",\n  \"#private-get\",\n\n  \"static-get\",\n  \"instance-get\",\n  \"abstract-get\",\n\n  \"decorated-get\",\n\n  \"get\",\n\n  // Setters\n  \"public-static-set\",\n  \"protected-static-set\",\n  \"private-static-set\",\n  \"#private-static-set\",\n\n  \"public-decorated-set\",\n  \"protected-decorated-set\",\n  \"private-decorated-set\",\n\n  \"public-instance-set\",\n  \"protected-instance-set\",\n  \"private-instance-set\",\n  \"#private-instance-set\",\n\n  \"public-abstract-set\",\n  \"protected-abstract-set\",\n\n  \"public-set\",\n  \"protected-set\",\n  \"private-set\",\n\n  \"static-set\",\n  \"instance-set\",\n  \"abstract-set\",\n\n  \"decorated-set\",\n\n  \"set\",\n\n  // Methods\n  \"public-static-method\",\n  \"protected-static-method\",\n  \"private-static-method\",\n  \"#private-static-method\",\n  \"public-decorated-method\",\n  \"protected-decorated-method\",\n  \"private-decorated-method\",\n  \"public-instance-method\",\n  \"protected-instance-method\",\n  \"private-instance-method\",\n  \"#private-instance-method\",\n  \"public-abstract-method\",\n  \"protected-abstract-method\"\n]\n```\n\n:::note\nIf you only specify some of the possible types, the non-specified ones can have any particular order.\nThis means that they can be placed before, within or after the specified types and the linter won't complain about it.\n:::\n\n### Member Group Types (With Accessibility, Ignoring Scope)\n\nIt is also possible to group member types by their accessibility (`static`, `instance`, `abstract`), ignoring their scope.\n\n```jsonc\n[\n  // Index signature\n  // No accessibility for index signature.\n\n  // Fields\n  \"public-field\", // = [\"public-static-field\", \"public-instance-field\"]\n  \"protected-field\", // = [\"protected-static-field\", \"protected-instance-field\"]\n  \"private-field\", // = [\"private-static-field\", \"private-instance-field\"]\n\n  // Static initialization\n  // No accessibility for static initialization.\n\n  // Constructors\n  // Only the accessibility of constructors is configurable. See below.\n\n  // Getters\n  \"public-get\", // = [\"public-static-get\", \"public-instance-get\"]\n  \"protected-get\", // = [\"protected-static-get\", \"protected-instance-get\"]\n  \"private-get\", // = [\"private-static-get\", \"private-instance-get\"]\n\n  // Setters\n  \"public-set\", // = [\"public-static-set\", \"public-instance-set\"]\n  \"protected-set\", // = [\"protected-static-set\", \"protected-instance-set\"]\n  \"private-set\", // = [\"private-static-set\", \"private-instance-set\"]\n\n  // Methods\n  \"public-method\", // = [\"public-static-method\", \"public-instance-method\"]\n  \"protected-method\", // = [\"protected-static-method\", \"protected-instance-method\"]\n  \"private-method\", // = [\"private-static-method\", \"private-instance-method\"]\n]\n```\n\n### Member Group Types (With Accessibility and a Decorator)\n\nIt is also possible to group methods or fields with a decorator separately, optionally specifying\ntheir accessibility.\n\n```jsonc\n[\n  // Index signature\n  // No decorators for index signature.\n\n  // Fields\n  \"public-decorated-field\",\n  \"protected-decorated-field\",\n  \"private-decorated-field\",\n\n  \"decorated-field\", // = [\"public-decorated-field\", \"protected-decorated-field\", \"private-decorated-field\"]\n\n  // Static initialization\n  // No decorators for static initialization.\n\n  // Constructors\n  // There are no decorators for constructors.\n\n  // Getters\n  \"public-decorated-get\",\n  \"protected-decorated-get\",\n  \"private-decorated-get\",\n\n  \"decorated-get\", // = [\"public-decorated-get\", \"protected-decorated-get\", \"private-decorated-get\"]\n\n  // Setters\n  \"public-decorated-set\",\n  \"protected-decorated-set\",\n  \"private-decorated-set\",\n\n  \"decorated-set\", // = [\"public-decorated-set\", \"protected-decorated-set\", \"private-decorated-set\"]\n\n  // Methods\n  \"public-decorated-method\",\n  \"protected-decorated-method\",\n  \"private-decorated-method\",\n\n  \"decorated-method\", // = [\"public-decorated-method\", \"protected-decorated-method\", \"private-decorated-method\"]\n]\n```\n\n### Member Group Types (With Scope, Ignoring Accessibility)\n\nAnother option is to group the member types by their scope (`public`, `protected`, `private`), ignoring their accessibility.\n\n```jsonc\n[\n  // Index signature\n  // No scope for index signature.\n\n  // Fields\n  \"static-field\", // = [\"public-static-field\", \"protected-static-field\", \"private-static-field\"]\n  \"instance-field\", // = [\"public-instance-field\", \"protected-instance-field\", \"private-instance-field\"]\n  \"abstract-field\", // = [\"public-abstract-field\", \"protected-abstract-field\"]\n\n  // Static initialization\n  // No scope for static initialization.\n\n  // Constructors\n  \"constructor\", // = [\"public-constructor\", \"protected-constructor\", \"private-constructor\"]\n\n  // Getters\n  \"static-get\", // = [\"public-static-get\", \"protected-static-get\", \"private-static-get\"]\n  \"instance-get\", // = [\"public-instance-get\", \"protected-instance-get\", \"private-instance-get\"]\n  \"abstract-get\", // = [\"public-abstract-get\", \"protected-abstract-get\"]\n\n  // Setters\n  \"static-set\", // = [\"public-static-set\", \"protected-static-set\", \"private-static-set\"]\n  \"instance-set\", // = [\"public-instance-set\", \"protected-instance-set\", \"private-instance-set\"]\n  \"abstract-set\", // = [\"public-abstract-set\", \"protected-abstract-set\"]\n\n  // Methods\n  \"static-method\", // = [\"public-static-method\", \"protected-static-method\", \"private-static-method\"]\n  \"instance-method\", // = [\"public-instance-method\", \"protected-instance-method\", \"private-instance-method\"]\n  \"abstract-method\", // = [\"public-abstract-method\", \"protected-abstract-method\"]\n]\n```\n\n### Member Group Types (With Scope and Accessibility)\n\nThe third grouping option is to ignore both scope and accessibility.\n\n```jsonc\n[\n  // Index signature\n  // No grouping for index signature.\n\n  // Fields\n  \"field\", // = [\"public-static-field\", \"protected-static-field\", \"private-static-field\", \"public-instance-field\", \"protected-instance-field\", \"private-instance-field\",\n  //              \"public-abstract-field\", \"protected-abstract-field\"]\n\n  // Static initialization\n  // No grouping for static initialization.\n\n  // Constructors\n  // Only the accessibility of constructors is configurable.\n\n  // Getters\n  \"get\", // = [\"public-static-get\", \"protected-static-get\", \"private-static-get\", \"public-instance-get\", \"protected-instance-get\", \"private-instance-get\",\n  //                \"public-abstract-get\", \"protected-abstract-get\"]\n\n  // Setters\n  \"set\", // = [\"public-static-set\", \"protected-static-set\", \"private-static-set\", \"public-instance-set\", \"protected-instance-set\", \"private-instance-set\",\n  //                \"public-abstract-set\", \"protected-abstract-set\"]\n\n  // Methods\n  \"method\", // = [\"public-static-method\", \"protected-static-method\", \"private-static-method\", \"public-instance-method\", \"protected-instance-method\", \"private-instance-method\",\n  //                \"public-abstract-method\", \"protected-abstract-method\"]\n]\n```\n\n### Member Group Types (Readonly Fields)\n\nIt is possible to group fields by their `readonly` modifiers.\n\n```jsonc\n[\n  // Index signature\n  \"readonly-signature\",\n  \"signature\",\n\n  // Fields\n  \"readonly-field\", // = [\"public-static-readonly-field\", \"protected-static-readonly-field\", \"private-static-readonly-field\", \"public-instance-readonly-field\", \"protected-instance-readonly-field\", \"private-instance-readonly-field\", \"public-abstract-readonly-field\", \"protected-abstract-readonly-field\"]\n  \"field\", // = [\"public-static-field\", \"protected-static-field\", \"private-static-field\", \"public-instance-field\", \"protected-instance-field\", \"private-instance-field\", \"public-abstract-field\", \"protected-abstract-field\"]\n]\n```\n\n### Grouping Different Member Types at the Same Rank\n\nIt is also possible to group different member types at the same rank.\n\n```jsonc\n[\n  // Index signature\n  \"signature\",\n\n  // Fields\n  \"field\",\n\n  // Static initialization\n  \"static-initialization\",\n\n  // Constructors\n  \"constructor\",\n\n  // Getters and Setters at the same rank\n  [\"get\", \"set\"],\n\n  // Methods\n  \"method\",\n]\n```\n\n## When Not To Use It\n\nIf you don't care about the general order of your members, then you will not need this rule.\n"
        }
    ]
}