{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unused-expressions.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow unused expressions.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unused-expressions** for documentation.\n\nIt supports TypeScript-specific expressions:\n\n- Marks directives in modules declarations (`\"use strict\"`, etc.) as not unused\n- Marks the following expressions as unused if their wrapped value expressions are unused:\n  - Assertion expressions: `x as number;`, `x!;`, `<number>x;`\n  - Instantiation expressions: `Set<number>;`\n\nAlthough the type expressions never have runtime side effects (that is, `x!;` is the same as `x;`), they can be used to assert types for testing purposes.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nSet<number>;\n1 as number;\nwindow!;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction getSet() {\n  return Set;\n}\n\n// Funtion calls are allowed, so type expressions that wrap function calls are allowed\ngetSet()<number>;\ngetSet() as Set<unknown>;\ngetSet()!;\n\n// Namespaces can have directives\nnamespace A {\n  'use strict';\n}\n```\n\n</TabItem>\n</Tabs>\n"
        }
    ]
}