{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-as-const.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce the use of `as const` over literal type.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-as-const** for documentation.\n\nThere are two common ways to tell TypeScript that a literal value should be interpreted as its literal type (e.g. `2`) rather than general primitive type (e.g. `number`);\n\n- `as const`: telling TypeScript to infer the literal type automatically\n- `as` with the literal type: explicitly telling the literal type to TypeScript\n\n`as const` is generally preferred, as it doesn't require re-typing the literal value.\nThis rule reports when an `as` with an explicit literal type can be replaced with an `as const`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nlet bar: 2 = 2;\nlet foo = <'bar'>'bar';\nlet foo = { bar: 'baz' as 'baz' };\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nlet foo = 'bar';\nlet foo = 'bar' as const;\nlet foo: 'bar' = 'bar' as const;\nlet bar = 'bar' as string;\nlet foo = <string>'bar';\nlet foo = { bar: 'baz' };\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't care about which style of literals assertions is used in your code, then you will not need this rule.\n\nHowever, keep in mind that inconsistent style can harm readability in a project.\nWe recommend picking a single option for this rule that works best for your project.\n"
        }
    ]
}