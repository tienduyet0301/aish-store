{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-mixed-enums.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow enums from having both number and string members.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-mixed-enums** for documentation.\n\nTypeScript enums are allowed to assign numeric or string values to their members.\nMost enums contain either all numbers or all strings, but in theory you can mix-and-match within the same enum.\nMixing enum member types is generally considered confusing and a bad practice.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nenum Status {\n  Unknown,\n  Closed = 1,\n  Open = 'open',\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct (Explicit Numbers)\">\n\n```ts\nenum Status {\n  Unknown = 0,\n  Closed = 1,\n  Open = 2,\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct (Implicit Numbers)\">\n\n```ts\nenum Status {\n  Unknown,\n  Closed,\n  Open,\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct (Strings)\">\n\n```ts\nenum Status {\n  Unknown = 'unknown',\n  Closed = 'closed',\n  Open = 'open',\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Iteration Pitfalls of Mixed Enum Member Values\n\nEnum values may be iterated over using `Object.entries`/`Object.keys`/`Object.values`.\n\nIf all enum members are strings, the number of items will match the number of enum members:\n\n```ts\nenum Status {\n  Closed = 'closed',\n  Open = 'open',\n}\n\n// ['closed', 'open']\nObject.values(Status);\n```\n\nBut if the enum contains members that are initialized with numbers -including implicitly initialized numbers— then iteration over that enum will include those numbers as well:\n\n```ts\nenum Status {\n  Unknown,\n  Closed = 1,\n  Open = 'open',\n}\n\n// [\"Unknown\", \"Closed\", 0, 1, \"open\"]\nObject.values(Status);\n```\n\n## When Not To Use It\n\nIf you don't mind the confusion of mixed enum member values and don't iterate over enums, you can safely disable this rule.\n"
        }
    ]
}