{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-for-of.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce the use of `for-of` loop over the standard `for` loop where possible.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-for-of** for documentation.\n\nMany developers default to writing `for (let i = 0; i < ...` loops to iterate over arrays.\nHowever, in many of those arrays, the loop iterator variable (e.g. `i`) is only used to access the respective element of the array.\nIn those cases, a `for-of` loop is easier to read and write.\n\nThis rule recommends a for-of loop when the loop index is only used to read from an array that is being iterated.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const array: string[];\n\nfor (let i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const array: string[];\n\nfor (const x of array) {\n  console.log(x);\n}\n\nfor (let i = 0; i < array.length; i++) {\n  // i is used, so for-of could not be used.\n  console.log(i, array[i]);\n}\n```\n\n</TabItem>\n</Tabs>\n\n{/* Intentionally Omitted: When Not To Use It */}\n"
        }
    ]
}