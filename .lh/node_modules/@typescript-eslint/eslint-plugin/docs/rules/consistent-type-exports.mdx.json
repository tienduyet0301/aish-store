{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/consistent-type-exports.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce consistent usage of type exports.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/consistent-type-exports** for documentation.\n\nTypeScript allows specifying a `type` keyword on exports to indicate that the export exists only in the type system, not at runtime.\nThis allows transpilers to drop exports without knowing the types of the dependencies.\n\n> See [Blog > Consistent Type Exports and Imports: Why and How](/blog/consistent-type-imports-and-exports-why-and-how) for more details.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ninterface ButtonProps {\n  onClick: () => void;\n}\n\nclass Button implements ButtonProps {\n  onClick = () => console.log('button!');\n}\n\nexport { Button, ButtonProps };\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ninterface ButtonProps {\n  onClick: () => void;\n}\n\nclass Button implements ButtonProps {\n  onClick = () => console.log('button!');\n}\n\nexport { Button };\nexport type { ButtonProps };\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `fixMixedExportsWithInlineTypeSpecifier`\n\n{/* insert option description */}\n\nIf you are using a TypeScript version less than 4.5, then you will not be able to use this option.\n\nFor example the following code:\n\n```ts\nconst x = 1;\ntype T = number;\n\nexport { x, T };\n```\n\nWith `{fixMixedExportsWithInlineTypeSpecifier: true}` will be fixed to:\n\n```ts\nconst x = 1;\ntype T = number;\n\nexport { x, type T };\n```\n\nWith `{fixMixedExportsWithInlineTypeSpecifier: false}` will be fixed to:\n\n```ts\nconst x = 1;\ntype T = number;\n\nexport type { T };\nexport { x };\n```\n\n## When Not To Use It\n\nIf you use `--isolatedModules` the compiler would error if a type is not re-exported using `export type`.\nThis rule may be less useful in those cases.\n\nIf you specifically want to use both export kinds for stylistic reasons, or don't wish to enforce one style over the other, you can avoid this rule.\n\nHowever, keep in mind that inconsistent style can harm readability in a project.\nWe recommend picking a single option for this rule that works best for your project.\n"
        }
    ]
}