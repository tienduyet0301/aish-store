{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/consistent-generic-constructors.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce specifying generic type arguments on type annotation or constructor name of a constructor call.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/consistent-generic-constructors** for documentation.\n\nWhen constructing a generic class, you can specify the type arguments on either the left-hand side (as a type annotation) or the right-hand side (as part of the constructor call):\n\n```ts\n// Left-hand side\nconst map: Map<string, number> = new Map();\n\n// Right-hand side\nconst map = new Map<string, number>();\n```\n\nThis rule ensures that type arguments appear consistently on one side of the declaration.\nKeeping to one side consistently improve code readability.\n\n> The rule never reports when there are type parameters on both sides, or neither sides of the declaration.\n> It also doesn't report if the names of the type annotation and the constructor don't match.\n\n## Options\n\n- `'constructor'` _(default)_: type arguments that **only** appear on the type annotation are disallowed.\n- `'type-annotation'`: type arguments that **only** appear on the constructor are disallowed.\n\n### `'constructor'`\n\n{/* insert option description */}\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='\"constructor\"'\nconst map: Map<string, number> = new Map();\nconst set: Set<string> = new Set();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='\"constructor\"'\nconst map = new Map<string, number>();\nconst map: Map<string, number> = new MyMap();\nconst set = new Set<string>();\nconst set = new Set();\nconst set: Set<string> = new Set<string>();\n```\n\n</TabItem>\n</Tabs>\n\n### `'type-annotation'`\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='\"type-annotation\"'\nconst map = new Map<string, number>();\nconst set = new Set<string>();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='\"type-annotation\"'\nconst map: Map<string, number> = new Map();\nconst set: Set<string> = new Set();\nconst set = new Set();\nconst set: Set<string> = new Set<string>();\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nYou can turn this rule off if you don't want to enforce one kind of generic constructor style over the other.\n\nHowever, keep in mind that inconsistent style can harm readability in a project.\nWe recommend picking a single option for this rule that works best for your project.\n"
        }
    ]
}