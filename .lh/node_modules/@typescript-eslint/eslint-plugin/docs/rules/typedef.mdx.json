{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/typedef.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require type annotations in certain places.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/typedef** for documentation.\n\nTypeScript cannot always infer types for all places in code.\nSome locations require type annotations for their types to be inferred.\n\nThis rule can enforce type annotations in locations regardless of whether they're required.\nThis is typically used to maintain consistency for element types that sometimes require them.\n\n```ts\nclass ContainsText {\n  // There must be a type annotation here to infer the type\n  delayedText: string;\n\n  // `typedef` requires a type annotation here to maintain consistency\n  immediateTextExplicit: string = 'text';\n\n  // This is still a string type because of its initial value\n  immediateTextImplicit = 'text';\n}\n```\n\n> To enforce type definitions existing on call signatures, use [`explicit-function-return-type`](./explicit-function-return-type.mdx), or [`explicit-module-boundary-types`](./explicit-module-boundary-types.mdx).\n\n:::caution\n\nRequiring type annotations unnecessarily can be cumbersome to maintain and generally reduces code readability.\nTypeScript is often better at inferring types than easily written type annotations would allow.\n\n**Instead of enabling `typedef`, it is generally recommended to use the `--noImplicitAny` and `--strictPropertyInitialization` compiler options to enforce type annotations only when useful.**\n\n:::\n\n## Options\n\nFor example, with the following configuration:\n\n```json\n{\n  \"rules\": {\n    \"@typescript-eslint/typedef\": [\n      \"error\",\n      {\n        \"arrowParameter\": true,\n        \"variableDeclaration\": true\n      }\n    ]\n  }\n}\n```\n\n- Type annotations on arrow function parameters are required\n- Type annotations on variables are required\n\n### `arrayDestructuring`\n\n{/* insert option description */}\n\nExamples of code with `{ \"arrayDestructuring\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"arrayDestructuring\": true }'\nconst [a] = [1];\nconst [b, c] = [1, 2];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"arrayDestructuring\": true }'\nconst [a]: number[] = [1];\nconst [b]: [number] = [2];\nconst [c, d]: [boolean, string] = [true, 'text'];\n\nfor (const [key, val] of new Map([['key', 1]])) {\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `arrowParameter`\n\n{/* insert option description */}\n\nExamples of code with `{ \"arrowParameter\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"arrowParameter\": true }'\nconst logsSize = size => console.log(size);\n\n['hello', 'world'].map(text => text.length);\n\nconst mapper = {\n  map: text => text + '...',\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"arrowParameter\": true }'\nconst logsSize = (size: number) => console.log(size);\n\n['hello', 'world'].map((text: string) => text.length);\n\nconst mapper = {\n  map: (text: string) => text + '...',\n};\n```\n\n</TabItem>\n</Tabs>\n\n### `memberVariableDeclaration`\n\n{/* insert option description */}\n\nExamples of code with `{ \"memberVariableDeclaration\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"memberVariableDeclaration\": true }'\nclass ContainsText {\n  delayedText;\n  immediateTextImplicit = 'text';\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"memberVariableDeclaration\": true }'\nclass ContainsText {\n  delayedText: string;\n  immediateTextImplicit: string = 'text';\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `objectDestructuring`\n\n{/* insert option description */}\n\nExamples of code with `{ \"objectDestructuring\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"objectDestructuring\": true }'\nconst { length } = 'text';\nconst [b, c] = Math.random() ? [1, 2] : [3, 4];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"objectDestructuring\": true }'\nconst { length }: { length: number } = 'text';\nconst [b, c]: [number, number] = Math.random() ? [1, 2] : [3, 4];\n\nfor (const { key, val } of [{ key: 'key', val: 1 }]) {\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `parameter`\n\n{/* insert option description */}\n\nExamples of code with `{ \"parameter\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"parameter\": true }'\nfunction logsSize(size): void {\n  console.log(size);\n}\n\nconst doublesSize = function (size): number {\n  return size * 2;\n};\n\nconst divider = {\n  curriesSize(size): number {\n    return size;\n  },\n  dividesSize: function (size): number {\n    return size / 2;\n  },\n};\n\nclass Logger {\n  log(text): boolean {\n    console.log('>', text);\n    return true;\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"parameter\": true }'\nfunction logsSize(size: number): void {\n  console.log(size);\n}\n\nconst doublesSize = function (size: number): number {\n  return size * 2;\n};\n\nconst divider = {\n  curriesSize(size: number): number {\n    return size;\n  },\n  dividesSize: function (size: number): number {\n    return size / 2;\n  },\n};\n\nclass Logger {\n  log(text: boolean): boolean {\n    console.log('>', text);\n    return true;\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `propertyDeclaration`\n\n{/* insert option description */}\n\nExamples of code with `{ \"propertyDeclaration\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"propertyDeclaration\": true }'\ntype Members = {\n  member;\n  otherMember;\n};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"propertyDeclaration\": true }'\ntype Members = {\n  member: boolean;\n  otherMember: string;\n};\n```\n\n</TabItem>\n</Tabs>\n\n### `variableDeclaration`\n\n{/* insert option description */}\n\nExamples of code with `{ \"variableDeclaration\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"variableDeclaration\": true }'\nconst text = 'text';\nlet initialText = 'text';\nlet delayedText;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"variableDeclaration\": true }'\nconst text: string = 'text';\nlet initialText: string = 'text';\nlet delayedText: string;\n```\n\n</TabItem>\n</Tabs>\n\n### `variableDeclarationIgnoreFunction`\n\n{/* insert option description */}\n\nExamples of code with `{ \"variableDeclaration\": true, \"variableDeclarationIgnoreFunction\": true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"variableDeclaration\": true, \"variableDeclarationIgnoreFunction\": true }'\nconst text = 'text';\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"variableDeclaration\": true, \"variableDeclarationIgnoreFunction\": true }'\nconst a = (): void => {};\nconst b = function (): void {};\nconst c: () => void = (): void => {};\n\nclass Foo {\n  a = (): void => {};\n  b = function (): void {};\n  c: () => void = (): void => {};\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you are using stricter TypeScript compiler options, particularly `--noImplicitAny` and/or `--strictPropertyInitialization`, you likely don't need this rule.\n\nIn general, if you do not consider the cost of writing unnecessary type annotations reasonable, then do not use this rule.\n\n## Further Reading\n\n- [TypeScript Type System](https://basarat.gitbooks.io/typescript/docs/types/type-system.html)\n- [Type Inference](https://www.typescriptlang.org/docs/handbook/type-inference.html)\n"
        }
    ]
}