{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-deprecated.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow using code marked as `@deprecated`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-deprecated** for documentation.\n\nThe [JSDoc `@deprecated` tag](https://jsdoc.app/tags-deprecated) can be used to document some piece of code being deprecated.\nIt's best to avoid using code marked as deprecated.\nThis rule reports on any references to code marked as `@deprecated`.\n\n:::note\n[TypeScript recognizes the `@deprecated` tag](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#deprecated), allowing editors to visually indicate deprecated code — usually with a ~strikethrough~.\nHowever, TypeScript doesn't report type errors for deprecated code on its own.\n:::\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\n/** @deprecated Use apiV2 instead. */\ndeclare function apiV1(): Promise<string>;\n\ndeclare function apiV2(): Promise<string>;\n\nawait apiV1();\n```\n\n```ts\nimport { parse } from 'node:url';\n\n// 'parse' is deprecated. Use the WHATWG URL API instead.\nconst url = parse('/foo');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n/** @deprecated Use apiV2 instead. */\ndeclare function apiV1(): Promise<string>;\n\ndeclare function apiV2(): Promise<string>;\n\nawait apiV2();\n```\n\n```ts\n// Modern Node.js API, uses `new URL()`\nconst url2 = new URL('/foo', 'http://www.example.com');\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allow`\n\n{/* insert option description */}\n\nThis option takes the shared [`TypeOrValueSpecifier` format](/packages/type-utils/type-or-value-specifier).\n\nExamples of code for this rule with:\n\n```json\n{\n  \"allow\": [\n    { \"from\": \"file\", \"name\": \"apiV1\" },\n    { \"from\": \"lib\", \"name\": \"escape\" }\n  ]\n}\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{\"allow\":[{\"from\":\"file\",\"name\":\"apiV1\"},{\"from\":\"lib\",\"name\":\"escape\"}]}'\n/** @deprecated */\ndeclare function apiV2(): Promise<string>;\n\nawait apiV2();\n\n// `unescape` has been deprecated since ES5.\nunescape('...');\n```\n\n</TabItem>\n\n<TabItem value=\"✅ Correct\">\n\n```ts option='{\"allow\":[{\"from\":\"file\",\"name\":\"apiV1\"},{\"from\":\"lib\",\"name\":\"escape\"}]}'\nimport { Bar } from 'bar-lib';\n/** @deprecated */\ndeclare function apiV1(): Promise<string>;\n\nawait apiV1();\n\n// `escape` has been deprecated since ES5.\nescape('...');\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf portions of your project heavily use deprecated APIs and have no plan for moving to non-deprecated ones, you might want to disable this rule in those portions.\n\n## Related To\n\n- [`import/no-deprecated`](https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-deprecated.md) and [`import-x/no-deprecated`](https://github.com/un-ts/eslint-plugin-import-x/blob/master/docs/rules/no-deprecated.md): Does not use type information, but does also support [TomDoc](http://tomdoc.org)\n- [`eslint-plugin-deprecation`](https://github.com/gund/eslint-plugin-deprecation) ([`deprecation/deprecation`](https://github.com/gund/eslint-plugin-deprecation?tab=readme-ov-file#rules)): Predecessor to this rule in a separate plugin\n"
        }
    ]
}