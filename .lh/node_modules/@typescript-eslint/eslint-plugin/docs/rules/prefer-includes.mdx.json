{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-includes.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce `includes` method over `indexOf` method.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-includes** for documentation.\n\nPrior to ES2015, `Array#indexOf` and `String#indexOf` comparisons against `-1` were the standard ways to check whether a value exists in an array or string, respectively.\nAlternatives that are easier to read and write now exist: ES2015 added `String#includes` and ES2016 added `Array#includes`.\n\nThis rule reports when an `.indexOf` call can be replaced with an `.includes`.\nAdditionally, this rule reports the tests of simple regular expressions in favor of `String#includes`.\n\n> This rule will report on any receiver object of an `indexOf` method call that has an `includes` method where the two methods have the same parameters.\n> Matching types include: `String`, `Array`, `ReadonlyArray`, and typed arrays.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst str: string;\nconst array: any[];\nconst readonlyArray: ReadonlyArray<any>;\nconst typedArray: UInt8Array;\nconst maybe: string;\nconst userDefined: {\n  indexOf(x: any): number;\n  includes(x: any): boolean;\n};\n\nstr.indexOf(value) !== -1;\narray.indexOf(value) !== -1;\nreadonlyArray.indexOf(value) === -1;\ntypedArray.indexOf(value) > -1;\nmaybe?.indexOf('') !== -1;\nuserDefined.indexOf(value) >= 0;\n\n/example/.test(str);\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst str: string;\nconst array: any[];\nconst readonlyArray: ReadonlyArray<any>;\nconst typedArray: UInt8Array;\nconst maybe: string;\nconst userDefined: {\n  indexOf(x: any): number;\n  includes(x: any): boolean;\n};\n\nstr.includes(value);\narray.includes(value);\n!readonlyArray.includes(value);\ntypedArray.includes(value);\nmaybe?.includes('');\nuserDefined.includes(value);\n\nstr.includes('example');\n\n// The two methods have different parameters.\ndeclare const mismatchExample: {\n  indexOf(x: unknown, fromIndex?: number): number;\n  includes(x: unknown): boolean;\n};\nmismatchExample.indexOf(value) >= 0;\n```\n\n</TabItem>\n</Tabs>\n\n{/* Intentionally Omitted: When Not To Use It */}\n"
        }
    ]
}