{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-empty-function.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow empty functions.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> ðŸ›‘ This file is source code, not the primary documentation location! ðŸ›‘\n>\n> See **https://typescript-eslint.io/rules/no-empty-function** for documentation.\n\nIt adds support for handling TypeScript specific code that would otherwise trigger the rule.\n\nOne example of valid TypeScript specific code that would otherwise trigger the `no-empty-function` rule is the use of [parameter properties](https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties) in constructor functions.\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ntype AdditionalAllowOptionEntries =\n  | 'private-constructors'\n  | 'protected-constructors'\n  | 'decoratedFunctions'\n  | 'overrideMethods';\n\ntype AllowOptionEntries =\n  | BaseNoEmptyFunctionAllowOptionEntries\n  | AdditionalAllowOptionEntries;\n\ninterface Options extends BaseNoEmptyFunctionOptions {\n  allow?: Array<AllowOptionEntries>;\n}\nconst defaultOptions: Options = {\n  ...baseNoEmptyFunctionDefaultOptions,\n  allow: [],\n};\n```\n\n### allow: `private-constructors`\n\nExamples of correct code for the `{ \"allow\": [\"private-constructors\"] }` option:\n\n```ts option='{ \"allow\": [\"private-constructors\"] }' showPlaygroundButton\nclass Foo {\n  private constructor() {}\n}\n```\n\n### allow: `protected-constructors`\n\nExamples of correct code for the `{ \"allow\": [\"protected-constructors\"] }` option:\n\n```ts option='{ \"allow\": [\"protected-constructors\"] }' showPlaygroundButton\nclass Foo {\n  protected constructor() {}\n}\n```\n\n### allow: `decoratedFunctions`\n\nExamples of correct code for the `{ \"allow\": [\"decoratedFunctions\"] }` option:\n\n```ts option='{ \"allow\": [\"decoratedFunctions\"] }' showPlaygroundButton\nclass Foo {\n  @decorator()\n  foo() {}\n}\n```\n\n### allow: `overrideMethods`\n\nExamples of correct code for the `{ \"allow\": [\"overrideMethods\"] }` option:\n\n```ts option='{ \"allow\": [\"overrideMethods\"] }' showPlaygroundButton\nabstract class Base {\n  protected greet(): void {\n    console.log('Hello!');\n  }\n}\n\nclass Foo extends Base {\n  protected override greet(): void {}\n}\n```\n\n## When Not To Use It\n\nIf you are working with external APIs that require functions even if they do nothing, then you may want to avoid this rule.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\nTest code often violates this rule as well.\nIf your testing setup doesn't support \"mock\" or \"spy\" functions such as [`jest.fn()`](https://jestjs.io/docs/mock-functions), [`sinon.spy()`](https://sinonjs.org/releases/latest/spies), or [`vi.fn()`](https://vitest.dev/guide/mocking.html), you may wish to disable this rule in test files.\nAgain, if those cases aren't extremely common, you might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule in test files.\n"
        }
    ]
}