{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/dot-notation.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce dot notation whenever possible.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> ðŸ›‘ This file is source code, not the primary documentation location! ðŸ›‘\n>\n> See **https://typescript-eslint.io/rules/dot-notation** for documentation.\n\nIt adds:\n\n- Support for optionally ignoring computed `private` and/or `protected` member access.\n- Compatibility with TypeScript's `noPropertyAccessFromIndexSignature` option.\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseDotNotationOptions {\n  allowPrivateClassPropertyAccess?: boolean;\n  allowProtectedClassPropertyAccess?: boolean;\n  allowIndexSignaturePropertyAccess?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseDotNotationDefaultOptions,\n  allowPrivateClassPropertyAccess: false,\n  allowProtectedClassPropertyAccess: false,\n  allowIndexSignaturePropertyAccess: false,\n};\n```\n\nIf the TypeScript compiler option `noPropertyAccessFromIndexSignature` is set to `true`, then this rule always allows the use of square bracket notation to access properties of types that have a `string` index signature, even if `allowIndexSignaturePropertyAccess` is `false`.\n\n### `allowPrivateClassPropertyAccess`\n\n{/* insert option description */}\n\nThis can be useful because TypeScript will report a type error on dot notation but not array notation.\n\nExample of a correct code when `allowPrivateClassPropertyAccess` is set to `true`:\n\n```ts option='{ \"allowPrivateClassPropertyAccess\": true }' showPlaygroundButton\nclass X {\n  private priv_prop = 123;\n}\n\nconst x = new X();\nx['priv_prop'] = 123;\n```\n\n### `allowProtectedClassPropertyAccess`\n\n{/* insert option description */}\n\nThis can be useful because TypeScript will report a type error on dot notation but not array notation.\n\nExample of a correct code when `allowProtectedClassPropertyAccess` is set to `true`:\n\n```ts option='{ \"allowProtectedClassPropertyAccess\": true }' showPlaygroundButton\nclass X {\n  protected protected_prop = 123;\n}\n\nconst x = new X();\nx['protected_prop'] = 123;\n```\n\n### `allowIndexSignaturePropertyAccess`\n\n{/* insert option description */}\n\nExample of correct code when `allowIndexSignaturePropertyAccess` is set to `true`:\n\n```ts option='{ \"allowIndexSignaturePropertyAccess\": true }' showPlaygroundButton\nclass X {\n  [key: string]: number;\n}\n\nconst x = new X();\nx['hello'] = 123;\n```\n\nIf the TypeScript compiler option `noPropertyAccessFromIndexSignature` is set to `true`, then the above code is always allowed, even if `allowIndexSignaturePropertyAccess` is `false`.\n\n## When Not To Use It\n\nIf you specifically want to use both member access kinds for stylistic reasons, or don't wish to enforce one style over the other, you can avoid this rule.\n\nHowever, keep in mind that inconsistent style can harm readability in a project.\nWe recommend picking a single option for this rule that works best for your project.\n"
        }
    ]
}