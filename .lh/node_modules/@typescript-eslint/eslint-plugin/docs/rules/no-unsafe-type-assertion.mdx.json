{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-type-assertion.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow type assertions that narrow a type.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-type-assertion** for documentation.\n\nType assertions are a way to tell TypeScript what the type of a value is. This can be useful but also unsafe if you use type assertions to narrow down a type.\n\nThis rule forbids using type assertions to narrow a type, as this bypasses TypeScript's type-checking. Type assertions that broaden a type are safe because TypeScript essentially knows _less_ about a type.\n\nInstead of using type assertions to narrow a type, it's better to rely on type guards, which help avoid potential runtime errors caused by unsafe type assertions.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfunction f() {\n  return Math.random() < 0.5 ? 42 : 'oops';\n}\n\nconst z = f() as number;\n\nconst items = [1, '2', 3, '4'];\n\nconst number = items[0] as number;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction f() {\n  return Math.random() < 0.5 ? 42 : 'oops';\n}\n\nconst z = f() as number | string | boolean;\n\nconst items = [1, '2', 3, '4'];\n\nconst number = items[0] as number | string | undefined;\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your codebase has many unsafe type assertions, then it may be difficult to enable this rule.\nIt may be easier to skip the `no-unsafe-*` rules pending increasing type safety in unsafe areas of your project.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\nIf your project frequently stubs objects in test files, the rule may trigger a lot of reports. Consider disabling the rule for such files to reduce frequent warnings.\n\n## Further Reading\n\n- More on TypeScript's [type assertions](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions)\n"
        }
    ]
}