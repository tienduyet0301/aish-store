{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unnecessary-type-arguments.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow type arguments that are equal to the default.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unnecessary-type-arguments** for documentation.\n\nType parameters in TypeScript may specify a default value.\nFor example:\n\n```ts\nfunction f<T = number>(/* ... */) {\n  // ...\n}\n```\n\nIt is redundant to provide an explicit type parameter equal to that default: e.g. calling `f<number>(...)`.\nThis rule reports when an explicitly specified type argument is the default for that type parameter.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfunction f<T = number>() {}\nf<number>();\n```\n\n```ts\nfunction g<T = number, U = string>() {}\ng<string, string>();\n```\n\n```ts\nclass C<T = number> {}\nnew C<number>();\n\nclass D extends C<number> {}\n```\n\n```ts\ninterface I<T = number> {}\nclass Impl implements I<number> {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction f<T = number>() {}\nf();\nf<string>();\n```\n\n```ts\nfunction g<T = number, U = string>() {}\ng<string>();\ng<number, number>();\n```\n\n```ts\nclass C<T = number> {}\nnew C();\nnew C<string>();\n\nclass D extends C {}\nclass D extends C<string> {}\n```\n\n```ts\ninterface I<T = number> {}\nclass Impl implements I<string> {}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you prefer explicitly specifying type parameters even when they are equal to the default, you can skip this rule.\n"
        }
    ]
}