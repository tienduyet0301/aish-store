{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unnecessary-template-expression.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow unnecessary template expressions.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unnecessary-template-expression** for documentation.\n\nThis rule reports template literals that contain substitution expressions (also variously referred to as embedded expressions or string interpolations) that are unnecessary and can be simplified.\n\n:::info[Migration from `no-useless-template-literals`]\n\nThis rule was formerly known as [`no-useless-template-literals`](./no-useless-template-literals.mdx).\nThe new name is a drop-in replacement with identical functionality.\n\n:::\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\n// Static values can be incorporated into the surrounding template.\n\nconst ab1 = `${'a'}${'b'}`;\nconst ab2 = `a${'b'}`;\ntype AB1 = `${'A'}${'B'}`;\ntype AB2 = `A${'B'}`;\n\nconst stringWithNumber = `${'1 + 1 = '}${2}`;\n\nconst stringWithBoolean = `${'true is '}${true}`;\n\n// Some simple expressions that are already strings\n// can be rewritten without a template at all.\n\nconst text = 'a';\nconst wrappedText = `${text}`;\ntype Text = 'A';\ntype WrappedText = `${Text}`;\n\ndeclare const intersectionWithString: string & { _brand: 'test-brand' };\nconst wrappedIntersection = `${intersectionWithString}`;\ntype IntersectionWithString = string & { _brand: 'test-brand' };\ntype WrappedIntersection = `${IntersectionWithString}`;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n// Static values can be incorporated into the surrounding template.\n\nconst ab1 = `ab`;\nconst ab2 = `ab`;\ntype AB = `AB`;\n\n// Transforming enum members into string unions using template literals is allowed.\nenum ABC {\n  A = 'A',\n  B = 'B',\n  C = 'C',\n}\ntype ABCUnion = `${ABC}`;\ntype A = `${ABC.A}`;\n\n// Interpolating type parameters is allowed.\ntype TextUtil<T extends string> = `${T}`;\n\nconst stringWithNumber = `1 + 1 = 2`;\n\nconst stringWithBoolean = `true is true`;\n\n// Some simple expressions that are already strings\n// can be rewritten without a template at all.\n\nconst text = 'a';\nconst wrappedText = text;\ntype Text = 'A';\ntype WrappedText = Text;\n\ndeclare const intersectionWithString: string & { _brand: 'test-brand' };\nconst wrappedIntersection = intersectionWithString;\ntype IntersectionWithString = string & { _brand: 'test-brand' };\ntype WrappedIntersection = IntersectionWithString;\n```\n\n</TabItem>\n</Tabs>\n\n:::info\nThis rule does not aim to flag template literals without substitution expressions that could have been written as an ordinary string.\nThat is to say, this rule will not help you turn `` `this` `` into `\"this\"`.\nIf you are looking for such a rule, you can configure the [`@stylistic/ts/quotes`](https://eslint.style/rules/ts/quotes) rule to do this.\n:::\n\n## When Not To Use It\n\nWhen you want to allow string expressions inside template literals.\n\n## Related To\n\n- [`restrict-template-expressions`](./restrict-template-expressions.mdx)\n- [`@stylistic/ts/quotes`](https://eslint.style/rules/ts/quotes)\n"
        }
    ]
}