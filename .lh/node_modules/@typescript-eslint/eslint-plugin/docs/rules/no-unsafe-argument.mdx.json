{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-argument.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow calling a function with a value with type `any`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-argument** for documentation.\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\nUsing `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nCalling a function with an `any` typed argument creates a potential safety hole and source of bugs.\n\nThis rule disallows calling a function with `any` in its arguments.\nThat includes spreading arrays or tuples with `any` typed elements as function arguments.\n\nThis rule also compares generic type argument types to ensure you don't pass an unsafe `any` in a generic position to a receiver that's expecting a specific type.\nFor example, it will error if you pass `Set<any>` as an argument to a parameter declared as `Set<string>`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare function foo(arg1: string, arg2: number, arg3: string): void;\n\nconst anyTyped = 1 as any;\n\nfoo(...anyTyped);\nfoo(anyTyped, 1, 'a');\n\nconst anyArray: any[] = [];\nfoo(...anyArray);\n\nconst tuple1 = ['a', anyTyped, 'b'] as const;\nfoo(...tuple1);\n\nconst tuple2 = [1] as const;\nfoo('a', ...tuple2, anyTyped);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst x = [1, 2] as [number, ...number[]];\nfoo('a', ...x, anyTyped);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nfoo(new Set<any>(), new Map<any, string>());\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare function foo(arg1: string, arg2: number, arg3: string): void;\n\nfoo('a', 1, 'b');\n\nconst tuple1 = ['a', 1, 'b'] as const;\nfoo(...tuple1);\n\ndeclare function bar(arg1: string, arg2: number, ...rest: string[]): void;\nconst array: string[] = ['a'];\nbar('a', 1, ...array);\n\ndeclare function baz(arg1: Set<string>, arg2: Map<string, string>): void;\nfoo(new Set<string>(), new Map<string, string>());\n```\n\n</TabItem>\n</Tabs>\n\nThere are cases where the rule allows passing an argument of `any` to `unknown`.\n\nExample of `any` to `unknown` assignment that are allowed:\n\n```ts showPlaygroundButton\ndeclare function foo(arg1: unknown, arg2: Set<unknown>, arg3: unknown[]): void;\nfoo(1 as any, new Set<any>(), [] as any[]);\n```\n\n## When Not To Use It\n\nIf your codebase has many existing `any`s or areas of unsafe code, it may be difficult to enable this rule.\nIt may be easier to skip the `no-unsafe-*` rules pending increasing type safety in unsafe areas of your project.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-explicit-any`](./no-explicit-any.mdx)\n- [`no-unsafe-assignment`](./no-unsafe-assignment.mdx)\n- [`no-unsafe-call`](./no-unsafe-call.mdx)\n- [`no-unsafe-member-access`](./no-unsafe-member-access.mdx)\n- [`no-unsafe-return`](./no-unsafe-return.mdx)\n"
        }
    ]
}