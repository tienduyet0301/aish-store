{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-redeclare.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow variable redeclaration.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> ðŸ›‘ This file is source code, not the primary documentation location! ðŸ›‘\n>\n> See **https://typescript-eslint.io/rules/no-redeclare** for documentation.\n\nimport TypeScriptOverlap from '@site/src/components/TypeScriptOverlap';\n\n<TypeScriptOverlap />\n\nIt adds support for TypeScript function overloads, and declaration merging.\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseNoRedeclareOptions {\n  ignoreDeclarationMerge?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoRedeclareDefaultOptions,\n  ignoreDeclarationMerge: true,\n};\n```\n\n### `ignoreDeclarationMerge`\n\n{/* insert option description */}\n\nThe following sets will be ignored when this option is enabled:\n\n- interface + interface\n- namespace + namespace\n- class + interface\n- class + namespace\n- class + interface + namespace\n- function + namespace\n- enum + namespace\n\nExamples of **correct** code with `{ ignoreDeclarationMerge: true }`:\n\n```ts option='{ \"ignoreDeclarationMerge\": true }' showPlaygroundButton\ninterface A {\n  prop1: 1;\n}\ninterface A {\n  prop2: 2;\n}\n\nnamespace Foo {\n  export const a = 1;\n}\nnamespace Foo {\n  export const b = 2;\n}\n\nclass Bar {}\nnamespace Bar {}\n\nfunction Baz() {}\nnamespace Baz {}\n```\n\n**Note:** Even with this option set to true, this rule will report if you name a type and a variable the same name. **_This is intentional_**.\nDeclaring a variable and a type the same is usually an accident, and it can lead to hard-to-understand code.\nIf you have a rare case where you're intentionally naming a type the same name as a variable, use a disable comment. For example:\n\n```ts option='{ \"ignoreDeclarationMerge\": true }' showPlaygroundButton\ntype something = string;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- intentionally naming the variable the same as the type\nconst something = 2;\n```\n"
        }
    ]
}