{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-restricted-types.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow certain types.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> ðŸ›‘ This file is source code, not the primary documentation location! ðŸ›‘\n>\n> See **https://typescript-eslint.io/rules/no-restricted-types** for documentation.\n\nIt can sometimes be useful to ban specific types from being used in type annotations.\nFor example, a project might be migrating from using one type to another, and want to ban references to the old type.\n\nThis rule can be configured to ban a list of specific types and can suggest alternatives.\nNote that it does not ban the corresponding runtime objects from being used.\n\n## Options\n\n### `types`\n\n{/* insert option description */}\n\nThe type can either be a type name literal (`OldType`) or a a type name with generic parameter instantiation(s) (`OldType<MyArgument>`).\n\nThe values can be:\n\n- A string, which is the error message to be reported; or\n- An object with the following properties:\n  - `message: string`: the message to display when the type is matched.\n  - `fixWith?: string`: a string to replace the banned type with when the fixer is run. If this is omitted, no fix will be done.\n  - `suggest?: string[]`: a list of suggested replacements for the banned type.\n\nExample configuration:\n\n```jsonc\n{\n  \"@typescript-eslint/no-restricted-types\": [\n    \"error\",\n    {\n      \"types\": {\n        // add a custom message to help explain why not to use it\n        \"OldType\": \"Don't use OldType because it is unsafe\",\n\n        // add a custom message, and tell the plugin how to fix it\n        \"OldAPI\": {\n          \"message\": \"Use NewAPI instead\",\n          \"fixWith\": \"NewAPI\",\n        },\n\n        // add a custom message, and tell the plugin how to suggest a fix\n        \"SoonToBeOldAPI\": {\n          \"message\": \"Use NewAPI instead\",\n          \"suggest\": [\"NewAPIOne\", \"NewAPITwo\"],\n        },\n      },\n    },\n  ],\n}\n```\n\n## When Not To Use It\n\nIf you have no need to ban specific types from being used in type annotations, you don't need this rule.\n\n## Related To\n\n- [`no-empty-object-type`](./no-empty-object-type.mdx)\n- [`no-unsafe-function-type`](./no-unsafe-function-type.mdx)\n- [`no-wrapper-object-types`](./no-wrapper-object-types.mdx)\n"
        }
    ]
}