{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/array-type.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require consistently using either `T[]` or `Array<T>` for arrays.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/array-type** for documentation.\n\nTypeScript provides two equivalent ways to define an array type: `T[]` and `Array<T>`.\nThe two styles are functionally equivalent.\nUsing the same style consistently across your codebase makes it easier for developers to read and understand array types.\n\n## Options\n\nThe default config will enforce that all mutable and readonly arrays use the `'array'` syntax.\n\n### `\"array\"`\n\nAlways use `T[]` or `readonly T[]` for all array types.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": \"array\" }'\nconst x: Array<string> = ['a', 'b'];\nconst y: ReadonlyArray<string> = ['a', 'b'];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": \"array\" }'\nconst x: string[] = ['a', 'b'];\nconst y: readonly string[] = ['a', 'b'];\n```\n\n</TabItem>\n</Tabs>\n\n### `\"generic\"`\n\nAlways use `Array<T>`, `ReadonlyArray<T>`, or `Readonly<Array<T>>` for all array types.\n`readonly T[]` will be modified to `ReadonlyArray<T>` and `Readonly<T[]>` will be modified to `Readonly<Array<T>>`.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": \"generic\" }'\nconst x: string[] = ['a', 'b'];\nconst y: readonly string[] = ['a', 'b'];\nconst z: Readonly<string[]> = ['a', 'b'];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": \"generic\" }'\nconst x: Array<string> = ['a', 'b'];\nconst y: ReadonlyArray<string> = ['a', 'b'];\nconst z: Readonly<Array<string>> = ['a', 'b'];\n```\n\n</TabItem>\n</Tabs>\n\n### `\"array-simple\"`\n\nUse `T[]` or `readonly T[]` for simple types (i.e. types which are just primitive names or type references).\nUse `Array<T>` or `ReadonlyArray<T>` for all other types (union types, intersection types, object types, function types, etc).\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"default\": \"array-simple\" }'\nconst a: (string | number)[] = ['a', 'b'];\nconst b: { prop: string }[] = [{ prop: 'a' }];\nconst c: (() => void)[] = [() => {}];\nconst d: Array<MyType> = ['a', 'b'];\nconst e: Array<string> = ['a', 'b'];\nconst f: ReadonlyArray<string> = ['a', 'b'];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"default\": \"array-simple\" }'\nconst a: Array<string | number> = ['a', 'b'];\nconst b: Array<{ prop: string }> = [{ prop: 'a' }];\nconst c: Array<() => void> = [() => {}];\nconst d: MyType[] = ['a', 'b'];\nconst e: string[] = ['a', 'b'];\nconst f: readonly string[] = ['a', 'b'];\n```\n\n</TabItem>\n</Tabs>\n\n## Combination Matrix\n\nThis matrix lists all possible option combinations and their expected results for different types of Arrays.\n\n| defaultOption  | readonlyOption | Array with simple type | Array with non simple type | Readonly array with simple type | Readonly array with non simple type |\n| -------------- | -------------- | ---------------------- | -------------------------- | ------------------------------- | ----------------------------------- |\n| `array`        |                | `number[]`             | `(Foo & Bar)[]`            | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `array`        | `array`        | `number[]`             | `(Foo & Bar)[]`            | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `array`        | `array-simple` | `number[]`             | `(Foo & Bar)[]`            | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `array`        | `generic`      | `number[]`             | `(Foo & Bar)[]`            | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n| `array-simple` |                | `number[]`             | `Array<Foo & Bar>`         | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `array-simple` | `array`        | `number[]`             | `Array<Foo & Bar>`         | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `array-simple` | `array-simple` | `number[]`             | `Array<Foo & Bar>`         | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `array-simple` | `generic`      | `number[]`             | `Array<Foo & Bar>`         | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n| `generic`      |                | `Array<number>`        | `Array<Foo & Bar>`         | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n| `generic`      | `array`        | `Array<number>`        | `Array<Foo & Bar>`         | `readonly number[]`             | `readonly (Foo & Bar)[]`            |\n| `generic`      | `array-simple` | `Array<number>`        | `Array<Foo & Bar>`         | `readonly number[]`             | `ReadonlyArray<Foo & Bar>`          |\n| `generic`      | `generic`      | `Array<number>`        | `Array<Foo & Bar>`         | `ReadonlyArray<number>`         | `ReadonlyArray<Foo & Bar>`          |\n\n## When Not To Use It\n\nThis rule is purely a stylistic rule for maintaining consistency in your project.\nYou can turn it off if you don't want to keep a consistent style for array types.\n\nHowever, keep in mind that inconsistent style can harm readability in a project.\nWe recommend picking a single option for this rule that works best for your project.\n"
        }
    ]
}