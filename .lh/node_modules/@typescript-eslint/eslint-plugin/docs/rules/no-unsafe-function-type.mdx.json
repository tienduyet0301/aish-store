{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-function-type.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow using the unsafe built-in Function type.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-function-type** for documentation.\n\nTypeScript's built-in `Function` type allows being called with any number of arguments and returns type `any`.\n`Function` also allows classes or plain objects that happen to possess all properties of the `Function` class.\nIt's generally better to specify function parameters and return types with the function type syntax.\n\n\"Catch-all\" function types include:\n\n- `() => void`: a function that has no parameters and whose return is ignored\n- `(...args: never) => unknown`: a \"top type\" for functions that can be assigned any function type, but can't be called\n\nExamples of code for this rule:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nlet noParametersOrReturn: Function;\nnoParametersOrReturn = () => {};\n\nlet stringToNumber: Function;\nstringToNumber = (text: string) => text.length;\n\nlet identity: Function;\nidentity = value => value;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nlet noParametersOrReturn: () => void;\nnoParametersOrReturn = () => {};\n\nlet stringToNumber: (text: string) => number;\nstringToNumber = text => text.length;\n\nlet identity: <T>(value: T) => T;\nidentity = value => value;\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project is still onboarding to TypeScript, it might be difficult to fully replace all unsafe `Function` types with more precise function types.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-empty-object-type`](./no-empty-object-type.mdx)\n- [`no-restricted-types`](./no-restricted-types.mdx)\n- [`no-unsafe-call`](./no-unsafe-call.mdx)\n- [`no-wrapper-object-types`](./no-wrapper-object-types.mdx)\n"
        }
    ]
}