{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-useless-empty-export.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: \"Disallow empty exports that don't change anything in a module file.\"\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-useless-empty-export** for documentation.\n\nAn empty `export {}` statement is sometimes useful in TypeScript code to turn a file that would otherwise be a script file into a module file.\nPer the [TypeScript Handbook Modules page](https://www.typescriptlang.org/docs/handbook/modules.html):\n\n> In TypeScript, just as in ECMAScript 2015, any file containing a top-level import or export is considered a module.\n> Conversely, a file without any top-level import or export declarations is treated as a script whose contents are available in the global scope (and therefore to modules as well).\n\nHowever, an `export {}` statement does nothing if there are any other top-level import or export statements in a file.\n\nThis rule reports an `export {}` that doesn't do anything in a file already using ES modules.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nexport const value = 'Hello, world!';\nexport {};\n```\n\n```ts\nimport 'some-other-module';\nexport {};\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nexport const value = 'Hello, world!';\n```\n\n```ts\nimport 'some-other-module';\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't mind an empty `export {}` at the bottom of files, you likely don't need this rule.\n"
        }
    ]
}