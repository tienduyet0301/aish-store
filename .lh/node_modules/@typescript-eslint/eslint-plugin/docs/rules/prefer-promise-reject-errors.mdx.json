{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-promise-reject-errors.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require using Error objects as Promise rejection reasons.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-promise-reject-errors** for documentation.\n\nIt uses type information to enforce that `Promise`s are only rejected with `Error` objects.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nPromise.reject('error');\n\nconst err = new Error();\nPromise.reject('an ' + err);\n\nnew Promise((resolve, reject) => reject('error'));\n\nnew Promise((resolve, reject) => {\n  const err = new Error();\n  reject('an ' + err);\n});\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nPromise.reject(new Error());\n\nclass CustomError extends Error {\n  // ...\n}\nPromise.reject(new CustomError());\n\nnew Promise((resolve, reject) => reject(new Error()));\n\nnew Promise((resolve, reject) => {\n  class CustomError extends Error {\n    // ...\n  }\n  return reject(new CustomError());\n});\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options {\n  /**\n   * Whether to always allow throwing values typed as `any`.\n   */\n  allowThrowingAny?: boolean;\n\n  /**\n   * Whether to always allow throwing values typed as `unknown`.\n   */\n  allowThrowingUnknown?: boolean;\n}\n\nconst defaultOptions: Options = {\n  allowThrowingAny: false,\n  allowThrowingUnknown: false,\n};\n```\n"
        }
    ]
}