{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-var-requires.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow `require` statements except in import statements.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-var-requires** for documentation.\n\n:::danger Deprecated\n\nThis rule has been deprecated in favour of the [`@typescript-eslint/no-require-imports`](./no-require-imports.mdx) rule.\n\n:::\n\nIn other words, the use of forms such as `var foo = require(\"foo\")` are banned. Instead use ES6 style imports or `import foo = require(\"foo\")` imports.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nvar foo = require('foo');\nconst foo = require('foo');\nlet foo = require('foo');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nimport foo = require('foo');\nrequire('foo');\nimport foo from 'foo';\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allow`\n\n{/* insert option description */}\n\nA array of strings. These strings will be compiled into regular expressions with the `u` flag and be used to test against the imported path. A common use case is to allow importing `package.json`. This is because `package.json` commonly lives outside of the TS root directory, so statically importing it would lead to root directory conflicts, especially with `resolveJsonModule` enabled. You can also use it to allow importing any JSON if your environment doesn't support JSON modules, or use it for other cases where `import` statements cannot work.\n\nWith `{allow: ['/package\\\\.json$']}`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allow\": [\"/package.json$\"] }'\nconst foo = require('../data.json');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allow\": [\"/package.json$\"] }'\nconst foo = require('../package.json');\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project frequently uses older CommonJS `require`s, then this rule might not be applicable to you.\nIf only a subset of your project uses `require`s then you might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [`no-require-imports`](./no-require-imports.mdx)\n"
        }
    ]
}