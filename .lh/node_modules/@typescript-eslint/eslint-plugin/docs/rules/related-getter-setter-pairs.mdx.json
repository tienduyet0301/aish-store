{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/related-getter-setter-pairs.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce that `get()` types should be assignable to their equivalent `set()` type.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/related-getter-setter-pairs** for documentation.\n\nTypeScript allows defining different types for a `get` parameter and its corresponding `set` return.\nPrior to TypeScript 4.3, the types had to be identical.\nFrom TypeScript 4.3 to 5.0, the `get` type had to be a subtype of the `set` type.\nAs of TypeScript 5.1, the types may be completely unrelated as long as there is an explicit type annotation.\n\nDefining drastically different types for a `get` and `set` pair can be confusing.\nIt means that assigning a property to itself would not work:\n\n```ts\n// Assumes box.value's get() return is assignable to its set() parameter\nbox.value = box.value;\n```\n\nThis rule reports cases where a `get()` and `set()` have the same name, but the `get()`'s type is not assignable to the `set()`'s.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ninterface Box {\n  get value(): string;\n  set value(newValue: number);\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ninterface Box {\n  get value(): string;\n  set value(newValue: string);\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project needs to model unusual relationships between data, such as older DOM types, this rule may not be useful for you.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n- [MDN documentation on `get`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get)\n- [MDN documentation on `set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)\n- [TypeScript 5.1 Release Notes > Unrelated Types for Getters and Setters](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-1.html#unrelated-types-for-getters-and-setters)\n"
        }
    ]
}