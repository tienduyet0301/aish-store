{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-use-before-define.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow the use of variables before they are defined.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-use-before-define** for documentation.\n\nIt adds support for `type`, `interface` and `enum` declarations.\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseNoUseBeforeDefineOptions {\n  enums?: boolean;\n  typedefs?: boolean;\n  ignoreTypeReferences?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoUseBeforeDefineDefaultOptions,\n  enums: true,\n  typedefs: true,\n  ignoreTypeReferences: true,\n};\n```\n\n### `enums`\n\n{/* insert option description */}\n\nIf this is `true`, this rule warns every reference to a enum before the enum declaration.\nIf this is `false`, this rule will ignore references to enums, when the reference is in a child scope.\n\nExamples of code for the `{ \"enums\": true }` option:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"enums\": true }'\nconst x = Foo.FOO;\n\nenum Foo {\n  FOO,\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"enums\": false }'\nfunction foo() {\n  return Foo.FOO;\n}\n\nenum Foo {\n  FOO,\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `typedefs`\n\n{/* insert option description */}\n\nIf this is `true`, this rule warns every reference to a type before the type declaration.\nIf this is `false`, this rule will ignore references to types.\n\nExamples of **correct** code for the `{ \"typedefs\": false }` option:\n\n```ts option='{ \"typedefs\": false }' showPlaygroundButton\nlet myVar: StringOrNumber;\ntype StringOrNumber = string | number;\n```\n\n### `ignoreTypeReferences`\n\n{/* insert option description */}\n\nIf this is `true`, this rule ignores all type references.\nIf this is `false`, this will check all type references.\n\nExamples of **correct** code for the `{ \"ignoreTypeReferences\": true }` option:\n\n```ts option='{ \"ignoreTypeReferences\": true }' showPlaygroundButton\nlet var1: StringOrNumber;\ntype StringOrNumber = string | number;\n\nlet var2: Enum;\nenum Enum {}\n```\n"
        }
    ]
}