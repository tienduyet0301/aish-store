{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unnecessary-type-constraint.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow unnecessary constraints on generic types.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unnecessary-type-constraint** for documentation.\n\nGeneric type parameters (`<T>`) in TypeScript may be \"constrained\" with an [`extends` keyword](https://www.typescriptlang.org/docs/handbook/generics.html#generic-constraints).\nWhen no `extends` is provided, type parameters default a constraint to `unknown`.\nIt is therefore redundant to `extend` from `any` or `unknown`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ninterface FooAny<T extends any> {}\n\ninterface FooUnknown<T extends unknown> {}\n\ntype BarAny<T extends any> = {};\n\ntype BarUnknown<T extends unknown> = {};\n\nclass BazAny<T extends any> {\n  quxAny<U extends any>() {}\n}\n\nconst QuuxAny = <T extends any>() => {};\n\nfunction QuuzAny<T extends any>() {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ninterface Foo<T> {}\n\ntype Bar<T> = {};\n\nclass Baz<T> {\n  qux<U>() {}\n}\n\nconst Quux = <T>() => {};\n\nfunction Quuz<T>() {}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you don't care about the specific styles of your type constraints, or never use them in the first place, then you will not need this rule.\n"
        }
    ]
}