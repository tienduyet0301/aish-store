{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ntitle: Overview\nsidebar_label: Overview\npagination_next: null\npagination_prev: null\nslug: /\n---\n\n`@typescript-eslint/eslint-plugin` includes over 100 rules that detect best practice violations, bugs, and/or stylistic issues specifically for TypeScript code. All of our rules are listed below.\n\n:::tip\nInstead of enabling rules one by one, we recommend using one of [our pre-defined configs](/users/configs) to enable a large set of recommended rules.\n:::\n\n## Rules\n\nThe rules are listed in alphabetical order. You can optionally filter them based on these categories:\n\nimport RulesTable from \"@site/src/components/RulesTable\";\n\n<RulesTable />\n\n## Filtering\n\n### Config Group (‚öôÔ∏è)\n\n\"Config Group\" refers to the [pre-defined config](/users/configs) that includes the rule. Extending from a configuration preset allow for enabling a large set of recommended rules all at once.\n\n### Metadata\n\n- `üîß fixable` refers to whether the rule contains an [ESLint `--fix` auto-fixer](https://eslint.org/docs/latest/use/command-line-interface#--fix).\n- `üí° has suggestions` refers to whether the rule contains an ESLint suggestion fixer.\n  - Sometimes, it is not safe to automatically fix the code with an auto-fixer. But in these cases, we often have a good guess of what the correct fix should be, and we can provide it as a suggestion to the developer.\n- `üí≠ requires type information` refers to whether the rule requires [typed linting](/getting-started/typed-linting).\n- `üß± extension rule` means that the rule is an extension of an [core ESLint rule](https://eslint.org/docs/latest/rules) (see [Extension Rules](#extension-rules)).\n- `üíÄ deprecated rule` means that the rule should no longer be used and will be removed from the plugin in a future version.\n\n## Extension Rules\n\nSome core ESLint rules do not support TypeScript syntax: either they crash, ignore the syntax, or falsely report against it.\nIn these cases, we create what we call an \"extension rule\": a rule within our plugin that has the same functionality, but also supports TypeScript.\n\nExtension rules generally completely replace the base rule from ESLint core.\nIf the base rule is enabled in a config you extend from, you'll need to disable the base rule:\n\n```js\nmodule.exports = {\n  extends: ['eslint:recommended'],\n  rules: {\n    // Note: you must disable the base rule as it can report incorrect errors\n    'no-unused-vars': 'off',\n    '@typescript-eslint/no-unused-vars': 'error',\n  },\n};\n```\n\n[Search for `üß± extension rule`s](?=extension#rules) in this page to see all extension rules.\n"
        }
    ]
}