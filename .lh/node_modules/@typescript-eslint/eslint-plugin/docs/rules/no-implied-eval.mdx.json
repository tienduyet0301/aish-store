{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-implied-eval.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow the use of `eval()`-like functions.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-implied-eval** for documentation.\n\nIt uses type information to determine which values are `eval()`-like functions.\n\nIt's considered a good practice to avoid using `eval()`. There are security and performance implications involved with doing so, which is why many linters recommend disallowing `eval()`. However, there are some other ways to pass a string and have it interpreted as JavaScript code that have similar concerns.\n\nThe first is using `setTimeout()`, `setInterval()`, `setImmediate` or `execScript()` (Internet Explorer only), all of which can accept a string of code as their first argument\n\n```ts\nsetTimeout('alert(`Hi!`);', 100);\n```\n\nor using `new Function()`\n\n```ts\nconst fn = new Function('a', 'b', 'return a + b');\n```\n\nThis is considered an implied `eval()` because a string of code is\npassed in to be interpreted. The same can be done with `setInterval()`, `setImmediate()` and `execScript()`. All interpret the JavaScript code in the global scope.\n\nThe best practice is to avoid using `new Function()` or `execScript()` and always use a function for the first argument of `setTimeout()`, `setInterval()` and `setImmediate()`.\n\n## Examples\n\nThis rule aims to eliminate implied `eval()` through the use of `new Function()`, `setTimeout()`, `setInterval()`, `setImmediate()` or `execScript()`.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nsetTimeout('alert(`Hi!`);', 100);\n\nsetInterval('alert(`Hi!`);', 100);\n\nsetImmediate('alert(`Hi!`)');\n\nexecScript('alert(`Hi!`)');\n\nwindow.setTimeout('count = 5', 10);\n\nwindow.setInterval('foo = bar', 10);\n\nconst fn = '() = {}';\nsetTimeout(fn, 100);\n\nconst fn = () => {\n  return 'x = 10';\n};\nsetTimeout(fn(), 100);\n\nconst fn = new Function('a', 'b', 'return a + b');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nsetTimeout(function () {\n  alert('Hi!');\n}, 100);\n\nsetInterval(function () {\n  alert('Hi!');\n}, 100);\n\nsetImmediate(function () {\n  alert('Hi!');\n});\n\nexecScript(function () {\n  alert('Hi!');\n});\n\nconst fn = () => {};\nsetTimeout(fn, 100);\n\nconst foo = {\n  fn: function () {},\n};\nsetTimeout(foo.fn, 100);\nsetTimeout(foo.fn.bind(this), 100);\n\nclass Foo {\n  static fn = () => {};\n}\n\nsetTimeout(Foo.fn, 100);\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project is a rare one that needs to allow `new Function()` or `setTimeout()`, `setInterval()`, `setImmediate()` and `execScript()` with string arguments, then you can disable this rule.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n"
        }
    ]
}