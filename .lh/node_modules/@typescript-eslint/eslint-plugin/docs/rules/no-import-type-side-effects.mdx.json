{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-import-type-side-effects.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-import-type-side-effects** for documentation.\n\nThe [`--verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax) compiler option causes TypeScript to do simple and predictable transpilation on import declarations.\nNamely, it completely removes import declarations with a top-level `type` qualifier, and it removes any import specifiers with an inline `type` qualifier.\n\nThe latter behavior does have one potentially surprising effect in that in certain cases TS can leave behind a \"side effect\" import at runtime:\n\n```ts\nimport { type A, type B } from 'mod';\n\n// is transpiled to\n\nimport {} from 'mod';\n// which is the same as\nimport 'mod';\n```\n\nFor the rare case of needing to import for side effects, this may be desirable - but for most cases you will not want to leave behind an unnecessary side effect import.\n\n## Examples\n\nThis rule enforces that you use a top-level `type` qualifier for imports when it only imports specifiers with an inline `type` qualifier\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nimport { type A } from 'mod';\nimport { type A as AA } from 'mod';\nimport { type A, type B } from 'mod';\nimport { type A as AA, type B as BB } from 'mod';\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nimport type { A } from 'mod';\nimport type { A as AA } from 'mod';\nimport type { A, B } from 'mod';\nimport type { A as AA, B as BB } from 'mod';\n\nimport T from 'mod';\nimport type T from 'mod';\n\nimport * as T from 'mod';\nimport type * as T from 'mod';\n\nimport { T } from 'mod';\nimport type { T } from 'mod';\nimport { T, U } from 'mod';\nimport type { T, U } from 'mod';\nimport { type T, U } from 'mod';\nimport { T, type U } from 'mod';\n\nimport type T, { U } from 'mod';\nimport T, { type U } from 'mod';\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you're not using TypeScript 5.0's `verbatimModuleSyntax` option and your project is built with a bundler that manages import side effects for you, this rule may not be as useful for you.\n\n## Related To\n\n- [`consistent-type-imports`](./consistent-type-imports.mdx)\n- [`import/consistent-type-specifier-style`](https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/consistent-type-specifier-style.md)\n- [`import/no-duplicates` with `{\"prefer-inline\": true}`](https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-duplicates.md#inline-type-imports)\n"
        }
    ]
}