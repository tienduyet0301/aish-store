{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-wrapper-object-types.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow using confusing built-in primitive class wrappers.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-wrapper-object-types** for documentation.\n\nTypeScript defines several confusing pairs of types that look very similar to each other, but actually mean different things: `boolean`/`Boolean`, `number`/`Number`, `string`/`String`, `bigint`/`BigInt`, `symbol`/`Symbol`, `object`/`Object`.\nIn general, only the lowercase variant is appropriate to use.\nTherefore, this rule enforces that you only use the lowercase variant.\n\nJavaScript has [8 data types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures) at runtime, and these are described in TypeScript by the lowercase types `undefined`, `null`, `boolean`, `number`, `string`, `bigint`, `symbol`, and `object`.\n\nAs for the uppercase types, these are _structural types_ which describe JavaScript \"wrapper\" objects for each of the data types, such as [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean) and [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number).\nAdditionally, due to the quirks of structural typing, the corresponding primitives are _also_ assignable to these uppercase types, since they have the same \"shape\".\n\nIt is a universal best practice to work directly with the built-in primitives, like `0`, rather than objects that \"look like\" the corresponding primitive, like `new Number(0)`.\n\n- Primitives have the expected value semantics with `==` and `===` equality checks, whereas their object counterparts are compared by reference.\n  That is to say, `\"str\" === \"str\"` but `new String(\"str\") !== new String(\"str\")`.\n- Primitives have well-known behavior around truthiness/falsiness which is common to rely on, whereas all objects are truthy, regardless of the wrapped value (e.g. `new Boolean(false)` is truthy).\n- TypeScript only allows arithmetic operations (e.g. `x - y`) to be performed on numeric primitives, not objects.\n\nAs a result, using the lowercase type names like `number` in TypeScript types instead of the uppercase names like `Number` is a better practice that describes code more accurately.\n\nExamples of code for this rule:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nlet myBigInt: BigInt;\nlet myBoolean: Boolean;\nlet myNumber: Number;\nlet myString: String;\nlet mySymbol: Symbol;\n\nlet myObject: Object = 'allowed by TypeScript';\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nlet myBigint: bigint;\nlet myBoolean: boolean;\nlet myNumber: number;\nlet myString: string;\nlet mySymbol: symbol;\n\nlet myObject: object = \"Type 'string' is not assignable to type 'object'.\";\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project is a rare one that intentionally deals with the class equivalents of primitives, it might not be worthwhile to use this rule.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n- [MDN documentation on primitives](https://developer.mozilla.org/en-US/docs/Glossary/Primitive)\n- [MDN documentation on `string` primitives and `String` objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_primitives_and_string_objects)\n\n## Related To\n\n- [`no-empty-object-type`](./no-empty-object-type.mdx)\n- [`no-restricted-types`](./no-restricted-types.mdx)\n- [`no-unsafe-function-type`](./no-unsafe-function-type.mdx)\n"
        }
    ]
}