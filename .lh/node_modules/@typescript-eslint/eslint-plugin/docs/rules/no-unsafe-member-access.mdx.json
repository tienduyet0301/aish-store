{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unsafe-member-access.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow member access on a value with type `any`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unsafe-member-access** for documentation.\n\nThe `any` type in TypeScript is a dangerous \"escape hatch\" from the type system.\nUsing `any` disables many type checking rules and is generally best used only as a last resort or when prototyping code.\n\nDespite your best intentions, the `any` type can sometimes leak into your codebase.\nAccessing a member of an `any`-typed value creates a potential type safety hole and source of bugs in your codebase.\n\nThis rule disallows member access on any variable that is typed as `any`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const anyVar: any;\ndeclare const nestedAny: { prop: any };\n\nanyVar.a;\nanyVar.a.b;\nanyVar['a'];\nanyVar['a']['b'];\n\nnestedAny.prop.a;\nnestedAny.prop['a'];\n\nconst key = 'a';\nnestedAny.prop[key];\n\n// Using an any to access a member is unsafe\nconst arr = [1, 2, 3];\narr[anyVar];\nnestedAny[anyVar];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const properlyTyped: { prop: { a: string } };\n\nproperlyTyped.prop.a;\nproperlyTyped.prop['a'];\n\nconst key = 'a';\nproperlyTyped.prop[key];\n\nconst arr = [1, 2, 3];\narr[1];\nlet idx = 1;\narr[idx];\narr[idx++];\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your codebase has many existing `any`s or areas of unsafe code, it may be difficult to enable this rule.\nIt may be easier to skip the `no-unsafe-*` rules pending increasing type safety in unsafe areas of your project.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Related To\n\n- [Avoiding `any`s with Linting and TypeScript](/blog/avoiding-anys)\n- [`no-explicit-any`](./no-explicit-any.mdx)\n- [`no-unsafe-argument`](./no-unsafe-argument.mdx)\n- [`no-unsafe-assignment`](./no-unsafe-assignment.mdx)\n- [`no-unsafe-call`](./no-unsafe-call.mdx)\n- [`no-unsafe-return`](./no-unsafe-return.mdx)\n"
        }
    ]
}