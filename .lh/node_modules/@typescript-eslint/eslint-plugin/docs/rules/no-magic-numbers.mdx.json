{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-magic-numbers.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow magic numbers.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> ðŸ›‘ This file is source code, not the primary documentation location! ðŸ›‘\n>\n> See **https://typescript-eslint.io/rules/no-magic-numbers** for documentation.\n\nIt adds support for:\n\n- numeric literal types (`type T = 1`),\n- `enum` members (`enum Foo { bar = 1 }`),\n- `readonly` class properties (`class Foo { readonly bar = 1 }`).\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseNoMagicNumbersOptions {\n  ignoreEnums?: boolean;\n  ignoreNumericLiteralTypes?: boolean;\n  ignoreReadonlyClassProperties?: boolean;\n  ignoreTypeIndexes?: boolean;\n}\n\nconst defaultOptions: Options = {\n  ...baseNoMagicNumbersDefaultOptions,\n  ignoreEnums: false,\n  ignoreNumericLiteralTypes: false,\n  ignoreReadonlyClassProperties: false,\n  ignoreTypeIndexes: false,\n};\n```\n\n### `ignoreEnums`\n\n{/* insert option description */}\n\nWhether enums used in TypeScript are considered okay. `false` by default.\n\nExamples of **incorrect** code for the `{ \"ignoreEnums\": false }` option:\n\n```ts option='{ \"ignoreEnums\": false }' showPlaygroundButton\nenum foo {\n  SECOND = 1000,\n}\n```\n\nExamples of **correct** code for the `{ \"ignoreEnums\": true }` option:\n\n```ts option='{ \"ignoreEnums\": true }' showPlaygroundButton\nenum foo {\n  SECOND = 1000,\n}\n```\n\n### `ignoreNumericLiteralTypes`\n\n{/* insert option description */}\n\nWhether numbers used in TypeScript numeric literal types are considered okay. `false` by default.\n\nExamples of **incorrect** code for the `{ \"ignoreNumericLiteralTypes\": false }` option:\n\n```ts option='{ \"ignoreNumericLiteralTypes\": false }' showPlaygroundButton\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n```\n\nExamples of **correct** code for the `{ \"ignoreNumericLiteralTypes\": true }` option:\n\n```ts option='{ \"ignoreNumericLiteralTypes\": true }' showPlaygroundButton\ntype SmallPrimes = 2 | 3 | 5 | 7 | 11;\n```\n\n### `ignoreReadonlyClassProperties`\n\n{/* insert option description */}\n\nWhether `readonly` class properties are considered okay.\n\nExamples of **incorrect** code for the `{ \"ignoreReadonlyClassProperties\": false }` option:\n\n```ts option='{ \"ignoreReadonlyClassProperties\": false }' showPlaygroundButton\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n```\n\nExamples of **correct** code for the `{ \"ignoreReadonlyClassProperties\": true }` option:\n\n```ts option='{ \"ignoreReadonlyClassProperties\": true }' showPlaygroundButton\nclass Foo {\n  readonly A = 1;\n  readonly B = 2;\n  public static readonly C = 1;\n  static readonly D = 1;\n}\n```\n\n### `ignoreTypeIndexes`\n\n{/* insert option description */}\n\nWhether numbers used to index types are okay. `false` by default.\n\nExamples of **incorrect** code for the `{ \"ignoreTypeIndexes\": false }` option:\n\n```ts option='{ \"ignoreTypeIndexes\": false }' showPlaygroundButton\ntype Foo = Bar[0];\ntype Baz = Parameters<Foo>[2];\n```\n\nExamples of **correct** code for the `{ \"ignoreTypeIndexes\": true }` option:\n\n```ts option='{ \"ignoreTypeIndexes\": true }' showPlaygroundButton\ntype Foo = Bar[0];\ntype Baz = Parameters<Foo>[2];\n```\n\n## When Not To Use It\n\nIf your project frequently deals with constant numbers and you don't wish to take up extra space to declare them, this rule might not be for you.\nWe recommend at least using descriptive comments and/or names to describe constants.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) instead of completely disabling this rule.\n"
        }
    ]
}