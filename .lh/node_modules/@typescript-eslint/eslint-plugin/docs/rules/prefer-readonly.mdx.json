{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-readonly.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: \"Require private members to be marked as `readonly` if they're never modified outside of the constructor.\"\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-readonly** for documentation.\n\nPrivate member variables (whether using the `private` modifier or private `#` fields) are never permitted to be modified outside of their declaring class.\nIf that class never modifies their value, they may safely be marked as `readonly`.\n\nThis rule reports on private members are marked as `readonly` if they're never modified outside of the constructor.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nclass Container {\n  // These member variables could be marked as readonly\n  private neverModifiedMember = true;\n  private onlyModifiedInConstructor: number;\n  #neverModifiedPrivateField = 3;\n\n  public constructor(\n    onlyModifiedInConstructor: number,\n    // Private parameter properties can also be marked as readonly\n    private neverModifiedParameter: string,\n  ) {\n    this.onlyModifiedInConstructor = onlyModifiedInConstructor;\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nclass Container {\n  // Public members might be modified externally\n  public publicMember: boolean;\n\n  // Protected members might be modified by child classes\n  protected protectedMember: number;\n\n  // This is modified later on by the class\n  private modifiedLater = 'unchanged';\n\n  public mutate() {\n    this.modifiedLater = 'mutated';\n  }\n\n  // This is modified later on by the class\n  #modifiedLaterPrivateField = 'unchanged';\n\n  public mutatePrivateField() {\n    this.#modifiedLaterPrivateField = 'mutated';\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `onlyInlineLambdas`\n\n{/* insert option description */}\n\n```jsonc\n{\n  \"@typescript-eslint/prefer-readonly\": [\n    \"error\",\n    { \"onlyInlineLambdas\": true },\n  ],\n}\n```\n\nExample of code for the `{ \"onlyInlineLambdas\": true }` options:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"onlyInlineLambdas\": true }'\nclass Container {\n  private onClick = () => {\n    /* ... */\n  };\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"onlyInlineLambdas\": true }'\nclass Container {\n  private neverModifiedPrivate = 'unchanged';\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you aren't trying to enforce strong immutability guarantees, this rule may be too restrictive for your project.\n"
        }
    ]
}