{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-misused-spread.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow using the spread operator when it might cause unexpected behavior.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-misused-spread** for documentation.\n\n[Spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) (`...`) is a JavaScript feature for creating an object with the joined properties of one or more other objects.\nTypeScript allows spreading objects whose properties are not typically meant to be enumerated, such as arrays and class instances.\n\nThis rule disallows using the spread syntax on values whose types indicate doing so may cause unexpected behavior.\nThat includes the following cases:\n\n- Spreading a `Promise` into an object.\n  You probably meant to `await` it.\n- Spreading a function without properties into an object.\n  You probably meant to call it.\n- Spreading an iterable (`Array`, `Map`, etc.) into an object.\n  Iterable objects usually do not have meaningful enumerable properties and you probably meant to spread it into an array instead.\n- Spreading a string into an array.\n  String enumeration behaviors in JavaScript around encoded characters are often surprising.\n- Spreading a `class` into an object.\n  This copies all static own properties of the class, but none of the inheritance chain.\n- Spreading a class instance into an object.\n  This does not faithfully copy the instance because only its own properties are copied, but the inheritance chain is lost, including all its methods.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const promise: Promise<number>;\nconst spreadPromise = { ...promise };\n\ndeclare function getObject(): Record<string, strings>;\nconst getObjectSpread = { ...getObject };\n\ndeclare const map: Map<string, number>;\nconst mapSpread = { ...map };\n\ndeclare const userName: string;\nconst characters = [...userName];\n```\n\n```ts\ndeclare class Box {\n  value: number;\n}\nconst boxSpread = { ...Box };\n\ndeclare const instance: Box;\nconst instanceSpread = { ...instance };\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const promise: Promise<number>;\nconst spreadPromise = { ...(await promise) };\n\ndeclare function getObject(): Record<string, strings>;\nconst getObjectSpread = { ...getObject() };\n\ndeclare const map: Map<string, number>;\nconst mapObject = Object.fromEntries(map);\n\ndeclare const userName: string;\nconst characters = userName.split('');\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allow`\n\n{/* insert option description */}\n\nThis option takes the shared [`TypeOrValueSpecifier` format](/packages/type-utils/type-or-value-specifier).\n\nExamples of a configuration for this option in a `file.ts` file:\n\n```json\n\"@typescript-eslint/no-misused-spread\": [\n  \"error\",\n  {\n    \"allow\": [\n      { \"from\": \"file\", \"name\": \"BrandedString\", \"path\": \"file.ts\" },\n    ]\n  }\n]\n```\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{\"allow\":[{ \"from\": \"file\", \"name\": \"BrandedString\" }]}'\ndeclare const unbrandedString: string;\n\nconst spreadUnbrandedString = [...unbrandedString];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{\"allow\":[{ \"from\": \"file\", \"name\": \"BrandedString\" }]}'\ntype BrandedString = string & { __brand: 'safe' };\n\ndeclare const brandedString: BrandedString;\n\nconst spreadBrandedString = [...brandedString];\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your application intentionally works with raw data in unusual ways, such as directly manipulating class prototype chains, you might not want this rule.\n\nIf your use cases for unusual spreads only involve a few types, you might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) and/or the [`allow` option](#allow) instead of completely disabling this rule.\n\n## Further Reading\n\n- [Strings Shouldn't Be Iterable By Default](https://www.xanthir.com/b4wJ1)\n"
        }
    ]
}