{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-string-starts-ends-with.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-string-starts-ends-with** for documentation.\n\nThere are multiple ways to verify if a string starts or ends with a specific string, such as `foo.indexOf('bar') === 0`.\nAs of ES2015, the most common way in JavaScript is to use `String#startsWith` and `String#endsWith`.\nKeeping to those methods consistently helps with code readability.\n\nThis rule reports when a string method can be replaced safely with `String#startsWith` or `String#endsWith`.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const foo: string;\n\n// starts with\nfoo[0] === 'b';\nfoo.charAt(0) === 'b';\nfoo.indexOf('bar') === 0;\nfoo.slice(0, 3) === 'bar';\nfoo.substring(0, 3) === 'bar';\nfoo.match(/^bar/) != null;\n/^bar/.test(foo);\n\n// ends with\nfoo[foo.length - 1] === 'b';\nfoo.charAt(foo.length - 1) === 'b';\nfoo.lastIndexOf('bar') === foo.length - 3;\nfoo.slice(-3) === 'bar';\nfoo.substring(foo.length - 3) === 'bar';\nfoo.match(/bar$/) != null;\n/bar$/.test(foo);\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const foo: string;\n\n// starts with\nfoo.startsWith('bar');\n\n// ends with\nfoo.endsWith('bar');\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allowSingleElementEquality`\n\n{/* insert option description */}\n\nIf switched to `'always'`, the rule will allow equality checks against the first or last character in a string.\nThis can be preferable in projects that don't deal with special character encodings and prefer a more succinct style.\n\nThe following code is considered incorrect by default, but is allowed with `allowSingleElementEquality: 'always'`:\n\n```ts option='{ \"allowSingleElementEquality\": \"always\" }' showPlaygroundButton\ndeclare const text: string;\n\ntext[0] === 'a';\ntext[0] === text[0].toUpperCase();\ntext[0] === text[1];\ntext[text.length - 1] === 'b';\n```\n\n## When Not To Use It\n\nIf you don't mind which style of string checking is used, you can turn this rule off safely.\nHowever, keep in mind that inconsistent style can harm readability in a project.\n"
        }
    ]
}