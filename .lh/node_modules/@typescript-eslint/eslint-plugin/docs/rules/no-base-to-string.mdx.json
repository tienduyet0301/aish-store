{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-base-to-string.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-base-to-string** for documentation.\n\nJavaScript will call `toString()` on an object when it is converted to a string, such as when concatenated with a string (`expr + ''`), when interpolated into template literals (`${expr}`), or when passed as an argument to the String constructor (`String(expr)`).\nThe default Object `.toString()` and `toLocaleString()` use the format `\"[object Object]\"`, which is often not what was intended.\nThis rule reports on stringified values that aren't primitives and don't define a more useful `.toString()` or `toLocaleString()` method.\n\n> Note that `Function` provides its own `.toString()` and `toLocaleString()` that return the function's code.\n> Functions are not flagged by this rule.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\n// Passing an object or class instance to string concatenation:\n'' + {};\n\nclass MyClass {}\nconst value = new MyClass();\nvalue + '';\n\n// Interpolation and manual .toString() and `toLocaleString()` calls too:\n`Value: ${value}`;\nString({});\n({}).toString();\n({}).toLocaleString();\n\n// Stringifying objects or instances in an array with the `Array.prototype.join`.\n[{}, new MyClass()].join('');\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n// These types all have useful .toString() and `toLocaleString()` methods\n'Text' + true;\n`Value: ${123}`;\n`Arrays too: ${[1, 2, 3]}`;\n(() => {}).toString();\nString(42);\n(() => {}).toLocaleString();\n\n// Defining a custom .toString class is considered acceptable\nclass CustomToString {\n  toString() {\n    return 'Hello, world!';\n  }\n}\n`Value: ${new CustomToString()}`;\n\nconst literalWithToString = {\n  toString: () => 'Hello, world!',\n};\n\n`Value: ${literalWithToString}`;\n```\n\n</TabItem>\n</Tabs>\n\n## Alternatives\n\nConsider using `JSON.stringify` when you want to convert non-primitive things to string for logging, debugging, etc.\n\n```typescript\ndeclare const o: object;\nconst errorMessage = 'Found unexpected value: ' + JSON.stringify(o);\n```\n\n## Options\n\n### `ignoredTypeNames`\n\n{/* insert option description */}\n\nThis is useful for types missing `toString()` or `toLocaleString()` (but actually has `toString()` or `toLocaleString()`).\nThere are some types missing `toString()` or `toLocaleString()` in old versions of TypeScript, like `RegExp`, `URL`, `URLSearchParams` etc.\n\nThe following patterns are considered correct with the default options `{ ignoredTypeNames: [\"RegExp\"] }`:\n\n```ts option='{ \"ignoredTypeNames\": [\"RegExp\"] }' showPlaygroundButton\n`${/regex/}`;\n'' + /regex/;\n/regex/.toString();\nlet value = /regex/;\nvalue.toString();\nlet text = `${value}`;\nString(/regex/);\n```\n\n## When Not To Use It\n\nIf you don't mind a risk of `\"[object Object]\"` or incorrect type coercions in your values, then you will not need this rule.\n\n## Related To\n\n- [`restrict-plus-operands`](./restrict-plus-operands.mdx)\n- [`restrict-template-expressions`](./restrict-template-expressions.mdx)\n\n## Further Reading\n\n- [`Object.prototype.toString()` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString)\n- [`Object.prototype.toLocaleString()` MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString)\n- [Microsoft/TypeScript Add missing toString declarations for base types that have them](https://github.com/microsoft/TypeScript/issues/38347)\n"
        }
    ]
}