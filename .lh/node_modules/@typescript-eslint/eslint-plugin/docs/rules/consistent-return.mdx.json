{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/consistent-return.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require `return` statements to either always or never specify values.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/consistent-return** for documentation.\n\nIt adds support for functions that return `void` or `Promise<void>`.\n\n:::danger warning\nIf possible, it is recommended to use tsconfig's [`noImplicitReturns`](https://www.typescriptlang.org/tsconfig/#noImplicitReturns) option rather than this rule. `noImplicitReturns` is powered by TS's type information and control-flow analysis so it has better coverage than this rule.\n:::\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfunction foo(): undefined {}\nfunction bar(flag: boolean): undefined {\n  if (flag) return foo();\n  return;\n}\n\nasync function baz(flag: boolean): Promise<undefined> {\n  if (flag) return;\n  return foo();\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction foo(): void {}\nfunction bar(flag: boolean): void {\n  if (flag) return foo();\n  return;\n}\n\nasync function baz(flag: boolean): Promise<void | number> {\n  if (flag) return 42;\n  return;\n}\n```\n\n</TabItem>\n</Tabs>\n"
        }
    ]
}