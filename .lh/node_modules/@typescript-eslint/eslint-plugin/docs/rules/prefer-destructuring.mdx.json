{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-destructuring.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Require destructuring from arrays and/or objects.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-destructuring** for documentation.\n\nIt adds support for TypeScript's type annotations in variable declarations.\n\n## Examples\n\n<Tabs>\n\n<TabItem value=\"`eslint/prefer-destructuring`\">\n\n```ts\nconst x: string = obj.x; // This is incorrect and the auto fixer provides following untyped fix.\n// const { x } = obj;\n```\n\n</TabItem>\n<TabItem value=\"`@typescript-eslint/prefer-destructuring`\">\n\n```ts\nconst x: string = obj.x; // This is correct by default. You can also forbid this by an option.\n```\n\n</TabItem>\n</Tabs>\n\nAnd it infers binding patterns more accurately thanks to the type checker.\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst x = ['a'];\nconst y = x[0];\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst x = { 0: 'a' };\nconst y = x[0];\n```\n\nIt is correct when `enforceForRenamedProperties` is not true.\nValid destructuring syntax is renamed style like `{ 0: y } = x` rather than `[y] = x` because `x` is not iterable.\n\n</TabItem>\n</Tabs>\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ntype Options = [\n  BasePreferDestructuringOptions[0],\n  BasePreferDestructuringOptions[1] & {\n    enforceForDeclarationWithTypeAnnotation?: boolean;\n  },\n];\n\nconst defaultOptions: Options = [\n  basePreferDestructuringDefaultOptions[0],\n  {\n    ...basePreferDestructuringDefaultOptions[1],\n    enforceForDeclarationWithTypeAnnotation: false,\n  },\n];\n```\n\n### `enforceForDeclarationWithTypeAnnotation`\n\n{/* insert option description */}\n\nExamples with `{ enforceForDeclarationWithTypeAnnotation: true }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"object\": true }, { \"enforceForDeclarationWithTypeAnnotation\": true }'\nconst x: string = obj.x;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"object\": true }, { \"enforceForDeclarationWithTypeAnnotation\": true }'\nconst { x }: { x: string } = obj;\n```\n\n</TabItem>\n</Tabs>\n"
        }
    ]
}