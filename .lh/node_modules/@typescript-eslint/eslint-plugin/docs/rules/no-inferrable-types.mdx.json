{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-inferrable-types.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-inferrable-types** for documentation.\n\nTypeScript is able to infer the types of parameters, properties, and variables from their default or initial values.\nThere is no need to use an explicit `:` type annotation on one of those constructs initialized to a boolean, number, or string.\nDoing so adds unnecessary verbosity to code -making it harder to read- and in some cases can prevent TypeScript from inferring a more specific literal type (e.g. `10`) instead of the more general primitive type (e.g. `number`)\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst a: bigint = 10n;\nconst a: bigint = BigInt(10);\nconst a: boolean = !0;\nconst a: boolean = Boolean(null);\nconst a: boolean = true;\nconst a: null = null;\nconst a: number = 10;\nconst a: number = Infinity;\nconst a: number = NaN;\nconst a: number = Number('1');\nconst a: RegExp = /a/;\nconst a: RegExp = new RegExp('a');\nconst a: string = `str`;\nconst a: string = String(1);\nconst a: symbol = Symbol('a');\nconst a: undefined = undefined;\nconst a: undefined = void someValue;\n\nclass Foo {\n  prop: number = 5;\n}\n\nfunction fn(a: number = 5, b: boolean = true) {}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst a = 10n;\nconst a = BigInt(10);\nconst a = !0;\nconst a = Boolean(null);\nconst a = true;\nconst a = null;\nconst a = 10;\nconst a = Infinity;\nconst a = NaN;\nconst a = Number('1');\nconst a = /a/;\nconst a = new RegExp('a');\nconst a = `str`;\nconst a = String(1);\nconst a = Symbol('a');\nconst a = undefined;\nconst a = void someValue;\n\nclass Foo {\n  prop = 5;\n}\n\nfunction fn(a = 5, b = true) {}\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `ignoreParameters`\n\n{/* insert option description */}\n\nWhen set to true, the following pattern is considered valid:\n\n```ts option='{ \"ignoreParameters\": true }' showPlaygroundButton\nfunction foo(a: number = 5, b: boolean = true) {\n  // ...\n}\n```\n\n### `ignoreProperties`\n\n{/* insert option description */}\n\nWhen set to true, the following pattern is considered valid:\n\n```ts option='{ \"ignoreProperties\": true }' showPlaygroundButton\nclass Foo {\n  prop: number = 5;\n}\n```\n\n## When Not To Use It\n\nIf you strongly prefer to have explicit types regardless of whether they can be inferred, this rule may not be for you.\n\nIf you use the `--isolatedDeclarations` compiler option, this rule is incompatible.\n\n## Further Reading\n\n- [TypeScript Inference](https://www.typescriptlang.org/docs/handbook/type-inference.html)\n"
        }
    ]
}