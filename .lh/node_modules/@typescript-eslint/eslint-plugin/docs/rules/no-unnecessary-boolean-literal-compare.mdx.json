{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-unnecessary-boolean-literal-compare.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow unnecessary equality comparisons against boolean literals.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare** for documentation.\n\nComparing boolean values to boolean literals is unnecessary: those comparisons result in the same booleans.\nUsing the boolean values directly, or via a unary negation (`!value`), is more concise and clearer.\n\nThis rule ensures that you do not include unnecessary comparisons with boolean literals.\nA comparison is considered unnecessary if it checks a boolean literal against any variable with just the `boolean` type.\nA comparison is **_not_** considered unnecessary if the type is a union of booleans (`string | boolean`, `SomeObject | boolean`, etc.).\n\n## Examples\n\n:::note\nThroughout this page, only strict equality (`===` and `!==`) are used in the examples.\nHowever, the implementation of the rule does not distinguish between strict and loose equality.\nAny example below that uses `===` would be treated the same way if `==` was used, and `!==` would be treated the same way if `!=` was used.\n:::\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ndeclare const someCondition: boolean;\nif (someCondition === true) {\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ndeclare const someCondition: boolean;\nif (someCondition) {\n}\n\ndeclare const someObjectBoolean: boolean | Record<string, unknown>;\nif (someObjectBoolean === true) {\n}\n\ndeclare const someStringBoolean: boolean | string;\nif (someStringBoolean === true) {\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\nThis rule always checks comparisons between a boolean variable and a boolean\nliteral. Comparisons between nullable boolean variables and boolean literals\nare **not** checked by default.\n\n### `allowComparingNullableBooleansToTrue`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowComparingNullableBooleansToTrue: false }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowComparingNullableBooleansToTrue\": false }'\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition === true) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition !== true) {\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowComparingNullableBooleansToTrue\": false }'\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (!someNullCondition) {\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `allowComparingNullableBooleansToFalse`\n\n{/* insert option description */}\n\nExamples of code for this rule with `{ allowComparingNullableBooleansToFalse: false }`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"allowComparingNullableBooleansToFalse\": false }'\ndeclare const someUndefinedCondition: boolean | undefined;\nif (someUndefinedCondition === false) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition !== false) {\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"allowComparingNullableBooleansToFalse\": false }'\ndeclare const someUndefinedCondition: boolean | undefined;\nif (!(someUndefinedCondition ?? true)) {\n}\n\ndeclare const someNullCondition: boolean | null;\nif (someNullCondition ?? true) {\n}\n```\n\n</TabItem>\n</Tabs>\n\n### `allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing`\n\n:::danger Deprecated\n\nThis option will be removed in the next major version of typescript-eslint.\n\n:::\n\n{/* insert option description */}\n\nWithout `strictNullChecks`, TypeScript essentially erases `undefined` and `null` from the types. This means when this rule inspects the types from a variable, **it will not be able to tell that the variable might be `null` or `undefined`**, which essentially makes this rule useless.\n\nYou should be using `strictNullChecks` to ensure complete type-safety in your codebase.\n\nIf for some reason you cannot turn on `strictNullChecks`, but still want to use this rule - you can use this option to allow it - but know that the behavior of this rule is _undefined_ with the compiler option turned off. We will not accept bug reports if you are using this option.\n\n## Fixer\n\n|           Comparison           | Fixer Output                    | Notes                                                                               |\n| :----------------------------: | ------------------------------- | ----------------------------------------------------------------------------------- |\n|     `booleanVar === true`      | `booleanVar`                    |                                                                                     |\n|     `booleanVar !== true`      | `!booleanVar`                   |                                                                                     |\n|     `booleanVar === false`     | `!booleanVar`                   |                                                                                     |\n|     `booleanVar !== false`     | `booleanVar`                    |                                                                                     |\n| `nullableBooleanVar === true`  | `nullableBooleanVar`            | Only checked/fixed if the `allowComparingNullableBooleansToTrue` option is `false`  |\n| `nullableBooleanVar !== true`  | `!nullableBooleanVar`           | Only checked/fixed if the `allowComparingNullableBooleansToTrue` option is `false`  |\n| `nullableBooleanVar === false` | `!(nullableBooleanVar ?? true)` | Only checked/fixed if the `allowComparingNullableBooleansToFalse` option is `false` |\n| `nullableBooleanVar !== false` | `nullableBooleanVar ?? true`    | Only checked/fixed if the `allowComparingNullableBooleansToFalse` option is `false` |\n\n## When Not To Use It\n\nDo not use this rule when `strictNullChecks` is disabled.\nESLint is not able to distinguish between `false` and `undefined` or `null` values.\nThis can cause unintended code changes when using autofix.\n"
        }
    ]
}