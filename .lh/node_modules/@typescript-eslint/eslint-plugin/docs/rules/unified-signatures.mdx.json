{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/unified-signatures.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow two overloads that could be unified into one with a union or an optional/rest parameter.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/unified-signatures** for documentation.\n\nFunction overload signatures are a TypeScript way to define a function that can be called in multiple very different ways.\nOverload signatures add syntax and theoretical bloat, so it's generally best to avoid using them when possible.\nSwitching to union types and/or optional or rest parameters can often avoid the need for overload signatures.\n\nThis rule reports when function overload signatures can be replaced by a single function signature.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfunction x(x: number): void;\nfunction x(x: string): void;\n```\n\n```ts\nfunction y(): void;\nfunction y(...x: number[]): void;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction x(x: number | string): void;\n```\n\n```ts\nfunction y(...x: number[]): void;\n```\n\n```ts\n// This rule won't check overload signatures with different rest parameter types.\n// See https://github.com/microsoft/TypeScript/issues/5077\nfunction f(...a: number[]): void;\nfunction f(...a: string[]): void;\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `ignoreDifferentlyNamedParameters`\n\n{/* insert option description */}\n\nExamples of code for this rule with `ignoreDifferentlyNamedParameters`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ignoreDifferentlyNamedParameters\": true }'\nfunction f(a: number): void;\nfunction f(a: string): void;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ignoreDifferentlyNamedParameters\": true }'\nfunction f(a: number): void;\nfunction f(b: string): void;\n```\n\n</TabItem>\n</Tabs>\n\n### `ignoreOverloadsWithDifferentJSDoc`\n\n{/* insert option description */}\n\nExamples of code for this rule with `ignoreOverloadsWithDifferentJSDoc`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ignoreOverloadsWithDifferentJSDoc\": true }'\ndeclare function f(x: string): void;\ndeclare function f(x: boolean): void;\n/**\n * @deprecate\n */\ndeclare function f(x: number): void;\n/**\n * @deprecate\n */\ndeclare function f(x: null): void;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ignoreOverloadsWithDifferentJSDoc\": true }'\ndeclare function f(x: string): void;\n/**\n * This signature does something else.\n */\ndeclare function f(x: boolean): void;\n/**\n * @async\n */\ndeclare function f(x: number): void;\n/**\n * @deprecate\n */\ndeclare function f(x: null): void;\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nThis is purely a stylistic rule to help with readability of function signature overloads.\nYou can turn it off if you don't want to consistently keep them next to each other and unified.\n\n## Related To\n\n- [`adjacent-overload-signatures`](./adjacent-overload-signatures.mdx)\n"
        }
    ]
}