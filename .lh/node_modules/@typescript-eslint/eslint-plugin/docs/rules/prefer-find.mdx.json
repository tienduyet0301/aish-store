{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-find.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891981976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-find** for documentation.\n\nWhen searching for the first item in an array matching a condition, it may be tempting to use code like `arr.filter(x => x > 0)[0]`.\nHowever, it is simpler to use [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) instead, `arr.find(x => x > 0)`, which also returns the first entry matching a condition.\nBecause the `.find()` only needs to execute the callback until it finds a match, it's also more efficient.\n\n:::info\n\nBeware the difference in short-circuiting behavior between the approaches.\n`.find()` will only execute the callback on array elements until it finds a match, whereas `.filter()` executes the callback for all array elements.\nTherefore, when fixing errors from this rule, be sure that your `.filter()` callbacks do not have side effects.\n\n:::\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\n[1, 2, 3].filter(x => x > 1)[0];\n\n[1, 2, 3].filter(x => x > 1).at(0);\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n[1, 2, 3].find(x => x > 1);\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you intentionally use patterns like `.filter(callback)[0]` to execute side effects in `callback` on all array elements, you will want to avoid this rule.\n"
        }
    ]
}