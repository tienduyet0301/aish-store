{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-meaningless-void-operator.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow the `void` operator except when used to discard a value.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-meaningless-void-operator** for documentation.\n\n`void` in TypeScript refers to a function return that is meant to be ignored.\nThe `void` operator is a useful tool to convey the programmer's intent to discard a value.\nFor example, it is recommended as one way of suppressing [`@typescript-eslint/no-floating-promises`](./no-floating-promises.mdx) instead of adding `.catch()` to a promise.\n\nThis rule helps an authors catch API changes where previously a value was being discarded at a call site, but the callee changed so it no longer returns a value.\nWhen combined with [no-unused-expressions](https://eslint.org/docs/rules/no-unused-expressions), it also helps _readers_ of the code by ensuring consistency: a statement that looks like `void foo();` is **always** discarding a return value, and a statement that looks like `foo();` is **never** discarding a return value.\nThis rule reports on any `void` operator whose argument is already of type `void` or `undefined`.\n\n## Examples\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nvoid (() => {})();\n\nfunction foo() {}\nvoid foo();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\n(() => {})();\n\nfunction foo() {}\nfoo(); // nothing to discard\n\nfunction bar(x: number) {\n  void x; // discarding a number\n  return 2;\n}\nvoid bar(1); // discarding a number\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `checkNever`\n\n{/* insert option description */}\n\n## When Not To Use It\n\nIf you don't mind extra `void`s in your project, you can avoid this rule.\n"
        }
    ]
}