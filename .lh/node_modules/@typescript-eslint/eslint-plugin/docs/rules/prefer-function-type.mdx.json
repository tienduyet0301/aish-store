{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/prefer-function-type.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce using function types instead of interfaces with call signatures.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/prefer-function-type** for documentation.\n\nTypeScript allows for two common ways to declare a type for a function:\n\n- Function type: `() => string`\n- Object type with a signature: `{ (): string }`\n\nThe function type form is generally preferred when possible for being more succinct.\n\nThis rule suggests using a function type instead of an interface or object type literal with a single call signature.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\ninterface Example {\n  (): string;\n}\n```\n\n```ts\nfunction foo(example: { (): number }): number {\n  return example();\n}\n```\n\n```ts\ninterface ReturnsSelf {\n  // returns the function itself, not the `this` argument.\n  (arg: string): this;\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\ntype Example = () => string;\n```\n\n```ts\nfunction foo(example: () => number): number {\n  return bar();\n}\n```\n\n```ts\n// returns the function itself, not the `this` argument.\ntype ReturnsSelf = (arg: string) => ReturnsSelf;\n```\n\n```ts\nfunction foo(bar: { (): string; baz: number }): string {\n  return bar();\n}\n```\n\n```ts\ninterface Foo {\n  bar: string;\n}\ninterface Bar extends Foo {\n  (): void;\n}\n```\n\n```ts\n// multiple call signatures (overloads) is allowed:\ninterface Overloaded {\n  (data: string): number;\n  (id: number): string;\n}\n// this is equivelent to Overloaded interface.\ntype Intersection = ((data: string) => number) & ((id: number) => string);\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you specifically want to use an interface or type literal with a single call signature for stylistic reasons, you can avoid this rule.\n\nThis rule has a known edge case of sometimes triggering on global augmentations such as `interface Function`.\nThese edge cases are rare and often symptomatic of odd code.\nWe recommend you use an [inline ESLint disable comment](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1).\nSee [#454](https://github.com/typescript-eslint/typescript-eslint/issues/454) for details.\n"
        }
    ]
}