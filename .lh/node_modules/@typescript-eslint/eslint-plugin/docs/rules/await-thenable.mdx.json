{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/await-thenable.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow awaiting a value that is not a Thenable.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/await-thenable** for documentation.\n\nA \"Thenable\" value is an object which has a `then` method, such as a Promise.\nThe [`await` keyword](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await) is generally used to retrieve the result of calling a Thenable's `then` method.\n\nIf the `await` keyword is used on a value that is not a Thenable, the value is directly resolved, but will still pause execution until the next microtask.\nWhile doing so is valid JavaScript, it is often a programmer error, such as forgetting to add parenthesis to call a function that returns a Promise.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nawait 'value';\n\nconst createValue = () => 'value';\nawait createValue();\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nawait Promise.resolve('value');\n\nconst createValue = async () => 'value';\nawait createValue();\n```\n\n</TabItem>\n</Tabs>\n\n## Async Iteration (`for await...of` Loops)\n\nThis rule also inspects [`for await...of` statements](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of), and reports if the value being iterated over is not async-iterable.\n\n:::info[Why does the rule report on `for await...of` loops used on an array of Promises?]\n\nWhile `for await...of` can be used with synchronous iterables, and it will await each promise produced by the iterable, it is inadvisable to do so.\nThere are some tiny nuances that you may want to consider.\n\nThe biggest difference between using `for await...of` and using `for...of` (apart from awaiting each result yourself) is error handling.\nWhen an error occurs within the loop body, `for await...of` does _not_ close the original sync iterable, while `for...of` does.\nFor detailed examples of this, see the [MDN documentation on using `for await...of` with sync-iterables](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of#iterating_over_sync_iterables_and_generators).\n\nAlso consider whether you need sequential awaiting at all. Using `for await...of` may obscure potential opportunities for concurrent processing, such as those reported by [`no-await-in-loop`](https://eslint.org/docs/latest/rules/no-await-in-loop). Consider instead using one of the [promise concurrency methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#promise_concurrency) for better performance.\n\n:::\n\n### Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nasync function syncIterable() {\n  const arrayOfValues = [1, 2, 3];\n  for await (const value of arrayOfValues) {\n    console.log(value);\n  }\n}\n\nasync function syncIterableOfPromises() {\n  const arrayOfPromises = [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  for await (const promisedValue of arrayOfPromises) {\n    console.log(promisedValue);\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nasync function syncIterable() {\n  const arrayOfValues = [1, 2, 3];\n  for (const value of arrayOfValues) {\n    console.log(value);\n  }\n}\n\nasync function syncIterableOfPromises() {\n  const arrayOfPromises = [\n    Promise.resolve(1),\n    Promise.resolve(2),\n    Promise.resolve(3),\n  ];\n  for (const promisedValue of await Promise.all(arrayOfPromises)) {\n    console.log(promisedValue);\n  }\n}\n\nasync function validUseOfForAwaitOnAsyncIterable() {\n  async function* yieldThingsAsynchronously() {\n    yield 1;\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    yield 2;\n  }\n\n  for await (const promisedValue of yieldThingsAsynchronously()) {\n    console.log(promisedValue);\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\n## Explicit Resource Management (`await using` Statements)\n\nThis rule also inspects [`await using` statements](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html#using-declarations-and-explicit-resource-management).\nIf the disposable being used is not async-disposable, an `await using` statement is unnecessary.\n\n### Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfunction makeSyncDisposable(): Disposable {\n  return {\n    [Symbol.dispose](): void {\n      // Dispose of the resource\n    },\n  };\n}\n\nasync function shouldNotAwait() {\n  await using resource = makeSyncDisposable();\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfunction makeSyncDisposable(): Disposable {\n  return {\n    [Symbol.dispose](): void {\n      // Dispose of the resource\n    },\n  };\n}\n\nasync function shouldNotAwait() {\n  using resource = makeSyncDisposable();\n}\n\nfunction makeAsyncDisposable(): AsyncDisposable {\n  return {\n    async [Symbol.asyncDispose](): Promise<void> {\n      // Dispose of the resource asynchronously\n    },\n  };\n}\n\nasync function shouldAwait() {\n  await using resource = makeAsyncDisposable();\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf you want to allow code to `await` non-Promise values.\nFor example, if your framework is in transition from one style of asynchronous code to another, it may be useful to include `await`s unnecessarily.\nThis is generally not preferred but can sometimes be useful for visual consistency.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n"
        }
    ]
}