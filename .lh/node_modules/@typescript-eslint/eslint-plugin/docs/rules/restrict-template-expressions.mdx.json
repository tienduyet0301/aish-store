{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/restrict-template-expressions.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891982636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce template literal expressions to be of `string` type.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/restrict-template-expressions** for documentation.\n\nJavaScript automatically [converts an object to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_coercion) in a string context, such as when concatenating it with a string using `+` or embedding it in a template literal using `${}`.\nThe default `toString()` method of objects uses the format `\"[object Object]\"`, which is often not what was intended.\nThis rule reports on values used in a template literal string that aren't strings, optionally allowing other data types that provide useful stringification results.\n\n:::note\n\nThe default settings of this rule intentionally do not allow objects with a custom `toString()` method to be used in template literals, because the stringification result may not be user-friendly.\n\nFor example, arrays have a custom [`toString()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) method, which only calls `join()` internally, which joins the array elements with commas. This means that (1) array elements are not necessarily stringified to useful results (2) the commas don't have spaces after them, making the result not user-friendly. The best way to format arrays is to use [`Intl.ListFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat), which even supports adding the \"and\" conjunction where necessary.\nYou must explicitly call `object.toString()` if you want to use this object in a template literal, or turn on the `allowArray` option to specifically allow arrays.\nThe [`no-base-to-string`](./no-base-to-string.mdx) rule can be used to guard this case against producing `\"[object Object]\"` by accident.\n\n:::\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nconst arg1 = [1, 2];\nconst msg1 = `arg1 = ${arg1}`;\n\nconst arg2 = { name: 'Foo' };\nconst msg2 = `arg2 = ${arg2 || null}`;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nconst arg = 'foo';\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'default'}`;\n\nconst stringWithKindProp: string & { _kind?: 'MyString' } = 'foo';\nconst msg3 = `stringWithKindProp = ${stringWithKindProp}`;\n```\n\n</TabItem>\n</Tabs>\n\n## Options\n\n### `allowNumber`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowNumber: true }`:\n\n```ts option='{ \"allowNumber\": true }' showPlaygroundButton\nconst arg = 123;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'zero'}`;\n```\n\nThis option controls both numbers and BigInts.\n\nWe recommend avoiding using this option if you use any floating point numbers.\nAlthough `` `${1}` `` evaluates to `'1'`, `` `${0.1 + 0.2}` `` evaluates to `'0.30000000000000004'`.\nConsider using [`.toFixed()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) or [`.toPrecision()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) instead.\n\n### `allowBoolean`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowBoolean: true }`:\n\n```ts option='{ \"allowBoolean\": true }' showPlaygroundButton\nconst arg = true;\nconst msg1 = `arg = ${arg}`;\nconst msg2 = `arg = ${arg || 'not truthy'}`;\n```\n\n### `allowAny`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowAny: true }`:\n\n```ts option='{ \"allowAny\": true }' showPlaygroundButton\nconst user = JSON.parse('{ \"name\": \"foo\" }');\nconst msg1 = `arg = ${user.name}`;\nconst msg2 = `arg = ${user.name || 'the user with no name'}`;\n```\n\n### `allowNullish`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowNullish: true }`:\n\n```ts option='{ \"allowNullish\": true }' showPlaygroundButton\nconst arg = condition ? 'ok' : null;\nconst msg1 = `arg = ${arg}`;\n```\n\n### `allowRegExp`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowRegExp: true }`:\n\n```ts option='{ \"allowRegExp\": true }' showPlaygroundButton\nconst arg = new RegExp('foo');\nconst msg1 = `arg = ${arg}`;\n```\n\n```ts option='{ \"allowRegExp\": true }' showPlaygroundButton\nconst arg = /foo/;\nconst msg1 = `arg = ${arg}`;\n```\n\n### `allowNever`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowNever: true }`:\n\n```ts option='{ \"allowNever\": true }' showPlaygroundButton\nconst arg = 'something';\nconst msg1 = typeof arg === 'string' ? arg : `arg = ${arg}`;\n```\n\n### `allowArray`\n\n{/* insert option description */}\n\nExamples of additional **correct** code for this rule with `{ allowArray: true }`:\n\n```ts option='{ \"allowArray\": true }' showPlaygroundButton\nconst arg = ['foo', 'bar'];\nconst msg1 = `arg = ${arg}`;\n```\n\n### `allow`\n\n{/* insert option description */}\n\nThis option takes the shared [`TypeOrValueSpecifier` format](/packages/type-utils/type-or-value-specifier).\n\nExamples of additional **correct** code for this rule with the default option `{ allow: [{ from: 'lib', name: 'Error' }, { from: 'lib', name: 'URL' }, { from: 'lib', name: 'URLSearchParams' }] }`:\n\n```ts showPlaygroundButton\nconst error = new Error();\nconst msg1 = `arg = ${error}`;\n```\n\n## When Not To Use It\n\nIf you're not worried about incorrectly stringifying non-string values in template literals, then you likely don't need this rule.\n\n## Related To\n\n- [`no-base-to-string`](./no-base-to-string.mdx)\n- [`restrict-plus-operands`](./restrict-plus-operands.mdx)\n"
        }
    ]
}