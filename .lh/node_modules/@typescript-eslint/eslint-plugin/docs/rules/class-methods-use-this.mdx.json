{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/class-methods-use-this.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891979305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Enforce that class methods utilize `this`.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/class-methods-use-this** for documentation.\n\nIt adds support for ignoring `override` methods and/or methods on classes that implement an interface. It also supports auto-accessor properties.\n\n## Options\n\nThis rule adds the following options:\n\n```ts\ninterface Options extends BaseClassMethodsUseThisOptions {\n  ignoreOverrideMethods?: boolean;\n  ignoreClassesThatImplementAnInterface?: boolean | 'public-fields';\n}\n\nconst defaultOptions: Options = {\n  ...baseClassMethodsUseThisOptions,\n  ignoreOverrideMethods: false,\n  ignoreClassesThatImplementAnInterface: false,\n};\n```\n\n### `ignoreOverrideMethods`\n\n{/* insert option description */}\n\nExample of correct code when `ignoreOverrideMethods` is set to `true`:\n\n```ts option='{ \"ignoreOverrideMethods\": true }' showPlaygroundButton\nabstract class Base {\n  abstract method(): void;\n  abstract property: () => void;\n}\n\nclass Derived extends Base {\n  override method() {}\n  override property = () => {};\n}\n```\n\n### `ignoreClassesThatImplementAnInterface`\n\n{/* insert option description */}\n\nIf specified, it can be either:\n\n- `true`: Ignore all classes that implement an interface\n- `'public-fields'`: Ignore only the public fields of classes that implement an interface\n\nNote that this option applies to all class members, not just those defined in the interface.\n\n#### `true`\n\nExamples of code when `ignoreClassesThatImplementAnInterface` is set to `true`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ignoreClassesThatImplementAnInterface\": true }' showPlaygroundButton\nclass Standalone {\n  method() {}\n  property = () => {};\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ignoreClassesThatImplementAnInterface\": true }' showPlaygroundButton\ninterface Base {\n  method(): void;\n}\n\nclass Derived implements Base {\n  method() {}\n  property = () => {};\n}\n```\n\n</TabItem>\n</Tabs>\n\n#### `'public-fields'`\n\nExample of incorrect code when `ignoreClassesThatImplementAnInterface` is set to `'public-fields'`:\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts option='{ \"ignoreClassesThatImplementAnInterface\": \"public-fields\" }' showPlaygroundButton\ninterface Base {\n  method(): void;\n}\n\nclass Derived implements Base {\n  method() {}\n  property = () => {};\n\n  private privateMethod() {}\n  private privateProperty = () => {};\n\n  protected protectedMethod() {}\n  protected protectedProperty = () => {};\n}\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts option='{ \"ignoreClassesThatImplementAnInterface\": \"public-fields\" }'\ninterface Base {\n  method(): void;\n}\n\nclass Derived implements Base {\n  method() {}\n  property = () => {};\n}\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project dynamically changes `this` scopes around in a way TypeScript has difficulties modeling, this rule may not be viable to use.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n"
        }
    ]
}