{
    "sourceFile": "node_modules/@typescript-eslint/eslint-plugin/docs/rules/no-non-null-asserted-optional-chain.mdx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891980823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "---\ndescription: 'Disallow non-null assertions after an optional chain expression.'\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n> 🛑 This file is source code, not the primary documentation location! 🛑\n>\n> See **https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain** for documentation.\n\n`?.` optional chain expressions provide `undefined` if an object is `null` or `undefined`.\nUsing a `!` non-null assertion to assert the result of an `?.` optional chain expression is non-nullable is likely wrong.\n\n> Most of the time, either the object was not nullable and did not need the `?.` for its property lookup, or the `!` is incorrect and introducing a type safety hole.\n\n## Examples\n\n<Tabs>\n<TabItem value=\"❌ Incorrect\">\n\n```ts\nfoo?.bar!;\nfoo?.bar()!;\n```\n\n</TabItem>\n<TabItem value=\"✅ Correct\">\n\n```ts\nfoo?.bar;\nfoo?.bar();\n```\n\n</TabItem>\n</Tabs>\n\n## When Not To Use It\n\nIf your project's types don't yet fully describe whether certain values may be nullable, such as if you're transitioning to `strictNullChecks`, this rule might create many false reports.\nYou might consider using [ESLint disable comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1) for those specific situations instead of completely disabling this rule.\n\n## Further Reading\n\n- [TypeScript 3.7 Release Notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n- [Optional Chaining Proposal](https://github.com/tc39/proposal-optional-chaining/)\n"
        }
    ]
}