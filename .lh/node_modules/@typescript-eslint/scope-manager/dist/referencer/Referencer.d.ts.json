{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/referencer/Referencer.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891993529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Lib, TSESTree } from '@typescript-eslint/types';\nimport type { Scope } from '../scope';\nimport type { ScopeManager } from '../ScopeManager';\nimport type { ReferenceImplicitGlobal } from './Reference';\nimport type { VisitorOptions } from './Visitor';\nimport { Visitor } from './Visitor';\nexport interface ReferencerOptions extends VisitorOptions {\n    jsxFragmentName: string | null;\n    jsxPragma: string | null;\n    lib: Lib[];\n}\nexport declare class Referencer extends Visitor {\n    #private;\n    readonly scopeManager: ScopeManager;\n    constructor(options: ReferencerOptions, scopeManager: ScopeManager);\n    private populateGlobalsFromLib;\n    close(node: TSESTree.Node): void;\n    currentScope(): Scope;\n    currentScope(throwOnNull: true): Scope | null;\n    referencingDefaultValue(pattern: TSESTree.Identifier, assignments: (TSESTree.AssignmentExpression | TSESTree.AssignmentPattern)[], maybeImplicitGlobal: ReferenceImplicitGlobal | null, init: boolean): void;\n    /**\n     * Searches for a variable named \"name\" in the upper scopes and adds a pseudo-reference from itself to itself\n     */\n    private referenceInSomeUpperScope;\n    private referenceJsxFragment;\n    private referenceJsxPragma;\n    protected visitClass(node: TSESTree.ClassDeclaration | TSESTree.ClassExpression): void;\n    protected visitForIn(node: TSESTree.ForInStatement | TSESTree.ForOfStatement): void;\n    protected visitFunction(node: TSESTree.ArrowFunctionExpression | TSESTree.FunctionDeclaration | TSESTree.FunctionExpression | TSESTree.TSDeclareFunction | TSESTree.TSEmptyBodyFunctionExpression): void;\n    protected visitFunctionParameterTypeAnnotation(node: TSESTree.Parameter): void;\n    protected visitJSXElement(node: TSESTree.JSXClosingElement | TSESTree.JSXOpeningElement): void;\n    protected visitProperty(node: TSESTree.Property): void;\n    protected visitType(node: TSESTree.Node | null | undefined): void;\n    protected visitTypeAssertion(node: TSESTree.TSAsExpression | TSESTree.TSSatisfiesExpression | TSESTree.TSTypeAssertion): void;\n    protected ArrowFunctionExpression(node: TSESTree.ArrowFunctionExpression): void;\n    protected AssignmentExpression(node: TSESTree.AssignmentExpression): void;\n    protected BlockStatement(node: TSESTree.BlockStatement): void;\n    protected BreakStatement(): void;\n    protected CallExpression(node: TSESTree.CallExpression): void;\n    protected CatchClause(node: TSESTree.CatchClause): void;\n    protected ClassDeclaration(node: TSESTree.ClassDeclaration): void;\n    protected ClassExpression(node: TSESTree.ClassExpression): void;\n    protected ContinueStatement(): void;\n    protected ExportAllDeclaration(): void;\n    protected ExportDefaultDeclaration(node: TSESTree.ExportDefaultDeclaration): void;\n    protected ExportNamedDeclaration(node: TSESTree.ExportNamedDeclaration): void;\n    protected ForInStatement(node: TSESTree.ForInStatement): void;\n    protected ForOfStatement(node: TSESTree.ForOfStatement): void;\n    protected ForStatement(node: TSESTree.ForStatement): void;\n    protected FunctionDeclaration(node: TSESTree.FunctionDeclaration): void;\n    protected FunctionExpression(node: TSESTree.FunctionExpression): void;\n    protected Identifier(node: TSESTree.Identifier): void;\n    protected ImportAttribute(): void;\n    protected ImportDeclaration(node: TSESTree.ImportDeclaration): void;\n    protected JSXAttribute(node: TSESTree.JSXAttribute): void;\n    protected JSXClosingElement(node: TSESTree.JSXClosingElement): void;\n    protected JSXFragment(node: TSESTree.JSXFragment): void;\n    protected JSXIdentifier(node: TSESTree.JSXIdentifier): void;\n    protected JSXMemberExpression(node: TSESTree.JSXMemberExpression): void;\n    protected JSXOpeningElement(node: TSESTree.JSXOpeningElement): void;\n    protected LabeledStatement(node: TSESTree.LabeledStatement): void;\n    protected MemberExpression(node: TSESTree.MemberExpression): void;\n    protected MetaProperty(): void;\n    protected NewExpression(node: TSESTree.NewExpression): void;\n    protected PrivateIdentifier(): void;\n    protected Program(node: TSESTree.Program): void;\n    protected Property(node: TSESTree.Property): void;\n    protected SwitchStatement(node: TSESTree.SwitchStatement): void;\n    protected TaggedTemplateExpression(node: TSESTree.TaggedTemplateExpression): void;\n    protected TSAsExpression(node: TSESTree.TSAsExpression): void;\n    protected TSDeclareFunction(node: TSESTree.TSDeclareFunction): void;\n    protected TSEmptyBodyFunctionExpression(node: TSESTree.TSEmptyBodyFunctionExpression): void;\n    protected TSEnumDeclaration(node: TSESTree.TSEnumDeclaration): void;\n    protected TSExportAssignment(node: TSESTree.TSExportAssignment): void;\n    protected TSImportEqualsDeclaration(node: TSESTree.TSImportEqualsDeclaration): void;\n    protected TSInstantiationExpression(node: TSESTree.TSInstantiationExpression): void;\n    protected TSInterfaceDeclaration(node: TSESTree.TSInterfaceDeclaration): void;\n    protected TSModuleDeclaration(node: TSESTree.TSModuleDeclaration): void;\n    protected TSSatisfiesExpression(node: TSESTree.TSSatisfiesExpression): void;\n    protected TSTypeAliasDeclaration(node: TSESTree.TSTypeAliasDeclaration): void;\n    protected TSTypeAssertion(node: TSESTree.TSTypeAssertion): void;\n    protected UpdateExpression(node: TSESTree.UpdateExpression): void;\n    protected VariableDeclaration(node: TSESTree.VariableDeclaration): void;\n    protected WithStatement(node: TSESTree.WithStatement): void;\n    private visitExpressionTarget;\n}\n//# sourceMappingURL=Referencer.d.ts.map"
        }
    ]
}