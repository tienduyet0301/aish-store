{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/referencer/Reference.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891993506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Reference = exports.ReferenceTypeFlag = exports.ReferenceFlag = void 0;\nconst ID_1 = require(\"../ID\");\nvar ReferenceFlag;\n(function (ReferenceFlag) {\n    ReferenceFlag[ReferenceFlag[\"Read\"] = 1] = \"Read\";\n    ReferenceFlag[ReferenceFlag[\"Write\"] = 2] = \"Write\";\n    ReferenceFlag[ReferenceFlag[\"ReadWrite\"] = 3] = \"ReadWrite\";\n})(ReferenceFlag || (exports.ReferenceFlag = ReferenceFlag = {}));\nconst generator = (0, ID_1.createIdGenerator)();\nvar ReferenceTypeFlag;\n(function (ReferenceTypeFlag) {\n    ReferenceTypeFlag[ReferenceTypeFlag[\"Value\"] = 1] = \"Value\";\n    ReferenceTypeFlag[ReferenceTypeFlag[\"Type\"] = 2] = \"Type\";\n})(ReferenceTypeFlag || (exports.ReferenceTypeFlag = ReferenceTypeFlag = {}));\n/**\n * A Reference represents a single occurrence of an identifier in code.\n */\nclass Reference {\n    /**\n     * A unique ID for this instance - primarily used to help debugging and testing\n     */\n    $id = generator();\n    /**\n     * The read-write mode of the reference.\n     */\n    #flag;\n    /**\n     * Reference to the enclosing Scope.\n     * @public\n     */\n    from;\n    /**\n     * Identifier syntax node.\n     * @public\n     */\n    identifier;\n    /**\n     * `true` if this writing reference is a variable initializer or a default value.\n     * @public\n     */\n    init;\n    maybeImplicitGlobal;\n    /**\n     * The {@link Variable} object that this reference refers to. If such variable was not defined, this is `null`.\n     * @public\n     */\n    resolved;\n    /**\n     * If reference is writeable, this is the node being written to it.\n     * @public\n     */\n    writeExpr;\n    /**\n     * In some cases, a reference may be a type, value or both a type and value reference.\n     */\n    #referenceType;\n    constructor(identifier, scope, flag, writeExpr, maybeImplicitGlobal, init, referenceType = ReferenceTypeFlag.Value) {\n        this.identifier = identifier;\n        this.from = scope;\n        this.resolved = null;\n        this.#flag = flag;\n        if (this.isWrite()) {\n            this.writeExpr = writeExpr;\n            this.init = init;\n        }\n        this.maybeImplicitGlobal = maybeImplicitGlobal;\n        this.#referenceType = referenceType;\n    }\n    /**\n     * True if this reference can reference types\n     */\n    get isTypeReference() {\n        return (this.#referenceType & ReferenceTypeFlag.Type) !== 0;\n    }\n    /**\n     * True if this reference can reference values\n     */\n    get isValueReference() {\n        return (this.#referenceType & ReferenceTypeFlag.Value) !== 0;\n    }\n    /**\n     * Whether the reference is writeable.\n     * @public\n     */\n    isWrite() {\n        return !!(this.#flag & ReferenceFlag.Write);\n    }\n    /**\n     * Whether the reference is readable.\n     * @public\n     */\n    isRead() {\n        return !!(this.#flag & ReferenceFlag.Read);\n    }\n    /**\n     * Whether the reference is read-only.\n     * @public\n     */\n    isReadOnly() {\n        return this.#flag === ReferenceFlag.Read;\n    }\n    /**\n     * Whether the reference is write-only.\n     * @public\n     */\n    isWriteOnly() {\n        return this.#flag === ReferenceFlag.Write;\n    }\n    /**\n     * Whether the reference is read-write.\n     * @public\n     */\n    isReadWrite() {\n        return this.#flag === ReferenceFlag.ReadWrite;\n    }\n}\nexports.Reference = Reference;\n"
        }
    ]
}