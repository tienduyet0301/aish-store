{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/referencer/Visitor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891993720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VisitorBase = exports.Visitor = void 0;\nconst PatternVisitor_1 = require(\"./PatternVisitor\");\nconst VisitorBase_1 = require(\"./VisitorBase\");\nclass Visitor extends VisitorBase_1.VisitorBase {\n    #options;\n    constructor(optionsOrVisitor) {\n        super(optionsOrVisitor instanceof Visitor\n            ? optionsOrVisitor.#options\n            : optionsOrVisitor);\n        this.#options =\n            optionsOrVisitor instanceof Visitor\n                ? optionsOrVisitor.#options\n                : optionsOrVisitor;\n    }\n    visitPattern(node, callback, options = { processRightHandNodes: false }) {\n        // Call the callback at left hand identifier nodes, and Collect right hand nodes.\n        const visitor = new PatternVisitor_1.PatternVisitor(this.#options, node, callback);\n        visitor.visit(node);\n        // Process the right hand nodes recursively.\n        if (options.processRightHandNodes) {\n            visitor.rightHandNodes.forEach(this.visit, this);\n        }\n    }\n}\nexports.Visitor = Visitor;\nvar VisitorBase_2 = require(\"./VisitorBase\");\nObject.defineProperty(exports, \"VisitorBase\", { enumerable: true, get: function () { return VisitorBase_2.VisitorBase; } });\n"
        }
    ]
}