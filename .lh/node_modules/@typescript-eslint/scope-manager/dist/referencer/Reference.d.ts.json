{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/referencer/Reference.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891993463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESTree } from '@typescript-eslint/types';\nimport type { Scope } from '../scope';\nimport type { Variable } from '../variable';\nexport declare enum ReferenceFlag {\n    Read = 1,\n    Write = 2,\n    ReadWrite = 3\n}\nexport interface ReferenceImplicitGlobal {\n    node: TSESTree.Node;\n    pattern: TSESTree.BindingName;\n    ref?: Reference;\n}\nexport declare enum ReferenceTypeFlag {\n    Value = 1,\n    Type = 2\n}\n/**\n * A Reference represents a single occurrence of an identifier in code.\n */\nexport declare class Reference {\n    #private;\n    /**\n     * A unique ID for this instance - primarily used to help debugging and testing\n     */\n    readonly $id: number;\n    /**\n     * Reference to the enclosing Scope.\n     * @public\n     */\n    readonly from: Scope;\n    /**\n     * Identifier syntax node.\n     * @public\n     */\n    readonly identifier: TSESTree.Identifier | TSESTree.JSXIdentifier;\n    /**\n     * `true` if this writing reference is a variable initializer or a default value.\n     * @public\n     */\n    readonly init?: boolean;\n    readonly maybeImplicitGlobal?: ReferenceImplicitGlobal | null;\n    /**\n     * The {@link Variable} object that this reference refers to. If such variable was not defined, this is `null`.\n     * @public\n     */\n    resolved: Variable | null;\n    /**\n     * If reference is writeable, this is the node being written to it.\n     * @public\n     */\n    readonly writeExpr?: TSESTree.Node | null;\n    constructor(identifier: TSESTree.Identifier | TSESTree.JSXIdentifier, scope: Scope, flag: ReferenceFlag, writeExpr?: TSESTree.Node | null, maybeImplicitGlobal?: ReferenceImplicitGlobal | null, init?: boolean, referenceType?: ReferenceTypeFlag);\n    /**\n     * True if this reference can reference types\n     */\n    get isTypeReference(): boolean;\n    /**\n     * True if this reference can reference values\n     */\n    get isValueReference(): boolean;\n    /**\n     * Whether the reference is writeable.\n     * @public\n     */\n    isWrite(): boolean;\n    /**\n     * Whether the reference is readable.\n     * @public\n     */\n    isRead(): boolean;\n    /**\n     * Whether the reference is read-only.\n     * @public\n     */\n    isReadOnly(): boolean;\n    /**\n     * Whether the reference is write-only.\n     * @public\n     */\n    isWriteOnly(): boolean;\n    /**\n     * Whether the reference is read-write.\n     * @public\n     */\n    isReadWrite(): boolean;\n}\n//# sourceMappingURL=Reference.d.ts.map"
        }
    ]
}