{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/referencer/VisitorBase.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891993790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VisitorBase = void 0;\nconst visitor_keys_1 = require(\"@typescript-eslint/visitor-keys\");\nfunction isObject(obj) {\n    return typeof obj === 'object' && obj != null;\n}\nfunction isNode(node) {\n    return isObject(node) && typeof node.type === 'string';\n}\nclass VisitorBase {\n    #childVisitorKeys;\n    #visitChildrenEvenIfSelectorExists;\n    constructor(options) {\n        this.#childVisitorKeys = options.childVisitorKeys ?? visitor_keys_1.visitorKeys;\n        this.#visitChildrenEvenIfSelectorExists =\n            options.visitChildrenEvenIfSelectorExists ?? false;\n    }\n    /**\n     * Default method for visiting children.\n     * @param node the node whose children should be visited\n     * @param excludeArr a list of keys to not visit\n     */\n    visitChildren(node, excludeArr = []) {\n        if (node?.type == null) {\n            return;\n        }\n        const exclude = new Set([...excludeArr, 'parent']);\n        const children = this.#childVisitorKeys[node.type] ?? Object.keys(node);\n        for (const key of children) {\n            if (exclude.has(key)) {\n                continue;\n            }\n            const child = node[key];\n            if (!child) {\n                continue;\n            }\n            if (Array.isArray(child)) {\n                for (const subChild of child) {\n                    if (isNode(subChild)) {\n                        this.visit(subChild);\n                    }\n                }\n            }\n            else if (isNode(child)) {\n                this.visit(child);\n            }\n        }\n    }\n    /**\n     * Dispatching node.\n     */\n    visit(node) {\n        if (node?.type == null) {\n            return;\n        }\n        const visitor = this[node.type];\n        if (visitor) {\n            visitor.call(this, node);\n            if (!this.#visitChildrenEvenIfSelectorExists) {\n                return;\n            }\n        }\n        this.visitChildren(node);\n    }\n}\nexports.VisitorBase = VisitorBase;\n"
        }
    ]
}