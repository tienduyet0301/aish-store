{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/referencer/ExportVisitor.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891993233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExportVisitor = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst Visitor_1 = require(\"./Visitor\");\nclass ExportVisitor extends Visitor_1.Visitor {\n    #exportNode;\n    #referencer;\n    constructor(node, referencer) {\n        super(referencer);\n        this.#exportNode = node;\n        this.#referencer = referencer;\n    }\n    static visit(referencer, node) {\n        const exportReferencer = new ExportVisitor(node, referencer);\n        exportReferencer.visit(node);\n    }\n    ExportDefaultDeclaration(node) {\n        if (node.declaration.type === types_1.AST_NODE_TYPES.Identifier) {\n            // export default A;\n            // this could be a type or a variable\n            this.visit(node.declaration);\n        }\n        else {\n            // export const a = 1;\n            // export something();\n            // etc\n            // these not included in the scope of this visitor as they are all guaranteed to be values or declare variables\n        }\n    }\n    ExportNamedDeclaration(node) {\n        if (node.source) {\n            // export ... from 'foo';\n            // these are external identifiers so there shouldn't be references or defs\n            return;\n        }\n        if (!node.declaration) {\n            // export { x };\n            this.visitChildren(node);\n        }\n        else {\n            // export const x = 1;\n            // this is not included in the scope of this visitor as it creates a variable\n        }\n    }\n    ExportSpecifier(node) {\n        if (node.exportKind === 'type' &&\n            node.local.type === types_1.AST_NODE_TYPES.Identifier) {\n            // export { type T };\n            // type exports can only reference types\n            //\n            // we can't let this fall through to the Identifier selector because the exportKind is on this node\n            // and we don't have access to the `.parent` during scope analysis\n            this.#referencer.currentScope().referenceType(node.local);\n        }\n        else {\n            this.visit(node.local);\n        }\n    }\n    Identifier(node) {\n        if (this.#exportNode.exportKind === 'type') {\n            // export type { T };\n            // type exports can only reference types\n            this.#referencer.currentScope().referenceType(node);\n        }\n        else {\n            this.#referencer.currentScope().referenceDualValueType(node);\n        }\n    }\n}\nexports.ExportVisitor = ExportVisitor;\n"
        }
    ]
}