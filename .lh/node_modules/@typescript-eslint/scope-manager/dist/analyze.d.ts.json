{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/analyze.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891983386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Lib, SourceType, TSESTree } from '@typescript-eslint/types';\nimport type { ReferencerOptions } from './referencer';\nimport { ScopeManager } from './ScopeManager';\nexport interface AnalyzeOptions {\n    /**\n     * Known visitor keys.\n     */\n    childVisitorKeys?: ReferencerOptions['childVisitorKeys'];\n    /**\n     * Whether the whole script is executed under node.js environment.\n     * When enabled, the scope manager adds a function scope immediately following the global scope.\n     * Defaults to `false`.\n     */\n    globalReturn?: boolean;\n    /**\n     * Implied strict mode.\n     * Defaults to `false`.\n     */\n    impliedStrict?: boolean;\n    /**\n     * The identifier that's used for JSX Element creation (after transpilation).\n     * This should not be a member expression - just the root identifier (i.e. use \"React\" instead of \"React.createElement\").\n     * Defaults to `\"React\"`.\n     */\n    jsxPragma?: string | null;\n    /**\n     * The identifier that's used for JSX fragment elements (after transpilation).\n     * If `null`, assumes transpilation will always use a member on `jsxFactory` (i.e. React.Fragment).\n     * This should not be a member expression - just the root identifier (i.e. use \"h\" instead of \"h.Fragment\").\n     * Defaults to `null`.\n     */\n    jsxFragmentName?: string | null;\n    /**\n     * The lib used by the project.\n     * This automatically defines a type variable for any types provided by the configured TS libs.\n     * Defaults to ['esnext'].\n     *\n     * https://www.typescriptlang.org/tsconfig#lib\n     */\n    lib?: Lib[];\n    /**\n     * The source type of the script.\n     */\n    sourceType?: SourceType;\n    /**\n     * @deprecated This option never did what it was intended for and will be removed in a future major release.\n     */\n    emitDecoratorMetadata?: boolean;\n}\n/**\n * Takes an AST and returns the analyzed scopes.\n */\nexport declare function analyze(tree: TSESTree.Node, providedOptions?: AnalyzeOptions): ScopeManager;\n//# sourceMappingURL=analyze.d.ts.map"
        }
    ]
}