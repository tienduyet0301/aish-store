{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/scope/GlobalScope.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891994557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GlobalScope = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst assert_1 = require(\"../assert\");\nconst ImplicitGlobalVariableDefinition_1 = require(\"../definition/ImplicitGlobalVariableDefinition\");\nconst variable_1 = require(\"../variable\");\nconst ScopeBase_1 = require(\"./ScopeBase\");\nconst ScopeType_1 = require(\"./ScopeType\");\nclass GlobalScope extends ScopeBase_1.ScopeBase {\n    // note this is accessed in used in the legacy eslint-scope tests, so it can't be true private\n    implicit;\n    constructor(scopeManager, block) {\n        super(scopeManager, ScopeType_1.ScopeType.global, null, block, false);\n        this.implicit = {\n            leftToBeResolved: [],\n            set: new Map(),\n            variables: [],\n        };\n    }\n    close(scopeManager) {\n        (0, assert_1.assert)(this.leftToResolve);\n        for (const ref of this.leftToResolve) {\n            if (ref.maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {\n                // create an implicit global variable from assignment expression\n                const info = ref.maybeImplicitGlobal;\n                const node = info.pattern;\n                if (node.type === types_1.AST_NODE_TYPES.Identifier) {\n                    this.defineVariable(node.name, this.implicit.set, this.implicit.variables, node, new ImplicitGlobalVariableDefinition_1.ImplicitGlobalVariableDefinition(info.pattern, info.node));\n                }\n            }\n        }\n        this.implicit.leftToBeResolved = this.leftToResolve;\n        return super.close(scopeManager);\n    }\n    defineImplicitVariable(name, options) {\n        this.defineVariable(new variable_1.ImplicitLibVariable(this, name, options), this.set, this.variables, null, null);\n    }\n}\nexports.GlobalScope = GlobalScope;\n"
        }
    ]
}