{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/scope/FunctionScope.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891994421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FunctionScope = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst ScopeBase_1 = require(\"./ScopeBase\");\nconst ScopeType_1 = require(\"./ScopeType\");\nclass FunctionScope extends ScopeBase_1.ScopeBase {\n    constructor(scopeManager, upperScope, block, isMethodDefinition) {\n        super(scopeManager, ScopeType_1.ScopeType.function, upperScope, block, isMethodDefinition);\n        // section 9.2.13, FunctionDeclarationInstantiation.\n        // NOTE Arrow functions never have an arguments objects.\n        if (this.block.type !== types_1.AST_NODE_TYPES.ArrowFunctionExpression) {\n            this.defineVariable('arguments', this.set, this.variables, null, null);\n        }\n    }\n    // References in default parameters isn't resolved to variables which are in their function body.\n    //     const x = 1\n    //     function f(a = x) { // This `x` is resolved to the `x` in the outer scope.\n    //         const x = 2\n    //         console.log(a)\n    //     }\n    isValidResolution(ref, variable) {\n        // If `options.globalReturn` is true, `this.block` becomes a Program node.\n        if (this.block.type === types_1.AST_NODE_TYPES.Program) {\n            return true;\n        }\n        const bodyStart = this.block.body?.range[0] ?? -1;\n        // It's invalid resolution in the following case:\n        return !((variable.scope === this &&\n            ref.identifier.range[0] < bodyStart && // the reference is in the parameter part.\n            variable.defs.every(d => d.name.range[0] >= bodyStart)) // the variable is in the body.\n        );\n    }\n}\nexports.FunctionScope = FunctionScope;\n"
        }
    ]
}