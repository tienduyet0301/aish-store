{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/scope/ScopeBase.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891994820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESTree } from '@typescript-eslint/types';\nimport type { Definition } from '../definition';\nimport type { ReferenceImplicitGlobal } from '../referencer/Reference';\nimport type { ScopeManager } from '../ScopeManager';\nimport type { FunctionScope } from './FunctionScope';\nimport type { GlobalScope } from './GlobalScope';\nimport type { ModuleScope } from './ModuleScope';\nimport type { Scope } from './Scope';\nimport type { TSModuleScope } from './TSModuleScope';\nimport { Reference, ReferenceFlag } from '../referencer/Reference';\nimport { Variable } from '../variable';\nimport { ScopeType } from './ScopeType';\ntype VariableScope = FunctionScope | GlobalScope | ModuleScope | TSModuleScope;\nexport declare abstract class ScopeBase<Type extends ScopeType, Block extends TSESTree.Node, Upper extends Scope | null> {\n    #private;\n    /**\n     * A unique ID for this instance - primarily used to help debugging and testing\n     */\n    readonly $id: number;\n    /**\n     * The AST node which created this scope.\n     * @public\n     */\n    readonly block: Block;\n    /**\n     * The array of child scopes. This does not include grandchild scopes.\n     * @public\n     */\n    readonly childScopes: Scope[];\n    /**\n     * Whether this scope is created by a FunctionExpression.\n     * @public\n     */\n    readonly functionExpressionScope: boolean;\n    /**\n     * Whether 'use strict' is in effect in this scope.\n     * @public\n     */\n    isStrict: boolean;\n    /**\n     * List of {@link Reference}s that are left to be resolved (i.e. which\n     * need to be linked to the variable they refer to).\n     */\n    protected leftToResolve: Reference[] | null;\n    /**\n     * Any variable {@link Reference} found in this scope.\n     * This includes occurrences of local variables as well as variables from parent scopes (including the global scope).\n     * For local variables this also includes defining occurrences (like in a 'var' statement).\n     * In a 'function' scope this does not include the occurrences of the formal parameter in the parameter list.\n     * @public\n     */\n    readonly references: Reference[];\n    /**\n     * The map from variable names to variable objects.\n     * @public\n     */\n    readonly set: Map<string, Variable>;\n    /**\n     * The {@link Reference}s that are not resolved with this scope.\n     * @public\n     */\n    readonly through: Reference[];\n    readonly type: Type;\n    /**\n     * Reference to the parent {@link Scope}.\n     * @public\n     */\n    readonly upper: Upper;\n    /**\n     * The scoped {@link Variable}s of this scope.\n     * In the case of a 'function' scope this includes the automatic argument `arguments` as its first element, as well\n     * as all further formal arguments.\n     * This does not include variables which are defined in child scopes.\n     * @public\n     */\n    readonly variables: Variable[];\n    readonly variableScope: VariableScope;\n    constructor(scopeManager: ScopeManager, type: Type, upperScope: Upper, block: Block, isMethodDefinition: boolean);\n    private isVariableScope;\n    private shouldStaticallyCloseForGlobal;\n    close(scopeManager: ScopeManager): Scope | null;\n    shouldStaticallyClose(): boolean;\n    /**\n     * To override by function scopes.\n     * References in default parameters isn't resolved to variables which are in their function body.\n     */\n    protected defineVariable(nameOrVariable: string | Variable, set: Map<string, Variable>, variables: Variable[], node: TSESTree.Identifier | null, def: Definition | null): void;\n    protected delegateToUpperScope(ref: Reference): void;\n    protected isValidResolution(_ref: Reference, _variable: Variable): boolean;\n    private addDeclaredVariablesOfNode;\n    defineIdentifier(node: TSESTree.Identifier, def: Definition): void;\n    defineLiteralIdentifier(node: TSESTree.StringLiteral, def: Definition): void;\n    referenceDualValueType(node: TSESTree.Identifier): void;\n    referenceType(node: TSESTree.Identifier): void;\n    referenceValue(node: TSESTree.Identifier | TSESTree.JSXIdentifier, assign?: ReferenceFlag, writeExpr?: TSESTree.Expression | null, maybeImplicitGlobal?: ReferenceImplicitGlobal | null, init?: boolean): void;\n}\nexport {};\n//# sourceMappingURL=ScopeBase.d.ts.map"
        }
    ]
}