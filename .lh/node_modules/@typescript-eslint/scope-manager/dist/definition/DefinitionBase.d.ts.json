{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/definition/DefinitionBase.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891983892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESTree } from '@typescript-eslint/types';\nimport type { DefinitionType } from './DefinitionType';\nexport declare abstract class DefinitionBase<Type extends DefinitionType, Node extends TSESTree.Node, Parent extends TSESTree.Node | null, Name extends TSESTree.Node> {\n    /**\n     * A unique ID for this instance - primarily used to help debugging and testing\n     */\n    readonly $id: number;\n    readonly type: Type;\n    /**\n     * The `Identifier` node of this definition\n     * @public\n     */\n    readonly name: Name;\n    /**\n     * The enclosing node of the name.\n     * @public\n     */\n    readonly node: Node;\n    /**\n     * the enclosing statement node of the identifier.\n     * @public\n     */\n    readonly parent: Parent;\n    constructor(type: Type, name: Name, node: Node, parent: Parent);\n    /**\n     * `true` if the variable is valid in a type context, false otherwise\n     */\n    abstract readonly isTypeDefinition: boolean;\n    /**\n     * `true` if the variable is valid in a value context, false otherwise\n     */\n    abstract readonly isVariableDefinition: boolean;\n}\n//# sourceMappingURL=DefinitionBase.d.ts.map"
        }
    ]
}