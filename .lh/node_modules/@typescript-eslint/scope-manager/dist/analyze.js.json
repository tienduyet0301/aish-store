{
    "sourceFile": "node_modules/@typescript-eslint/scope-manager/dist/analyze.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891983431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.analyze = analyze;\nconst visitor_keys_1 = require(\"@typescript-eslint/visitor-keys\");\nconst referencer_1 = require(\"./referencer\");\nconst ScopeManager_1 = require(\"./ScopeManager\");\nconst DEFAULT_OPTIONS = {\n    childVisitorKeys: visitor_keys_1.visitorKeys,\n    emitDecoratorMetadata: false,\n    globalReturn: false,\n    impliedStrict: false,\n    jsxFragmentName: null,\n    jsxPragma: 'React',\n    lib: ['es2018'],\n    sourceType: 'script',\n};\n/**\n * Takes an AST and returns the analyzed scopes.\n */\nfunction analyze(tree, providedOptions) {\n    const options = {\n        childVisitorKeys: providedOptions?.childVisitorKeys ?? DEFAULT_OPTIONS.childVisitorKeys,\n        emitDecoratorMetadata: false,\n        globalReturn: providedOptions?.globalReturn ?? DEFAULT_OPTIONS.globalReturn,\n        impliedStrict: providedOptions?.impliedStrict ?? DEFAULT_OPTIONS.impliedStrict,\n        jsxFragmentName: providedOptions?.jsxFragmentName ?? DEFAULT_OPTIONS.jsxFragmentName,\n        jsxPragma: \n        // eslint-disable-next-line @typescript-eslint/internal/eqeq-nullish\n        providedOptions?.jsxPragma === undefined\n            ? DEFAULT_OPTIONS.jsxPragma\n            : providedOptions.jsxPragma,\n        lib: providedOptions?.lib ?? ['esnext'],\n        sourceType: providedOptions?.sourceType ?? DEFAULT_OPTIONS.sourceType,\n    };\n    // ensure the option is lower cased\n    options.lib = options.lib.map(l => l.toLowerCase());\n    const scopeManager = new ScopeManager_1.ScopeManager(options);\n    const referencer = new referencer_1.Referencer(options, scopeManager);\n    referencer.visit(tree);\n    return scopeManager;\n}\n"
        }
    ]
}