{
    "sourceFile": "node_modules/@typescript-eslint/visitor-keys/dist/visitor-keys.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892011517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.visitorKeys = void 0;\nconst eslintVisitorKeys = __importStar(require(\"eslint-visitor-keys\"));\n/*\n ********************************** IMPORTANT NOTE ********************************\n *                                                                                *\n * The key arrays should be sorted in the order in which you would want to visit  *\n * the child keys.                                                                *\n *                                                                                *\n *                        DO NOT SORT THEM ALPHABETICALLY!                        *\n *                                                                                *\n * They should be sorted in the order that they appear in the source code.        *\n * For example:                                                                   *\n *                                                                                *\n * class Foo extends Bar { prop: 1 }                                              *\n * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ClassDeclaration                             *\n *       ^^^ id      ^^^ superClass                                               *\n *                       ^^^^^^^^^^^ body                                         *\n *                                                                                *\n * It would be incorrect to provide the visitor keys ['body', 'id', 'superClass'] *\n * because the body comes AFTER everything else in the source code.               *\n * Instead the correct ordering would be ['id', 'superClass', 'body'].            *\n *                                                                                *\n **********************************************************************************\n */\nconst SharedVisitorKeys = (() => {\n    const FunctionType = ['typeParameters', 'params', 'returnType'];\n    const AnonymousFunction = [...FunctionType, 'body'];\n    const AbstractPropertyDefinition = [\n        'decorators',\n        'key',\n        'typeAnnotation',\n    ];\n    return {\n        AbstractPropertyDefinition: ['decorators', 'key', 'typeAnnotation'],\n        AnonymousFunction,\n        AsExpression: ['expression', 'typeAnnotation'],\n        ClassDeclaration: [\n            'decorators',\n            'id',\n            'typeParameters',\n            'superClass',\n            'superTypeArguments',\n            'implements',\n            'body',\n        ],\n        Function: ['id', ...AnonymousFunction],\n        FunctionType,\n        PropertyDefinition: [...AbstractPropertyDefinition, 'value'],\n    };\n})();\nconst additionalKeys = {\n    AccessorProperty: SharedVisitorKeys.PropertyDefinition,\n    ArrayPattern: ['decorators', 'elements', 'typeAnnotation'],\n    ArrowFunctionExpression: SharedVisitorKeys.AnonymousFunction,\n    AssignmentPattern: ['decorators', 'left', 'right', 'typeAnnotation'],\n    CallExpression: ['callee', 'typeArguments', 'arguments'],\n    ClassDeclaration: SharedVisitorKeys.ClassDeclaration,\n    ClassExpression: SharedVisitorKeys.ClassDeclaration,\n    Decorator: ['expression'],\n    ExportAllDeclaration: ['exported', 'source', 'attributes'],\n    ExportNamedDeclaration: ['declaration', 'specifiers', 'source', 'attributes'],\n    FunctionDeclaration: SharedVisitorKeys.Function,\n    FunctionExpression: SharedVisitorKeys.Function,\n    Identifier: ['decorators', 'typeAnnotation'],\n    ImportAttribute: ['key', 'value'],\n    ImportDeclaration: ['specifiers', 'source', 'attributes'],\n    ImportExpression: ['source', 'options'],\n    JSXClosingFragment: [],\n    JSXOpeningElement: ['name', 'typeArguments', 'attributes'],\n    JSXOpeningFragment: [],\n    JSXSpreadChild: ['expression'],\n    MethodDefinition: ['decorators', 'key', 'value'],\n    NewExpression: ['callee', 'typeArguments', 'arguments'],\n    ObjectPattern: ['decorators', 'properties', 'typeAnnotation'],\n    PropertyDefinition: SharedVisitorKeys.PropertyDefinition,\n    RestElement: ['decorators', 'argument', 'typeAnnotation'],\n    StaticBlock: ['body'],\n    TaggedTemplateExpression: ['tag', 'typeArguments', 'quasi'],\n    TSAbstractAccessorProperty: SharedVisitorKeys.AbstractPropertyDefinition,\n    TSAbstractKeyword: [],\n    TSAbstractMethodDefinition: ['key', 'value'],\n    TSAbstractPropertyDefinition: SharedVisitorKeys.AbstractPropertyDefinition,\n    TSAnyKeyword: [],\n    TSArrayType: ['elementType'],\n    TSAsExpression: SharedVisitorKeys.AsExpression,\n    TSAsyncKeyword: [],\n    TSBigIntKeyword: [],\n    TSBooleanKeyword: [],\n    TSCallSignatureDeclaration: SharedVisitorKeys.FunctionType,\n    TSClassImplements: ['expression', 'typeArguments'],\n    TSConditionalType: ['checkType', 'extendsType', 'trueType', 'falseType'],\n    TSConstructorType: SharedVisitorKeys.FunctionType,\n    TSConstructSignatureDeclaration: SharedVisitorKeys.FunctionType,\n    TSDeclareFunction: SharedVisitorKeys.Function,\n    TSDeclareKeyword: [],\n    TSEmptyBodyFunctionExpression: ['id', ...SharedVisitorKeys.FunctionType],\n    TSEnumBody: ['members'],\n    TSEnumDeclaration: ['id', 'body'],\n    TSEnumMember: ['id', 'initializer'],\n    TSExportAssignment: ['expression'],\n    TSExportKeyword: [],\n    TSExternalModuleReference: ['expression'],\n    TSFunctionType: SharedVisitorKeys.FunctionType,\n    TSImportEqualsDeclaration: ['id', 'moduleReference'],\n    TSImportType: ['argument', 'qualifier', 'typeArguments', 'options'],\n    TSIndexedAccessType: ['indexType', 'objectType'],\n    TSIndexSignature: ['parameters', 'typeAnnotation'],\n    TSInferType: ['typeParameter'],\n    TSInstantiationExpression: ['expression', 'typeArguments'],\n    TSInterfaceBody: ['body'],\n    TSInterfaceDeclaration: ['id', 'typeParameters', 'extends', 'body'],\n    TSInterfaceHeritage: ['expression', 'typeArguments'],\n    TSIntersectionType: ['types'],\n    TSIntrinsicKeyword: [],\n    TSLiteralType: ['literal'],\n    TSMappedType: ['key', 'constraint', 'nameType', 'typeAnnotation'],\n    TSMethodSignature: ['typeParameters', 'key', 'params', 'returnType'],\n    TSModuleBlock: ['body'],\n    TSModuleDeclaration: ['id', 'body'],\n    TSNamedTupleMember: ['label', 'elementType'],\n    TSNamespaceExportDeclaration: ['id'],\n    TSNeverKeyword: [],\n    TSNonNullExpression: ['expression'],\n    TSNullKeyword: [],\n    TSNumberKeyword: [],\n    TSObjectKeyword: [],\n    TSOptionalType: ['typeAnnotation'],\n    TSParameterProperty: ['decorators', 'parameter'],\n    TSPrivateKeyword: [],\n    TSPropertySignature: ['typeAnnotation', 'key'],\n    TSProtectedKeyword: [],\n    TSPublicKeyword: [],\n    TSQualifiedName: ['left', 'right'],\n    TSReadonlyKeyword: [],\n    TSRestType: ['typeAnnotation'],\n    TSSatisfiesExpression: SharedVisitorKeys.AsExpression,\n    TSStaticKeyword: [],\n    TSStringKeyword: [],\n    TSSymbolKeyword: [],\n    TSTemplateLiteralType: ['quasis', 'types'],\n    TSThisType: [],\n    TSTupleType: ['elementTypes'],\n    TSTypeAliasDeclaration: ['id', 'typeParameters', 'typeAnnotation'],\n    TSTypeAnnotation: ['typeAnnotation'],\n    TSTypeAssertion: ['typeAnnotation', 'expression'],\n    TSTypeLiteral: ['members'],\n    TSTypeOperator: ['typeAnnotation'],\n    TSTypeParameter: ['name', 'constraint', 'default'],\n    TSTypeParameterDeclaration: ['params'],\n    TSTypeParameterInstantiation: ['params'],\n    TSTypePredicate: ['typeAnnotation', 'parameterName'],\n    TSTypeQuery: ['exprName', 'typeArguments'],\n    TSTypeReference: ['typeName', 'typeArguments'],\n    TSUndefinedKeyword: [],\n    TSUnionType: ['types'],\n    TSUnknownKeyword: [],\n    TSVoidKeyword: [],\n};\nexports.visitorKeys = eslintVisitorKeys.unionWith(additionalKeys);\n"
        }
    ]
}