{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/useProgramFromProjectService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892003094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useProgramFromProjectService = useProgramFromProjectService;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst minimatch_1 = require(\"minimatch\");\nconst node_path_1 = __importDefault(require(\"node:path\"));\nconst node_util_1 = __importDefault(require(\"node:util\"));\nconst ts = __importStar(require(\"typescript\"));\nconst createProjectProgram_1 = require(\"./create-program/createProjectProgram\");\nconst createSourceFile_1 = require(\"./create-program/createSourceFile\");\nconst shared_1 = require(\"./create-program/shared\");\nconst validateDefaultProjectForFilesGlob_1 = require(\"./create-program/validateDefaultProjectForFilesGlob\");\nconst RELOAD_THROTTLE_MS = 250;\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:useProgramFromProjectService');\nconst serviceFileExtensions = new WeakMap();\nconst updateExtraFileExtensions = (service, extraFileExtensions) => {\n    const currentServiceFileExtensions = serviceFileExtensions.get(service) ?? [];\n    if (!node_util_1.default.isDeepStrictEqual(currentServiceFileExtensions, extraFileExtensions)) {\n        log('Updating extra file extensions: before=%s: after=%s', currentServiceFileExtensions, extraFileExtensions);\n        service.setHostConfiguration({\n            extraFileExtensions: extraFileExtensions.map(extension => ({\n                extension,\n                isMixedContent: false,\n                scriptKind: ts.ScriptKind.Deferred,\n            })),\n        });\n        serviceFileExtensions.set(service, extraFileExtensions);\n        log('Extra file extensions updated: %o', extraFileExtensions);\n    }\n};\nfunction openClientFileFromProjectService(defaultProjectMatchedFiles, isDefaultProjectAllowed, filePathAbsolute, parseSettings, serviceSettings) {\n    const opened = openClientFileAndMaybeReload();\n    log('Result from attempting to open client file: %o', opened);\n    log('Default project allowed path: %s, based on config file: %s', isDefaultProjectAllowed, opened.configFileName);\n    if (opened.configFileName) {\n        if (isDefaultProjectAllowed) {\n            throw new Error(`${parseSettings.filePath} was included by allowDefaultProject but also was found in the project service. Consider removing it from allowDefaultProject.`);\n        }\n    }\n    else {\n        const wasNotFound = `${parseSettings.filePath} was not found by the project service`;\n        const fileExtension = node_path_1.default.extname(parseSettings.filePath);\n        const extraFileExtensions = parseSettings.extraFileExtensions;\n        if (!shared_1.DEFAULT_EXTRA_FILE_EXTENSIONS.has(fileExtension) &&\n            !extraFileExtensions.includes(fileExtension)) {\n            const nonStandardExt = `${wasNotFound} because the extension for the file (\\`${fileExtension}\\`) is non-standard`;\n            if (extraFileExtensions.length > 0) {\n                throw new Error(`${nonStandardExt}. It should be added to your existing \\`parserOptions.extraFileExtensions\\`.`);\n            }\n            else {\n                throw new Error(`${nonStandardExt}. You should add \\`parserOptions.extraFileExtensions\\` to your config.`);\n            }\n        }\n        if (!isDefaultProjectAllowed) {\n            throw new Error(`${wasNotFound}. Consider either including it in the tsconfig.json or including it in allowDefaultProject.`);\n        }\n    }\n    // No a configFileName indicates this file wasn't included in a TSConfig.\n    // That means it must get its type information from the default project.\n    if (!opened.configFileName) {\n        defaultProjectMatchedFiles.add(filePathAbsolute);\n        if (defaultProjectMatchedFiles.size >\n            serviceSettings.maximumDefaultProjectFileMatchCount) {\n            const filePrintLimit = 20;\n            const filesToPrint = [...defaultProjectMatchedFiles].slice(0, filePrintLimit);\n            const truncatedFileCount = defaultProjectMatchedFiles.size - filesToPrint.length;\n            throw new Error(`Too many files (>${serviceSettings.maximumDefaultProjectFileMatchCount}) have matched the default project.${validateDefaultProjectForFilesGlob_1.DEFAULT_PROJECT_FILES_ERROR_EXPLANATION}\nMatching files:\n${filesToPrint.map(file => `- ${file}`).join('\\n')}\n${truncatedFileCount ? `...and ${truncatedFileCount} more files\\n` : ''}\nIf you absolutely need more files included, set parserOptions.projectService.maximumDefaultProjectFileMatchCount_THIS_WILL_SLOW_DOWN_LINTING to a larger value.\n`);\n        }\n    }\n    return opened;\n    function openClientFile() {\n        return serviceSettings.service.openClientFile(filePathAbsolute, parseSettings.codeFullText, \n        /* scriptKind */ undefined, parseSettings.tsconfigRootDir);\n    }\n    function openClientFileAndMaybeReload() {\n        log('Opening project service client file at path: %s', filePathAbsolute);\n        let opened = openClientFile();\n        // If no project included the file and we're not in single-run mode,\n        // we might be running in an editor with outdated file info.\n        // We can try refreshing the project service - debounced for performance.\n        if (!opened.configFileErrors &&\n            !opened.configFileName &&\n            !parseSettings.singleRun &&\n            !isDefaultProjectAllowed &&\n            performance.now() - serviceSettings.lastReloadTimestamp >\n                RELOAD_THROTTLE_MS) {\n            log('No config file found; reloading project service and retrying.');\n            serviceSettings.service.reloadProjects();\n            opened = openClientFile();\n            serviceSettings.lastReloadTimestamp = performance.now();\n        }\n        return opened;\n    }\n}\nfunction createNoProgramWithProjectService(filePathAbsolute, parseSettings, service) {\n    log('No project service information available. Creating no program.');\n    // If the project service knows about this file, this informs if of changes.\n    // Doing so ensures that:\n    // - if the file is not part of a project, we don't waste time creating a program (fast non-type-aware linting)\n    // - otherwise, we refresh the file in the project service (moderately fast, since the project is already loaded)\n    if (service.getScriptInfo(filePathAbsolute)) {\n        log('Script info available. Opening client file in project service.');\n        service.openClientFile(filePathAbsolute, parseSettings.codeFullText, \n        /* scriptKind */ undefined, parseSettings.tsconfigRootDir);\n    }\n    return (0, createSourceFile_1.createNoProgram)(parseSettings);\n}\nfunction retrieveASTAndProgramFor(filePathAbsolute, parseSettings, serviceSettings) {\n    log('Retrieving script info and then program for: %s', filePathAbsolute);\n    const scriptInfo = serviceSettings.service.getScriptInfo(filePathAbsolute);\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    const program = serviceSettings.service\n        .getDefaultProjectForFile(scriptInfo.fileName, true)\n        .getLanguageService(/*ensureSynchronized*/ true)\n        .getProgram();\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n    if (!program) {\n        log('Could not find project service program for: %s', filePathAbsolute);\n        return undefined;\n    }\n    log('Found project service program for: %s', filePathAbsolute);\n    return (0, createProjectProgram_1.createProjectProgram)(parseSettings, [program]);\n}\nfunction useProgramFromProjectService(serviceSettings, parseSettings, hasFullTypeInformation, defaultProjectMatchedFiles) {\n    // NOTE: triggers a full project reload when changes are detected\n    updateExtraFileExtensions(serviceSettings.service, parseSettings.extraFileExtensions);\n    // We don't canonicalize the filename because it caused a performance regression.\n    // See https://github.com/typescript-eslint/typescript-eslint/issues/8519\n    const filePathAbsolute = absolutify(parseSettings.filePath, serviceSettings);\n    log('Opening project service file for: %s at absolute path %s', parseSettings.filePath, filePathAbsolute);\n    const filePathRelative = node_path_1.default.relative(parseSettings.tsconfigRootDir, filePathAbsolute);\n    const isDefaultProjectAllowed = filePathMatchedBy(filePathRelative, serviceSettings.allowDefaultProject);\n    // Type-aware linting is disabled for this file.\n    // However, type-aware lint rules might still rely on its contents.\n    if (!hasFullTypeInformation && !isDefaultProjectAllowed) {\n        return createNoProgramWithProjectService(filePathAbsolute, parseSettings, serviceSettings.service);\n    }\n    // If type info was requested, we attempt to open it in the project service.\n    // By now, the file is known to be one of:\n    // - in the project service (valid configuration)\n    // - allowlisted in the default project (valid configuration)\n    // - neither, which openClientFileFromProjectService will throw an error for\n    const opened = hasFullTypeInformation &&\n        openClientFileFromProjectService(defaultProjectMatchedFiles, isDefaultProjectAllowed, filePathAbsolute, parseSettings, serviceSettings);\n    log('Opened project service file: %o', opened);\n    return retrieveASTAndProgramFor(filePathAbsolute, parseSettings, serviceSettings);\n}\nfunction absolutify(filePath, serviceSettings) {\n    return node_path_1.default.isAbsolute(filePath)\n        ? filePath\n        : node_path_1.default.join(serviceSettings.service.host.getCurrentDirectory(), filePath);\n}\nfunction filePathMatchedBy(filePath, allowDefaultProject) {\n    return !!allowDefaultProject?.some(pattern => (0, minimatch_1.minimatch)(filePath, pattern));\n}\n"
        }
    ]
}