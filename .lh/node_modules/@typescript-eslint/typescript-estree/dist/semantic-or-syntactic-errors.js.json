{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/semantic-or-syntactic-errors.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892002470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirstSemanticOrSyntacticError = getFirstSemanticOrSyntacticError;\nconst typescript_1 = require(\"typescript\");\n/**\n * By default, diagnostics from the TypeScript compiler contain all errors - regardless of whether\n * they are related to generic ECMAScript standards, or TypeScript-specific constructs.\n *\n * Therefore, we filter out all diagnostics, except for the ones we explicitly want to consider when\n * the user opts in to throwing errors on semantic issues.\n */\nfunction getFirstSemanticOrSyntacticError(program, ast) {\n    try {\n        const supportedSyntacticDiagnostics = allowlistSupportedDiagnostics(program.getSyntacticDiagnostics(ast));\n        if (supportedSyntacticDiagnostics.length > 0) {\n            return convertDiagnosticToSemanticOrSyntacticError(supportedSyntacticDiagnostics[0]);\n        }\n        const supportedSemanticDiagnostics = allowlistSupportedDiagnostics(program.getSemanticDiagnostics(ast));\n        if (supportedSemanticDiagnostics.length > 0) {\n            return convertDiagnosticToSemanticOrSyntacticError(supportedSemanticDiagnostics[0]);\n        }\n        return undefined;\n    }\n    catch (e) {\n        /**\n         * TypeScript compiler has certain Debug.fail() statements in, which will cause the diagnostics\n         * retrieval above to throw.\n         *\n         * E.g. from ast-alignment-tests\n         * \"Debug Failure. Shouldn't ever directly check a JsxOpeningElement\"\n         *\n         * For our current use-cases this is undesired behavior, so we just suppress it\n         * and log a warning.\n         */\n        /* istanbul ignore next */\n        console.warn(`Warning From TSC: \"${e.message}`); // eslint-disable-line no-console\n        /* istanbul ignore next */\n        return undefined;\n    }\n}\nfunction allowlistSupportedDiagnostics(diagnostics) {\n    return diagnostics.filter(diagnostic => {\n        switch (diagnostic.code) {\n            case 1013: // \"A rest parameter or binding pattern may not have a trailing comma.\"\n            case 1014: // \"A rest parameter must be last in a parameter list.\"\n            case 1044: // \"'{0}' modifier cannot appear on a module or namespace element.\"\n            case 1045: // \"A '{0}' modifier cannot be used with an interface declaration.\"\n            case 1048: // \"A rest parameter cannot have an initializer.\"\n            case 1049: // \"A 'set' accessor must have exactly one parameter.\"\n            case 1070: // \"'{0}' modifier cannot appear on a type member.\"\n            case 1071: // \"'{0}' modifier cannot appear on an index signature.\"\n            case 1085: // \"Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'.\"\n            case 1090: // \"'{0}' modifier cannot appear on a parameter.\"\n            case 1096: // \"An index signature must have exactly one parameter.\"\n            case 1097: // \"'{0}' list cannot be empty.\"\n            case 1098: // \"Type parameter list cannot be empty.\"\n            case 1099: // \"Type argument list cannot be empty.\"\n            case 1117: // \"An object literal cannot have multiple properties with the same name in strict mode.\"\n            case 1121: // \"Octal literals are not allowed in strict mode.\"\n            case 1123: //  \"Variable declaration list cannot be empty.\"\n            case 1141: // \"String literal expected.\"\n            case 1162: // \"An object member cannot be declared optional.\"\n            case 1164: // \"Computed property names are not allowed in enums.\"\n            case 1172: // \"'extends' clause already seen.\"\n            case 1173: // \"'extends' clause must precede 'implements' clause.\"\n            case 1175: // \"'implements' clause already seen.\"\n            case 1176: // \"Interface declaration cannot have 'implements' clause.\"\n            case 1190: // \"The variable declaration of a 'for...of' statement cannot have an initializer.\"\n            case 1196: // \"Catch clause variable type annotation must be 'any' or 'unknown' if specified.\"\n            case 1200: // \"Line terminator not permitted before arrow.\"\n            case 1206: // \"Decorators are not valid here.\"\n            case 1211: // \"A class declaration without the 'default' modifier must have a name.\"\n            case 1242: // \"'abstract' modifier can only appear on a class, method, or property declaration.\"\n            case 1246: // \"An interface property cannot have an initializer.\"\n            case 1255: // \"A definite assignment assertion '!' is not permitted in this context.\"\n            case 1308: // \"'await' expression is only allowed within an async function.\"\n            case 2364: // \"The left-hand side of an assignment expression must be a variable or a property access.\"\n            case 2369: // \"A parameter property is only allowed in a constructor implementation.\"\n            case 2452: // \"An enum member cannot have a numeric name.\"\n            case 2462: // \"A rest element must be last in a destructuring pattern.\"\n            case 8017: // \"Octal literal types must use ES2015 syntax. Use the syntax '{0}'.\"\n            case 17012: // \"'{0}' is not a valid meta-property for keyword '{1}'. Did you mean '{2}'?\"\n            case 17013: // \"Meta-property '{0}' is only allowed in the body of a function declaration, function expression, or constructor.\"\n                return true;\n        }\n        return false;\n    });\n}\nfunction convertDiagnosticToSemanticOrSyntacticError(diagnostic) {\n    return {\n        ...diagnostic,\n        message: (0, typescript_1.flattenDiagnosticMessageText)(diagnostic.messageText, typescript_1.sys.newLine),\n    };\n}\n"
        }
    ]
}