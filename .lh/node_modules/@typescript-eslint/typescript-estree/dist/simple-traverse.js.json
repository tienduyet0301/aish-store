{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/simple-traverse.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892002551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simpleTraverse = simpleTraverse;\nconst visitor_keys_1 = require(\"@typescript-eslint/visitor-keys\");\nfunction isValidNode(x) {\n    return (typeof x === 'object' &&\n        x != null &&\n        'type' in x &&\n        typeof x.type === 'string');\n}\nfunction getVisitorKeysForNode(allVisitorKeys, node) {\n    const keys = allVisitorKeys[node.type];\n    return (keys ?? []);\n}\nclass SimpleTraverser {\n    allVisitorKeys = visitor_keys_1.visitorKeys;\n    selectors;\n    setParentPointers;\n    constructor(selectors, setParentPointers = false) {\n        this.selectors = selectors;\n        this.setParentPointers = setParentPointers;\n        if (selectors.visitorKeys) {\n            this.allVisitorKeys = selectors.visitorKeys;\n        }\n    }\n    traverse(node, parent) {\n        if (!isValidNode(node)) {\n            return;\n        }\n        if (this.setParentPointers) {\n            node.parent = parent;\n        }\n        if ('enter' in this.selectors) {\n            this.selectors.enter(node, parent);\n        }\n        else if (node.type in this.selectors.visitors) {\n            this.selectors.visitors[node.type](node, parent);\n        }\n        const keys = getVisitorKeysForNode(this.allVisitorKeys, node);\n        if (keys.length < 1) {\n            return;\n        }\n        for (const key of keys) {\n            const childOrChildren = node[key];\n            if (Array.isArray(childOrChildren)) {\n                for (const child of childOrChildren) {\n                    this.traverse(child, node);\n                }\n            }\n            else {\n                this.traverse(childOrChildren, node);\n            }\n        }\n    }\n}\nfunction simpleTraverse(startingNode, options, setParentPointers = false) {\n    new SimpleTraverser(options, setParentPointers).traverse(startingNode, undefined);\n}\n"
        }
    ]
}