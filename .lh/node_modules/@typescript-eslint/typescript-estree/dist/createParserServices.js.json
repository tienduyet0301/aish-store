{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/createParserServices.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892000908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createParserServices = createParserServices;\nfunction createParserServices(astMaps, program) {\n    if (!program) {\n        return {\n            emitDecoratorMetadata: undefined,\n            experimentalDecorators: undefined,\n            isolatedDeclarations: undefined,\n            program,\n            // we always return the node maps because\n            // (a) they don't require type info and\n            // (b) they can be useful when using some of TS's internal non-type-aware AST utils\n            ...astMaps,\n        };\n    }\n    const checker = program.getTypeChecker();\n    const compilerOptions = program.getCompilerOptions();\n    return {\n        program,\n        // not set in the config is the same as off\n        emitDecoratorMetadata: compilerOptions.emitDecoratorMetadata ?? false,\n        experimentalDecorators: compilerOptions.experimentalDecorators ?? false,\n        isolatedDeclarations: compilerOptions.isolatedDeclarations ?? false,\n        ...astMaps,\n        getSymbolAtLocation: node => checker.getSymbolAtLocation(astMaps.esTreeNodeToTSNodeMap.get(node)),\n        getTypeAtLocation: node => checker.getTypeAtLocation(astMaps.esTreeNodeToTSNodeMap.get(node)),\n    };\n}\n"
        }
    ]
}