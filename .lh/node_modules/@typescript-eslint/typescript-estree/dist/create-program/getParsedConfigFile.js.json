{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/getParsedConfigFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891999440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getParsedConfigFile = getParsedConfigFile;\nconst fs = __importStar(require(\"node:fs\"));\nconst path = __importStar(require(\"node:path\"));\nconst shared_1 = require(\"./shared\");\n/**\n * Utility offered by parser to help consumers parse a config file.\n *\n * @param configFile the path to the tsconfig.json file, relative to `projectDirectory`\n * @param projectDirectory the project directory to use as the CWD, defaults to `process.cwd()`\n */\nfunction getParsedConfigFile(tsserver, configFile, projectDirectory) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/internal/eqeq-nullish\n    if (tsserver.sys === undefined) {\n        throw new Error('`getParsedConfigFile` is only supported in a Node-like environment.');\n    }\n    const parsed = tsserver.getParsedCommandLineOfConfigFile(configFile, shared_1.CORE_COMPILER_OPTIONS, {\n        fileExists: fs.existsSync,\n        getCurrentDirectory,\n        onUnRecoverableConfigFileDiagnostic: diag => {\n            throw new Error(formatDiagnostics([diag])); // ensures that `parsed` is defined.\n        },\n        readDirectory: tsserver.sys.readDirectory,\n        readFile: file => fs.readFileSync(path.isAbsolute(file) ? file : path.join(getCurrentDirectory(), file), 'utf-8'),\n        useCaseSensitiveFileNames: tsserver.sys.useCaseSensitiveFileNames,\n    });\n    if (parsed?.errors.length) {\n        throw new Error(formatDiagnostics(parsed.errors));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return parsed;\n    function getCurrentDirectory() {\n        return projectDirectory ? path.resolve(projectDirectory) : process.cwd();\n    }\n    function formatDiagnostics(diagnostics) {\n        return tsserver.formatDiagnostics(diagnostics, {\n            getCanonicalFileName: f => f,\n            getCurrentDirectory,\n            getNewLine: () => '\\n',\n        });\n    }\n}\n"
        }
    ]
}