{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createProjectProgram.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891999072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProjectProgram = createProjectProgram;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst node_utils_1 = require(\"../node-utils\");\nconst createProjectProgramError_1 = require(\"./createProjectProgramError\");\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:create-program:createProjectProgram');\n/**\n * @param parseSettings Internal settings for parsing the file\n * @returns If found, the source file corresponding to the code and the containing program\n */\nfunction createProjectProgram(parseSettings, programsForProjects) {\n    log('Creating project program for: %s', parseSettings.filePath);\n    const astAndProgram = (0, node_utils_1.firstDefined)(programsForProjects, currentProgram => (0, shared_1.getAstFromProgram)(currentProgram, parseSettings.filePath));\n    if (!astAndProgram) {\n        throw new Error((0, createProjectProgramError_1.createProjectProgramError)(parseSettings, programsForProjects).join('\\n'));\n    }\n    return astAndProgram;\n}\n"
        }
    ]
}