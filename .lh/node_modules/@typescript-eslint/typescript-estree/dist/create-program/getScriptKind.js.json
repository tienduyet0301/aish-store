{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/getScriptKind.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891999519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getScriptKind = getScriptKind;\nexports.getLanguageVariant = getLanguageVariant;\nconst node_path_1 = __importDefault(require(\"node:path\"));\nconst ts = __importStar(require(\"typescript\"));\nfunction getScriptKind(filePath, jsx) {\n    const extension = node_path_1.default.extname(filePath).toLowerCase();\n    // note - we only respect the user's jsx setting for unknown extensions\n    // this is so that we always match TS's internal script kind logic, preventing\n    // weird errors due to a mismatch.\n    // https://github.com/microsoft/TypeScript/blob/da00ba67ed1182ad334f7c713b8254fba174aeba/src/compiler/utilities.ts#L6948-L6968\n    switch (extension) {\n        case ts.Extension.Cjs:\n        case ts.Extension.Js:\n        case ts.Extension.Mjs:\n            return ts.ScriptKind.JS;\n        case ts.Extension.Cts:\n        case ts.Extension.Mts:\n        case ts.Extension.Ts:\n            return ts.ScriptKind.TS;\n        case ts.Extension.Json:\n            return ts.ScriptKind.JSON;\n        case ts.Extension.Jsx:\n            return ts.ScriptKind.JSX;\n        case ts.Extension.Tsx:\n            return ts.ScriptKind.TSX;\n        default:\n            // unknown extension, force typescript to ignore the file extension, and respect the user's setting\n            return jsx ? ts.ScriptKind.TSX : ts.ScriptKind.TS;\n    }\n}\nfunction getLanguageVariant(scriptKind) {\n    // https://github.com/microsoft/TypeScript/blob/d6e483b8dabd8fd37c00954c3f2184bb7f1eb90c/src/compiler/utilities.ts#L6281-L6285\n    switch (scriptKind) {\n        case ts.ScriptKind.JS:\n        case ts.ScriptKind.JSON:\n        case ts.ScriptKind.JSX:\n        case ts.ScriptKind.TSX:\n            return ts.LanguageVariant.JSX;\n        default:\n            return ts.LanguageVariant.Standard;\n    }\n}\n"
        }
    ]
}