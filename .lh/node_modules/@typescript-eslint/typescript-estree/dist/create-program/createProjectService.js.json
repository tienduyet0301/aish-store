{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createProjectService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891999210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProjectService = createProjectService;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst getParsedConfigFile_1 = require(\"./getParsedConfigFile\");\nconst validateDefaultProjectForFilesGlob_1 = require(\"./validateDefaultProjectForFilesGlob\");\nconst DEFAULT_PROJECT_MATCHED_FILES_THRESHOLD = 8;\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:create-program:createProjectService');\nconst logTsserverErr = (0, debug_1.default)('typescript-eslint:typescript-estree:tsserver:err');\nconst logTsserverInfo = (0, debug_1.default)('typescript-eslint:typescript-estree:tsserver:info');\nconst logTsserverPerf = (0, debug_1.default)('typescript-eslint:typescript-estree:tsserver:perf');\nconst logTsserverEvent = (0, debug_1.default)('typescript-eslint:typescript-estree:tsserver:event');\nconst doNothing = () => { };\nconst createStubFileWatcher = () => ({\n    close: doNothing,\n});\nfunction createProjectService(optionsRaw, jsDocParsingMode, tsconfigRootDir) {\n    const optionsRawObject = typeof optionsRaw === 'object' ? optionsRaw : {};\n    const options = {\n        defaultProject: 'tsconfig.json',\n        ...optionsRawObject,\n    };\n    (0, validateDefaultProjectForFilesGlob_1.validateDefaultProjectForFilesGlob)(options.allowDefaultProject);\n    // We import this lazily to avoid its cost for users who don't use the service\n    // TODO: Once we drop support for TS<5.3 we can import from \"typescript\" directly\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const tsserver = require('typescript/lib/tsserverlibrary');\n    // TODO: see getWatchProgramsForProjects\n    // We don't watch the disk, we just refer to these when ESLint calls us\n    // there's a whole separate update pass in maybeInvalidateProgram at the bottom of getWatchProgramsForProjects\n    // (this \"goes nuclear on TypeScript\")\n    const system = {\n        ...tsserver.sys,\n        clearImmediate,\n        clearTimeout,\n        setImmediate,\n        setTimeout,\n        watchDirectory: createStubFileWatcher,\n        watchFile: createStubFileWatcher,\n        // We stop loading any TypeScript plugins by default, to prevent them from attaching disk watchers\n        // See https://github.com/typescript-eslint/typescript-eslint/issues/9905\n        ...(!options.loadTypeScriptPlugins && {\n            require: () => ({\n                error: {\n                    message: 'TypeScript plugins are not required when using parserOptions.projectService.',\n                },\n                module: undefined,\n            }),\n        }),\n    };\n    const logger = {\n        close: doNothing,\n        endGroup: doNothing,\n        getLogFileName: () => undefined,\n        // The debug library doesn't use levels without creating a namespace for each.\n        // Log levels are not passed to the writer so we wouldn't be able to forward\n        // to a respective namespace.  Supporting would require an additional flag for\n        // granular control.  Defaulting to all levels for now.\n        hasLevel: () => true,\n        info(s) {\n            this.msg(s, tsserver.server.Msg.Info);\n        },\n        loggingEnabled: () => \n        // if none of the debug namespaces are enabled, then don't enable logging in tsserver\n        logTsserverInfo.enabled ||\n            logTsserverErr.enabled ||\n            logTsserverPerf.enabled,\n        msg: (s, type) => {\n            switch (type) {\n                case tsserver.server.Msg.Err:\n                    logTsserverErr(s);\n                    break;\n                case tsserver.server.Msg.Perf:\n                    logTsserverPerf(s);\n                    break;\n                default:\n                    logTsserverInfo(s);\n            }\n        },\n        perftrc(s) {\n            this.msg(s, tsserver.server.Msg.Perf);\n        },\n        startGroup: doNothing,\n    };\n    log('Creating project service with: %o', options);\n    const service = new tsserver.server.ProjectService({\n        cancellationToken: { isCancellationRequested: () => false },\n        eventHandler: logTsserverEvent.enabled\n            ? (e) => {\n                logTsserverEvent(e);\n            }\n            : undefined,\n        host: system,\n        jsDocParsingMode,\n        logger,\n        session: undefined,\n        useInferredProjectPerProjectRoot: false,\n        useSingleInferredProject: false,\n    });\n    service.setHostConfiguration({\n        preferences: {\n            includePackageJsonAutoImports: 'off',\n        },\n    });\n    log('Enabling default project: %s', options.defaultProject);\n    let configFile;\n    try {\n        configFile = (0, getParsedConfigFile_1.getParsedConfigFile)(tsserver, options.defaultProject, tsconfigRootDir);\n    }\n    catch (error) {\n        if (optionsRawObject.defaultProject) {\n            throw new Error(`Could not read project service default project '${options.defaultProject}': ${error.message}`);\n        }\n    }\n    if (configFile) {\n        service.setCompilerOptionsForInferredProjects(\n        // NOTE: The inferred projects API is not intended for source files when a tsconfig\n        // exists.  There is no API that generates an InferredProjectCompilerOptions suggesting\n        // it is meant for hard coded options passed in. Hard asserting as a work around.\n        // See https://github.com/microsoft/TypeScript/blob/27bcd4cb5a98bce46c9cdd749752703ead021a4b/src/server/protocol.ts#L1904\n        configFile.options);\n    }\n    return {\n        allowDefaultProject: options.allowDefaultProject,\n        lastReloadTimestamp: performance.now(),\n        maximumDefaultProjectFileMatchCount: options.maximumDefaultProjectFileMatchCount_THIS_WILL_SLOW_DOWN_LINTING ??\n            DEFAULT_PROJECT_MATCHED_FILES_THRESHOLD,\n        service,\n    };\n}\n"
        }
    ]
}