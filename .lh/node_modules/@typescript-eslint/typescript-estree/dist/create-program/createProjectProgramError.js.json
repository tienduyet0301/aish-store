{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createProjectProgramError.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891999142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProjectProgramError = createProjectProgramError;\nconst node_path_1 = __importDefault(require(\"node:path\"));\nconst describeFilePath_1 = require(\"./describeFilePath\");\nconst shared_1 = require(\"./shared\");\nfunction createProjectProgramError(parseSettings, programsForProjects) {\n    const describedFilePath = (0, describeFilePath_1.describeFilePath)(parseSettings.filePath, parseSettings.tsconfigRootDir);\n    return [\n        getErrorStart(describedFilePath, parseSettings),\n        ...getErrorDetails(describedFilePath, parseSettings, programsForProjects),\n    ];\n}\nfunction getErrorStart(describedFilePath, parseSettings) {\n    const relativeProjects = [...parseSettings.projects.values()].map(projectFile => (0, describeFilePath_1.describeFilePath)(projectFile, parseSettings.tsconfigRootDir));\n    const describedPrograms = relativeProjects.length === 1\n        ? ` ${relativeProjects[0]}`\n        : `\\n${relativeProjects.map(project => `- ${project}`).join('\\n')}`;\n    return `ESLint was configured to run on \\`${describedFilePath}\\` using \\`parserOptions.project\\`:${describedPrograms}`;\n}\nfunction getErrorDetails(describedFilePath, parseSettings, programsForProjects) {\n    if (programsForProjects.length === 1 &&\n        programsForProjects[0].getProjectReferences()?.length) {\n        return [\n            `That TSConfig uses project \"references\" and doesn't include \\`${describedFilePath}\\` directly, which is not supported by \\`parserOptions.project\\`.`,\n            `Either:`,\n            `- Switch to \\`parserOptions.projectService\\``,\n            `- Use an ESLint-specific TSConfig`,\n            `See the typescript-eslint docs for more info: https://typescript-eslint.io/troubleshooting/typed-linting#are-typescript-project-references-supported`,\n        ];\n    }\n    const { extraFileExtensions } = parseSettings;\n    const details = [];\n    for (const extraExtension of extraFileExtensions) {\n        if (!extraExtension.startsWith('.')) {\n            details.push(`Found unexpected extension \\`${extraExtension}\\` specified with the \\`parserOptions.extraFileExtensions\\` option. Did you mean \\`.${extraExtension}\\`?`);\n        }\n        if (shared_1.DEFAULT_EXTRA_FILE_EXTENSIONS.has(extraExtension)) {\n            details.push(`You unnecessarily included the extension \\`${extraExtension}\\` with the \\`parserOptions.extraFileExtensions\\` option. This extension is already handled by the parser by default.`);\n        }\n    }\n    const fileExtension = node_path_1.default.extname(parseSettings.filePath);\n    if (!shared_1.DEFAULT_EXTRA_FILE_EXTENSIONS.has(fileExtension)) {\n        const nonStandardExt = `The extension for the file (\\`${fileExtension}\\`) is non-standard`;\n        if (extraFileExtensions.length > 0) {\n            if (!extraFileExtensions.includes(fileExtension)) {\n                return [\n                    ...details,\n                    `${nonStandardExt}. It should be added to your existing \\`parserOptions.extraFileExtensions\\`.`,\n                ];\n            }\n        }\n        else {\n            return [\n                ...details,\n                `${nonStandardExt}. You should add \\`parserOptions.extraFileExtensions\\` to your config.`,\n            ];\n        }\n    }\n    const [describedInclusions, describedSpecifiers] = parseSettings.projects.size === 1\n        ? ['that TSConfig does not', 'that TSConfig']\n        : ['none of those TSConfigs', 'one of those TSConfigs'];\n    return [\n        ...details,\n        `However, ${describedInclusions} include this file. Either:`,\n        `- Change ESLint's list of included files to not include this file`,\n        `- Change ${describedSpecifiers} to include this file`,\n        `- Create a new TSConfig that includes this file and include it in your parserOptions.project`,\n        `See the typescript-eslint docs for more info: https://typescript-eslint.io/troubleshooting/typed-linting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file`,\n    ];\n}\n"
        }
    ]
}