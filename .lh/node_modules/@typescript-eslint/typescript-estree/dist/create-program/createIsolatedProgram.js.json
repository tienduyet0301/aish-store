{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/createIsolatedProgram.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891999003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIsolatedProgram = createIsolatedProgram;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst ts = __importStar(require(\"typescript\"));\nconst getScriptKind_1 = require(\"./getScriptKind\");\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:create-program:createIsolatedProgram');\n/**\n * @returns Returns a new source file and program corresponding to the linted code\n */\nfunction createIsolatedProgram(parseSettings) {\n    log('Getting isolated program in %s mode for: %s', parseSettings.jsx ? 'TSX' : 'TS', parseSettings.filePath);\n    const compilerHost = {\n        fileExists() {\n            return true;\n        },\n        getCanonicalFileName() {\n            return parseSettings.filePath;\n        },\n        getCurrentDirectory() {\n            return '';\n        },\n        getDefaultLibFileName() {\n            return 'lib.d.ts';\n        },\n        getDirectories() {\n            return [];\n        },\n        // TODO: Support Windows CRLF\n        getNewLine() {\n            return '\\n';\n        },\n        getSourceFile(filename) {\n            return ts.createSourceFile(filename, parseSettings.codeFullText, ts.ScriptTarget.Latest, \n            /* setParentNodes */ true, (0, getScriptKind_1.getScriptKind)(parseSettings.filePath, parseSettings.jsx));\n        },\n        readFile() {\n            return undefined;\n        },\n        useCaseSensitiveFileNames() {\n            return true;\n        },\n        writeFile() {\n            return null;\n        },\n    };\n    const program = ts.createProgram([parseSettings.filePath], {\n        jsDocParsingMode: parseSettings.jsDocParsingMode,\n        jsx: parseSettings.jsx ? ts.JsxEmit.Preserve : undefined,\n        noResolve: true,\n        target: ts.ScriptTarget.Latest,\n        ...(0, shared_1.createDefaultCompilerOptionsFromExtra)(parseSettings),\n    }, compilerHost);\n    const ast = program.getSourceFile(parseSettings.filePath);\n    if (!ast) {\n        throw new Error('Expected an ast to be returned for the single-file isolated program.');\n    }\n    return { ast, program };\n}\n"
        }
    ]
}