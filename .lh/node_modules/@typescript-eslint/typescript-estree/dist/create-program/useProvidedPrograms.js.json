{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/create-program/useProvidedPrograms.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892000321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useProvidedPrograms = useProvidedPrograms;\nexports.createProgramFromConfigFile = createProgramFromConfigFile;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst path = __importStar(require(\"node:path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst getParsedConfigFile_1 = require(\"./getParsedConfigFile\");\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:create-program:useProvidedPrograms');\nfunction useProvidedPrograms(programInstances, parseSettings) {\n    log('Retrieving ast for %s from provided program instance(s)', parseSettings.filePath);\n    let astAndProgram;\n    for (const programInstance of programInstances) {\n        astAndProgram = (0, shared_1.getAstFromProgram)(programInstance, parseSettings.filePath);\n        // Stop at the first applicable program instance\n        if (astAndProgram) {\n            break;\n        }\n    }\n    if (astAndProgram) {\n        astAndProgram.program.getTypeChecker(); // ensure parent pointers are set in source files\n        return astAndProgram;\n    }\n    const relativeFilePath = path.relative(parseSettings.tsconfigRootDir, parseSettings.filePath);\n    const [typeSource, typeSources] = parseSettings.projects.size > 0\n        ? ['project', 'project(s)']\n        : ['programs', 'program instance(s)'];\n    const errorLines = [\n        `\"parserOptions.${typeSource}\" has been provided for @typescript-eslint/parser.`,\n        `The file was not found in any of the provided ${typeSources}: ${relativeFilePath}`,\n    ];\n    throw new Error(errorLines.join('\\n'));\n}\n/**\n * Utility offered by parser to help consumers construct their own program instance.\n *\n * @param configFile the path to the tsconfig.json file, relative to `projectDirectory`\n * @param projectDirectory the project directory to use as the CWD, defaults to `process.cwd()`\n */\nfunction createProgramFromConfigFile(configFile, projectDirectory) {\n    const parsed = (0, getParsedConfigFile_1.getParsedConfigFile)(ts, configFile, projectDirectory);\n    const host = ts.createCompilerHost(parsed.options, true);\n    return ts.createProgram(parsed.fileNames, parsed.options, host);\n}\n"
        }
    ]
}