{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/convert-comments.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891998838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertComments = convertComments;\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst node_utils_1 = require(\"./node-utils\");\nconst ts_estree_1 = require(\"./ts-estree\");\n/**\n * Convert all comments for the given AST.\n * @param ast the AST object\n * @param code the TypeScript code\n * @returns the converted ESTreeComment\n * @private\n */\nfunction convertComments(ast, code) {\n    const comments = [];\n    tsutils.forEachComment(ast, (_, comment) => {\n        const type = comment.kind === ts.SyntaxKind.SingleLineCommentTrivia\n            ? ts_estree_1.AST_TOKEN_TYPES.Line\n            : ts_estree_1.AST_TOKEN_TYPES.Block;\n        const range = [comment.pos, comment.end];\n        const loc = (0, node_utils_1.getLocFor)(range, ast);\n        // both comments start with 2 characters - /* or //\n        const textStart = range[0] + 2;\n        const textEnd = comment.kind === ts.SyntaxKind.SingleLineCommentTrivia\n            ? // single line comments end at the end\n                range[1] - textStart\n            : // multiline comments end 2 characters early\n                range[1] - textStart - 2;\n        comments.push({\n            type,\n            loc,\n            range,\n            value: code.slice(textStart, textStart + textEnd),\n        });\n    }, ast);\n    return comments;\n}\n"
        }
    ]
}