{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parser-options.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892001479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { CacheDurationSeconds, DebugLevel, JSDocParsingMode, ProjectServiceOptions, SourceType } from '@typescript-eslint/types';\nimport type * as ts from 'typescript';\nimport type { TSESTree, TSESTreeToTSNode, TSNode, TSToken } from './ts-estree';\nexport type { ProjectServiceOptions } from '@typescript-eslint/types';\ninterface ParseOptions {\n    /**\n     * Specify the `sourceType`.\n     * For more details, see https://github.com/typescript-eslint/typescript-eslint/pull/9121\n     */\n    sourceType?: SourceType;\n    /**\n     * Prevents the parser from throwing an error if it receives an invalid AST from TypeScript.\n     * This case only usually occurs when attempting to lint invalid code.\n     */\n    allowInvalidAST?: boolean;\n    /**\n     * create a top-level comments array containing all comments\n     */\n    comment?: boolean;\n    /**\n     * An array of modules to turn explicit debugging on for.\n     * - 'typescript-eslint' is the same as setting the env var `DEBUG=typescript-eslint:*`\n     * - 'eslint' is the same as setting the env var `DEBUG=eslint:*`\n     * - 'typescript' is the same as setting `extendedDiagnostics: true` in your tsconfig compilerOptions\n     *\n     * For convenience, also supports a boolean:\n     * - true === ['typescript-eslint']\n     * - false === []\n     */\n    debugLevel?: DebugLevel;\n    /**\n     * Cause the parser to error if it encounters an unknown AST node type (useful for testing).\n     * This case only usually occurs when TypeScript releases new features.\n     */\n    errorOnUnknownASTType?: boolean;\n    /**\n     * Absolute (or relative to `cwd`) path to the file being parsed.\n     */\n    filePath?: string;\n    /**\n     * If you are using TypeScript version >=5.3 then this option can be used as a performance optimization.\n     *\n     * The valid values for this rule are:\n     * - `'all'` - parse all JSDoc comments, always.\n     * - `'none'` - parse no JSDoc comments, ever.\n     * - `'type-info'` - parse just JSDoc comments that are required to provide correct type-info. TS will always parse JSDoc in non-TS files, but never in TS files.\n     *\n     * If you do not rely on JSDoc tags from the TypeScript AST, then you can safely set this to `'none'` to improve performance.\n     */\n    jsDocParsingMode?: JSDocParsingMode;\n    /**\n     * Enable parsing of JSX.\n     * For more details, see https://www.typescriptlang.org/docs/handbook/jsx.html\n     *\n     * NOTE: this setting does not effect known file types (.js, .cjs, .mjs, .jsx, .ts, .mts, .cts, .tsx, .json) because the\n     * TypeScript compiler has its own internal handling for known file extensions.\n     *\n     * For the exact behavior, see https://github.com/typescript-eslint/typescript-eslint/tree/main/packages/parser#parseroptionsecmafeaturesjsx\n     */\n    jsx?: boolean;\n    /**\n     * Controls whether the `loc` information to each node.\n     * The `loc` property is an object which contains the exact line/column the node starts/ends on.\n     * This is similar to the `range` property, except it is line/column relative.\n     */\n    loc?: boolean;\n    loggerFn?: ((message: string) => void) | false;\n    /**\n     * Controls whether the `range` property is included on AST nodes.\n     * The `range` property is a [number, number] which indicates the start/end index of the node in the file contents.\n     * This is similar to the `loc` property, except this is the absolute index.\n     */\n    range?: boolean;\n    /**\n     * Set to true to create a top-level array containing all tokens from the file.\n     */\n    tokens?: boolean;\n    /**\n     * Whether deprecated AST properties should skip calling console.warn on accesses.\n     */\n    suppressDeprecatedPropertyWarnings?: boolean;\n}\ninterface ParseAndGenerateServicesOptions extends ParseOptions {\n    /**\n     * Granular control of the expiry lifetime of our internal caches.\n     * You can specify the number of seconds as an integer number, or the string\n     * 'Infinity' if you never want the cache to expire.\n     *\n     * By default cache entries will be evicted after 30 seconds, or will persist\n     * indefinitely if `disallowAutomaticSingleRunInference = false` AND the parser\n     * infers that it is a single run.\n     */\n    cacheLifetime?: {\n        /**\n         * Glob resolution for `parserOptions.project` values.\n         */\n        glob?: CacheDurationSeconds;\n    };\n    /**\n     * ESLint (and therefore typescript-eslint) is used in both \"single run\"/one-time contexts,\n     * such as an ESLint CLI invocation, and long-running sessions (such as continuous feedback\n     * on a file in an IDE).\n     *\n     * When typescript-eslint handles TypeScript Program management behind the scenes, this distinction\n     * is important because there is significant overhead to managing the so called Watch Programs\n     * needed for the long-running use-case.\n     *\n     * By default, we will use common heuristics to infer whether ESLint is being\n     * used as part of a single run. This option disables those heuristics, and\n     * therefore the performance optimizations gained by them.\n     *\n     * In other words, typescript-eslint is faster by default, and this option\n     * disables an automatic performance optimization.\n     *\n     * This setting's default value can be specified by setting a `TSESTREE_SINGLE_RUN`\n     * environment variable to `\"false\"` or `\"true\"`.\n     * Otherwise, the default value is `false`.\n     */\n    disallowAutomaticSingleRunInference?: boolean;\n    /**\n     * Causes the parser to error if the TypeScript compiler returns any unexpected syntax/semantic errors.\n     */\n    errorOnTypeScriptSyntacticAndSemanticIssues?: boolean;\n    /**\n     * When `project` is provided, this controls the non-standard file extensions which will be parsed.\n     * It accepts an array of file extensions, each preceded by a `.`.\n     *\n     * NOTE: When used with {@link projectService}, full project reloads may occur.\n     */\n    extraFileExtensions?: string[];\n    /**\n     * Absolute (or relative to `tsconfigRootDir`) path to the file being parsed.\n     * When `project` is provided, this is required, as it is used to fetch the file from the TypeScript compiler's cache.\n     */\n    filePath?: string;\n    /**\n     * Allows the user to control whether or not two-way AST node maps are preserved\n     * during the AST conversion process.\n     *\n     * By default: the AST node maps are NOT preserved, unless `project` has been specified,\n     * in which case the maps are made available on the returned `parserServices`.\n     *\n     * NOTE: If `preserveNodeMaps` is explicitly set by the user, it will be respected,\n     * regardless of whether or not `project` is in use.\n     */\n    preserveNodeMaps?: boolean;\n    /**\n     * Absolute (or relative to `tsconfigRootDir`) paths to the tsconfig(s),\n     * or `true` to find the nearest tsconfig.json to the file.\n     * If this is provided, type information will be returned.\n     *\n     * If set to `false`, `null` or `undefined` type information will not be returned.\n     *\n     * Note that {@link projectService} is now preferred.\n     */\n    project?: boolean | string | string[] | null;\n    /**\n     * If you provide a glob (or globs) to the project option, you can use this option to ignore certain folders from\n     * being matched by the globs.\n     * This accepts an array of globs to ignore.\n     *\n     * By default, this is set to [\"**\\/node_modules/**\"]\n     */\n    projectFolderIgnoreList?: string[];\n    /**\n     * Whether to create a shared TypeScript project service to power program creation.\n     */\n    projectService?: boolean | ProjectServiceOptions;\n    /**\n     * The absolute path to the root directory for all provided `project`s.\n     */\n    tsconfigRootDir?: string;\n    /**\n     * An array of one or more instances of TypeScript Program objects to be used for type information.\n     * This overrides any program or programs that would have been computed from the `project` option.\n     * All linted files must be part of the provided program(s).\n     */\n    programs?: ts.Program[] | null;\n}\nexport type TSESTreeOptions = ParseAndGenerateServicesOptions;\nexport interface ParserWeakMap<Key, ValueBase> {\n    get<Value extends ValueBase>(key: Key): Value;\n    has(key: unknown): boolean;\n}\nexport interface ParserWeakMapESTreeToTSNode<Key extends TSESTree.Node = TSESTree.Node> {\n    get<KeyBase extends Key>(key: KeyBase): TSESTreeToTSNode<KeyBase>;\n    has(key: unknown): boolean;\n}\nexport interface ParserServicesBase {\n    emitDecoratorMetadata: boolean | undefined;\n    experimentalDecorators: boolean | undefined;\n    isolatedDeclarations: boolean | undefined;\n}\nexport interface ParserServicesNodeMaps {\n    esTreeNodeToTSNodeMap: ParserWeakMapESTreeToTSNode;\n    tsNodeToESTreeNodeMap: ParserWeakMap<TSNode | TSToken, TSESTree.Node>;\n}\nexport interface ParserServicesWithTypeInformation extends ParserServicesNodeMaps, ParserServicesBase {\n    getSymbolAtLocation: (node: TSESTree.Node) => ts.Symbol | undefined;\n    getTypeAtLocation: (node: TSESTree.Node) => ts.Type;\n    program: ts.Program;\n}\nexport interface ParserServicesWithoutTypeInformation extends ParserServicesNodeMaps, ParserServicesBase {\n    program: null;\n}\nexport type ParserServices = ParserServicesWithoutTypeInformation | ParserServicesWithTypeInformation;\n//# sourceMappingURL=parser-options.d.ts.map"
        }
    ]
}