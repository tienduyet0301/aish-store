{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/convert.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891998858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as ts from 'typescript';\nimport type { TSError } from './node-utils';\nimport type { ParserWeakMap, ParserWeakMapESTreeToTSNode } from './parser-options';\nimport type { SemanticOrSyntacticError } from './semantic-or-syntactic-errors';\nimport type { TSESTree, TSNode } from './ts-estree';\nexport interface ConverterOptions {\n    allowInvalidAST?: boolean;\n    errorOnUnknownASTType?: boolean;\n    shouldPreserveNodeMaps?: boolean;\n    suppressDeprecatedPropertyWarnings?: boolean;\n}\n/**\n * Extends and formats a given error object\n * @param error the error object\n * @returns converted error object\n */\nexport declare function convertError(error: SemanticOrSyntacticError | ts.DiagnosticWithLocation): TSError;\nexport interface ASTMaps {\n    esTreeNodeToTSNodeMap: ParserWeakMapESTreeToTSNode;\n    tsNodeToESTreeNodeMap: ParserWeakMap<TSNode, TSESTree.Node>;\n}\nexport declare class Converter {\n    #private;\n    private allowPattern;\n    private readonly ast;\n    private readonly esTreeNodeToTSNodeMap;\n    private readonly options;\n    private readonly tsNodeToESTreeNodeMap;\n    /**\n     * Converts a TypeScript node into an ESTree node\n     * @param ast the full TypeScript AST\n     * @param options additional options for the conversion\n     * @returns the converted ESTreeNode\n     */\n    constructor(ast: ts.SourceFile, options?: ConverterOptions);\n    private assertModuleSpecifier;\n    private convertBindingNameWithTypeAnnotation;\n    /**\n     * Coverts body Nodes and add a directive field to StringLiterals\n     * @param nodes of ts.Node\n     * @param parent parentNode\n     * @returns Array of body statements\n     */\n    private convertBodyExpressions;\n    private convertChainExpression;\n    /**\n     * Converts a TypeScript node into an ESTree node.\n     * @param child the child ts.Node\n     * @param parent parentNode\n     * @returns the converted ESTree node\n     */\n    private convertChild;\n    /**\n     * Converts a TypeScript node into an ESTree node.\n     * @param child the child ts.Node\n     * @param parent parentNode\n     * @returns the converted ESTree node\n     */\n    private convertPattern;\n    /**\n     * Converts a child into a type annotation. This creates an intermediary\n     * TypeAnnotation node to match what Flow does.\n     * @param child The TypeScript AST node to convert.\n     * @param parent parentNode\n     * @returns The type annotation node.\n     */\n    private convertTypeAnnotation;\n    /**\n     * Converts a ts.Node's typeArguments to TSTypeParameterInstantiation node\n     * @param typeArguments ts.NodeArray typeArguments\n     * @param node parent used to create this node\n     * @returns TypeParameterInstantiation node\n     */\n    private convertTypeArgumentsToTypeParameterInstantiation;\n    /**\n     * Converts a ts.Node's typeParameters to TSTypeParameterDeclaration node\n     * @param typeParameters ts.Node typeParameters\n     * @returns TypeParameterDeclaration node\n     */\n    private convertTSTypeParametersToTypeParametersDeclaration;\n    /**\n     * Converts an array of ts.Node parameters into an array of ESTreeNode params\n     * @param parameters An array of ts.Node params to be converted\n     * @returns an array of converted ESTreeNode params\n     */\n    private convertParameters;\n    /**\n     * Converts a TypeScript node into an ESTree node.\n     * @param node the child ts.Node\n     * @param parent parentNode\n     * @param allowPattern flag to determine if patterns are allowed\n     * @returns the converted ESTree node\n     */\n    private converter;\n    private convertImportAttributes;\n    private convertJSXIdentifier;\n    private convertJSXNamespaceOrIdentifier;\n    /**\n     * Converts a TypeScript JSX node.tagName into an ESTree node.name\n     * @param node the tagName object from a JSX ts.Node\n     * @returns the converted ESTree name object\n     */\n    private convertJSXTagName;\n    private convertMethodSignature;\n    /**\n     * Uses the provided range location to adjust the location data of the given Node\n     * @param result The node that will have its location data mutated\n     * @param childRange The child node range used to expand location\n     */\n    private fixParentLocation;\n    /**\n     * Converts a TypeScript node into an ESTree node.\n     * The core of the conversion logic:\n     * Identify and convert each relevant TypeScript SyntaxKind\n     * @returns the converted ESTree node\n     */\n    private convertNode;\n    private createNode;\n    convertProgram(): TSESTree.Program;\n    /**\n     * For nodes that are copied directly from the TypeScript AST into\n     * ESTree mostly as-is. The only difference is the addition of a type\n     * property instead of a kind property. Recursively copies all children.\n     */\n    private deeplyCopy;\n    /**\n     * Fixes the exports of the given ts.Node\n     * @returns the ESTreeNode with fixed exports\n     */\n    private fixExports;\n    getASTMaps(): ASTMaps;\n    /**\n     * Register specific TypeScript node into map with first ESTree node provided\n     */\n    private registerTSNodeInNodeMap;\n}\n//# sourceMappingURL=convert.d.ts.map"
        }
    ]
}