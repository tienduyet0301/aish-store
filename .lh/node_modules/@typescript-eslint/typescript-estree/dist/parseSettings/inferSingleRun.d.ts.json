{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/inferSingleRun.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892002101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { TSESTreeOptions } from '../parser-options';\n/**\n * ESLint (and therefore typescript-eslint) is used in both \"single run\"/one-time contexts,\n * such as an ESLint CLI invocation, and long-running sessions (such as continuous feedback\n * on a file in an IDE).\n *\n * When typescript-eslint handles TypeScript Program management behind the scenes, this distinction\n * is important because there is significant overhead to managing the so called Watch Programs\n * needed for the long-running use-case. We therefore use the following logic to figure out which\n * of these contexts applies to the current execution.\n *\n * @returns Whether this is part of a single run, rather than a long-running process.\n */\nexport declare function inferSingleRun(options: TSESTreeOptions | undefined): boolean;\n//# sourceMappingURL=inferSingleRun.d.ts.map"
        }
    ]
}