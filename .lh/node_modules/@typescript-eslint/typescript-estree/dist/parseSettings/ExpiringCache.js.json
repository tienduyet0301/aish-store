{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/ExpiringCache.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892001851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpiringCache = exports.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS = void 0;\nexports.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS = 30;\nconst ZERO_HR_TIME = [0, 0];\n/**\n * A map with key-level expiration.\n */\nclass ExpiringCache {\n    #cacheDurationSeconds;\n    #map = new Map();\n    constructor(cacheDurationSeconds) {\n        this.#cacheDurationSeconds = cacheDurationSeconds;\n    }\n    clear() {\n        this.#map.clear();\n    }\n    get(key) {\n        const entry = this.#map.get(key);\n        if (entry?.value != null) {\n            if (this.#cacheDurationSeconds === 'Infinity') {\n                return entry.value;\n            }\n            const ageSeconds = process.hrtime(entry.lastSeen)[0];\n            if (ageSeconds < this.#cacheDurationSeconds) {\n                // cache hit woo!\n                return entry.value;\n            }\n            // key has expired - clean it up to free up memory\n            this.#map.delete(key);\n        }\n        // no hit :'(\n        return undefined;\n    }\n    set(key, value) {\n        this.#map.set(key, {\n            lastSeen: this.#cacheDurationSeconds === 'Infinity'\n                ? // no need to waste time calculating the hrtime in infinity mode as there's no expiry\n                    ZERO_HR_TIME\n                : process.hrtime(),\n            value,\n        });\n        return this;\n    }\n}\nexports.ExpiringCache = ExpiringCache;\n"
        }
    ]
}