{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892002009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type * as ts from 'typescript';\nimport type { ProjectServiceSettings } from '../create-program/createProjectService';\nimport type { CanonicalPath } from '../create-program/shared';\nimport type { TSESTree } from '../ts-estree';\nimport type { CacheLike } from './ExpiringCache';\ntype DebugModule = 'eslint' | 'typescript' | 'typescript-eslint';\ndeclare module 'typescript' {\n    enum JSDocParsingMode {\n    }\n}\ndeclare module 'typescript/lib/tsserverlibrary' {\n    enum JSDocParsingMode {\n    }\n}\n/**\n * Internal settings used by the parser to run on a file.\n */\nexport interface MutableParseSettings {\n    /**\n     * Prevents the parser from throwing an error if it receives an invalid AST from TypeScript.\n     */\n    allowInvalidAST: boolean;\n    /**\n     * Code of the file being parsed, or raw source file containing it.\n     */\n    code: string | ts.SourceFile;\n    /**\n     * Full text of the file being parsed.\n     */\n    codeFullText: string;\n    /**\n     * Whether the `comment` parse option is enabled.\n     */\n    comment: boolean;\n    /**\n     * If the `comment` parse option is enabled, retrieved comments.\n     */\n    comments: TSESTree.Comment[];\n    /**\n     * Which debug areas should be logged.\n     */\n    debugLevel: Set<DebugModule>;\n    /**\n     * Whether to error if TypeScript reports a semantic or syntactic error diagnostic.\n     */\n    errorOnTypeScriptSyntacticAndSemanticIssues: boolean;\n    /**\n     * Whether to error if an unknown AST node type is encountered.\n     */\n    errorOnUnknownASTType: boolean;\n    /**\n     * Any non-standard file extensions which will be parsed.\n     */\n    extraFileExtensions: string[];\n    /**\n     * Path of the file being parsed.\n     */\n    filePath: string;\n    /**\n     * Sets the external module indicator on the source file.\n     * Used by Typescript to determine if a sourceFile is an external module.\n     *\n     * needed to always parsing `mjs`/`mts` files as ESM\n     */\n    setExternalModuleIndicator?: (file: ts.SourceFile) => void;\n    /**\n     * JSDoc parsing style to pass through to TypeScript\n     */\n    jsDocParsingMode: ts.JSDocParsingMode;\n    /**\n     * Whether parsing of JSX is enabled.\n     *\n     * @remarks The applicable file extension is still required.\n     */\n    jsx: boolean;\n    /**\n     * Whether to add `loc` information to each node.\n     */\n    loc: boolean;\n    /**\n     * Log function, if not `console.log`.\n     */\n    log: (message: string) => void;\n    /**\n     * Whether two-way AST node maps are preserved during the AST conversion process.\n     */\n    preserveNodeMaps?: boolean;\n    /**\n     * One or more instances of TypeScript Program objects to be used for type information.\n     */\n    programs: Iterable<ts.Program> | null;\n    /**\n     * Normalized paths to provided project paths.\n     */\n    projects: ReadonlyMap<CanonicalPath, string>;\n    /**\n     * TypeScript server to power program creation.\n     */\n    projectService: ProjectServiceSettings | undefined;\n    /**\n     * Whether to add the `range` property to AST nodes.\n     */\n    range: boolean;\n    /**\n     * Whether this is part of a single run, rather than a long-running process.\n     */\n    singleRun: boolean;\n    /**\n     * Whether deprecated AST properties should skip calling console.warn on accesses.\n     */\n    suppressDeprecatedPropertyWarnings: boolean;\n    /**\n     * If the `tokens` parse option is enabled, retrieved tokens.\n     */\n    tokens: TSESTree.Token[] | null;\n    /**\n     * Caches searches for TSConfigs from project directories.\n     */\n    tsconfigMatchCache: CacheLike<string, string>;\n    /**\n     * The absolute path to the root directory for all provided `project`s.\n     */\n    tsconfigRootDir: string;\n}\nexport type ParseSettings = Readonly<MutableParseSettings>;\nexport {};\n//# sourceMappingURL=index.d.ts.map"
        }
    ]
}