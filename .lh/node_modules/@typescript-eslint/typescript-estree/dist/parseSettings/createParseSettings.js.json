{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/createParseSettings.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892001746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createParseSettings = createParseSettings;\nexports.clearTSConfigMatchCache = clearTSConfigMatchCache;\nexports.clearTSServerProjectService = clearTSServerProjectService;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst node_path_1 = __importDefault(require(\"node:path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst createProjectService_1 = require(\"../create-program/createProjectService\");\nconst shared_1 = require(\"../create-program/shared\");\nconst source_files_1 = require(\"../source-files\");\nconst ExpiringCache_1 = require(\"./ExpiringCache\");\nconst getProjectConfigFiles_1 = require(\"./getProjectConfigFiles\");\nconst inferSingleRun_1 = require(\"./inferSingleRun\");\nconst resolveProjectList_1 = require(\"./resolveProjectList\");\nconst warnAboutTSVersion_1 = require(\"./warnAboutTSVersion\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:parseSettings:createParseSettings');\nlet TSCONFIG_MATCH_CACHE;\nlet TSSERVER_PROJECT_SERVICE = null;\n// NOTE - we intentionally use \"unnecessary\" `?.` here because in TS<5.3 this enum doesn't exist\n// This object exists so we can centralize these for tracking and so we don't proliferate these across the file\n// https://github.com/microsoft/TypeScript/issues/56579\n/* eslint-disable @typescript-eslint/no-unnecessary-condition */\nconst JSDocParsingMode = {\n    ParseAll: ts.JSDocParsingMode?.ParseAll,\n    ParseForTypeErrors: ts.JSDocParsingMode?.ParseForTypeErrors,\n    ParseForTypeInfo: ts.JSDocParsingMode?.ParseForTypeInfo,\n    ParseNone: ts.JSDocParsingMode?.ParseNone,\n};\n/* eslint-enable @typescript-eslint/no-unnecessary-condition */\nfunction createParseSettings(code, tsestreeOptions = {}) {\n    const codeFullText = enforceCodeString(code);\n    const singleRun = (0, inferSingleRun_1.inferSingleRun)(tsestreeOptions);\n    const tsconfigRootDir = typeof tsestreeOptions.tsconfigRootDir === 'string'\n        ? tsestreeOptions.tsconfigRootDir\n        : process.cwd();\n    const passedLoggerFn = typeof tsestreeOptions.loggerFn === 'function';\n    const filePath = (0, shared_1.ensureAbsolutePath)(typeof tsestreeOptions.filePath === 'string' &&\n        tsestreeOptions.filePath !== '<input>'\n        ? tsestreeOptions.filePath\n        : getFileName(tsestreeOptions.jsx), tsconfigRootDir);\n    const extension = node_path_1.default.extname(filePath).toLowerCase();\n    const jsDocParsingMode = (() => {\n        switch (tsestreeOptions.jsDocParsingMode) {\n            case 'all':\n                return JSDocParsingMode.ParseAll;\n            case 'none':\n                return JSDocParsingMode.ParseNone;\n            case 'type-info':\n                return JSDocParsingMode.ParseForTypeInfo;\n            default:\n                return JSDocParsingMode.ParseAll;\n        }\n    })();\n    const parseSettings = {\n        loc: tsestreeOptions.loc === true,\n        range: tsestreeOptions.range === true,\n        allowInvalidAST: tsestreeOptions.allowInvalidAST === true,\n        code,\n        codeFullText,\n        comment: tsestreeOptions.comment === true,\n        comments: [],\n        debugLevel: tsestreeOptions.debugLevel === true\n            ? new Set(['typescript-eslint'])\n            : Array.isArray(tsestreeOptions.debugLevel)\n                ? new Set(tsestreeOptions.debugLevel)\n                : new Set(),\n        errorOnTypeScriptSyntacticAndSemanticIssues: false,\n        errorOnUnknownASTType: tsestreeOptions.errorOnUnknownASTType === true,\n        extraFileExtensions: Array.isArray(tsestreeOptions.extraFileExtensions) &&\n            tsestreeOptions.extraFileExtensions.every(ext => typeof ext === 'string')\n            ? tsestreeOptions.extraFileExtensions\n            : [],\n        filePath,\n        jsDocParsingMode,\n        jsx: tsestreeOptions.jsx === true,\n        log: typeof tsestreeOptions.loggerFn === 'function'\n            ? tsestreeOptions.loggerFn\n            : tsestreeOptions.loggerFn === false\n                ? () => { } // eslint-disable-line @typescript-eslint/no-empty-function\n                : console.log, // eslint-disable-line no-console\n        preserveNodeMaps: tsestreeOptions.preserveNodeMaps !== false,\n        programs: Array.isArray(tsestreeOptions.programs)\n            ? tsestreeOptions.programs\n            : null,\n        projects: new Map(),\n        projectService: tsestreeOptions.projectService ||\n            (tsestreeOptions.project &&\n                tsestreeOptions.projectService !== false &&\n                process.env.TYPESCRIPT_ESLINT_PROJECT_SERVICE === 'true')\n            ? (TSSERVER_PROJECT_SERVICE ??= (0, createProjectService_1.createProjectService)(tsestreeOptions.projectService, jsDocParsingMode, tsconfigRootDir))\n            : undefined,\n        setExternalModuleIndicator: tsestreeOptions.sourceType === 'module' ||\n            (tsestreeOptions.sourceType == null && extension === ts.Extension.Mjs) ||\n            (tsestreeOptions.sourceType == null && extension === ts.Extension.Mts)\n            ? (file) => {\n                file.externalModuleIndicator = true;\n            }\n            : undefined,\n        singleRun,\n        suppressDeprecatedPropertyWarnings: tsestreeOptions.suppressDeprecatedPropertyWarnings ??\n            process.env.NODE_ENV !== 'test',\n        tokens: tsestreeOptions.tokens === true ? [] : null,\n        tsconfigMatchCache: (TSCONFIG_MATCH_CACHE ??= new ExpiringCache_1.ExpiringCache(singleRun\n            ? 'Infinity'\n            : (tsestreeOptions.cacheLifetime?.glob ??\n                ExpiringCache_1.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS))),\n        tsconfigRootDir,\n    };\n    // debug doesn't support multiple `enable` calls, so have to do it all at once\n    if (parseSettings.debugLevel.size > 0) {\n        const namespaces = [];\n        if (parseSettings.debugLevel.has('typescript-eslint')) {\n            namespaces.push('typescript-eslint:*');\n        }\n        if (parseSettings.debugLevel.has('eslint') ||\n            // make sure we don't turn off the eslint debug if it was enabled via --debug\n            debug_1.default.enabled('eslint:*,-eslint:code-path')) {\n            // https://github.com/eslint/eslint/blob/9dfc8501fb1956c90dc11e6377b4cb38a6bea65d/bin/eslint.js#L25\n            namespaces.push('eslint:*,-eslint:code-path');\n        }\n        debug_1.default.enable(namespaces.join(','));\n    }\n    if (Array.isArray(tsestreeOptions.programs)) {\n        if (!tsestreeOptions.programs.length) {\n            throw new Error(`You have set parserOptions.programs to an empty array. This will cause all files to not be found in existing programs. Either provide one or more existing TypeScript Program instances in the array, or remove the parserOptions.programs setting.`);\n        }\n        log('parserOptions.programs was provided, so parserOptions.project will be ignored.');\n    }\n    // Providing a program or project service overrides project resolution\n    if (!parseSettings.programs && !parseSettings.projectService) {\n        parseSettings.projects = (0, resolveProjectList_1.resolveProjectList)({\n            cacheLifetime: tsestreeOptions.cacheLifetime,\n            project: (0, getProjectConfigFiles_1.getProjectConfigFiles)(parseSettings, tsestreeOptions.project),\n            projectFolderIgnoreList: tsestreeOptions.projectFolderIgnoreList,\n            singleRun: parseSettings.singleRun,\n            tsconfigRootDir,\n        });\n    }\n    // No type-aware linting which means that cross-file (or even same-file) JSDoc is useless\n    // So in this specific case we default to 'none' if no value was provided\n    if (tsestreeOptions.jsDocParsingMode == null &&\n        parseSettings.projects.size === 0 &&\n        parseSettings.programs == null &&\n        parseSettings.projectService == null) {\n        parseSettings.jsDocParsingMode = JSDocParsingMode.ParseNone;\n    }\n    (0, warnAboutTSVersion_1.warnAboutTSVersion)(parseSettings, passedLoggerFn);\n    return parseSettings;\n}\nfunction clearTSConfigMatchCache() {\n    TSCONFIG_MATCH_CACHE?.clear();\n}\nfunction clearTSServerProjectService() {\n    TSSERVER_PROJECT_SERVICE = null;\n}\n/**\n * Ensures source code is a string.\n */\nfunction enforceCodeString(code) {\n    return (0, source_files_1.isSourceFile)(code)\n        ? code.getFullText(code)\n        : typeof code === 'string'\n            ? code\n            : String(code);\n}\n/**\n * Compute the filename based on the parser options.\n *\n * Even if jsx option is set in typescript compiler, filename still has to\n * contain .tsx file extension.\n */\nfunction getFileName(jsx) {\n    return jsx ? 'estree.tsx' : 'estree.ts';\n}\n"
        }
    ]
}