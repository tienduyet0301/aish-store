{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/getProjectConfigFiles.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892001962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProjectConfigFiles = getProjectConfigFiles;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs = __importStar(require(\"node:fs\"));\nconst path = __importStar(require(\"node:path\"));\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:parseSettings:getProjectConfigFiles');\n/**\n * Checks for a matching TSConfig to a file including its parent directories,\n * permanently caching results under each directory it checks.\n *\n * @remarks\n * We don't (yet!) have a way to attach file watchers on disk, but still need to\n * cache file checks for rapid subsequent calls to fs.existsSync. See discussion\n * in https://github.com/typescript-eslint/typescript-eslint/issues/101.\n */\nfunction getProjectConfigFiles(parseSettings, project) {\n    if (project !== true) {\n        if (project == null || project === false) {\n            return null;\n        }\n        if (Array.isArray(project)) {\n            return project;\n        }\n        return [project];\n    }\n    log('Looking for tsconfig.json at or above file: %s', parseSettings.filePath);\n    let directory = path.dirname(parseSettings.filePath);\n    const checkedDirectories = [directory];\n    do {\n        log('Checking tsconfig.json path: %s', directory);\n        const tsconfigPath = path.join(directory, 'tsconfig.json');\n        const cached = parseSettings.tsconfigMatchCache.get(directory) ??\n            (fs.existsSync(tsconfigPath) && tsconfigPath);\n        if (cached) {\n            for (const directory of checkedDirectories) {\n                parseSettings.tsconfigMatchCache.set(directory, cached);\n            }\n            return [cached];\n        }\n        directory = path.dirname(directory);\n        checkedDirectories.push(directory);\n    } while (directory.length > 1 &&\n        directory.length >= parseSettings.tsconfigRootDir.length);\n    throw new Error(`project was set to \\`true\\` but couldn't find any tsconfig.json relative to '${parseSettings.filePath}' within '${parseSettings.tsconfigRootDir}'.`);\n}\n"
        }
    ]
}