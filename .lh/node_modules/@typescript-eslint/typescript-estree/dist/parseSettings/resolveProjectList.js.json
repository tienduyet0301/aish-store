{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/dist/parseSettings/resolveProjectList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892002268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clearGlobCache = clearGlobCache;\nexports.resolveProjectList = resolveProjectList;\nexports.clearGlobResolutionCache = clearGlobResolutionCache;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fast_glob_1 = require(\"fast-glob\");\nconst is_glob_1 = __importDefault(require(\"is-glob\"));\nconst shared_1 = require(\"../create-program/shared\");\nconst ExpiringCache_1 = require(\"./ExpiringCache\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:parseSettings:resolveProjectList');\nlet RESOLUTION_CACHE = null;\nfunction clearGlobCache() {\n    RESOLUTION_CACHE?.clear();\n}\n/**\n * Normalizes, sanitizes, resolves and filters the provided project paths\n */\nfunction resolveProjectList(options) {\n    const sanitizedProjects = [];\n    // Normalize and sanitize the project paths\n    if (options.project != null) {\n        for (const project of options.project) {\n            if (typeof project === 'string') {\n                sanitizedProjects.push(project);\n            }\n        }\n    }\n    if (sanitizedProjects.length === 0) {\n        return new Map();\n    }\n    const projectFolderIgnoreList = (options.projectFolderIgnoreList ?? ['**/node_modules/**'])\n        .filter(folder => typeof folder === 'string')\n        // prefix with a ! for not match glob\n        .map(folder => (folder.startsWith('!') ? folder : `!${folder}`));\n    const cacheKey = getHash({\n        project: sanitizedProjects,\n        projectFolderIgnoreList,\n        tsconfigRootDir: options.tsconfigRootDir,\n    });\n    if (RESOLUTION_CACHE == null) {\n        // note - we initialize the global cache based on the first config we encounter.\n        //        this does mean that you can't have multiple lifetimes set per folder\n        //        I doubt that anyone will really bother reconfiguring this, let alone\n        //        try to do complicated setups, so we'll deal with this later if ever.\n        RESOLUTION_CACHE = new ExpiringCache_1.ExpiringCache(options.singleRun\n            ? 'Infinity'\n            : (options.cacheLifetime?.glob ??\n                ExpiringCache_1.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS));\n    }\n    else {\n        const cached = RESOLUTION_CACHE.get(cacheKey);\n        if (cached) {\n            return cached;\n        }\n    }\n    // Transform glob patterns into paths\n    const nonGlobProjects = sanitizedProjects.filter(project => !(0, is_glob_1.default)(project));\n    const globProjects = sanitizedProjects.filter(project => (0, is_glob_1.default)(project));\n    let globProjectPaths = [];\n    if (globProjects.length > 0) {\n        // Although fast-glob supports multiple patterns, fast-glob returns arbitrary order of results\n        // to improve performance. To ensure the order is correct, we need to call fast-glob for each pattern\n        // separately and then concatenate the results in patterns' order.\n        globProjectPaths = globProjects.flatMap(pattern => (0, fast_glob_1.sync)(pattern, {\n            cwd: options.tsconfigRootDir,\n            ignore: projectFolderIgnoreList,\n        }));\n    }\n    const uniqueCanonicalProjectPaths = new Map([...nonGlobProjects, ...globProjectPaths].map(project => [\n        (0, shared_1.getCanonicalFileName)((0, shared_1.ensureAbsolutePath)(project, options.tsconfigRootDir)),\n        (0, shared_1.ensureAbsolutePath)(project, options.tsconfigRootDir),\n    ]));\n    log('parserOptions.project (excluding ignored) matched projects: %s', uniqueCanonicalProjectPaths);\n    RESOLUTION_CACHE.set(cacheKey, uniqueCanonicalProjectPaths);\n    return uniqueCanonicalProjectPaths;\n}\nfunction getHash({ project, projectFolderIgnoreList, tsconfigRootDir, }) {\n    // create a stable representation of the config\n    const hashObject = {\n        tsconfigRootDir,\n        // the project order does matter and can impact the resolved globs\n        project,\n        // the ignore order won't doesn't ever matter\n        projectFolderIgnoreList: [...projectFolderIgnoreList].sort(),\n    };\n    return (0, shared_1.createHash)(JSON.stringify(hashObject));\n}\n/**\n * Exported for testing purposes only\n * @internal\n */\nfunction clearGlobResolutionCache() {\n    RESOLUTION_CACHE?.clear();\n    RESOLUTION_CACHE = null;\n}\n"
        }
    ]
}