{
    "sourceFile": "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch/dist/esm/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892006901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { AST } from './ast.js';\ntype Platform = 'aix' | 'android' | 'darwin' | 'freebsd' | 'haiku' | 'linux' | 'openbsd' | 'sunos' | 'win32' | 'cygwin' | 'netbsd';\nexport interface MinimatchOptions {\n    nobrace?: boolean;\n    nocomment?: boolean;\n    nonegate?: boolean;\n    debug?: boolean;\n    noglobstar?: boolean;\n    noext?: boolean;\n    nonull?: boolean;\n    windowsPathsNoEscape?: boolean;\n    allowWindowsEscape?: boolean;\n    partial?: boolean;\n    dot?: boolean;\n    nocase?: boolean;\n    nocaseMagicOnly?: boolean;\n    magicalBraces?: boolean;\n    matchBase?: boolean;\n    flipNegate?: boolean;\n    preserveMultipleSlashes?: boolean;\n    optimizationLevel?: number;\n    platform?: Platform;\n    windowsNoMagicRoot?: boolean;\n}\nexport declare const minimatch: {\n    (p: string, pattern: string, options?: MinimatchOptions): boolean;\n    sep: Sep;\n    GLOBSTAR: typeof GLOBSTAR;\n    filter: (pattern: string, options?: MinimatchOptions) => (p: string) => boolean;\n    defaults: (def: MinimatchOptions) => typeof minimatch;\n    braceExpand: (pattern: string, options?: MinimatchOptions) => string[];\n    makeRe: (pattern: string, options?: MinimatchOptions) => false | MMRegExp;\n    match: (list: string[], pattern: string, options?: MinimatchOptions) => string[];\n    AST: typeof AST;\n    Minimatch: typeof Minimatch;\n    escape: (s: string, { windowsPathsNoEscape, }?: Pick<MinimatchOptions, \"windowsPathsNoEscape\">) => string;\n    unescape: (s: string, { windowsPathsNoEscape, }?: Pick<MinimatchOptions, \"windowsPathsNoEscape\">) => string;\n};\ntype Sep = '\\\\' | '/';\nexport declare const sep: Sep;\nexport declare const GLOBSTAR: unique symbol;\nexport declare const filter: (pattern: string, options?: MinimatchOptions) => (p: string) => boolean;\nexport declare const defaults: (def: MinimatchOptions) => typeof minimatch;\nexport declare const braceExpand: (pattern: string, options?: MinimatchOptions) => string[];\nexport declare const makeRe: (pattern: string, options?: MinimatchOptions) => false | MMRegExp;\nexport declare const match: (list: string[], pattern: string, options?: MinimatchOptions) => string[];\nexport type MMRegExp = RegExp & {\n    _src?: string;\n    _glob?: string;\n};\nexport type ParseReturnFiltered = string | MMRegExp | typeof GLOBSTAR;\nexport type ParseReturn = ParseReturnFiltered | false;\nexport declare class Minimatch {\n    options: MinimatchOptions;\n    set: ParseReturnFiltered[][];\n    pattern: string;\n    windowsPathsNoEscape: boolean;\n    nonegate: boolean;\n    negate: boolean;\n    comment: boolean;\n    empty: boolean;\n    preserveMultipleSlashes: boolean;\n    partial: boolean;\n    globSet: string[];\n    globParts: string[][];\n    nocase: boolean;\n    isWindows: boolean;\n    platform: Platform;\n    windowsNoMagicRoot: boolean;\n    regexp: false | null | MMRegExp;\n    constructor(pattern: string, options?: MinimatchOptions);\n    hasMagic(): boolean;\n    debug(..._: any[]): void;\n    make(): void;\n    preprocess(globParts: string[][]): string[][];\n    adjascentGlobstarOptimize(globParts: string[][]): string[][];\n    levelOneOptimize(globParts: string[][]): string[][];\n    levelTwoFileOptimize(parts: string | string[]): string[];\n    firstPhasePreProcess(globParts: string[][]): string[][];\n    secondPhasePreProcess(globParts: string[][]): string[][];\n    partsMatch(a: string[], b: string[], emptyGSMatch?: boolean): false | string[];\n    parseNegate(): void;\n    matchOne(file: string[], pattern: ParseReturn[], partial?: boolean): boolean;\n    braceExpand(): string[];\n    parse(pattern: string): ParseReturn;\n    makeRe(): false | MMRegExp;\n    slashSplit(p: string): string[];\n    match(f: string, partial?: boolean): boolean;\n    static defaults(def: MinimatchOptions): typeof Minimatch;\n}\nexport { AST } from './ast.js';\nexport { escape } from './escape.js';\nexport { unescape } from './unescape.js';\n//# sourceMappingURL=index.d.ts.map"
        }
    ]
}