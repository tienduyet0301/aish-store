{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/eslint-utils/RuleCreator.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892009335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { RuleContext, RuleListener, RuleMetaData, RuleMetaDataDocs, RuleModule } from '../ts-eslint/Rule';\nexport type NamedCreateRuleMetaDocs = Omit<RuleMetaDataDocs, 'url'>;\nexport type NamedCreateRuleMeta<MessageIds extends string, PluginDocs = unknown, Options extends readonly unknown[] = []> = {\n    docs: PluginDocs & RuleMetaDataDocs;\n} & Omit<RuleMetaData<MessageIds, PluginDocs, Options>, 'docs'>;\nexport interface RuleCreateAndOptions<Options extends readonly unknown[], MessageIds extends string> {\n    create: (context: Readonly<RuleContext<MessageIds, Options>>, optionsWithDefault: Readonly<Options>) => RuleListener;\n    defaultOptions: Readonly<Options>;\n}\nexport interface RuleWithMeta<Options extends readonly unknown[], MessageIds extends string, Docs = unknown> extends RuleCreateAndOptions<Options, MessageIds> {\n    meta: RuleMetaData<MessageIds, Docs, Options>;\n}\nexport interface RuleWithMetaAndName<Options extends readonly unknown[], MessageIds extends string, Docs = unknown> extends RuleCreateAndOptions<Options, MessageIds> {\n    meta: NamedCreateRuleMeta<MessageIds, Docs, Options>;\n    name: string;\n}\n/**\n * Creates reusable function to create rules with default options and docs URLs.\n *\n * @param urlCreator Creates a documentation URL for a given rule name.\n * @returns Function to create a rule with the docs URL format.\n */\nexport declare function RuleCreator<PluginDocs = unknown>(urlCreator: (ruleName: string) => string): <Options extends readonly unknown[], MessageIds extends string>({ meta, name, ...rule }: Readonly<RuleWithMetaAndName<Options, MessageIds, PluginDocs>>) => RuleModule<MessageIds, Options, PluginDocs>;\nexport declare namespace RuleCreator {\n    var withoutDocs: <Options extends readonly unknown[], MessageIds extends string>(args: Readonly<RuleWithMeta<Options, MessageIds>>) => RuleModule<MessageIds, Options>;\n}\nexport { type RuleListener, type RuleModule } from '../ts-eslint/Rule';\n//# sourceMappingURL=RuleCreator.d.ts.map"
        }
    ]
}