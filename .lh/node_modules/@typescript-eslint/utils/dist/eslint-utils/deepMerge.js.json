{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/eslint-utils/deepMerge.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892008890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isObjectNotArray = isObjectNotArray;\nexports.deepMerge = deepMerge;\n/**\n * Check if the variable contains an object strictly rejecting arrays\n * @returns `true` if obj is an object\n */\nfunction isObjectNotArray(obj) {\n    return typeof obj === 'object' && obj != null && !Array.isArray(obj);\n}\n/**\n * Pure function - doesn't mutate either parameter!\n * Merges two objects together deeply, overwriting the properties in first with the properties in second\n * @param first The first object\n * @param second The second object\n * @returns a new object\n */\nfunction deepMerge(first = {}, second = {}) {\n    // get the unique set of keys across both objects\n    const keys = new Set([...Object.keys(first), ...Object.keys(second)]);\n    return Object.fromEntries([...keys].map(key => {\n        const firstHasKey = key in first;\n        const secondHasKey = key in second;\n        const firstValue = first[key];\n        const secondValue = second[key];\n        let value;\n        if (firstHasKey && secondHasKey) {\n            if (isObjectNotArray(firstValue) && isObjectNotArray(secondValue)) {\n                // object type\n                value = deepMerge(firstValue, secondValue);\n            }\n            else {\n                // value type\n                value = secondValue;\n            }\n        }\n        else if (firstHasKey) {\n            value = firstValue;\n        }\n        else {\n            value = secondValue;\n        }\n        return [key, value];\n    }));\n}\n"
        }
    ]
}