{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ast-utils/eslint-utils/astUtilities.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892007373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isParenthesized = exports.hasSideEffect = exports.getStringIfConstant = exports.getStaticValue = exports.getPropertyName = exports.getFunctionNameWithKind = exports.getFunctionHeadLocation = void 0;\nconst eslintUtils = __importStar(require(\"@eslint-community/eslint-utils\"));\n/**\n * Get the proper location of a given function node to report.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getfunctionheadlocation}\n */\nexports.getFunctionHeadLocation = eslintUtils.getFunctionHeadLocation;\n/**\n * Get the name and kind of a given function node.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getfunctionnamewithkind}\n */\nexports.getFunctionNameWithKind = eslintUtils.getFunctionNameWithKind;\n/**\n * Get the property name of a given property node.\n * If the node is a computed property, this tries to compute the property name by the getStringIfConstant function.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getpropertyname}\n * @returns The property name of the node. If the property name is not constant then it returns `null`.\n */\nexports.getPropertyName = eslintUtils.getPropertyName;\n/**\n * Get the value of a given node if it can decide the value statically.\n * If the 2nd parameter `initialScope` was given, this function tries to resolve identifier references which are in the\n * given node as much as possible. In the resolving way, it does on the assumption that built-in global objects have\n * not been modified.\n * For example, it considers `Symbol.iterator`, `Symbol.for('k')`, ` String.raw``hello`` `, and `Object.freeze({a: 1}).a` as static, but `Symbol('k')` is not static.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getstaticvalue}\n * @returns The `{ value: any }` shaped object. The `value` property is the static value. If it couldn't compute the\n * static value of the node, it returns `null`.\n */\nexports.getStaticValue = eslintUtils.getStaticValue;\n/**\n * Get the string value of a given node.\n * This function is a tiny wrapper of the getStaticValue function.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getstringifconstant}\n */\nexports.getStringIfConstant = eslintUtils.getStringIfConstant;\n/**\n * Check whether a given node has any side effect or not.\n * The side effect means that it may modify a certain variable or object member. This function considers the node which\n * contains the following types as the node which has side effects:\n * - `AssignmentExpression`\n * - `AwaitExpression`\n * - `CallExpression`\n * - `ImportExpression`\n * - `NewExpression`\n * - `UnaryExpression([operator = \"delete\"])`\n * - `UpdateExpression`\n * - `YieldExpression`\n * - When `options.considerGetters` is `true`:\n *   - `MemberExpression`\n * - When `options.considerImplicitTypeConversion` is `true`:\n *   - `BinaryExpression([operator = \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"<<\" | \">>\" | \">>>\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"|\" | \"^\" | \"&\" | \"in\"])`\n *   - `MemberExpression([computed = true])`\n *   - `MethodDefinition([computed = true])`\n *   - `Property([computed = true])`\n *   - `UnaryExpression([operator = \"-\" | \"+\" | \"!\" | \"~\"])`\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#hassideeffect}\n */\nexports.hasSideEffect = eslintUtils.hasSideEffect;\nexports.isParenthesized = eslintUtils.isParenthesized;\n"
        }
    ]
}