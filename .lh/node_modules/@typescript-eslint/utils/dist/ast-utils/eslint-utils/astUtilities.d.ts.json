{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ast-utils/eslint-utils/astUtilities.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892007308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type * as TSESLint from '../../ts-eslint';\nimport type { TSESTree } from '../../ts-estree';\n/**\n * Get the proper location of a given function node to report.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getfunctionheadlocation}\n */\nexport declare const getFunctionHeadLocation: (node: TSESTree.ArrowFunctionExpression | TSESTree.FunctionDeclaration | TSESTree.FunctionExpression, sourceCode: TSESLint.SourceCode) => TSESTree.SourceLocation;\n/**\n * Get the name and kind of a given function node.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getfunctionnamewithkind}\n */\nexport declare const getFunctionNameWithKind: (node: TSESTree.ArrowFunctionExpression | TSESTree.FunctionDeclaration | TSESTree.FunctionExpression, sourceCode?: TSESLint.SourceCode) => string;\n/**\n * Get the property name of a given property node.\n * If the node is a computed property, this tries to compute the property name by the getStringIfConstant function.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getpropertyname}\n * @returns The property name of the node. If the property name is not constant then it returns `null`.\n */\nexport declare const getPropertyName: (node: TSESTree.MemberExpression | TSESTree.MethodDefinition | TSESTree.Property | TSESTree.PropertyDefinition, initialScope?: TSESLint.Scope.Scope) => string | null;\n/**\n * Get the value of a given node if it can decide the value statically.\n * If the 2nd parameter `initialScope` was given, this function tries to resolve identifier references which are in the\n * given node as much as possible. In the resolving way, it does on the assumption that built-in global objects have\n * not been modified.\n * For example, it considers `Symbol.iterator`, `Symbol.for('k')`, ` String.raw``hello`` `, and `Object.freeze({a: 1}).a` as static, but `Symbol('k')` is not static.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getstaticvalue}\n * @returns The `{ value: any }` shaped object. The `value` property is the static value. If it couldn't compute the\n * static value of the node, it returns `null`.\n */\nexport declare const getStaticValue: (node: TSESTree.Node, initialScope?: TSESLint.Scope.Scope) => {\n    value: unknown;\n} | null;\n/**\n * Get the string value of a given node.\n * This function is a tiny wrapper of the getStaticValue function.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#getstringifconstant}\n */\nexport declare const getStringIfConstant: (node: TSESTree.Node, initialScope?: TSESLint.Scope.Scope) => string | null;\n/**\n * Check whether a given node has any side effect or not.\n * The side effect means that it may modify a certain variable or object member. This function considers the node which\n * contains the following types as the node which has side effects:\n * - `AssignmentExpression`\n * - `AwaitExpression`\n * - `CallExpression`\n * - `ImportExpression`\n * - `NewExpression`\n * - `UnaryExpression([operator = \"delete\"])`\n * - `UpdateExpression`\n * - `YieldExpression`\n * - When `options.considerGetters` is `true`:\n *   - `MemberExpression`\n * - When `options.considerImplicitTypeConversion` is `true`:\n *   - `BinaryExpression([operator = \"==\" | \"!=\" | \"<\" | \"<=\" | \">\" | \">=\" | \"<<\" | \">>\" | \">>>\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"|\" | \"^\" | \"&\" | \"in\"])`\n *   - `MemberExpression([computed = true])`\n *   - `MethodDefinition([computed = true])`\n *   - `Property([computed = true])`\n *   - `UnaryExpression([operator = \"-\" | \"+\" | \"!\" | \"~\"])`\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#hassideeffect}\n */\nexport declare const hasSideEffect: (node: TSESTree.Node, sourceCode: TSESLint.SourceCode, options?: {\n    considerGetters?: boolean;\n    considerImplicitTypeConversion?: boolean;\n}) => boolean;\nexport declare const isParenthesized: {\n    (times: number, node: TSESTree.Node, sourceCode: TSESLint.SourceCode): boolean;\n    /**\n     * Check whether a given node is parenthesized or not.\n     * This function detects it correctly even if it's parenthesized by specific syntax.\n     *\n     * @see {@link https://eslint-community.github.io/eslint-utils/api/ast-utils.html#isparenthesized}\n     * @returns `true` if the node is parenthesized.\n     * If `times` was given, it returns `true` only if the node is parenthesized the `times` times.\n     * For example, `isParenthesized(2, node, sourceCode)` returns true for `((foo))`, but not for `(foo)`.\n     */\n    (node: TSESTree.Node, sourceCode: TSESLint.SourceCode): boolean;\n};\n//# sourceMappingURL=astUtilities.d.ts.map"
        }
    ]
}