{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ast-utils/eslint-utils/ReferenceTracker.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892007663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type * as TSESLint from '../../ts-eslint';\nimport type { TSESTree } from '../../ts-estree';\ndeclare const ReferenceTrackerREAD: unique symbol;\ndeclare const ReferenceTrackerCALL: unique symbol;\ndeclare const ReferenceTrackerCONSTRUCT: unique symbol;\ndeclare const ReferenceTrackerESM: unique symbol;\ninterface ReferenceTracker {\n    /**\n     * Iterate the references that the given `traceMap` determined.\n     * This method starts to search from `require()` expression.\n     *\n     * @see {@link https://eslint-community.github.io/eslint-utils/api/scope-utils.html#tracker-iteratecjsreferences}\n     */\n    iterateCjsReferences<T>(traceMap: ReferenceTracker.TraceMap<T>): IterableIterator<ReferenceTracker.FoundReference<T>>;\n    /**\n     * Iterate the references that the given `traceMap` determined.\n     * This method starts to search from `import`/`export` declarations.\n     *\n     * @see {@link https://eslint-community.github.io/eslint-utils/api/scope-utils.html#tracker-iterateesmreferences}\n     */\n    iterateEsmReferences<T>(traceMap: ReferenceTracker.TraceMap<T>): IterableIterator<ReferenceTracker.FoundReference<T>>;\n    /**\n     * Iterate the references that the given `traceMap` determined.\n     * This method starts to search from global variables.\n     *\n     * @see {@link https://eslint-community.github.io/eslint-utils/api/scope-utils.html#tracker-iterateglobalreferences}\n     */\n    iterateGlobalReferences<T>(traceMap: ReferenceTracker.TraceMap<T>): IterableIterator<ReferenceTracker.FoundReference<T>>;\n}\ninterface ReferenceTrackerStatic {\n    readonly CALL: typeof ReferenceTrackerCALL;\n    readonly CONSTRUCT: typeof ReferenceTrackerCONSTRUCT;\n    readonly ESM: typeof ReferenceTrackerESM;\n    new (globalScope: TSESLint.Scope.Scope, options?: {\n        /**\n         * The name list of Global Object. Optional. Default is `[\"global\", \"globalThis\", \"self\", \"window\"]`.\n         */\n        globalObjectNames?: readonly string[];\n        /**\n         * The mode which determines how the `tracker.iterateEsmReferences()` method scans CommonJS modules.\n         * If this is `\"strict\"`, the method binds CommonJS modules to the default export. Otherwise, the method binds\n         * CommonJS modules to both the default export and named exports. Optional. Default is `\"strict\"`.\n         */\n        mode?: 'legacy' | 'strict';\n    }): ReferenceTracker;\n    readonly READ: typeof ReferenceTrackerREAD;\n}\ndeclare namespace ReferenceTracker {\n    type READ = ReferenceTrackerStatic['READ'];\n    type CALL = ReferenceTrackerStatic['CALL'];\n    type CONSTRUCT = ReferenceTrackerStatic['CONSTRUCT'];\n    type ESM = ReferenceTrackerStatic['ESM'];\n    type ReferenceType = CALL | CONSTRUCT | READ;\n    type TraceMap<T = any> = Record<string, TraceMapElement<T>>;\n    interface TraceMapElement<T> {\n        [key: string]: TraceMapElement<T>;\n        [ReferenceTrackerCALL]?: T;\n        [ReferenceTrackerCONSTRUCT]?: T;\n        [ReferenceTrackerESM]?: true;\n        [ReferenceTrackerREAD]?: T;\n    }\n    interface FoundReference<T = any> {\n        info: T;\n        node: TSESTree.Node;\n        path: readonly string[];\n        type: ReferenceType;\n    }\n}\n/**\n * The tracker for references. This provides reference tracking for global variables, CommonJS modules, and ES modules.\n *\n * @see {@link https://eslint-community.github.io/eslint-utils/api/scope-utils.html#referencetracker-class}\n */\nexport declare const ReferenceTracker: ReferenceTrackerStatic;\nexport {};\n//# sourceMappingURL=ReferenceTracker.d.ts.map"
        }
    ]
}