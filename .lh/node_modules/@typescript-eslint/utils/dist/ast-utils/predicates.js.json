{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ast-utils/predicates.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892008124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isLoop = exports.isImportKeyword = exports.isTypeKeyword = exports.isAwaitKeyword = exports.isAwaitExpression = exports.isIdentifier = exports.isConstructor = exports.isClassOrTypeElement = exports.isTSConstructorType = exports.isTSFunctionType = exports.isFunctionOrFunctionType = exports.isFunctionType = exports.isFunction = exports.isVariableDeclarator = exports.isTypeAssertion = exports.isLogicalOrOperator = exports.isOptionalCallExpression = exports.isNotNonNullAssertionPunctuator = exports.isNonNullAssertionPunctuator = exports.isNotOptionalChainPunctuator = exports.isOptionalChainPunctuator = void 0;\nexports.isSetter = isSetter;\nconst ts_estree_1 = require(\"../ts-estree\");\nconst helpers_1 = require(\"./helpers\");\nexports.isOptionalChainPunctuator = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, { value: '?.' });\nexports.isNotOptionalChainPunctuator = (0, helpers_1.isNotTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, { value: '?.' });\nexports.isNonNullAssertionPunctuator = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, { value: '!' });\nexports.isNotNonNullAssertionPunctuator = (0, helpers_1.isNotTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Punctuator, { value: '!' });\n/**\n * Returns true if and only if the node represents: foo?.() or foo.bar?.()\n */\nexports.isOptionalCallExpression = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.CallExpression, \n// this flag means the call expression itself is option\n// i.e. it is foo.bar?.() and not foo?.bar()\n{ optional: true });\n/**\n * Returns true if and only if the node represents logical OR\n */\nexports.isLogicalOrOperator = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.LogicalExpression, { operator: '||' });\n/**\n * Checks if a node is a type assertion:\n * ```\n * x as foo\n * <foo>x\n * ```\n */\nexports.isTypeAssertion = (0, helpers_1.isNodeOfTypes)([\n    ts_estree_1.AST_NODE_TYPES.TSAsExpression,\n    ts_estree_1.AST_NODE_TYPES.TSTypeAssertion,\n]);\nexports.isVariableDeclarator = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.VariableDeclarator);\nconst functionTypes = [\n    ts_estree_1.AST_NODE_TYPES.ArrowFunctionExpression,\n    ts_estree_1.AST_NODE_TYPES.FunctionDeclaration,\n    ts_estree_1.AST_NODE_TYPES.FunctionExpression,\n];\nexports.isFunction = (0, helpers_1.isNodeOfTypes)(functionTypes);\nconst functionTypeTypes = [\n    ts_estree_1.AST_NODE_TYPES.TSCallSignatureDeclaration,\n    ts_estree_1.AST_NODE_TYPES.TSConstructorType,\n    ts_estree_1.AST_NODE_TYPES.TSConstructSignatureDeclaration,\n    ts_estree_1.AST_NODE_TYPES.TSDeclareFunction,\n    ts_estree_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression,\n    ts_estree_1.AST_NODE_TYPES.TSFunctionType,\n    ts_estree_1.AST_NODE_TYPES.TSMethodSignature,\n];\nexports.isFunctionType = (0, helpers_1.isNodeOfTypes)(functionTypeTypes);\nexports.isFunctionOrFunctionType = (0, helpers_1.isNodeOfTypes)([\n    ...functionTypes,\n    ...functionTypeTypes,\n]);\nexports.isTSFunctionType = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.TSFunctionType);\nexports.isTSConstructorType = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.TSConstructorType);\nexports.isClassOrTypeElement = (0, helpers_1.isNodeOfTypes)([\n    // ClassElement\n    ts_estree_1.AST_NODE_TYPES.PropertyDefinition,\n    ts_estree_1.AST_NODE_TYPES.FunctionExpression,\n    ts_estree_1.AST_NODE_TYPES.MethodDefinition,\n    ts_estree_1.AST_NODE_TYPES.TSAbstractPropertyDefinition,\n    ts_estree_1.AST_NODE_TYPES.TSAbstractMethodDefinition,\n    ts_estree_1.AST_NODE_TYPES.TSEmptyBodyFunctionExpression,\n    ts_estree_1.AST_NODE_TYPES.TSIndexSignature,\n    // TypeElement\n    ts_estree_1.AST_NODE_TYPES.TSCallSignatureDeclaration,\n    ts_estree_1.AST_NODE_TYPES.TSConstructSignatureDeclaration,\n    // AST_NODE_TYPES.TSIndexSignature,\n    ts_estree_1.AST_NODE_TYPES.TSMethodSignature,\n    ts_estree_1.AST_NODE_TYPES.TSPropertySignature,\n]);\n/**\n * Checks if a node is a constructor method.\n */\nexports.isConstructor = (0, helpers_1.isNodeOfTypeWithConditions)(ts_estree_1.AST_NODE_TYPES.MethodDefinition, { kind: 'constructor' });\n/**\n * Checks if a node is a setter method.\n */\nfunction isSetter(node) {\n    return (!!node &&\n        (node.type === ts_estree_1.AST_NODE_TYPES.MethodDefinition ||\n            node.type === ts_estree_1.AST_NODE_TYPES.Property) &&\n        node.kind === 'set');\n}\nexports.isIdentifier = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.Identifier);\n/**\n * Checks if a node represents an `await â€¦` expression.\n */\nexports.isAwaitExpression = (0, helpers_1.isNodeOfType)(ts_estree_1.AST_NODE_TYPES.AwaitExpression);\n/**\n * Checks if a possible token is the `await` keyword.\n */\nexports.isAwaitKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Identifier, { value: 'await' });\n/**\n * Checks if a possible token is the `type` keyword.\n */\nexports.isTypeKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Identifier, { value: 'type' });\n/**\n * Checks if a possible token is the `import` keyword.\n */\nexports.isImportKeyword = (0, helpers_1.isTokenOfTypeWithConditions)(ts_estree_1.AST_TOKEN_TYPES.Keyword, { value: 'import' });\nexports.isLoop = (0, helpers_1.isNodeOfTypes)([\n    ts_estree_1.AST_NODE_TYPES.DoWhileStatement,\n    ts_estree_1.AST_NODE_TYPES.ForStatement,\n    ts_estree_1.AST_NODE_TYPES.ForInStatement,\n    ts_estree_1.AST_NODE_TYPES.ForOfStatement,\n    ts_estree_1.AST_NODE_TYPES.WhileStatement,\n]);\n"
        }
    ]
}