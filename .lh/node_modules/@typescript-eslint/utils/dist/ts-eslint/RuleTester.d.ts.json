{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/RuleTester.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892010763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { AST_NODE_TYPES, AST_TOKEN_TYPES } from '../ts-estree';\nimport type { ClassicConfig } from './Config';\nimport type { Linter } from './Linter';\nimport type { ParserOptions } from './ParserOptions';\nimport type { ReportDescriptorMessageData, RuleCreateFunction, RuleModule, SharedConfigurationSettings } from './Rule';\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport interface ValidTestCase<Options extends readonly unknown[]> {\n    /**\n     * Code for the test case.\n     */\n    readonly code: string;\n    /**\n     * Environments for the test case.\n     */\n    readonly env?: Readonly<Linter.EnvironmentConfig>;\n    /**\n     * The fake filename for the test case. Useful for rules that make assertion about filenames.\n     */\n    readonly filename?: string;\n    /**\n     * The additional global variables.\n     */\n    readonly globals?: Readonly<Linter.GlobalsConfig>;\n    /**\n     * Name for the test case.\n     */\n    readonly name?: string;\n    /**\n     * Run this case exclusively for debugging in supported test frameworks.\n     */\n    readonly only?: boolean;\n    /**\n     * Options for the test case.\n     */\n    readonly options?: Readonly<Options>;\n    /**\n     * The absolute path for the parser.\n     */\n    readonly parser?: string;\n    /**\n     * Options for the parser.\n     */\n    readonly parserOptions?: Readonly<ParserOptions>;\n    /**\n     * Settings for the test case.\n     */\n    readonly settings?: Readonly<SharedConfigurationSettings>;\n}\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport interface SuggestionOutput<MessageIds extends string> {\n    /**\n     * The data used to fill the message template.\n     */\n    readonly data?: ReportDescriptorMessageData;\n    /**\n     * Reported message ID.\n     */\n    readonly messageId: MessageIds;\n    /**\n     * NOTE: Suggestions will be applied as a stand-alone change, without triggering multi-pass fixes.\n     * Each individual error has its own suggestion, so you have to show the correct, _isolated_ output for each suggestion.\n     */\n    readonly output: string;\n}\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport interface InvalidTestCase<MessageIds extends string, Options extends readonly unknown[]> extends ValidTestCase<Options> {\n    /**\n     * Expected errors.\n     */\n    readonly errors: readonly TestCaseError<MessageIds>[];\n    /**\n     * The expected code after autofixes are applied. If set to `null`, the test runner will assert that no autofix is suggested.\n     */\n    readonly output?: string | string[] | null;\n}\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport interface TestCaseError<MessageIds extends string> {\n    /**\n     * The 1-based column number of the reported start location.\n     */\n    readonly column?: number;\n    /**\n     * The data used to fill the message template.\n     */\n    readonly data?: ReportDescriptorMessageData;\n    /**\n     * The 1-based column number of the reported end location.\n     */\n    readonly endColumn?: number;\n    /**\n     * The 1-based line number of the reported end location.\n     */\n    readonly endLine?: number;\n    /**\n     * The 1-based line number of the reported start location.\n     */\n    readonly line?: number;\n    /**\n     * Reported message ID.\n     */\n    readonly messageId: MessageIds;\n    /**\n     * Reported suggestions.\n     */\n    readonly suggestions?: readonly SuggestionOutput<MessageIds>[] | null;\n    /**\n     * The type of the reported AST node.\n     */\n    readonly type?: AST_NODE_TYPES | AST_TOKEN_TYPES;\n}\n/**\n * @param text a string describing the rule\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport type RuleTesterTestFrameworkFunction = (text: string, callback: () => void) => void;\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport interface RunTests<MessageIds extends string, Options extends readonly unknown[]> {\n    readonly invalid: readonly InvalidTestCase<MessageIds, Options>[];\n    readonly valid: readonly (string | ValidTestCase<Options>)[];\n}\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport interface RuleTesterConfig extends ClassicConfig.Config {\n    readonly parser: string;\n    readonly parserOptions?: Readonly<ParserOptions>;\n}\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\ndeclare class RuleTesterBase {\n    /**\n     * Creates a new instance of RuleTester.\n     * @param testerConfig extra configuration for the tester\n     */\n    constructor(testerConfig?: RuleTesterConfig);\n    /**\n     * Adds a new rule test to execute.\n     * @param ruleName The name of the rule to run.\n     * @param rule The rule to test.\n     * @param tests The collection of tests to run.\n     */\n    run<MessageIds extends string, Options extends readonly unknown[]>(ruleName: string, rule: RuleModule<MessageIds, Options>, tests: RunTests<MessageIds, Options>): void;\n    /**\n     * If you supply a value to this property, the rule tester will call this instead of using the version defined on\n     * the global namespace.\n     */\n    static get describe(): RuleTesterTestFrameworkFunction;\n    static set describe(value: RuleTesterTestFrameworkFunction | undefined);\n    /**\n     * If you supply a value to this property, the rule tester will call this instead of using the version defined on\n     * the global namespace.\n     */\n    static get it(): RuleTesterTestFrameworkFunction;\n    static set it(value: RuleTesterTestFrameworkFunction | undefined);\n    /**\n     * If you supply a value to this property, the rule tester will call this instead of using the version defined on\n     * the global namespace.\n     */\n    static get itOnly(): RuleTesterTestFrameworkFunction;\n    static set itOnly(value: RuleTesterTestFrameworkFunction | undefined);\n    /**\n     * Define a rule for one particular run of tests.\n     */\n    defineRule<MessageIds extends string, Options extends readonly unknown[]>(name: string, rule: RuleCreateFunction<MessageIds, Options> | RuleModule<MessageIds, Options>): void;\n}\ndeclare const RuleTester_base: typeof RuleTesterBase;\n/**\n * @deprecated Use `@typescript-eslint/rule-tester` instead.\n */\nexport declare class RuleTester extends RuleTester_base {\n}\nexport {};\n//# sourceMappingURL=RuleTester.d.ts.map"
        }
    ]
}