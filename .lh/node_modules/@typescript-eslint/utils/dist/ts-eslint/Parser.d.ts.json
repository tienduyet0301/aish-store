{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/Parser.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892010418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ParserServices, TSESTree } from '../ts-estree';\nimport type { ParserOptions } from './ParserOptions';\nimport type { Scope } from './Scope';\nexport declare namespace Parser {\n    interface ParserMeta {\n        /**\n         * The unique name of the parser.\n         */\n        name: string;\n        /**\n         * The a string identifying the version of the parser.\n         */\n        version?: string;\n    }\n    /**\n     * A loose definition of the ParserModule type for use with configs\n     * This type intended to relax validation of configs so that parsers that have\n     * different AST types or scope managers can still be passed to configs\n     *\n     * @see {@link LooseRuleDefinition}, {@link LooseProcessorModule}\n     */\n    type LooseParserModule = {\n        /**\n         * Information about the parser to uniquely identify it when serializing.\n         */\n        meta?: {\n            [K in keyof ParserMeta]?: ParserMeta[K] | undefined;\n        };\n        /**\n         * Parses the given text into an AST\n         */\n        parseForESLint(text: string, options?: unknown): {\n            [k in keyof ParseResult]: unknown;\n        };\n    } | {\n        /**\n         * Information about the parser to uniquely identify it when serializing.\n         */\n        meta?: {\n            [K in keyof ParserMeta]?: ParserMeta[K] | undefined;\n        };\n        /**\n         * Parses the given text into an ESTree AST\n         */\n        parse(text: string, options?: unknown): unknown;\n    };\n    type ParserModule = {\n        /**\n         * Information about the parser to uniquely identify it when serializing.\n         */\n        meta?: ParserMeta;\n        /**\n         * Parses the given text into an AST\n         */\n        parseForESLint(text: string, options?: ParserOptions): ParseResult;\n    } | {\n        /**\n         * Information about the parser to uniquely identify it when serializing.\n         */\n        meta?: ParserMeta;\n        /**\n         * Parses the given text into an ESTree AST\n         */\n        parse(text: string, options?: ParserOptions): TSESTree.Program;\n    };\n    interface ParseResult {\n        /**\n         * The ESTree AST\n         */\n        ast: TSESTree.Program;\n        /**\n         * A `ScopeManager` object.\n         * Custom parsers can use customized scope analysis for experimental/enhancement syntaxes.\n         * The default is the `ScopeManager` object which is created by `eslint-scope`.\n         */\n        scopeManager?: Scope.ScopeManager;\n        /**\n         * Any parser-dependent services (such as type checkers for nodes).\n         * The value of the services property is available to rules as `context.sourceCode.parserServices`.\n         * The default is an empty object.\n         */\n        services?: ParserServices;\n        /**\n         * An object to customize AST traversal.\n         * The keys of the object are the type of AST nodes.\n         * Each value is an array of the property names which should be traversed.\n         * The default is `KEYS` of `eslint-visitor-keys`.\n         */\n        visitorKeys?: VisitorKeys;\n    }\n    interface VisitorKeys {\n        [nodeType: string]: readonly string[];\n    }\n}\n//# sourceMappingURL=Parser.d.ts.map"
        }
    ]
}