{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/Processor.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892010641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Linter } from './Linter';\nexport declare namespace Processor {\n    interface ProcessorMeta {\n        /**\n         * The unique name of the processor.\n         */\n        name: string;\n        /**\n         * The a string identifying the version of the processor.\n         */\n        version?: string;\n    }\n    type PreProcess = (text: string, filename: string) => (string | {\n        filename: string;\n        text: string;\n    })[];\n    type PostProcess = (messagesList: Linter.LintMessage[][], filename: string) => Linter.LintMessage[];\n    interface ProcessorModule {\n        /**\n         * Information about the processor to uniquely identify it when serializing.\n         */\n        meta?: ProcessorMeta;\n        /**\n         * The function to merge messages.\n         */\n        postprocess?: PostProcess;\n        /**\n         * The function to extract code blocks.\n         */\n        preprocess?: PreProcess;\n        /**\n         * If `true` then it means the processor supports autofix.\n         */\n        supportsAutofix?: boolean;\n    }\n    /**\n     * A loose definition of the ParserModule type for use with configs\n     * This type intended to relax validation of configs so that parsers that have\n     * different AST types or scope managers can still be passed to configs\n     *\n     * @see {@link LooseRuleDefinition}, {@link LooseParserModule}\n     */\n    interface LooseProcessorModule {\n        /**\n         * Information about the processor to uniquely identify it when serializing.\n         */\n        meta?: {\n            [K in keyof ProcessorMeta]?: ProcessorMeta[K] | undefined;\n        };\n        /**\n         * The function to merge messages.\n         */\n        postprocess?: (messagesList: any, filename: string) => any;\n        /**\n         * The function to extract code blocks.\n         */\n        preprocess?: (text: string, filename: string) => any;\n        /**\n         * If `true` then it means the processor supports autofix.\n         */\n        supportsAutofix?: boolean | undefined;\n    }\n}\n//# sourceMappingURL=Processor.d.ts.map"
        }
    ]
}