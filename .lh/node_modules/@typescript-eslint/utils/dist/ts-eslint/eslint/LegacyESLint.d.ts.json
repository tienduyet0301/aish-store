{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/eslint/LegacyESLint.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892010106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ClassicConfig } from '../Config';\nimport type { Linter } from '../Linter';\nimport type * as Shared from './ESLintShared';\ndeclare class LegacyESLintBase extends Shared.ESLintBase<ClassicConfig.Config, LegacyESLint.ESLintOptions> {\n    static readonly configType: 'eslintrc';\n}\ndeclare const LegacyESLint_base: typeof LegacyESLintBase;\n/**\n * The ESLint class is the primary class to use in Node.js applications.\n * This class depends on the Node.js fs module and the file system, so you cannot use it in browsers.\n *\n * If you want to lint code on browsers, use the Linter class instead.\n */\nexport declare class LegacyESLint extends LegacyESLint_base {\n}\nexport declare namespace LegacyESLint {\n    interface ESLintOptions extends Shared.ESLintOptions<ClassicConfig.Config> {\n        /**\n         * If you pass directory paths to the eslint.lintFiles() method, ESLint checks the files in those directories that\n         * have the given extensions. For example, when passing the src/ directory and extensions is [\".js\", \".ts\"], ESLint\n         * will lint *.js and *.ts files in src/. If extensions is null, ESLint checks *.js files and files that match\n         * overrides[].files patterns in your configuration.\n         * Note: This option only applies when you pass directory paths to the eslint.lintFiles() method.\n         * If you pass glob patterns, ESLint will lint all files matching the glob pattern regardless of extension.\n         */\n        extensions?: string[] | null;\n        /**\n         * If false is present, the eslint.lintFiles() method doesn't respect `.eslintignore` files in your configuration.\n         * @default true\n         */\n        ignore?: boolean;\n        /**\n         * The path to a file ESLint uses instead of `$CWD/.eslintignore`.\n         * If a path is present and the file doesn't exist, this constructor will throw an error.\n         */\n        ignorePath?: string;\n        /**\n         * The path to a configuration file, overrides all configurations used with this instance.\n         * The options.overrideConfig option is applied after this option is applied.\n         */\n        overrideConfigFile?: string | null;\n        /**\n         * The severity to report unused eslint-disable directives.\n         * If this option is a severity, it overrides the reportUnusedDisableDirectives setting in your configurations.\n         */\n        reportUnusedDisableDirectives?: Linter.SeverityString | null;\n        /**\n         * The path to a directory where plugins should be resolved from.\n         * If null is present, ESLint loads plugins from the location of the configuration file that contains the plugin\n         * setting.\n         * If a path is present, ESLint loads all plugins from there.\n         */\n        resolvePluginsRelativeTo?: string | null;\n        /**\n         * An array of paths to directories to load custom rules from.\n         */\n        rulePaths?: string[];\n        /**\n         * If false is present, ESLint doesn't load configuration files (.eslintrc.* files).\n         * Only the configuration of the constructor options is valid.\n         */\n        useEslintrc?: boolean;\n    }\n    type DeprecatedRuleInfo = Shared.DeprecatedRuleInfo;\n    type EditInfo = Shared.EditInfo;\n    type Formatter = Shared.Formatter;\n    type LintMessage = Shared.LintMessage;\n    type LintResult = Omit<Shared.LintResult, 'stats'>;\n    type LintTextOptions = Shared.LintTextOptions;\n    type SuppressedLintMessage = Shared.SuppressedLintMessage;\n}\nexport {};\n//# sourceMappingURL=LegacyESLint.d.ts.map"
        }
    ]
}