{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/eslint/FlatESLint.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892010020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { FlatConfig } from '../Config';\nimport type * as Shared from './ESLintShared';\ndeclare class FlatESLintBase extends Shared.ESLintBase<FlatConfig.ConfigArray, FlatESLint.ESLintOptions> {\n    static readonly configType: 'flat';\n    /**\n     * Returns a configuration object for the given file based on the CLI options.\n     * This is the same logic used by the ESLint CLI executable to determine\n     * configuration for each file it processes.\n     * @param filePath The path of the file to retrieve a config object for.\n     * @returns A configuration object for the file or `undefined` if there is no configuration data for the object.\n     */\n    calculateConfigForFile(filePath: string): Promise<FlatConfig.ConfigArray>;\n    /**\n     * Finds the config file being used by this instance based on the options\n     * passed to the constructor.\n     * @returns The path to the config file being used or `undefined` if no config file is being used.\n     */\n    findConfigFile(): Promise<string | undefined>;\n}\ndeclare const FlatESLint_base: typeof FlatESLintBase;\n/**\n * The ESLint class is the primary class to use in Node.js applications.\n * This class depends on the Node.js fs module and the file system, so you cannot use it in browsers.\n *\n * If you want to lint code on browsers, use the Linter class instead.\n */\nexport declare class FlatESLint extends FlatESLint_base {\n}\nexport declare namespace FlatESLint {\n    interface ESLintOptions extends Shared.ESLintOptions<FlatConfig.ConfigArray> {\n        /**\n         * If false is present, the eslint.lintFiles() method doesn't respect `ignorePatterns` ignorePatterns in your configuration.\n         * @default true\n         */\n        ignore?: boolean;\n        /**\n         * Ignore file patterns to use in addition to config ignores. These patterns are relative to cwd.\n         * @default null\n         */\n        ignorePatterns?: string[] | null;\n        /**\n         * The path to a configuration file, overrides all configurations used with this instance.\n         * The options.overrideConfig option is applied after this option is applied.\n         * Searches for default config file when falsy; doesn't do any config file lookup when `true`; considered to be a config filename when a string.\n         * @default false\n         */\n        overrideConfigFile?: boolean | string;\n        /**\n         * A predicate function that filters rules to be run.\n         * This function is called with an object containing `ruleId` and `severity`, and returns `true` if the rule should be run.\n         * @default () => true\n         */\n        ruleFilter?: RuleFilter;\n        /**\n         * When set to true, additional statistics are added to the lint results.\n         * @see {@link https://eslint.org/docs/latest/extend/stats}\n         * @default false\n         */\n        stats?: boolean;\n        /**\n         * Show warnings when the file list includes ignored files.\n         * @default true\n         */\n        warnIgnored?: boolean;\n    }\n    type DeprecatedRuleInfo = Shared.DeprecatedRuleInfo;\n    type EditInfo = Shared.EditInfo;\n    type Formatter = Shared.Formatter;\n    type LintMessage = Shared.LintMessage;\n    type LintResult = Shared.LintResult;\n    type LintStats = Shared.LintStats;\n    type LintStatsFixTime = Shared.LintStatsFixTime;\n    type LintStatsParseTime = Shared.LintStatsParseTime;\n    type LintStatsRuleTime = Shared.LintStatsRuleTime;\n    type LintStatsTimePass = Shared.LintStatsTimePass;\n    type LintTextOptions = Shared.LintTextOptions;\n    type SuppressedLintMessage = Shared.SuppressedLintMessage;\n    type RuleFilter = (rule: {\n        ruleId: string;\n        severity: number;\n    }) => boolean;\n}\nexport {};\n//# sourceMappingURL=FlatESLint.d.ts.map"
        }
    ]
}