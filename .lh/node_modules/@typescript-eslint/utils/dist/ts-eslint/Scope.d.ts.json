{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/Scope.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892010832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as scopeManager from '@typescript-eslint/scope-manager';\nexport declare namespace Scope {\n    type ScopeManager = scopeManager.ScopeManager;\n    type Reference = scopeManager.Reference;\n    type Variable = scopeManager.ScopeVariable;\n    type Scope = scopeManager.Scope;\n    const ScopeType: typeof scopeManager.ScopeType;\n    type DefinitionType = scopeManager.Definition;\n    type Definition = scopeManager.Definition;\n    const DefinitionType: typeof scopeManager.DefinitionType;\n    namespace Definitions {\n        type CatchClauseDefinition = scopeManager.CatchClauseDefinition;\n        type ClassNameDefinition = scopeManager.ClassNameDefinition;\n        type FunctionNameDefinition = scopeManager.FunctionNameDefinition;\n        type ImplicitGlobalVariableDefinition = scopeManager.ImplicitGlobalVariableDefinition;\n        type ImportBindingDefinition = scopeManager.ImportBindingDefinition;\n        type ParameterDefinition = scopeManager.ParameterDefinition;\n        type TSEnumMemberDefinition = scopeManager.TSEnumMemberDefinition;\n        type TSEnumNameDefinition = scopeManager.TSEnumNameDefinition;\n        type TSModuleNameDefinition = scopeManager.TSModuleNameDefinition;\n        type TypeDefinition = scopeManager.TypeDefinition;\n        type VariableDefinition = scopeManager.VariableDefinition;\n    }\n    namespace Scopes {\n        type BlockScope = scopeManager.BlockScope;\n        type CatchScope = scopeManager.CatchScope;\n        type ClassScope = scopeManager.ClassScope;\n        type ConditionalTypeScope = scopeManager.ConditionalTypeScope;\n        type ForScope = scopeManager.ForScope;\n        type FunctionExpressionNameScope = scopeManager.FunctionExpressionNameScope;\n        type FunctionScope = scopeManager.FunctionScope;\n        type FunctionTypeScope = scopeManager.FunctionTypeScope;\n        type GlobalScope = scopeManager.GlobalScope;\n        type MappedTypeScope = scopeManager.MappedTypeScope;\n        type ModuleScope = scopeManager.ModuleScope;\n        type SwitchScope = scopeManager.SwitchScope;\n        type TSEnumScope = scopeManager.TSEnumScope;\n        type TSModuleScope = scopeManager.TSModuleScope;\n        type TypeScope = scopeManager.TypeScope;\n        type WithScope = scopeManager.WithScope;\n    }\n}\n//# sourceMappingURL=Scope.d.ts.map"
        }
    ]
}