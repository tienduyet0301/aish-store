{
    "sourceFile": "node_modules/@typescript-eslint/utils/dist/ts-eslint/Config.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892009808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { Parser as ParserType } from './Parser';\nimport type * as ParserOptionsTypes from './ParserOptions';\nimport type { Processor as ProcessorType } from './Processor';\nimport type { LooseRuleDefinition, SharedConfigurationSettings } from './Rule';\n/** @internal */\nexport declare namespace SharedConfig {\n    type Severity = 0 | 1 | 2;\n    type SeverityString = 'error' | 'off' | 'warn';\n    type RuleLevel = Severity | SeverityString;\n    type RuleLevelAndOptions = [RuleLevel, ...unknown[]];\n    type RuleEntry = RuleLevel | RuleLevelAndOptions;\n    type RulesRecord = Partial<Record<string, RuleEntry>>;\n    type GlobalVariableOptionBase = 'off' | /** @deprecated use `'readonly'` */ 'readable' | 'readonly' | 'writable' | /** @deprecated use `'writable'` */ 'writeable';\n    type GlobalVariableOptionBoolean = /** @deprecated use `'readonly'` */ false | /** @deprecated use `'writable'` */ true;\n    type GlobalVariableOption = GlobalVariableOptionBase | GlobalVariableOptionBoolean;\n    interface GlobalsConfig {\n        [name: string]: GlobalVariableOption;\n    }\n    interface EnvironmentConfig {\n        [name: string]: boolean;\n    }\n    type ParserOptions = ParserOptionsTypes.ParserOptions;\n    interface PluginMeta {\n        /**\n         * The meta.name property should match the npm package name for your plugin.\n         */\n        name: string;\n        /**\n         * The meta.version property should match the npm package version for your plugin.\n         */\n        version: string;\n    }\n}\nexport declare namespace ClassicConfig {\n    export type EnvironmentConfig = SharedConfig.EnvironmentConfig;\n    export type GlobalsConfig = SharedConfig.GlobalsConfig;\n    export type GlobalVariableOption = SharedConfig.GlobalVariableOption;\n    export type GlobalVariableOptionBase = SharedConfig.GlobalVariableOptionBase;\n    export type ParserOptions = SharedConfig.ParserOptions;\n    export type RuleEntry = SharedConfig.RuleEntry;\n    export type RuleLevel = SharedConfig.RuleLevel;\n    export type RuleLevelAndOptions = SharedConfig.RuleLevelAndOptions;\n    export type RulesRecord = SharedConfig.RulesRecord;\n    export type Severity = SharedConfig.Severity;\n    export type SeverityString = SharedConfig.SeverityString;\n    interface BaseConfig {\n        $schema?: string;\n        /**\n         * The environment settings.\n         */\n        env?: EnvironmentConfig;\n        /**\n         * The path to other config files or the package name of shareable configs.\n         */\n        extends?: string | string[];\n        /**\n         * The global variable settings.\n         */\n        globals?: GlobalsConfig;\n        /**\n         * The flag that disables directive comments.\n         */\n        noInlineConfig?: boolean;\n        /**\n         * The override settings per kind of files.\n         */\n        overrides?: ConfigOverride[];\n        /**\n         * The path to a parser or the package name of a parser.\n         */\n        parser?: string | null;\n        /**\n         * The parser options.\n         */\n        parserOptions?: ParserOptions;\n        /**\n         * The plugin specifiers.\n         */\n        plugins?: string[];\n        /**\n         * The processor specifier.\n         */\n        processor?: string;\n        /**\n         * The flag to report unused `eslint-disable` comments.\n         */\n        reportUnusedDisableDirectives?: boolean;\n        /**\n         * The rule settings.\n         */\n        rules?: RulesRecord;\n        /**\n         * The shared settings.\n         */\n        settings?: SharedConfigurationSettings;\n    }\n    export interface ConfigOverride extends BaseConfig {\n        excludedFiles?: string | string[];\n        files: string | string[];\n    }\n    export interface Config extends BaseConfig {\n        /**\n         * The glob patterns that ignore to lint.\n         */\n        ignorePatterns?: string | string[];\n        /**\n         * The root flag.\n         */\n        root?: boolean;\n    }\n    export {};\n}\nexport declare namespace FlatConfig {\n    type EcmaVersion = ParserOptionsTypes.EcmaVersion;\n    type GlobalsConfig = SharedConfig.GlobalsConfig;\n    type Parser = ParserType.LooseParserModule;\n    type ParserOptions = SharedConfig.ParserOptions;\n    type PluginMeta = SharedConfig.PluginMeta;\n    type Processor = ProcessorType.LooseProcessorModule;\n    type RuleEntry = SharedConfig.RuleEntry;\n    type RuleLevel = SharedConfig.RuleLevel;\n    type RuleLevelAndOptions = SharedConfig.RuleLevelAndOptions;\n    type Rules = SharedConfig.RulesRecord;\n    type Settings = SharedConfigurationSettings;\n    type Severity = SharedConfig.Severity;\n    type SeverityString = SharedConfig.SeverityString;\n    type SourceType = 'commonjs' | ParserOptionsTypes.SourceType;\n    interface SharedConfigs {\n        [key: string]: Config | ConfigArray;\n    }\n    interface Plugin {\n        /**\n         * Shared configurations bundled with the plugin.\n         * Users will reference these directly in their config (i.e. `plugin.configs.recommended`).\n         */\n        configs?: SharedConfigs;\n        /**\n         * Metadata about your plugin for easier debugging and more effective caching of plugins.\n         */\n        meta?: {\n            [K in keyof PluginMeta]?: PluginMeta[K] | undefined;\n        };\n        /**\n         * The definition of plugin processors.\n         * Users can stringly reference the processor using the key in their config (i.e., `\"pluginName/processorName\"`).\n         */\n        processors?: Partial<Record<string, Processor>> | undefined;\n        /**\n         * The definition of plugin rules.\n         * The key must be the name of the rule that users will use\n         * Users can stringly reference the rule using the key they registered the plugin under combined with the rule name.\n         * i.e. for the user config `plugins: { foo: pluginReference }` - the reference would be `\"foo/ruleName\"`.\n         */\n        rules?: Record<string, LooseRuleDefinition> | undefined;\n    }\n    interface Plugins {\n        /**\n         * We intentionally omit the `configs` key from this object because it avoids\n         * type conflicts with old plugins that haven't updated their configs to flat configs yet.\n         * It's valid to reference these old plugins because ESLint won't access the\n         * `.config` property of a plugin when evaluating a flat config.\n         */\n        [pluginAlias: string]: Omit<Plugin, 'configs'>;\n    }\n    interface LinterOptions {\n        /**\n         * A Boolean value indicating if inline configuration is allowed.\n         */\n        noInlineConfig?: boolean;\n        /**\n         * A severity string indicating if and how unused disable and enable\n         * directives should be tracked and reported. For legacy compatibility, `true`\n         * is equivalent to `\"warn\"` and `false` is equivalent to `\"off\"`.\n         * @default \"off\"\n         */\n        reportUnusedDisableDirectives?: boolean | SharedConfig.Severity | SharedConfig.SeverityString;\n        /**\n         * A severity string indicating if and how unused inline directives\n         * should be tracked and reported.\n         *\n         * since ESLint 9.19.0\n         * @default \"off\"\n         */\n        reportUnusedInlineConfigs?: SharedConfig.Severity | SharedConfig.SeverityString;\n    }\n    interface LanguageOptions {\n        /**\n         * The version of ECMAScript to support.\n         * May be any year (i.e., `2022`) or version (i.e., `5`).\n         * Set to `\"latest\"` for the most recent supported version.\n         * @default \"latest\"\n         */\n        ecmaVersion?: EcmaVersion | undefined;\n        /**\n         * An object specifying additional objects that should be added to the global scope during linting.\n         */\n        globals?: GlobalsConfig | undefined;\n        /**\n         * An object containing a `parse()` method or a `parseForESLint()` method.\n         * @default\n         * ```\n         * // https://github.com/eslint/espree\n         * require('espree')\n         * ```\n         */\n        parser?: Parser | undefined;\n        /**\n         * An object specifying additional options that are passed directly to the parser.\n         * The available options are parser-dependent.\n         */\n        parserOptions?: ParserOptions | undefined;\n        /**\n         * The type of JavaScript source code.\n         * Possible values are `\"script\"` for traditional script files, `\"module\"` for ECMAScript modules (ESM), and `\"commonjs\"` for CommonJS files.\n         * @default\n         * ```\n         * // for `.js` and `.mjs` files\n         * \"module\"\n         * // for `.cjs` files\n         * \"commonjs\"\n         * ```\n         */\n        sourceType?: SourceType | undefined;\n    }\n    interface Config {\n        /**\n         * An array of glob patterns indicating the files that the configuration object should apply to.\n         * If not specified, the configuration object applies to all files matched by any other configuration object.\n         */\n        files?: (string | string[])[];\n        /**\n         * An array of glob patterns indicating the files that the configuration object should not apply to.\n         * If not specified, the configuration object applies to all files matched by files.\n         */\n        ignores?: string[];\n        /**\n         * Language specifier in the form `namespace/language-name` where `namespace` is a plugin name set in the `plugins` field.\n         */\n        language?: string;\n        /**\n         * An object containing settings related to how JavaScript is configured for linting.\n         */\n        languageOptions?: LanguageOptions;\n        /**\n         * An object containing settings related to the linting process.\n         */\n        linterOptions?: LinterOptions;\n        /**\n         * An string to identify the configuration object. Used in error messages and inspection tools.\n         */\n        name?: string;\n        /**\n         * An object containing a name-value mapping of plugin names to plugin objects.\n         * When `files` is specified, these plugins are only available to the matching files.\n         */\n        plugins?: Plugins;\n        /**\n         * Either an object containing `preprocess()` and `postprocess()` methods or\n         * a string indicating the name of a processor inside of a plugin\n         * (i.e., `\"pluginName/processorName\"`).\n         */\n        processor?: string | Processor;\n        /**\n         * An object containing the configured rules.\n         * When `files` or `ignores` are specified, these rule configurations are only available to the matching files.\n         */\n        rules?: Rules;\n        /**\n         * An object containing name-value pairs of information that should be available to all rules.\n         */\n        settings?: Settings;\n    }\n    type ConfigArray = Config[];\n    type ConfigPromise = Promise<ConfigArray>;\n    type ConfigFile = ConfigArray | ConfigPromise;\n}\n//# sourceMappingURL=Config.d.ts.map"
        }
    ]
}