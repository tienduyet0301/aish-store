{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/getTypeName.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891997216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTypeName = getTypeName;\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Get the type name of a given type.\n * @param typeChecker The context sensitive TypeScript TypeChecker.\n * @param type The type to get the name of.\n */\nfunction getTypeName(typeChecker, type) {\n    // It handles `string` and string literal types as string.\n    if ((type.flags & ts.TypeFlags.StringLike) !== 0) {\n        return 'string';\n    }\n    // If the type is a type parameter which extends primitive string types,\n    // but it was not recognized as a string like. So check the constraint\n    // type of the type parameter.\n    if ((type.flags & ts.TypeFlags.TypeParameter) !== 0) {\n        // `type.getConstraint()` method doesn't return the constraint type of\n        // the type parameter for some reason. So this gets the constraint type\n        // via AST.\n        const symbol = type.getSymbol();\n        const decls = symbol?.getDeclarations();\n        const typeParamDecl = decls?.[0];\n        if (typeParamDecl != null &&\n            ts.isTypeParameterDeclaration(typeParamDecl) &&\n            typeParamDecl.constraint != null) {\n            return getTypeName(typeChecker, typeChecker.getTypeFromTypeNode(typeParamDecl.constraint));\n        }\n    }\n    // If the type is a union and all types in the union are string like,\n    // return `string`. For example:\n    // - `\"a\" | \"b\"` is string.\n    // - `string | string[]` is not string.\n    if (type.isUnion() &&\n        type.types\n            .map(value => getTypeName(typeChecker, value))\n            .every(t => t === 'string')) {\n        return 'string';\n    }\n    // If the type is an intersection and a type in the intersection is string\n    // like, return `string`. For example: `string & {__htmlEscaped: void}`\n    if (type.isIntersection() &&\n        type.types\n            .map(value => getTypeName(typeChecker, value))\n            .some(t => t === 'string')) {\n        return 'string';\n    }\n    return typeChecker.typeToString(type);\n}\n"
        }
    ]
}