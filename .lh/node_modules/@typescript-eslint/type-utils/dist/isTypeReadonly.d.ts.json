{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/isTypeReadonly.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891997367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as ts from 'typescript';\nimport type { TypeOrValueSpecifier } from './TypeOrValueSpecifier';\nexport interface ReadonlynessOptions {\n    readonly allow?: TypeOrValueSpecifier[];\n    readonly treatMethodsAsReadonly?: boolean;\n}\nexport declare const readonlynessOptionsSchema: {\n    additionalProperties: false;\n    properties: {\n        allow: {\n            readonly items: {\n                readonly oneOf: [{\n                    readonly type: \"string\";\n                }, {\n                    readonly additionalProperties: false;\n                    readonly properties: {\n                        readonly from: {\n                            readonly enum: [\"file\"];\n                            readonly type: \"string\";\n                        };\n                        readonly name: {\n                            readonly oneOf: [{\n                                readonly type: \"string\";\n                            }, {\n                                readonly items: {\n                                    readonly type: \"string\";\n                                };\n                                readonly minItems: 1;\n                                readonly type: \"array\";\n                                readonly uniqueItems: true;\n                            }];\n                        };\n                        readonly path: {\n                            readonly type: \"string\";\n                        };\n                    };\n                    readonly required: [\"from\", \"name\"];\n                    readonly type: \"object\";\n                }, {\n                    readonly additionalProperties: false;\n                    readonly properties: {\n                        readonly from: {\n                            readonly enum: [\"lib\"];\n                            readonly type: \"string\";\n                        };\n                        readonly name: {\n                            readonly oneOf: [{\n                                readonly type: \"string\";\n                            }, {\n                                readonly items: {\n                                    readonly type: \"string\";\n                                };\n                                readonly minItems: 1;\n                                readonly type: \"array\";\n                                readonly uniqueItems: true;\n                            }];\n                        };\n                    };\n                    readonly required: [\"from\", \"name\"];\n                    readonly type: \"object\";\n                }, {\n                    readonly additionalProperties: false;\n                    readonly properties: {\n                        readonly from: {\n                            readonly enum: [\"package\"];\n                            readonly type: \"string\";\n                        };\n                        readonly name: {\n                            readonly oneOf: [{\n                                readonly type: \"string\";\n                            }, {\n                                readonly items: {\n                                    readonly type: \"string\";\n                                };\n                                readonly minItems: 1;\n                                readonly type: \"array\";\n                                readonly uniqueItems: true;\n                            }];\n                        };\n                        readonly package: {\n                            readonly type: \"string\";\n                        };\n                    };\n                    readonly required: [\"from\", \"name\", \"package\"];\n                    readonly type: \"object\";\n                }];\n            };\n            readonly type: \"array\";\n        };\n        treatMethodsAsReadonly: {\n            type: \"boolean\";\n        };\n    };\n    type: \"object\";\n};\nexport declare const readonlynessOptionsDefaults: ReadonlynessOptions;\n/**\n * Checks if the given type is readonly\n */\nexport declare function isTypeReadonly(program: ts.Program, type: ts.Type, options?: ReadonlynessOptions): boolean;\n//# sourceMappingURL=isTypeReadonly.d.ts.map"
        }
    ]
}