{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/getConstrainedTypeAtLocation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891996862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getConstrainedTypeAtLocation = getConstrainedTypeAtLocation;\n/**\n * Resolves the given node's type. Will return the type's generic constraint, if it has one.\n *\n * Warning - if the type is generic and does _not_ have a constraint, the type will be\n * returned as-is, rather than returning an `unknown` type. This can be checked\n * for by checking for the type flag ts.TypeFlags.TypeParameter.\n *\n * @see https://github.com/typescript-eslint/typescript-eslint/issues/10438\n */\nfunction getConstrainedTypeAtLocation(services, node) {\n    const nodeType = services.getTypeAtLocation(node);\n    const constrained = services.program\n        .getTypeChecker()\n        .getBaseConstraintOfType(nodeType);\n    return constrained ?? nodeType;\n}\n"
        }
    ]
}