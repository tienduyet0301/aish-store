{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/getContextualType.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891996940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getContextualType = getContextualType;\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Returns the contextual type of a given node.\n * Contextual type is the type of the target the node is going into.\n * i.e. the type of a called function's parameter, or the defined type of a variable declaration\n */\nfunction getContextualType(checker, node) {\n    const parent = node.parent;\n    if (ts.isCallExpression(parent) || ts.isNewExpression(parent)) {\n        if (node === parent.expression) {\n            // is the callee, so has no contextual type\n            return;\n        }\n    }\n    else if (ts.isVariableDeclaration(parent) ||\n        ts.isPropertyDeclaration(parent) ||\n        ts.isParameter(parent)) {\n        return parent.type ? checker.getTypeFromTypeNode(parent.type) : undefined;\n    }\n    else if (ts.isJsxExpression(parent)) {\n        return checker.getContextualType(parent);\n    }\n    else if (ts.isIdentifier(node) &&\n        (ts.isPropertyAssignment(parent) ||\n            ts.isShorthandPropertyAssignment(parent))) {\n        return checker.getContextualType(node);\n    }\n    else if (ts.isBinaryExpression(parent) &&\n        parent.operatorToken.kind === ts.SyntaxKind.EqualsToken &&\n        parent.right === node) {\n        // is RHS of assignment\n        return checker.getTypeAtLocation(parent.left);\n    }\n    else if (![ts.SyntaxKind.JsxExpression, ts.SyntaxKind.TemplateSpan].includes(parent.kind)) {\n        // parent is not something we know we can get the contextual type of\n        return;\n    }\n    // TODO - support return statement checking\n    return checker.getContextualType(node);\n}\n"
        }
    ]
}