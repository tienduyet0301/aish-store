{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/containsAllTypesByName.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891996799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.containsAllTypesByName = containsAllTypesByName;\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst typeFlagUtils_1 = require(\"./typeFlagUtils\");\n/**\n * @param type Type being checked by name.\n * @param allowAny Whether to consider `any` and `unknown` to match.\n * @param allowedNames Symbol names checking on the type.\n * @param matchAnyInstead Whether to instead just check if any parts match, rather than all parts.\n * @returns Whether the type is, extends, or contains the allowed names (or all matches the allowed names, if mustMatchAll is true).\n */\nfunction containsAllTypesByName(type, allowAny, allowedNames, matchAnyInstead = false) {\n    if ((0, typeFlagUtils_1.isTypeFlagSet)(type, ts.TypeFlags.Any | ts.TypeFlags.Unknown)) {\n        return !allowAny;\n    }\n    if (tsutils.isTypeReference(type)) {\n        type = type.target;\n    }\n    const symbol = type.getSymbol();\n    if (symbol && allowedNames.has(symbol.name)) {\n        return true;\n    }\n    const predicate = (t) => containsAllTypesByName(t, allowAny, allowedNames, matchAnyInstead);\n    if (tsutils.isUnionOrIntersectionType(type)) {\n        return matchAnyInstead\n            ? type.types.some(predicate)\n            : type.types.every(predicate);\n    }\n    const bases = type.getBaseTypes();\n    return (bases != null &&\n        (matchAnyInstead\n            ? bases.some(predicate)\n            : bases.length > 0 && bases.every(predicate)));\n}\n"
        }
    ]
}