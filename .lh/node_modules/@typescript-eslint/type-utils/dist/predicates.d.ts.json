{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/predicates.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891997529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as ts from 'typescript';\n/**\n * Checks if the given type is (or accepts) nullable\n */\nexport declare function isNullableType(type: ts.Type): boolean;\n/**\n * Checks if the given type is either an array type,\n * or a union made up solely of array types.\n */\nexport declare function isTypeArrayTypeOrUnionOfArrayTypes(type: ts.Type, checker: ts.TypeChecker): boolean;\n/**\n * @returns true if the type is `never`\n */\nexport declare function isTypeNeverType(type: ts.Type): boolean;\n/**\n * @returns true if the type is `unknown`\n */\nexport declare function isTypeUnknownType(type: ts.Type): boolean;\nexport declare function isTypeReferenceType(type: ts.Type): type is ts.TypeReference;\n/**\n * @returns true if the type is `any`\n */\nexport declare function isTypeAnyType(type: ts.Type): boolean;\n/**\n * @returns true if the type is `any[]`\n */\nexport declare function isTypeAnyArrayType(type: ts.Type, checker: ts.TypeChecker): boolean;\n/**\n * @returns true if the type is `unknown[]`\n */\nexport declare function isTypeUnknownArrayType(type: ts.Type, checker: ts.TypeChecker): boolean;\nexport declare enum AnyType {\n    Any = 0,\n    PromiseAny = 1,\n    AnyArray = 2,\n    Safe = 3\n}\n/**\n * @returns `AnyType.Any` if the type is `any`, `AnyType.AnyArray` if the type is `any[]` or `readonly any[]`, `AnyType.PromiseAny` if the type is `Promise<any>`,\n *          otherwise it returns `AnyType.Safe`.\n */\nexport declare function discriminateAnyType(type: ts.Type, checker: ts.TypeChecker, program: ts.Program, tsNode: ts.Node): AnyType;\n/**\n * @returns Whether a type is an instance of the parent type, including for the parent's base types.\n */\nexport declare function typeIsOrHasBaseType(type: ts.Type, parentType: ts.Type): boolean;\nexport declare function isTypeBigIntLiteralType(type: ts.Type): type is ts.BigIntLiteralType;\nexport declare function isTypeTemplateLiteralType(type: ts.Type): type is ts.TemplateLiteralType;\n//# sourceMappingURL=predicates.d.ts.map"
        }
    ]
}