{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/typeOrValueSpecifiers/typeDeclaredInPackageDeclarationFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891998134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeDeclaredInPackageDeclarationFile = typeDeclaredInPackageDeclarationFile;\nconst ts = __importStar(require(\"typescript\"));\nfunction findParentModuleDeclaration(node) {\n    switch (node.kind) {\n        case ts.SyntaxKind.ModuleDeclaration:\n            return ts.isStringLiteral(node.name)\n                ? node\n                : undefined;\n        case ts.SyntaxKind.SourceFile:\n            return undefined;\n        default:\n            return findParentModuleDeclaration(node.parent);\n    }\n}\nfunction typeDeclaredInDeclareModule(packageName, declarations) {\n    return declarations.some(declaration => findParentModuleDeclaration(declaration)?.name.text === packageName);\n}\nfunction typeDeclaredInDeclarationFile(packageName, declarationFiles, program) {\n    // Handle scoped packages: if the name starts with @, remove it and replace / with __\n    const typesPackageName = packageName.replace(/^@([^/]+)\\//, '$1__');\n    const matcher = new RegExp(`${packageName}|${typesPackageName}`);\n    return declarationFiles.some(declaration => {\n        const packageIdName = program.sourceFileToPackageName.get(declaration.path);\n        return (packageIdName != null &&\n            matcher.test(packageIdName) &&\n            program.isSourceFileFromExternalLibrary(declaration));\n    });\n}\nfunction typeDeclaredInPackageDeclarationFile(packageName, declarations, declarationFiles, program) {\n    return (typeDeclaredInDeclareModule(packageName, declarations) ||\n        typeDeclaredInDeclarationFile(packageName, declarationFiles, program));\n}\n"
        }
    ]
}