{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/propertyTypes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891997649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTypeOfPropertyOfName = getTypeOfPropertyOfName;\nexports.getTypeOfPropertyOfType = getTypeOfPropertyOfType;\nfunction getTypeOfPropertyOfName(checker, type, name, escapedName) {\n    // Most names are directly usable in the checker and aren't different from escaped names\n    if (!escapedName || !isSymbol(escapedName)) {\n        return checker.getTypeOfPropertyOfType(type, name);\n    }\n    // Symbolic names may differ in their escaped name compared to their human-readable name\n    // https://github.com/typescript-eslint/typescript-eslint/issues/2143\n    const escapedProperty = type\n        .getProperties()\n        .find(property => property.escapedName === escapedName);\n    return escapedProperty\n        ? checker.getDeclaredTypeOfSymbol(escapedProperty)\n        : undefined;\n}\nfunction getTypeOfPropertyOfType(checker, type, property) {\n    return getTypeOfPropertyOfName(checker, type, property.getName(), property.getEscapedName());\n}\n// Symbolic names need to be specially handled because TS api is not sufficient for these cases.\n// Source based on:\n// https://github.com/microsoft/TypeScript/blob/0043abe982aae0d35f8df59f9715be6ada758ff7/src/compiler/utilities.ts#L3388-L3402\nfunction isSymbol(escapedName) {\n    return isKnownSymbol(escapedName) || isPrivateIdentifierSymbol(escapedName);\n}\n// case for escapedName: \"__@foo@10\", name: \"__@foo@10\"\nfunction isKnownSymbol(escapedName) {\n    return escapedName.startsWith('__@');\n}\n// case for escapedName: \"__#1@#foo\", name: \"#foo\"\nfunction isPrivateIdentifierSymbol(escapedName) {\n    return escapedName.startsWith('__#');\n}\n"
        }
    ]
}