{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/getConstrainedTypeAtLocation.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891996819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type { ParserServicesWithTypeInformation, TSESTree } from '@typescript-eslint/typescript-estree';\nimport type * as ts from 'typescript';\n/**\n * Resolves the given node's type. Will return the type's generic constraint, if it has one.\n *\n * Warning - if the type is generic and does _not_ have a constraint, the type will be\n * returned as-is, rather than returning an `unknown` type. This can be checked\n * for by checking for the type flag ts.TypeFlags.TypeParameter.\n *\n * @see https://github.com/typescript-eslint/typescript-eslint/issues/10438\n */\nexport declare function getConstrainedTypeAtLocation(services: ParserServicesWithTypeInformation, node: TSESTree.Node): ts.Type;\n//# sourceMappingURL=getConstrainedTypeAtLocation.d.ts.map"
        }
    ]
}