{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/TypeOrValueSpecifier.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891997861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeMatchesSomeSpecifier = exports.typeOrValueSpecifiersSchema = void 0;\nexports.typeMatchesSpecifier = typeMatchesSpecifier;\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst specifierNameMatches_1 = require(\"./typeOrValueSpecifiers/specifierNameMatches\");\nconst typeDeclaredInFile_1 = require(\"./typeOrValueSpecifiers/typeDeclaredInFile\");\nconst typeDeclaredInLib_1 = require(\"./typeOrValueSpecifiers/typeDeclaredInLib\");\nconst typeDeclaredInPackageDeclarationFile_1 = require(\"./typeOrValueSpecifiers/typeDeclaredInPackageDeclarationFile\");\nexports.typeOrValueSpecifiersSchema = {\n    items: {\n        oneOf: [\n            {\n                type: 'string',\n            },\n            {\n                additionalProperties: false,\n                properties: {\n                    from: {\n                        enum: ['file'],\n                        type: 'string',\n                    },\n                    name: {\n                        oneOf: [\n                            {\n                                type: 'string',\n                            },\n                            {\n                                items: {\n                                    type: 'string',\n                                },\n                                minItems: 1,\n                                type: 'array',\n                                uniqueItems: true,\n                            },\n                        ],\n                    },\n                    path: {\n                        type: 'string',\n                    },\n                },\n                required: ['from', 'name'],\n                type: 'object',\n            },\n            {\n                additionalProperties: false,\n                properties: {\n                    from: {\n                        enum: ['lib'],\n                        type: 'string',\n                    },\n                    name: {\n                        oneOf: [\n                            {\n                                type: 'string',\n                            },\n                            {\n                                items: {\n                                    type: 'string',\n                                },\n                                minItems: 1,\n                                type: 'array',\n                                uniqueItems: true,\n                            },\n                        ],\n                    },\n                },\n                required: ['from', 'name'],\n                type: 'object',\n            },\n            {\n                additionalProperties: false,\n                properties: {\n                    from: {\n                        enum: ['package'],\n                        type: 'string',\n                    },\n                    name: {\n                        oneOf: [\n                            {\n                                type: 'string',\n                            },\n                            {\n                                items: {\n                                    type: 'string',\n                                },\n                                minItems: 1,\n                                type: 'array',\n                                uniqueItems: true,\n                            },\n                        ],\n                    },\n                    package: {\n                        type: 'string',\n                    },\n                },\n                required: ['from', 'name', 'package'],\n                type: 'object',\n            },\n        ],\n    },\n    type: 'array',\n};\nfunction typeMatchesSpecifier(type, specifier, program) {\n    const wholeTypeMatches = (() => {\n        if (tsutils.isIntrinsicErrorType(type)) {\n            return false;\n        }\n        if (typeof specifier === 'string') {\n            return (0, specifierNameMatches_1.specifierNameMatches)(type, specifier);\n        }\n        if (!(0, specifierNameMatches_1.specifierNameMatches)(type, specifier.name)) {\n            return false;\n        }\n        const symbol = type.getSymbol() ?? type.aliasSymbol;\n        const declarations = symbol?.getDeclarations() ?? [];\n        const declarationFiles = declarations.map(declaration => declaration.getSourceFile());\n        switch (specifier.from) {\n            case 'file':\n                return (0, typeDeclaredInFile_1.typeDeclaredInFile)(specifier.path, declarationFiles, program);\n            case 'lib':\n                return (0, typeDeclaredInLib_1.typeDeclaredInLib)(declarationFiles, program);\n            case 'package':\n                return (0, typeDeclaredInPackageDeclarationFile_1.typeDeclaredInPackageDeclarationFile)(specifier.package, declarations, declarationFiles, program);\n        }\n    })();\n    if (wholeTypeMatches) {\n        return true;\n    }\n    if (tsutils.isIntersectionType(type) &&\n        tsutils\n            .intersectionTypeParts(type)\n            .some(part => typeMatchesSpecifier(part, specifier, program))) {\n        return true;\n    }\n    return false;\n}\nconst typeMatchesSomeSpecifier = (type, specifiers = [], program) => specifiers.some(specifier => typeMatchesSpecifier(type, specifier, program));\nexports.typeMatchesSomeSpecifier = typeMatchesSomeSpecifier;\n"
        }
    ]
}