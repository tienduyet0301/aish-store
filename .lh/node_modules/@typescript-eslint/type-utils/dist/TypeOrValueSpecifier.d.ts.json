{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/TypeOrValueSpecifier.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891997810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import type * as ts from 'typescript';\n/**\n * Describes specific types or values declared in local files.\n * See [TypeOrValueSpecifier > FileSpecifier](/packages/type-utils/type-or-value-specifier#filespecifier).\n */\nexport interface FileSpecifier {\n    from: 'file';\n    /**\n     * Type or value name(s) to match on.\n     */\n    name: string | string[];\n    /**\n     * A specific file the types or values must be declared in.\n     */\n    path?: string;\n}\n/**\n * Describes specific types or values declared in TypeScript's built-in lib definitions.\n * See [TypeOrValueSpecifier > LibSpecifier](/packages/type-utils/type-or-value-specifier#libspecifier).\n */\nexport interface LibSpecifier {\n    from: 'lib';\n    /**\n     * Type or value name(s) to match on.\n     */\n    name: string | string[];\n}\n/**\n * Describes specific types or values imported from packages.\n * See [TypeOrValueSpecifier > PackageSpecifier](/packages/type-utils/type-or-value-specifier#packagespecifier).\n */\nexport interface PackageSpecifier {\n    from: 'package';\n    /**\n     * Type or value name(s) to match on.\n     */\n    name: string | string[];\n    /**\n     * Package name the type or value must be declared in.\n     */\n    package: string;\n}\n/**\n * A centralized format for rule options to describe specific _types_ and/or _values_.\n * See [TypeOrValueSpecifier](/packages/type-utils/type-or-value-specifier).\n */\nexport type TypeOrValueSpecifier = string | FileSpecifier | LibSpecifier | PackageSpecifier;\nexport declare const typeOrValueSpecifiersSchema: {\n    readonly items: {\n        readonly oneOf: [{\n            readonly type: \"string\";\n        }, {\n            readonly additionalProperties: false;\n            readonly properties: {\n                readonly from: {\n                    readonly enum: [\"file\"];\n                    readonly type: \"string\";\n                };\n                readonly name: {\n                    readonly oneOf: [{\n                        readonly type: \"string\";\n                    }, {\n                        readonly items: {\n                            readonly type: \"string\";\n                        };\n                        readonly minItems: 1;\n                        readonly type: \"array\";\n                        readonly uniqueItems: true;\n                    }];\n                };\n                readonly path: {\n                    readonly type: \"string\";\n                };\n            };\n            readonly required: [\"from\", \"name\"];\n            readonly type: \"object\";\n        }, {\n            readonly additionalProperties: false;\n            readonly properties: {\n                readonly from: {\n                    readonly enum: [\"lib\"];\n                    readonly type: \"string\";\n                };\n                readonly name: {\n                    readonly oneOf: [{\n                        readonly type: \"string\";\n                    }, {\n                        readonly items: {\n                            readonly type: \"string\";\n                        };\n                        readonly minItems: 1;\n                        readonly type: \"array\";\n                        readonly uniqueItems: true;\n                    }];\n                };\n            };\n            readonly required: [\"from\", \"name\"];\n            readonly type: \"object\";\n        }, {\n            readonly additionalProperties: false;\n            readonly properties: {\n                readonly from: {\n                    readonly enum: [\"package\"];\n                    readonly type: \"string\";\n                };\n                readonly name: {\n                    readonly oneOf: [{\n                        readonly type: \"string\";\n                    }, {\n                        readonly items: {\n                            readonly type: \"string\";\n                        };\n                        readonly minItems: 1;\n                        readonly type: \"array\";\n                        readonly uniqueItems: true;\n                    }];\n                };\n                readonly package: {\n                    readonly type: \"string\";\n                };\n            };\n            readonly required: [\"from\", \"name\", \"package\"];\n            readonly type: \"object\";\n        }];\n    };\n    readonly type: \"array\";\n};\nexport declare function typeMatchesSpecifier(type: ts.Type, specifier: TypeOrValueSpecifier, program: ts.Program): boolean;\nexport declare const typeMatchesSomeSpecifier: (type: ts.Type, specifiers: TypeOrValueSpecifier[] | undefined, program: ts.Program) => boolean;\n//# sourceMappingURL=TypeOrValueSpecifier.d.ts.map"
        }
    ]
}