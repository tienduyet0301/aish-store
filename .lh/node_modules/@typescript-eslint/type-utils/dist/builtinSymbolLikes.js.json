{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/builtinSymbolLikes.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891996721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isPromiseLike = isPromiseLike;\nexports.isPromiseConstructorLike = isPromiseConstructorLike;\nexports.isErrorLike = isErrorLike;\nexports.isReadonlyErrorLike = isReadonlyErrorLike;\nexports.isReadonlyTypeLike = isReadonlyTypeLike;\nexports.isBuiltinTypeAliasLike = isBuiltinTypeAliasLike;\nexports.isBuiltinSymbolLike = isBuiltinSymbolLike;\nexports.isBuiltinSymbolLikeRecurser = isBuiltinSymbolLikeRecurser;\nconst tsutils = __importStar(require(\"ts-api-utils\"));\nconst ts = __importStar(require(\"typescript\"));\nconst isSymbolFromDefaultLibrary_1 = require(\"./isSymbolFromDefaultLibrary\");\n/**\n * @example\n * ```ts\n * class DerivedClass extends Promise<number> {}\n * DerivedClass.reject\n * // ^ PromiseLike\n * ```\n */\nfunction isPromiseLike(program, type) {\n    return isBuiltinSymbolLike(program, type, 'Promise');\n}\n/**\n * @example\n * ```ts\n * const value = Promise\n * value.reject\n * // ^ PromiseConstructorLike\n * ```\n */\nfunction isPromiseConstructorLike(program, type) {\n    return isBuiltinSymbolLike(program, type, 'PromiseConstructor');\n}\n/**\n * @example\n * ```ts\n * class Foo extends Error {}\n * new Foo()\n * //   ^ ErrorLike\n * ```\n */\nfunction isErrorLike(program, type) {\n    return isBuiltinSymbolLike(program, type, 'Error');\n}\n/**\n * @example\n * ```ts\n * type T = Readonly<Error>\n * //   ^ ReadonlyErrorLike\n * ```\n */\nfunction isReadonlyErrorLike(program, type) {\n    return isReadonlyTypeLike(program, type, subtype => {\n        const [typeArgument] = subtype.aliasTypeArguments;\n        return (isErrorLike(program, typeArgument) ||\n            isReadonlyErrorLike(program, typeArgument));\n    });\n}\n/**\n * @example\n * ```ts\n * type T = Readonly<{ foo: 'bar' }>\n * //   ^ ReadonlyTypeLike\n * ```\n */\nfunction isReadonlyTypeLike(program, type, predicate) {\n    return isBuiltinTypeAliasLike(program, type, subtype => {\n        return (subtype.aliasSymbol.getName() === 'Readonly' && !!predicate?.(subtype));\n    });\n}\nfunction isBuiltinTypeAliasLike(program, type, predicate) {\n    return isBuiltinSymbolLikeRecurser(program, type, subtype => {\n        const { aliasSymbol, aliasTypeArguments } = subtype;\n        if (!aliasSymbol || !aliasTypeArguments) {\n            return false;\n        }\n        if ((0, isSymbolFromDefaultLibrary_1.isSymbolFromDefaultLibrary)(program, aliasSymbol) &&\n            predicate(subtype)) {\n            return true;\n        }\n        return null;\n    });\n}\nfunction isBuiltinSymbolLike(program, type, symbolName) {\n    return isBuiltinSymbolLikeRecurser(program, type, subType => {\n        const symbol = subType.getSymbol();\n        if (!symbol) {\n            return false;\n        }\n        const actualSymbolName = symbol.getName();\n        if ((Array.isArray(symbolName)\n            ? symbolName.some(name => actualSymbolName === name)\n            : actualSymbolName === symbolName) &&\n            (0, isSymbolFromDefaultLibrary_1.isSymbolFromDefaultLibrary)(program, symbol)) {\n            return true;\n        }\n        return null;\n    });\n}\nfunction isBuiltinSymbolLikeRecurser(program, type, predicate) {\n    if (type.isIntersection()) {\n        return type.types.some(t => isBuiltinSymbolLikeRecurser(program, t, predicate));\n    }\n    if (type.isUnion()) {\n        return type.types.every(t => isBuiltinSymbolLikeRecurser(program, t, predicate));\n    }\n    if (tsutils.isTypeParameter(type)) {\n        const t = type.getConstraint();\n        if (t) {\n            return isBuiltinSymbolLikeRecurser(program, t, predicate);\n        }\n        return false;\n    }\n    const predicateResult = predicate(type);\n    if (typeof predicateResult === 'boolean') {\n        return predicateResult;\n    }\n    const symbol = type.getSymbol();\n    if (symbol &&\n        symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Interface)) {\n        const checker = program.getTypeChecker();\n        for (const baseType of checker.getBaseTypes(type)) {\n            if (isBuiltinSymbolLikeRecurser(program, baseType, predicate)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"
        }
    ]
}