{
    "sourceFile": "node_modules/@typescript-eslint/type-utils/dist/builtinSymbolLikes.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891996671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import * as ts from 'typescript';\n/**\n * @example\n * ```ts\n * class DerivedClass extends Promise<number> {}\n * DerivedClass.reject\n * // ^ PromiseLike\n * ```\n */\nexport declare function isPromiseLike(program: ts.Program, type: ts.Type): boolean;\n/**\n * @example\n * ```ts\n * const value = Promise\n * value.reject\n * // ^ PromiseConstructorLike\n * ```\n */\nexport declare function isPromiseConstructorLike(program: ts.Program, type: ts.Type): boolean;\n/**\n * @example\n * ```ts\n * class Foo extends Error {}\n * new Foo()\n * //   ^ ErrorLike\n * ```\n */\nexport declare function isErrorLike(program: ts.Program, type: ts.Type): boolean;\n/**\n * @example\n * ```ts\n * type T = Readonly<Error>\n * //   ^ ReadonlyErrorLike\n * ```\n */\nexport declare function isReadonlyErrorLike(program: ts.Program, type: ts.Type): boolean;\n/**\n * @example\n * ```ts\n * type T = Readonly<{ foo: 'bar' }>\n * //   ^ ReadonlyTypeLike\n * ```\n */\nexport declare function isReadonlyTypeLike(program: ts.Program, type: ts.Type, predicate?: (subType: {\n    aliasSymbol: ts.Symbol;\n    aliasTypeArguments: readonly ts.Type[];\n} & ts.Type) => boolean): boolean;\nexport declare function isBuiltinTypeAliasLike(program: ts.Program, type: ts.Type, predicate: (subType: {\n    aliasSymbol: ts.Symbol;\n    aliasTypeArguments: readonly ts.Type[];\n} & ts.Type) => boolean): boolean;\nexport declare function isBuiltinSymbolLike(program: ts.Program, type: ts.Type, symbolName: string | string[]): boolean;\nexport declare function isBuiltinSymbolLikeRecurser(program: ts.Program, type: ts.Type, predicate: (subType: ts.Type) => boolean | null): boolean;\n//# sourceMappingURL=builtinSymbolLikes.d.ts.map"
        }
    ]
}