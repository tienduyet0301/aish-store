{
    "sourceFile": "node_modules/es-set-tostringtag/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892200797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar hasToStringTag = require('has-tostringtag/shams')();\nvar hasOwn = require('hasown');\n\nvar setToStringTag = require('../');\n\ntest('setToStringTag', function (t) {\n\tt.equal(typeof setToStringTag, 'function', 'is a function');\n\n\t/** @type {{ [Symbol.toStringTag]?: typeof sentinel }} */\n\tvar obj = {};\n\tvar sentinel = {};\n\n\tsetToStringTag(obj, sentinel);\n\n\tt['throws'](\n\t\t// @ts-expect-error\n\t\tfunction () { setToStringTag(obj, sentinel, { force: 'yes' }); },\n\t\tTypeError,\n\t\t'throws if options is not an object'\n\t);\n\n\tt.test('has Symbol.toStringTag', { skip: !hasToStringTag }, function (st) {\n\t\tst.ok(hasOwn(obj, Symbol.toStringTag), 'has toStringTag property');\n\n\t\tst.equal(obj[Symbol.toStringTag], sentinel, 'toStringTag property is as expected');\n\n\t\tst.equal(String(obj), '[object Object]', 'toStringTag works');\n\n\t\t/** @type {{ [Symbol.toStringTag]?: string }} */\n\t\tvar tagged = {};\n\t\ttagged[Symbol.toStringTag] = 'already tagged';\n\t\tst.equal(String(tagged), '[object already tagged]', 'toStringTag works');\n\n\t\tsetToStringTag(tagged, 'new tag');\n\t\tst.equal(String(tagged), '[object already tagged]', 'toStringTag is unchanged');\n\n\t\tsetToStringTag(tagged, 'new tag', { force: true });\n\t\tst.equal(String(tagged), '[object new tag]', 'toStringTag is changed with force: true');\n\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertyDescriptor(tagged, Symbol.toStringTag),\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: 'new tag',\n\t\t\t\twritable: false\n\t\t\t},\n\t\t\t'has expected property descriptor'\n\t\t);\n\n\t\tsetToStringTag(tagged, 'new tag', { force: true, nonConfigurable: true });\n\t\tst.deepEqual(\n\t\t\tObject.getOwnPropertyDescriptor(tagged, Symbol.toStringTag),\n\t\t\t{\n\t\t\t\tconfigurable: false,\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: 'new tag',\n\t\t\t\twritable: false\n\t\t\t},\n\t\t\t'is nonconfigurable'\n\t\t);\n\n\t\tst.end();\n\t});\n\n\tt.test('does not have Symbol.toStringTag', { skip: hasToStringTag }, function (st) {\n\t\tvar passed = true;\n\t\tfor (var key in obj) { // eslint-disable-line no-restricted-syntax\n\t\t\tif (hasOwn(obj, key)) {\n\t\t\t\tst.fail('object has own key ' + key);\n\t\t\t\tpassed = false;\n\t\t\t}\n\t\t}\n\t\tif (passed) {\n\t\t\tst.ok(true, 'object has no enumerable own keys');\n\t\t}\n\n\t\tst.end();\n\t});\n\n\tt.end();\n});\n"
        }
    ]
}