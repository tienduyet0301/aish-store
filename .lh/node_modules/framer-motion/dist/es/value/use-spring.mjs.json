{
    "sourceFile": "node_modules/framer-motion/dist/es/value/use-spring.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892309025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { frame, JSAnimation } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { useContext, useRef, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\n\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const initialValue = useConstant(() => isMotionValue(source) ? source.get() : source);\n    const unit = useConstant(() => typeof initialValue === \"string\"\n        ? initialValue.replace(/[\\d.-]/g, \"\")\n        : undefined);\n    const value = useMotionValue(initialValue);\n    const latestValue = useRef(initialValue);\n    const latestSetter = useRef(noop);\n    const startAnimation = () => {\n        stopAnimation();\n        activeSpringAnimation.current = new JSAnimation({\n            keyframes: [asNumber(value.get()), asNumber(latestValue.current)],\n            velocity: value.getVelocity(),\n            type: \"spring\",\n            restDelta: 0.001,\n            restSpeed: 0.01,\n            ...config,\n            onUpdate: latestSetter.current,\n        });\n    };\n    const stopAnimation = () => {\n        if (activeSpringAnimation.current) {\n            activeSpringAnimation.current.stop();\n        }\n    };\n    useInsertionEffect(() => {\n        return value.attach((v, set) => {\n            if (isStatic)\n                return set(v);\n            latestValue.current = v;\n            latestSetter.current = (latest) => set(parseValue(latest, unit));\n            frame.postRender(startAnimation);\n            return value.get();\n        }, stopAnimation);\n    }, [JSON.stringify(config)]);\n    useIsomorphicLayoutEffect(() => {\n        if (isMotionValue(source)) {\n            return source.on(\"change\", (v) => value.set(parseValue(v, unit)));\n        }\n    }, [value, unit]);\n    return value;\n}\nfunction parseValue(v, unit) {\n    return unit ? v + unit : v;\n}\nfunction asNumber(v) {\n    return typeof v === \"number\" ? v : parseFloat(v);\n}\n\nexport { useSpring };\n"
        }
    ]
}