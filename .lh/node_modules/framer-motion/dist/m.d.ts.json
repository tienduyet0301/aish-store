{
    "sourceFile": "node_modules/framer-motion/dist/m.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892309616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/// <reference types=\"react\" />\nimport { TransformProperties, SVGPathProperties, VariableKeyframesDefinition, MotionValue, Transition as Transition$1, Batcher } from 'motion-dom';\nimport * as React$1 from 'react';\nimport { SVGAttributes, CSSProperties, PropsWithoutRef, RefAttributes, JSX } from 'react';\nimport { Easing, Point, BoundingBox, Box } from 'motion-utils';\n\n/**\n * Options for orchestrating the timing of animations.\n *\n * @public\n */\ninterface Orchestration {\n    /**\n     * Delay the animation by this duration (in seconds). Defaults to `0`.\n     *\n     * @remarks\n     * ```javascript\n     * const transition = {\n     *   delay: 0.2\n     * }\n     * ```\n     *\n     * @public\n     */\n    delay?: number;\n    /**\n     * Describes the relationship between the transition and its children. Set\n     * to `false` by default.\n     *\n     * @remarks\n     * When using variants, the transition can be scheduled in relation to its\n     * children with either `\"beforeChildren\"` to finish this transition before\n     * starting children transitions, `\"afterChildren\"` to finish children\n     * transitions before starting this transition.\n     *\n     * ```jsx\n     * const list = {\n     *   hidden: {\n     *     opacity: 0,\n     *     transition: { when: \"afterChildren\" }\n     *   }\n     * }\n     *\n     * const item = {\n     *   hidden: {\n     *     opacity: 0,\n     *     transition: { duration: 2 }\n     *   }\n     * }\n     *\n     * return (\n     *   <motion.ul variants={list} animate=\"hidden\">\n     *     <motion.li variants={item} />\n     *     <motion.li variants={item} />\n     *   </motion.ul>\n     * )\n     * ```\n     *\n     * @public\n     */\n    when?: false | \"beforeChildren\" | \"afterChildren\" | string;\n    /**\n     * When using variants, children animations will start after this duration\n     * (in seconds). You can add the `transition` property to both the `Frame` and the `variant` directly. Adding it to the `variant` generally offers more flexibility, as it allows you to customize the delay per visual state.\n     *\n     * ```jsx\n     * const container = {\n     *   hidden: { opacity: 0 },\n     *   show: {\n     *     opacity: 1,\n     *     transition: {\n     *       delayChildren: 0.5\n     *     }\n     *   }\n     * }\n     *\n     * const item = {\n     *   hidden: { opacity: 0 },\n     *   show: { opacity: 1 }\n     * }\n     *\n     * return (\n     *   <motion.ul\n     *     variants={container}\n     *     initial=\"hidden\"\n     *     animate=\"show\"\n     *   >\n     *     <motion.li variants={item} />\n     *     <motion.li variants={item} />\n     *   </motion.ul>\n     * )\n     * ```\n     *\n     * @public\n     */\n    delayChildren?: number;\n    /**\n     * When using variants, animations of child components can be staggered by this\n     * duration (in seconds).\n     *\n     * For instance, if `staggerChildren` is `0.01`, the first child will be\n     * delayed by `0` seconds, the second by `0.01`, the third by `0.02` and so\n     * on.\n     *\n     * The calculated stagger delay will be added to `delayChildren`.\n     *\n     * ```jsx\n     * const container = {\n     *   hidden: { opacity: 0 },\n     *   show: {\n     *     opacity: 1,\n     *     transition: {\n     *       staggerChildren: 0.5\n     *     }\n     *   }\n     * }\n     *\n     * const item = {\n     *   hidden: { opacity: 0 },\n     *   show: { opacity: 1 }\n     * }\n     *\n     * return (\n     *   <motion.ol\n     *     variants={container}\n     *     initial=\"hidden\"\n     *     animate=\"show\"\n     *   >\n     *     <motion.li variants={item} />\n     *     <motion.li variants={item} />\n     *   </motion.ol>\n     * )\n     * ```\n     *\n     * @public\n     */\n    staggerChildren?: number;\n    /**\n     * The direction in which to stagger children.\n     *\n     * A value of `1` staggers from the first to the last while `-1`\n     * staggers from the last to the first.\n     *\n     * ```jsx\n     * const container = {\n     *   hidden: { opacity: 0 },\n     *   show: {\n     *     opacity: 1,\n     *     transition: {\n     *       staggerChildren: 0.5,\n     *       staggerDirection: -1\n     *     }\n     *   }\n     * }\n     *\n     * const item = {\n     *   hidden: { opacity: 0 },\n     *   show: { opacity: 1 }\n     * }\n     *\n     * return (\n     *   <motion.ul\n     *     variants={container}\n     *     initial=\"hidden\"\n     *     animate=\"show\"\n     *   >\n     *     <motion.li variants={item} size={50} />\n     *     <motion.li variants={item} size={50} />\n     *   </motion.ul>\n     * )\n     * ```\n     *\n     * @public\n     */\n    staggerDirection?: number;\n}\ninterface Repeat {\n    /**\n     * The number of times to repeat the transition. Set to `Infinity` for perpetual repeating.\n     *\n     * Without setting `repeatType`, this will loop the animation.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ repeat: Infinity, duration: 2 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    repeat?: number;\n    /**\n     * How to repeat the animation. This can be either:\n     *\n     * \"loop\": Repeats the animation from the start\n     *\n     * \"reverse\": Alternates between forward and backwards playback\n     *\n     * \"mirror\": Switches `from` and `to` alternately\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{\n     *     repeat: 1,\n     *     repeatType: \"reverse\",\n     *     duration: 2\n     *   }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    repeatType?: \"loop\" | \"reverse\" | \"mirror\";\n    /**\n     * When repeating an animation, `repeatDelay` will set the\n     * duration of the time to wait, in seconds, between each repetition.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ repeat: Infinity, repeatDelay: 1 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    repeatDelay?: number;\n}\n/**\n * An animation that animates between two or more values over a specific duration of time.\n * This is the default animation for non-physical values like `color` and `opacity`.\n *\n * @public\n */\ninterface Tween extends Repeat {\n    /**\n     * Set `type` to `\"tween\"` to use a duration-based tween animation.\n     * If any non-orchestration `transition` values are set without a `type` property,\n     * this is used as the default animation.\n     *\n     * ```jsx\n     * <motion.path\n     *   animate={{ pathLength: 1 }}\n     *   transition={{ duration: 2, type: \"tween\" }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    type?: \"tween\";\n    /**\n     * The duration of the tween animation. Set to `0.3` by default, 0r `0.8` if animating a series of keyframes.\n     *\n     * ```jsx\n     * const variants = {\n     *   visible: {\n     *     opacity: 1,\n     *     transition: { duration: 2 }\n     *   }\n     * }\n     * ```\n     *\n     * @public\n     */\n    duration?: number;\n    /**\n     * The easing function to use. Set as one of the below.\n     *\n     * - The name of an existing easing function.\n     *\n     * - An array of four numbers to define a cubic bezier curve.\n     *\n     * - An easing function, that accepts and returns a value `0-1`.\n     *\n     * If the animating value is set as an array of multiple values for a keyframes\n     * animation, `ease` can be set as an array of easing functions to set different easings between\n     * each of those values.\n     *\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ opacity: 0 }}\n     *   transition={{ ease: [0.17, 0.67, 0.83, 0.67] }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    ease?: Easing | Easing[];\n    /**\n     * When animating keyframes, `times` can be used to determine where in the animation each keyframe is reached.\n     * Each value in `times` is a value between `0` and `1`, representing `duration`.\n     *\n     * There must be the same number of `times` as there are keyframes.\n     * Defaults to an array of evenly-spread durations.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ scale: [0, 1, 0.5, 1] }}\n     *   transition={{ times: [0, 0.1, 0.9, 1] }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    times?: number[];\n    /**\n     * When animating keyframes, `easings` can be used to define easing functions between each keyframe. This array should be one item fewer than the number of keyframes, as these easings apply to the transitions between the keyframes.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ backgroundColor: [\"#0f0\", \"#00f\", \"#f00\"] }}\n     *   transition={{ easings: [\"easeIn\", \"easeOut\"] }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    easings?: Easing[];\n    /**\n     * The value to animate from.\n     * By default, this is the current state of the animating value.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ from: 90, duration: 2 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    from?: number | string;\n}\n/**\n * An animation that simulates spring physics for realistic motion.\n * This is the default animation for physical values like `x`, `y`, `scale` and `rotate`.\n *\n * @public\n */\ninterface Spring extends Repeat {\n    /**\n     * Set `type` to `\"spring\"` to animate using spring physics for natural\n     * movement. Type is set to `\"spring\"` by default.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring' }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    type: \"spring\";\n    /**\n     * Stiffness of the spring. Higher values will create more sudden movement.\n     * Set to `100` by default.\n     *\n     * ```jsx\n     * <motion.section\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring', stiffness: 50 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    stiffness?: number;\n    /**\n     * Strength of opposing force. If set to 0, spring will oscillate\n     * indefinitely. Set to `10` by default.\n     *\n     * ```jsx\n     * <motion.a\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring', damping: 300 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    damping?: number;\n    /**\n     * Mass of the moving object. Higher values will result in more lethargic\n     * movement. Set to `1` by default.\n     *\n     * ```jsx\n     * <motion.feTurbulence\n     *   animate={{ baseFrequency: 0.5 } as any}\n     *   transition={{ type: \"spring\", mass: 0.5 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    mass?: number;\n    /**\n     * The duration of the animation, defined in seconds. Spring animations can be a maximum of 10 seconds.\n     *\n     * If `bounce` is set, this defaults to `0.8`.\n     *\n     * Note: `duration` and `bounce` will be overridden if `stiffness`, `damping` or `mass` are set.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ x: 100 }}\n     *   transition={{ type: \"spring\", duration: 0.8 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    duration?: number;\n    /**\n     * If visualDuration is set, this will override duration.\n     *\n     * The visual duration is a time, set in seconds, that the animation will take to visually appear to reach its target.\n     *\n     * In other words, the bulk of the transition will occur before this time, and the \"bouncy bit\" will mostly happen after.\n     *\n     * This makes it easier to edit a spring, as well as visually coordinate it with other time-based animations.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ x: 100 }}\n     *   transition={{ type: \"spring\", visualDuration: 0.5 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    visualDuration?: number;\n    /**\n     * `bounce` determines the \"bounciness\" of a spring animation.\n     *\n     * `0` is no bounce, and `1` is extremely bouncy.\n     *\n     * If `duration` is set, this defaults to `0.25`.\n     *\n     * Note: `bounce` and `duration` will be overridden if `stiffness`, `damping` or `mass` are set.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ x: 100 }}\n     *   transition={{ type: \"spring\", bounce: 0.25 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    bounce?: number;\n    /**\n     * End animation if absolute speed (in units per second) drops below this\n     * value and delta is smaller than `restDelta`. Set to `0.01` by default.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring', restSpeed: 0.5 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    restSpeed?: number;\n    /**\n     * End animation if distance is below this value and speed is below\n     * `restSpeed`. When animation ends, spring gets “snapped” to. Set to\n     * `0.01` by default.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring', restDelta: 0.5 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    restDelta?: number;\n    /**\n     * The value to animate from.\n     * By default, this is the initial state of the animating value.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring', from: 90 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    from?: number | string;\n    /**\n     * The initial velocity of the spring. By default this is the current velocity of the component.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'spring', velocity: 2 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    velocity?: number;\n}\n/**\n * An animation that decelerates a value based on its initial velocity,\n * usually used to implement inertial scrolling.\n *\n * Optionally, `min` and `max` boundaries can be defined, and inertia\n * will snap to these with a spring animation.\n *\n * This animation will automatically precalculate a target value,\n * which can be modified with the `modifyTarget` property.\n *\n * This allows you to add snap-to-grid or similar functionality.\n *\n * Inertia is also the animation used for `dragTransition`, and can be configured via that prop.\n *\n * @public\n */\ninterface Inertia {\n    /**\n     * Set `type` to animate using the inertia animation. Set to `\"tween\"` by\n     * default. This can be used for natural deceleration, like momentum scrolling.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: \"inertia\", velocity: 50 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    type: \"inertia\";\n    /**\n     * A function that receives the automatically-calculated target and returns a new one. Useful for snapping the target to a grid.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{\n     *     power: 0,\n     *     // Snap calculated target to nearest 50 pixels\n     *     modifyTarget: target => Math.round(target / 50) * 50\n     *   }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    modifyTarget?(v: number): number;\n    /**\n     * If `min` or `max` is set, this affects the stiffness of the bounce\n     * spring. Higher values will create more sudden movement. Set to `500` by\n     * default.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{\n     *     min: 0,\n     *     max: 100,\n     *     bounceStiffness: 100\n     *   }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    bounceStiffness?: number;\n    /**\n     * If `min` or `max` is set, this affects the damping of the bounce spring.\n     * If set to `0`, spring will oscillate indefinitely. Set to `10` by\n     * default.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{\n     *     min: 0,\n     *     max: 100,\n     *     bounceDamping: 8\n     *   }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    bounceDamping?: number;\n    /**\n     * A higher power value equals a further target. Set to `0.8` by default.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{ power: 0.2 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    power?: number;\n    /**\n     * Adjusting the time constant will change the duration of the\n     * deceleration, thereby affecting its feel. Set to `700` by default.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{ timeConstant: 200 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    timeConstant?: number;\n    /**\n     * End the animation if the distance to the animation target is below this value, and the absolute speed is below `restSpeed`.\n     * When the animation ends, the value gets snapped to the animation target. Set to `0.01` by default.\n     * Generally the default values provide smooth animation endings, only in rare cases should you need to customize these.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{ restDelta: 10 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    restDelta?: number;\n    /**\n     * Minimum constraint. If set, the value will \"bump\" against this value (or immediately spring to it if the animation starts as less than this value).\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{ min: 0, max: 100 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    min?: number;\n    /**\n     * Maximum constraint. If set, the value will \"bump\" against this value (or immediately snap to it, if the initial animation value exceeds this value).\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{ min: 0, max: 100 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    max?: number;\n    /**\n     * The value to animate from. By default, this is the current state of the animating value.\n     *\n     * ```jsx\n     * <Frame\n     *   drag\n     *   dragTransition={{ from: 50 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    from?: number | string;\n    /**\n     * The initial velocity of the animation.\n     * By default this is the current velocity of the component.\n     *\n     * ```jsx\n     * <motion.div\n     *   animate={{ rotate: 180 }}\n     *   transition={{ type: 'inertia', velocity: 200 }}\n     * />\n     * ```\n     *\n     * @public\n     */\n    velocity?: number;\n}\n/**\n * Keyframes tweens between multiple `values`.\n *\n * These tweens can be arranged using the `duration`, `easings`, and `times` properties.\n */\ninterface Keyframes {\n    /**\n     * Set `type` to `\"keyframes\"` to animate using the keyframes animation.\n     * Set to `\"tween\"` by default. This can be used to animate between a series of values.\n     *\n     * @public\n     */\n    type: \"keyframes\";\n    /**\n     * An array of numbers between 0 and 1, where `1` represents the `total` duration.\n     *\n     * Each value represents at which point during the animation each item in the animation target should be hit, so the array should be the same length as `values`.\n     *\n     * Defaults to an array of evenly-spread durations.\n     *\n     * @public\n     */\n    times?: number[];\n    /**\n     * An array of easing functions for each generated tween, or a single easing function applied to all tweens.\n     *\n     * This array should be one item less than `values`, as these easings apply to the transitions *between* the `values`.\n     *\n     * ```jsx\n     * const transition = {\n     *   backgroundColor: {\n     *     type: 'keyframes',\n     *     easings: ['circIn', 'circOut']\n     *   }\n     * }\n     * ```\n     *\n     * @public\n     */\n    ease?: Easing | Easing[];\n    /**\n     * The total duration of the animation. Set to `0.3` by default.\n     *\n     * ```jsx\n     * const transition = {\n     *   type: \"keyframes\",\n     *   duration: 2\n     * }\n     *\n     * <Frame\n     *   animate={{ opacity: 0 }}\n     *   transition={transition}\n     * />\n     * ```\n     *\n     * @public\n     */\n    duration?: number;\n    /**\n     * @public\n     */\n    repeatDelay?: number;\n}\n/**\n * @public\n */\ninterface None {\n    /**\n     * Set `type` to `false` for an instant transition.\n     *\n     * @public\n     */\n    type: false;\n}\n/**\n * @public\n */\ntype PermissiveTransitionDefinition = {\n    [key: string]: any;\n};\n/**\n * @public\n */\ntype TransitionDefinition = Tween | Spring | Keyframes | Inertia | None | PermissiveTransitionDefinition;\ntype TransitionMap = Orchestration & TransitionDefinition & {\n    [key: string]: TransitionDefinition;\n};\n/**\n * Transition props\n *\n * @public\n */\ntype Transition = (Orchestration & Repeat & TransitionDefinition) | (Orchestration & Repeat & TransitionMap);\ntype Omit$1<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\ntype CSSPropertiesWithoutTransitionOrSingleTransforms = Omit$1<CSSProperties, \"transition\" | \"rotate\" | \"scale\" | \"perspective\">;\ntype SVGTransformAttributes = {\n    attrX?: number;\n    attrY?: number;\n    attrScale?: number;\n};\ntype TargetProperties = CSSPropertiesWithoutTransitionOrSingleTransforms & SVGAttributes<SVGElement> & SVGTransformAttributes & TransformProperties & SVGPathProperties & VariableKeyframesDefinition;\n/**\n * @public\n */\ntype Target = {\n    [K in keyof TargetProperties]: TargetProperties[K];\n};\n/**\n * @public\n */\ntype MakeKeyframes<T> = {\n    [K in keyof T]: T[K] | T[K][] | [null, ...T[K][]];\n};\n/**\n * @public\n */\ntype TargetWithKeyframes = MakeKeyframes<Target>;\n/**\n * An object that specifies values to animate to. Each value may be set either as\n * a single value, or an array of values.\n *\n * It may also option contain these properties:\n *\n * - `transition`: Specifies transitions for all or individual values.\n * - `transitionEnd`: Specifies values to set when the animation finishes.\n *\n * ```jsx\n * const target = {\n *   x: \"0%\",\n *   opacity: 0,\n *   transition: { duration: 1 },\n *   transitionEnd: { display: \"none\" }\n * }\n * ```\n *\n * @public\n */\ntype TargetAndTransition = TargetWithKeyframes & {\n    transition?: Transition;\n    transitionEnd?: Target;\n};\ntype TargetResolver = (custom: any, current: Target, velocity: Target) => TargetAndTransition | string;\n/**\n * @public\n */\ntype Variant = TargetAndTransition | TargetResolver;\n/**\n * @public\n */\ntype Variants = {\n    [key: string]: Variant;\n};\n\ntype RefObject<T> = {\n    current: T | null;\n};\n\n/**\n * Passed in to pan event handlers like `onPan` the `PanInfo` object contains\n * information about the current state of the tap gesture such as its\n * `point`, `delta`, `offset` and `velocity`.\n *\n * ```jsx\n * <motion.div onPan={(event, info) => {\n *   console.log(info.point.x, info.point.y)\n * }} />\n * ```\n *\n * @public\n */\ninterface PanInfo {\n    /**\n     * Contains `x` and `y` values for the current pan position relative\n     * to the device or page.\n     *\n     * ```jsx\n     * function onPan(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onPan={onPan} />\n     * ```\n     *\n     * @public\n     */\n    point: Point;\n    /**\n     * Contains `x` and `y` values for the distance moved since\n     * the last event.\n     *\n     * ```jsx\n     * function onPan(event, info) {\n     *   console.log(info.delta.x, info.delta.y)\n     * }\n     *\n     * <motion.div onPan={onPan} />\n     * ```\n     *\n     * @public\n     */\n    delta: Point;\n    /**\n     * Contains `x` and `y` values for the distance moved from\n     * the first pan event.\n     *\n     * ```jsx\n     * function onPan(event, info) {\n     *   console.log(info.offset.x, info.offset.y)\n     * }\n     *\n     * <motion.div onPan={onPan} />\n     * ```\n     *\n     * @public\n     */\n    offset: Point;\n    /**\n     * Contains `x` and `y` values for the current velocity of the pointer, in px/ms.\n     *\n     * ```jsx\n     * function onPan(event, info) {\n     *   console.log(info.velocity.x, info.velocity.y)\n     * }\n     *\n     * <motion.div onPan={onPan} />\n     * ```\n     *\n     * @public\n     */\n    velocity: Point;\n}\n\ninterface DragControlOptions {\n    snapToCursor?: boolean;\n    cursorProgress?: Point;\n}\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\ndeclare class DragControls {\n    private componentControls;\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n    start(event: React$1.PointerEvent | PointerEvent, options?: DragControlOptions): void;\n}\n\ntype DragElastic = boolean | number | Partial<BoundingBox>;\n/**\n * @public\n */\ninterface DragHandlers {\n    /**\n     * Callback function that fires when dragging starts.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   onDragStart={\n     *     (event, info) => console.log(info.point.x, info.point.y)\n     *   }\n     * />\n     * ```\n     *\n     * @public\n     */\n    onDragStart?(event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo): void;\n    /**\n     * Callback function that fires when dragging ends.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   onDragEnd={\n     *     (event, info) => console.log(info.point.x, info.point.y)\n     *   }\n     * />\n     * ```\n     *\n     * @public\n     */\n    onDragEnd?(event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo): void;\n    /**\n     * Callback function that fires when the component is dragged.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   onDrag={\n     *     (event, info) => console.log(info.point.x, info.point.y)\n     *   }\n     * />\n     * ```\n     *\n     * @public\n     */\n    onDrag?(event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo): void;\n    /**\n     * Callback function that fires a drag direction is determined.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragDirectionLock\n     *   onDirectionLock={axis => console.log(axis)}\n     * />\n     * ```\n     *\n     * @public\n     */\n    onDirectionLock?(axis: \"x\" | \"y\"): void;\n    /**\n     * Callback function that fires when drag momentum/bounce transition finishes.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   onDragTransitionEnd={() => console.log('Drag transition complete')}\n     * />\n     * ```\n     *\n     * @public\n     */\n    onDragTransitionEnd?(): void;\n}\n/**\n * @public\n */\ntype InertiaOptions = Partial<Omit<Inertia, \"velocity\" | \"type\">>;\n/**\n * @public\n */\ninterface DraggableProps extends DragHandlers {\n    /**\n     * Enable dragging for this element. Set to `false` by default.\n     * Set `true` to drag in both directions.\n     * Set `\"x\"` or `\"y\"` to only drag in a specific direction.\n     *\n     * ```jsx\n     * <motion.div drag=\"x\" />\n     * ```\n     */\n    drag?: boolean | \"x\" | \"y\";\n    /**\n     * Properties or variant label to animate to while the drag gesture is recognised.\n     *\n     * ```jsx\n     * <motion.div whileDrag={{ scale: 1.2 }} />\n     * ```\n     */\n    whileDrag?: VariantLabels | TargetAndTransition;\n    /**\n     * If `true`, this will lock dragging to the initially-detected direction. Defaults to `false`.\n     *\n     * ```jsx\n     * <motion.div drag dragDirectionLock />\n     * ```\n     */\n    dragDirectionLock?: boolean;\n    /**\n     * Allows drag gesture propagation to child components. Set to `false` by\n     * default.\n     *\n     * ```jsx\n     * <motion.div drag=\"x\" dragPropagation />\n     * ```\n     */\n    dragPropagation?: boolean;\n    /**\n     * Applies constraints on the permitted draggable area.\n     *\n     * It can accept an object of optional `top`, `left`, `right`, and `bottom` values, measured in pixels.\n     * This will define a distance the named edge of the draggable component.\n     *\n     * Alternatively, it can accept a `ref` to another component created with React's `useRef` hook.\n     * This `ref` should be passed both to the draggable component's `dragConstraints` prop, and the `ref`\n     * of the component you want to use as constraints.\n     *\n     * ```jsx\n     * // In pixels\n     * <motion.div\n     *   drag=\"x\"\n     *   dragConstraints={{ left: 0, right: 300 }}\n     * />\n     *\n     * // As a ref to another component\n     * const MyComponent = () => {\n     *   const constraintsRef = useRef(null)\n     *\n     *   return (\n     *      <motion.div ref={constraintsRef}>\n     *          <motion.div drag dragConstraints={constraintsRef} />\n     *      </motion.div>\n     *   )\n     * }\n     * ```\n     */\n    dragConstraints?: false | Partial<BoundingBox> | RefObject<Element | null>;\n    /**\n     * The degree of movement allowed outside constraints. 0 = no movement, 1 =\n     * full movement.\n     *\n     * Set to `0.5` by default. Can also be set as `false` to disable movement.\n     *\n     * By passing an object of `top`/`right`/`bottom`/`left`, individual values can be set\n     * per constraint. Any missing values will be set to `0`.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragConstraints={{ left: 0, right: 300 }}\n     *   dragElastic={0.2}\n     * />\n     * ```\n     */\n    dragElastic?: DragElastic;\n    /**\n     * Apply momentum from the pan gesture to the component when dragging\n     * finishes. Set to `true` by default.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragConstraints={{ left: 0, right: 300 }}\n     *   dragMomentum={false}\n     * />\n     * ```\n     */\n    dragMomentum?: boolean;\n    /**\n     * Allows you to change dragging inertia parameters.\n     * When releasing a draggable Frame, an animation with type `inertia` starts. The animation is based on your dragging velocity. This property allows you to customize it.\n     * See {@link https://framer.com/api/animation/#inertia | Inertia} for all properties you can use.\n     *\n     * ```jsx\n     * <motion.div\n     *   drag\n     *   dragTransition={{ bounceStiffness: 600, bounceDamping: 10 }}\n     * />\n     * ```\n     */\n    dragTransition?: InertiaOptions;\n    /**\n     * Usually, dragging is initiated by pressing down on a component and moving it. For some\n     * use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n     * might want to initiate dragging from a different component than the draggable one.\n     *\n     * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n     * the draggable component's `dragControls` prop. It exposes a `start` method\n     * that can start dragging from pointer events on other components.\n     *\n     * ```jsx\n     * const dragControls = useDragControls()\n     *\n     * function startDrag(event) {\n     *   dragControls.start(event, { snapToCursor: true })\n     * }\n     *\n     * return (\n     *   <>\n     *     <div onPointerDown={startDrag} />\n     *     <motion.div drag=\"x\" dragControls={dragControls} />\n     *   </>\n     * )\n     * ```\n     */\n    dragControls?: DragControls;\n    /**\n     * If true, element will snap back to its origin when dragging ends.\n     *\n     * Enabling this is the equivalent of setting all `dragConstraints` axes to `0`\n     * with `dragElastic={1}`, but when used together `dragConstraints` can define\n     * a wider draggable area and `dragSnapToOrigin` will ensure the element\n     * animates back to its origin on release.\n     */\n    dragSnapToOrigin?: boolean;\n    /**\n     * By default, if `drag` is defined on a component then an event listener will be attached\n     * to automatically initiate dragging when a user presses down on it.\n     *\n     * By setting `dragListener` to `false`, this event listener will not be created.\n     *\n     * ```jsx\n     * const dragControls = useDragControls()\n     *\n     * function startDrag(event) {\n     *   dragControls.start(event, { snapToCursor: true })\n     * }\n     *\n     * return (\n     *   <>\n     *     <div onPointerDown={startDrag} />\n     *     <motion.div\n     *       drag=\"x\"\n     *       dragControls={dragControls}\n     *       dragListener={false}\n     *     />\n     *   </>\n     * )\n     * ```\n     */\n    dragListener?: boolean;\n    /**\n     * If `dragConstraints` is set to a React ref, this callback will call with the measured drag constraints.\n     *\n     * @public\n     */\n    onMeasureDragConstraints?: (constraints: BoundingBox) => BoundingBox | void;\n    /**\n     * Usually, dragging uses the layout project engine, and applies transforms to the underlying VisualElement.\n     * Passing MotionValues as _dragX and _dragY instead applies drag updates to these motion values.\n     * This allows you to manually control how updates from a drag gesture on an element is applied.\n     *\n     * @public\n     */\n    _dragX?: MotionValue<number>;\n    /**\n     * Usually, dragging uses the layout project engine, and applies transforms to the underlying VisualElement.\n     * Passing MotionValues as _dragX and _dragY instead applies drag updates to these motion values.\n     * This allows you to manually control how updates from a drag gesture on an element is applied.\n     *\n     * @public\n     */\n    _dragY?: MotionValue<number>;\n}\n\n/** @public */\ninterface EventInfo {\n    point: Point;\n}\n\n/**\n * @public\n */\ninterface FocusHandlers {\n    /**\n     * Properties or variant label to animate to while the focus gesture is recognised.\n     *\n     * ```jsx\n     * <motion.input whileFocus={{ scale: 1.2 }} />\n     * ```\n     */\n    whileFocus?: VariantLabels | TargetAndTransition;\n}\n/**\n * Passed in to tap event handlers like `onTap` the `TapInfo` object contains\n * information about the tap gesture such as it‘s location.\n *\n * ```jsx\n * function onTap(event, info) {\n *   console.log(info.point.x, info.point.y)\n * }\n *\n * <motion.div onTap={onTap} />\n * ```\n *\n * @public\n */\ninterface TapInfo {\n    /**\n     * Contains `x` and `y` values for the tap gesture relative to the\n     * device or page.\n     *\n     * ```jsx\n     * function onTapStart(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onTapStart={onTapStart} />\n     * ```\n     *\n     * @public\n     */\n    point: Point;\n}\n/**\n * @public\n */\ninterface TapHandlers {\n    /**\n     * Callback when the tap gesture successfully ends on this element.\n     *\n     * ```jsx\n     * function onTap(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onTap={onTap} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n     */\n    onTap?(event: MouseEvent | TouchEvent | PointerEvent, info: TapInfo): void;\n    /**\n     * Callback when the tap gesture starts on this element.\n     *\n     * ```jsx\n     * function onTapStart(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onTapStart={onTapStart} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n     */\n    onTapStart?(event: MouseEvent | TouchEvent | PointerEvent, info: TapInfo): void;\n    /**\n     * Callback when the tap gesture ends outside this element.\n     *\n     * ```jsx\n     * function onTapCancel(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onTapCancel={onTapCancel} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - An {@link TapInfo} object containing `x` and `y` values for the `point` relative to the device or page.\n     */\n    onTapCancel?(event: MouseEvent | TouchEvent | PointerEvent, info: TapInfo): void;\n    /**\n     * Properties or variant label to animate to while the component is pressed.\n     *\n     * ```jsx\n     * <motion.div whileTap={{ scale: 0.8 }} />\n     * ```\n     */\n    whileTap?: VariantLabels | TargetAndTransition;\n    /**\n     * If `true`, the tap gesture will attach its start listener to window.\n     *\n     * Note: This is not supported publically.\n     */\n    globalTapTarget?: boolean;\n}\n/**\n * @public\n */\ninterface PanHandlers {\n    /**\n     * Callback function that fires when the pan gesture is recognised on this element.\n     *\n     * **Note:** For pan gestures to work correctly with touch input, the element needs\n     * touch scrolling to be disabled on either x/y or both axis with the\n     * [touch-action](https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action) CSS rule.\n     *\n     * ```jsx\n     * function onPan(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onPan={onPan} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - A {@link PanInfo} object containing `x` and `y` values for:\n     *\n     *   - `point`: Relative to the device or page.\n     *   - `delta`: Distance moved since the last event.\n     *   - `offset`: Offset from the original pan event.\n     *   - `velocity`: Current velocity of the pointer.\n     */\n    onPan?(event: PointerEvent, info: PanInfo): void;\n    /**\n     * Callback function that fires when the pan gesture begins on this element.\n     *\n     * ```jsx\n     * function onPanStart(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onPanStart={onPanStart} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - A {@link PanInfo} object containing `x`/`y` values for:\n     *\n     *   - `point`: Relative to the device or page.\n     *   - `delta`: Distance moved since the last event.\n     *   - `offset`: Offset from the original pan event.\n     *   - `velocity`: Current velocity of the pointer.\n     */\n    onPanStart?(event: PointerEvent, info: PanInfo): void;\n    /**\n     * Callback function that fires when we begin detecting a pan gesture. This\n     * is analogous to `onMouseStart` or `onTouchStart`.\n     *\n     * ```jsx\n     * function onPanSessionStart(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onPanSessionStart={onPanSessionStart} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - An {@link EventInfo} object containing `x`/`y` values for:\n     *\n     *   - `point`: Relative to the device or page.\n     */\n    onPanSessionStart?(event: PointerEvent, info: EventInfo): void;\n    /**\n     * Callback function that fires when the pan gesture ends on this element.\n     *\n     * ```jsx\n     * function onPanEnd(event, info) {\n     *   console.log(info.point.x, info.point.y)\n     * }\n     *\n     * <motion.div onPanEnd={onPanEnd} />\n     * ```\n     *\n     * @param event - The originating pointer event.\n     * @param info - A {@link PanInfo} object containing `x`/`y` values for:\n     *\n     *   - `point`: Relative to the device or page.\n     *   - `delta`: Distance moved since the last event.\n     *   - `offset`: Offset from the original pan event.\n     *   - `velocity`: Current velocity of the pointer.\n     */\n    onPanEnd?(event: PointerEvent, info: PanInfo): void;\n}\n/**\n * @public\n */\ninterface HoverHandlers {\n    /**\n     * Properties or variant label to animate to while the hover gesture is recognised.\n     *\n     * ```jsx\n     * <motion.div whileHover={{ scale: 1.2 }} />\n     * ```\n     */\n    whileHover?: VariantLabels | TargetAndTransition;\n    /**\n     * Callback function that fires when pointer starts hovering over the component.\n     *\n     * ```jsx\n     * <motion.div onHoverStart={() => console.log('Hover starts')} />\n     * ```\n     */\n    onHoverStart?(event: MouseEvent, info: EventInfo): void;\n    /**\n     * Callback function that fires when pointer stops hovering over the component.\n     *\n     * ```jsx\n     * <motion.div onHoverEnd={() => console.log(\"Hover ends\")} />\n     * ```\n     */\n    onHoverEnd?(event: MouseEvent, info: EventInfo): void;\n}\n\n/**\n * @public\n */\ninterface LayoutProps {\n    /**\n     * If `true`, this component will automatically animate to its new position when\n     * its layout changes.\n     *\n     * ```jsx\n     * <motion.div layout />\n     * ```\n     *\n     * This will perform a layout animation using performant transforms. Part of this technique\n     * involved animating an element's scale. This can introduce visual distortions on children,\n     * `boxShadow` and `borderRadius`.\n     *\n     * To correct distortion on immediate children, add `layout` to those too.\n     *\n     * `boxShadow` and `borderRadius` will automatically be corrected if they are already being\n     * animated on this component. Otherwise, set them directly via the `initial` prop.\n     *\n     * If `layout` is set to `\"position\"`, the size of the component will change instantly and\n     * only its position will animate.\n     *\n     * If `layout` is set to `\"size\"`, the position of the component will change instantly and\n     * only its size will animate.\n     *\n     * If `layout` is set to `\"preserve-aspect\"`, the component will animate size & position if\n     * the aspect ratio remains the same between renders, and just position if the ratio changes.\n     *\n     * @public\n     */\n    layout?: boolean | \"position\" | \"size\" | \"preserve-aspect\";\n    /**\n     * Enable shared layout transitions between different components with the same `layoutId`.\n     *\n     * When a component with a layoutId is removed from the React tree, and then\n     * added elsewhere, it will visually animate from the previous component's bounding box\n     * and its latest animated values.\n     *\n     * ```jsx\n     *   {items.map(item => (\n     *      <motion.li layout>\n     *         {item.name}\n     *         {item.isSelected && <motion.div layoutId=\"underline\" />}\n     *      </motion.li>\n     *   ))}\n     * ```\n     *\n     * If the previous component remains in the tree it will crossfade with the new component.\n     *\n     * @public\n     */\n    layoutId?: string;\n    /**\n     * A callback that will fire when a layout animation on this component starts.\n     *\n     * @public\n     */\n    onLayoutAnimationStart?(): void;\n    /**\n     * A callback that will fire when a layout animation on this component completes.\n     *\n     * @public\n     */\n    onLayoutAnimationComplete?(): void;\n    /**\n     * @public\n     */\n    layoutDependency?: any;\n    /**\n     * Whether a projection node should measure its scroll when it or its descendants update their layout.\n     *\n     * @public\n     */\n    layoutScroll?: boolean;\n    /**\n     * Whether an element should be considered a \"layout root\", where\n     * all children will be forced to resolve relatively to it.\n     * Currently used for `position: sticky` elements in Framer.\n     */\n    layoutRoot?: boolean;\n    /**\n     * Attached to a portal root to ensure we attach the child to the document root and don't\n     * perform scale correction on it.\n     */\n    \"data-framer-portal-id\"?: string;\n}\n\ntype ViewportEventHandler = (entry: IntersectionObserverEntry | null) => void;\ninterface ViewportOptions {\n    root?: RefObject<Element | null>;\n    once?: boolean;\n    margin?: string;\n    amount?: \"some\" | \"all\" | number;\n}\ninterface ViewportProps {\n    whileInView?: VariantLabels | TargetAndTransition;\n    onViewportEnter?: ViewportEventHandler;\n    onViewportLeave?: ViewportEventHandler;\n    viewport?: ViewportOptions;\n}\n\n/**\n * Either a string, or array of strings, that reference variants defined via the `variants` prop.\n * @public\n */\ntype VariantLabels = string | string[];\n\ntype MakeMotion<T> = {\n    [K in keyof T]: T[K] | MotionValue<number> | MotionValue<string> | MotionValue<any>;\n};\ntype MotionCSS = MakeMotion<Omit$1<CSSProperties, \"rotate\" | \"scale\" | \"perspective\">>;\n/**\n * @public\n */\ntype MotionTransform = MakeMotion<TransformProperties>;\n/**\n * @public\n */\ntype MotionStyle$1 = MotionCSS & MotionTransform & MakeMotion<SVGPathProperties>;\n/**\n * @public\n */\ninterface AnimationProps {\n    /**\n     * Properties, variant label or array of variant labels to start in.\n     *\n     * Set to `false` to initialise with the values in `animate` (disabling the mount animation)\n     *\n     * ```jsx\n     * // As values\n     * <motion.div initial={{ opacity: 1 }} />\n     *\n     * // As variant\n     * <motion.div initial=\"visible\" variants={variants} />\n     *\n     * // Multiple variants\n     * <motion.div initial={[\"visible\", \"active\"]} variants={variants} />\n     *\n     * // As false (disable mount animation)\n     * <motion.div initial={false} animate={{ opacity: 0 }} />\n     * ```\n     */\n    initial?: TargetAndTransition | VariantLabels | boolean;\n    /**\n     * Values to animate to, variant label(s), or `AnimationControls`.\n     *\n     * ```jsx\n     * // As values\n     * <motion.div animate={{ opacity: 1 }} />\n     *\n     * // As variant\n     * <motion.div animate=\"visible\" variants={variants} />\n     *\n     * // Multiple variants\n     * <motion.div animate={[\"visible\", \"active\"]} variants={variants} />\n     *\n     * // AnimationControls\n     * <motion.div animate={animation} />\n     * ```\n     */\n    animate?: AnimationControls | TargetAndTransition | VariantLabels | boolean;\n    /**\n     * A target to animate to when this component is removed from the tree.\n     *\n     * This component **must** be the first animatable child of an `AnimatePresence` to enable this exit animation.\n     *\n     * This limitation exists because React doesn't allow components to defer unmounting until after\n     * an animation is complete. Once this limitation is fixed, the `AnimatePresence` component will be unnecessary.\n     *\n     * ```jsx\n     * import { AnimatePresence, motion } from 'framer-motion'\n     *\n     * export const MyComponent = ({ isVisible }) => {\n     *   return (\n     *     <AnimatePresence>\n     *        {isVisible && (\n     *          <motion.div\n     *            initial={{ opacity: 0 }}\n     *            animate={{ opacity: 1 }}\n     *            exit={{ opacity: 0 }}\n     *          />\n     *        )}\n     *     </AnimatePresence>\n     *   )\n     * }\n     * ```\n     */\n    exit?: TargetAndTransition | VariantLabels;\n    /**\n     * Variants allow you to define animation states and organise them by name. They allow\n     * you to control animations throughout a component tree by switching a single `animate` prop.\n     *\n     * Using `transition` options like `delayChildren` and `staggerChildren`, you can orchestrate\n     * when children animations play relative to their parent.\n\n     *\n     * After passing variants to one or more `motion` component's `variants` prop, these variants\n     * can be used in place of values on the `animate`, `initial`, `whileFocus`, `whileTap` and `whileHover` props.\n     *\n     * ```jsx\n     * const variants = {\n     *   active: {\n     *       backgroundColor: \"#f00\"\n     *   },\n     *   inactive: {\n     *     backgroundColor: \"#fff\",\n     *     transition: { duration: 2 }\n     *   }\n     * }\n     *\n     * <motion.div variants={variants} animate=\"active\" />\n     * ```\n     */\n    variants?: Variants;\n    /**\n     * Default transition. If no `transition` is defined in `animate`, it will use the transition defined here.\n     * ```jsx\n     * const spring = {\n     *   type: \"spring\",\n     *   damping: 10,\n     *   stiffness: 100\n     * }\n     *\n     * <motion.div transition={spring} animate={{ scale: 1.2 }} />\n     * ```\n     */\n    transition?: Transition;\n}\n/**\n * @public\n */\ninterface MotionAdvancedProps {\n    /**\n     * Custom data to use to resolve dynamic variants differently for each animating component.\n     *\n     * ```jsx\n     * const variants = {\n     *   visible: (custom) => ({\n     *     opacity: 1,\n     *     transition: { delay: custom * 0.2 }\n     *   })\n     * }\n     *\n     * <motion.div custom={0} animate=\"visible\" variants={variants} />\n     * <motion.div custom={1} animate=\"visible\" variants={variants} />\n     * <motion.div custom={2} animate=\"visible\" variants={variants} />\n     * ```\n     *\n     * @public\n     */\n    custom?: any;\n    /**\n     * @public\n     * Set to `false` to prevent inheriting variant changes from its parent.\n     */\n    inherit?: boolean;\n    /**\n     * @public\n     * Set to `false` to prevent throwing an error when a `motion` component is used within a `LazyMotion` set to strict.\n     */\n    ignoreStrict?: boolean;\n}\n/**\n * Props for `motion` components.\n *\n * @public\n */\ninterface MotionProps extends AnimationProps, EventProps, PanHandlers, TapHandlers, HoverHandlers, FocusHandlers, ViewportProps, DraggableProps, LayoutProps, MotionAdvancedProps {\n    /**\n     *\n     * The React DOM `style` prop, enhanced with support for `MotionValue`s and separate `transform` values.\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *\n     *   return <motion.div style={{ x, opacity: 1, scale: 0.5 }} />\n     * }\n     * ```\n     */\n    style?: MotionStyle$1;\n    /**\n     * By default, Motion generates a `transform` property with a sensible transform order. `transformTemplate`\n     * can be used to create a different order, or to append/preprend the automatically generated `transform` property.\n     *\n     * ```jsx\n     * <motion.div\n     *   style={{ x: 0, rotate: 180 }}\n     *   transformTemplate={\n     *     ({ x, rotate }) => `rotate(${rotate}deg) translateX(${x}px)`\n     *   }\n     * />\n     * ```\n     *\n     * @param transform - The latest animated transform props.\n     * @param generatedTransform - The transform string as automatically generated by Motion\n     *\n     * @public\n     */\n    transformTemplate?(transform: TransformProperties, generatedTransform: string): string;\n    children?: React.ReactNode | MotionValue<number> | MotionValue<string>;\n    \"data-framer-appear-id\"?: string;\n}\n\ntype AnimationDefinition = VariantLabels | TargetAndTransition | TargetResolver;\n/**\n * @public\n */\ninterface AnimationControls {\n    /**\n     * Starts an animation on all linked components.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * controls.start(\"variantLabel\")\n     * controls.start({\n     *   x: 0,\n     *   transition: { duration: 1 }\n     * })\n     * ```\n     *\n     * @param definition - Properties or variant label to animate to\n     * @param transition - Optional `transtion` to apply to a variant\n     * @returns - A `Promise` that resolves when all animations have completed.\n     *\n     * @public\n     */\n    start(definition: AnimationDefinition, transitionOverride?: Transition$1): Promise<any>;\n    /**\n     * Instantly set to a set of properties or a variant.\n     *\n     * ```jsx\n     * // With properties\n     * controls.set({ opacity: 0 })\n     *\n     * // With variants\n     * controls.set(\"hidden\")\n     * ```\n     *\n     * @privateRemarks\n     * We could perform a similar trick to `.start` where this can be called before mount\n     * and we maintain a list of of pending actions that get applied on mount. But the\n     * expectation of `set` is that it happens synchronously and this would be difficult\n     * to do before any children have even attached themselves. It's also poor practise\n     * and we should discourage render-synchronous `.start` calls rather than lean into this.\n     *\n     * @public\n     */\n    set(definition: AnimationDefinition): void;\n    /**\n     * Stops animations on all linked components.\n     *\n     * ```jsx\n     * controls.stop()\n     * ```\n     *\n     * @public\n     */\n    stop(): void;\n    mount(): () => void;\n}\n\n/**\n * A generic set of string/number values\n */\ninterface ResolvedValues {\n    [key: string]: string | number;\n}\ninterface LayoutLifecycles {\n    onBeforeLayoutMeasure?(box: Box): void;\n    onLayoutMeasure?(box: Box, prevBox: Box): void;\n}\ninterface AnimationLifecycles {\n    /**\n     * Callback with latest motion values, fired max once per frame.\n     *\n     * ```jsx\n     * function onUpdate(latest) {\n     *   console.log(latest.x, latest.opacity)\n     * }\n     *\n     * <motion.div animate={{ x: 100, opacity: 0 }} onUpdate={onUpdate} />\n     * ```\n     */\n    onUpdate?(latest: ResolvedValues): void;\n    /**\n     * Callback when animation defined in `animate` begins.\n     *\n     * The provided callback will be called with the triggering animation definition.\n     * If this is a variant, it'll be the variant name, and if a target object\n     * then it'll be the target object.\n     *\n     * This way, it's possible to figure out which animation has started.\n     *\n     * ```jsx\n     * function onStart() {\n     *   console.log(\"Animation started\")\n     * }\n     *\n     * <motion.div animate={{ x: 100 }} onAnimationStart={onStart} />\n     * ```\n     */\n    onAnimationStart?(definition: AnimationDefinition): void;\n    /**\n     * Callback when animation defined in `animate` is complete.\n     *\n     * The provided callback will be called with the triggering animation definition.\n     * If this is a variant, it'll be the variant name, and if a target object\n     * then it'll be the target object.\n     *\n     * This way, it's possible to figure out which animation has completed.\n     *\n     * ```jsx\n     * function onComplete() {\n     *   console.log(\"Animation completed\")\n     * }\n     *\n     * <motion.div\n     *   animate={{ x: 100 }}\n     *   onAnimationComplete={definition => {\n     *     console.log('Completed animating', definition)\n     *   }}\n     * />\n     * ```\n     */\n    onAnimationComplete?(definition: AnimationDefinition): void;\n}\ntype EventProps = LayoutLifecycles & AnimationLifecycles;\n\ntype MotionComponentProps<Props> = {\n    [K in Exclude<keyof Props, keyof MotionProps>]?: Props[K];\n} & MotionProps;\n\ninterface HTMLElements {\n    a: HTMLAnchorElement;\n    abbr: HTMLElement;\n    address: HTMLElement;\n    area: HTMLAreaElement;\n    article: HTMLElement;\n    aside: HTMLElement;\n    audio: HTMLAudioElement;\n    b: HTMLElement;\n    base: HTMLBaseElement;\n    bdi: HTMLElement;\n    bdo: HTMLElement;\n    big: HTMLElement;\n    blockquote: HTMLQuoteElement;\n    body: HTMLBodyElement;\n    br: HTMLBRElement;\n    button: HTMLButtonElement;\n    canvas: HTMLCanvasElement;\n    caption: HTMLElement;\n    center: HTMLElement;\n    cite: HTMLElement;\n    code: HTMLElement;\n    col: HTMLTableColElement;\n    colgroup: HTMLTableColElement;\n    data: HTMLDataElement;\n    datalist: HTMLDataListElement;\n    dd: HTMLElement;\n    del: HTMLModElement;\n    details: HTMLDetailsElement;\n    dfn: HTMLElement;\n    dialog: HTMLDialogElement;\n    div: HTMLDivElement;\n    dl: HTMLDListElement;\n    dt: HTMLElement;\n    em: HTMLElement;\n    embed: HTMLEmbedElement;\n    fieldset: HTMLFieldSetElement;\n    figcaption: HTMLElement;\n    figure: HTMLElement;\n    footer: HTMLElement;\n    form: HTMLFormElement;\n    h1: HTMLHeadingElement;\n    h2: HTMLHeadingElement;\n    h3: HTMLHeadingElement;\n    h4: HTMLHeadingElement;\n    h5: HTMLHeadingElement;\n    h6: HTMLHeadingElement;\n    head: HTMLHeadElement;\n    header: HTMLElement;\n    hgroup: HTMLElement;\n    hr: HTMLHRElement;\n    html: HTMLHtmlElement;\n    i: HTMLElement;\n    iframe: HTMLIFrameElement;\n    img: HTMLImageElement;\n    input: HTMLInputElement;\n    ins: HTMLModElement;\n    kbd: HTMLElement;\n    keygen: HTMLElement;\n    label: HTMLLabelElement;\n    legend: HTMLLegendElement;\n    li: HTMLLIElement;\n    link: HTMLLinkElement;\n    main: HTMLElement;\n    map: HTMLMapElement;\n    mark: HTMLElement;\n    menu: HTMLElement;\n    menuitem: HTMLElement;\n    meta: HTMLMetaElement;\n    meter: HTMLMeterElement;\n    nav: HTMLElement;\n    noindex: HTMLElement;\n    noscript: HTMLElement;\n    object: HTMLObjectElement;\n    ol: HTMLOListElement;\n    optgroup: HTMLOptGroupElement;\n    option: HTMLOptionElement;\n    output: HTMLOutputElement;\n    p: HTMLParagraphElement;\n    param: HTMLParamElement;\n    picture: HTMLElement;\n    pre: HTMLPreElement;\n    progress: HTMLProgressElement;\n    q: HTMLQuoteElement;\n    rp: HTMLElement;\n    rt: HTMLElement;\n    ruby: HTMLElement;\n    s: HTMLElement;\n    samp: HTMLElement;\n    search: HTMLElement;\n    slot: HTMLSlotElement;\n    script: HTMLScriptElement;\n    section: HTMLElement;\n    select: HTMLSelectElement;\n    small: HTMLElement;\n    source: HTMLSourceElement;\n    span: HTMLSpanElement;\n    strong: HTMLElement;\n    style: HTMLStyleElement;\n    sub: HTMLElement;\n    summary: HTMLElement;\n    sup: HTMLElement;\n    table: HTMLTableElement;\n    template: HTMLTemplateElement;\n    tbody: HTMLTableSectionElement;\n    td: HTMLTableDataCellElement;\n    textarea: HTMLTextAreaElement;\n    tfoot: HTMLTableSectionElement;\n    th: HTMLTableHeaderCellElement;\n    thead: HTMLTableSectionElement;\n    time: HTMLTimeElement;\n    title: HTMLTitleElement;\n    tr: HTMLTableRowElement;\n    track: HTMLTrackElement;\n    u: HTMLElement;\n    ul: HTMLUListElement;\n    var: HTMLElement;\n    video: HTMLVideoElement;\n    wbr: HTMLElement;\n    webview: HTMLWebViewElement;\n}\n\n/**\n * @public\n */\ntype ForwardRefComponent<T, P> = {\n    readonly $$typeof: symbol;\n} & ((props: PropsWithoutRef<P> & RefAttributes<T>) => JSX.Element);\ntype AttributesWithoutMotionProps<Attributes> = {\n    [K in Exclude<keyof Attributes, keyof MotionProps>]?: Attributes[K];\n};\n/**\n * @public\n */\ntype HTMLMotionProps<Tag extends keyof HTMLElements> = AttributesWithoutMotionProps<JSX.IntrinsicElements[Tag]> & MotionProps;\n/**\n * Motion-optimised versions of React's HTML components.\n *\n * @public\n */\ntype HTMLMotionComponents = {\n    [K in keyof HTMLElements]: ForwardRefComponent<HTMLElements[K], HTMLMotionProps<K>>;\n};\n\ntype UnionStringArray<T extends Readonly<string[]>> = T[number];\ndeclare const svgElements: readonly [\"animate\", \"circle\", \"defs\", \"desc\", \"ellipse\", \"g\", \"image\", \"line\", \"filter\", \"marker\", \"mask\", \"metadata\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"rect\", \"stop\", \"svg\", \"switch\", \"symbol\", \"text\", \"tspan\", \"use\", \"view\", \"clipPath\", \"feBlend\", \"feColorMatrix\", \"feComponentTransfer\", \"feComposite\", \"feConvolveMatrix\", \"feDiffuseLighting\", \"feDisplacementMap\", \"feDistantLight\", \"feDropShadow\", \"feFlood\", \"feFuncA\", \"feFuncB\", \"feFuncG\", \"feFuncR\", \"feGaussianBlur\", \"feImage\", \"feMerge\", \"feMergeNode\", \"feMorphology\", \"feOffset\", \"fePointLight\", \"feSpecularLighting\", \"feSpotLight\", \"feTile\", \"feTurbulence\", \"foreignObject\", \"linearGradient\", \"radialGradient\", \"textPath\"];\ntype SVGElements = UnionStringArray<typeof svgElements>;\n\ninterface SVGAttributesWithoutMotionProps<T> extends Pick<SVGAttributes<T>, Exclude<keyof SVGAttributes<T>, keyof MotionProps>> {\n}\n/**\n * Blanket-accept any SVG attribute as a `MotionValue`\n * @public\n */\ntype SVGAttributesAsMotionValues<T> = MakeMotion<SVGAttributesWithoutMotionProps<T>>;\ntype UnwrapSVGFactoryElement<F> = F extends React.SVGProps<infer P> ? P : never;\n/**\n * @public\n */\ninterface SVGMotionProps<T> extends SVGAttributesAsMotionValues<T>, MotionProps {\n}\n/**\n * Motion-optimised versions of React's SVG components.\n *\n * @public\n */\ntype SVGMotionComponents = {\n    [K in SVGElements]: ForwardRefComponent<UnwrapSVGFactoryElement<JSX.IntrinsicElements[K]>, SVGMotionProps<UnwrapSVGFactoryElement<JSX.IntrinsicElements[K]>>>;\n};\n\ndeclare const optimizedAppearDataAttribute: \"data-framer-appear-id\";\n\n/**\n * Expose only the needed part of the VisualElement interface to\n * ensure React types don't end up in the generic DOM bundle.\n */\ninterface WithAppearProps {\n    props: {\n        [optimizedAppearDataAttribute]?: string;\n        values?: {\n            [key: string]: MotionValue<number> | MotionValue<string>;\n        };\n    };\n}\ntype HandoffFunction = (storeId: string, valueName: string, frame: Batcher) => number | null;\n/**\n * The window global object acts as a bridge between our inline script\n * triggering the optimized appear animations, and Motion.\n */\ndeclare global {\n    interface Window {\n        MotionHandoffAnimation?: HandoffFunction;\n        MotionHandoffMarkAsComplete?: (elementId: string) => void;\n        MotionHandoffIsComplete?: (elementId: string) => boolean;\n        MotionHasOptimisedAnimation?: (elementId?: string, valueName?: string) => boolean;\n        MotionCancelOptimisedAnimation?: (elementId?: string, valueName?: string, frame?: Batcher, canResume?: boolean) => void;\n        MotionCheckAppearSync?: (visualElement: WithAppearProps, valueName: string, value: MotionValue) => VoidFunction | void;\n        MotionIsMounted?: boolean;\n    }\n}\n\ntype DOMMotionComponents = HTMLMotionComponents & SVGMotionComponents;\n\ndeclare const createMinimalMotionComponent: <Props, TagName extends string = \"div\">(Component: string | TagName | React$1.ComponentType<Props>, { forwardMotionProps }?: {\n    forwardMotionProps: boolean;\n}) => TagName extends \"symbol\" | \"clipPath\" | \"filter\" | \"mask\" | \"marker\" | \"text\" | \"path\" | \"animate\" | \"circle\" | \"switch\" | \"svg\" | \"stop\" | keyof HTMLElements | \"defs\" | \"desc\" | \"ellipse\" | \"feBlend\" | \"feColorMatrix\" | \"feComponentTransfer\" | \"feComposite\" | \"feConvolveMatrix\" | \"feDiffuseLighting\" | \"feDisplacementMap\" | \"feDistantLight\" | \"feDropShadow\" | \"feFlood\" | \"feFuncA\" | \"feFuncB\" | \"feFuncG\" | \"feFuncR\" | \"feGaussianBlur\" | \"feImage\" | \"feMerge\" | \"feMergeNode\" | \"feMorphology\" | \"feOffset\" | \"fePointLight\" | \"feSpecularLighting\" | \"feSpotLight\" | \"feTile\" | \"feTurbulence\" | \"foreignObject\" | \"g\" | \"image\" | \"line\" | \"linearGradient\" | \"metadata\" | \"pattern\" | \"polygon\" | \"polyline\" | \"radialGradient\" | \"rect\" | \"textPath\" | \"tspan\" | \"use\" | \"view\" ? DOMMotionComponents[TagName] : React$1.ComponentType<Omit<MotionComponentProps<Props>, \"children\"> & {\n    children?: (\"children\" extends keyof Props ? Props[keyof Props & \"children\"] | MotionComponentProps<Props>[keyof Props & \"children\"] : MotionComponentProps<Props>[\"children\"]) | undefined;\n}>;\n\n/**\n * HTML components\n */\ndeclare const MotionA: ForwardRefComponent<HTMLAnchorElement, HTMLMotionProps<\"a\">>;\ndeclare const MotionAbbr: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"abbr\">>;\ndeclare const MotionAddress: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"address\">>;\ndeclare const MotionArea: ForwardRefComponent<HTMLAreaElement, HTMLMotionProps<\"area\">>;\ndeclare const MotionArticle: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"article\">>;\ndeclare const MotionAside: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"aside\">>;\ndeclare const MotionAudio: ForwardRefComponent<HTMLAudioElement, HTMLMotionProps<\"audio\">>;\ndeclare const MotionB: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"b\">>;\ndeclare const MotionBase: ForwardRefComponent<HTMLBaseElement, HTMLMotionProps<\"base\">>;\ndeclare const MotionBdi: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"bdi\">>;\ndeclare const MotionBdo: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"bdo\">>;\ndeclare const MotionBig: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"big\">>;\ndeclare const MotionBlockquote: ForwardRefComponent<HTMLQuoteElement, HTMLMotionProps<\"blockquote\">>;\ndeclare const MotionBody: ForwardRefComponent<HTMLBodyElement, HTMLMotionProps<\"body\">>;\ndeclare const MotionButton: ForwardRefComponent<HTMLButtonElement, HTMLMotionProps<\"button\">>;\ndeclare const MotionCanvas: ForwardRefComponent<HTMLCanvasElement, HTMLMotionProps<\"canvas\">>;\ndeclare const MotionCaption: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"caption\">>;\ndeclare const MotionCite: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"cite\">>;\ndeclare const MotionCode: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"code\">>;\ndeclare const MotionCol: ForwardRefComponent<HTMLTableColElement, HTMLMotionProps<\"col\">>;\ndeclare const MotionColgroup: ForwardRefComponent<HTMLTableColElement, HTMLMotionProps<\"colgroup\">>;\ndeclare const MotionData: ForwardRefComponent<HTMLDataElement, HTMLMotionProps<\"data\">>;\ndeclare const MotionDatalist: ForwardRefComponent<HTMLDataListElement, HTMLMotionProps<\"datalist\">>;\ndeclare const MotionDd: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"dd\">>;\ndeclare const MotionDel: ForwardRefComponent<HTMLModElement, HTMLMotionProps<\"del\">>;\ndeclare const MotionDetails: ForwardRefComponent<HTMLDetailsElement, HTMLMotionProps<\"details\">>;\ndeclare const MotionDfn: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"dfn\">>;\ndeclare const MotionDialog: ForwardRefComponent<HTMLDialogElement, HTMLMotionProps<\"dialog\">>;\ndeclare const MotionDiv: ForwardRefComponent<HTMLDivElement, HTMLMotionProps<\"div\">>;\ndeclare const MotionDl: ForwardRefComponent<HTMLDListElement, HTMLMotionProps<\"dl\">>;\ndeclare const MotionDt: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"dt\">>;\ndeclare const MotionEm: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"em\">>;\ndeclare const MotionEmbed: ForwardRefComponent<HTMLEmbedElement, HTMLMotionProps<\"embed\">>;\ndeclare const MotionFieldset: ForwardRefComponent<HTMLFieldSetElement, HTMLMotionProps<\"fieldset\">>;\ndeclare const MotionFigcaption: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"figcaption\">>;\ndeclare const MotionFigure: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"figure\">>;\ndeclare const MotionFooter: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"footer\">>;\ndeclare const MotionForm: ForwardRefComponent<HTMLFormElement, HTMLMotionProps<\"form\">>;\ndeclare const MotionH1: ForwardRefComponent<HTMLHeadingElement, HTMLMotionProps<\"h1\">>;\ndeclare const MotionH2: ForwardRefComponent<HTMLHeadingElement, HTMLMotionProps<\"h2\">>;\ndeclare const MotionH3: ForwardRefComponent<HTMLHeadingElement, HTMLMotionProps<\"h3\">>;\ndeclare const MotionH4: ForwardRefComponent<HTMLHeadingElement, HTMLMotionProps<\"h4\">>;\ndeclare const MotionH5: ForwardRefComponent<HTMLHeadingElement, HTMLMotionProps<\"h5\">>;\ndeclare const MotionH6: ForwardRefComponent<HTMLHeadingElement, HTMLMotionProps<\"h6\">>;\ndeclare const MotionHead: ForwardRefComponent<HTMLHeadElement, HTMLMotionProps<\"head\">>;\ndeclare const MotionHeader: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"header\">>;\ndeclare const MotionHgroup: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"hgroup\">>;\ndeclare const MotionHr: ForwardRefComponent<HTMLHRElement, HTMLMotionProps<\"hr\">>;\ndeclare const MotionHtml: ForwardRefComponent<HTMLHtmlElement, HTMLMotionProps<\"html\">>;\ndeclare const MotionI: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"i\">>;\ndeclare const MotionIframe: ForwardRefComponent<HTMLIFrameElement, HTMLMotionProps<\"iframe\">>;\ndeclare const MotionImg: ForwardRefComponent<HTMLImageElement, HTMLMotionProps<\"img\">>;\ndeclare const MotionInput: ForwardRefComponent<HTMLInputElement, HTMLMotionProps<\"input\">>;\ndeclare const MotionIns: ForwardRefComponent<HTMLModElement, HTMLMotionProps<\"ins\">>;\ndeclare const MotionKbd: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"kbd\">>;\ndeclare const MotionKeygen: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"keygen\">>;\ndeclare const MotionLabel: ForwardRefComponent<HTMLLabelElement, HTMLMotionProps<\"label\">>;\ndeclare const MotionLegend: ForwardRefComponent<HTMLLegendElement, HTMLMotionProps<\"legend\">>;\ndeclare const MotionLi: ForwardRefComponent<HTMLLIElement, HTMLMotionProps<\"li\">>;\ndeclare const MotionLink: ForwardRefComponent<HTMLLinkElement, HTMLMotionProps<\"link\">>;\ndeclare const MotionMain: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"main\">>;\ndeclare const MotionMap: ForwardRefComponent<HTMLMapElement, HTMLMotionProps<\"map\">>;\ndeclare const MotionMark: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"mark\">>;\ndeclare const MotionMenu: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"menu\">>;\ndeclare const MotionMenuitem: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"menuitem\">>;\ndeclare const MotionMeter: ForwardRefComponent<HTMLMeterElement, HTMLMotionProps<\"meter\">>;\ndeclare const MotionNav: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"nav\">>;\ndeclare const MotionObject: ForwardRefComponent<HTMLObjectElement, HTMLMotionProps<\"object\">>;\ndeclare const MotionOl: ForwardRefComponent<HTMLOListElement, HTMLMotionProps<\"ol\">>;\ndeclare const MotionOptgroup: ForwardRefComponent<HTMLOptGroupElement, HTMLMotionProps<\"optgroup\">>;\ndeclare const MotionOption: ForwardRefComponent<HTMLOptionElement, HTMLMotionProps<\"option\">>;\ndeclare const MotionOutput: ForwardRefComponent<HTMLOutputElement, HTMLMotionProps<\"output\">>;\ndeclare const MotionP: ForwardRefComponent<HTMLParagraphElement, HTMLMotionProps<\"p\">>;\ndeclare const MotionParam: ForwardRefComponent<HTMLParamElement, HTMLMotionProps<\"param\">>;\ndeclare const MotionPicture: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"picture\">>;\ndeclare const MotionPre: ForwardRefComponent<HTMLPreElement, HTMLMotionProps<\"pre\">>;\ndeclare const MotionProgress: ForwardRefComponent<HTMLProgressElement, HTMLMotionProps<\"progress\">>;\ndeclare const MotionQ: ForwardRefComponent<HTMLQuoteElement, HTMLMotionProps<\"q\">>;\ndeclare const MotionRp: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"rp\">>;\ndeclare const MotionRt: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"rt\">>;\ndeclare const MotionRuby: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"ruby\">>;\ndeclare const MotionS: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"s\">>;\ndeclare const MotionSamp: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"samp\">>;\ndeclare const MotionScript: ForwardRefComponent<HTMLScriptElement, HTMLMotionProps<\"script\">>;\ndeclare const MotionSection: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"section\">>;\ndeclare const MotionSelect: ForwardRefComponent<HTMLSelectElement, HTMLMotionProps<\"select\">>;\ndeclare const MotionSmall: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"small\">>;\ndeclare const MotionSource: ForwardRefComponent<HTMLSourceElement, HTMLMotionProps<\"source\">>;\ndeclare const MotionSpan: ForwardRefComponent<HTMLSpanElement, HTMLMotionProps<\"span\">>;\ndeclare const MotionStrong: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"strong\">>;\ndeclare const MotionStyle: ForwardRefComponent<HTMLStyleElement, HTMLMotionProps<\"style\">>;\ndeclare const MotionSub: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"sub\">>;\ndeclare const MotionSummary: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"summary\">>;\ndeclare const MotionSup: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"sup\">>;\ndeclare const MotionTable: ForwardRefComponent<HTMLTableElement, HTMLMotionProps<\"table\">>;\ndeclare const MotionTbody: ForwardRefComponent<HTMLTableSectionElement, HTMLMotionProps<\"tbody\">>;\ndeclare const MotionTd: ForwardRefComponent<HTMLTableDataCellElement, HTMLMotionProps<\"td\">>;\ndeclare const MotionTextarea: ForwardRefComponent<HTMLTextAreaElement, HTMLMotionProps<\"textarea\">>;\ndeclare const MotionTfoot: ForwardRefComponent<HTMLTableSectionElement, HTMLMotionProps<\"tfoot\">>;\ndeclare const MotionTh: ForwardRefComponent<HTMLTableHeaderCellElement, HTMLMotionProps<\"th\">>;\ndeclare const MotionThead: ForwardRefComponent<HTMLTableSectionElement, HTMLMotionProps<\"thead\">>;\ndeclare const MotionTime: ForwardRefComponent<HTMLTimeElement, HTMLMotionProps<\"time\">>;\ndeclare const MotionTitle: ForwardRefComponent<HTMLTitleElement, HTMLMotionProps<\"title\">>;\ndeclare const MotionTr: ForwardRefComponent<HTMLTableRowElement, HTMLMotionProps<\"tr\">>;\ndeclare const MotionTrack: ForwardRefComponent<HTMLTrackElement, HTMLMotionProps<\"track\">>;\ndeclare const MotionU: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"u\">>;\ndeclare const MotionUl: ForwardRefComponent<HTMLUListElement, HTMLMotionProps<\"ul\">>;\ndeclare const MotionVideo: ForwardRefComponent<HTMLVideoElement, HTMLMotionProps<\"video\">>;\ndeclare const MotionWbr: ForwardRefComponent<HTMLElement, HTMLMotionProps<\"wbr\">>;\ndeclare const MotionWebview: ForwardRefComponent<HTMLWebViewElement, HTMLMotionProps<\"webview\">>;\n/**\n * SVG components\n */\ndeclare const MotionAnimate: ForwardRefComponent<SVGElement, SVGMotionProps<SVGElement>>;\ndeclare const MotionCircle: ForwardRefComponent<SVGCircleElement, SVGMotionProps<SVGCircleElement>>;\ndeclare const MotionDefs: ForwardRefComponent<SVGDefsElement, SVGMotionProps<SVGDefsElement>>;\ndeclare const MotionDesc: ForwardRefComponent<SVGDescElement, SVGMotionProps<SVGDescElement>>;\ndeclare const MotionEllipse: ForwardRefComponent<SVGEllipseElement, SVGMotionProps<SVGEllipseElement>>;\ndeclare const MotionG: ForwardRefComponent<SVGGElement, SVGMotionProps<SVGGElement>>;\ndeclare const MotionImage: ForwardRefComponent<SVGImageElement, SVGMotionProps<SVGImageElement>>;\ndeclare const MotionLine: ForwardRefComponent<SVGLineElement, SVGMotionProps<SVGLineElement>>;\ndeclare const MotionFilter: ForwardRefComponent<SVGFilterElement, SVGMotionProps<SVGFilterElement>>;\ndeclare const MotionMarker: ForwardRefComponent<SVGMarkerElement, SVGMotionProps<SVGMarkerElement>>;\ndeclare const MotionMask: ForwardRefComponent<SVGMaskElement, SVGMotionProps<SVGMaskElement>>;\ndeclare const MotionMetadata: ForwardRefComponent<SVGMetadataElement, SVGMotionProps<SVGMetadataElement>>;\ndeclare const MotionPath: ForwardRefComponent<SVGPathElement, SVGMotionProps<SVGPathElement>>;\ndeclare const MotionPattern: ForwardRefComponent<SVGPatternElement, SVGMotionProps<SVGPatternElement>>;\ndeclare const MotionPolygon: ForwardRefComponent<SVGPolygonElement, SVGMotionProps<SVGPolygonElement>>;\ndeclare const MotionPolyline: ForwardRefComponent<SVGPolylineElement, SVGMotionProps<SVGPolylineElement>>;\ndeclare const MotionRect: ForwardRefComponent<SVGRectElement, SVGMotionProps<SVGRectElement>>;\ndeclare const MotionStop: ForwardRefComponent<SVGStopElement, SVGMotionProps<SVGStopElement>>;\ndeclare const MotionSvg: ForwardRefComponent<SVGSVGElement, SVGMotionProps<SVGSVGElement>>;\ndeclare const MotionSymbol: ForwardRefComponent<SVGSymbolElement, SVGMotionProps<SVGSymbolElement>>;\ndeclare const MotionText: ForwardRefComponent<SVGTextElement, SVGMotionProps<SVGTextElement>>;\ndeclare const MotionTspan: ForwardRefComponent<SVGTSpanElement, SVGMotionProps<SVGTSpanElement>>;\ndeclare const MotionUse: ForwardRefComponent<SVGUseElement, SVGMotionProps<SVGUseElement>>;\ndeclare const MotionView: ForwardRefComponent<SVGViewElement, SVGMotionProps<SVGViewElement>>;\ndeclare const MotionClipPath: ForwardRefComponent<SVGClipPathElement, SVGMotionProps<SVGClipPathElement>>;\ndeclare const MotionFeBlend: ForwardRefComponent<SVGFEBlendElement, SVGMotionProps<SVGFEBlendElement>>;\ndeclare const MotionFeColorMatrix: ForwardRefComponent<SVGFEColorMatrixElement, SVGMotionProps<SVGFEColorMatrixElement>>;\ndeclare const MotionFeComponentTransfer: ForwardRefComponent<SVGFEComponentTransferElement, SVGMotionProps<SVGFEComponentTransferElement>>;\ndeclare const MotionFeComposite: ForwardRefComponent<SVGFECompositeElement, SVGMotionProps<SVGFECompositeElement>>;\ndeclare const MotionFeConvolveMatrix: ForwardRefComponent<SVGFEConvolveMatrixElement, SVGMotionProps<SVGFEConvolveMatrixElement>>;\ndeclare const MotionFeDiffuseLighting: ForwardRefComponent<SVGFEDiffuseLightingElement, SVGMotionProps<SVGFEDiffuseLightingElement>>;\ndeclare const MotionFeDisplacementMap: ForwardRefComponent<SVGFEDisplacementMapElement, SVGMotionProps<SVGFEDisplacementMapElement>>;\ndeclare const MotionFeDistantLight: ForwardRefComponent<SVGFEDistantLightElement, SVGMotionProps<SVGFEDistantLightElement>>;\ndeclare const MotionFeDropShadow: ForwardRefComponent<SVGFEDropShadowElement, SVGMotionProps<SVGFEDropShadowElement>>;\ndeclare const MotionFeFlood: ForwardRefComponent<SVGFEFloodElement, SVGMotionProps<SVGFEFloodElement>>;\ndeclare const MotionFeFuncA: ForwardRefComponent<SVGFEFuncAElement, SVGMotionProps<SVGFEFuncAElement>>;\ndeclare const MotionFeFuncB: ForwardRefComponent<SVGFEFuncBElement, SVGMotionProps<SVGFEFuncBElement>>;\ndeclare const MotionFeFuncG: ForwardRefComponent<SVGFEFuncGElement, SVGMotionProps<SVGFEFuncGElement>>;\ndeclare const MotionFeFuncR: ForwardRefComponent<SVGFEFuncRElement, SVGMotionProps<SVGFEFuncRElement>>;\ndeclare const MotionFeGaussianBlur: ForwardRefComponent<SVGFEGaussianBlurElement, SVGMotionProps<SVGFEGaussianBlurElement>>;\ndeclare const MotionFeImage: ForwardRefComponent<SVGFEImageElement, SVGMotionProps<SVGFEImageElement>>;\ndeclare const MotionFeMerge: ForwardRefComponent<SVGFEMergeElement, SVGMotionProps<SVGFEMergeElement>>;\ndeclare const MotionFeMergeNode: ForwardRefComponent<SVGFEMergeNodeElement, SVGMotionProps<SVGFEMergeNodeElement>>;\ndeclare const MotionFeMorphology: ForwardRefComponent<SVGFEMorphologyElement, SVGMotionProps<SVGFEMorphologyElement>>;\ndeclare const MotionFeOffset: ForwardRefComponent<SVGFEOffsetElement, SVGMotionProps<SVGFEOffsetElement>>;\ndeclare const MotionFePointLight: ForwardRefComponent<SVGFEPointLightElement, SVGMotionProps<SVGFEPointLightElement>>;\ndeclare const MotionFeSpecularLighting: ForwardRefComponent<SVGFESpecularLightingElement, SVGMotionProps<SVGFESpecularLightingElement>>;\ndeclare const MotionFeSpotLight: ForwardRefComponent<SVGFESpotLightElement, SVGMotionProps<SVGFESpotLightElement>>;\ndeclare const MotionFeTile: ForwardRefComponent<SVGFETileElement, SVGMotionProps<SVGFETileElement>>;\ndeclare const MotionFeTurbulence: ForwardRefComponent<SVGFETurbulenceElement, SVGMotionProps<SVGFETurbulenceElement>>;\ndeclare const MotionForeignObject: ForwardRefComponent<SVGForeignObjectElement, SVGMotionProps<SVGForeignObjectElement>>;\ndeclare const MotionLinearGradient: ForwardRefComponent<SVGLinearGradientElement, SVGMotionProps<SVGLinearGradientElement>>;\ndeclare const MotionRadialGradient: ForwardRefComponent<SVGRadialGradientElement, SVGMotionProps<SVGRadialGradientElement>>;\ndeclare const MotionTextPath: ForwardRefComponent<SVGTextPathElement, SVGMotionProps<SVGTextPathElement>>;\n\nexport { MotionA as a, MotionAbbr as abbr, MotionAddress as address, MotionAnimate as animate, MotionArea as area, MotionArticle as article, MotionAside as aside, MotionAudio as audio, MotionB as b, MotionBase as base, MotionBdi as bdi, MotionBdo as bdo, MotionBig as big, MotionBlockquote as blockquote, MotionBody as body, MotionButton as button, MotionCanvas as canvas, MotionCaption as caption, MotionCircle as circle, MotionCite as cite, MotionClipPath as clipPath, MotionCode as code, MotionCol as col, MotionColgroup as colgroup, createMinimalMotionComponent as create, MotionData as data, MotionDatalist as datalist, MotionDd as dd, MotionDefs as defs, MotionDel as del, MotionDesc as desc, MotionDetails as details, MotionDfn as dfn, MotionDialog as dialog, MotionDiv as div, MotionDl as dl, MotionDt as dt, MotionEllipse as ellipse, MotionEm as em, MotionEmbed as embed, MotionFeBlend as feBlend, MotionFeColorMatrix as feColorMatrix, MotionFeComponentTransfer as feComponentTransfer, MotionFeComposite as feComposite, MotionFeConvolveMatrix as feConvolveMatrix, MotionFeDiffuseLighting as feDiffuseLighting, MotionFeDisplacementMap as feDisplacementMap, MotionFeDistantLight as feDistantLight, MotionFeDropShadow as feDropShadow, MotionFeFlood as feFlood, MotionFeFuncA as feFuncA, MotionFeFuncB as feFuncB, MotionFeFuncG as feFuncG, MotionFeFuncR as feFuncR, MotionFeGaussianBlur as feGaussianBlur, MotionFeImage as feImage, MotionFeMerge as feMerge, MotionFeMergeNode as feMergeNode, MotionFeMorphology as feMorphology, MotionFeOffset as feOffset, MotionFePointLight as fePointLight, MotionFeSpecularLighting as feSpecularLighting, MotionFeSpotLight as feSpotLight, MotionFeTile as feTile, MotionFeTurbulence as feTurbulence, MotionFieldset as fieldset, MotionFigcaption as figcaption, MotionFigure as figure, MotionFilter as filter, MotionFooter as footer, MotionForeignObject as foreignObject, MotionForm as form, MotionG as g, MotionH1 as h1, MotionH2 as h2, MotionH3 as h3, MotionH4 as h4, MotionH5 as h5, MotionH6 as h6, MotionHead as head, MotionHeader as header, MotionHgroup as hgroup, MotionHr as hr, MotionHtml as html, MotionI as i, MotionIframe as iframe, MotionImage as image, MotionImg as img, MotionInput as input, MotionIns as ins, MotionKbd as kbd, MotionKeygen as keygen, MotionLabel as label, MotionLegend as legend, MotionLi as li, MotionLine as line, MotionLinearGradient as linearGradient, MotionLink as link, MotionMain as main, MotionMap as map, MotionMark as mark, MotionMarker as marker, MotionMask as mask, MotionMenu as menu, MotionMenuitem as menuitem, MotionMetadata as metadata, MotionMeter as meter, MotionNav as nav, MotionObject as object, MotionOl as ol, MotionOptgroup as optgroup, MotionOption as option, MotionOutput as output, MotionP as p, MotionParam as param, MotionPath as path, MotionPattern as pattern, MotionPicture as picture, MotionPolygon as polygon, MotionPolyline as polyline, MotionPre as pre, MotionProgress as progress, MotionQ as q, MotionRadialGradient as radialGradient, MotionRect as rect, MotionRp as rp, MotionRt as rt, MotionRuby as ruby, MotionS as s, MotionSamp as samp, MotionScript as script, MotionSection as section, MotionSelect as select, MotionSmall as small, MotionSource as source, MotionSpan as span, MotionStop as stop, MotionStrong as strong, MotionStyle as style, MotionSub as sub, MotionSummary as summary, MotionSup as sup, MotionSvg as svg, MotionSymbol as symbol, MotionTable as table, MotionTbody as tbody, MotionTd as td, MotionText as text, MotionTextPath as textPath, MotionTextarea as textarea, MotionTfoot as tfoot, MotionTh as th, MotionThead as thead, MotionTime as time, MotionTitle as title, MotionTr as tr, MotionTrack as track, MotionTspan as tspan, MotionU as u, MotionUl as ul, MotionUse as use, MotionVideo as video, MotionView as view, MotionWbr as wbr, MotionWebview as webview };\n"
        }
    ]
}