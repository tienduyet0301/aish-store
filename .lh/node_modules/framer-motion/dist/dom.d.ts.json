{
    "sourceFile": "node_modules/framer-motion/dist/dom.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892300134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { MotionValue, UnresolvedValueKeyframe, Transition, ElementOrSelector, DOMKeyframesDefinition, AnimationOptions, AnimationPlaybackOptions, AnimationScope, AnimationPlaybackControlsWithThen, ValueAnimationTransition, AnimationPlaybackControls, DynamicOption } from 'motion-dom';\nexport * from 'motion-dom';\nimport { Easing, EasingFunction, Point } from 'motion-utils';\nexport * from 'motion-utils';\n\ntype GenericKeyframesTarget<V> = V[] | Array<null | V>;\n\ntype ObjectTarget<O> = {\n    [K in keyof O]?: O[K] | GenericKeyframesTarget<O[K]>;\n};\ntype SequenceTime = number | \"<\" | `+${number}` | `-${number}` | `${string}`;\ntype SequenceLabel = string;\ninterface SequenceLabelWithTime {\n    name: SequenceLabel;\n    at: SequenceTime;\n}\ninterface At {\n    at?: SequenceTime;\n}\ntype MotionValueSegment = [\n    MotionValue,\n    UnresolvedValueKeyframe | UnresolvedValueKeyframe[]\n];\ntype MotionValueSegmentWithTransition = [\n    MotionValue,\n    UnresolvedValueKeyframe | UnresolvedValueKeyframe[],\n    Transition & At\n];\ntype DOMSegment = [ElementOrSelector, DOMKeyframesDefinition];\ntype DOMSegmentWithTransition = [\n    ElementOrSelector,\n    DOMKeyframesDefinition,\n    AnimationOptions & At\n];\ntype ObjectSegment<O extends {} = {}> = [O, ObjectTarget<O>];\ntype ObjectSegmentWithTransition<O extends {} = {}> = [\n    O,\n    ObjectTarget<O>,\n    AnimationOptions & At\n];\ntype Segment = ObjectSegment | ObjectSegmentWithTransition | SequenceLabel | SequenceLabelWithTime | MotionValueSegment | MotionValueSegmentWithTransition | DOMSegment | DOMSegmentWithTransition;\ntype AnimationSequence = Segment[];\ninterface SequenceOptions extends AnimationPlaybackOptions {\n    delay?: number;\n    duration?: number;\n    defaultTransition?: Transition;\n}\ninterface AbsoluteKeyframe {\n    value: string | number | null;\n    at: number;\n    easing?: Easing;\n}\ntype ValueSequence = AbsoluteKeyframe[];\ninterface SequenceMap {\n    [key: string]: ValueSequence;\n}\ntype ResolvedAnimationDefinition = {\n    keyframes: {\n        [key: string]: UnresolvedValueKeyframe[];\n    };\n    transition: {\n        [key: string]: Transition;\n    };\n};\ntype ResolvedAnimationDefinitions = Map<Element | MotionValue, ResolvedAnimationDefinition>;\n\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */\ndeclare function createScopedAnimate(scope?: AnimationScope): {\n    (sequence: AnimationSequence, options?: SequenceOptions): AnimationPlaybackControlsWithThen;\n    (value: string | MotionValue<string>, keyframes: string | GenericKeyframesTarget<string>, options?: ValueAnimationTransition<string>): AnimationPlaybackControlsWithThen;\n    (value: number | MotionValue<number>, keyframes: number | GenericKeyframesTarget<number>, options?: ValueAnimationTransition<number>): AnimationPlaybackControlsWithThen;\n    <V>(value: V | MotionValue<V>, keyframes: V | GenericKeyframesTarget<V>, options?: ValueAnimationTransition<V>): AnimationPlaybackControlsWithThen;\n    (element: ElementOrSelector, keyframes: DOMKeyframesDefinition, options?: AnimationOptions): AnimationPlaybackControlsWithThen;\n    <O extends {}>(object: O | O[], keyframes: ObjectTarget<O>, options?: AnimationOptions): AnimationPlaybackControlsWithThen;\n};\ndeclare const animate: {\n    (sequence: AnimationSequence, options?: SequenceOptions): AnimationPlaybackControlsWithThen;\n    (value: string | MotionValue<string>, keyframes: string | GenericKeyframesTarget<string>, options?: ValueAnimationTransition<string>): AnimationPlaybackControlsWithThen;\n    (value: number | MotionValue<number>, keyframes: number | GenericKeyframesTarget<number>, options?: ValueAnimationTransition<number>): AnimationPlaybackControlsWithThen;\n    <V>(value: V | MotionValue<V>, keyframes: V | GenericKeyframesTarget<V>, options?: ValueAnimationTransition<V>): AnimationPlaybackControlsWithThen;\n    (element: ElementOrSelector, keyframes: DOMKeyframesDefinition, options?: AnimationOptions): AnimationPlaybackControlsWithThen;\n    <O extends {}>(object: O | O[], keyframes: ObjectTarget<O>, options?: AnimationOptions): AnimationPlaybackControlsWithThen;\n};\n\ndeclare const animateMini: (elementOrSelector: ElementOrSelector, keyframes: DOMKeyframesDefinition, options?: AnimationOptions) => AnimationPlaybackControlsWithThen;\n\ninterface ScrollOptions {\n    source?: HTMLElement;\n    container?: HTMLElement;\n    target?: Element;\n    axis?: \"x\" | \"y\";\n    offset?: ScrollOffset;\n}\ntype OnScrollProgress = (progress: number) => void;\ntype OnScrollWithInfo = (progress: number, info: ScrollInfo) => void;\ntype OnScroll = OnScrollProgress | OnScrollWithInfo;\ninterface AxisScrollInfo {\n    current: number;\n    offset: number[];\n    progress: number;\n    scrollLength: number;\n    velocity: number;\n    targetOffset: number;\n    targetLength: number;\n    containerLength: number;\n    interpolatorOffsets?: number[];\n    interpolate?: EasingFunction;\n}\ninterface ScrollInfo {\n    time: number;\n    x: AxisScrollInfo;\n    y: AxisScrollInfo;\n}\ntype OnScrollInfo = (info: ScrollInfo) => void;\ntype SupportedEdgeUnit = \"px\" | \"vw\" | \"vh\" | \"%\";\ntype EdgeUnit = `${number}${SupportedEdgeUnit}`;\ntype NamedEdges = \"start\" | \"end\" | \"center\";\ntype EdgeString = NamedEdges | EdgeUnit | `${number}`;\ntype Edge = EdgeString | number;\ntype ProgressIntersection = [number, number];\ntype Intersection = `${Edge} ${Edge}`;\ntype ScrollOffset = Array<Edge | Intersection | ProgressIntersection>;\ninterface ScrollInfoOptions {\n    container?: HTMLElement;\n    target?: Element;\n    axis?: \"x\" | \"y\";\n    offset?: ScrollOffset;\n}\n\ndeclare function scroll(onScroll: OnScroll | AnimationPlaybackControls, { axis, container, ...options }?: ScrollOptions): VoidFunction;\n\ndeclare function scrollInfo(onScroll: OnScrollInfo, { container, ...options }?: ScrollInfoOptions): () => void;\n\ntype ViewChangeHandler = (entry: IntersectionObserverEntry) => void;\ntype MarginValue = `${number}${\"px\" | \"%\"}`;\ntype MarginType = MarginValue | `${MarginValue} ${MarginValue}` | `${MarginValue} ${MarginValue} ${MarginValue}` | `${MarginValue} ${MarginValue} ${MarginValue} ${MarginValue}`;\ninterface InViewOptions {\n    root?: Element | Document;\n    margin?: MarginType;\n    amount?: \"some\" | \"all\" | number;\n}\ndeclare function inView(elementOrSelector: ElementOrSelector, onStart: (element: Element, entry: IntersectionObserverEntry) => void | ViewChangeHandler, { root, margin: rootMargin, amount }?: InViewOptions): VoidFunction;\n\ntype StaggerOrigin = \"first\" | \"last\" | \"center\" | number;\ntype StaggerOptions = {\n    startDelay?: number;\n    from?: StaggerOrigin;\n    ease?: Easing;\n};\ndeclare function stagger(duration?: number, { startDelay, from, ease }?: StaggerOptions): DynamicOption<number>;\n\ntype DelayedFunction = (overshoot: number) => void;\ndeclare function delayInSeconds(callback: DelayedFunction, timeout: number): () => void;\n\ndeclare const distance: (a: number, b: number) => number;\ndeclare function distance2D(a: Point, b: Point): number;\n\nexport { type AbsoluteKeyframe, type AnimationSequence, type At, type DOMSegment, type DOMSegmentWithTransition, type DelayedFunction, type MotionValueSegment, type MotionValueSegmentWithTransition, type ObjectSegment, type ObjectSegmentWithTransition, type ObjectTarget, type ResolvedAnimationDefinition, type ResolvedAnimationDefinitions, type Segment, type SequenceLabel, type SequenceLabelWithTime, type SequenceMap, type SequenceOptions, type SequenceTime, type ValueSequence, animate, animateMini, createScopedAnimate, delayInSeconds as delay, distance, distance2D, inView, scroll, scrollInfo, stagger };\n"
        }
    ]
}