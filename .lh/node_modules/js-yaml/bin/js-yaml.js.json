{
    "sourceFile": "node_modules/js-yaml/bin/js-yaml.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892371268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "#!/usr/bin/env node\n\n\n'use strict';\n\n/*eslint-disable no-console*/\n\n\nvar fs       = require('fs');\nvar argparse = require('argparse');\nvar yaml     = require('..');\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar cli = new argparse.ArgumentParser({\n  prog:     'js-yaml',\n  add_help:  true\n});\n\ncli.add_argument('-v', '--version', {\n  action: 'version',\n  version: require('../package.json').version\n});\n\ncli.add_argument('-c', '--compact', {\n  help:   'Display errors in compact mode',\n  action: 'store_true'\n});\n\n// deprecated (not needed after we removed output colors)\n// option suppressed, but not completely removed for compatibility\ncli.add_argument('-j', '--to-json', {\n  help:   argparse.SUPPRESS,\n  dest:   'json',\n  action: 'store_true'\n});\n\ncli.add_argument('-t', '--trace', {\n  help:   'Show stack trace on error',\n  action: 'store_true'\n});\n\ncli.add_argument('file', {\n  help:   'File to read, utf-8 encoded without BOM',\n  nargs:  '?',\n  default: '-'\n});\n\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar options = cli.parse_args();\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction readFile(filename, encoding, callback) {\n  if (options.file === '-') {\n    // read from stdin\n\n    var chunks = [];\n\n    process.stdin.on('data', function (chunk) {\n      chunks.push(chunk);\n    });\n\n    process.stdin.on('end', function () {\n      return callback(null, Buffer.concat(chunks).toString(encoding));\n    });\n  } else {\n    fs.readFile(filename, encoding, callback);\n  }\n}\n\nreadFile(options.file, 'utf8', function (error, input) {\n  var output, isYaml;\n\n  if (error) {\n    if (error.code === 'ENOENT') {\n      console.error('File not found: ' + options.file);\n      process.exit(2);\n    }\n\n    console.error(\n      options.trace && error.stack ||\n      error.message ||\n      String(error));\n\n    process.exit(1);\n  }\n\n  try {\n    output = JSON.parse(input);\n    isYaml = false;\n  } catch (err) {\n    if (err instanceof SyntaxError) {\n      try {\n        output = [];\n        yaml.loadAll(input, function (doc) { output.push(doc); }, {});\n        isYaml = true;\n\n        if (output.length === 0) output = null;\n        else if (output.length === 1) output = output[0];\n\n      } catch (e) {\n        if (options.trace && err.stack) console.error(e.stack);\n        else console.error(e.toString(options.compact));\n\n        process.exit(1);\n      }\n    } else {\n      console.error(\n        options.trace && err.stack ||\n        err.message ||\n        String(err));\n\n      process.exit(1);\n    }\n  }\n\n  if (isYaml) console.log(JSON.stringify(output, null, '  '));\n  else console.log(yaml.dump(output));\n});\n"
        }
    ]
}