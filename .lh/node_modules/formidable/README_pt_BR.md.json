{
    "sourceFile": "node_modules/formidable/README_pt_BR.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892298376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "<p align=\"center\">\n  <img alt=\"npm formidable package logo\" src=\"https://raw.githubusercontent.com/node-formidable/formidable/master/logo.png\" />\n</p>\n\n# formidable [![npm version][npmv-img]][npmv-url] [![MIT license][license-img]][license-url] [![Libera Manifesto][libera-manifesto-img]][libera-manifesto-url] [![Twitter][twitter-img]][twitter-url]\n\n> A Node.js module for parsing form data, especially file uploads.\n\n[![Code style][codestyle-img]][codestyle-url]\n[![codecoverage][codecov-img]][codecov-url]\n[![linux build status][linux-build-img]][build-url]\n[![macos build status][macos-build-img]][build-url]\n\nSe você tiver qualquer tipo de pergunta sobre _como_ fazer, por favor leia o [Contributing\nGuia][contributing-url] e [Código de Conduta][code_of_conduct-url]\ndocumentos.<br /> Para relatórios de bugs e solicitações de recursos, [crie uma\nissue][open-issue-url] ou ping [@tunnckoCore / @3a1FcBx0](https://twitter.com/3a1FcBx0)\nno Twitter.\n\n[![Conventional Commits][ccommits-img]][ccommits-url]\n[![Minimum Required Nodejs][nodejs-img]][npmv-url]\n[![Tidelift Subscription][tidelift-img]][tidelift-url]\n[![Buy me a Kofi][kofi-img]][kofi-url]\n[![Renovate App Status][renovateapp-img]][renovateapp-url]\n[![Make A Pull Request][prs-welcome-img]][prs-welcome-url]\n\nEste projeto é [semanticamente versionado](https://semver.org) e está disponível como\nparte da [Assinatura Tidelift][tidelift-url] para nível profissional\ngarantias, suporte aprimorado e segurança.\n[Saiba mais.](https://tidelift.com/subscription/pkg/npm-formidable?utm_source=npm-formidable&utm_medium=referral&utm_campaign=enterprise)\n\n_Os mantenedores do `formidable` e milhares de outros pacotes estão trabalhando\ncom Tidelift para fornecer suporte comercial e manutenção para o Open Source\ndependências que você usa para construir seus aplicativos. Economize tempo, reduza riscos e\nmelhorar a integridade do código, enquanto paga aos mantenedores das dependências exatas que você\nusar._\n\n[![][npm-weekly-img]][npmv-url] [![][npm-monthly-img]][npmv-url]\n[![][npm-yearly-img]][npmv-url] [![][npm-alltime-img]][npmv-url]\n\n## Status do Projeto: Mantido\n\n_Verifique [VERSION NOTES](https://github.com/node-formidable/formidable/blob/master/VERSION_NOTES.md) para obter mais informações sobre os planos v1, v2 e v3, NPM dist-tags e branches._\n\nEste módulo foi inicialmente desenvolvido por\n[**@felixge**](https://github.com/felixge) para\n[Transloadit](http://transloadit.com/), um serviço focado em upload e\ncodificação de imagens e vídeos. Foi testado em batalha contra centenas de GBs de\nuploads de arquivos de uma grande variedade de clientes e é considerado pronto para produção\ne é usado na produção por anos.\n\nAtualmente, somos poucos mantenedores tentando lidar com isso. :) Mais contribuidores\nsão sempre bem-vindos! ❤️ Pule\n[issue #412](https://github.com/felixge/node-formidable/issues/412) que está\nfechado, mas se você estiver interessado, podemos discuti-lo e adicioná-lo após regras estritas, como ativar o Two-Factor Auth em suas contas npm e GitHub.\n\n## Destaques\n\n- [Rápido (~ 900-2500 mb/seg)](#benchmarks) e analisador multiparte de streaming\n- Gravar uploads de arquivos automaticamente no disco (opcional, consulte\n   [`options.fileWriteStreamHandler`](#options))\n- [API de plug-ins](#useplugin-plugin) - permitindo analisadores e plug-ins personalizados\n- Baixo consumo de memória\n- Tratamento de erros gracioso\n- Cobertura de teste muito alta\n\n## Instalar\n\nEste projeto requer `Node.js >= 10.13`. Instale-o usando\n[yarn](https://yarnpkg.com) ou [npm](https://npmjs.com).<br /> _Nós altamente\nrecomendamos usar o Yarn quando pensar em contribuir para este projeto._\n\nEste é um pacote de baixo nível e, se você estiver usando uma estrutura de alto nível, _pode_ já estar incluído. Verifique os exemplos\nabaixo e a pasta [examples/](https://github.com/node-formidable/formidable/tree/master/examples).\n\n```\n# v2\nnpm install formidable\nnpm install formidable@v2\n\n# v3\nnpm install formidable@v3\n```\n\n_**Nota:** Em um futuro próximo, a v3 será publicada na dist-tag `latest` do NPM.\nVersões futuras não prontas serão publicadas nas dist-tags `*-next` para a versão correspondente._\n\n\n## Exemplos\n\nPara mais exemplos veja o diretório `examples/`.\n\n### com módulo http Node.js\n\nAnalisar um upload de arquivo de entrada, com o\n[Módulo `http` integrado do Node.js](https://nodejs.org/api/http.html).\n\n```js\nimport http from 'node:http';\nimport formidable, {errors as formidableErrors} from 'formidable';\n\nconst server = http.createServer((req, res) => {\n  if (req.url === '/api/upload' && req.method.toLowerCase() === 'post') {\n    // analisar um upload de arquivo\n    const form = formidable({});\n\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        // exemplo para verificar um erro muito específico\n        if (err.code === formidableErrors.maxFieldsExceeded) {\n\n        }\n        res.writeHead(err.httpCode || 400, { 'Content-Type': 'text/plain' });\n        res.end(String(err));\n        return;\n      }\n      res.writeHead(200, { 'Content-Type': 'application/json' });\n      res.end(JSON.stringify({ fields, files }, null, 2));\n    });\n\n    return;\n  }\n\n  // mostrar um formulário de upload de arquivo\n  res.writeHead(200, { 'Content-Type': 'text/html' });\n  res.end(`\n    <h2>With Node.js <code>\"http\"</code> module</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"multipleFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on http://localhost:8080/ ...');\n});\n```\n\n### com Express.js\n\nExistem várias variantes para fazer isso, mas o Formidable só precisa do Node.js Request\nstream, então algo como o exemplo a seguir deve funcionar bem, sem nenhum middleware [Express.js](https://ghub.now.sh/express) de terceiros.\n\nOu tente o\n[examples/with-express.js](https://github.com/node-formidable/formidable/blob/master/examples/with-express.js)\n\n```js\nimport express from 'express';\nimport formidable from 'formidable';\n\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send(`\n    <h2>With <code>\"express\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n      <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n      <div>File: <input type=\"file\" name=\"someExpressFiles\" multiple=\"multiple\" /></div>\n      <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `);\n});\n\napp.post('/api/upload', (req, res, next) => {\n  const form = formidable({});\n\n  form.parse(req, (err, fields, files) => {\n    if (err) {\n      next(err);\n      return;\n    }\n    res.json({ fields, files });\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n### com Koa e Formidable\n\nClaro, com [Koa v1, v2 ou future v3](https://ghub.now.sh/koa) as coisas\nsao muito parecidas. Você pode usar `formidable` manualmente como mostrado abaixo ou através\ndo pacote [koa-better-body](https://ghub.now.sh/koa-better-body) que é\nusando `formidable` sob o capô e suporte a mais recursos e diferentes\ncorpos de solicitação, verifique sua documentação para mais informações.\n\n_Nota: este exemplo está assumindo Koa v2. Esteja ciente de que você deve passar `ctx.req`\nque é a solicitação do Node.js e **NÃO** o `ctx.request` que é a solicitação do Koa\nobjeto - há uma diferença._\n\n```js\nimport Koa from 'Koa';\nimport formidable from 'formidable';\n\nconst app = new Koa();\n\napp.on('error', (err) => {\n  console.error('server error', err);\n});\n\napp.use(async (ctx, next) => {\n  if (ctx.url === '/api/upload' && ctx.method.toLowerCase() === 'post') {\n    const form = formidable({});\n\n     // não muito elegante, mas é por enquanto se você não quiser usar `koa-better-body`\n     // ou outros middlewares.\n    await new Promise((resolve, reject) => {\n      form.parse(ctx.req, (err, fields, files) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        ctx.set('Content-Type', 'application/json');\n        ctx.status = 200;\n        ctx.state = { fields, files };\n        ctx.body = JSON.stringify(ctx.state, null, 2);\n        resolve();\n      });\n    });\n    await next();\n    return;\n  }\n\n  // mostrar um formulário de upload de arquivo\n  ctx.set('Content-Type', 'text/html');\n  ctx.status = 200;\n  ctx.body = `\n    <h2>With <code>\"koa\"</code> npm package</h2>\n    <form action=\"/api/upload\" enctype=\"multipart/form-data\" method=\"post\">\n    <div>Text field title: <input type=\"text\" name=\"title\" /></div>\n    <div>File: <input type=\"file\" name=\"koaFiles\" multiple=\"multiple\" /></div>\n    <input type=\"submit\" value=\"Upload\" />\n    </form>\n  `;\n});\n\napp.use((ctx) => {\n  console.log('The next middleware is called');\n  console.log('Results:', ctx.state);\n});\n\napp.listen(3000, () => {\n  console.log('Server listening on http://localhost:3000 ...');\n});\n```\n\n## Benchmarks\n\nO benchmark é bastante antigo, da antiga base de código. Mas talvez seja bem verdade.\nAnteriormente, os números giravam em torno de ~ 500 mb/s. Atualmente com a mudança para o novo\nNode.js Streams API, é mais rápido. Você pode ver claramente as diferenças entre as\nversões do Node.\n\n_Observação: um benchmarking muito melhor pode e deve ser feito no futuro._\n\nBenchmark realizado em 8 GB de RAM, Xeon X3440 (2,53 GHz, 4 núcleos, 8 threads)\n\n```\n~/github/node-formidable master\n❯ nve --parallel 8 10 12 13 node benchmark/bench-multipart-parser.js\n\n ⬢  Node 8\n\n1261.08 mb/sec\n\n ⬢  Node 10\n\n1113.04 mb/sec\n\n ⬢  Node 12\n\n2107.00 mb/sec\n\n ⬢  Node 13\n\n2566.42 mb/sec\n```\n\n![benchmark 29 de janeiro de 2020](./benchmark/2020-01-29_xeon-x3440.png)\n\n## API\n\n### Formidable / IncomingForm\n\nTodos os mostrados são equivalentes.\n\n_Por favor, passe [`options`](#options) para a função/construtor, não atribuindo\neles para a instância `form`_\n\n```js\nimport formidable from 'formidable';\nconst form = formidable(options);\n```\n\n### Opções\n\nVeja seus padrões em [src/Formidable.js DEFAULT_OPTIONS](./src/Formidable.js)\n(a constante `DEFAULT_OPTIONS`).\n\n- `options.encoding` **{string}** - padrão `'utf-8'`; define a codificação para campos de formulário de entrada,\n- `options.uploadDir` **{string}** - padrão `os.tmpdir()`; o diretório para colocar os uploads de arquivos. Você pode movê-los mais tarde usando `fs.rename()`.\n- `options.keepExtensions` **{boolean}** - padrão `false`; incluir as extensões dos arquivos originais ou não\n- `options.allowEmptyFiles` **{boolean}** - padrão `false`; permitir upload de arquivos vazios\n- `options.minFileSize` **{number}** - padrão `1` (1byte); o tamanho mínimo do arquivo carregado.\n- `options.maxFiles` **{number}** - padrão `Infinity`;\n  limitar a quantidade de arquivos carregados, defina Infinity para ilimitado\n- `options.maxFileSize` **{number}** - padrão `200 * 1024 * 1024` (200mb);\n  limitar o tamanho de cada arquivo carregado.\n- `options.maxTotalFileSize` **{number}** - padrão `options.maxFileSize`;\n  limitar o tamanho do lote de arquivos carregados.\n- `options.maxFields` **{number}** - padrão `1000`; limite o número de campos, defina Infinity para ilimitado\n- `options.maxFieldsSize` **{number}** - padrão `20 * 1024 * 1024` (20mb);\n  limitar a quantidade de memória que todos os campos juntos (exceto arquivos) podem alocar em\n  bytes.\n- `options.hashAlgorithm` **{string | false}** - padrão `false`; incluir checksums calculados\n  para arquivos recebidos, defina isso para algum algoritmo de hash, consulte\n  [crypto.createHash](https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options)\n  para algoritmos disponíveis\n- `options.fileWriteStreamHandler` **{function}** - padrão `null`, que por padrão grava no sistema de arquivos da máquina host cada arquivo analisado; A função\n  deve retornar uma instância de um\n  [fluxo gravável](https://nodejs.org/api/stream.html#stream_class_stream_writable)\n  que receberá os dados do arquivo carregado. Com esta opção, você pode ter qualquer\n  comportamento personalizado em relação a onde os dados do arquivo carregado serão transmitidos.\n  Se você deseja gravar o arquivo carregado em outros tipos de armazenamento em nuvem\n  (AWS S3, armazenamento de blob do Azure, armazenamento em nuvem do Google) ou armazenamento de arquivo privado,\n  esta é a opção que você está procurando. Quando esta opção é definida, o comportamento padrão de gravar o arquivo no sistema de arquivos da máquina host é perdido.\n- `options.filename` **{function}** - padrão `undefined` Use-o para controlar newFilename. Deve retornar uma string. Será associado a options.uploadDir.\n\n- `options.filter` **{function}** - função padrão que sempre retorna verdadeiro.\n  Use-o para filtrar arquivos antes de serem carregados. Deve retornar um booleano.\n\n\n#### `options.filename`  **{function}** function (name, ext, part, form) -> string\n\nonde a parte pode ser decomposta como\n\n```js\nconst { originalFilename, mimetype} = part;\n```\n\n_**Observação:** Se este tamanho de campos combinados, ou tamanho de algum arquivo for excedido, um\nO evento `'error'` é disparado._\n\n```js\n// A quantidade de bytes recebidos para este formulário até agora.\nform.bytesReceived;\n```\n\n```js\n// O número esperado de bytes neste formulário.\nform.bytesExpected;\n```\n\n#### `options.filter`  **{function}** function ({name, originalFilename, mimetype}) -> boolean\n\n**Observação:** use uma variável externa para cancelar todos os uploads no primeiro erro\n\n```js\nconst options = {\n  filter: function ({name, originalFilename, mimetype}) {\n    // manter apenas imagens\n    return mimetype && mimetype.includes(\"image\");\n  }\n};\n```\n\n\n### .parse(request, callback)\n\nAnalisa uma `request` do Node.js recebida contendo dados de formulário. Se `callback` for\nfornecido, todos os campos e arquivos são coletados e passados para o retorno de chamada.\n\n```js\nconst form = formidable({ uploadDir: __dirname });\n\nform.parse(req, (err, fields, files) => {\n  console.log('fields:', fields);\n  console.log('files:', files);\n});\n```\n\nVocê pode substituir esse método se estiver interessado em acessar diretamente o\nfluxo de várias partes. Fazer isso desativará qualquer processamento de eventos `'field'` / `'file'`\nque ocorreria de outra forma, tornando você totalmente responsável por lidar com o processamento.\n\nSobre `uploadDir`, dada a seguinte estrutura de diretório\n```\nproject-name\n├── src\n│   └── server.js\n│\n└── uploads\n    └── image.jpg\n```\n\n`__dirname` seria o mesmo diretório que o próprio arquivo de origem (src)\n\n\n```js\n `${__dirname}/../uploads`\n```\n\npara colocar arquivos em uploads.\n\nOmitir `__dirname` tornaria o caminho relativo ao diretório de trabalho atual. Isso seria o mesmo se server.js fosse iniciado a partir de src, mas não de project-name.\n\n\n`null` usará o padrão que é `os.tmpdir()`\n\nNota: Se o diretório não existir, os arquivos carregados são __silenciosamente descartados__. Para ter certeza de que existe:\n\n```js\nimport {createNecessaryDirectoriesSync} from \"filesac\";\n\n\nconst uploadPath = `${__dirname}/../uploads`;\ncreateNecessaryDirectoriesSync(`${uploadPath}/x`);\n```\n\n\nNo exemplo abaixo, escutamos alguns eventos e os direcionamos para o ouvinte `data`, para\nque você possa fazer o que quiser lá, com base em se é antes do arquivo ser emitido, o valor do\ncabeçalho, o nome do cabeçalho, no campo , em arquivo e etc.\n\nOu a outra maneira poderia ser apenas substituir o `form.onPart` como é mostrado um pouco\nmais tarde.\n\n```js\nform.once('error', console.error);\n\nform.on('fileBegin', (formname, file) => {\n  form.emit('data', { name: 'fileBegin', formname, value: file });\n});\n\nform.on('file', (formname, file) => {\n  form.emit('data', { name: 'file', formname, value: file });\n});\n\nform.on('field', (fieldName, fieldValue) => {\n  form.emit('data', { name: 'field', key: fieldName, value: fieldValue });\n});\n\nform.once('end', () => {\n  console.log('Done!');\n});\n\n// Se você quiser personalizar o que quiser...\nform.on('data', ({ name, key, value, buffer, start, end, formname, ...more }) => {\n  if (name === 'partBegin') {\n  }\n  if (name === 'partData') {\n  }\n  if (name === 'headerField') {\n  }\n  if (name === 'headerValue') {\n  }\n  if (name === 'headerEnd') {\n  }\n  if (name === 'headersEnd') {\n  }\n  if (name === 'field') {\n    console.log('field name:', key);\n    console.log('field value:', value);\n  }\n  if (name === 'file') {\n    console.log('file:', formname, value);\n  }\n  if (name === 'fileBegin') {\n    console.log('fileBegin:', formname, value);\n  }\n});\n```\n\n### .use(plugin: Plugin)\n\nUm método que permite estender a biblioteca Formidable. Por padrão, incluímos\n4 plug-ins, que são essencialmente adaptadores para conectar os diferentes analisadores integrados.\n\n**Os plugins adicionados por este método estão sempre ativados.**\n\n_Consulte [src/plugins/](./src/plugins/) para uma visão mais detalhada dos plug-ins padrão._\n\nO parâmetro `plugin` tem essa assinatura:\n\n```typescript\nfunction(formidable: Formidable, options: Options): void;\n```\n\nA arquitetura é simples. O `plugin` é uma função que é passada com a instância Formidable (o `form` nos exemplos README) e as opções.\n\n**Observação:** o contexto `this` da função do plug-in também é a mesma instância.\n\n```js\nconst form = formidable({ keepExtensions: true });\n\nform.use((self, options) => {\n  // self === this === form\n  console.log('woohoo, custom plugin');\n  // faça suas coisas; verifique `src/plugins` para inspiração\n});\n\nform.parse(req, (error, fields, files) => {\n  console.log('done!');\n});\n```\n**Importante observar**, é que dentro do plugin `this.options`, `self.options` e\n`options` PODEM ou NÃO ser iguais. A melhor prática geral é sempre usar o\n`this`, para que você possa testar seu plugin mais tarde de forma independente e mais fácil.\n\nSe você quiser desabilitar alguns recursos de análise do Formidable, você pode desabilitar\no plugin que corresponde ao analisador. Por exemplo, se você deseja desabilitar a análise de\nvárias partes (para que o [src/parsers/Multipart.js](./src/parsers/Multipart.js)\nque é usado em [src/plugins/multipart.js](./src/plugins/multipart.js)), então\nvocê pode removê-lo do `options.enabledPlugins`, assim\n\n```js\nimport formidable, {octetstream, querystring, json} from \"formidable\";\nconst form = formidable({\n  hashAlgorithm: 'sha1',\n  enabledPlugins: [octetstream, querystring, json],\n});\n```\n\n**Esteja ciente** de que a ordem _PODE_ ser importante também. Os nomes correspondem 1:1 a\narquivos na pasta [src/plugins/](./src/plugins).\n\nSolicitações pull para novos plug-ins integrados PODEM ser aceitas - por exemplo, analisador de\nquerystring mais avançado. Adicione seu plugin como um novo arquivo na pasta `src/plugins/` (em letras minúsculas) e\nsiga como os outros plugins são feitos.\n\n### form.onPart\n\nSe você quiser usar Formidable para manipular apenas algumas partes para você, você pode fazer\nalguma coisa similar. ou ver\n[#387](https://github.com/node-formidable/node-formidable/issues/387) para\ninspiração, você pode, por exemplo, validar o tipo mime.\n\n```js\nconst form = formidable();\n\nform.onPart = (part) => {\n  part.on('data', (buffer) => {\n    // faça o que quiser aqui\n  });\n};\n```\n\nPor exemplo, force Formidable a ser usado apenas em \"partes\" que não sejam de arquivo (ou seja, html\nCampos)\n\n```js\nconst form = formidable();\n\nform.onPart = function (part) {\n  // deixe formidável lidar apenas com partes não arquivadas\n  if (part.originalFilename === '' || !part.mimetype) {\n    // usado internamente, por favor, não substitua!\n    form._handlePart(part);\n  }\n};\n```\n\n### Arquivo\n\n```ts\nexport interface File {\n   // O tamanho do arquivo enviado em bytes.\n   // Se o arquivo ainda estiver sendo carregado (veja o evento `'fileBegin'`),\n   // esta propriedade diz quantos bytes do arquivo já foram gravados no disco.\n  file.size: number;\n\n   // O caminho em que este arquivo está sendo gravado. Você pode modificar isso no evento `'fileBegin'`\n   // caso você esteja insatisfeito com a forma como o formidable gera um caminho temporário para seus arquivos.\n  file.filepath: string;\n\n  // O nome que este arquivo tinha de acordo com o cliente de upload.\n  file.originalFilename: string | null;\n\n  // calculado com base nas opções fornecidas.\n  file.newFilename: string | null;\n\n  // O tipo mime deste arquivo, de acordo com o cliente de upload.\n  file.mimetype: string | null;\n\n  // Um objeto Date (ou `null`) contendo a hora em que este arquivo foi gravado pela última vez.\n  // Principalmente aqui para compatibilidade com o [W3C File API Draft](http://dev.w3.org/2006/webapi/FileAPI/).\n  file.mtime: Date | null;\n\n  file.hashAlgorithm: false | |'sha1' | 'md5' | 'sha256'\n  // Se o cálculo `options.hashAlgorithm` foi definido, você pode ler o resumo hexadecimal desta var (no final, será uma string)\n  file.hash: string | object | null;\n}\n```\n\n#### file.toJSON()\n\nEste método retorna uma representação JSON do arquivo, permitindo que você `JSON.stringify()`\no arquivo que é útil para registrar e responder a solicitações.\n\n### Eventos\n\n#### `'progress'`\nEmitido após cada bloco de entrada de dados que foi analisado. Pode ser usado para rolar sua própria barra de progresso. **Aviso** Use isso\napenas para a barra de progresso do lado do servidor. No lado do cliente, é melhor usar `XMLHttpRequest` com `xhr.upload.onprogress =`\n\n```js\nform.on('progress', (bytesReceived, bytesExpected) => {});\n```\n\n#### `'field'`\n\nEmitido sempre que um par campo/valor é recebido.\n\n```js\nform.on('field', (name, value) => {});\n```\n\n#### `'fileBegin'`\n\nEmitido sempre que um novo arquivo é detectado no fluxo de upload.\nUse este evento se desejar transmitir o arquivo para outro lugar enquanto armazena o upload no sistema de arquivos.\n\n```js\nform.on('fileBegin', (formName, file) => {\n     // acessível aqui\n     // formName o nome no formulário (<input name=\"thisname\" type=\"file\">) ou http filename para octetstream\n     // file.originalFilename http filename ou null se houver um erro de análise\n     // file.newFilename gerou hexoid ou o que options.filename retornou\n     // file.filepath nome do caminho padrão de acordo com options.uploadDir e options.filename\n     // file.filepath = CUSTOM_PATH // para alterar o caminho final\n});\n```\n\n#### `'file'`\n\nEmitido sempre que um par campo/arquivo é recebido. `file` é uma instância de\n`File`.\n\n```js\nform.on('file', (formname, file) => {\n     // o mesmo que fileBegin, exceto\n     // é muito tarde para alterar file.filepath\n     // file.hash está disponível se options.hash foi usado\n});\n```\n\n#### `'error'`\n\nEmitido quando há um erro no processamento do formulário recebido. Uma solicitação que\napresenta um erro é pausada automaticamente, você terá que chamar manualmente\n`request.resume()` se você quiser que a requisição continue disparando eventos `'data'`.\n\nPode ter `error.httpCode` e `error.code` anexados.\n\n```js\nform.on('error', (err) => {});\n```\n\n#### `'aborted'`\n\nEmitido quando a requisição foi abortada pelo usuário. Agora isso pode ser devido a um\nevento 'timeout' ou 'close' no soquete. Após este evento ser emitido, um\nO evento `error` seguirá. No futuro, haverá um 'timeout' separado\nevento (precisa de uma mudança no núcleo do nó).\n\n```js\nform.on('aborted', () => {});\n```\n\n#### `'end'`\n\nEmitido quando toda a solicitação foi recebida e todos os arquivos contidos foram\nliberados para o disco. Este é um ótimo lugar para você enviar sua resposta.\n\n```js\nform.on('end', () => {});\n```\n\n\n### Helpers\n\n#### firstValues\n\nObtém os primeiros valores dos campos, como pré 3.0.0 sem passar múltiplos em uma\nlista de exceções opcionais onde arrays de strings ainda são desejados (`<select multiple>` por exemplo)\n\n```js\nimport { firstValues } from 'formidable/src/helpers/firstValues.js';\n\n// ...\nform.parse(request, async (error, fieldsMultiple, files) => {\n    if (error) {\n        //...\n    }\n    const exceptions = ['thisshouldbeanarray'];\n    const fieldsSingle = firstValues(form, fieldsMultiple, exceptions);\n    // ...\n```\n\n#### readBooleans\n\nHtml form input type=\"checkbox\" envia apenas o valor \"on\" se marcado,\nconverta-o em booleanos para cada entrada que deve ser enviada como uma caixa de seleção, use somente após a chamada de firstValues ou similar.\n\n```js\nimport { firstValues } from 'formidable/src/helpers/firstValues.js';\nimport { readBooleans } from 'formidable/src/helpers/readBooleans.js';\n\n// ...\nform.parse(request, async (error, fieldsMultiple, files) => {\n    if (error) {\n        //...\n    }\n    const fieldsSingle = firstValues(form, fieldsMultiple);\n\n    const expectedBooleans = ['checkbox1', 'wantsNewsLetter', 'hasACar'];\n    const fieldsWithBooleans = readBooleans(fieldsSingle, expectedBooleans);\n    // ...\n```\n\n## Changelog\n\n[./CHANGELOG.md](./CHANGELOG.md)\n\n## Ports & Créditos\n\n- [multipart-parser](http://github.com/FooBarWidget/multipart-parser): um analisador C++ baseado em formidável\n- [Ryan Dahl](https://x.com/rough__sea) por seu trabalho em\n  [http-parser](http://github.com/ry/http-parser) que inspirou fortemente o `multipart_parser.js` inicial.\n\n## Contribuindo\n\nSe a documentação não estiver clara ou tiver um erro de digitação, clique no botão `Edit` da página (ícone de lápis) e sugira uma correção.\nSe você gostaria de nos ajudar a corrigir\num bug ou adicionar um novo recurso, verifique nosso [Contributing\nGuide][contribuindo-url]. Pull requests são bem-vindos!\n\nAgradecimentos vão para essas pessoas maravilhosas\n([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/felixge\"><img src=\"https://avatars3.githubusercontent.com/u/15000?s=460&v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Felix Geisendörfer</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Code\">💻</a> <a href=\"#design-felixge\" title=\"Design\">🎨</a> <a href=\"#ideas-felixge\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=felixge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://tunnckoCore.com\"><img src=\"https://avatars3.githubusercontent.com/u/5038030?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charlike Mike Reagent</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AtunnckoCore\" title=\"Bug reports\">🐛</a> <a href=\"#infra-tunnckoCore\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#design-tunnckoCore\" title=\"Design\">🎨</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Documentation\">📖</a> <a href=\"#example-tunnckoCore\" title=\"Examples\">💡</a> <a href=\"#ideas-tunnckoCore\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-tunnckoCore\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=tunnckoCore\" title=\"Tests\">⚠️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kedarv\"><img src=\"https://avatars1.githubusercontent.com/u/1365665?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kedar</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=kedarv\" title=\"Tests\">⚠️</a> <a href=\"#question-kedarv\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Akedarv\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/GrosSacASac\"><img src=\"https://avatars0.githubusercontent.com/u/5721194?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Walle Cyril</b></sub></a><br /><a href=\"#question-GrosSacASac\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AGrosSacASac\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=GrosSacASac\" title=\"Code\">💻</a> <a href=\"#financial-GrosSacASac\" title=\"Financial\">💵</a> <a href=\"#ideas-GrosSacASac\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-GrosSacASac\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/xarguments\"><img src=\"https://avatars2.githubusercontent.com/u/40522463?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xargs</b></sub></a><br /><a href=\"#question-xarguments\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Axarguments\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=xarguments\" title=\"Code\">💻</a> <a href=\"#maintenance-xarguments\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Amit-A\"><img src=\"https://avatars1.githubusercontent.com/u/7987238?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Amit-A</b></sub></a><br /><a href=\"#question-Amit-A\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AAmit-A\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=Amit-A\" title=\"Code\">💻</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://charmander.me/\"><img src=\"https://avatars1.githubusercontent.com/u/1889843?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Charmander</b></sub></a><br /><a href=\"#question-charmander\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Acharmander\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=charmander\" title=\"Code\">💻</a> <a href=\"#ideas-charmander\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#maintenance-charmander\" title=\"Maintenance\">🚧</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/dylan_piercey\"><img src=\"https://avatars2.githubusercontent.com/u/4985201?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dylan Piercey</b></sub></a><br /><a href=\"#ideas-DylanPiercey\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://ochrona.jawne.info.pl\"><img src=\"https://avatars1.githubusercontent.com/u/3618479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Dobrawy</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Aad-m\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=ad-m\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/amitrohatgi\"><img src=\"https://avatars3.githubusercontent.com/u/12177021?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>amitrohatgi</b></sub></a><br /><a href=\"#ideas-amitrohatgi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fengxinming\"><img src=\"https://avatars2.githubusercontent.com/u/6262382?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jesse Feng</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Afengxinming\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://qtmsheep.com\"><img src=\"https://avatars1.githubusercontent.com/u/7271496?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nathanael Demacon</b></sub></a><br /><a href=\"#question-quantumsheep\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=quantumsheep\" title=\"Code\">💻</a> <a href=\"https://github.com/node-formidable/node-formidable/pulls?q=is%3Apr+reviewed-by%3Aquantumsheep\" title=\"Reviewed Pull Requests\">👀</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MunMunMiao\"><img src=\"https://avatars1.githubusercontent.com/u/18216142?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>MunMunMiao</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3AMunMunMiao\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gabipetrovay\"><img src=\"https://avatars0.githubusercontent.com/u/1170398?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gabriel Petrovay</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/issues?q=author%3Agabipetrovay\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/node-formidable/node-formidable/commits?author=gabipetrovay\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Elzair\"><img src=\"https://avatars0.githubusercontent.com/u/2352818?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Philip Woods</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=Elzair\" title=\"Code\">💻</a> <a href=\"#ideas-Elzair\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dmolim\"><img src=\"https://avatars2.githubusercontent.com/u/7090374?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dmitry Ivonin</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=dmolim\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://audiobox.fm\"><img src=\"https://avatars1.githubusercontent.com/u/12844?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Claudio Poli</b></sub></a><br /><a href=\"https://github.com/node-formidable/node-formidable/commits?author=masterkain\" title=\"Code\">💻</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nDe uma [postagem do blog Felix](https://felixge.de/2013/03/11/the-pull-request-hack/):\n\n- [Sven Lito](https://github.com/svnlto) por corrigir bugs e mesclar patches\n- [egirshov](https://github.com/egirshov) por contribuir com muitas melhorias para o analisador multipartes formidável de nós\n- [Andrew Kelley](https://github.com/superjoe30) por também ajudar a corrigir bugs e fazer melhorias\n- [Mike Frey](https://github.com/mikefrey) por contribuir com suporte JSON\n\n## Licença\n\nFormidable é licenciado sob a [MIT License][license-url].\n\n<!-- badges -->\n<!-- prettier-ignore-start -->\n\n[codestyle-url]: https://github.com/airbnb/javascript\n[codestyle-img]: https://badgen.net/badge/code%20style/airbnb%20%2B%20prettier/ff5a5f?icon=airbnb&cache=300\n[codecov-url]: https://codecov.io/gh/node-formidable/formidable\n[codecov-img]: https://badgen.net/codecov/c/github/node-formidable/formidable/master?icon=codecov\n[npmv-canary-img]: https://badgen.net/npm/v/formidable/canary?icon=npm\n[npmv-dev-img]: https://badgen.net/npm/v/formidable/dev?icon=npm\n[npmv-img]: https://badgen.net/npm/v/formidable?icon=npm\n[npmv-url]: https://npmjs.com/package/formidable\n[license-img]: https://badgen.net/npm/license/formidable\n[license-url]: https://github.com/node-formidable/formidable/blob/master/LICENSE\n[chat-img]: https://badgen.net/badge/chat/on%20gitter/46BC99?icon=gitter\n[chat-url]: https://gitter.im/node-formidable/Lobby\n[libera-manifesto-url]: https://liberamanifesto.com\n[libera-manifesto-img]: https://badgen.net/badge/libera/manifesto/grey\n[renovateapp-url]: https://renovatebot.com\n[renovateapp-img]: https://badgen.net/badge/renovate/enabled/green?cache=300\n[prs-welcome-img]: https://badgen.net/badge/PRs/welcome/green?cache=300\n[prs-welcome-url]: http://makeapullrequest.com\n[twitter-url]: https://twitter.com/3a1fcBx0\n[twitter-img]: https://badgen.net/twitter/follow/3a1fcBx0?icon=twitter&color=1da1f2&cache=300\n\n[npm-weekly-img]: https://badgen.net/npm/dw/formidable?icon=npm&cache=300\n[npm-monthly-img]: https://badgen.net/npm/dm/formidable?icon=npm&cache=300\n[npm-yearly-img]: https://badgen.net/npm/dy/formidable?icon=npm&cache=300\n[npm-alltime-img]: https://badgen.net/npm/dt/formidable?icon=npm&cache=300&label=total%20downloads\n\n[nodejs-img]: https://badgen.net/badge/node/>=%2010.13/green?cache=300\n\n[ccommits-url]: https://conventionalcommits.org/\n[ccommits-img]: https://badgen.net/badge/conventional%20commits/v1.0.0/green?cache=300\n\n[contributing-url]: https://github.com/node-formidable/.github/blob/master/CONTRIBUTING.md\n[code_of_conduct-url]: https://github.com/node-formidable/.github/blob/master/CODE_OF_CONDUCT.md\n\n[open-issue-url]: https://github.com/node-formidable/formidable/issues/new\n\n[tidelift-url]: https://tidelift.com/subscription/pkg/npm-formidable?utm_source=npm-formidable&utm_medium=referral&utm_campaign=enterprise\n[tidelift-img]: https://badgen.net/badge/tidelift/subscription/4B5168?labelColor=F6914D\n\n[kofi-url]: https://ko-fi.com/tunnckoCore/commissions\n[kofi-img]: https://badgen.net/badge/ko-fi/support/29abe0c2?cache=300&icon=https://rawcdn.githack.com/tunnckoCore/badgen-icons/f8264c6414e0bec449dd86f2241d50a9b89a1203/icons/kofi.svg\n\n[linux-build-img]: https://badgen.net/github/checks/node-formidable/formidable/master?cache=30&label=linux%20build&icon=github\n[macos-build-img]: https://badgen.net/github/checks/node-formidable/formidable/master?cache=30&label=macos%20build&icon=github\n[build-url]: https://github.com/node-formidable/formidable/actions\n<!-- prettier-ignore-end -->\n"
        }
    ]
}