{
    "sourceFile": "node_modules/formidable/src/Formidable.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892298430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "/* eslint-disable class-methods-use-this */\n/* eslint-disable no-underscore-dangle */\n\nimport { init as cuid2init } from '@paralleldrive/cuid2';\nimport dezalgo from 'dezalgo';\nimport { EventEmitter } from 'node:events';\nimport fsPromises from 'node:fs/promises';\nimport os from 'node:os';\nimport path from 'node:path';\nimport { StringDecoder } from 'node:string_decoder';\nimport once from 'once';\nimport FormidableError, * as errors from './FormidableError.js';\nimport PersistentFile from './PersistentFile.js';\nimport VolatileFile from './VolatileFile.js';\nimport DummyParser from './parsers/Dummy.js';\nimport MultipartParser from './parsers/Multipart.js';\nimport { json, multipart, octetstream, querystring } from './plugins/index.js';\n\nconst CUID2_FINGERPRINT = `${process.env.NODE_ENV}-${os.platform()}-${os.hostname()}`\nconst createId = cuid2init({ length: 25, fingerprint: CUID2_FINGERPRINT.toLowerCase() });\n\nconst DEFAULT_OPTIONS = {\n  maxFields: 1000,\n  maxFieldsSize: 20 * 1024 * 1024,\n  maxFiles: Infinity,\n  maxFileSize: 200 * 1024 * 1024,\n  maxTotalFileSize: undefined,\n  minFileSize: 1,\n  allowEmptyFiles: false,\n  createDirsFromUploads: false,\n  keepExtensions: false,\n  encoding: 'utf-8',\n  hashAlgorithm: false,\n  uploadDir: os.tmpdir(),\n  enabledPlugins: [octetstream, querystring, multipart, json],\n  fileWriteStreamHandler: null,\n  defaultInvalidName: 'invalid-name',\n  filter(_part) {\n    return true;\n  },\n  filename: undefined,\n};\n\nfunction hasOwnProp(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\n\nconst decorateForceSequential = function (promiseCreator) {\n  /* forces a function that returns a promise to be sequential\n  useful for fs  for example */\n  let lastPromise = Promise.resolve();\n  return async function (...x) {\n      const promiseWeAreWaitingFor = lastPromise;\n      let currentPromise;\n      let callback;\n      // we need to change lastPromise before await anything,\n      // otherwise 2 calls might wait the same thing\n      lastPromise = new Promise(function (resolve) {\n          callback = resolve;\n      });\n      await promiseWeAreWaitingFor;\n      currentPromise = promiseCreator(...x);\n      currentPromise.then(callback).catch(callback);\n      return currentPromise;\n  };\n};\n\nconst createNecessaryDirectoriesAsync = decorateForceSequential(function (filePath) {\n  const directoryname = path.dirname(filePath);\n  return fsPromises.mkdir(directoryname, { recursive: true });\n});\n\nconst invalidExtensionChar = (c) => {\n  const code = c.charCodeAt(0);\n  return !(\n    code === 46 || // .\n    (code >= 48 && code <= 57) ||\n    (code >= 65 && code <= 90) ||\n    (code >= 97 && code <= 122)\n  );\n};\n\nclass IncomingForm extends EventEmitter {\n  constructor(options = {}) {\n    super();\n\n    this.options = { ...DEFAULT_OPTIONS, ...options };\n    if (!this.options.maxTotalFileSize) {\n      this.options.maxTotalFileSize = this.options.maxFileSize\n    }\n\n    const dir = path.resolve(\n      this.options.uploadDir || this.options.uploaddir || os.tmpdir(),\n    );\n\n    this.uploaddir = dir;\n    this.uploadDir = dir;\n\n    // initialize with null\n    [\n      'error',\n      'headers',\n      'type',\n      'bytesExpected',\n      'bytesReceived',\n      '_parser',\n      'req',\n    ].forEach((key) => {\n      this[key] = null;\n    });\n\n    this._setUpRename();\n\n    this._flushing = 0;\n    this._fieldsSize = 0;\n    this._totalFileSize = 0;\n    this._plugins = [];\n    this.openedFiles = [];\n\n    this.options.enabledPlugins = []\n      .concat(this.options.enabledPlugins)\n      .filter(Boolean);\n\n    if (this.options.enabledPlugins.length === 0) {\n      throw new FormidableError(\n        'expect at least 1 enabled builtin plugin, see options.enabledPlugins',\n        errors.missingPlugin,\n      );\n    }\n\n    this.options.enabledPlugins.forEach((plugin) => {\n      this.use(plugin);\n    });\n\n    this._setUpMaxFields();\n    this._setUpMaxFiles();\n    this.ended = undefined;\n    this.type = undefined;\n  }\n\n  use(plugin) {\n    if (typeof plugin !== 'function') {\n      throw new FormidableError(\n        '.use: expect `plugin` to be a function',\n        errors.pluginFunction,\n      );\n    }\n    this._plugins.push(plugin.bind(this));\n    return this;\n  }\n\n  pause () {\n    try {\n      this.req.pause();\n    } catch (err) {\n      // the stream was destroyed\n      if (!this.ended) {\n        // before it was completed, crash & burn\n        this._error(err);\n      }\n      return false;\n    }\n    return true;\n  }\n\n  resume () {\n    try {\n      this.req.resume();\n    } catch (err) {\n      // the stream was destroyed\n      if (!this.ended) {\n        // before it was completed, crash & burn\n        this._error(err);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  // returns a promise if no callback is provided\n  async parse(req, cb) {\n    this.req = req;\n    let promise;\n\n    // Setup callback first, so we don't miss anything from data events emitted immediately.\n    if (!cb) {\n      let resolveRef;\n      let rejectRef;\n      promise = new Promise((resolve, reject) => {\n        resolveRef = resolve;\n        rejectRef = reject;\n      });\n      cb = (err, fields, files) => {\n        if (err) {\n          rejectRef(err);\n        } else {\n          resolveRef([fields, files]);\n        }\n      }\n    }\n    const callback = once(dezalgo(cb));\n    this.fields = {};\n    const files = {};\n\n    this.on('field', (name, value) => {\n      if (this.type === 'multipart' || this.type === 'urlencoded') {\n        if (!hasOwnProp(this.fields, name)) {\n          this.fields[name] = [value];\n        } else {\n          this.fields[name].push(value);\n        }\n      } else {\n        this.fields[name] = value;\n      }\n    });\n    this.on('file', (name, file) => {\n      if (!hasOwnProp(files, name)) {\n        files[name] = [file];\n      } else {\n        files[name].push(file);\n      }\n    });\n    this.on('error', (err) => {\n      callback(err, this.fields, files);\n    });\n    this.on('end', () => {\n      callback(null, this.fields, files);\n    });\n\n    // Parse headers and setup the parser, ready to start listening for data.\n    await this.writeHeaders(req.headers);\n\n    // Start listening for data.\n    req\n      .on('error', (err) => {\n        this._error(err);\n      })\n      .on('aborted', () => {\n        this.emit('aborted');\n        this._error(new FormidableError('Request aborted', errors.aborted));\n      })\n      .on('data', (buffer) => {\n        try {\n          this.write(buffer);\n        } catch (err) {\n          this._error(err);\n        }\n      })\n      .on('end', () => {\n        if (this.error) {\n          return;\n        }\n        if (this._parser) {\n          this._parser.end();\n        }\n      });\n    if (promise) {\n      return promise;\n    }\n    return this;\n  }\n\n  async writeHeaders(headers) {\n    this.headers = headers;\n    this._parseContentLength();\n    await this._parseContentType();\n\n    if (!this._parser) {\n      this._error(\n        new FormidableError(\n          'no parser found',\n          errors.noParser,\n          415, // Unsupported Media Type\n        ),\n      );\n      return;\n    }\n\n    this._parser.once('error', (error) => {\n      this._error(error);\n    });\n  }\n\n  write(buffer) {\n    if (this.error) {\n      return null;\n    }\n    if (!this._parser) {\n      this._error(\n        new FormidableError('uninitialized parser', errors.uninitializedParser),\n      );\n      return null;\n    }\n\n    this.bytesReceived += buffer.length;\n    this.emit('progress', this.bytesReceived, this.bytesExpected);\n\n    this._parser.write(buffer);\n\n    return this.bytesReceived;\n  }\n\n  onPart(part) {\n    // this method can be overwritten by the user\n    return this._handlePart(part);\n  }\n\n  async _handlePart(part) {\n    if (part.originalFilename && typeof part.originalFilename !== 'string') {\n      this._error(\n        new FormidableError(\n          `the part.originalFilename should be string when it exists`,\n          errors.filenameNotString,\n        ),\n      );\n      return;\n    }\n\n    // This MUST check exactly for undefined. You can not change it to !part.originalFilename.\n\n    // todo: uncomment when switch tests to Jest\n    // console.log(part);\n\n    // ? NOTE(@tunnckocore): no it can be any falsey value, it most probably depends on what's returned\n    // from somewhere else. Where recently I changed the return statements\n    // and such thing because code style\n    // ? NOTE(@tunnckocore): or even better, if there is no mimetype, then it's for sure a field\n    // ? NOTE(@tunnckocore): originalFilename is an empty string when a field?\n    if (!part.mimetype) {\n      let value = '';\n      const decoder = new StringDecoder(\n        part.transferEncoding || this.options.encoding,\n      );\n\n      part.on('data', (buffer) => {\n        this._fieldsSize += buffer.length;\n        if (this._fieldsSize > this.options.maxFieldsSize) {\n          this._error(\n            new FormidableError(\n              `options.maxFieldsSize (${this.options.maxFieldsSize} bytes) exceeded, received ${this._fieldsSize} bytes of field data`,\n              errors.maxFieldsSizeExceeded,\n              413, // Payload Too Large\n            ),\n          );\n          return;\n        }\n        value += decoder.write(buffer);\n      });\n\n      part.on('end', () => {\n        this.emit('field', part.name, value);\n      });\n      return;\n    }\n\n    if (!this.options.filter(part)) {\n      return;\n    }\n\n    this._flushing += 1;\n\n    let fileSize = 0;\n    const newFilename = this._getNewName(part);\n    const filepath = this._joinDirectoryName(newFilename);\n    const file = await this._newFile({\n      newFilename,\n      filepath,\n      originalFilename: part.originalFilename,\n      mimetype: part.mimetype,\n    });\n    file.on('error', (err) => {\n      this._error(err);\n    });\n    this.emit('fileBegin', part.name, file);\n\n    file.open();\n    this.openedFiles.push(file);\n\n    part.on('data', (buffer) => {\n      this._totalFileSize += buffer.length;\n      fileSize += buffer.length;\n\n      if (this._totalFileSize > this.options.maxTotalFileSize) {\n        this._error(\n          new FormidableError(\n            `options.maxTotalFileSize (${this.options.maxTotalFileSize} bytes) exceeded, received ${this._totalFileSize} bytes of file data`,\n            errors.biggerThanTotalMaxFileSize,\n            413,\n          ),\n        );\n        return;\n      }\n      if (buffer.length === 0) {\n        return;\n      }\n      this.pause();\n      file.write(buffer, () => {\n        this.resume();\n      });\n    });\n\n    part.on('end', () => {\n      if (!this.options.allowEmptyFiles && fileSize === 0) {\n        this._error(\n          new FormidableError(\n            `options.allowEmptyFiles is false, file size should be greater than 0`,\n            errors.noEmptyFiles,\n            400,\n          ),\n        );\n        return;\n      }\n      if (fileSize < this.options.minFileSize) {\n        this._error(\n          new FormidableError(\n            `options.minFileSize (${this.options.minFileSize} bytes) inferior, received ${fileSize} bytes of file data`,\n            errors.smallerThanMinFileSize,\n            400,\n          ),\n        );\n        return;\n      }\n      if (fileSize > this.options.maxFileSize) {\n        this._error(\n          new FormidableError(\n            `options.maxFileSize (${this.options.maxFileSize} bytes), received ${fileSize} bytes of file data`,\n            errors.biggerThanMaxFileSize,\n            413,\n          ),\n        );\n        return;\n      }\n\n      file.end(() => {\n        this._flushing -= 1;\n        this.emit('file', part.name, file);\n        this._maybeEnd();\n      });\n    });\n  }\n\n  // eslint-disable-next-line max-statements\n  async _parseContentType() {\n    if (this.bytesExpected === 0) {\n      this._parser = new DummyParser(this, this.options);\n      return;\n    }\n\n    if (!this.headers['content-type']) {\n      this._error(\n        new FormidableError(\n          'bad content-type header, no content-type',\n          errors.missingContentType,\n          400,\n        ),\n      );\n      return;\n    }\n\n\n    new DummyParser(this, this.options);\n\n    const results = [];\n    await Promise.all(this._plugins.map(async (plugin, idx) => {\n      let pluginReturn = null;\n      try {\n        pluginReturn = await plugin(this, this.options) || this;\n      } catch (err) {\n        // directly throw from the `form.parse` method;\n        // there is no other better way, except a handle through options\n        const error = new FormidableError(\n          `plugin on index ${idx} failed with: ${err.message}`,\n          errors.pluginFailed,\n          500,\n        );\n        error.idx = idx;\n        throw error;\n      }\n      Object.assign(this, pluginReturn);\n\n      // todo: use Set/Map and pass plugin name instead of the `idx` index\n      this.emit('plugin', idx, pluginReturn);\n    }));\n    this.emit('pluginsResults', results);\n  }\n\n  _error(err, eventName = 'error') {\n    if (this.error || this.ended) {\n      return;\n    }\n\n    this.req = null;\n    this.error = err;\n    this.emit(eventName, err);\n\n    this.openedFiles.forEach((file) => {\n      file.destroy();\n    });\n  }\n\n  _parseContentLength() {\n    this.bytesReceived = 0;\n    if (this.headers['content-length']) {\n      this.bytesExpected = parseInt(this.headers['content-length'], 10);\n    } else if (this.headers['transfer-encoding'] === undefined) {\n      this.bytesExpected = 0;\n    }\n\n    if (this.bytesExpected !== null) {\n      this.emit('progress', this.bytesReceived, this.bytesExpected);\n    }\n  }\n\n  _newParser() {\n    return new MultipartParser(this.options);\n  }\n\n  async _newFile({ filepath, originalFilename, mimetype, newFilename }) {\n    if (this.options.fileWriteStreamHandler) {\n      return new VolatileFile({\n        newFilename,\n        filepath,\n        originalFilename,\n        mimetype,\n        createFileWriteStream: this.options.fileWriteStreamHandler,\n        hashAlgorithm: this.options.hashAlgorithm,\n      });\n    }\n    if (this.options.createDirsFromUploads) {\n      try {\n        await createNecessaryDirectoriesAsync(filepath);\n      } catch (errorCreatingDir) {\n        this._error(new FormidableError(\n          `cannot create directory`,\n          errors.cannotCreateDir,\n          409,\n        ));\n      }\n    }\n    return new PersistentFile({\n      newFilename,\n      filepath,\n      originalFilename,\n      mimetype,\n      hashAlgorithm: this.options.hashAlgorithm,\n    });\n  }\n\n  _getFileName(headerValue) {\n    // matches either a quoted-string or a token (RFC 2616 section 19.5.1)\n    const m = headerValue.match(\n      /\\bfilename=(\"(.*?)\"|([^()<>{}[\\]@,;:\"?=\\s/\\t]+))($|;\\s)/i,\n    );\n    if (!m) return null;\n\n    const match = m[2] || m[3] || '';\n    let originalFilename = match.substr(match.lastIndexOf('\\\\') + 1);\n    originalFilename = originalFilename.replace(/%22/g, '\"');\n    originalFilename = originalFilename.replace(/&#([\\d]{4});/g, (_, code) =>\n      String.fromCharCode(code),\n    );\n\n    return originalFilename;\n  }\n\n  // able to get composed extension with multiple dots\n  // \"a.b.c\" -> \".b.c\"\n  // as opposed to path.extname -> \".c\"\n  _getExtension(str) {\n    if (!str) {\n      return '';\n    }\n\n    const basename = path.basename(str);\n    const firstDot = basename.indexOf('.');\n    const lastDot = basename.lastIndexOf('.');\n    let rawExtname = path.extname(basename);\n\n    if (firstDot !== lastDot) {\n      rawExtname =  basename.slice(firstDot);\n    }\n\n    let filtered;\n    const firstInvalidIndex = Array.from(rawExtname).findIndex(invalidExtensionChar);\n    if (firstInvalidIndex === -1) {\n      filtered = rawExtname;\n    } else {\n      filtered = rawExtname.substring(0, firstInvalidIndex);\n    }\n    if (filtered === '.') {\n      return '';\n    }\n    return filtered;\n  }\n\n  _joinDirectoryName(name) {\n    const newPath = path.join(this.uploadDir, name);\n\n    // prevent directory traversal attacks\n    if (!newPath.startsWith(this.uploadDir)) {\n      return path.join(this.uploadDir, this.options.defaultInvalidName);\n    }\n\n    return newPath;\n  }\n\n  _setUpRename() {\n    const hasRename = typeof this.options.filename === 'function';\n    if (hasRename) {\n      this._getNewName = (part) => {\n        let ext = '';\n        let name = this.options.defaultInvalidName;\n        if (part.originalFilename) {\n          // can be null\n          ({ ext, name } = path.parse(part.originalFilename));\n          if (this.options.keepExtensions !== true) {\n            ext = '';\n          }\n        }\n        return this.options.filename.call(this, name, ext, part, this);\n      };\n    } else {\n      this._getNewName = (part) => {\n        const name = createId();\n\n        if (part && this.options.keepExtensions) {\n          const originalFilename =\n            typeof part === 'string' ? part : part.originalFilename;\n          return `${name}${this._getExtension(originalFilename)}`;\n        }\n\n        return name;\n      };\n    }\n  }\n\n  _setUpMaxFields() {\n    if (this.options.maxFields !== Infinity) {\n      let fieldsCount = 0;\n      this.on('field', () => {\n        fieldsCount += 1;\n        if (fieldsCount > this.options.maxFields) {\n          this._error(\n            new FormidableError(\n              `options.maxFields (${this.options.maxFields}) exceeded`,\n              errors.maxFieldsExceeded,\n              413,\n            ),\n          );\n        }\n      });\n    }\n  }\n\n  _setUpMaxFiles() {\n    if (this.options.maxFiles !== Infinity) {\n      let fileCount = 0;\n      this.on('fileBegin', () => {\n        fileCount += 1;\n        if (fileCount > this.options.maxFiles) {\n          this._error(\n            new FormidableError(\n              `options.maxFiles (${this.options.maxFiles}) exceeded`,\n              errors.maxFilesExceeded,\n              413,\n            ),\n          );\n        }\n      });\n    }\n  }\n\n  _maybeEnd() {\n    if (!this.ended || this._flushing || this.error) {\n      return;\n    }\n    this.req = null;\n    this.emit('end');\n  }\n}\n\nexport default IncomingForm;\nexport { DEFAULT_OPTIONS };\n"
        }
    ]
}