{
    "sourceFile": "node_modules/internal-slot/test/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892326243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar test = require('tape');\nvar inspect = require('object-inspect');\nvar forEach = require('for-each');\n\nvar SLOT = require('../');\n\ntest('assert', function (t) {\n\tforEach([null, undefined, true, false, 'foo', '', 42, 0], function (primitive) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.assert(primitive, ''); },\n\t\t\tTypeError,\n\t\t\tinspect(primitive) + ' is not an Object'\n\t\t);\n\t});\n\n\tforEach([null, undefined, true, false, 42, 0, {}, [], function () {}, /a/g], function (nonString) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.assert({}, nonString); },\n\t\t\tTypeError,\n\t\t\tinspect(nonString) + ' is not a String'\n\t\t);\n\t});\n\n\tt['throws'](\n\t\tfunction () { SLOT.assert({}, '[[whatever]]'); },\n\t\tTypeError,\n\t\t'nonexistent slot throws'\n\t);\n\n\tvar o = {};\n\tSLOT.set(o, 'x');\n\tt.doesNotThrow(function () { SLOT.assert(o, 'x'); }, 'existent slot noops');\n\tt['throws'](function () { SLOT.assert(o, 'y'); }, 'thing with a slot throws on a nonexistent slot');\n\n\tt.end();\n});\n\ntest('has', function (t) {\n\tforEach([null, undefined, true, false, 'foo', '', 42, 0], function (primitive) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.has(primitive, ''); },\n\t\t\tTypeError,\n\t\t\tinspect(primitive) + ' is not an Object'\n\t\t);\n\t});\n\n\tforEach([null, undefined, true, false, 42, 0, {}, [], function () {}, /a/g], function (nonString) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.has({}, nonString); },\n\t\t\tTypeError,\n\t\t\tinspect(nonString) + ' is not a String'\n\t\t);\n\t});\n\n\tvar o = {};\n\n\tt.equal(SLOT.has(o, '[[nonexistent]]'), false, 'nonexistent slot yields false');\n\n\tSLOT.set(o, 'foo');\n\tt.equal(SLOT.has(o, 'foo'), true, 'existent slot yields true');\n\n\tt.end();\n});\n\ntest('get', function (t) {\n\tforEach([null, undefined, true, false, 'foo', '', 42, 0], function (primitive) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.get(primitive, ''); },\n\t\t\tTypeError,\n\t\t\tinspect(primitive) + ' is not an Object'\n\t\t);\n\t});\n\n\tforEach([null, undefined, true, false, 42, 0, {}, [], function () {}, /a/g], function (nonString) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.get({}, nonString); },\n\t\t\tTypeError,\n\t\t\tinspect(nonString) + ' is not a String'\n\t\t);\n\t});\n\n\tvar o = {};\n\tt.equal(SLOT.get(o, 'nonexistent'), undefined, 'nonexistent slot is undefined');\n\n\tvar v = {};\n\tSLOT.set(o, 'f', v);\n\tt.equal(SLOT.get(o, 'f'), v, '\"get\" retrieves value set by \"set\"');\n\n\tt.end();\n});\n\ntest('set', function (t) {\n\tforEach([null, undefined, true, false, 'foo', '', 42, 0], function (primitive) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.set(primitive, ''); },\n\t\t\tTypeError,\n\t\t\tinspect(primitive) + ' is not an Object'\n\t\t);\n\t});\n\n\tforEach([null, undefined, true, false, 42, 0, {}, [], function () {}, /a/g], function (nonString) {\n\t\tt['throws'](\n\t\t\t// @ts-expect-error\n\t\t\tfunction () { SLOT.set({}, nonString); },\n\t\t\tTypeError,\n\t\t\tinspect(nonString) + ' is not a String'\n\t\t);\n\t});\n\n\tvar o = function () {};\n\tt.equal(SLOT.get(o, 'f'), undefined, 'slot not set');\n\n\tSLOT.set(o, 'f', 42);\n\tt.equal(SLOT.get(o, 'f'), 42, 'slot was set');\n\n\tSLOT.set(o, 'f', Infinity);\n\tt.equal(SLOT.get(o, 'f'), Infinity, 'slot was set again');\n\n\tt.end();\n});\n"
        }
    ]
}