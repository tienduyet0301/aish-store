{
    "sourceFile": "node_modules/object-inspect/test/number.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892942403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var test = require('tape');\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\n\nvar inspect = require('../');\n\ntest('negative zero', function (t) {\n    t.equal(inspect(0), '0', 'inspect(0) === \"0\"');\n    t.equal(inspect(Object(0)), 'Object(0)', 'inspect(Object(0)) === \"Object(0)\"');\n\n    t.equal(inspect(-0), '-0', 'inspect(-0) === \"-0\"');\n    t.equal(inspect(Object(-0)), 'Object(-0)', 'inspect(Object(-0)) === \"Object(-0)\"');\n\n    t.end();\n});\n\ntest('numericSeparator', function (t) {\n    forEach(v.nonBooleans, function (nonBoolean) {\n        t['throws'](\n            function () { inspect(true, { numericSeparator: nonBoolean }); },\n            TypeError,\n            inspect(nonBoolean) + ' is not a boolean'\n        );\n    });\n\n    t.test('3 digit numbers', function (st) {\n        var failed = false;\n        for (var i = -999; i < 1000; i += 1) {\n            var actual = inspect(i);\n            var actualSepNo = inspect(i, { numericSeparator: false });\n            var actualSepYes = inspect(i, { numericSeparator: true });\n            var expected = String(i);\n            if (actual !== expected || actualSepNo !== expected || actualSepYes !== expected) {\n                failed = true;\n                t.equal(actual, expected);\n                t.equal(actualSepNo, expected);\n                t.equal(actualSepYes, expected);\n            }\n        }\n\n        st.notOk(failed, 'all 3 digit numbers passed');\n\n        st.end();\n    });\n\n    t.equal(inspect(1e3), '1000', '1000');\n    t.equal(inspect(1e3, { numericSeparator: false }), '1000', '1000, numericSeparator false');\n    t.equal(inspect(1e3, { numericSeparator: true }), '1_000', '1000, numericSeparator true');\n    t.equal(inspect(-1e3), '-1000', '-1000');\n    t.equal(inspect(-1e3, { numericSeparator: false }), '-1000', '-1000, numericSeparator false');\n    t.equal(inspect(-1e3, { numericSeparator: true }), '-1_000', '-1000, numericSeparator true');\n\n    t.equal(inspect(1234.5678, { numericSeparator: true }), '1_234.567_8', 'fractional numbers get separators');\n    t.equal(inspect(1234.56789, { numericSeparator: true }), '1_234.567_89', 'fractional numbers get separators');\n    t.equal(inspect(1234.567891, { numericSeparator: true }), '1_234.567_891', 'fractional numbers get separators');\n\n    t.end();\n});\n"
        }
    ]
}