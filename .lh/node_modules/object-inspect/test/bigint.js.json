{
    "sourceFile": "node_modules/object-inspect/test/bigint.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892941241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use strict';\n\nvar inspect = require('../');\nvar test = require('tape');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\ntest('bigint', { skip: typeof BigInt === 'undefined' }, function (t) {\n    t.test('primitives', function (st) {\n        st.plan(3);\n\n        st.equal(inspect(BigInt(-256)), '-256n');\n        st.equal(inspect(BigInt(0)), '0n');\n        st.equal(inspect(BigInt(256)), '256n');\n    });\n\n    t.test('objects', function (st) {\n        st.plan(3);\n\n        st.equal(inspect(Object(BigInt(-256))), 'Object(-256n)');\n        st.equal(inspect(Object(BigInt(0))), 'Object(0n)');\n        st.equal(inspect(Object(BigInt(256))), 'Object(256n)');\n    });\n\n    t.test('syntactic primitives', function (st) {\n        st.plan(3);\n\n        /* eslint-disable no-new-func */\n        st.equal(inspect(Function('return -256n')()), '-256n');\n        st.equal(inspect(Function('return 0n')()), '0n');\n        st.equal(inspect(Function('return 256n')()), '256n');\n    });\n\n    t.test('toStringTag', { skip: !hasToStringTag }, function (st) {\n        st.plan(1);\n\n        var faker = {};\n        faker[Symbol.toStringTag] = 'BigInt';\n        st.equal(\n            inspect(faker),\n            '{ [Symbol(Symbol.toStringTag)]: \\'BigInt\\' }',\n            'object lying about being a BigInt inspects as an object'\n        );\n    });\n\n    t.test('numericSeparator', function (st) {\n        st.equal(inspect(BigInt(0), { numericSeparator: false }), '0n', '0n, numericSeparator false');\n        st.equal(inspect(BigInt(0), { numericSeparator: true }), '0n', '0n, numericSeparator true');\n\n        st.equal(inspect(BigInt(1234), { numericSeparator: false }), '1234n', '1234n, numericSeparator false');\n        st.equal(inspect(BigInt(1234), { numericSeparator: true }), '1_234n', '1234n, numericSeparator true');\n        st.equal(inspect(BigInt(-1234), { numericSeparator: false }), '-1234n', '1234n, numericSeparator false');\n        st.equal(inspect(BigInt(-1234), { numericSeparator: true }), '-1_234n', '1234n, numericSeparator true');\n\n        st.end();\n    });\n\n    t.end();\n});\n"
        }
    ]
}