{
    "sourceFile": "node_modules/object-inspect/test/fn.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746892941909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var inspect = require('../');\nvar test = require('tape');\nvar arrow = require('make-arrow-function')();\nvar functionsHaveConfigurableNames = require('functions-have-names').functionsHaveConfigurableNames();\n\ntest('function', function (t) {\n    t.plan(1);\n    var obj = [1, 2, function f(n) { return n; }, 4];\n    t.equal(inspect(obj), '[ 1, 2, [Function: f], 4 ]');\n});\n\ntest('function name', function (t) {\n    t.plan(1);\n    var f = (function () {\n        return function () {};\n    }());\n    f.toString = function toStr() { return 'function xxx () {}'; };\n    var obj = [1, 2, f, 4];\n    t.equal(inspect(obj), '[ 1, 2, [Function (anonymous)] { toString: [Function: toStr] }, 4 ]');\n});\n\ntest('anon function', function (t) {\n    var f = (function () {\n        return function () {};\n    }());\n    var obj = [1, 2, f, 4];\n    t.equal(inspect(obj), '[ 1, 2, [Function (anonymous)], 4 ]');\n\n    t.end();\n});\n\ntest('arrow function', { skip: !arrow }, function (t) {\n    t.equal(inspect(arrow), '[Function (anonymous)]');\n\n    t.end();\n});\n\ntest('truly nameless function', { skip: !arrow || !functionsHaveConfigurableNames }, function (t) {\n    function f() {}\n    Object.defineProperty(f, 'name', { value: false });\n    t.equal(f.name, false);\n    t.equal(\n        inspect(f),\n        '[Function: f]',\n        'named function with falsy `.name` does not hide its original name'\n    );\n\n    function g() {}\n    Object.defineProperty(g, 'name', { value: true });\n    t.equal(g.name, true);\n    t.equal(\n        inspect(g),\n        '[Function: true]',\n        'named function with truthy `.name` hides its original name'\n    );\n\n    var anon = function () {}; // eslint-disable-line func-style\n    Object.defineProperty(anon, 'name', { value: null });\n    t.equal(anon.name, null);\n    t.equal(\n        inspect(anon),\n        '[Function (anonymous)]',\n        'anon function with falsy `.name` does not hide its anonymity'\n    );\n\n    var anon2 = function () {}; // eslint-disable-line func-style\n    Object.defineProperty(anon2, 'name', { value: 1 });\n    t.equal(anon2.name, 1);\n    t.equal(\n        inspect(anon2),\n        '[Function: 1]',\n        'anon function with truthy `.name` hides its anonymity'\n    );\n\n    t.end();\n});\n"
        }
    ]
}