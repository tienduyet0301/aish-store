{
    "sourceFile": "node_modules/resolve/test/core.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893010424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "var test = require('tape');\nvar keys = require('object-keys');\nvar semver = require('semver');\n\nvar resolve = require('../');\n\nvar brokenNode = semver.satisfies(process.version, '11.11 - 11.13');\n\ntest('core modules', function (t) {\n    t.test('isCore()', function (st) {\n        st.ok(resolve.isCore('fs'));\n        st.ok(resolve.isCore('net'));\n        st.ok(resolve.isCore('http'));\n\n        st.ok(!resolve.isCore('seq'));\n        st.ok(!resolve.isCore('../'));\n\n        st.ok(!resolve.isCore('toString'));\n\n        st.end();\n    });\n\n    t.test('core list', function (st) {\n        var cores = keys(resolve.core);\n        st.plan(cores.length);\n\n        for (var i = 0; i < cores.length; ++i) {\n            var mod = cores[i];\n            // note: this must be require, not require.resolve, due to https://github.com/nodejs/node/issues/43274\n            var requireFunc = function () { require(mod); }; // eslint-disable-line no-loop-func\n            t.comment(mod + ': ' + resolve.core[mod]);\n            if (resolve.core[mod]) {\n                st.doesNotThrow(requireFunc, mod + ' supported; requiring does not throw');\n            } else if (brokenNode) {\n                st.ok(true, 'this version of node is broken: attempting to require things that fail to resolve breaks \"home_paths\" tests');\n            } else {\n                st.throws(requireFunc, mod + ' not supported; requiring throws');\n            }\n        }\n\n        st.end();\n    });\n\n    t.test('core via repl module', { skip: !resolve.core.repl }, function (st) {\n        var libs = require('repl')._builtinLibs; // eslint-disable-line no-underscore-dangle\n        if (!libs) {\n            st.skip('module.builtinModules does not exist');\n            return st.end();\n        }\n        for (var i = 0; i < libs.length; ++i) {\n            var mod = libs[i];\n            st.ok(resolve.core[mod], mod + ' is a core module');\n            st.doesNotThrow(\n                function () { require(mod); }, // eslint-disable-line no-loop-func\n                'requiring ' + mod + ' does not throw'\n            );\n        }\n        st.end();\n    });\n\n    t.test('core via builtinModules list', { skip: !resolve.core.module }, function (st) {\n        var libs = require('module').builtinModules;\n        if (!libs) {\n            st.skip('module.builtinModules does not exist');\n            return st.end();\n        }\n        var blacklist = [\n            '_debug_agent',\n            'v8/tools/tickprocessor-driver',\n            'v8/tools/SourceMap',\n            'v8/tools/tickprocessor',\n            'v8/tools/profile'\n        ];\n        for (var i = 0; i < libs.length; ++i) {\n            var mod = libs[i];\n            if (blacklist.indexOf(mod) === -1) {\n                st.ok(resolve.core[mod], mod + ' is a core module');\n                st.doesNotThrow(\n                    function () { require(mod); }, // eslint-disable-line no-loop-func\n                    'requiring ' + mod + ' does not throw'\n                );\n            }\n        }\n        st.end();\n    });\n\n    t.end();\n});\n"
        }
    ]
}