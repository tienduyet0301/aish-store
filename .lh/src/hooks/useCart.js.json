{
    "sourceFile": "src/hooks/useCart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746891921673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746892008854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,26 +5,28 @@\n   const [isLoading, setIsLoading] = useState(true);\r\n \r\n   // Load cart from localStorage when component mounts\r\n   useEffect(() => {\r\n-    const savedCart = localStorage.getItem('cart');\r\n-    console.log('Loading cart from localStorage:', savedCart);\r\n-    if (savedCart) {\r\n-      try {\r\n-        const parsedCart = JSON.parse(savedCart);\r\n-        console.log('Parsed cart:', parsedCart);\r\n-        setCart(parsedCart);\r\n-      } catch (error) {\r\n-        console.error('Error parsing cart:', error);\r\n-        setCart([]);\r\n+    if (typeof window !== 'undefined') {\r\n+      const savedCart = localStorage.getItem('cart');\r\n+      console.log('Loading cart from localStorage:', savedCart);\r\n+      if (savedCart) {\r\n+        try {\r\n+          const parsedCart = JSON.parse(savedCart);\r\n+          console.log('Parsed cart:', parsedCart);\r\n+          setCart(parsedCart);\r\n+        } catch (error) {\r\n+          console.error('Error parsing cart:', error);\r\n+          setCart([]);\r\n+        }\r\n       }\r\n+      setIsLoading(false);\r\n     }\r\n-    setIsLoading(false);\r\n   }, []);\r\n \r\n   // Save cart to localStorage whenever it changes\r\n   useEffect(() => {\r\n-    if (!isLoading) {\r\n+    if (!isLoading && typeof window !== 'undefined') {\r\n       console.log('Saving cart to localStorage:', cart);\r\n       localStorage.setItem('cart', JSON.stringify(cart));\r\n     }\r\n   }, [cart, isLoading]);\r\n@@ -68,9 +70,11 @@\n \r\n   const clearCart = () => {\r\n     console.log('Clearing cart');\r\n     setCart([]);\r\n-    localStorage.removeItem('cart');\r\n+    if (typeof window !== 'undefined') {\r\n+      localStorage.removeItem('cart');\r\n+    }\r\n   };\r\n \r\n   const getCartTotal = () => {\r\n     return cart.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n"
                },
                {
                    "date": 1746892039729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +1,1 @@\n-import { useState, useEffect } from 'react';\r\n-\r\n-export const useCart = () => {\r\n-  const [cart, setCart] = useState([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-\r\n-  // Load cart from localStorage when component mounts\r\n-  useEffect(() => {\r\n-    if (typeof window !== 'undefined') {\r\n-      const savedCart = localStorage.getItem('cart');\r\n-      console.log('Loading cart from localStorage:', savedCart);\r\n-      if (savedCart) {\r\n-        try {\r\n-          const parsedCart = JSON.parse(savedCart);\r\n-          console.log('Parsed cart:', parsedCart);\r\n-          setCart(parsedCart);\r\n-        } catch (error) {\r\n-          console.error('Error parsing cart:', error);\r\n-          setCart([]);\r\n-        }\r\n-      }\r\n-      setIsLoading(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Save cart to localStorage whenever it changes\r\n-  useEffect(() => {\r\n-    if (!isLoading && typeof window !== 'undefined') {\r\n-      console.log('Saving cart to localStorage:', cart);\r\n-      localStorage.setItem('cart', JSON.stringify(cart));\r\n-    }\r\n-  }, [cart, isLoading]);\r\n-\r\n-  const addToCart = (product) => {\r\n-    console.log('Adding to cart:', product);\r\n-    setCart(prevCart => {\r\n-      const existingItem = prevCart.find(item => item.id === product.id);\r\n-      \r\n-      if (existingItem) {\r\n-        // If item exists, increase quantity\r\n-        return prevCart.map(item =>\r\n-          item.id === product.id\r\n-            ? { ...item, quantity: item.quantity + 1 }\r\n-            : item\r\n-        );\r\n-      } else {\r\n-        // If item doesn't exist, add new item\r\n-        return [...prevCart, { ...product, quantity: 1 }];\r\n-      }\r\n-    });\r\n-  };\r\n-\r\n-  const removeFromCart = (productId) => {\r\n-    console.log('Removing from cart:', productId);\r\n-    setCart(prevCart => prevCart.filter(item => item.id !== productId));\r\n-  };\r\n-\r\n-  const updateQuantity = (productId, quantity) => {\r\n-    console.log('Updating quantity:', productId, quantity);\r\n-    if (quantity < 1) return;\r\n-    \r\n-    setCart(prevCart =>\r\n-      prevCart.map(item =>\r\n-        item.id === productId\r\n-          ? { ...item, quantity }\r\n-          : item\r\n-      )\r\n-    );\r\n-  };\r\n-\r\n-  const clearCart = () => {\r\n-    console.log('Clearing cart');\r\n-    setCart([]);\r\n-    if (typeof window !== 'undefined') {\r\n-      localStorage.removeItem('cart');\r\n-    }\r\n-  };\r\n-\r\n-  const getCartTotal = () => {\r\n-    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n-  };\r\n-\r\n-  const getCartCount = () => {\r\n-    return cart.reduce((count, item) => count + item.quantity, 0);\r\n-  };\r\n-\r\n-  return {\r\n-    cart,\r\n-    isLoading,\r\n-    addToCart,\r\n-    removeFromCart,\r\n-    updateQuantity,\r\n-    clearCart,\r\n-    getCartTotal,\r\n-    getCartCount\r\n-  };\r\n-}; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891921673,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\n\r\nexport const useCart = () => {\r\n  const [cart, setCart] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Load cart from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    console.log('Loading cart from localStorage:', savedCart);\r\n    if (savedCart) {\r\n      try {\r\n        const parsedCart = JSON.parse(savedCart);\r\n        console.log('Parsed cart:', parsedCart);\r\n        setCart(parsedCart);\r\n      } catch (error) {\r\n        console.error('Error parsing cart:', error);\r\n        setCart([]);\r\n      }\r\n    }\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  // Save cart to localStorage whenever it changes\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      console.log('Saving cart to localStorage:', cart);\r\n      localStorage.setItem('cart', JSON.stringify(cart));\r\n    }\r\n  }, [cart, isLoading]);\r\n\r\n  const addToCart = (product) => {\r\n    console.log('Adding to cart:', product);\r\n    setCart(prevCart => {\r\n      const existingItem = prevCart.find(item => item.id === product.id);\r\n      \r\n      if (existingItem) {\r\n        // If item exists, increase quantity\r\n        return prevCart.map(item =>\r\n          item.id === product.id\r\n            ? { ...item, quantity: item.quantity + 1 }\r\n            : item\r\n        );\r\n      } else {\r\n        // If item doesn't exist, add new item\r\n        return [...prevCart, { ...product, quantity: 1 }];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeFromCart = (productId) => {\r\n    console.log('Removing from cart:', productId);\r\n    setCart(prevCart => prevCart.filter(item => item.id !== productId));\r\n  };\r\n\r\n  const updateQuantity = (productId, quantity) => {\r\n    console.log('Updating quantity:', productId, quantity);\r\n    if (quantity < 1) return;\r\n    \r\n    setCart(prevCart =>\r\n      prevCart.map(item =>\r\n        item.id === productId\r\n          ? { ...item, quantity }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const clearCart = () => {\r\n    console.log('Clearing cart');\r\n    setCart([]);\r\n    localStorage.removeItem('cart');\r\n  };\r\n\r\n  const getCartTotal = () => {\r\n    return cart.reduce((total, item) => total + (item.price * item.quantity), 0);\r\n  };\r\n\r\n  const getCartCount = () => {\r\n    return cart.reduce((count, item) => count + item.quantity, 0);\r\n  };\r\n\r\n  return {\r\n    cart,\r\n    isLoading,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    getCartTotal,\r\n    getCartCount\r\n  };\r\n}; "
        }
    ]
}