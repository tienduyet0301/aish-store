{
    "sourceFile": "src/models/Order.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1746893166950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747058615412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,96 @@\n-import mongoose from 'mongoose';\r\n+import { ObjectId } from 'mongodb';\r\n \r\n-const orderSchema = new mongoose.Schema({\r\n+export const orderSchema = {\r\n   orderCode: {\r\n     type: String,\r\n     required: true,\r\n     unique: true\r\n   },\r\n-  fullName: {\r\n+  userId: {\r\n     type: String,\r\n     required: true\r\n   },\r\n-  email: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  phone: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  additionalPhone: {\r\n-    type: String\r\n-  },\r\n-  address: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  ward: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  district: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  province: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n   items: [{\r\n-    productId: String,\r\n-    name: String,\r\n-    price: Number,\r\n-    quantity: Number,\r\n-    image: String\r\n+    productId: {\r\n+      type: String,\r\n+      required: true\r\n+    },\r\n+    quantity: {\r\n+      type: Number,\r\n+      required: true\r\n+    },\r\n+    price: {\r\n+      type: Number,\r\n+      required: true\r\n+    }\r\n   }],\r\n-  subtotal: {\r\n+  totalAmount: {\r\n     type: Number,\r\n     required: true\r\n   },\r\n-  shippingFee: {\r\n+  status: {\r\n     type: String,\r\n-    default: \"Miễn phí\"\r\n+    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\r\n+    default: 'pending'\r\n   },\r\n-  total: {\r\n-    type: Number,\r\n-    required: true\r\n+  shippingAddress: {\r\n+    fullName: String,\r\n+    address: String,\r\n+    city: String,\r\n+    state: String,\r\n+    postalCode: String,\r\n+    country: String,\r\n+    phone: String\r\n   },\r\n   paymentMethod: {\r\n     type: String,\r\n-    enum: ['cod', 'bank'],\r\n     required: true\r\n   },\r\n-  status: {\r\n-    type: String,\r\n\\ No newline at end of file\n-    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\r\n-    default: 'pending'\r\n-  },\r\n   paymentStatus: {\r\n     type: String,\r\n-    enum: ['pending', 'paid', 'failed'],\r\n+    enum: ['pending', 'completed', 'failed'],\r\n     default: 'pending'\r\n   },\r\n-  shippingStatus: {\r\n-    type: String,\r\n-    enum: ['pending', 'processing', 'shipped', 'delivered'],\r\n-    default: 'pending'\r\n-  },\r\n   createdAt: {\r\n     type: Date,\r\n     default: Date.now\r\n   },\r\n   updatedAt: {\r\n     type: Date,\r\n     default: Date.now\r\n   }\r\n-});\r\n+};\r\n \r\n-// Tạo model Order từ schema\r\n-const Order = mongoose.models.Order || mongoose.model('Order', orderSchema);\r\n+export const createOrder = async (db, orderData) => {\r\n+  const collection = db.collection('orders');\r\n+  const result = await collection.insertOne({\r\n+    ...orderData,\r\n+    _id: new ObjectId(),\r\n+    createdAt: new Date(),\r\n+    updatedAt: new Date()\r\n+  });\r\n+  return result;\r\n+};\r\n \r\n-export default Order; \n+export const getOrdersByUserId = async (db, userId) => {\r\n+  const collection = db.collection('orders');\r\n+  return await collection.find({ userId }).toArray();\r\n+};\r\n+\r\n+export const getOrderById = async (db, orderId) => {\r\n+  const collection = db.collection('orders');\r\n+  return await collection.findOne({ _id: new ObjectId(orderId) });\r\n+};\r\n+\r\n+export const updateOrderStatus = async (db, orderId, status) => {\r\n+  const collection = db.collection('orders');\r\n+  return await collection.updateOne(\r\n+    { _id: new ObjectId(orderId) },\r\n+    { \r\n+      $set: { \r\n+        status,\r\n+        updatedAt: new Date()\r\n+      }\r\n+    }\r\n+  );\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747058671036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,96 +1,92 @@\n-import { ObjectId } from 'mongodb';\r\n+import mongoose from 'mongoose';\r\n \r\n-export const orderSchema = {\r\n+const orderSchema = new mongoose.Schema({\r\n   orderCode: {\r\n     type: String,\r\n     required: true,\r\n     unique: true\r\n   },\r\n-  userId: {\r\n+  fullName: {\r\n     type: String,\r\n     required: true\r\n   },\r\n+  email: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  phone: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  additionalPhone: {\r\n+    type: String\r\n+  },\r\n+  address: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  ward: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  district: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n+  province: {\r\n+    type: String,\r\n+    required: true\r\n+  },\r\n   items: [{\r\n-    productId: {\r\n-      type: String,\r\n-      required: true\r\n-    },\r\n-    quantity: {\r\n-      type: Number,\r\n-      required: true\r\n-    },\r\n-    price: {\r\n-      type: Number,\r\n-      required: true\r\n-    }\r\n+    productId: String,\r\n+    name: String,\r\n+    price: Number,\r\n+    quantity: Number,\r\n+    image: String\r\n   }],\r\n-  totalAmount: {\r\n+  subtotal: {\r\n     type: Number,\r\n     required: true\r\n   },\r\n-  status: {\r\n+  shippingFee: {\r\n     type: String,\r\n-    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\r\n-    default: 'pending'\r\n+    default: \"Miễn phí\"\r\n   },\r\n-  shippingAddress: {\r\n-    fullName: String,\r\n-    address: String,\r\n-    city: String,\r\n-    state: String,\r\n-    postalCode: String,\r\n-    country: String,\r\n-    phone: String\r\n+  total: {\r\n+    type: Number,\r\n+    required: true\r\n   },\r\n   paymentMethod: {\r\n     type: String,\r\n+    enum: ['cod', 'bank'],\r\n     required: true\r\n   },\r\n+  status: {\r\n+    type: String,\r\n+    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\r\n+    default: 'pending'\r\n+  },\r\n   paymentStatus: {\r\n\\ No newline at end of file\n     type: String,\r\n-    enum: ['pending', 'completed', 'failed'],\r\n+    enum: ['pending', 'paid', 'failed'],\r\n     default: 'pending'\r\n   },\r\n+  shippingStatus: {\r\n+    type: String,\r\n+    enum: ['pending', 'processing', 'shipped', 'delivered'],\r\n+    default: 'pending'\r\n+  },\r\n   createdAt: {\r\n     type: Date,\r\n     default: Date.now\r\n   },\r\n   updatedAt: {\r\n     type: Date,\r\n     default: Date.now\r\n   }\r\n-};\r\n+});\r\n \r\n-export const createOrder = async (db, orderData) => {\r\n-  const collection = db.collection('orders');\r\n-  const result = await collection.insertOne({\r\n-    ...orderData,\r\n-    _id: new ObjectId(),\r\n-    createdAt: new Date(),\r\n-    updatedAt: new Date()\r\n-  });\r\n-  return result;\r\n-};\r\n+// Tạo model Order từ schema\r\n+const Order = mongoose.models.Order || mongoose.model('Order', orderSchema);\r\n \r\n-export const getOrdersByUserId = async (db, userId) => {\r\n-  const collection = db.collection('orders');\r\n-  return await collection.find({ userId }).toArray();\r\n-};\r\n-\r\n-export const getOrderById = async (db, orderId) => {\r\n-  const collection = db.collection('orders');\r\n-  return await collection.findOne({ _id: new ObjectId(orderId) });\r\n-};\r\n-\r\n-export const updateOrderStatus = async (db, orderId, status) => {\r\n-  const collection = db.collection('orders');\r\n-  return await collection.updateOne(\r\n-    { _id: new ObjectId(orderId) },\r\n-    { \r\n-      $set: { \r\n-        status,\r\n-        updatedAt: new Date()\r\n-      }\r\n-    }\r\n-  );\r\n-}; \n+export default Order; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747059185629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-import mongoose from 'mongoose';\r\n+import { ObjectId } from 'mongodb';\r\n \r\n-const orderSchema = new mongoose.Schema({\r\n+export const orderSchema = {\r\n   orderCode: {\r\n     type: String,\r\n     required: true,\r\n     unique: true\r\n@@ -83,10 +83,39 @@\n   updatedAt: {\r\n     type: Date,\r\n     default: Date.now\r\n   }\r\n-});\r\n+};\r\n \r\n-// Tạo model Order từ schema\r\n-const Order = mongoose.models.Order || mongoose.model('Order', orderSchema);\r\n+export const createOrder = async (db, orderData) => {\r\n\\ No newline at end of file\n+  const collection = db.collection('orders');\r\n+  const result = await collection.insertOne({\r\n+    ...orderData,\r\n+    _id: new ObjectId(),\r\n+    createdAt: new Date(),\r\n+    updatedAt: new Date()\r\n+  });\r\n+  return result;\r\n+};\r\n \r\n-export default Order; \n+export const getOrdersByUserId = async (db, userId) => {\r\n+  const collection = db.collection('orders');\r\n+  return await collection.find({ userId }).toArray();\r\n+};\r\n+\r\n+export const getOrderById = async (db, orderId) => {\r\n+  const collection = db.collection('orders');\r\n+  return await collection.findOne({ _id: new ObjectId(orderId) });\r\n+};\r\n+\r\n+export const updateOrderStatus = async (db, orderId, status) => {\r\n+  const collection = db.collection('orders');\r\n+  return await collection.updateOne(\r\n+    { _id: new ObjectId(orderId) },\r\n+    { \r\n+      $set: { \r\n+        status,\r\n+        updatedAt: new Date()\r\n+      }\r\n+    }\r\n+  );\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747805194520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,121 +1,182 @@\n-import { ObjectId } from 'mongodb';\r\n-\r\n-export const orderSchema = {\r\n-  orderCode: {\r\n-    type: String,\r\n-    required: true,\r\n-    unique: true\r\n-  },\r\n-  fullName: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  email: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  phone: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  additionalPhone: {\r\n-    type: String\r\n-  },\r\n-  address: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  ward: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  district: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  province: {\r\n-    type: String,\r\n-    required: true\r\n-  },\r\n-  items: [{\r\n-    productId: String,\r\n-    name: String,\r\n-    price: Number,\r\n-    quantity: Number,\r\n-    image: String\r\n-  }],\r\n-  subtotal: {\r\n-    type: Number,\r\n-    required: true\r\n-  },\r\n-  shippingFee: {\r\n-    type: String,\r\n-    default: \"Miễn phí\"\r\n-  },\r\n-  total: {\r\n-    type: Number,\r\n-    required: true\r\n-  },\r\n-  paymentMethod: {\r\n-    type: String,\r\n-    enum: ['cod', 'bank'],\r\n-    required: true\r\n-  },\r\n-  status: {\r\n-    type: String,\r\n-    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\r\n-    default: 'pending'\r\n-  },\r\n-  paymentStatus: {\r\n-    type: String,\r\n-    enum: ['pending', 'paid', 'failed'],\r\n-    default: 'pending'\r\n-  },\r\n-  shippingStatus: {\r\n-    type: String,\r\n-    enum: ['pending', 'processing', 'shipped', 'delivered'],\r\n-    default: 'pending'\r\n-  },\r\n-  createdAt: {\r\n-    type: Date,\r\n-    default: Date.now\r\n-  },\r\n-  updatedAt: {\r\n-    type: Date,\r\n-    default: Date.now\r\n-  }\r\n-};\r\n-\r\n-export const createOrder = async (db, orderData) => {\r\n-  const collection = db.collection('orders');\r\n-  const result = await collection.insertOne({\r\n-    ...orderData,\r\n-    _id: new ObjectId(),\r\n-    createdAt: new Date(),\r\n-    updatedAt: new Date()\r\n-  });\r\n-  return result;\r\n-};\r\n-\r\n-export const getOrdersByUserId = async (db, userId) => {\r\n-  const collection = db.collection('orders');\r\n-  return await collection.find({ userId }).toArray();\r\n-};\r\n-\r\n-export const getOrderById = async (db, orderId) => {\r\n-  const collection = db.collection('orders');\r\n-  return await collection.findOne({ _id: new ObjectId(orderId) });\r\n-};\r\n-\r\n-export const updateOrderStatus = async (db, orderId, status) => {\r\n-  const collection = db.collection('orders');\r\n-  return await collection.updateOne(\r\n-    { _id: new ObjectId(orderId) },\r\n-    { \r\n-      $set: { \r\n-        status,\r\n-        updatedAt: new Date()\r\n-      }\r\n-    }\r\n-  );\r\n+import { ObjectId } from 'mongodb';\n+\n+export const orderSchema = {\n+  orderCode: {\n+    type: String,\n+    required: true,\n+    unique: true\n+  },\n+  fullName: {\n+    type: String,\n+    required: true\n+  },\n+  email: {\n+    type: String,\n+    required: true\n+  },\n+  phone: {\n+    type: String,\n+    required: true\n+  },\n+  additionalPhone: {\n+    type: String\n+  },\n+  address: {\n+    type: String,\n+    required: true\n+  },\n+  ward: {\n+    type: String,\n+    required: true\n+  },\n+  district: {\n+    type: String,\n+    required: true\n+  },\n+  province: {\n+    type: String,\n+    required: true\n+  },\n+  items: [{\n+    productId: String,\n+    name: String,\n+    price: Number,\n+    quantity: Number,\n+    image: String\n+  }],\n+  subtotal: {\n+    type: Number,\n+    required: true\n+  },\n+  shippingFee: {\n+    type: String,\n+    default: \"Miễn phí\"\n+  },\n+  total: {\n+    type: Number,\n+    required: true\n+  },\n+  paymentMethod: {\n+    type: String,\n+    enum: ['cod', 'bank'],\n+    required: true\n+  },\n+  status: {\n+    type: String,\n+    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\n+    default: 'pending'\n+  },\n+  paymentStatus: {\n+    type: String,\n+    enum: ['pending', 'paid', 'failed'],\n+    default: 'pending'\n+  },\n+  shippingStatus: {\n+    type: String,\n+    enum: ['pending', 'processing', 'shipped', 'delivered'],\n+    default: 'pending'\n+  },\n+  createdAt: {\n+    type: Date,\n+    default: Date.now\n+  },\n+  updatedAt: {\n+    type: Date,\n+    default: Date.now\n+  }\n+};\n+\n+// Validate order data\n+function validateOrderData(orderData) {\n+  const requiredFields = [\n+    'orderNumber',\n+    'fullName',\n+    'email',\n+    'phone',\n+    'ward',\n+    'district',\n+    'province',\n+    'items',\n+    'subtotal',\n+    'total',\n+    'paymentMethod'\n+  ];\n+\n+  const missingFields = requiredFields.filter(field => !orderData[field]);\n+  if (missingFields.length > 0) {\n+    throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\n+  }\n+\n+  if (!Array.isArray(orderData.items) || orderData.items.length === 0) {\n+    throw new Error('Order must contain at least one item');\n+  }\n+\n+  if (typeof orderData.subtotal !== 'number' || orderData.subtotal <= 0) {\n+    throw new Error('Invalid subtotal amount');\n+  }\n+\n+  if (typeof orderData.total !== 'number' || orderData.total <= 0) {\n+    throw new Error('Invalid total amount');\n+  }\n+}\n+\n+export const createOrder = async (db, orderData) => {\n+  try {\n+    // Validate order data\n+    validateOrderData(orderData);\n+\n+    const collection = db.collection('orders');\n+    const result = await collection.insertOne({\n+      ...orderData,\n+      _id: new ObjectId(),\n+      createdAt: new Date(),\n+      updatedAt: new Date(),\n+      status: 'pending',\n+      paymentStatus: 'pending',\n+      shippingStatus: 'pending'\n+    });\n+\n+    return result;\n+  } catch (error) {\n+    console.error('Error creating order:', error);\n+    throw error;\n+  }\n+};\n+\n+export const getOrdersByUserId = async (db, userId) => {\n+  try {\n+    const collection = db.collection('orders');\n+    return await collection.find({ userId }).toArray();\n+  } catch (error) {\n+    console.error('Error fetching orders by user ID:', error);\n+    throw error;\n+  }\n+};\n+\n+export const getOrderById = async (db, orderId) => {\n+  try {\n+    const collection = db.collection('orders');\n+    return await collection.findOne({ _id: new ObjectId(orderId) });\n+  } catch (error) {\n+    console.error('Error fetching order by ID:', error);\n+    throw error;\n+  }\n+};\n+\n+export const updateOrderStatus = async (db, orderId, status) => {\n+  try {\n+    const collection = db.collection('orders');\n+    return await collection.updateOne(\n+      { _id: new ObjectId(orderId) },\n+      { \n+        $set: { \n+          status,\n+          updatedAt: new Date()\n+        }\n+      }\n+    );\n+  } catch (error) {\n+    console.error('Error updating order status:', error);\n+    throw error;\n+  }\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747811338126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,58 +124,58 @@\n   try {\n     // Validate order data\n     validateOrderData(orderData);\n \n-    const collection = db.collection('orders');\n-    const result = await collection.insertOne({\n-      ...orderData,\n-      _id: new ObjectId(),\n-      createdAt: new Date(),\n+  const collection = db.collection('orders');\n+  const result = await collection.insertOne({\n+    ...orderData,\n+    _id: new ObjectId(),\n+    createdAt: new Date(),\n       updatedAt: new Date(),\n       status: 'pending',\n       paymentStatus: 'pending',\n       shippingStatus: 'pending'\n-    });\n+  });\n \n-    return result;\n+  return result;\n   } catch (error) {\n     console.error('Error creating order:', error);\n     throw error;\n   }\n };\n \n export const getOrdersByUserId = async (db, userId) => {\n   try {\n-    const collection = db.collection('orders');\n-    return await collection.find({ userId }).toArray();\n+  const collection = db.collection('orders');\n+  return await collection.find({ userId }).toArray();\n   } catch (error) {\n     console.error('Error fetching orders by user ID:', error);\n     throw error;\n   }\n };\n \n export const getOrderById = async (db, orderId) => {\n   try {\n-    const collection = db.collection('orders');\n-    return await collection.findOne({ _id: new ObjectId(orderId) });\n+  const collection = db.collection('orders');\n+  return await collection.findOne({ _id: new ObjectId(orderId) });\n   } catch (error) {\n     console.error('Error fetching order by ID:', error);\n     throw error;\n   }\n };\n \n export const updateOrderStatus = async (db, orderId, status) => {\n   try {\n-    const collection = db.collection('orders');\n-    return await collection.updateOne(\n-      { _id: new ObjectId(orderId) },\n-      { \n-        $set: { \n-          status,\n-          updatedAt: new Date()\n-        }\n+  const collection = db.collection('orders');\n+  return await collection.updateOne(\n+    { _id: new ObjectId(orderId) },\n+    { \n+      $set: { \n+        status,\n+        updatedAt: new Date()\n       }\n-    );\n+    }\n+  );\n   } catch (error) {\n     console.error('Error updating order status:', error);\n     throw error;\n   }\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import mongoose from 'mongoose';\r\n\r\nconst orderSchema = new mongoose.Schema({\r\n  orderCode: {\r\n    type: String,\r\n    required: true,\r\n    unique: true\r\n  },\r\n  fullName: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  phone: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  additionalPhone: {\r\n    type: String\r\n  },\r\n  address: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  ward: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  district: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  province: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  items: [{\r\n    productId: String,\r\n    name: String,\r\n    price: Number,\r\n    quantity: Number,\r\n    image: String\r\n  }],\r\n  subtotal: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  shippingFee: {\r\n    type: String,\r\n    default: \"Miễn phí\"\r\n  },\r\n  total: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  paymentMethod: {\r\n    type: String,\r\n    enum: ['cod', 'bank'],\r\n    required: true\r\n  },\r\n  status: {\r\n    type: String,\r\n    enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'],\r\n    default: 'pending'\r\n  },\r\n  paymentStatus: {\r\n    type: String,\r\n    enum: ['pending', 'paid', 'failed'],\r\n    default: 'pending'\r\n  },\r\n  shippingStatus: {\r\n    type: String,\r\n    enum: ['pending', 'processing', 'shipped', 'delivered'],\r\n    default: 'pending'\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now\r\n  },\r\n  updatedAt: {\r\n    type: Date,\r\n    default: Date.now\r\n  }\r\n});\r\n\r\n// Tạo model Order từ schema\r\nconst Order = mongoose.models.Order || mongoose.model('Order', orderSchema);\r\n\r\nexport default Order; "
        }
    ]
}