{
    "sourceFile": "src/middleware.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1747120513981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747122192602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,14 +5,20 @@\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n   const isAdminLoginPath = request.nextUrl.pathname === \"/admin/login\";\r\n+  const isAdminRootPath = request.nextUrl.pathname === \"/admin\";\r\n \r\n   // Nếu đang ở trang admin login và đã đăng nhập, chuyển đến trang chủ admin\r\n   if (isAdminLoginPath && token) {\r\n     return NextResponse.redirect(new URL(\"/admin/dashboard\", request.url));\r\n   }\r\n \r\n+  // Nếu đang ở trang admin root và đã đăng nhập, chuyển đến dashboard\r\n+  if (isAdminRootPath && token) {\r\n+    return NextResponse.redirect(new URL(\"/admin/dashboard\", request.url));\r\n+  }\r\n+\r\n   // Nếu đang ở trang admin và chưa đăng nhập, chuyển đến trang admin login\r\n   if (isAdminPath && !isAdminLoginPath && !token) {\r\n     return NextResponse.redirect(new URL(\"/admin/login\", request.url));\r\n   }\r\n"
                },
                {
                    "date": 1747285107424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,18 @@\n import { NextResponse } from \"next/server\";\r\n import { getToken } from \"next-auth/jwt\";\r\n import { NextRequest } from \"next/server\";\r\n+import { Ratelimit } from '@upstash/ratelimit'\r\n+import { Redis } from '@upstash/redis'\r\n \r\n+// Create a new ratelimiter that allows 10 requests per 10 seconds\r\n+const ratelimit = new Ratelimit({\r\n+  redis: Redis.fromEnv(),\r\n+  limiter: Ratelimit.slidingWindow(10, '10 s'),\r\n+  analytics: true,\r\n+  prefix: '@upstash/ratelimit',\r\n+})\r\n+\r\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n   const isAdminLoginPath = request.nextUrl.pathname === \"/admin/login\";\r\n@@ -22,10 +32,42 @@\n   if (isAdminPath && !isAdminLoginPath && !token) {\r\n     return NextResponse.redirect(new URL(\"/admin/login\", request.url));\r\n   }\r\n \r\n+  // Get the IP address of the request\r\n+  const ip = request.ip ?? '127.0.0.1'\r\n+  \r\n+  // Only apply rate limiting to API routes\r\n+  if (request.nextUrl.pathname.startsWith('/api')) {\r\n+    try {\r\n+      const { success, limit, reset, remaining } = await ratelimit.limit(ip)\r\n+\r\n+      if (!success) {\r\n+        return new NextResponse('Too Many Requests', {\r\n+          status: 429,\r\n+          headers: {\r\n+            'X-RateLimit-Limit': limit.toString(),\r\n+            'X-RateLimit-Remaining': remaining.toString(),\r\n+            'X-RateLimit-Reset': reset.toString(),\r\n+          },\r\n+        })\r\n+      }\r\n+\r\n+      // Add rate limit headers to the response\r\n+      const response = NextResponse.next()\r\n+      response.headers.set('X-RateLimit-Limit', limit.toString())\r\n+      response.headers.set('X-RateLimit-Remaining', remaining.toString())\r\n+      response.headers.set('X-RateLimit-Reset', reset.toString())\r\n+      return response\r\n+    } catch (error) {\r\n+      // If there's an error with rate limiting, allow the request to proceed\r\n+      console.error('Rate limiting error:', error)\r\n+      return NextResponse.next()\r\n+    }\r\n+  }\r\n+\r\n   return NextResponse.next();\r\n }\r\n \r\n export const config = {\r\n-  matcher: [\"/admin/:path*\"],\r\n+  matcher: [\"/admin/:path*\", \"/api/:path*\"],\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747285147054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,8 @@\n import { NextResponse } from \"next/server\";\r\n import { getToken } from \"next-auth/jwt\";\r\n import { NextRequest } from \"next/server\";\r\n-import { Ratelimit } from '@upstash/ratelimit'\r\n-import { Redis } from '@upstash/redis'\r\n \r\n-// Create a new ratelimiter that allows 10 requests per 10 seconds\r\n-const ratelimit = new Ratelimit({\r\n-  redis: Redis.fromEnv(),\r\n-  limiter: Ratelimit.slidingWindow(10, '10 s'),\r\n-  analytics: true,\r\n-  prefix: '@upstash/ratelimit',\r\n-})\r\n-\r\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n   const isAdminLoginPath = request.nextUrl.pathname === \"/admin/login\";\r\n@@ -32,42 +22,10 @@\n   if (isAdminPath && !isAdminLoginPath && !token) {\r\n     return NextResponse.redirect(new URL(\"/admin/login\", request.url));\r\n   }\r\n \r\n-  // Get the IP address of the request\r\n-  const ip = request.ip ?? '127.0.0.1'\r\n-  \r\n-  // Only apply rate limiting to API routes\r\n-  if (request.nextUrl.pathname.startsWith('/api')) {\r\n-    try {\r\n-      const { success, limit, reset, remaining } = await ratelimit.limit(ip)\r\n-\r\n-      if (!success) {\r\n-        return new NextResponse('Too Many Requests', {\r\n-          status: 429,\r\n-          headers: {\r\n-            'X-RateLimit-Limit': limit.toString(),\r\n-            'X-RateLimit-Remaining': remaining.toString(),\r\n-            'X-RateLimit-Reset': reset.toString(),\r\n-          },\r\n-        })\r\n-      }\r\n-\r\n-      // Add rate limit headers to the response\r\n-      const response = NextResponse.next()\r\n-      response.headers.set('X-RateLimit-Limit', limit.toString())\r\n-      response.headers.set('X-RateLimit-Remaining', remaining.toString())\r\n-      response.headers.set('X-RateLimit-Reset', reset.toString())\r\n-      return response\r\n-    } catch (error) {\r\n-      // If there's an error with rate limiting, allow the request to proceed\r\n-      console.error('Rate limiting error:', error)\r\n-      return NextResponse.next()\r\n-    }\r\n-  }\r\n-\r\n   return NextResponse.next();\r\n }\r\n \r\n export const config = {\r\n-  matcher: [\"/admin/:path*\", \"/api/:path*\"],\r\n+  matcher: [\"/admin/:path*\"],\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747285362106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,52 @@\n   if (isAdminPath && !isAdminLoginPath && !token) {\r\n     return NextResponse.redirect(new URL(\"/admin/login\", request.url));\r\n   }\r\n \r\n-  return NextResponse.next();\r\n+  // Get the response\r\n+  const response = NextResponse.next();\r\n+\r\n+  // Add security headers\r\n+  const headers = response.headers;\r\n+\r\n+  // Strict-Transport-Security (HSTS)\r\n+  // Bắt buộc trình duyệt sử dụng HTTPS\r\n+  headers.set(\r\n+    'Strict-Transport-Security',\r\n+    'max-age=31536000; includeSubDomains'\r\n+  );\r\n+\r\n+  // X-Content-Type-Options\r\n+  // Ngăn chặn MIME type sniffing\r\n+  headers.set('X-Content-Type-Options', 'nosniff');\r\n+\r\n+  // X-Frame-Options\r\n+  // Ngăn chặn clickjacking\r\n+  headers.set('X-Frame-Options', 'DENY');\r\n+\r\n+  // X-XSS-Protection\r\n+  // Bảo vệ khỏi XSS attacks\r\n+  headers.set('X-XSS-Protection', '1; mode=block');\r\n+\r\n+  // Referrer-Policy\r\n+  // Kiểm soát thông tin referrer\r\n+  headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\r\n+\r\n+  // Permissions-Policy\r\n+  // Kiểm soát các tính năng trình duyệt\r\n+  headers.set(\r\n+    'Permissions-Policy',\r\n+    'camera=(), microphone=(), geolocation=(), interest-cohort=()'\r\n+  );\r\n+\r\n+  // Content-Security-Policy (CSP)\r\n+  // Kiểm soát nguồn tài nguyên được tải\r\n+  headers.set(\r\n+    'Content-Security-Policy',\r\n+    \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:;\"\r\n+  );\r\n+\r\n+  return response;\r\n }\r\n \r\n export const config = {\r\n   matcher: [\"/admin/:path*\"],\r\n"
                },
                {
                    "date": 1747285422784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,52 +22,9 @@\n   if (isAdminPath && !isAdminLoginPath && !token) {\r\n     return NextResponse.redirect(new URL(\"/admin/login\", request.url));\r\n   }\r\n \r\n-  // Get the response\r\n-  const response = NextResponse.next();\r\n-\r\n-  // Add security headers\r\n-  const headers = response.headers;\r\n-\r\n-  // Strict-Transport-Security (HSTS)\r\n-  // Bắt buộc trình duyệt sử dụng HTTPS\r\n-  headers.set(\r\n-    'Strict-Transport-Security',\r\n-    'max-age=31536000; includeSubDomains'\r\n-  );\r\n-\r\n-  // X-Content-Type-Options\r\n-  // Ngăn chặn MIME type sniffing\r\n-  headers.set('X-Content-Type-Options', 'nosniff');\r\n-\r\n-  // X-Frame-Options\r\n-  // Ngăn chặn clickjacking\r\n-  headers.set('X-Frame-Options', 'DENY');\r\n-\r\n-  // X-XSS-Protection\r\n-  // Bảo vệ khỏi XSS attacks\r\n-  headers.set('X-XSS-Protection', '1; mode=block');\r\n-\r\n-  // Referrer-Policy\r\n-  // Kiểm soát thông tin referrer\r\n-  headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\r\n-\r\n-  // Permissions-Policy\r\n-  // Kiểm soát các tính năng trình duyệt\r\n-  headers.set(\r\n-    'Permissions-Policy',\r\n-    'camera=(), microphone=(), geolocation=(), interest-cohort=()'\r\n-  );\r\n-\r\n-  // Content-Security-Policy (CSP)\r\n-  // Kiểm soát nguồn tài nguyên được tải\r\n-  headers.set(\r\n-    'Content-Security-Policy',\r\n-    \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:;\"\r\n-  );\r\n-\r\n-  return response;\r\n+  return NextResponse.next();\r\n }\r\n \r\n export const config = {\r\n   matcher: [\"/admin/:path*\"],\r\n"
                },
                {
                    "date": 1747290456981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { NextResponse } from \"next/server\";\r\n import { getToken } from \"next-auth/jwt\";\r\n import { NextRequest } from \"next/server\";\r\n+import createMiddleware from 'next-intl/middleware';\r\n \r\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n@@ -27,5 +28,18 @@\n }\r\n \r\n export const config = {\r\n   matcher: [\"/admin/:path*\"],\r\n+};\r\n+\r\n+export default createMiddleware({\r\n+  // A list of all locales that are supported\r\n+  locales: ['en', 'vi'],\r\n+ \r\n+  // Used when no locale matches\r\n+  defaultLocale: 'en'\r\n+});\r\n+\r\n+export const config = {\r\n+  // Match only internationalized pathnames\r\n+  matcher: ['/', '/(vi|en)/:path*']\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747291012484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,5 +41,5 @@\n \r\n export const config = {\r\n   // Match only internationalized pathnames\r\n   matcher: ['/', '/(vi|en)/:path*']\r\n-}; \n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747291021896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { NextResponse } from \"next/server\";\r\n import { getToken } from \"next-auth/jwt\";\r\n import { NextRequest } from \"next/server\";\r\n-import createMiddleware from 'next-intl/middleware';\r\n \r\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n@@ -41,5 +40,5 @@\n \r\n export const config = {\r\n   // Match only internationalized pathnames\r\n   matcher: ['/', '/(vi|en)/:path*']\r\n-};\n\\ No newline at end of file\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747291033365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { NextResponse } from \"next/server\";\r\n import { getToken } from \"next-auth/jwt\";\r\n import { NextRequest } from \"next/server\";\r\n+import createMiddleware from 'next-intl/middleware';\r\n \r\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n@@ -40,5 +41,5 @@\n \r\n export const config = {\r\n   // Match only internationalized pathnames\r\n   matcher: ['/', '/(vi|en)/:path*']\r\n-}; \n\\ No newline at end of file\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747291134827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { NextResponse } from \"next/server\";\r\n import { getToken } from \"next-auth/jwt\";\r\n import { NextRequest } from \"next/server\";\r\n-import createMiddleware from 'next-intl/middleware';\r\n \r\n export async function middleware(request: NextRequest) {\r\n   const token = await getToken({ req: request });\r\n   const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n@@ -28,18 +27,5 @@\n }\r\n \r\n export const config = {\r\n   matcher: [\"/admin/:path*\"],\r\n-};\r\n-\r\n-export default createMiddleware({\r\n-  // A list of all locales that are supported\r\n-  locales: ['en', 'vi'],\r\n- \r\n-  // Used when no locale matches\r\n-  defaultLocale: 'en'\r\n-});\r\n-\r\n-export const config = {\r\n-  // Match only internationalized pathnames\r\n-  matcher: ['/', '/(vi|en)/:path*']\r\n-};\n\\ No newline at end of file\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747291148517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   const isAdminRootPath = request.nextUrl.pathname === \"/admin\";\r\n \r\n   // Nếu đang ở trang admin login và đã đăng nhập, chuyển đến trang chủ admin\r\n   if (isAdminLoginPath && token) {\r\n-    return NextResponse.redirect(new URL(\"/admin/dashboard\", request.url));\r\n+    return NextResponse.redirect(new URL(\"/admin/products\", request.url));\r\n   }\r\n \r\n   // Nếu đang ở trang admin root và đã đăng nhập, chuyển đến dashboard\r\n   if (isAdminRootPath && token) {\r\n"
                },
                {
                    "date": 1747291162872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   }\r\n \r\n   // Nếu đang ở trang admin root và đã đăng nhập, chuyển đến dashboard\r\n   if (isAdminRootPath && token) {\r\n-    return NextResponse.redirect(new URL(\"/admin/dashboard\", request.url));\r\n+    return NextResponse.redirect(new URL(\"/admin/products\", request.url));\r\n   }\r\n \r\n   // Nếu đang ở trang admin và chưa đăng nhập, chuyển đến trang admin login\r\n   if (isAdminPath && !isAdminLoginPath && !token) {\r\n"
                }
            ],
            "date": 1747120513981,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport { getToken } from \"next-auth/jwt\";\r\nimport { NextRequest } from \"next/server\";\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const token = await getToken({ req: request });\r\n  const isAdminPath = request.nextUrl.pathname.startsWith(\"/admin\");\r\n  const isAdminLoginPath = request.nextUrl.pathname === \"/admin/login\";\r\n\r\n  // Nếu đang ở trang admin login và đã đăng nhập, chuyển đến trang chủ admin\r\n  if (isAdminLoginPath && token) {\r\n    return NextResponse.redirect(new URL(\"/admin/dashboard\", request.url));\r\n  }\r\n\r\n  // Nếu đang ở trang admin và chưa đăng nhập, chuyển đến trang admin login\r\n  if (isAdminPath && !isAdminLoginPath && !token) {\r\n    return NextResponse.redirect(new URL(\"/admin/login\", request.url));\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/admin/:path*\"],\r\n}; "
        }
    ]
}