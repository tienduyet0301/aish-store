{
    "sourceFile": "src/scripts/backupRestore.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893166979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { exec } from 'child_process';\r\nimport { promisify } from 'util';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\n\r\nconst execAsync = promisify(exec);\r\n\r\n// Cấu hình\r\nconst DB_NAME = 'aishh';\r\nconst BACKUP_DIR = path.join(process.cwd(), 'backups');\r\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';\r\n\r\n// Tạo thư mục backup nếu chưa tồn tại\r\nif (!fs.existsSync(BACKUP_DIR)) {\r\n  fs.mkdirSync(BACKUP_DIR, { recursive: true });\r\n}\r\n\r\n// Backup database\r\nconst backupDatabase = async () => {\r\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n  const backupPath = path.join(BACKUP_DIR, `backup-${timestamp}`);\r\n\r\n  try {\r\n    console.log('Starting database backup...');\r\n    \r\n    // Tạo thư mục backup với timestamp\r\n    fs.mkdirSync(backupPath, { recursive: true });\r\n\r\n    // Backup toàn bộ database\r\n    const { stdout, stderr } = await execAsync(\r\n      `mongodump --uri=\"${MONGODB_URI}\" --db=${DB_NAME} --out=\"${backupPath}\"`\r\n    );\r\n\r\n    if (stderr) {\r\n      console.error('Backup error:', stderr);\r\n      return false;\r\n    }\r\n\r\n    console.log('Backup completed successfully!');\r\n    console.log(`Backup location: ${backupPath}`);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Backup failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Restore database\r\nconst restoreDatabase = async (backupPath) => {\r\n  try {\r\n    console.log('Starting database restore...');\r\n\r\n    // Kiểm tra thư mục backup có tồn tại\r\n    if (!fs.existsSync(backupPath)) {\r\n      console.error('Backup directory not found:', backupPath);\r\n      return false;\r\n    }\r\n\r\n    // Restore database\r\n    const { stdout, stderr } = await execAsync(\r\n      `mongorestore --uri=\"${MONGODB_URI}\" --db=${DB_NAME} \"${backupPath}/${DB_NAME}\"`\r\n    );\r\n\r\n    if (stderr) {\r\n      console.error('Restore error:', stderr);\r\n      return false;\r\n    }\r\n\r\n    console.log('Restore completed successfully!');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Restore failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Liệt kê các backup có sẵn\r\nconst listBackups = () => {\r\n  try {\r\n    const backups = fs.readdirSync(BACKUP_DIR)\r\n      .filter(file => file.startsWith('backup-'))\r\n      .sort()\r\n      .reverse();\r\n\r\n    if (backups.length === 0) {\r\n      console.log('No backups found.');\r\n      return [];\r\n    }\r\n\r\n    console.log('Available backups:');\r\n    backups.forEach((backup, index) => {\r\n      const stats = fs.statSync(path.join(BACKUP_DIR, backup));\r\n      console.log(`${index + 1}. ${backup} (${new Date(stats.mtime).toLocaleString()})`);\r\n    });\r\n\r\n    return backups;\r\n  } catch (error) {\r\n    console.error('Error listing backups:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Xóa backup cũ\r\nconst cleanupOldBackups = async (keepLast = 5) => {\r\n  try {\r\n    const backups = fs.readdirSync(BACKUP_DIR)\r\n      .filter(file => file.startsWith('backup-'))\r\n      .sort()\r\n      .reverse();\r\n\r\n    if (backups.length <= keepLast) {\r\n      return;\r\n    }\r\n\r\n    console.log(`Cleaning up old backups, keeping last ${keepLast}...`);\r\n    \r\n    for (let i = keepLast; i < backups.length; i++) {\r\n      const backupPath = path.join(BACKUP_DIR, backups[i]);\r\n      fs.rmSync(backupPath, { recursive: true, force: true });\r\n      console.log(`Deleted old backup: ${backups[i]}`);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error cleaning up old backups:', error);\r\n  }\r\n};\r\n\r\n// Xử lý command line arguments\r\nconst main = async () => {\r\n  const command = process.argv[2];\r\n  const arg = process.argv[3];\r\n\r\n  switch (command) {\r\n    case 'backup':\r\n      await backupDatabase();\r\n      await cleanupOldBackups();\r\n      break;\r\n\r\n    case 'restore':\r\n      if (!arg) {\r\n        console.log('Please specify a backup to restore.');\r\n        console.log('Usage: node backupRestore.js restore <backup-name>');\r\n        return;\r\n      }\r\n      const backupPath = path.join(BACKUP_DIR, arg);\r\n      await restoreDatabase(backupPath);\r\n      break;\r\n\r\n    case 'list':\r\n      listBackups();\r\n      break;\r\n\r\n    default:\r\n      console.log('Usage:');\r\n      console.log('  node backupRestore.js backup');\r\n      console.log('  node backupRestore.js restore <backup-name>');\r\n      console.log('  node backupRestore.js list');\r\n  }\r\n};\r\n\r\nmain(); "
        }
    ]
}