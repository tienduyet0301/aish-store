{
    "sourceFile": "src/app/[id]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747198690724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747198690724,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useParams, usePathname } from \"next/navigation\";\r\nimport { motion } from \"framer-motion\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { useCart } from \"@/context/CartContext\";\r\nimport { Product } from \"@/types/product\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport HelpPanel from \"@/components/HelpPanel\";\r\n\r\nexport default function ProductDetailPage() {\r\n  const { id: slug } = useParams();\r\n  const pathname = usePathname();\r\n  const [product, setProduct] = useState<Product | null>(null);\r\n  const [selectedSize, setSelectedSize] = useState<string | undefined>(undefined);\r\n  const [quantity, setQuantity] = useState<number>(1);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const { addToCart } = useCart();\r\n  const [showFullImage, setShowFullImage] = useState(false);\r\n  const [showHelpPanel, setShowHelpPanel] = useState(false);\r\n  const [showSizeOptions, setShowSizeOptions] = useState(false);\r\n  const [showSizeGuide, setShowSizeGuide] = useState(false);\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchProduct = async () => {\r\n      try {\r\n        const response = await fetch(`/api/products/by-slug/${slug}`);\r\n        const data = await response.json();\r\n        if (data.ok) {\r\n          setProduct(data.product);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching product:\", error);\r\n        toast.error(\"Failed to load product\");\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProduct();\r\n  }, [slug]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!product) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <p className=\"text-xl\">Product not found</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const handleAddToCart = () => {\r\n    if (!product) return;\r\n\r\n    if (!selectedSize) {\r\n      toast.error(\"Vui lòng chọn size\");\r\n      return;\r\n    }\r\n\r\n    const sizeQuantity = product[`quantity${selectedSize}` as keyof Product] as number;\r\n    if (quantity > sizeQuantity) {\r\n      toast.error(`Chỉ còn ${sizeQuantity} sản phẩm size ${selectedSize}`);\r\n      return;\r\n    }\r\n\r\n    // Tạo object chứa thông tin stock cho tất cả các size\r\n    const stockInfo: { [key: string]: number } = {};\r\n    product.sizes?.forEach(size => {\r\n      const quantity = product[`quantity${size}` as keyof Product] as number;\r\n      stockInfo[size] = quantity;\r\n    });\r\n\r\n    // Thêm sản phẩm vào giỏ hàng với thông tin stock đầy đủ\r\n    addToCart({\r\n      id: product._id,\r\n      name: product.name,\r\n      price: product.price,\r\n      image: product.images[0],\r\n      size: selectedSize,\r\n      color: product.colors[0] || 'Default',\r\n      quantity: quantity,\r\n      cartItemId: Date.now(),\r\n      stock: stockInfo,\r\n      availableSizes: product.sizes || [],\r\n      // Thêm thông tin stock cho size hiện tại\r\n      currentStock: sizeQuantity\r\n    });\r\n\r\n    toast.success(\"Đã thêm vào giỏ hàng\");\r\n  };\r\n\r\n  const handleQuantityChange = (value: number) => {\r\n    if (!product || !selectedSize) return;\r\n    \r\n    const sizeQuantity = product[`quantity${selectedSize}` as keyof Product] as number;\r\n    if (value > sizeQuantity) {\r\n      toast.error(`Chỉ còn ${sizeQuantity} sản phẩm size ${selectedSize}`);\r\n      return;\r\n    }\r\n    \r\n    setQuantity(value);\r\n  };\r\n\r\n  const handlePrevImage = () => {\r\n    if (!product || !product.images) return;\r\n    setCurrentImageIndex((currentImageIndex - 1 + product.images.length) % product.images.length);\r\n  };\r\n\r\n  const handleNextImage = () => {\r\n    if (!product || !product.images) return;\r\n    setCurrentImageIndex((currentImageIndex + 1) % product.images.length);\r\n  };\r\n\r\n  const isClothing = product.category && product.category !== \"CAP\";\r\n  const availableSizes = product.sizes || [\"M\", \"L\", \"XL\"];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white flex flex-col\">\r\n      {/* Breadcrumb */}\r\n      <div className=\"px-4 py-4 text-xs text-gray-600 mt-16\">\r\n        <span className=\"font-semibold uppercase underline\">{product.category}</span>\r\n        <span className=\"mx-2\">/</span>\r\n        <span className=\"text-black font-semibold uppercase underline\">{product.name}</span>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col md:flex-row w-full max-w-7xl mx-auto py-8 px-4 gap-8 flex-1\">\r\n        {/* Bên trái: Ảnh đầu tiên và 4 ảnh nhỏ */}\r\n        <div className=\"flex-1 flex flex-col items-center\">\r\n          <div className=\"relative w-full flex justify-center items-center mt-6 mb-6\" style={{height: '450px'}}>\r\n            <Image\r\n              src={product.images && product.images[currentImageIndex] ? product.images[currentImageIndex] : \"/placeholder.jpg\"}\r\n              alt={product.name}\r\n              width={450}\r\n              height={450}\r\n              quality={100}\r\n              className=\"object-contain object-center w-full h-full\"\r\n              style={{ maxWidth: \"90%\", height: \"auto\" }}\r\n              onClick={() => setShowFullImage(true)}\r\n            />\r\n            {product.images.length > 1 && (\r\n              <>\r\n                <button\r\n                  onClick={handlePrevImage}\r\n                  className=\"absolute left-0 top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center text-black/60 hover:text-black transition-all duration-300\"\r\n                >\r\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M15 19l-7-7 7-7\" />\r\n                  </svg>\r\n                </button>\r\n                <button\r\n                  onClick={handleNextImage}\r\n                  className=\"absolute right-0 top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center text-black/60 hover:text-black transition-all duration-300\"\r\n                >\r\n                  <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 5l7 7-7 7\" />\r\n                  </svg>\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"flex gap-4 w-full justify-center mt-10\">\r\n            {product.images && product.images.slice(0, 4).map((img: string, index: number) => (\r\n              <div \r\n                key={index} \r\n                className={`w-24 h-24 relative cursor-pointer border-2 transition-all duration-300 ${\r\n                  currentImageIndex === index ? \"border-black scale-105\" : \"border-gray-200 hover:border-gray-400\"\r\n                }`}\r\n                onClick={() => setCurrentImageIndex(index)}\r\n              >\r\n                <Image\r\n                  src={img}\r\n                  alt={`${product.name} thumbnail ${index + 1}`}\r\n                  width={96}\r\n                  height={96}\r\n                  className=\"object-cover\"\r\n                />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Bên phải: Thông tin sản phẩm */}\r\n        <div className=\"flex-1 flex flex-col\">\r\n          <h1 className=\"text-2xl font-semibold mb-2\">{product.name}</h1>\r\n          <p className=\"text-gray-600 mb-4\">{product.description}</p>\r\n          <p className=\"text-xl font-semibold mb-6\">${product.price}</p>\r\n\r\n          {/* Size Selection */}\r\n          {isClothing && (\r\n            <div className=\"mb-6\">\r\n              <div className=\"flex justify-between items-center mb-2\">\r\n                <label className=\"text-sm font-semibold\">Size</label>\r\n                <button\r\n                  onClick={() => setShowSizeGuide(true)}\r\n                  className=\"text-sm text-gray-600 hover:text-black\"\r\n                >\r\n                  Size guide\r\n                </button>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                {availableSizes.map((size) => {\r\n                  const sizeQuantity = product[`quantity${size}` as keyof Product] as number;\r\n                  const isOutOfStock = sizeQuantity <= 0;\r\n                  return (\r\n                    <button\r\n                      key={size}\r\n                      onClick={() => !isOutOfStock && setSelectedSize(size)}\r\n                      className={`flex-1 py-2 border ${\r\n                        selectedSize === size\r\n                          ? \"border-black bg-black text-white\"\r\n                          : isOutOfStock\r\n                          ? \"border-gray-200 text-gray-400 cursor-not-allowed\"\r\n                          : \"border-gray-300 hover:border-black\"\r\n                      }`}\r\n                      disabled={isOutOfStock}\r\n                    >\r\n                      {size}\r\n                      {isOutOfStock && \" (Sold out)\"}\r\n                    </button>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Quantity Selection */}\r\n          <div className=\"mb-6\">\r\n            <label className=\"text-sm font-semibold block mb-2\">Quantity</label>\r\n            <div className=\"flex items-center gap-4\">\r\n              <button\r\n                onClick={() => handleQuantityChange(Math.max(1, quantity - 1))}\r\n                className=\"w-8 h-8 flex items-center justify-center border border-gray-300 hover:border-black\"\r\n              >\r\n                -\r\n              </button>\r\n              <span className=\"w-8 text-center\">{quantity}</span>\r\n              <button\r\n                onClick={() => handleQuantityChange(quantity + 1)}\r\n                className=\"w-8 h-8 flex items-center justify-center border border-gray-300 hover:border-black\"\r\n              >\r\n                +\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Add to Cart Button */}\r\n          <button\r\n            onClick={handleAddToCart}\r\n            className=\"w-full py-3 bg-black text-white hover:bg-gray-800 transition-colors duration-300\"\r\n          >\r\n            Add to Cart\r\n          </button>\r\n\r\n          {/* Product Details */}\r\n          <div className=\"mt-8\">\r\n            <h2 className=\"text-lg font-semibold mb-4\">Product Details</h2>\r\n            <div className=\"prose prose-sm\">\r\n              <div dangerouslySetInnerHTML={{ __html: product.details }} />\r\n            </div>\r\n          </div>\r\n\r\n          {isClothing && (\r\n            <button\r\n              onClick={() => setShowSizeGuide(true)}\r\n              className=\"inline-block text-left text-sm text-black mb-6 relative group transition-all duration-300\"\r\n              style={{ transform: 'none' }}\r\n            >\r\n              <span className=\"group-hover:font-semibold\">Size guide</span>\r\n              <span className=\"absolute bottom-0 left-0 w-full h-[1px] bg-black group-hover:w-0 transition-all duration-300\"></span>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Navigation và các thông tin phụ */}\r\n      <div className=\"flex justify-between items-center px-8 py-4 text-xs text-gray-600 border-t\">\r\n        <div className=\"text-black\">\r\n          <span className=\"font-semibold uppercase underline\">{product.category}</span>\r\n          {\" / \"}\r\n          <span className=\"font-semibold uppercase underline\">{product.name}</span>\r\n        </div>\r\n        <div>\r\n          <button \r\n            onClick={() => setShowHelpPanel(true)}\r\n            className=\"hover:underline text-black font-semibold uppercase\"\r\n          >\r\n            Cần giúp đỡ?\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Full Image Modal */}\r\n      {showFullImage && (\r\n        <div \r\n          className=\"fixed inset-0 bg-black bg-opacity-75 z-50 overflow-y-auto\" \r\n          onClick={() => setShowFullImage(false)}\r\n        >\r\n          <div className=\"min-h-screen w-full flex justify-center items-start\">\r\n            <Image\r\n              src={product.images && product.images[currentImageIndex] ? product.images[currentImageIndex] : \"/placeholder.jpg\"}\r\n              alt={product.name}\r\n              width={2000}\r\n              height={2000}\r\n              quality={100}\r\n              className=\"object-contain w-full\"\r\n              style={{ height: \"auto\" }}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Help Panel */}\r\n      {showHelpPanel && (\r\n        <HelpPanel onClose={() => setShowHelpPanel(false)} />\r\n      )}\r\n\r\n      {/* Size Guide Modal */}\r\n      {showSizeGuide && product.sizeGuideImage && (\r\n        <div \r\n          className=\"fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center\"\r\n          onClick={() => setShowSizeGuide(false)}\r\n        >\r\n          <div className=\"bg-white p-4 max-w-2xl w-full mx-4\">\r\n            <Image\r\n              src={product.sizeGuideImage}\r\n              alt=\"Size Guide\"\r\n              width={800}\r\n              height={1000}\r\n              className=\"w-full h-auto\"\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}