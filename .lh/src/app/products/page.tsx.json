{
    "sourceFile": "src/app/products/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1746893163116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747278124665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,13 @@\n import NoProductsMessage from \"@/components/NoProductsMessage\";\n import type { Product } from \"@/types/product\";\n import { useProductFilters } from \"@/hooks/useProductFilters\";\n \n+export const metadata = {\n+  title: 'Tất cả sản phẩm | AISH',\n+  description: 'Khám phá toàn bộ sản phẩm của AISH. Từ quần áo, phụ kiện đến giày dép, tất cả đều được thiết kế với chất liệu cao cấp và phong cách hiện đại.',\n+};\n+\n export default function ProductsPage() {\n   const [hoveredProduct, setHoveredProduct] = useState<string | null>(null);\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n   const [isAutoSliding, setIsAutoSliding] = useState<{ [key: string]: boolean }>({});\n"
                },
                {
                    "date": 1747278302718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n import { useProductFilters } from \"@/hooks/useProductFilters\";\n \n export const metadata = {\n   title: 'Tất cả sản phẩm | AISH',\n-  description: 'Khám phá toàn bộ sản phẩm của AISH. Từ quần áo, phụ kiện đến giày dép, tất cả đều được thiết kế với chất liệu cao cấp và phong cách hiện đại.',\n };\n \n export default function ProductsPage() {\n   const [hoveredProduct, setHoveredProduct] = useState<string | null>(null);\n"
                },
                {
                    "date": 1747279256468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,8 @@\n import NoProductsMessage from \"@/components/NoProductsMessage\";\n import type { Product } from \"@/types/product\";\n import { useProductFilters } from \"@/hooks/useProductFilters\";\n \n-export const metadata = {\n-  title: 'Tất cả sản phẩm | AISH',\n-};\n-\n export default function ProductsPage() {\n   const [hoveredProduct, setHoveredProduct] = useState<string | null>(null);\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n   const [isAutoSliding, setIsAutoSliding] = useState<{ [key: string]: boolean }>({});\n"
                },
                {
                    "date": 1747280570146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import SortSection from \"@/components/SortSection\";\n import NoProductsMessage from \"@/components/NoProductsMessage\";\n import type { Product } from \"@/types/product\";\n import { useProductFilters } from \"@/hooks/useProductFilters\";\n+import { LazyProductImage } from '@/components/lazy';\n \n export default function ProductsPage() {\n   const [hoveredProduct, setHoveredProduct] = useState<string | null>(null);\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n@@ -305,9 +306,20 @@\n             ) : (\n               <>\n                 <ProductGrid\n                   products={currentProducts}\n-                />\n+                >\n+                  {products.map((product) => (\n+                    <div key={product._id} className=\"product-card\">\n+                      <LazyProductImage\n+                        src={product.images[0]}\n+                        alt={product.name}\n+                        className=\"w-full h-[400px]\"\n+                      />\n+                      {/* ... rest of the product card ... */}\n+                    </div>\n+                  ))}\n+                </ProductGrid>\n                 {totalPages > 1 && (\n                   <div className=\"flex justify-center items-center mt-4 sm:mt-8 space-x-2 sm:space-x-4\">\n                     <button\n                       onClick={() => handlePageChange(currentPage - 1)}\n"
                },
                {
                    "date": 1747281531022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,22 +304,9 @@\n             {sortedProducts.length === 0 ? (\n               <NoProductsMessage resetFilters={() => { setSelectedColors([]); setSelectedSizes([]); }} />\n             ) : (\n               <>\n-                <ProductGrid\n-                  products={currentProducts}\n-                >\n-                  {products.map((product) => (\n-                    <div key={product._id} className=\"product-card\">\n-                      <LazyProductImage\n-                        src={product.images[0]}\n-                        alt={product.name}\n-                        className=\"w-full h-[400px]\"\n-                      />\n-                      {/* ... rest of the product card ... */}\n-                    </div>\n-                  ))}\n-                </ProductGrid>\n+                <ProductGrid products={currentProducts} />\n                 {totalPages > 1 && (\n                   <div className=\"flex justify-center items-center mt-4 sm:mt-8 space-x-2 sm:space-x-4\">\n                     <button\n                       onClick={() => handlePageChange(currentPage - 1)}\n"
                },
                {
                    "date": 1747296039042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import NoProductsMessage from \"@/components/NoProductsMessage\";\n import type { Product } from \"@/types/product\";\n import { useProductFilters } from \"@/hooks/useProductFilters\";\n import { LazyProductImage } from '@/components/lazy';\n+import { useLanguage } from \"@/context/LanguageContext\";\n \n export default function ProductsPage() {\n   const [hoveredProduct, setHoveredProduct] = useState<string | null>(null);\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n@@ -27,18 +28,20 @@\n   const [error, setError] = useState(\"\");\n   const pathname = usePathname();\n   const filterRef = useRef<HTMLDivElement>(null);\n   const sortRef = useRef<HTMLDivElement>(null);\n+  const { t } = useLanguage();\n+\n   const buttonRefs = {\n     products: useRef<HTMLButtonElement>(null),\n     filters: useRef<HTMLButtonElement>(null),\n     sort: useRef<HTMLButtonElement>(null),\n   };\n \n   const sortOptions = [\n-    { value: \"newest\", label: \"Newest\" },\n-    { value: \"price-high-to-low\", label: \"Price High-Low\" },\n-    { value: \"price-low-to-high\", label: \"Price Low-High\" }\n+    { value: \"newest\", label: t('products.sort.newest') },\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') },\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') }\n   ];\n \n   const handleSortChange = (value: string) => {\n     setSortOption(value);\n@@ -206,9 +209,9 @@\n           exit={{ opacity: 0, y: -10 }}\n           transition={{ duration: 0.5, ease: \"easeInOut\" }}\n           className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\n         >\n-          Thank you for choosing AISH. We truly appreciate it.\n+          {t('navbar.thankYou')}\n         </motion.div>\n       )}\n \n       <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\n@@ -220,9 +223,9 @@\n                 onMouseEnter={() => handleButtonHover(\"products\")}\n                 onMouseLeave={handleButtonLeave}\n                 className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\n               >\n-                All Products\n+                {t('products.allProducts')}\n                 <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n                   <motion.div\n                     className=\"absolute inset-0 bg-black\"\n                     initial={{ width: \"100%\", left: 0 }}\n@@ -240,43 +243,50 @@\n                   onMouseEnter={() => handleButtonHover(\"filters\")}\n                   onMouseLeave={handleButtonLeave}\n                   className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n                 >\n-                  <span className=\"px-1\">Filters</span>\n+                  <span className=\"px-1\">{t('products.filters')}</span>\n                   <svg\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n                     fill=\"none\"\n                     viewBox=\"0 0 24 24\"\n                     stroke=\"currentColor\"\n                   >\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n+                    <path\n+                      strokeLinecap=\"round\"\n+                      strokeLinejoin=\"round\"\n+                      strokeWidth={2}\n+                      d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\"\n+                    />\n                   </svg>\n-                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n-                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\n-                      <motion.div\n-                        className=\"absolute inset-0 bg-black\"\n-                        initial={{ width: 0, left: \"50%\" }}\n-                        animate={{ width: \"100%\", left: 0 }}\n-                        transition={{ duration: 0.25, ease: \"easeOut\" }}\n-                      />\n-                    )}\n-                  </div>\n                 </button>\n               </div>\n-              <SortSection\n-                isSortOpen={isSortOpen}\n-                sortRef={sortRef}\n-                selectedSort={sortOption}\n-                handleSortChange={handleSortChange}\n-                handleCloseSort={handleCloseSort}\n-                handleApplySort={handleApplySort}\n-                sortOptions={sortOptions}\n-                hoveredButton={hoveredButton}\n-                activeButton={activeButton}\n-                onMouseEnter={() => handleButtonHover(\"sort\")}\n-                onMouseLeave={handleButtonLeave}\n-              />\n+              <div className=\"inline-block\">\n+                <button\n+                  ref={buttonRefs.sort}\n+                  onClick={handleSortButtonClick}\n+                  onMouseEnter={() => handleButtonHover(\"sort\")}\n+                  onMouseLeave={handleButtonLeave}\n+                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n+                >\n+                  <span className=\"px-1\">{t('products.sort.title')}</span>\n+                  <svg\n+                    xmlns=\"http://www.w3.org/2000/svg\"\n+                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n+                    fill=\"none\"\n+                    viewBox=\"0 0 24 24\"\n+                    stroke=\"currentColor\"\n+                  >\n+                    <path\n+                      strokeLinecap=\"round\"\n+                      strokeLinejoin=\"round\"\n+                      strokeWidth={2}\n+                      d=\"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\"\n+                    />\n+                  </svg>\n+                </button>\n+              </div>\n             </div>\n \n             {isFilterOpen && (\n               <FilterSection\n"
                },
                {
                    "date": 1747296216806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,8 +258,16 @@\n                       strokeWidth={2}\n                       d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\"\n                     />\n                   </svg>\n+                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+                    <motion.div\n+                      className=\"absolute inset-0 bg-black\"\n+                      initial={{ width: \"100%\", left: 0 }}\n+                      animate={{ width: \"100%\", left: 0 }}\n+                      transition={{ duration: 0 }}\n+                    />\n+                  </div>\n                 </button>\n               </div>\n               <div className=\"inline-block\">\n                 <button\n@@ -283,8 +291,16 @@\n                       strokeWidth={2}\n                       d=\"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\"\n                     />\n                   </svg>\n+                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+                    <motion.div\n+                      className=\"absolute inset-0 bg-black\"\n+                      initial={{ width: \"100%\", left: 0 }}\n+                      animate={{ width: \"100%\", left: 0 }}\n+                      transition={{ duration: 0 }}\n+                    />\n+                  </div>\n                 </button>\n               </div>\n             </div>\n \n@@ -303,8 +319,20 @@\n                 capitalizeFirstLetter={(str: string) => str.charAt(0).toUpperCase() + str.slice(1)}\n                 groupedColors={colors}\n               />\n             )}\n+\n+            {isSortOpen && (\n+              <SortSection\n+                isSortOpen={isSortOpen}\n+                sortRef={sortRef}\n+                sortOptions={sortOptions}\n+                selectedSort={sortOption}\n+                onSortChange={handleSortChange}\n+                onClose={handleCloseSort}\n+                onApply={handleApplySort}\n+              />\n+            )}\n           </div>\n         </div>\n       </div>\n \n"
                },
                {
                    "date": 1747296228351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,11 +326,11 @@\n                 isSortOpen={isSortOpen}\n                 sortRef={sortRef}\n                 sortOptions={sortOptions}\n                 selectedSort={sortOption}\n-                onSortChange={handleSortChange}\n-                onClose={handleCloseSort}\n-                onApply={handleApplySort}\n+                handleSortChange={handleSortChange}\n+                handleCloseSort={handleCloseSort}\n+                handleApplySort={handleApplySort}\n               />\n             )}\n           </div>\n         </div>\n"
                },
                {
                    "date": 1747296326924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,17 +321,34 @@\n               />\n             )}\n \n             {isSortOpen && (\n-              <SortSection\n-                isSortOpen={isSortOpen}\n-                sortRef={sortRef}\n-                sortOptions={sortOptions}\n-                selectedSort={sortOption}\n-                handleSortChange={handleSortChange}\n-                handleCloseSort={handleCloseSort}\n-                handleApplySort={handleApplySort}\n-              />\n+              <motion.div\n+                initial={{ opacity: 0, y: -10 }}\n+                animate={{ opacity: 1, y: 0 }}\n+                exit={{ opacity: 0, y: -10 }}\n+                transition={{ duration: 0.3 }}\n+                className=\"absolute right-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n+                ref={sortRef}\n+              >\n+                <ul className=\"py-2\">\n+                  {sortOptions.map((option) => (\n+                    <li key={option.value}>\n+                      <button\n+                        onClick={() => {\n+                          handleSortChange(option.value);\n+                          handleCloseSort();\n+                        }}\n+                        className={`w-full text-left px-4 py-2 text-sm font-medium ${\n+                          sortOption === option.value ? \"bg-black text-white\" : \"text-black hover:bg-gray-100\"\n+                        }`}\n+                      >\n+                        {option.label}\n+                      </button>\n+                    </li>\n+                  ))}\n+                </ul>\n+              </motion.div>\n             )}\n           </div>\n         </div>\n       </div>\n"
                },
                {
                    "date": 1747296441670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,17 +268,20 @@\n                     />\n                   </div>\n                 </button>\n               </div>\n-              <div className=\"inline-block\">\n+              <div className=\"inline-block relative\">\n                 <button\n                   ref={buttonRefs.sort}\n                   onClick={handleSortButtonClick}\n                   onMouseEnter={() => handleButtonHover(\"sort\")}\n                   onMouseLeave={handleButtonLeave}\n                   className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n                 >\n-                  <span className=\"px-1\">{t('products.sort.title')}</span>\n+                  <span className=\"px-1\">\n+                    {t('products.sort.title')}\n+                    {sortOption && `: ${sortOptions.find(opt => opt.value === sortOption)?.label}`}\n+                  </span>\n                   <svg\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n                     fill=\"none\"\n@@ -300,8 +303,37 @@\n                       transition={{ duration: 0 }}\n                     />\n                   </div>\n                 </button>\n+\n+                {isSortOpen && (\n+                  <motion.div\n+                    initial={{ opacity: 0, y: -10 }}\n+                    animate={{ opacity: 1, y: 0 }}\n+                    exit={{ opacity: 0, y: -10 }}\n+                    transition={{ duration: 0.3 }}\n+                    className=\"absolute top-full left-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n+                    ref={sortRef}\n+                  >\n+                    <ul className=\"py-2\">\n+                      {sortOptions.map((option) => (\n+                        <li key={option.value}>\n+                          <button\n+                            onClick={() => {\n+                              handleSortChange(option.value);\n+                              handleCloseSort();\n+                            }}\n+                            className={`w-full text-left px-4 py-2 text-sm font-medium ${\n+                              sortOption === option.value ? \"bg-black text-white\" : \"text-black hover:bg-gray-100\"\n+                            }`}\n+                          >\n+                            {option.label}\n+                          </button>\n+                        </li>\n+                      ))}\n+                    </ul>\n+                  </motion.div>\n+                )}\n               </div>\n             </div>\n \n             {isFilterOpen && (\n@@ -319,37 +351,8 @@\n                 capitalizeFirstLetter={(str: string) => str.charAt(0).toUpperCase() + str.slice(1)}\n                 groupedColors={colors}\n               />\n             )}\n-\n-            {isSortOpen && (\n-              <motion.div\n-                initial={{ opacity: 0, y: -10 }}\n-                animate={{ opacity: 1, y: 0 }}\n-                exit={{ opacity: 0, y: -10 }}\n-                transition={{ duration: 0.3 }}\n-                className=\"absolute right-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n-                ref={sortRef}\n-              >\n-                <ul className=\"py-2\">\n-                  {sortOptions.map((option) => (\n-                    <li key={option.value}>\n-                      <button\n-                        onClick={() => {\n-                          handleSortChange(option.value);\n-                          handleCloseSort();\n-                        }}\n-                        className={`w-full text-left px-4 py-2 text-sm font-medium ${\n-                          sortOption === option.value ? \"bg-black text-white\" : \"text-black hover:bg-gray-100\"\n-                        }`}\n-                      >\n-                        {option.label}\n-                      </button>\n-                    </li>\n-                  ))}\n-                </ul>\n-              </motion.div>\n-            )}\n           </div>\n         </div>\n       </div>\n \n"
                },
                {
                    "date": 1747296564542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,9 @@\n                     exit={{ opacity: 0, y: -10 }}\n                     transition={{ duration: 0.3 }}\n                     className=\"absolute top-full left-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n                     ref={sortRef}\n+                    style={{ transform: 'translateX(-100%)' }}\n                   >\n                     <ul className=\"py-2\">\n                       {sortOptions.map((option) => (\n                         <li key={option.value}>\n"
                },
                {
                    "date": 1747296594949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,9 +312,8 @@\n                     exit={{ opacity: 0, y: -10 }}\n                     transition={{ duration: 0.3 }}\n                     className=\"absolute top-full left-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n                     ref={sortRef}\n-                    style={{ transform: 'translateX(-100%)' }}\n                   >\n                     <ul className=\"py-2\">\n                       {sortOptions.map((option) => (\n                         <li key={option.value}>\n"
                },
                {
                    "date": 1747296647012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                   />\n                 </div>\n               </button>\n             </div>\n-            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6\">\n+            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-20px]\">\n               <div className=\"inline-block\">\n                 <button\n                   ref={buttonRefs.filters}\n                   onClick={handleFilterButtonClick}\n"
                },
                {
                    "date": 1747296747543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                   />\n                 </div>\n               </button>\n             </div>\n-            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-20px]\">\n+            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-10px]\">\n               <div className=\"inline-block\">\n                 <button\n                   ref={buttonRefs.filters}\n                   onClick={handleFilterButtonClick}\n"
                },
                {
                    "date": 1747296788620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                   />\n                 </div>\n               </button>\n             </div>\n-            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-10px]\">\n+            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-1px]\">\n               <div className=\"inline-block\">\n                 <button\n                   ref={buttonRefs.filters}\n                   onClick={handleFilterButtonClick}\n"
                },
                {
                    "date": 1747296806838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                   />\n                 </div>\n               </button>\n             </div>\n-            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-1px]\">\n+            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-100px]\">\n               <div className=\"inline-block\">\n                 <button\n                   ref={buttonRefs.filters}\n                   onClick={handleFilterButtonClick}\n"
                },
                {
                    "date": 1747296835473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                   />\n                 </div>\n               </button>\n             </div>\n-            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-100px]\">\n+            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6 ml-[-20px]\">\n               <div className=\"inline-block\">\n                 <button\n                   ref={buttonRefs.filters}\n                   onClick={handleFilterButtonClick}\n"
                },
                {
                    "date": 1747296910873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n                     initial={{ opacity: 0, y: -10 }}\n                     animate={{ opacity: 1, y: 0 }}\n                     exit={{ opacity: 0, y: -10 }}\n                     transition={{ duration: 0.3 }}\n-                    className=\"absolute top-full left-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n+                    className=\"absolute top-full right-0 mt-1 bg-white border border-gray-200 shadow-md z-10 min-w-[200px]\"\n                     ref={sortRef}\n                   >\n                     <ul className=\"py-2\">\n                       {sortOptions.map((option) => (\n"
                },
                {
                    "date": 1747300147437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -359,9 +359,14 @@\n       <div className=\"px-0 sm:px-0 md:px-0 lg:px-0 mt-4 sm:mt-8\">\n         <div className=\"w-full\">\n           <main className=\"max-w-full mx-auto\">\n             {sortedProducts.length === 0 ? (\n-              <NoProductsMessage resetFilters={() => { setSelectedColors([]); setSelectedSizes([]); }} />\n+              <NoProductsMessage \n+                resetFilters={() => { setSelectedColors([]); setSelectedSizes([]); }}\n+                noProductsText={t('products.filter.noProducts')}\n+                tryAgainText={t('products.filter.tryAgain')}\n+                resetFiltersText={t('products.filter.resetFilters')}\n+              />\n             ) : (\n               <>\n                 <ProductGrid products={currentProducts} />\n                 {totalPages > 1 && (\n"
                },
                {
                    "date": 1747300926502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n   const [products, setProducts] = useState<Product[]>([]);\n   const [isLoading, setIsLoading] = useState(true);\n   const [error, setError] = useState(\"\");\n   const pathname = usePathname();\n-  const filterRef = useRef<HTMLDivElement>(null);\n-  const sortRef = useRef<HTMLDivElement>(null);\n+  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n+  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n   const { t } = useLanguage();\n \n   const buttonRefs = {\n     products: useRef<HTMLButtonElement>(null),\n"
                },
                {
                    "date": 1747300937073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,15 @@\n                 colors={colors}\n                 sizes={sizes}\n                 capitalizeFirstLetter={(str: string) => str.charAt(0).toUpperCase() + str.slice(1)}\n                 groupedColors={colors}\n+                title={t('products.filter.title')}\n+                colorLabel={t('products.filter.color')}\n+                sizeLabel={t('products.filter.size')}\n+                applyLabel={t('products.filter.apply')}\n+                resetLabel={t('products.filter.reset')}\n+                allColorsLabel={t('products.filter.allColors')}\n+                allSizesLabel={t('products.filter.allSizes')}\n               />\n             )}\n           </div>\n         </div>\n"
                },
                {
                    "date": 1747301330657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,9 +367,13 @@\n         <div className=\"w-full\">\n           <main className=\"max-w-full mx-auto\">\n             {sortedProducts.length === 0 ? (\n               <NoProductsMessage \n-                resetFilters={() => { setSelectedColors([]); setSelectedSizes([]); }}\n+                resetFilters={() => { \n+                  setSelectedColors([]); \n+                  setSelectedSizes([]); \n+                  setSortOption(\"newest\");\n+                }}\n                 noProductsText={t('products.filter.noProducts')}\n                 tryAgainText={t('products.filter.tryAgain')}\n                 resetFiltersText={t('products.filter.resetFilters')}\n               />\n"
                },
                {
                    "date": 1747322851526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,8 +181,20 @@\n     setCurrentPage(pageNumber);\n     window.scrollTo({ top: 0, behavior: \"smooth\" });\n   };\n \n+  const colorLabels = [\n+    { value: \"black\", label: t('products.filter.colorBlack') },\n+    { value: \"white\", label: t('products.filter.colorWhite') },\n+    { value: \"blue\", label: t('products.filter.colorBlue') },\n+    { value: \"grey\", label: t('products.filter.colorGrey') },\n+  ];\n+  const sizeLabels = [\n+    { value: \"M\", label: t('products.filter.sizeM') },\n+    { value: \"L\", label: t('products.filter.sizeL') },\n+    { value: \"XL\", label: t('products.filter.sizeXL') },\n+  ];\n+\n   if (isLoading) {\n     return (\n       <div className=\"flex justify-center items-center min-h-screen\">\n         <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n@@ -345,19 +357,23 @@\n                 handleColorChange={handleColorChange}\n                 handleSizeChange={handleSizeChange}\n                 handleCloseFilter={() => setIsFilterOpen(false)}\n                 handleApplyFilter={() => setIsFilterOpen(false)}\n-                colors={colors}\n-                sizes={sizes}\n+                colors={colorLabels.map(c => c.value)}\n+                sizes={sizeLabels.map(s => s.value)}\n                 capitalizeFirstLetter={(str: string) => str.charAt(0).toUpperCase() + str.slice(1)}\n-                groupedColors={colors}\n+                groupedColors={colorLabels.map(c => c.value)}\n                 title={t('products.filter.title')}\n-                colorLabel={t('products.filter.color')}\n-                sizeLabel={t('products.filter.size')}\n+                colorLabel={t('products.filter.colorLabel')}\n+                sizeLabel={t('products.filter.sizeLabel')}\n                 applyLabel={t('products.filter.apply')}\n                 resetLabel={t('products.filter.reset')}\n                 allColorsLabel={t('products.filter.allColors')}\n                 allSizesLabel={t('products.filter.allSizes')}\n+                selectHint={t('products.filter.selectHint')}\n+                closeLabel={t('products.filter.close')}\n+                colorLabels={colorLabels}\n+                sizeLabels={sizeLabels}\n               />\n             )}\n           </div>\n         </div>\n"
                },
                {
                    "date": 1747639389207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,18 +382,9 @@\n       <div className=\"px-0 sm:px-0 md:px-0 lg:px-0 mt-4 sm:mt-8\">\n         <div className=\"w-full\">\n           <main className=\"max-w-full mx-auto\">\n             {sortedProducts.length === 0 ? (\n-              <NoProductsMessage \n-                resetFilters={() => { \n-                  setSelectedColors([]); \n-                  setSelectedSizes([]); \n-                  setSortOption(\"newest\");\n-                }}\n-                noProductsText={t('products.filter.noProducts')}\n-                tryAgainText={t('products.filter.tryAgain')}\n-                resetFiltersText={t('products.filter.resetFilters')}\n-              />\n+              <NoProductsMessage />\n             ) : (\n               <>\n                 <ProductGrid products={currentProducts} />\n                 {totalPages > 1 && (\n"
                },
                {
                    "date": 1749616486536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n   const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n     useProductFilters(products);\n \n-  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\n+  const colors = [\"black\", \"white\", \"blue\", \"grey\", \"beige\"];\n \n   const sizes = [\"m\", \"l\", \"xl\"];\n \n   const handlePrevImage = (e: React.MouseEvent, productId: string) => {\n@@ -186,8 +186,9 @@\n     { value: \"black\", label: t('products.filter.colorBlack') },\n     { value: \"white\", label: t('products.filter.colorWhite') },\n     { value: \"blue\", label: t('products.filter.colorBlue') },\n     { value: \"grey\", label: t('products.filter.colorGrey') },\n+    { value: \"beige\", label: t('products.filter.colorBeige') },\n   ];\n   const sizeLabels = [\n     { value: \"M\", label: t('products.filter.sizeM') },\n     { value: \"L\", label: t('products.filter.sizeL') },\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { usePathname } from \"next/navigation\";\nimport ProductGrid from \"@/components/ProductGrid\";\nimport FilterSection from \"@/components/FilterSection\";\nimport SortSection from \"@/components/SortSection\";\nimport NoProductsMessage from \"@/components/NoProductsMessage\";\nimport type { Product } from \"@/types/product\";\nimport { useProductFilters } from \"@/hooks/useProductFilters\";\n\nexport default function ProductsPage() {\n  const [hoveredProduct, setHoveredProduct] = useState<string | null>(null);\n  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n  const [isAutoSliding, setIsAutoSliding] = useState<{ [key: string]: boolean }>({});\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  const [isSortOpen, setIsSortOpen] = useState(false);\n  const [activeButton, setActiveButton] = useState(\"products\");\n  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [productsPerPage] = useState(8);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const pathname = usePathname();\n  const filterRef = useRef<HTMLDivElement>(null);\n  const sortRef = useRef<HTMLDivElement>(null);\n  const buttonRefs = {\n    products: useRef<HTMLButtonElement>(null),\n    filters: useRef<HTMLButtonElement>(null),\n    sort: useRef<HTMLButtonElement>(null),\n  };\n\n  const sortOptions = [\n    { value: \"newest\", label: \"Newest\" },\n    { value: \"price-high-to-low\", label: \"Price High-Low\" },\n    { value: \"price-low-to-high\", label: \"Price Low-High\" }\n  ];\n\n  const handleSortChange = (value: string) => {\n    setSortOption(value);\n    setCurrentPage(1);\n  };\n\n  const handleCloseSort = () => setIsSortOpen(false);\n  const handleApplySort = () => setIsSortOpen(!isSortOpen);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const response = await fetch('/api/products');\n        const data = await response.json();\n        if (data.ok) {\n          setProducts(data.products);\n        } else {\n          setError(data.error || 'Failed to fetch products');\n        }\n      } catch (error) {\n        setError('Failed to fetch products');\n        console.error('Error fetching products:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchProducts();\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (filterRef.current && !filterRef.current.contains(event.target as Node)) {\n        setIsFilterOpen(false);\n      }\n      if (sortRef.current && !sortRef.current.contains(event.target as Node)) {\n        setIsSortOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n    useProductFilters(products);\n\n  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\n\n  const sizes = [\"m\", \"l\", \"xl\"];\n\n  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\n    e.preventDefault();\n    const product = products.find(p => p._id === productId);\n    if (product) {\n      const currentIndex = productImageIndex[productId] || 0;\n      const prevIndex = (currentIndex - 1 + product.images.length) % product.images.length;\n      setProductImageIndex(prev => ({ ...prev, [productId]: prevIndex }));\n    }\n  };\n\n  const handleNextImage = (e: React.MouseEvent, productId: string) => {\n    e.preventDefault();\n    const product = products.find(p => p._id === productId);\n    if (product) {\n      const currentIndex = productImageIndex[productId] || 0;\n      const nextIndex = (currentIndex + 1) % product.images.length;\n      setProductImageIndex(prev => ({ ...prev, [productId]: nextIndex }));\n    }\n  };\n\n  const handleHover = (productId: string) => {\n    setHoveredProduct(productId);\n    setIsAutoSliding(prev => ({ ...prev, [productId]: true }));\n    if (!productImageIndex[productId]) {\n      setProductImageIndex(prev => ({ ...prev, [productId]: 0 }));\n    }\n  };\n\n  const handleLeave = () => {\n    setHoveredProduct(null);\n    setIsAutoSliding({});\n    setProductImageIndex({});\n  };\n\n  const handleColorChange = (color: string) => {\n    if (color === \"all\") {\n      setSelectedColors([]);\n    } else {\n      setSelectedColors((prev: string[]) => \n        prev.includes(color) \n          ? prev.filter((c: string) => c !== color)\n          : [...prev, color]\n      );\n    }\n    setCurrentPage(1);\n  };\n\n  const handleSizeChange = (size: string) => {\n    if (size === \"all\") {\n      setSelectedSizes([]);\n    } else {\n      setSelectedSizes((prev: string[]) => \n        prev.includes(size) \n          ? prev.filter((s: string) => s !== size)\n          : [...prev, size]\n      );\n    }\n    setCurrentPage(1);\n  };\n\n  const handleFilterButtonClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsFilterOpen(!isFilterOpen);\n    setIsSortOpen(false);\n    setActiveButton(\"filters\");\n  };\n\n  const handleSortButtonClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsSortOpen(!isSortOpen);\n    setIsFilterOpen(false);\n    setActiveButton(\"sort\");\n  };\n\n  const handleButtonHover = (buttonName: string) => setHoveredButton(buttonName);\n  const handleButtonLeave = () => setHoveredButton(null);\n\n  const indexOfLastProduct = currentPage * productsPerPage;\n  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\n  const currentProducts = sortedProducts.slice(indexOfFirstProduct, indexOfLastProduct);\n  const totalPages = Math.ceil(sortedProducts.length / productsPerPage);\n\n  const handlePageChange = (pageNumber: number) => {\n    setCurrentPage(pageNumber);\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex justify-center items-center min-h-screen\">\n        <p className=\"text-red-500\">{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"h-[60px]\"></div>\n\n      {!isScrolled && ![\"/login\", \"/register\"].includes(pathname) && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -10 }}\n          transition={{ duration: 0.5, ease: \"easeInOut\" }}\n          className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\n        >\n          Thank you for choosing AISH. We truly appreciate it.\n        </motion.div>\n      )}\n\n      <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\n        <div className=\"px-2 sm:px-4 md:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center relative\">\n            <div className=\"inline-block\">\n              <button\n                ref={buttonRefs.products}\n                onMouseEnter={() => handleButtonHover(\"products\")}\n                onMouseLeave={handleButtonLeave}\n                className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\n              >\n                All Products\n                <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n                  <motion.div\n                    className=\"absolute inset-0 bg-black\"\n                    initial={{ width: \"100%\", left: 0 }}\n                    animate={{ width: \"100%\", left: 0 }}\n                    transition={{ duration: 0 }}\n                  />\n                </div>\n              </button>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6\">\n              <div className=\"inline-block\">\n                <button\n                  ref={buttonRefs.filters}\n                  onClick={handleFilterButtonClick}\n                  onMouseEnter={() => handleButtonHover(\"filters\")}\n                  onMouseLeave={handleButtonLeave}\n                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n                >\n                  <span className=\"px-1\">Filters</span>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\n                      <motion.div\n                        className=\"absolute inset-0 bg-black\"\n                        initial={{ width: 0, left: \"50%\" }}\n                        animate={{ width: \"100%\", left: 0 }}\n                        transition={{ duration: 0.25, ease: \"easeOut\" }}\n                      />\n                    )}\n                  </div>\n                </button>\n              </div>\n              <SortSection\n                isSortOpen={isSortOpen}\n                sortRef={sortRef}\n                selectedSort={sortOption}\n                handleSortChange={handleSortChange}\n                handleCloseSort={handleCloseSort}\n                handleApplySort={handleApplySort}\n                sortOptions={sortOptions}\n                hoveredButton={hoveredButton}\n                activeButton={activeButton}\n                onMouseEnter={() => handleButtonHover(\"sort\")}\n                onMouseLeave={handleButtonLeave}\n              />\n            </div>\n\n            {isFilterOpen && (\n              <FilterSection\n                isFilterOpen={isFilterOpen}\n                filterRef={filterRef}\n                selectedColors={selectedColors}\n                selectedSizes={selectedSizes}\n                handleColorChange={handleColorChange}\n                handleSizeChange={handleSizeChange}\n                handleCloseFilter={() => setIsFilterOpen(false)}\n                handleApplyFilter={() => setIsFilterOpen(false)}\n                colors={colors}\n                sizes={sizes}\n                capitalizeFirstLetter={(str: string) => str.charAt(0).toUpperCase() + str.slice(1)}\n                groupedColors={colors}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-0 sm:px-0 md:px-0 lg:px-0 mt-4 sm:mt-8\">\n        <div className=\"w-full\">\n          <main className=\"max-w-full mx-auto\">\n            {sortedProducts.length === 0 ? (\n              <NoProductsMessage resetFilters={() => { setSelectedColors([]); setSelectedSizes([]); }} />\n            ) : (\n              <>\n                <ProductGrid\n                  products={currentProducts}\n                />\n                {totalPages > 1 && (\n                  <div className=\"flex justify-center items-center mt-4 sm:mt-8 space-x-2 sm:space-x-4\">\n                    <button\n                      onClick={() => handlePageChange(currentPage - 1)}\n                      disabled={currentPage === 1}\n                      className=\"px-2 py-1 sm:px-4 sm:py-2 text-[10px] sm:text-sm font-medium text-black bg-gray-100 rounded hover:bg-gray-200 disabled:opacity-50\"\n                    >\n                      Previous\n                    </button>\n                    <div className=\"flex space-x-1 sm:space-x-2\">\n                      {Array.from({ length: totalPages }, (_, index) => (\n                        <button\n                          key={index + 1}\n                          onClick={() => handlePageChange(index + 1)}\n                          className={`px-2 py-1 text-[10px] sm:text-sm font-medium rounded ${\n                            currentPage === index + 1 ? \"bg-black text-white\" : \"bg-gray-100 text-black hover:bg-gray-200\"\n                          }`}\n                        >\n                          {index + 1}\n                        </button>\n                      ))}\n                    </div>\n                    <button\n                      onClick={() => handlePageChange(currentPage + 1)}\n                      disabled={currentPage === totalPages}\n                      className=\"px-2 py-1 sm:px-4 sm:py-2 text-[10px] sm:text-sm font-medium text-black bg-gray-100 rounded hover:bg-gray-200 disabled:opacity-50\"\n                    >\n                      Next\n                    </button>\n                  </div>\n                )}\n              </>\n            )}\n          </main>\n        </div>\n      </div>\n\n      <footer className=\"py-8 sm:py-12 mt-12 sm:mt-16 border-t border-gray-100 text-left sm:text-center px-2 sm:px-4 md:px-6 lg:px-8\">\n        <p className=\"text-[10px] sm:text-xs text-gray-400 uppercase tracking-wider\">© 2025 AISH. All Rights Reserved.</p>\n      </footer>\n    </div>\n  );\n} "
        }
    ]
}