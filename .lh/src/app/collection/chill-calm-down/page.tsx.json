{
    "sourceFile": "src/app/collection/chill-calm-down/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746893162788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747320319112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,18 +6,20 @@\n import SortSection from \"../../../components/SortSection\";\r\n import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n import { Product } from \"../../../types/product\";\r\n import { motion } from \"framer-motion\";\r\n+import { useLanguage } from \"@/context/LanguageContext\";\r\n \r\n export default function ChillCalmDownPage() {\r\n   const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n   const [products, setProducts] = useState<Product[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n-  const filterRef = useRef<HTMLDivElement>(null);\r\n-  const sortRef = useRef<HTMLDivElement>(null);\r\n+  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n+  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n   const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n+  const { t } = useLanguage();\r\n \r\n   useEffect(() => {\r\n     const fetchProducts = async () => {\r\n       try {\r\n@@ -41,11 +43,31 @@\n \r\n   const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n     useProductFilters(products);\r\n \r\n-  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n-  const sizes = [\"M\", \"L\", \"XL\"];\r\n+  const colorLabels = [\r\n+    { value: \"black\", label: t('products.filter.colorBlack') },\r\n+    { value: \"white\", label: t('products.filter.colorWhite') },\r\n+    { value: \"blue\", label: t('products.filter.colorBlue') },\r\n+    { value: \"grey\", label: t('products.filter.colorGrey') },\r\n+  ];\r\n+  const sizeLabels = [\r\n+    { value: \"M\", label: t('products.filter.sizeM') },\r\n+    { value: \"L\", label: t('products.filter.sizeL') },\r\n+    { value: \"XL\", label: t('products.filter.sizeXL') },\r\n+  ];\r\n \r\n+  const groupColorsByFirstLetter = () => {\r\n+    const grouped: { [key: string]: string[] } = { a: [\"all\"] };\r\n+    colorLabels.forEach((color) => {\r\n+      const firstLetter = color.value.charAt(0).toLowerCase();\r\n+      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n+      grouped[firstLetter].push(color.value);\r\n+    });\r\n+    const sortedLetters = Object.keys(grouped).sort();\r\n+    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], [] as string[]);\r\n+  };\r\n+\r\n   const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n     e.preventDefault();\r\n     setProductImageIndex(prev => ({\r\n       ...prev,\r\n@@ -126,11 +148,11 @@\n     return str.charAt(0).toUpperCase() + str.slice(1);\r\n   };\r\n \r\n   const sortOptions = [\r\n-    { value: \"newest\", label: \"Newest\" },\r\n-    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n-    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n+    { value: \"newest\", label: t('products.sort.newest') },\r\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n   ];\r\n \r\n   useEffect(() => {\r\n     const handleClickOutside = (event: MouseEvent) => {\r\n@@ -149,93 +171,119 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <div className=\"w-full px-0 py-8 bg-white\">\r\n-      <h1 className=\"text-2xl font-bold mb-8 text-center\">CHILL, CALM DOWN</h1>\r\n-      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n-        <button\r\n-          onMouseEnter={() => setHoveredButton(\"collection\")}\r\n-          onMouseLeave={() => setHoveredButton(null)}\r\n-          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n-          style={{ background: \"none\", border: \"none\" }}\r\n-        >\r\n-          CHILL, CALM DOWN\r\n-          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-            <motion.div\r\n-              className=\"absolute inset-0 bg-black\"\r\n-              initial={{ width: \"100%\", left: 0 }}\r\n-              animate={{ width: \"100%\", left: 0 }}\r\n-              transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-            />\r\n-          </div>\r\n-        </button>\r\n-        <div className=\"flex items-center space-x-4\">\r\n+    <div className=\"min-h-screen bg-white\">\r\n+      <div className=\"h-[60px]\"></div>\r\n+\r\n+      <motion.div\r\n+        initial={{ opacity: 0, y: -10 }}\r\n+        animate={{ opacity: 1, y: 0 }}\r\n+        exit={{ opacity: 0, y: -10 }}\r\n+        transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n+        className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n+      >\r\n+        {t('navbar.thankYou')}\r\n+      </motion.div>\r\n+\r\n+      <div className=\"w-full px-0 py-8 bg-white\">\r\n+        <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n           <button\r\n-            onClick={() => setIsFilterOpen(true)}\r\n-            onMouseEnter={() => setHoveredButton(\"filters\")}\r\n+            onMouseEnter={() => setHoveredButton(\"collection\")}\r\n             onMouseLeave={() => setHoveredButton(null)}\r\n-            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n+            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n             style={{ background: \"none\", border: \"none\" }}\r\n           >\r\n-            <span className=\"px-1\">Filters</span>\r\n-            <svg\r\n-              xmlns=\"http://www.w3.org/2000/svg\"\r\n-              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n-              fill=\"none\"\r\n-              viewBox=\"0 0 24 24\"\r\n-              stroke=\"currentColor\"\r\n-            >\r\n-              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-            </svg>\r\n+            {t('collection.chillCalmDown')}\r\n             <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-              {(hoveredButton === \"filters\") && (\r\n-                <motion.div\r\n-                  className=\"absolute inset-0 bg-black\"\r\n-                  initial={{ width: 0, left: \"50%\" }}\r\n-                  animate={{ width: \"100%\", left: 0 }}\r\n-                  transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-                />\r\n-              )}\r\n+              <motion.div\r\n+                className=\"absolute inset-0 bg-black\"\r\n+                initial={{ width: \"100%\", left: 0 }}\r\n+                animate={{ width: \"100%\", left: 0 }}\r\n+                transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n+              />\r\n             </div>\r\n           </button>\r\n-          <SortSection\r\n-            isSortOpen={isSortOpen}\r\n-            sortRef={sortRef}\r\n-            selectedSort={sortOption}\r\n-            handleSortChange={(option) => setSortOption(option)}\r\n-            handleCloseSort={() => setIsSortOpen(false)}\r\n-            handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n-            sortOptions={sortOptions}\r\n-            onMouseEnter={() => setHoveredButton(\"sort\")}\r\n-            onMouseLeave={() => setHoveredButton(null)}\r\n+          <div className=\"flex items-center space-x-4\">\r\n+            <button\r\n+              onClick={() => setIsFilterOpen(true)}\r\n+              onMouseEnter={() => setHoveredButton(\"filters\")}\r\n+              onMouseLeave={() => setHoveredButton(null)}\r\n+              className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n+              style={{ background: \"none\", border: \"none\" }}\r\n+            >\r\n+              <span className=\"px-1\">{t('products.filters')}</span>\r\n+              <svg\r\n+                xmlns=\"http://www.w3.org/2000/svg\"\r\n+                className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n+                fill=\"none\"\r\n+                viewBox=\"0 0 24 24\"\r\n+                stroke=\"currentColor\"\r\n+              >\r\n+                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n+              </svg>\r\n+              <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n+                {(hoveredButton === \"filters\") && (\r\n+                  <motion.div\r\n+                    className=\"absolute inset-0 bg-black\"\r\n+                    initial={{ width: 0, left: \"50%\" }}\r\n+                    animate={{ width: \"100%\", left: 0 }}\r\n+                    transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n+                  />\r\n+                )}\r\n+              </div>\r\n+            </button>\r\n+            <SortSection\r\n+              isSortOpen={isSortOpen}\r\n+              sortRef={sortRef}\r\n+              selectedSort={sortOption}\r\n+              handleSortChange={(option) => setSortOption(option)}\r\n+              handleCloseSort={() => setIsSortOpen(false)}\r\n+              handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n+              sortOptions={sortOptions}\r\n+              onMouseEnter={() => setHoveredButton(\"sort\")}\r\n+              onMouseLeave={() => setHoveredButton(null)}\r\n+            />\r\n+          </div>\r\n+        </div>\r\n+\r\n+        <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n+          <FilterSection\r\n+            isFilterOpen={isFilterOpen}\r\n+            filterRef={filterRef}\r\n+            selectedColors={selectedColors}\r\n+            selectedSizes={selectedSizes}\r\n+            handleColorChange={handleColorChange}\r\n+            handleSizeChange={handleSizeChange}\r\n+            handleCloseFilter={() => setIsFilterOpen(false)}\r\n+            handleApplyFilter={() => setIsFilterOpen(false)}\r\n+            colors={colorLabels.map(c => c.value)}\r\n+            sizes={sizeLabels.map(s => s.value)}\r\n+            capitalizeFirstLetter={capitalizeFirstLetter}\r\n+            groupedColors={groupColorsByFirstLetter()}\r\n+            title={t('products.filter.title')}\r\n+            colorLabel={t('products.filter.colorLabel')}\r\n+            sizeLabel={t('products.filter.sizeLabel')}\r\n+            applyLabel={t('products.filter.apply')}\r\n+            resetLabel={t('products.filter.reset')}\r\n+            allColorsLabel={t('products.filter.allColors')}\r\n+            allSizesLabel={t('products.filter.allSizes')}\r\n+            selectHint={t('products.filter.selectHint')}\r\n+            closeLabel={t('products.filter.close')}\r\n+            colorLabels={colorLabels}\r\n+            sizeLabels={sizeLabels}\r\n           />\r\n         </div>\r\n-      </div>\r\n \r\n-      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n-        <FilterSection\r\n-          isFilterOpen={isFilterOpen}\r\n-          filterRef={filterRef}\r\n-          selectedColors={selectedColors}\r\n-          selectedSizes={selectedSizes}\r\n-          handleColorChange={handleColorChange}\r\n-          handleSizeChange={handleSizeChange}\r\n-          handleCloseFilter={() => setIsFilterOpen(false)}\r\n-          handleApplyFilter={() => setIsFilterOpen(false)}\r\n-          colors={colors}\r\n-          sizes={sizes}\r\n-          capitalizeFirstLetter={capitalizeFirstLetter}\r\n-          groupedColors={colors}\r\n-        />\r\n+        {sortedProducts.length > 0 ? (\r\n+          <ProductGrid \r\n+            products={sortedProducts}\r\n+          />\r\n+        ) : (\r\n+          <NoProductsMessage />\r\n+        )}\r\n+        \r\n+        <div className=\"pb-20 mb-10\"></div>\r\n       </div>\r\n-\r\n-      {sortedProducts.length > 0 ? (\r\n-        <ProductGrid \r\n-          products={sortedProducts}\r\n-        />\r\n-      ) : (\r\n-        <NoProductsMessage resetFilters={resetFilters} />\r\n-      )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747320694710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,289 +1,289 @@\n-\"use client\";\r\n-import { useState, useEffect, useRef } from \"react\";\r\n-import { useProductFilters } from \"../../../hooks/useProductFilters\";\r\n-import ProductGrid from \"../../../components/ProductGrid\";\r\n-import FilterSection from \"../../../components/FilterSection\";\r\n-import SortSection from \"../../../components/SortSection\";\r\n-import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n-import { Product } from \"../../../types/product\";\r\n-import { motion } from \"framer-motion\";\r\n-import { useLanguage } from \"@/context/LanguageContext\";\r\n-\r\n-export default function ChillCalmDownPage() {\r\n-  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n-  const [isSortOpen, setIsSortOpen] = useState(false);\r\n-  const [products, setProducts] = useState<Product[]>([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n-  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n-  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n-  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n-  const { t } = useLanguage();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchProducts = async () => {\r\n-      try {\r\n-        const response = await fetch('/api/products');\r\n-        const data = await response.json();\r\n-        if (data.ok) {\r\n-          const filteredProducts = data.products.filter(\r\n-            (product: Product) => product.collection === \"CHILL, CALM DOWN\"\r\n-          );\r\n-          setProducts(filteredProducts);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error fetching products:', error);\r\n-      } finally {\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchProducts();\r\n-  }, []);\r\n-\r\n-  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n-    useProductFilters(products);\r\n-\r\n-  const colorLabels = [\r\n-    { value: \"black\", label: t('products.filter.colorBlack') },\r\n-    { value: \"white\", label: t('products.filter.colorWhite') },\r\n-    { value: \"blue\", label: t('products.filter.colorBlue') },\r\n-    { value: \"grey\", label: t('products.filter.colorGrey') },\r\n-  ];\r\n-  const sizeLabels = [\r\n-    { value: \"M\", label: t('products.filter.sizeM') },\r\n-    { value: \"L\", label: t('products.filter.sizeL') },\r\n-    { value: \"XL\", label: t('products.filter.sizeXL') },\r\n-  ];\r\n-\r\n-  const groupColorsByFirstLetter = () => {\r\n-    const grouped: { [key: string]: string[] } = { a: [\"all\"] };\r\n-    colorLabels.forEach((color) => {\r\n-      const firstLetter = color.value.charAt(0).toLowerCase();\r\n-      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n-      grouped[firstLetter].push(color.value);\r\n-    });\r\n-    const sortedLetters = Object.keys(grouped).sort();\r\n-    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], [] as string[]);\r\n-  };\r\n-\r\n-  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n-    e.preventDefault();\r\n-    setProductImageIndex(prev => ({\r\n-      ...prev,\r\n-      [productId]: (prev[productId] || 0) - 1\r\n-    }));\r\n-  };\r\n-\r\n-  const handleNextImage = (e: React.MouseEvent, productId: string) => {\r\n-    e.preventDefault();\r\n-    setProductImageIndex(prev => ({\r\n-      ...prev,\r\n-      [productId]: (prev[productId] || 0) + 1\r\n-    }));\r\n-  };\r\n-\r\n-  const handleHover = (productId: string) => {\r\n-    setProductImageIndex(prev => ({\r\n-      ...prev,\r\n-      [productId]: 1\r\n-    }));\r\n-  };\r\n-\r\n-  const handleLeave = () => {\r\n-    setProductImageIndex({});\r\n-  };\r\n-\r\n-  const resetFilters = () => {\r\n-    setSelectedColors([]);\r\n-    setSelectedSizes([]);\r\n-    setSortOption(\"newest\");\r\n-  };\r\n-\r\n-  const handleColorChange = (color: string) => {\r\n-    if (color === \"all\") {\r\n-      setSelectedColors([]);\r\n-    } else {\r\n-      setSelectedColors(prev => \r\n-        prev.includes(color) \r\n-          ? prev.filter(c => c !== color)\r\n-          : [...prev, color]\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  const handleSizeChange = (size: string) => {\r\n-    if (size === \"all\") {\r\n-      setSelectedSizes([]);\r\n-    } else {\r\n-      setSelectedSizes(prev => \r\n-        prev.includes(size) \r\n-          ? prev.filter(s => s !== size)\r\n-          : [...prev, size]\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  const handleCloseFilter = () => {\r\n-    setIsFilterOpen(false);\r\n-  };\r\n-\r\n-  const handleApplyFilter = () => {\r\n-    setIsFilterOpen(false);\r\n-  };\r\n-\r\n-  const handleCloseSort = () => {\r\n-    setIsSortOpen(false);\r\n-  };\r\n-\r\n-  const handleApplySort = () => {\r\n-    setIsSortOpen(!isSortOpen);\r\n-  };\r\n-\r\n-  const handleSortChange = (value: string) => {\r\n-    setSortOption(value);\r\n-  };\r\n-\r\n-  const capitalizeFirstLetter = (str: string) => {\r\n-    return str.charAt(0).toUpperCase() + str.slice(1);\r\n-  };\r\n-\r\n-  const sortOptions = [\r\n-    { value: \"newest\", label: t('products.sort.newest') },\r\n-    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n-    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n-  ];\r\n-\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (event: MouseEvent) => {\r\n-      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n-      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n-    };\r\n-    document.addEventListener(\"mousedown\", handleClickOutside);\r\n-    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n-  }, []);\r\n-\r\n-  if (isLoading) {\r\n-    return (\r\n-      <div className=\"flex justify-center items-center min-h-screen\">\r\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"min-h-screen bg-white\">\r\n-      <div className=\"h-[60px]\"></div>\r\n-\r\n-      <motion.div\r\n-        initial={{ opacity: 0, y: -10 }}\r\n-        animate={{ opacity: 1, y: 0 }}\r\n-        exit={{ opacity: 0, y: -10 }}\r\n-        transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n-        className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n-      >\r\n-        {t('navbar.thankYou')}\r\n-      </motion.div>\r\n-\r\n-      <div className=\"w-full px-0 py-8 bg-white\">\r\n-        <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n-          <button\r\n-            onMouseEnter={() => setHoveredButton(\"collection\")}\r\n-            onMouseLeave={() => setHoveredButton(null)}\r\n-            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n-            style={{ background: \"none\", border: \"none\" }}\r\n-          >\r\n-            {t('collection.chillCalmDown')}\r\n-            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-              <motion.div\r\n-                className=\"absolute inset-0 bg-black\"\r\n-                initial={{ width: \"100%\", left: 0 }}\r\n-                animate={{ width: \"100%\", left: 0 }}\r\n-                transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-              />\r\n-            </div>\r\n-          </button>\r\n-          <div className=\"flex items-center space-x-4\">\r\n-            <button\r\n-              onClick={() => setIsFilterOpen(true)}\r\n-              onMouseEnter={() => setHoveredButton(\"filters\")}\r\n-              onMouseLeave={() => setHoveredButton(null)}\r\n-              className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n-              style={{ background: \"none\", border: \"none\" }}\r\n-            >\r\n-              <span className=\"px-1\">{t('products.filters')}</span>\r\n-              <svg\r\n-                xmlns=\"http://www.w3.org/2000/svg\"\r\n-                className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n-                fill=\"none\"\r\n-                viewBox=\"0 0 24 24\"\r\n-                stroke=\"currentColor\"\r\n-              >\r\n-                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-              </svg>\r\n-              <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-                {(hoveredButton === \"filters\") && (\r\n-                  <motion.div\r\n-                    className=\"absolute inset-0 bg-black\"\r\n-                    initial={{ width: 0, left: \"50%\" }}\r\n-                    animate={{ width: \"100%\", left: 0 }}\r\n-                    transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-                  />\r\n-                )}\r\n-              </div>\r\n-            </button>\r\n-            <SortSection\r\n-              isSortOpen={isSortOpen}\r\n-              sortRef={sortRef}\r\n-              selectedSort={sortOption}\r\n-              handleSortChange={(option) => setSortOption(option)}\r\n-              handleCloseSort={() => setIsSortOpen(false)}\r\n-              handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n-              sortOptions={sortOptions}\r\n-              onMouseEnter={() => setHoveredButton(\"sort\")}\r\n-              onMouseLeave={() => setHoveredButton(null)}\r\n-            />\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n-          <FilterSection\r\n-            isFilterOpen={isFilterOpen}\r\n-            filterRef={filterRef}\r\n-            selectedColors={selectedColors}\r\n-            selectedSizes={selectedSizes}\r\n-            handleColorChange={handleColorChange}\r\n-            handleSizeChange={handleSizeChange}\r\n-            handleCloseFilter={() => setIsFilterOpen(false)}\r\n-            handleApplyFilter={() => setIsFilterOpen(false)}\r\n-            colors={colorLabels.map(c => c.value)}\r\n-            sizes={sizeLabels.map(s => s.value)}\r\n-            capitalizeFirstLetter={capitalizeFirstLetter}\r\n-            groupedColors={groupColorsByFirstLetter()}\r\n-            title={t('products.filter.title')}\r\n-            colorLabel={t('products.filter.colorLabel')}\r\n-            sizeLabel={t('products.filter.sizeLabel')}\r\n-            applyLabel={t('products.filter.apply')}\r\n-            resetLabel={t('products.filter.reset')}\r\n-            allColorsLabel={t('products.filter.allColors')}\r\n-            allSizesLabel={t('products.filter.allSizes')}\r\n-            selectHint={t('products.filter.selectHint')}\r\n-            closeLabel={t('products.filter.close')}\r\n-            colorLabels={colorLabels}\r\n-            sizeLabels={sizeLabels}\r\n-          />\r\n-        </div>\r\n-\r\n-        {sortedProducts.length > 0 ? (\r\n-          <ProductGrid \r\n-            products={sortedProducts}\r\n-          />\r\n-        ) : (\r\n-          <NoProductsMessage />\r\n-        )}\r\n-        \r\n-        <div className=\"pb-20 mb-10\"></div>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n+\"use client\";\n+import { useState, useEffect, useRef } from \"react\";\n+import { useProductFilters } from \"../../../hooks/useProductFilters\";\n+import ProductGrid from \"../../../components/ProductGrid\";\n+import FilterSection from \"../../../components/FilterSection\";\n+import SortSection from \"../../../components/SortSection\";\n+import NoProductsMessage from \"../../../components/NoProductsMessage\";\n+import { Product } from \"../../../types/product\";\n+import { motion } from \"framer-motion\";\n+import { useLanguage } from \"@/context/LanguageContext\";\n+\n+export default function ChillCalmDownPage() {\n+  const [isFilterOpen, setIsFilterOpen] = useState(false);\n+  const [isSortOpen, setIsSortOpen] = useState(false);\n+  const [products, setProducts] = useState<Product[]>([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n+  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n+  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n+  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\n+  const { t } = useLanguage();\n+\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      try {\n+        const response = await fetch('/api/products');\n+        const data = await response.json();\n+        if (data.ok) {\n+          const filteredProducts = data.products.filter(\n+            (product: Product) => product.collection === \"CHILL, CALM DOWN\"\n+          );\n+          setProducts(filteredProducts);\n+        }\n+      } catch (error) {\n+        console.error('Error fetching products:', error);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchProducts();\n+  }, []);\n+\n+  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n+    useProductFilters(products);\n+\n+  const colorLabels = [\n+    { value: \"black\", label: t('products.filter.colorBlack') },\n+    { value: \"white\", label: t('products.filter.colorWhite') },\n+    { value: \"blue\", label: t('products.filter.colorBlue') },\n+    { value: \"grey\", label: t('products.filter.colorGrey') },\n+  ];\n+  const sizeLabels = [\n+    { value: \"M\", label: t('products.filter.sizeM') },\n+    { value: \"L\", label: t('products.filter.sizeL') },\n+    { value: \"XL\", label: t('products.filter.sizeXL') },\n+  ];\n+\n+  const groupColorsByFirstLetter = () => {\n+    const grouped: { [key: string]: string[] } = { a: [\"all\"] };\n+    colorLabels.forEach((color) => {\n+      const firstLetter = color.value.charAt(0).toLowerCase();\n+      if (!grouped[firstLetter]) grouped[firstLetter] = [];\n+      grouped[firstLetter].push(color.value);\n+    });\n+    const sortedLetters = Object.keys(grouped).sort();\n+    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], [] as string[]);\n+  };\n+\n+  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\n+    e.preventDefault();\n+    setProductImageIndex(prev => ({\n+      ...prev,\n+      [productId]: (prev[productId] || 0) - 1\n+    }));\n+  };\n+\n+  const handleNextImage = (e: React.MouseEvent, productId: string) => {\n+    e.preventDefault();\n+    setProductImageIndex(prev => ({\n+      ...prev,\n+      [productId]: (prev[productId] || 0) + 1\n+    }));\n+  };\n+\n+  const handleHover = (productId: string) => {\n+    setProductImageIndex(prev => ({\n+      ...prev,\n+      [productId]: 1\n+    }));\n+  };\n+\n+  const handleLeave = () => {\n+    setProductImageIndex({});\n+  };\n+\n+  const resetFilters = () => {\n+    setSelectedColors([]);\n+    setSelectedSizes([]);\n+    setSortOption(\"newest\");\n+  };\n+\n+  const handleColorChange = (color: string) => {\n+    if (color === \"all\") {\n+      setSelectedColors([]);\n+    } else {\n+      setSelectedColors(prev => \n+        prev.includes(color) \n+          ? prev.filter(c => c !== color)\n+          : [...prev, color]\n+      );\n+    }\n+  };\n+\n+  const handleSizeChange = (size: string) => {\n+    if (size === \"all\") {\n+      setSelectedSizes([]);\n+    } else {\n+      setSelectedSizes(prev => \n+        prev.includes(size) \n+          ? prev.filter(s => s !== size)\n+          : [...prev, size]\n+      );\n+    }\n+  };\n+\n+  const handleCloseFilter = () => {\n+    setIsFilterOpen(false);\n+  };\n+\n+  const handleApplyFilter = () => {\n+    setIsFilterOpen(false);\n+  };\n+\n+  const handleCloseSort = () => {\n+    setIsSortOpen(false);\n+  };\n+\n+  const handleApplySort = () => {\n+    setIsSortOpen(!isSortOpen);\n+  };\n+\n+  const handleSortChange = (value: string) => {\n+    setSortOption(value);\n+  };\n+\n+  const capitalizeFirstLetter = (str: string) => {\n+    return str.charAt(0).toUpperCase() + str.slice(1);\n+  };\n+\n+  const sortOptions = [\n+    { value: \"newest\", label: t('products.sort.newest') },\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\n+  ];\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\n+      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\n+    };\n+    document.addEventListener(\"mousedown\", handleClickOutside);\n+    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n+  }, []);\n+\n+  if (isLoading) {\n+    return (\n+      <div className=\"flex justify-center items-center min-h-screen\">\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-white\">\n+      <div className=\"h-[60px]\"></div>\n+\n+      <motion.div\n+        initial={{ opacity: 0, y: -10 }}\n+        animate={{ opacity: 1, y: 0 }}\n+        exit={{ opacity: 0, y: -10 }}\n+        transition={{ duration: 0.5, ease: \"easeInOut\" }}\n+        className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\n+      >\n+        {t('navbar.thankYou')}\n+      </motion.div>\n+\n+      <div className=\"w-full px-0 py-8 bg-white\">\n+        <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\n+          <button\n+            onMouseEnter={() => setHoveredButton(\"collection\")}\n+            onMouseLeave={() => setHoveredButton(null)}\n+            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\n+            style={{ background: \"none\", border: \"none\" }}\n+          >\n+            {t('collection.chillCalmDown')}\n+            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+              <motion.div\n+                className=\"absolute inset-0 bg-black\"\n+                initial={{ width: \"100%\", left: 0 }}\n+                animate={{ width: \"100%\", left: 0 }}\n+                transition={{ duration: 0.25, ease: \"easeOut\" }}\n+              />\n+            </div>\n+          </button>\n+          <div className=\"flex items-center space-x-4\">\n+            <button\n+              onClick={() => setIsFilterOpen(true)}\n+              onMouseEnter={() => setHoveredButton(\"filters\")}\n+              onMouseLeave={() => setHoveredButton(null)}\n+              className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n+              style={{ background: \"none\", border: \"none\" }}\n+            >\n+              <span className=\"px-1\">{t('products.filters')}</span>\n+              <svg\n+                xmlns=\"http://www.w3.org/2000/svg\"\n+                className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n+                fill=\"none\"\n+                viewBox=\"0 0 24 24\"\n+                stroke=\"currentColor\"\n+              >\n+                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n+              </svg>\n+              <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+                {(hoveredButton === \"filters\") && (\n+                  <motion.div\n+                    className=\"absolute inset-0 bg-black\"\n+                    initial={{ width: 0, left: \"50%\" }}\n+                    animate={{ width: \"100%\", left: 0 }}\n+                    transition={{ duration: 0.25, ease: \"easeOut\" }}\n+                  />\n+                )}\n+              </div>\n+            </button>\n+            <SortSection\n+              isSortOpen={isSortOpen}\n+              sortRef={sortRef}\n+              selectedSort={sortOption}\n+              handleSortChange={(option) => setSortOption(option)}\n+              handleCloseSort={() => setIsSortOpen(false)}\n+              handleApplySort={() => setIsSortOpen(!isSortOpen)}\n+              sortOptions={sortOptions}\n+              onMouseEnter={() => setHoveredButton(\"sort\")}\n+              onMouseLeave={() => setHoveredButton(null)}\n+            />\n+          </div>\n+        </div>\n+\n+        <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\n+          <FilterSection\n+            isFilterOpen={isFilterOpen}\n+            filterRef={filterRef}\n+            selectedColors={selectedColors}\n+            selectedSizes={selectedSizes}\n+            handleColorChange={handleColorChange}\n+            handleSizeChange={handleSizeChange}\n+            handleCloseFilter={() => setIsFilterOpen(false)}\n+            handleApplyFilter={() => setIsFilterOpen(false)}\n+            colors={colorLabels.map(c => c.value)}\n+            sizes={sizeLabels.map(s => s.value)}\n+            capitalizeFirstLetter={capitalizeFirstLetter}\n+            groupedColors={groupColorsByFirstLetter()}\n+            title={t('products.filter.title')}\n+            colorLabel={t('products.filter.colorLabel')}\n+            sizeLabel={t('products.filter.sizeLabel')}\n+            applyLabel={t('products.filter.apply')}\n+            resetLabel={t('products.filter.reset')}\n+            allColorsLabel={t('products.filter.allColors')}\n+            allSizesLabel={t('products.filter.allSizes')}\n+            selectHint={t('products.filter.selectHint')}\n+            closeLabel={t('products.filter.close')}\n+            colorLabels={colorLabels}\n+            sizeLabels={sizeLabels}\n+          />\n+        </div>\n+\n+        {sortedProducts.length > 0 ? (\n+          <ProductGrid \n+            products={sortedProducts}\n+          />\n+        ) : (\n+          <NoProductsMessage />\n+        )}\n+        \n+        <div className=\"pb-20 mb-10\"></div>\n+      </div>\n+    </div>\n+  );\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { useProductFilters } from \"../../../hooks/useProductFilters\";\r\nimport ProductGrid from \"../../../components/ProductGrid\";\r\nimport FilterSection from \"../../../components/FilterSection\";\r\nimport SortSection from \"../../../components/SortSection\";\r\nimport NoProductsMessage from \"../../../components/NoProductsMessage\";\r\nimport { Product } from \"../../../types/product\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport default function ChillCalmDownPage() {\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n  const filterRef = useRef<HTMLDivElement>(null);\r\n  const sortRef = useRef<HTMLDivElement>(null);\r\n  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await fetch('/api/products');\r\n        const data = await response.json();\r\n        if (data.ok) {\r\n          const filteredProducts = data.products.filter(\r\n            (product: Product) => product.collection === \"CHILL, CALM DOWN\"\r\n          );\r\n          setProducts(filteredProducts);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n    useProductFilters(products);\r\n\r\n  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n  const sizes = [\"M\", \"L\", \"XL\"];\r\n\r\n  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n    e.preventDefault();\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: (prev[productId] || 0) - 1\r\n    }));\r\n  };\r\n\r\n  const handleNextImage = (e: React.MouseEvent, productId: string) => {\r\n    e.preventDefault();\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: (prev[productId] || 0) + 1\r\n    }));\r\n  };\r\n\r\n  const handleHover = (productId: string) => {\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: 1\r\n    }));\r\n  };\r\n\r\n  const handleLeave = () => {\r\n    setProductImageIndex({});\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    setSelectedColors([]);\r\n    setSelectedSizes([]);\r\n    setSortOption(\"newest\");\r\n  };\r\n\r\n  const handleColorChange = (color: string) => {\r\n    if (color === \"all\") {\r\n      setSelectedColors([]);\r\n    } else {\r\n      setSelectedColors(prev => \r\n        prev.includes(color) \r\n          ? prev.filter(c => c !== color)\r\n          : [...prev, color]\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSizeChange = (size: string) => {\r\n    if (size === \"all\") {\r\n      setSelectedSizes([]);\r\n    } else {\r\n      setSelectedSizes(prev => \r\n        prev.includes(size) \r\n          ? prev.filter(s => s !== size)\r\n          : [...prev, size]\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseFilter = () => {\r\n    setIsFilterOpen(false);\r\n  };\r\n\r\n  const handleApplyFilter = () => {\r\n    setIsFilterOpen(false);\r\n  };\r\n\r\n  const handleCloseSort = () => {\r\n    setIsSortOpen(false);\r\n  };\r\n\r\n  const handleApplySort = () => {\r\n    setIsSortOpen(!isSortOpen);\r\n  };\r\n\r\n  const handleSortChange = (value: string) => {\r\n    setSortOption(value);\r\n  };\r\n\r\n  const capitalizeFirstLetter = (str: string) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  const sortOptions = [\r\n    { value: \"newest\", label: \"Newest\" },\r\n    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full px-0 py-8 bg-white\">\r\n      <h1 className=\"text-2xl font-bold mb-8 text-center\">CHILL, CALM DOWN</h1>\r\n      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n        <button\r\n          onMouseEnter={() => setHoveredButton(\"collection\")}\r\n          onMouseLeave={() => setHoveredButton(null)}\r\n          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n          style={{ background: \"none\", border: \"none\" }}\r\n        >\r\n          CHILL, CALM DOWN\r\n          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n            <motion.div\r\n              className=\"absolute inset-0 bg-black\"\r\n              initial={{ width: \"100%\", left: 0 }}\r\n              animate={{ width: \"100%\", left: 0 }}\r\n              transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n            />\r\n          </div>\r\n        </button>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button\r\n            onClick={() => setIsFilterOpen(true)}\r\n            onMouseEnter={() => setHoveredButton(\"filters\")}\r\n            onMouseLeave={() => setHoveredButton(null)}\r\n            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n            style={{ background: \"none\", border: \"none\" }}\r\n          >\r\n            <span className=\"px-1\">Filters</span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n            </svg>\r\n            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n              {(hoveredButton === \"filters\") && (\r\n                <motion.div\r\n                  className=\"absolute inset-0 bg-black\"\r\n                  initial={{ width: 0, left: \"50%\" }}\r\n                  animate={{ width: \"100%\", left: 0 }}\r\n                  transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n                />\r\n              )}\r\n            </div>\r\n          </button>\r\n          <SortSection\r\n            isSortOpen={isSortOpen}\r\n            sortRef={sortRef}\r\n            selectedSort={sortOption}\r\n            handleSortChange={(option) => setSortOption(option)}\r\n            handleCloseSort={() => setIsSortOpen(false)}\r\n            handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n            sortOptions={sortOptions}\r\n            onMouseEnter={() => setHoveredButton(\"sort\")}\r\n            onMouseLeave={() => setHoveredButton(null)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n        <FilterSection\r\n          isFilterOpen={isFilterOpen}\r\n          filterRef={filterRef}\r\n          selectedColors={selectedColors}\r\n          selectedSizes={selectedSizes}\r\n          handleColorChange={handleColorChange}\r\n          handleSizeChange={handleSizeChange}\r\n          handleCloseFilter={() => setIsFilterOpen(false)}\r\n          handleApplyFilter={() => setIsFilterOpen(false)}\r\n          colors={colors}\r\n          sizes={sizes}\r\n          capitalizeFirstLetter={capitalizeFirstLetter}\r\n          groupedColors={colors}\r\n        />\r\n      </div>\r\n\r\n      {sortedProducts.length > 0 ? (\r\n        <ProductGrid \r\n          products={sortedProducts}\r\n        />\r\n      ) : (\r\n        <NoProductsMessage resetFilters={resetFilters} />\r\n      )}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}