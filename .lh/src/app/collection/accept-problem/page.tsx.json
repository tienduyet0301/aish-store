{
    "sourceFile": "src/app/collection/accept-problem/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1747300184666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747300195093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import SortSection from \"../../../components/SortSection\";\r\n import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n import { Product } from \"../../../types/product\";\r\n import { motion } from \"framer-motion\";\r\n+import { useLanguage } from \"@/context/LanguageContext\";\r\n \r\n export default function AcceptTheProblemPage() {\r\n   const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n@@ -16,8 +17,9 @@\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n   const filterRef = useRef<HTMLDivElement>(null);\r\n   const sortRef = useRef<HTMLDivElement>(null);\r\n   const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n+  const { t } = useLanguage();\r\n \r\n   useEffect(() => {\r\n     const fetchProducts = async () => {\r\n       try {\r\n@@ -215,9 +217,14 @@\n \r\n       {sortedProducts.length > 0 ? (\r\n         <ProductGrid products={sortedProducts} />\r\n       ) : (\r\n-        <NoProductsMessage resetFilters={resetFilters} />\r\n+        <NoProductsMessage \r\n+          resetFilters={resetFilters}\r\n+          noProductsText={t('products.filter.noProducts')}\r\n+          tryAgainText={t('products.filter.tryAgain')}\r\n+          resetFiltersText={t('products.filter.resetFilters')}\r\n+        />\r\n       )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747301003024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n   const [products, setProducts] = useState<Product[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n-  const filterRef = useRef<HTMLDivElement>(null);\r\n-  const sortRef = useRef<HTMLDivElement>(null);\r\n+  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n+  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n   const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n   const { t } = useLanguage();\r\n \r\n   useEffect(() => {\r\n@@ -211,8 +211,15 @@\n           colors={colors}\r\n           sizes={sizes}\r\n           capitalizeFirstLetter={capitalizeFirstLetter}\r\n           groupedColors={colors}\r\n+          title={t('products.filter.title')}\r\n+          colorLabel={t('products.filter.color')}\r\n+          sizeLabel={t('products.filter.size')}\r\n+          applyLabel={t('products.filter.apply')}\r\n+          resetLabel={t('products.filter.reset')}\r\n+          allColorsLabel={t('products.filter.allColors')}\r\n+          allSizesLabel={t('products.filter.allSizes')}\r\n         />\r\n       </div>\r\n \r\n       {sortedProducts.length > 0 ? (\r\n"
                },
                {
                    "date": 1747306899081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,19 @@\n \r\n   const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n     useProductFilters(products);\r\n \r\n-  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n-  const sizes = [\"M\", \"L\", \"XL\"];\r\n+  const colorLabels = [\r\n+    { value: \"black\", label: t('products.filter.colorBlack') },\r\n+    { value: \"white\", label: t('products.filter.colorWhite') },\r\n+    { value: \"blue\", label: t('products.filter.colorBlue') },\r\n+    { value: \"grey\", label: t('products.filter.colorGrey') },\r\n+  ];\r\n+  const sizeLabels = [\r\n+    { value: \"M\", label: t('products.filter.sizeM') },\r\n+    { value: \"L\", label: t('products.filter.sizeL') },\r\n+    { value: \"XL\", label: t('products.filter.sizeXL') },\r\n+  ];\r\n \r\n   const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n     e.preventDefault();\r\n     setProductImageIndex(prev => ({\r\n@@ -123,8 +132,25 @@\n   const capitalizeFirstLetter = (str: string) => {\r\n     return str.charAt(0).toUpperCase() + str.slice(1);\r\n   };\r\n \r\n+  const groupColorsByFirstLetter = () => {\r\n+    const grouped = { a: [\"all\"] };\r\n+    colorLabels.forEach((color) => {\r\n+      const firstLetter = color.value.charAt(0).toLowerCase();\r\n+      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n+      grouped[firstLetter].push(color.value);\r\n+    });\r\n+    const sortedLetters = Object.keys(grouped).sort();\r\n+    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n+  };\r\n+\r\n+  const sortOptions = [\r\n+    { value: \"newest\", label: t('products.sort.newest') },\r\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n+  ];\r\n+\r\n   useEffect(() => {\r\n     const handleClickOutside = (event: MouseEvent) => {\r\n       if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n       if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n@@ -142,17 +168,17 @@\n   }\r\n \r\n   return (\r\n     <div className=\"w-full px-0 py-8 bg-white\">\r\n-      <h1 className=\"text-2xl font-bold mb-8 text-center\">ACCEPT THE PROBLEM</h1>\r\n+      <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('collection.acceptTheProblem')}</h1>\r\n       <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n         <button\r\n           onMouseEnter={() => setHoveredButton(\"collection\")}\r\n           onMouseLeave={() => setHoveredButton(null)}\r\n           className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n           style={{ background: \"none\", border: \"none\" }}\r\n         >\r\n-          ACCEPT THE PROBLEM\r\n+          {t('collection.acceptTheProblem')}\r\n           <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n             <motion.div\r\n               className=\"absolute inset-0 bg-black\"\r\n               initial={{ width: \"100%\", left: 0 }}\r\n@@ -165,9 +191,9 @@\n           <button\r\n             onClick={() => setIsFilterOpen(true)}\r\n             className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n           >\r\n-            <span className=\"px-1\">Filters</span>\r\n+            <span className=\"px-1\">{t('products.filters')}</span>\r\n             <svg\r\n               xmlns=\"http://www.w3.org/2000/svg\"\r\n               className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n               fill=\"none\"\r\n@@ -186,13 +212,9 @@\n             selectedSort={sortOption}\r\n             handleSortChange={(option) => setSortOption(option)}\r\n             handleCloseSort={() => setIsSortOpen(false)}\r\n             handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n-            sortOptions={[\r\n-              { value: \"newest\", label: \"Newest\" },\r\n-              { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n-              { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n-            ]}\r\n+            sortOptions={sortOptions}\r\n             onMouseEnter={() => setHoveredButton(\"sort\")}\r\n             onMouseLeave={() => setHoveredButton(null)}\r\n           />\r\n         </div>\r\n@@ -207,30 +229,32 @@\n           handleColorChange={handleColorChange}\r\n           handleSizeChange={handleSizeChange}\r\n           handleCloseFilter={() => setIsFilterOpen(false)}\r\n           handleApplyFilter={() => setIsFilterOpen(false)}\r\n-          colors={colors}\r\n-          sizes={sizes}\r\n+          colors={colorLabels.map(c => c.value)}\r\n+          sizes={sizeLabels.map(s => s.value)}\r\n           capitalizeFirstLetter={capitalizeFirstLetter}\r\n-          groupedColors={colors}\r\n+          groupedColors={groupColorsByFirstLetter()}\r\n           title={t('products.filter.title')}\r\n-          colorLabel={t('products.filter.color')}\r\n-          sizeLabel={t('products.filter.size')}\r\n+          colorLabel={t('products.filter.colorLabel')}\r\n+          sizeLabel={t('products.filter.sizeLabel')}\r\n           applyLabel={t('products.filter.apply')}\r\n           resetLabel={t('products.filter.reset')}\r\n           allColorsLabel={t('products.filter.allColors')}\r\n           allSizesLabel={t('products.filter.allSizes')}\r\n+          selectHint={t('products.filter.selectHint')}\r\n+          closeLabel={t('products.filter.close')}\r\n+          colorLabels={colorLabels}\r\n+          sizeLabels={sizeLabels}\r\n         />\r\n       </div>\r\n \r\n       {sortedProducts.length > 0 ? (\r\n         <ProductGrid products={sortedProducts} />\r\n       ) : (\r\n-        <NoProductsMessage \r\n-          resetFilters={resetFilters}\r\n-          noProductsText={t('products.filter.noProducts')}\r\n-          tryAgainText={t('products.filter.tryAgain')}\r\n-          resetFiltersText={t('products.filter.resetFilters')}\r\n+        <NoProductsMessage\r\n+          message={t('products.noProducts')}\r\n+          backButtonText={t('products.back')}\r\n         />\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1747322042134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,18 @@\n   }\r\n \r\n   return (\r\n     <div className=\"w-full px-0 py-8 bg-white\">\r\n+      <div className=\"h-[60px]\"></div>\r\n+      <motion.div\r\n+        initial={{ opacity: 0, y: -10 }}\r\n+        animate={{ opacity: 1, y: 0 }}\r\n+        exit={{ opacity: 0, y: -10 }}\r\n+        transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n+        className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n+      >\r\n+        {t('navbar.thankYou')}\r\n+      </motion.div>\r\n       <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('collection.acceptTheProblem')}</h1>\r\n       <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n         <button\r\n           onMouseEnter={() => setHoveredButton(\"collection\")}\r\n"
                },
                {
                    "date": 1747322100481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,9 +178,9 @@\n         className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n       >\r\n         {t('navbar.thankYou')}\r\n       </motion.div>\r\n-      <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('collection.acceptTheProblem')}</h1>\r\n+      {/* <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('collection.acceptTheProblem')}</h1> */}\r\n       <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n         <button\r\n           onMouseEnter={() => setHoveredButton(\"collection\")}\r\n           onMouseLeave={() => setHoveredButton(null)}\r\n"
                },
                {
                    "date": 1747639046964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,18 +132,14 @@\n   const capitalizeFirstLetter = (str: string) => {\r\n     return str.charAt(0).toUpperCase() + str.slice(1);\r\n   };\r\n \r\n-  const groupColorsByFirstLetter = () => {\r\n-    const grouped = { a: [\"all\"] };\r\n-    colorLabels.forEach((color) => {\r\n-      const firstLetter = color.value.charAt(0).toLowerCase();\r\n-      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n-      grouped[firstLetter].push(color.value);\r\n-    });\r\n-    const sortedLetters = Object.keys(grouped).sort();\r\n-    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n-  };\r\n+  const grouped: { [key: string]: string[] } = {};\r\n+  colorLabels.forEach((color) => {\r\n+    const firstLetter = color.value.charAt(0).toLowerCase();\r\n+    if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n+    grouped[firstLetter].push(color.value);\r\n+  });\r\n \r\n   const sortOptions = [\r\n     { value: \"newest\", label: t('products.sort.newest') },\r\n     { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n@@ -242,9 +238,9 @@\n           handleApplyFilter={() => setIsFilterOpen(false)}\r\n           colors={colorLabels.map(c => c.value)}\r\n           sizes={sizeLabels.map(s => s.value)}\r\n           capitalizeFirstLetter={capitalizeFirstLetter}\r\n-          groupedColors={groupColorsByFirstLetter()}\r\n+          groupedColors={grouped}\r\n           title={t('products.filter.title')}\r\n           colorLabel={t('products.filter.colorLabel')}\r\n           sizeLabel={t('products.filter.sizeLabel')}\r\n           applyLabel={t('products.filter.apply')}\r\n"
                },
                {
                    "date": 1747639070087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n import { Product } from \"../../../types/product\";\r\n import { motion } from \"framer-motion\";\r\n import { useLanguage } from \"@/context/LanguageContext\";\r\n+import Link from \"next/link\";\r\n \r\n export default function AcceptTheProblemPage() {\r\n   const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n@@ -132,14 +133,18 @@\n   const capitalizeFirstLetter = (str: string) => {\r\n     return str.charAt(0).toUpperCase() + str.slice(1);\r\n   };\r\n \r\n-  const grouped: { [key: string]: string[] } = {};\r\n-  colorLabels.forEach((color) => {\r\n-    const firstLetter = color.value.charAt(0).toLowerCase();\r\n-    if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n-    grouped[firstLetter].push(color.value);\r\n-  });\r\n+  const groupColorsByFirstLetter = () => {\r\n+    const grouped: { [key: string]: string[] } = { a: [\"all\"] };\r\n+    colorLabels.forEach((color) => {\r\n+      const firstLetter = color.value.charAt(0).toLowerCase();\r\n+      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n+      grouped[firstLetter].push(color.value);\r\n+    });\r\n+    const sortedLetters = Object.keys(grouped).sort();\r\n+    return sortedLetters.reduce((acc: string[], letter) => [...acc, ...grouped[letter]], []);\r\n+  };\r\n \r\n   const sortOptions = [\r\n     { value: \"newest\", label: t('products.sort.newest') },\r\n     { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n@@ -238,9 +243,9 @@\n           handleApplyFilter={() => setIsFilterOpen(false)}\r\n           colors={colorLabels.map(c => c.value)}\r\n           sizes={sizeLabels.map(s => s.value)}\r\n           capitalizeFirstLetter={capitalizeFirstLetter}\r\n-          groupedColors={grouped}\r\n+          groupedColors={groupColorsByFirstLetter()}\r\n           title={t('products.filter.title')}\r\n           colorLabel={t('products.filter.colorLabel')}\r\n           sizeLabel={t('products.filter.sizeLabel')}\r\n           applyLabel={t('products.filter.apply')}\r\n@@ -263,5 +268,21 @@\n         />\r\n       )}\r\n     </div>\r\n   );\r\n-} \n\\ No newline at end of file\n+}\r\n+\r\n+interface NoResultsProps {\r\n+  message: string;\r\n+  backButtonText: string;\r\n+}\r\n+\r\n+const NoResults: React.FC<NoResultsProps> = ({ message, backButtonText }) => {\r\n+  return (\r\n+    <div className=\"text-center py-12\">\r\n+      <p className=\"text-gray-600 mb-4\">{message}</p>\r\n+      <Link href=\"/collection\" className=\"text-blue-600 hover:text-blue-800\">\r\n+        {backButtonText}\r\n+      </Link>\r\n+    </div>\r\n+  );\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747639219996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,14 +270,14 @@\n     </div>\r\n   );\r\n }\r\n \r\n-interface NoResultsProps {\r\n+interface NoProductsMessageProps {\r\n   message: string;\r\n   backButtonText: string;\r\n }\r\n \r\n-const NoResults: React.FC<NoResultsProps> = ({ message, backButtonText }) => {\r\n+const NoProductsMessage: React.FC<NoProductsMessageProps> = ({ message, backButtonText }) => {\r\n   return (\r\n     <div className=\"text-center py-12\">\r\n       <p className=\"text-gray-600 mb-4\">{message}</p>\r\n       <Link href=\"/collection\" className=\"text-blue-600 hover:text-blue-800\">\r\n"
                },
                {
                    "date": 1747639233362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,15 +258,12 @@\n           sizeLabels={sizeLabels}\r\n         />\r\n       </div>\r\n \r\n-      {sortedProducts.length > 0 ? (\r\n-        <ProductGrid products={sortedProducts} />\r\n+      {products.length > 0 ? (\r\n+        <ProductGrid products={products} />\r\n       ) : (\r\n-        <NoProductsMessage\r\n-          message={t('products.noProducts')}\r\n-          backButtonText={t('products.back')}\r\n-        />\r\n+        <NoProductsMessage />\r\n       )}\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1747639239665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import { useProductFilters } from \"../../../hooks/useProductFilters\";\r\n import ProductGrid from \"../../../components/ProductGrid\";\r\n import FilterSection from \"../../../components/FilterSection\";\r\n import SortSection from \"../../../components/SortSection\";\r\n-import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n import { Product } from \"../../../types/product\";\r\n import { motion } from \"framer-motion\";\r\n import { useLanguage } from \"@/context/LanguageContext\";\r\n import Link from \"next/link\";\r\n@@ -261,25 +260,14 @@\n \r\n       {products.length > 0 ? (\r\n         <ProductGrid products={products} />\r\n       ) : (\r\n-        <NoProductsMessage />\r\n+        <div className=\"text-center py-12\">\r\n+          <p className=\"text-gray-600 mb-4\">{t('products.noProductsMessage')}</p>\r\n+          <Link href=\"/collection\" className=\"text-blue-600 hover:text-blue-800\">\r\n+            {t('products.backToCollection')}\r\n+          </Link>\r\n+        </div>\r\n       )}\r\n     </div>\r\n   );\r\n-}\r\n-\r\n-interface NoProductsMessageProps {\r\n-  message: string;\r\n-  backButtonText: string;\r\n-}\r\n-\r\n-const NoProductsMessage: React.FC<NoProductsMessageProps> = ({ message, backButtonText }) => {\r\n-  return (\r\n-    <div className=\"text-center py-12\">\r\n-      <p className=\"text-gray-600 mb-4\">{message}</p>\r\n\\ No newline at end of file\n-      <Link href=\"/collection\" className=\"text-blue-600 hover:text-blue-800\">\r\n-        {backButtonText}\r\n-      </Link>\r\n-    </div>\r\n-  );\r\n-}; \n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747639253240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -261,11 +261,11 @@\n       {products.length > 0 ? (\r\n         <ProductGrid products={products} />\r\n       ) : (\r\n         <div className=\"text-center py-12\">\r\n-          <p className=\"text-gray-600 mb-4\">{t('products.noProductsMessage')}</p>\r\n+          <p className=\"text-gray-600 mb-4\">{t('products.filter.noProductsSimple')}</p>\r\n           <Link href=\"/collection\" className=\"text-blue-600 hover:text-blue-800\">\r\n-            {t('products.backToCollection')}\r\n+            {t('common.back')}\r\n           </Link>\r\n         </div>\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1749615246359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n     { value: \"black\", label: t('products.filter.colorBlack') },\r\n     { value: \"white\", label: t('products.filter.colorWhite') },\r\n     { value: \"blue\", label: t('products.filter.colorBlue') },\r\n     { value: \"grey\", label: t('products.filter.colorGrey') },\r\n+    { value: \"beige\", label: t('products.filter.colorBeige') },\r\n   ];\r\n   const sizeLabels = [\r\n     { value: \"M\", label: t('products.filter.sizeM') },\r\n     { value: \"L\", label: t('products.filter.sizeL') },\r\n"
                },
                {
                    "date": 1749615574716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,8 @@\n     { value: \"black\", label: t('products.filter.colorBlack') },\r\n     { value: \"white\", label: t('products.filter.colorWhite') },\r\n     { value: \"blue\", label: t('products.filter.colorBlue') },\r\n     { value: \"grey\", label: t('products.filter.colorGrey') },\r\n-    { value: \"beige\", label: t('products.filter.colorBeige') },\r\n   ];\r\n   const sizeLabels = [\r\n     { value: \"M\", label: t('products.filter.sizeM') },\r\n     { value: \"L\", label: t('products.filter.sizeL') },\r\n"
                },
                {
                    "date": 1749615838174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n     { value: \"black\", label: t('products.filter.colorBlack') },\r\n     { value: \"white\", label: t('products.filter.colorWhite') },\r\n     { value: \"blue\", label: t('products.filter.colorBlue') },\r\n     { value: \"grey\", label: t('products.filter.colorGrey') },\r\n+    { value: \"beige\", label: t('products.filter.colorBeige') },\r\n   ];\r\n   const sizeLabels = [\r\n     { value: \"M\", label: t('products.filter.sizeM') },\r\n     { value: \"L\", label: t('products.filter.sizeL') },\r\n"
                }
            ],
            "date": 1747300184666,
            "name": "Commit-0",
            "content": "\"use client\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { useProductFilters } from \"../../../hooks/useProductFilters\";\r\nimport ProductGrid from \"../../../components/ProductGrid\";\r\nimport FilterSection from \"../../../components/FilterSection\";\r\nimport SortSection from \"../../../components/SortSection\";\r\nimport NoProductsMessage from \"../../../components/NoProductsMessage\";\r\nimport { Product } from \"../../../types/product\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport default function AcceptTheProblemPage() {\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n  const filterRef = useRef<HTMLDivElement>(null);\r\n  const sortRef = useRef<HTMLDivElement>(null);\r\n  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await fetch('/api/products');\r\n        const data = await response.json();\r\n        if (data.ok) {\r\n          const filteredProducts = data.products.filter(\r\n            (product: Product) => product.collection === \"ACCEPT THE PROBLEM\"\r\n          );\r\n          setProducts(filteredProducts);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n    useProductFilters(products);\r\n\r\n  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n  const sizes = [\"M\", \"L\", \"XL\"];\r\n\r\n  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n    e.preventDefault();\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: (prev[productId] || 0) - 1\r\n    }));\r\n  };\r\n\r\n  const handleNextImage = (e: React.MouseEvent, productId: string) => {\r\n    e.preventDefault();\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: (prev[productId] || 0) + 1\r\n    }));\r\n  };\r\n\r\n  const handleHover = (productId: string) => {\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: 1\r\n    }));\r\n  };\r\n\r\n  const handleLeave = () => {\r\n    setProductImageIndex({});\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    setSelectedColors([]);\r\n    setSelectedSizes([]);\r\n    setSortOption(\"newest\");\r\n  };\r\n\r\n  const handleColorChange = (color: string) => {\r\n    if (color === \"all\") {\r\n      setSelectedColors([]);\r\n    } else {\r\n      setSelectedColors(prev => \r\n        prev.includes(color) \r\n          ? prev.filter(c => c !== color)\r\n          : [...prev, color]\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSizeChange = (size: string) => {\r\n    if (size === \"all\") {\r\n      setSelectedSizes([]);\r\n    } else {\r\n      setSelectedSizes(prev => \r\n        prev.includes(size) \r\n          ? prev.filter(s => s !== size)\r\n          : [...prev, size]\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseFilter = () => {\r\n    setIsFilterOpen(false);\r\n  };\r\n\r\n  const handleApplyFilter = () => {\r\n    setIsFilterOpen(false);\r\n  };\r\n\r\n  const handleCloseSort = () => {\r\n    setIsSortOpen(false);\r\n  };\r\n\r\n  const handleSortChange = (value: string) => {\r\n    setSortOption(value);\r\n  };\r\n\r\n  const capitalizeFirstLetter = (str: string) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full px-0 py-8 bg-white\">\r\n      <h1 className=\"text-2xl font-bold mb-8 text-center\">ACCEPT THE PROBLEM</h1>\r\n      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n        <button\r\n          onMouseEnter={() => setHoveredButton(\"collection\")}\r\n          onMouseLeave={() => setHoveredButton(null)}\r\n          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n          style={{ background: \"none\", border: \"none\" }}\r\n        >\r\n          ACCEPT THE PROBLEM\r\n          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n            <motion.div\r\n              className=\"absolute inset-0 bg-black\"\r\n              initial={{ width: \"100%\", left: 0 }}\r\n              animate={{ width: \"100%\", left: 0 }}\r\n              transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n            />\r\n          </div>\r\n        </button>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button\r\n            onClick={() => setIsFilterOpen(true)}\r\n            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n          >\r\n            <span className=\"px-1\">Filters</span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n            </svg>\r\n            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n              <span className=\"absolute inset-0 bg-black\" style={{width: '100%', left: 0, opacity: 0.7}}></span>\r\n            </div>\r\n          </button>\r\n          <SortSection\r\n            isSortOpen={isSortOpen}\r\n            sortRef={sortRef}\r\n            selectedSort={sortOption}\r\n            handleSortChange={(option) => setSortOption(option)}\r\n            handleCloseSort={() => setIsSortOpen(false)}\r\n            handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n            sortOptions={[\r\n              { value: \"newest\", label: \"Newest\" },\r\n              { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n              { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n            ]}\r\n            onMouseEnter={() => setHoveredButton(\"sort\")}\r\n            onMouseLeave={() => setHoveredButton(null)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n        <FilterSection\r\n          isFilterOpen={isFilterOpen}\r\n          filterRef={filterRef}\r\n          selectedColors={selectedColors}\r\n          selectedSizes={selectedSizes}\r\n          handleColorChange={handleColorChange}\r\n          handleSizeChange={handleSizeChange}\r\n          handleCloseFilter={() => setIsFilterOpen(false)}\r\n          handleApplyFilter={() => setIsFilterOpen(false)}\r\n          colors={colors}\r\n          sizes={sizes}\r\n          capitalizeFirstLetter={capitalizeFirstLetter}\r\n          groupedColors={colors}\r\n        />\r\n      </div>\r\n\r\n      {sortedProducts.length > 0 ? (\r\n        <ProductGrid products={sortedProducts} />\r\n      ) : (\r\n        <NoProductsMessage resetFilters={resetFilters} />\r\n      )}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}