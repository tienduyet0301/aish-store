{
    "sourceFile": "src/app/collection/chill,-calm-down/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893162761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { useProductFilters } from \"../../../hooks/useProductFilters\";\r\nimport ProductGrid from \"../../../components/ProductGrid\";\r\nimport FilterSection from \"../../../components/FilterSection\";\r\nimport SortSection from \"../../../components/SortSection\";\r\nimport NoProductsMessage from \"../../../components/NoProductsMessage\";\r\nimport { Product } from \"../../../types/product\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport default function ChillCalmDownPage() {\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n  const filterRef = useRef<HTMLDivElement>(null);\r\n  const sortRef = useRef<HTMLDivElement>(null);\r\n  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await fetch('/api/products');\r\n        const data = await response.json();\r\n        if (data.ok) {\r\n          const filteredProducts = data.products.filter(\r\n            (product: Product) => product.collection === \"CHILL, CALM DOWN\"\r\n          );\r\n          setProducts(filteredProducts);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n    useProductFilters(products);\r\n\r\n  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n  const sizes = [\"M\", \"L\", \"XL\"];\r\n\r\n  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n    e.preventDefault();\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: (prev[productId] || 0) - 1\r\n    }));\r\n  };\r\n\r\n  const handleNextImage = (e: React.MouseEvent, productId: string) => {\r\n    e.preventDefault();\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: (prev[productId] || 0) + 1\r\n    }));\r\n  };\r\n\r\n  const handleHover = (productId: string) => {\r\n    setProductImageIndex(prev => ({\r\n      ...prev,\r\n      [productId]: 1\r\n    }));\r\n  };\r\n\r\n  const handleLeave = () => {\r\n    setProductImageIndex({});\r\n  };\r\n\r\n  const resetFilters = () => {\r\n    setSelectedColors([]);\r\n    setSelectedSizes([]);\r\n    setSortOption(\"newest\");\r\n  };\r\n\r\n  const handleColorChange = (color: string) => {\r\n    if (color === \"all\") {\r\n      setSelectedColors([]);\r\n    } else {\r\n      setSelectedColors(prev => \r\n        prev.includes(color) \r\n          ? prev.filter(c => c !== color)\r\n          : [...prev, color]\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSizeChange = (size: string) => {\r\n    if (size === \"all\") {\r\n      setSelectedSizes([]);\r\n    } else {\r\n      setSelectedSizes(prev => \r\n        prev.includes(size) \r\n          ? prev.filter(s => s !== size)\r\n          : [...prev, size]\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseFilter = () => {\r\n    setIsFilterOpen(false);\r\n  };\r\n\r\n  const handleApplyFilter = () => {\r\n    setIsFilterOpen(false);\r\n  };\r\n\r\n  const handleCloseSort = () => {\r\n    setIsSortOpen(false);\r\n  };\r\n\r\n  const handleApplySort = () => {\r\n    setIsSortOpen(!isSortOpen);\r\n  };\r\n\r\n  const handleSortChange = (value: string) => {\r\n    setSortOption(value);\r\n  };\r\n\r\n  const capitalizeFirstLetter = (str: string) => {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  };\r\n\r\n  const sortOptions = [\r\n    { value: \"newest\", label: \"Newest\" },\r\n    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full px-0 py-8 bg-white\">\r\n      <h1 className=\"text-2xl font-bold mb-8 text-center\">CHILL, CALM DOWN</h1>\r\n      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n        <button\r\n          onMouseEnter={() => setHoveredButton(\"collection\")}\r\n          onMouseLeave={() => setHoveredButton(null)}\r\n          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n          style={{ background: \"none\", border: \"none\" }}\r\n        >\r\n          CHILL, CALM DOWN\r\n          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n            <motion.div\r\n              className=\"absolute inset-0 bg-black\"\r\n              initial={{ width: \"100%\", left: 0 }}\r\n              animate={{ width: \"100%\", left: 0 }}\r\n              transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n            />\r\n          </div>\r\n        </button>\r\n        <div className=\"flex items-center space-x-4\">\r\n          <button\r\n            onClick={() => setIsFilterOpen(true)}\r\n            onMouseEnter={() => setHoveredButton(\"filters\")}\r\n            onMouseLeave={() => setHoveredButton(null)}\r\n            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n            style={{ background: \"none\", border: \"none\" }}\r\n          >\r\n            <span className=\"px-1\">Filters</span>\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n            </svg>\r\n            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n              {(hoveredButton === \"filters\") && (\r\n                <motion.div\r\n                  className=\"absolute inset-0 bg-black\"\r\n                  initial={{ width: 0, left: \"50%\" }}\r\n                  animate={{ width: \"100%\", left: 0 }}\r\n                  transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n                />\r\n              )}\r\n            </div>\r\n          </button>\r\n          <SortSection\r\n            isSortOpen={isSortOpen}\r\n            sortRef={sortRef}\r\n            selectedSort={sortOption}\r\n            handleSortChange={(option) => setSortOption(option)}\r\n            handleCloseSort={() => setIsSortOpen(false)}\r\n            handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n            sortOptions={sortOptions}\r\n            onMouseEnter={() => setHoveredButton(\"sort\")}\r\n            onMouseLeave={() => setHoveredButton(null)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n        <FilterSection\r\n          isFilterOpen={isFilterOpen}\r\n          filterRef={filterRef}\r\n          selectedColors={selectedColors}\r\n          selectedSizes={selectedSizes}\r\n          handleColorChange={handleColorChange}\r\n          handleSizeChange={handleSizeChange}\r\n          handleCloseFilter={() => setIsFilterOpen(false)}\r\n          handleApplyFilter={() => setIsFilterOpen(false)}\r\n          colors={colors}\r\n          sizes={sizes}\r\n          capitalizeFirstLetter={capitalizeFirstLetter}\r\n          groupedColors={colors}\r\n        />\r\n      </div>\r\n\r\n      {sortedProducts.length > 0 ? (\r\n        <ProductGrid products={sortedProducts} />\r\n      ) : (\r\n        <NoProductsMessage resetFilters={resetFilters} />\r\n      )}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}