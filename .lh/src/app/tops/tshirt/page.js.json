{
    "sourceFile": "src/app/tops/tshirt/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1746893165833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747321097475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,14 @@\n import ProductGrid from \"../../../components/ProductGrid\";\r\n import FilterSection from \"../../../components/FilterSection\";\r\n import SortSection from \"../../../components/SortSection\";\r\n import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n+import { useLanguage } from \"../../../context/LanguageContext\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export default function TshirtPage() {\r\n+  const { t } = useLanguage();\r\n   const [hoveredProduct, setHoveredProduct] = useState(null);\r\n   const [productImageIndex, setProductImageIndex] = useState({});\r\n   const [isAutoSliding, setIsAutoSliding] = useState({});\r\n   const [isScrolled, setIsScrolled] = useState(false);\r\n@@ -76,12 +78,25 @@\n     const sortedLetters = Object.keys(grouped).sort();\r\n     return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n   };\r\n \r\n+  const colorLabels = {\r\n+    black: t('products.colors.black'),\r\n+    white: t('products.colors.white'),\r\n+    blue: t('products.colors.blue'),\r\n+    grey: t('products.colors.grey'),\r\n+  };\r\n+\r\n+  const sizeLabels = {\r\n+    M: t('products.sizes.M'),\r\n+    L: t('products.sizes.L'),\r\n+    XL: t('products.sizes.XL'),\r\n+  };\r\n+\r\n   const sortOptions = [\r\n-    { value: \"newest\", label: \"Newest\" },\r\n-    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n-    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n+    { value: \"newest\", label: t('products.sort.newest') },\r\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n   ];\r\n \r\n   useEffect(() => {\r\n     const handleScroll = () => setIsScrolled(window.scrollY > 50);\r\n@@ -210,9 +225,9 @@\n           exit={{ opacity: 0, y: -10 }}\r\n           transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n           className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n         >\r\n-          Thank you for choosing AISH. We truly appreciate it.\r\n+          {t('navbar.thankYou')}\r\n         </motion.div>\r\n       )}\r\n \r\n       <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\r\n@@ -224,9 +239,9 @@\n                 onMouseEnter={() => handleButtonHover(\"tshirt\")}\r\n                 onMouseLeave={handleButtonLeave}\r\n                 className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\r\n               >\r\n-                Tops / T-shirt\r\n+                {t('products.categories.tops')} / {t('products.categories.tshirt')}\r\n                 <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n                   <motion.div\r\n                     className=\"absolute inset-0 bg-black\"\r\n                     initial={{ width: \"100%\", left: 0 }}\r\n@@ -244,82 +259,96 @@\n                   onMouseEnter={() => handleButtonHover(\"filters\")}\r\n                   onMouseLeave={handleButtonLeave}\r\n                   className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n                 >\r\n-                  <span className=\"px-1\">Filters</span>\r\n+                  <span className=\"px-1\">{t('products.filters')}</span>\r\n                   <svg\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n-                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n+                    className=\"h-3 w-3\"\r\n                     fill=\"none\"\r\n                     viewBox=\"0 0 24 24\"\r\n                     stroke=\"currentColor\"\r\n                   >\r\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n+                    <path\r\n+                      strokeLinecap=\"round\"\r\n+                      strokeLinejoin=\"round\"\r\n+                      strokeWidth={2}\r\n+                      d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\"\r\n+                    />\r\n                   </svg>\r\n-                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\r\n-                      <motion.div\r\n-                        className=\"absolute inset-0 bg-black\"\r\n-                        initial={{ width: 0, left: \"50%\" }}\r\n-                        animate={{ width: \"100%\", left: 0 }}\r\n-                        transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-                      />\r\n-                    )}\r\n-                  </div>\r\n                 </button>\r\n               </div>\r\n-              <SortSection\r\n-                isSortOpen={isSortOpen}\r\n-                sortRef={sortRef}\r\n-                selectedSort={sortOption}\r\n-                handleSortChange={(option) => {\r\n-                  setSortOption(option);\r\n-                  setCurrentPage(1);\r\n-                  setIsSortOpen(false);\r\n-                }}\r\n-                handleCloseSort={() => setIsSortOpen(false)}\r\n-                handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n-                sortOptions={sortOptions}\r\n-                onMouseEnter={() => handleButtonHover(\"sort\")}\r\n-                onMouseLeave={handleButtonLeave}\r\n-                hoveredButton={hoveredButton}\r\n-                activeButton={activeButton}\r\n-              />\r\n+              <div className=\"inline-block\">\r\n+                <button\r\n+                  ref={buttonRefs.sort}\r\n+                  onClick={handleSortButtonClick}\r\n+                  onMouseEnter={() => handleButtonHover(\"sort\")}\r\n+                  onMouseLeave={handleButtonLeave}\r\n+                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n+                >\r\n+                  <span className=\"px-1\">{t('products.sort.title')}</span>\r\n+                  <svg\r\n+                    xmlns=\"http://www.w3.org/2000/svg\"\r\n+                    className=\"h-3 w-3\"\r\n+                    fill=\"none\"\r\n+                    viewBox=\"0 0 24 24\"\r\n+                    stroke=\"currentColor\"\r\n+                  >\r\n+                    <path\r\n+                      strokeLinecap=\"round\"\r\n+                      strokeLinejoin=\"round\"\r\n+                      strokeWidth={2}\r\n+                      d=\"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\"\r\n+                    />\r\n+                  </svg>\r\n+                </button>\r\n+              </div>\r\n             </div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n \r\n       <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\r\n-        {isFilterOpen && (\r\n-          <FilterSection\r\n-            isFilterOpen={isFilterOpen}\r\n-            filterRef={filterRef}\r\n-            selectedColors={selectedColors}\r\n-            selectedSizes={selectedSizes}\r\n-            handleColorChange={handleColorChange}\r\n-            handleSizeChange={handleSizeChange}\r\n-            handleCloseFilter={() => setIsFilterOpen(false)}\r\n-            handleApplyFilter={() => setIsFilterOpen(false)}\r\n-            colors={colors}\r\n-            sizes={sizes}\r\n-            capitalizeFirstLetter={capitalizeFirstLetter}\r\n-            groupedColors={groupColorsByFirstLetter()}\r\n-          />\r\n-        )}\r\n+        <div className=\"flex flex-col md:flex-row gap-4\">\r\n+          <div className=\"w-full md:w-1/4\">\r\n+            <FilterSection\r\n+              colors={colors}\r\n+              sizes={sizes}\r\n+              selectedColors={selectedColors}\r\n+              selectedSizes={selectedSizes}\r\n+              onColorChange={handleColorChange}\r\n+              onSizeChange={handleSizeChange}\r\n+              colorLabels={colorLabels}\r\n+              sizeLabels={sizeLabels}\r\n+              isOpen={isFilterOpen}\r\n+              filterRef={filterRef}\r\n+            />\r\n+          </div>\r\n+          <div className=\"w-full md:w-3/4\">\r\n+            <SortSection\r\n+              sortOptions={sortOptions}\r\n+              selectedSort={sortOption}\r\n+              onSortChange={setSortOption}\r\n+              isOpen={isSortOpen}\r\n+              sortRef={sortRef}\r\n+            />\r\n+            {currentProducts.length > 0 ? (\r\n+              <ProductGrid\r\n+                products={currentProducts}\r\n+                hoveredProduct={hoveredProduct}\r\n+                productImageIndex={productImageIndex}\r\n+                onProductHover={handleProductHover}\r\n+                onProductLeave={handleProductLeave}\r\n+                onPrevImage={handlePrevImage}\r\n+                onNextImage={handleNextImage}\r\n+              />\r\n+            ) : (\r\n+              <NoProductsMessage />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n       </div>\r\n \r\n-      {sortedProducts.length > 0 ? (\r\n-        <ProductGrid\r\n-          products={currentProducts}\r\n-          productImageIndex={productImageIndex}\r\n-          handlePrevImage={handlePrevImage}\r\n-          handleNextImage={handleNextImage}\r\n-          onHover={handleProductHover}\r\n-          onLeave={handleProductLeave}\r\n-        />\r\n-      ) : (\r\n-        <NoProductsMessage />\r\n-      )}\r\n+      <div className=\"pb-20 mb-10\"></div>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747321125284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,12 @@\n import ProductGrid from \"../../../components/ProductGrid\";\r\n import FilterSection from \"../../../components/FilterSection\";\r\n import SortSection from \"../../../components/SortSection\";\r\n import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n-import { useLanguage } from \"../../../context/LanguageContext\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export default function TshirtPage() {\r\n-  const { t } = useLanguage();\r\n   const [hoveredProduct, setHoveredProduct] = useState(null);\r\n   const [productImageIndex, setProductImageIndex] = useState({});\r\n   const [isAutoSliding, setIsAutoSliding] = useState({});\r\n   const [isScrolled, setIsScrolled] = useState(false);\r\n@@ -78,25 +76,12 @@\n     const sortedLetters = Object.keys(grouped).sort();\r\n     return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n   };\r\n \r\n-  const colorLabels = {\r\n-    black: t('products.colors.black'),\r\n-    white: t('products.colors.white'),\r\n-    blue: t('products.colors.blue'),\r\n-    grey: t('products.colors.grey'),\r\n-  };\r\n-\r\n-  const sizeLabels = {\r\n-    M: t('products.sizes.M'),\r\n-    L: t('products.sizes.L'),\r\n-    XL: t('products.sizes.XL'),\r\n-  };\r\n-\r\n   const sortOptions = [\r\n-    { value: \"newest\", label: t('products.sort.newest') },\r\n-    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n-    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n+    { value: \"newest\", label: \"Newest\" },\r\n+    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n+    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n   ];\r\n \r\n   useEffect(() => {\r\n     const handleScroll = () => setIsScrolled(window.scrollY > 50);\r\n@@ -225,9 +210,9 @@\n           exit={{ opacity: 0, y: -10 }}\r\n           transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n           className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n         >\r\n-          {t('navbar.thankYou')}\r\n+          Thank you for choosing AISH. We truly appreciate it.\r\n         </motion.div>\r\n       )}\r\n \r\n       <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\r\n@@ -239,9 +224,9 @@\n                 onMouseEnter={() => handleButtonHover(\"tshirt\")}\r\n                 onMouseLeave={handleButtonLeave}\r\n                 className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\r\n               >\r\n-                {t('products.categories.tops')} / {t('products.categories.tshirt')}\r\n+                Tops / T-shirt\r\n                 <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n                   <motion.div\r\n                     className=\"absolute inset-0 bg-black\"\r\n                     initial={{ width: \"100%\", left: 0 }}\r\n@@ -259,96 +244,82 @@\n                   onMouseEnter={() => handleButtonHover(\"filters\")}\r\n                   onMouseLeave={handleButtonLeave}\r\n                   className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n                 >\r\n-                  <span className=\"px-1\">{t('products.filters')}</span>\r\n+                  <span className=\"px-1\">Filters</span>\r\n                   <svg\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n-                    className=\"h-3 w-3\"\r\n+                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n                     fill=\"none\"\r\n                     viewBox=\"0 0 24 24\"\r\n                     stroke=\"currentColor\"\r\n                   >\r\n-                    <path\r\n-                      strokeLinecap=\"round\"\r\n-                      strokeLinejoin=\"round\"\r\n-                      strokeWidth={2}\r\n-                      d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\"\r\n-                    />\r\n+                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                   </svg>\r\n+                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n+                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\r\n+                      <motion.div\r\n+                        className=\"absolute inset-0 bg-black\"\r\n+                        initial={{ width: 0, left: \"50%\" }}\r\n+                        animate={{ width: \"100%\", left: 0 }}\r\n+                        transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n+                      />\r\n+                    )}\r\n+                  </div>\r\n                 </button>\r\n               </div>\r\n-              <div className=\"inline-block\">\r\n-                <button\r\n-                  ref={buttonRefs.sort}\r\n-                  onClick={handleSortButtonClick}\r\n-                  onMouseEnter={() => handleButtonHover(\"sort\")}\r\n-                  onMouseLeave={handleButtonLeave}\r\n-                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n-                >\r\n-                  <span className=\"px-1\">{t('products.sort.title')}</span>\r\n-                  <svg\r\n-                    xmlns=\"http://www.w3.org/2000/svg\"\r\n-                    className=\"h-3 w-3\"\r\n-                    fill=\"none\"\r\n-                    viewBox=\"0 0 24 24\"\r\n-                    stroke=\"currentColor\"\r\n-                  >\r\n-                    <path\r\n-                      strokeLinecap=\"round\"\r\n-                      strokeLinejoin=\"round\"\r\n-                      strokeWidth={2}\r\n-                      d=\"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\"\r\n-                    />\r\n-                  </svg>\r\n-                </button>\r\n-              </div>\r\n+              <SortSection\r\n+                isSortOpen={isSortOpen}\r\n+                sortRef={sortRef}\r\n+                selectedSort={sortOption}\r\n+                handleSortChange={(option) => {\r\n+                  setSortOption(option);\r\n+                  setCurrentPage(1);\r\n+                  setIsSortOpen(false);\r\n+                }}\r\n+                handleCloseSort={() => setIsSortOpen(false)}\r\n+                handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n+                sortOptions={sortOptions}\r\n+                onMouseEnter={() => handleButtonHover(\"sort\")}\r\n+                onMouseLeave={handleButtonLeave}\r\n+                hoveredButton={hoveredButton}\r\n+                activeButton={activeButton}\r\n+              />\r\n             </div>\r\n           </div>\r\n         </div>\r\n       </div>\r\n \r\n       <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\r\n-        <div className=\"flex flex-col md:flex-row gap-4\">\r\n-          <div className=\"w-full md:w-1/4\">\r\n-            <FilterSection\r\n-              colors={colors}\r\n-              sizes={sizes}\r\n-              selectedColors={selectedColors}\r\n-              selectedSizes={selectedSizes}\r\n-              onColorChange={handleColorChange}\r\n-              onSizeChange={handleSizeChange}\r\n-              colorLabels={colorLabels}\r\n-              sizeLabels={sizeLabels}\r\n-              isOpen={isFilterOpen}\r\n-              filterRef={filterRef}\r\n-            />\r\n-          </div>\r\n-          <div className=\"w-full md:w-3/4\">\r\n-            <SortSection\r\n-              sortOptions={sortOptions}\r\n-              selectedSort={sortOption}\r\n-              onSortChange={setSortOption}\r\n-              isOpen={isSortOpen}\r\n-              sortRef={sortRef}\r\n-            />\r\n-            {currentProducts.length > 0 ? (\r\n-              <ProductGrid\r\n-                products={currentProducts}\r\n-                hoveredProduct={hoveredProduct}\r\n-                productImageIndex={productImageIndex}\r\n-                onProductHover={handleProductHover}\r\n-                onProductLeave={handleProductLeave}\r\n-                onPrevImage={handlePrevImage}\r\n-                onNextImage={handleNextImage}\r\n-              />\r\n-            ) : (\r\n-              <NoProductsMessage />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n+        {isFilterOpen && (\r\n+          <FilterSection\r\n+            isFilterOpen={isFilterOpen}\r\n+            filterRef={filterRef}\r\n+            selectedColors={selectedColors}\r\n+            selectedSizes={selectedSizes}\r\n+            handleColorChange={handleColorChange}\r\n+            handleSizeChange={handleSizeChange}\r\n+            handleCloseFilter={() => setIsFilterOpen(false)}\r\n+            handleApplyFilter={() => setIsFilterOpen(false)}\r\n+            colors={colors}\r\n+            sizes={sizes}\r\n+            capitalizeFirstLetter={capitalizeFirstLetter}\r\n+            groupedColors={groupColorsByFirstLetter()}\r\n+          />\r\n+        )}\r\n       </div>\r\n \r\n-      <div className=\"pb-20 mb-10\"></div>\r\n+      {sortedProducts.length > 0 ? (\r\n+        <ProductGrid\r\n+          products={currentProducts}\r\n+          productImageIndex={productImageIndex}\r\n+          handlePrevImage={handlePrevImage}\r\n+          handleNextImage={handleNextImage}\r\n+          onHover={handleProductHover}\r\n+          onLeave={handleProductLeave}\r\n+        />\r\n+      ) : (\r\n+        <NoProductsMessage />\r\n+      )}\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747321249331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,14 @@\n import ProductGrid from \"../../../components/ProductGrid\";\r\n import FilterSection from \"../../../components/FilterSection\";\r\n import SortSection from \"../../../components/SortSection\";\r\n import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n+import { useLanguage } from \"@/context/LanguageContext\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export default function TshirtPage() {\r\n+  const { t } = useLanguage();\r\n   const [hoveredProduct, setHoveredProduct] = useState(null);\r\n   const [productImageIndex, setProductImageIndex] = useState({});\r\n   const [isAutoSliding, setIsAutoSliding] = useState({});\r\n   const [isScrolled, setIsScrolled] = useState(false);\r\n@@ -76,12 +78,24 @@\n     const sortedLetters = Object.keys(grouped).sort();\r\n     return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n   };\r\n \r\n+  const colorLabels = [\r\n+    { value: \"black\", label: t('products.filter.colorBlack') },\r\n+    { value: \"white\", label: t('products.filter.colorWhite') },\r\n+    { value: \"blue\", label: t('products.filter.colorBlue') },\r\n+    { value: \"grey\", label: t('products.filter.colorGrey') },\r\n+  ];\r\n+  const sizeLabels = [\r\n+    { value: \"M\", label: t('products.filter.sizeM') },\r\n+    { value: \"L\", label: t('products.filter.sizeL') },\r\n+    { value: \"XL\", label: t('products.filter.sizeXL') },\r\n+  ];\r\n+\r\n   const sortOptions = [\r\n-    { value: \"newest\", label: \"Newest\" },\r\n-    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n-    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n+    { value: \"newest\", label: t('products.sort.newest') },\r\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n   ];\r\n \r\n   useEffect(() => {\r\n     const handleScroll = () => setIsScrolled(window.scrollY > 50);\r\n@@ -210,9 +224,9 @@\n           exit={{ opacity: 0, y: -10 }}\r\n           transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n           className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n         >\r\n-          Thank you for choosing AISH. We truly appreciate it.\r\n+          {t('navbar.thankYou')}\r\n         </motion.div>\r\n       )}\r\n \r\n       <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\r\n@@ -224,9 +238,9 @@\n                 onMouseEnter={() => handleButtonHover(\"tshirt\")}\r\n                 onMouseLeave={handleButtonLeave}\r\n                 className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\r\n               >\r\n-                Tops / T-shirt\r\n+                {t('navbar.tshirt')}\r\n                 <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n                   <motion.div\r\n                     className=\"absolute inset-0 bg-black\"\r\n                     initial={{ width: \"100%\", left: 0 }}\r\n@@ -244,9 +258,9 @@\n                   onMouseEnter={() => handleButtonHover(\"filters\")}\r\n                   onMouseLeave={handleButtonLeave}\r\n                   className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n                 >\r\n-                  <span className=\"px-1\">Filters</span>\r\n+                  <span className=\"px-1\">{t('products.filters')}</span>\r\n                   <svg\r\n                     xmlns=\"http://www.w3.org/2000/svg\"\r\n                     className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n                     fill=\"none\"\r\n@@ -301,8 +315,10 @@\n             handleCloseFilter={() => setIsFilterOpen(false)}\r\n             handleApplyFilter={() => setIsFilterOpen(false)}\r\n             colors={colors}\r\n             sizes={sizes}\r\n+            colorLabels={colorLabels}\r\n+            sizeLabels={sizeLabels}\r\n             capitalizeFirstLetter={capitalizeFirstLetter}\r\n             groupedColors={groupColorsByFirstLetter()}\r\n           />\r\n         )}\r\n"
                },
                {
                    "date": 1747321698963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,39 +303,48 @@\n         </div>\r\n       </div>\r\n \r\n       <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\r\n-        {isFilterOpen && (\r\n-          <FilterSection\r\n-            isFilterOpen={isFilterOpen}\r\n-            filterRef={filterRef}\r\n-            selectedColors={selectedColors}\r\n-            selectedSizes={selectedSizes}\r\n-            handleColorChange={handleColorChange}\r\n-            handleSizeChange={handleSizeChange}\r\n-            handleCloseFilter={() => setIsFilterOpen(false)}\r\n-            handleApplyFilter={() => setIsFilterOpen(false)}\r\n-            colors={colors}\r\n-            sizes={sizes}\r\n-            colorLabels={colorLabels}\r\n-            sizeLabels={sizeLabels}\r\n-            capitalizeFirstLetter={capitalizeFirstLetter}\r\n-            groupedColors={groupColorsByFirstLetter()}\r\n-          />\r\n-        )}\r\n+        <div className=\"flex flex-col md:flex-row gap-4\">\r\n+          <div className=\"w-full md:w-1/4\">\r\n+            <FilterSection\r\n+              colors={colors}\r\n+              sizes={sizes}\r\n+              selectedColors={selectedColors}\r\n+              selectedSizes={selectedSizes}\r\n+              onColorChange={handleColorChange}\r\n+              onSizeChange={handleSizeChange}\r\n+              colorLabels={colorLabels}\r\n+              sizeLabels={sizeLabels}\r\n+              isOpen={isFilterOpen}\r\n+              filterRef={filterRef}\r\n+            />\r\n+          </div>\r\n+          <div className=\"w-full md:w-3/4\">\r\n+            <SortSection\r\n+              sortOptions={sortOptions}\r\n+              selectedSort={sortOption}\r\n+              onSortChange={setSortOption}\r\n+              isOpen={isSortOpen}\r\n+              sortRef={sortRef}\r\n+            />\r\n+            {currentProducts.length > 0 ? (\r\n+              <ProductGrid\r\n+                products={currentProducts}\r\n+                hoveredProduct={hoveredProduct}\r\n+                productImageIndex={productImageIndex}\r\n+                onProductHover={handleProductHover}\r\n+                onProductLeave={handleProductLeave}\r\n+                onPrevImage={handlePrevImage}\r\n+                onNextImage={handleNextImage}\r\n+              />\r\n+            ) : (\r\n+              <NoProductsMessage />\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n       </div>\r\n \r\n-      {sortedProducts.length > 0 ? (\r\n-        <ProductGrid\r\n-          products={currentProducts}\r\n-          productImageIndex={productImageIndex}\r\n-          handlePrevImage={handlePrevImage}\r\n-          handleNextImage={handleNextImage}\r\n-          onHover={handleProductHover}\r\n-          onLeave={handleProductLeave}\r\n-        />\r\n-      ) : (\r\n-        <NoProductsMessage />\r\n-      )}\r\n+      <div className=\"pb-20 mb-10\"></div>\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747321771941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,48 +303,39 @@\n         </div>\r\n       </div>\r\n \r\n       <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\r\n-        <div className=\"flex flex-col md:flex-row gap-4\">\r\n-          <div className=\"w-full md:w-1/4\">\r\n-            <FilterSection\r\n-              colors={colors}\r\n-              sizes={sizes}\r\n-              selectedColors={selectedColors}\r\n-              selectedSizes={selectedSizes}\r\n-              onColorChange={handleColorChange}\r\n-              onSizeChange={handleSizeChange}\r\n-              colorLabels={colorLabels}\r\n-              sizeLabels={sizeLabels}\r\n-              isOpen={isFilterOpen}\r\n-              filterRef={filterRef}\r\n-            />\r\n-          </div>\r\n-          <div className=\"w-full md:w-3/4\">\r\n-            <SortSection\r\n-              sortOptions={sortOptions}\r\n-              selectedSort={sortOption}\r\n-              onSortChange={setSortOption}\r\n-              isOpen={isSortOpen}\r\n-              sortRef={sortRef}\r\n-            />\r\n-            {currentProducts.length > 0 ? (\r\n-              <ProductGrid\r\n-                products={currentProducts}\r\n-                hoveredProduct={hoveredProduct}\r\n-                productImageIndex={productImageIndex}\r\n-                onProductHover={handleProductHover}\r\n-                onProductLeave={handleProductLeave}\r\n-                onPrevImage={handlePrevImage}\r\n-                onNextImage={handleNextImage}\r\n-              />\r\n-            ) : (\r\n-              <NoProductsMessage />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n+        {isFilterOpen && (\r\n+          <FilterSection\r\n+            isFilterOpen={isFilterOpen}\r\n+            filterRef={filterRef}\r\n+            selectedColors={selectedColors}\r\n+            selectedSizes={selectedSizes}\r\n+            handleColorChange={handleColorChange}\r\n+            handleSizeChange={handleSizeChange}\r\n+            handleCloseFilter={() => setIsFilterOpen(false)}\r\n+            handleApplyFilter={() => setIsFilterOpen(false)}\r\n+            colors={colors}\r\n+            sizes={sizes}\r\n+            colorLabels={colorLabels}\r\n+            sizeLabels={sizeLabels}\r\n+            capitalizeFirstLetter={capitalizeFirstLetter}\r\n+            groupedColors={groupColorsByFirstLetter()}\r\n+          />\r\n+        )}\r\n       </div>\r\n \r\n-      <div className=\"pb-20 mb-10\"></div>\r\n+      {sortedProducts.length > 0 ? (\r\n+        <ProductGrid\r\n+          products={currentProducts}\r\n+          productImageIndex={productImageIndex}\r\n+          handlePrevImage={handlePrevImage}\r\n+          handleNextImage={handleNextImage}\r\n+          onHover={handleProductHover}\r\n+          onLeave={handleProductLeave}\r\n+        />\r\n+      ) : (\r\n+        <NoProductsMessage />\r\n+      )}\r\n     </div>\r\n   );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747321927671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,14 +313,23 @@\n             handleColorChange={handleColorChange}\r\n             handleSizeChange={handleSizeChange}\r\n             handleCloseFilter={() => setIsFilterOpen(false)}\r\n             handleApplyFilter={() => setIsFilterOpen(false)}\r\n-            colors={colors}\r\n-            sizes={sizes}\r\n+            colors={colorLabels.map(c => c.value)}\r\n+            sizes={sizeLabels.map(s => s.value)}\r\n+            capitalizeFirstLetter={capitalizeFirstLetter}\r\n+            groupedColors={colorLabels.map(c => c.value)}\r\n+            title={t('products.filter.colorLabel')}\r\n+            colorLabel={t('products.filter.colorLabel')}\r\n+            sizeLabel={t('products.filter.sizeLabel')}\r\n+            applyLabel={t('products.filter.apply')}\r\n+            resetLabel={t('products.filter.reset')}\r\n+            allColorsLabel={t('products.filter.allColors')}\r\n+            allSizesLabel={t('products.filter.allSizes')}\r\n+            selectHint={t('products.filter.selectHint')}\r\n+            closeLabel={t('products.filter.close')}\r\n             colorLabels={colorLabels}\r\n             sizeLabels={sizeLabels}\r\n-            capitalizeFirstLetter={capitalizeFirstLetter}\r\n-            groupedColors={groupColorsByFirstLetter()}\r\n           />\r\n         )}\r\n       </div>\r\n \r\n"
                },
                {
                    "date": 1749615871076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,350 +1,351 @@\n-\"use client\";\r\n-import { useState, useEffect, useRef } from \"react\";\r\n-import { motion } from \"framer-motion\";\r\n-import { usePathname } from \"next/navigation\";\r\n-import { useProductFilters } from \"../../../hooks/useProductFilters\";\r\n-import ProductGrid from \"../../../components/ProductGrid\";\r\n-import FilterSection from \"../../../components/FilterSection\";\r\n-import SortSection from \"../../../components/SortSection\";\r\n-import NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n-import { useLanguage } from \"@/context/LanguageContext\";\r\n-\r\n-const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n-\r\n-export default function TshirtPage() {\r\n-  const { t } = useLanguage();\r\n-  const [hoveredProduct, setHoveredProduct] = useState(null);\r\n-  const [productImageIndex, setProductImageIndex] = useState({});\r\n-  const [isAutoSliding, setIsAutoSliding] = useState({});\r\n-  const [isScrolled, setIsScrolled] = useState(false);\r\n-  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n-  const [isSortOpen, setIsSortOpen] = useState(false);\r\n-  const [activeButton, setActiveButton] = useState(\"tshirt\");\r\n-  const [hoveredButton, setHoveredButton] = useState(null);\r\n-  const [currentPage, setCurrentPage] = useState(1);\r\n-  const [productsPerPage] = useState(8);\r\n-  const [products, setProducts] = useState([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const pathname = usePathname();\r\n-  const filterRef = useRef(null);\r\n-  const sortRef = useRef(null);\r\n-  const buttonRefs = {\r\n-    tshirt: useRef(null),\r\n-    filters: useRef(null),\r\n-    sort: useRef(null),\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const fetchProducts = async () => {\r\n-      try {\r\n-        const response = await fetch('/api/products');\r\n-        const data = await response.json();\r\n-        if (data.ok) {\r\n-          const tshirtProducts = data.products\r\n-            .filter(product => product.category === \"TSHIRT\")\r\n-            .map(product => ({\r\n-              ...product,\r\n-              images: product.images?.map(url => \r\n-                url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-              ) || []\r\n-            }));\r\n-          setProducts(tshirtProducts);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error fetching products:', error);\r\n-      } finally {\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchProducts();\r\n-  }, []);\r\n-\r\n-  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n-    useProductFilters(products);\r\n-\r\n-  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n-  const sizes = [\"M\", \"L\", \"XL\"];\r\n-\r\n-  const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);\r\n-\r\n-  const groupColorsByFirstLetter = () => {\r\n-    const grouped = { a: [\"all\"] };\r\n-    colors.forEach((color) => {\r\n-      const firstLetter = color.charAt(0).toLowerCase();\r\n-      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n-      grouped[firstLetter].push(color);\r\n-    });\r\n-    const sortedLetters = Object.keys(grouped).sort();\r\n-    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n-  };\r\n-\r\n-  const colorLabels = [\r\n-    { value: \"black\", label: t('products.filter.colorBlack') },\r\n-    { value: \"white\", label: t('products.filter.colorWhite') },\r\n-    { value: \"blue\", label: t('products.filter.colorBlue') },\r\n-    { value: \"grey\", label: t('products.filter.colorGrey') },\r\n-  ];\r\n-  const sizeLabels = [\r\n-    { value: \"M\", label: t('products.filter.sizeM') },\r\n-    { value: \"L\", label: t('products.filter.sizeL') },\r\n-    { value: \"XL\", label: t('products.filter.sizeXL') },\r\n-  ];\r\n-\r\n-  const sortOptions = [\r\n-    { value: \"newest\", label: t('products.sort.newest') },\r\n-    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n-    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n-  ];\r\n-\r\n-  useEffect(() => {\r\n-    const handleScroll = () => setIsScrolled(window.scrollY > 50);\r\n-    window.addEventListener(\"scroll\", handleScroll);\r\n-    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (event) => {\r\n-      if (buttonRefs.filters.current?.contains(event.target) || buttonRefs.sort.current?.contains(event.target)) return;\r\n-      if (filterRef.current && !filterRef.current.contains(event.target)) setIsFilterOpen(false);\r\n-      if (sortRef.current && !sortRef.current.contains(event.target)) setIsSortOpen(false);\r\n-    };\r\n-    document.addEventListener(\"mousedown\", handleClickOutside);\r\n-    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (!hoveredProduct || !isAutoSliding[hoveredProduct]) return;\r\n-\r\n-    const interval = setInterval(() => {\r\n-      setProductImageIndex((prev) => {\r\n-        const currentIndex = prev[hoveredProduct] || 0;\r\n-        const product = products.find((p) => p._id === hoveredProduct);\r\n-        const nextIndex = (currentIndex + 1) % product.images.length;\r\n-        return { ...prev, [hoveredProduct]: nextIndex };\r\n-      });\r\n-    }, 1000);\r\n-\r\n-    return () => clearInterval(interval);\r\n-  }, [hoveredProduct, isAutoSliding, products]);\r\n-\r\n-  const handleProductHover = (productId) => {\r\n-    setHoveredProduct(productId);\r\n-    setIsAutoSliding((prev) => ({ ...prev, [productId]: true }));\r\n-    if (!productImageIndex[productId]) setProductImageIndex((prev) => ({ ...prev, [productId]: 0 }));\r\n-  };\r\n-\r\n-  const handleProductLeave = () => {\r\n-    setHoveredProduct(null);\r\n-    setIsAutoSliding({});\r\n-    setProductImageIndex((prev) => {\r\n-      const newIndices = { ...prev };\r\n-      if (hoveredProduct) newIndices[hoveredProduct] = 0;\r\n-      return newIndices;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePrevImage = (e, productId) => {\r\n-    e.stopPropagation();\r\n-    setIsAutoSliding((prev) => ({ ...prev, [productId]: false }));\r\n-    const product = products.find((p) => p._id === productId);\r\n-    if (product) {\r\n-      const currentIndex = productImageIndex[productId] || 0;\r\n-      const prevIndex = (currentIndex - 1 + product.images.length) % product.images.length;\r\n-      setProductImageIndex((prev) => ({ ...prev, [productId]: prevIndex }));\r\n-    }\r\n-  };\r\n-\r\n-  const handleNextImage = (e, productId) => {\r\n-    e.stopPropagation();\r\n-    setIsAutoSliding((prev) => ({ ...prev, [productId]: false }));\r\n-    const product = products.find((p) => p._id === productId);\r\n-    if (product) {\r\n-      const currentIndex = productImageIndex[productId] || 0;\r\n-      const nextIndex = (currentIndex + 1) % product.images.length;\r\n-      setProductImageIndex((prev) => ({ ...prev, [productId]: nextIndex }));\r\n-    }\r\n-  };\r\n-\r\n-  const handleColorChange = (color) => {\r\n-    if (color === \"all\") setSelectedColors([]);\r\n-    else setSelectedColors((prev) => (prev.includes(color) ? prev.filter((c) => c !== color) : [...prev, color]));\r\n-    setCurrentPage(1);\r\n-  };\r\n-\r\n-  const handleSizeChange = (size) => {\r\n-    if (size === \"all\") setSelectedSizes([]);\r\n-    else setSelectedSizes((prev) => (prev.includes(size) ? prev.filter((s) => s !== size) : [...prev, size]));\r\n-    setCurrentPage(1);\r\n-  };\r\n-\r\n-  const handleFilterButtonClick = (e) => {\r\n-    e.stopPropagation();\r\n-    setIsFilterOpen(!isFilterOpen);\r\n-    setIsSortOpen(false);\r\n-    setActiveButton(\"filters\");\r\n-  };\r\n-\r\n-  const handleSortButtonClick = (e) => {\r\n-    e.stopPropagation();\r\n-    setIsSortOpen(!isSortOpen);\r\n-    setIsFilterOpen(false);\r\n-    setActiveButton(\"sort\");\r\n-  };\r\n-\r\n-  const handleButtonHover = (buttonName) => setHoveredButton(buttonName);\r\n-  const handleButtonLeave = () => setHoveredButton(null);\r\n-\r\n-  const indexOfLastProduct = currentPage * productsPerPage;\r\n-  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\r\n-  const currentProducts = sortedProducts.slice(indexOfFirstProduct, indexOfLastProduct);\r\n-  const totalPages = Math.ceil(sortedProducts.length / productsPerPage);\r\n-\r\n-  const handlePageChange = (pageNumber) => {\r\n-    setCurrentPage(pageNumber);\r\n-    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n-  };\r\n-\r\n-  if (isLoading) {\r\n-    return (\r\n-      <div className=\"flex justify-center items-center min-h-screen\">\r\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"min-h-screen bg-white\">\r\n-      <div className=\"h-[60px]\"></div>\r\n-\r\n-      {!isScrolled && ![\"/login\", \"/register\"].includes(pathname) && (\r\n-        <motion.div\r\n-          initial={{ opacity: 0, y: -10 }}\r\n-          animate={{ opacity: 1, y: 0 }}\r\n-          exit={{ opacity: 0, y: -10 }}\r\n-          transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n-          className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n-        >\r\n-          {t('navbar.thankYou')}\r\n-        </motion.div>\r\n-      )}\r\n-\r\n-      <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\r\n-        <div className=\"px-2 sm:px-4 md:px-6 lg:px-8\">\r\n-          <div className=\"flex justify-between items-center relative\">\r\n-            <div className=\"inline-block\">\r\n-              <button\r\n-                ref={buttonRefs.tshirt}\r\n-                onMouseEnter={() => handleButtonHover(\"tshirt\")}\r\n-                onMouseLeave={handleButtonLeave}\r\n-                className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\r\n-              >\r\n-                {t('navbar.tshirt')}\r\n-                <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-                  <motion.div\r\n-                    className=\"absolute inset-0 bg-black\"\r\n-                    initial={{ width: \"100%\", left: 0 }}\r\n-                    animate={{ width: \"100%\", left: 0 }}\r\n-                    transition={{ duration: 0 }}\r\n-                  />\r\n-                </div>\r\n-              </button>\r\n-            </div>\r\n-            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6\">\r\n-              <div className=\"inline-block\">\r\n-                <button\r\n-                  ref={buttonRefs.filters}\r\n-                  onClick={handleFilterButtonClick}\r\n-                  onMouseEnter={() => handleButtonHover(\"filters\")}\r\n-                  onMouseLeave={handleButtonLeave}\r\n-                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n-                >\r\n-                  <span className=\"px-1\">{t('products.filters')}</span>\r\n-                  <svg\r\n-                    xmlns=\"http://www.w3.org/2000/svg\"\r\n-                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n-                    fill=\"none\"\r\n-                    viewBox=\"0 0 24 24\"\r\n-                    stroke=\"currentColor\"\r\n-                  >\r\n-                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-                  </svg>\r\n-                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\r\n-                      <motion.div\r\n-                        className=\"absolute inset-0 bg-black\"\r\n-                        initial={{ width: 0, left: \"50%\" }}\r\n-                        animate={{ width: \"100%\", left: 0 }}\r\n-                        transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-                      />\r\n-                    )}\r\n-                  </div>\r\n-                </button>\r\n-              </div>\r\n-              <SortSection\r\n-                isSortOpen={isSortOpen}\r\n-                sortRef={sortRef}\r\n-                selectedSort={sortOption}\r\n-                handleSortChange={(option) => {\r\n-                  setSortOption(option);\r\n-                  setCurrentPage(1);\r\n-                  setIsSortOpen(false);\r\n-                }}\r\n-                handleCloseSort={() => setIsSortOpen(false)}\r\n-                handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n-                sortOptions={sortOptions}\r\n-                onMouseEnter={() => handleButtonHover(\"sort\")}\r\n-                onMouseLeave={handleButtonLeave}\r\n-                hoveredButton={hoveredButton}\r\n-                activeButton={activeButton}\r\n-              />\r\n-            </div>\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\r\n-        {isFilterOpen && (\r\n-          <FilterSection\r\n-            isFilterOpen={isFilterOpen}\r\n-            filterRef={filterRef}\r\n-            selectedColors={selectedColors}\r\n-            selectedSizes={selectedSizes}\r\n-            handleColorChange={handleColorChange}\r\n-            handleSizeChange={handleSizeChange}\r\n-            handleCloseFilter={() => setIsFilterOpen(false)}\r\n-            handleApplyFilter={() => setIsFilterOpen(false)}\r\n-            colors={colorLabels.map(c => c.value)}\r\n-            sizes={sizeLabels.map(s => s.value)}\r\n-            capitalizeFirstLetter={capitalizeFirstLetter}\r\n-            groupedColors={colorLabels.map(c => c.value)}\r\n-            title={t('products.filter.colorLabel')}\r\n-            colorLabel={t('products.filter.colorLabel')}\r\n-            sizeLabel={t('products.filter.sizeLabel')}\r\n-            applyLabel={t('products.filter.apply')}\r\n-            resetLabel={t('products.filter.reset')}\r\n-            allColorsLabel={t('products.filter.allColors')}\r\n-            allSizesLabel={t('products.filter.allSizes')}\r\n-            selectHint={t('products.filter.selectHint')}\r\n-            closeLabel={t('products.filter.close')}\r\n-            colorLabels={colorLabels}\r\n-            sizeLabels={sizeLabels}\r\n-          />\r\n-        )}\r\n-      </div>\r\n-\r\n-      {sortedProducts.length > 0 ? (\r\n-        <ProductGrid\r\n-          products={currentProducts}\r\n-          productImageIndex={productImageIndex}\r\n-          handlePrevImage={handlePrevImage}\r\n-          handleNextImage={handleNextImage}\r\n-          onHover={handleProductHover}\r\n-          onLeave={handleProductLeave}\r\n-        />\r\n-      ) : (\r\n-        <NoProductsMessage />\r\n-      )}\r\n-    </div>\r\n-  );\r\n+\"use client\";\n+import { useState, useEffect, useRef } from \"react\";\n+import { motion } from \"framer-motion\";\n+import { usePathname } from \"next/navigation\";\n+import { useProductFilters } from \"../../../hooks/useProductFilters\";\n+import ProductGrid from \"../../../components/ProductGrid\";\n+import FilterSection from \"../../../components/FilterSection\";\n+import SortSection from \"../../../components/SortSection\";\n+import NoProductsMessage from \"../../../components/NoProductsMessage\";\n+import { useLanguage } from \"@/context/LanguageContext\";\n+\n+const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\n+\n+export default function TshirtPage() {\n+  const { t } = useLanguage();\n+  const [hoveredProduct, setHoveredProduct] = useState(null);\n+  const [productImageIndex, setProductImageIndex] = useState({});\n+  const [isAutoSliding, setIsAutoSliding] = useState({});\n+  const [isScrolled, setIsScrolled] = useState(false);\n+  const [isFilterOpen, setIsFilterOpen] = useState(false);\n+  const [isSortOpen, setIsSortOpen] = useState(false);\n+  const [activeButton, setActiveButton] = useState(\"tshirt\");\n+  const [hoveredButton, setHoveredButton] = useState(null);\n+  const [currentPage, setCurrentPage] = useState(1);\n+  const [productsPerPage] = useState(8);\n+  const [products, setProducts] = useState([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const pathname = usePathname();\n+  const filterRef = useRef(null);\n+  const sortRef = useRef(null);\n+  const buttonRefs = {\n+    tshirt: useRef(null),\n+    filters: useRef(null),\n+    sort: useRef(null),\n+  };\n+\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      try {\n+        const response = await fetch('/api/products');\n+        const data = await response.json();\n+        if (data.ok) {\n+          const tshirtProducts = data.products\n+            .filter(product => product.category === \"TSHIRT\")\n+            .map(product => ({\n+              ...product,\n+              images: product.images?.map(url => \n+                url.startsWith('http') ? url : `${DOMAIN}${url}`\n+              ) || []\n+            }));\n+          setProducts(tshirtProducts);\n+        }\n+      } catch (error) {\n+        console.error('Error fetching products:', error);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchProducts();\n+  }, []);\n+\n+  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n+    useProductFilters(products);\n+\n+  const colors = [\"black\", \"white\", \"blue\", \"grey\", \"beige\"];\n+  const sizes = [\"M\", \"L\", \"XL\"];\n+\n+  const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);\n+\n+  const groupColorsByFirstLetter = () => {\n+    const grouped = { a: [\"all\"] };\n+    colors.forEach((color) => {\n+      const firstLetter = color.charAt(0).toLowerCase();\n+      if (!grouped[firstLetter]) grouped[firstLetter] = [];\n+      grouped[firstLetter].push(color);\n+    });\n+    const sortedLetters = Object.keys(grouped).sort();\n+    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\n+  };\n+\n+  const colorLabels = [\n+    { value: \"black\", label: t('products.filter.colorBlack') },\n+    { value: \"white\", label: t('products.filter.colorWhite') },\n+    { value: \"blue\", label: t('products.filter.colorBlue') },\n+    { value: \"grey\", label: t('products.filter.colorGrey') },\n+    { value: \"beige\", label: t('products.filter.colorBeige') },\n+  ];\n+  const sizeLabels = [\n+    { value: \"M\", label: t('products.filter.sizeM') },\n+    { value: \"L\", label: t('products.filter.sizeL') },\n+    { value: \"XL\", label: t('products.filter.sizeXL') },\n+  ];\n+\n+  const sortOptions = [\n+    { value: \"newest\", label: t('products.sort.newest') },\n+    { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\n+    { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\n+  ];\n+\n+  useEffect(() => {\n+    const handleScroll = () => setIsScrolled(window.scrollY > 50);\n+    window.addEventListener(\"scroll\", handleScroll);\n+    return () => window.removeEventListener(\"scroll\", handleScroll);\n+  }, []);\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event) => {\n+      if (buttonRefs.filters.current?.contains(event.target) || buttonRefs.sort.current?.contains(event.target)) return;\n+      if (filterRef.current && !filterRef.current.contains(event.target)) setIsFilterOpen(false);\n+      if (sortRef.current && !sortRef.current.contains(event.target)) setIsSortOpen(false);\n+    };\n+    document.addEventListener(\"mousedown\", handleClickOutside);\n+    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n+  }, []);\n+\n+  useEffect(() => {\n+    if (!hoveredProduct || !isAutoSliding[hoveredProduct]) return;\n+\n+    const interval = setInterval(() => {\n+      setProductImageIndex((prev) => {\n+        const currentIndex = prev[hoveredProduct] || 0;\n+        const product = products.find((p) => p._id === hoveredProduct);\n+        const nextIndex = (currentIndex + 1) % product.images.length;\n+        return { ...prev, [hoveredProduct]: nextIndex };\n+      });\n+    }, 1000);\n+\n+    return () => clearInterval(interval);\n+  }, [hoveredProduct, isAutoSliding, products]);\n+\n+  const handleProductHover = (productId) => {\n+    setHoveredProduct(productId);\n+    setIsAutoSliding((prev) => ({ ...prev, [productId]: true }));\n+    if (!productImageIndex[productId]) setProductImageIndex((prev) => ({ ...prev, [productId]: 0 }));\n+  };\n+\n+  const handleProductLeave = () => {\n+    setHoveredProduct(null);\n+    setIsAutoSliding({});\n+    setProductImageIndex((prev) => {\n+      const newIndices = { ...prev };\n+      if (hoveredProduct) newIndices[hoveredProduct] = 0;\n+      return newIndices;\n+    });\n+  };\n+\n+  const handlePrevImage = (e, productId) => {\n+    e.stopPropagation();\n+    setIsAutoSliding((prev) => ({ ...prev, [productId]: false }));\n+    const product = products.find((p) => p._id === productId);\n+    if (product) {\n+      const currentIndex = productImageIndex[productId] || 0;\n+      const prevIndex = (currentIndex - 1 + product.images.length) % product.images.length;\n+      setProductImageIndex((prev) => ({ ...prev, [productId]: prevIndex }));\n+    }\n+  };\n+\n+  const handleNextImage = (e, productId) => {\n+    e.stopPropagation();\n+    setIsAutoSliding((prev) => ({ ...prev, [productId]: false }));\n+    const product = products.find((p) => p._id === productId);\n+    if (product) {\n+      const currentIndex = productImageIndex[productId] || 0;\n+      const nextIndex = (currentIndex + 1) % product.images.length;\n+      setProductImageIndex((prev) => ({ ...prev, [productId]: nextIndex }));\n+    }\n+  };\n+\n+  const handleColorChange = (color) => {\n+    if (color === \"all\") setSelectedColors([]);\n+    else setSelectedColors((prev) => (prev.includes(color) ? prev.filter((c) => c !== color) : [...prev, color]));\n+    setCurrentPage(1);\n+  };\n+\n+  const handleSizeChange = (size) => {\n+    if (size === \"all\") setSelectedSizes([]);\n+    else setSelectedSizes((prev) => (prev.includes(size) ? prev.filter((s) => s !== size) : [...prev, size]));\n+    setCurrentPage(1);\n+  };\n+\n+  const handleFilterButtonClick = (e) => {\n+    e.stopPropagation();\n+    setIsFilterOpen(!isFilterOpen);\n+    setIsSortOpen(false);\n+    setActiveButton(\"filters\");\n+  };\n+\n+  const handleSortButtonClick = (e) => {\n+    e.stopPropagation();\n+    setIsSortOpen(!isSortOpen);\n+    setIsFilterOpen(false);\n+    setActiveButton(\"sort\");\n+  };\n+\n+  const handleButtonHover = (buttonName) => setHoveredButton(buttonName);\n+  const handleButtonLeave = () => setHoveredButton(null);\n+\n+  const indexOfLastProduct = currentPage * productsPerPage;\n+  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\n+  const currentProducts = sortedProducts.slice(indexOfFirstProduct, indexOfLastProduct);\n+  const totalPages = Math.ceil(sortedProducts.length / productsPerPage);\n+\n+  const handlePageChange = (pageNumber) => {\n+    setCurrentPage(pageNumber);\n+    window.scrollTo({ top: 0, behavior: \"smooth\" });\n+  };\n+\n+  if (isLoading) {\n+    return (\n+      <div className=\"flex justify-center items-center min-h-screen\">\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"min-h-screen bg-white\">\n+      <div className=\"h-[60px]\"></div>\n+\n+      {!isScrolled && ![\"/login\", \"/register\"].includes(pathname) && (\n+        <motion.div\n+          initial={{ opacity: 0, y: -10 }}\n+          animate={{ opacity: 1, y: 0 }}\n+          exit={{ opacity: 0, y: -10 }}\n+          transition={{ duration: 0.5, ease: \"easeInOut\" }}\n+          className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\n+        >\n+          {t('navbar.thankYou')}\n+        </motion.div>\n+      )}\n+\n+      <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\n+        <div className=\"px-2 sm:px-4 md:px-6 lg:px-8\">\n+          <div className=\"flex justify-between items-center relative\">\n+            <div className=\"inline-block\">\n+              <button\n+                ref={buttonRefs.tshirt}\n+                onMouseEnter={() => handleButtonHover(\"tshirt\")}\n+                onMouseLeave={handleButtonLeave}\n+                className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\n+              >\n+                {t('navbar.tshirt')}\n+                <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+                  <motion.div\n+                    className=\"absolute inset-0 bg-black\"\n+                    initial={{ width: \"100%\", left: 0 }}\n+                    animate={{ width: \"100%\", left: 0 }}\n+                    transition={{ duration: 0 }}\n+                  />\n+                </div>\n+              </button>\n+            </div>\n+            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6\">\n+              <div className=\"inline-block\">\n+                <button\n+                  ref={buttonRefs.filters}\n+                  onClick={handleFilterButtonClick}\n+                  onMouseEnter={() => handleButtonHover(\"filters\")}\n+                  onMouseLeave={handleButtonLeave}\n+                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n+                >\n+                  <span className=\"px-1\">{t('products.filters')}</span>\n+                  <svg\n+                    xmlns=\"http://www.w3.org/2000/svg\"\n+                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n+                    fill=\"none\"\n+                    viewBox=\"0 0 24 24\"\n+                    stroke=\"currentColor\"\n+                  >\n+                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n+                  </svg>\n+                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\n+                      <motion.div\n+                        className=\"absolute inset-0 bg-black\"\n+                        initial={{ width: 0, left: \"50%\" }}\n+                        animate={{ width: \"100%\", left: 0 }}\n+                        transition={{ duration: 0.25, ease: \"easeOut\" }}\n+                      />\n+                    )}\n+                  </div>\n+                </button>\n+              </div>\n+              <SortSection\n+                isSortOpen={isSortOpen}\n+                sortRef={sortRef}\n+                selectedSort={sortOption}\n+                handleSortChange={(option) => {\n+                  setSortOption(option);\n+                  setCurrentPage(1);\n+                  setIsSortOpen(false);\n+                }}\n+                handleCloseSort={() => setIsSortOpen(false)}\n+                handleApplySort={() => setIsSortOpen(!isSortOpen)}\n+                sortOptions={sortOptions}\n+                onMouseEnter={() => handleButtonHover(\"sort\")}\n+                onMouseLeave={handleButtonLeave}\n+                hoveredButton={hoveredButton}\n+                activeButton={activeButton}\n+              />\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+\n+      <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\n+        {isFilterOpen && (\n+          <FilterSection\n+            isFilterOpen={isFilterOpen}\n+            filterRef={filterRef}\n+            selectedColors={selectedColors}\n+            selectedSizes={selectedSizes}\n+            handleColorChange={handleColorChange}\n+            handleSizeChange={handleSizeChange}\n+            handleCloseFilter={() => setIsFilterOpen(false)}\n+            handleApplyFilter={() => setIsFilterOpen(false)}\n+            colors={colorLabels.map(c => c.value)}\n+            sizes={sizeLabels.map(s => s.value)}\n+            capitalizeFirstLetter={capitalizeFirstLetter}\n+            groupedColors={colorLabels.map(c => c.value)}\n+            title={t('products.filter.colorLabel')}\n+            colorLabel={t('products.filter.colorLabel')}\n+            sizeLabel={t('products.filter.sizeLabel')}\n+            applyLabel={t('products.filter.apply')}\n+            resetLabel={t('products.filter.reset')}\n+            allColorsLabel={t('products.filter.allColors')}\n+            allSizesLabel={t('products.filter.allSizes')}\n+            selectHint={t('products.filter.selectHint')}\n+            closeLabel={t('products.filter.close')}\n+            colorLabels={colorLabels}\n+            sizeLabels={sizeLabels}\n+          />\n+        )}\n+      </div>\n+\n+      {sortedProducts.length > 0 ? (\n+        <ProductGrid\n+          products={currentProducts}\n+          productImageIndex={productImageIndex}\n+          handlePrevImage={handlePrevImage}\n+          handleNextImage={handleNextImage}\n+          onHover={handleProductHover}\n+          onLeave={handleProductLeave}\n+        />\n+      ) : (\n+        <NoProductsMessage />\n+      )}\n+    </div>\n+  );\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport { useProductFilters } from \"../../../hooks/useProductFilters\";\r\nimport ProductGrid from \"../../../components/ProductGrid\";\r\nimport FilterSection from \"../../../components/FilterSection\";\r\nimport SortSection from \"../../../components/SortSection\";\r\nimport NoProductsMessage from \"../../../components/NoProductsMessage\";\r\n\r\nconst DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n\r\nexport default function TshirtPage() {\r\n  const [hoveredProduct, setHoveredProduct] = useState(null);\r\n  const [productImageIndex, setProductImageIndex] = useState({});\r\n  const [isAutoSliding, setIsAutoSliding] = useState({});\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n  const [isSortOpen, setIsSortOpen] = useState(false);\r\n  const [activeButton, setActiveButton] = useState(\"tshirt\");\r\n  const [hoveredButton, setHoveredButton] = useState(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [productsPerPage] = useState(8);\r\n  const [products, setProducts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const pathname = usePathname();\r\n  const filterRef = useRef(null);\r\n  const sortRef = useRef(null);\r\n  const buttonRefs = {\r\n    tshirt: useRef(null),\r\n    filters: useRef(null),\r\n    sort: useRef(null),\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        const response = await fetch('/api/products');\r\n        const data = await response.json();\r\n        if (data.ok) {\r\n          const tshirtProducts = data.products\r\n            .filter(product => product.category === \"TSHIRT\")\r\n            .map(product => ({\r\n              ...product,\r\n              images: product.images?.map(url => \r\n                url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n              ) || []\r\n            }));\r\n          setProducts(tshirtProducts);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n  }, []);\r\n\r\n  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n    useProductFilters(products);\r\n\r\n  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n  const sizes = [\"M\", \"L\", \"XL\"];\r\n\r\n  const capitalizeFirstLetter = (string) => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n  const groupColorsByFirstLetter = () => {\r\n    const grouped = { a: [\"all\"] };\r\n    colors.forEach((color) => {\r\n      const firstLetter = color.charAt(0).toLowerCase();\r\n      if (!grouped[firstLetter]) grouped[firstLetter] = [];\r\n      grouped[firstLetter].push(color);\r\n    });\r\n    const sortedLetters = Object.keys(grouped).sort();\r\n    return sortedLetters.reduce((acc, letter) => [...acc, ...grouped[letter]], []);\r\n  };\r\n\r\n  const sortOptions = [\r\n    { value: \"newest\", label: \"Newest\" },\r\n    { value: \"price-low-to-high\", label: \"Price: Low to High\" },\r\n    { value: \"price-high-to-low\", label: \"Price: High to Low\" }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => setIsScrolled(window.scrollY > 50);\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      if (buttonRefs.filters.current?.contains(event.target) || buttonRefs.sort.current?.contains(event.target)) return;\r\n      if (filterRef.current && !filterRef.current.contains(event.target)) setIsFilterOpen(false);\r\n      if (sortRef.current && !sortRef.current.contains(event.target)) setIsSortOpen(false);\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!hoveredProduct || !isAutoSliding[hoveredProduct]) return;\r\n\r\n    const interval = setInterval(() => {\r\n      setProductImageIndex((prev) => {\r\n        const currentIndex = prev[hoveredProduct] || 0;\r\n        const product = products.find((p) => p._id === hoveredProduct);\r\n        const nextIndex = (currentIndex + 1) % product.images.length;\r\n        return { ...prev, [hoveredProduct]: nextIndex };\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [hoveredProduct, isAutoSliding, products]);\r\n\r\n  const handleProductHover = (productId) => {\r\n    setHoveredProduct(productId);\r\n    setIsAutoSliding((prev) => ({ ...prev, [productId]: true }));\r\n    if (!productImageIndex[productId]) setProductImageIndex((prev) => ({ ...prev, [productId]: 0 }));\r\n  };\r\n\r\n  const handleProductLeave = () => {\r\n    setHoveredProduct(null);\r\n    setIsAutoSliding({});\r\n    setProductImageIndex((prev) => {\r\n      const newIndices = { ...prev };\r\n      if (hoveredProduct) newIndices[hoveredProduct] = 0;\r\n      return newIndices;\r\n    });\r\n  };\r\n\r\n  const handlePrevImage = (e, productId) => {\r\n    e.stopPropagation();\r\n    setIsAutoSliding((prev) => ({ ...prev, [productId]: false }));\r\n    const product = products.find((p) => p._id === productId);\r\n    if (product) {\r\n      const currentIndex = productImageIndex[productId] || 0;\r\n      const prevIndex = (currentIndex - 1 + product.images.length) % product.images.length;\r\n      setProductImageIndex((prev) => ({ ...prev, [productId]: prevIndex }));\r\n    }\r\n  };\r\n\r\n  const handleNextImage = (e, productId) => {\r\n    e.stopPropagation();\r\n    setIsAutoSliding((prev) => ({ ...prev, [productId]: false }));\r\n    const product = products.find((p) => p._id === productId);\r\n    if (product) {\r\n      const currentIndex = productImageIndex[productId] || 0;\r\n      const nextIndex = (currentIndex + 1) % product.images.length;\r\n      setProductImageIndex((prev) => ({ ...prev, [productId]: nextIndex }));\r\n    }\r\n  };\r\n\r\n  const handleColorChange = (color) => {\r\n    if (color === \"all\") setSelectedColors([]);\r\n    else setSelectedColors((prev) => (prev.includes(color) ? prev.filter((c) => c !== color) : [...prev, color]));\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleSizeChange = (size) => {\r\n    if (size === \"all\") setSelectedSizes([]);\r\n    else setSelectedSizes((prev) => (prev.includes(size) ? prev.filter((s) => s !== size) : [...prev, size]));\r\n    setCurrentPage(1);\r\n  };\r\n\r\n  const handleFilterButtonClick = (e) => {\r\n    e.stopPropagation();\r\n    setIsFilterOpen(!isFilterOpen);\r\n    setIsSortOpen(false);\r\n    setActiveButton(\"filters\");\r\n  };\r\n\r\n  const handleSortButtonClick = (e) => {\r\n    e.stopPropagation();\r\n    setIsSortOpen(!isSortOpen);\r\n    setIsFilterOpen(false);\r\n    setActiveButton(\"sort\");\r\n  };\r\n\r\n  const handleButtonHover = (buttonName) => setHoveredButton(buttonName);\r\n  const handleButtonLeave = () => setHoveredButton(null);\r\n\r\n  const indexOfLastProduct = currentPage * productsPerPage;\r\n  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;\r\n  const currentProducts = sortedProducts.slice(indexOfFirstProduct, indexOfLastProduct);\r\n  const totalPages = Math.ceil(sortedProducts.length / productsPerPage);\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    setCurrentPage(pageNumber);\r\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white\">\r\n      <div className=\"h-[60px]\"></div>\r\n\r\n      {!isScrolled && ![\"/login\", \"/register\"].includes(pathname) && (\r\n        <motion.div\r\n          initial={{ opacity: 0, y: -10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: -10 }}\r\n          transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n          className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\"\r\n        >\r\n          Thank you for choosing AISH. We truly appreciate it.\r\n        </motion.div>\r\n      )}\r\n\r\n      <div className=\"sticky top-[60px] bg-white z-30 py-2 sm:py-4 border-b border-gray-100\">\r\n        <div className=\"px-2 sm:px-4 md:px-6 lg:px-8\">\r\n          <div className=\"flex justify-between items-center relative\">\r\n            <div className=\"inline-block\">\r\n              <button\r\n                ref={buttonRefs.tshirt}\r\n                onMouseEnter={() => handleButtonHover(\"tshirt\")}\r\n                onMouseLeave={handleButtonLeave}\r\n                className=\"text-[10px] sm:text-[10px] font-bold uppercase text-black tracking-wider relative py-1 px-1\"\r\n              >\r\n                Tops / T-shirt\r\n                <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n                  <motion.div\r\n                    className=\"absolute inset-0 bg-black\"\r\n                    initial={{ width: \"100%\", left: 0 }}\r\n                    animate={{ width: \"100%\", left: 0 }}\r\n                    transition={{ duration: 0 }}\r\n                  />\r\n                </div>\r\n              </button>\r\n            </div>\r\n            <div className=\"flex items-center space-x-2 sm:space-x-4 md:space-x-6\">\r\n              <div className=\"inline-block\">\r\n                <button\r\n                  ref={buttonRefs.filters}\r\n                  onClick={handleFilterButtonClick}\r\n                  onMouseEnter={() => handleButtonHover(\"filters\")}\r\n                  onMouseLeave={handleButtonLeave}\r\n                  className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n                >\r\n                  <span className=\"px-1\">Filters</span>\r\n                  <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                  >\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n                  </svg>\r\n                  <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n                    {(hoveredButton === \"filters\" || activeButton === \"filters\") && (\r\n                      <motion.div\r\n                        className=\"absolute inset-0 bg-black\"\r\n                        initial={{ width: 0, left: \"50%\" }}\r\n                        animate={{ width: \"100%\", left: 0 }}\r\n                        transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                </button>\r\n              </div>\r\n              <SortSection\r\n                isSortOpen={isSortOpen}\r\n                sortRef={sortRef}\r\n                selectedSort={sortOption}\r\n                handleSortChange={(option) => {\r\n                  setSortOption(option);\r\n                  setCurrentPage(1);\r\n                  setIsSortOpen(false);\r\n                }}\r\n                handleCloseSort={() => setIsSortOpen(false)}\r\n                handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n                sortOptions={sortOptions}\r\n                onMouseEnter={() => handleButtonHover(\"sort\")}\r\n                onMouseLeave={handleButtonLeave}\r\n                hoveredButton={hoveredButton}\r\n                activeButton={activeButton}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-4\">\r\n        {isFilterOpen && (\r\n          <FilterSection\r\n            isFilterOpen={isFilterOpen}\r\n            filterRef={filterRef}\r\n            selectedColors={selectedColors}\r\n            selectedSizes={selectedSizes}\r\n            handleColorChange={handleColorChange}\r\n            handleSizeChange={handleSizeChange}\r\n            handleCloseFilter={() => setIsFilterOpen(false)}\r\n            handleApplyFilter={() => setIsFilterOpen(false)}\r\n            colors={colors}\r\n            sizes={sizes}\r\n            capitalizeFirstLetter={capitalizeFirstLetter}\r\n            groupedColors={groupColorsByFirstLetter()}\r\n          />\r\n        )}\r\n      </div>\r\n\r\n      {sortedProducts.length > 0 ? (\r\n        <ProductGrid\r\n          products={currentProducts}\r\n          productImageIndex={productImageIndex}\r\n          handlePrevImage={handlePrevImage}\r\n          handleNextImage={handleNextImage}\r\n          onHover={handleProductHover}\r\n          onLeave={handleProductLeave}\r\n        />\r\n      ) : (\r\n        <NoProductsMessage />\r\n      )}\r\n    </div>\r\n  );\r\n}"
        }
    ]
}