{
    "sourceFile": "src/app/tshirt/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1747283808941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747283865045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,8 @@\n import { Metadata } from \"next\";\r\n \r\n export const metadata: Metadata = {\r\n   title: \"T-Shirt | AISH\",\r\n-  description: \"Khám phá bộ sưu tập áo thun (T-Shirt) mới nhất tại AISH. Thiết kế độc đáo, chất liệu cao cấp, phong cách thời trang.\",\r\n-  openGraph: {\r\n-    title: \"T-Shirt | AISH\",\r\n-    description: \"Khám phá bộ sưu tập áo thun (T-Shirt) mới nhất tại AISH. Thiết kế độc đáo, chất liệu cao cấp, phong cách thời trang.\",\r\n-    type: \"website\",\r\n-  },\r\n };\r\n \r\n export default function TshirtPage() {\r\n   return (\r\n"
                },
                {
                    "date": 1747299685837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,225 @@\n-import { Metadata } from \"next\";\r\n+\"use client\";\r\n+import { useState, useEffect, useRef } from \"react\";\r\n+import { useProductFilters } from \"../../hooks/useProductFilters\";\r\n+import ProductGrid from \"../../components/ProductGrid\";\r\n+import FilterSection from \"../../components/FilterSection\";\r\n+import SortSection from \"../../components/SortSection\";\r\n+import NoProductsMessage from \"../../components/NoProductsMessage\";\r\n+import { Product } from \"../../types/product\";\r\n+import { motion } from \"framer-motion\";\r\n+import { useLanguage } from \"@/context/LanguageContext\";\r\n \r\n-export const metadata: Metadata = {\r\n-  title: \"T-Shirt | AISH\",\r\n-};\r\n+export default function TshirtPage() {\r\n+  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n+  const [isSortOpen, setIsSortOpen] = useState(false);\r\n+  const [products, setProducts] = useState<Product[]>([]);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n+  const filterRef = useRef<HTMLDivElement>(null);\r\n+  const sortRef = useRef<HTMLDivElement>(null);\r\n+  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n+  const { t } = useLanguage();\r\n \r\n-export default function TshirtPage() {\r\n+  useEffect(() => {\r\n+    const fetchProducts = async () => {\r\n+      try {\r\n+        const response = await fetch('/api/products');\r\n+        const data = await response.json();\r\n+        if (data.ok) {\r\n+          const filteredProducts = data.products.filter(\r\n+            (product: Product) => product.category === \"TSHIRT\"\r\n+          );\r\n+          setProducts(filteredProducts);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error fetching products:', error);\r\n+      } finally {\r\n+        setIsLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchProducts();\r\n+  }, []);\r\n+\r\n+  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n+    useProductFilters(products);\r\n+\r\n+  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n+  const sizes = [\"M\", \"L\", \"XL\"];\r\n+\r\n+  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n+    e.preventDefault();\r\n+    setProductImageIndex(prev => ({\r\n+      ...prev,\r\n+      [productId]: (prev[productId] || 0) - 1\r\n+    }));\r\n+  };\r\n+\r\n+  const handleNextImage = (e: React.MouseEvent, productId: string) => {\r\n+    e.preventDefault();\r\n+    setProductImageIndex(prev => ({\r\n+      ...prev,\r\n+      [productId]: (prev[productId] || 0) + 1\r\n+    }));\r\n+  };\r\n+\r\n+  const handleHover = (productId: string) => {\r\n+    setProductImageIndex(prev => ({\r\n+      ...prev,\r\n+      [productId]: 1\r\n+    }));\r\n+  };\r\n+\r\n+  const handleLeave = () => {\r\n+    setProductImageIndex({});\r\n+  };\r\n+\r\n+  const resetFilters = () => {\r\n+    setSelectedColors([]);\r\n+    setSelectedSizes([]);\r\n+    setSortOption(\"newest\");\r\n+  };\r\n+\r\n+  const handleColorChange = (color: string) => {\r\n+    if (color === \"all\") {\r\n+      setSelectedColors([]);\r\n+    } else {\r\n+      setSelectedColors(prev => \r\n+        prev.includes(color) \r\n+          ? prev.filter(c => c !== color)\r\n+          : [...prev, color]\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n+  const handleSizeChange = (size: string) => {\r\n+    if (size === \"all\") {\r\n+      setSelectedSizes([]);\r\n+    } else {\r\n+      setSelectedSizes(prev => \r\n+        prev.includes(size) \r\n+          ? prev.filter(s => s !== size)\r\n+          : [...prev, size]\r\n+      );\r\n+    }\r\n+  };\r\n+\r\n+  const handleCloseFilter = () => {\r\n+    setIsFilterOpen(false);\r\n+  };\r\n+\r\n+  const handleApplyFilter = () => {\r\n+    setIsFilterOpen(false);\r\n+  };\r\n+\r\n+  const handleCloseSort = () => {\r\n+    setIsSortOpen(false);\r\n+  };\r\n+\r\n+  const handleSortChange = (value: string) => {\r\n+    setSortOption(value);\r\n+  };\r\n+\r\n+  const capitalizeFirstLetter = (str: string) => {\r\n+    return str.charAt(0).toUpperCase() + str.slice(1);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const handleClickOutside = (event: MouseEvent) => {\r\n+      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n+      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n+    };\r\n+    document.addEventListener(\"mousedown\", handleClickOutside);\r\n+    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n+  }, []);\r\n+\r\n+  if (isLoading) {\r\n+    return (\r\n+      <div className=\"flex justify-center items-center min-h-screen\">\r\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n+      </div>\r\n+    );\r\n+  }\r\n+\r\n   return (\r\n-    <div>\r\n-      {/* Your T-shirt page content */}\r\n+    <div className=\"w-full px-0 py-8 bg-white\">\r\n+      <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('navbar.tshirt')}</h1>\r\n+      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n+        <button\r\n+          onMouseEnter={() => setHoveredButton(\"category\")}\r\n+          onMouseLeave={() => setHoveredButton(null)}\r\n+          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n+          style={{ background: \"none\", border: \"none\" }}\r\n+        >\r\n+          {t('navbar.tshirt')}\r\n+          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n+            <motion.div\r\n+              className=\"absolute inset-0 bg-black\"\r\n+              initial={{ width: \"100%\", left: 0 }}\r\n+              animate={{ width: \"100%\", left: 0 }}\r\n+              transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n+            />\r\n+          </div>\r\n+        </button>\r\n+        <div className=\"flex items-center space-x-4\">\r\n+          <button\r\n+            onClick={() => setIsFilterOpen(true)}\r\n+            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n+          >\r\n+            <span className=\"px-1\">{t('products.filters')}</span>\r\n+            <svg\r\n+              xmlns=\"http://www.w3.org/2000/svg\"\r\n+              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n+              fill=\"none\"\r\n+              viewBox=\"0 0 24 24\"\r\n+              stroke=\"currentColor\"\r\n+            >\r\n+              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n+            </svg>\r\n+            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n+              <span className=\"absolute inset-0 bg-black\" style={{width: '100%', left: 0, opacity: 0.7}}></span>\r\n+            </div>\r\n+          </button>\r\n+          <SortSection\r\n+            isSortOpen={isSortOpen}\r\n+            sortRef={sortRef}\r\n+            selectedSort={sortOption}\r\n+            handleSortChange={(option) => setSortOption(option)}\r\n+            handleCloseSort={() => setIsSortOpen(false)}\r\n+            handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n+            sortOptions={[\r\n+              { value: \"newest\", label: t('products.sort.newest') },\r\n+              { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n+              { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n+            ]}\r\n+            onMouseEnter={() => setHoveredButton(\"sort\")}\r\n+            onMouseLeave={() => setHoveredButton(null)}\r\n+          />\r\n+        </div>\r\n+      </div>\r\n+\r\n+      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n+        <FilterSection\r\n+          isFilterOpen={isFilterOpen}\r\n+          filterRef={filterRef}\r\n+          selectedColors={selectedColors}\r\n+          selectedSizes={selectedSizes}\r\n+          handleColorChange={handleColorChange}\r\n+          handleSizeChange={handleSizeChange}\r\n+          handleCloseFilter={() => setIsFilterOpen(false)}\r\n+          handleApplyFilter={() => setIsFilterOpen(false)}\r\n+          colors={colors}\r\n+          sizes={sizes}\r\n+          capitalizeFirstLetter={capitalizeFirstLetter}\r\n+          groupedColors={colors}\r\n+        />\r\n+      </div>\r\n+\r\n+      {sortedProducts.length > 0 ? (\r\n+        <ProductGrid products={sortedProducts} />\r\n+      ) : (\r\n+        <NoProductsMessage resetFilters={resetFilters} />\r\n+      )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747299960719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,15 +211,26 @@\n           colors={colors}\r\n           sizes={sizes}\r\n           capitalizeFirstLetter={capitalizeFirstLetter}\r\n           groupedColors={colors}\r\n+          title={t('products.filter.title')}\r\n+          colorLabel={t('products.filter.color')}\r\n+          sizeLabel={t('products.filter.size')}\r\n+          applyLabel={t('products.filter.apply')}\r\n+          resetLabel={t('products.filter.reset')}\r\n+          allColorsLabel={t('products.filter.allColors')}\r\n+          allSizesLabel={t('products.filter.allSizes')}\r\n         />\r\n       </div>\r\n \r\n       {sortedProducts.length > 0 ? (\r\n         <ProductGrid products={sortedProducts} />\r\n       ) : (\r\n-        <NoProductsMessage resetFilters={resetFilters} />\r\n+        <NoProductsMessage \r\n+          resetFilters={resetFilters}\r\n+          noProductsText={t('products.filter.noProducts')}\r\n+          tryAgainText={t('products.filter.tryAgain')}\r\n+        />\r\n       )}\r\n     </div>\r\n   );\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747300024523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,8 +228,9 @@\n         <NoProductsMessage \r\n           resetFilters={resetFilters}\r\n           noProductsText={t('products.filter.noProducts')}\r\n           tryAgainText={t('products.filter.tryAgain')}\r\n+          resetFiltersText={t('products.filter.resetFilters')}\r\n         />\r\n       )}\r\n     </div>\r\n   );\r\n"
                },
                {
                    "date": 1747300097376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n   const [products, setProducts] = useState<Product[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n-  const filterRef = useRef<HTMLDivElement>(null);\r\n-  const sortRef = useRef<HTMLDivElement>(null);\r\n+  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n+  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n   const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n   const { t } = useLanguage();\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1747300629148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,11 @@\n   }\r\n \r\n   return (\r\n     <div className=\"w-full px-0 py-8 bg-white\">\r\n+      <div className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\">\r\n+        {t('navbar.thankYou')}\r\n+      </div>\r\n       <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('navbar.tshirt')}</h1>\r\n       <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n         <button\r\n           onMouseEnter={() => setHoveredButton(\"category\")}\r\n"
                },
                {
                    "date": 1747300784109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import SortSection from \"../../components/SortSection\";\r\n import NoProductsMessage from \"../../components/NoProductsMessage\";\r\n import { Product } from \"../../types/product\";\r\n import { motion } from \"framer-motion\";\r\n-import { useLanguage } from \"@/context/LanguageContext\";\r\n+import { useLanguage } from \"../../context/LanguageContext\";\r\n \r\n export default function TshirtPage() {\r\n   const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n"
                },
                {
                    "date": 1747300840931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import SortSection from \"../../components/SortSection\";\r\n import NoProductsMessage from \"../../components/NoProductsMessage\";\r\n import { Product } from \"../../types/product\";\r\n import { motion } from \"framer-motion\";\r\n-import { useLanguage } from \"../../context/LanguageContext\";\r\n+import { useLanguage } from \"@/context/LanguageContext\";\r\n \r\n export default function TshirtPage() {\r\n   const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n   const [isSortOpen, setIsSortOpen] = useState(false);\r\n"
                },
                {
                    "date": 1747301270691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,13 @@\n \r\n   const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n     useProductFilters(products);\r\n \r\n+  console.log('Products:', products);\r\n+  console.log('Sorted Products:', sortedProducts);\r\n+  console.log('Selected Colors:', selectedColors);\r\n+  console.log('Selected Sizes:', selectedSizes);\r\n+\r\n   const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n   const sizes = [\"M\", \"L\", \"XL\"];\r\n \r\n   const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n"
                },
                {
                    "date": 1747319223524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,245 +1,245 @@\n-\"use client\";\r\n-import { useState, useEffect, useRef } from \"react\";\r\n-import { useProductFilters } from \"../../hooks/useProductFilters\";\r\n-import ProductGrid from \"../../components/ProductGrid\";\r\n-import FilterSection from \"../../components/FilterSection\";\r\n-import SortSection from \"../../components/SortSection\";\r\n-import NoProductsMessage from \"../../components/NoProductsMessage\";\r\n-import { Product } from \"../../types/product\";\r\n-import { motion } from \"framer-motion\";\r\n-import { useLanguage } from \"@/context/LanguageContext\";\r\n-\r\n-export default function TshirtPage() {\r\n-  const [isFilterOpen, setIsFilterOpen] = useState(false);\r\n-  const [isSortOpen, setIsSortOpen] = useState(false);\r\n-  const [products, setProducts] = useState<Product[]>([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\r\n-  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n-  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\r\n-  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\r\n-  const { t } = useLanguage();\r\n-\r\n-  useEffect(() => {\r\n-    const fetchProducts = async () => {\r\n-      try {\r\n-        const response = await fetch('/api/products');\r\n-        const data = await response.json();\r\n-        if (data.ok) {\r\n-          const filteredProducts = data.products.filter(\r\n-            (product: Product) => product.category === \"TSHIRT\"\r\n-          );\r\n-          setProducts(filteredProducts);\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error fetching products:', error);\r\n-      } finally {\r\n-        setIsLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchProducts();\r\n-  }, []);\r\n-\r\n-  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\r\n-    useProductFilters(products);\r\n-\r\n-  console.log('Products:', products);\r\n-  console.log('Sorted Products:', sortedProducts);\r\n-  console.log('Selected Colors:', selectedColors);\r\n-  console.log('Selected Sizes:', selectedSizes);\r\n-\r\n-  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\r\n-  const sizes = [\"M\", \"L\", \"XL\"];\r\n-\r\n-  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\r\n-    e.preventDefault();\r\n-    setProductImageIndex(prev => ({\r\n-      ...prev,\r\n-      [productId]: (prev[productId] || 0) - 1\r\n-    }));\r\n-  };\r\n-\r\n-  const handleNextImage = (e: React.MouseEvent, productId: string) => {\r\n-    e.preventDefault();\r\n-    setProductImageIndex(prev => ({\r\n-      ...prev,\r\n-      [productId]: (prev[productId] || 0) + 1\r\n-    }));\r\n-  };\r\n-\r\n-  const handleHover = (productId: string) => {\r\n-    setProductImageIndex(prev => ({\r\n-      ...prev,\r\n-      [productId]: 1\r\n-    }));\r\n-  };\r\n-\r\n-  const handleLeave = () => {\r\n-    setProductImageIndex({});\r\n-  };\r\n-\r\n-  const resetFilters = () => {\r\n-    setSelectedColors([]);\r\n-    setSelectedSizes([]);\r\n-    setSortOption(\"newest\");\r\n-  };\r\n-\r\n-  const handleColorChange = (color: string) => {\r\n-    if (color === \"all\") {\r\n-      setSelectedColors([]);\r\n-    } else {\r\n-      setSelectedColors(prev => \r\n-        prev.includes(color) \r\n-          ? prev.filter(c => c !== color)\r\n-          : [...prev, color]\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  const handleSizeChange = (size: string) => {\r\n-    if (size === \"all\") {\r\n-      setSelectedSizes([]);\r\n-    } else {\r\n-      setSelectedSizes(prev => \r\n-        prev.includes(size) \r\n-          ? prev.filter(s => s !== size)\r\n-          : [...prev, size]\r\n-      );\r\n-    }\r\n-  };\r\n-\r\n-  const handleCloseFilter = () => {\r\n-    setIsFilterOpen(false);\r\n-  };\r\n-\r\n-  const handleApplyFilter = () => {\r\n-    setIsFilterOpen(false);\r\n-  };\r\n-\r\n-  const handleCloseSort = () => {\r\n-    setIsSortOpen(false);\r\n-  };\r\n-\r\n-  const handleSortChange = (value: string) => {\r\n-    setSortOption(value);\r\n-  };\r\n-\r\n-  const capitalizeFirstLetter = (str: string) => {\r\n-    return str.charAt(0).toUpperCase() + str.slice(1);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    const handleClickOutside = (event: MouseEvent) => {\r\n-      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\r\n-      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\r\n-    };\r\n-    document.addEventListener(\"mousedown\", handleClickOutside);\r\n-    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n-  }, []);\r\n-\r\n-  if (isLoading) {\r\n-    return (\r\n-      <div className=\"flex justify-center items-center min-h-screen\">\r\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"w-full px-0 py-8 bg-white\">\r\n-      <div className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\">\r\n-        {t('navbar.thankYou')}\r\n-      </div>\r\n-      <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('navbar.tshirt')}</h1>\r\n-      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\r\n-        <button\r\n-          onMouseEnter={() => setHoveredButton(\"category\")}\r\n-          onMouseLeave={() => setHoveredButton(null)}\r\n-          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\r\n-          style={{ background: \"none\", border: \"none\" }}\r\n-        >\r\n-          {t('navbar.tshirt')}\r\n-          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-            <motion.div\r\n-              className=\"absolute inset-0 bg-black\"\r\n-              initial={{ width: \"100%\", left: 0 }}\r\n-              animate={{ width: \"100%\", left: 0 }}\r\n-              transition={{ duration: 0.25, ease: \"easeOut\" }}\r\n-            />\r\n-          </div>\r\n-        </button>\r\n-        <div className=\"flex items-center space-x-4\">\r\n-          <button\r\n-            onClick={() => setIsFilterOpen(true)}\r\n-            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\r\n-          >\r\n-            <span className=\"px-1\">{t('products.filters')}</span>\r\n-            <svg\r\n-              xmlns=\"http://www.w3.org/2000/svg\"\r\n-              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\r\n-              fill=\"none\"\r\n-              viewBox=\"0 0 24 24\"\r\n-              stroke=\"currentColor\"\r\n-            >\r\n-              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n-            </svg>\r\n-            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\r\n-              <span className=\"absolute inset-0 bg-black\" style={{width: '100%', left: 0, opacity: 0.7}}></span>\r\n-            </div>\r\n-          </button>\r\n-          <SortSection\r\n-            isSortOpen={isSortOpen}\r\n-            sortRef={sortRef}\r\n-            selectedSort={sortOption}\r\n-            handleSortChange={(option) => setSortOption(option)}\r\n-            handleCloseSort={() => setIsSortOpen(false)}\r\n-            handleApplySort={() => setIsSortOpen(!isSortOpen)}\r\n-            sortOptions={[\r\n-              { value: \"newest\", label: t('products.sort.newest') },\r\n-              { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\r\n-              { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\r\n-            ]}\r\n-            onMouseEnter={() => setHoveredButton(\"sort\")}\r\n-            onMouseLeave={() => setHoveredButton(null)}\r\n-          />\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\r\n-        <FilterSection\r\n-          isFilterOpen={isFilterOpen}\r\n-          filterRef={filterRef}\r\n-          selectedColors={selectedColors}\r\n-          selectedSizes={selectedSizes}\r\n-          handleColorChange={handleColorChange}\r\n-          handleSizeChange={handleSizeChange}\r\n-          handleCloseFilter={() => setIsFilterOpen(false)}\r\n-          handleApplyFilter={() => setIsFilterOpen(false)}\r\n-          colors={colors}\r\n-          sizes={sizes}\r\n-          capitalizeFirstLetter={capitalizeFirstLetter}\r\n-          groupedColors={colors}\r\n-          title={t('products.filter.title')}\r\n-          colorLabel={t('products.filter.color')}\r\n-          sizeLabel={t('products.filter.size')}\r\n-          applyLabel={t('products.filter.apply')}\r\n-          resetLabel={t('products.filter.reset')}\r\n-          allColorsLabel={t('products.filter.allColors')}\r\n-          allSizesLabel={t('products.filter.allSizes')}\r\n-        />\r\n-      </div>\r\n-\r\n-      {sortedProducts.length > 0 ? (\r\n-        <ProductGrid products={sortedProducts} />\r\n-      ) : (\r\n-        <NoProductsMessage \r\n-          resetFilters={resetFilters}\r\n-          noProductsText={t('products.filter.noProducts')}\r\n-          tryAgainText={t('products.filter.tryAgain')}\r\n-          resetFiltersText={t('products.filter.resetFilters')}\r\n-        />\r\n-      )}\r\n-    </div>\r\n-  );\r\n+\"use client\";\n+import { useState, useEffect, useRef } from \"react\";\n+import { useProductFilters } from \"../../hooks/useProductFilters\";\n+import ProductGrid from \"../../components/ProductGrid\";\n+import FilterSection from \"../../components/FilterSection\";\n+import SortSection from \"../../components/SortSection\";\n+import NoProductsMessage from \"../../components/NoProductsMessage\";\n+import { Product } from \"../../types/product\";\n+import { motion } from \"framer-motion\";\n+import { useLanguage } from \"@/context/LanguageContext\";\n+\n+export default function TshirtPage() {\n+  const [isFilterOpen, setIsFilterOpen] = useState(false);\n+  const [isSortOpen, setIsSortOpen] = useState(false);\n+  const [products, setProducts] = useState<Product[]>([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n+  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n+  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n+  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\n+  const { t } = useLanguage();\n+\n+  useEffect(() => {\n+    const fetchProducts = async () => {\n+      try {\n+        const response = await fetch('/api/products');\n+        const data = await response.json();\n+        if (data.ok) {\n+          const filteredProducts = data.products.filter(\n+            (product: Product) => product.category === \"TSHIRT\"\n+          );\n+          setProducts(filteredProducts);\n+        }\n+      } catch (error) {\n+        console.error('Error fetching products:', error);\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    };\n+\n+    fetchProducts();\n+  }, []);\n+\n+  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n+    useProductFilters(products);\n+\n+  console.log('Products:', products);\n+  console.log('Sorted Products:', sortedProducts);\n+  console.log('Selected Colors:', selectedColors);\n+  console.log('Selected Sizes:', selectedSizes);\n+\n+  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\n+  const sizes = [\"M\", \"L\", \"XL\"];\n+\n+  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\n+    e.preventDefault();\n+    setProductImageIndex(prev => ({\n+      ...prev,\n+      [productId]: (prev[productId] || 0) - 1\n+    }));\n+  };\n+\n+  const handleNextImage = (e: React.MouseEvent, productId: string) => {\n+    e.preventDefault();\n+    setProductImageIndex(prev => ({\n+      ...prev,\n+      [productId]: (prev[productId] || 0) + 1\n+    }));\n+  };\n+\n+  const handleHover = (productId: string) => {\n+    setProductImageIndex(prev => ({\n+      ...prev,\n+      [productId]: 1\n+    }));\n+  };\n+\n+  const handleLeave = () => {\n+    setProductImageIndex({});\n+  };\n+\n+  const resetFilters = () => {\n+    setSelectedColors([]);\n+    setSelectedSizes([]);\n+    setSortOption(\"newest\");\n+  };\n+\n+  const handleColorChange = (color: string) => {\n+    if (color === \"all\") {\n+      setSelectedColors([]);\n+    } else {\n+      setSelectedColors(prev => \n+        prev.includes(color) \n+          ? prev.filter(c => c !== color)\n+          : [...prev, color]\n+      );\n+    }\n+  };\n+\n+  const handleSizeChange = (size: string) => {\n+    if (size === \"all\") {\n+      setSelectedSizes([]);\n+    } else {\n+      setSelectedSizes(prev => \n+        prev.includes(size) \n+          ? prev.filter(s => s !== size)\n+          : [...prev, size]\n+      );\n+    }\n+  };\n+\n+  const handleCloseFilter = () => {\n+    setIsFilterOpen(false);\n+  };\n+\n+  const handleApplyFilter = () => {\n+    setIsFilterOpen(false);\n+  };\n+\n+  const handleCloseSort = () => {\n+    setIsSortOpen(false);\n+  };\n+\n+  const handleSortChange = (value: string) => {\n+    setSortOption(value);\n+  };\n+\n+  const capitalizeFirstLetter = (str: string) => {\n+    return str.charAt(0).toUpperCase() + str.slice(1);\n+  };\n+\n+  useEffect(() => {\n+    const handleClickOutside = (event: MouseEvent) => {\n+      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\n+      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\n+    };\n+    document.addEventListener(\"mousedown\", handleClickOutside);\n+    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n+  }, []);\n+\n+  if (isLoading) {\n+    return (\n+      <div className=\"flex justify-center items-center min-h-screen\">\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <div className=\"w-full px-0 py-8 bg-white\">\n+      <div className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\">\n+        {t('navbar.thankYou')}\n+      </div>\n+      <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('navbar.tshirt')}</h1>\n+      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\n+        <button\n+          onMouseEnter={() => setHoveredButton(\"category\")}\n+          onMouseLeave={() => setHoveredButton(null)}\n+          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\n+          style={{ background: \"none\", border: \"none\" }}\n+        >\n+          {t('navbar.tshirt')}\n+          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+            <motion.div\n+              className=\"absolute inset-0 bg-black\"\n+              initial={{ width: \"100%\", left: 0 }}\n+              animate={{ width: \"100%\", left: 0 }}\n+              transition={{ duration: 0.25, ease: \"easeOut\" }}\n+            />\n+          </div>\n+        </button>\n+        <div className=\"flex items-center space-x-4\">\n+          <button\n+            onClick={() => setIsFilterOpen(true)}\n+            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n+          >\n+            <span className=\"px-1\">{t('products.filters')}</span>\n+            <svg\n+              xmlns=\"http://www.w3.org/2000/svg\"\n+              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n+              fill=\"none\"\n+              viewBox=\"0 0 24 24\"\n+              stroke=\"currentColor\"\n+            >\n+              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n+            </svg>\n+            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n+              <span className=\"absolute inset-0 bg-black\" style={{width: '100%', left: 0, opacity: 0.7}}></span>\n+            </div>\n+          </button>\n+          <SortSection\n+            isSortOpen={isSortOpen}\n+            sortRef={sortRef}\n+            selectedSort={sortOption}\n+            handleSortChange={(option) => setSortOption(option)}\n+            handleCloseSort={() => setIsSortOpen(false)}\n+            handleApplySort={() => setIsSortOpen(!isSortOpen)}\n+            sortOptions={[\n+              { value: \"newest\", label: t('products.sort.newest') },\n+              { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\n+              { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\n+            ]}\n+            onMouseEnter={() => setHoveredButton(\"sort\")}\n+            onMouseLeave={() => setHoveredButton(null)}\n+          />\n+        </div>\n+      </div>\n+\n+      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\n+        <FilterSection\n+          isFilterOpen={isFilterOpen}\n+          filterRef={filterRef}\n+          selectedColors={selectedColors}\n+          selectedSizes={selectedSizes}\n+          handleColorChange={handleColorChange}\n+          handleSizeChange={handleSizeChange}\n+          handleCloseFilter={() => setIsFilterOpen(false)}\n+          handleApplyFilter={() => setIsFilterOpen(false)}\n+          colors={colors}\n+          sizes={sizes}\n+          capitalizeFirstLetter={capitalizeFirstLetter}\n+          groupedColors={colors}\n+          title={t('products.filter.title')}\n+          colorLabel={t('products.filter.color')}\n+          sizeLabel={t('products.filter.size')}\n+          applyLabel={t('products.filter.apply')}\n+          resetLabel={t('products.filter.reset')}\n+          allColorsLabel={t('products.filter.allColors')}\n+          allSizesLabel={t('products.filter.allSizes')}\n+        />\n+      </div>\n+\n+      {sortedProducts.length > 0 ? (\n+        <ProductGrid products={sortedProducts} />\n+      ) : (\n+        <NoProductsMessage \n+          resetFilters={resetFilters}\n+          noProductsText={t('products.filter.noProducts')}\n+          tryAgainText={t('products.filter.tryAgain')}\n+          resetFiltersText={t('products.filter.resetFilters')}\n+        />\n+      )}\n+    </div>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747321275738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,8 @@\n \n   const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n     useProductFilters(products);\n \n-  console.log('Products:', products);\n-  console.log('Sorted Products:', sortedProducts);\n-  console.log('Selected Colors:', selectedColors);\n-  console.log('Selected Sizes:', selectedSizes);\n-\n   const colors = [\"black\", \"white\", \"blue\", \"grey\"];\n   const sizes = [\"M\", \"L\", \"XL\"];\n \n   const handlePrevImage = (e: React.MouseEvent, productId: string) => {\n"
                },
                {
                    "date": 1747321461302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,240 +1,13 @@\n-\"use client\";\n-import { useState, useEffect, useRef } from \"react\";\n-import { useProductFilters } from \"../../hooks/useProductFilters\";\n-import ProductGrid from \"../../components/ProductGrid\";\n-import FilterSection from \"../../components/FilterSection\";\n-import SortSection from \"../../components/SortSection\";\n-import NoProductsMessage from \"../../components/NoProductsMessage\";\n-import { Product } from \"../../types/product\";\n-import { motion } from \"framer-motion\";\n-import { useLanguage } from \"@/context/LanguageContext\";\n+import { Metadata } from \"next\";\n \n-export default function TshirtPage() {\n-  const [isFilterOpen, setIsFilterOpen] = useState(false);\n-  const [isSortOpen, setIsSortOpen] = useState(false);\n-  const [products, setProducts] = useState<Product[]>([]);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const [productImageIndex, setProductImageIndex] = useState<{ [key: string]: number }>({});\n-  const filterRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n-  const sortRef = useRef<HTMLDivElement>(null) as React.RefObject<HTMLDivElement>;\n-  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\n-  const { t } = useLanguage();\n+export const metadata: Metadata = {\n+  title: \"Shirt | AISH\",\n+};\n \n-  useEffect(() => {\n-    const fetchProducts = async () => {\n-      try {\n-        const response = await fetch('/api/products');\n-        const data = await response.json();\n-        if (data.ok) {\n-          const filteredProducts = data.products.filter(\n-            (product: Product) => product.category === \"TSHIRT\"\n-          );\n-          setProducts(filteredProducts);\n-        }\n-      } catch (error) {\n-        console.error('Error fetching products:', error);\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    };\n-\n-    fetchProducts();\n-  }, []);\n-\n-  const { selectedColors, setSelectedColors, selectedSizes, setSelectedSizes, sortOption, setSortOption, sortedProducts } =\n-    useProductFilters(products);\n-\n-  const colors = [\"black\", \"white\", \"blue\", \"grey\"];\n-  const sizes = [\"M\", \"L\", \"XL\"];\n-\n-  const handlePrevImage = (e: React.MouseEvent, productId: string) => {\n-    e.preventDefault();\n-    setProductImageIndex(prev => ({\n-      ...prev,\n-      [productId]: (prev[productId] || 0) - 1\n-    }));\n-  };\n-\n-  const handleNextImage = (e: React.MouseEvent, productId: string) => {\n-    e.preventDefault();\n-    setProductImageIndex(prev => ({\n-      ...prev,\n-      [productId]: (prev[productId] || 0) + 1\n-    }));\n-  };\n-\n-  const handleHover = (productId: string) => {\n-    setProductImageIndex(prev => ({\n-      ...prev,\n-      [productId]: 1\n-    }));\n-  };\n-\n-  const handleLeave = () => {\n-    setProductImageIndex({});\n-  };\n-\n-  const resetFilters = () => {\n-    setSelectedColors([]);\n-    setSelectedSizes([]);\n-    setSortOption(\"newest\");\n-  };\n-\n-  const handleColorChange = (color: string) => {\n-    if (color === \"all\") {\n-      setSelectedColors([]);\n-    } else {\n-      setSelectedColors(prev => \n-        prev.includes(color) \n-          ? prev.filter(c => c !== color)\n-          : [...prev, color]\n-      );\n-    }\n-  };\n-\n-  const handleSizeChange = (size: string) => {\n-    if (size === \"all\") {\n-      setSelectedSizes([]);\n-    } else {\n-      setSelectedSizes(prev => \n-        prev.includes(size) \n-          ? prev.filter(s => s !== size)\n-          : [...prev, size]\n-      );\n-    }\n-  };\n-\n-  const handleCloseFilter = () => {\n-    setIsFilterOpen(false);\n-  };\n-\n-  const handleApplyFilter = () => {\n-    setIsFilterOpen(false);\n-  };\n-\n-  const handleCloseSort = () => {\n-    setIsSortOpen(false);\n-  };\n-\n-  const handleSortChange = (value: string) => {\n-    setSortOption(value);\n-  };\n-\n-  const capitalizeFirstLetter = (str: string) => {\n-    return str.charAt(0).toUpperCase() + str.slice(1);\n-  };\n-\n-  useEffect(() => {\n-    const handleClickOutside = (event: MouseEvent) => {\n-      if (filterRef.current && !(filterRef.current as any).contains(event.target)) setIsFilterOpen(false);\n-      if (sortRef.current && !(sortRef.current as any).contains(event.target)) setIsSortOpen(false);\n-    };\n-    document.addEventListener(\"mousedown\", handleClickOutside);\n-    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n-  }, []);\n-\n-  if (isLoading) {\n-    return (\n-      <div className=\"flex justify-center items-center min-h-screen\">\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n-      </div>\n-    );\n-  }\n-\n+export default function ShirtPage() {\n   return (\n-    <div className=\"w-full px-0 py-8 bg-white\">\n-      <div className=\"text-center text-gray-700 font-semibold text-[10px] sm:text-[12px] py-4 mt-1\">\n-        {t('navbar.thankYou')}\n-      </div>\n-      <h1 className=\"text-2xl font-bold mb-8 text-center\">{t('navbar.tshirt')}</h1>\n-      <div className=\"flex flex-wrap items-center justify-between border-b border-gray-100 pb-2 mb-4 px-4\">\n-        <button\n-          onMouseEnter={() => setHoveredButton(\"category\")}\n-          onMouseLeave={() => setHoveredButton(null)}\n-          className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black relative py-1 px-1 bg-transparent border-none outline-none\"\n-          style={{ background: \"none\", border: \"none\" }}\n-        >\n-          {t('navbar.tshirt')}\n-          <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n-            <motion.div\n-              className=\"absolute inset-0 bg-black\"\n-              initial={{ width: \"100%\", left: 0 }}\n-              animate={{ width: \"100%\", left: 0 }}\n-              transition={{ duration: 0.25, ease: \"easeOut\" }}\n-            />\n-          </div>\n-        </button>\n-        <div className=\"flex items-center space-x-4\">\n-          <button\n-            onClick={() => setIsFilterOpen(true)}\n-            className=\"text-[10px] sm:text-[10px] font-bold uppercase tracking-wider text-black hover:text-gray-600 flex items-center relative py-1\"\n-          >\n-            <span className=\"px-1\">{t('products.filters')}</span>\n-            <svg\n-              xmlns=\"http://www.w3.org/2000/svg\"\n-              className=\"h-2 w-2 sm:h-3 sm:w-3 ml-1\"\n-              fill=\"none\"\n-              viewBox=\"0 0 24 24\"\n-              stroke=\"currentColor\"\n-            >\n-              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n-            </svg>\n-            <div className=\"absolute bottom-[-2px] left-0 right-0 h-[1px] overflow-hidden\">\n-              <span className=\"absolute inset-0 bg-black\" style={{width: '100%', left: 0, opacity: 0.7}}></span>\n-            </div>\n-          </button>\n-          <SortSection\n-            isSortOpen={isSortOpen}\n-            sortRef={sortRef}\n-            selectedSort={sortOption}\n-            handleSortChange={(option) => setSortOption(option)}\n-            handleCloseSort={() => setIsSortOpen(false)}\n-            handleApplySort={() => setIsSortOpen(!isSortOpen)}\n-            sortOptions={[\n-              { value: \"newest\", label: t('products.sort.newest') },\n-              { value: \"price-low-to-high\", label: t('products.sort.priceLowToHigh') },\n-              { value: \"price-high-to-low\", label: t('products.sort.priceHighToLow') }\n-            ]}\n-            onMouseEnter={() => setHoveredButton(\"sort\")}\n-            onMouseLeave={() => setHoveredButton(null)}\n-          />\n-        </div>\n-      </div>\n-\n-      <div className=\"flex flex-col md:flex-row gap-4 mb-8 px-4\">\n-        <FilterSection\n-          isFilterOpen={isFilterOpen}\n-          filterRef={filterRef}\n-          selectedColors={selectedColors}\n-          selectedSizes={selectedSizes}\n-          handleColorChange={handleColorChange}\n-          handleSizeChange={handleSizeChange}\n-          handleCloseFilter={() => setIsFilterOpen(false)}\n-          handleApplyFilter={() => setIsFilterOpen(false)}\n-          colors={colors}\n-          sizes={sizes}\n-          capitalizeFirstLetter={capitalizeFirstLetter}\n-          groupedColors={colors}\n-          title={t('products.filter.title')}\n-          colorLabel={t('products.filter.color')}\n-          sizeLabel={t('products.filter.size')}\n-          applyLabel={t('products.filter.apply')}\n-          resetLabel={t('products.filter.reset')}\n-          allColorsLabel={t('products.filter.allColors')}\n-          allSizesLabel={t('products.filter.allSizes')}\n-        />\n-      </div>\n-\n-      {sortedProducts.length > 0 ? (\n-        <ProductGrid products={sortedProducts} />\n-      ) : (\n-        <NoProductsMessage \n-          resetFilters={resetFilters}\n-          noProductsText={t('products.filter.noProducts')}\n-          tryAgainText={t('products.filter.tryAgain')}\n-          resetFiltersText={t('products.filter.resetFilters')}\n-        />\n-      )}\n+    <div>\n+      {/* Your Short page content */}\n     </div>\n   );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747321495669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import { Metadata } from \"next\";\n \n export const metadata: Metadata = {\n-  title: \"Shirt | AISH\",\n+  title: \"Tshirt | AISH\",\n };\n \n-export default function ShirtPage() {\n+export default function TshirtPage() {\n   return (\n     <div>\n       {/* Your Short page content */}\n     </div>\n"
                }
            ],
            "date": 1747283808941,
            "name": "Commit-0",
            "content": "import { Metadata } from \"next\";\r\n\r\nexport const metadata: Metadata = {\r\n  title: \"T-Shirt | AISH\",\r\n  description: \"Khám phá bộ sưu tập áo thun (T-Shirt) mới nhất tại AISH. Thiết kế độc đáo, chất liệu cao cấp, phong cách thời trang.\",\r\n  openGraph: {\r\n    title: \"T-Shirt | AISH\",\r\n    description: \"Khám phá bộ sưu tập áo thun (T-Shirt) mới nhất tại AISH. Thiết kế độc đáo, chất liệu cao cấp, phong cách thời trang.\",\r\n    type: \"website\",\r\n  },\r\n};\r\n\r\nexport default function TshirtPage() {\r\n  return (\r\n    <div>\r\n      {/* Your T-shirt page content */}\r\n    </div>\r\n  );\r\n} "
        }
    ]
}