{
    "sourceFile": "src/app/admin/products/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1746893159154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747279939063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { ProductList } from \"./components/ProductList\";\r\n import { EditModal } from \"./components/EditModal\";\r\n import { Product, ProductForm as ProductFormType } from \"./components/types\";\r\n import Image from \"next/image\";\r\n+import { LazyProductForm } from '@/components/lazy';\r\n \r\n export default function AdminProductsPage() {\r\n   const [products, setProducts] = useState<Product[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n@@ -265,9 +266,14 @@\n           </div>\r\n         </div>\r\n \r\n         <div className=\"mt-8\">\r\n-          <ProductForm onSubmit={handleAddProduct} isAdding={isAdding} />\r\n+          {isAdding && (\r\n+            <LazyProductForm\r\n+              onSubmit={handleAddProduct}\r\n+              isAdding={isAdding}\r\n+            />\r\n+          )}\r\n \r\n           <div className=\"mb-2 mt-8\">\r\n             <h2 className=\"text-base font-semibold text-black uppercase\">Danh sách sản phẩm</h2>\r\n             <div className=\"w-full h-px bg-gray-300 mt-1 mb-2\"></div>\r\n"
                },
                {
                    "date": 1747286762247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,19 +266,25 @@\n           </div>\r\n         </div>\r\n \r\n         <div className=\"mt-8\">\r\n+          <div className=\"flex justify-between items-center mb-6\">\r\n+            <h2 className=\"text-base font-semibold text-black uppercase\">Danh sách sản phẩm</h2>\r\n+            <button\r\n+              onClick={() => setIsAdding(true)}\r\n+              className=\"bg-black text-white px-4 py-2 text-sm hover:bg-gray-800 transition-colors\"\r\n+            >\r\n+              Thêm sản phẩm mới\r\n+            </button>\r\n+          </div>\r\n+\r\n           {isAdding && (\r\n             <LazyProductForm\r\n               onSubmit={handleAddProduct}\r\n               isAdding={isAdding}\r\n             />\r\n           )}\r\n \r\n-          <div className=\"mb-2 mt-8\">\r\n-            <h2 className=\"text-base font-semibold text-black uppercase\">Danh sách sản phẩm</h2>\r\n-            <div className=\"w-full h-px bg-gray-300 mt-1 mb-2\"></div>\r\n-          </div>\r\n           <div className=\"mt-4\">\r\n             {isLoading ? (\r\n               <div className=\"flex justify-center\">\r\n                 <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n"
                },
                {
                    "date": 1747286777594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,8 +235,12 @@\n     setSizeGuideImage(null);\r\n     setSizeGuideImagePreview(\"\");\r\n   };\r\n \r\n+  const handleEdit = (product: Product) => {\r\n+    setSelectedProduct(product);\r\n+  };\r\n+\r\n   if (status === \"loading\") {\r\n     return (\r\n       <div className=\"min-h-screen flex items-center justify-center\">\r\n         <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n@@ -291,9 +295,9 @@\n               </div>\r\n             ) : (\r\n               <ProductList\r\n                 products={products}\r\n-                onEdit={setSelectedProduct}\r\n+                onEdit={handleEdit}\r\n                 onDelete={handleDeleteProduct}\r\n               />\r\n             )}\r\n           </div>\r\n"
                },
                {
                    "date": 1747286837450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,199 +24,97 @@\n   const { data: session, status } = useSession();\r\n \r\n   useEffect(() => {\r\n     if (status === \"unauthenticated\") {\r\n-      router.push(\"/admin/login\");\r\n-    } else if (status === \"authenticated\") {\r\n-      fetchProducts();\r\n+      router.push(\"/login\");\r\n     }\r\n   }, [status, router]);\r\n \r\n+  useEffect(() => {\r\n+    fetchProducts();\r\n+  }, []);\r\n+\r\n   const fetchProducts = async () => {\r\n     try {\r\n       const response = await fetch(\"/api/products\");\r\n+      if (!response.ok) {\r\n+        throw new Error(\"Failed to fetch products\");\r\n+      }\r\n       const data = await response.json();\r\n-      if (data.ok) {\r\n-        setProducts(data.products);\r\n-      }\r\n+      setProducts(data);\r\n     } catch (error) {\r\n       console.error(\"Error fetching products:\", error);\r\n+      toast.error(\"Không thể tải danh sách sản phẩm\");\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddProduct = async (productData: ProductFormType) => {\r\n-    setIsAdding(true);\r\n-\r\n+  const handleAddProduct = async (formData: ProductFormType) => {\r\n     try {\r\n-      // First upload images\r\n-      if (productData.images.length === 0) {\r\n-        throw new Error(\"Please select at least one image\");\r\n-      }\r\n-\r\n-      const formData = new FormData();\r\n-      productData.images.forEach((image, index) => {\r\n-        formData.append(\"files\", image);\r\n-      });\r\n-\r\n-      const uploadResponse = await fetch(\"/api/upload\", {\r\n+      const response = await fetch(\"/api/products\", {\r\n         method: \"POST\",\r\n-        body: formData,\r\n+        headers: {\r\n+          \"Content-Type\": \"application/json\",\r\n+        },\r\n+        body: JSON.stringify(formData),\r\n       });\r\n \r\n-      if (!uploadResponse.ok) {\r\n-        const errorData = await uploadResponse.json();\r\n-        throw new Error(errorData.error || \"Failed to upload images\");\r\n+      if (!response.ok) {\r\n+        throw new Error(\"Failed to add product\");\r\n       }\r\n \r\n-      const uploadData = await uploadResponse.json();\r\n-      \r\n-      if (!uploadData.success || !uploadData.urls) {\r\n-        throw new Error(\"Invalid upload response\");\r\n-      }\r\n-\r\n-      // Upload size guide image if exists\r\n-      let sizeGuideImageUrl = \"\";\r\n-      if (productData.sizeGuideImage) {\r\n-        const sizeGuideFormData = new FormData();\r\n-        sizeGuideFormData.append(\"files\", productData.sizeGuideImage);\r\n-        \r\n-        const sizeGuideResponse = await fetch(\"/api/upload\", {\r\n-          method: \"POST\",\r\n-          body: sizeGuideFormData,\r\n-        });\r\n-\r\n-        if (!sizeGuideResponse.ok) {\r\n-          throw new Error(\"Failed to upload size guide image\");\r\n-        }\r\n-\r\n-        const sizeGuideData = await sizeGuideResponse.json();\r\n-        if (!sizeGuideData.success || !sizeGuideData.urls || sizeGuideData.urls.length === 0) {\r\n-          throw new Error(\"Invalid size guide image upload response\");\r\n-        }\r\n-        sizeGuideImageUrl = sizeGuideData.urls[0];\r\n-      }\r\n-\r\n-      // Then create product\r\n-      const productFormData = new FormData();\r\n-      productFormData.append(\"name\", productData.name);\r\n-      productFormData.append(\"description\", productData.description);\r\n-      productFormData.append(\"details\", productData.details);\r\n-      productFormData.append(\"price\", productData.price);\r\n-      productFormData.append(\"category\", productData.category);\r\n-      productFormData.append(\"collection\", productData.collection);\r\n-      productFormData.append(\"productCode\", productData.productCode);\r\n-      productFormData.append(\"quantityM\", productData.quantityM);\r\n-      productFormData.append(\"quantityL\", productData.quantityL);\r\n-      productFormData.append(\"quantityXL\", productData.quantityXL);\r\n-      productFormData.append(\"quantityHat\", productData.quantityHat);\r\n-      productFormData.append(\"images\", JSON.stringify(uploadData.urls));\r\n-      if (sizeGuideImageUrl) {\r\n-        productFormData.append(\"sizeGuideImage\", sizeGuideImageUrl);\r\n-      }\r\n-      productFormData.append(\"colors\", JSON.stringify(productData.colors));\r\n-\r\n-      const response = await fetch(\"/api/products\", {\r\n-        method: \"POST\",\r\n-        body: productFormData,\r\n-      });\r\n-\r\n-      const data = await response.json();\r\n-\r\n-      if (data.ok) {\r\n-        toast.success(\"Product added successfully\");\r\n-        fetchProducts();\r\n-      } else {\r\n-        toast.error(data.error || \"Failed to add product\");\r\n-      }\r\n+      toast.success(\"Thêm sản phẩm thành công\");\r\n+      setIsAdding(false);\r\n+      fetchProducts();\r\n     } catch (error) {\r\n       console.error(\"Error adding product:\", error);\r\n-      toast.error(error instanceof Error ? error.message : \"Failed to add product\");\r\n-    } finally {\r\n-      setIsAdding(false);\r\n+      toast.error(\"Không thể thêm sản phẩm\");\r\n     }\r\n   };\r\n \r\n-  const handleEditProduct = async (product: Product) => {\r\n-    setIsEditing(true);\r\n+  const handleEditProduct = async (formData: ProductFormType) => {\r\n+    if (!selectedProduct) return;\r\n \r\n     try {\r\n-      if (!product._id) {\r\n-        throw new Error(\"No product selected\");\r\n-      }\r\n-\r\n-      const updatedProduct = {\r\n-        name: product.name,\r\n-        price: Number(product.price),\r\n-        description: product.description,\r\n-        images: product.images,\r\n-        quantityM: Number(product.quantityM),\r\n-        quantityL: Number(product.quantityL),\r\n-        quantityXL: Number(product.quantityXL),\r\n-        quantityHat: Number(product.quantityHat),\r\n-        productCode: product.productCode,\r\n-        details: product.details,\r\n-        category: product.category,\r\n-        collection: product.collection,\r\n-        colors: product.colors || [],\r\n-        updatedAt: new Date().toISOString()\r\n-      };\r\n-\r\n-      const response = await fetch(`/api/products/${product._id}`, {\r\n+      const response = await fetch(`/api/products/${selectedProduct._id}`, {\r\n         method: \"PUT\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n-        body: JSON.stringify(updatedProduct),\r\n+        body: JSON.stringify(formData),\r\n       });\r\n \r\n-      const data = await response.json();\r\n+      if (!response.ok) {\r\n+        throw new Error(\"Failed to update product\");\r\n+      }\r\n \r\n-      if (data.ok) {\r\n-        toast.success(\"Cập nhật sản phẩm thành công\");\r\n-        // Cập nhật state với dữ liệu mới từ server\r\n-        setProducts(prevProducts => \r\n-          prevProducts.map(p => \r\n-            p._id === product._id ? data.product : p\r\n-          )\r\n-        );\r\n-        setIsEditing(false);\r\n-        setSelectedProduct(null);\r\n-        // Refresh lại danh sách sản phẩm\r\n-        fetchProducts();\r\n-      } else {\r\n-        toast.error(data.error || \"Không thể cập nhật sản phẩm\");\r\n-      }\r\n+      toast.success(\"Cập nhật sản phẩm thành công\");\r\n+      setSelectedProduct(null);\r\n+      fetchProducts();\r\n     } catch (error) {\r\n       console.error(\"Error updating product:\", error);\r\n       toast.error(\"Không thể cập nhật sản phẩm\");\r\n-    } finally {\r\n-      setIsEditing(false);\r\n     }\r\n   };\r\n \r\n   const handleDeleteProduct = async (productId: string) => {\r\n-    if (!window.confirm(\"Are you sure you want to delete this product?\")) {\r\n-      return;\r\n-    }\r\n+    if (!confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n \r\n     try {\r\n       const response = await fetch(`/api/products/${productId}`, {\r\n         method: \"DELETE\",\r\n       });\r\n \r\n-      const data = await response.json();\r\n+      if (!response.ok) {\r\n+        throw new Error(\"Failed to delete product\");\r\n+      }\r\n \r\n-      if (data.ok) {\r\n-        toast.success(\"Product deleted successfully\");\r\n-        fetchProducts();\r\n-      } else {\r\n-        toast.error(data.error || \"Failed to delete product\");\r\n-      }\r\n+      toast.success(\"Xóa sản phẩm thành công\");\r\n+      fetchProducts();\r\n     } catch (error) {\r\n       console.error(\"Error deleting product:\", error);\r\n-      toast.error(\"Failed to delete product\");\r\n+      toast.error(\"Không thể xóa sản phẩm\");\r\n     }\r\n   };\r\n \r\n   const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n"
                },
                {
                    "date": 1747286862022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,97 +24,199 @@\n   const { data: session, status } = useSession();\r\n \r\n   useEffect(() => {\r\n     if (status === \"unauthenticated\") {\r\n-      router.push(\"/login\");\r\n+      router.push(\"/admin/login\");\r\n+    } else if (status === \"authenticated\") {\r\n+      fetchProducts();\r\n     }\r\n   }, [status, router]);\r\n \r\n-  useEffect(() => {\r\n-    fetchProducts();\r\n-  }, []);\r\n-\r\n   const fetchProducts = async () => {\r\n     try {\r\n       const response = await fetch(\"/api/products\");\r\n-      if (!response.ok) {\r\n-        throw new Error(\"Failed to fetch products\");\r\n+      const data = await response.json();\r\n+      if (data.ok) {\r\n+        setProducts(data.products);\r\n       }\r\n-      const data = await response.json();\r\n-      setProducts(data);\r\n     } catch (error) {\r\n       console.error(\"Error fetching products:\", error);\r\n-      toast.error(\"Không thể tải danh sách sản phẩm\");\r\n     } finally {\r\n       setIsLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleAddProduct = async (formData: ProductFormType) => {\r\n+  const handleAddProduct = async (productData: ProductFormType) => {\r\n+    setIsAdding(true);\r\n+\r\n     try {\r\n+      // First upload images\r\n+      if (productData.images.length === 0) {\r\n+        throw new Error(\"Please select at least one image\");\r\n+      }\r\n+\r\n+      const formData = new FormData();\r\n+      productData.images.forEach((image, index) => {\r\n+        formData.append(\"files\", image);\r\n+      });\r\n+\r\n+      const uploadResponse = await fetch(\"/api/upload\", {\r\n+        method: \"POST\",\r\n+        body: formData,\r\n+      });\r\n+\r\n+      if (!uploadResponse.ok) {\r\n+        const errorData = await uploadResponse.json();\r\n+        throw new Error(errorData.error || \"Failed to upload images\");\r\n+      }\r\n+\r\n+      const uploadData = await uploadResponse.json();\r\n+      \r\n+      if (!uploadData.success || !uploadData.urls) {\r\n+        throw new Error(\"Invalid upload response\");\r\n+      }\r\n+\r\n+      // Upload size guide image if exists\r\n+      let sizeGuideImageUrl = \"\";\r\n+      if (productData.sizeGuideImage) {\r\n+        const sizeGuideFormData = new FormData();\r\n+        sizeGuideFormData.append(\"files\", productData.sizeGuideImage);\r\n+        \r\n+        const sizeGuideResponse = await fetch(\"/api/upload\", {\r\n+          method: \"POST\",\r\n+          body: sizeGuideFormData,\r\n+        });\r\n+\r\n+        if (!sizeGuideResponse.ok) {\r\n+          throw new Error(\"Failed to upload size guide image\");\r\n+        }\r\n+\r\n+        const sizeGuideData = await sizeGuideResponse.json();\r\n+        if (!sizeGuideData.success || !sizeGuideData.urls || sizeGuideData.urls.length === 0) {\r\n+          throw new Error(\"Invalid size guide image upload response\");\r\n+        }\r\n+        sizeGuideImageUrl = sizeGuideData.urls[0];\r\n+      }\r\n+\r\n+      // Then create product\r\n+      const productFormData = new FormData();\r\n+      productFormData.append(\"name\", productData.name);\r\n+      productFormData.append(\"description\", productData.description);\r\n+      productFormData.append(\"details\", productData.details);\r\n+      productFormData.append(\"price\", productData.price);\r\n+      productFormData.append(\"category\", productData.category);\r\n+      productFormData.append(\"collection\", productData.collection);\r\n+      productFormData.append(\"productCode\", productData.productCode);\r\n+      productFormData.append(\"quantityM\", productData.quantityM);\r\n+      productFormData.append(\"quantityL\", productData.quantityL);\r\n+      productFormData.append(\"quantityXL\", productData.quantityXL);\r\n+      productFormData.append(\"quantityHat\", productData.quantityHat);\r\n+      productFormData.append(\"images\", JSON.stringify(uploadData.urls));\r\n+      if (sizeGuideImageUrl) {\r\n+        productFormData.append(\"sizeGuideImage\", sizeGuideImageUrl);\r\n+      }\r\n+      productFormData.append(\"colors\", JSON.stringify(productData.colors));\r\n+\r\n       const response = await fetch(\"/api/products\", {\r\n         method: \"POST\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify(formData),\r\n+        body: productFormData,\r\n       });\r\n \r\n-      if (!response.ok) {\r\n-        throw new Error(\"Failed to add product\");\r\n+      const data = await response.json();\r\n+\r\n+      if (data.ok) {\r\n+        toast.success(\"Product added successfully\");\r\n+        fetchProducts();\r\n+      } else {\r\n+        toast.error(data.error || \"Failed to add product\");\r\n       }\r\n-\r\n-      toast.success(\"Thêm sản phẩm thành công\");\r\n-      setIsAdding(false);\r\n-      fetchProducts();\r\n     } catch (error) {\r\n       console.error(\"Error adding product:\", error);\r\n-      toast.error(\"Không thể thêm sản phẩm\");\r\n+      toast.error(error instanceof Error ? error.message : \"Failed to add product\");\r\n+    } finally {\r\n+      setIsAdding(false);\r\n     }\r\n   };\r\n \r\n-  const handleEditProduct = async (formData: ProductFormType) => {\r\n-    if (!selectedProduct) return;\r\n+  const handleEditProduct = async (product: Product) => {\r\n+    setIsEditing(true);\r\n \r\n     try {\r\n-      const response = await fetch(`/api/products/${selectedProduct._id}`, {\r\n+      if (!product._id) {\r\n+        throw new Error(\"No product selected\");\r\n+      }\r\n+\r\n+      const updatedProduct = {\r\n+        name: product.name,\r\n+        price: Number(product.price),\r\n+        description: product.description,\r\n+        images: product.images,\r\n+        quantityM: Number(product.quantityM),\r\n+        quantityL: Number(product.quantityL),\r\n+        quantityXL: Number(product.quantityXL),\r\n+        quantityHat: Number(product.quantityHat),\r\n+        productCode: product.productCode,\r\n+        details: product.details,\r\n+        category: product.category,\r\n+        collection: product.collection,\r\n+        colors: product.colors || [],\r\n+        updatedAt: new Date().toISOString()\r\n+      };\r\n+\r\n+      const response = await fetch(`/api/products/${product._id}`, {\r\n         method: \"PUT\",\r\n         headers: {\r\n           \"Content-Type\": \"application/json\",\r\n         },\r\n-        body: JSON.stringify(formData),\r\n+        body: JSON.stringify(updatedProduct),\r\n       });\r\n \r\n-      if (!response.ok) {\r\n-        throw new Error(\"Failed to update product\");\r\n+      const data = await response.json();\r\n+\r\n+      if (data.ok) {\r\n+        toast.success(\"Cập nhật sản phẩm thành công\");\r\n+        // Cập nhật state với dữ liệu mới từ server\r\n+        setProducts(prevProducts => \r\n+          prevProducts.map(p => \r\n+            p._id === product._id ? data.product : p\r\n+          )\r\n+        );\r\n+        setIsEditing(false);\r\n+        setSelectedProduct(null);\r\n+        // Refresh lại danh sách sản phẩm\r\n+        fetchProducts();\r\n+      } else {\r\n+        toast.error(data.error || \"Không thể cập nhật sản phẩm\");\r\n       }\r\n-\r\n-      toast.success(\"Cập nhật sản phẩm thành công\");\r\n-      setSelectedProduct(null);\r\n-      fetchProducts();\r\n     } catch (error) {\r\n       console.error(\"Error updating product:\", error);\r\n       toast.error(\"Không thể cập nhật sản phẩm\");\r\n+    } finally {\r\n+      setIsEditing(false);\r\n     }\r\n   };\r\n \r\n   const handleDeleteProduct = async (productId: string) => {\r\n-    if (!confirm(\"Bạn có chắc chắn muốn xóa sản phẩm này?\")) return;\r\n+    if (!window.confirm(\"Are you sure you want to delete this product?\")) {\r\n+      return;\r\n+    }\r\n \r\n     try {\r\n       const response = await fetch(`/api/products/${productId}`, {\r\n         method: \"DELETE\",\r\n       });\r\n \r\n-      if (!response.ok) {\r\n-        throw new Error(\"Failed to delete product\");\r\n+      const data = await response.json();\r\n+\r\n+      if (data.ok) {\r\n+        toast.success(\"Product deleted successfully\");\r\n+        fetchProducts();\r\n+      } else {\r\n+        toast.error(data.error || \"Failed to delete product\");\r\n       }\r\n-\r\n-      toast.success(\"Xóa sản phẩm thành công\");\r\n-      fetchProducts();\r\n     } catch (error) {\r\n       console.error(\"Error deleting product:\", error);\r\n-      toast.error(\"Không thể xóa sản phẩm\");\r\n+      toast.error(\"Failed to delete product\");\r\n     }\r\n   };\r\n \r\n   const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n"
                },
                {
                    "date": 1747287543332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n export default function AdminProductsPage() {\r\n   const [products, setProducts] = useState<Product[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n   const [isAdding, setIsAdding] = useState(false);\r\n+  const [isSubmitting, setIsSubmitting] = useState(false);\r\n   const [isEditing, setIsEditing] = useState(false);\r\n   const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\r\n   const [sizeGuideImage, setSizeGuideImage] = useState<File | null>(null);\r\n   const [sizeGuideImagePreview, setSizeGuideImagePreview] = useState<string>(\"\");\r\n@@ -45,9 +46,9 @@\n     }\r\n   };\r\n \r\n   const handleAddProduct = async (productData: ProductFormType) => {\r\n-    setIsAdding(true);\r\n+    setIsSubmitting(true);\r\n \r\n     try {\r\n       // First upload images\r\n       if (productData.images.length === 0) {\r\n@@ -124,17 +125,18 @@\n       const data = await response.json();\r\n \r\n       if (data.ok) {\r\n         toast.success(\"Product added successfully\");\r\n+        setIsAdding(false);\r\n         fetchProducts();\r\n       } else {\r\n         toast.error(data.error || \"Failed to add product\");\r\n       }\r\n     } catch (error) {\r\n       console.error(\"Error adding product:\", error);\r\n       toast.error(error instanceof Error ? error.message : \"Failed to add product\");\r\n     } finally {\r\n-      setIsAdding(false);\r\n+      setIsSubmitting(false);\r\n     }\r\n   };\r\n \r\n   const handleEditProduct = async (product: Product) => {\r\n@@ -283,9 +285,9 @@\n \r\n           {isAdding && (\r\n             <LazyProductForm\r\n               onSubmit={handleAddProduct}\r\n-              isAdding={isAdding}\r\n+              isAdding={isSubmitting}\r\n             />\r\n           )}\r\n \r\n           <div className=\"mt-4\">\r\n"
                },
                {
                    "date": 1747319223488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,317 +1,317 @@\n-\"use client\";\r\n-\r\n-import { useState, useEffect } from \"react\";\r\n-import { motion } from \"framer-motion\";\r\n-import { useRouter } from \"next/navigation\";\r\n-import { useSession } from \"next-auth/react\";\r\n-import { toast } from \"react-hot-toast\";\r\n-import { ProductForm } from \"./components/ProductForm\";\r\n-import { ProductList } from \"./components/ProductList\";\r\n-import { EditModal } from \"./components/EditModal\";\r\n-import { Product, ProductForm as ProductFormType } from \"./components/types\";\r\n-import Image from \"next/image\";\r\n-import { LazyProductForm } from '@/components/lazy';\r\n-\r\n-export default function AdminProductsPage() {\r\n-  const [products, setProducts] = useState<Product[]>([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [isAdding, setIsAdding] = useState(false);\r\n-  const [isSubmitting, setIsSubmitting] = useState(false);\r\n-  const [isEditing, setIsEditing] = useState(false);\r\n-  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\r\n-  const [sizeGuideImage, setSizeGuideImage] = useState<File | null>(null);\r\n-  const [sizeGuideImagePreview, setSizeGuideImagePreview] = useState<string>(\"\");\r\n-  const router = useRouter();\r\n-  const { data: session, status } = useSession();\r\n-\r\n-  useEffect(() => {\r\n-    if (status === \"unauthenticated\") {\r\n-      router.push(\"/admin/login\");\r\n-    } else if (status === \"authenticated\") {\r\n-      fetchProducts();\r\n-    }\r\n-  }, [status, router]);\r\n-\r\n-  const fetchProducts = async () => {\r\n-    try {\r\n-      const response = await fetch(\"/api/products\");\r\n-      const data = await response.json();\r\n-      if (data.ok) {\r\n-        setProducts(data.products);\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error fetching products:\", error);\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleAddProduct = async (productData: ProductFormType) => {\r\n-    setIsSubmitting(true);\r\n-\r\n-    try {\r\n-      // First upload images\r\n-      if (productData.images.length === 0) {\r\n-        throw new Error(\"Please select at least one image\");\r\n-      }\r\n-\r\n-      const formData = new FormData();\r\n-      productData.images.forEach((image, index) => {\r\n-        formData.append(\"files\", image);\r\n-      });\r\n-\r\n-      const uploadResponse = await fetch(\"/api/upload\", {\r\n-        method: \"POST\",\r\n-        body: formData,\r\n-      });\r\n-\r\n-      if (!uploadResponse.ok) {\r\n-        const errorData = await uploadResponse.json();\r\n-        throw new Error(errorData.error || \"Failed to upload images\");\r\n-      }\r\n-\r\n-      const uploadData = await uploadResponse.json();\r\n-      \r\n-      if (!uploadData.success || !uploadData.urls) {\r\n-        throw new Error(\"Invalid upload response\");\r\n-      }\r\n-\r\n-      // Upload size guide image if exists\r\n-      let sizeGuideImageUrl = \"\";\r\n-      if (productData.sizeGuideImage) {\r\n-        const sizeGuideFormData = new FormData();\r\n-        sizeGuideFormData.append(\"files\", productData.sizeGuideImage);\r\n-        \r\n-        const sizeGuideResponse = await fetch(\"/api/upload\", {\r\n-          method: \"POST\",\r\n-          body: sizeGuideFormData,\r\n-        });\r\n-\r\n-        if (!sizeGuideResponse.ok) {\r\n-          throw new Error(\"Failed to upload size guide image\");\r\n-        }\r\n-\r\n-        const sizeGuideData = await sizeGuideResponse.json();\r\n-        if (!sizeGuideData.success || !sizeGuideData.urls || sizeGuideData.urls.length === 0) {\r\n-          throw new Error(\"Invalid size guide image upload response\");\r\n-        }\r\n-        sizeGuideImageUrl = sizeGuideData.urls[0];\r\n-      }\r\n-\r\n-      // Then create product\r\n-      const productFormData = new FormData();\r\n-      productFormData.append(\"name\", productData.name);\r\n-      productFormData.append(\"description\", productData.description);\r\n-      productFormData.append(\"details\", productData.details);\r\n-      productFormData.append(\"price\", productData.price);\r\n-      productFormData.append(\"category\", productData.category);\r\n-      productFormData.append(\"collection\", productData.collection);\r\n-      productFormData.append(\"productCode\", productData.productCode);\r\n-      productFormData.append(\"quantityM\", productData.quantityM);\r\n-      productFormData.append(\"quantityL\", productData.quantityL);\r\n-      productFormData.append(\"quantityXL\", productData.quantityXL);\r\n-      productFormData.append(\"quantityHat\", productData.quantityHat);\r\n-      productFormData.append(\"images\", JSON.stringify(uploadData.urls));\r\n-      if (sizeGuideImageUrl) {\r\n-        productFormData.append(\"sizeGuideImage\", sizeGuideImageUrl);\r\n-      }\r\n-      productFormData.append(\"colors\", JSON.stringify(productData.colors));\r\n-\r\n-      const response = await fetch(\"/api/products\", {\r\n-        method: \"POST\",\r\n-        body: productFormData,\r\n-      });\r\n-\r\n-      const data = await response.json();\r\n-\r\n-      if (data.ok) {\r\n-        toast.success(\"Product added successfully\");\r\n-        setIsAdding(false);\r\n-        fetchProducts();\r\n-      } else {\r\n-        toast.error(data.error || \"Failed to add product\");\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error adding product:\", error);\r\n-      toast.error(error instanceof Error ? error.message : \"Failed to add product\");\r\n-    } finally {\r\n-      setIsSubmitting(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEditProduct = async (product: Product) => {\r\n-    setIsEditing(true);\r\n-\r\n-    try {\r\n-      if (!product._id) {\r\n-        throw new Error(\"No product selected\");\r\n-      }\r\n-\r\n-      const updatedProduct = {\r\n-        name: product.name,\r\n-        price: Number(product.price),\r\n-        description: product.description,\r\n-        images: product.images,\r\n-        quantityM: Number(product.quantityM),\r\n-        quantityL: Number(product.quantityL),\r\n-        quantityXL: Number(product.quantityXL),\r\n-        quantityHat: Number(product.quantityHat),\r\n-        productCode: product.productCode,\r\n-        details: product.details,\r\n-        category: product.category,\r\n-        collection: product.collection,\r\n-        colors: product.colors || [],\r\n-        updatedAt: new Date().toISOString()\r\n-      };\r\n-\r\n-      const response = await fetch(`/api/products/${product._id}`, {\r\n-        method: \"PUT\",\r\n-        headers: {\r\n-          \"Content-Type\": \"application/json\",\r\n-        },\r\n-        body: JSON.stringify(updatedProduct),\r\n-      });\r\n-\r\n-      const data = await response.json();\r\n-\r\n-      if (data.ok) {\r\n-        toast.success(\"Cập nhật sản phẩm thành công\");\r\n-        // Cập nhật state với dữ liệu mới từ server\r\n-        setProducts(prevProducts => \r\n-          prevProducts.map(p => \r\n-            p._id === product._id ? data.product : p\r\n-          )\r\n-        );\r\n-        setIsEditing(false);\r\n-        setSelectedProduct(null);\r\n-        // Refresh lại danh sách sản phẩm\r\n-        fetchProducts();\r\n-      } else {\r\n-        toast.error(data.error || \"Không thể cập nhật sản phẩm\");\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error updating product:\", error);\r\n-      toast.error(\"Không thể cập nhật sản phẩm\");\r\n-    } finally {\r\n-      setIsEditing(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDeleteProduct = async (productId: string) => {\r\n-    if (!window.confirm(\"Are you sure you want to delete this product?\")) {\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      const response = await fetch(`/api/products/${productId}`, {\r\n-        method: \"DELETE\",\r\n-      });\r\n-\r\n-      const data = await response.json();\r\n-\r\n-      if (data.ok) {\r\n-        toast.success(\"Product deleted successfully\");\r\n-        fetchProducts();\r\n-      } else {\r\n-        toast.error(data.error || \"Failed to delete product\");\r\n-      }\r\n-    } catch (error) {\r\n-      console.error(\"Error deleting product:\", error);\r\n-      toast.error(\"Failed to delete product\");\r\n-    }\r\n-  };\r\n-\r\n-  const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n-    const file = e.target.files?.[0];\r\n-    if (file) {\r\n-      setSizeGuideImage(file);\r\n-      const reader = new FileReader();\r\n-      reader.onloadend = () => {\r\n-        setSizeGuideImagePreview(reader.result as string);\r\n-      };\r\n-      reader.readAsDataURL(file);\r\n-    }\r\n-  };\r\n-\r\n-  const resetForm = () => {\r\n-    setSizeGuideImage(null);\r\n-    setSizeGuideImagePreview(\"\");\r\n-  };\r\n-\r\n-  const handleEdit = (product: Product) => {\r\n-    setSelectedProduct(product);\r\n-  };\r\n-\r\n-  if (status === \"loading\") {\r\n-    return (\r\n-      <div className=\"min-h-screen flex items-center justify-center\">\r\n-        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n-  if (status === \"unauthenticated\") {\r\n-    return null;\r\n-  }\r\n-\r\n-  return (\r\n-    <>\r\n-      <div className=\"h-[60px]\"></div>\r\n-      <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-16\">\r\n-        <div className=\"text-center\">\r\n-          <div className=\"inline-block\">\r\n-            <motion.h1\r\n-              initial={{ opacity: 0, y: 20 }}\r\n-              animate={{ opacity: 1, y: 0 }}\r\n-              className=\"text-2xl font-bold text-black tracking-wider mb-2\"\r\n-              style={{ letterSpacing: \"0.2em\" }}\r\n-            >\r\n-              QUẢN LÝ SẢN PHẨM\r\n-            </motion.h1>\r\n-            <div className=\"h-[1px] bg-black\"></div>\r\n-          </div>\r\n-        </div>\r\n-\r\n-        <div className=\"mt-8\">\r\n-          <div className=\"flex justify-between items-center mb-6\">\r\n-            <h2 className=\"text-base font-semibold text-black uppercase\">Danh sách sản phẩm</h2>\r\n-            <button\r\n-              onClick={() => setIsAdding(true)}\r\n-              className=\"bg-black text-white px-4 py-2 text-sm hover:bg-gray-800 transition-colors\"\r\n-            >\r\n-              Thêm sản phẩm mới\r\n-            </button>\r\n-          </div>\r\n-\r\n-          {isAdding && (\r\n-            <LazyProductForm\r\n-              onSubmit={handleAddProduct}\r\n-              isAdding={isSubmitting}\r\n-            />\r\n-          )}\r\n-\r\n-          <div className=\"mt-4\">\r\n-            {isLoading ? (\r\n-              <div className=\"flex justify-center\">\r\n-                <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n-              </div>\r\n-            ) : (\r\n-              <ProductList\r\n-                products={products}\r\n-                onEdit={handleEdit}\r\n-                onDelete={handleDeleteProduct}\r\n-              />\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      </div>\r\n-\r\n-      <EditModal\r\n-        product={selectedProduct}\r\n-        onClose={() => setSelectedProduct(null)}\r\n-        onSave={handleEditProduct}\r\n-        isEditing={isEditing}\r\n-      />\r\n-    </>\r\n-  );\r\n+\"use client\";\n+\n+import { useState, useEffect } from \"react\";\n+import { motion } from \"framer-motion\";\n+import { useRouter } from \"next/navigation\";\n+import { useSession } from \"next-auth/react\";\n+import { toast } from \"react-hot-toast\";\n+import { ProductForm } from \"./components/ProductForm\";\n+import { ProductList } from \"./components/ProductList\";\n+import { EditModal } from \"./components/EditModal\";\n+import { Product, ProductForm as ProductFormType } from \"./components/types\";\n+import Image from \"next/image\";\n+import { LazyProductForm } from '@/components/lazy';\n+\n+export default function AdminProductsPage() {\n+  const [products, setProducts] = useState<Product[]>([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const [isAdding, setIsAdding] = useState(false);\n+  const [isSubmitting, setIsSubmitting] = useState(false);\n+  const [isEditing, setIsEditing] = useState(false);\n+  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n+  const [sizeGuideImage, setSizeGuideImage] = useState<File | null>(null);\n+  const [sizeGuideImagePreview, setSizeGuideImagePreview] = useState<string>(\"\");\n+  const router = useRouter();\n+  const { data: session, status } = useSession();\n+\n+  useEffect(() => {\n+    if (status === \"unauthenticated\") {\n+      router.push(\"/admin/login\");\n+    } else if (status === \"authenticated\") {\n+      fetchProducts();\n+    }\n+  }, [status, router]);\n+\n+  const fetchProducts = async () => {\n+    try {\n+      const response = await fetch(\"/api/products\");\n+      const data = await response.json();\n+      if (data.ok) {\n+        setProducts(data.products);\n+      }\n+    } catch (error) {\n+      console.error(\"Error fetching products:\", error);\n+    } finally {\n+      setIsLoading(false);\n+    }\n+  };\n+\n+  const handleAddProduct = async (productData: ProductFormType) => {\n+    setIsSubmitting(true);\n+\n+    try {\n+      // First upload images\n+      if (productData.images.length === 0) {\n+        throw new Error(\"Please select at least one image\");\n+      }\n+\n+      const formData = new FormData();\n+      productData.images.forEach((image, index) => {\n+        formData.append(\"files\", image);\n+      });\n+\n+      const uploadResponse = await fetch(\"/api/upload\", {\n+        method: \"POST\",\n+        body: formData,\n+      });\n+\n+      if (!uploadResponse.ok) {\n+        const errorData = await uploadResponse.json();\n+        throw new Error(errorData.error || \"Failed to upload images\");\n+      }\n+\n+      const uploadData = await uploadResponse.json();\n+      \n+      if (!uploadData.success || !uploadData.urls) {\n+        throw new Error(\"Invalid upload response\");\n+      }\n+\n+      // Upload size guide image if exists\n+      let sizeGuideImageUrl = \"\";\n+      if (productData.sizeGuideImage) {\n+        const sizeGuideFormData = new FormData();\n+        sizeGuideFormData.append(\"files\", productData.sizeGuideImage);\n+        \n+        const sizeGuideResponse = await fetch(\"/api/upload\", {\n+          method: \"POST\",\n+          body: sizeGuideFormData,\n+        });\n+\n+        if (!sizeGuideResponse.ok) {\n+          throw new Error(\"Failed to upload size guide image\");\n+        }\n+\n+        const sizeGuideData = await sizeGuideResponse.json();\n+        if (!sizeGuideData.success || !sizeGuideData.urls || sizeGuideData.urls.length === 0) {\n+          throw new Error(\"Invalid size guide image upload response\");\n+        }\n+        sizeGuideImageUrl = sizeGuideData.urls[0];\n+      }\n+\n+      // Then create product\n+      const productFormData = new FormData();\n+      productFormData.append(\"name\", productData.name);\n+      productFormData.append(\"description\", productData.description);\n+      productFormData.append(\"details\", productData.details);\n+      productFormData.append(\"price\", productData.price);\n+      productFormData.append(\"category\", productData.category);\n+      productFormData.append(\"collection\", productData.collection);\n+      productFormData.append(\"productCode\", productData.productCode);\n+      productFormData.append(\"quantityM\", productData.quantityM);\n+      productFormData.append(\"quantityL\", productData.quantityL);\n+      productFormData.append(\"quantityXL\", productData.quantityXL);\n+      productFormData.append(\"quantityHat\", productData.quantityHat);\n+      productFormData.append(\"images\", JSON.stringify(uploadData.urls));\n+      if (sizeGuideImageUrl) {\n+        productFormData.append(\"sizeGuideImage\", sizeGuideImageUrl);\n+      }\n+      productFormData.append(\"colors\", JSON.stringify(productData.colors));\n+\n+      const response = await fetch(\"/api/products\", {\n+        method: \"POST\",\n+        body: productFormData,\n+      });\n+\n+      const data = await response.json();\n+\n+      if (data.ok) {\n+        toast.success(\"Product added successfully\");\n+        setIsAdding(false);\n+        fetchProducts();\n+      } else {\n+        toast.error(data.error || \"Failed to add product\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error adding product:\", error);\n+      toast.error(error instanceof Error ? error.message : \"Failed to add product\");\n+    } finally {\n+      setIsSubmitting(false);\n+    }\n+  };\n+\n+  const handleEditProduct = async (product: Product) => {\n+    setIsEditing(true);\n+\n+    try {\n+      if (!product._id) {\n+        throw new Error(\"No product selected\");\n+      }\n+\n+      const updatedProduct = {\n+        name: product.name,\n+        price: Number(product.price),\n+        description: product.description,\n+        images: product.images,\n+        quantityM: Number(product.quantityM),\n+        quantityL: Number(product.quantityL),\n+        quantityXL: Number(product.quantityXL),\n+        quantityHat: Number(product.quantityHat),\n+        productCode: product.productCode,\n+        details: product.details,\n+        category: product.category,\n+        collection: product.collection,\n+        colors: product.colors || [],\n+        updatedAt: new Date().toISOString()\n+      };\n+\n+      const response = await fetch(`/api/products/${product._id}`, {\n+        method: \"PUT\",\n+        headers: {\n+          \"Content-Type\": \"application/json\",\n+        },\n+        body: JSON.stringify(updatedProduct),\n+      });\n+\n+      const data = await response.json();\n+\n+      if (data.ok) {\n+        toast.success(\"Cập nhật sản phẩm thành công\");\n+        // Cập nhật state với dữ liệu mới từ server\n+        setProducts(prevProducts => \n+          prevProducts.map(p => \n+            p._id === product._id ? data.product : p\n+          )\n+        );\n+        setIsEditing(false);\n+        setSelectedProduct(null);\n+        // Refresh lại danh sách sản phẩm\n+        fetchProducts();\n+      } else {\n+        toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error updating product:\", error);\n+      toast.error(\"Không thể cập nhật sản phẩm\");\n+    } finally {\n+      setIsEditing(false);\n+    }\n+  };\n+\n+  const handleDeleteProduct = async (productId: string) => {\n+    if (!window.confirm(\"Are you sure you want to delete this product?\")) {\n+      return;\n+    }\n+\n+    try {\n+      const response = await fetch(`/api/products/${productId}`, {\n+        method: \"DELETE\",\n+      });\n+\n+      const data = await response.json();\n+\n+      if (data.ok) {\n+        toast.success(\"Product deleted successfully\");\n+        fetchProducts();\n+      } else {\n+        toast.error(data.error || \"Failed to delete product\");\n+      }\n+    } catch (error) {\n+      console.error(\"Error deleting product:\", error);\n+      toast.error(\"Failed to delete product\");\n+    }\n+  };\n+\n+  const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n+    const file = e.target.files?.[0];\n+    if (file) {\n+      setSizeGuideImage(file);\n+      const reader = new FileReader();\n+      reader.onloadend = () => {\n+        setSizeGuideImagePreview(reader.result as string);\n+      };\n+      reader.readAsDataURL(file);\n+    }\n+  };\n+\n+  const resetForm = () => {\n+    setSizeGuideImage(null);\n+    setSizeGuideImagePreview(\"\");\n+  };\n+\n+  const handleEdit = (product: Product) => {\n+    setSelectedProduct(product);\n+  };\n+\n+  if (status === \"loading\") {\n+    return (\n+      <div className=\"min-h-screen flex items-center justify-center\">\n+        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n+      </div>\n+    );\n+  }\n+\n+  if (status === \"unauthenticated\") {\n+    return null;\n+  }\n+\n+  return (\n+    <>\n+      <div className=\"h-[60px]\"></div>\n+      <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-16\">\n+        <div className=\"text-center\">\n+          <div className=\"inline-block\">\n+            <motion.h1\n+              initial={{ opacity: 0, y: 20 }}\n+              animate={{ opacity: 1, y: 0 }}\n+              className=\"text-2xl font-bold text-black tracking-wider mb-2\"\n+              style={{ letterSpacing: \"0.2em\" }}\n+            >\n+              QUẢN LÝ SẢN PHẨM\n+            </motion.h1>\n+            <div className=\"h-[1px] bg-black\"></div>\n+          </div>\n+        </div>\n+\n+        <div className=\"mt-8\">\n+          <div className=\"flex justify-between items-center mb-6\">\n+            <h2 className=\"text-base font-semibold text-black uppercase\">Danh sách sản phẩm</h2>\n+            <button\n+              onClick={() => setIsAdding(true)}\n+              className=\"bg-black text-white px-4 py-2 text-sm hover:bg-gray-800 transition-colors\"\n+            >\n+              Thêm sản phẩm mới\n+            </button>\n+          </div>\n+\n+          {isAdding && (\n+            <LazyProductForm\n+              onSubmit={handleAddProduct}\n+              isAdding={isSubmitting}\n+            />\n+          )}\n+\n+          <div className=\"mt-4\">\n+            {isLoading ? (\n+              <div className=\"flex justify-center\">\n+                <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\n+              </div>\n+            ) : (\n+              <ProductList\n+                products={products}\n+                onEdit={handleEdit}\n+                onDelete={handleDeleteProduct}\n+              />\n+            )}\n+          </div>\n+        </div>\n+      </div>\n+\n+      <EditModal\n+        product={selectedProduct}\n+        onClose={() => setSelectedProduct(null)}\n+        onSave={handleEditProduct}\n+        isEditing={isEditing}\n+      />\n+    </>\n+  );\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747723931835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,61 +45,26 @@\n       setIsLoading(false);\n     }\n   };\n \n-  const handleAddProduct = async (productData: ProductFormType) => {\n+  const handleAddProduct = async (productData: {\n+    name: string;\n+    price: string;\n+    description: string;\n+    images: string[];\n+    quantityM: string;\n+    quantityL: string;\n+    quantityXL: string;\n+    quantityHat: string;\n+    productCode: string;\n+    details: string;\n+    category: string;\n+    collection: string;\n+    sizeGuideImage: string;\n+    colors: string[];\n+  }) => {\n     setIsSubmitting(true);\n-\n     try {\n-      // First upload images\n-      if (productData.images.length === 0) {\n-        throw new Error(\"Please select at least one image\");\n-      }\n-\n-      const formData = new FormData();\n-      productData.images.forEach((image, index) => {\n-        formData.append(\"files\", image);\n-      });\n-\n-      const uploadResponse = await fetch(\"/api/upload\", {\n-        method: \"POST\",\n-        body: formData,\n-      });\n-\n-      if (!uploadResponse.ok) {\n-        const errorData = await uploadResponse.json();\n-        throw new Error(errorData.error || \"Failed to upload images\");\n-      }\n-\n-      const uploadData = await uploadResponse.json();\n-      \n-      if (!uploadData.success || !uploadData.urls) {\n-        throw new Error(\"Invalid upload response\");\n-      }\n-\n-      // Upload size guide image if exists\n-      let sizeGuideImageUrl = \"\";\n-      if (productData.sizeGuideImage) {\n-        const sizeGuideFormData = new FormData();\n-        sizeGuideFormData.append(\"files\", productData.sizeGuideImage);\n-        \n-        const sizeGuideResponse = await fetch(\"/api/upload\", {\n-          method: \"POST\",\n-          body: sizeGuideFormData,\n-        });\n-\n-        if (!sizeGuideResponse.ok) {\n-          throw new Error(\"Failed to upload size guide image\");\n-        }\n-\n-        const sizeGuideData = await sizeGuideResponse.json();\n-        if (!sizeGuideData.success || !sizeGuideData.urls || sizeGuideData.urls.length === 0) {\n-          throw new Error(\"Invalid size guide image upload response\");\n-        }\n-        sizeGuideImageUrl = sizeGuideData.urls[0];\n-      }\n-\n-      // Then create product\n       const productFormData = new FormData();\n       productFormData.append(\"name\", productData.name);\n       productFormData.append(\"description\", productData.description);\n       productFormData.append(\"details\", productData.details);\n@@ -110,11 +75,11 @@\n       productFormData.append(\"quantityM\", productData.quantityM);\n       productFormData.append(\"quantityL\", productData.quantityL);\n       productFormData.append(\"quantityXL\", productData.quantityXL);\n       productFormData.append(\"quantityHat\", productData.quantityHat);\n-      productFormData.append(\"images\", JSON.stringify(uploadData.urls));\n-      if (sizeGuideImageUrl) {\n-        productFormData.append(\"sizeGuideImage\", sizeGuideImageUrl);\n+      productFormData.append(\"images\", JSON.stringify(productData.images));\n+      if (productData.sizeGuideImage) {\n+        productFormData.append(\"sizeGuideImage\", productData.sizeGuideImage);\n       }\n       productFormData.append(\"colors\", JSON.stringify(productData.colors));\n \n       const response = await fetch(\"/api/products\", {\n"
                },
                {
                    "date": 1747725838949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,31 +111,14 @@\n       if (!product._id) {\n         throw new Error(\"No product selected\");\n       }\n \n-      const updatedProduct = {\n-        name: product.name,\n-        price: Number(product.price),\n-        description: product.description,\n-        images: product.images,\n-        quantityM: Number(product.quantityM),\n-        quantityL: Number(product.quantityL),\n-        quantityXL: Number(product.quantityXL),\n-        quantityHat: Number(product.quantityHat),\n-        productCode: product.productCode,\n-        details: product.details,\n-        category: product.category,\n-        collection: product.collection,\n-        colors: product.colors || [],\n-        updatedAt: new Date().toISOString()\n-      };\n-\n       const response = await fetch(`/api/products/${product._id}`, {\n         method: \"PUT\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n         },\n-        body: JSON.stringify(updatedProduct),\n+        body: JSON.stringify(product),\n       });\n \n       const data = await response.json();\n \n"
                },
                {
                    "date": 1747726138030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,19 +122,16 @@\n \n       const data = await response.json();\n \n       if (data.ok) {\n-        toast.success(\"Cập nhật sản phẩm thành công\");\n         // Cập nhật state với dữ liệu mới từ server\n         setProducts(prevProducts => \n           prevProducts.map(p => \n             p._id === product._id ? data.product : p\n           )\n         );\n-        setIsEditing(false);\n+        toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n-        // Refresh lại danh sách sản phẩm\n-        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n"
                },
                {
                    "date": 1747726191278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,9 @@\n             p._id === product._id ? data.product : p\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n+        // Đóng modal sau khi cập nhật thành công\n         setSelectedProduct(null);\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n"
                },
                {
                    "date": 1747726320095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,16 +155,19 @@\n \n       const data = await response.json();\n \n       if (data.ok) {\n-        toast.success(\"Product deleted successfully\");\n-        fetchProducts();\n+        // Cập nhật state ngay lập tức\n+        setProducts(prevProducts => \n+          prevProducts.filter(p => p._id !== productId)\n+        );\n+        toast.success(\"Xóa sản phẩm thành công\");\n       } else {\n-        toast.error(data.error || \"Failed to delete product\");\n+        toast.error(data.error || \"Không thể xóa sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error deleting product:\", error);\n-      toast.error(\"Failed to delete product\");\n+      toast.error(\"Không thể xóa sản phẩm\");\n     }\n   };\n \n   const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n"
                },
                {
                    "date": 1747727856167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,27 +111,43 @@\n       if (!product._id) {\n         throw new Error(\"No product selected\");\n       }\n \n+      const updatedProduct = {\n+        name: product.name,\n+        price: Number(product.price),\n+        description: product.description,\n+        images: product.images,\n+        quantityM: Number(product.quantityM),\n+        quantityL: Number(product.quantityL),\n+        quantityXL: Number(product.quantityXL),\n+        quantityHat: Number(product.quantityHat),\n+        productCode: product.productCode,\n+        details: product.details,\n+        category: product.category,\n+        collection: product.collection,\n+        colors: product.colors || [],\n+        sizeGuideImage: product.sizeGuideImage || \"\",\n+        updatedAt: new Date().toISOString()\n+      };\n+\n       const response = await fetch(`/api/products/${product._id}`, {\n         method: \"PUT\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n         },\n-        body: JSON.stringify(product),\n+        body: JSON.stringify(updatedProduct),\n       });\n \n       const data = await response.json();\n \n       if (data.ok) {\n-        // Cập nhật state với dữ liệu mới từ server\n         setProducts(prevProducts => \n           prevProducts.map(p => \n             p._id === product._id ? data.product : p\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n-        // Đóng modal sau khi cập nhật thành công\n         setSelectedProduct(null);\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n"
                },
                {
                    "date": 1747728951832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,8 @@\n \n       const data = await response.json();\n \n       if (data.ok) {\n-        // Cập nhật state ngay lập tức\n         setProducts(prevProducts => \n           prevProducts.filter(p => p._id !== productId)\n         );\n         toast.success(\"Xóa sản phẩm thành công\");\n"
                },
                {
                    "date": 1747728962182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,9 @@\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n+        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n@@ -175,8 +176,9 @@\n         setProducts(prevProducts => \n           prevProducts.filter(p => p._id !== productId)\n         );\n         toast.success(\"Xóa sản phẩm thành công\");\n+        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể xóa sản phẩm\");\n       }\n     } catch (error) {\n"
                },
                {
                    "date": 1747728980474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,11 +126,12 @@\n         category: product.category,\n         collection: product.collection,\n         colors: product.colors || [],\n         sizeGuideImage: product.sizeGuideImage || \"\",\n-        updatedAt: new Date().toISOString()\n       };\n \n+      console.log('Sending update data:', updatedProduct);\n+\n       const response = await fetch(`/api/products/${product._id}`, {\n         method: \"PUT\",\n         headers: {\n           \"Content-Type\": \"application/json\",\n@@ -138,8 +139,9 @@\n         body: JSON.stringify(updatedProduct),\n       });\n \n       const data = await response.json();\n+      console.log('API response:', data);\n \n       if (data.ok) {\n         setProducts(prevProducts => \n           prevProducts.map(p => \n"
                },
                {
                    "date": 1748592585818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,19 +174,17 @@\n \n       const data = await response.json();\n \n       if (data.ok) {\n-        setProducts(prevProducts => \n-          prevProducts.filter(p => p._id !== productId)\n-        );\n         toast.success(\"Xóa sản phẩm thành công\");\n-        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể xóa sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error deleting product:\", error);\n-      toast.error(\"Không thể xóa sản phẩm\");\n+      toast.error(\"Đã xảy ra lỗi khi xóa sản phẩm\");\n+    } finally {\n+      fetchProducts();\n     }\n   };\n \n   const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n"
                },
                {
                    "date": 1748592779394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,17 +174,19 @@\n \n       const data = await response.json();\n \n       if (data.ok) {\n+        setProducts(prevProducts => \n+          prevProducts.filter(p => p._id !== productId)\n+        );\n         toast.success(\"Xóa sản phẩm thành công\");\n+        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể xóa sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error deleting product:\", error);\n-      toast.error(\"Đã xảy ra lỗi khi xóa sản phẩm\");\n-    } finally {\n-      fetchProducts();\n+      toast.error(\"Không thể xóa sản phẩm\");\n     }\n   };\n \n   const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n"
                },
                {
                    "date": 1748592859603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,19 +174,17 @@\n \n       const data = await response.json();\n \n       if (data.ok) {\n-        setProducts(prevProducts => \n-          prevProducts.filter(p => p._id !== productId)\n-        );\n         toast.success(\"Xóa sản phẩm thành công\");\n-        fetchProducts();\n       } else {\n-        toast.error(data.error || \"Không thể xóa sản phẩm\");\n+        toast.error(data.error || \"Không thể xóa sản phẩm. Vui lòng thử lại.\");\n       }\n     } catch (error) {\n       console.error(\"Error deleting product:\", error);\n-      toast.error(\"Không thể xóa sản phẩm\");\n+      toast.error(\"Đã xảy ra lỗi khi gửi yêu cầu xóa.\");\n+    } finally {\n+      fetchProducts();\n     }\n   };\n \n   const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n"
                },
                {
                    "date": 1748593749878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,10 @@\n       return;\n     }\n \n     try {\n+      console.log('Attempting to delete product with ID:', productId);\n+\n       const response = await fetch(`/api/products/${productId}`, {\n         method: \"DELETE\",\n       });\n \n"
                },
                {
                    "date": 1748593936833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -158,8 +158,9 @@\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n       setIsEditing(false);\n+      fetchProducts();\n     }\n   };\n \n   const handleDeleteProduct = async (productId: string) => {\n"
                },
                {
                    "date": 1748593954061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,16 +142,10 @@\n       const data = await response.json();\n       console.log('API response:', data);\n \n       if (data.ok) {\n-        setProducts(prevProducts => \n-          prevProducts.map(p => \n-            p._id === product._id ? data.product : p\n-          )\n-        );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n-        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n"
                },
                {
                    "date": 1748593994485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,19 +142,24 @@\n       const data = await response.json();\n       console.log('API response:', data);\n \n       if (data.ok) {\n+        setProducts(prevProducts => \n+          prevProducts.map(p => \n+            p._id === product._id ? data.product : p\n+          )\n+        );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n+        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n       setIsEditing(false);\n-      fetchProducts();\n     }\n   };\n \n   const handleDeleteProduct = async (productId: string) => {\n"
                },
                {
                    "date": 1748594048383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,17 +149,17 @@\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n-        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n       setIsEditing(false);\n+      fetchProducts();\n     }\n   };\n \n   const handleDeleteProduct = async (productId: string) => {\n"
                },
                {
                    "date": 1748594074638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,17 +149,17 @@\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n+        fetchProducts();\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n       setIsEditing(false);\n-      fetchProducts();\n     }\n   };\n \n   const handleDeleteProduct = async (productId: string) => {\n"
                },
                {
                    "date": 1748594207577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,17 +149,18 @@\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n-        fetchProducts();\n+      \n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n       setIsEditing(false);\n+      fetchProducts();\n     }\n   };\n \n   const handleDeleteProduct = async (productId: string) => {\n"
                },
                {
                    "date": 1748594401713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,8 @@\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n         setSelectedProduct(null);\n-      \n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n"
                },
                {
                    "date": 1748601005442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,8 @@\n     } catch (error) {\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n-      setIsEditing(false);\n       fetchProducts();\n     }\n   };\n \n@@ -178,8 +177,9 @@\n \n       if (data.ok) {\n         toast.success(\"Xóa sản phẩm thành công\");\n       } else {\n+        console.error(\"Server error during delete:\", data.error);\n         toast.error(data.error || \"Không thể xóa sản phẩm. Vui lòng thử lại.\");\n       }\n     } catch (error) {\n       console.error(\"Error deleting product:\", error);\n"
                },
                {
                    "date": 1749563856999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n         category: product.category,\n         collection: product.collection,\n         colors: product.colors || [],\n         sizeGuideImage: product.sizeGuideImage || \"\",\n+        discountPercent: product.discountPercent ?? 0,\n       };\n \n       console.log('Sending update data:', updatedProduct);\n \n"
                },
                {
                    "date": 1751008541920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,12 +252,9 @@\n             </button>\n           </div>\n \n           {isAdding && (\n-            <LazyProductForm\n-              onSubmit={handleAddProduct}\n-              isAdding={isSubmitting}\n-            />\n+            <ProductForm onSubmit={handleAddProduct} isAdding={isSubmitting} />\n           )}\n \n           <div className=\"mt-4\">\n             {isLoading ? (\n"
                },
                {
                    "date": 1751008781061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,8 @@\n       const data = await response.json();\n \n       if (data.ok) {\n         toast.success(\"Product added successfully\");\n-        setIsAdding(false);\n         fetchProducts();\n       } else {\n         toast.error(data.error || \"Failed to add product\");\n       }\n@@ -100,8 +99,9 @@\n       console.error(\"Error adding product:\", error);\n       toast.error(error instanceof Error ? error.message : \"Failed to add product\");\n     } finally {\n       setIsSubmitting(false);\n+      setIsAdding(false);\n     }\n   };\n \n   const handleEditProduct = async (product: Product) => {\n"
                },
                {
                    "date": 1751009142012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n             </button>\n           </div>\n \n           {isAdding && (\n-            <ProductForm onSubmit={handleAddProduct} isAdding={isSubmitting} />\n+            <ProductForm onSubmit={handleAddProduct} />\n           )}\n \n           <div className=\"mt-4\">\n             {isLoading ? (\n"
                },
                {
                    "date": 1751009398178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,16 +149,18 @@\n             p._id === product._id ? data.product : p\n           )\n         );\n         toast.success(\"Cập nhật sản phẩm thành công\");\n+        setIsEditing(false);\n         setSelectedProduct(null);\n       } else {\n         toast.error(data.error || \"Không thể cập nhật sản phẩm\");\n       }\n     } catch (error) {\n       console.error(\"Error updating product:\", error);\n       toast.error(\"Không thể cập nhật sản phẩm\");\n     } finally {\n+      setIsEditing(false);\n       fetchProducts();\n     }\n   };\n \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { ProductForm } from \"./components/ProductForm\";\r\nimport { ProductList } from \"./components/ProductList\";\r\nimport { EditModal } from \"./components/EditModal\";\r\nimport { Product, ProductForm as ProductFormType } from \"./components/types\";\r\nimport Image from \"next/image\";\r\n\r\nexport default function AdminProductsPage() {\r\n  const [products, setProducts] = useState<Product[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\r\n  const [sizeGuideImage, setSizeGuideImage] = useState<File | null>(null);\r\n  const [sizeGuideImagePreview, setSizeGuideImagePreview] = useState<string>(\"\");\r\n  const router = useRouter();\r\n  const { data: session, status } = useSession();\r\n\r\n  useEffect(() => {\r\n    if (status === \"unauthenticated\") {\r\n      router.push(\"/admin/login\");\r\n    } else if (status === \"authenticated\") {\r\n      fetchProducts();\r\n    }\r\n  }, [status, router]);\r\n\r\n  const fetchProducts = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/products\");\r\n      const data = await response.json();\r\n      if (data.ok) {\r\n        setProducts(data.products);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching products:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleAddProduct = async (productData: ProductFormType) => {\r\n    setIsAdding(true);\r\n\r\n    try {\r\n      // First upload images\r\n      if (productData.images.length === 0) {\r\n        throw new Error(\"Please select at least one image\");\r\n      }\r\n\r\n      const formData = new FormData();\r\n      productData.images.forEach((image, index) => {\r\n        formData.append(\"files\", image);\r\n      });\r\n\r\n      const uploadResponse = await fetch(\"/api/upload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      if (!uploadResponse.ok) {\r\n        const errorData = await uploadResponse.json();\r\n        throw new Error(errorData.error || \"Failed to upload images\");\r\n      }\r\n\r\n      const uploadData = await uploadResponse.json();\r\n      \r\n      if (!uploadData.success || !uploadData.urls) {\r\n        throw new Error(\"Invalid upload response\");\r\n      }\r\n\r\n      // Upload size guide image if exists\r\n      let sizeGuideImageUrl = \"\";\r\n      if (productData.sizeGuideImage) {\r\n        const sizeGuideFormData = new FormData();\r\n        sizeGuideFormData.append(\"files\", productData.sizeGuideImage);\r\n        \r\n        const sizeGuideResponse = await fetch(\"/api/upload\", {\r\n          method: \"POST\",\r\n          body: sizeGuideFormData,\r\n        });\r\n\r\n        if (!sizeGuideResponse.ok) {\r\n          throw new Error(\"Failed to upload size guide image\");\r\n        }\r\n\r\n        const sizeGuideData = await sizeGuideResponse.json();\r\n        if (!sizeGuideData.success || !sizeGuideData.urls || sizeGuideData.urls.length === 0) {\r\n          throw new Error(\"Invalid size guide image upload response\");\r\n        }\r\n        sizeGuideImageUrl = sizeGuideData.urls[0];\r\n      }\r\n\r\n      // Then create product\r\n      const productFormData = new FormData();\r\n      productFormData.append(\"name\", productData.name);\r\n      productFormData.append(\"description\", productData.description);\r\n      productFormData.append(\"details\", productData.details);\r\n      productFormData.append(\"price\", productData.price);\r\n      productFormData.append(\"category\", productData.category);\r\n      productFormData.append(\"collection\", productData.collection);\r\n      productFormData.append(\"productCode\", productData.productCode);\r\n      productFormData.append(\"quantityM\", productData.quantityM);\r\n      productFormData.append(\"quantityL\", productData.quantityL);\r\n      productFormData.append(\"quantityXL\", productData.quantityXL);\r\n      productFormData.append(\"quantityHat\", productData.quantityHat);\r\n      productFormData.append(\"images\", JSON.stringify(uploadData.urls));\r\n      if (sizeGuideImageUrl) {\r\n        productFormData.append(\"sizeGuideImage\", sizeGuideImageUrl);\r\n      }\r\n      productFormData.append(\"colors\", JSON.stringify(productData.colors));\r\n\r\n      const response = await fetch(\"/api/products\", {\r\n        method: \"POST\",\r\n        body: productFormData,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.ok) {\r\n        toast.success(\"Product added successfully\");\r\n        fetchProducts();\r\n      } else {\r\n        toast.error(data.error || \"Failed to add product\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error adding product:\", error);\r\n      toast.error(error instanceof Error ? error.message : \"Failed to add product\");\r\n    } finally {\r\n      setIsAdding(false);\r\n    }\r\n  };\r\n\r\n  const handleEditProduct = async (product: Product) => {\r\n    setIsEditing(true);\r\n\r\n    try {\r\n      if (!product._id) {\r\n        throw new Error(\"No product selected\");\r\n      }\r\n\r\n      const updatedProduct = {\r\n        name: product.name,\r\n        price: Number(product.price),\r\n        description: product.description,\r\n        images: product.images,\r\n        quantityM: Number(product.quantityM),\r\n        quantityL: Number(product.quantityL),\r\n        quantityXL: Number(product.quantityXL),\r\n        quantityHat: Number(product.quantityHat),\r\n        productCode: product.productCode,\r\n        details: product.details,\r\n        category: product.category,\r\n        collection: product.collection,\r\n        colors: product.colors || [],\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      const response = await fetch(`/api/products/${product._id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(updatedProduct),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.ok) {\r\n        toast.success(\"Cập nhật sản phẩm thành công\");\r\n        // Cập nhật state với dữ liệu mới từ server\r\n        setProducts(prevProducts => \r\n          prevProducts.map(p => \r\n            p._id === product._id ? data.product : p\r\n          )\r\n        );\r\n        setIsEditing(false);\r\n        setSelectedProduct(null);\r\n        // Refresh lại danh sách sản phẩm\r\n        fetchProducts();\r\n      } else {\r\n        toast.error(data.error || \"Không thể cập nhật sản phẩm\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating product:\", error);\r\n      toast.error(\"Không thể cập nhật sản phẩm\");\r\n    } finally {\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteProduct = async (productId: string) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this product?\")) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`/api/products/${productId}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.ok) {\r\n        toast.success(\"Product deleted successfully\");\r\n        fetchProducts();\r\n      } else {\r\n        toast.error(data.error || \"Failed to delete product\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error deleting product:\", error);\r\n      toast.error(\"Failed to delete product\");\r\n    }\r\n  };\r\n\r\n  const handleSizeGuideImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      setSizeGuideImage(file);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setSizeGuideImagePreview(reader.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setSizeGuideImage(null);\r\n    setSizeGuideImagePreview(\"\");\r\n  };\r\n\r\n  if (status === \"loading\") {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center\">\r\n        <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"unauthenticated\") {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-[60px]\"></div>\r\n      <div className=\"px-2 sm:px-4 md:px-6 lg:px-8 py-16\">\r\n        <div className=\"text-center\">\r\n          <div className=\"inline-block\">\r\n            <motion.h1\r\n              initial={{ opacity: 0, y: 20 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className=\"text-2xl font-bold text-black tracking-wider mb-2\"\r\n              style={{ letterSpacing: \"0.2em\" }}\r\n            >\r\n              QUẢN LÝ SẢN PHẨM\r\n            </motion.h1>\r\n            <div className=\"h-[1px] bg-black\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-8\">\r\n          <ProductForm onSubmit={handleAddProduct} isAdding={isAdding} />\r\n\r\n          <div className=\"mb-2 mt-8\">\r\n            <h2 className=\"text-base font-semibold text-black uppercase\">Danh sách sản phẩm</h2>\r\n            <div className=\"w-full h-px bg-gray-300 mt-1 mb-2\"></div>\r\n          </div>\r\n          <div className=\"mt-4\">\r\n            {isLoading ? (\r\n              <div className=\"flex justify-center\">\r\n                <div className=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-gray-900\"></div>\r\n              </div>\r\n            ) : (\r\n              <ProductList\r\n                products={products}\r\n                onEdit={setSelectedProduct}\r\n                onDelete={handleDeleteProduct}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <EditModal\r\n        product={selectedProduct}\r\n        onClose={() => setSelectedProduct(null)}\r\n        onSave={handleEditProduct}\r\n        isEditing={isEditing}\r\n      />\r\n    </>\r\n  );\r\n} "
        }
    ]
}