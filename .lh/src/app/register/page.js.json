{
    "sourceFile": "src/app/register/page.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893163429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\nimport { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { useRouter, useSearchParams } from \"next/navigation\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport { FaApple } from \"react-icons/fa\";\r\nimport { FiEdit2 } from \"react-icons/fi\";\r\nimport { AiOutlineEye, AiOutlineEyeInvisible, AiOutlineCheck, AiOutlineClose } from \"react-icons/ai\";\r\nimport { motion } from \"framer-motion\";\r\n\r\n// Password validation logic\r\nconst validatePassword = (password) => ({\r\n  hasLength: password.length >= 8,\r\n  hasNumber: /\\d/.test(password),\r\n  hasSpecialChar: /[!@#$%^&*(),.?\":{}|<>]/.test(password),\r\n});\r\n\r\n// Email validation logic\r\nconst validateEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Password Field Component\r\nconst PasswordField = ({ value, onChange, isFocused, onFocus, onBlur, hasError }) => {\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const [isPasswordTouched, setIsPasswordTouched] = useState(false);\r\n  const [passwordValidation, setPasswordValidation] = useState(validatePassword(value));\r\n\r\n  useEffect(() => {\r\n    setPasswordValidation(validatePassword(value));\r\n  }, [value]);\r\n\r\n  const handlePasswordBlur = useCallback(() => {\r\n    setIsPasswordTouched(true);\r\n    onBlur();\r\n  }, [onBlur]);\r\n\r\n  const isValid = Object.values(passwordValidation).every(Boolean);\r\n  const showError = hasError || (isPasswordTouched && !isValid);\r\n\r\n  return (\r\n    <div className=\"relative w-full mt-2\"> {/* Giảm margin-top từ mt-4 xuống mt-2 */}\r\n      <div className=\"relative\">\r\n        <motion.label\r\n          className={`absolute text-sm bg-white px-1 z-10 ${showError ? \"text-red-400\" : \"text-gray-500\"}`}\r\n          initial={{ \r\n            top: value ? \"5px\" : \"50%\", \r\n            left: value ? \"4px\" : \"12px\",\r\n            scale: value ? 0.75 : 1,\r\n            translateY: value ? \"0\" : \"-50%\",\r\n          }}\r\n          animate={{\r\n            top: isFocused || value ? \"5px\" : \"50%\",\r\n            left: isFocused || value ? \"4px\" : \"12px\",\r\n            scale: isFocused || value ? 0.75 : 1,\r\n            translateY: isFocused || value ? \"0\" : \"-50%\",\r\n          }}\r\n          transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n        >\r\n          PASSWORD*\r\n        </motion.label>\r\n        <input\r\n          type={isPasswordVisible ? \"text\" : \"password\"}\r\n          name=\"password\"\r\n          value={value}\r\n          onChange={onChange}\r\n          onFocus={onFocus}\r\n          onBlur={handlePasswordBlur}\r\n          className={`w-full px-4 pt-6 pb-2 text-sm text-black border rounded-md focus:outline-none focus:ring-2 \r\n            ${isValid && isPasswordTouched ? \"border-green-500 focus:ring-green-500\" : \r\n              showError ? \"border-red-400 focus:ring-red-400\" : \"border-gray-300 focus:ring-black\"}`}\r\n        />\r\n        <div\r\n          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 cursor-pointer\"\r\n          onClick={() => setIsPasswordVisible(!isPasswordVisible)}\r\n        >\r\n          {isPasswordVisible ? (\r\n            <AiOutlineEye className=\"text-gray-500\" />\r\n          ) : (\r\n            <AiOutlineEyeInvisible className=\"text-gray-500\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Password Requirements */}\r\n      <div className=\"mt-1 space-y-1 pl-1\"> {/* Giảm margin-top từ mt-2 xuống mt-1 */}\r\n        {[\r\n          { key: \"hasLength\", text: \"Please enter at least 8 characters\" },\r\n          { key: \"hasNumber\", text: \"Please enter at least one number\" },\r\n          { key: \"hasSpecialChar\", text: \"Please enter one special character (!@#$%^&*(),.?\\\":{}|<>)\" },\r\n        ].map((req) => (\r\n          <div key={req.key} className=\"flex items-center gap-2\">\r\n            {passwordValidation[req.key] ? (\r\n              <AiOutlineCheck className=\"text-green-500 min-w-[16px]\" />\r\n            ) : (\r\n              <AiOutlineClose className={`${isPasswordTouched ? \"text-red-500\" : \"text-gray-400\"} min-w-[16px]`} />\r\n            )}\r\n            <p className={`text-xs ${passwordValidation[req.key] ? \"text-green-500\" : isPasswordTouched ? \"text-red-500\" : \"text-gray-500\"}`}>\r\n              {req.text}\r\n            </p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Date of Birth Section Component\r\nconst DateOfBirthSection = ({ formData, handleInputChange, errors, touched, setTouched }) => {\r\n  const handleDateInput = (e, type) => {\r\n    const { value } = e.target;\r\n    let newValue = value.replace(/\\D/g, \"\"); // Chỉ cho phép nhập số\r\n\r\n    // Giới hạn giá trị nhập\r\n    if (type === \"month\" && newValue > 12) {\r\n      newValue = 12;\r\n    } else if (type === \"day\" && newValue > 31) {\r\n      newValue = 31;\r\n    } else if (type === \"year\" && newValue > 9999) {\r\n      newValue = 9999;\r\n    }\r\n\r\n    // Cập nhật giá trị\r\n    e.target.value = newValue;\r\n    handleInputChange(e);\r\n  };\r\n\r\n  const isDateTouched = touched.day || touched.month || touched.year;\r\n  const isDateValid = formData.day && formData.month && formData.year;\r\n  const showError = isDateTouched && !isDateValid;\r\n\r\n  return (\r\n    <>\r\n      <label className=\"text-gray-500 text-xs font-semibold mt-2\">DATE OF BIRTH</label> {/* Giảm margin-top từ mt-4 xuống mt-2 */}\r\n      <div className=\"flex gap-2\">\r\n        {[\"month\", \"day\", \"year\"].map((type) => (\r\n          <div key={type} className=\"w-1/3 flex flex-col relative\">\r\n            <motion.label\r\n              className={`absolute text-sm bg-white px-1 z-10 ${showError ? \"text-red-400\" : \"text-gray-500\"}`}\r\n              initial={{ \r\n                top: \"50%\", \r\n                left: \"12px\",\r\n                scale: 1,\r\n                translateY: \"-50%\",\r\n              }}\r\n              animate={{\r\n                top: formData[type] || touched[type] ? \"5px\" : \"50%\",\r\n                left: formData[type] || touched[type] ? \"4px\" : \"12px\",\r\n                scale: formData[type] || touched[type] ? 0.75 : 1,\r\n                translateY: formData[type] || touched[type] ? \"0\" : \"-35%\",\r\n              }}\r\n              transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n            >\r\n              {type.toUpperCase()}*\r\n            </motion.label>\r\n            <input\r\n              type=\"text\"\r\n              name={type}\r\n              placeholder={type === \"month\" ? \"MM\" : type === \"day\" ? \"DD\" : \"YYYY\"}\r\n              value={formData[type]}\r\n              onChange={(e) => handleDateInput(e, type)}\r\n              onFocus={() => setTouched((prev) => ({ ...prev, [type]: true }))}\r\n              onBlur={() => setTouched((prev) => ({ ...prev, [type]: true }))}\r\n              className={`w-full pl-3.5 pt-6 pb-2 text-sm text-black border rounded-md focus:outline-none focus:ring-2 \r\n                ${showError ? \"border-red-400 focus:ring-red-400\" : \"border-gray-300 focus:ring-black\"}`}\r\n              maxLength={type === \"year\" ? 4 : 2}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {showError && (\r\n        <p className=\"text-red-400 text-xs -mt-2.5 space-y-1 pl-1\">Please enter a valid date of birth</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// Main Register Page Component\r\nconst RegisterPage = () => {\r\n  const router = useRouter();\r\n  const searchParams = useSearchParams();\r\n  const emailFromLogin = searchParams.get(\"email\") || \"\";\r\n  const emailInputRef = useRef(null);\r\n  const [isEmailEditable, setIsEmailEditable] = useState(false);\r\n  const [isEditingIcon, setIsEditingIcon] = useState(false);\r\n  const [isFocused, setIsFocused] = useState({});\r\n  const [touched, setTouched] = useState({});\r\n  const [formData, setFormData] = useState({\r\n    email: emailFromLogin,\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    day: \"\",\r\n    month: \"\",\r\n    year: \"\",\r\n    receiveUpdates: false,\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (emailFromLogin) {\r\n      setFormData((prev) => ({ ...prev, email: emailFromLogin }));\r\n    }\r\n  }, [emailFromLogin]);\r\n\r\n  const handleFocus = useCallback((field) => {\r\n    setIsFocused((prev) => ({ ...prev, [field]: true }));\r\n  }, []);\r\n\r\n  const handleBlur = useCallback((field) => {\r\n    setIsFocused((prev) => ({ ...prev, [field]: false }));\r\n    setTouched((prev) => ({ ...prev, [field]: true }));\r\n    const newErrors = validateForm(formData);\r\n    setErrors(newErrors);\r\n  }, [formData]);\r\n\r\n  const handleEditEmail = useCallback(() => {\r\n    setIsEmailEditable(true);\r\n    setIsEditingIcon(true);\r\n    setTimeout(() => {\r\n      emailInputRef.current?.focus();\r\n      setIsEditingIcon(false);\r\n    }, 500);\r\n  }, []);\r\n\r\n  const handleInputChange = useCallback((e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n    if (touched[name]) {\r\n      setErrors((prev) => ({ ...prev, [name]: undefined }));\r\n    }\r\n  }, [touched]);\r\n\r\n  const handleContinue = useCallback(() => {\r\n    const newTouched = Object.keys(formData).reduce((acc, key) => {\r\n      acc[key] = true;\r\n      return acc;\r\n    }, {});\r\n    setTouched(newTouched);\r\n    const newErrors = validateForm(formData);\r\n    setErrors(newErrors);\r\n    if (Object.keys(newErrors).length === 0) router.push(\"/dashboard\");\r\n  }, [formData, router]);\r\n\r\n  const validateForm = (formData) => {\r\n    const errors = {};\r\n    const passwordValid = validatePassword(formData.password);\r\n\r\n    if (!formData.email || !validateEmail(formData.email)) {\r\n      errors.email = \"Please enter a valid email address\";\r\n    }\r\n    if (!formData.password || !Object.values(passwordValid).every(Boolean)) {\r\n      errors.password = \"Please enter a valid password\";\r\n    }\r\n    if (!formData.firstName) {\r\n      errors.firstName = \"Please enter your first name\";\r\n    }\r\n    if (!formData.lastName) {\r\n      errors.lastName = \"Please enter your last name\";\r\n    }\r\n    if (!formData.day || !formData.month || !formData.year) {\r\n      errors.date = \"Please enter your full date of birth\";\r\n    }\r\n    if (!formData.receiveUpdates) {\r\n      errors.receiveUpdates = \"You must agree to receive updates\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white flex flex-col items-center pt-20\">\r\n      <h1 className=\"text-5xl font-bold text-black text-center my-8 tracking-wide\">\r\n        MY AISH ACCOUNT\r\n      </h1>\r\n      <div className=\"w-full max-w-xs flex flex-col gap-4\">\r\n        <button className=\"flex items-center justify-center w-full border border-black text-black py-2 rounded-full text-sm font-semibold hover:bg-gray-100 transition\">\r\n          <FcGoogle className=\"text-3xl mr-2\" /> CONTINUE WITH GOOGLE\r\n        </button>\r\n        <button className=\"flex items-center justify-center w-full border border-black text-black py-2 rounded-full text-sm font-semibold hover:bg-gray-100 transition\">\r\n          <FaApple className=\"text-3xl mr-2\" /> CONTINUE WITH APPLE\r\n        </button>\r\n        <div className=\"flex items-center justify-center mt-3\">\r\n          <span className=\"text-black font-semibold\">OR</span>\r\n        </div>\r\n        <div className=\"flex justify-center w-full\">\r\n          <h2 className=\"text-black text-3xl font-semibold text-center whitespace-nowrap\">\r\n            CONTINUE WITH YOUR EMAIL ADDRESS\r\n          </h2>\r\n        </div>\r\n        <div className=\"flex justify-center w-full text-center px-4 whitespace-nowrap\">\r\n          <p className=\"text-black text-2xs font-semibold\">\r\n          SIGN IN WITH YOUR EMAIL AND PASSWORD OR CREATE A PROFILE IF YOU ARE NEW\r\n          </p>\r\n        </div>\r\n\r\n        {/* Email Field */}\r\n        <div className=\"relative w-full mt-2\"> {/* Giảm margin-top từ mt-4 xuống mt-2 */}\r\n          <motion.label\r\n            className={`absolute text-sm bg-white px-1 z-10 ${errors.email ? \"text-red-400\" : \"text-gray-500\"}`}\r\n            initial={{ \r\n              top: formData.email ? \"5px\" : \"50%\", \r\n              left: formData.email ? \"4px\" : \"12px\",\r\n              scale: formData.email ? 0.75 : 1,\r\n              translateY: formData.email ? \"0\" : \"-50%\",\r\n            }}\r\n            animate={{\r\n              top: isFocused.email || formData.email ? \"5px\" : \"50%\",\r\n              left: isFocused.email || formData.email ? \"4px\" : \"12px\",\r\n              scale: isFocused.email || formData.email ? 0.75 : 1,\r\n              translateY: isFocused.email || formData.email ? \"0\" : \"-50%\",\r\n            }}\r\n            transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n          >\r\n            EMAIL*\r\n          </motion.label>\r\n          <div className=\"relative\">\r\n            <input\r\n              ref={emailInputRef}\r\n              type=\"text\"\r\n              name=\"email\"\r\n              value={formData.email}\r\n              onChange={handleInputChange}\r\n              onFocus={() => handleFocus(\"email\")}\r\n              onBlur={() => handleBlur(\"email\")}\r\n              className={`w-full px-4 pt-6 pb-2 text-sm text-black border rounded-md focus:outline-none focus:ring-2 \r\n                ${errors.email ? \"border-red-400 focus:ring-red-400\" : \"border-gray-300 focus:ring-black\"}`}\r\n              readOnly={!isEmailEditable}\r\n            />\r\n            <motion.div\r\n              animate={{ rotate: isEditingIcon ? 20 : 0 }}\r\n              transition={{ duration: 0.3, yoyo: 3 }}\r\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 cursor-pointer\"\r\n              onClick={handleEditEmail}\r\n            >\r\n              <FiEdit2 className=\"text-gray-500\" />\r\n            </motion.div>\r\n          </div>\r\n          {errors.email && touched.email && (\r\n            <p className=\"text-red-400 text-xs mt-1\">{errors.email}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Password Field */}\r\n        <PasswordField \r\n          value={formData.password}\r\n          onChange={handleInputChange}\r\n          isFocused={isFocused.password}\r\n          onFocus={() => handleFocus(\"password\")}\r\n          onBlur={() => handleBlur(\"password\")}\r\n          hasError={errors.password && touched.password}\r\n        />\r\n\r\n        {/* First Name and Last Name Fields */}\r\n        {\"firstName lastName\".split(\" \").map((field, index) => (\r\n          <div key={index} className=\"relative w-full mt-2\"> {/* Giảm margin-top từ mt-4 xuống mt-2 */}\r\n            <motion.label\r\n              className={`absolute text-sm bg-white px-1 z-10 ${errors[field] ? \"text-red-400\" : \"text-gray-500\"}`}\r\n              initial={{ \r\n                top: formData[field] ? \"5px\" : \"50%\", \r\n                left: formData[field] ? \"4px\" : \"12px\",\r\n                scale: formData[field] ? 0.75 : 1,\r\n                translateY: formData[field] ? \"0\" : \"-50%\",\r\n              }}\r\n              animate={{\r\n                top: isFocused[field] || formData[field] ? \"5px\" : \"50%\",\r\n                left: isFocused[field] || formData[field] ? \"4px\" : \"12px\",\r\n                scale: isFocused[field] || formData[field] ? 0.75 : 1,\r\n                translateY: isFocused[field] || formData[field] ? \"0\" : \"-90%\",\r\n              }}\r\n              transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n            >\r\n              {field === \"firstName\" ? \"FIRST NAME*\" : \"LAST NAME*\"}\r\n            </motion.label>\r\n            <div className=\"relative\">\r\n              <input\r\n                type=\"text\"\r\n                name={field}  \r\n                value={formData[field]}\r\n                onChange={handleInputChange}\r\n                onFocus={() => handleFocus(field)}\r\n                onBlur={() => handleBlur(field)}\r\n                className={`w-full px-4 pt-6 pb-2 text-sm text-black border rounded-md focus:outline-none focus:ring-2 \r\n                  ${errors[field] ? \"border-red-400 focus:ring-red-400\" : \"border-gray-300 focus:ring-black\"}`}\r\n              />\r\n            </div>\r\n            {errors[field] && touched[field] && (\r\n              <p className=\"text-red-400 text-xs mt-1\">{errors[field]}</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n\r\n        {/* Date of Birth Section */}\r\n        <DateOfBirthSection \r\n          formData={formData} \r\n          handleInputChange={handleInputChange} \r\n          errors={errors} \r\n          touched={touched} \r\n          setTouched={setTouched}\r\n        />\r\n\r\n        {/* Checkbox for Updates */}\r\n        <div className=\"mt-2 w-full\"> {/* Giảm margin-top từ mt-4 xuống mt-2 */}\r\n          <label className=\"flex items-start space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"receiveUpdates\"\r\n              checked={formData.receiveUpdates}\r\n              onChange={handleInputChange}\r\n              className=\"form-checkbox h-4 w-8 text-black border-gray-300 rounded focus:ring-black mt-1\"\r\n            />\r\n            <span className=\"text-sm text-gray-700 flex-1\">\r\n              I would like to receive updates (including by email, SMS, MMS, social media, phone...) about AISH new activities, exclusive products, tailored services and to have a personalised client experience based on my interests.\r\n            </span>\r\n          </label>\r\n          {errors.receiveUpdates && touched.receiveUpdates && (\r\n            <p className=\"text-red-400 text-xs mt-1\">{errors.receiveUpdates}</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Continue Button */}\r\n        <button onClick={handleContinue} className=\"w-full max-w-[325px] bg-black text-white py-3 rounded-md font-semibold mt-2 hover:bg-gray-800 transition\"> {/* Giảm margin-top từ mt-4 xuống mt-2 */}\r\n          CONTINUE\r\n        </button>\r\n        {/* Dòng JOIN MY AISH */}\r\n<div className=\"mt-15 mb-12 text-black font-semibold text-2xl text-center\">\r\n  JOIN MY AISH\r\n</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;"
        }
    ]
}