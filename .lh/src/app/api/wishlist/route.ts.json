{
    "sourceFile": "src/app/api/wishlist/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1747116695254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747116955531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,16 @@\n     if (!user) {\r\n       return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n     }\r\n \r\n-    const wishlist = user.wishlist || [];\r\n-    return NextResponse.json({ wishlist });\r\n+    const wishlistIds = user.wishlist || [];\r\n+    \r\n+    // Lấy thông tin đầy đủ của các sản phẩm từ collection products\r\n+    const products = await db.collection('products')\r\n+      .find({ _id: { $in: wishlistIds.map(id => new ObjectId(id)) } })\r\n+      .toArray();\r\n+\r\n+    return NextResponse.json({ wishlist: products });\r\n   } catch (error) {\r\n     console.error('Error fetching wishlist:', error);\r\n     return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n   }\r\n"
                },
                {
                    "date": 1747116985762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     const wishlistIds = user.wishlist || [];\r\n     \r\n     // Lấy thông tin đầy đủ của các sản phẩm từ collection products\r\n     const products = await db.collection('products')\r\n-      .find({ _id: { $in: wishlistIds.map(id => new ObjectId(id)) } })\r\n+      .find({ _id: { $in: wishlistIds.map((id: string) => new ObjectId(id)) } })\r\n       .toArray();\r\n \r\n     return NextResponse.json({ wishlist: products });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747238867557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import { NextResponse } from 'next/server';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n-import { ObjectId } from 'mongodb';\r\n import { getServerSession } from 'next-auth';\r\n-import { authOptions } from '../auth/[...nextauth]/route';\r\n+import { authOptions } from '@/lib/auth';\r\n \r\n+// GET: Lấy danh sách wishlist của user\r\n export async function GET() {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n-    if (!session?.user?.email) {\r\n+    if (!session?.user) {\r\n       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n     }\r\n \r\n     const { db } = await connectToDatabase();\r\n@@ -17,26 +17,25 @@\n     if (!user) {\r\n       return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n     }\r\n \r\n-    const wishlistIds = user.wishlist || [];\r\n-    \r\n-    // Lấy thông tin đầy đủ của các sản phẩm từ collection products\r\n-    const products = await db.collection('products')\r\n-      .find({ _id: { $in: wishlistIds.map((id: string) => new ObjectId(id)) } })\r\n-      .toArray();\r\n+    // Lấy danh sách sản phẩm từ wishlist\r\n+    const wishlist = await db.collection('products').find({\r\n+      _id: { $in: user.wishlist || [] }\r\n+    }).toArray();\r\n \r\n-    return NextResponse.json({ wishlist: products });\r\n+    return NextResponse.json({ wishlist });\r\n   } catch (error) {\r\n     console.error('Error fetching wishlist:', error);\r\n-    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n+    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n   }\r\n }\r\n \r\n+// POST: Thêm sản phẩm vào wishlist\r\n export async function POST(request: Request) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n-    if (!session?.user?.email) {\r\n+    if (!session?.user) {\r\n       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n     }\r\n \r\n     const { productId } = await request.json();\r\n@@ -44,34 +43,33 @@\n       return NextResponse.json({ error: 'Product ID is required' }, { status: 400 });\r\n     }\r\n \r\n     const { db } = await connectToDatabase();\r\n-    const user = await db.collection('users').findOne({ email: session.user.email });\r\n     \r\n-    if (!user) {\r\n-      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n+    // Kiểm tra sản phẩm có tồn tại không\r\n+    const product = await db.collection('products').findOne({ _id: productId });\r\n+    if (!product) {\r\n+      return NextResponse.json({ error: 'Product not found' }, { status: 404 });\r\n     }\r\n \r\n-    // Add product to wishlist if not already present\r\n-    const wishlist = user.wishlist || [];\r\n-    if (!wishlist.includes(productId)) {\r\n-      await db.collection('users').updateOne(\r\n-        { email: session.user.email },\r\n-        { $push: { wishlist: productId } }\r\n-      );\r\n-    }\r\n+    // Thêm sản phẩm vào wishlist của user\r\n+    await db.collection('users').updateOne(\r\n+      { email: session.user.email },\r\n+      { $addToSet: { wishlist: productId } }\r\n+    );\r\n \r\n-    return NextResponse.json({ success: true });\r\n+    return NextResponse.json({ message: 'Product added to wishlist' });\r\n   } catch (error) {\r\n     console.error('Error adding to wishlist:', error);\r\n-    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n+    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n   }\r\n }\r\n \r\n+// DELETE: Xóa sản phẩm khỏi wishlist\r\n export async function DELETE(request: Request) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n-    if (!session?.user?.email) {\r\n+    if (!session?.user) {\r\n       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n     }\r\n \r\n     const { productId } = await request.json();\r\n@@ -79,15 +77,17 @@\n       return NextResponse.json({ error: 'Product ID is required' }, { status: 400 });\r\n     }\r\n \r\n     const { db } = await connectToDatabase();\r\n+    \r\n+    // Xóa sản phẩm khỏi wishlist của user\r\n     await db.collection('users').updateOne(\r\n       { email: session.user.email },\r\n       { $pull: { wishlist: productId } }\r\n     );\r\n \r\n-    return NextResponse.json({ success: true });\r\n+    return NextResponse.json({ message: 'Product removed from wishlist' });\r\n   } catch (error) {\r\n     console.error('Error removing from wishlist:', error);\r\n-    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n+    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747238874031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { NextResponse } from 'next/server';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { getServerSession } from 'next-auth';\r\n-import { authOptions } from '@/lib/auth';\r\n+import { authOptions } from '../auth/[...nextauth]/route';\r\n \r\n // GET: Lấy danh sách wishlist của user\r\n export async function GET() {\r\n   try {\r\n"
                },
                {
                    "date": 1747239576358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { NextResponse } from 'next/server';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '../auth/[...nextauth]/route';\r\n+import { ObjectId } from 'mongodb';\r\n \r\n // GET: Lấy danh sách wishlist của user\r\n export async function GET() {\r\n   try {\r\n@@ -18,13 +19,14 @@\n       return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n     }\r\n \r\n     // Lấy danh sách sản phẩm từ wishlist\r\n-    const wishlist = await db.collection('products').find({\r\n-      _id: { $in: user.wishlist || [] }\r\n-    }).toArray();\r\n+    const wishlistIds = user.wishlist || [];\r\n+    const products = await db.collection('products')\r\n+      .find({ _id: { $in: wishlistIds.map(id => new ObjectId(id)) } })\r\n+      .toArray();\r\n \r\n-    return NextResponse.json({ wishlist });\r\n+    return NextResponse.json({ wishlist: products });\r\n   } catch (error) {\r\n     console.error('Error fetching wishlist:', error);\r\n     return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n   }\r\n@@ -45,9 +47,9 @@\n \r\n     const { db } = await connectToDatabase();\r\n     \r\n     // Kiểm tra sản phẩm có tồn tại không\r\n-    const product = await db.collection('products').findOne({ _id: productId });\r\n+    const product = await db.collection('products').findOne({ _id: new ObjectId(productId) });\r\n     if (!product) {\r\n       return NextResponse.json({ error: 'Product not found' }, { status: 404 });\r\n     }\r\n \r\n"
                },
                {
                    "date": 1747239814909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \r\n     // Lấy danh sách sản phẩm từ wishlist\r\n     const wishlistIds = user.wishlist || [];\r\n     const products = await db.collection('products')\r\n-      .find({ _id: { $in: wishlistIds.map(id => new ObjectId(id)) } })\r\n+      .find({ _id: { $in: wishlistIds.map((id: string) => new ObjectId(id)) } })\r\n       .toArray();\r\n \r\n     return NextResponse.json({ wishlist: products });\r\n   } catch (error) {\r\n"
                }
            ],
            "date": 1747116695254,
            "name": "Commit-0",
            "content": "import { NextResponse } from 'next/server';\r\nimport { connectToDatabase } from '@/lib/mongodb';\r\nimport { ObjectId } from 'mongodb';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '../auth/[...nextauth]/route';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    const user = await db.collection('users').findOne({ email: session.user.email });\r\n    \r\n    if (!user) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    const wishlist = user.wishlist || [];\r\n    return NextResponse.json({ wishlist });\r\n  } catch (error) {\r\n    console.error('Error fetching wishlist:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { productId } = await request.json();\r\n    if (!productId) {\r\n      return NextResponse.json({ error: 'Product ID is required' }, { status: 400 });\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    const user = await db.collection('users').findOne({ email: session.user.email });\r\n    \r\n    if (!user) {\r\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\r\n    }\r\n\r\n    // Add product to wishlist if not already present\r\n    const wishlist = user.wishlist || [];\r\n    if (!wishlist.includes(productId)) {\r\n      await db.collection('users').updateOne(\r\n        { email: session.user.email },\r\n        { $push: { wishlist: productId } }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Error adding to wishlist:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    const { productId } = await request.json();\r\n    if (!productId) {\r\n      return NextResponse.json({ error: 'Product ID is required' }, { status: 400 });\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    await db.collection('users').updateOne(\r\n      { email: session.user.email },\r\n      { $pull: { wishlist: productId } }\r\n    );\r\n\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    console.error('Error removing from wishlist:', error);\r\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n  }\r\n} "
        }
    ]
}