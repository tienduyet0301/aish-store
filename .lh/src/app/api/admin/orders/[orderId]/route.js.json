{
    "sourceFile": "src/app/api/admin/orders/[orderId]/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1747061914175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747062022162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n \r\n export async function PATCH(request, { params }) {\r\n   try {\r\n     const { orderId } = params;\r\n-    const { status } = await request.json();\r\n+    const updates = await request.json();\r\n \r\n     const { db } = await connectToDatabase();\r\n     \r\n     const result = await db.collection(\"orders\").updateOne(\r\n       { _id: new ObjectId(orderId) },\r\n       { \r\n         $set: { \r\n-          status,\r\n+          ...updates,\r\n           updatedAt: new Date()\r\n         } \r\n       }\r\n     );\r\n@@ -27,14 +27,14 @@\n     }\r\n \r\n     return NextResponse.json({\r\n       ok: true,\r\n-      message: \"Cập nhật trạng thái đơn hàng thành công\"\r\n+      message: \"Cập nhật đơn hàng thành công\"\r\n     });\r\n   } catch (error) {\r\n-    console.error(\"Error updating order status:\", error);\r\n+    console.error(\"Error updating order:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: \"Có lỗi xảy ra khi cập nhật trạng thái đơn hàng\" },\r\n+      { ok: false, message: \"Có lỗi xảy ra khi cập nhật đơn hàng\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747062670093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,21 +20,50 @@\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: \"Không tìm thấy đơn hàng\" },\r\n+        { error: \"Order not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      message: \"Cập nhật đơn hàng thành công\"\r\n+    return NextResponse.json({ \r\n+      success: true, \r\n+      message: \"Order updated successfully\" \r\n     });\r\n   } catch (error) {\r\n     console.error(\"Error updating order:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: \"Có lỗi xảy ra khi cập nhật đơn hàng\" },\r\n+      { error: \"Failed to update order\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n+}\r\n+\r\n+export async function DELETE(request, { params }) {\r\n+  try {\r\n+    const { orderId } = params;\r\n+    const { db } = await connectToDatabase();\r\n+\r\n+    const result = await db.collection(\"orders\").deleteOne({\r\n+      _id: new ObjectId(orderId)\r\n+    });\r\n+\r\n+    if (result.deletedCount === 0) {\r\n+      return NextResponse.json(\r\n+        { error: \"Order not found\" },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n+\r\n+    return NextResponse.json({ \r\n+      success: true, \r\n+      message: \"Order deleted successfully\" \r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\"Error deleting order:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Failed to delete order\" },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747062720176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { NextResponse } from \"next/server\";\r\n-import { connectToDatabase } from \"../../../../../lib/mongodb\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n \r\n export async function PATCH(request, { params }) {\r\n   try {\r\n"
                },
                {
                    "date": 1747063582970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,29 +41,50 @@\n \r\n export async function DELETE(request, { params }) {\r\n   try {\r\n     const { orderId } = params;\r\n+    \r\n+    if (!orderId) {\r\n+      return NextResponse.json(\r\n+        { error: \"Order ID is required\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n     const { db } = await connectToDatabase();\r\n \r\n-    const result = await db.collection(\"orders\").deleteOne({\r\n+    // Kiểm tra xem đơn hàng có tồn tại không\r\n+    const order = await db.collection(\"orders\").findOne({\r\n       _id: new ObjectId(orderId)\r\n     });\r\n \r\n-    if (result.deletedCount === 0) {\r\n+    if (!order) {\r\n       return NextResponse.json(\r\n         { error: \"Order not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n+    // Xóa đơn hàng\r\n+    const result = await db.collection(\"orders\").deleteOne({\r\n+      _id: new ObjectId(orderId)\r\n+    });\r\n+\r\n+    if (result.deletedCount === 0) {\r\n+      return NextResponse.json(\r\n+        { error: \"Failed to delete order\" },\r\n+        { status: 500 }\r\n+      );\r\n+    }\r\n+\r\n     return NextResponse.json({ \r\n       success: true, \r\n       message: \"Order deleted successfully\" \r\n     });\r\n   } catch (error) {\r\n     console.error(\"Error deleting order:\", error);\r\n     return NextResponse.json(\r\n-      { error: \"Failed to delete order\" },\r\n+      { error: \"Failed to delete order\", details: error.message },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747064029354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,47 +44,42 @@\n     const { orderId } = params;\r\n     \r\n     if (!orderId) {\r\n       return NextResponse.json(\r\n-        { error: \"Order ID is required\" },\r\n+        { message: 'Order ID is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n     const { db } = await connectToDatabase();\r\n \r\n     // Kiểm tra xem đơn hàng có tồn tại không\r\n-    const order = await db.collection(\"orders\").findOne({\r\n-      _id: new ObjectId(orderId)\r\n-    });\r\n-\r\n+    const order = await db.collection('orders').findOne({ _id: new ObjectId(orderId) });\r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { error: \"Order not found\" },\r\n+        { message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Xóa đơn hàng\r\n-    const result = await db.collection(\"orders\").deleteOne({\r\n-      _id: new ObjectId(orderId)\r\n-    });\r\n+    // Thực hiện xóa đơn hàng\r\n+    const result = await db.collection('orders').deleteOne({ _id: new ObjectId(orderId) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n-        { error: \"Failed to delete order\" },\r\n+        { message: 'Failed to delete order' },\r\n         { status: 500 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({ \r\n-      success: true, \r\n-      message: \"Order deleted successfully\" \r\n-    });\r\n+    return NextResponse.json(\r\n+      { message: 'Order deleted successfully' },\r\n+      { status: 200 }\r\n+    );\r\n   } catch (error) {\r\n-    console.error(\"Error deleting order:\", error);\r\n+    console.error('Error deleting order:', error);\r\n     return NextResponse.json(\r\n-      { error: \"Failed to delete order\", details: error.message },\r\n+      { message: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1747061914175,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport { connectToDatabase } from \"../../../../../lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\";\r\n\r\nexport async function PATCH(request, { params }) {\r\n  try {\r\n    const { orderId } = params;\r\n    const { status } = await request.json();\r\n\r\n    const { db } = await connectToDatabase();\r\n    \r\n    const result = await db.collection(\"orders\").updateOne(\r\n      { _id: new ObjectId(orderId) },\r\n      { \r\n        $set: { \r\n          status,\r\n          updatedAt: new Date()\r\n        } \r\n      }\r\n    );\r\n\r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json(\r\n        { ok: false, message: \"Không tìm thấy đơn hàng\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      message: \"Cập nhật trạng thái đơn hàng thành công\"\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating order status:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, message: \"Có lỗi xảy ra khi cập nhật trạng thái đơn hàng\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}