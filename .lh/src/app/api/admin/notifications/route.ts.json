{
    "sourceFile": "src/app/api/admin/notifications/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1746893159374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748321311663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,140 +1,86 @@\n import { NextResponse } from \"next/server\";\n import { connectToDatabase } from \"@/lib/mongodb\";\n import { ObjectId } from \"mongodb\";\n+import { getServerSession } from 'next-auth';\n+import { authOptions } from '@/lib/auth';\n \n // GET - Lấy thông báo và mã giảm giá\n export async function GET() {\n   try {\n-    console.log(\"Fetching notifications from database...\");\n+    const session = await getServerSession(authOptions);\n+    \n+    // Kiểm tra quyền admin\n+    if (session?.user?.email !== 'aish.aish.vn@gmail.com') {\n+      return NextResponse.json(\n+        { ok: false, message: 'Unauthorized' },\n+        { status: 401 }\n+      );\n+    }\n+\n     const { db } = await connectToDatabase();\n-    const notifications = await db.collection(\"notifications\").findOne({ type: \"announcement\" });\n-    const promoCodes = await db.collection(\"notifications\")\n-      .find({ type: \"promo\" })\n+\n+    // Lấy danh sách thông báo\n+    const notifications = await db.collection('notifications')\n+      .find({})\n+      .sort({ createdAt: -1 })\n+      .limit(50)\n       .toArray();\n-    \n-    console.log(\"Found notifications:\", notifications);\n-    console.log(\"Found promo codes:\", promoCodes);\n \n-    return NextResponse.json({ \n-      ok: true, \n-      announcement: notifications?.content || \"\",\n-      isAnnouncementActive: notifications?.isActive || false,\n-      promoCodes: promoCodes.map(code => ({\n-        id: code._id.toString(),\n-        code: code.code,\n-        amount: code.amount,\n-        isActive: code.isActive\n+    return NextResponse.json({\n+      ok: true,\n+      notifications: notifications.map(notification => ({\n+        ...notification,\n+        _id: notification._id.toString()\n       }))\n     });\n+\n   } catch (error) {\n-    console.error(\"Error fetching notifications:\", error);\n+    console.error('Error fetching notifications:', error);\n     return NextResponse.json(\n-      { ok: false, error: \"Failed to fetch notifications\" },\n+      { ok: false, message: 'Failed to fetch notifications' },\n       { status: 500 }\n     );\n   }\n }\n \n // POST - Cập nhật thông báo hoặc mã giảm giá\n-export async function POST(request: Request) {\n+export async function POST(req: Request) {\n   try {\n-    const { type, content, code, amount, isActive, action, id } = await request.json();\n-    console.log(\"Updating notifications:\", { type, content, code, amount, isActive, action, id });\n+    const session = await getServerSession(authOptions);\n     \n-    const { db } = await connectToDatabase();\n-\n-    if (type === \"announcement\") {\n-      await db.collection(\"notifications\").updateOne(\n-        { type: \"announcement\" },\n-        { \n-          $set: { \n-            content,\n-            isActive,\n-            updatedAt: new Date().toISOString()\n-          }\n-        },\n-        { upsert: true }\n+    // Kiểm tra quyền admin\n+    if (session?.user?.email !== 'aish.aish.vn@gmail.com') {\n+      return NextResponse.json(\n+        { ok: false, message: 'Unauthorized' },\n+        { status: 401 }\n       );\n-      console.log(\"Updated announcement successfully\");\n-    } else if (type === \"promo\") {\n-      if (action === \"add\") {\n-        // Validate input\n-        if (!code || typeof code !== 'string' || code.trim().length === 0) {\n-          return NextResponse.json(\n-            { ok: false, error: \"Mã giảm giá không hợp lệ\" },\n-            { status: 400 }\n-          );\n-        }\n+    }\n \n-        // Convert amount to number and validate\n-        const numericAmount = Number(amount);\n-        if (isNaN(numericAmount) || numericAmount <= 0) {\n-          return NextResponse.json(\n-            { ok: false, error: \"Số tiền giảm giá không hợp lệ\" },\n-            { status: 400 }\n-          );\n-        }\n+    const notificationData = await req.json();\n+    const { db } = await connectToDatabase();\n \n-        // Check for duplicate code\n-        const existingCode = await db.collection(\"notifications\").findOne({\n-          type: \"promo\",\n-          code: code.trim()\n-        });\n+    // Tạo thông báo mới\n+    const result = await db.collection('notifications').insertOne({\n+      ...notificationData,\n+      createdAt: new Date(),\n+      read: false\n+    });\n \n-        if (existingCode) {\n-          return NextResponse.json(\n-            { ok: false, error: \"Mã giảm giá đã tồn tại\" },\n-            { status: 400 }\n-          );\n-        }\n-\n-        // Add new promo code\n-        await db.collection(\"notifications\").insertOne({\n-          type: \"promo\",\n-          code: code.trim(),\n-          amount: numericAmount,\n-          isActive: true,\n-          createdAt: new Date().toISOString(),\n-          updatedAt: new Date().toISOString()\n-        });\n-        console.log(\"Added new promo code successfully\");\n-      } else if (action === \"toggle\") {\n-        if (!id) {\n-          return NextResponse.json(\n-            { ok: false, error: \"ID không hợp lệ\" },\n-            { status: 400 }\n-          );\n-        }\n-\n-        await db.collection(\"notifications\").updateOne(\n-          { _id: new ObjectId(id) },\n-          { \n-            $set: { \n-              isActive,\n-              updatedAt: new Date().toISOString()\n-            }\n-          }\n-        );\n-        console.log(\"Toggled promo code successfully\");\n-      } else if (action === \"delete\") {\n-        if (!id) {\n-          return NextResponse.json(\n-            { ok: false, error: \"ID không hợp lệ\" },\n-            { status: 400 }\n-          );\n-        }\n-\n-        await db.collection(\"notifications\").deleteOne({ _id: new ObjectId(id) });\n-        console.log(\"Deleted promo code successfully\");\n+    return NextResponse.json({\n+      ok: true,\n+      notification: {\n+        ...notificationData,\n+        _id: result.insertedId.toString(),\n+        createdAt: new Date(),\n+        read: false\n       }\n-    }\n+    });\n \n-    return NextResponse.json({ ok: true });\n   } catch (error) {\n-    console.error(\"Error updating notifications:\", error);\n+    console.error('Error creating notification:', error);\n     return NextResponse.json(\n-      { ok: false, error: \"Failed to update notifications\" },\n+      { ok: false, message: 'Failed to create notification' },\n       { status: 500 }\n     );\n   }\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748619080986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,30 @@\n-import { NextResponse } from \"next/server\";\n-import { connectToDatabase } from \"@/lib/mongodb\";\n-import { ObjectId } from \"mongodb\";\n+import { NextRequest, NextResponse } from 'next/server';\n import { getServerSession } from 'next-auth';\n import { authOptions } from '@/lib/auth';\n+import { connectToDatabase } from '@/lib/mongodb';\n+import { ObjectId } from 'mongodb';\n \n+export const dynamic = 'force-dynamic';\n+\n // GET - Lấy thông báo và mã giảm giá\n-export async function GET() {\n+export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    \n-    // Kiểm tra quyền admin\n-    if (session?.user?.email !== 'aish.aish.vn@gmail.com') {\n-      return NextResponse.json(\n-        { ok: false, message: 'Unauthorized' },\n-        { status: 401 }\n-      );\n+    if (!session?.user?.email) {\n+      return NextResponse.json({ ok: false, message: 'Unauthorized' }, { status: 401 });\n     }\n \n     const { db } = await connectToDatabase();\n+    const notifications = await db.collection('notifications').find({}).toArray();\n \n-    // Lấy danh sách thông báo\n-    const notifications = await db.collection('notifications')\n-      .find({})\n-      .sort({ createdAt: -1 })\n-      .limit(50)\n-      .toArray();\n-\n     return NextResponse.json({\n       ok: true,\n-      notifications: notifications.map(notification => ({\n-        ...notification,\n-        _id: notification._id.toString()\n+      notifications: notifications.map(notif => ({\n+        ...notif,\n+        _id: notif._id.toString()\n       }))\n     });\n-\n   } catch (error) {\n     console.error('Error fetching notifications:', error);\n     return NextResponse.json(\n       { ok: false, message: 'Failed to fetch notifications' },\n@@ -43,44 +33,85 @@\n   }\n }\n \n // POST - Cập nhật thông báo hoặc mã giảm giá\n-export async function POST(req: Request) {\n+export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    \n-    // Kiểm tra quyền admin\n-    if (session?.user?.email !== 'aish.aish.vn@gmail.com') {\n-      return NextResponse.json(\n-        { ok: false, message: 'Unauthorized' },\n-        { status: 401 }\n-      );\n+    if (!session?.user?.email) {\n+      return NextResponse.json({ ok: false, message: 'Unauthorized' }, { status: 401 });\n     }\n \n-    const notificationData = await req.json();\n     const { db } = await connectToDatabase();\n+    const data = await request.json();\n+    const { type, action, id, content, isActive, code, promoType, promoValue, promoMaxAmount, isLoginRequired, perUserLimit, expiryDate } = data;\n \n-    // Tạo thông báo mới\n-    const result = await db.collection('notifications').insertOne({\n-      ...notificationData,\n-      createdAt: new Date(),\n-      read: false\n-    });\n+    if (type === 'announcement') {\n+      // Xử lý thông báo\n+      const existingAnnouncement = await db.collection('notifications').findOne({ type: 'announcement' });\n+      \n+      if (existingAnnouncement) {\n+        await db.collection('notifications').updateOne(\n+          { type: 'announcement' },\n+          { $set: { content, isActive, updatedAt: new Date().toISOString() } }\n+        );\n+      } else {\n+        await db.collection('notifications').insertOne({\n+          type: 'announcement',\n+          content,\n+          isActive,\n+          createdAt: new Date().toISOString(),\n+          updatedAt: new Date().toISOString()\n+        });\n+      }\n+    } else if (type === 'promo') {\n+      if (action === 'add') {\n+        // Kiểm tra mã giảm giá đã tồn tại chưa\n+        const existingPromo = await db.collection('notifications').findOne({\n+          type: 'promo',\n+          code: code.toUpperCase()\n+        });\n \n-    return NextResponse.json({\n-      ok: true,\n-      notification: {\n-        ...notificationData,\n-        _id: result.insertedId.toString(),\n-        createdAt: new Date(),\n-        read: false\n+        if (existingPromo) {\n+          return NextResponse.json(\n+            { ok: false, message: 'Mã giảm giá đã tồn tại' },\n+            { status: 400 }\n+          );\n+        }\n+\n+        // Thêm mã giảm giá mới\n+        await db.collection('notifications').insertOne({\n+          type: 'promo',\n+          code: code.toUpperCase(),\n+          promoType,\n+          value: promoValue,\n+          maxAmount: promoMaxAmount,\n+          isLoginRequired: isLoginRequired || false,\n+          perUserLimit: perUserLimit || 0,\n+          usedByUsers: [],\n+          usedCount: 0,\n+          expiryDate: expiryDate || null,\n+          isActive: true,\n+          createdAt: new Date().toISOString(),\n+          updatedAt: new Date().toISOString()\n+        });\n+      } else if (action === 'toggle') {\n+        // Cập nhật trạng thái kích hoạt\n+        await db.collection('notifications').updateOne(\n+          { _id: new ObjectId(id) },\n+          { $set: { isActive, updatedAt: new Date().toISOString() } }\n+        );\n+      } else if (action === 'delete') {\n+        // Xóa mã giảm giá\n+        await db.collection('notifications').deleteOne({ _id: new ObjectId(id) });\n       }\n-    });\n+    }\n \n+    return NextResponse.json({ ok: true });\n   } catch (error) {\n-    console.error('Error creating notification:', error);\n+    console.error('Error handling notification:', error);\n     return NextResponse.json(\n-      { ok: false, message: 'Failed to create notification' },\n+      { ok: false, message: 'Failed to process notification' },\n       { status: 500 }\n     );\n   }\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748619275827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,15 +16,35 @@\n \n     const { db } = await connectToDatabase();\n     const notifications = await db.collection('notifications').find({}).toArray();\n \n-    return NextResponse.json({\n-      ok: true,\n-      notifications: notifications.map(notif => ({\n+    // Chuyển đổi dữ liệu cũ sang cấu trúc mới nếu cần\n+    const updatedNotifications = notifications.map(notif => {\n+      if (notif.type === 'promo' && !notif.promoType) {\n+        // Nếu là mã giảm giá cũ, chuyển đổi sang cấu trúc mới\n+        return {\n+          ...notif,\n+          promoType: 'fixed',\n+          value: notif.amount || 0,\n+          maxAmount: null,\n+          isLoginRequired: false,\n+          perUserLimit: 0,\n+          usedByUsers: [],\n+          usedCount: 0,\n+          expiryDate: null,\n+          _id: notif._id.toString()\n+        };\n+      }\n+      return {\n         ...notif,\n         _id: notif._id.toString()\n-      }))\n+      };\n     });\n+\n+    return NextResponse.json({\n+      ok: true,\n+      notifications: updatedNotifications\n+    });\n   } catch (error) {\n     console.error('Error fetching notifications:', error);\n     return NextResponse.json(\n       { ok: false, message: 'Failed to fetch notifications' },\n@@ -77,9 +97,9 @@\n             { status: 400 }\n           );\n         }\n \n-        // Thêm mã giảm giá mới\n+        // Thêm mã giảm giá mới với cấu trúc mới\n         await db.collection('notifications').insertOne({\n           type: 'promo',\n           code: code.toUpperCase(),\n           promoType,\n"
                },
                {
                    "date": 1749534497655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,41 +9,27 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    if (!session?.user?.email) {\n-      return NextResponse.json({ ok: false, message: 'Unauthorized' }, { status: 401 });\n+    if (!session || session.user.role !== 'admin') {\n+      return NextResponse.json(\n+        { ok: false, message: 'Unauthorized' },\n+        { status: 401 }\n+      );\n     }\n \n     const { db } = await connectToDatabase();\n-    const notifications = await db.collection('notifications').find({}).toArray();\n+    const notifications = await db.collection('notifications').findOne({ type: 'announcement' });\n+    const promoCodes = await db.collection('promoCodes').find({}).toArray();\n \n-    // Chuyển đổi dữ liệu cũ sang cấu trúc mới nếu cần\n-    const updatedNotifications = notifications.map(notif => {\n-      if (notif.type === 'promo' && !notif.promoType) {\n-        // Nếu là mã giảm giá cũ, chuyển đổi sang cấu trúc mới\n-        return {\n-          ...notif,\n-          promoType: 'fixed',\n-          value: notif.amount || 0,\n-          maxAmount: null,\n-          isLoginRequired: false,\n-          perUserLimit: 0,\n-          usedByUsers: [],\n-          usedCount: 0,\n-          expiryDate: null,\n-          _id: notif._id.toString()\n-        };\n-      }\n-      return {\n-        ...notif,\n-        _id: notif._id.toString()\n-      };\n-    });\n-\n     return NextResponse.json({\n       ok: true,\n-      notifications: updatedNotifications\n+      announcement: notifications?.content || '',\n+      isAnnouncementActive: notifications?.isActive || false,\n+      promoCodes: promoCodes.map(code => ({\n+        ...code,\n+        _id: code._id.toString()\n+      }))\n     });\n   } catch (error) {\n     console.error('Error fetching notifications:', error);\n     return NextResponse.json(\n@@ -56,82 +42,80 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    if (!session?.user?.email) {\n-      return NextResponse.json({ ok: false, message: 'Unauthorized' }, { status: 401 });\n+    if (!session || session.user.role !== 'admin') {\n+      return NextResponse.json(\n+        { ok: false, message: 'Unauthorized' },\n+        { status: 401 }\n+      );\n     }\n \n     const { db } = await connectToDatabase();\n     const data = await request.json();\n-    const { type, action, id, content, isActive, code, promoType, promoValue, promoMaxAmount, isLoginRequired, perUserLimit, expiryDate } = data;\n \n-    if (type === 'announcement') {\n-      // Xử lý thông báo\n-      const existingAnnouncement = await db.collection('notifications').findOne({ type: 'announcement' });\n-      \n-      if (existingAnnouncement) {\n+    if (data.type === 'announcement') {\n+      if (data.action === 'update') {\n         await db.collection('notifications').updateOne(\n           { type: 'announcement' },\n-          { $set: { content, isActive, updatedAt: new Date().toISOString() } }\n+          {\n+            $set: {\n+              content: data.content,\n+              isActive: data.isActive,\n+              updatedAt: new Date().toISOString()\n+            }\n+          },\n+          { upsert: true }\n         );\n-      } else {\n-        await db.collection('notifications').insertOne({\n-          type: 'announcement',\n-          content,\n-          isActive,\n-          createdAt: new Date().toISOString(),\n-          updatedAt: new Date().toISOString()\n-        });\n       }\n-    } else if (type === 'promo') {\n-      if (action === 'add') {\n-        // Kiểm tra mã giảm giá đã tồn tại chưa\n-        const existingPromo = await db.collection('notifications').findOne({\n-          type: 'promo',\n-          code: code.toUpperCase()\n-        });\n-\n-        if (existingPromo) {\n+    } else if (data.type === 'promo') {\n+      if (data.action === 'add') {\n+        const existingCode = await db.collection('promoCodes').findOne({ code: data.code });\n+        if (existingCode) {\n           return NextResponse.json(\n             { ok: false, message: 'Mã giảm giá đã tồn tại' },\n             { status: 400 }\n           );\n         }\n \n-        // Thêm mã giảm giá mới với cấu trúc mới\n-        await db.collection('notifications').insertOne({\n-          type: 'promo',\n-          code: code.toUpperCase(),\n-          promoType,\n-          value: promoValue,\n-          maxAmount: promoMaxAmount,\n-          isLoginRequired: isLoginRequired || false,\n-          perUserLimit: perUserLimit || 0,\n+        const promoCode = {\n+          code: data.code,\n+          type: data.type,\n+          value: data.value,\n+          maxAmount: data.maxAmount,\n+          isActive: true,\n+          isLoginRequired: data.isLoginRequired || false,\n+          perUserLimit: data.perUserLimit || 0,\n           usedByUsers: [],\n           usedCount: 0,\n-          expiryDate: expiryDate || null,\n-          isActive: true,\n+          scope: data.scope || 'all',\n+          selectedProducts: data.selectedProducts || [],\n           createdAt: new Date().toISOString(),\n-          updatedAt: new Date().toISOString()\n-        });\n-      } else if (action === 'toggle') {\n-        // Cập nhật trạng thái kích hoạt\n-        await db.collection('notifications').updateOne(\n-          { _id: new ObjectId(id) },\n-          { $set: { isActive, updatedAt: new Date().toISOString() } }\n+          updatedAt: new Date().toISOString(),\n+          expiryDate: data.expiryDate\n+        };\n+\n+        await db.collection('promoCodes').insertOne(promoCode);\n+      } else if (data.action === 'toggle') {\n+        await db.collection('promoCodes').updateOne(\n+          { _id: new ObjectId(data.id) },\n+          {\n+            $set: {\n+              isActive: data.isActive,\n+              updatedAt: new Date().toISOString()\n+            }\n+          }\n         );\n-      } else if (action === 'delete') {\n-        // Xóa mã giảm giá\n-        await db.collection('notifications').deleteOne({ _id: new ObjectId(id) });\n+      } else if (data.action === 'delete') {\n+        await db.collection('promoCodes').deleteOne({ _id: new ObjectId(data.id) });\n       }\n     }\n \n     return NextResponse.json({ ok: true });\n   } catch (error) {\n     console.error('Error handling notification:', error);\n     return NextResponse.json(\n-      { ok: false, message: 'Failed to process notification' },\n+      { ok: false, message: 'Failed to handle notification' },\n       { status: 500 }\n     );\n   }\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1749534511549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,16 +9,24 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    if (!session || session.user.role !== 'admin') {\n+    if (!session?.user?.email) {\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized' },\n         { status: 401 }\n       );\n     }\n \n     const { db } = await connectToDatabase();\n+    const user = await db.collection('users').findOne({ email: session.user.email });\n+    if (!user || user.role !== 'admin') {\n+      return NextResponse.json(\n+        { ok: false, message: 'Unauthorized' },\n+        { status: 401 }\n+      );\n+    }\n+\n     const notifications = await db.collection('notifications').findOne({ type: 'announcement' });\n     const promoCodes = await db.collection('promoCodes').find({}).toArray();\n \n     return NextResponse.json({\n@@ -42,16 +50,24 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    if (!session || session.user.role !== 'admin') {\n+    if (!session?.user?.email) {\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized' },\n         { status: 401 }\n       );\n     }\n \n     const { db } = await connectToDatabase();\n+    const user = await db.collection('users').findOne({ email: session.user.email });\n+    if (!user || user.role !== 'admin') {\n+      return NextResponse.json(\n+        { ok: false, message: 'Unauthorized' },\n+        { status: 401 }\n+      );\n+    }\n+\n     const data = await request.json();\n \n     if (data.type === 'announcement') {\n       if (data.action === 'update') {\n"
                },
                {
                    "date": 1749534992772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         }\n \n         const promoCode = {\n           code: data.code,\n-          type: data.type,\n+          type: data.promoType,\n           value: data.value,\n           maxAmount: data.maxAmount,\n           isActive: true,\n           isLoginRequired: data.isLoginRequired || false,\n"
                },
                {
                    "date": 1749535245629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,20 +9,26 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n+    console.log('Session in GET:', session); // Debug log\n+\n     if (!session?.user?.email) {\n+      console.log('No session or email found'); // Debug log\n       return NextResponse.json(\n-        { ok: false, message: 'Unauthorized' },\n+        { ok: false, message: 'Unauthorized - No session' },\n         { status: 401 }\n       );\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n+    console.log('User found:', user); // Debug log\n+\n     if (!user || user.role !== 'admin') {\n+      console.log('User not found or not admin'); // Debug log\n       return NextResponse.json(\n-        { ok: false, message: 'Unauthorized' },\n+        { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n     }\n \n@@ -30,17 +36,16 @@\n     const promoCodes = await db.collection('promoCodes').find({}).toArray();\n \n     return NextResponse.json({\n       ok: true,\n-      announcement: notifications?.content || '',\n-      isAnnouncementActive: notifications?.isActive || false,\n+      notifications: notifications ? [notifications] : [],\n       promoCodes: promoCodes.map(code => ({\n         ...code,\n         _id: code._id.toString()\n       }))\n     });\n   } catch (error) {\n-    console.error('Error fetching notifications:', error);\n+    console.error('Error in GET notifications:', error);\n     return NextResponse.json(\n       { ok: false, message: 'Failed to fetch notifications' },\n       { status: 500 }\n     );\n@@ -50,40 +55,45 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n+    console.log('Session in POST:', session); // Debug log\n+\n     if (!session?.user?.email) {\n+      console.log('No session or email found in POST'); // Debug log\n       return NextResponse.json(\n-        { ok: false, message: 'Unauthorized' },\n+        { ok: false, message: 'Unauthorized - No session' },\n         { status: 401 }\n       );\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n+    console.log('User found in POST:', user); // Debug log\n+\n     if (!user || user.role !== 'admin') {\n+      console.log('User not found or not admin in POST'); // Debug log\n       return NextResponse.json(\n-        { ok: false, message: 'Unauthorized' },\n+        { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n     }\n \n     const data = await request.json();\n+    console.log('Request data:', data); // Debug log\n \n     if (data.type === 'announcement') {\n-      if (data.action === 'update') {\n-        await db.collection('notifications').updateOne(\n-          { type: 'announcement' },\n-          {\n-            $set: {\n-              content: data.content,\n-              isActive: data.isActive,\n-              updatedAt: new Date().toISOString()\n-            }\n-          },\n-          { upsert: true }\n-        );\n-      }\n+      await db.collection('notifications').updateOne(\n+        { type: 'announcement' },\n+        {\n+          $set: {\n+            content: data.content,\n+            isActive: data.isActive,\n+            updatedAt: new Date().toISOString()\n+          }\n+        },\n+        { upsert: true }\n+      );\n     } else if (data.type === 'promo') {\n       if (data.action === 'add') {\n         const existingCode = await db.collection('promoCodes').findOne({ code: data.code });\n         if (existingCode) {\n@@ -109,8 +119,9 @@\n           updatedAt: new Date().toISOString(),\n           expiryDate: data.expiryDate\n         };\n \n+        console.log('Inserting promo code:', promoCode); // Debug log\n         await db.collection('promoCodes').insertOne(promoCode);\n       } else if (data.action === 'toggle') {\n         await db.collection('promoCodes').updateOne(\n           { _id: new ObjectId(data.id) },\n@@ -127,9 +138,9 @@\n     }\n \n     return NextResponse.json({ ok: true });\n   } catch (error) {\n-    console.error('Error handling notification:', error);\n+    console.error('Error in POST notifications:', error);\n     return NextResponse.json(\n       { ok: false, message: 'Failed to handle notification' },\n       { status: 500 }\n     );\n"
                },
                {
                    "date": 1749535452677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,24 +9,27 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Session in GET:', session); // Debug log\n+    console.log('Session in GET:', JSON.stringify(session, null, 2)); // Detailed session log\n \n     if (!session?.user?.email) {\n-      console.log('No session or email found'); // Debug log\n+      console.log('No session or email found');\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - No session' },\n         { status: 401 }\n       );\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User found:', user); // Debug log\n+    console.log('User from DB:', JSON.stringify(user, null, 2)); // Detailed user log\n+    console.log('Session user role:', session.user.role); // Log role from session\n+    console.log('DB user role:', user?.role); // Log role from DB\n \n-    if (!user || user.role !== 'admin') {\n-      console.log('User not found or not admin'); // Debug log\n+    // Check both session role and DB role\n+    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n+      console.log('User not found or not admin. Session role:', session.user.role, 'DB role:', user?.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n@@ -55,32 +58,35 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Session in POST:', session); // Debug log\n+    console.log('Session in POST:', JSON.stringify(session, null, 2)); // Detailed session log\n \n     if (!session?.user?.email) {\n-      console.log('No session or email found in POST'); // Debug log\n+      console.log('No session or email found in POST');\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - No session' },\n         { status: 401 }\n       );\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User found in POST:', user); // Debug log\n+    console.log('User from DB in POST:', JSON.stringify(user, null, 2)); // Detailed user log\n+    console.log('Session user role in POST:', session.user.role); // Log role from session\n+    console.log('DB user role in POST:', user?.role); // Log role from DB\n \n-    if (!user || user.role !== 'admin') {\n-      console.log('User not found or not admin in POST'); // Debug log\n+    // Check both session role and DB role\n+    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n+      console.log('User not found or not admin in POST. Session role:', session.user.role, 'DB role:', user?.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n     }\n \n     const data = await request.json();\n-    console.log('Request data:', data); // Debug log\n+    console.log('Request data:', data);\n \n     if (data.type === 'announcement') {\n       await db.collection('notifications').updateOne(\n         { type: 'announcement' },\n@@ -119,9 +125,9 @@\n           updatedAt: new Date().toISOString(),\n           expiryDate: data.expiryDate\n         };\n \n-        console.log('Inserting promo code:', promoCode); // Debug log\n+        console.log('Inserting promo code:', promoCode);\n         await db.collection('promoCodes').insertOne(promoCode);\n       } else if (data.action === 'toggle') {\n         await db.collection('promoCodes').updateOne(\n           { _id: new ObjectId(data.id) },\n"
                },
                {
                    "date": 1749535680095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,11 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Session in GET:', JSON.stringify(session, null, 2)); // Detailed session log\n+    console.log('Full session object:', JSON.stringify(session, null, 2));\n+    console.log('Session user:', JSON.stringify(session?.user, null, 2));\n+    console.log('Session user role:', session?.user?.role);\n \n     if (!session?.user?.email) {\n       console.log('No session or email found');\n       return NextResponse.json(\n@@ -21,15 +23,18 @@\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User from DB:', JSON.stringify(user, null, 2)); // Detailed user log\n-    console.log('Session user role:', session.user.role); // Log role from session\n-    console.log('DB user role:', user?.role); // Log role from DB\n+    console.log('User from DB:', JSON.stringify(user, null, 2));\n+    console.log('User role from DB:', user?.role);\n+    console.log('User role from session:', session.user.role);\n \n-    // Check both session role and DB role\n-    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n-      console.log('User not found or not admin. Session role:', session.user.role, 'DB role:', user?.role);\n+    // Kiểm tra cả role từ session và DB\n+    const isAdmin = session.user.role === 'admin' || user?.role === 'admin';\n+    console.log('Is admin check:', isAdmin);\n+\n+    if (!isAdmin) {\n+      console.log('User is not admin. Session role:', session.user.role, 'DB role:', user?.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n@@ -58,9 +63,11 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Session in POST:', JSON.stringify(session, null, 2)); // Detailed session log\n+    console.log('Full session object in POST:', JSON.stringify(session, null, 2));\n+    console.log('Session user in POST:', JSON.stringify(session?.user, null, 2));\n+    console.log('Session user role in POST:', session?.user?.role);\n \n     if (!session?.user?.email) {\n       console.log('No session or email found in POST');\n       return NextResponse.json(\n@@ -70,15 +77,18 @@\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User from DB in POST:', JSON.stringify(user, null, 2)); // Detailed user log\n-    console.log('Session user role in POST:', session.user.role); // Log role from session\n-    console.log('DB user role in POST:', user?.role); // Log role from DB\n+    console.log('User from DB in POST:', JSON.stringify(user, null, 2));\n+    console.log('User role from DB in POST:', user?.role);\n+    console.log('User role from session in POST:', session.user.role);\n \n-    // Check both session role and DB role\n-    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n-      console.log('User not found or not admin in POST. Session role:', session.user.role, 'DB role:', user?.role);\n+    // Kiểm tra cả role từ session và DB\n+    const isAdmin = session.user.role === 'admin' || user?.role === 'admin';\n+    console.log('Is admin check in POST:', isAdmin);\n+\n+    if (!isAdmin) {\n+      console.log('User is not admin in POST. Session role:', session.user.role, 'DB role:', user?.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n"
                },
                {
                    "date": 1749535694243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,9 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Full session object:', JSON.stringify(session, null, 2));\n-    console.log('Session user:', JSON.stringify(session?.user, null, 2));\n-    console.log('Session user role:', session?.user?.role);\n+    console.log('Session in GET:', JSON.stringify(session, null, 2)); // Detailed session log\n \n     if (!session?.user?.email) {\n       console.log('No session or email found');\n       return NextResponse.json(\n@@ -23,18 +21,15 @@\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User from DB:', JSON.stringify(user, null, 2));\n-    console.log('User role from DB:', user?.role);\n-    console.log('User role from session:', session.user.role);\n+    console.log('User from DB:', JSON.stringify(user, null, 2)); // Detailed user log\n+    console.log('Session user role:', session.user.role); // Log role from session\n+    console.log('DB user role:', user?.role); // Log role from DB\n \n-    // Kiểm tra cả role từ session và DB\n-    const isAdmin = session.user.role === 'admin' || user?.role === 'admin';\n-    console.log('Is admin check:', isAdmin);\n-\n-    if (!isAdmin) {\n-      console.log('User is not admin. Session role:', session.user.role, 'DB role:', user?.role);\n+    // Check both session role and DB role\n+    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n+      console.log('User not found or not admin. Session role:', session.user.role, 'DB role:', user?.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n@@ -63,11 +58,9 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Full session object in POST:', JSON.stringify(session, null, 2));\n-    console.log('Session user in POST:', JSON.stringify(session?.user, null, 2));\n-    console.log('Session user role in POST:', session?.user?.role);\n+    console.log('Session in POST:', JSON.stringify(session, null, 2)); // Detailed session log\n \n     if (!session?.user?.email) {\n       console.log('No session or email found in POST');\n       return NextResponse.json(\n@@ -77,18 +70,15 @@\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User from DB in POST:', JSON.stringify(user, null, 2));\n-    console.log('User role from DB in POST:', user?.role);\n-    console.log('User role from session in POST:', session.user.role);\n+    console.log('User from DB in POST:', JSON.stringify(user, null, 2)); // Detailed user log\n+    console.log('Session user role in POST:', session.user.role); // Log role from session\n+    console.log('DB user role in POST:', user?.role); // Log role from DB\n \n-    // Kiểm tra cả role từ session và DB\n-    const isAdmin = session.user.role === 'admin' || user?.role === 'admin';\n-    console.log('Is admin check in POST:', isAdmin);\n-\n-    if (!isAdmin) {\n-      console.log('User is not admin in POST. Session role:', session.user.role, 'DB role:', user?.role);\n+    // Check both session role and DB role\n+    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n+      console.log('User not found or not admin in POST. Session role:', session.user.role, 'DB role:', user?.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n"
                },
                {
                    "date": 1749535780696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n // GET - Lấy thông báo và mã giảm giá\n export async function GET(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Session in GET:', JSON.stringify(session, null, 2)); // Detailed session log\n+    console.log('Session in GET:', session);\n \n     if (!session?.user?.email) {\n       console.log('No session or email found');\n       return NextResponse.json(\n@@ -21,15 +21,18 @@\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User from DB:', JSON.stringify(user, null, 2)); // Detailed user log\n-    console.log('Session user role:', session.user.role); // Log role from session\n-    console.log('DB user role:', user?.role); // Log role from DB\n+    console.log('User from DB:', user);\n+    console.log('Session user role:', session.user.role);\n+    console.log('DB user role:', user?.role);\n \n-    // Check both session role and DB role\n-    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n-      console.log('User not found or not admin. Session role:', session.user.role, 'DB role:', user?.role);\n+    // Kiểm tra role từ session (không phân biệt chữ hoa/thường)\n+    const isAdmin = session.user.role?.toLowerCase() === 'admin';\n+    console.log('Is admin check:', isAdmin);\n+\n+    if (!isAdmin) {\n+      console.log('User is not admin. Session role:', session.user.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n@@ -58,9 +61,9 @@\n // POST - Cập nhật thông báo hoặc mã giảm giá\n export async function POST(request: NextRequest) {\n   try {\n     const session = await getServerSession(authOptions);\n-    console.log('Session in POST:', JSON.stringify(session, null, 2)); // Detailed session log\n+    console.log('Session in POST:', session);\n \n     if (!session?.user?.email) {\n       console.log('No session or email found in POST');\n       return NextResponse.json(\n@@ -70,15 +73,18 @@\n     }\n \n     const { db } = await connectToDatabase();\n     const user = await db.collection('users').findOne({ email: session.user.email });\n-    console.log('User from DB in POST:', JSON.stringify(user, null, 2)); // Detailed user log\n-    console.log('Session user role in POST:', session.user.role); // Log role from session\n-    console.log('DB user role in POST:', user?.role); // Log role from DB\n+    console.log('User from DB in POST:', user);\n+    console.log('Session user role in POST:', session.user.role);\n+    console.log('DB user role in POST:', user?.role);\n \n-    // Check both session role and DB role\n-    if (!user || (user.role !== 'admin' && session.user.role !== 'admin')) {\n-      console.log('User not found or not admin in POST. Session role:', session.user.role, 'DB role:', user?.role);\n+    // Kiểm tra role từ session (không phân biệt chữ hoa/thường)\n+    const isAdmin = session.user.role?.toLowerCase() === 'admin';\n+    console.log('Is admin check in POST:', isAdmin);\n+\n+    if (!isAdmin) {\n+      console.log('User is not admin in POST. Session role:', session.user.role);\n       return NextResponse.json(\n         { ok: false, message: 'Unauthorized - Not admin' },\n         { status: 401 }\n       );\n"
                },
                {
                    "date": 1749543735706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,10 +124,8 @@\n           isLoginRequired: data.isLoginRequired || false,\n           perUserLimit: data.perUserLimit || 0,\n           usedByUsers: [],\n           usedCount: 0,\n-          scope: data.scope || 'all',\n-          selectedProducts: data.selectedProducts || [],\n           createdAt: new Date().toISOString(),\n           updatedAt: new Date().toISOString(),\n           expiryDate: data.expiryDate\n         };\n"
                },
                {
                    "date": 1749544881708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,10 @@\n           isLoginRequired: data.isLoginRequired || false,\n           perUserLimit: data.perUserLimit || 0,\n           usedByUsers: [],\n           usedCount: 0,\n+          scope: data.scope || 'all',\n+          selectedProducts: data.selectedProducts || [],\n           createdAt: new Date().toISOString(),\n           updatedAt: new Date().toISOString(),\n           expiryDate: data.expiryDate\n         };\n"
                },
                {
                    "date": 1749553272212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n           perUserLimit: data.perUserLimit || 0,\n           usedByUsers: [],\n           usedCount: 0,\n           scope: data.scope || 'all',\n-          selectedProducts: data.selectedProducts || [],\n+          selectedProducts: data.scope === 'selected' ? (data.selectedProducts || []) : [],\n           createdAt: new Date().toISOString(),\n           updatedAt: new Date().toISOString(),\n           expiryDate: data.expiryDate\n         };\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\nimport { connectToDatabase } from \"@/lib/mongodb\";\nimport { ObjectId } from \"mongodb\";\n\n// GET - Lấy thông báo và mã giảm giá\nexport async function GET() {\n  try {\n    console.log(\"Fetching notifications from database...\");\n    const { db } = await connectToDatabase();\n    const notifications = await db.collection(\"notifications\").findOne({ type: \"announcement\" });\n    const promoCodes = await db.collection(\"notifications\")\n      .find({ type: \"promo\" })\n      .toArray();\n    \n    console.log(\"Found notifications:\", notifications);\n    console.log(\"Found promo codes:\", promoCodes);\n\n    return NextResponse.json({ \n      ok: true, \n      announcement: notifications?.content || \"\",\n      isAnnouncementActive: notifications?.isActive || false,\n      promoCodes: promoCodes.map(code => ({\n        id: code._id.toString(),\n        code: code.code,\n        amount: code.amount,\n        isActive: code.isActive\n      }))\n    });\n  } catch (error) {\n    console.error(\"Error fetching notifications:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to fetch notifications\" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Cập nhật thông báo hoặc mã giảm giá\nexport async function POST(request: Request) {\n  try {\n    const { type, content, code, amount, isActive, action, id } = await request.json();\n    console.log(\"Updating notifications:\", { type, content, code, amount, isActive, action, id });\n    \n    const { db } = await connectToDatabase();\n\n    if (type === \"announcement\") {\n      await db.collection(\"notifications\").updateOne(\n        { type: \"announcement\" },\n        { \n          $set: { \n            content,\n            isActive,\n            updatedAt: new Date().toISOString()\n          }\n        },\n        { upsert: true }\n      );\n      console.log(\"Updated announcement successfully\");\n    } else if (type === \"promo\") {\n      if (action === \"add\") {\n        // Validate input\n        if (!code || typeof code !== 'string' || code.trim().length === 0) {\n          return NextResponse.json(\n            { ok: false, error: \"Mã giảm giá không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        // Convert amount to number and validate\n        const numericAmount = Number(amount);\n        if (isNaN(numericAmount) || numericAmount <= 0) {\n          return NextResponse.json(\n            { ok: false, error: \"Số tiền giảm giá không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        // Check for duplicate code\n        const existingCode = await db.collection(\"notifications\").findOne({\n          type: \"promo\",\n          code: code.trim()\n        });\n\n        if (existingCode) {\n          return NextResponse.json(\n            { ok: false, error: \"Mã giảm giá đã tồn tại\" },\n            { status: 400 }\n          );\n        }\n\n        // Add new promo code\n        await db.collection(\"notifications\").insertOne({\n          type: \"promo\",\n          code: code.trim(),\n          amount: numericAmount,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        });\n        console.log(\"Added new promo code successfully\");\n      } else if (action === \"toggle\") {\n        if (!id) {\n          return NextResponse.json(\n            { ok: false, error: \"ID không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        await db.collection(\"notifications\").updateOne(\n          { _id: new ObjectId(id) },\n          { \n            $set: { \n              isActive,\n              updatedAt: new Date().toISOString()\n            }\n          }\n        );\n        console.log(\"Toggled promo code successfully\");\n      } else if (action === \"delete\") {\n        if (!id) {\n          return NextResponse.json(\n            { ok: false, error: \"ID không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        await db.collection(\"notifications\").deleteOne({ _id: new ObjectId(id) });\n        console.log(\"Deleted promo code successfully\");\n      }\n    }\n\n    return NextResponse.json({ ok: true });\n  } catch (error) {\n    console.error(\"Error updating notifications:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to update notifications\" },\n      { status: 500 }\n    );\n  }\n} "
        }
    ]
}