{
    "sourceFile": "src/app/api/admin/notifications/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746893159374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\nimport { connectToDatabase } from \"@/lib/mongodb\";\nimport { ObjectId } from \"mongodb\";\n\n// GET - Lấy thông báo và mã giảm giá\nexport async function GET() {\n  try {\n    console.log(\"Fetching notifications from database...\");\n    const { db } = await connectToDatabase();\n    const notifications = await db.collection(\"notifications\").findOne({ type: \"announcement\" });\n    const promoCodes = await db.collection(\"notifications\")\n      .find({ type: \"promo\" })\n      .toArray();\n    \n    console.log(\"Found notifications:\", notifications);\n    console.log(\"Found promo codes:\", promoCodes);\n\n    return NextResponse.json({ \n      ok: true, \n      announcement: notifications?.content || \"\",\n      isAnnouncementActive: notifications?.isActive || false,\n      promoCodes: promoCodes.map(code => ({\n        id: code._id.toString(),\n        code: code.code,\n        amount: code.amount,\n        isActive: code.isActive\n      }))\n    });\n  } catch (error) {\n    console.error(\"Error fetching notifications:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to fetch notifications\" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST - Cập nhật thông báo hoặc mã giảm giá\nexport async function POST(request: Request) {\n  try {\n    const { type, content, code, amount, isActive, action, id } = await request.json();\n    console.log(\"Updating notifications:\", { type, content, code, amount, isActive, action, id });\n    \n    const { db } = await connectToDatabase();\n\n    if (type === \"announcement\") {\n      await db.collection(\"notifications\").updateOne(\n        { type: \"announcement\" },\n        { \n          $set: { \n            content,\n            isActive,\n            updatedAt: new Date().toISOString()\n          }\n        },\n        { upsert: true }\n      );\n      console.log(\"Updated announcement successfully\");\n    } else if (type === \"promo\") {\n      if (action === \"add\") {\n        // Validate input\n        if (!code || typeof code !== 'string' || code.trim().length === 0) {\n          return NextResponse.json(\n            { ok: false, error: \"Mã giảm giá không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        // Convert amount to number and validate\n        const numericAmount = Number(amount);\n        if (isNaN(numericAmount) || numericAmount <= 0) {\n          return NextResponse.json(\n            { ok: false, error: \"Số tiền giảm giá không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        // Check for duplicate code\n        const existingCode = await db.collection(\"notifications\").findOne({\n          type: \"promo\",\n          code: code.trim()\n        });\n\n        if (existingCode) {\n          return NextResponse.json(\n            { ok: false, error: \"Mã giảm giá đã tồn tại\" },\n            { status: 400 }\n          );\n        }\n\n        // Add new promo code\n        await db.collection(\"notifications\").insertOne({\n          type: \"promo\",\n          code: code.trim(),\n          amount: numericAmount,\n          isActive: true,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        });\n        console.log(\"Added new promo code successfully\");\n      } else if (action === \"toggle\") {\n        if (!id) {\n          return NextResponse.json(\n            { ok: false, error: \"ID không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        await db.collection(\"notifications\").updateOne(\n          { _id: new ObjectId(id) },\n          { \n            $set: { \n              isActive,\n              updatedAt: new Date().toISOString()\n            }\n          }\n        );\n        console.log(\"Toggled promo code successfully\");\n      } else if (action === \"delete\") {\n        if (!id) {\n          return NextResponse.json(\n            { ok: false, error: \"ID không hợp lệ\" },\n            { status: 400 }\n          );\n        }\n\n        await db.collection(\"notifications\").deleteOne({ _id: new ObjectId(id) });\n        console.log(\"Deleted promo code successfully\");\n      }\n    }\n\n    return NextResponse.json({ ok: true });\n  } catch (error) {\n    console.error(\"Error updating notifications:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to update notifications\" },\n      { status: 500 }\n    );\n  }\n} "
        }
    ]
}