{
    "sourceFile": "src/app/api/user/updatePassword/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1747243357450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747243546070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,74 @@\n- \n\\ No newline at end of file\n+import { NextResponse } from \"next/server\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n+import bcrypt from \"bcryptjs\";\r\n+import { getServerSession } from \"next-auth\";\r\n+import { authOptions } from \"@/lib/auth\";\r\n+\r\n+export async function PUT(request: Request) {\r\n+  try {\r\n+    const session = await getServerSession(authOptions);\r\n+    if (!session?.user?.email) {\r\n+      return NextResponse.json(\r\n+        { error: \"Unauthorized\" },\r\n+        { status: 401 }\r\n+      );\r\n+    }\r\n+\r\n+    const { currentPassword, newPassword, confirmPassword } = await request.json();\r\n+\r\n+    if (!currentPassword || !newPassword || !confirmPassword) {\r\n+      return NextResponse.json(\r\n+        { error: \"All password fields are required\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    if (newPassword !== confirmPassword) {\r\n+      return NextResponse.json(\r\n+        { error: \"New passwords do not match\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    if (newPassword.length < 8) {\r\n+      return NextResponse.json(\r\n+        { error: \"New password must be at least 8 characters long\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const { db } = await connectToDatabase();\r\n+    const user = await db.collection(\"users\").findOne({ email: session.user.email });\r\n+\r\n+    if (!user) {\r\n+      return NextResponse.json(\r\n+        { error: \"User not found\" },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n+\r\n+    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isPasswordValid) {\r\n+      return NextResponse.json(\r\n+        { error: \"Current password is incorrect\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.collection(\"users\").updateOne(\r\n+      { email: session.user.email },\r\n+      { $set: { password: hashedNewPassword } }\r\n+    );\r\n+\r\n+    return NextResponse.json({\r\n+      message: \"Password updated successfully\"\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\"Error in update password:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Internal server error\" },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747243741391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,31 +7,36 @@\n export async function PUT(request: Request) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     if (!session?.user?.email) {\r\n+      console.log(\"No session or email found\");\r\n       return NextResponse.json(\r\n         { error: \"Unauthorized\" },\r\n         { status: 401 }\r\n       );\r\n     }\r\n \r\n     const { currentPassword, newPassword, confirmPassword } = await request.json();\r\n+    console.log(\"Received request for email:\", session.user.email);\r\n \r\n     if (!currentPassword || !newPassword || !confirmPassword) {\r\n+      console.log(\"Missing password fields\");\r\n       return NextResponse.json(\r\n         { error: \"All password fields are required\" },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n     if (newPassword !== confirmPassword) {\r\n+      console.log(\"New passwords do not match\");\r\n       return NextResponse.json(\r\n         { error: \"New passwords do not match\" },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n     if (newPassword.length < 8) {\r\n+      console.log(\"New password too short\");\r\n       return NextResponse.json(\r\n         { error: \"New password must be at least 8 characters long\" },\r\n         { status: 400 }\r\n       );\r\n@@ -40,28 +45,37 @@\n     const { db } = await connectToDatabase();\r\n     const user = await db.collection(\"users\").findOne({ email: session.user.email });\r\n \r\n     if (!user) {\r\n+      console.log(\"User not found in database\");\r\n       return NextResponse.json(\r\n         { error: \"User not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n+    console.log(\"Found user, comparing passwords\");\r\n     const isPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n+    console.log(\"Password comparison result:\", isPasswordValid);\r\n+\r\n     if (!isPasswordValid) {\r\n+      console.log(\"Current password is incorrect\");\r\n       return NextResponse.json(\r\n         { error: \"Current password is incorrect\" },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n+    console.log(\"Password valid, hashing new password\");\r\n     const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n+    \r\n+    console.log(\"Updating password in database\");\r\n     await db.collection(\"users\").updateOne(\r\n       { email: session.user.email },\r\n       { $set: { password: hashedNewPassword } }\r\n     );\r\n \r\n+    console.log(\"Password updated successfully\");\r\n     return NextResponse.json({\r\n       message: \"Password updated successfully\"\r\n     });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747243853261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,37 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n+    // Nếu user đăng nhập bằng Google và chưa có mật khẩu\r\n+    if (user.provider === 'google' && !user.password) {\r\n+      console.log(\"Google user setting password for first time\");\r\n+      const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n+      \r\n+      await db.collection(\"users\").updateOne(\r\n+        { email: session.user.email },\r\n+        { \r\n+          $set: { \r\n+            password: hashedNewPassword,\r\n+            provider: 'credentials' // Chuyển sang đăng nhập bằng credentials\r\n+          } \r\n+        }\r\n+      );\r\n+\r\n+      return NextResponse.json({\r\n+        message: \"Password set successfully\"\r\n+      });\r\n+    }\r\n+\r\n+    // Nếu user đã có mật khẩu, kiểm tra mật khẩu hiện tại\r\n+    if (!user.password) {\r\n+      console.log(\"User has no password set\");\r\n+      return NextResponse.json(\r\n+        { error: \"No password set for this account\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n     console.log(\"Found user, comparing passwords\");\r\n     const isPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n     console.log(\"Password comparison result:\", isPasswordValid);\r\n \r\n"
                },
                {
                    "date": 1747244021648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n     }\r\n \r\n     const { currentPassword, newPassword, confirmPassword } = await request.json();\r\n     console.log(\"Received request for email:\", session.user.email);\r\n+    console.log(\"Current password length:\", currentPassword.length);\r\n+    console.log(\"New password length:\", newPassword.length);\r\n \r\n     if (!currentPassword || !newPassword || !confirmPassword) {\r\n       console.log(\"Missing password fields\");\r\n       return NextResponse.json(\r\n@@ -52,8 +54,15 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n+    console.log(\"User found:\", {\r\n+      email: user.email,\r\n+      provider: user.provider,\r\n+      hasPassword: !!user.password,\r\n+      passwordLength: user.password ? user.password.length : 0\r\n+    });\r\n+\r\n     // Nếu user đăng nhập bằng Google và chưa có mật khẩu\r\n     if (user.provider === 'google' && !user.password) {\r\n       console.log(\"Google user setting password for first time\");\r\n       const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n@@ -82,8 +91,13 @@\n       );\r\n     }\r\n \r\n     console.log(\"Found user, comparing passwords\");\r\n+    // Thử hash mật khẩu hiện tại để so sánh\r\n+    const hashedCurrentPassword = await bcrypt.hash(currentPassword, 10);\r\n+    console.log(\"Hashed current password length:\", hashedCurrentPassword.length);\r\n+    console.log(\"Stored password length:\", user.password.length);\r\n+    \r\n     const isPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n     console.log(\"Password comparison result:\", isPasswordValid);\r\n \r\n     if (!isPasswordValid) {\r\n"
                },
                {
                    "date": 1747244188400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,17 +96,25 @@\n     const hashedCurrentPassword = await bcrypt.hash(currentPassword, 10);\r\n     console.log(\"Hashed current password length:\", hashedCurrentPassword.length);\r\n     console.log(\"Stored password length:\", user.password.length);\r\n     \r\n+    // Thử so sánh trực tiếp\r\n     const isPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n     console.log(\"Password comparison result:\", isPasswordValid);\r\n \r\n+    // Nếu không khớp, thử hash lại mật khẩu hiện tại và so sánh\r\n     if (!isPasswordValid) {\r\n-      console.log(\"Current password is incorrect\");\r\n-      return NextResponse.json(\r\n-        { error: \"Current password is incorrect\" },\r\n-        { status: 400 }\r\n-      );\r\n+      console.log(\"Trying alternative comparison method\");\r\n+      const isPasswordValidAlt = await bcrypt.compare(currentPassword, hashedCurrentPassword);\r\n+      console.log(\"Alternative comparison result:\", isPasswordValidAlt);\r\n+      \r\n+      if (!isPasswordValidAlt) {\r\n+        console.log(\"Current password is incorrect\");\r\n+        return NextResponse.json(\r\n+          { error: \"Current password is incorrect\" },\r\n+          { status: 400 }\r\n+        );\r\n+      }\r\n     }\r\n \r\n     console.log(\"Password valid, hashing new password\");\r\n     const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n"
                },
                {
                    "date": 1747244222306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,25 +96,17 @@\n     const hashedCurrentPassword = await bcrypt.hash(currentPassword, 10);\r\n     console.log(\"Hashed current password length:\", hashedCurrentPassword.length);\r\n     console.log(\"Stored password length:\", user.password.length);\r\n     \r\n-    // Thử so sánh trực tiếp\r\n     const isPasswordValid = await bcrypt.compare(currentPassword, user.password);\r\n     console.log(\"Password comparison result:\", isPasswordValid);\r\n \r\n-    // Nếu không khớp, thử hash lại mật khẩu hiện tại và so sánh\r\n     if (!isPasswordValid) {\r\n-      console.log(\"Trying alternative comparison method\");\r\n-      const isPasswordValidAlt = await bcrypt.compare(currentPassword, hashedCurrentPassword);\r\n-      console.log(\"Alternative comparison result:\", isPasswordValidAlt);\r\n-      \r\n-      if (!isPasswordValidAlt) {\r\n-        console.log(\"Current password is incorrect\");\r\n-        return NextResponse.json(\r\n-          { error: \"Current password is incorrect\" },\r\n-          { status: 400 }\r\n-        );\r\n-      }\r\n+      console.log(\"Current password is incorrect\");\r\n+      return NextResponse.json(\r\n+        { error: \"Current password is incorrect\" },\r\n+        { status: 400 }\r\n+      );\r\n     }\r\n \r\n     console.log(\"Password valid, hashing new password\");\r\n     const hashedNewPassword = await bcrypt.hash(newPassword, 10);\r\n"
                }
            ],
            "date": 1747243357450,
            "name": "Commit-0",
            "content": " "
        }
    ]
}