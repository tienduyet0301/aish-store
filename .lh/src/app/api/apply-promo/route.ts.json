{
    "sourceFile": "src/app/api/apply-promo/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748619354979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748619616842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,113 @@\n- \n\\ No newline at end of file\n+import { NextResponse } from 'next/server';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import { getServerSession } from 'next-auth';\r\n+import { authOptions } from '@/lib/auth';\r\n+import { ObjectId } from 'mongodb';\r\n+\r\n+export async function POST(req: Request) {\r\n+  try {\r\n+    const { code, totalAmount } = await req.json();\r\n+    const session = await getServerSession(authOptions);\r\n+    const userEmail = session?.user?.email || null;\r\n+\r\n+    if (!code || totalAmount === undefined) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Promo code and total amount are required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const { db } = await connectToDatabase();\r\n+\r\n+    const promoCodeDoc = await db.collection('notifications')\r\n+      .findOne({ type: 'promo', code: code.toUpperCase() });\r\n+\r\n+    if (!promoCodeDoc || !promoCodeDoc.isActive) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Mã giảm giá không hợp lệ hoặc đã hết hạn' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    // Kiểm tra ngày hết hạn\r\n+    if (promoCodeDoc.expiryDate) {\r\n+      const expiryDate = new Date(promoCodeDoc.expiryDate);\r\n+      if (expiryDate < new Date()) {\r\n+        return NextResponse.json(\r\n+          { ok: false, message: 'Mã giảm giá đã hết hạn sử dụng' },\r\n+          { status: 400 }\r\n+        );\r\n+      }\r\n+    }\r\n+\r\n+    // Kiểm tra yêu cầu đăng nhập\r\n+    if (promoCodeDoc.isLoginRequired && !userEmail) {\r\n+       return NextResponse.json(\r\n+           { ok: false, message: 'Vui lòng đăng nhập để sử dụng mã này' },\r\n+           { status: 401 }\r\n+       );\r\n+    }\r\n+\r\n+    // Kiểm tra giới hạn sử dụng trên mỗi người dùng\r\n+    if (promoCodeDoc.perUserLimit > 0 && userEmail) {\r\n+        const usedByUsers = promoCodeDoc.usedByUsers || [];\r\n+        if (usedByUsers.includes(userEmail)) {\r\n+            return NextResponse.json(\r\n+                { ok: false, message: 'Bạn đã sử dụng mã này' },\r\n+                { status: 400 }\r\n+            );\r\n+        }\r\n+    }\r\n+\r\n+    // Kiểm tra tổng số lần sử dụng nếu có limit\r\n+    if (promoCodeDoc.totalUsageLimit && promoCodeDoc.usedCount >= promoCodeDoc.totalUsageLimit) {\r\n+       return NextResponse.json(\r\n+           { ok: false, message: 'Mã giảm giá đã hết lượt sử dụng' },\r\n+           { status: 400 }\r\n+       );\r\n+    }\r\n+\r\n+    // Tính toán số tiền giảm giá thực tế\r\n+    let calculatedAmount = 0;\r\n+\r\n+    if (promoCodeDoc.promoType === 'fixed') {\r\n+      calculatedAmount = promoCodeDoc.value;\r\n+    } else if (promoCodeDoc.promoType === 'percentage') {\r\n+      calculatedAmount = totalAmount * (promoCodeDoc.value / 100);\r\n+      // Áp dụng giới hạn tối đa nếu có\r\n+      if (promoCodeDoc.maxAmount !== undefined && promoCodeDoc.maxAmount !== null && calculatedAmount > promoCodeDoc.maxAmount) {\r\n+        calculatedAmount = promoCodeDoc.maxAmount;\r\n+      }\r\n+    }\r\n+\r\n+    // Đảm bảo số tiền giảm giá không âm và không lớn hơn tổng tiền\r\n+    calculatedAmount = Math.max(0, calculatedAmount);\r\n+    calculatedAmount = Math.min(calculatedAmount, totalAmount);\r\n+\r\n+    // Trả về thông tin mã giảm giá đầy đủ\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      message: `Mã giảm giá ${calculatedAmount.toLocaleString('vi-VN')} VND đã được áp dụng!`, // Message này có thể dùng cho frontend\r\n+      discountAmount: calculatedAmount,\r\n+      promoCode: {\r\n+        id: promoCodeDoc._id.toString(),\r\n+        code: promoCodeDoc.code,\r\n+        type: promoCodeDoc.promoType,\r\n+        value: promoCodeDoc.value,\r\n+        maxAmount: promoCodeDoc.maxAmount,\r\n+        isLoginRequired: promoCodeDoc.isLoginRequired,\r\n+        perUserLimit: promoCodeDoc.perUserLimit,\r\n+        expiryDate: promoCodeDoc.expiryDate,\r\n+        usedByUsers: promoCodeDoc.usedByUsers,\r\n+        usedCount: promoCodeDoc.usedCount,\r\n+      }\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error('Error applying promo code:', error);\r\n+    return NextResponse.json(\r\n+      { ok: false, message: 'Có lỗi xảy ra khi áp dụng mã giảm giá' },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1748619354979,
            "name": "Commit-0",
            "content": "import { NextRequest, NextResponse } from 'next/server';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '@/lib/auth';\r\nimport { connectToDatabase } from '@/lib/mongodb';\r\nimport { ObjectId } from 'mongodb';\r\n\r\nexport const dynamic = 'force-dynamic';\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const { db } = await connectToDatabase();\r\n    const session = await getServerSession(authOptions);\r\n    const { code, totalAmount } = await request.json();\r\n\r\n    if (!code || !totalAmount) {\r\n      return NextResponse.json(\r\n        { ok: false, message: 'Mã giảm giá và tổng tiền là bắt buộc' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Tìm mã giảm giá\r\n    const promoCode = await db.collection('notifications').findOne({\r\n      type: 'promo',\r\n      code: code.toUpperCase(),\r\n      isActive: true\r\n    });\r\n\r\n    if (!promoCode) {\r\n      return NextResponse.json(\r\n        { ok: false, message: 'Mã giảm giá không tồn tại hoặc đã bị vô hiệu hóa' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Kiểm tra ngày hết hạn\r\n    if (promoCode.expiryDate && new Date(promoCode.expiryDate) < new Date()) {\r\n      return NextResponse.json(\r\n        { ok: false, message: 'Mã giảm giá đã hết hạn' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Kiểm tra yêu cầu đăng nhập\r\n    if (promoCode.isLoginRequired && !session?.user?.email) {\r\n      return NextResponse.json(\r\n        { ok: false, message: 'Vui lòng đăng nhập để sử dụng mã giảm giá này' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // Kiểm tra giới hạn sử dụng mỗi người dùng\r\n    if (promoCode.perUserLimit > 0 && session?.user?.email) {\r\n      const userUsageCount = promoCode.usedByUsers?.filter(\r\n        (userId: string) => userId === session.user.email\r\n      ).length || 0;\r\n\r\n      if (userUsageCount >= promoCode.perUserLimit) {\r\n        return NextResponse.json(\r\n          { ok: false, message: 'Bạn đã sử dụng hết số lần cho phép của mã giảm giá này' },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Tính toán số tiền giảm giá\r\n    let discountAmount = 0;\r\n    if (promoCode.promoType === 'fixed') {\r\n      discountAmount = promoCode.value;\r\n    } else if (promoCode.promoType === 'percentage') {\r\n      discountAmount = (totalAmount * promoCode.value) / 100;\r\n      if (promoCode.maxAmount && discountAmount > promoCode.maxAmount) {\r\n        discountAmount = promoCode.maxAmount;\r\n      }\r\n    }\r\n\r\n    // Kiểm tra số tiền giảm giá không vượt quá tổng tiền\r\n    if (discountAmount > totalAmount) {\r\n      discountAmount = totalAmount;\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      discountAmount,\r\n      promoCode: {\r\n        id: promoCode._id.toString(),\r\n        code: promoCode.code,\r\n        type: promoCode.promoType,\r\n        value: promoCode.value,\r\n        maxAmount: promoCode.maxAmount,\r\n        isLoginRequired: promoCode.isLoginRequired,\r\n        perUserLimit: promoCode.perUserLimit,\r\n        expiryDate: promoCode.expiryDate\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error applying promo code:', error);\r\n    return NextResponse.json(\r\n      { ok: false, message: 'Có lỗi xảy ra khi áp dụng mã giảm giá' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}