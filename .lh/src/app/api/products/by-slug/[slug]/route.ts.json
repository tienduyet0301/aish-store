{
    "sourceFile": "src/app/api/products/by-slug/[slug]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1747126664321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747282029411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n ) {\r\n   try {\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aishh\");\r\n-    const { slug } = params;\r\n+    const slug = params.slug;\r\n \r\n     const product = await db\r\n       .collection(\"products\")\r\n       .findOne({ slug: slug });\r\n@@ -37,9 +37,9 @@\n     });\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to fetch product\" },\r\n+      { ok: false, error: \"Internal server error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747282080014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n ) {\r\n   try {\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aishh\");\r\n-    const slug = params.slug;\r\n+    const { slug } = params;\r\n \r\n     const product = await db\r\n       .collection(\"products\")\r\n       .findOne({ slug: slug });\r\n@@ -37,9 +37,9 @@\n     });\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Internal server error\" },\r\n+      { ok: false, error: \"Failed to fetch product\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747282105635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,14 @@\n \r\n // GET /api/products/by-slug/[slug] - Lấy thông tin sản phẩm theo slug\r\n export async function GET(\r\n   request: Request,\r\n-  { params }: { params: { slug: string } }\r\n+  context: { params: { slug: string } }\r\n ) {\r\n   try {\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aishh\");\r\n-    const { slug } = params;\r\n+    const slug = await context.params.slug;\r\n \r\n     const product = await db\r\n       .collection(\"products\")\r\n       .findOne({ slug: slug });\r\n"
                },
                {
                    "date": 1747282405749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n ) {\r\n   try {\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aishh\");\r\n-    const slug = await context.params.slug;\r\n+    const slug = context.params.slug;\r\n \r\n     const product = await db\r\n       .collection(\"products\")\r\n       .findOne({ slug: slug });\r\n"
                },
                {
                    "date": 1747634081502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,33 @@\n-import { NextResponse } from \"next/server\";\r\n-import clientPromise from \"@/lib/mongodb\";\r\n-import { createSlug } from \"@/lib/utils\";\r\n+import { NextResponse, NextRequest } from \"next/server\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n+import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-// GET /api/products/by-slug/[slug] - Lấy thông tin sản phẩm theo slug\r\n+// GET product by slug\r\n export async function GET(\r\n-  request: Request,\r\n-  context: { params: { slug: string } }\r\n+  request: NextRequest,\r\n+  { params }: { params: { slug: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const slug = context.params.slug;\r\n-\r\n+    const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ slug: slug });\r\n+      .findOne({ slug: params.slug });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      product: {\r\n-        ...product,\r\n-        _id: product._id.toString(),\r\n-        images: product.images?.map((url: string) => \r\n-          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-        ) || []\r\n-      }\r\n-    });\r\n+    return NextResponse.json(product);\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to fetch product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747796664892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,18 +16,18 @@\n       .findOne({ slug: params.slug });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n+        { ok: false, error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json(product);\r\n+    return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n+      { ok: false, error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747797795053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import { NextResponse, NextRequest } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n+export const dynamic = 'force-dynamic';\r\n+\r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n // GET product by slug\r\n export async function GET(\r\n"
                },
                {
                    "date": 1747798578657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,19 @@\n   request: NextRequest,\r\n   { params }: { params: { slug: string } }\r\n ) {\r\n   try {\r\n+    console.log(\"Fetching product with slug:\", params.slug);\r\n     const { db } = await connectToDatabase();\r\n+    \r\n     const product = await db\r\n       .collection(\"products\")\r\n       .findOne({ slug: params.slug });\r\n \r\n+    console.log(\"Found product:\", product);\r\n+\r\n     if (!product) {\r\n+      console.log(\"Product not found for slug:\", params.slug);\r\n       return NextResponse.json(\r\n         { ok: false, error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n"
                },
                {
                    "date": 1748318996945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,29 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({ ok: true, product });\r\n+    // Ensure all required fields are present\r\n+    const formattedProduct = {\r\n+      ...product,\r\n+      _id: product._id.toString(),\r\n+      quantityM: product.quantityM || 0,\r\n+      quantityL: product.quantityL || 0,\r\n+      quantityXL: product.quantityXL || 0,\r\n+      quantityHat: product.quantityHat || 0,\r\n+      outOfStockM: product.quantityM === 0,\r\n+      outOfStockL: product.quantityL === 0,\r\n+      outOfStockXL: product.quantityXL === 0,\r\n+      outOfStockHat: product.quantityHat === 0,\r\n+      outOfStock: product.quantityM === 0 && product.quantityL === 0 && product.quantityXL === 0 && product.quantityHat === 0,\r\n+      sizes: product.sizes || [\"M\", \"L\", \"XL\"],\r\n+      colors: product.colors || [],\r\n+      images: product.images?.map((url: string) => \r\n+        url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n+      ) || []\r\n+    };\r\n+\r\n+    return NextResponse.json({ ok: true, product: formattedProduct });\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n       { ok: false, error: \"Internal Server Error\" },\r\n"
                },
                {
                    "date": 1748319130615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,29 +28,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Ensure all required fields are present\r\n-    const formattedProduct = {\r\n-      ...product,\r\n-      _id: product._id.toString(),\r\n-      quantityM: product.quantityM || 0,\r\n-      quantityL: product.quantityL || 0,\r\n-      quantityXL: product.quantityXL || 0,\r\n-      quantityHat: product.quantityHat || 0,\r\n-      outOfStockM: product.quantityM === 0,\r\n-      outOfStockL: product.quantityL === 0,\r\n-      outOfStockXL: product.quantityXL === 0,\r\n-      outOfStockHat: product.quantityHat === 0,\r\n-      outOfStock: product.quantityM === 0 && product.quantityL === 0 && product.quantityXL === 0 && product.quantityHat === 0,\r\n-      sizes: product.sizes || [\"M\", \"L\", \"XL\"],\r\n-      colors: product.colors || [],\r\n-      images: product.images?.map((url: string) => \r\n-        url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-      ) || []\r\n-    };\r\n-\r\n-    return NextResponse.json({ ok: true, product: formattedProduct });\r\n+    return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n       { ok: false, error: \"Internal Server Error\" },\r\n"
                }
            ],
            "date": 1747126664321,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport clientPromise from \"@/lib/mongodb\";\r\nimport { createSlug } from \"@/lib/utils\";\r\n\r\nconst DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n\r\n// GET /api/products/by-slug/[slug] - Lấy thông tin sản phẩm theo slug\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { slug: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const { slug } = params;\r\n\r\n    const product = await db\r\n      .collection(\"products\")\r\n      .findOne({ slug: slug });\r\n\r\n    if (!product) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      product: {\r\n        ...product,\r\n        _id: product._id.toString(),\r\n        images: product.images?.map((url: string) => \r\n          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n        ) || []\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to fetch product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}