{
    "sourceFile": "src/app/api/products/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746893160074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747126676657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // src/app/api/products/route.ts\n import { NextResponse } from \"next/server\";\n import { connectToDatabase } from \"@/lib/mongodb\";\n import { ObjectId } from \"mongodb\";\n+import { createSlug } from \"@/lib/utils\";\n \n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\n \n // GET /api/products - Lấy danh sách sản phẩm\n@@ -49,8 +50,18 @@\n     const sizeGuideImage = formData.get(\"sizeGuideImage\") as string;\n     const colors = JSON.parse(formData.get(\"colors\") as string || \"[]\");\n \n     const { db } = await connectToDatabase();\n+    const slug = createSlug(name);\n+    \n+    // Kiểm tra xem slug đã tồn tại chưa\n+    const existingProduct = await db.collection(\"products\").findOne({ slug });\n+    if (existingProduct) {\n+      // Nếu slug đã tồn tại, thêm timestamp vào cuối\n+      const timestamp = Date.now();\n+      slug = `${slug}-${timestamp}`;\n+    }\n+\n     const product = {\n       name,\n       description,\n       details,\n@@ -64,8 +75,9 @@\n       quantityL,\n       quantityXL,\n       quantityHat,\n       colors,\n+      slug,\n       createdAt: new Date().toISOString(),\n       updatedAt: new Date().toISOString(),\n     };\n \n"
                },
                {
                    "date": 1747126686513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     const sizeGuideImage = formData.get(\"sizeGuideImage\") as string;\n     const colors = JSON.parse(formData.get(\"colors\") as string || \"[]\");\n \n     const { db } = await connectToDatabase();\n-    const slug = createSlug(name);\n+    let slug = createSlug(name);\n     \n     // Kiểm tra xem slug đã tồn tại chưa\n     const existingProduct = await db.collection(\"products\").findOne({ slug });\n     if (existingProduct) {\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// src/app/api/products/route.ts\nimport { NextResponse } from \"next/server\";\nimport { connectToDatabase } from \"@/lib/mongodb\";\nimport { ObjectId } from \"mongodb\";\n\nconst DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\n\n// GET /api/products - Lấy danh sách sản phẩm\nexport async function GET() {\n  try {\n    console.log(\"Connecting to database...\");\n    const { db } = await connectToDatabase();\n    console.log(\"Connected to database successfully\");\n\n    console.log(\"Fetching products...\");\n    const products = await db.collection(\"products\").find({}).toArray();\n    console.log(`Found ${products.length} products`);\n\n    return NextResponse.json({ ok: true, products });\n  } catch (error: any) {\n    console.error(\"Error details:\", {\n      message: error?.message || 'Unknown error',\n      stack: error?.stack || 'No stack trace',\n      name: error?.name || 'Unknown error type'\n    });\n    return NextResponse.json(\n      { ok: false, error: \"Failed to fetch products\" },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/products - Thêm sản phẩm mới\nexport async function POST(request: Request) {\n  try {\n    const formData = await request.formData();\n    const name = formData.get(\"name\") as string;\n    const description = formData.get(\"description\") as string;\n    const details = formData.get(\"details\") as string;\n    const price = Number(formData.get(\"price\"));\n    const category = formData.get(\"category\") as string;\n    const collection = formData.get(\"collection\") as string;\n    const productCode = formData.get(\"productCode\") as string;\n    const quantityM = Number(formData.get(\"quantityM\"));\n    const quantityL = Number(formData.get(\"quantityL\"));\n    const quantityXL = Number(formData.get(\"quantityXL\"));\n    const quantityHat = Number(formData.get(\"quantityHat\"));\n    const images = JSON.parse(formData.get(\"images\") as string);\n    const sizeGuideImage = formData.get(\"sizeGuideImage\") as string;\n    const colors = JSON.parse(formData.get(\"colors\") as string || \"[]\");\n\n    const { db } = await connectToDatabase();\n    const product = {\n      name,\n      description,\n      details,\n      price,\n      category,\n      collection,\n      productCode,\n      images,\n      sizeGuideImage,\n      quantityM,\n      quantityL,\n      quantityXL,\n      quantityHat,\n      colors,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    const result = await db.collection(\"products\").insertOne(product);\n\n    return NextResponse.json({\n      ok: true,\n      product: { ...product, _id: result.insertedId },\n    });\n  } catch (error) {\n    console.error(\"Error creating product:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to create product\" },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/products/[id] - Cập nhật sản phẩm\nexport async function PUT(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get(\"id\");\n    \n    if (!id) {\n      return NextResponse.json(\n        { ok: false, error: \"Product ID is required\" },\n        { status: 400 }\n      );\n    }\n\n    const formData = await request.formData();\n    \n    const updateData: any = {\n      name: formData.get(\"name\"),\n      description: formData.get(\"description\"),\n      details: formData.get(\"details\"),\n      price: Number(formData.get(\"price\")),\n      category: formData.get(\"category\"),\n      quantityM: Number(formData.get(\"quantityM\")),\n      quantityL: Number(formData.get(\"quantityL\")),\n      quantityXL: Number(formData.get(\"quantityXL\")),\n      quantityHat: Number(formData.get(\"quantityHat\")),\n      colors: JSON.parse(formData.get(\"colors\") as string || \"[]\"),\n      updatedAt: new Date().toISOString(),\n    };\n\n    // Handle size guide image upload if exists\n    const sizeGuideImage = formData.get(\"sizeGuideImage\") as File;\n    if (sizeGuideImage) {\n      const sizeGuideFormData = new FormData();\n      sizeGuideFormData.append(\"file\", sizeGuideImage);\n      \n      const uploadResponse = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: sizeGuideFormData,\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error(\"Failed to upload size guide image\");\n      }\n\n      const uploadData = await uploadResponse.json();\n      updateData.sizeGuideImage = uploadData.url;\n    }\n\n    const { db } = await connectToDatabase();\n    const result = await db.collection(\"products\").updateOne(\n      { _id: new ObjectId(id) },\n      { $set: updateData }\n    );\n\n    if (result.matchedCount === 0) {\n      return NextResponse.json(\n        { ok: false, error: \"Product not found\" },\n        { status: 404 }\n      );\n    }\n\n    const updatedProduct = await db.collection(\"products\").findOne({\n      _id: new ObjectId(id),\n    });\n\n    return NextResponse.json({\n      ok: true,\n      product: updatedProduct,\n    });\n  } catch (error) {\n    console.error(\"Error updating product:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to update product\" },\n      { status: 500 }\n    );\n  }\n}\n\n// DELETE /api/products/[id] - Xóa sản phẩm\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const { db } = await connectToDatabase();\n    const { id } = params;\n\n    const result = await db\n      .collection(\"products\")\n      .deleteOne({ _id: new ObjectId(id) });\n\n    if (result.deletedCount === 0) {\n      return NextResponse.json(\n        { ok: false, error: \"Product not found\" },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({ ok: true });\n  } catch (error) {\n    console.error(\"Error deleting product:\", error);\n    return NextResponse.json(\n      { ok: false, error: \"Failed to delete product\" },\n      { status: 500 }\n    );\n  }\n}\n"
        }
    ]
}