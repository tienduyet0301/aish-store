{
    "sourceFile": "src/app/api/products/[id]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746893160195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747457109772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { NextResponse } from \"next/server\";\r\n-import clientPromise from \"@/lib/mongodb\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n@@ -10,37 +10,25 @@\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const { id } = params;\r\n-\r\n+    const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      product: {\r\n-        ...product,\r\n-        _id: product._id.toString(),\r\n-        images: product.images?.map((url: string) => \r\n-          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-        ) || []\r\n-      }\r\n-    });\r\n+    return NextResponse.json(product);\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to fetch product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1747457119685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,74 +38,29 @@\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const product = await request.json();\r\n-    const { id } = params;\r\n+    const { db } = await connectToDatabase();\r\n+    const body = await request.json();\r\n \r\n-    // Chuyển đổi các trường số\r\n-    const updatedProduct = {\r\n-      name: product.name,\r\n-      price: Number(product.price),\r\n-      description: product.description,\r\n-      images: product.images,\r\n-      quantityM: Number(product.quantityM),\r\n-      quantityL: Number(product.quantityL),\r\n-      quantityXL: Number(product.quantityXL),\r\n-      quantityHat: Number(product.quantityHat),\r\n-      productCode: product.productCode,\r\n-      details: product.details,\r\n-      category: product.category,\r\n-      collection: product.collection,\r\n-      colors: product.colors || [],\r\n-      updatedAt: new Date().toISOString()\r\n-    };\r\n+    const result = await db.collection(\"products\").updateOne(\r\n+      { _id: new ObjectId(params.id) },\r\n+      { $set: body }\r\n+    );\r\n \r\n-    const result = await db\r\n-      .collection(\"products\")\r\n-      .updateOne(\r\n-        { _id: new ObjectId(id) },\r\n-        { $set: updatedProduct }\r\n-      );\r\n-\r\n     if (result.matchedCount === 0) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Lấy sản phẩm đã cập nhật\r\n-    const updatedProductData = await db\r\n-      .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(id) });\r\n-\r\n-    if (!updatedProductData) {\r\n-      return NextResponse.json(\r\n-        { ok: false, error: \"Failed to fetch updated product\" },\r\n-        { status: 500 }\r\n-      );\r\n-    }\r\n-\r\n-    revalidatePath(\"/products\");\r\n-    revalidatePath(\"/admin/products\");\r\n-\r\n-    return NextResponse.json({ \r\n-      ok: true,\r\n-      product: {\r\n-        ...updatedProductData,\r\n-        _id: updatedProductData._id.toString(),\r\n-        images: updatedProductData.images?.map((url: string) => \r\n-          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-        ) || []\r\n-      }\r\n-    });\r\n+    revalidatePath(`/products/${params.id}`);\r\n+    return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to update product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n@@ -115,31 +70,26 @@\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const { id } = params;\r\n-\r\n+    const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n     revalidatePath(\"/products\");\r\n-    revalidatePath(\"/admin/products\");\r\n-\r\n-    return NextResponse.json({ ok: true });\r\n+    return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error deleting product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to delete product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\r\nimport clientPromise from \"@/lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nconst DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n\r\n// GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const { id } = params;\r\n\r\n    const product = await db\r\n      .collection(\"products\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!product) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      product: {\r\n        ...product,\r\n        _id: product._id.toString(),\r\n        images: product.images?.map((url: string) => \r\n          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n        ) || []\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to fetch product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\nexport async function PUT(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const product = await request.json();\r\n    const { id } = params;\r\n\r\n    // Chuyển đổi các trường số\r\n    const updatedProduct = {\r\n      name: product.name,\r\n      price: Number(product.price),\r\n      description: product.description,\r\n      images: product.images,\r\n      quantityM: Number(product.quantityM),\r\n      quantityL: Number(product.quantityL),\r\n      quantityXL: Number(product.quantityXL),\r\n      quantityHat: Number(product.quantityHat),\r\n      productCode: product.productCode,\r\n      details: product.details,\r\n      category: product.category,\r\n      collection: product.collection,\r\n      colors: product.colors || [],\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    const result = await db\r\n      .collection(\"products\")\r\n      .updateOne(\r\n        { _id: new ObjectId(id) },\r\n        { $set: updatedProduct }\r\n      );\r\n\r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Lấy sản phẩm đã cập nhật\r\n    const updatedProductData = await db\r\n      .collection(\"products\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!updatedProductData) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Failed to fetch updated product\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    revalidatePath(\"/products\");\r\n    revalidatePath(\"/admin/products\");\r\n\r\n    return NextResponse.json({ \r\n      ok: true,\r\n      product: {\r\n        ...updatedProductData,\r\n        _id: updatedProductData._id.toString(),\r\n        images: updatedProductData.images?.map((url: string) => \r\n          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n        ) || []\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to update product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\nexport async function DELETE(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const { id } = params;\r\n\r\n    const result = await db\r\n      .collection(\"products\")\r\n      .deleteOne({ _id: new ObjectId(id) });\r\n\r\n    if (result.deletedCount === 0) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    revalidatePath(\"/products\");\r\n    revalidatePath(\"/admin/products\");\r\n\r\n    return NextResponse.json({ ok: true });\r\n  } catch (error) {\r\n    console.error(\"Error deleting product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to delete product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}