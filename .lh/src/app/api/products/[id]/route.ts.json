{
    "sourceFile": "src/app/api/products/[id]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 78,
            "patches": [
                {
                    "date": 1746893160195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747457109772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { NextResponse } from \"next/server\";\r\n-import clientPromise from \"@/lib/mongodb\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n@@ -10,37 +10,25 @@\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const { id } = params;\r\n-\r\n+    const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      product: {\r\n-        ...product,\r\n-        _id: product._id.toString(),\r\n-        images: product.images?.map((url: string) => \r\n-          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-        ) || []\r\n-      }\r\n-    });\r\n+    return NextResponse.json(product);\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to fetch product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1747457119685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,74 +38,29 @@\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const product = await request.json();\r\n-    const { id } = params;\r\n+    const { db } = await connectToDatabase();\r\n+    const body = await request.json();\r\n \r\n-    // Chuyển đổi các trường số\r\n-    const updatedProduct = {\r\n-      name: product.name,\r\n-      price: Number(product.price),\r\n-      description: product.description,\r\n-      images: product.images,\r\n-      quantityM: Number(product.quantityM),\r\n-      quantityL: Number(product.quantityL),\r\n-      quantityXL: Number(product.quantityXL),\r\n-      quantityHat: Number(product.quantityHat),\r\n-      productCode: product.productCode,\r\n-      details: product.details,\r\n-      category: product.category,\r\n-      collection: product.collection,\r\n-      colors: product.colors || [],\r\n-      updatedAt: new Date().toISOString()\r\n-    };\r\n+    const result = await db.collection(\"products\").updateOne(\r\n+      { _id: new ObjectId(params.id) },\r\n+      { $set: body }\r\n+    );\r\n \r\n-    const result = await db\r\n-      .collection(\"products\")\r\n-      .updateOne(\r\n-        { _id: new ObjectId(id) },\r\n-        { $set: updatedProduct }\r\n-      );\r\n-\r\n     if (result.matchedCount === 0) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Lấy sản phẩm đã cập nhật\r\n-    const updatedProductData = await db\r\n-      .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(id) });\r\n-\r\n-    if (!updatedProductData) {\r\n-      return NextResponse.json(\r\n-        { ok: false, error: \"Failed to fetch updated product\" },\r\n-        { status: 500 }\r\n-      );\r\n-    }\r\n-\r\n-    revalidatePath(\"/products\");\r\n-    revalidatePath(\"/admin/products\");\r\n-\r\n-    return NextResponse.json({ \r\n-      ok: true,\r\n-      product: {\r\n-        ...updatedProductData,\r\n-        _id: updatedProductData._id.toString(),\r\n-        images: updatedProductData.images?.map((url: string) => \r\n-          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n-        ) || []\r\n-      }\r\n-    });\r\n+    revalidatePath(`/products/${params.id}`);\r\n+    return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to update product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n@@ -115,31 +70,26 @@\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const { id } = params;\r\n-\r\n+    const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Product not found\" },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n     revalidatePath(\"/products\");\r\n-    revalidatePath(\"/admin/products\");\r\n-\r\n-    return NextResponse.json({ ok: true });\r\n+    return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error deleting product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to delete product\" },\r\n+      { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747457295849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,21 @@\n-import { NextResponse } from \"next/server\";\r\n+import { NextRequest, NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n // GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\n export async function GET(\r\n-  request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  req: NextRequest,\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -34,17 +34,17 @@\n }\r\n \r\n // PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\n export async function PUT(\r\n-  request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  req: NextRequest,\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n-    const body = await request.json();\r\n+    const body = await req.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -53,9 +53,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -66,16 +66,16 @@\n }\r\n \r\n // DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\n export async function DELETE(\r\n-  request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  req: NextRequest,\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747457427439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,24 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+type RouteContext = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n // GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\n export async function GET(\r\n-  req: NextRequest,\r\n-  context: { params: { id: string } }\r\n-) {\r\n+  request: NextRequest,\r\n+  { params }: RouteContext\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -34,17 +40,17 @@\n }\r\n \r\n // PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\n export async function PUT(\r\n-  req: NextRequest,\r\n-  context: { params: { id: string } }\r\n-) {\r\n+  request: NextRequest,\r\n+  { params }: RouteContext\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n-    const body = await req.json();\r\n+    const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -53,9 +59,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -66,16 +72,16 @@\n }\r\n \r\n // DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\n export async function DELETE(\r\n-  req: NextRequest,\r\n-  context: { params: { id: string } }\r\n-) {\r\n+  request: NextRequest,\r\n+  { params }: RouteContext\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747457690303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,12 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-type RouteContext = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n // GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n@@ -41,9 +35,9 @@\n \r\n // PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n@@ -73,9 +67,9 @@\n \r\n // DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n"
                },
                {
                    "date": 1747457938478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,24 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+type RouteSegmentProps = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n // GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  props: RouteSegmentProps\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(props.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -35,16 +41,16 @@\n \r\n // PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  props: RouteSegmentProps\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(props.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -53,9 +59,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${props.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -67,15 +73,15 @@\n \r\n // DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  props: RouteSegmentProps\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(props.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747458176625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,17 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-type RouteSegmentProps = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n-// GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\n export async function GET(\r\n   request: NextRequest,\r\n-  props: RouteSegmentProps\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(props.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -38,19 +31,18 @@\n     );\r\n   }\r\n }\r\n \r\n-// PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\n export async function PUT(\r\n   request: NextRequest,\r\n-  props: RouteSegmentProps\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(props.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -59,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${props.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -70,18 +62,17 @@\n     );\r\n   }\r\n }\r\n \r\n-// DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  props: RouteSegmentProps\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(props.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747462940273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747463114198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,23 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+type RouteContext = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n export async function GET(\r\n   request: NextRequest,\r\n-  context: { params: { id: string } }\r\n+  { params }: RouteContext\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +39,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  context: { params: { id: string } }\r\n+  { params }: RouteContext\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +57,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +70,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  context: { params: { id: string } }\r\n+  { params }: RouteContext\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747468139010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,11 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-type RouteContext = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n@@ -39,9 +33,9 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n@@ -70,9 +64,9 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n"
                },
                {
                    "date": 1747468351757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+// @ts-ignore\r\n export async function GET(\r\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n@@ -31,8 +32,9 @@\n     );\r\n   }\r\n }\r\n \r\n+// @ts-ignore\r\n export async function PUT(\r\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n@@ -62,8 +64,9 @@\n     );\r\n   }\r\n }\r\n \r\n+// @ts-ignore\r\n export async function DELETE(\r\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n"
                },
                {
                    "date": 1747468517975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,12 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-// @ts-ignore\r\n export async function GET(\r\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n@@ -32,13 +31,12 @@\n     );\r\n   }\r\n }\r\n \r\n-// @ts-ignore\r\n export async function PUT(\r\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n@@ -64,13 +62,12 @@\n     );\r\n   }\r\n }\r\n \r\n-// @ts-ignore\r\n export async function DELETE(\r\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n"
                },
                {
                    "date": 1747468649060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747469455215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: NextRequest,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747626943649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-import { NextRequest, NextResponse } from \"next/server\";\r\n+import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n-  request: NextRequest,\r\n+  request: Request,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -32,9 +32,9 @@\n   }\r\n }\r\n \r\n export async function PUT(\r\n-  request: NextRequest,\r\n+  request: Request,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -63,9 +63,9 @@\n   }\r\n }\r\n \r\n export async function DELETE(\r\n-  request: NextRequest,\r\n+  request: Request,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n"
                },
                {
                    "date": 1747627269845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,23 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+type RouteContext = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n export async function GET(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  context: RouteContext\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +39,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  context: RouteContext\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +57,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +70,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  context: RouteContext\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747627494209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,17 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-type RouteContext = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n export async function GET(\r\n   request: Request,\r\n-  context: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -39,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  context: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -57,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -70,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  context: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747628076946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747628570604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747628941924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n export async function GET(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n@@ -34,9 +34,9 @@\n \r\n export async function PUT(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n@@ -65,9 +65,9 @@\n \r\n export async function DELETE(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n"
                },
                {
                    "date": 1747630601590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747630935908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n+  { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747631234754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n export async function GET(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+): Promise<Response> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n@@ -34,9 +34,9 @@\n \r\n export async function PUT(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+): Promise<Response> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n@@ -65,9 +65,9 @@\n \r\n export async function DELETE(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+): Promise<Response> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n"
                },
                {
                    "date": 1747631598631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,23 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+type RouteContext = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n export async function GET(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-): Promise<Response> {\r\n+  context: RouteContext\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +39,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-): Promise<Response> {\r\n+  context: RouteContext\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +57,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +70,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-): Promise<Response> {\r\n+  context: RouteContext\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747631887066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,17 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-type RouteContext = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n export async function GET(\r\n   request: Request,\r\n-  context: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -39,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  context: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -57,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -70,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  context: RouteContext\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747632319381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \r\n export async function GET(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n@@ -34,9 +34,9 @@\n \r\n export async function PUT(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n@@ -65,9 +65,9 @@\n \r\n export async function DELETE(\r\n   request: Request,\r\n   { params }: { params: { id: string } }\r\n-) {\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n"
                },
                {
                    "date": 1747632805231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n-import { NextResponse } from \"next/server\";\r\n+import { NextResponse, NextRequest } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n-  request: Request,\r\n+  request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -32,9 +32,9 @@\n   }\r\n }\r\n \r\n export async function PUT(\r\n-  request: Request,\r\n+  request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -63,9 +63,9 @@\n   }\r\n }\r\n \r\n export async function DELETE(\r\n-  request: Request,\r\n+  request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n"
                },
                {
                    "date": 1747633211197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,20 @@\n-import { NextResponse, NextRequest } from \"next/server\";\r\n+import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n-  request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  request: Request,\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -32,17 +32,17 @@\n   }\r\n }\r\n \r\n export async function PUT(\r\n-  request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  request: Request,\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -63,16 +63,16 @@\n   }\r\n }\r\n \r\n export async function DELETE(\r\n-  request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  request: Request,\r\n+  context: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747633484334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747633556363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n export async function GET(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-) {\r\n+  context: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -33,16 +33,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-) {\r\n+  context: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n+      { _id: new ObjectId(context.params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +51,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -64,15 +64,15 @@\n }\r\n \r\n export async function DELETE(\r\n   request: Request,\r\n-  { params }: { params: { id: string } }\r\n-) {\r\n+  context: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747633579394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,21 @@\n-import { NextResponse } from \"next/server\";\r\n+import { NextResponse, NextRequest } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+// GET product by id\r\n export async function GET(\r\n-  request: Request,\r\n-  context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  request: NextRequest,\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -31,18 +32,19 @@\n     );\r\n   }\r\n }\r\n \r\n+// UPDATE product by id\r\n export async function PUT(\r\n-  request: Request,\r\n-  context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  request: NextRequest,\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -51,9 +53,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -62,17 +64,18 @@\n     );\r\n   }\r\n }\r\n \r\n+// DELETE product by id\r\n export async function DELETE(\r\n-  request: Request,\r\n-  context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+  request: NextRequest,\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -88,5 +91,5 @@\n       { error: \"Internal Server Error\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n-} \n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1747633810245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,73 @@\n-import { NextResponse, NextRequest } from \"next/server\";\r\n+import { NextRequest, NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-// GET product by id\r\n-export async function GET(\r\n-  request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n-) {\r\n+// GET product by ID\r\n+export async function GET(req: NextRequest, context: any) {\r\n+  const { id } = context.params;\r\n+\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+      .findOne({ _id: new ObjectId(id) });\r\n \r\n     if (!product) {\r\n-      return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n-        { status: 404 }\r\n-      );\r\n+      return NextResponse.json({ error: \"Product not found\" }, { status: 404 });\r\n     }\r\n \r\n     return NextResponse.json(product);\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n-      { status: 500 }\r\n-    );\r\n+    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n   }\r\n }\r\n \r\n-// UPDATE product by id\r\n-export async function PUT(\r\n-  request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n-) {\r\n+// UPDATE product by ID\r\n+export async function PUT(req: NextRequest, context: any) {\r\n+  const { id } = context.params;\r\n+\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n-    const body = await request.json();\r\n+    const body = await req.json();\r\n \r\n-    const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n-      { $set: body }\r\n-    );\r\n+    const result = await db\r\n+      .collection(\"products\")\r\n+      .updateOne({ _id: new ObjectId(id) }, { $set: body });\r\n \r\n     if (result.matchedCount === 0) {\r\n-      return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n-        { status: 404 }\r\n-      );\r\n+      return NextResponse.json({ error: \"Product not found\" }, { status: 404 });\r\n     }\r\n \r\n-    revalidatePath(`/products/${params.id}`);\r\n+    revalidatePath(`/products/${id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n-      { status: 500 }\r\n-    );\r\n+    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n   }\r\n }\r\n \r\n-// DELETE product by id\r\n-export async function DELETE(\r\n-  request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n-) {\r\n+// DELETE product by ID\r\n+export async function DELETE(req: NextRequest, context: any) {\r\n+  const { id } = context.params;\r\n+\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+      .deleteOne({ _id: new ObjectId(id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n-      return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n-        { status: 404 }\r\n-      );\r\n+      return NextResponse.json({ error: \"Product not found\" }, { status: 404 });\r\n     }\r\n \r\n     revalidatePath(\"/products\");\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error deleting product:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n-      { status: 500 }\r\n-    );\r\n+    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1747634047004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,73 +1,92 @@\n-import { NextRequest, NextResponse } from \"next/server\";\r\n+import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n-// GET product by ID\r\n-export async function GET(req: NextRequest, context: any) {\r\n-  const { id } = context.params;\r\n-\r\n+export async function GET(\r\n+  request: Request,\r\n+  context: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(id) });\r\n+      .findOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (!product) {\r\n-      return NextResponse.json({ error: \"Product not found\" }, { status: 404 });\r\n+      return NextResponse.json(\r\n+        { error: \"Product not found\" },\r\n+        { status: 404 }\r\n+      );\r\n     }\r\n \r\n     return NextResponse.json(product);\r\n   } catch (error) {\r\n     console.error(\"Error fetching product:\", error);\r\n-    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n+    return NextResponse.json(\r\n+      { error: \"Internal Server Error\" },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n }\r\n \r\n-// UPDATE product by ID\r\n-export async function PUT(req: NextRequest, context: any) {\r\n-  const { id } = context.params;\r\n-\r\n+export async function PUT(\r\n+  request: Request,\r\n+  context: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n-    const body = await req.json();\r\n+    const body = await request.json();\r\n \r\n-    const result = await db\r\n-      .collection(\"products\")\r\n-      .updateOne({ _id: new ObjectId(id) }, { $set: body });\r\n+    const result = await db.collection(\"products\").updateOne(\r\n+      { _id: new ObjectId(context.params.id) },\r\n+      { $set: body }\r\n+    );\r\n \r\n     if (result.matchedCount === 0) {\r\n-      return NextResponse.json({ error: \"Product not found\" }, { status: 404 });\r\n+      return NextResponse.json(\r\n+        { error: \"Product not found\" },\r\n+        { status: 404 }\r\n+      );\r\n     }\r\n \r\n-    revalidatePath(`/products/${id}`);\r\n+    revalidatePath(`/products/${context.params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n-    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n+    return NextResponse.json(\r\n+      { error: \"Internal Server Error\" },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n }\r\n \r\n-// DELETE product by ID\r\n-export async function DELETE(req: NextRequest, context: any) {\r\n-  const { id } = context.params;\r\n-\r\n+export async function DELETE(\r\n+  request: Request,\r\n+  context: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(id) });\r\n+      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n-      return NextResponse.json({ error: \"Product not found\" }, { status: 404 });\r\n+      return NextResponse.json(\r\n+        { error: \"Product not found\" },\r\n+        { status: 404 }\r\n+      );\r\n     }\r\n \r\n     revalidatePath(\"/products\");\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error deleting product:\", error);\r\n-    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n+    return NextResponse.json(\r\n+      { error: \"Internal Server Error\" },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n-}\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747634363575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,13 @@\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n+// GET product by id\r\n export async function GET(\r\n   request: Request,\r\n   context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n@@ -31,12 +32,13 @@\n     );\r\n   }\r\n }\r\n \r\n+// UPDATE product by id\r\n export async function PUT(\r\n   request: Request,\r\n   context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n@@ -62,12 +64,13 @@\n     );\r\n   }\r\n }\r\n \r\n+// DELETE product by id\r\n export async function DELETE(\r\n   request: Request,\r\n   context: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n"
                },
                {
                    "date": 1747634980743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,21 @@\n-import { NextResponse } from \"next/server\";\r\n+import { NextRequest, NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n // GET product by id\r\n export async function GET(\r\n-  request: Request,\r\n-  context: { params: { id: string } }\r\n-) {\r\n+  request: NextRequest,\r\n+  { params }: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const product = await db\r\n       .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(context.params.id) });\r\n+      .findOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n@@ -34,17 +34,17 @@\n }\r\n \r\n // UPDATE product by id\r\n export async function PUT(\r\n-  request: Request,\r\n-  context: { params: { id: string } }\r\n-) {\r\n+  request: NextRequest,\r\n+  { params }: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n \r\n     const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(context.params.id) },\r\n+      { _id: new ObjectId(params.id) },\r\n       { $set: body }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n@@ -53,9 +53,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    revalidatePath(`/products/${context.params.id}`);\r\n+    revalidatePath(`/products/${params.id}`);\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n@@ -66,16 +66,16 @@\n }\r\n \r\n // DELETE product by id\r\n export async function DELETE(\r\n-  request: Request,\r\n-  context: { params: { id: string } }\r\n-) {\r\n+  request: NextRequest,\r\n+  { params }: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const result = await db\r\n       .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(context.params.id) });\r\n+      .deleteOne({ _id: new ObjectId(params.id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       return NextResponse.json(\r\n         { error: \"Product not found\" },\r\n"
                },
                {
                    "date": 1747635272302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-import { NextRequest, NextResponse } from \"next/server\";\r\n+import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n \r\n // GET product by id\r\n export async function GET(\r\n-  request: NextRequest,\r\n+  request: Request,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -34,9 +34,9 @@\n }\r\n \r\n // UPDATE product by id\r\n export async function PUT(\r\n-  request: NextRequest,\r\n+  request: Request,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -66,9 +66,9 @@\n }\r\n \r\n // DELETE product by id\r\n export async function DELETE(\r\n-  request: NextRequest,\r\n+  request: Request,\r\n   { params }: { params: { id: string } }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n"
                },
                {
                    "date": 1747635553679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,109 @@\n-import { NextResponse } from \"next/server\";\r\n-import { connectToDatabase } from \"@/lib/mongodb\";\r\n-import { ObjectId } from \"mongodb\";\r\n-import { revalidatePath } from \"next/cache\";\r\n+import { NextRequest, NextResponse } from 'next/server';\r\n+import { prisma } from '@/lib/prisma';\r\n \r\n-const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n-\r\n-// GET product by id\r\n export async function GET(\r\n-  request: Request,\r\n+  request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n-    const product = await db\r\n-      .collection(\"products\")\r\n-      .findOne({ _id: new ObjectId(params.id) });\r\n+    const product = await prisma.product.findUnique({\r\n+      where: { id: params.id },\r\n+      include: {\r\n+        category: true,\r\n+        images: true,\r\n+        variants: {\r\n+          include: {\r\n+            options: true,\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n \r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n+        { error: 'Product not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n     return NextResponse.json(product);\r\n   } catch (error) {\r\n-    console.error(\"Error fetching product:\", error);\r\n+    console.error('Error fetching product:', error);\r\n     return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n+      { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n \r\n-// UPDATE product by id\r\n export async function PUT(\r\n-  request: Request,\r\n+  request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n     const body = await request.json();\r\n+    const { name, description, price, categoryId, images, variants } = body;\r\n \r\n-    const result = await db.collection(\"products\").updateOne(\r\n-      { _id: new ObjectId(params.id) },\r\n-      { $set: body }\r\n-    );\r\n+    const product = await prisma.product.update({\r\n+      where: { id: params.id },\r\n+      data: {\r\n+        name,\r\n+        description,\r\n+        price,\r\n+        categoryId,\r\n+        images: {\r\n+          deleteMany: {},\r\n+          create: images.map((url: string) => ({ url })),\r\n+        },\r\n+        variants: {\r\n+          deleteMany: {},\r\n+          create: variants.map((variant: any) => ({\r\n+            name: variant.name,\r\n+            options: {\r\n+              create: variant.options.map((option: any) => ({\r\n+                name: option.name,\r\n+                price: option.price,\r\n+              })),\r\n+            },\r\n+          })),\r\n+        },\r\n+      },\r\n+      include: {\r\n+        category: true,\r\n+        images: true,\r\n+        variants: {\r\n+          include: {\r\n+            options: true,\r\n+          },\r\n+        },\r\n+      },\r\n+    });\r\n \r\n-    if (result.matchedCount === 0) {\r\n-      return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n-\r\n-    revalidatePath(`/products/${params.id}`);\r\n-    return NextResponse.json({ success: true });\r\n+    return NextResponse.json(product);\r\n   } catch (error) {\r\n-    console.error(\"Error updating product:\", error);\r\n+    console.error('Error updating product:', error);\r\n     return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n+      { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n \r\n-// DELETE product by id\r\n export async function DELETE(\r\n-  request: Request,\r\n+  request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n-): Promise<NextResponse> {\r\n+) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n-    const result = await db\r\n-      .collection(\"products\")\r\n-      .deleteOne({ _id: new ObjectId(params.id) });\r\n+    await prisma.product.delete({\r\n+      where: { id: params.id },\r\n+    });\r\n \r\n-    if (result.deletedCount === 0) {\r\n-      return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n-\r\n-    revalidatePath(\"/products\");\r\n-    return NextResponse.json({ success: true });\r\n+    return NextResponse.json({ message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n-    console.error(\"Error deleting product:\", error);\r\n+    console.error('Error deleting product:', error);\r\n     return NextResponse.json(\r\n-      { error: \"Internal Server Error\" },\r\n+      { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747635845621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,20 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n \r\n+type RouteContext = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: RouteContext\r\n ) {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: params.id },\r\n+      where: { id: context.params.id },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -37,16 +43,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: RouteContext\r\n ) {\r\n   try {\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: params.id },\r\n+      where: { id: context.params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n@@ -90,13 +96,13 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  context: RouteContext\r\n ) {\r\n   try {\r\n     await prisma.product.delete({\r\n-      where: { id: params.id },\r\n+      where: { id: context.params.id },\r\n     });\r\n \r\n     return NextResponse.json({ message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747636074671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,14 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n \r\n-type RouteContext = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n export async function GET(\r\n   request: NextRequest,\r\n-  context: RouteContext\r\n-) {\r\n+  { params }: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: context.params.id },\r\n+      where: { id: params.id },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -43,16 +37,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  context: RouteContext\r\n-) {\r\n+  { params }: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: context.params.id },\r\n+      where: { id: params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n@@ -96,13 +90,13 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  context: RouteContext\r\n-) {\r\n+  { params }: { params: { id: string } }\r\n+): Promise<NextResponse> {\r\n   try {\r\n     await prisma.product.delete({\r\n-      where: { id: context.params.id },\r\n+      where: { id: params.id },\r\n     });\r\n \r\n     return NextResponse.json({ message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747636209118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,14 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n \r\n+interface RouteParams {\r\n+  id: string;\r\n+}\r\n+\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  { params }: { params: RouteParams }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n       where: { id: params.id },\r\n@@ -37,9 +41,9 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  { params }: { params: RouteParams }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n@@ -90,9 +94,9 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  { params }: { params: RouteParams }\r\n ): Promise<NextResponse> {\r\n   try {\r\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n"
                },
                {
                    "date": 1747636417069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,11 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n \r\n-interface RouteParams {\r\n-  id: string;\r\n-}\r\n-\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: RouteParams }\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n       where: { id: params.id },\r\n       include: {\r\n@@ -41,10 +37,10 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: RouteParams }\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n \r\n@@ -94,10 +90,10 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: RouteParams }\r\n-): Promise<NextResponse> {\r\n+  { params }: { params: { id: string } }\r\n+) {\r\n   try {\r\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n     });\r\n"
                },
                {
                    "date": 1747636861219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,20 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n \r\n+type Props = {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+};\r\n+\r\n export async function GET(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  props: Props\r\n ) {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: params.id },\r\n+      where: { id: props.params.id },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -37,16 +43,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  props: Props\r\n ) {\r\n   try {\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: params.id },\r\n+      where: { id: props.params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n@@ -90,13 +96,13 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  { params }: { params: { id: string } }\r\n+  props: Props\r\n ) {\r\n   try {\r\n     await prisma.product.delete({\r\n-      where: { id: params.id },\r\n+      where: { id: props.params.id },\r\n     });\r\n \r\n     return NextResponse.json({ message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747640329708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n     id: string;\r\n   };\r\n };\r\n \r\n+export const dynamic = 'force-dynamic';\r\n+\r\n export async function GET(\r\n   request: NextRequest,\r\n   props: Props\r\n ) {\r\n"
                },
                {
                    "date": 1747641044627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,12 @@\n };\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n+export async function generateStaticParams() {\r\n+  return [];\r\n+}\r\n+\r\n export async function GET(\r\n   request: NextRequest,\r\n   props: Props\r\n ) {\r\n"
                },
                {
                    "date": 1747641556469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n+import { getServerSession } from 'next-auth';\r\n+import { authOptions } from '@/lib/auth';\r\n \r\n type Props = {\r\n   params: {\r\n     id: string;\r\n"
                },
                {
                    "date": 1747641573311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,20 @@\n import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n+export const dynamic = 'force-dynamic';\r\n+\r\n+export async function generateStaticParams() {\r\n+  return [];\r\n+}\r\n+\r\n type Props = {\r\n   params: {\r\n     id: string;\r\n   };\r\n };\r\n \r\n-export const dynamic = 'force-dynamic';\r\n-\r\n-export async function generateStaticParams() {\r\n-  return [];\r\n-}\r\n-\r\n export async function GET(\r\n   request: NextRequest,\r\n   props: Props\r\n ) {\r\n"
                },
                {
                    "date": 1747641795267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,27 +2,22 @@\n import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n+export const runtime = 'edge';\r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n   return [];\r\n }\r\n \r\n-type Props = {\r\n-  params: {\r\n-    id: string;\r\n-  };\r\n-};\r\n-\r\n export async function GET(\r\n   request: NextRequest,\r\n-  props: Props\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: props.params.id },\r\n+      where: { id: params.id },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -51,16 +46,16 @@\n }\r\n \r\n export async function PUT(\r\n   request: NextRequest,\r\n-  props: Props\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: props.params.id },\r\n+      where: { id: params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n@@ -104,13 +99,13 @@\n }\r\n \r\n export async function DELETE(\r\n   request: NextRequest,\r\n-  props: Props\r\n+  { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     await prisma.product.delete({\r\n-      where: { id: props.params.id },\r\n+      where: { id: params.id },\r\n     });\r\n \r\n     return NextResponse.json({ message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747726311442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,13 +102,21 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    const session = await getServerSession(authOptions);\r\n+    if (!session || session.user.role !== 'ADMIN') {\r\n+      return NextResponse.json(\r\n+        { error: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n+    }\r\n+\r\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n     });\r\n \r\n-    return NextResponse.json({ message: 'Product deleted successfully' });\r\n+    return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n"
                },
                {
                    "date": 1747726374856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n-export const runtime = 'edge';\r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n   return [];\r\n@@ -49,8 +48,16 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    const session = await getServerSession(authOptions);\r\n+    if (!session || session.user?.role !== 'ADMIN') {\r\n+      return NextResponse.json(\r\n+        { error: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n+    }\r\n+\r\n     const body = await request.json();\r\n     const { name, description, price, categoryId, images, variants } = body;\r\n \r\n     const product = await prisma.product.update({\r\n@@ -87,9 +94,9 @@\n         },\r\n       },\r\n     });\r\n \r\n-    return NextResponse.json(product);\r\n+    return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n     console.error('Error updating product:', error);\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n@@ -103,9 +110,9 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n-    if (!session || session.user.role !== 'ADMIN') {\r\n+    if (!session || session.user?.role !== 'ADMIN') {\r\n       return NextResponse.json(\r\n         { error: 'Unauthorized' },\r\n         { status: 401 }\r\n       );\r\n"
                },
                {
                    "date": 1747726646354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,16 +109,8 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const session = await getServerSession(authOptions);\r\n-    if (!session || session.user?.role !== 'ADMIN') {\r\n-      return NextResponse.json(\r\n-        { error: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n-    }\r\n-\r\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n     });\r\n \r\n"
                },
                {
                    "date": 1747726663379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,52 +48,45 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const session = await getServerSession(authOptions);\r\n-    if (!session || session.user?.role !== 'ADMIN') {\r\n-      return NextResponse.json(\r\n-        { error: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n-    }\r\n-\r\n     const body = await request.json();\r\n-    const { name, description, price, categoryId, images, variants } = body;\r\n+    // Lấy các trường cơ bản từ body\r\n+    const {\r\n+      name,\r\n+      description,\r\n+      price,\r\n+      category,\r\n+      collection,\r\n+      productCode,\r\n+      details,\r\n+      images,\r\n+      quantityM,\r\n+      quantityL,\r\n+      quantityXL,\r\n+      quantityHat,\r\n+      sizeGuideImage,\r\n+      colors\r\n+    } = body;\r\n \r\n     const product = await prisma.product.update({\r\n       where: { id: params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n-        categoryId,\r\n-        images: {\r\n-          deleteMany: {},\r\n-          create: images.map((url: string) => ({ url })),\r\n-        },\r\n-        variants: {\r\n-          deleteMany: {},\r\n-          create: variants.map((variant: any) => ({\r\n-            name: variant.name,\r\n-            options: {\r\n-              create: variant.options.map((option: any) => ({\r\n-                name: option.name,\r\n-                price: option.price,\r\n-              })),\r\n-            },\r\n-          })),\r\n-        },\r\n+        category,\r\n+        collection,\r\n+        productCode,\r\n+        details,\r\n+        images,\r\n+        quantityM,\r\n+        quantityL,\r\n+        quantityXL,\r\n+        quantityHat,\r\n+        sizeGuideImage,\r\n+        colors\r\n       },\r\n-      include: {\r\n-        category: true,\r\n-        images: true,\r\n-        variants: {\r\n-          include: {\r\n-            options: true,\r\n-          },\r\n-        },\r\n-      },\r\n     });\r\n \r\n     return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747726799303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,44 +49,27 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const body = await request.json();\r\n-    // Lấy các trường cơ bản từ body\r\n-    const {\r\n-      name,\r\n-      description,\r\n-      price,\r\n-      category,\r\n-      collection,\r\n-      productCode,\r\n-      details,\r\n-      images,\r\n-      quantityM,\r\n-      quantityL,\r\n-      quantityXL,\r\n-      quantityHat,\r\n-      sizeGuideImage,\r\n-      colors\r\n-    } = body;\r\n+    const { name, description, price, categoryId } = body;\r\n \r\n     const product = await prisma.product.update({\r\n       where: { id: params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n-        category,\r\n-        collection,\r\n-        productCode,\r\n-        details,\r\n-        images,\r\n-        quantityM,\r\n-        quantityL,\r\n-        quantityXL,\r\n-        quantityHat,\r\n-        sizeGuideImage,\r\n-        colors\r\n+        categoryId,\r\n       },\r\n+      include: {\r\n+        category: true,\r\n+        images: true,\r\n+        variants: {\r\n+          include: {\r\n+            options: true,\r\n+          },\r\n+        },\r\n+      },\r\n     });\r\n \r\n     return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n"
                },
                {
                    "date": 1747726837306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,17 +49,45 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const body = await request.json();\r\n-    const { name, description, price, categoryId } = body;\r\n+    const {\r\n+      name,\r\n+      description,\r\n+      price,\r\n+      categoryId,\r\n+      collection,\r\n+      productCode,\r\n+      details,\r\n+      images,\r\n+      quantityM,\r\n+      quantityL,\r\n+      quantityXL,\r\n+      quantityHat,\r\n+      sizeGuideImage,\r\n+      colors\r\n+    } = body;\r\n \r\n     const product = await prisma.product.update({\r\n       where: { id: params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n         price,\r\n         categoryId,\r\n+        collection,\r\n+        productCode,\r\n+        details,\r\n+        images: {\r\n+          deleteMany: {},\r\n+          create: images.map((url: string) => ({ url })),\r\n+        },\r\n+        quantityM,\r\n+        quantityL,\r\n+        quantityXL,\r\n+        quantityHat,\r\n+        sizeGuideImage,\r\n+        colors\r\n       },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n"
                },
                {
                    "date": 1747727865960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     const {\r\n       name,\r\n       description,\r\n       price,\r\n-      categoryId,\r\n+      category,\r\n       collection,\r\n       productCode,\r\n       details,\r\n       images,\r\n@@ -71,21 +71,23 @@\n       where: { id: params.id },\r\n       data: {\r\n         name,\r\n         description,\r\n-        price,\r\n-        categoryId,\r\n+        price: Number(price),\r\n+        category: {\r\n+          connect: { id: category }\r\n+        },\r\n         collection,\r\n         productCode,\r\n         details,\r\n         images: {\r\n           deleteMany: {},\r\n-          create: images.map((url: string) => ({ url })),\r\n+          create: images.map((url: string) => ({ url }))\r\n         },\r\n-        quantityM,\r\n-        quantityL,\r\n-        quantityXL,\r\n-        quantityHat,\r\n+        quantityM: Number(quantityM),\r\n+        quantityL: Number(quantityL),\r\n+        quantityXL: Number(quantityXL),\r\n+        quantityHat: Number(quantityHat),\r\n         sizeGuideImage,\r\n         colors\r\n       },\r\n       include: {\r\n"
                },
                {
                    "date": 1747727899537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,9 @@\n       data: {\r\n         name,\r\n         description,\r\n         price: Number(price),\r\n-        category: {\r\n-          connect: { id: category }\r\n-        },\r\n+        categoryId: category,\r\n         collection,\r\n         productCode,\r\n         details,\r\n         images: {\r\n"
                },
                {
                    "date": 1747728368581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,21 +73,21 @@\n         name,\r\n         description,\r\n         price: Number(price),\r\n         categoryId: category,\r\n-        collection,\r\n-        productCode,\r\n-        details,\r\n+        collection: collection || null,\r\n+        productCode: productCode || null,\r\n+        details: details || null,\r\n         images: {\r\n           deleteMany: {},\r\n           create: images.map((url: string) => ({ url }))\r\n         },\r\n         quantityM: Number(quantityM),\r\n         quantityL: Number(quantityL),\r\n         quantityXL: Number(quantityXL),\r\n         quantityHat: Number(quantityHat),\r\n-        sizeGuideImage,\r\n-        colors\r\n+        sizeGuideImage: sizeGuideImage || null,\r\n+        colors: colors || []\r\n       },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n"
                },
                {
                    "date": 1747728377892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,29 +66,33 @@\n       sizeGuideImage,\r\n       colors\r\n     } = body;\r\n \r\n+    const updateData: any = {\r\n+      name,\r\n+      description,\r\n+      price: Number(price),\r\n+      categoryId: category,\r\n+      images: {\r\n+        deleteMany: {},\r\n+        create: images.map((url: string) => ({ url }))\r\n+      },\r\n+      quantityM: Number(quantityM),\r\n+      quantityL: Number(quantityL),\r\n+      quantityXL: Number(quantityXL),\r\n+      quantityHat: Number(quantityHat),\r\n+    };\r\n+\r\n+    // Add optional fields only if they exist\r\n+    if (collection) updateData.collection = collection;\r\n+    if (productCode) updateData.productCode = productCode;\r\n+    if (details) updateData.details = details;\r\n+    if (sizeGuideImage) updateData.sizeGuideImage = sizeGuideImage;\r\n+    if (colors) updateData.colors = colors;\r\n+\r\n     const product = await prisma.product.update({\r\n       where: { id: params.id },\r\n-      data: {\r\n-        name,\r\n-        description,\r\n-        price: Number(price),\r\n-        categoryId: category,\r\n-        collection: collection || null,\r\n-        productCode: productCode || null,\r\n-        details: details || null,\r\n-        images: {\r\n-          deleteMany: {},\r\n-          create: images.map((url: string) => ({ url }))\r\n-        },\r\n-        quantityM: Number(quantityM),\r\n-        quantityL: Number(quantityL),\r\n-        quantityXL: Number(quantityXL),\r\n-        quantityHat: Number(quantityHat),\r\n-        sizeGuideImage: sizeGuideImage || null,\r\n-        colors: colors || []\r\n-      },\r\n+      data: updateData,\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n"
                },
                {
                    "date": 1747728989820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,10 @@\n       sizeGuideImage,\r\n       colors\r\n     } = body;\r\n \r\n+    console.log('Received update body:', body);\r\n+\r\n     const updateData: any = {\r\n       name,\r\n       description,\r\n       price: Number(price),\r\n@@ -102,8 +104,10 @@\n         },\r\n       },\r\n     });\r\n \r\n+    console.log('Prisma update result:', product);\r\n+\r\n     return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n     console.error('Error updating product:', error);\r\n     return NextResponse.json(\r\n@@ -121,8 +125,10 @@\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n     });\r\n \r\n+    console.log('Prisma delete successful for id:', params.id);\r\n+\r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1748592458865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n+import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -121,17 +122,34 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    if (!params.id) {\r\n+       return NextResponse.json(\r\n+         { error: 'Product ID is missing' },\r\n+         { status: 400 }\r\n+       );\r\n+    }\r\n+\r\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n     });\r\n \r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n+\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n+\r\n+    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n+      console.error('Prisma error P2025: Product not found.');\r\n+      return NextResponse.json(\r\n+        { error: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n+\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748592525795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n-import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -122,34 +121,17 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    if (!params.id) {\r\n-       return NextResponse.json(\r\n-         { error: 'Product ID is missing' },\r\n-         { status: 400 }\r\n-       );\r\n-    }\r\n-\r\n     await prisma.product.delete({\r\n       where: { id: params.id },\r\n     });\r\n \r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n-\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n-\r\n-    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Product not found.');\r\n-      return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n-\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748593497221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n+import { ObjectId } from 'bson';\r\n+import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -14,9 +16,9 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: params.id },\r\n+      where: { id: new ObjectId(params.id).toString() },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -91,9 +93,9 @@\n     if (sizeGuideImage) updateData.sizeGuideImage = sizeGuideImage;\r\n     if (colors) updateData.colors = colors;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: params.id },\r\n+      where: { id: new ObjectId(params.id).toString() },\r\n       data: updateData,\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n@@ -122,16 +124,23 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     await prisma.product.delete({\r\n-      where: { id: params.id },\r\n+      where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n+    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n+      console.error('Prisma error P2025: Product not found.');\r\n+      return NextResponse.json(\r\n+        { error: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748593979239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,14 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    if (!ObjectId.isValid(params.id)) {\r\n+      return NextResponse.json({ error: 'Invalid product ID format' }, { status: 400 });\r\n+    }\r\n+\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: new ObjectId(params.id).toString() },\r\n+      where: { id: params.id },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -50,8 +54,12 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    if (!ObjectId.isValid(params.id)) {\r\n+      return NextResponse.json({ error: 'Invalid product ID format' }, { status: 400 });\r\n+    }\r\n+\r\n     const body = await request.json();\r\n     const {\r\n       name,\r\n       description,\r\n@@ -85,17 +93,16 @@\n       quantityXL: Number(quantityXL),\r\n       quantityHat: Number(quantityHat),\r\n     };\r\n \r\n-    // Add optional fields only if they exist\r\n     if (collection) updateData.collection = collection;\r\n     if (productCode) updateData.productCode = productCode;\r\n     if (details) updateData.details = details;\r\n     if (sizeGuideImage) updateData.sizeGuideImage = sizeGuideImage;\r\n     if (colors) updateData.colors = colors;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: new ObjectId(params.id).toString() },\r\n+      where: { id: params.id },\r\n       data: updateData,\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n@@ -111,8 +118,15 @@\n \r\n     return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n     console.error('Error updating product:', error);\r\n+    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n+      console.error('Prisma error P2025: Record to update not found.');\r\n+      return NextResponse.json(\r\n+        { error: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n@@ -123,19 +137,23 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    if (!ObjectId.isValid(params.id)) {\r\n+      return NextResponse.json({ error: 'Invalid product ID format' }, { status: 400 });\r\n+    }\r\n+\r\n     await prisma.product.delete({\r\n-      where: { id: new ObjectId(params.id).toString() },\r\n+      where: { id: params.id },\r\n     });\r\n \r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n     if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Product not found.');\r\n+      console.error('Prisma error P2025: Product to delete not found.');\r\n       return NextResponse.json(\r\n         { error: 'Product not found' },\r\n         { status: 404 }\r\n       );\r\n"
                },
                {
                    "date": 1748594003426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,10 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    if (!ObjectId.isValid(params.id)) {\r\n-      return NextResponse.json({ error: 'Invalid product ID format' }, { status: 400 });\r\n-    }\r\n-\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: params.id },\r\n+      where: { id: new ObjectId(params.id).toString() },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -54,12 +50,8 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    if (!ObjectId.isValid(params.id)) {\r\n-      return NextResponse.json({ error: 'Invalid product ID format' }, { status: 400 });\r\n-    }\r\n-\r\n     const body = await request.json();\r\n     const {\r\n       name,\r\n       description,\r\n@@ -93,16 +85,17 @@\n       quantityXL: Number(quantityXL),\r\n       quantityHat: Number(quantityHat),\r\n     };\r\n \r\n+    // Add optional fields only if they exist\r\n     if (collection) updateData.collection = collection;\r\n     if (productCode) updateData.productCode = productCode;\r\n     if (details) updateData.details = details;\r\n     if (sizeGuideImage) updateData.sizeGuideImage = sizeGuideImage;\r\n     if (colors) updateData.colors = colors;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: params.id },\r\n+      where: { id: new ObjectId(params.id).toString() },\r\n       data: updateData,\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n@@ -118,15 +111,8 @@\n \r\n     return NextResponse.json({ ok: true, product });\r\n   } catch (error) {\r\n     console.error('Error updating product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Record to update not found.');\r\n-      return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n@@ -137,23 +123,19 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    if (!ObjectId.isValid(params.id)) {\r\n-      return NextResponse.json({ error: 'Invalid product ID format' }, { status: 400 });\r\n-    }\r\n-\r\n     await prisma.product.delete({\r\n-      where: { id: params.id },\r\n+      where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n     if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Product to delete not found.');\r\n+      console.error('Prisma error P2025: Product not found.');\r\n       return NextResponse.json(\r\n         { error: 'Product not found' },\r\n         { status: 404 }\r\n       );\r\n"
                },
                {
                    "date": 1748598648100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,9 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    console.log(`Attempting to delete product with ID: ${params.id}`);\r\n     await prisma.product.delete({\r\n       where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n@@ -132,15 +133,22 @@\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Product not found.');\r\n-      return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n-        { status: 404 }\r\n-      );\r\n+    if (error instanceof PrismaClientKnownRequestError) {\r\n+      console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n+      if (error.code === 'P2025') {\r\n+        console.error('Prisma error P2025: Product not found.');\r\n+        return NextResponse.json(\r\n+          { error: 'Product not found' },\r\n+          { status: 404 }\r\n+        );\r\n+      }\r\n+      // Handle other specific Prisma errors if needed, otherwise fall through\r\n+    } else {\r\n+      console.error('Non-Prisma error during delete:', error);\r\n     }\r\n+    \r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748598752486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,8 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    console.log(`Attempting to delete product with ID: ${params.id}`);\r\n     await prisma.product.delete({\r\n       where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n@@ -133,22 +132,15 @@\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError) {\r\n-      console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n-      if (error.code === 'P2025') {\r\n-        console.error('Prisma error P2025: Product not found.');\r\n-        return NextResponse.json(\r\n-          { error: 'Product not found' },\r\n-          { status: 404 }\r\n-        );\r\n-      }\r\n-      // Handle other specific Prisma errors if needed, otherwise fall through\r\n-    } else {\r\n-      console.error('Non-Prisma error during delete:', error);\r\n+    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n+      console.error('Prisma error P2025: Product not found.');\r\n+      return NextResponse.json(\r\n+        { error: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n     }\r\n-    \r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748598887828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,10 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    console.log(`Attempting to delete product with ID: ${params.id}`);\r\n+    console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`);\r\n     await prisma.product.delete({\r\n       where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n@@ -132,15 +134,21 @@\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Product not found.');\r\n-      return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n-        { status: 404 }\r\n-      );\r\n+    if (error instanceof PrismaClientKnownRequestError) {\r\n+      console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n+      if (error.code === 'P2025') {\r\n+        console.error('Prisma error P2025: Product not found.');\r\n+        return NextResponse.json(\r\n+          { error: 'Product not found' },\r\n+          { status: 404 }\r\n+        );\r\n+      }\r\n+    } else {\r\n+      console.error('Non-Prisma error during delete:', error);\r\n     }\r\n+    \r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748598921323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,10 +123,8 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    console.log(`Attempting to delete product with ID: ${params.id}`);\r\n-    console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`);\r\n     await prisma.product.delete({\r\n       where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n@@ -134,21 +132,15 @@\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError) {\r\n-      console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n-      if (error.code === 'P2025') {\r\n-        console.error('Prisma error P2025: Product not found.');\r\n-        return NextResponse.json(\r\n-          { error: 'Product not found' },\r\n-          { status: 404 }\r\n-        );\r\n-      }\r\n-    } else {\r\n-      console.error('Non-Prisma error during delete:', error);\r\n+    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n+      console.error('Prisma error P2025: Product not found.');\r\n+      return NextResponse.json(\r\n+        { error: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n     }\r\n-    \r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748599252927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,10 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n+    console.log(`Attempting to delete product with ID: ${params.id}`);\r\n+    console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`); // Log DATABASE_URL\r\n     await prisma.product.delete({\r\n       where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n@@ -132,15 +134,22 @@\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n     console.error('Error deleting product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError && error.code === 'P2025') {\r\n-      console.error('Prisma error P2025: Product not found.');\r\n-      return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n-        { status: 404 }\r\n-      );\r\n+    if (error instanceof PrismaClientKnownRequestError) {\r\n+      console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n+      if (error.code === 'P2025') {\r\n+        console.error('Prisma error P2025: Product not found.');\r\n+        return NextResponse.json(\r\n+          { error: 'Product not found' },\r\n+          { status: 404 }\r\n+        );\r\n+      }\r\n+      // Handle other specific Prisma errors if needed, otherwise fall through\r\n+    } else {\r\n+      console.error('Non-Prisma error during delete:', error);\r\n     }\r\n+    \r\n     return NextResponse.json(\r\n       { error: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n"
                },
                {
                    "date": 1748600373902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,13 +124,30 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     console.log(`Attempting to delete product with ID: ${params.id}`);\r\n-    console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`); // Log DATABASE_URL\r\n-    await prisma.product.delete({\r\n+    console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`);\r\n+\r\n+    // Step 1: Find the product first\r\n+    const productToDelete = await prisma.product.findUnique({\r\n       where: { id: new ObjectId(params.id).toString() },\r\n     });\r\n \r\n+    console.log('Result of findUnique before delete:', productToDelete);\r\n+\r\n+    if (!productToDelete) {\r\n+      console.error(`Product with ID ${params.id} not found by findUnique.`);\r\n+      return NextResponse.json(\r\n+        { error: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n+\r\n+    // Step 2: Delete the product if found\r\n+    await prisma.product.delete({\r\n+      where: { id: productToDelete.id }, // Use the ID from the found product\r\n+    });\r\n+\r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n     return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n   } catch (error) {\r\n@@ -138,8 +155,9 @@\n     if (error instanceof PrismaClientKnownRequestError) {\r\n       console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n       if (error.code === 'P2025') {\r\n         console.error('Prisma error P2025: Product not found.');\r\n+        // Note: This P2025 might still occur if something goes wrong *during* the delete even if findUnique worked\r\n         return NextResponse.json(\r\n           { error: 'Product not found' },\r\n           { status: 404 }\r\n         );\r\n"
                },
                {
                    "date": 1748600637573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n     const product = await prisma.product.findUnique({\r\n-      where: { id: new ObjectId(params.id).toString() },\r\n+      where: { id: params.id },\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n         variants: {\r\n@@ -93,9 +93,9 @@\n     if (sizeGuideImage) updateData.sizeGuideImage = sizeGuideImage;\r\n     if (colors) updateData.colors = colors;\r\n \r\n     const product = await prisma.product.update({\r\n-      where: { id: new ObjectId(params.id).toString() },\r\n+      where: { id: params.id },\r\n       data: updateData,\r\n       include: {\r\n         category: true,\r\n         images: true,\r\n@@ -128,9 +128,9 @@\n     console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`);\r\n \r\n     // Step 1: Find the product first\r\n     const productToDelete = await prisma.product.findUnique({\r\n-      where: { id: new ObjectId(params.id).toString() },\r\n+      where: { id: params.id },\r\n     });\r\n \r\n     console.log('Result of findUnique before delete:', productToDelete);\r\n \r\n@@ -143,9 +143,9 @@\n     }\r\n \r\n     // Step 2: Delete the product if found\r\n     await prisma.product.delete({\r\n-      where: { id: productToDelete.id }, // Use the ID from the found product\r\n+      where: { id: params.id },\r\n     });\r\n \r\n     console.log('Prisma delete successful for id:', params.id);\r\n \r\n@@ -154,9 +154,9 @@\n     console.error('Error deleting product:', error);\r\n     if (error instanceof PrismaClientKnownRequestError) {\r\n       console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n       if (error.code === 'P2025') {\r\n-        console.error('Prisma error P2025: Product not found.');\r\n+        console.error('Prisma error P2025: Product not found (during delete operation). This might happen if it was found by findUnique but removed concurrently.');\r\n         // Note: This P2025 might still occur if something goes wrong *during* the delete even if findUnique worked\r\n         return NextResponse.json(\r\n           { error: 'Product not found' },\r\n           { status: 404 }\r\n"
                },
                {
                    "date": 1748601671088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n import { NextRequest, NextResponse } from 'next/server';\r\n-import { prisma } from '@/lib/prisma';\r\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n-import { ObjectId } from 'bson';\r\n-import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import { ObjectId } from 'mongodb';\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -15,33 +14,38 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const product = await prisma.product.findUnique({\r\n-      where: { id: params.id },\r\n-      include: {\r\n-        category: true,\r\n-        images: true,\r\n-        variants: {\r\n-          include: {\r\n-            options: true,\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n+    const { db } = await connectToDatabase();\r\n+    const { id } = params;\r\n \r\n+    if (!id) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Product ID is required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const product = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n+\r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n+        { ok: false, message: 'Product not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json(product);\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      product: {\r\n+        ...product,\r\n+        _id: product._id.toString()\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n     console.error('Error fetching product:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Internal server error' },\r\n+      { ok: false, message: 'Failed to fetch product' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n@@ -50,71 +54,47 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const body = await request.json();\r\n-    const {\r\n-      name,\r\n-      description,\r\n-      price,\r\n-      category,\r\n-      collection,\r\n-      productCode,\r\n-      details,\r\n-      images,\r\n-      quantityM,\r\n-      quantityL,\r\n-      quantityXL,\r\n-      quantityHat,\r\n-      sizeGuideImage,\r\n-      colors\r\n-    } = body;\r\n+    const { db } = await connectToDatabase();\r\n+    const { id } = params;\r\n+    const productData = await request.json();\r\n \r\n-    console.log('Received update body:', body);\r\n+    if (!id) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Product ID is required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n \r\n     const updateData: any = {\r\n-      name,\r\n-      description,\r\n-      price: Number(price),\r\n-      categoryId: category,\r\n-      images: {\r\n-        deleteMany: {},\r\n-        create: images.map((url: string) => ({ url }))\r\n-      },\r\n-      quantityM: Number(quantityM),\r\n-      quantityL: Number(quantityL),\r\n-      quantityXL: Number(quantityXL),\r\n-      quantityHat: Number(quantityHat),\r\n+      ...productData,\r\n+      updatedAt: new Date().toISOString(),\r\n     };\r\n \r\n-    // Add optional fields only if they exist\r\n-    if (collection) updateData.collection = collection;\r\n-    if (productCode) updateData.productCode = productCode;\r\n-    if (details) updateData.details = details;\r\n-    if (sizeGuideImage) updateData.sizeGuideImage = sizeGuideImage;\r\n-    if (colors) updateData.colors = colors;\r\n+    const result = await db.collection('products').updateOne(\r\n+      { _id: new ObjectId(id) },\r\n+      { $set: updateData }\r\n+    );\r\n \r\n-    const product = await prisma.product.update({\r\n-      where: { id: params.id },\r\n-      data: updateData,\r\n-      include: {\r\n-        category: true,\r\n-        images: true,\r\n-        variants: {\r\n-          include: {\r\n-            options: true,\r\n-          },\r\n-        },\r\n-      },\r\n-    });\r\n+    if (result.matchedCount === 0) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Product not found' },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n \r\n-    console.log('Prisma update result:', product);\r\n+    const updatedProduct = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n \r\n-    return NextResponse.json({ ok: true, product });\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      message: 'Product updated successfully',\r\n+      product: updatedProduct ? { ...updatedProduct, _id: updatedProduct._id.toString() } : null\r\n+    });\r\n   } catch (error) {\r\n     console.error('Error updating product:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Internal server error' },\r\n+      { ok: false, message: 'Failed to update product' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n@@ -123,53 +103,41 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    console.log(`Attempting to delete product with ID: ${params.id}`);\r\n-    console.log(`Prisma DATABASE_URL: ${process.env.DATABASE_URL}`);\r\n+    const { db } = await connectToDatabase();\r\n+    const { id } = params;\r\n \r\n-    // Step 1: Find the product first\r\n-    const productToDelete = await prisma.product.findUnique({\r\n-      where: { id: params.id },\r\n-    });\r\n-\r\n-    console.log('Result of findUnique before delete:', productToDelete);\r\n-\r\n-    if (!productToDelete) {\r\n-      console.error(`Product with ID ${params.id} not found by findUnique.`);\r\n+    if (!id) {\r\n       return NextResponse.json(\r\n-        { error: 'Product not found' },\r\n-        { status: 404 }\r\n+        { ok: false, message: 'Product ID is required' },\r\n+        { status: 400 }\r\n       );\r\n     }\r\n \r\n-    // Step 2: Delete the product if found\r\n-    await prisma.product.delete({\r\n-      where: { id: params.id },\r\n-    });\r\n+    const result = await db.collection('products').deleteOne({ _id: new ObjectId(id) });\r\n \r\n-    console.log('Prisma delete successful for id:', params.id);\r\n-\r\n-    return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n-  } catch (error) {\r\n-    console.error('Error deleting product:', error);\r\n-    if (error instanceof PrismaClientKnownRequestError) {\r\n-      console.error('Prisma Client Known Request Error:', error.code, error.message, error.meta);\r\n-      if (error.code === 'P2025') {\r\n-        console.error('Prisma error P2025: Product not found (during delete operation). This might happen if it was found by findUnique but removed concurrently.');\r\n-        // Note: This P2025 might still occur if something goes wrong *during* the delete even if findUnique worked\r\n+    if (result.deletedCount === 0) {\r\n+      const checkExist = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n+      if (!checkExist) {\r\n         return NextResponse.json(\r\n-          { error: 'Product not found' },\r\n+          { ok: false, message: 'Product not found' },\r\n           { status: 404 }\r\n         );\r\n+      } else {\r\n+        console.error(`Delete failed for product ${id} but it still exists.`);\r\n+        return NextResponse.json(\r\n+          { ok: false, message: 'Failed to delete product' },\r\n+          { status: 500 }\r\n+        );\r\n       }\r\n-      // Handle other specific Prisma errors if needed, otherwise fall through\r\n-    } else {\r\n-      console.error('Non-Prisma error during delete:', error);\r\n     }\r\n-    \r\n+\r\n+    return NextResponse.json({ ok: true, message: 'Product deleted successfully' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting product:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Internal server error' },\r\n+      { ok: false, message: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748619004826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,12 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { ObjectId } from 'mongodb';\r\n+import { PrismaClient } from '@prisma/client';\r\n \r\n+const prisma = new PrismaClient();\r\n+\r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n   return [];\r\n@@ -113,8 +116,21 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n+    console.log(`Attempting to find product with ID: ${id}`);\r\n+    const productToFind = await prisma.product.findUnique({\r\n+      where: {\r\n+        id: id,\r\n+      },\r\n+    });\r\n+\r\n+    if (productToFind) {\r\n+      console.log('Product found before delete:', productToFind);\r\n+    } else {\r\n+      console.log('Product NOT found before delete with ID:', id);\r\n+    }\r\n+\r\n     const result = await db.collection('products').deleteOne({ _id: new ObjectId(id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       const checkExist = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n"
                },
                {
                    "date": 1748619031716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,9 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { ObjectId } from 'mongodb';\r\n-import { PrismaClient } from '@prisma/client';\r\n \r\n-const prisma = new PrismaClient();\r\n-\r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n   return [];\r\n@@ -116,21 +113,8 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n-    console.log(`Attempting to find product with ID: ${id}`);\r\n-    const productToFind = await prisma.product.findUnique({\r\n-      where: {\r\n-        id: id,\r\n-      },\r\n-    });\r\n-\r\n-    if (productToFind) {\r\n-      console.log('Product found before delete:', productToFind);\r\n-    } else {\r\n-      console.log('Product NOT found before delete with ID:', id);\r\n-    }\r\n-\r\n     const result = await db.collection('products').deleteOne({ _id: new ObjectId(id) });\r\n \r\n     if (result.deletedCount === 0) {\r\n       const checkExist = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n"
                },
                {
                    "date": 1749534240850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { ObjectId } from 'mongodb';\r\n+import Product from \"@/models/Product\";\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -14,38 +15,35 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n-    const { id } = params;\r\n-\r\n-    if (!id) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Product ID is required' },\r\n-        { status: 400 }\r\n-      );\r\n-    }\r\n-\r\n-    const product = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n-\r\n+    await connectToDatabase();\r\n+    const product = await Product.findById(params.id);\r\n+    \r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Product not found' },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      product: {\r\n-        ...product,\r\n-        _id: product._id.toString()\r\n+    // Check if discount code is valid\r\n+    if (product.discountCode && product.discountExpiry) {\r\n+      const now = new Date();\r\n+      if (now > product.discountExpiry) {\r\n+        // Reset discount if expired\r\n+        product.discountCode = undefined;\r\n+        product.discountPercentage = 0;\r\n+        product.discountExpiry = undefined;\r\n+        await product.save();\r\n       }\r\n-    });\r\n+    }\r\n+\r\n+    return NextResponse.json(product);\r\n   } catch (error) {\r\n-    console.error('Error fetching product:', error);\r\n+    console.error(\"Error fetching product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: 'Failed to fetch product' },\r\n+      { error: \"Error fetching product\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n@@ -54,47 +52,52 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n-    const { id } = params;\r\n-    const productData = await request.json();\r\n+    await connectToDatabase();\r\n+    const body = await request.json();\r\n \r\n-    if (!id) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Product ID is required' },\r\n-        { status: 400 }\r\n-      );\r\n+    // Handle discount code update\r\n+    if (body.discountCode) {\r\n+      const product = await Product.findById(params.id);\r\n+      if (!product) {\r\n+        return NextResponse.json(\r\n+          { error: \"Product not found\" },\r\n+          { status: 404 }\r\n+        );\r\n+      }\r\n+\r\n+      // Set discount code and expiry (e.g., 7 days from now)\r\n+      const expiryDate = new Date();\r\n+      expiryDate.setDate(expiryDate.getDate() + 7);\r\n+\r\n+      product.discountCode = body.discountCode;\r\n+      product.discountPercentage = body.discountPercentage || 0;\r\n+      product.discountExpiry = expiryDate;\r\n+\r\n+      const updatedProduct = await product.save();\r\n+      return NextResponse.json(updatedProduct);\r\n     }\r\n \r\n-    const updateData: any = {\r\n-      ...productData,\r\n-      updatedAt: new Date().toISOString(),\r\n-    };\r\n-\r\n-    const result = await db.collection('products').updateOne(\r\n-      { _id: new ObjectId(id) },\r\n-      { $set: updateData }\r\n+    // Handle regular product update\r\n+    const updatedProduct = await Product.findByIdAndUpdate(\r\n+      params.id,\r\n+      { ...body, updatedAt: new Date() },\r\n+      { new: true }\r\n     );\r\n \r\n-    if (result.matchedCount === 0) {\r\n+    if (!updatedProduct) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Product not found' },\r\n+        { error: \"Product not found\" },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    const updatedProduct = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n-\r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      message: 'Product updated successfully',\r\n-      product: updatedProduct ? { ...updatedProduct, _id: updatedProduct._id.toString() } : null\r\n-    });\r\n+    return NextResponse.json(updatedProduct);\r\n   } catch (error) {\r\n-    console.error('Error updating product:', error);\r\n+    console.error(\"Error updating product:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: 'Failed to update product' },\r\n+      { error: \"Error updating product\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1749534333466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { ObjectId } from 'mongodb';\r\n-import Product from \"@/models/Product\";\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -15,35 +14,56 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    await connectToDatabase();\r\n-    const product = await Product.findById(params.id);\r\n-    \r\n+    const { db } = await connectToDatabase();\r\n+    const { id } = params;\r\n+\r\n+    if (!id) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Product ID is required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const product = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n+\r\n     if (!product) {\r\n       return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n+        { ok: false, message: 'Product not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Check if discount code is valid\r\n-    if (product.discountCode && product.discountExpiry) {\r\n+    // Check if product discount is valid\r\n+    if (product.productDiscount && product.productDiscount.isActive) {\r\n       const now = new Date();\r\n-      if (now > product.discountExpiry) {\r\n+      if (product.productDiscount.expiryDate && now > new Date(product.productDiscount.expiryDate)) {\r\n         // Reset discount if expired\r\n-        product.discountCode = undefined;\r\n-        product.discountPercentage = 0;\r\n-        product.discountExpiry = undefined;\r\n-        await product.save();\r\n+        await db.collection('products').updateOne(\r\n+          { _id: new ObjectId(id) },\r\n+          { \r\n+            $set: { \r\n+              'productDiscount.isActive': false,\r\n+              updatedAt: new Date().toISOString()\r\n+            } \r\n+          }\r\n+        );\r\n+        product.productDiscount.isActive = false;\r\n       }\r\n     }\r\n \r\n-    return NextResponse.json(product);\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      product: {\r\n+        ...product,\r\n+        _id: product._id.toString()\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n-    console.error(\"Error fetching product:\", error);\r\n+    console.error('Error fetching product:', error);\r\n     return NextResponse.json(\r\n-      { error: \"Error fetching product\" },\r\n+      { ok: false, message: 'Failed to fetch product' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n@@ -52,52 +72,68 @@\n   request: NextRequest,\r\n   { params }: { params: { id: string } }\r\n ) {\r\n   try {\r\n-    await connectToDatabase();\r\n-    const body = await request.json();\r\n+    const { db } = await connectToDatabase();\r\n+    const { id } = params;\r\n+    const productData = await request.json();\r\n \r\n-    // Handle discount code update\r\n-    if (body.discountCode) {\r\n-      const product = await Product.findById(params.id);\r\n+    if (!id) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Product ID is required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    // Handle product discount update\r\n+    if (productData.productDiscount) {\r\n+      const product = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n       if (!product) {\r\n         return NextResponse.json(\r\n-          { error: \"Product not found\" },\r\n+          { ok: false, message: 'Product not found' },\r\n           { status: 404 }\r\n         );\r\n       }\r\n \r\n-      // Set discount code and expiry (e.g., 7 days from now)\r\n-      const expiryDate = new Date();\r\n-      expiryDate.setDate(expiryDate.getDate() + 7);\r\n+      // Set expiry date if not provided (default 7 days)\r\n+      if (!productData.productDiscount.expiryDate) {\r\n+        const expiryDate = new Date();\r\n+        expiryDate.setDate(expiryDate.getDate() + 7);\r\n+        productData.productDiscount.expiryDate = expiryDate.toISOString();\r\n+      }\r\n \r\n-      product.discountCode = body.discountCode;\r\n-      product.discountPercentage = body.discountPercentage || 0;\r\n-      product.discountExpiry = expiryDate;\r\n-\r\n-      const updatedProduct = await product.save();\r\n-      return NextResponse.json(updatedProduct);\r\n+      // Ensure isActive is set\r\n+      productData.productDiscount.isActive = true;\r\n     }\r\n \r\n-    // Handle regular product update\r\n-    const updatedProduct = await Product.findByIdAndUpdate(\r\n-      params.id,\r\n-      { ...body, updatedAt: new Date() },\r\n-      { new: true }\r\n+    const updateData: any = {\r\n+      ...productData,\r\n+      updatedAt: new Date().toISOString(),\r\n+    };\r\n+\r\n+    const result = await db.collection('products').updateOne(\r\n+      { _id: new ObjectId(id) },\r\n+      { $set: updateData }\r\n     );\r\n \r\n-    if (!updatedProduct) {\r\n+    if (result.matchedCount === 0) {\r\n       return NextResponse.json(\r\n-        { error: \"Product not found\" },\r\n+        { ok: false, message: 'Product not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    return NextResponse.json(updatedProduct);\r\n+    const updatedProduct = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n+\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      message: 'Product updated successfully',\r\n+      product: updatedProduct ? { ...updatedProduct, _id: updatedProduct._id.toString() } : null\r\n+    });\r\n   } catch (error) {\r\n-    console.error(\"Error updating product:\", error);\r\n+    console.error('Error updating product:', error);\r\n     return NextResponse.json(\r\n-      { error: \"Error updating product\" },\r\n+      { ok: false, message: 'Failed to update product' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1749534377006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,26 +33,8 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Check if product discount is valid\r\n-    if (product.productDiscount && product.productDiscount.isActive) {\r\n-      const now = new Date();\r\n-      if (product.productDiscount.expiryDate && now > new Date(product.productDiscount.expiryDate)) {\r\n-        // Reset discount if expired\r\n-        await db.collection('products').updateOne(\r\n-          { _id: new ObjectId(id) },\r\n-          { \r\n-            $set: { \r\n-              'productDiscount.isActive': false,\r\n-              updatedAt: new Date().toISOString()\r\n-            } \r\n-          }\r\n-        );\r\n-        product.productDiscount.isActive = false;\r\n-      }\r\n-    }\r\n-\r\n     return NextResponse.json({\r\n       ok: true,\r\n       product: {\r\n         ...product,\r\n@@ -83,29 +65,8 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n-    // Handle product discount update\r\n-    if (productData.productDiscount) {\r\n-      const product = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n-      if (!product) {\r\n-        return NextResponse.json(\r\n-          { ok: false, message: 'Product not found' },\r\n-          { status: 404 }\r\n-        );\r\n-      }\r\n-\r\n-      // Set expiry date if not provided (default 7 days)\r\n-      if (!productData.productDiscount.expiryDate) {\r\n-        const expiryDate = new Date();\r\n-        expiryDate.setDate(expiryDate.getDate() + 7);\r\n-        productData.productDiscount.expiryDate = expiryDate.toISOString();\r\n-      }\r\n-\r\n-      // Ensure isActive is set\r\n-      productData.productDiscount.isActive = true;\r\n-    }\r\n-\r\n     const updateData: any = {\r\n       ...productData,\r\n       updatedAt: new Date().toISOString(),\r\n     };\r\n"
                },
                {
                    "date": 1749560180820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { ObjectId } from 'mongodb';\r\n+import { revalidatePath } from 'next/navigation';\r\n \r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n@@ -65,16 +66,29 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n-    const updateData: any = {\r\n-      ...productData,\r\n-      updatedAt: new Date().toISOString(),\r\n+    const updatedProduct = {\r\n+      name: productData.name,\r\n+      price: Number(productData.price),\r\n+      description: productData.description,\r\n+      images: productData.images,\r\n+      quantityM: Number(productData.quantityM),\r\n+      quantityL: Number(productData.quantityL),\r\n+      quantityXL: Number(productData.quantityXL),\r\n+      quantityHat: Number(productData.quantityHat),\r\n+      productCode: productData.productCode,\r\n+      details: productData.details,\r\n+      category: productData.category,\r\n+      collection: productData.collection,\r\n+      colors: productData.colors || [],\r\n+      discountPercent: Number(productData.discountPercent || 0),\r\n+      updatedAt: new Date().toISOString()\r\n     };\r\n \r\n     const result = await db.collection('products').updateOne(\r\n       { _id: new ObjectId(id) },\r\n-      { $set: updateData }\r\n+      { $set: updatedProduct }\r\n     );\r\n \r\n     if (result.matchedCount === 0) {\r\n       return NextResponse.json(\r\n@@ -82,14 +96,29 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    const updatedProduct = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n+    const updatedProductData = await db.collection('products').findOne({ _id: new ObjectId(id) });\r\n \r\n+    if (!updatedProductData) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Failed to fetch updated product' },\r\n+        { status: 500 }\r\n+      );\r\n+    }\r\n+\r\n+    revalidatePath(\"/products\");\r\n+    revalidatePath(\"/admin/products\");\r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n-      message: 'Product updated successfully',\r\n-      product: updatedProduct ? { ...updatedProduct, _id: updatedProduct._id.toString() } : null\r\n+      product: {\r\n+        ...updatedProductData,\r\n+        _id: updatedProductData._id.toString(),\r\n+        images: updatedProductData.images?.map((url: string) =>\r\n+          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n+        ) || []\r\n+      }\r\n     });\r\n   } catch (error) {\r\n     console.error('Error updating product:', error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1749560188845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,12 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import { ObjectId } from 'mongodb';\r\n-import { revalidatePath } from 'next/navigation';\r\n+import { revalidatePath } from 'next/cache';\r\n \r\n+const DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n+\r\n export const dynamic = 'force-dynamic';\r\n \r\n export async function generateStaticParams() {\r\n   return [];\r\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\r\nimport clientPromise from \"@/lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\";\r\nimport { revalidatePath } from \"next/cache\";\r\n\r\nconst DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\r\n\r\n// GET /api/products/[id] - Lấy thông tin sản phẩm theo ID\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const { id } = params;\r\n\r\n    const product = await db\r\n      .collection(\"products\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!product) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      product: {\r\n        ...product,\r\n        _id: product._id.toString(),\r\n        images: product.images?.map((url: string) => \r\n          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n        ) || []\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error fetching product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to fetch product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT /api/products/[id] - Cập nhật sản phẩm theo ID\r\nexport async function PUT(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const product = await request.json();\r\n    const { id } = params;\r\n\r\n    // Chuyển đổi các trường số\r\n    const updatedProduct = {\r\n      name: product.name,\r\n      price: Number(product.price),\r\n      description: product.description,\r\n      images: product.images,\r\n      quantityM: Number(product.quantityM),\r\n      quantityL: Number(product.quantityL),\r\n      quantityXL: Number(product.quantityXL),\r\n      quantityHat: Number(product.quantityHat),\r\n      productCode: product.productCode,\r\n      details: product.details,\r\n      category: product.category,\r\n      collection: product.collection,\r\n      colors: product.colors || [],\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    const result = await db\r\n      .collection(\"products\")\r\n      .updateOne(\r\n        { _id: new ObjectId(id) },\r\n        { $set: updatedProduct }\r\n      );\r\n\r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Lấy sản phẩm đã cập nhật\r\n    const updatedProductData = await db\r\n      .collection(\"products\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!updatedProductData) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Failed to fetch updated product\" },\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    revalidatePath(\"/products\");\r\n    revalidatePath(\"/admin/products\");\r\n\r\n    return NextResponse.json({ \r\n      ok: true,\r\n      product: {\r\n        ...updatedProductData,\r\n        _id: updatedProductData._id.toString(),\r\n        images: updatedProductData.images?.map((url: string) => \r\n          url.startsWith('http') ? url : `${DOMAIN}${url}`\r\n        ) || []\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to update product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE /api/products/[id] - Xóa sản phẩm theo ID\r\nexport async function DELETE(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const { id } = params;\r\n\r\n    const result = await db\r\n      .collection(\"products\")\r\n      .deleteOne({ _id: new ObjectId(id) });\r\n\r\n    if (result.deletedCount === 0) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Product not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    revalidatePath(\"/products\");\r\n    revalidatePath(\"/admin/products\");\r\n\r\n    return NextResponse.json({ ok: true });\r\n  } catch (error) {\r\n    console.error(\"Error deleting product:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to delete product\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}