{
    "sourceFile": "src/app/api/upload/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746893160441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747637369365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n // Allowed file types\r\n const ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\r\n const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\r\n \r\n-export const config = {\r\n+export const routeSegmentConfig = {\r\n   api: {\r\n     bodyParser: false,\r\n   },\r\n };\r\n"
                },
                {
                    "date": 1747637519274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,10 @@\n // Allowed file types\r\n const ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\r\n const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\r\n \r\n-export const routeSegmentConfig = {\r\n-  api: {\r\n-    bodyParser: false,\r\n-  },\r\n-};\r\n+export const dynamic = 'force-dynamic';\r\n+export const runtime = 'nodejs';\r\n \r\n export async function POST(request: Request) {\r\n   try {\r\n     console.log(\"Starting file upload...\");\r\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\r\nimport clientPromise from \"../../../../lib/mongodb\";\r\nimport formidable from \"formidable\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { ObjectId } from \"mongodb\";\r\n\r\n// Allowed file types\r\nconst ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\r\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    console.log(\"Starting file upload...\");\r\n    const formData = await request.formData();\r\n    console.log(\"FormData received:\", formData);\r\n    \r\n    const files = formData.getAll(\"files\");\r\n    console.log(\"Files from formData:\", files);\r\n    \r\n    if (!files || files.length === 0) {\r\n      console.log(\"No files found in request\");\r\n      return NextResponse.json(\r\n        { success: false, error: \"No files uploaded\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Ensure uploads directory exists\r\n    const uploadDir = path.join(process.cwd(), \"public/uploads\");\r\n    if (!fs.existsSync(uploadDir)) {\r\n      console.log(\"Creating uploads directory:\", uploadDir);\r\n      fs.mkdirSync(uploadDir, { recursive: true });\r\n    }\r\n\r\n    // Create a .gitkeep file to ensure the directory is tracked by git\r\n    const gitkeepPath = path.join(uploadDir, \".gitkeep\");\r\n    if (!fs.existsSync(gitkeepPath)) {\r\n      fs.writeFileSync(gitkeepPath, \"\");\r\n    }\r\n\r\n    const urls = await Promise.all(\r\n      files.map(async (file) => {\r\n        console.log(\"Processing file:\", file);\r\n        \r\n        if (!(file instanceof File)) {\r\n          console.error(\"Invalid file object:\", file);\r\n          return null;\r\n        }\r\n\r\n        console.log(\"File details:\", {\r\n          name: file.name,\r\n          type: file.type,\r\n          size: file.size\r\n        });\r\n\r\n        // Check file type\r\n        if (!ALLOWED_TYPES.includes(file.type)) {\r\n          console.error(`Invalid file type: ${file.type}`);\r\n          return null;\r\n        }\r\n\r\n        // Check file size\r\n        if (file.size > MAX_FILE_SIZE) {\r\n          console.error(`File too large: ${file.size} bytes`);\r\n          return null;\r\n        }\r\n        \r\n        try {\r\n          const bytes = await file.arrayBuffer();\r\n          const buffer = Buffer.from(bytes);\r\n          \r\n          // Generate a unique filename with timestamp and original extension\r\n          const timestamp = Date.now();\r\n          const originalName = file.name;\r\n          const extension = path.extname(originalName);\r\n          const fileName = `${timestamp}-${originalName}`;\r\n          const filePath = path.join(uploadDir, fileName);\r\n          \r\n          console.log(\"Saving file to:\", filePath);\r\n          await fs.promises.writeFile(filePath, buffer);\r\n          console.log(\"File saved successfully\");\r\n          \r\n          return `/uploads/${fileName}`;\r\n        } catch (error) {\r\n          console.error(\"Error saving file:\", error);\r\n          return null;\r\n        }\r\n      })\r\n    );\r\n\r\n    // Filter out any null values\r\n    const validUrls = urls.filter((url): url is string => url !== null);\r\n    console.log(\"Valid URLs:\", validUrls);\r\n\r\n    if (validUrls.length === 0) {\r\n      console.log(\"No valid files were uploaded\");\r\n      return NextResponse.json(\r\n        { success: false, error: \"No valid files were uploaded. Please ensure files are images (JPEG, PNG, WebP) and under 5MB.\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log(\"Upload completed successfully\");\r\n    return NextResponse.json({ \r\n      success: true,\r\n      urls: validUrls\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Upload error:\", error);\r\n    return NextResponse.json(\r\n      { success: false, error: \"Failed to upload files: \" + (error instanceof Error ? error.message : String(error)) },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// API để lấy hình ảnh\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const imageId = searchParams.get(\"id\");\r\n\r\n    if (!imageId) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Image ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const client = await clientPromise;\r\n    const db = client.db();\r\n    \r\n    // Convert string ID to ObjectId\r\n    const image = await db.collection(\"images\").findOne({ \r\n      _id: new ObjectId(imageId) \r\n    });\r\n\r\n    if (!image) {\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Image not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return new NextResponse(image.data, {\r\n      headers: {\r\n        \"Content-Type\": image.contentType,\r\n        \"Content-Length\": image.size.toString(),\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error getting image:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to get image: \" + (error instanceof Error ? error.message : String(error)) },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}