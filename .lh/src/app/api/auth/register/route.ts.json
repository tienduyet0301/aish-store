{
    "sourceFile": "src/app/api/auth/register/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1746961593837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747041218219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,28 +3,88 @@\n import bcrypt from \"bcryptjs\";\r\n \r\n export async function POST(request: Request) {\r\n   try {\r\n-    const { email, password, name, phone, address } = await request.json();\r\n-    if (!email || !password || !name) {\r\n-      return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\r\n+    const { email, password, name, day, month, year, receiveUpdates } = await request.json();\r\n+\r\n+    // Validate required fields\r\n+    if (!email || !password || !name || !day || !month || !year) {\r\n+      return NextResponse.json(\r\n+        { error: \"Missing required fields\" }, \r\n+        { status: 400 }\r\n+      );\r\n     }\r\n+\r\n+    // Validate email format\r\n+    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n+    if (!emailRegex.test(email)) {\r\n+      return NextResponse.json(\r\n+        { error: \"Invalid email format\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    // Validate password strength\r\n+    if (password.length < 8) {\r\n+      return NextResponse.json(\r\n+        { error: \"Password must be at least 8 characters long\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    // Validate date of birth\r\n+    const birthDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\r\n+    const today = new Date();\r\n+    const age = today.getFullYear() - birthDate.getFullYear();\r\n+    \r\n+    if (isNaN(birthDate.getTime())) {\r\n+      return NextResponse.json(\r\n+        { error: \"Invalid date of birth\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    if (age < 13) {\r\n+      return NextResponse.json(\r\n+        { error: \"You must be at least 13 years old to register\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n     const { db } = await connectToDatabase();\r\n+\r\n+    // Check if email already exists\r\n     const existing = await db.collection(\"users\").findOne({ email });\r\n     if (existing) {\r\n-      return NextResponse.json({ error: \"Email already exists\" }, { status: 409 });\r\n+      return NextResponse.json(\r\n+        { error: \"Email already exists\" },\r\n+        { status: 409 }\r\n+      );\r\n     }\r\n+\r\n+    // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    // Create user\r\n     await db.collection(\"users\").insertOne({\r\n       email,\r\n       password: hashedPassword,\r\n       name,\r\n-      phone: phone || \"\",\r\n-      address: address || \"\",\r\n+      dateOfBirth: {\r\n+        day: parseInt(day),\r\n+        month: parseInt(month),\r\n+        year: parseInt(year)\r\n+      },\r\n+      receiveUpdates: receiveUpdates || false,\r\n       createdAt: new Date(),\r\n       provider: \"credentials\"\r\n     });\r\n+\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n-    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n+    console.error('Registration error:', error);\r\n+    return NextResponse.json(\r\n+      { error: \"An error occurred during registration. Please try again.\" },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747045058611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,28 @@\n import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n \r\n+const rateLimitMap = new Map<string, { count: number, last: number }>();\r\n+const RATE_LIMIT = 5; // 5 lần\r\n+const RATE_LIMIT_WINDOW = 5 * 60 * 1000; // 5 phút\r\n+\r\n export async function POST(request: Request) {\r\n+  // Rate limit theo IP\r\n+  const ip = request.headers.get('x-forwarded-for') || 'unknown';\r\n+  const now = Date.now();\r\n+  const entry = rateLimitMap.get(ip) || { count: 0, last: now };\r\n+  if (now - entry.last > RATE_LIMIT_WINDOW) {\r\n+    entry.count = 0;\r\n+    entry.last = now;\r\n+  }\r\n+  entry.count++;\r\n+  entry.last = now;\r\n+  rateLimitMap.set(ip, entry);\r\n+  if (entry.count > RATE_LIMIT) {\r\n+    return NextResponse.json({ error: 'Too many requests, please try again later.' }, { status: 429 });\r\n+  }\r\n+\r\n   try {\r\n     const { email, password, name, day, month, year, receiveUpdates } = await request.json();\r\n \r\n     // Validate required fields\r\n"
                },
                {
                    "date": 1747045233443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n+import crypto from \"crypto\";\r\n+import nodemailer from \"nodemailer\";\r\n \r\n const rateLimitMap = new Map<string, { count: number, last: number }>();\r\n const RATE_LIMIT = 5; // 5 lần\r\n const RATE_LIMIT_WINDOW = 5 * 60 * 1000; // 5 phút\r\n@@ -82,8 +84,11 @@\n \r\n     // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n+    // Tạo token xác thực email\r\n+    const verifyToken = crypto.randomBytes(32).toString(\"hex\");\r\n+\r\n     // Create user\r\n     await db.collection(\"users\").insertOne({\r\n       email,\r\n       password: hashedPassword,\r\n@@ -94,11 +99,36 @@\n         year: parseInt(year)\r\n       },\r\n       receiveUpdates: receiveUpdates || false,\r\n       createdAt: new Date(),\r\n-      provider: \"credentials\"\r\n+      provider: \"credentials\",\r\n+      emailVerified: false,\r\n+      verifyToken,\r\n     });\r\n \r\n+    // Gửi email xác thực (cần cấu hình SMTP thực tế)\r\n+    try {\r\n+      const transporter = nodemailer.createTransport({\r\n+        host: process.env.SMTP_HOST,\r\n+        port: Number(process.env.SMTP_PORT),\r\n+        secure: false,\r\n+        auth: {\r\n+          user: process.env.SMTP_USER,\r\n+          pass: process.env.SMTP_PASS,\r\n+        },\r\n+      });\r\n+      const verifyUrl = `${process.env.NEXTAUTH_URL || \"http://localhost:3000\"}/api/auth/verify-email?token=${verifyToken}`;\r\n+      await transporter.sendMail({\r\n+        from: process.env.SMTP_FROM || 'no-reply@aish.com',\r\n+        to: email,\r\n+        subject: \"Verify your email\",\r\n+        html: `<p>Click <a href=\"${verifyUrl}\">here</a> to verify your email for AISH.</p>`\r\n+      });\r\n+    } catch (e) {\r\n+      // Nếu gửi email lỗi, vẫn trả về thành công nhưng log lỗi\r\n+      console.error(\"Send verify email error\", e);\r\n+    }\r\n+\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error('Registration error:', error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747045475708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n-import crypto from \"crypto\";\r\n-import nodemailer from \"nodemailer\";\r\n \r\n const rateLimitMap = new Map<string, { count: number, last: number }>();\r\n const RATE_LIMIT = 5; // 5 lần\r\n const RATE_LIMIT_WINDOW = 5 * 60 * 1000; // 5 phút\r\n@@ -84,11 +82,8 @@\n \r\n     // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n-    // Tạo token xác thực email\r\n-    const verifyToken = crypto.randomBytes(32).toString(\"hex\");\r\n-\r\n     // Create user\r\n     await db.collection(\"users\").insertOne({\r\n       email,\r\n       password: hashedPassword,\r\n@@ -99,36 +94,11 @@\n         year: parseInt(year)\r\n       },\r\n       receiveUpdates: receiveUpdates || false,\r\n       createdAt: new Date(),\r\n-      provider: \"credentials\",\r\n-      emailVerified: false,\r\n-      verifyToken,\r\n+      provider: \"credentials\"\r\n     });\r\n \r\n-    // Gửi email xác thực (cần cấu hình SMTP thực tế)\r\n-    try {\r\n-      const transporter = nodemailer.createTransport({\r\n-        host: process.env.SMTP_HOST,\r\n-        port: Number(process.env.SMTP_PORT),\r\n-        secure: false,\r\n-        auth: {\r\n-          user: process.env.SMTP_USER,\r\n-          pass: process.env.SMTP_PASS,\r\n-        },\r\n-      });\r\n-      const verifyUrl = `${process.env.NEXTAUTH_URL || \"http://localhost:3000\"}/api/auth/verify-email?token=${verifyToken}`;\r\n-      await transporter.sendMail({\r\n-        from: process.env.SMTP_FROM || 'no-reply@aish.com',\r\n-        to: email,\r\n-        subject: \"Verify your email\",\r\n-        html: `<p>Click <a href=\"${verifyUrl}\">here</a> to verify your email for AISH.</p>`\r\n-      });\r\n-    } catch (e) {\r\n-      // Nếu gửi email lỗi, vẫn trả về thành công nhưng log lỗi\r\n-      console.error(\"Send verify email error\", e);\r\n-    }\r\n-\r\n     return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n     console.error('Registration error:', error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747119263045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,12 @@\n     return NextResponse.json({ error: 'Too many requests, please try again later.' }, { status: 429 });\r\n   }\r\n \r\n   try {\r\n-    const { email, password, name, day, month, year, receiveUpdates } = await request.json();\r\n+    const { email, password, name, firstName, lastName, day, month, year, receiveUpdates } = await request.json();\r\n \r\n     // Validate required fields\r\n-    if (!email || !password || !name || !day || !month || !year) {\r\n+    if (!email || !password || (!name && (!firstName || !lastName)) || !day || !month || !year) {\r\n       return NextResponse.json(\r\n         { error: \"Missing required fields\" }, \r\n         { status: 400 }\r\n       );\r\n@@ -82,18 +82,26 @@\n \r\n     // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n-    // Create user\r\n+    // Tách firstName và lastName nếu chỉ có name\r\n+    let fName = firstName;\r\n+    let lName = lastName;\r\n+    if (!fName || !lName) {\r\n+      const nameParts = (name || '').trim().split(' ');\r\n+      fName = nameParts[0] || '';\r\n+      lName = nameParts.slice(1).join(' ') || '';\r\n+    }\r\n+\r\n+    // Create user với các trường ở cấp cao nhất\r\n     await db.collection(\"users\").insertOne({\r\n       email,\r\n       password: hashedPassword,\r\n-      name,\r\n-      dateOfBirth: {\r\n-        day: parseInt(day),\r\n-        month: parseInt(month),\r\n-        year: parseInt(year)\r\n-      },\r\n+      firstName: fName,\r\n+      lastName: lName,\r\n+      birthDay: day,\r\n+      birthMonth: month,\r\n+      birthYear: year,\r\n       receiveUpdates: receiveUpdates || false,\r\n       createdAt: new Date(),\r\n       provider: \"credentials\"\r\n     });\r\n"
                }
            ],
            "date": 1746961593837,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport { connectToDatabase } from \"@/lib/mongodb\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { email, password, name, phone, address } = await request.json();\r\n    if (!email || !password || !name) {\r\n      return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\r\n    }\r\n    const { db } = await connectToDatabase();\r\n    const existing = await db.collection(\"users\").findOne({ email });\r\n    if (existing) {\r\n      return NextResponse.json({ error: \"Email already exists\" }, { status: 409 });\r\n    }\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    await db.collection(\"users\").insertOne({\r\n      email,\r\n      password: hashedPassword,\r\n      name,\r\n      phone: phone || \"\",\r\n      address: address || \"\",\r\n      createdAt: new Date(),\r\n      provider: \"credentials\"\r\n    });\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n} "
        }
    ]
}