{
    "sourceFile": "src/app/api/auth/[...nextauth]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1746893159556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746904104476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,14 @@\n import NextAuth from \"next-auth\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n+import GoogleProvider from \"next-auth/providers/google\";\r\n \r\n const handler = NextAuth({\r\n   providers: [\r\n+    GoogleProvider({\r\n+      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n+    }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n         username: { label: \"Username\", type: \"text\" },\r\n@@ -23,10 +28,27 @@\n       }\r\n     })\r\n   ],\r\n   pages: {\r\n-    signIn: \"/admin/login\",\r\n+    signIn: \"/login\",\r\n   },\r\n+  callbacks: {\r\n+    async signIn({ user, account, profile }) {\r\n+      if (account?.provider === \"google\") {\r\n+        // Kiểm tra xem email có được phép đăng nhập không\r\n+        const allowedEmails = [\"test@example.com\", \"user@gmail.com\"]; // Thay thế bằng danh sách email thực tế\r\n+        if (allowedEmails.includes(user.email || \"\")) {\r\n+          return true;\r\n+        }\r\n+        return false; // Chặn đăng nhập nếu email không được phép\r\n+      }\r\n+      return true; // Cho phép đăng nhập với Credentials provider\r\n+    },\r\n+    async redirect({ url, baseUrl }) {\r\n+      // Chuyển hướng sau khi đăng nhập thành công\r\n+      return `${baseUrl}/dashboard`;\r\n+    },\r\n+  },\r\n   session: {\r\n     strategy: \"jwt\",\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n"
                },
                {
                    "date": 1746956237193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,14 @@\n   callbacks: {\r\n     async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n         // Kiểm tra xem email có được phép đăng nhập không\r\n-        const allowedEmails = [\"test@example.com\", \"user@gmail.com\"]; // Thay thế bằng danh sách email thực tế\r\n+        const allowedEmails = [\r\n+          \"test@example.com\",\r\n+          \"user@gmail.com\",\r\n+          \"dlicht02@gmail.com\",\r\n+          \"dlicht03@gmail.com\"\r\n+        ]; // Thay thế bằng danh sách email thực tế\r\n         if (allowedEmails.includes(user.email || \"\")) {\r\n           return true;\r\n         }\r\n         return false; // Chặn đăng nhập nếu email không được phép\r\n"
                },
                {
                    "date": 1746956408403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,25 +33,15 @@\n   },\r\n   callbacks: {\r\n     async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        // Kiểm tra xem email có được phép đăng nhập không\r\n-        const allowedEmails = [\r\n-          \"test@example.com\",\r\n-          \"user@gmail.com\",\r\n-          \"dlicht02@gmail.com\",\r\n-          \"dlicht03@gmail.com\"\r\n-        ]; // Thay thế bằng danh sách email thực tế\r\n-        if (allowedEmails.includes(user.email || \"\")) {\r\n-          return true;\r\n-        }\r\n-        return false; // Chặn đăng nhập nếu email không được phép\r\n+        return true; // Cho phép tất cả mọi người đăng nhập bằng Google\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async redirect({ url, baseUrl }) {\r\n       // Chuyển hướng sau khi đăng nhập thành công\r\n-      return `${baseUrl}/dashboard`;\r\n+      return `${baseUrl}/product`;\r\n     },\r\n   },\r\n   session: {\r\n     strategy: \"jwt\",\r\n"
                },
                {
                    "date": 1746956450044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async redirect({ url, baseUrl }) {\r\n       // Chuyển hướng sau khi đăng nhập thành công\r\n-      return `${baseUrl}/product`;\r\n+      return `${baseUrl}/products`;\r\n     },\r\n   },\r\n   session: {\r\n     strategy: \"jwt\",\r\n"
                },
                {
                    "date": 1746956515736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async redirect({ url, baseUrl }) {\r\n       // Chuyển hướng sau khi đăng nhập thành công\r\n-      return `${baseUrl}/products`;\r\n+      return `${baseUrl}/`;\r\n     },\r\n   },\r\n   session: {\r\n     strategy: \"jwt\",\r\n"
                },
                {
                    "date": 1746957532190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import NextAuth from \"next-auth\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import GoogleProvider from \"next-auth/providers/google\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n \r\n const handler = NextAuth({\r\n   providers: [\r\n     GoogleProvider({\r\n@@ -33,9 +34,19 @@\n   },\r\n   callbacks: {\r\n     async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        return true; // Cho phép tất cả mọi người đăng nhập bằng Google\r\n+        const { db } = await connectToDatabase();\r\n+        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+        if (!existingUser) {\r\n+          await db.collection(\"users\").insertOne({\r\n+            name: user.name,\r\n+            email: user.email,\r\n+            provider: \"google\",\r\n+            createdAt: new Date(),\r\n+          });\r\n+        }\r\n+        return true;\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async redirect({ url, baseUrl }) {\r\n"
                },
                {
                    "date": 1746957965251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,13 @@\n             createdAt: new Date(),\r\n           });\r\n         }\r\n         return true;\r\n+      } else if (account?.provider === \"credentials\") {\r\n+        // Kiểm tra nếu đăng nhập bằng username và password của admin\r\n+        if (user.email === process.env.ADMIN_EMAIL) {\r\n+          return true;\r\n+        }\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async redirect({ url, baseUrl }) {\r\n"
                },
                {
                    "date": 1746958029627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,13 +45,8 @@\n             createdAt: new Date(),\r\n           });\r\n         }\r\n         return true;\r\n-      } else if (account?.provider === \"credentials\") {\r\n-        // Kiểm tra nếu đăng nhập bằng username và password của admin\r\n-        if (user.email === process.env.ADMIN_EMAIL) {\r\n-          return true;\r\n-        }\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async redirect({ url, baseUrl }) {\r\n"
                },
                {
                    "date": 1747044720869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import NextAuth from \"next-auth\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import GoogleProvider from \"next-auth/providers/google\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n+import bcrypt from \"bcryptjs\";\r\n \r\n const handler = NextAuth({\r\n   providers: [\r\n     GoogleProvider({\r\n@@ -11,22 +12,39 @@\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n-        username: { label: \"Username\", type: \"text\" },\r\n+        email: { label: \"Email\", type: \"text\" },\r\n         password: { label: \"Password\", type: \"password\" }\r\n       },\r\n       async authorize(credentials) {\r\n-        // Add your own logic here to validate the credentials\r\n-        if (credentials?.username === process.env.ADMIN_USERNAME && \r\n-            credentials?.password === process.env.ADMIN_PASSWORD) {\r\n+        const { db } = await connectToDatabase();\r\n+\r\n+        // Đăng nhập admin\r\n+        if (\r\n+          credentials?.email === process.env.ADMIN_USERNAME &&\r\n+          credentials?.password === process.env.ADMIN_PASSWORD\r\n+        ) {\r\n           return {\r\n             id: \"1\",\r\n             name: \"Admin\",\r\n             email: \"admin@example.com\",\r\n           };\r\n         }\r\n-        return null;\r\n+\r\n+        // Đăng nhập user thường\r\n+        const user = await db.collection(\"users\").findOne({ email: credentials?.email });\r\n+        if (!user) return null;\r\n+\r\n+        // So sánh mật khẩu đã hash\r\n+        const isValid = await bcrypt.compare(credentials?.password || \"\", user.password);\r\n+        if (!isValid) return null;\r\n+\r\n+        return {\r\n+          id: user._id.toString(),\r\n+          name: user.name,\r\n+          email: user.email,\r\n+        };\r\n       }\r\n     })\r\n   ],\r\n   pages: {\r\n"
                },
                {
                    "date": 1747045148938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,12 @@\n import GoogleProvider from \"next-auth/providers/google\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n \r\n+const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n+const LOGIN_RATE_LIMIT = 10; // 10 lần\r\n+const LOGIN_RATE_LIMIT_WINDOW = 10 * 60 * 1000; // 10 phút\r\n+\r\n const handler = NextAuth({\r\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n@@ -15,9 +19,25 @@\n       credentials: {\r\n         email: { label: \"Email\", type: \"text\" },\r\n         password: { label: \"Password\", type: \"password\" }\r\n       },\r\n-      async authorize(credentials) {\r\n+      async authorize(credentials, req) {\r\n+        // Rate limit theo IP\r\n+        let ip = req?.headers?.get?.('x-forwarded-for') || req?.ip || 'unknown';\r\n+        if (Array.isArray(ip)) ip = ip[0];\r\n+        const now = Date.now();\r\n+        const entry = loginRateLimitMap.get(ip) || { count: 0, last: now };\r\n+        if (now - entry.last > LOGIN_RATE_LIMIT_WINDOW) {\r\n+          entry.count = 0;\r\n+          entry.last = now;\r\n+        }\r\n+        entry.count++;\r\n+        entry.last = now;\r\n+        loginRateLimitMap.set(ip, entry);\r\n+        if (entry.count > LOGIN_RATE_LIMIT) {\r\n+          throw new Error('Too many login attempts, please try again later.');\r\n+        }\r\n+\r\n         const { db } = await connectToDatabase();\r\n \r\n         // Đăng nhập admin\r\n         if (\r\n"
                },
                {
                    "date": 1747045162784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         password: { label: \"Password\", type: \"password\" }\r\n       },\r\n       async authorize(credentials, req) {\r\n         // Rate limit theo IP\r\n-        let ip = req?.headers?.get?.('x-forwarded-for') || req?.ip || 'unknown';\r\n+        let ip = req?.headers?.get?.('x-forwarded-for') || 'unknown';\r\n         if (Array.isArray(ip)) ip = ip[0];\r\n         const now = Date.now();\r\n         const entry = loginRateLimitMap.get(ip) || { count: 0, last: now };\r\n         if (now - entry.last > LOGIN_RATE_LIMIT_WINDOW) {\r\n"
                },
                {
                    "date": 1747068390377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n const LOGIN_RATE_LIMIT = 10; // 10 lần\r\n const LOGIN_RATE_LIMIT_WINDOW = 10 * 60 * 1000; // 10 phút\r\n \r\n-const handler = NextAuth({\r\n+export const authOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n@@ -95,7 +95,9 @@\n   session: {\r\n     strategy: \"jwt\",\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n-});\r\n+};\r\n \r\n+const handler = NextAuth(authOptions);\r\n+\r\n export { handler as GET, handler as POST }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747068504568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n-import NextAuth from \"next-auth\";\r\n+import NextAuth, { AuthOptions, SessionStrategy } from \"next-auth\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import GoogleProvider from \"next-auth/providers/google\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n+import { Account, Profile, User } from \"next-auth\";\r\n \r\n const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n const LOGIN_RATE_LIMIT = 10; // 10 lần\r\n const LOGIN_RATE_LIMIT_WINDOW = 10 * 60 * 1000; // 10 phút\r\n \r\n-export const authOptions = {\r\n+export const authOptions: AuthOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n@@ -70,9 +71,9 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }) {\r\n+    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n         const { db } = await connectToDatabase();\r\n         const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n         if (!existingUser) {\r\n@@ -86,15 +87,15 @@\n         return true;\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n-    async redirect({ url, baseUrl }) {\r\n+    async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n       // Chuyển hướng sau khi đăng nhập thành công\r\n       return `${baseUrl}/`;\r\n     },\r\n   },\r\n   session: {\r\n-    strategy: \"jwt\",\r\n+    strategy: \"jwt\" as SessionStrategy,\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n };\r\n \r\n"
                },
                {
                    "date": 1747120183819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,10 @@\n         ) {\r\n           return {\r\n             id: \"1\",\r\n             name: \"Admin\",\r\n-            email: \"admin@example.com\",\r\n+            email: process.env.ADMIN_USERNAME,\r\n+            role: \"ADMIN\"\r\n           };\r\n         }\r\n \r\n         // Đăng nhập user thường\r\n@@ -87,8 +88,14 @@\n         return true;\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n+    async session({ session, token }) {\r\n+      if (session?.user?.email === process.env.ADMIN_USERNAME) {\r\n+        session.user.role = \"ADMIN\";\r\n+      }\r\n+      return session;\r\n+    },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n       // Chuyển hướng sau khi đăng nhập thành công\r\n       return `${baseUrl}/`;\r\n     },\r\n"
                },
                {
                    "date": 1747120190280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,20 @@\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n import { Account, Profile, User } from \"next-auth\";\r\n \r\n+// Thêm type cho session\r\n+declare module \"next-auth\" {\r\n+  interface Session {\r\n+    user?: {\r\n+      name?: string | null;\r\n+      email?: string | null;\r\n+      image?: string | null;\r\n+      role?: string;\r\n+    };\r\n+  }\r\n+}\r\n+\r\n const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n const LOGIN_RATE_LIMIT = 10; // 10 lần\r\n const LOGIN_RATE_LIMIT_WINDOW = 10 * 60 * 1000; // 10 phút\r\n \r\n"
                },
                {
                    "date": 1747120199299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async session({ session, token }) {\r\n-      if (session?.user?.email === process.env.ADMIN_USERNAME) {\r\n+      if (session.user && session.user.email === process.env.ADMIN_USERNAME) {\r\n         session.user.role = \"ADMIN\";\r\n       }\r\n       return session;\r\n     },\r\n"
                },
                {
                    "date": 1747120276559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n       }\r\n     })\r\n   ],\r\n   pages: {\r\n-    signIn: \"/login\",\r\n+    signIn: \"/admin/login\",\r\n   },\r\n   callbacks: {\r\n     async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n"
                },
                {
                    "date": 1747120364183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,17 +100,26 @@\n         return true;\r\n       }\r\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n+    async jwt({ token, user }) {\r\n+      if (user) {\r\n+        token.role = user.role;\r\n+      }\r\n+      return token;\r\n+    },\r\n     async session({ session, token }) {\r\n-      if (session.user && session.user.email === process.env.ADMIN_USERNAME) {\r\n-        session.user.role = \"ADMIN\";\r\n+      if (session.user) {\r\n+        session.user.role = token.role as string;\r\n       }\r\n       return session;\r\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n-      // Chuyển hướng sau khi đăng nhập thành công\r\n-      return `${baseUrl}/`;\r\n+      // Nếu đăng nhập admin thành công, chuyển hướng đến trang admin\r\n+      if (url.startsWith(baseUrl)) {\r\n+        return `${baseUrl}/admin/customers`;\r\n+      }\r\n+      return url;\r\n     },\r\n   },\r\n   session: {\r\n     strategy: \"jwt\" as SessionStrategy,\r\n"
                },
                {
                    "date": 1747120372126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n import { Account, Profile, User } from \"next-auth\";\r\n \r\n-// Thêm type cho session\r\n+// Thêm type cho session và user\r\n declare module \"next-auth\" {\r\n   interface Session {\r\n     user?: {\r\n       name?: string | null;\r\n@@ -14,8 +14,11 @@\n       image?: string | null;\r\n       role?: string;\r\n     };\r\n   }\r\n+  interface User {\r\n+    role?: string;\r\n+  }\r\n }\r\n \r\n const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n const LOGIN_RATE_LIMIT = 10; // 10 lần\r\n"
                },
                {
                    "date": 1747120538486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,11 +116,11 @@\n       }\r\n       return session;\r\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n-      // Nếu đăng nhập admin thành công, chuyển hướng đến trang admin\r\n+      // Nếu đăng nhập admin thành công, chuyển hướng đến trang dashboard\r\n       if (url.startsWith(baseUrl)) {\r\n-        return `${baseUrl}/admin/customers`;\r\n+        return `${baseUrl}/admin/dashboard`;\r\n       }\r\n       return url;\r\n     },\r\n   },\r\n"
                },
                {
                    "date": 1747121359681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,28 @@\n // Thêm type cho session và user\r\n declare module \"next-auth\" {\r\n   interface Session {\r\n     user?: {\r\n+      id?: string;\r\n       name?: string | null;\r\n       email?: string | null;\r\n       image?: string | null;\r\n       role?: string;\r\n+      firstName?: string;\r\n+      lastName?: string;\r\n+      birthDay?: string;\r\n+      birthMonth?: string;\r\n+      birthYear?: string;\r\n     };\r\n   }\r\n   interface User {\r\n+    id?: string;\r\n     role?: string;\r\n+    firstName?: string;\r\n+    lastName?: string;\r\n+    birthDay?: string;\r\n+    birthMonth?: string;\r\n+    birthYear?: string;\r\n   }\r\n }\r\n \r\n const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n@@ -79,8 +91,13 @@\n         return {\r\n           id: user._id.toString(),\r\n           name: user.name,\r\n           email: user.email,\r\n+          firstName: user.firstName,\r\n+          lastName: user.lastName,\r\n+          birthDay: user.birthDay,\r\n+          birthMonth: user.birthMonth,\r\n+          birthYear: user.birthYear,\r\n         };\r\n       }\r\n     })\r\n   ],\r\n@@ -105,15 +122,27 @@\n       return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async jwt({ token, user }) {\r\n       if (user) {\r\n+        token.id = user.id;\r\n         token.role = user.role;\r\n+        token.firstName = user.firstName;\r\n+        token.lastName = user.lastName;\r\n+        token.birthDay = user.birthDay;\r\n+        token.birthMonth = user.birthMonth;\r\n+        token.birthYear = user.birthYear;\r\n       }\r\n       return token;\r\n     },\r\n     async session({ session, token }) {\r\n       if (session.user) {\r\n+        session.user.id = token.id as string;\r\n         session.user.role = token.role as string;\r\n+        session.user.firstName = token.firstName as string;\r\n+        session.user.lastName = token.lastName as string;\r\n+        session.user.birthDay = token.birthDay as string;\r\n+        session.user.birthMonth = token.birthMonth as string;\r\n+        session.user.birthYear = token.birthYear as string;\r\n       }\r\n       return session;\r\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n"
                },
                {
                    "date": 1747121428554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,14 +96,15 @@\n           lastName: user.lastName,\r\n           birthDay: user.birthDay,\r\n           birthMonth: user.birthMonth,\r\n           birthYear: user.birthYear,\r\n+          role: \"USER\"\r\n         };\r\n       }\r\n     })\r\n   ],\r\n   pages: {\r\n-    signIn: \"/admin/login\",\r\n+    signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n     async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n@@ -113,8 +114,9 @@\n           await db.collection(\"users\").insertOne({\r\n             name: user.name,\r\n             email: user.email,\r\n             provider: \"google\",\r\n+            role: \"USER\",\r\n             createdAt: new Date(),\r\n           });\r\n         }\r\n         return true;\r\n@@ -147,15 +149,19 @@\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n       // Nếu đăng nhập admin thành công, chuyển hướng đến trang dashboard\r\n       if (url.startsWith(baseUrl)) {\r\n-        return `${baseUrl}/admin/dashboard`;\r\n+        if (url.includes(\"/admin\")) {\r\n+          return `${baseUrl}/admin/dashboard`;\r\n+        }\r\n+        return url;\r\n       }\r\n       return url;\r\n     },\r\n   },\r\n   session: {\r\n     strategy: \"jwt\" as SessionStrategy,\r\n+    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n };\r\n \r\n"
                },
                {
                    "date": 1747121713735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,14 @@\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n       // Nếu đăng nhập admin thành công, chuyển hướng đến trang dashboard\r\n       if (url.startsWith(baseUrl)) {\r\n-        if (url.includes(\"/admin\")) {\r\n+        // Nếu URL đã chứa đường dẫn cụ thể, giữ nguyên\r\n+        if (url.includes('/admin/')) {\r\n+          return url;\r\n+        }\r\n+        // Nếu là admin và không có đường dẫn cụ thể, chuyển đến dashboard\r\n+        if (url.includes('/admin')) {\r\n           return `${baseUrl}/admin/dashboard`;\r\n         }\r\n         return url;\r\n       }\r\n"
                },
                {
                    "date": 1747121834261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import GoogleProvider from \"next-auth/providers/google\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n import { Account, Profile, User } from \"next-auth\";\r\n+import { getServerSession } from \"next-auth/next\";\r\n \r\n // Thêm type cho session và user\r\n declare module \"next-auth\" {\r\n   interface Session {\r\n@@ -147,16 +148,19 @@\n       }\r\n       return session;\r\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n-      // Nếu đăng nhập admin thành công, chuyển hướng đến trang dashboard\r\n+      // Kiểm tra session để xác định role\r\n+      const session = await getServerSession(authOptions);\r\n+      \r\n       if (url.startsWith(baseUrl)) {\r\n-        // Nếu URL đã chứa đường dẫn cụ thể, giữ nguyên\r\n-        if (url.includes('/admin/')) {\r\n-          return url;\r\n-        }\r\n-        // Nếu là admin và không có đường dẫn cụ thể, chuyển đến dashboard\r\n-        if (url.includes('/admin')) {\r\n+        // Nếu là admin và đang truy cập trang admin\r\n+        if (session?.user?.role === \"ADMIN\" && url.includes('/admin')) {\r\n+          // Nếu URL đã có đường dẫn cụ thể (ví dụ: /admin/customers), giữ nguyên\r\n+          if (url.split('/admin/').length > 1) {\r\n+            return url;\r\n+          }\r\n+          // Nếu chỉ là /admin, chuyển đến dashboard\r\n           return `${baseUrl}/admin/dashboard`;\r\n         }\r\n         return url;\r\n       }\r\n"
                },
                {
                    "date": 1747121892511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,21 +148,14 @@\n       }\r\n       return session;\r\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n-      // Kiểm tra session để xác định role\r\n-      const session = await getServerSession(authOptions);\r\n-      \r\n       if (url.startsWith(baseUrl)) {\r\n-        // Nếu là admin và đang truy cập trang admin\r\n-        if (session?.user?.role === \"ADMIN\" && url.includes('/admin')) {\r\n-          // Nếu URL đã có đường dẫn cụ thể (ví dụ: /admin/customers), giữ nguyên\r\n-          if (url.split('/admin/').length > 1) {\r\n-            return url;\r\n-          }\r\n-          // Nếu chỉ là /admin, chuyển đến dashboard\r\n+        // Nếu URL là /admin (không có đường dẫn con), chuyển đến dashboard\r\n+        if (url === `${baseUrl}/admin`) {\r\n           return `${baseUrl}/admin/dashboard`;\r\n         }\r\n+        // Giữ nguyên các URL khác\r\n         return url;\r\n       }\r\n       return url;\r\n     },\r\n"
                },
                {
                    "date": 1747364762097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,22 @@\n \r\n export const authOptions: AuthOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n+      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n+      profile(profile) {\r\n+        return {\r\n+          id: profile.sub,\r\n+          name: profile.name,\r\n+          email: profile.email,\r\n+          image: profile.picture,\r\n+          firstName: profile.given_name,\r\n+          lastName: profile.family_name,\r\n+          role: \"USER\",\r\n+          provider: \"google\"\r\n+        };\r\n+      }\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -106,24 +118,37 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n+    async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        const { db } = await connectToDatabase();\r\n-        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-        if (!existingUser) {\r\n-          await db.collection(\"users\").insertOne({\r\n-            name: user.name,\r\n-            email: user.email,\r\n-            provider: \"google\",\r\n-            role: \"USER\",\r\n-            createdAt: new Date(),\r\n-          });\r\n+        try {\r\n+          const { db } = await connectToDatabase();\r\n+          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+\r\n+          if (!existingUser) {\r\n+            // Tạo user mới nếu chưa tồn tại\r\n+            await db.collection(\"users\").insertOne({\r\n+              email: user.email,\r\n+              firstName: user.firstName || '',\r\n+              lastName: user.lastName || '',\r\n+              birthDay: '',\r\n+              birthMonth: '',\r\n+              birthYear: '',\r\n+              role: \"USER\",\r\n+              provider: \"google\",\r\n+              createdAt: new Date()\r\n+            });\r\n+          } else if (existingUser.provider !== \"google\") {\r\n+            // Nếu user đã tồn tại nhưng đăng nhập bằng phương thức khác\r\n+            return false;\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(\"Error in Google sign in:\", error);\r\n+          return false;\r\n         }\r\n-        return true;\r\n       }\r\n-      return true; // Cho phép đăng nhập với Credentials provider\r\n+      return true;\r\n     },\r\n     async jwt({ token, user }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n"
                },
                {
                    "date": 1747364844193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,22 +39,10 @@\n \r\n export const authOptions: AuthOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n-      profile(profile) {\r\n-        return {\r\n-          id: profile.sub,\r\n-          name: profile.name,\r\n-          email: profile.email,\r\n-          image: profile.picture,\r\n-          firstName: profile.given_name,\r\n-          lastName: profile.family_name,\r\n-          role: \"USER\",\r\n-          provider: \"google\"\r\n-        };\r\n-      }\r\n+      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -118,37 +106,24 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }) {\r\n+    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        try {\r\n-          const { db } = await connectToDatabase();\r\n-          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-\r\n-          if (!existingUser) {\r\n-            // Tạo user mới nếu chưa tồn tại\r\n-            await db.collection(\"users\").insertOne({\r\n-              email: user.email,\r\n-              firstName: user.firstName || '',\r\n-              lastName: user.lastName || '',\r\n-              birthDay: '',\r\n-              birthMonth: '',\r\n-              birthYear: '',\r\n-              role: \"USER\",\r\n-              provider: \"google\",\r\n-              createdAt: new Date()\r\n-            });\r\n-          } else if (existingUser.provider !== \"google\") {\r\n-            // Nếu user đã tồn tại nhưng đăng nhập bằng phương thức khác\r\n-            return false;\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(\"Error in Google sign in:\", error);\r\n-          return false;\r\n+        const { db } = await connectToDatabase();\r\n+        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+        if (!existingUser) {\r\n+          await db.collection(\"users\").insertOne({\r\n+            name: user.name,\r\n+            email: user.email,\r\n+            provider: \"google\",\r\n+            role: \"USER\",\r\n+            createdAt: new Date(),\r\n+          });\r\n         }\r\n+        return true;\r\n       }\r\n-      return true;\r\n+      return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n     async jwt({ token, user }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n"
                },
                {
                    "date": 1747364854483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,22 @@\n \r\n export const authOptions: AuthOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n+      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n+      profile(profile) {\r\n+        return {\r\n+          id: profile.sub,\r\n+          name: profile.name,\r\n+          email: profile.email,\r\n+          image: profile.picture,\r\n+          firstName: profile.given_name,\r\n+          lastName: profile.family_name,\r\n+          role: \"USER\",\r\n+          provider: \"google\"\r\n+        };\r\n+      }\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -106,24 +118,37 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n+    async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        const { db } = await connectToDatabase();\r\n-        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-        if (!existingUser) {\r\n-          await db.collection(\"users\").insertOne({\r\n-            name: user.name,\r\n-            email: user.email,\r\n-            provider: \"google\",\r\n-            role: \"USER\",\r\n-            createdAt: new Date(),\r\n-          });\r\n+        try {\r\n+          const { db } = await connectToDatabase();\r\n+          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+\r\n+          if (!existingUser) {\r\n+            // Tạo user mới nếu chưa tồn tại\r\n+            await db.collection(\"users\").insertOne({\r\n+              email: user.email,\r\n+              firstName: user.firstName || '',\r\n+              lastName: user.lastName || '',\r\n+              birthDay: '',\r\n+              birthMonth: '',\r\n+              birthYear: '',\r\n+              role: \"USER\",\r\n+              provider: \"google\",\r\n+              createdAt: new Date()\r\n+            });\r\n+          } else if (existingUser.provider !== \"google\") {\r\n+            // Nếu user đã tồn tại nhưng đăng nhập bằng phương thức khác\r\n+            return false;\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(\"Error in Google sign in:\", error);\r\n+          return false;\r\n         }\r\n-        return true;\r\n       }\r\n-      return true; // Cho phép đăng nhập với Credentials provider\r\n+      return true;\r\n     },\r\n     async jwt({ token, user }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n"
                },
                {
                    "date": 1747364883634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,18 +39,21 @@\n \r\n export const authOptions: AuthOptions = {\r\n   providers: [\r\n     GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n+      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n       profile(profile) {\r\n         return {\r\n           id: profile.sub,\r\n           name: profile.name,\r\n           email: profile.email,\r\n           image: profile.picture,\r\n           firstName: profile.given_name,\r\n           lastName: profile.family_name,\r\n+          birthDay: '',\r\n+          birthMonth: '',\r\n+          birthYear: '',\r\n           role: \"USER\",\r\n           provider: \"google\"\r\n         };\r\n       }\r\n@@ -118,9 +121,9 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }) {\r\n+    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n         try {\r\n           const { db } = await connectToDatabase();\r\n           const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n@@ -148,9 +151,9 @@\n         }\r\n       }\r\n       return true;\r\n     },\r\n-    async jwt({ token, user }) {\r\n+    async jwt({ token, user, account }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.firstName = user.firstName;\r\n"
                },
                {
                    "date": 1747365000247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,23 +41,8 @@\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n-      profile(profile) {\r\n-        return {\r\n-          id: profile.sub,\r\n-          name: profile.name,\r\n-          email: profile.email,\r\n-          image: profile.picture,\r\n-          firstName: profile.given_name,\r\n-          lastName: profile.family_name,\r\n-          birthDay: '',\r\n-          birthMonth: '',\r\n-          birthYear: '',\r\n-          role: \"USER\",\r\n-          provider: \"google\"\r\n-        };\r\n-      }\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -123,37 +108,24 @@\n   },\r\n   callbacks: {\r\n     async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        try {\r\n-          const { db } = await connectToDatabase();\r\n-          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-\r\n-          if (!existingUser) {\r\n-            // Tạo user mới nếu chưa tồn tại\r\n-            await db.collection(\"users\").insertOne({\r\n-              email: user.email,\r\n-              firstName: user.firstName || '',\r\n-              lastName: user.lastName || '',\r\n-              birthDay: '',\r\n-              birthMonth: '',\r\n-              birthYear: '',\r\n-              role: \"USER\",\r\n-              provider: \"google\",\r\n-              createdAt: new Date()\r\n-            });\r\n-          } else if (existingUser.provider !== \"google\") {\r\n-            // Nếu user đã tồn tại nhưng đăng nhập bằng phương thức khác\r\n-            return false;\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(\"Error in Google sign in:\", error);\r\n-          return false;\r\n+        const { db } = await connectToDatabase();\r\n+        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+        if (!existingUser) {\r\n+          await db.collection(\"users\").insertOne({\r\n+            name: user.name,\r\n+            email: user.email,\r\n+            provider: \"google\",\r\n+            role: \"USER\",\r\n+            createdAt: new Date(),\r\n+          });\r\n         }\r\n+        return true;\r\n       }\r\n-      return true;\r\n+      return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n-    async jwt({ token, user, account }) {\r\n+    async jwt({ token, user }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.firstName = user.firstName;\r\n"
                },
                {
                    "date": 1747365026274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,23 @@\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n+      profile(profile) {\r\n+        return {\r\n+          id: profile.sub,\r\n+          name: profile.name,\r\n+          email: profile.email,\r\n+          image: profile.picture,\r\n+          firstName: profile.given_name,\r\n+          lastName: profile.family_name,\r\n+          birthDay: '',\r\n+          birthMonth: '',\r\n+          birthYear: '',\r\n+          role: \"USER\",\r\n+          provider: \"google\"\r\n+        };\r\n+      }\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -106,26 +121,35 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n+    async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        const { db } = await connectToDatabase();\r\n-        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-        if (!existingUser) {\r\n-          await db.collection(\"users\").insertOne({\r\n-            name: user.name,\r\n-            email: user.email,\r\n-            provider: \"google\",\r\n-            role: \"USER\",\r\n-            createdAt: new Date(),\r\n-          });\r\n+        try {\r\n+          const { db } = await connectToDatabase();\r\n+          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+\r\n+          if (!existingUser) {\r\n+            await db.collection(\"users\").insertOne({\r\n+              email: user.email,\r\n+              firstName: user.firstName || '',\r\n+              lastName: user.lastName || '',\r\n+              birthDay: '',\r\n+              birthMonth: '',\r\n+              birthYear: '',\r\n+              role: \"USER\",\r\n+              provider: \"google\",\r\n+              createdAt: new Date()\r\n+            });\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(\"Error in Google sign in:\", error);\r\n+          return false;\r\n         }\r\n-        return true;\r\n       }\r\n-      return true; // Cho phép đăng nhập với Credentials provider\r\n+      return true;\r\n     },\r\n-    async jwt({ token, user }) {\r\n+    async jwt({ token, user, account }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.firstName = user.firstName;\r\n@@ -160,12 +184,13 @@\n       return url;\r\n     },\r\n   },\r\n   session: {\r\n-    strategy: \"jwt\" as SessionStrategy,\r\n+    strategy: \"jwt\",\r\n     maxAge: 30 * 24 * 60 * 60, // 30 days\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n+  debug: process.env.NODE_ENV === 'development',\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n"
                },
                {
                    "date": 1747365107033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,23 +41,8 @@\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n-      profile(profile) {\r\n-        return {\r\n-          id: profile.sub,\r\n-          name: profile.name,\r\n-          email: profile.email,\r\n-          image: profile.picture,\r\n-          firstName: profile.given_name,\r\n-          lastName: profile.family_name,\r\n-          birthDay: '',\r\n-          birthMonth: '',\r\n-          birthYear: '',\r\n-          role: \"USER\",\r\n-          provider: \"google\"\r\n-        };\r\n-      }\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -121,35 +106,26 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }) {\r\n+    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        try {\r\n-          const { db } = await connectToDatabase();\r\n-          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-\r\n-          if (!existingUser) {\r\n-            await db.collection(\"users\").insertOne({\r\n-              email: user.email,\r\n-              firstName: user.firstName || '',\r\n-              lastName: user.lastName || '',\r\n-              birthDay: '',\r\n-              birthMonth: '',\r\n-              birthYear: '',\r\n-              role: \"USER\",\r\n-              provider: \"google\",\r\n-              createdAt: new Date()\r\n-            });\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(\"Error in Google sign in:\", error);\r\n-          return false;\r\n+        const { db } = await connectToDatabase();\r\n+        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+        if (!existingUser) {\r\n+          await db.collection(\"users\").insertOne({\r\n+            name: user.name,\r\n+            email: user.email,\r\n+            provider: \"google\",\r\n+            role: \"USER\",\r\n+            createdAt: new Date(),\r\n+          });\r\n         }\r\n+        return true;\r\n       }\r\n-      return true;\r\n+      return true; // Cho phép đăng nhập với Credentials provider\r\n     },\r\n-    async jwt({ token, user, account }) {\r\n+    async jwt({ token, user }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.firstName = user.firstName;\r\n@@ -184,13 +160,12 @@\n       return url;\r\n     },\r\n   },\r\n   session: {\r\n-    strategy: \"jwt\",\r\n+    strategy: \"jwt\" as SessionStrategy,\r\n     maxAge: 30 * 24 * 60 * 60, // 30 days\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n-  debug: process.env.NODE_ENV === 'development',\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n"
                },
                {
                    "date": 1747365178197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,23 @@\n   providers: [\r\n     GoogleProvider({\r\n       clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n       clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n+      profile(profile) {\r\n+        return {\r\n+          id: profile.sub,\r\n+          name: profile.name,\r\n+          email: profile.email,\r\n+          image: profile.picture,\r\n+          firstName: profile.given_name,\r\n+          lastName: profile.family_name,\r\n+          birthDay: '',\r\n+          birthMonth: '',\r\n+          birthYear: '',\r\n+          role: \"USER\",\r\n+          provider: \"google\"\r\n+        };\r\n+      }\r\n     }),\r\n     CredentialsProvider({\r\n       name: \"Credentials\",\r\n       credentials: {\r\n@@ -106,34 +121,44 @@\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   callbacks: {\r\n-    async signIn({ user, account, profile }: { user: User; account: Account | null; profile?: Profile }) {\r\n+    async signIn({ user, account, profile }) {\r\n       if (account?.provider === \"google\") {\r\n-        const { db } = await connectToDatabase();\r\n-        const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-        if (!existingUser) {\r\n-          await db.collection(\"users\").insertOne({\r\n-            name: user.name,\r\n-            email: user.email,\r\n-            provider: \"google\",\r\n-            role: \"USER\",\r\n-            createdAt: new Date(),\r\n-          });\r\n+        try {\r\n+          const { db } = await connectToDatabase();\r\n+          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n+\r\n+          if (!existingUser) {\r\n+            await db.collection(\"users\").insertOne({\r\n+              email: user.email,\r\n+              firstName: user.firstName || '',\r\n+              lastName: user.lastName || '',\r\n+              birthDay: '',\r\n+              birthMonth: '',\r\n+              birthYear: '',\r\n+              role: \"USER\",\r\n+              provider: \"google\",\r\n+              createdAt: new Date()\r\n+            });\r\n+          }\r\n+        } catch (error) {\r\n+          console.error(\"Error in Google sign in:\", error);\r\n+          return false;\r\n         }\r\n-        return true;\r\n       }\r\n-      return true; // Cho phép đăng nhập với Credentials provider\r\n+      return true;\r\n     },\r\n-    async jwt({ token, user }) {\r\n+    async jwt({ token, user, account }) {\r\n       if (user) {\r\n         token.id = user.id;\r\n         token.role = user.role;\r\n         token.firstName = user.firstName;\r\n         token.lastName = user.lastName;\r\n         token.birthDay = user.birthDay;\r\n         token.birthMonth = user.birthMonth;\r\n         token.birthYear = user.birthYear;\r\n+        token.email = user.email;\r\n       }\r\n       return token;\r\n     },\r\n     async session({ session, token }) {\r\n@@ -144,8 +169,9 @@\n         session.user.lastName = token.lastName as string;\r\n         session.user.birthDay = token.birthDay as string;\r\n         session.user.birthMonth = token.birthMonth as string;\r\n         session.user.birthYear = token.birthYear as string;\r\n+        session.user.email = token.email as string;\r\n       }\r\n       return session;\r\n     },\r\n     async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n@@ -160,12 +186,13 @@\n       return url;\r\n     },\r\n   },\r\n   session: {\r\n-    strategy: \"jwt\" as SessionStrategy,\r\n+    strategy: \"jwt\",\r\n     maxAge: 30 * 24 * 60 * 60, // 30 days\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n+  debug: process.env.NODE_ENV === 'development',\r\n };\r\n \r\n const handler = NextAuth(authOptions);\r\n \r\n"
                },
                {
                    "date": 1747456976353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,199 +1,6 @@\n-import NextAuth, { AuthOptions, SessionStrategy } from \"next-auth\";\r\n-import CredentialsProvider from \"next-auth/providers/credentials\";\r\n-import GoogleProvider from \"next-auth/providers/google\";\r\n-import { connectToDatabase } from \"@/lib/mongodb\";\r\n-import bcrypt from \"bcryptjs\";\r\n-import { Account, Profile, User } from \"next-auth\";\r\n-import { getServerSession } from \"next-auth/next\";\r\n+import NextAuth from \"next-auth\";\r\n+import { authOptions } from \"@/lib/auth\";\r\n \r\n-// Thêm type cho session và user\r\n-declare module \"next-auth\" {\r\n-  interface Session {\r\n-    user?: {\r\n-      id?: string;\r\n-      name?: string | null;\r\n-      email?: string | null;\r\n-      image?: string | null;\r\n-      role?: string;\r\n-      firstName?: string;\r\n-      lastName?: string;\r\n-      birthDay?: string;\r\n-      birthMonth?: string;\r\n-      birthYear?: string;\r\n-    };\r\n-  }\r\n-  interface User {\r\n-    id?: string;\r\n-    role?: string;\r\n-    firstName?: string;\r\n-    lastName?: string;\r\n-    birthDay?: string;\r\n-    birthMonth?: string;\r\n-    birthYear?: string;\r\n-  }\r\n-}\r\n-\r\n-const loginRateLimitMap = new Map<string, { count: number, last: number }>();\r\n-const LOGIN_RATE_LIMIT = 10; // 10 lần\r\n-const LOGIN_RATE_LIMIT_WINDOW = 10 * 60 * 1000; // 10 phút\r\n-\r\n-export const authOptions: AuthOptions = {\r\n-  providers: [\r\n-    GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\r\n-      profile(profile) {\r\n-        return {\r\n-          id: profile.sub,\r\n-          name: profile.name,\r\n-          email: profile.email,\r\n-          image: profile.picture,\r\n-          firstName: profile.given_name,\r\n-          lastName: profile.family_name,\r\n-          birthDay: '',\r\n-          birthMonth: '',\r\n-          birthYear: '',\r\n-          role: \"USER\",\r\n-          provider: \"google\"\r\n-        };\r\n-      }\r\n-    }),\r\n-    CredentialsProvider({\r\n-      name: \"Credentials\",\r\n-      credentials: {\r\n-        email: { label: \"Email\", type: \"text\" },\r\n-        password: { label: \"Password\", type: \"password\" }\r\n-      },\r\n-      async authorize(credentials, req) {\r\n-        // Rate limit theo IP\r\n-        let ip = req?.headers?.get?.('x-forwarded-for') || 'unknown';\r\n-        if (Array.isArray(ip)) ip = ip[0];\r\n-        const now = Date.now();\r\n-        const entry = loginRateLimitMap.get(ip) || { count: 0, last: now };\r\n-        if (now - entry.last > LOGIN_RATE_LIMIT_WINDOW) {\r\n-          entry.count = 0;\r\n-          entry.last = now;\r\n-        }\r\n-        entry.count++;\r\n-        entry.last = now;\r\n-        loginRateLimitMap.set(ip, entry);\r\n-        if (entry.count > LOGIN_RATE_LIMIT) {\r\n-          throw new Error('Too many login attempts, please try again later.');\r\n-        }\r\n-\r\n-        const { db } = await connectToDatabase();\r\n-\r\n-        // Đăng nhập admin\r\n-        if (\r\n-          credentials?.email === process.env.ADMIN_USERNAME &&\r\n-          credentials?.password === process.env.ADMIN_PASSWORD\r\n-        ) {\r\n-          return {\r\n-            id: \"1\",\r\n-            name: \"Admin\",\r\n-            email: process.env.ADMIN_USERNAME,\r\n-            role: \"ADMIN\"\r\n-          };\r\n-        }\r\n-\r\n-        // Đăng nhập user thường\r\n-        const user = await db.collection(\"users\").findOne({ email: credentials?.email });\r\n-        if (!user) return null;\r\n-\r\n-        // So sánh mật khẩu đã hash\r\n-        const isValid = await bcrypt.compare(credentials?.password || \"\", user.password);\r\n-        if (!isValid) return null;\r\n-\r\n-        return {\r\n-          id: user._id.toString(),\r\n-          name: user.name,\r\n-          email: user.email,\r\n-          firstName: user.firstName,\r\n-          lastName: user.lastName,\r\n-          birthDay: user.birthDay,\r\n-          birthMonth: user.birthMonth,\r\n-          birthYear: user.birthYear,\r\n-          role: \"USER\"\r\n-        };\r\n-      }\r\n-    })\r\n-  ],\r\n-  pages: {\r\n-    signIn: \"/login\",\r\n-  },\r\n-  callbacks: {\r\n-    async signIn({ user, account, profile }) {\r\n-      if (account?.provider === \"google\") {\r\n-        try {\r\n-          const { db } = await connectToDatabase();\r\n-          const existingUser = await db.collection(\"users\").findOne({ email: user.email });\r\n-\r\n-          if (!existingUser) {\r\n-            await db.collection(\"users\").insertOne({\r\n-              email: user.email,\r\n-              firstName: user.firstName || '',\r\n-              lastName: user.lastName || '',\r\n-              birthDay: '',\r\n-              birthMonth: '',\r\n-              birthYear: '',\r\n-              role: \"USER\",\r\n-              provider: \"google\",\r\n-              createdAt: new Date()\r\n-            });\r\n-          }\r\n-        } catch (error) {\r\n-          console.error(\"Error in Google sign in:\", error);\r\n-          return false;\r\n-        }\r\n-      }\r\n-      return true;\r\n-    },\r\n-    async jwt({ token, user, account }) {\r\n-      if (user) {\r\n-        token.id = user.id;\r\n-        token.role = user.role;\r\n-        token.firstName = user.firstName;\r\n-        token.lastName = user.lastName;\r\n-        token.birthDay = user.birthDay;\r\n-        token.birthMonth = user.birthMonth;\r\n-        token.birthYear = user.birthYear;\r\n-        token.email = user.email;\r\n-      }\r\n-      return token;\r\n-    },\r\n-    async session({ session, token }) {\r\n-      if (session.user) {\r\n-        session.user.id = token.id as string;\r\n-        session.user.role = token.role as string;\r\n-        session.user.firstName = token.firstName as string;\r\n-        session.user.lastName = token.lastName as string;\r\n-        session.user.birthDay = token.birthDay as string;\r\n-        session.user.birthMonth = token.birthMonth as string;\r\n-        session.user.birthYear = token.birthYear as string;\r\n-        session.user.email = token.email as string;\r\n-      }\r\n-      return session;\r\n-    },\r\n-    async redirect({ url, baseUrl }: { url: string; baseUrl: string }) {\r\n-      if (url.startsWith(baseUrl)) {\r\n-        // Nếu URL là /admin (không có đường dẫn con), chuyển đến dashboard\r\n-        if (url === `${baseUrl}/admin`) {\r\n-          return `${baseUrl}/admin/dashboard`;\r\n-        }\r\n-        // Giữ nguyên các URL khác\r\n-        return url;\r\n-      }\r\n-      return url;\r\n-    },\r\n-  },\r\n-  session: {\r\n-    strategy: \"jwt\",\r\n-    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n-  },\r\n-  secret: process.env.NEXTAUTH_SECRET,\r\n-  debug: process.env.NODE_ENV === 'development',\r\n-};\r\n-\r\n const handler = NextAuth(authOptions);\r\n \r\n export { handler as GET, handler as POST }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747889192592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,67 @@\n import NextAuth from \"next-auth\";\r\n-import { authOptions } from \"@/lib/auth\";\r\n+import CredentialsProvider from 'next-auth/providers/credentials';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import bcrypt from 'bcryptjs';\r\n \r\n+export const authOptions = {\r\n+  providers: [\r\n+    CredentialsProvider({\r\n+      name: 'Credentials',\r\n+      credentials: {\r\n+        email: { label: \"Email\", type: \"email\" },\r\n+        password: { label: \"Password\", type: \"password\" }\r\n+      },\r\n+      async authorize(credentials) {\r\n+        if (!credentials?.email || !credentials?.password) {\r\n+          throw new Error('Please enter an email and password');\r\n+        }\r\n+\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection('users').findOne({ email: credentials.email });\r\n+\r\n+        if (!user) {\r\n+          throw new Error('No user found with this email');\r\n+        }\r\n+\r\n+        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+\r\n+        if (!isPasswordValid) {\r\n+          throw new Error('Invalid password');\r\n+        }\r\n+\r\n+        return {\r\n+          id: user._id.toString(),\r\n+          email: user.email,\r\n+          name: `${user.firstName} ${user.lastName}`,\r\n+          role: user.role\r\n+        };\r\n+      }\r\n+    })\r\n+  ],\r\n+  callbacks: {\r\n+    async jwt({ token, user }) {\r\n+      if (user) {\r\n+        token.role = user.role;\r\n+      }\r\n+      return token;\r\n+    },\r\n+    async session({ session, token }) {\r\n+      if (session?.user) {\r\n+        session.user.role = token.role;\r\n+      }\r\n+      return session;\r\n+    }\r\n+  },\r\n+  pages: {\r\n+    signIn: '/login',\r\n+    error: '/login',\r\n+  },\r\n+  session: {\r\n+    strategy: 'jwt',\r\n+  },\r\n+  secret: process.env.NEXTAUTH_SECRET,\r\n+};\r\n+\r\n const handler = NextAuth(authOptions);\r\n \r\n export { handler as GET, handler as POST }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747889202632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n-import NextAuth from \"next-auth\";\r\n+import NextAuth, { AuthOptions } from 'next-auth';\r\n import CredentialsProvider from 'next-auth/providers/credentials';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import bcrypt from 'bcryptjs';\r\n \r\n-export const authOptions = {\r\n+export const authOptions: AuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n       name: 'Credentials',\r\n       credentials: {\r\n@@ -38,15 +38,15 @@\n       }\r\n     })\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }) {\r\n+    async jwt({ token, user }: { token: any; user: any }) {\r\n       if (user) {\r\n         token.role = user.role;\r\n       }\r\n       return token;\r\n     },\r\n-    async session({ session, token }) {\r\n+    async session({ session, token }: { session: any; token: any }) {\r\n       if (session?.user) {\r\n         session.user.role = token.role;\r\n       }\r\n       return session;\r\n@@ -56,9 +56,9 @@\n     signIn: '/login',\r\n     error: '/login',\r\n   },\r\n   session: {\r\n-    strategy: 'jwt',\r\n+    strategy: 'jwt' as const,\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n };\r\n \r\n"
                },
                {
                    "date": 1747889848313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,67 +1,6 @@\n-import NextAuth, { AuthOptions } from 'next-auth';\r\n-import CredentialsProvider from 'next-auth/providers/credentials';\r\n-import { connectToDatabase } from '@/lib/mongodb';\r\n-import bcrypt from 'bcryptjs';\r\n+import NextAuth from 'next-auth';\r\n+import { authOptions } from '@/lib/auth';\r\n \r\n-export const authOptions: AuthOptions = {\r\n-  providers: [\r\n-    CredentialsProvider({\r\n-      name: 'Credentials',\r\n-      credentials: {\r\n-        email: { label: \"Email\", type: \"email\" },\r\n-        password: { label: \"Password\", type: \"password\" }\r\n-      },\r\n-      async authorize(credentials) {\r\n-        if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error('Please enter an email and password');\r\n-        }\r\n-\r\n-        const { db } = await connectToDatabase();\r\n-        const user = await db.collection('users').findOne({ email: credentials.email });\r\n-\r\n-        if (!user) {\r\n-          throw new Error('No user found with this email');\r\n-        }\r\n-\r\n-        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n-\r\n-        if (!isPasswordValid) {\r\n-          throw new Error('Invalid password');\r\n-        }\r\n-\r\n-        return {\r\n-          id: user._id.toString(),\r\n-          email: user.email,\r\n-          name: `${user.firstName} ${user.lastName}`,\r\n-          role: user.role\r\n-        };\r\n-      }\r\n-    })\r\n-  ],\r\n-  callbacks: {\r\n-    async jwt({ token, user }: { token: any; user: any }) {\r\n-      if (user) {\r\n-        token.role = user.role;\r\n-      }\r\n-      return token;\r\n-    },\r\n-    async session({ session, token }: { session: any; token: any }) {\r\n-      if (session?.user) {\r\n-        session.user.role = token.role;\r\n-      }\r\n-      return session;\r\n-    }\r\n-  },\r\n-  pages: {\r\n-    signIn: '/login',\r\n-    error: '/login',\r\n-  },\r\n-  session: {\r\n-    strategy: 'jwt' as const,\r\n-  },\r\n-  secret: process.env.NEXTAUTH_SECRET,\r\n-};\r\n-\r\n const handler = NextAuth(authOptions);\r\n \r\n export { handler as GET, handler as POST }; \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        username: { label: \"Username\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        // Add your own logic here to validate the credentials\r\n        if (credentials?.username === process.env.ADMIN_USERNAME && \r\n            credentials?.password === process.env.ADMIN_PASSWORD) {\r\n          return {\r\n            id: \"1\",\r\n            name: \"Admin\",\r\n            email: \"admin@example.com\",\r\n          };\r\n        }\r\n        return null;\r\n      }\r\n    })\r\n  ],\r\n  pages: {\r\n    signIn: \"/admin/login\",\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n});\r\n\r\nexport { handler as GET, handler as POST }; "
        }
    ]
}