{
    "sourceFile": "src/app/api/cart/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746959403398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747462929144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,131 @@\n import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n-import { getServerSession } from \"next-auth/next\";\r\n-import { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\n+import { getServerSession } from \"next-auth\";\r\n+import { authOptions } from \"@/lib/auth\";\r\n+import { ObjectId } from \"mongodb\";\r\n \r\n // Lấy giỏ hàng\r\n-export async function GET() {\r\n+export async function GET(request) {\r\n   try {\r\n+    const { db } = await connectToDatabase();\r\n     const session = await getServerSession(authOptions);\r\n-    if (!session?.user?.email) {\r\n+    const userEmail = session?.user?.email;\r\n+\r\n+    if (!userEmail) {\r\n       return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n     }\r\n \r\n-    const { db } = await connectToDatabase();\r\n-    const cart = await db.collection(\"carts\").findOne({ userEmail: session.user.email });\r\n-    \r\n-    return NextResponse.json(cart?.items || []);\r\n+    const cart = await db.collection(\"carts\").findOne({ email: userEmail });\r\n+    return NextResponse.json(cart || { items: [] });\r\n   } catch (error) {\r\n-    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n+    console.error(\"Error fetching cart:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Failed to fetch cart\" },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n }\r\n \r\n // Cập nhật giỏ hàng\r\n-export async function POST(request: Request) {\r\n+export async function POST(request) {\r\n   try {\r\n+    const { db } = await connectToDatabase();\r\n     const session = await getServerSession(authOptions);\r\n-    if (!session?.user?.email) {\r\n+    const userEmail = session?.user?.email;\r\n+\r\n+    if (!userEmail) {\r\n       return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n     }\r\n \r\n-    const items = await request.json();\r\n-    const { db } = await connectToDatabase();\r\n+    const { productId, size, quantity } = await request.json();\r\n \r\n-    await db.collection(\"carts\").updateOne(\r\n-      { userEmail: session.user.email },\r\n-      { $set: { items, userEmail: session.user.email } },\r\n+    if (!productId || !size || quantity === undefined) {\r\n+      return NextResponse.json(\r\n+        { error: \"Missing required fields\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const product = await db\r\n+      .collection(\"products\")\r\n+      .findOne({ _id: new ObjectId(productId) });\r\n+\r\n+    if (!product) {\r\n+      return NextResponse.json(\r\n+        { error: \"Product not found\" },\r\n+        { status: 404 }\r\n+      );\r\n+    }\r\n+\r\n+    const updateField = `quantity${size}`;\r\n+    const availableQuantity = product[updateField] || 0;\r\n+\r\n+    if (quantity > availableQuantity) {\r\n+      return NextResponse.json(\r\n+        { error: \"Not enough stock available\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const result = await db.collection(\"carts\").updateOne(\r\n+      { email: userEmail },\r\n+      {\r\n+        $set: {\r\n+          email: userEmail,\r\n+          [`items.${productId}.${size}`]: quantity,\r\n+          updatedAt: new Date(),\r\n+        },\r\n+      },\r\n       { upsert: true }\r\n     );\r\n \r\n-    return NextResponse.json({ message: \"Cart updated successfully\" });\r\n+    return NextResponse.json({ success: true });\r\n   } catch (error) {\r\n-    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n+    console.error(\"Error updating cart:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Failed to update cart\" },\r\n+      { status: 500 }\r\n+    );\r\n   }\r\n+}\r\n+\r\n+export async function DELETE(request) {\r\n+  try {\r\n+    const { db } = await connectToDatabase();\r\n+    const session = await getServerSession(authOptions);\r\n+    const userEmail = session?.user?.email;\r\n+\r\n+    if (!userEmail) {\r\n+      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n+    }\r\n+\r\n+    const { productId, size } = await request.json();\r\n+\r\n+    if (!productId || !size) {\r\n+      return NextResponse.json(\r\n+        { error: \"Missing required fields\" },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n+    const result = await db.collection(\"carts\").updateOne(\r\n+      { email: userEmail },\r\n+      {\r\n+        $unset: {\r\n+          [`items.${productId}.${size}`]: \"\",\r\n+        },\r\n+        $set: {\r\n+          updatedAt: new Date(),\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    return NextResponse.json({ success: true });\r\n+  } catch (error) {\r\n+    console.error(\"Error removing item from cart:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Failed to remove item from cart\" },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747462952682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n-import { NextResponse } from \"next/server\";\r\n+import { NextRequest, NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { getServerSession } from \"next-auth\";\r\n import { authOptions } from \"@/lib/auth\";\r\n import { ObjectId } from \"mongodb\";\r\n \r\n // Lấy giỏ hàng\r\n-export async function GET(request) {\r\n+export async function GET(request: NextRequest) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const session = await getServerSession(authOptions);\r\n     const userEmail = session?.user?.email;\r\n@@ -26,9 +26,9 @@\n   }\r\n }\r\n \r\n // Cập nhật giỏ hàng\r\n-export async function POST(request) {\r\n+export async function POST(request: NextRequest) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const session = await getServerSession(authOptions);\r\n     const userEmail = session?.user?.email;\r\n@@ -88,9 +88,9 @@\n     );\r\n   }\r\n }\r\n \r\n-export async function DELETE(request) {\r\n+export async function DELETE(request: NextRequest) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const session = await getServerSession(authOptions);\r\n     const userEmail = session?.user?.email;\r\n"
                }
            ],
            "date": 1746959403398,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport { connectToDatabase } from \"@/lib/mongodb\";\r\nimport { getServerSession } from \"next-auth/next\";\r\nimport { authOptions } from \"@/app/api/auth/[...nextauth]/route\";\r\n\r\n// Lấy giỏ hàng\r\nexport async function GET() {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const { db } = await connectToDatabase();\r\n    const cart = await db.collection(\"carts\").findOne({ userEmail: session.user.email });\r\n    \r\n    return NextResponse.json(cart?.items || []);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// Cập nhật giỏ hàng\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const session = await getServerSession(authOptions);\r\n    if (!session?.user?.email) {\r\n      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n    }\r\n\r\n    const items = await request.json();\r\n    const { db } = await connectToDatabase();\r\n\r\n    await db.collection(\"carts\").updateOne(\r\n      { userEmail: session.user.email },\r\n      { $set: { items, userEmail: session.user.email } },\r\n      { upsert: true }\r\n    );\r\n\r\n    return NextResponse.json({ message: \"Cart updated successfully\" });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n  }\r\n} "
        }
    ]
}