{
    "sourceFile": "src/app/api/banners/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1746893159756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747382583937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n     }\r\n     \r\n     const banner = {\r\n       imageUrl: data.imageUrl,\r\n+      mobileImageUrl: data.mobileImageUrl || \"\",\r\n       title: data.title || \"\",\r\n       description: data.description || \"\",\r\n       link: data.link || \"\",\r\n       order: data.order || 0,\r\n"
                },
                {
                    "date": 1747382750929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,152 +1,152 @@\n-import { NextResponse } from \"next/server\";\r\n-import clientPromise from \"../../../lib/mongodb\";\r\n-import { ObjectId } from \"mongodb\";\r\n-\r\n-// GET all banners\r\n-export async function GET() {\r\n-  try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const banners = await db.collection(\"banners\").find({}).toArray();\r\n-    return NextResponse.json(banners);\r\n-  } catch (error) {\r\n-    console.error(\"Error fetching banners:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Failed to fetch banners\" },\r\n-      { status: 500 }\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-// POST new banner\r\n-export async function POST(request) {\r\n-  try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const data = await request.json();\r\n-    \r\n-    // Validate image URL format\r\n-    if (!data.imageUrl || !data.imageUrl.startsWith('/uploads/')) {\r\n-      return NextResponse.json(\r\n-        { error: \"Invalid image URL format. Must start with /uploads/\" },\r\n-        { status: 400 }\r\n-      );\r\n-    }\r\n-    \r\n-    const banner = {\r\n-      imageUrl: data.imageUrl,\r\n-      mobileImageUrl: data.mobileImageUrl || \"\",\r\n-      title: data.title || \"\",\r\n-      description: data.description || \"\",\r\n-      link: data.link || \"\",\r\n-      order: data.order || 0,\r\n-      isActive: data.isActive !== undefined ? data.isActive : true,\r\n-      createdAt: new Date(),\r\n-      updatedAt: new Date()\r\n-    };\r\n-    \r\n-    const result = await db.collection(\"banners\").insertOne(banner);\r\n-    \r\n-    return NextResponse.json({ \r\n-      success: true,\r\n-      banner: { ...banner, _id: result.insertedId }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Error creating banner:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Failed to create banner\" },\r\n-      { status: 500 }\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-// PUT update banner\r\n-export async function PUT(request) {\r\n-  try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const data = await request.json();\r\n-    \r\n-    if (!data._id) {\r\n-      return NextResponse.json(\r\n-        { error: \"Banner ID is required\" },\r\n-        { status: 400 }\r\n-      );\r\n-    }\r\n-\r\n-    // Validate image URL format if provided\r\n-    if (data.imageUrl && !data.imageUrl.startsWith('/uploads/')) {\r\n-      return NextResponse.json(\r\n-        { error: \"Invalid image URL format. Must start with /uploads/\" },\r\n-        { status: 400 }\r\n-      );\r\n-    }\r\n-    \r\n-    const updateData = {\r\n-      ...data,\r\n-      updatedAt: new Date()\r\n-    };\r\n-    delete updateData._id; // Remove _id from update data\r\n-    \r\n-    const result = await db.collection(\"banners\").updateOne(\r\n-      { _id: new ObjectId(data._id) },\r\n-      { $set: updateData }\r\n-    );\r\n-    \r\n-    if (result.matchedCount === 0) {\r\n-      return NextResponse.json(\r\n-        { error: \"Banner not found\" },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n-    \r\n-    return NextResponse.json({ \r\n-      success: true,\r\n-      message: \"Banner updated successfully\"\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Error updating banner:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Failed to update banner\" },\r\n-      { status: 500 }\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-// DELETE banner\r\n-export async function DELETE(request) {\r\n-  try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-    const data = await request.json();\r\n-    \r\n-    if (!data._id) {\r\n-      return NextResponse.json(\r\n-        { error: \"Banner ID is required\" },\r\n-        { status: 400 }\r\n-      );\r\n-    }\r\n-    \r\n-    const result = await db.collection(\"banners\").deleteOne({\r\n-      _id: new ObjectId(data._id)\r\n-    });\r\n-    \r\n-    if (result.deletedCount === 0) {\r\n-      return NextResponse.json(\r\n-        { error: \"Banner not found\" },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n-    \r\n-    return NextResponse.json({ \r\n-      success: true,\r\n-      message: \"Banner deleted successfully\"\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Error deleting banner:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Failed to delete banner\" },\r\n-      { status: 500 }\r\n-    );\r\n-  }\r\n+import { NextResponse } from \"next/server\";\n+import clientPromise from \"../../../lib/mongodb\";\n+import { ObjectId } from \"mongodb\";\n+\n+// GET all banners\n+export async function GET() {\n+  try {\n+    const client = await clientPromise;\n+    const db = client.db(\"aishh\");\n+    const banners = await db.collection(\"banners\").find({}).toArray();\n+    return NextResponse.json(banners);\n+  } catch (error) {\n+    console.error(\"Error fetching banners:\", error);\n+    return NextResponse.json(\n+      { error: \"Failed to fetch banners\" },\n+      { status: 500 }\n+    );\n+  }\n+}\n+\n+// POST new banner\n+export async function POST(request) {\n+  try {\n+    const client = await clientPromise;\n+    const db = client.db(\"aishh\");\n+    const data = await request.json();\n+    \n+    // Validate image URL format\n+    if (!data.imageUrl || !data.imageUrl.startsWith('/uploads/')) {\n+      return NextResponse.json(\n+        { error: \"Invalid image URL format. Must start with /uploads/\" },\n+        { status: 400 }\n+      );\n+    }\n+    \n+    const banner = {\n+      imageUrl: data.imageUrl,\n+      mobileImageUrl: data.mobileImageUrl || \"\",\n+      title: data.title || \"\",\n+      description: data.description || \"\",\n+      link: data.link || \"\",\n+      order: data.order || 0,\n+      isActive: data.isActive !== undefined ? data.isActive : true,\n+      createdAt: new Date(),\n+      updatedAt: new Date()\n+    };\n+    \n+    const result = await db.collection(\"banners\").insertOne(banner);\n+    \n+    return NextResponse.json({ \n+      success: true,\n+      banner: { ...banner, _id: result.insertedId }\n+    });\n+  } catch (error) {\n+    console.error(\"Error creating banner:\", error);\n+    return NextResponse.json(\n+      { error: \"Failed to create banner\" },\n+      { status: 500 }\n+    );\n+  }\n+}\n+\n+// PUT update banner\n+export async function PUT(request) {\n+  try {\n+    const client = await clientPromise;\n+    const db = client.db(\"aishh\");\n+    const data = await request.json();\n+    \n+    if (!data._id) {\n+      return NextResponse.json(\n+        { error: \"Banner ID is required\" },\n+        { status: 400 }\n+      );\n+    }\n+\n+    // Validate image URL format if provided\n+    if (data.imageUrl && !data.imageUrl.startsWith('/uploads/')) {\n+      return NextResponse.json(\n+        { error: \"Invalid image URL format. Must start with /uploads/\" },\n+        { status: 400 }\n+      );\n+    }\n+    \n+    const updateData = {\n+      ...data,\n+      updatedAt: new Date()\n+    };\n+    delete updateData._id; // Remove _id from update data\n+    \n+    const result = await db.collection(\"banners\").updateOne(\n+      { _id: new ObjectId(data._id) },\n+      { $set: updateData }\n+    );\n+    \n+    if (result.matchedCount === 0) {\n+      return NextResponse.json(\n+        { error: \"Banner not found\" },\n+        { status: 404 }\n+      );\n+    }\n+    \n+    return NextResponse.json({ \n+      success: true,\n+      message: \"Banner updated successfully\"\n+    });\n+  } catch (error) {\n+    console.error(\"Error updating banner:\", error);\n+    return NextResponse.json(\n+      { error: \"Failed to update banner\" },\n+      { status: 500 }\n+    );\n+  }\n+}\n+\n+// DELETE banner\n+export async function DELETE(request) {\n+  try {\n+    const client = await clientPromise;\n+    const db = client.db(\"aishh\");\n+    const data = await request.json();\n+    \n+    if (!data._id) {\n+      return NextResponse.json(\n+        { error: \"Banner ID is required\" },\n+        { status: 400 }\n+      );\n+    }\n+    \n+    const result = await db.collection(\"banners\").deleteOne({\n+      _id: new ObjectId(data._id)\n+    });\n+    \n+    if (result.deletedCount === 0) {\n+      return NextResponse.json(\n+        { error: \"Banner not found\" },\n+        { status: 404 }\n+      );\n+    }\n+    \n+    return NextResponse.json({ \n+      success: true,\n+      message: \"Banner deleted successfully\"\n+    });\n+  } catch (error) {\n+    console.error(\"Error deleting banner:\", error);\n+    return NextResponse.json(\n+      { error: \"Failed to delete banner\" },\n+      { status: 500 }\n+    );\n+  }\n } \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\r\nimport clientPromise from \"../../../lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\";\r\n\r\n// GET all banners\r\nexport async function GET() {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const banners = await db.collection(\"banners\").find({}).toArray();\r\n    return NextResponse.json(banners);\r\n  } catch (error) {\r\n    console.error(\"Error fetching banners:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch banners\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST new banner\r\nexport async function POST(request) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const data = await request.json();\r\n    \r\n    // Validate image URL format\r\n    if (!data.imageUrl || !data.imageUrl.startsWith('/uploads/')) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid image URL format. Must start with /uploads/\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const banner = {\r\n      imageUrl: data.imageUrl,\r\n      title: data.title || \"\",\r\n      description: data.description || \"\",\r\n      link: data.link || \"\",\r\n      order: data.order || 0,\r\n      isActive: data.isActive !== undefined ? data.isActive : true,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    const result = await db.collection(\"banners\").insertOne(banner);\r\n    \r\n    return NextResponse.json({ \r\n      success: true,\r\n      banner: { ...banner, _id: result.insertedId }\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating banner:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to create banner\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT update banner\r\nexport async function PUT(request) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const data = await request.json();\r\n    \r\n    if (!data._id) {\r\n      return NextResponse.json(\r\n        { error: \"Banner ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Validate image URL format if provided\r\n    if (data.imageUrl && !data.imageUrl.startsWith('/uploads/')) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid image URL format. Must start with /uploads/\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const updateData = {\r\n      ...data,\r\n      updatedAt: new Date()\r\n    };\r\n    delete updateData._id; // Remove _id from update data\r\n    \r\n    const result = await db.collection(\"banners\").updateOne(\r\n      { _id: new ObjectId(data._id) },\r\n      { $set: updateData }\r\n    );\r\n    \r\n    if (result.matchedCount === 0) {\r\n      return NextResponse.json(\r\n        { error: \"Banner not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      success: true,\r\n      message: \"Banner updated successfully\"\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error updating banner:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to update banner\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE banner\r\nexport async function DELETE(request) {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db(\"aishh\");\r\n    const data = await request.json();\r\n    \r\n    if (!data._id) {\r\n      return NextResponse.json(\r\n        { error: \"Banner ID is required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const result = await db.collection(\"banners\").deleteOne({\r\n      _id: new ObjectId(data._id)\r\n    });\r\n    \r\n    if (result.deletedCount === 0) {\r\n      return NextResponse.json(\r\n        { error: \"Banner not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      success: true,\r\n      message: \"Banner deleted successfully\"\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error deleting banner:\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to delete banner\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}