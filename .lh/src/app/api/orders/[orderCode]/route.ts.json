{
    "sourceFile": "src/app/api/orders/[orderCode]/route.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1747803969688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747890284989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,53 @@\n-import { NextResponse } from \"next/server\";\r\n-import { connectToDatabase } from \"@/lib/mongodb\";\r\n-import { ObjectId } from \"mongodb\";\r\n+import { NextResponse } from 'next/server';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import { getServerSession } from 'next-auth';\r\n+import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n   request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n-    const orderCode = params.orderCode;\r\n+    const session = await getServerSession(authOptions);\r\n+    const { orderCode } = params;\r\n \r\n-    console.log(\"Fetching order with code:\", orderCode);\r\n+    if (!orderCode) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Order code is required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n \r\n-    // Log tất cả các đơn hàng trong database\r\n-    const allOrders = await db.collection(\"orders\").find({}).toArray();\r\n-    console.log(\"All orders in database:\", allOrders);\r\n+    const { db } = await connectToDatabase();\r\n+    const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n-    const order = await db.collection(\"orders\").findOne({ orderNumber: orderCode });\r\n-    console.log(\"Query result:\", order);\r\n-\r\n     if (!order) {\r\n-      console.log(\"Order not found for code:\", orderCode);\r\n       return NextResponse.json(\r\n-        { ok: false, error: \"Order not found\" },\r\n+        { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    console.log(\"Found order:\", order);\r\n+    // Kiểm tra quyền truy cập\r\n+    if (session?.user?.email !== order.email) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 403 }\r\n+      );\r\n+    }\r\n \r\n-    return NextResponse.json({ ok: true, order });\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      order: {\r\n+        ...order,\r\n+        _id: order._id.toString()\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n-    console.error(\"Error fetching order:\", error);\r\n+    console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, error: \"Failed to fetch order\" },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747890652047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,23 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Kiểm tra quyền truy cập\r\n-    if (session?.user?.email !== order.email) {\r\n+    // Nếu không có session, trả về lỗi 401\r\n+    if (!session) {\r\n       return NextResponse.json(\r\n         { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n+    }\r\n+\r\n+    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n+    const isAdmin = session.user?.role === 'admin';\r\n+    const isOwner = session.user?.email === order.email;\r\n+\r\n+    if (!isAdmin && !isOwner) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Forbidden' },\r\n         { status: 403 }\r\n       );\r\n     }\r\n \r\n"
                },
                {
                    "date": 1747890664115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n       );\r\n     }\r\n \r\n     // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.role === 'admin';\r\n+    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n     const isOwner = session.user?.email === order.email;\r\n \r\n     if (!isAdmin && !isOwner) {\r\n       return NextResponse.json(\r\n"
                },
                {
                    "date": 1747905432859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  request: Request,\r\n+  req: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order code is required' },\r\n+        { error: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,29 +22,22 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order not found' },\r\n+        { error: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Nếu không có session, trả về lỗi 401\r\n-    if (!session) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n-    }\r\n+    // Kiểm tra quyền truy cập\r\n+    // Cho phép admin hoặc chủ đơn hàng xem\r\n+    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n+    const isOwner = session?.user?.email === order.email || order.email === session?.user?.email;\r\n \r\n-    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n-    const isOwner = session.user?.email === order.email;\r\n-\r\n     if (!isAdmin && !isOwner) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Forbidden' },\r\n-        { status: 403 }\r\n+        { error: 'Unauthorized' },\r\n+        { status: 401 }\r\n       );\r\n     }\r\n \r\n     return NextResponse.json({\r\n@@ -53,12 +46,13 @@\n         ...order,\r\n         _id: order._id.toString()\r\n       }\r\n     });\r\n+\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { error: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905453596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  req: Request,\r\n+  request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { error: 'Order code is required' },\r\n+        { ok: false, message: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,22 +22,29 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { error: 'Order not found' },\r\n+        { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Kiểm tra quyền truy cập\r\n-    // Cho phép admin hoặc chủ đơn hàng xem\r\n-    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n-    const isOwner = session?.user?.email === order.email || order.email === session?.user?.email;\r\n+    // Nếu không có session, trả về lỗi 401\r\n+    if (!session) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n+    }\r\n \r\n+    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n+    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n+    const isOwner = session.user?.email === order.email;\r\n+\r\n     if (!isAdmin && !isOwner) {\r\n       return NextResponse.json(\r\n-        { error: 'Unauthorized' },\r\n-        { status: 401 }\r\n+        { ok: false, message: 'Forbidden' },\r\n+        { status: 403 }\r\n       );\r\n     }\r\n \r\n     return NextResponse.json({\r\n@@ -46,13 +53,12 @@\n         ...order,\r\n         _id: order._id.toString()\r\n       }\r\n     });\r\n-\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Failed to fetch order' },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905531428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  request: Request,\r\n+  req: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order code is required' },\r\n+        { error: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,43 +22,60 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order not found' },\r\n+        { error: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Nếu không có session, trả về lỗi 401\r\n-    if (!session) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n+    // Cho phép admin xem tất cả đơn hàng\r\n+    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n+    if (isAdmin) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n-    const isOwner = session.user?.email === order.email;\r\n+    // Cho phép chủ đơn hàng xem đơn hàng của mình\r\n+    // Nếu đã đăng nhập, kiểm tra email\r\n+    if (session?.user?.email && session.user.email === order.email) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n+    }\r\n \r\n-    if (!isAdmin && !isOwner) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Forbidden' },\r\n-        { status: 403 }\r\n-      );\r\n+    // Nếu chưa đăng nhập, kiểm tra email từ query params\r\n+    const { searchParams } = new URL(req.url);\r\n+    const email = searchParams.get('email');\r\n+    if (email && email === order.email) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      order: {\r\n-        ...order,\r\n-        _id: order._id.toString()\r\n-      }\r\n-    });\r\n+    // Nếu không phải admin và không phải chủ đơn hàng\r\n+    return NextResponse.json(\r\n+      { error: 'Unauthorized' },\r\n+      { status: 401 }\r\n+    );\r\n+\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { error: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905552464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  req: Request,\r\n+  request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { error: 'Order code is required' },\r\n+        { ok: false, message: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,60 +22,43 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { error: 'Order not found' },\r\n+        { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Cho phép admin xem tất cả đơn hàng\r\n-    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n-    if (isAdmin) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    // Nếu không có session, trả về lỗi 401\r\n+    if (!session) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n     }\r\n \r\n-    // Cho phép chủ đơn hàng xem đơn hàng của mình\r\n-    // Nếu đã đăng nhập, kiểm tra email\r\n-    if (session?.user?.email && session.user.email === order.email) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n-    }\r\n+    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n+    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n+    const isOwner = session.user?.email === order.email;\r\n \r\n-    // Nếu chưa đăng nhập, kiểm tra email từ query params\r\n-    const { searchParams } = new URL(req.url);\r\n-    const email = searchParams.get('email');\r\n-    if (email && email === order.email) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    if (!isAdmin && !isOwner) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Forbidden' },\r\n+        { status: 403 }\r\n+      );\r\n     }\r\n \r\n-    // Nếu không phải admin và không phải chủ đơn hàng\r\n-    return NextResponse.json(\r\n-      { error: 'Unauthorized' },\r\n-      { status: 401 }\r\n-    );\r\n-\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      order: {\r\n+        ...order,\r\n+        _id: order._id.toString()\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Failed to fetch order' },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905618750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  request: Request,\r\n+  req: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order code is required' },\r\n+        { error: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,43 +22,60 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order not found' },\r\n+        { error: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Nếu không có session, trả về lỗi 401\r\n-    if (!session) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n+    // Cho phép admin xem tất cả đơn hàng\r\n+    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n+    if (isAdmin) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n-    const isOwner = session.user?.email === order.email;\r\n+    // Cho phép chủ đơn hàng xem đơn hàng của mình\r\n+    // Nếu đã đăng nhập, kiểm tra email\r\n+    if (session?.user?.email && session.user.email === order.email) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n+    }\r\n \r\n-    if (!isAdmin && !isOwner) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Forbidden' },\r\n-        { status: 403 }\r\n-      );\r\n+    // Nếu chưa đăng nhập, kiểm tra email từ query params\r\n+    const { searchParams } = new URL(req.url);\r\n+    const email = searchParams.get('email');\r\n+    if (email && email === order.email) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      order: {\r\n-        ...order,\r\n-        _id: order._id.toString()\r\n-      }\r\n-    });\r\n+    // Nếu không phải admin và không phải chủ đơn hàng\r\n+    return NextResponse.json(\r\n+      { error: 'Unauthorized' },\r\n+      { status: 401 }\r\n+    );\r\n+\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { error: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905651152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  req: Request,\r\n+  request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { error: 'Order code is required' },\r\n+        { ok: false, message: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,60 +22,43 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { error: 'Order not found' },\r\n+        { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Cho phép admin xem tất cả đơn hàng\r\n-    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n-    if (isAdmin) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    // Nếu không có session, trả về lỗi 401\r\n+    if (!session) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n     }\r\n \r\n-    // Cho phép chủ đơn hàng xem đơn hàng của mình\r\n-    // Nếu đã đăng nhập, kiểm tra email\r\n-    if (session?.user?.email && session.user.email === order.email) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n-    }\r\n+    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n+    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n+    const isOwner = session.user?.email === order.email;\r\n \r\n-    // Nếu chưa đăng nhập, kiểm tra email từ query params\r\n-    const { searchParams } = new URL(req.url);\r\n-    const email = searchParams.get('email');\r\n-    if (email && email === order.email) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    if (!isAdmin && !isOwner) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Forbidden' },\r\n+        { status: 403 }\r\n+      );\r\n     }\r\n \r\n-    // Nếu không phải admin và không phải chủ đơn hàng\r\n-    return NextResponse.json(\r\n-      { error: 'Unauthorized' },\r\n-      { status: 401 }\r\n-    );\r\n-\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      order: {\r\n+        ...order,\r\n+        _id: order._id.toString()\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Failed to fetch order' },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905699071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  request: Request,\r\n+  req: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order code is required' },\r\n+        { error: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,43 +22,60 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order not found' },\r\n+        { error: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Nếu không có session, trả về lỗi 401\r\n-    if (!session) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n+    // Cho phép admin xem tất cả đơn hàng\r\n+    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n+    if (isAdmin) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n-    const isOwner = session.user?.email === order.email;\r\n+    // Cho phép chủ đơn hàng xem đơn hàng của mình\r\n+    // Nếu đã đăng nhập, kiểm tra email\r\n+    if (session?.user?.email && session.user.email === order.email) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n+    }\r\n \r\n-    if (!isAdmin && !isOwner) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Forbidden' },\r\n-        { status: 403 }\r\n-      );\r\n+    // Nếu chưa đăng nhập, kiểm tra email từ query params\r\n+    const { searchParams } = new URL(req.url);\r\n+    const email = searchParams.get('email');\r\n+    if (email && email === order.email) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      order: {\r\n-        ...order,\r\n-        _id: order._id.toString()\r\n-      }\r\n-    });\r\n+    // Nếu không phải admin và không phải chủ đơn hàng\r\n+    return NextResponse.json(\r\n+      { error: 'Unauthorized' },\r\n+      { status: 401 }\r\n+    );\r\n+\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { error: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905707466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,18 @@\n import { getServerSession } from 'next-auth';\r\n import { authOptions } from '@/lib/auth';\r\n \r\n export async function GET(\r\n-  req: Request,\r\n+  request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { error: 'Order code is required' },\r\n+        { ok: false, message: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,60 +22,43 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { error: 'Order not found' },\r\n+        { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Cho phép admin xem tất cả đơn hàng\r\n-    const isAdmin = session?.user?.email === process.env.ADMIN_EMAIL;\r\n-    if (isAdmin) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    // Nếu không có session, trả về lỗi 401\r\n+    if (!session) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n     }\r\n \r\n-    // Cho phép chủ đơn hàng xem đơn hàng của mình\r\n-    // Nếu đã đăng nhập, kiểm tra email\r\n-    if (session?.user?.email && session.user.email === order.email) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n-    }\r\n+    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n+    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n+    const isOwner = session.user?.email === order.email;\r\n \r\n-    // Nếu chưa đăng nhập, kiểm tra email từ query params\r\n-    const { searchParams } = new URL(req.url);\r\n-    const email = searchParams.get('email');\r\n-    if (email && email === order.email) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    if (!isAdmin && !isOwner) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Forbidden' },\r\n+        { status: 403 }\r\n+      );\r\n     }\r\n \r\n-    // Nếu không phải admin và không phải chủ đơn hàng\r\n-    return NextResponse.json(\r\n-      { error: 'Unauthorized' },\r\n-      { status: 401 }\r\n-    );\r\n-\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      order: {\r\n+        ...order,\r\n+        _id: order._id.toString()\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Failed to fetch order' },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905768471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,14 +7,13 @@\n   request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n-    const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order code is required' },\r\n+        { error: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -22,32 +21,13 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { ok: false, message: 'Order not found' },\r\n+        { error: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Nếu không có session, trả về lỗi 401\r\n-    if (!session) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n-    }\r\n-\r\n-    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n-    const isOwner = session.user?.email === order.email;\r\n-\r\n-    if (!isAdmin && !isOwner) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Forbidden' },\r\n-        { status: 403 }\r\n-      );\r\n-    }\r\n-\r\n     return NextResponse.json({\r\n       ok: true,\r\n       order: {\r\n         ...order,\r\n@@ -56,9 +36,9 @@\n     });\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { error: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747905800610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,13 +7,14 @@\n   request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n   try {\r\n+    const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n-        { error: 'Order code is required' },\r\n+        { ok: false, message: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n@@ -21,13 +22,32 @@\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     if (!order) {\r\n       return NextResponse.json(\r\n-        { error: 'Order not found' },\r\n+        { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n+    // Nếu không có session, trả về lỗi 401\r\n+    if (!session) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n+    }\r\n+\r\n+    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n+    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n+    const isOwner = session.user?.email === order.email;\r\n+\r\n+    if (!isAdmin && !isOwner) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Forbidden' },\r\n+        { status: 403 }\r\n+      );\r\n+    }\r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n       order: {\r\n         ...order,\r\n@@ -36,9 +56,9 @@\n     });\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { error: 'Failed to fetch order' },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747906008204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n+    const { searchParams } = new URL(request.url);\r\n+    const email = searchParams.get('email');\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n         { ok: false, message: 'Order code is required' },\r\n@@ -27,34 +29,38 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Nếu không có session, trả về lỗi 401\r\n-    if (!session) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n+    // Cho phép admin xem tất cả đơn hàng\r\n+    const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n+    if (isAdmin) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    // Kiểm tra quyền truy cập - cho phép admin hoặc chủ đơn hàng\r\n-    const isAdmin = session.user?.email === 'aish.aish.vn@gmail.com';\r\n-    const isOwner = session.user?.email === order.email;\r\n-\r\n-    if (!isAdmin && !isOwner) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Forbidden' },\r\n-        { status: 403 }\r\n-      );\r\n+    // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n+    const isOwner = session?.user?.email === order.email || email === order.email;\r\n+    if (isOwner) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      order: {\r\n-        ...order,\r\n-        _id: order._id.toString()\r\n-      }\r\n-    });\r\n+    // Nếu không phải admin và không phải chủ đơn hàng\r\n+    return NextResponse.json(\r\n+      { ok: false, message: 'Unauthorized' },\r\n+      { status: 401 }\r\n+    );\r\n+\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n       { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n"
                },
                {
                    "date": 1747906589862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,8 @@\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n-    const { searchParams } = new URL(request.url);\r\n-    const email = searchParams.get('email');\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n         { ok: false, message: 'Order code is required' },\r\n@@ -29,37 +27,26 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Cho phép admin xem tất cả đơn hàng\r\n+    // Chỉ cho phép admin hoặc chủ đơn hàng đã đăng nhập xem đơn hàng\r\n     const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n-    if (isAdmin) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n-    }\r\n+    const isOwner = session?.user?.email === order.userId;\r\n \r\n-    // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n-    const isOwner = session?.user?.email === order.email || email === order.email;\r\n-    if (isOwner) {\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    if (!isAdmin && !isOwner) {\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 401 }\r\n+      );\r\n     }\r\n \r\n-    // Nếu không phải admin và không phải chủ đơn hàng\r\n-    return NextResponse.json(\r\n-      { ok: false, message: 'Unauthorized' },\r\n-      { status: 401 }\r\n-    );\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      order: {\r\n+        ...order,\r\n+        _id: order._id.toString()\r\n+      }\r\n+    });\r\n \r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747906779153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n ) {\r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n+    const { searchParams } = new URL(request.url);\r\n+    const email = searchParams.get('email');\r\n \r\n     if (!orderCode) {\r\n       return NextResponse.json(\r\n         { ok: false, message: 'Order code is required' },\r\n@@ -27,26 +29,39 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Chỉ cho phép admin hoặc chủ đơn hàng đã đăng nhập xem đơn hàng\r\n+    // Cho phép admin xem tất cả đơn hàng\r\n     const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n+    if (isAdmin) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n     const isOwner = session?.user?.email === order.userId;\r\n+    const isOrderSuccessPage = email === order.email; // Cho phép xem trong trang order success\r\n \r\n-    if (!isAdmin && !isOwner) {\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 401 }\r\n-      );\r\n+    if (isOwner || isOrderSuccessPage) {\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        order: {\r\n+          ...order,\r\n+          _id: order._id.toString()\r\n+        }\r\n+      });\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      order: {\r\n-        ...order,\r\n-        _id: order._id.toString()\r\n-      }\r\n-    });\r\n+    // Nếu không phải admin và không phải chủ đơn hàng\r\n+    return NextResponse.json(\r\n+      { ok: false, message: 'Unauthorized' },\r\n+      { status: 401 }\r\n+    );\r\n \r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747907533262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,12 @@\n     const { orderCode } = params;\r\n     const { searchParams } = new URL(request.url);\r\n     const email = searchParams.get('email');\r\n \r\n+    console.log('Fetching order:', { orderCode, email, sessionEmail: session?.user?.email });\r\n+\r\n     if (!orderCode) {\r\n+      console.error('Missing order code');\r\n       return NextResponse.json(\r\n         { ok: false, message: 'Order code is required' },\r\n         { status: 400 }\r\n       );\r\n@@ -22,9 +25,12 @@\n \r\n     const { db } = await connectToDatabase();\r\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n+    console.log('Found order:', order);\r\n+\r\n     if (!order) {\r\n+      console.error('Order not found:', orderCode);\r\n       return NextResponse.json(\r\n         { ok: false, message: 'Order not found' },\r\n         { status: 404 }\r\n       );\r\n@@ -32,8 +38,9 @@\n \r\n     // Cho phép admin xem tất cả đơn hàng\r\n     const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n     if (isAdmin) {\r\n+      console.log('Admin access granted');\r\n       return NextResponse.json({\r\n         ok: true,\r\n         order: {\r\n           ...order,\r\n@@ -45,9 +52,12 @@\n     // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n     const isOwner = session?.user?.email === order.userId;\r\n     const isOrderSuccessPage = email === order.email; // Cho phép xem trong trang order success\r\n \r\n+    console.log('Access check:', { isOwner, isOrderSuccessPage, orderEmail: order.email, providedEmail: email });\r\n+\r\n     if (isOwner || isOrderSuccessPage) {\r\n+      console.log('Access granted');\r\n       return NextResponse.json({\r\n         ok: true,\r\n         order: {\r\n           ...order,\r\n@@ -56,8 +66,9 @@\n       });\r\n     }\r\n \r\n     // Nếu không phải admin và không phải chủ đơn hàng\r\n+    console.error('Unauthorized access attempt');\r\n     return NextResponse.json(\r\n       { ok: false, message: 'Unauthorized' },\r\n       { status: 401 }\r\n     );\r\n"
                },
                {
                    "date": 1747907828441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,16 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n+    if (!email) {\r\n+      console.error('Missing email parameter');\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Email is required' },\r\n+        { status: 400 }\r\n+      );\r\n+    }\r\n+\r\n     const { db } = await connectToDatabase();\r\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     console.log('Found order:', order);\r\n@@ -52,9 +60,16 @@\n     // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n     const isOwner = session?.user?.email === order.userId;\r\n     const isOrderSuccessPage = email === order.email; // Cho phép xem trong trang order success\r\n \r\n-    console.log('Access check:', { isOwner, isOrderSuccessPage, orderEmail: order.email, providedEmail: email });\r\n+    console.log('Access check:', { \r\n+      isOwner, \r\n+      isOrderSuccessPage, \r\n+      orderEmail: order.email, \r\n+      providedEmail: email,\r\n+      orderUserId: order.userId,\r\n+      sessionEmail: session?.user?.email\r\n+    });\r\n \r\n     if (isOwner || isOrderSuccessPage) {\r\n       console.log('Access granted');\r\n       return NextResponse.json({\r\n"
                },
                {
                    "date": 1747907834972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,16 +22,8 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n-    if (!email) {\r\n-      console.error('Missing email parameter');\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Email is required' },\r\n-        { status: 400 }\r\n-      );\r\n-    }\r\n-\r\n     const { db } = await connectToDatabase();\r\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     console.log('Found order:', order);\r\n@@ -60,16 +52,9 @@\n     // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n     const isOwner = session?.user?.email === order.userId;\r\n     const isOrderSuccessPage = email === order.email; // Cho phép xem trong trang order success\r\n \r\n-    console.log('Access check:', { \r\n-      isOwner, \r\n-      isOrderSuccessPage, \r\n-      orderEmail: order.email, \r\n-      providedEmail: email,\r\n-      orderUserId: order.userId,\r\n-      sessionEmail: session?.user?.email\r\n-    });\r\n+    console.log('Access check:', { isOwner, isOrderSuccessPage, orderEmail: order.email, providedEmail: email });\r\n \r\n     if (isOwner || isOrderSuccessPage) {\r\n       console.log('Access granted');\r\n       return NextResponse.json({\r\n"
                },
                {
                    "date": 1748320305603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,14 @@\n       );\r\n     }\r\n \r\n     const { db } = await connectToDatabase();\r\n-    const order = await db.collection('orders').findOne({ orderCode });\r\n+    \r\n+    // Tìm đơn hàng theo mã đơn hàng và email\r\n+    const order = await db.collection('orders').findOne({\r\n+      orderCode,\r\n+      email: email || { $exists: true } // Nếu có email thì tìm theo email, không thì tìm tất cả\r\n+    });\r\n \r\n     console.log('Found order:', order);\r\n \r\n     if (!order) {\r\n@@ -75,9 +80,9 @@\n \r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { ok: false, message: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748320609754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     \r\n     // Tìm đơn hàng theo mã đơn hàng và email\r\n     const order = await db.collection('orders').findOne({\r\n       orderCode,\r\n-      email: email || { $exists: true } // Nếu có email thì tìm theo email, không thì tìm tất cả\r\n+      ...(email ? { email } : {}) // Chỉ thêm điều kiện email nếu có email\r\n     });\r\n \r\n     console.log('Found order:', order);\r\n \r\n"
                },
                {
                    "date": 1748321391581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n export async function GET(\r\n   request: Request,\r\n   { params }: { params: { orderCode: string } }\r\n ) {\r\n+  let mongoClient = null;\r\n+  \r\n   try {\r\n     const session = await getServerSession(authOptions);\r\n     const { orderCode } = params;\r\n     const { searchParams } = new URL(request.url);\r\n@@ -22,9 +24,10 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n-    const { db } = await connectToDatabase();\r\n+    const { db, client } = await connectToDatabase();\r\n+    mongoClient = client;\r\n     \r\n     // Tìm đơn hàng theo mã đơn hàng và email\r\n     const order = await db.collection('orders').findOne({\r\n       orderCode,\r\n@@ -83,6 +86,11 @@\n     return NextResponse.json(\r\n       { ok: false, message: 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n+  } finally {\r\n+    // Đóng kết nối MongoDB nếu có\r\n+    if (mongoClient) {\r\n+      await mongoClient.close();\r\n+    }\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748489231031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,10 @@\n \r\n     const { db, client } = await connectToDatabase();\r\n     mongoClient = client;\r\n     \r\n-    // Tìm đơn hàng theo mã đơn hàng và email\r\n-    const order = await db.collection('orders').findOne({\r\n-      orderCode,\r\n-      ...(email ? { email } : {}) // Chỉ thêm điều kiện email nếu có email\r\n-    });\r\n+    // Tìm đơn hàng theo mã đơn hàng\r\n+    const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     console.log('Found order:', order);\r\n \r\n     if (!order) {\r\n@@ -57,39 +54,34 @@\n       });\r\n     }\r\n \r\n     // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n-    const isOwner = session?.user?.email === order.userId;\r\n-    const isOrderSuccessPage = email === order.email; // Cho phép xem trong trang order success\r\n+    const isOwner = session?.user?.email === order.email;\r\n+    const isOrderSuccessPage = email === order.email;\r\n \r\n-    console.log('Access check:', { isOwner, isOrderSuccessPage, orderEmail: order.email, providedEmail: email });\r\n-\r\n-    if (isOwner || isOrderSuccessPage) {\r\n-      console.log('Access granted');\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        order: {\r\n-          ...order,\r\n-          _id: order._id.toString()\r\n-        }\r\n-      });\r\n+    if (!isOwner && !isOrderSuccessPage) {\r\n+      console.error('Unauthorized access attempt');\r\n+      return NextResponse.json(\r\n+        { ok: false, message: 'Unauthorized' },\r\n+        { status: 403 }\r\n+      );\r\n     }\r\n \r\n-    // Nếu không phải admin và không phải chủ đơn hàng\r\n-    console.error('Unauthorized access attempt');\r\n-    return NextResponse.json(\r\n-      { ok: false, message: 'Unauthorized' },\r\n-      { status: 401 }\r\n-    );\r\n+    return NextResponse.json({\r\n+      ok: true,\r\n+      order: {\r\n+        ...order,\r\n+        _id: order._id.toString()\r\n+      }\r\n+    });\r\n \r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: 'Failed to fetch order' },\r\n+      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n       { status: 500 }\r\n     );\r\n   } finally {\r\n-    // Đóng kết nối MongoDB nếu có\r\n     if (mongoClient) {\r\n       await mongoClient.close();\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1748490173506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \r\n     const { db, client } = await connectToDatabase();\r\n     mongoClient = client;\r\n     \r\n-    // Tìm đơn hàng theo mã đơn hàng\r\n+    // Find order by orderCode\r\n     const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n     console.log('Found order:', order);\r\n \r\n@@ -40,9 +40,9 @@\n         { status: 404 }\r\n       );\r\n     }\r\n \r\n-    // Cho phép admin xem tất cả đơn hàng\r\n+    // Allow admin to view all orders\r\n     const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n     if (isAdmin) {\r\n       console.log('Admin access granted');\r\n       return NextResponse.json({\r\n@@ -53,9 +53,9 @@\n         }\r\n       });\r\n     }\r\n \r\n-    // Cho phép chủ đơn hàng xem đơn hàng của họ\r\n+    // Allow order owner to view their order\r\n     const isOwner = session?.user?.email === order.email;\r\n     const isOrderSuccessPage = email === order.email;\r\n \r\n     if (!isOwner && !isOrderSuccessPage) {\r\n"
                },
                {
                    "date": 1748492020144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,65 +24,81 @@\n         { status: 400 }\r\n       );\r\n     }\r\n \r\n-    const { db, client } = await connectToDatabase();\r\n-    mongoClient = client;\r\n-    \r\n-    // Find order by orderCode\r\n-    const order = await db.collection('orders').findOne({ orderCode });\r\n+    try {\r\n+      const { db, client } = await connectToDatabase();\r\n+      mongoClient = client;\r\n+      \r\n+      // Find order by orderCode\r\n+      const order = await db.collection('orders').findOne({ orderCode });\r\n \r\n-    console.log('Found order:', order);\r\n+      console.log('Found order:', order);\r\n \r\n-    if (!order) {\r\n-      console.error('Order not found:', orderCode);\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Order not found' },\r\n-        { status: 404 }\r\n-      );\r\n-    }\r\n+      if (!order) {\r\n+        console.error('Order not found:', orderCode);\r\n+        return NextResponse.json(\r\n+          { ok: false, message: 'Order not found' },\r\n+          { status: 404 }\r\n+        );\r\n+      }\r\n \r\n-    // Allow admin to view all orders\r\n-    const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n-    if (isAdmin) {\r\n-      console.log('Admin access granted');\r\n+      // Allow admin to view all orders\r\n+      const isAdmin = session?.user?.email === 'aish.aish.vn@gmail.com';\r\n+      if (isAdmin) {\r\n+        console.log('Admin access granted');\r\n+        return NextResponse.json({\r\n+          ok: true,\r\n+          order: {\r\n+            ...order,\r\n+            _id: order._id.toString()\r\n+          }\r\n+        });\r\n+      }\r\n+\r\n+      // Allow order owner to view their order\r\n+      const isOwner = session?.user?.email === order.email;\r\n+      const isOrderSuccessPage = email === order.email;\r\n+\r\n+      console.log('Access check:', { isOwner, isOrderSuccessPage, orderEmail: order.email });\r\n+\r\n+      if (!isOwner && !isOrderSuccessPage) {\r\n+        console.error('Unauthorized access attempt');\r\n+        return NextResponse.json(\r\n+          { ok: false, message: 'Unauthorized' },\r\n+          { status: 403 }\r\n+        );\r\n+      }\r\n+\r\n       return NextResponse.json({\r\n         ok: true,\r\n         order: {\r\n           ...order,\r\n           _id: order._id.toString()\r\n         }\r\n       });\r\n-    }\r\n \r\n-    // Allow order owner to view their order\r\n-    const isOwner = session?.user?.email === order.email;\r\n-    const isOrderSuccessPage = email === order.email;\r\n-\r\n-    if (!isOwner && !isOrderSuccessPage) {\r\n-      console.error('Unauthorized access attempt');\r\n-      return NextResponse.json(\r\n-        { ok: false, message: 'Unauthorized' },\r\n-        { status: 403 }\r\n-      );\r\n+    } catch (dbError) {\r\n+      console.error('Database error:', dbError);\r\n+      throw dbError;\r\n     }\r\n \r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      order: {\r\n-        ...order,\r\n-        _id: order._id.toString()\r\n-      }\r\n-    });\r\n-\r\n   } catch (error) {\r\n     console.error('Error fetching order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: error instanceof Error ? error.message : 'Failed to fetch order' },\r\n+      { \r\n+        ok: false, \r\n+        message: error instanceof Error ? error.message : 'Failed to fetch order',\r\n+        error: error instanceof Error ? error.message : 'Unknown error'\r\n+      },\r\n       { status: 500 }\r\n     );\r\n   } finally {\r\n     if (mongoClient) {\r\n-      await mongoClient.close();\r\n+      try {\r\n+        await mongoClient.close();\r\n+      } catch (closeError) {\r\n+        console.error('Error closing MongoDB connection:', closeError);\r\n+      }\r\n     }\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748626893330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,15 @@\n         return NextResponse.json({\r\n           ok: true,\r\n           order: {\r\n             ...order,\r\n-            _id: order._id.toString()\r\n+            _id: order._id.toString(),\r\n+            promoCode: order.promoCode ? {\r\n+              code: order.promoCode.code,\r\n+              type: order.promoCode.type,\r\n+              value: order.promoCode.value,\r\n+              maxAmount: order.promoCode.maxAmount || null\r\n+            } : null\r\n           }\r\n         });\r\n       }\r\n \r\n@@ -72,9 +78,15 @@\n       return NextResponse.json({\r\n         ok: true,\r\n         order: {\r\n           ...order,\r\n-          _id: order._id.toString()\r\n+          _id: order._id.toString(),\r\n+          promoCode: order.promoCode ? {\r\n+            code: order.promoCode.code,\r\n+            type: order.promoCode.type,\r\n+            value: order.promoCode.value,\r\n+            maxAmount: order.promoCode.maxAmount || null\r\n+          } : null\r\n         }\r\n       });\r\n \r\n     } catch (dbError) {\r\n"
                },
                {
                    "date": 1748627274366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,15 +49,9 @@\n         return NextResponse.json({\r\n           ok: true,\r\n           order: {\r\n             ...order,\r\n-            _id: order._id.toString(),\r\n-            promoCode: order.promoCode ? {\r\n-              code: order.promoCode.code,\r\n-              type: order.promoCode.type,\r\n-              value: order.promoCode.value,\r\n-              maxAmount: order.promoCode.maxAmount || null\r\n-            } : null\r\n+            _id: order._id.toString()\r\n           }\r\n         });\r\n       }\r\n \r\n@@ -78,15 +72,9 @@\n       return NextResponse.json({\r\n         ok: true,\r\n         order: {\r\n           ...order,\r\n-          _id: order._id.toString(),\r\n-          promoCode: order.promoCode ? {\r\n-            code: order.promoCode.code,\r\n-            type: order.promoCode.type,\r\n-            value: order.promoCode.value,\r\n-            maxAmount: order.promoCode.maxAmount || null\r\n-          } : null\r\n+          _id: order._id.toString()\r\n         }\r\n       });\r\n \r\n     } catch (dbError) {\r\n"
                }
            ],
            "date": 1747803969688,
            "name": "Commit-0",
            "content": "import { NextResponse } from \"next/server\";\r\nimport { connectToDatabase } from \"@/lib/mongodb\";\r\nimport { ObjectId } from \"mongodb\";\r\n\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { orderCode: string } }\r\n) {\r\n  try {\r\n    const { db } = await connectToDatabase();\r\n    const orderCode = params.orderCode;\r\n\r\n    console.log(\"Fetching order with code:\", orderCode);\r\n\r\n    // Log tất cả các đơn hàng trong database\r\n    const allOrders = await db.collection(\"orders\").find({}).toArray();\r\n    console.log(\"All orders in database:\", allOrders);\r\n\r\n    const order = await db.collection(\"orders\").findOne({ orderNumber: orderCode });\r\n    console.log(\"Query result:\", order);\r\n\r\n    if (!order) {\r\n      console.log(\"Order not found for code:\", orderCode);\r\n      return NextResponse.json(\r\n        { ok: false, error: \"Order not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    console.log(\"Found order:\", order);\r\n\r\n    return NextResponse.json({ ok: true, order });\r\n  } catch (error) {\r\n    console.error(\"Error fetching order:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, error: \"Failed to fetch order\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}