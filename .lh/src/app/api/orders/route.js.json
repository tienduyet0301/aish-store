{
    "sourceFile": "src/app/api/orders/route.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1746893159937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747059203456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,21 @@\n import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"../../../lib/mongodb\";\r\n-import Order from \"../../../models/Order\";\r\n+import { createOrder } from \"../../../models/Order\";\r\n \r\n export async function POST(request) {\r\n   try {\r\n-    await connectToDatabase();\r\n+    const { db } = await connectToDatabase();\r\n     const orderData = await request.json();\r\n \r\n     // Tạo đơn hàng mới\r\n-    const order = new Order({\r\n-      ...orderData,\r\n-      createdAt: new Date(),\r\n-      updatedAt: new Date()\r\n-    });\r\n+    const result = await createOrder(db, orderData);\r\n \r\n-    // Lưu đơn hàng vào database\r\n-    await order.save();\r\n-\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n-      orderId: order._id,\r\n-      orderCode: order.orderCode\r\n+      orderId: result.insertedId,\r\n+      orderCode: orderData.orderCode\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Error creating order:\", error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747062407108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,5 +22,25 @@\n       { ok: false, message: \"Có lỗi xảy ra khi tạo đơn hàng\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n+}\r\n+\r\n+export async function GET() {\r\n+  try {\r\n+    const { db } = await connectToDatabase();\r\n+    \r\n+    // Lấy tất cả đơn hàng và sắp xếp theo thời gian tạo mới nhất\r\n+    const orders = await db.collection(\"orders\")\r\n+      .find({})\r\n+      .sort({ createdAt: -1 })\r\n+      .toArray();\r\n+\r\n+    return NextResponse.json({ orders });\r\n+  } catch (error) {\r\n+    console.error(\"Error fetching orders:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Failed to fetch orders\" },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747064165318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,24 +3,43 @@\n import { createOrder } from \"../../../models/Order\";\r\n \r\n export async function POST(request) {\r\n   try {\r\n-    const { db } = await connectToDatabase();\r\n     const orderData = await request.json();\r\n \r\n-    // Tạo đơn hàng mới\r\n-    const result = await createOrder(db, orderData);\r\n+    // Thêm thông tin thời gian và trạng thái\r\n+    const orderWithMetadata = {\r\n+      ...orderData,\r\n+      status: 'pending',\r\n+      paymentStatus: 'pending',\r\n+      createdAt: new Date().toISOString(),\r\n+      updatedAt: new Date().toISOString()\r\n+    };\r\n \r\n+    const { db } = await connectToDatabase();\r\n+    \r\n+    // Lưu đơn hàng vào database\r\n+    const result = await db.collection('orders').insertOne(orderWithMetadata);\r\n+\r\n+    if (!result.acknowledged) {\r\n+      return NextResponse.json(\r\n+        { message: 'Failed to create order' },\r\n+        { status: 500 }\r\n+      );\r\n+    }\r\n+\r\n+    // Trả về đơn hàng đã tạo\r\n     return NextResponse.json({\r\n-      ok: true,\r\n-      message: \"Đơn hàng đã được tạo thành công\",\r\n-      orderId: result.insertedId,\r\n-      orderCode: orderData.orderCode\r\n+      message: 'Order created successfully',\r\n+      order: {\r\n+        ...orderWithMetadata,\r\n+        _id: result.insertedId\r\n+      }\r\n     });\r\n   } catch (error) {\r\n-    console.error(\"Error creating order:\", error);\r\n+    console.error('Error creating order:', error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: \"Có lỗi xảy ra khi tạo đơn hàng\" },\r\n+      { message: 'Internal server error' },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1747064323228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,43 +3,24 @@\n import { createOrder } from \"../../../models/Order\";\r\n \r\n export async function POST(request) {\r\n   try {\r\n+    const { db } = await connectToDatabase();\r\n     const orderData = await request.json();\r\n \r\n-    // Thêm thông tin thời gian và trạng thái\r\n-    const orderWithMetadata = {\r\n-      ...orderData,\r\n-      status: 'pending',\r\n-      paymentStatus: 'pending',\r\n-      createdAt: new Date().toISOString(),\r\n-      updatedAt: new Date().toISOString()\r\n-    };\r\n+    // Tạo đơn hàng mới\r\n+    const result = await createOrder(db, orderData);\r\n \r\n-    const { db } = await connectToDatabase();\r\n-    \r\n-    // Lưu đơn hàng vào database\r\n-    const result = await db.collection('orders').insertOne(orderWithMetadata);\r\n-\r\n-    if (!result.acknowledged) {\r\n-      return NextResponse.json(\r\n-        { message: 'Failed to create order' },\r\n-        { status: 500 }\r\n-      );\r\n-    }\r\n-\r\n-    // Trả về đơn hàng đã tạo\r\n     return NextResponse.json({\r\n-      message: 'Order created successfully',\r\n-      order: {\r\n-        ...orderWithMetadata,\r\n-        _id: result.insertedId\r\n-      }\r\n+      ok: true,\r\n+      message: \"Đơn hàng đã được tạo thành công\",\r\n+      orderId: result.insertedId,\r\n+      orderCode: orderData.orderCode\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error creating order:', error);\r\n+    console.error(\"Error creating order:\", error);\r\n     return NextResponse.json(\r\n-      { message: 'Internal server error' },\r\n+      { ok: false, message: \"Có lỗi xảy ra khi tạo đơn hàng\" },\r\n       { status: 500 }\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1747066549428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,19 +24,35 @@\n     );\r\n   }\r\n }\r\n \r\n-export async function GET() {\r\n+export async function GET(request) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n-    \r\n-    // Lấy tất cả đơn hàng và sắp xếp theo thời gian tạo mới nhất\r\n-    const orders = await db.collection(\"orders\")\r\n-      .find({})\r\n-      .sort({ createdAt: -1 })\r\n-      .toArray();\r\n+    const { searchParams } = new URL(request.url);\r\n+    const orderCode = searchParams.get('orderCode');\r\n \r\n-    return NextResponse.json({ orders });\r\n+    if (orderCode) {\r\n+      // Nếu có orderCode, tìm đơn hàng cụ thể\r\n+      const order = await db.collection(\"orders\").findOne({ orderCode });\r\n+      \r\n+      if (!order) {\r\n+        return NextResponse.json(\r\n+          { error: \"Order not found\" },\r\n+          { status: 404 }\r\n+        );\r\n+      }\r\n+\r\n+      return NextResponse.json(order);\r\n+    } else {\r\n+      // Nếu không có orderCode, lấy tất cả đơn hàng\r\n+      const orders = await db.collection(\"orders\")\r\n+        .find({})\r\n+        .sort({ createdAt: -1 })\r\n+        .toArray();\r\n+\r\n+      return NextResponse.json({ orders });\r\n+    }\r\n   } catch (error) {\r\n     console.error(\"Error fetching orders:\", error);\r\n     return NextResponse.json(\r\n       { error: \"Failed to fetch orders\" },\r\n"
                },
                {
                    "date": 1747112152647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import { NextResponse } from \"next/server\";\r\n import { connectToDatabase } from \"../../../lib/mongodb\";\r\n import { createOrder } from \"../../../models/Order\";\r\n+import { getServerSession } from \"next-auth/next\";\r\n+import { authOptions } from \"../../api/auth/[...nextauth]/route\";\r\n \r\n export async function POST(request) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -30,27 +32,31 @@\n     const { db } = await connectToDatabase();\r\n     const { searchParams } = new URL(request.url);\r\n     const orderCode = searchParams.get('orderCode');\r\n \r\n+    // Lấy email user hiện tại từ session\r\n+    const session = await getServerSession(authOptions);\r\n+    const userEmail = session?.user?.email;\r\n+    if (!userEmail) {\r\n+      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n+    }\r\n+\r\n     if (orderCode) {\r\n-      // Nếu có orderCode, tìm đơn hàng cụ thể\r\n-      const order = await db.collection(\"orders\").findOne({ orderCode });\r\n-      \r\n+      // Nếu có orderCode, tìm đơn hàng cụ thể (và phải thuộc về user này)\r\n+      const order = await db.collection(\"orders\").findOne({ orderCode, email: userEmail });\r\n       if (!order) {\r\n         return NextResponse.json(\r\n           { error: \"Order not found\" },\r\n           { status: 404 }\r\n         );\r\n       }\r\n-\r\n       return NextResponse.json(order);\r\n     } else {\r\n-      // Nếu không có orderCode, lấy tất cả đơn hàng\r\n+      // Nếu không có orderCode, lấy tất cả đơn hàng của user hiện tại\r\n       const orders = await db.collection(\"orders\")\r\n-        .find({})\r\n+        .find({ email: userEmail })\r\n         .sort({ createdAt: -1 })\r\n         .toArray();\r\n-\r\n       return NextResponse.json({ orders });\r\n     }\r\n   } catch (error) {\r\n     console.error(\"Error fetching orders:\", error);\r\n"
                },
                {
                    "date": 1747195721839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { connectToDatabase } from \"../../../lib/mongodb\";\r\n import { createOrder } from \"../../../models/Order\";\r\n import { getServerSession } from \"next-auth/next\";\r\n import { authOptions } from \"../../api/auth/[...nextauth]/route\";\r\n+import { ObjectId } from \"mongodb\";\r\n \r\n export async function POST(request) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -11,8 +12,26 @@\n \r\n     // Tạo đơn hàng mới\r\n     const result = await createOrder(db, orderData);\r\n \r\n+    // Cập nhật số lượng sản phẩm\r\n+    for (const item of orderData.items) {\r\n+      const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n+      if (!product) {\r\n+        console.error(`Product not found: ${item.productId}`);\r\n+        continue;\r\n+      }\r\n+\r\n+      // Cập nhật số lượng theo size\r\n+      const updateField = `quantity${item.size}`;\r\n+      const newQuantity = Math.max(0, product[updateField] - item.quantity);\r\n+\r\n+      await db.collection(\"products\").updateOne(\r\n+        { _id: new ObjectId(item.productId) },\r\n+        { $set: { [updateField]: newQuantity } }\r\n+      );\r\n+    }\r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n"
                },
                {
                    "date": 1747199302736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,31 @@\n       // Cập nhật số lượng theo size\r\n       const updateField = `quantity${item.size}`;\r\n       const newQuantity = Math.max(0, product[updateField] - item.quantity);\r\n \r\n+      // Cập nhật số lượng và trạng thái sản phẩm\r\n       await db.collection(\"products\").updateOne(\r\n         { _id: new ObjectId(item.productId) },\r\n-        { $set: { [updateField]: newQuantity } }\r\n+        { \r\n+          $set: { \r\n+            [updateField]: newQuantity,\r\n+            [`outOfStock${item.size}`]: newQuantity === 0\r\n+          }\r\n+        }\r\n       );\r\n+\r\n+      // Kiểm tra nếu tất cả các size đều hết hàng\r\n+      const updatedProduct = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n+      const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n+        updatedProduct[`quantity${size}`] === 0\r\n+      );\r\n+\r\n+      if (allSizesOutOfStock) {\r\n+        await db.collection(\"products\").updateOne(\r\n+          { _id: new ObjectId(item.productId) },\r\n+          { $set: { outOfStock: true } }\r\n+        );\r\n+      }\r\n     }\r\n \r\n     return NextResponse.json({\r\n       ok: true,\r\n"
                },
                {
                    "date": 1747199711850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { createOrder } from \"../../../models/Order\";\r\n import { getServerSession } from \"next-auth/next\";\r\n import { authOptions } from \"../../api/auth/[...nextauth]/route\";\r\n import { ObjectId } from \"mongodb\";\r\n+import { revalidatePath } from \"next/cache\";\r\n \r\n export async function POST(request) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n@@ -24,15 +25,15 @@\n       // Cập nhật số lượng theo size\r\n       const updateField = `quantity${item.size}`;\r\n       const newQuantity = Math.max(0, product[updateField] - item.quantity);\r\n \r\n-      // Cập nhật số lượng và trạng thái sản phẩm\r\n+      // Cập nhật số lượng sản phẩm\r\n       await db.collection(\"products\").updateOne(\r\n         { _id: new ObjectId(item.productId) },\r\n         { \r\n           $set: { \r\n             [updateField]: newQuantity,\r\n-            [`outOfStock${item.size}`]: newQuantity === 0\r\n+            updatedAt: new Date()\r\n           }\r\n         }\r\n       );\r\n \r\n@@ -44,13 +45,23 @@\n \r\n       if (allSizesOutOfStock) {\r\n         await db.collection(\"products\").updateOne(\r\n           { _id: new ObjectId(item.productId) },\r\n-          { $set: { outOfStock: true } }\r\n+          { \r\n+            $set: { \r\n+              outOfStock: true,\r\n+              updatedAt: new Date()\r\n+            }\r\n+          }\r\n         );\r\n       }\r\n     }\r\n \r\n+    // Revalidate các trang liên quan\r\n+    revalidatePath(\"/products\");\r\n+    revalidatePath(\"/admin/products\");\r\n+    revalidatePath(\"/[slug]\");\r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n"
                },
                {
                    "date": 1747199887969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         { _id: new ObjectId(item.productId) },\r\n         { \r\n           $set: { \r\n             [updateField]: newQuantity,\r\n+            [`outOfStock${item.size}`]: newQuantity === 0,\r\n             updatedAt: new Date()\r\n           }\r\n         }\r\n       );\r\n@@ -53,14 +54,17 @@\n             }\r\n           }\r\n         );\r\n       }\r\n+\r\n+      // Revalidate trang chi tiết sản phẩm\r\n+      revalidatePath(`/${product.slug}`);\r\n     }\r\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n-    revalidatePath(\"/[slug]\");\r\n+    revalidatePath(\"/admin/orders\");\r\n \r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n"
                },
                {
                    "date": 1747200020573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n-    revalidatePath(\"/admin/orders\");\r\n+    revalidatePath(\"/admin/products/page\");\r\n \r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n"
                },
                {
                    "date": 1747200070800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,10 +62,10 @@\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n-    revalidatePath(\"/admin/products/page\");\r\n \r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n"
                },
                {
                    "date": 1747200142429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,20 +15,32 @@\n     const result = await createOrder(db, orderData);\r\n \r\n     // Cập nhật số lượng sản phẩm\r\n     for (const item of orderData.items) {\r\n+      if (!item.productId) {\r\n+        console.error('Missing productId in order item:', item);\r\n+        continue;\r\n+      }\r\n+\r\n       const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n       if (!product) {\r\n         console.error(`Product not found: ${item.productId}`);\r\n         continue;\r\n       }\r\n \r\n       // Cập nhật số lượng theo size\r\n       const updateField = `quantity${item.size}`;\r\n-      const newQuantity = Math.max(0, product[updateField] - item.quantity);\r\n+      const currentQuantity = product[updateField] || 0;\r\n+      const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n \r\n+      console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n+        currentQuantity,\r\n+        orderedQuantity: item.quantity,\r\n+        newQuantity\r\n+      });\r\n+\r\n       // Cập nhật số lượng sản phẩm\r\n-      await db.collection(\"products\").updateOne(\r\n+      const updateResult = await db.collection(\"products\").updateOne(\r\n         { _id: new ObjectId(item.productId) },\r\n         { \r\n           $set: { \r\n             [updateField]: newQuantity,\r\n@@ -37,12 +49,17 @@\n           }\r\n         }\r\n       );\r\n \r\n+      if (updateResult.modifiedCount === 0) {\r\n+        console.error(`Failed to update product ${item.productId}`);\r\n+        continue;\r\n+      }\r\n+\r\n       // Kiểm tra nếu tất cả các size đều hết hàng\r\n       const updatedProduct = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n       const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n-        updatedProduct[`quantity${size}`] === 0\r\n+        (updatedProduct[`quantity${size}`] || 0) === 0\r\n       );\r\n \r\n       if (allSizesOutOfStock) {\r\n         await db.collection(\"products\").updateOne(\r\n@@ -63,9 +80,8 @@\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n \r\n-\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n"
                },
                {
                    "date": 1747200237501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,32 +15,20 @@\n     const result = await createOrder(db, orderData);\r\n \r\n     // Cập nhật số lượng sản phẩm\r\n     for (const item of orderData.items) {\r\n-      if (!item.productId) {\r\n-        console.error('Missing productId in order item:', item);\r\n-        continue;\r\n-      }\r\n-\r\n       const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n       if (!product) {\r\n         console.error(`Product not found: ${item.productId}`);\r\n         continue;\r\n       }\r\n \r\n       // Cập nhật số lượng theo size\r\n       const updateField = `quantity${item.size}`;\r\n-      const currentQuantity = product[updateField] || 0;\r\n-      const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n+      const newQuantity = Math.max(0, product[updateField] - item.quantity);\r\n \r\n-      console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n-        currentQuantity,\r\n-        orderedQuantity: item.quantity,\r\n-        newQuantity\r\n-      });\r\n-\r\n       // Cập nhật số lượng sản phẩm\r\n-      const updateResult = await db.collection(\"products\").updateOne(\r\n+      await db.collection(\"products\").updateOne(\r\n         { _id: new ObjectId(item.productId) },\r\n         { \r\n           $set: { \r\n             [updateField]: newQuantity,\r\n@@ -49,17 +37,12 @@\n           }\r\n         }\r\n       );\r\n \r\n-      if (updateResult.modifiedCount === 0) {\r\n-        console.error(`Failed to update product ${item.productId}`);\r\n-        continue;\r\n-      }\r\n-\r\n       // Kiểm tra nếu tất cả các size đều hết hàng\r\n       const updatedProduct = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n       const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n-        (updatedProduct[`quantity${size}`] || 0) === 0\r\n+        updatedProduct[`quantity${size}`] === 0\r\n       );\r\n \r\n       if (allSizesOutOfStock) {\r\n         await db.collection(\"products\").updateOne(\r\n@@ -80,8 +63,9 @@\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n \r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n"
                },
                {
                    "date": 1747200345208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,20 +15,32 @@\n     const result = await createOrder(db, orderData);\r\n \r\n     // Cập nhật số lượng sản phẩm\r\n     for (const item of orderData.items) {\r\n+      if (!item.productId) {\r\n+        console.error('Missing productId in order item:', item);\r\n+        continue;\r\n+      }\r\n+\r\n       const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n       if (!product) {\r\n         console.error(`Product not found: ${item.productId}`);\r\n         continue;\r\n       }\r\n \r\n       // Cập nhật số lượng theo size\r\n       const updateField = `quantity${item.size}`;\r\n-      const newQuantity = Math.max(0, product[updateField] - item.quantity);\r\n+      const currentQuantity = product[updateField] || 0;\r\n+      const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n \r\n+      console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n+        currentQuantity,\r\n+        orderedQuantity: item.quantity,\r\n+        newQuantity\r\n+      });\r\n+\r\n       // Cập nhật số lượng sản phẩm\r\n-      await db.collection(\"products\").updateOne(\r\n+      const updateResult = await db.collection(\"products\").updateOne(\r\n         { _id: new ObjectId(item.productId) },\r\n         { \r\n           $set: { \r\n             [updateField]: newQuantity,\r\n@@ -37,12 +49,17 @@\n           }\r\n         }\r\n       );\r\n \r\n+      if (updateResult.modifiedCount === 0) {\r\n+        console.error(`Failed to update product ${item.productId}`);\r\n+        continue;\r\n+      }\r\n+\r\n       // Kiểm tra nếu tất cả các size đều hết hàng\r\n       const updatedProduct = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n       const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n-        updatedProduct[`quantity${size}`] === 0\r\n+        (updatedProduct[`quantity${size}`] || 0) === 0\r\n       );\r\n \r\n       if (allSizesOutOfStock) {\r\n         await db.collection(\"products\").updateOne(\r\n@@ -62,10 +79,10 @@\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n+    revalidatePath(\"/admin/products/page\");\r\n \r\n-\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n"
                },
                {
                    "date": 1747200408697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,8 @@\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n-    revalidatePath(\"/admin/products/page\");\r\n \r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n"
                },
                {
                    "date": 1747200531012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,10 @@\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n+    revalidatePath(\"/admin/products/components/ProductList\");\r\n+    revalidatePath(\"/admin/products/components/EditModal\");\r\n \r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n"
                },
                {
                    "date": 1747200558473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,16 +79,20 @@\n \r\n     // Revalidate các trang liên quan\r\n     revalidatePath(\"/products\");\r\n     revalidatePath(\"/admin/products\");\r\n-    revalidatePath(\"/admin/products/components/ProductList\");\r\n-    revalidatePath(\"/admin/products/components/EditModal\");\r\n \r\n+    // Trả về response với thông tin cập nhật\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n-      orderCode: orderData.orderCode\r\n+      orderCode: orderData.orderCode,\r\n+      updatedProducts: orderData.items.map(item => ({\r\n+        productId: item.productId,\r\n+        size: item.size,\r\n+        newQuantity: Math.max(0, (product[`quantity${item.size}`] || 0) - item.quantity)\r\n+      }))\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Error creating order:\", error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747200621960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,9 @@\n       // Revalidate trang chi tiết sản phẩm\r\n       revalidatePath(`/${product.slug}`);\r\n     }\r\n \r\n-    // Revalidate các trang liên quan\r\n-    revalidatePath(\"/products\");\r\n+    // Revalidate trang admin products\r\n     revalidatePath(\"/admin/products\");\r\n \r\n     // Trả về response với thông tin cập nhật\r\n     return NextResponse.json({\r\n"
                },
                {
                    "date": 1747201077293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,11 @@\n \r\n     // Tạo đơn hàng mới\r\n     const result = await createOrder(db, orderData);\r\n \r\n+    // Lưu thông tin số lượng cập nhật cho từng sản phẩm\r\n+    const updatedProducts = [];\r\n+\r\n     // Cập nhật số lượng sản phẩm\r\n     for (const item of orderData.items) {\r\n       if (!item.productId) {\r\n         console.error('Missing productId in order item:', item);\r\n@@ -74,8 +77,15 @@\n       }\r\n \r\n       // Revalidate trang chi tiết sản phẩm\r\n       revalidatePath(`/${product.slug}`);\r\n+\r\n+      // Lưu lại số lượng mới cho từng sản phẩm\r\n+      updatedProducts.push({\r\n+        productId: item.productId,\r\n+        size: item.size,\r\n+        newQuantity\r\n+      });\r\n     }\r\n \r\n     // Revalidate trang admin products\r\n     revalidatePath(\"/admin/products\");\r\n@@ -85,13 +95,9 @@\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n       orderCode: orderData.orderCode,\r\n-      updatedProducts: orderData.items.map(item => ({\r\n-        productId: item.productId,\r\n-        size: item.size,\r\n-        newQuantity: Math.max(0, (product[`quantity${item.size}`] || 0) - item.quantity)\r\n-      }))\r\n+      updatedProducts\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Error creating order:\", error);\r\n     return NextResponse.json(\r\n"
                },
                {
                    "date": 1747212775492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,87 +10,86 @@\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const orderData = await request.json();\r\n \r\n+    // Log toàn bộ dữ liệu đơn hàng\r\n+    console.log('orderData.items:', orderData.items);\r\n+\r\n     // Tạo đơn hàng mới\r\n     const result = await createOrder(db, orderData);\r\n \r\n     // Lưu thông tin số lượng cập nhật cho từng sản phẩm\r\n     const updatedProducts = [];\r\n \r\n     // Cập nhật số lượng sản phẩm\r\n     for (const item of orderData.items) {\r\n+      console.log('Processing item:', item);\r\n       if (!item.productId) {\r\n         console.error('Missing productId in order item:', item);\r\n         continue;\r\n       }\r\n-\r\n-      const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n+      let objectId;\r\n+      try {\r\n+        objectId = new ObjectId(item.productId);\r\n+      } catch (err) {\r\n+        console.error('Invalid productId, cannot convert to ObjectId:', item.productId);\r\n+        continue;\r\n+      }\r\n+      const product = await db.collection(\"products\").findOne({ _id: objectId });\r\n       if (!product) {\r\n         console.error(`Product not found: ${item.productId}`);\r\n         continue;\r\n       }\r\n-\r\n-      // Cập nhật số lượng theo size\r\n       const updateField = `quantity${item.size}`;\r\n       const currentQuantity = product[updateField] || 0;\r\n       const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n-\r\n       console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n         currentQuantity,\r\n         orderedQuantity: item.quantity,\r\n         newQuantity\r\n       });\r\n-\r\n-      // Cập nhật số lượng sản phẩm\r\n       const updateResult = await db.collection(\"products\").updateOne(\r\n-        { _id: new ObjectId(item.productId) },\r\n+        { _id: objectId },\r\n         { \r\n           $set: { \r\n             [updateField]: newQuantity,\r\n             [`outOfStock${item.size}`]: newQuantity === 0,\r\n             updatedAt: new Date()\r\n           }\r\n         }\r\n       );\r\n-\r\n+      console.log('Update result:', updateResult);\r\n       if (updateResult.modifiedCount === 0) {\r\n         console.error(`Failed to update product ${item.productId}`);\r\n         continue;\r\n       }\r\n-\r\n       // Kiểm tra nếu tất cả các size đều hết hàng\r\n-      const updatedProduct = await db.collection(\"products\").findOne({ _id: new ObjectId(item.productId) });\r\n+      const updatedProduct = await db.collection(\"products\").findOne({ _id: objectId });\r\n       const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n         (updatedProduct[`quantity${size}`] || 0) === 0\r\n       );\r\n-\r\n       if (allSizesOutOfStock) {\r\n         await db.collection(\"products\").updateOne(\r\n-          { _id: new ObjectId(item.productId) },\r\n+          { _id: objectId },\r\n           { \r\n             $set: { \r\n               outOfStock: true,\r\n               updatedAt: new Date()\r\n             }\r\n           }\r\n         );\r\n       }\r\n-\r\n       // Revalidate trang chi tiết sản phẩm\r\n       revalidatePath(`/${product.slug}`);\r\n-\r\n       // Lưu lại số lượng mới cho từng sản phẩm\r\n       updatedProducts.push({\r\n         productId: item.productId,\r\n         size: item.size,\r\n         newQuantity\r\n       });\r\n     }\r\n-\r\n     // Revalidate trang admin products\r\n     revalidatePath(\"/admin/products\");\r\n-\r\n     // Trả về response với thông tin cập nhật\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n"
                },
                {
                    "date": 1747212900696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,33 +111,32 @@\n     const { db } = await connectToDatabase();\r\n     const { searchParams } = new URL(request.url);\r\n     const orderCode = searchParams.get('orderCode');\r\n \r\n-    // Lấy email user hiện tại từ session\r\n-    const session = await getServerSession(authOptions);\r\n-    const userEmail = session?.user?.email;\r\n-    if (!userEmail) {\r\n-      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n-    }\r\n-\r\n     if (orderCode) {\r\n-      // Nếu có orderCode, tìm đơn hàng cụ thể (và phải thuộc về user này)\r\n-      const order = await db.collection(\"orders\").findOne({ orderCode, email: userEmail });\r\n+      // Cho phép bất kỳ ai lấy đơn hàng theo orderCode\r\n+      const order = await db.collection(\"orders\").findOne({ orderCode });\r\n       if (!order) {\r\n         return NextResponse.json(\r\n           { error: \"Order not found\" },\r\n           { status: 404 }\r\n         );\r\n       }\r\n       return NextResponse.json(order);\r\n-    } else {\r\n-      // Nếu không có orderCode, lấy tất cả đơn hàng của user hiện tại\r\n-      const orders = await db.collection(\"orders\")\r\n-        .find({ email: userEmail })\r\n-        .sort({ createdAt: -1 })\r\n-        .toArray();\r\n-      return NextResponse.json({ orders });\r\n     }\r\n+\r\n+    // Nếu không có orderCode, chỉ trả về đơn hàng của user đăng nhập\r\n+    const session = await getServerSession(authOptions);\r\n+    const userEmail = session?.user?.email;\r\n+    if (!userEmail) {\r\n+      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n+    }\r\n+\r\n+    const orders = await db.collection(\"orders\")\r\n+      .find({ email: userEmail })\r\n+      .sort({ createdAt: -1 })\r\n+      .toArray();\r\n+    return NextResponse.json({ orders });\r\n   } catch (error) {\r\n     console.error(\"Error fetching orders:\", error);\r\n     return NextResponse.json(\r\n       { error: \"Failed to fetch orders\" },\r\n"
                },
                {
                    "date": 1747458164976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { NextResponse } from \"next/server\";\r\n-import { connectToDatabase } from \"../../../lib/mongodb\";\r\n-import { createOrder } from \"../../../models/Order\";\r\n-import { getServerSession } from \"next-auth/next\";\r\n-import { authOptions } from \"../../api/auth/[...nextauth]/route\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n+import { createOrder } from \"@/models/Order\";\r\n+import { getServerSession } from \"next-auth\";\r\n+import { authOptions } from \"@/lib/auth\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n export async function POST(request) {\r\n"
                },
                {
                    "date": 1747804328534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,16 +113,16 @@\n     const orderCode = searchParams.get('orderCode');\r\n \r\n     if (orderCode) {\r\n       // Cho phép bất kỳ ai lấy đơn hàng theo orderCode\r\n-      const order = await db.collection(\"orders\").findOne({ orderCode });\r\n+      const order = await db.collection(\"orders\").findOne({ orderNumber: orderCode });\r\n       if (!order) {\r\n         return NextResponse.json(\r\n           { error: \"Order not found\" },\r\n           { status: 404 }\r\n         );\r\n       }\r\n-      return NextResponse.json(order);\r\n+      return NextResponse.json({ ok: true, order });\r\n     }\r\n \r\n     // Nếu không có orderCode, chỉ trả về đơn hàng của user đăng nhập\r\n     const session = await getServerSession(authOptions);\r\n"
                },
                {
                    "date": 1747805181944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,15 +5,52 @@\n import { authOptions } from \"@/lib/auth\";\r\n import { ObjectId } from \"mongodb\";\r\n import { revalidatePath } from \"next/cache\";\r\n \r\n+// Validate order data\r\n+function validateOrderData(orderData) {\r\n+  const requiredFields = [\r\n+    'orderNumber',\r\n+    'fullName',\r\n+    'email',\r\n+    'phone',\r\n+    'ward',\r\n+    'district',\r\n+    'province',\r\n+    'items',\r\n+    'subtotal',\r\n+    'total',\r\n+    'paymentMethod'\r\n+  ];\r\n+\r\n+  const missingFields = requiredFields.filter(field => !orderData[field]);\r\n+  if (missingFields.length > 0) {\r\n+    throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\r\n+  }\r\n+\r\n+  if (!Array.isArray(orderData.items) || orderData.items.length === 0) {\r\n+    throw new Error('Order must contain at least one item');\r\n+  }\r\n+\r\n+  if (typeof orderData.subtotal !== 'number' || orderData.subtotal <= 0) {\r\n+    throw new Error('Invalid subtotal amount');\r\n+  }\r\n+\r\n+  if (typeof orderData.total !== 'number' || orderData.total <= 0) {\r\n+    throw new Error('Invalid total amount');\r\n+  }\r\n+}\r\n+\r\n export async function POST(request) {\r\n   try {\r\n     const { db } = await connectToDatabase();\r\n     const orderData = await request.json();\r\n \r\n+    // Validate order data\r\n+    validateOrderData(orderData);\r\n+\r\n     // Log toàn bộ dữ liệu đơn hàng\r\n-    console.log('orderData.items:', orderData.items);\r\n+    console.log('orderData:', JSON.stringify(orderData, null, 2));\r\n \r\n     // Tạo đơn hàng mới\r\n     const result = await createOrder(db, orderData);\r\n \r\n@@ -21,88 +58,52 @@\n     const updatedProducts = [];\r\n \r\n     // Cập nhật số lượng sản phẩm\r\n     for (const item of orderData.items) {\r\n-      console.log('Processing item:', item);\r\n-      if (!item.productId) {\r\n-        console.error('Missing productId in order item:', item);\r\n-        continue;\r\n+      const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.id) });\r\n+      if (!product) {\r\n+        throw new Error(`Product not found: ${item.id}`);\r\n       }\r\n-      let objectId;\r\n-      try {\r\n-        objectId = new ObjectId(item.productId);\r\n-      } catch (err) {\r\n-        console.error('Invalid productId, cannot convert to ObjectId:', item.productId);\r\n-        continue;\r\n+\r\n+      // Kiểm tra số lượng tồn kho\r\n+      const size = item.size?.toLowerCase();\r\n+      const quantityField = `quantity${size?.toUpperCase()}`;\r\n+      if (product[quantityField] < item.quantity) {\r\n+        throw new Error(`Insufficient stock for product: ${product.name} (${size})`);\r\n       }\r\n-      const product = await db.collection(\"products\").findOne({ _id: objectId });\r\n-      if (!product) {\r\n-        console.error(`Product not found: ${item.productId}`);\r\n-        continue;\r\n-      }\r\n-      const updateField = `quantity${item.size}`;\r\n-      const currentQuantity = product[updateField] || 0;\r\n-      const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n-      console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n-        currentQuantity,\r\n-        orderedQuantity: item.quantity,\r\n-        newQuantity\r\n-      });\r\n+\r\n+      // Cập nhật số lượng\r\n       const updateResult = await db.collection(\"products\").updateOne(\r\n-        { _id: objectId },\r\n-        { \r\n-          $set: { \r\n-            [updateField]: newQuantity,\r\n-            [`outOfStock${item.size}`]: newQuantity === 0,\r\n-            updatedAt: new Date()\r\n-          }\r\n-        }\r\n+        { _id: new ObjectId(item.id) },\r\n+        { $inc: { [quantityField]: -item.quantity } }\r\n       );\r\n-      console.log('Update result:', updateResult);\r\n+\r\n       if (updateResult.modifiedCount === 0) {\r\n-        console.error(`Failed to update product ${item.productId}`);\r\n-        continue;\r\n+        throw new Error(`Failed to update stock for product: ${product.name}`);\r\n       }\r\n-      // Kiểm tra nếu tất cả các size đều hết hàng\r\n-      const updatedProduct = await db.collection(\"products\").findOne({ _id: objectId });\r\n-      const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n-        (updatedProduct[`quantity${size}`] || 0) === 0\r\n-      );\r\n-      if (allSizesOutOfStock) {\r\n-        await db.collection(\"products\").updateOne(\r\n-          { _id: objectId },\r\n-          { \r\n-            $set: { \r\n-              outOfStock: true,\r\n-              updatedAt: new Date()\r\n-            }\r\n-          }\r\n-        );\r\n-      }\r\n-      // Revalidate trang chi tiết sản phẩm\r\n-      revalidatePath(`/${product.slug}`);\r\n-      // Lưu lại số lượng mới cho từng sản phẩm\r\n+\r\n       updatedProducts.push({\r\n-        productId: item.productId,\r\n-        size: item.size,\r\n-        newQuantity\r\n+        productId: item.id,\r\n+        newQuantity: product[quantityField] - item.quantity\r\n       });\r\n     }\r\n-    // Revalidate trang admin products\r\n-    revalidatePath(\"/admin/products\");\r\n-    // Trả về response với thông tin cập nhật\r\n+\r\n     return NextResponse.json({\r\n       ok: true,\r\n       message: \"Đơn hàng đã được tạo thành công\",\r\n       orderId: result.insertedId,\r\n-      orderCode: orderData.orderCode,\r\n+      orderCode: orderData.orderNumber,\r\n       updatedProducts\r\n     });\r\n   } catch (error) {\r\n     console.error(\"Error creating order:\", error);\r\n     return NextResponse.json(\r\n-      { ok: false, message: \"Có lỗi xảy ra khi tạo đơn hàng\" },\r\n-      { status: 500 }\r\n+      { \r\n+        ok: false, \r\n+        error: error.message || \"Failed to create order\",\r\n+        details: error.stack\r\n+      },\r\n+      { status: 400 }\r\n     );\r\n   }\r\n }\r\n \r\n@@ -134,13 +135,17 @@\n     const orders = await db.collection(\"orders\")\r\n       .find({ email: userEmail })\r\n       .sort({ createdAt: -1 })\r\n       .toArray();\r\n-    return NextResponse.json({ orders });\r\n+    return NextResponse.json({ ok: true, orders });\r\n   } catch (error) {\r\n     console.error(\"Error fetching orders:\", error);\r\n     return NextResponse.json(\r\n-      { error: \"Failed to fetch orders\" },\r\n+      { \r\n+        ok: false, \r\n+        error: \"Failed to fetch orders\",\r\n+        details: error.stack\r\n+      },\r\n       { status: 500 }\r\n     );\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747887583141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,151 +1,1 @@\n-import { NextResponse } from \"next/server\";\r\n-import { connectToDatabase } from \"@/lib/mongodb\";\r\n-import { createOrder } from \"@/models/Order\";\r\n-import { getServerSession } from \"next-auth\";\r\n-import { authOptions } from \"@/lib/auth\";\r\n-import { ObjectId } from \"mongodb\";\r\n-import { revalidatePath } from \"next/cache\";\r\n-\r\n-// Validate order data\r\n-function validateOrderData(orderData) {\r\n-  const requiredFields = [\r\n-    'orderNumber',\r\n-    'fullName',\r\n-    'email',\r\n-    'phone',\r\n-    'ward',\r\n-    'district',\r\n-    'province',\r\n-    'items',\r\n-    'subtotal',\r\n-    'total',\r\n-    'paymentMethod'\r\n-  ];\r\n-\r\n-  const missingFields = requiredFields.filter(field => !orderData[field]);\r\n-  if (missingFields.length > 0) {\r\n-    throw new Error(`Missing required fields: ${missingFields.join(', ')}`);\r\n-  }\r\n-\r\n-  if (!Array.isArray(orderData.items) || orderData.items.length === 0) {\r\n-    throw new Error('Order must contain at least one item');\r\n-  }\r\n-\r\n-  if (typeof orderData.subtotal !== 'number' || orderData.subtotal <= 0) {\r\n-    throw new Error('Invalid subtotal amount');\r\n-  }\r\n-\r\n-  if (typeof orderData.total !== 'number' || orderData.total <= 0) {\r\n-    throw new Error('Invalid total amount');\r\n-  }\r\n-}\r\n-\r\n-export async function POST(request) {\r\n-  try {\r\n-    const { db } = await connectToDatabase();\r\n-    const orderData = await request.json();\r\n-\r\n-    // Validate order data\r\n-    validateOrderData(orderData);\r\n-\r\n-    // Log toàn bộ dữ liệu đơn hàng\r\n-    console.log('orderData:', JSON.stringify(orderData, null, 2));\r\n-\r\n-    // Tạo đơn hàng mới\r\n-    const result = await createOrder(db, orderData);\r\n-\r\n-    // Lưu thông tin số lượng cập nhật cho từng sản phẩm\r\n-    const updatedProducts = [];\r\n-\r\n-    // Cập nhật số lượng sản phẩm\r\n-    for (const item of orderData.items) {\r\n-      const product = await db.collection(\"products\").findOne({ _id: new ObjectId(item.id) });\r\n-      if (!product) {\r\n-        throw new Error(`Product not found: ${item.id}`);\r\n-      }\r\n-\r\n-      // Kiểm tra số lượng tồn kho\r\n-      const size = item.size?.toLowerCase();\r\n-      const quantityField = `quantity${size?.toUpperCase()}`;\r\n-      if (product[quantityField] < item.quantity) {\r\n-        throw new Error(`Insufficient stock for product: ${product.name} (${size})`);\r\n-      }\r\n-\r\n-      // Cập nhật số lượng\r\n-      const updateResult = await db.collection(\"products\").updateOne(\r\n-        { _id: new ObjectId(item.id) },\r\n-        { $inc: { [quantityField]: -item.quantity } }\r\n-      );\r\n-\r\n-      if (updateResult.modifiedCount === 0) {\r\n-        throw new Error(`Failed to update stock for product: ${product.name}`);\r\n-      }\r\n-\r\n-      updatedProducts.push({\r\n-        productId: item.id,\r\n-        newQuantity: product[quantityField] - item.quantity\r\n-      });\r\n-    }\r\n-\r\n-    return NextResponse.json({\r\n-      ok: true,\r\n-      message: \"Đơn hàng đã được tạo thành công\",\r\n-      orderId: result.insertedId,\r\n-      orderCode: orderData.orderNumber,\r\n-      updatedProducts\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Error creating order:\", error);\r\n-    return NextResponse.json(\r\n-      { \r\n-        ok: false, \r\n-        error: error.message || \"Failed to create order\",\r\n-        details: error.stack\r\n-      },\r\n-      { status: 400 }\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export async function GET(request) {\r\n-  try {\r\n-    const { db } = await connectToDatabase();\r\n-    const { searchParams } = new URL(request.url);\r\n-    const orderCode = searchParams.get('orderCode');\r\n-\r\n-    if (orderCode) {\r\n-      // Cho phép bất kỳ ai lấy đơn hàng theo orderCode\r\n-      const order = await db.collection(\"orders\").findOne({ orderNumber: orderCode });\r\n-      if (!order) {\r\n-        return NextResponse.json(\r\n-          { error: \"Order not found\" },\r\n-          { status: 404 }\r\n-        );\r\n-      }\r\n-      return NextResponse.json({ ok: true, order });\r\n-    }\r\n-\r\n-    // Nếu không có orderCode, chỉ trả về đơn hàng của user đăng nhập\r\n-    const session = await getServerSession(authOptions);\r\n-    const userEmail = session?.user?.email;\r\n-    if (!userEmail) {\r\n-      return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n-    }\r\n-\r\n-    const orders = await db.collection(\"orders\")\r\n-      .find({ email: userEmail })\r\n-      .sort({ createdAt: -1 })\r\n-      .toArray();\r\n-    return NextResponse.json({ ok: true, orders });\r\n-  } catch (error) {\r\n-    console.error(\"Error fetching orders:\", error);\r\n-    return NextResponse.json(\r\n-      { \r\n-        ok: false, \r\n-        error: \"Failed to fetch orders\",\r\n-        details: error.stack\r\n-      },\r\n-      { status: 500 }\r\n-    );\r\n-  }\r\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747909802874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,125 @@\n- \n\\ No newline at end of file\n+import { NextResponse } from \"next/server\";\r\n+import { connectToDatabase } from \"../../../lib/mongodb\";\r\n+import { createOrder } from \"../../../models/Order\";\r\n+import { getServerSession } from \"next-auth/next\";\r\n+import { authOptions } from \"../../api/auth/[...nextauth]/route\";\r\n+import { ObjectId } from \"mongodb\";\r\n+import { revalidatePath } from \"next/cache\";\r\n+\r\n+export async function POST(request) {\r\n+  const session = await getServerSession(authOptions);\r\n+  if (!session) {\r\n+    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n+  }\r\n+\r\n+  try {\r\n+    const { db } = await connectToDatabase();\r\n+    const orderData = await request.json();\r\n+\r\n+    // Start a session for transaction\r\n+    const session = await db.client.startSession();\r\n+    \r\n+    try {\r\n+      // Start transaction\r\n+      session.startTransaction();\r\n+\r\n+      // Create order\r\n+      const result = await createOrder(db, orderData);\r\n+\r\n+      // Update product quantities\r\n+      for (const item of orderData.items) {\r\n+        if (!item.productId) {\r\n+          console.error('Missing productId in order item:', item);\r\n+          continue;\r\n+        }\r\n+\r\n+        const product = await db.collection(\"products\").findOne(\r\n+          { _id: new ObjectId(item.productId) },\r\n+          { session }\r\n+        );\r\n+\r\n+        if (!product) {\r\n+          console.error(`Product not found: ${item.productId}`);\r\n+          continue;\r\n+        }\r\n+\r\n+        // Update quantity by size\r\n+        const updateField = `quantity${item.size}`;\r\n+        const currentQuantity = product[updateField] || 0;\r\n+        const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n+\r\n+        console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n+          currentQuantity,\r\n+          orderedQuantity: item.quantity,\r\n+          newQuantity\r\n+        });\r\n+\r\n+        const updateResult = await db.collection(\"products\").updateOne(\r\n+          { _id: new ObjectId(item.productId) },\r\n+          { \r\n+            $set: { \r\n+              [updateField]: newQuantity,\r\n+              updatedAt: new Date()\r\n+            }\r\n+          },\r\n+          { session }\r\n+        );\r\n+\r\n+        if (updateResult.modifiedCount === 0) {\r\n+          console.error(`Failed to update product ${item.productId}`);\r\n+          continue;\r\n+        }\r\n+\r\n+        // Check if all sizes are out of stock\r\n+        const updatedProduct = await db.collection(\"products\").findOne(\r\n+          { _id: new ObjectId(item.productId) },\r\n+          { session }\r\n+        );\r\n+\r\n+        const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n+          (updatedProduct[`quantity${size}`] || 0) === 0\r\n+        );\r\n+\r\n+        if (allSizesOutOfStock) {\r\n+          await db.collection(\"products\").updateOne(\r\n+            { _id: new ObjectId(item.productId) },\r\n+            { \r\n+              $set: { \r\n+                outOfStock: true,\r\n+                updatedAt: new Date()\r\n+              }\r\n+            },\r\n+            { session }\r\n+          );\r\n+        }\r\n+      }\r\n+\r\n+      // Commit transaction\r\n+      await session.commitTransaction();\r\n+\r\n+      // Revalidate related paths\r\n+      revalidatePath(\"/products\");\r\n+      revalidatePath(\"/admin/products\");\r\n+\r\n+      return NextResponse.json({\r\n+        ok: true,\r\n+        message: \"Đơn hàng đã được tạo thành công\",\r\n+        orderId: result.insertedId,\r\n+        orderCode: orderData.orderCode\r\n+      });\r\n+    } catch (error) {\r\n+      // If an error occurred, abort the transaction\r\n+      await session.abortTransaction();\r\n+      throw error;\r\n+    } finally {\r\n+      // End the session\r\n+      session.endSession();\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Error creating order:\", error);\r\n+    return NextResponse.json(\r\n+      { error: \"Failed to create order\" },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747909833945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,125 +1,1 @@\n-import { NextResponse } from \"next/server\";\r\n-import { connectToDatabase } from \"../../../lib/mongodb\";\r\n-import { createOrder } from \"../../../models/Order\";\r\n-import { getServerSession } from \"next-auth/next\";\r\n-import { authOptions } from \"../../api/auth/[...nextauth]/route\";\r\n-import { ObjectId } from \"mongodb\";\r\n-import { revalidatePath } from \"next/cache\";\r\n-\r\n-export async function POST(request) {\r\n-  const session = await getServerSession(authOptions);\r\n-  if (!session) {\r\n-    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n-  }\r\n-\r\n-  try {\r\n-    const { db } = await connectToDatabase();\r\n-    const orderData = await request.json();\r\n-\r\n-    // Start a session for transaction\r\n-    const session = await db.client.startSession();\r\n-    \r\n-    try {\r\n-      // Start transaction\r\n-      session.startTransaction();\r\n-\r\n-      // Create order\r\n-      const result = await createOrder(db, orderData);\r\n-\r\n-      // Update product quantities\r\n-      for (const item of orderData.items) {\r\n-        if (!item.productId) {\r\n-          console.error('Missing productId in order item:', item);\r\n-          continue;\r\n-        }\r\n-\r\n-        const product = await db.collection(\"products\").findOne(\r\n-          { _id: new ObjectId(item.productId) },\r\n-          { session }\r\n-        );\r\n-\r\n-        if (!product) {\r\n-          console.error(`Product not found: ${item.productId}`);\r\n-          continue;\r\n-        }\r\n-\r\n-        // Update quantity by size\r\n-        const updateField = `quantity${item.size}`;\r\n-        const currentQuantity = product[updateField] || 0;\r\n-        const newQuantity = Math.max(0, currentQuantity - item.quantity);\r\n-\r\n-        console.log(`Updating product ${item.productId} - Size ${item.size}:`, {\r\n-          currentQuantity,\r\n-          orderedQuantity: item.quantity,\r\n-          newQuantity\r\n-        });\r\n-\r\n-        const updateResult = await db.collection(\"products\").updateOne(\r\n-          { _id: new ObjectId(item.productId) },\r\n-          { \r\n-            $set: { \r\n-              [updateField]: newQuantity,\r\n-              updatedAt: new Date()\r\n-            }\r\n-          },\r\n-          { session }\r\n-        );\r\n-\r\n-        if (updateResult.modifiedCount === 0) {\r\n-          console.error(`Failed to update product ${item.productId}`);\r\n-          continue;\r\n-        }\r\n-\r\n-        // Check if all sizes are out of stock\r\n-        const updatedProduct = await db.collection(\"products\").findOne(\r\n-          { _id: new ObjectId(item.productId) },\r\n-          { session }\r\n-        );\r\n-\r\n-        const allSizesOutOfStock = ['M', 'L', 'XL', 'Hat'].every(size => \r\n-          (updatedProduct[`quantity${size}`] || 0) === 0\r\n-        );\r\n-\r\n-        if (allSizesOutOfStock) {\r\n-          await db.collection(\"products\").updateOne(\r\n-            { _id: new ObjectId(item.productId) },\r\n-            { \r\n-              $set: { \r\n-                outOfStock: true,\r\n-                updatedAt: new Date()\r\n-              }\r\n-            },\r\n-            { session }\r\n-          );\r\n-        }\r\n-      }\r\n-\r\n-      // Commit transaction\r\n-      await session.commitTransaction();\r\n-\r\n-      // Revalidate related paths\r\n-      revalidatePath(\"/products\");\r\n-      revalidatePath(\"/admin/products\");\r\n-\r\n-      return NextResponse.json({\r\n-        ok: true,\r\n-        message: \"Đơn hàng đã được tạo thành công\",\r\n-        orderId: result.insertedId,\r\n-        orderCode: orderData.orderCode\r\n-      });\r\n-    } catch (error) {\r\n-      // If an error occurred, abort the transaction\r\n-      await session.abortTransaction();\r\n-      throw error;\r\n-    } finally {\r\n-      // End the session\r\n-      session.endSession();\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(\"Error creating order:\", error);\r\n-    return NextResponse.json(\r\n-      { error: \"Failed to create order\" },\r\n-      { status: 500 }\r\n-    );\r\n-  }\r\n-} \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748318451248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,48 @@\n- \n\\ No newline at end of file\n+import { NextResponse } from 'next/server';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+\r\n+export async function POST(request) {\r\n+  try {\r\n+    const { db } = await connectToDatabase();\r\n+    const orderData = await request.json();\r\n+    \r\n+    const result = await db.collection('orders').insertOne({\r\n+      ...orderData,\r\n+      createdAt: new Date(),\r\n+      status: 'pending'\r\n+    });\r\n+\r\n+    return NextResponse.json({ \r\n+      ok: true, \r\n+      message: 'Order created successfully',\r\n+      orderId: result.insertedId \r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error creating order:', error);\r\n+    return NextResponse.json(\r\n+      { ok: false, message: 'Failed to create order', error: error.message },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export async function GET() {\r\n+  try {\r\n+    const { db } = await connectToDatabase();\r\n+    const orders = await db.collection('orders')\r\n+      .find({})\r\n+      .sort({ createdAt: -1 })\r\n+      .toArray();\r\n+\r\n+    return NextResponse.json({ \r\n+      ok: true, \r\n+      orders \r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error fetching orders:', error);\r\n+    return NextResponse.json(\r\n+      { ok: false, message: 'Failed to fetch orders', error: error.message },\r\n+      { status: 500 }\r\n+    );\r\n+  }\r\n+} \n\\ No newline at end of file\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { NextResponse } from \"next/server\";\r\nimport { connectToDatabase } from \"../../../lib/mongodb\";\r\nimport Order from \"../../../models/Order\";\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    await connectToDatabase();\r\n    const orderData = await request.json();\r\n\r\n    // Tạo đơn hàng mới\r\n    const order = new Order({\r\n      ...orderData,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    });\r\n\r\n    // Lưu đơn hàng vào database\r\n    await order.save();\r\n\r\n    return NextResponse.json({\r\n      ok: true,\r\n      message: \"Đơn hàng đã được tạo thành công\",\r\n      orderId: order._id,\r\n      orderCode: order.orderCode\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating order:\", error);\r\n    return NextResponse.json(\r\n      { ok: false, message: \"Có lỗi xảy ra khi tạo đơn hàng\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n} "
        }
    ]
}