{
    "sourceFile": "src/lib/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1747120093858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747120117734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,1 @@\n-import { NextAuthOptions } from \"next-auth\";\r\n-import GoogleProvider from \"next-auth/providers/google\";\r\n-import CredentialsProvider from \"next-auth/providers/credentials\";\r\n-import prisma from \"./prisma\";\r\n-import bcrypt from \"bcryptjs\";\r\n-\r\n-export const authOptions: NextAuthOptions = {\r\n-  providers: [\r\n-    GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n-    }),\r\n-    CredentialsProvider({\r\n-      name: \"credentials\",\r\n-      credentials: {\r\n-        email: { label: \"Email\", type: \"email\" },\r\n-        password: { label: \"Password\", type: \"password\" },\r\n-      },\r\n-      async authorize(credentials) {\r\n-        if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        const user = await prisma.user.findUnique({\r\n-          where: {\r\n-            email: credentials.email,\r\n-          },\r\n-        });\r\n-\r\n-        if (!user || !user?.password) {\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        const isCorrectPassword = await bcrypt.compare(\r\n-          credentials.password,\r\n-          user.password\r\n-        );\r\n-\r\n-        if (!isCorrectPassword) {\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        return user;\r\n-      },\r\n-    }),\r\n-  ],\r\n-  pages: {\r\n-    signIn: \"/login\",\r\n-  },\r\n-  debug: process.env.NODE_ENV === \"development\",\r\n-  session: {\r\n-    strategy: \"jwt\",\r\n-  },\r\n-  secret: process.env.NEXTAUTH_SECRET,\r\n-}; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747243604488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,60 @@\n- \n\\ No newline at end of file\n+import { NextAuthOptions } from \"next-auth\";\r\n+import CredentialsProvider from \"next-auth/providers/credentials\";\r\n+import { connectToDatabase } from \"./mongodb\";\r\n+import bcrypt from \"bcryptjs\";\r\n+\r\n+export const authOptions: NextAuthOptions = {\r\n+  providers: [\r\n+    CredentialsProvider({\r\n+      name: \"credentials\",\r\n+      credentials: {\r\n+        email: { label: \"Email\", type: \"email\" },\r\n+        password: { label: \"Password\", type: \"password\" }\r\n+      },\r\n+      async authorize(credentials) {\r\n+        if (!credentials?.email || !credentials?.password) {\r\n+          throw new Error(\"Email and password required\");\r\n+        }\r\n+\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection(\"users\").findOne({ email: credentials.email });\r\n+\r\n+        if (!user) {\r\n+          throw new Error(\"No user found with this email\");\r\n+        }\r\n+\r\n+        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+\r\n+        if (!isPasswordValid) {\r\n+          throw new Error(\"Invalid password\");\r\n+        }\r\n+\r\n+        return {\r\n+          id: user._id.toString(),\r\n+          email: user.email,\r\n+          name: `${user.firstName} ${user.lastName}`.trim(),\r\n+        };\r\n+      }\r\n+    })\r\n+  ],\r\n+  session: {\r\n+    strategy: \"jwt\"\r\n+  },\r\n+  pages: {\r\n+    signIn: \"/login\",\r\n+  },\r\n+  callbacks: {\r\n+    async jwt({ token, user }) {\r\n+      if (user) {\r\n+        token.id = user.id;\r\n+      }\r\n+      return token;\r\n+    },\r\n+    async session({ session, token }) {\r\n+      if (token) {\r\n+        session.user.id = token.id;\r\n+      }\r\n+      return session;\r\n+    }\r\n+  }\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747243612415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n       }\r\n       return token;\r\n     },\r\n     async session({ session, token }) {\r\n-      if (token) {\r\n-        session.user.id = token.id;\r\n+      if (session.user) {\r\n+        session.user.id = token.id as string;\r\n       }\r\n       return session;\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1747245894750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,19 @@\n     },\r\n     async session({ session, token }) {\r\n       if (session.user) {\r\n         session.user.id = token.id as string;\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection(\"users\").findOne({ _id: token.id });\r\n+        if (user) {\r\n+          session.user.firstName = user.firstName;\r\n+          session.user.lastName = user.lastName;\r\n+          session.user.birthDay = user.birthDay;\r\n+          session.user.birthMonth = user.birthMonth;\r\n+          session.user.birthYear = user.birthYear;\r\n+          session.user.role = user.role;\r\n+          session.user.provider = user.provider;\r\n+        }\r\n       }\r\n       return session;\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1747246106743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { NextAuthOptions } from \"next-auth\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import { connectToDatabase } from \"./mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n+import { ObjectId } from \"mongodb\";\r\n \r\n export const authOptions: NextAuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n@@ -53,17 +54,16 @@\n     async session({ session, token }) {\r\n       if (session.user) {\r\n         session.user.id = token.id as string;\r\n         const { db } = await connectToDatabase();\r\n-        const user = await db.collection(\"users\").findOne({ _id: token.id });\r\n+        const user = await db.collection(\"users\").findOne({ _id: new ObjectId(token.id as string) });\r\n         if (user) {\r\n           session.user.firstName = user.firstName;\r\n           session.user.lastName = user.lastName;\r\n           session.user.birthDay = user.birthDay;\r\n           session.user.birthMonth = user.birthMonth;\r\n           session.user.birthYear = user.birthYear;\r\n           session.user.role = user.role;\r\n-          session.user.provider = user.provider;\r\n         }\r\n       }\r\n       return session;\r\n     }\r\n"
                }
            ],
            "date": 1747120093858,
            "name": "Commit-0",
            "content": "import { NextAuthOptions } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport prisma from \"./prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        if (!user || !user?.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        const isCorrectPassword = await bcrypt.compare(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n\r\n        if (!isCorrectPassword) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        return user;\r\n      },\r\n    }),\r\n  ],\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n}; "
        }
    ]
}