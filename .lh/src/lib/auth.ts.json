{
    "sourceFile": "src/lib/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1747120093858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747120117734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,1 @@\n-import { NextAuthOptions } from \"next-auth\";\r\n-import GoogleProvider from \"next-auth/providers/google\";\r\n-import CredentialsProvider from \"next-auth/providers/credentials\";\r\n-import prisma from \"./prisma\";\r\n-import bcrypt from \"bcryptjs\";\r\n-\r\n-export const authOptions: NextAuthOptions = {\r\n-  providers: [\r\n-    GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n-    }),\r\n-    CredentialsProvider({\r\n-      name: \"credentials\",\r\n-      credentials: {\r\n-        email: { label: \"Email\", type: \"email\" },\r\n-        password: { label: \"Password\", type: \"password\" },\r\n-      },\r\n-      async authorize(credentials) {\r\n-        if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        const user = await prisma.user.findUnique({\r\n-          where: {\r\n-            email: credentials.email,\r\n-          },\r\n-        });\r\n-\r\n-        if (!user || !user?.password) {\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        const isCorrectPassword = await bcrypt.compare(\r\n-          credentials.password,\r\n-          user.password\r\n-        );\r\n-\r\n-        if (!isCorrectPassword) {\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        return user;\r\n-      },\r\n-    }),\r\n-  ],\r\n-  pages: {\r\n-    signIn: \"/login\",\r\n-  },\r\n-  debug: process.env.NODE_ENV === \"development\",\r\n-  session: {\r\n-    strategy: \"jwt\",\r\n-  },\r\n-  secret: process.env.NEXTAUTH_SECRET,\r\n-}; \n\\ No newline at end of file\n+ \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747243604488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,60 @@\n- \n\\ No newline at end of file\n+import { NextAuthOptions } from \"next-auth\";\r\n+import CredentialsProvider from \"next-auth/providers/credentials\";\r\n+import { connectToDatabase } from \"./mongodb\";\r\n+import bcrypt from \"bcryptjs\";\r\n+\r\n+export const authOptions: NextAuthOptions = {\r\n+  providers: [\r\n+    CredentialsProvider({\r\n+      name: \"credentials\",\r\n+      credentials: {\r\n+        email: { label: \"Email\", type: \"email\" },\r\n+        password: { label: \"Password\", type: \"password\" }\r\n+      },\r\n+      async authorize(credentials) {\r\n+        if (!credentials?.email || !credentials?.password) {\r\n+          throw new Error(\"Email and password required\");\r\n+        }\r\n+\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection(\"users\").findOne({ email: credentials.email });\r\n+\r\n+        if (!user) {\r\n+          throw new Error(\"No user found with this email\");\r\n+        }\r\n+\r\n+        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+\r\n+        if (!isPasswordValid) {\r\n+          throw new Error(\"Invalid password\");\r\n+        }\r\n+\r\n+        return {\r\n+          id: user._id.toString(),\r\n+          email: user.email,\r\n+          name: `${user.firstName} ${user.lastName}`.trim(),\r\n+        };\r\n+      }\r\n+    })\r\n+  ],\r\n+  session: {\r\n+    strategy: \"jwt\"\r\n+  },\r\n+  pages: {\r\n+    signIn: \"/login\",\r\n+  },\r\n+  callbacks: {\r\n+    async jwt({ token, user }) {\r\n+      if (user) {\r\n+        token.id = user.id;\r\n+      }\r\n+      return token;\r\n+    },\r\n+    async session({ session, token }) {\r\n+      if (token) {\r\n+        session.user.id = token.id;\r\n+      }\r\n+      return session;\r\n+    }\r\n+  }\r\n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747243612415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,10 +50,10 @@\n       }\r\n       return token;\r\n     },\r\n     async session({ session, token }) {\r\n-      if (token) {\r\n-        session.user.id = token.id;\r\n+      if (session.user) {\r\n+        session.user.id = token.id as string;\r\n       }\r\n       return session;\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1747245894750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,19 @@\n     },\r\n     async session({ session, token }) {\r\n       if (session.user) {\r\n         session.user.id = token.id as string;\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection(\"users\").findOne({ _id: token.id });\r\n+        if (user) {\r\n+          session.user.firstName = user.firstName;\r\n+          session.user.lastName = user.lastName;\r\n+          session.user.birthDay = user.birthDay;\r\n+          session.user.birthMonth = user.birthMonth;\r\n+          session.user.birthYear = user.birthYear;\r\n+          session.user.role = user.role;\r\n+          session.user.provider = user.provider;\r\n+        }\r\n       }\r\n       return session;\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1747246106743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { NextAuthOptions } from \"next-auth\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n import { connectToDatabase } from \"./mongodb\";\r\n import bcrypt from \"bcryptjs\";\r\n+import { ObjectId } from \"mongodb\";\r\n \r\n export const authOptions: NextAuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n@@ -53,17 +54,16 @@\n     async session({ session, token }) {\r\n       if (session.user) {\r\n         session.user.id = token.id as string;\r\n         const { db } = await connectToDatabase();\r\n-        const user = await db.collection(\"users\").findOne({ _id: token.id });\r\n+        const user = await db.collection(\"users\").findOne({ _id: new ObjectId(token.id as string) });\r\n         if (user) {\r\n           session.user.firstName = user.firstName;\r\n           session.user.lastName = user.lastName;\r\n           session.user.birthDay = user.birthDay;\r\n           session.user.birthMonth = user.birthMonth;\r\n           session.user.birthYear = user.birthYear;\r\n           session.user.role = user.role;\r\n-          session.user.provider = user.provider;\r\n         }\r\n       }\r\n       return session;\r\n     }\r\n"
                },
                {
                    "date": 1747456968182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,58 @@\n import { NextAuthOptions } from \"next-auth\";\r\n+import GoogleProvider from \"next-auth/providers/google\";\r\n import CredentialsProvider from \"next-auth/providers/credentials\";\r\n-import { connectToDatabase } from \"./mongodb\";\r\n-import bcrypt from \"bcryptjs\";\r\n+import { MongoDBAdapter } from \"@auth/mongodb-adapter\";\r\n+import clientPromise from \"@/lib/mongodb\";\r\n+import { compare } from \"bcryptjs\";\r\n+import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n \r\n export const authOptions: NextAuthOptions = {\r\n+  adapter: MongoDBAdapter(clientPromise),\r\n   providers: [\r\n+    GoogleProvider({\r\n+      clientId: process.env.GOOGLE_ID!,\r\n+      clientSecret: process.env.GOOGLE_SECRET!,\r\n+    }),\r\n     CredentialsProvider({\r\n       name: \"credentials\",\r\n       credentials: {\r\n         email: { label: \"Email\", type: \"email\" },\r\n-        password: { label: \"Password\", type: \"password\" }\r\n+        password: { label: \"Password\", type: \"password\" },\r\n       },\r\n       async authorize(credentials) {\r\n         if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error(\"Email and password required\");\r\n+          throw new Error(\"Invalid credentials\");\r\n         }\r\n \r\n         const { db } = await connectToDatabase();\r\n         const user = await db.collection(\"users\").findOne({ email: credentials.email });\r\n \r\n-        if (!user) {\r\n-          throw new Error(\"No user found with this email\");\r\n+        if (!user || !user?.password) {\r\n+          throw new Error(\"Invalid credentials\");\r\n         }\r\n \r\n-        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+        const isCorrectPassword = await compare(credentials.password, user.password);\r\n \r\n-        if (!isPasswordValid) {\r\n-          throw new Error(\"Invalid password\");\r\n+        if (!isCorrectPassword) {\r\n+          throw new Error(\"Invalid credentials\");\r\n         }\r\n \r\n         return {\r\n           id: user._id.toString(),\r\n           email: user.email,\r\n-          name: `${user.firstName} ${user.lastName}`.trim(),\r\n+          name: user.name,\r\n+          image: user.image,\r\n         };\r\n-      }\r\n-    })\r\n+      },\r\n+    }),\r\n   ],\r\n-  session: {\r\n-    strategy: \"jwt\"\r\n-  },\r\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n-  callbacks: {\r\n-    async jwt({ token, user }) {\r\n-      if (user) {\r\n-        token.id = user.id;\r\n-      }\r\n-      return token;\r\n-    },\r\n-    async session({ session, token }) {\r\n-      if (session.user) {\r\n-        session.user.id = token.id as string;\r\n-        const { db } = await connectToDatabase();\r\n-        const user = await db.collection(\"users\").findOne({ _id: new ObjectId(token.id as string) });\r\n-        if (user) {\r\n-          session.user.firstName = user.firstName;\r\n-          session.user.lastName = user.lastName;\r\n-          session.user.birthDay = user.birthDay;\r\n-          session.user.birthMonth = user.birthMonth;\r\n-          session.user.birthYear = user.birthYear;\r\n-          session.user.role = user.role;\r\n-        }\r\n-      }\r\n-      return session;\r\n-    }\r\n-  }\r\n+  debug: process.env.NODE_ENV === \"development\",\r\n+  session: {\r\n+    strategy: \"jwt\",\r\n+  },\r\n+  secret: process.env.NEXTAUTH_SECRET,\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747721175749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,22 @@\n         if (!credentials?.email || !credentials?.password) {\r\n           throw new Error(\"Invalid credentials\");\r\n         }\r\n \r\n+        // Kiểm tra đăng nhập admin\r\n+        if (credentials.email === process.env.ADMIN_USERNAME) {\r\n+          if (credentials.password === process.env.ADMIN_PASSWORD) {\r\n+            return {\r\n+              id: \"1\",\r\n+              email: process.env.ADMIN_USERNAME,\r\n+              name: \"Admin\",\r\n+              role: \"ADMIN\"\r\n+            };\r\n+          }\r\n+          throw new Error(\"Invalid credentials\");\r\n+        }\r\n+\r\n+        // Đăng nhập user thường\r\n         const { db } = await connectToDatabase();\r\n         const user = await db.collection(\"users\").findOne({ email: credentials.email });\r\n \r\n         if (!user || !user?.password) {\r\n@@ -42,12 +56,27 @@\n           id: user._id.toString(),\r\n           email: user.email,\r\n           name: user.name,\r\n           image: user.image,\r\n+          role: \"USER\"\r\n         };\r\n       },\r\n     }),\r\n   ],\r\n+  callbacks: {\r\n+    async jwt({ token, user }) {\r\n+      if (user) {\r\n+        token.role = user.role;\r\n+      }\r\n+      return token;\r\n+    },\r\n+    async session({ session, token }) {\r\n+      if (session?.user) {\r\n+        (session.user as any).role = token.role;\r\n+      }\r\n+      return session;\r\n+    }\r\n+  },\r\n   pages: {\r\n     signIn: \"/login\",\r\n   },\r\n   debug: process.env.NODE_ENV === \"development\",\r\n"
                },
                {
                    "date": 1747721243662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,29 @@\n import { compare } from \"bcryptjs\";\r\n import { connectToDatabase } from \"@/lib/mongodb\";\r\n import { ObjectId } from \"mongodb\";\r\n \r\n+// Thêm type declaration cho User và Session\r\n+declare module \"next-auth\" {\r\n+  interface User {\r\n+    role?: string;\r\n+  }\r\n+  interface Session {\r\n+    user?: {\r\n+      name?: string | null;\r\n+      email?: string | null;\r\n+      image?: string | null;\r\n+      role?: string;\r\n+    };\r\n+  }\r\n+}\r\n+\r\n+declare module \"next-auth/jwt\" {\r\n+  interface JWT {\r\n+    role?: string;\r\n+  }\r\n+}\r\n+\r\n export const authOptions: NextAuthOptions = {\r\n   adapter: MongoDBAdapter(clientPromise),\r\n   providers: [\r\n     GoogleProvider({\r\n@@ -70,9 +91,9 @@\n       return token;\r\n     },\r\n     async session({ session, token }) {\r\n       if (session?.user) {\r\n-        (session.user as any).role = token.role;\r\n+        session.user.role = token.role;\r\n       }\r\n       return session;\r\n     }\r\n   },\r\n"
                },
                {
                    "date": 1747721743573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,13 @@\n         if (!credentials?.email || !credentials?.password) {\r\n           throw new Error(\"Invalid credentials\");\r\n         }\r\n \r\n-        // Kiểm tra đăng nhập admin\r\n-        if (credentials.email === process.env.ADMIN_USERNAME) {\r\n+        // Kiểm tra đăng nhập admin - không yêu cầu @ trong email\r\n+        const adminUsername = process.env.ADMIN_USERNAME?.toLowerCase();\r\n+        const inputEmail = credentials.email.toLowerCase();\r\n+        \r\n+        if (inputEmail === adminUsername) {\r\n           if (credentials.password === process.env.ADMIN_PASSWORD) {\r\n             return {\r\n               id: \"1\",\r\n               email: process.env.ADMIN_USERNAME,\r\n"
                },
                {
                    "date": 1747889859003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,111 +1,63 @@\n-import { NextAuthOptions } from \"next-auth\";\r\n-import GoogleProvider from \"next-auth/providers/google\";\r\n-import CredentialsProvider from \"next-auth/providers/credentials\";\r\n-import { MongoDBAdapter } from \"@auth/mongodb-adapter\";\r\n-import clientPromise from \"@/lib/mongodb\";\r\n-import { compare } from \"bcryptjs\";\r\n-import { connectToDatabase } from \"@/lib/mongodb\";\r\n-import { ObjectId } from \"mongodb\";\r\n+import { AuthOptions } from 'next-auth';\r\n+import CredentialsProvider from 'next-auth/providers/credentials';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import bcrypt from 'bcryptjs';\r\n \r\n-// Thêm type declaration cho User và Session\r\n-declare module \"next-auth\" {\r\n-  interface User {\r\n-    role?: string;\r\n-  }\r\n-  interface Session {\r\n-    user?: {\r\n-      name?: string | null;\r\n-      email?: string | null;\r\n-      image?: string | null;\r\n-      role?: string;\r\n-    };\r\n-  }\r\n-}\r\n-\r\n-declare module \"next-auth/jwt\" {\r\n-  interface JWT {\r\n-    role?: string;\r\n-  }\r\n-}\r\n-\r\n-export const authOptions: NextAuthOptions = {\r\n-  adapter: MongoDBAdapter(clientPromise),\r\n+export const authOptions: AuthOptions = {\r\n   providers: [\r\n-    GoogleProvider({\r\n-      clientId: process.env.GOOGLE_ID!,\r\n-      clientSecret: process.env.GOOGLE_SECRET!,\r\n-    }),\r\n     CredentialsProvider({\r\n-      name: \"credentials\",\r\n+      name: 'Credentials',\r\n       credentials: {\r\n         email: { label: \"Email\", type: \"email\" },\r\n-        password: { label: \"Password\", type: \"password\" },\r\n+        password: { label: \"Password\", type: \"password\" }\r\n       },\r\n       async authorize(credentials) {\r\n         if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error(\"Invalid credentials\");\r\n+          throw new Error('Please enter an email and password');\r\n         }\r\n \r\n-        // Kiểm tra đăng nhập admin - không yêu cầu @ trong email\r\n-        const adminUsername = process.env.ADMIN_USERNAME?.toLowerCase();\r\n-        const inputEmail = credentials.email.toLowerCase();\r\n-        \r\n-        if (inputEmail === adminUsername) {\r\n-          if (credentials.password === process.env.ADMIN_PASSWORD) {\r\n-            return {\r\n-              id: \"1\",\r\n-              email: process.env.ADMIN_USERNAME,\r\n-              name: \"Admin\",\r\n-              role: \"ADMIN\"\r\n-            };\r\n-          }\r\n-          throw new Error(\"Invalid credentials\");\r\n-        }\r\n-\r\n-        // Đăng nhập user thường\r\n         const { db } = await connectToDatabase();\r\n-        const user = await db.collection(\"users\").findOne({ email: credentials.email });\r\n+        const user = await db.collection('users').findOne({ email: credentials.email });\r\n \r\n-        if (!user || !user?.password) {\r\n-          throw new Error(\"Invalid credentials\");\r\n+        if (!user) {\r\n+          throw new Error('No user found with this email');\r\n         }\r\n \r\n-        const isCorrectPassword = await compare(credentials.password, user.password);\r\n+        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n \r\n-        if (!isCorrectPassword) {\r\n-          throw new Error(\"Invalid credentials\");\r\n+        if (!isPasswordValid) {\r\n+          throw new Error('Invalid password');\r\n         }\r\n \r\n         return {\r\n           id: user._id.toString(),\r\n           email: user.email,\r\n-          name: user.name,\r\n-          image: user.image,\r\n-          role: \"USER\"\r\n+          name: `${user.firstName} ${user.lastName}`,\r\n+          role: user.role\r\n         };\r\n-      },\r\n-    }),\r\n+      }\r\n+    })\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }) {\r\n+    async jwt({ token, user }: { token: any; user: any }) {\r\n       if (user) {\r\n         token.role = user.role;\r\n       }\r\n       return token;\r\n     },\r\n-    async session({ session, token }) {\r\n+    async session({ session, token }: { session: any; token: any }) {\r\n       if (session?.user) {\r\n         session.user.role = token.role;\r\n       }\r\n       return session;\r\n     }\r\n   },\r\n   pages: {\r\n-    signIn: \"/login\",\r\n+    signIn: '/login',\r\n+    error: '/login',\r\n   },\r\n-  debug: process.env.NODE_ENV === \"development\",\r\n   session: {\r\n-    strategy: \"jwt\",\r\n+    strategy: 'jwt' as const,\r\n   },\r\n   secret: process.env.NEXTAUTH_SECRET,\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748318534380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,22 @@\n-import { AuthOptions } from 'next-auth';\r\n-import CredentialsProvider from 'next-auth/providers/credentials';\r\n-import { connectToDatabase } from '@/lib/mongodb';\r\n-import bcrypt from 'bcryptjs';\r\n+import { NextAuthOptions } from 'next-auth';\r\n+import GoogleProvider from 'next-auth/providers/google';\r\n \r\n-export const authOptions: AuthOptions = {\r\n+export const authOptions: NextAuthOptions = {\r\n   providers: [\r\n-    CredentialsProvider({\r\n-      name: 'Credentials',\r\n-      credentials: {\r\n-        email: { label: \"Email\", type: \"email\" },\r\n-        password: { label: \"Password\", type: \"password\" }\r\n-      },\r\n-      async authorize(credentials) {\r\n-        if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error('Please enter an email and password');\r\n-        }\r\n-\r\n-        const { db } = await connectToDatabase();\r\n-        const user = await db.collection('users').findOne({ email: credentials.email });\r\n-\r\n-        if (!user) {\r\n-          throw new Error('No user found with this email');\r\n-        }\r\n-\r\n-        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n-\r\n-        if (!isPasswordValid) {\r\n-          throw new Error('Invalid password');\r\n-        }\r\n-\r\n-        return {\r\n-          id: user._id.toString(),\r\n-          email: user.email,\r\n-          name: `${user.firstName} ${user.lastName}`,\r\n-          role: user.role\r\n-        };\r\n-      }\r\n-    })\r\n+    GoogleProvider({\r\n+      clientId: process.env.GOOGLE_CLIENT_ID || '',\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\r\n+    }),\r\n   ],\r\n   callbacks: {\r\n-    async jwt({ token, user }: { token: any; user: any }) {\r\n-      if (user) {\r\n-        token.role = user.role;\r\n+    async session({ session, token }) {\r\n+      if (session.user) {\r\n+        session.user.email = token.email;\r\n       }\r\n-      return token;\r\n+      return session;\r\n     },\r\n-    async session({ session, token }: { session: any; token: any }) {\r\n-      if (session?.user) {\r\n-        session.user.role = token.role;\r\n-      }\r\n-      return session;\r\n-    }\r\n   },\r\n   pages: {\r\n-    signIn: '/login',\r\n-    error: '/login',\r\n+    signIn: '/auth/signin',\r\n   },\r\n-  session: {\r\n-    strategy: 'jwt' as const,\r\n-  },\r\n-  secret: process.env.NEXTAUTH_SECRET,\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748318570724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,63 @@\n-import { NextAuthOptions } from 'next-auth';\r\n-import GoogleProvider from 'next-auth/providers/google';\r\n+import { AuthOptions } from 'next-auth';\r\n+import CredentialsProvider from 'next-auth/providers/credentials';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import bcrypt from 'bcryptjs';\r\n \r\n-export const authOptions: NextAuthOptions = {\r\n+export const authOptions: AuthOptions = {\r\n   providers: [\r\n-    GoogleProvider({\r\n-      clientId: process.env.GOOGLE_CLIENT_ID || '',\r\n-      clientSecret: process.env.GOOGLE_CLIENT_SECRET || '',\r\n-    }),\r\n+    CredentialsProvider({\r\n+      name: 'Credentials',\r\n+      credentials: {\r\n+        email: { label: \"Email\", type: \"email\" },\r\n+        password: { label: \"Password\", type: \"password\" }\r\n+      },\r\n+      async authorize(credentials) {\r\n+        if (!credentials?.email || !credentials?.password) {\r\n+          throw new Error('Please enter an email and password');\r\n+        }\r\n+\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection('users').findOne({ email: credentials.email });\r\n+\r\n+        if (!user) {\r\n+          throw new Error('No user found with this email');\r\n+        }\r\n+\r\n+        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+\r\n+        if (!isPasswordValid) {\r\n+          throw new Error('Invalid password');\r\n+        }\r\n+\r\n+        return {\r\n+          id: user._id.toString(),\r\n+          email: user.email,\r\n+          name: `${user.firstName} ${user.lastName}`,\r\n+          role: user.role\r\n+        };\r\n+      }\r\n+    })\r\n   ],\r\n   callbacks: {\r\n-    async session({ session, token }) {\r\n-      if (session.user) {\r\n-        session.user.email = token.email;\r\n+    async jwt({ token, user }: { token: any; user: any }) {\r\n+      if (user) {\r\n+        token.role = user.role;\r\n       }\r\n+      return token;\r\n+    },\r\n+    async session({ session, token }: { session: any; token: any }) {\r\n+      if (session?.user) {\r\n+        session.user.role = token.role;\r\n+      }\r\n       return session;\r\n-    },\r\n+    }\r\n   },\r\n   pages: {\r\n-    signIn: '/auth/signin',\r\n+    signIn: '/login',\r\n+    error: '/login',\r\n   },\r\n+  session: {\r\n+    strategy: 'jwt' as const,\r\n+  },\r\n+  secret: process.env.NEXTAUTH_SECRET,\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748493133315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,74 @@\n-import { AuthOptions } from 'next-auth';\r\n-import CredentialsProvider from 'next-auth/providers/credentials';\r\n-import { connectToDatabase } from '@/lib/mongodb';\r\n-import bcrypt from 'bcryptjs';\r\n+import { NextAuthOptions } from \"next-auth\";\r\n+import CredentialsProvider from \"next-auth/providers/credentials\";\r\n+import { connectToDatabase } from \"./mongodb\";\r\n+import { compare } from \"bcryptjs\";\r\n \r\n-export const authOptions: AuthOptions = {\r\n+export const authOptions: NextAuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n-      name: 'Credentials',\r\n+      name: \"Credentials\",\r\n       credentials: {\r\n         email: { label: \"Email\", type: \"email\" },\r\n         password: { label: \"Password\", type: \"password\" }\r\n       },\r\n       async authorize(credentials) {\r\n         if (!credentials?.email || !credentials?.password) {\r\n-          throw new Error('Please enter an email and password');\r\n+          console.error('Missing credentials');\r\n+          return null;\r\n         }\r\n \r\n-        const { db } = await connectToDatabase();\r\n-        const user = await db.collection('users').findOne({ email: credentials.email });\r\n+        try {\r\n+          const { db } = await connectToDatabase();\r\n+          const user = await db.collection('users').findOne({ email: credentials.email });\r\n \r\n-        if (!user) {\r\n-          throw new Error('No user found with this email');\r\n-        }\r\n+          if (!user) {\r\n+            console.error('User not found:', credentials.email);\r\n+            return null;\r\n+          }\r\n \r\n-        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+          const isValid = await compare(credentials.password, user.password);\r\n \r\n-        if (!isPasswordValid) {\r\n-          throw new Error('Invalid password');\r\n+          if (!isValid) {\r\n+            console.error('Invalid password for user:', credentials.email);\r\n+            return null;\r\n+          }\r\n+\r\n+          return {\r\n+            id: user._id.toString(),\r\n+            email: user.email,\r\n+            name: user.name,\r\n+            role: user.role\r\n+          };\r\n+        } catch (error) {\r\n+          console.error('Error in authorize:', error);\r\n+          return null;\r\n         }\r\n-\r\n-        return {\r\n-          id: user._id.toString(),\r\n-          email: user.email,\r\n-          name: `${user.firstName} ${user.lastName}`,\r\n-          role: user.role\r\n-        };\r\n       }\r\n     })\r\n   ],\r\n+  session: {\r\n+    strategy: \"jwt\",\r\n+    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n+  },\r\n+  pages: {\r\n+    signIn: '/login',\r\n+    error: '/login',\r\n+  },\r\n   callbacks: {\r\n-    async jwt({ token, user }: { token: any; user: any }) {\r\n+    async jwt({ token, user }) {\r\n       if (user) {\r\n+        token.id = user.id;\r\n         token.role = user.role;\r\n       }\r\n       return token;\r\n     },\r\n-    async session({ session, token }: { session: any; token: any }) {\r\n-      if (session?.user) {\r\n+    async session({ session, token }) {\r\n+      if (token) {\r\n+        session.user.id = token.id;\r\n         session.user.role = token.role;\r\n       }\r\n       return session;\r\n     }\r\n   },\r\n-  pages: {\r\n-    signIn: '/login',\r\n-    error: '/login',\r\n-  },\r\n-  session: {\r\n-    strategy: 'jwt' as const,\r\n-  },\r\n-  secret: process.env.NEXTAUTH_SECRET,\r\n+  debug: process.env.NODE_ENV === 'development',\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748591657657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,76 @@\n-import { NextAuthOptions } from \"next-auth\";\r\n-import CredentialsProvider from \"next-auth/providers/credentials\";\r\n-import { connectToDatabase } from \"./mongodb\";\r\n-import { compare } from \"bcryptjs\";\r\n+import { AuthOptions } from 'next-auth';\r\n+import CredentialsProvider from 'next-auth/providers/credentials';\r\n+import { connectToDatabase } from '@/lib/mongodb';\r\n+import bcrypt from 'bcryptjs';\r\n \r\n-export const authOptions: NextAuthOptions = {\r\n+export const authOptions: AuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n-      name: \"Credentials\",\r\n+      name: 'Credentials',\r\n       credentials: {\r\n         email: { label: \"Email\", type: \"email\" },\r\n         password: { label: \"Password\", type: \"password\" }\r\n       },\r\n       async authorize(credentials) {\r\n         if (!credentials?.email || !credentials?.password) {\r\n-          console.error('Missing credentials');\r\n-          return null;\r\n+          throw new Error('Please enter an email and password');\r\n         }\r\n \r\n-        try {\r\n-          const { db } = await connectToDatabase();\r\n-          const user = await db.collection('users').findOne({ email: credentials.email });\r\n-\r\n-          if (!user) {\r\n-            console.error('User not found:', credentials.email);\r\n-            return null;\r\n+        if (credentials.email === process.env.ADMIN_USERNAME) {\r\n+          if (credentials.password === process.env.ADMIN_PASSWORD) {\r\n+            return {\r\n+              id: 'admin-id',\r\n+              email: process.env.ADMIN_USERNAME,\r\n+              name: 'Admin',\r\n+              role: 'ADMIN'\r\n+            };\r\n+          } else {\r\n+            throw new Error('Invalid email or password');\r\n           }\r\n+        }\r\n \r\n-          const isValid = await compare(credentials.password, user.password);\r\n+        const { db } = await connectToDatabase();\r\n+        const user = await db.collection('users').findOne({ email: credentials.email });\r\n \r\n-          if (!isValid) {\r\n-            console.error('Invalid password for user:', credentials.email);\r\n-            return null;\r\n-          }\r\n+        if (!user) {\r\n+          throw new Error('Invalid email or password');\r\n+        }\r\n \r\n-          return {\r\n-            id: user._id.toString(),\r\n-            email: user.email,\r\n-            name: user.name,\r\n-            role: user.role\r\n-          };\r\n-        } catch (error) {\r\n-          console.error('Error in authorize:', error);\r\n-          return null;\r\n+        const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n+\r\n+        if (!isPasswordValid) {\r\n+          throw new Error('Invalid email or password');\r\n         }\r\n+\r\n+        return {\r\n+          id: user._id.toString(),\r\n+          email: user.email,\r\n+          name: `${user.firstName} ${user.lastName}`,\r\n+          role: user.role || 'USER'\r\n+        };\r\n       }\r\n     })\r\n   ],\r\n-  session: {\r\n-    strategy: \"jwt\",\r\n-    maxAge: 30 * 24 * 60 * 60, // 30 days\r\n-  },\r\n-  pages: {\r\n-    signIn: '/login',\r\n-    error: '/login',\r\n-  },\r\n   callbacks: {\r\n-    async jwt({ token, user }) {\r\n+    async jwt({ token, user }: { token: any; user: any }) {\r\n       if (user) {\r\n-        token.id = user.id;\r\n         token.role = user.role;\r\n       }\r\n       return token;\r\n     },\r\n-    async session({ session, token }) {\r\n-      if (token) {\r\n-        session.user.id = token.id;\r\n+    async session({ session, token }: { session: any; token: any }) {\r\n+      if (session?.user) {\r\n         session.user.role = token.role;\r\n       }\r\n       return session;\r\n     }\r\n   },\r\n-  debug: process.env.NODE_ENV === 'development',\r\n+  pages: {\r\n+    signIn: '/login',\r\n+    error: '/login',\r\n+  },\r\n+  session: {\r\n+    strategy: 'jwt' as const,\r\n+  },\r\n+  secret: process.env.NEXTAUTH_SECRET,\r\n }; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748661903260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { AuthOptions } from 'next-auth';\r\n import CredentialsProvider from 'next-auth/providers/credentials';\r\n import { connectToDatabase } from '@/lib/mongodb';\r\n import bcrypt from 'bcryptjs';\r\n+import GoogleProvider from 'next-auth/providers/google';\r\n \r\n export const authOptions: AuthOptions = {\r\n   providers: [\r\n     CredentialsProvider({\r\n@@ -48,9 +49,28 @@\n           name: `${user.firstName} ${user.lastName}`,\r\n           role: user.role || 'USER'\r\n         };\r\n       }\r\n-    })\r\n+    }),\r\n+    GoogleProvider({\r\n+      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n+      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n+      profile(profile) {\r\n+        return {\r\n+          id: profile.sub,\r\n+          name: profile.name,\r\n+          email: profile.email,\r\n+          image: profile.picture,\r\n+          firstName: profile.given_name,\r\n+          lastName: profile.family_name,\r\n+          birthDay: '',\r\n+          birthMonth: '',\r\n+          birthYear: '',\r\n+          role: \"USER\",\r\n+          provider: \"google\"\r\n+        };\r\n+      }\r\n+    }),\r\n   ],\r\n   callbacks: {\r\n     async jwt({ token, user }: { token: any; user: any }) {\r\n       if (user) {\r\n"
                }
            ],
            "date": 1747120093858,
            "name": "Commit-0",
            "content": "import { NextAuthOptions } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport prisma from \"./prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        if (!user || !user?.password) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        const isCorrectPassword = await bcrypt.compare(\r\n          credentials.password,\r\n          user.password\r\n        );\r\n\r\n        if (!isCorrectPassword) {\r\n          throw new Error(\"Invalid credentials\");\r\n        }\r\n\r\n        return user;\r\n      },\r\n    }),\r\n  ],\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  debug: process.env.NODE_ENV === \"development\",\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n}; "
        }
    ]
}