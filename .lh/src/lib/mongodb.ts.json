{
    "sourceFile": "src/lib/mongodb.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1746893166912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747805162563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,31 +28,36 @@\n   clientPromise = client.connect();\r\n }\r\n \r\n export async function connectToDatabase() {\r\n-  const client = await clientPromise;\r\n-  const db = client.db(\"aishh\");\r\n+  try {\r\n+    const client = await clientPromise;\r\n+    const db = client.db(\"aishh\");\r\n \r\n-  // Update schema if needed\r\n-  const collections = await db.listCollections().toArray();\r\n-  const collectionNames = collections.map(col => col.name);\r\n+    // Update schema if needed\r\n+    const collections = await db.listCollections().toArray();\r\n+    const collectionNames = collections.map(col => col.name);\r\n \r\n-  // Create banners collection if it doesn't exist\r\n-  if (!collectionNames.includes(\"banners\")) {\r\n-    await db.createCollection(\"banners\");\r\n-    // Create indexes\r\n-    await db.collection(\"banners\").createIndex({ order: 1 });\r\n-    await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n-  }\r\n+    // Create banners collection if it doesn't exist\r\n+    if (!collectionNames.includes(\"banners\")) {\r\n+      await db.createCollection(\"banners\");\r\n+      // Create indexes\r\n+      await db.collection(\"banners\").createIndex({ order: 1 });\r\n+      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n+    }\r\n \r\n-  // Update products schema if needed\r\n-  if (collectionNames.includes(\"products\")) {\r\n-    await db.collection(\"products\").updateMany(\r\n-      { sizeGuideImage: { $exists: false } },\r\n-      { $set: { sizeGuideImage: \"\" } }\r\n-    );\r\n+    // Update products schema if needed\r\n+    if (collectionNames.includes(\"products\")) {\r\n+      await db.collection(\"products\").updateMany(\r\n+        { sizeGuideImage: { $exists: false } },\r\n+        { $set: { sizeGuideImage: \"\" } }\r\n+      );\r\n+    }\r\n+\r\n+    return { client, db };\r\n+  } catch (error) {\r\n+    console.error(\"Error connecting to database:\", error);\r\n+    throw new Error(\"Failed to connect to database\");\r\n   }\r\n-\r\n-  return { client, db };\r\n }\r\n \r\n export default clientPromise; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747909266058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n-import { MongoClient } from \"mongodb\";\r\n+import { MongoClient, Db } from 'mongodb';\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n+  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n \r\n-let client;\r\n+let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n \r\n-if (process.env.NODE_ENV === \"development\") {\r\n+if (process.env.NODE_ENV === 'development') {\r\n   // In development mode, use a global variable so that the value\r\n   // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n   let globalWithMongo = global as typeof globalThis & {\r\n     _mongoClientPromise?: Promise<MongoClient>;\r\n@@ -30,34 +30,20 @@\n \r\n export async function connectToDatabase() {\r\n   try {\r\n     const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-\r\n-    // Update schema if needed\r\n-    const collections = await db.listCollections().toArray();\r\n-    const collectionNames = collections.map(col => col.name);\r\n-\r\n-    // Create banners collection if it doesn't exist\r\n-    if (!collectionNames.includes(\"banners\")) {\r\n-      await db.createCollection(\"banners\");\r\n-      // Create indexes\r\n-      await db.collection(\"banners\").createIndex({ order: 1 });\r\n-      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n-    }\r\n-\r\n-    // Update products schema if needed\r\n-    if (collectionNames.includes(\"products\")) {\r\n-      await db.collection(\"products\").updateMany(\r\n-        { sizeGuideImage: { $exists: false } },\r\n-        { $set: { sizeGuideImage: \"\" } }\r\n-      );\r\n-    }\r\n-\r\n-    return { client, db };\r\n+    const db = client.db(process.env.MONGODB_DB);\r\n+    \r\n+    // Test the connection\r\n+    await db.command({ ping: 1 });\r\n+    console.log('Successfully connected to MongoDB.');\r\n+    \r\n+    return { db, client };\r\n   } catch (error) {\r\n-    console.error(\"Error connecting to database:\", error);\r\n-    throw new Error(\"Failed to connect to database\");\r\n+    console.error('Error connecting to MongoDB:', error);\r\n+    throw new Error('Failed to connect to database');\r\n   }\r\n }\r\n \r\n+// Export a module-scoped MongoClient promise. By doing this in a\r\n+// separate module, the client can be shared across functions.\r\n export default clientPromise; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747909286893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,17 @@\n-import { MongoClient, Db } from 'mongodb';\r\n+import { MongoClient } from \"mongodb\";\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n+  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n \r\n-let client: MongoClient;\r\n+let client;\r\n let clientPromise: Promise<MongoClient>;\r\n \r\n-if (process.env.NODE_ENV === 'development') {\r\n+if (process.env.NODE_ENV === \"development\") {\r\n   // In development mode, use a global variable so that the value\r\n   // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n   let globalWithMongo = global as typeof globalThis & {\r\n     _mongoClientPromise?: Promise<MongoClient>;\r\n@@ -30,20 +30,34 @@\n \r\n export async function connectToDatabase() {\r\n   try {\r\n     const client = await clientPromise;\r\n-    const db = client.db(process.env.MONGODB_DB);\r\n-    \r\n-    // Test the connection\r\n-    await db.command({ ping: 1 });\r\n-    console.log('Successfully connected to MongoDB.');\r\n-    \r\n-    return { db, client };\r\n+    const db = client.db(\"aishh\");\r\n+\r\n+    // Update schema if needed\r\n+    const collections = await db.listCollections().toArray();\r\n+    const collectionNames = collections.map(col => col.name);\r\n+\r\n+    // Create banners collection if it doesn't exist\r\n+    if (!collectionNames.includes(\"banners\")) {\r\n+      await db.createCollection(\"banners\");\r\n+      // Create indexes\r\n+      await db.collection(\"banners\").createIndex({ order: 1 });\r\n+      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n+    }\r\n+\r\n+    // Update products schema if needed\r\n+    if (collectionNames.includes(\"products\")) {\r\n+      await db.collection(\"products\").updateMany(\r\n+        { sizeGuideImage: { $exists: false } },\r\n+        { $set: { sizeGuideImage: \"\" } }\r\n+      );\r\n+    }\r\n+\r\n+    return { client, db };\r\n   } catch (error) {\r\n-    console.error('Error connecting to MongoDB:', error);\r\n-    throw new Error('Failed to connect to database');\r\n+    console.error(\"Error connecting to database:\", error);\r\n+    throw new Error(\"Failed to connect to database\");\r\n   }\r\n }\r\n \r\n-// Export a module-scoped MongoClient promise. By doing this in a\r\n-// separate module, the client can be shared across functions.\r\n export default clientPromise; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748318527899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import { MongoClient } from \"mongodb\";\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n+  throw new Error('Please add your Mongo URI to .env.local');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n \r\n-let client;\r\n+let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n \r\n if (process.env.NODE_ENV === \"development\") {\r\n   // In development mode, use a global variable so that the value\r\n@@ -28,36 +28,10 @@\n   clientPromise = client.connect();\r\n }\r\n \r\n export async function connectToDatabase() {\r\n-  try {\r\n-    const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-\r\n-    // Update schema if needed\r\n-    const collections = await db.listCollections().toArray();\r\n-    const collectionNames = collections.map(col => col.name);\r\n-\r\n-    // Create banners collection if it doesn't exist\r\n-    if (!collectionNames.includes(\"banners\")) {\r\n-      await db.createCollection(\"banners\");\r\n-      // Create indexes\r\n-      await db.collection(\"banners\").createIndex({ order: 1 });\r\n-      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n-    }\r\n-\r\n-    // Update products schema if needed\r\n-    if (collectionNames.includes(\"products\")) {\r\n-      await db.collection(\"products\").updateMany(\r\n-        { sizeGuideImage: { $exists: false } },\r\n-        { $set: { sizeGuideImage: \"\" } }\r\n-      );\r\n-    }\r\n-\r\n-    return { client, db };\r\n-  } catch (error) {\r\n-    console.error(\"Error connecting to database:\", error);\r\n-    throw new Error(\"Failed to connect to database\");\r\n-  }\r\n+  const client = await clientPromise;\r\n+  const db = client.db(process.env.MONGODB_DB);\r\n+  return { client, db };\r\n }\r\n \r\n export default clientPromise; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748319273163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import { MongoClient } from \"mongodb\";\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Please add your Mongo URI to .env.local');\r\n+  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n \r\n-let client: MongoClient;\r\n+let client;\r\n let clientPromise: Promise<MongoClient>;\r\n \r\n if (process.env.NODE_ENV === \"development\") {\r\n   // In development mode, use a global variable so that the value\r\n@@ -28,10 +28,36 @@\n   clientPromise = client.connect();\r\n }\r\n \r\n export async function connectToDatabase() {\r\n-  const client = await clientPromise;\r\n-  const db = client.db(process.env.MONGODB_DB);\r\n-  return { client, db };\r\n+  try {\r\n+    const client = await clientPromise;\r\n+    const db = client.db(\"aishh\");\r\n+\r\n+    // Update schema if needed\r\n+    const collections = await db.listCollections().toArray();\r\n+    const collectionNames = collections.map(col => col.name);\r\n+\r\n+    // Create banners collection if it doesn't exist\r\n+    if (!collectionNames.includes(\"banners\")) {\r\n+      await db.createCollection(\"banners\");\r\n+      // Create indexes\r\n+      await db.collection(\"banners\").createIndex({ order: 1 });\r\n+      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n+    }\r\n+\r\n+    // Update products schema if needed\r\n+    if (collectionNames.includes(\"products\")) {\r\n+      await db.collection(\"products\").updateMany(\r\n+        { sizeGuideImage: { $exists: false } },\r\n+        { $set: { sizeGuideImage: \"\" } }\r\n+      );\r\n+    }\r\n+\r\n+    return { client, db };\r\n+  } catch (error) {\r\n+    console.error(\"Error connecting to database:\", error);\r\n+    throw new Error(\"Failed to connect to database\");\r\n+  }\r\n }\r\n \r\n export default clientPromise; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748320128698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { MongoClient } from \"mongodb\";\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n+  throw new Error('Please add your Mongo URI to .env.local');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n@@ -30,31 +30,10 @@\n \r\n export async function connectToDatabase() {\r\n   try {\r\n     const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n-\r\n-    // Update schema if needed\r\n-    const collections = await db.listCollections().toArray();\r\n-    const collectionNames = collections.map(col => col.name);\r\n-\r\n-    // Create banners collection if it doesn't exist\r\n-    if (!collectionNames.includes(\"banners\")) {\r\n-      await db.createCollection(\"banners\");\r\n-      // Create indexes\r\n-      await db.collection(\"banners\").createIndex({ order: 1 });\r\n-      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n-    }\r\n-\r\n-    // Update products schema if needed\r\n-    if (collectionNames.includes(\"products\")) {\r\n-      await db.collection(\"products\").updateMany(\r\n-        { sizeGuideImage: { $exists: false } },\r\n-        { $set: { sizeGuideImage: \"\" } }\r\n-      );\r\n-    }\r\n-\r\n-    return { client, db };\r\n+    const db = client.db(process.env.MONGODB_DB);\r\n+    return { db, client };\r\n   } catch (error) {\r\n     console.error(\"Error connecting to database:\", error);\r\n     throw new Error(\"Failed to connect to database\");\r\n   }\r\n"
                },
                {
                    "date": 1748320164940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { MongoClient } from \"mongodb\";\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Please add your Mongo URI to .env.local');\r\n+  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n@@ -30,10 +30,31 @@\n \r\n export async function connectToDatabase() {\r\n   try {\r\n     const client = await clientPromise;\r\n-    const db = client.db(process.env.MONGODB_DB);\r\n-    return { db, client };\r\n+    const db = client.db(\"aishh\");\r\n+\r\n+    // Update schema if needed\r\n+    const collections = await db.listCollections().toArray();\r\n+    const collectionNames = collections.map(col => col.name);\r\n+\r\n+    // Create banners collection if it doesn't exist\r\n+    if (!collectionNames.includes(\"banners\")) {\r\n+      await db.createCollection(\"banners\");\r\n+      // Create indexes\r\n+      await db.collection(\"banners\").createIndex({ order: 1 });\r\n+      await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n+    }\r\n+\r\n+    // Update products schema if needed\r\n+    if (collectionNames.includes(\"products\")) {\r\n+      await db.collection(\"products\").updateMany(\r\n+        { sizeGuideImage: { $exists: false } },\r\n+        { $set: { sizeGuideImage: \"\" } }\r\n+      );\r\n+    }\r\n+\r\n+    return { client, db };\r\n   } catch (error) {\r\n     console.error(\"Error connecting to database:\", error);\r\n     throw new Error(\"Failed to connect to database\");\r\n   }\r\n"
                },
                {
                    "date": 1748320768187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import { MongoClient } from \"mongodb\";\r\n \r\n if (!process.env.MONGODB_URI) {\r\n-  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n+  throw new Error('Please add your Mongo URI to .env.local');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n const options = {};\r\n \r\n-let client;\r\n+let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n \r\n if (process.env.NODE_ENV === \"development\") {\r\n   // In development mode, use a global variable so that the value\r\n@@ -27,12 +27,16 @@\n   client = new MongoClient(uri, options);\r\n   clientPromise = client.connect();\r\n }\r\n \r\n+// Export a module-scoped MongoClient promise. By doing this in a\r\n+// separate module, the client can be shared across functions.\r\n+export default clientPromise;\r\n+\r\n export async function connectToDatabase() {\r\n   try {\r\n     const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n+    const db = client.db(process.env.MONGODB_DB);\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n     const collectionNames = collections.map(col => col.name);\r\n@@ -52,12 +56,10 @@\n         { $set: { sizeGuideImage: \"\" } }\r\n       );\r\n     }\r\n \r\n-    return { client, db };\r\n+    return { db, client };\r\n   } catch (error) {\r\n     console.error(\"Error connecting to database:\", error);\r\n     throw new Error(\"Failed to connect to database\");\r\n   }\r\n-}\r\n-\r\n\\ No newline at end of file\n-export default clientPromise; \n+} \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748489727920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \r\n export async function connectToDatabase() {\r\n   try {\r\n     const client = await clientPromise;\r\n-    const db = client.db(process.env.MONGODB_DB);\r\n+    const db = client.db(\"aishh\"); // Hardcode database name\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n     const collectionNames = collections.map(col => col.name);\r\n"
                },
                {
                    "date": 1748489951393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,13 @@\n   throw new Error('Please add your Mongo URI to .env.local');\r\n }\r\n \r\n const uri = process.env.MONGODB_URI;\r\n-const options = {};\r\n+const options = {\r\n+  maxPoolSize: 10,\r\n+  serverSelectionTimeoutMS: 5000,\r\n+  socketTimeoutMS: 45000,\r\n+};\r\n \r\n let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n \r\n@@ -33,11 +37,17 @@\n export default clientPromise;\r\n \r\n export async function connectToDatabase() {\r\n   try {\r\n+    // Ensure client is connected\r\n     const client = await clientPromise;\r\n-    const db = client.db(\"aishh\"); // Hardcode database name\r\n+    if (!client.isConnected()) {\r\n+      await client.connect();\r\n+    }\r\n \r\n+    const db = client.db(\"aishh\");\r\n+    console.log(\"Successfully connected to MongoDB.\");\r\n+\r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n     const collectionNames = collections.map(col => col.name);\r\n \r\n"
                },
                {
                    "date": 1748489961910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,15 +37,14 @@\n export default clientPromise;\r\n \r\n export async function connectToDatabase() {\r\n   try {\r\n-    // Ensure client is connected\r\n+    // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n-    if (!client.isConnected()) {\r\n-      await client.connect();\r\n-    }\r\n-\r\n     const db = client.db(\"aishh\");\r\n+    \r\n+    // Test the connection\r\n+    await db.command({ ping: 1 });\r\n     console.log(\"Successfully connected to MongoDB.\");\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n"
                },
                {
                    "date": 1748490675010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,11 @@\n const options = {\r\n   maxPoolSize: 10,\r\n   serverSelectionTimeoutMS: 5000,\r\n   socketTimeoutMS: 45000,\r\n+  connectTimeoutMS: 10000,\r\n+  retryWrites: true,\r\n+  retryReads: true\r\n };\r\n \r\n let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n@@ -41,11 +44,16 @@\n     // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aishh\");\r\n     \r\n-    // Test the connection\r\n-    await db.command({ ping: 1 });\r\n-    console.log(\"Successfully connected to MongoDB.\");\r\n+    // Test the connection with a ping\r\n+    try {\r\n+      await db.command({ ping: 1 });\r\n+      console.log(\"Successfully connected to MongoDB.\");\r\n+    } catch (pingError) {\r\n+      console.error(\"MongoDB ping failed:\", pingError);\r\n+      throw new Error(\"Failed to connect to MongoDB - ping failed\");\r\n+    }\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n     const collectionNames = collections.map(col => col.name);\r\n@@ -68,7 +76,7 @@\n \r\n     return { db, client };\r\n   } catch (error) {\r\n     console.error(\"Error connecting to database:\", error);\r\n-    throw new Error(\"Failed to connect to database\");\r\n+    throw new Error(`Failed to connect to database: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748490774729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n export async function connectToDatabase() {\r\n   try {\r\n     // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n-    const db = client.db(\"aishh\");\r\n+    const db = client.db(\"aish_store\");\r\n     \r\n     // Test the connection with a ping\r\n     try {\r\n       await db.command({ ping: 1 });\r\n"
                },
                {
                    "date": 1748493144600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,19 +40,18 @@\n export default clientPromise;\r\n \r\n export async function connectToDatabase() {\r\n   try {\r\n-    // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aish_store\");\r\n     \r\n-    // Test the connection with a ping\r\n+    // Test the connection\r\n     try {\r\n       await db.command({ ping: 1 });\r\n       console.log(\"Successfully connected to MongoDB.\");\r\n     } catch (pingError) {\r\n       console.error(\"MongoDB ping failed:\", pingError);\r\n-      throw new Error(\"Failed to connect to MongoDB - ping failed\");\r\n+      throw new Error(\"Failed to connect to MongoDB\");\r\n     }\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n@@ -75,8 +74,8 @@\n     }\r\n \r\n     return { db, client };\r\n   } catch (error) {\r\n-    console.error(\"Error connecting to database:\", error);\r\n-    throw new Error(`Failed to connect to database: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n+    console.error(\"Error connecting to MongoDB:\", error);\r\n+    throw error;\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748493172489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,18 +40,19 @@\n export default clientPromise;\r\n \r\n export async function connectToDatabase() {\r\n   try {\r\n+    // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n     const db = client.db(\"aish_store\");\r\n     \r\n-    // Test the connection\r\n+    // Test the connection with a ping\r\n     try {\r\n       await db.command({ ping: 1 });\r\n       console.log(\"Successfully connected to MongoDB.\");\r\n     } catch (pingError) {\r\n       console.error(\"MongoDB ping failed:\", pingError);\r\n-      throw new Error(\"Failed to connect to MongoDB\");\r\n+      throw new Error(\"Failed to connect to MongoDB - ping failed\");\r\n     }\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n@@ -74,8 +75,8 @@\n     }\r\n \r\n     return { db, client };\r\n   } catch (error) {\r\n-    console.error(\"Error connecting to MongoDB:\", error);\r\n-    throw error;\r\n+    console.error(\"Error connecting to database:\", error);\r\n+    throw new Error(`Failed to connect to database: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n   }\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1748494258059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,11 @@\n   serverSelectionTimeoutMS: 5000,\r\n   socketTimeoutMS: 45000,\r\n   connectTimeoutMS: 10000,\r\n   retryWrites: true,\r\n-  retryReads: true\r\n+  retryReads: true,\r\n+  keepAlive: true,\r\n+  keepAliveInitialDelay: 300000\r\n };\r\n \r\n let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n@@ -42,17 +44,27 @@\n export async function connectToDatabase() {\r\n   try {\r\n     // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n+    \r\n+    // Check if client is connected\r\n+    if (!client.isConnected()) {\r\n+      console.log(\"MongoDB client disconnected, attempting to reconnect...\");\r\n+      await client.connect();\r\n+    }\r\n+    \r\n     const db = client.db(\"aish_store\");\r\n     \r\n     // Test the connection with a ping\r\n     try {\r\n       await db.command({ ping: 1 });\r\n       console.log(\"Successfully connected to MongoDB.\");\r\n     } catch (pingError) {\r\n       console.error(\"MongoDB ping failed:\", pingError);\r\n-      throw new Error(\"Failed to connect to MongoDB - ping failed\");\r\n+      // Try to reconnect if ping fails\r\n+      await client.connect();\r\n+      await db.command({ ping: 1 });\r\n+      console.log(\"Successfully reconnected to MongoDB.\");\r\n     }\r\n \r\n     // Update schema if needed\r\n     const collections = await db.listCollections().toArray();\r\n"
                },
                {
                    "date": 1748494425635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,15 +44,8 @@\n export async function connectToDatabase() {\r\n   try {\r\n     // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n-    \r\n-    // Check if client is connected\r\n-    if (!client.isConnected()) {\r\n-      console.log(\"MongoDB client disconnected, attempting to reconnect...\");\r\n-      await client.connect();\r\n-    }\r\n-    \r\n     const db = client.db(\"aish_store\");\r\n     \r\n     // Test the connection with a ping\r\n     try {\r\n"
                },
                {
                    "date": 1748494767858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,9 @@\n   serverSelectionTimeoutMS: 5000,\r\n   socketTimeoutMS: 45000,\r\n   connectTimeoutMS: 10000,\r\n   retryWrites: true,\r\n-  retryReads: true,\r\n-  keepAlive: true,\r\n-  keepAliveInitialDelay: 300000\r\n+  retryReads: true\r\n };\r\n \r\n let client: MongoClient;\r\n let clientPromise: Promise<MongoClient>;\r\n"
                },
                {
                    "date": 1748595941780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,14 +42,18 @@\n export async function connectToDatabase() {\r\n   try {\r\n     // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n-    const db = client.db(\"aish_store\");\r\n     \r\n+    // Use the database name specified in the URI\r\n+    // Removed hardcoded database name and used client.db() which uses the name from URI\r\n+    const db = client.db(); \r\n+    \r\n     // Test the connection with a ping\r\n     try {\r\n+      // Log the connected database name for verification\r\n       await db.command({ ping: 1 });\r\n-      console.log(\"Successfully connected to MongoDB.\");\r\n+      console.log(`Successfully connected to MongoDB database: ${db.databaseName}`);\r\n     } catch (pingError) {\r\n       console.error(\"MongoDB ping failed:\", pingError);\r\n       // Try to reconnect if ping fails\r\n       await client.connect();\r\n"
                },
                {
                    "date": 1748596234495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,18 +42,14 @@\n export async function connectToDatabase() {\r\n   try {\r\n     // Get client and ensure it's connected\r\n     const client = await clientPromise;\r\n+    const db = client.db(\"aishh\");\r\n     \r\n-    // Use the database name specified in the URI\r\n-    // Removed hardcoded database name and used client.db() which uses the name from URI\r\n-    const db = client.db(); \r\n-    \r\n     // Test the connection with a ping\r\n     try {\r\n-      // Log the connected database name for verification\r\n       await db.command({ ping: 1 });\r\n-      console.log(`Successfully connected to MongoDB database: ${db.databaseName}`);\r\n+      console.log(\"Successfully connected to MongoDB.\");\r\n     } catch (pingError) {\r\n       console.error(\"MongoDB ping failed:\", pingError);\r\n       // Try to reconnect if ping fails\r\n       await client.connect();\r\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "import { MongoClient } from \"mongodb\";\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n}\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {};\r\n\r\nlet client;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  let globalWithMongo = global as typeof globalThis & {\r\n    _mongoClientPromise?: Promise<MongoClient>;\r\n  };\r\n\r\n  if (!globalWithMongo._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    globalWithMongo._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = globalWithMongo._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\nexport async function connectToDatabase() {\r\n  const client = await clientPromise;\r\n  const db = client.db(\"aishh\");\r\n\r\n  // Update schema if needed\r\n  const collections = await db.listCollections().toArray();\r\n  const collectionNames = collections.map(col => col.name);\r\n\r\n  // Create banners collection if it doesn't exist\r\n  if (!collectionNames.includes(\"banners\")) {\r\n    await db.createCollection(\"banners\");\r\n    // Create indexes\r\n    await db.collection(\"banners\").createIndex({ order: 1 });\r\n    await db.collection(\"banners\").createIndex({ createdAt: 1 });\r\n  }\r\n\r\n  // Update products schema if needed\r\n  if (collectionNames.includes(\"products\")) {\r\n    await db.collection(\"products\").updateMany(\r\n      { sizeGuideImage: { $exists: false } },\r\n      { $set: { sizeGuideImage: \"\" } }\r\n    );\r\n  }\r\n\r\n  return { client, db };\r\n}\r\n\r\nexport default clientPromise; "
        }
    ]
}