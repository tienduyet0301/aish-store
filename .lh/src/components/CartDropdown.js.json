{
    "sourceFile": "src/components/CartDropdown.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1746893166267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747294170467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,14 @@\n \"use client\";\r\n import { motion } from \"framer-motion\";\r\n import { useRef, useEffect } from \"react\";\r\n import { useCart } from '../context/CartContext';\r\n+import { useLanguage } from '../context/LanguageContext';\r\n import Image from 'next/image';\r\n \r\n export default function CartDropdown({ navigateWithLoader }) {\r\n   const { cartItems, isCartOpen, setIsCartOpen } = useCart();\r\n+  const { t } = useLanguage();\r\n   const cartRef = useRef(null);\r\n \r\n   useEffect(() => {\r\n     const handleClickOutside = (event) => {\r\n@@ -35,9 +37,9 @@\n       transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n       className={`absolute top-[55px] right-4 sm:right-10 w-72 sm:w-120 h-80 sm:h-100 bg-white shadow-md flex flex-col z-50 ${!isCartOpen && 'hidden'}`}\r\n     >\r\n       <div className=\"text-sm font-semibold text-gray-800 border-b border-gray-200 px-4 sm:px-6 py-3 sticky top-0 bg-white z-10 flex justify-between items-center\">\r\n-        <span>Giỏ hàng của bạn</span>\r\n+        <span>{t('cart.title')}</span>\r\n         <button \r\n           onClick={() => setIsCartOpen(false)}\r\n           className=\"text-xs text-gray-500 hover:text-black\"\r\n         >\r\n@@ -46,9 +48,9 @@\n       </div>\r\n       <div className=\"flex-1 overflow-y-auto px-4 sm:px-6 py-4\">\r\n         {cartItems.length === 0 ? (\r\n           <div className=\"h-full flex justify-center items-center\">\r\n-            <p className=\"text-sm text-gray-500\">Giỏ hàng của bạn đang trống!</p>\r\n+            <p className=\"text-sm text-gray-500\">{t('cart.empty')}</p>\r\n           </div>\r\n         ) : (\r\n           <div className=\"space-y-4\">\r\n             {cartItems.map((item, index) => {\r\n@@ -64,27 +66,27 @@\n                   <div className=\"relative w-20 h-20 flex-shrink-0 bg-gray-100\">\r\n                     {item.image && item.image !== \"\" ? (\r\n                       <Image\r\n                         src={item.image}\r\n-                        alt={item.name || 'Product image'}\r\n+                        alt={item.name || t('product.noImage')}\r\n                         fill\r\n                         className=\"object-cover\"\r\n                         sizes=\"80px\"\r\n                       />\r\n                     ) : (\r\n                       <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\r\n-                        <span className=\"text-xs text-gray-400\">No image</span>\r\n+                        <span className=\"text-xs text-gray-400\">{t('product.noImage')}</span>\r\n                       </div>\r\n                     )}\r\n                   </div>\r\n                   <div className=\"flex-1 min-w-0\">\r\n                     <h3 className=\"text-sm font-semibold text-gray-900 truncate\">\r\n-                      {item.name || 'Unnamed product'}\r\n+                      {item.name || t('product.unnamed')}\r\n                     </h3>\r\n                     <div className=\"mt-1 text-[10px] text-gray-500 space-y-0.5\">\r\n-                      {item.size && <p>Size: {item.size}</p>}\r\n-                      {item.color && <p>Màu: {item.color}</p>}\r\n-                      <p>Số lượng: {itemQuantity}</p>\r\n+                      {item.size && <p>{t('product.size')}: {item.size}</p>}\r\n+                      {item.color && <p>{t('product.color')}: {item.color}</p>}\r\n+                      <p>{t('product.quantity')}: {itemQuantity}</p>\r\n                     </div>\r\n                     <p className=\"mt-2 text-sm font-semibold text-gray-900\">\r\n                       {itemTotal.toLocaleString('vi-VN')} VND\r\n                     </p>\r\n@@ -97,24 +99,24 @@\n       </div>\r\n       {cartItems.length > 0 && (\r\n         <div className=\"border-t border-gray-200 px-4 sm:px-6 py-3 sticky bottom-0 bg-white z-10 space-y-2\">\r\n           <div className=\"flex justify-between items-center mb-3\">\r\n-            <span className=\"text-sm font-medium text-gray-900\">Tổng cộng:</span>\r\n+            <span className=\"text-sm font-medium text-gray-900\">{t('cart.total')}:</span>\r\n             <span className=\"text-sm font-semibold text-gray-900\">\r\n               {total.toLocaleString('vi-VN')} VND\r\n             </span>\r\n           </div>\r\n           <button\r\n             className=\"w-full bg-black text-white text-sm font-semibold py-2 px-4 hover:bg-gray-800 transition-colors\"\r\n             onClick={() => navigateWithLoader(\"/checkout\")}\r\n           >\r\n-            Thanh toán\r\n+            {t('cart.checkout')}\r\n           </button>\r\n           <button\r\n             className=\"w-full bg-white text-black text-sm font-semibold py-2 px-4 border border-black hover:bg-gray-100 transition-colors\"\r\n             onClick={() => navigateWithLoader(\"/cart\")}\r\n           >\r\n-            Xem giỏ hàng\r\n+            {t('cart.viewCart')}\r\n           </button>\r\n         </div>\r\n       )}\r\n     </motion.div>\r\n"
                },
                {
                    "date": 1747294303731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                     )}\r\n                   </div>\r\n                   <div className=\"flex-1 min-w-0\">\r\n                     <h3 className=\"text-sm font-semibold text-gray-900 truncate\">\r\n-                      {item.name || t('product.unnamed')}\r\n+                      {item.name}\r\n                     </h3>\r\n                     <div className=\"mt-1 text-[10px] text-gray-500 space-y-0.5\">\r\n                       {item.size && <p>{t('product.size')}: {item.size}</p>}\r\n                       {item.color && <p>{t('product.color')}: {item.color}</p>}\r\n"
                },
                {
                    "date": 1747294355232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import Image from 'next/image';\r\n \r\n export default function CartDropdown({ navigateWithLoader }) {\r\n   const { cartItems, isCartOpen, setIsCartOpen } = useCart();\r\n-  const { t } = useLanguage();\r\n+  const { t, language } = useLanguage();\r\n   const cartRef = useRef(null);\r\n \r\n   useEffect(() => {\r\n     const handleClickOutside = (event) => {\r\n@@ -27,8 +27,19 @@\n     const itemQuantity = parseInt(item.quantity) || 0;\r\n     return sum + (itemPrice * itemQuantity);\r\n   }, 0);\r\n \r\n+  // Format price based on language\r\n+  const formatPrice = (price) => {\r\n+    if (language === 'vi') {\r\n+      return `${price.toLocaleString('vi-VN')} VND`;\r\n+    } else {\r\n+      // Convert VND to USD (assuming 1 USD = 24,500 VND)\r\n+      const usdPrice = (price / 24500).toFixed(2);\r\n+      return `$${usdPrice}`;\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n     <motion.div\r\n       ref={cartRef}\r\n       initial={{ opacity: 0, y: -10 }}\r\n@@ -66,9 +77,9 @@\n                   <div className=\"relative w-20 h-20 flex-shrink-0 bg-gray-100\">\r\n                     {item.image && item.image !== \"\" ? (\r\n                       <Image\r\n                         src={item.image}\r\n-                        alt={item.name || t('product.noImage')}\r\n+                        alt={item.name}\r\n                         fill\r\n                         className=\"object-cover\"\r\n                         sizes=\"80px\"\r\n                       />\r\n@@ -87,9 +98,9 @@\n                       {item.color && <p>{t('product.color')}: {item.color}</p>}\r\n                       <p>{t('product.quantity')}: {itemQuantity}</p>\r\n                     </div>\r\n                     <p className=\"mt-2 text-sm font-semibold text-gray-900\">\r\n-                      {itemTotal.toLocaleString('vi-VN')} VND\r\n+                      {formatPrice(itemTotal)}\r\n                     </p>\r\n                   </div>\r\n                 </div>\r\n               );\r\n@@ -101,9 +112,9 @@\n         <div className=\"border-t border-gray-200 px-4 sm:px-6 py-3 sticky bottom-0 bg-white z-10 space-y-2\">\r\n           <div className=\"flex justify-between items-center mb-3\">\r\n             <span className=\"text-sm font-medium text-gray-900\">{t('cart.total')}:</span>\r\n             <span className=\"text-sm font-semibold text-gray-900\">\r\n-              {total.toLocaleString('vi-VN')} VND\r\n+              {formatPrice(total)}\r\n             </span>\r\n           </div>\r\n           <button\r\n             className=\"w-full bg-black text-white text-sm font-semibold py-2 px-4 hover:bg-gray-800 transition-colors\"\r\n"
                },
                {
                    "date": 1747294469645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,38 @@\n \"use client\";\r\n import { motion } from \"framer-motion\";\r\n-import { useRef, useEffect } from \"react\";\r\n+import { useRef, useEffect, useState } from \"react\";\r\n import { useCart } from '../context/CartContext';\r\n import { useLanguage } from '../context/LanguageContext';\r\n import Image from 'next/image';\r\n \r\n export default function CartDropdown({ navigateWithLoader }) {\r\n   const { cartItems, isCartOpen, setIsCartOpen } = useCart();\r\n   const { t, language } = useLanguage();\r\n   const cartRef = useRef(null);\r\n+  const [exchangeRate, setExchangeRate] = useState(24500); // Default fallback rate\r\n \r\n   useEffect(() => {\r\n+    const fetchExchangeRate = async () => {\r\n+      try {\r\n+        const response = await fetch('https://open.er-api.com/v6/latest/USD');\r\n+        const data = await response.json();\r\n+        if (data.rates && data.rates.VND) {\r\n+          setExchangeRate(data.rates.VND);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error fetching exchange rate:', error);\r\n+        // Keep using the default rate if API fails\r\n+      }\r\n+    };\r\n+\r\n+    fetchExchangeRate();\r\n+    // Update exchange rate every hour\r\n+    const interval = setInterval(fetchExchangeRate, 3600000);\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n     const handleClickOutside = (event) => {\r\n       const cartIcon = document.querySelector('[data-testid=\"cart-icon\"]');\r\n       if (cartRef.current && !cartRef.current.contains(event.target) && event.target !== cartIcon) {\r\n         setIsCartOpen(false);\r\n@@ -32,10 +53,10 @@\n   const formatPrice = (price) => {\r\n     if (language === 'vi') {\r\n       return `${price.toLocaleString('vi-VN')} VND`;\r\n     } else {\r\n-      // Convert VND to USD (assuming 1 USD = 24,500 VND)\r\n-      const usdPrice = (price / 24500).toFixed(2);\r\n+      // Convert VND to USD using real-time exchange rate\r\n+      const usdPrice = (price / exchangeRate).toFixed(2);\r\n       return `$${usdPrice}`;\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1747294542012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n export default function CartDropdown({ navigateWithLoader }) {\r\n   const { cartItems, isCartOpen, setIsCartOpen } = useCart();\r\n   const { t, language } = useLanguage();\r\n   const cartRef = useRef(null);\r\n-  const [exchangeRate, setExchangeRate] = useState(24500); // Default fallback rate\r\n+  const [exchangeRate, setExchangeRate] = useState(26000); // Default fallback rate\r\n \r\n   useEffect(() => {\r\n     const fetchExchangeRate = async () => {\r\n       try {\r\n"
                },
                {
                    "date": 1750472351187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,14 +130,17 @@\n         )}\r\n       </div>\r\n       {cartItems.length > 0 && (\r\n         <div className=\"border-t border-gray-200 px-4 sm:px-6 py-3 sticky bottom-0 bg-white z-10 space-y-2\">\r\n-          <div className=\"flex justify-between items-center mb-3\">\r\n+          <div className=\"flex justify-between items-center mb-2\">\r\n             <span className=\"text-sm font-medium text-gray-900\">{t('cart.total')}:</span>\r\n             <span className=\"text-sm font-semibold text-gray-900\">\r\n               {formatPrice(total)}\r\n             </span>\r\n           </div>\r\n+          <div className=\"text-xs text-gray-500 mb-3 text-center\">\r\n+            Shipping fee will be calculated at checkout\r\n+          </div>\r\n           <button\r\n             className=\"w-full bg-black text-white text-sm font-semibold py-2 px-4 hover:bg-gray-800 transition-colors\"\r\n             onClick={() => navigateWithLoader(\"/checkout\")}\r\n           >\r\n"
                },
                {
                    "date": 1750473668009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,11 +136,8 @@\n             <span className=\"text-sm font-semibold text-gray-900\">\r\n               {formatPrice(total)}\r\n             </span>\r\n           </div>\r\n-          <div className=\"text-xs text-gray-500 mb-3 text-center\">\r\n-            Shipping fee will be calculated at checkout\r\n-          </div>\r\n           <button\r\n             className=\"w-full bg-black text-white text-sm font-semibold py-2 px-4 hover:bg-gray-800 transition-colors\"\r\n             onClick={() => navigateWithLoader(\"/checkout\")}\r\n           >\r\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useRef, useEffect } from \"react\";\r\nimport { useCart } from '../context/CartContext';\r\nimport Image from 'next/image';\r\n\r\nexport default function CartDropdown({ navigateWithLoader }) {\r\n  const { cartItems, isCartOpen, setIsCartOpen } = useCart();\r\n  const cartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event) => {\r\n      const cartIcon = document.querySelector('[data-testid=\"cart-icon\"]');\r\n      if (cartRef.current && !cartRef.current.contains(event.target) && event.target !== cartIcon) {\r\n        setIsCartOpen(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, [setIsCartOpen]);\r\n\r\n  // Tính tổng giá trị giỏ hàng\r\n  const total = cartItems.reduce((sum, item) => {\r\n    const itemPrice = parseFloat(item.price) || 0;\r\n    const itemQuantity = parseInt(item.quantity) || 0;\r\n    return sum + (itemPrice * itemQuantity);\r\n  }, 0);\r\n\r\n  return (\r\n    <motion.div\r\n      ref={cartRef}\r\n      initial={{ opacity: 0, y: -10 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      exit={{ opacity: 0, y: -10 }}\r\n      transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n      className={`absolute top-[55px] right-4 sm:right-10 w-72 sm:w-120 h-80 sm:h-100 bg-white shadow-md flex flex-col z-50 ${!isCartOpen && 'hidden'}`}\r\n    >\r\n      <div className=\"text-sm font-semibold text-gray-800 border-b border-gray-200 px-4 sm:px-6 py-3 sticky top-0 bg-white z-10 flex justify-between items-center\">\r\n        <span>Giỏ hàng của bạn</span>\r\n        <button \r\n          onClick={() => setIsCartOpen(false)}\r\n          className=\"text-xs text-gray-500 hover:text-black\"\r\n        >\r\n          ✕\r\n        </button>\r\n      </div>\r\n      <div className=\"flex-1 overflow-y-auto px-4 sm:px-6 py-4\">\r\n        {cartItems.length === 0 ? (\r\n          <div className=\"h-full flex justify-center items-center\">\r\n            <p className=\"text-sm text-gray-500\">Giỏ hàng của bạn đang trống!</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {cartItems.map((item, index) => {\r\n              const itemPrice = parseFloat(item.price) || 0;\r\n              const itemQuantity = parseInt(item.quantity) || 0;\r\n              const itemTotal = itemPrice * itemQuantity;\r\n\r\n              return (\r\n                <div \r\n                  key={`${item.name}-${item.size}-${item.color}-${index}`} \r\n                  className=\"flex items-start gap-3 pb-4 border-b border-gray-100 last:border-0\"\r\n                >\r\n                  <div className=\"relative w-20 h-20 flex-shrink-0 bg-gray-100\">\r\n                    {item.image && item.image !== \"\" ? (\r\n                      <Image\r\n                        src={item.image}\r\n                        alt={item.name || 'Product image'}\r\n                        fill\r\n                        className=\"object-cover\"\r\n                        sizes=\"80px\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\r\n                        <span className=\"text-xs text-gray-400\">No image</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <h3 className=\"text-sm font-semibold text-gray-900 truncate\">\r\n                      {item.name || 'Unnamed product'}\r\n                    </h3>\r\n                    <div className=\"mt-1 text-[10px] text-gray-500 space-y-0.5\">\r\n                      {item.size && <p>Size: {item.size}</p>}\r\n                      {item.color && <p>Màu: {item.color}</p>}\r\n                      <p>Số lượng: {itemQuantity}</p>\r\n                    </div>\r\n                    <p className=\"mt-2 text-sm font-semibold text-gray-900\">\r\n                      {itemTotal.toLocaleString('vi-VN')} VND\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {cartItems.length > 0 && (\r\n        <div className=\"border-t border-gray-200 px-4 sm:px-6 py-3 sticky bottom-0 bg-white z-10 space-y-2\">\r\n          <div className=\"flex justify-between items-center mb-3\">\r\n            <span className=\"text-sm font-medium text-gray-900\">Tổng cộng:</span>\r\n            <span className=\"text-sm font-semibold text-gray-900\">\r\n              {total.toLocaleString('vi-VN')} VND\r\n            </span>\r\n          </div>\r\n          <button\r\n            className=\"w-full bg-black text-white text-sm font-semibold py-2 px-4 hover:bg-gray-800 transition-colors\"\r\n            onClick={() => navigateWithLoader(\"/checkout\")}\r\n          >\r\n            Thanh toán\r\n          </button>\r\n          <button\r\n            className=\"w-full bg-white text-black text-sm font-semibold py-2 px-4 border border-black hover:bg-gray-100 transition-colors\"\r\n            onClick={() => navigateWithLoader(\"/cart\")}\r\n          >\r\n            Xem giỏ hàng\r\n          </button>\r\n        </div>\r\n      )}\r\n    </motion.div>\r\n  );\r\n}"
        }
    ]
}