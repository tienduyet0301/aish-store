{
    "sourceFile": "src/components/RegisterForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747642426796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747642426796,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useCallback } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { FcGoogle } from \"react-icons/fc\";\r\nimport { FiEdit2 } from \"react-icons/fi\";\r\nimport { motion } from \"framer-motion\";\r\nimport { signIn } from \"next-auth/react\";\r\nimport Head from \"next/head\";\r\nimport { PasswordField } from \"./PasswordField\";\r\nimport { DateOfBirthSection } from \"./DateOfBirthSection\";\r\n\r\ninterface RegisterFormProps {\r\n  initialEmail: string;\r\n  initialName: string;\r\n}\r\n\r\ninterface FormData {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  day: string;\r\n  month: string;\r\n  year: string;\r\n  receiveUpdates: boolean;\r\n}\r\n\r\ninterface Errors {\r\n  email?: string;\r\n  password?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  date?: string;\r\n  receiveUpdates?: string;\r\n  api?: string;\r\n}\r\n\r\ninterface Touched {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport default function RegisterForm({ initialEmail, initialName }: RegisterFormProps) {\r\n  const router = useRouter();\r\n  const emailInputRef = useRef<HTMLInputElement>(null);\r\n  const [isEmailEditable, setIsEmailEditable] = useState(false);\r\n  const [isEditingIcon, setIsEditingIcon] = useState(false);\r\n  const [isFocused, setIsFocused] = useState<{ [key: string]: boolean }>({});\r\n  const [touched, setTouched] = useState<Touched>({});\r\n  const [formData, setFormData] = useState<FormData>({\r\n    email: initialEmail,\r\n    password: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    day: \"\",\r\n    month: \"\",\r\n    year: \"\",\r\n    receiveUpdates: false,\r\n  });\r\n  const [errors, setErrors] = useState<Errors>({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleFocus = useCallback((field: string) => {\r\n    setIsFocused((prev) => ({ ...prev, [field]: true }));\r\n  }, []);\r\n\r\n  const handleBlur = useCallback((field: string) => {\r\n    setIsFocused((prev) => ({ ...prev, [field]: false }));\r\n    setTouched((prev) => ({ ...prev, [field]: true }));\r\n    const newErrors = validateForm(formData);\r\n    setErrors(newErrors);\r\n  }, [formData]);\r\n\r\n  const handleEditEmail = useCallback(() => {\r\n    setIsEmailEditable(true);\r\n    setIsEditingIcon(true);\r\n    setTimeout(() => {\r\n      emailInputRef.current?.focus();\r\n      setIsEditingIcon(false);\r\n    }, 500);\r\n  }, []);\r\n\r\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n    if (touched[name]) {\r\n      setErrors((prev) => ({ ...prev, [name]: undefined }));\r\n    }\r\n  }, [touched]);\r\n\r\n  const handleCheckboxChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, checked } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: checked,\r\n    }));\r\n  }, []);\r\n\r\n  const validateForm = (formData: FormData): Errors => {\r\n    const errors: Errors = {};\r\n    const passwordValid = validatePassword(formData.password);\r\n\r\n    if (!formData.email || !validateEmail(formData.email)) {\r\n      errors.email = \"Please enter a valid email address\";\r\n    }\r\n    if (!formData.password || !Object.values(passwordValid).every(Boolean)) {\r\n      errors.password = \"Please enter a valid password\";\r\n    }\r\n    if (!formData.firstName) {\r\n      errors.firstName = \"Please enter your first name\";\r\n    }\r\n    if (!formData.lastName) {\r\n      errors.lastName = \"Please enter your last name\";\r\n    }\r\n    if (!formData.day || !formData.month || !formData.year) {\r\n      errors.date = \"Please enter your full date of birth\";\r\n    }\r\n    if (!formData.receiveUpdates) {\r\n      errors.receiveUpdates = \"You must agree to receive updates\";\r\n    }\r\n\r\n    return errors;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErrors({});\r\n\r\n    // Validate form\r\n    const validationErrors = validateForm(formData);\r\n    if (Object.keys(validationErrors).length > 0) {\r\n      setErrors(validationErrors);\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"/api/auth/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          name: formData.firstName + ' ' + formData.lastName,\r\n          email: formData.email,\r\n          password: formData.password,\r\n          day: formData.day,\r\n          month: formData.month,\r\n          year: formData.year,\r\n          receiveUpdates: formData.receiveUpdates,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || \"Đăng ký thất bại\");\r\n      }\r\n\r\n      // Chuyển hướng đến trang đăng nhập sau khi đăng ký thành công\r\n      router.push(\"/login\");\r\n    } catch (error) {\r\n      setErrors({ api: error instanceof Error ? error.message : \"Có lỗi xảy ra\" });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleGoogleSignIn = () => {\r\n    signIn(\"google\", { callbackUrl: \"/\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Register | My AISH</title>\r\n      </Head>\r\n      <div className=\"min-h-screen bg-white flex flex-col items-center pt-12 md:pt-20\">\r\n        <h1 className=\"text-3xl md:text-5xl font-bold text-black text-center my-4 md:my-8 tracking-wide\">\r\n          MY AISH ACCOUNT\r\n        </h1>\r\n        <div className=\"w-full max-w-[280px] md:max-w-[350px] flex flex-col gap-4\">\r\n          <button \r\n            onClick={handleGoogleSignIn}\r\n            className=\"flex items-center justify-center w-full md:w-[350px] border border-black text-black py-2.5 md:py-4 rounded-none text-xs md:text-base font-normal tracking-wide hover:bg-gray-100 transition mb-2\"\r\n            style={{ fontFamily: 'inherit', letterSpacing: '1px' }}\r\n          >\r\n            <FcGoogle className=\"text-lg md:text-2xl mr-2 md:mr-3\" />\r\n            <span className=\"text-xs md:text-base font-semibold tracking-widest\">CONTINUE WITH GOOGLE</span>\r\n          </button>\r\n          <div className=\"flex items-center justify-center mt-2 md:mt-3\">\r\n            <span className=\"text-black font-semibold text-sm md:text-base\">OR</span>\r\n          </div>\r\n          <div className=\"flex justify-center w-full\">\r\n            <h2 className=\"text-black text-[10px] md:text-3xl font-semibold text-center md:whitespace-nowrap\">\r\n              CONTINUE WITH YOUR EMAIL ADDRESS\r\n            </h2>\r\n          </div>\r\n          <div className=\"flex justify-center w-full text-center px-2 md:px-4 md:whitespace-nowrap\">\r\n            <p className=\"text-black text-[7px] md:text-xs font-semibold\">\r\n              SIGN IN WITH YOUR EMAIL AND PASSWORD OR CREATE A PROFILE IF YOU ARE NEW\r\n            </p>\r\n          </div>\r\n\r\n          <form onSubmit={handleSubmit} className=\"mt-8 space-y-6\">\r\n            {/* Email Field */}\r\n            <div className=\"relative w-full mt-2\">\r\n              <label htmlFor=\"email\" className=\"sr-only\">Email</label>\r\n              <motion.label\r\n                className={`absolute text-xs md:text-sm bg-white px-1 z-10 ${errors.email ? \"text-red-400\" : \"text-gray-500\"}`}\r\n                initial={{ \r\n                  top: formData.email ? \"5px\" : \"50%\", \r\n                  left: formData.email ? \"4px\" : \"12px\",\r\n                  scale: formData.email ? 0.75 : 1,\r\n                  translateY: formData.email ? \"0\" : \"-50%\",\r\n                }}\r\n                animate={{\r\n                  top: isFocused.email || formData.email ? \"5px\" : \"50%\",\r\n                  left: isFocused.email || formData.email ? \"4px\" : \"12px\",\r\n                  scale: isFocused.email || formData.email ? 0.75 : 1,\r\n                  translateY: isFocused.email || formData.email ? \"0\" : \"-50%\",\r\n                }}\r\n                transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n                htmlFor=\"email\"\r\n              >\r\n                EMAIL*\r\n              </motion.label>\r\n              <div className=\"relative\">\r\n                <input\r\n                  ref={emailInputRef}\r\n                  type=\"text\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  value={formData.email}\r\n                  onChange={handleInputChange}\r\n                  onFocus={() => handleFocus(\"email\")}\r\n                  onBlur={() => handleBlur(\"email\")}\r\n                  className={`w-full px-4 pt-6 pb-2 text-sm text-black border rounded-none focus:outline-none focus:ring-2 \r\n                    ${errors.email ? \"border-red-400 focus:ring-red-400\" : \"border-gray-300 focus:ring-black\"}`}\r\n                  readOnly={!isEmailEditable}\r\n                  aria-label=\"Email\"\r\n                  placeholder=\"Enter your email\"\r\n                  autoComplete=\"email\"\r\n                  title=\"Email\"\r\n                />\r\n                <motion.div\r\n                  animate={{ rotate: isEditingIcon ? 20 : 0 }}\r\n                  transition={{ duration: 0.3, yoyo: 3 }}\r\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 cursor-pointer\"\r\n                  onClick={handleEditEmail}\r\n                  aria-label=\"Edit email\"\r\n                  title=\"Edit email\"\r\n                  tabIndex={0}\r\n                  role=\"button\"\r\n                >\r\n                  <FiEdit2 className=\"text-gray-500 w-4 h-4 md:w-5 md:h-5\" />\r\n                </motion.div>\r\n              </div>\r\n              {errors.email && touched.email && (\r\n                <p className=\"text-red-400 text-[7px] md:text-xs mt-1\">{errors.email}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* First Name and Last Name Fields */}\r\n            {\"firstName lastName\".split(\" \").map((field) => (\r\n              <div key={field} className=\"relative w-full mt-2\">\r\n                <label htmlFor={field} className=\"sr-only\">{field === \"firstName\" ? \"First Name\" : \"Last Name\"}</label>\r\n                <motion.label\r\n                  className={`absolute text-xs md:text-sm bg-white px-1 z-10 ${errors[field] ? \"text-red-400\" : \"text-gray-500\"}`}\r\n                  initial={{ \r\n                    top: formData[field as keyof FormData] ? \"5px\" : \"50%\", \r\n                    left: formData[field as keyof FormData] ? \"4px\" : \"12px\",\r\n                    scale: formData[field as keyof FormData] ? 0.75 : 1,\r\n                    translateY: formData[field as keyof FormData] ? \"0\" : \"-50%\",\r\n                  }}\r\n                  animate={{\r\n                    top: isFocused[field] || formData[field as keyof FormData] ? \"5px\" : \"50%\",\r\n                    left: isFocused[field] || formData[field as keyof FormData] ? \"4px\" : \"12px\",\r\n                    scale: isFocused[field] || formData[field as keyof FormData] ? 0.75 : 1,\r\n                    translateY: isFocused[field] || formData[field as keyof FormData] ? \"0\" : \"-90%\",\r\n                  }}\r\n                  transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n                  htmlFor={field}\r\n                >\r\n                  {field === \"firstName\" ? \"FIRST NAME*\" : \"LAST NAME*\"}\r\n                </motion.label>\r\n                <div className=\"relative\">\r\n                  <input\r\n                    type=\"text\"\r\n                    id={field}\r\n                    name={field}  \r\n                    value={(formData[field as keyof FormData] as string) || \"\"}\r\n                    onChange={handleInputChange}\r\n                    onFocus={() => handleFocus(field)}\r\n                    onBlur={() => handleBlur(field)}\r\n                    className={`w-full px-4 pt-6 pb-2 text-sm text-black border rounded-none focus:outline-none focus:ring-2 \r\n                      ${errors[field] ? \"border-red-400 focus:ring-red-400\" : \"border-gray-300 focus:ring-black\"}`}\r\n                    aria-label={field === \"firstName\" ? \"First Name\" : \"Last Name\"}\r\n                    autoComplete={field === \"firstName\" ? \"given-name\" : \"family-name\"}\r\n                    title={field === \"firstName\" ? \"First Name\" : \"Last Name\"}\r\n                  />\r\n                </div>\r\n                {errors[field] && touched[field] && (\r\n                  <p className=\"text-red-400 text-[7px] md:text-xs mt-1\">{errors[field]}</p>\r\n                )}\r\n              </div>\r\n            ))}\r\n\r\n            {/* Password Field */}\r\n            <div className=\"relative w-full mt-2\">\r\n              <label htmlFor=\"password\" className=\"sr-only\">Password</label>\r\n              <PasswordField \r\n                value={formData.password}\r\n                onChange={handleInputChange}\r\n                isFocused={isFocused.password}\r\n                onFocus={() => handleFocus(\"password\")}\r\n                onBlur={() => handleBlur(\"password\")}\r\n                hasError={!!errors.password && touched.password}\r\n              />\r\n            </div>\r\n\r\n            {/* Date of Birth Section */}\r\n            <DateOfBirthSection \r\n              formData={formData} \r\n              handleInputChange={handleInputChange} \r\n              errors={errors} \r\n              touched={touched} \r\n              setTouched={setTouched}\r\n            />\r\n\r\n            {/* Checkbox for Updates */}\r\n            <div className=\"mt-2 w-full\">\r\n              <label className=\"flex items-start space-x-2\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name=\"receiveUpdates\"\r\n                  checked={formData.receiveUpdates}\r\n                  onChange={handleCheckboxChange}\r\n                  className=\"form-checkbox h-3 w-3 md:h-4 md:w-4 text-black border-gray-300 rounded focus:ring-black mt-1\"\r\n                  aria-label=\"Receive updates\"\r\n                  title=\"Receive updates\"\r\n                  required\r\n                />\r\n                <span className=\"text-[8px] md:text-[10px] text-gray-700 flex-1\">\r\n                  I would like to receive updates (including by email, SMS, MMS, social media, phone...) about AISH new activities, exclusive products, tailored services and to have a personalised client experience based on my interests.\r\n                </span>\r\n              </label>\r\n              {errors.receiveUpdates && touched.receiveUpdates && (\r\n                <p className=\"text-red-400 text-[7px] md:text-xs mt-1\">{errors.receiveUpdates}</p>\r\n              )}\r\n            </div>\r\n\r\n            {/* Continue Button */}\r\n            <div>\r\n              <button\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n                className=\"group relative w-full md:w-[350px] flex justify-center py-2.5 md:py-4 border border-transparent text-xs md:text-base font-normal tracking-wide text-white bg-black hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50\"\r\n                style={{ fontFamily: 'inherit', letterSpacing: '1px' }}\r\n              >\r\n                <span className=\"text-xs md:text-base font-semibold tracking-widest\">\r\n                  {isLoading ? \"REGISTERING...\" : \"REGISTER\"}\r\n                </span>\r\n              </button>\r\n            </div>\r\n\r\n            {/* Dòng JOIN MY AISH */}\r\n            <div className=\"mt-8 md:mt-15 mb-8 md:mb-12 text-black font-semibold text-xl md:text-2xl text-center\">\r\n              JOIN MY AISH\r\n            </div>\r\n\r\n            {/* Hiển thị lỗi API nếu có */}\r\n            {errors.api && (\r\n              <p className=\"text-red-400 text-[7px] md:text-xs mt-1\">{errors.api}</p>\r\n            )}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n} "
        }
    ]
}