{
    "sourceFile": "src/context/OrderContext.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1746893166769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747062397702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,32 +4,52 @@\n const OrderContext = createContext();\r\n \r\n export function OrderProvider({ children }) {\r\n   const [orders, setOrders] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n \r\n-  // Load orders from localStorage when component mounts\r\n+  const fetchOrders = async () => {\r\n+    try {\r\n+      const response = await fetch('/api/orders');\r\n+      if (!response.ok) {\r\n+        throw new Error('Failed to fetch orders');\r\n+      }\r\n+      const data = await response.json();\r\n+      setOrders(data.orders);\r\n+    } catch (error) {\r\n+      console.error('Error fetching orders:', error);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Fetch orders on initial load\r\n   useEffect(() => {\r\n-    const savedOrders = localStorage.getItem('userOrders');\r\n-    if (savedOrders) {\r\n-      setOrders(JSON.parse(savedOrders));\r\n-    }\r\n+    fetchOrders();\r\n   }, []);\r\n \r\n-  // Save orders to localStorage whenever it changes\r\n+  // Set up polling to refresh orders every 30 seconds\r\n   useEffect(() => {\r\n-    localStorage.setItem('userOrders', JSON.stringify(orders));\r\n-  }, [orders]);\r\n+    const interval = setInterval(fetchOrders, 30000);\r\n+    return () => clearInterval(interval);\r\n+  }, []);\r\n \r\n-  const addOrder = (newOrder) => {\r\n-    setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n+  const value = {\r\n+    orders,\r\n+    loading,\r\n+    refreshOrders: fetchOrders\r\n   };\r\n \r\n   return (\r\n-    <OrderContext.Provider value={{ orders, addOrder }}>\r\n+    <OrderContext.Provider value={value}>\r\n       {children}\r\n     </OrderContext.Provider>\r\n   );\r\n }\r\n \r\n export function useOrders() {\r\n-  return useContext(OrderContext);\r\n+  const context = useContext(OrderContext);\r\n+  if (context === undefined) {\r\n+    throw new Error(\"useOrders must be used within an OrderProvider\");\r\n+  }\r\n+  return context;\r\n } \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747063396088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,30 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n+  const addOrder = async (order) => {\r\n+    try {\r\n+      const response = await fetch('/api/orders', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(order),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error('Failed to add order');\r\n+      }\r\n+\r\n+      const data = await response.json();\r\n+      setOrders(prevOrders => [...prevOrders, data.order]);\r\n+    } catch (error) {\r\n+      console.error('Error adding order:', error);\r\n+      throw error;\r\n+    }\r\n+  };\r\n+\r\n   // Fetch orders on initial load\r\n   useEffect(() => {\r\n     fetchOrders();\r\n   }, []);\r\n@@ -35,9 +57,10 @@\n \r\n   const value = {\r\n     orders,\r\n     loading,\r\n-    refreshOrders: fetchOrders\r\n+    refreshOrders: fetchOrders,\r\n+    addOrder\r\n   };\r\n \r\n   return (\r\n     <OrderContext.Provider value={value}>\r\n@@ -45,11 +68,11 @@\n     </OrderContext.Provider>\r\n   );\r\n }\r\n \r\n-export function useOrders() {\r\n+export const useOrders = () => {\r\n   const context = useContext(OrderContext);\r\n   if (context === undefined) {\r\n-    throw new Error(\"useOrders must be used within an OrderProvider\");\r\n+    throw new Error('useOrders must be used within an OrderProvider');\r\n   }\r\n\\ No newline at end of file\n   return context;\r\n-} \n+}; \n\\ No newline at end of file\n"
                },
                {
                    "date": 1747064794269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,27 +21,15 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  const addOrder = async (order) => {\r\n+  const addOrder = async (newOrder) => {\r\n     try {\r\n-      const response = await fetch('/api/orders', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(order),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error('Failed to add order');\r\n-      }\r\n-\r\n-      const data = await response.json();\r\n-      setOrders(prevOrders => [...prevOrders, data.order]);\r\n+      setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n+      return true;\r\n     } catch (error) {\r\n       console.error('Error adding order:', error);\r\n-      throw error;\r\n+      throw new Error('Failed to add order');\r\n     }\r\n   };\r\n \r\n   // Fetch orders on initial load\r\n"
                },
                {
                    "date": 1747112162438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,13 @@\n       throw new Error('Failed to add order');\r\n     }\r\n   };\r\n \r\n+  const resetOrders = () => {\r\n+    setOrders([]);\r\n+    setLoading(true);\r\n+  };\r\n+\r\n   // Fetch orders on initial load\r\n   useEffect(() => {\r\n     fetchOrders();\r\n   }, []);\r\n@@ -46,9 +51,10 @@\n   const value = {\r\n     orders,\r\n     loading,\r\n     refreshOrders: fetchOrders,\r\n-    addOrder\r\n+    addOrder,\r\n+    resetOrders\r\n   };\r\n \r\n   return (\r\n     <OrderContext.Provider value={value}>\r\n"
                },
                {
                    "date": 1747112915852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,15 +9,20 @@\n \r\n   const fetchOrders = async () => {\r\n     try {\r\n       const response = await fetch('/api/orders');\r\n+      if (response.status === 401) {\r\n+        setOrders([]);\r\n+        return;\r\n+      }\r\n       if (!response.ok) {\r\n         throw new Error('Failed to fetch orders');\r\n       }\r\n       const data = await response.json();\r\n       setOrders(data.orders);\r\n     } catch (error) {\r\n       console.error('Error fetching orders:', error);\r\n+      setOrders([]);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1747112962278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,23 @@\n \"use client\";\r\n import { createContext, useContext, useState, useEffect } from \"react\";\r\n+import { useSession } from \"next-auth/react\";\r\n \r\n const OrderContext = createContext();\r\n \r\n export function OrderProvider({ children }) {\r\n   const [orders, setOrders] = useState([]);\r\n   const [loading, setLoading] = useState(true);\r\n+  const { data: session } = useSession();\r\n \r\n   const fetchOrders = async () => {\r\n+    // Nếu chưa đăng nhập, không cần fetch\r\n+    if (!session?.user?.email) {\r\n+      setOrders([]);\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n+\r\n     try {\r\n       const response = await fetch('/api/orders');\r\n       if (response.status === 401) {\r\n         setOrders([]);\r\n@@ -41,18 +50,20 @@\n     setOrders([]);\r\n     setLoading(true);\r\n   };\r\n \r\n-  // Fetch orders on initial load\r\n+  // Fetch orders khi session thay đổi\r\n   useEffect(() => {\r\n     fetchOrders();\r\n-  }, []);\r\n+  }, [session]);\r\n \r\n-  // Set up polling to refresh orders every 30 seconds\r\n+  // Set up polling to refresh orders every 30 seconds chỉ khi đã đăng nhập\r\n   useEffect(() => {\r\n+    if (!session?.user?.email) return;\r\n+    \r\n     const interval = setInterval(fetchOrders, 30000);\r\n     return () => clearInterval(interval);\r\n-  }, []);\r\n+  }, [session]);\r\n \r\n   const value = {\r\n     orders,\r\n     loading,\r\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "\"use client\";\r\nimport { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst OrderContext = createContext();\r\n\r\nexport function OrderProvider({ children }) {\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  // Load orders from localStorage when component mounts\r\n  useEffect(() => {\r\n    const savedOrders = localStorage.getItem('userOrders');\r\n    if (savedOrders) {\r\n      setOrders(JSON.parse(savedOrders));\r\n    }\r\n  }, []);\r\n\r\n  // Save orders to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem('userOrders', JSON.stringify(orders));\r\n  }, [orders]);\r\n\r\n  const addOrder = (newOrder) => {\r\n    setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n  };\r\n\r\n  return (\r\n    <OrderContext.Provider value={{ orders, addOrder }}>\r\n      {children}\r\n    </OrderContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useOrders() {\r\n  return useContext(OrderContext);\r\n} "
        }
    ]
}