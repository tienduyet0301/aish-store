{
    "sourceFile": "src/context/WishlistContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1746893166815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747114708517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,23 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n \r\n+interface Product {\r\n+  _id: string;\r\n+  // Add any other necessary properties\r\n+}\r\n+\r\n interface WishlistContextType {\r\n-  wishlist: string[];\r\n+  wishlist: Product[];\r\n   toggleWishlist: (productId: string) => void;\r\n   isInWishlist: (productId: string) => boolean;\r\n }\r\n \r\n const WishlistContext = createContext<WishlistContextType | undefined>(undefined);\r\n \r\n export function WishlistProvider({ children }) {\r\n-  const [wishlist, setWishlist] = useState<string[]>([]);\r\n+  const [wishlist, setWishlist] = useState<Product[]>([]);\r\n \r\n   useEffect(() => {\r\n     // Load wishlist from localStorage on mount\r\n     const savedWishlist = localStorage.getItem('wishlist');\r\n@@ -25,20 +30,20 @@\n     // Save wishlist to localStorage whenever it changes\r\n     localStorage.setItem('wishlist', JSON.stringify(wishlist));\r\n   }, [wishlist]);\r\n \r\n-  const toggleWishlist = (productId: string) => {\r\n+  const toggleWishlist = (product: Product) => {\r\n     setWishlist(prev => {\r\n-      if (prev.includes(productId)) {\r\n-        return prev.filter(id => id !== productId);\r\n+      if (prev.some(item => item._id === product._id)) {\r\n+        return prev.filter(item => item._id !== product._id);\r\n       } else {\r\n-        return [...prev, productId];\r\n+        return [...prev, product];\r\n       }\r\n     });\r\n   };\r\n \r\n   const isInWishlist = (productId: string) => {\r\n-    return wishlist.includes(productId);\r\n+    return wishlist.some(item => item._id === productId);\r\n   };\r\n \r\n   return (\r\n     <WishlistContext.Provider value={{ wishlist, toggleWishlist, isInWishlist }}>\r\n"
                },
                {
                    "date": 1747114723514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,15 +8,15 @@\n }\r\n \r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n-  toggleWishlist: (productId: string) => void;\r\n+  toggleWishlist: (product: Product) => void;\r\n   isInWishlist: (productId: string) => boolean;\r\n }\r\n \r\n const WishlistContext = createContext<WishlistContextType | undefined>(undefined);\r\n \r\n-export function WishlistProvider({ children }) {\r\n+export function WishlistProvider({ children }: { children: React.ReactNode }) {\r\n   const [wishlist, setWishlist] = useState<Product[]>([]);\r\n \r\n   useEffect(() => {\r\n     // Load wishlist from localStorage on mount\r\n"
                },
                {
                    "date": 1747116712421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,100 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n+import { useSession } from 'next-auth/react';\r\n \r\n interface Product {\r\n   _id: string;\r\n-  // Add any other necessary properties\r\n+  name: string;\r\n+  price: number;\r\n+  images: string[];\r\n+  // Add other product properties as needed\r\n }\r\n \r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n   toggleWishlist: (product: Product) => void;\r\n   isInWishlist: (productId: string) => boolean;\r\n+  isLoading: boolean;\r\n }\r\n \r\n const WishlistContext = createContext<WishlistContextType | undefined>(undefined);\r\n \r\n export function WishlistProvider({ children }: { children: React.ReactNode }) {\r\n   const [wishlist, setWishlist] = useState<Product[]>([]);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const { data: session } = useSession();\r\n \r\n+  // Load wishlist from API when user is logged in\r\n   useEffect(() => {\r\n-    // Load wishlist from localStorage on mount\r\n-    const savedWishlist = localStorage.getItem('wishlist');\r\n-    if (savedWishlist) {\r\n-      setWishlist(JSON.parse(savedWishlist));\r\n-    }\r\n-  }, []);\r\n+    const loadWishlist = async () => {\r\n+      if (session?.user) {\r\n+        try {\r\n+          const response = await fetch('/api/wishlist');\r\n+          if (response.ok) {\r\n+            const data = await response.json();\r\n+            setWishlist(data.wishlist);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error loading wishlist:', error);\r\n+        }\r\n+      } else {\r\n+        // If not logged in, load from localStorage\r\n+        const savedWishlist = localStorage.getItem('wishlist');\r\n+        if (savedWishlist) {\r\n+          setWishlist(JSON.parse(savedWishlist));\r\n+        }\r\n+      }\r\n+      setIsLoading(false);\r\n+    };\r\n \r\n-  useEffect(() => {\r\n-    // Save wishlist to localStorage whenever it changes\r\n-    localStorage.setItem('wishlist', JSON.stringify(wishlist));\r\n-  }, [wishlist]);\r\n+    loadWishlist();\r\n+  }, [session]);\r\n \r\n-  const toggleWishlist = (product: Product) => {\r\n-    setWishlist(prev => {\r\n-      if (prev.some(item => item._id === product._id)) {\r\n-        return prev.filter(item => item._id !== product._id);\r\n-      } else {\r\n-        return [...prev, product];\r\n+  const toggleWishlist = async (product: Product) => {\r\n+    if (session?.user) {\r\n+      // If logged in, use API\r\n+      try {\r\n+        const isInWishlist = wishlist.some(item => item._id === product._id);\r\n+        const response = await fetch('/api/wishlist', {\r\n+          method: isInWishlist ? 'DELETE' : 'POST',\r\n+          headers: {\r\n+            'Content-Type': 'application/json',\r\n+          },\r\n+          body: JSON.stringify({ productId: product._id }),\r\n+        });\r\n+\r\n+        if (response.ok) {\r\n+          setWishlist(prev => {\r\n+            if (isInWishlist) {\r\n+              return prev.filter(item => item._id !== product._id);\r\n+            } else {\r\n+              return [...prev, product];\r\n+            }\r\n+          });\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error toggling wishlist:', error);\r\n       }\r\n-    });\r\n+    } else {\r\n+      // If not logged in, use localStorage\r\n+      setWishlist(prev => {\r\n+        const newWishlist = prev.some(item => item._id === product._id)\r\n+          ? prev.filter(item => item._id !== product._id)\r\n+          : [...prev, product];\r\n+        localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n+        return newWishlist;\r\n+      });\r\n+    }\r\n   };\r\n \r\n   const isInWishlist = (productId: string) => {\r\n     return wishlist.some(item => item._id === productId);\r\n   };\r\n \r\n   return (\r\n-    <WishlistContext.Provider value={{ wishlist, toggleWishlist, isInWishlist }}>\r\n+    <WishlistContext.Provider value={{ wishlist, toggleWishlist, isInWishlist, isLoading }}>\r\n       {children}\r\n     </WishlistContext.Provider>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1747117129051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,34 @@\n   useEffect(() => {\r\n     const loadWishlist = async () => {\r\n       if (session?.user) {\r\n         try {\r\n+          // Lấy danh sách từ localStorage trước\r\n+          const localWishlist = localStorage.getItem('wishlist');\r\n+          const localWishlistItems = localWishlist ? JSON.parse(localWishlist) : [];\r\n+\r\n+          // Lấy danh sách từ API\r\n           const response = await fetch('/api/wishlist');\r\n           if (response.ok) {\r\n             const data = await response.json();\r\n-            setWishlist(data.wishlist);\r\n+            const serverWishlist = data.wishlist || [];\r\n+\r\n+            // Nếu có sản phẩm trong localStorage, thêm vào database\r\n+            if (localWishlistItems.length > 0) {\r\n+              for (const product of localWishlistItems) {\r\n+                await fetch('/api/wishlist', {\r\n+                  method: 'POST',\r\n+                  headers: {\r\n+                    'Content-Type': 'application/json',\r\n+                  },\r\n+                  body: JSON.stringify({ productId: product._id }),\r\n+                });\r\n+              }\r\n+              // Xóa localStorage sau khi đồng bộ\r\n+              localStorage.removeItem('wishlist');\r\n+            }\r\n+\r\n+            setWishlist(serverWishlist);\r\n           }\r\n         } catch (error) {\r\n           console.error('Error loading wishlist:', error);\r\n         }\r\n"
                },
                {
                    "date": 1747239091638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,10 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n import { useSession } from 'next-auth/react';\r\n+import { Product } from '@/types/product';\r\n \r\n-interface Product {\r\n-  _id: string;\r\n-  name: string;\r\n-  price: number;\r\n-  images: string[];\r\n-  // Add other product properties as needed\r\n-}\r\n-\r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n   toggleWishlist: (product: Product) => void;\r\n   isInWishlist: (productId: string) => boolean;\r\n"
                },
                {
                    "date": 1747239110971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,17 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n import { useSession } from 'next-auth/react';\r\n-import { Product } from '@/types/product';\r\n \r\n+interface Product {\r\n+  _id: string;\r\n+  name: string;\r\n+  price: number;\r\n+  images: string[];\r\n+  // Add other product properties as needed\r\n+}\r\n+\r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n   toggleWishlist: (product: Product) => void;\r\n   isInWishlist: (productId: string) => boolean;\r\n"
                },
                {
                    "date": 1747239175896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,13 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n import { useSession } from 'next-auth/react';\r\n+import { Product } from '@/types/product';\r\n \r\n-interface Product {\r\n-  _id: string;\r\n-  name: string;\r\n-  price: number;\r\n-  images: string[];\r\n-  // Add other product properties as needed\r\n-}\r\n-\r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n-  toggleWishlist: (product: Product) => void;\r\n+  toggleWishlist: (product: Product) => Promise<void>;\r\n   isInWishlist: (productId: string) => boolean;\r\n   isLoading: boolean;\r\n }\r\n \r\n@@ -73,11 +66,11 @@\n     loadWishlist();\r\n   }, [session]);\r\n \r\n   const toggleWishlist = async (product: Product) => {\r\n-    if (session?.user) {\r\n-      // If logged in, use API\r\n-      try {\r\n+    try {\r\n+      if (session?.user) {\r\n+        // If logged in, use API\r\n         const isInWishlist = wishlist.some(item => item._id === product._id);\r\n         const response = await fetch('/api/wishlist', {\r\n           method: isInWishlist ? 'DELETE' : 'POST',\r\n           headers: {\r\n@@ -94,20 +87,20 @@\n               return [...prev, product];\r\n             }\r\n           });\r\n         }\r\n-      } catch (error) {\r\n-        console.error('Error toggling wishlist:', error);\r\n+      } else {\r\n+        // If not logged in, use localStorage\r\n+        setWishlist(prev => {\r\n+          const newWishlist = prev.some(item => item._id === product._id)\r\n+            ? prev.filter(item => item._id !== product._id)\r\n+            : [...prev, product];\r\n+          localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n+          return newWishlist;\r\n+        });\r\n       }\r\n-    } else {\r\n-      // If not logged in, use localStorage\r\n-      setWishlist(prev => {\r\n-        const newWishlist = prev.some(item => item._id === product._id)\r\n-          ? prev.filter(item => item._id !== product._id)\r\n-          : [...prev, product];\r\n-        localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n-        return newWishlist;\r\n-      });\r\n+    } catch (error) {\r\n+      console.error('Error toggling wishlist:', error);\r\n     }\r\n   };\r\n \r\n   const isInWishlist = (productId: string) => {\r\n"
                },
                {
                    "date": 1747239335987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,20 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n import { useSession } from 'next-auth/react';\r\n-import { Product } from '@/types/product';\r\n \r\n+interface Product {\r\n+  _id: string;\r\n+  name: string;\r\n+  price: number;\r\n+  images: string[];\r\n+  // Add other product properties as needed\r\n+}\r\n+\r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n-  toggleWishlist: (product: Product) => Promise<void>;\r\n+  toggleWishlist: (product: Product) => void;\r\n   isInWishlist: (productId: string) => boolean;\r\n   isLoading: boolean;\r\n }\r\n \r\n@@ -66,11 +73,11 @@\n     loadWishlist();\r\n   }, [session]);\r\n \r\n   const toggleWishlist = async (product: Product) => {\r\n-    try {\r\n-      if (session?.user) {\r\n-        // If logged in, use API\r\n+    if (session?.user) {\r\n+      // If logged in, use API\r\n+      try {\r\n         const isInWishlist = wishlist.some(item => item._id === product._id);\r\n         const response = await fetch('/api/wishlist', {\r\n           method: isInWishlist ? 'DELETE' : 'POST',\r\n           headers: {\r\n@@ -87,20 +94,20 @@\n               return [...prev, product];\r\n             }\r\n           });\r\n         }\r\n-      } else {\r\n-        // If not logged in, use localStorage\r\n-        setWishlist(prev => {\r\n-          const newWishlist = prev.some(item => item._id === product._id)\r\n-            ? prev.filter(item => item._id !== product._id)\r\n-            : [...prev, product];\r\n-          localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n-          return newWishlist;\r\n-        });\r\n+      } catch (error) {\r\n+        console.error('Error toggling wishlist:', error);\r\n       }\r\n-    } catch (error) {\r\n-      console.error('Error toggling wishlist:', error);\r\n+    } else {\r\n+      // If not logged in, use localStorage\r\n+      setWishlist(prev => {\r\n+        const newWishlist = prev.some(item => item._id === product._id)\r\n+          ? prev.filter(item => item._id !== product._id)\r\n+          : [...prev, product];\r\n+        localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n+        return newWishlist;\r\n+      });\r\n     }\r\n   };\r\n \r\n   const isInWishlist = (productId: string) => {\r\n"
                },
                {
                    "date": 1747239419641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,13 @@\n 'use client';\r\n \r\n import { createContext, useContext, useState, useEffect } from 'react';\r\n import { useSession } from 'next-auth/react';\r\n+import { Product } from '@/types/product';\r\n \r\n-interface Product {\r\n-  _id: string;\r\n-  name: string;\r\n-  price: number;\r\n-  images: string[];\r\n-  // Add other product properties as needed\r\n-}\r\n-\r\n interface WishlistContextType {\r\n   wishlist: Product[];\r\n-  toggleWishlist: (product: Product) => void;\r\n+  toggleWishlist: (product: Product) => Promise<void>;\r\n   isInWishlist: (productId: string) => boolean;\r\n   isLoading: boolean;\r\n }\r\n \r\n@@ -73,11 +66,11 @@\n     loadWishlist();\r\n   }, [session]);\r\n \r\n   const toggleWishlist = async (product: Product) => {\r\n-    if (session?.user) {\r\n-      // If logged in, use API\r\n-      try {\r\n+    try {\r\n+      if (session?.user) {\r\n+        // If logged in, use API\r\n         const isInWishlist = wishlist.some(item => item._id === product._id);\r\n         const response = await fetch('/api/wishlist', {\r\n           method: isInWishlist ? 'DELETE' : 'POST',\r\n           headers: {\r\n@@ -94,20 +87,20 @@\n               return [...prev, product];\r\n             }\r\n           });\r\n         }\r\n-      } catch (error) {\r\n-        console.error('Error toggling wishlist:', error);\r\n+      } else {\r\n+        // If not logged in, use localStorage\r\n+        setWishlist(prev => {\r\n+          const newWishlist = prev.some(item => item._id === product._id)\r\n+            ? prev.filter(item => item._id !== product._id)\r\n+            : [...prev, product];\r\n+          localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n+          return newWishlist;\r\n+        });\r\n       }\r\n-    } else {\r\n-      // If not logged in, use localStorage\r\n-      setWishlist(prev => {\r\n-        const newWishlist = prev.some(item => item._id === product._id)\r\n-          ? prev.filter(item => item._id !== product._id)\r\n-          : [...prev, product];\r\n-        localStorage.setItem('wishlist', JSON.stringify(newWishlist));\r\n-        return newWishlist;\r\n-      });\r\n+    } catch (error) {\r\n+      console.error('Error toggling wishlist:', error);\r\n     }\r\n   };\r\n \r\n   const isInWishlist = (productId: string) => {\r\n"
                },
                {
                    "date": 1747240170589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,61 +15,68 @@\n \r\n export function WishlistProvider({ children }: { children: React.ReactNode }) {\r\n   const [wishlist, setWishlist] = useState<Product[]>([]);\r\n   const [isLoading, setIsLoading] = useState(true);\r\n-  const { data: session } = useSession();\r\n+  const { data: session, status } = useSession();\r\n \r\n   // Load wishlist from API when user is logged in\r\n   useEffect(() => {\r\n     const loadWishlist = async () => {\r\n-      if (session?.user) {\r\n-        try {\r\n-          // Lấy danh sách từ localStorage trước\r\n-          const localWishlist = localStorage.getItem('wishlist');\r\n-          const localWishlistItems = localWishlist ? JSON.parse(localWishlist) : [];\r\n+      // Nếu đang loading session, không làm gì cả\r\n+      if (status === 'loading') return;\r\n \r\n-          // Lấy danh sách từ API\r\n-          const response = await fetch('/api/wishlist');\r\n-          if (response.ok) {\r\n-            const data = await response.json();\r\n-            const serverWishlist = data.wishlist || [];\r\n-\r\n-            // Nếu có sản phẩm trong localStorage, thêm vào database\r\n-            if (localWishlistItems.length > 0) {\r\n-              for (const product of localWishlistItems) {\r\n-                await fetch('/api/wishlist', {\r\n-                  method: 'POST',\r\n-                  headers: {\r\n-                    'Content-Type': 'application/json',\r\n-                  },\r\n-                  body: JSON.stringify({ productId: product._id }),\r\n-                });\r\n-              }\r\n-              // Xóa localStorage sau khi đồng bộ\r\n-              localStorage.removeItem('wishlist');\r\n-            }\r\n-\r\n-            setWishlist(serverWishlist);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error loading wishlist:', error);\r\n-        }\r\n-      } else {\r\n-        // If not logged in, load from localStorage\r\n+      // Nếu chưa đăng nhập, load từ localStorage\r\n+      if (status === 'unauthenticated') {\r\n         const savedWishlist = localStorage.getItem('wishlist');\r\n         if (savedWishlist) {\r\n           setWishlist(JSON.parse(savedWishlist));\r\n         }\r\n+        setIsLoading(false);\r\n+        return;\r\n       }\r\n-      setIsLoading(false);\r\n+\r\n+      // Nếu đã đăng nhập, load từ API\r\n+      try {\r\n+        // Lấy danh sách từ localStorage trước\r\n+        const localWishlist = localStorage.getItem('wishlist');\r\n+        const localWishlistItems = localWishlist ? JSON.parse(localWishlist) : [];\r\n+\r\n+        // Lấy danh sách từ API\r\n+        const response = await fetch('/api/wishlist');\r\n+        if (response.ok) {\r\n+          const data = await response.json();\r\n+          const serverWishlist = data.wishlist || [];\r\n+\r\n+          // Nếu có sản phẩm trong localStorage, thêm vào database\r\n+          if (localWishlistItems.length > 0) {\r\n+            for (const product of localWishlistItems) {\r\n+              await fetch('/api/wishlist', {\r\n+                method: 'POST',\r\n+                headers: {\r\n+                  'Content-Type': 'application/json',\r\n+                },\r\n+                body: JSON.stringify({ productId: product._id }),\r\n+              });\r\n+            }\r\n+            // Xóa localStorage sau khi đồng bộ\r\n+            localStorage.removeItem('wishlist');\r\n+          }\r\n+\r\n+          setWishlist(serverWishlist);\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error loading wishlist:', error);\r\n+      } finally {\r\n+        setIsLoading(false);\r\n+      }\r\n     };\r\n \r\n     loadWishlist();\r\n-  }, [session]);\r\n+  }, [status]); // Thay đổi dependency từ session thành status\r\n \r\n   const toggleWishlist = async (product: Product) => {\r\n     try {\r\n-      if (session?.user) {\r\n+      if (status === 'authenticated') {\r\n         // If logged in, use API\r\n         const isInWishlist = wishlist.some(item => item._id === product._id);\r\n         const response = await fetch('/api/wishlist', {\r\n           method: isInWishlist ? 'DELETE' : 'POST',\r\n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "'use client';\r\n\r\nimport { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ninterface WishlistContextType {\r\n  wishlist: string[];\r\n  toggleWishlist: (productId: string) => void;\r\n  isInWishlist: (productId: string) => boolean;\r\n}\r\n\r\nconst WishlistContext = createContext<WishlistContextType | undefined>(undefined);\r\n\r\nexport function WishlistProvider({ children }) {\r\n  const [wishlist, setWishlist] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    // Load wishlist from localStorage on mount\r\n    const savedWishlist = localStorage.getItem('wishlist');\r\n    if (savedWishlist) {\r\n      setWishlist(JSON.parse(savedWishlist));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Save wishlist to localStorage whenever it changes\r\n    localStorage.setItem('wishlist', JSON.stringify(wishlist));\r\n  }, [wishlist]);\r\n\r\n  const toggleWishlist = (productId: string) => {\r\n    setWishlist(prev => {\r\n      if (prev.includes(productId)) {\r\n        return prev.filter(id => id !== productId);\r\n      } else {\r\n        return [...prev, productId];\r\n      }\r\n    });\r\n  };\r\n\r\n  const isInWishlist = (productId: string) => {\r\n    return wishlist.includes(productId);\r\n  };\r\n\r\n  return (\r\n    <WishlistContext.Provider value={{ wishlist, toggleWishlist, isInWishlist }}>\r\n      {children}\r\n    </WishlistContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useWishlist() {\r\n  const context = useContext(WishlistContext);\r\n  if (context === undefined) {\r\n    throw new Error('useWishlist must be used within a WishlistProvider');\r\n  }\r\n  return context;\r\n} "
        }
    ]
}