{
    "sourceFile": ".next/types/cache-life.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891748995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "// Type definitions for Next.js cacheLife configs\n\ndeclare module 'next/cache' {\n  export { unstable_cache } from 'next/dist/server/web/spec-extension/unstable-cache'\n  export {\n    revalidateTag,\n    revalidatePath,\n    unstable_expireTag,\n    unstable_expirePath,\n  } from 'next/dist/server/web/spec-extension/revalidate'\n  export { unstable_noStore } from 'next/dist/server/web/spec-extension/unstable-no-store'\n\n  \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"default\"` profile.\n     * ```\n     *   stale:      300 seconds (5 minutes)\n     *   revalidate: 900 seconds (15 minutes)\n     *   expire:     never\n     * ```\n     * \n     * This cache may be stale on clients for 5 minutes before checking with the server.\n     * If the server receives a new request after 15 minutes, start revalidating new values in the background.\n     * It lives for the maximum age of the server cache. If this entry has no traffic for a while, it may serve an old value the next request.\n     */\n    export function unstable_cacheLife(profile: \"default\"): void\n    \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"seconds\"` profile.\n     * ```\n     *   stale:      0 seconds\n     *   revalidate: 1 seconds\n     *   expire:     60 seconds (1 minute)\n     * ```\n     * \n     * This cache may be stale on clients for 0 seconds before checking with the server.\n     * If the server receives a new request after 1 seconds, start revalidating new values in the background.\n     * If this entry has no traffic for 1 minute it will expire. The next request will recompute it.\n     */\n    export function unstable_cacheLife(profile: \"seconds\"): void\n    \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"minutes\"` profile.\n     * ```\n     *   stale:      300 seconds (5 minutes)\n     *   revalidate: 60 seconds (1 minute)\n     *   expire:     3600 seconds (1 hour)\n     * ```\n     * \n     * This cache may be stale on clients for 5 minutes before checking with the server.\n     * If the server receives a new request after 1 minute, start revalidating new values in the background.\n     * If this entry has no traffic for 1 hour it will expire. The next request will recompute it.\n     */\n    export function unstable_cacheLife(profile: \"minutes\"): void\n    \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"hours\"` profile.\n     * ```\n     *   stale:      300 seconds (5 minutes)\n     *   revalidate: 3600 seconds (1 hour)\n     *   expire:     86400 seconds (1 day)\n     * ```\n     * \n     * This cache may be stale on clients for 5 minutes before checking with the server.\n     * If the server receives a new request after 1 hour, start revalidating new values in the background.\n     * If this entry has no traffic for 1 day it will expire. The next request will recompute it.\n     */\n    export function unstable_cacheLife(profile: \"hours\"): void\n    \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"days\"` profile.\n     * ```\n     *   stale:      300 seconds (5 minutes)\n     *   revalidate: 86400 seconds (1 day)\n     *   expire:     604800 seconds (1 week)\n     * ```\n     * \n     * This cache may be stale on clients for 5 minutes before checking with the server.\n     * If the server receives a new request after 1 day, start revalidating new values in the background.\n     * If this entry has no traffic for 1 week it will expire. The next request will recompute it.\n     */\n    export function unstable_cacheLife(profile: \"days\"): void\n    \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"weeks\"` profile.\n     * ```\n     *   stale:      300 seconds (5 minutes)\n     *   revalidate: 604800 seconds (1 week)\n     *   expire:     2592000 seconds (30 days)\n     * ```\n     * \n     * This cache may be stale on clients for 5 minutes before checking with the server.\n     * If the server receives a new request after 1 week, start revalidating new values in the background.\n     * If this entry has no traffic for 30 days it will expire. The next request will recompute it.\n     */\n    export function unstable_cacheLife(profile: \"weeks\"): void\n    \n    /**\n     * Cache this `\"use cache\"` for a timespan defined by the `\"max\"` profile.\n     * ```\n     *   stale:      300 seconds (5 minutes)\n     *   revalidate: 2592000 seconds (30 days)\n     *   expire:     never\n     * ```\n     * \n     * This cache may be stale on clients for 5 minutes before checking with the server.\n     * If the server receives a new request after 30 days, start revalidating new values in the background.\n     * It lives for the maximum age of the server cache. If this entry has no traffic for a while, it may serve an old value the next request.\n     */\n    export function unstable_cacheLife(profile: \"max\"): void\n    \n    /**\n     * Cache this `\"use cache\"` using a custom timespan.\n     * ```\n     *   stale: ... // seconds\n     *   revalidate: ... // seconds\n     *   expire: ... // seconds\n     * ```\n     *\n     * This is similar to Cache-Control: max-age=`stale`,s-max-age=`revalidate`,stale-while-revalidate=`expire-revalidate`\n     *\n     * If a value is left out, the lowest of other cacheLife() calls or the default, is used instead.\n     */\n    export function unstable_cacheLife(profile: {\n      /**\n       * This cache may be stale on clients for ... seconds before checking with the server.\n       */\n      stale?: number,\n      /**\n       * If the server receives a new request after ... seconds, start revalidating new values in the background.\n       */\n      revalidate?: number,\n      /**\n       * If this entry has no traffic for ... seconds it will expire. The next request will recompute it.\n       */\n      expire?: number\n    }): void\n  \n\n  export { cacheTag as unstable_cacheTag } from 'next/dist/server/use-cache/cache-tag'\n}\n"
        }
    ]
}