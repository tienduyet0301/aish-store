{
    "sourceFile": ".next/server/chunks/[root-of-the-server]__31c5f152._.js.map",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891736883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "{\n  \"version\": 3,\n  \"sources\": [],\n  \"sections\": [\n    {\"offset\": {\"line\": 6, \"column\": 0}, \"map\": {\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"debugId\":null}},\n    {\"offset\": {\"line\": 68, \"column\": 0}, \"map\": {\"version\":3,\"sources\":[\"file://C%3A/Users/hongh/aishh/lib/mongodb.ts\"],\"sourcesContent\":[\"import { MongoClient } from \\\"mongodb\\\";\\r\\n\\r\\nif (!process.env.MONGODB_URI) {\\r\\n  throw new Error('Invalid/Missing environment variable: \\\"MONGODB_URI\\\"');\\r\\n}\\r\\n\\r\\nconst uri = process.env.MONGODB_URI;\\r\\nconst options = {};\\r\\n\\r\\nlet client: MongoClient;\\r\\nlet clientPromise: Promise<MongoClient>;\\r\\n\\r\\nif (process.env.NODE_ENV === \\\"development\\\") {\\r\\n  // In development mode, use a global variable so that the value\\r\\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\\r\\n  let globalWithMongo = global as typeof globalThis & {\\r\\n    _mongoClientPromise?: Promise<MongoClient>;\\r\\n  };\\r\\n\\r\\n  if (!globalWithMongo._mongoClientPromise) {\\r\\n    client = new MongoClient(uri, options);\\r\\n    globalWithMongo._mongoClientPromise = client.connect();\\r\\n  }\\r\\n  clientPromise = globalWithMongo._mongoClientPromise;\\r\\n} else {\\r\\n  // In production mode, it's best to not use a global variable.\\r\\n  client = new MongoClient(uri, options);\\r\\n  clientPromise = client.connect();\\r\\n}\\r\\n\\r\\n// Export a module-scoped MongoClient promise. By doing this in a\\r\\n// separate module, the client can be shared across functions.\\r\\nexport default clientPromise;\\r\\n\"],\"names\":[],\"mappings\":\";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,kBAAkB;IAItB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;uCAIe\",\"debugId\":null}},\n    {\"offset\": {\"line\": 115, \"column\": 0}, \"map\": {\"version\":3,\"sources\":[\"file://C%3A/Users/hongh/aishh/src/app/api/upload/route.ts\"],\"sourcesContent\":[\"import { NextResponse } from \\\"next/server\\\";\\r\\nimport clientPromise from \\\"../../../../lib/mongodb\\\";\\r\\nimport formidable from \\\"formidable\\\";\\r\\nimport fs from \\\"fs\\\";\\r\\nimport path from \\\"path\\\";\\r\\nimport { ObjectId } from \\\"mongodb\\\";\\r\\n\\r\\n// Allowed file types\\r\\nconst ALLOWED_TYPES = ['image/jpeg', 'image/png', 'image/webp'];\\r\\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\\r\\n\\r\\nexport const config = {\\r\\n  api: {\\r\\n    bodyParser: false,\\r\\n  },\\r\\n};\\r\\n\\r\\nexport async function POST(request: Request) {\\r\\n  try {\\r\\n    console.log(\\\"Starting file upload...\\\");\\r\\n    const formData = await request.formData();\\r\\n    console.log(\\\"FormData received:\\\", formData);\\r\\n    \\r\\n    const files = formData.getAll(\\\"files\\\");\\r\\n    console.log(\\\"Files from formData:\\\", files);\\r\\n    \\r\\n    if (!files || files.length === 0) {\\r\\n      console.log(\\\"No files found in request\\\");\\r\\n      return NextResponse.json(\\r\\n        { success: false, error: \\\"No files uploaded\\\" },\\r\\n        { status: 400 }\\r\\n      );\\r\\n    }\\r\\n\\r\\n    // Ensure uploads directory exists\\r\\n    const uploadDir = path.join(process.cwd(), \\\"public/uploads\\\");\\r\\n    if (!fs.existsSync(uploadDir)) {\\r\\n      console.log(\\\"Creating uploads directory:\\\", uploadDir);\\r\\n      fs.mkdirSync(uploadDir, { recursive: true });\\r\\n    }\\r\\n\\r\\n    // Create a .gitkeep file to ensure the directory is tracked by git\\r\\n    const gitkeepPath = path.join(uploadDir, \\\".gitkeep\\\");\\r\\n    if (!fs.existsSync(gitkeepPath)) {\\r\\n      fs.writeFileSync(gitkeepPath, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    const urls = await Promise.all(\\r\\n      files.map(async (file) => {\\r\\n        console.log(\\\"Processing file:\\\", file);\\r\\n        \\r\\n        if (!(file instanceof File)) {\\r\\n          console.error(\\\"Invalid file object:\\\", file);\\r\\n          return null;\\r\\n        }\\r\\n\\r\\n        console.log(\\\"File details:\\\", {\\r\\n          name: file.name,\\r\\n          type: file.type,\\r\\n          size: file.size\\r\\n        });\\r\\n\\r\\n        // Check file type\\r\\n        if (!ALLOWED_TYPES.includes(file.type)) {\\r\\n          console.error(`Invalid file type: ${file.type}`);\\r\\n          return null;\\r\\n        }\\r\\n\\r\\n        // Check file size\\r\\n        if (file.size > MAX_FILE_SIZE) {\\r\\n          console.error(`File too large: ${file.size} bytes`);\\r\\n          return null;\\r\\n        }\\r\\n        \\r\\n        try {\\r\\n          const bytes = await file.arrayBuffer();\\r\\n          const buffer = Buffer.from(bytes);\\r\\n          \\r\\n          // Generate a unique filename with timestamp and original extension\\r\\n          const timestamp = Date.now();\\r\\n          const originalName = file.name;\\r\\n          const extension = path.extname(originalName);\\r\\n          const fileName = `${timestamp}-${originalName}`;\\r\\n          const filePath = path.join(uploadDir, fileName);\\r\\n          \\r\\n          console.log(\\\"Saving file to:\\\", filePath);\\r\\n          await fs.promises.writeFile(filePath, buffer);\\r\\n          console.log(\\\"File saved successfully\\\");\\r\\n          \\r\\n          return `/uploads/${fileName}`;\\r\\n        } catch (error) {\\r\\n          console.error(\\\"Error saving file:\\\", error);\\r\\n          return null;\\r\\n        }\\r\\n      })\\r\\n    );\\r\\n\\r\\n    // Filter out any null values\\r\\n    const validUrls = urls.filter((url): url is string => url !== null);\\r\\n    console.log(\\\"Valid URLs:\\\", validUrls);\\r\\n\\r\\n    if (validUrls.length === 0) {\\r\\n      console.log(\\\"No valid files were uploaded\\\");\\r\\n      return NextResponse.json(\\r\\n        { success: false, error: \\\"No valid files were uploaded. Please ensure files are images (JPEG, PNG, WebP) and under 5MB.\\\" },\\r\\n        { status: 400 }\\r\\n      );\\r\\n    }\\r\\n\\r\\n    console.log(\\\"Upload completed successfully\\\");\\r\\n    return NextResponse.json({ \\r\\n      success: true,\\r\\n      urls: validUrls\\r\\n    });\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Upload error:\\\", error);\\r\\n    return NextResponse.json(\\r\\n      { success: false, error: \\\"Failed to upload files: \\\" + (error instanceof Error ? error.message : String(error)) },\\r\\n      { status: 500 }\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n// API để lấy hình ảnh\\r\\nexport async function GET(request: Request) {\\r\\n  try {\\r\\n    const { searchParams } = new URL(request.url);\\r\\n    const imageId = searchParams.get(\\\"id\\\");\\r\\n\\r\\n    if (!imageId) {\\r\\n      return NextResponse.json(\\r\\n        { ok: false, error: \\\"Image ID is required\\\" },\\r\\n        { status: 400 }\\r\\n      );\\r\\n    }\\r\\n\\r\\n    const client = await clientPromise;\\r\\n    const db = client.db();\\r\\n    \\r\\n    // Convert string ID to ObjectId\\r\\n    const image = await db.collection(\\\"images\\\").findOne({ \\r\\n      _id: new ObjectId(imageId) \\r\\n    });\\r\\n\\r\\n    if (!image) {\\r\\n      return NextResponse.json(\\r\\n        { ok: false, error: \\\"Image not found\\\" },\\r\\n        { status: 404 }\\r\\n      );\\r\\n    }\\r\\n\\r\\n    return new NextResponse(image.data, {\\r\\n      headers: {\\r\\n        \\\"Content-Type\\\": image.contentType,\\r\\n        \\\"Content-Length\\\": image.size.toString(),\\r\\n      },\\r\\n    });\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error getting image:\\\", error);\\r\\n    return NextResponse.json(\\r\\n      { ok: false, error: \\\"Failed to get image: \\\" + (error instanceof Error ? error.message : String(error)) },\\r\\n      { status: 500 }\\r\\n    );\\r\\n  }\\r\\n} \"],\"names\":[],\"mappings\":\"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\",\"debugId\":null}}]\n}"
        }
    ]
}