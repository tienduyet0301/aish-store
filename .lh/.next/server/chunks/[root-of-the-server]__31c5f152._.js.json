{
    "sourceFile": ".next/server/chunks/[root-of-the-server]__31c5f152._.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891736819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "module.exports = {\n\n\"[project]/.next-internal/server/app/api/upload/route/actions.js [app-rsc] (server actions loader, ecmascript)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\n}}),\n\"[externals]/next/dist/compiled/next-server/app-route-turbo.runtime.dev.js [external] (next/dist/compiled/next-server/app-route-turbo.runtime.dev.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/compiled/next-server/app-route-turbo.runtime.dev.js\", () => require(\"next/dist/compiled/next-server/app-route-turbo.runtime.dev.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/compiled/@opentelemetry/api [external] (next/dist/compiled/@opentelemetry/api, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/compiled/@opentelemetry/api\", () => require(\"next/dist/compiled/@opentelemetry/api\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/compiled/next-server/app-page-turbo.runtime.dev.js [external] (next/dist/compiled/next-server/app-page-turbo.runtime.dev.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/compiled/next-server/app-page-turbo.runtime.dev.js\", () => require(\"next/dist/compiled/next-server/app-page-turbo.runtime.dev.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/server/app-render/work-unit-async-storage.external.js\", () => require(\"next/dist/server/app-render/work-unit-async-storage.external.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/server/app-render/work-async-storage.external.js\", () => require(\"next/dist/server/app-render/work-async-storage.external.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/server/app-render/after-task-async-storage.external.js [external] (next/dist/server/app-render/after-task-async-storage.external.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/server/app-render/after-task-async-storage.external.js\", () => require(\"next/dist/server/app-render/after-task-async-storage.external.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/mongodb [external] (mongodb, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"mongodb\", () => require(\"mongodb\"));\n\nmodule.exports = mod;\n}}),\n\"[project]/lib/mongodb.ts [app-route] (ecmascript)\": ((__turbopack_context__) => {\n\"use strict\";\n\nvar { g: global, __dirname } = __turbopack_context__;\n{\n__turbopack_context__.s({\n    \"default\": (()=>__TURBOPACK__default__export__)\n});\nvar __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__ = __turbopack_context__.i(\"[externals]/mongodb [external] (mongodb, cjs)\");\n;\nif (!process.env.MONGODB_URI) {\n    throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\n}\nconst uri = process.env.MONGODB_URI;\nconst options = {};\nlet client;\nlet clientPromise;\nif (\"TURBOPACK compile-time truthy\", 1) {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    let globalWithMongo = global;\n    if (!globalWithMongo._mongoClientPromise) {\n        client = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__[\"MongoClient\"](uri, options);\n        globalWithMongo._mongoClientPromise = client.connect();\n    }\n    clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n    \"TURBOPACK unreachable\";\n}\nconst __TURBOPACK__default__export__ = clientPromise;\n}}),\n\"[externals]/fs [external] (fs, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"fs\", () => require(\"fs\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/path [external] (path, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"path\", () => require(\"path\"));\n\nmodule.exports = mod;\n}}),\n\"[project]/src/app/api/upload/route.ts [app-route] (ecmascript)\": ((__turbopack_context__) => {\n\"use strict\";\n\nvar { g: global, __dirname } = __turbopack_context__;\n{\n__turbopack_context__.s({\n    \"GET\": (()=>GET),\n    \"POST\": (()=>POST),\n    \"config\": (()=>config)\n});\nvar __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i(\"[project]/node_modules/next/server.js [app-route] (ecmascript)\");\nvar __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i(\"[project]/lib/mongodb.ts [app-route] (ecmascript)\");\nvar __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_context__.i(\"[externals]/fs [external] (fs, cjs)\");\nvar __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__ = __turbopack_context__.i(\"[externals]/path [external] (path, cjs)\");\nvar __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__ = __turbopack_context__.i(\"[externals]/mongodb [external] (mongodb, cjs)\");\n;\n;\n;\n;\n;\n// Allowed file types\nconst ALLOWED_TYPES = [\n    'image/jpeg',\n    'image/png',\n    'image/webp'\n];\nconst MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nasync function POST(request) {\n    try {\n        console.log(\"Starting file upload...\");\n        const formData = await request.formData();\n        console.log(\"FormData received:\", formData);\n        const files = formData.getAll(\"files\");\n        console.log(\"Files from formData:\", files);\n        if (!files || files.length === 0) {\n            console.log(\"No files found in request\");\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                success: false,\n                error: \"No files uploaded\"\n            }, {\n                status: 400\n            });\n        }\n        // Ensure uploads directory exists\n        const uploadDir = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__[\"default\"].join(process.cwd(), \"public/uploads\");\n        if (!__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__[\"default\"].existsSync(uploadDir)) {\n            console.log(\"Creating uploads directory:\", uploadDir);\n            __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__[\"default\"].mkdirSync(uploadDir, {\n                recursive: true\n            });\n        }\n        // Create a .gitkeep file to ensure the directory is tracked by git\n        const gitkeepPath = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__[\"default\"].join(uploadDir, \".gitkeep\");\n        if (!__TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__[\"default\"].existsSync(gitkeepPath)) {\n            __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__[\"default\"].writeFileSync(gitkeepPath, \"\");\n        }\n        const urls = await Promise.all(files.map(async (file)=>{\n            console.log(\"Processing file:\", file);\n            if (!(file instanceof File)) {\n                console.error(\"Invalid file object:\", file);\n                return null;\n            }\n            console.log(\"File details:\", {\n                name: file.name,\n                type: file.type,\n                size: file.size\n            });\n            // Check file type\n            if (!ALLOWED_TYPES.includes(file.type)) {\n                console.error(`Invalid file type: ${file.type}`);\n                return null;\n            }\n            // Check file size\n            if (file.size > MAX_FILE_SIZE) {\n                console.error(`File too large: ${file.size} bytes`);\n                return null;\n            }\n            try {\n                const bytes = await file.arrayBuffer();\n                const buffer = Buffer.from(bytes);\n                // Generate a unique filename with timestamp and original extension\n                const timestamp = Date.now();\n                const originalName = file.name;\n                const extension = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__[\"default\"].extname(originalName);\n                const fileName = `${timestamp}-${originalName}`;\n                const filePath = __TURBOPACK__imported__module__$5b$externals$5d2f$path__$5b$external$5d$__$28$path$2c$__cjs$29$__[\"default\"].join(uploadDir, fileName);\n                console.log(\"Saving file to:\", filePath);\n                await __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__[\"default\"].promises.writeFile(filePath, buffer);\n                console.log(\"File saved successfully\");\n                return `/uploads/${fileName}`;\n            } catch (error) {\n                console.error(\"Error saving file:\", error);\n                return null;\n            }\n        }));\n        // Filter out any null values\n        const validUrls = urls.filter((url)=>url !== null);\n        console.log(\"Valid URLs:\", validUrls);\n        if (validUrls.length === 0) {\n            console.log(\"No valid files were uploaded\");\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                success: false,\n                error: \"No valid files were uploaded. Please ensure files are images (JPEG, PNG, WebP) and under 5MB.\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Upload completed successfully\");\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            success: true,\n            urls: validUrls\n        });\n    } catch (error) {\n        console.error(\"Upload error:\", error);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            success: false,\n            error: \"Failed to upload files: \" + (error instanceof Error ? error.message : String(error))\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const imageId = searchParams.get(\"id\");\n        if (!imageId) {\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                ok: false,\n                error: \"Image ID is required\"\n            }, {\n                status: 400\n            });\n        }\n        const client = await __TURBOPACK__imported__module__$5b$project$5d2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"default\"];\n        const db = client.db();\n        // Convert string ID to ObjectId\n        const image = await db.collection(\"images\").findOne({\n            _id: new __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__[\"ObjectId\"](imageId)\n        });\n        if (!image) {\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                ok: false,\n                error: \"Image not found\"\n            }, {\n                status: 404\n            });\n        }\n        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"](image.data, {\n            headers: {\n                \"Content-Type\": image.contentType,\n                \"Content-Length\": image.size.toString()\n            }\n        });\n    } catch (error) {\n        console.error(\"Error getting image:\", error);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: false,\n            error: \"Failed to get image: \" + (error instanceof Error ? error.message : String(error))\n        }, {\n            status: 500\n        });\n    }\n}\n}}),\n\n};\n\n//# sourceMappingURL=%5Broot-of-the-server%5D__31c5f152._.js.map"
        }
    ]
}