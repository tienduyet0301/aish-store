{
    "sourceFile": ".next/server/chunks/[root-of-the-server]__874d7a39._.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746891737089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746891704042,
            "name": "cart",
            "content": "module.exports = {\n\n\"[project]/.next-internal/server/app/api/products/route/actions.js [app-rsc] (server actions loader, ecmascript)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\n}}),\n\"[externals]/next/dist/compiled/next-server/app-route-turbo.runtime.dev.js [external] (next/dist/compiled/next-server/app-route-turbo.runtime.dev.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/compiled/next-server/app-route-turbo.runtime.dev.js\", () => require(\"next/dist/compiled/next-server/app-route-turbo.runtime.dev.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/compiled/@opentelemetry/api [external] (next/dist/compiled/@opentelemetry/api, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/compiled/@opentelemetry/api\", () => require(\"next/dist/compiled/@opentelemetry/api\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/compiled/next-server/app-page-turbo.runtime.dev.js [external] (next/dist/compiled/next-server/app-page-turbo.runtime.dev.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/compiled/next-server/app-page-turbo.runtime.dev.js\", () => require(\"next/dist/compiled/next-server/app-page-turbo.runtime.dev.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/server/app-render/work-unit-async-storage.external.js [external] (next/dist/server/app-render/work-unit-async-storage.external.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/server/app-render/work-unit-async-storage.external.js\", () => require(\"next/dist/server/app-render/work-unit-async-storage.external.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/server/app-render/work-async-storage.external.js [external] (next/dist/server/app-render/work-async-storage.external.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/server/app-render/work-async-storage.external.js\", () => require(\"next/dist/server/app-render/work-async-storage.external.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/next/dist/server/app-render/after-task-async-storage.external.js [external] (next/dist/server/app-render/after-task-async-storage.external.js, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"next/dist/server/app-render/after-task-async-storage.external.js\", () => require(\"next/dist/server/app-render/after-task-async-storage.external.js\"));\n\nmodule.exports = mod;\n}}),\n\"[externals]/mongodb [external] (mongodb, cjs)\": (function(__turbopack_context__) {\n\nvar { g: global, __dirname, m: module, e: exports } = __turbopack_context__;\n{\nconst mod = __turbopack_context__.x(\"mongodb\", () => require(\"mongodb\"));\n\nmodule.exports = mod;\n}}),\n\"[project]/src/lib/mongodb.ts [app-route] (ecmascript)\": ((__turbopack_context__) => {\n\"use strict\";\n\nvar { g: global, __dirname } = __turbopack_context__;\n{\n__turbopack_context__.s({\n    \"connectToDatabase\": (()=>connectToDatabase),\n    \"default\": (()=>__TURBOPACK__default__export__)\n});\nvar __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__ = __turbopack_context__.i(\"[externals]/mongodb [external] (mongodb, cjs)\");\n;\nif (!process.env.MONGODB_URI) {\n    throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\n}\nconst uri = process.env.MONGODB_URI;\nconst options = {};\nlet client;\nlet clientPromise;\nif (\"TURBOPACK compile-time truthy\", 1) {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    let globalWithMongo = global;\n    if (!globalWithMongo._mongoClientPromise) {\n        client = new __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__[\"MongoClient\"](uri, options);\n        globalWithMongo._mongoClientPromise = client.connect();\n    }\n    clientPromise = globalWithMongo._mongoClientPromise;\n} else {\n    \"TURBOPACK unreachable\";\n}\nasync function connectToDatabase() {\n    const client = await clientPromise;\n    const db = client.db(\"aishh\");\n    // Update schema if needed\n    const collections = await db.listCollections().toArray();\n    const collectionNames = collections.map((col)=>col.name);\n    // Create banners collection if it doesn't exist\n    if (!collectionNames.includes(\"banners\")) {\n        await db.createCollection(\"banners\");\n        // Create indexes\n        await db.collection(\"banners\").createIndex({\n            order: 1\n        });\n        await db.collection(\"banners\").createIndex({\n            createdAt: 1\n        });\n    }\n    // Update products schema if needed\n    if (collectionNames.includes(\"products\")) {\n        await db.collection(\"products\").updateMany({\n            sizeGuideImage: {\n                $exists: false\n            }\n        }, {\n            $set: {\n                sizeGuideImage: \"\"\n            }\n        });\n    }\n    return {\n        client,\n        db\n    };\n}\nconst __TURBOPACK__default__export__ = clientPromise;\n}}),\n\"[project]/src/app/api/products/route.ts [app-route] (ecmascript)\": ((__turbopack_context__) => {\n\"use strict\";\n\nvar { g: global, __dirname } = __turbopack_context__;\n{\n// src/app/api/products/route.ts\n__turbopack_context__.s({\n    \"DELETE\": (()=>DELETE),\n    \"GET\": (()=>GET),\n    \"POST\": (()=>POST),\n    \"PUT\": (()=>PUT)\n});\nvar __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i(\"[project]/node_modules/next/server.js [app-route] (ecmascript)\");\nvar __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i(\"[project]/src/lib/mongodb.ts [app-route] (ecmascript)\");\nvar __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__ = __turbopack_context__.i(\"[externals]/mongodb [external] (mongodb, cjs)\");\n;\n;\n;\nconst DOMAIN = process.env.NEXT_PUBLIC_DOMAIN || \"http://localhost:3000\";\nasync function GET() {\n    try {\n        console.log(\"Connecting to database...\");\n        const { db } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"connectToDatabase\"])();\n        console.log(\"Connected to database successfully\");\n        console.log(\"Fetching products...\");\n        const products = await db.collection(\"products\").find({}).toArray();\n        console.log(`Found ${products.length} products`);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: true,\n            products\n        });\n    } catch (error) {\n        console.error(\"Error details:\", {\n            message: error?.message || 'Unknown error',\n            stack: error?.stack || 'No stack trace',\n            name: error?.name || 'Unknown error type'\n        });\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: false,\n            error: \"Failed to fetch products\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const name = formData.get(\"name\");\n        const description = formData.get(\"description\");\n        const details = formData.get(\"details\");\n        const price = Number(formData.get(\"price\"));\n        const category = formData.get(\"category\");\n        const collection = formData.get(\"collection\");\n        const productCode = formData.get(\"productCode\");\n        const quantityM = Number(formData.get(\"quantityM\"));\n        const quantityL = Number(formData.get(\"quantityL\"));\n        const quantityXL = Number(formData.get(\"quantityXL\"));\n        const quantityHat = Number(formData.get(\"quantityHat\"));\n        const images = JSON.parse(formData.get(\"images\"));\n        const sizeGuideImage = formData.get(\"sizeGuideImage\");\n        const colors = JSON.parse(formData.get(\"colors\") || \"[]\");\n        const { db } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"connectToDatabase\"])();\n        const product = {\n            name,\n            description,\n            details,\n            price,\n            category,\n            collection,\n            productCode,\n            images,\n            sizeGuideImage,\n            quantityM,\n            quantityL,\n            quantityXL,\n            quantityHat,\n            colors,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        const result = await db.collection(\"products\").insertOne(product);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: true,\n            product: {\n                ...product,\n                _id: result.insertedId\n            }\n        });\n    } catch (error) {\n        console.error(\"Error creating product:\", error);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: false,\n            error: \"Failed to create product\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const id = searchParams.get(\"id\");\n        if (!id) {\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                ok: false,\n                error: \"Product ID is required\"\n            }, {\n                status: 400\n            });\n        }\n        const formData = await request.formData();\n        const updateData = {\n            name: formData.get(\"name\"),\n            description: formData.get(\"description\"),\n            details: formData.get(\"details\"),\n            price: Number(formData.get(\"price\")),\n            category: formData.get(\"category\"),\n            quantityM: Number(formData.get(\"quantityM\")),\n            quantityL: Number(formData.get(\"quantityL\")),\n            quantityXL: Number(formData.get(\"quantityXL\")),\n            quantityHat: Number(formData.get(\"quantityHat\")),\n            colors: JSON.parse(formData.get(\"colors\") || \"[]\"),\n            updatedAt: new Date().toISOString()\n        };\n        // Handle size guide image upload if exists\n        const sizeGuideImage = formData.get(\"sizeGuideImage\");\n        if (sizeGuideImage) {\n            const sizeGuideFormData = new FormData();\n            sizeGuideFormData.append(\"file\", sizeGuideImage);\n            const uploadResponse = await fetch(\"/api/upload\", {\n                method: \"POST\",\n                body: sizeGuideFormData\n            });\n            if (!uploadResponse.ok) {\n                throw new Error(\"Failed to upload size guide image\");\n            }\n            const uploadData = await uploadResponse.json();\n            updateData.sizeGuideImage = uploadData.url;\n        }\n        const { db } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"connectToDatabase\"])();\n        const result = await db.collection(\"products\").updateOne({\n            _id: new __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__[\"ObjectId\"](id)\n        }, {\n            $set: updateData\n        });\n        if (result.matchedCount === 0) {\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                ok: false,\n                error: \"Product not found\"\n            }, {\n                status: 404\n            });\n        }\n        const updatedProduct = await db.collection(\"products\").findOne({\n            _id: new __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__[\"ObjectId\"](id)\n        });\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: true,\n            product: updatedProduct\n        });\n    } catch (error) {\n        console.error(\"Error updating product:\", error);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: false,\n            error: \"Failed to update product\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function DELETE(request, { params }) {\n    try {\n        const { db } = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$src$2f$lib$2f$mongodb$2e$ts__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"connectToDatabase\"])();\n        const { id } = params;\n        const result = await db.collection(\"products\").deleteOne({\n            _id: new __TURBOPACK__imported__module__$5b$externals$5d2f$mongodb__$5b$external$5d$__$28$mongodb$2c$__cjs$29$__[\"ObjectId\"](id)\n        });\n        if (result.deletedCount === 0) {\n            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n                ok: false,\n                error: \"Product not found\"\n            }, {\n                status: 404\n            });\n        }\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: true\n        });\n    } catch (error) {\n        console.error(\"Error deleting product:\", error);\n        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$server$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__[\"NextResponse\"].json({\n            ok: false,\n            error: \"Failed to delete product\"\n        }, {\n            status: 500\n        });\n    }\n}\n}}),\n\n};\n\n//# sourceMappingURL=%5Broot-of-the-server%5D__874d7a39._.js.map"
        }
    ]
}